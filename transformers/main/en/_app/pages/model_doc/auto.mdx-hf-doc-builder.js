import{S as vca,i as Fca,s as Tca,e as a,k as l,w as F,t as o,M as Mca,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Eca,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Q_t}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Cca($){let g,v,u,f,p,d,h,Lo,od,Tf,ut,rd,td,i9,Mf,Ve,Ue,ad,Zn,d9,es,os,c9,nd,rs,m9,sd,Ef,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Lo=o(`, make sure its
`),od=a("code"),Tf=o("model_type"),ut=o(" attribute is set to the same key you use when registering the config (here "),rd=a("code"),td=o('"new-model"'),i9=o(")."),Mf=l(),Ve=a("p"),Ue=o("Likewise, if your "),ad=a("code"),Zn=o("NewModel"),d9=o(" is a subclass of "),es=a("a"),os=o("PreTrainedModel"),c9=o(`, make sure its
`),nd=a("code"),rs=o("config_class"),m9=o(` attribute is set to the same class you use when registering the model (here
`),sd=a("code"),Ef=o("NewModelConfig"),Qa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var fB=s(u);f=r(fB,"NewModelConfig"),fB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ld=s(d);h=r(ld,"PretrainedConfig"),ld.forEach(t),Lo=r(Ae,`, make sure its
`),od=n(Ae,"CODE",{});var gB=s(od);Tf=r(gB,"model_type"),gB.forEach(t),ut=r(Ae," attribute is set to the same key you use when registering the config (here "),rd=n(Ae,"CODE",{});var hB=s(rd);td=r(hB,'"new-model"'),hB.forEach(t),i9=r(Ae,")."),Ae.forEach(t),Mf=i(He),Ve=n(He,"P",{});var yo=s(Ve);Ue=r(yo,"Likewise, if your "),ad=n(yo,"CODE",{});var Wa=s(ad);Zn=r(Wa,"NewModel"),Wa.forEach(t),d9=r(yo," is a subclass of "),es=n(yo,"A",{href:!0});var uB=s(es);os=r(uB,"PreTrainedModel"),uB.forEach(t),c9=r(yo,`, make sure its
`),nd=n(yo,"CODE",{});var Cf=s(nd);rs=r(Cf,"config_class"),Cf.forEach(t),m9=r(yo,` attribute is set to the same class you use when registering the model (here
`),sd=n(yo,"CODE",{});var pB=s(sd);Ef=r(pB,"NewModelConfig"),pB.forEach(t),Qa=r(yo,")."),yo.forEach(t),this.h()},h(){c(es,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Lo),e(g,od),e(od,Tf),e(g,ut),e(g,rd),e(rd,td),e(g,i9),b(He,Mf,Ae),b(He,Ve,Ae),e(Ve,Ue),e(Ve,ad),e(ad,Zn),e(Ve,d9),e(Ve,es),e(es,os),e(Ve,c9),e(Ve,nd),e(nd,rs),e(Ve,m9),e(Ve,sd),e(sd,Ef),e(Ve,Qa)},d(He){He&&t(g),He&&t(Mf),He&&t(Ve)}}}function wca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lca($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Lo=s(u);f=r(Lo,"use_auth_token=True"),Lo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function yca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xca($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Lo=s(u);f=r(Lo,"use_auth_token=True"),Lo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function $ca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ica($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ema($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ama($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ima($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ema($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ama($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ima($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function efa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ofa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function afa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ifa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ffa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ufa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _fa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ffa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Efa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Afa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xfa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $fa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kfa($){let g,v,u,f,p,d,h,Lo,od,Tf,ut,rd,td,i9,Mf,Ve,Ue,ad,Zn,d9,es,os,c9,nd,rs,m9,sd,Ef,Qa,He,Ae,fB,ld,gB,hB,yo,Wa,uB,Cf,pB,_oo,DJe,id,wf,wie,f9,boo,Aie,voo,GJe,ts,Foo,Lie,Too,Moo,yie,Eoo,Coo,OJe,g9,VJe,_B,woo,XJe,Af,zJe,dd,Lf,xie,h9,Aoo,$ie,Loo,QJe,xo,u9,yoo,p9,xoo,bB,$oo,koo,Soo,_9,Roo,kie,Poo,Boo,Ioo,Pr,b9,Noo,Sie,qoo,joo,cd,Doo,Rie,Goo,Ooo,Pie,Voo,Xoo,zoo,A,yf,Bie,Qoo,Woo,vB,Uoo,Hoo,Joo,xf,Iie,Yoo,Koo,FB,Zoo,ero,oro,$f,Nie,rro,tro,TB,aro,nro,sro,kf,qie,lro,iro,MB,dro,cro,mro,Sf,jie,fro,gro,EB,hro,uro,pro,Rf,Die,_ro,bro,CB,vro,Fro,Tro,Pf,Gie,Mro,Ero,wB,Cro,wro,Aro,Bf,Oie,Lro,yro,AB,xro,$ro,kro,If,Vie,Sro,Rro,LB,Pro,Bro,Iro,Nf,Xie,Nro,qro,yB,jro,Dro,Gro,qf,zie,Oro,Vro,xB,Xro,zro,Qro,jf,Qie,Wro,Uro,$B,Hro,Jro,Yro,Df,Wie,Kro,Zro,kB,eto,oto,rto,Gf,Uie,tto,ato,SB,nto,sto,lto,Of,Hie,ito,dto,RB,cto,mto,fto,Vf,Jie,gto,hto,PB,uto,pto,_to,Xf,Yie,bto,vto,BB,Fto,Tto,Mto,zf,Kie,Eto,Cto,IB,wto,Ato,Lto,Qf,Zie,yto,xto,NB,$to,kto,Sto,Wf,ede,Rto,Pto,qB,Bto,Ito,Nto,Uf,ode,qto,jto,jB,Dto,Gto,Oto,Hf,rde,Vto,Xto,DB,zto,Qto,Wto,Jf,tde,Uto,Hto,GB,Jto,Yto,Kto,Yf,ade,Zto,eao,OB,oao,rao,tao,Kf,nde,aao,nao,VB,sao,lao,iao,Zf,sde,dao,cao,XB,mao,fao,gao,eg,lde,hao,uao,zB,pao,_ao,bao,og,ide,vao,Fao,QB,Tao,Mao,Eao,rg,dde,Cao,wao,WB,Aao,Lao,yao,tg,cde,xao,$ao,UB,kao,Sao,Rao,ag,mde,Pao,Bao,HB,Iao,Nao,qao,ng,fde,jao,Dao,JB,Gao,Oao,Vao,sg,gde,Xao,zao,YB,Qao,Wao,Uao,lg,hde,Hao,Jao,KB,Yao,Kao,Zao,ig,ude,eno,ono,ZB,rno,tno,ano,dg,pde,nno,sno,eI,lno,ino,dno,cg,_de,cno,mno,oI,fno,gno,hno,mg,bde,uno,pno,rI,_no,bno,vno,fg,vde,Fno,Tno,tI,Mno,Eno,Cno,gg,Fde,wno,Ano,aI,Lno,yno,xno,hg,Tde,$no,kno,nI,Sno,Rno,Pno,ug,Mde,Bno,Ino,sI,Nno,qno,jno,pg,Ede,Dno,Gno,lI,Ono,Vno,Xno,_g,Cde,zno,Qno,iI,Wno,Uno,Hno,bg,wde,Jno,Yno,dI,Kno,Zno,eso,vg,Ade,oso,rso,cI,tso,aso,nso,Fg,Lde,sso,lso,mI,iso,dso,cso,Tg,yde,mso,fso,fI,gso,hso,uso,Mg,xde,pso,_so,gI,bso,vso,Fso,Eg,$de,Tso,Mso,hI,Eso,Cso,wso,Cg,kde,Aso,Lso,uI,yso,xso,$so,wg,Sde,kso,Sso,pI,Rso,Pso,Bso,Ag,Rde,Iso,Nso,_I,qso,jso,Dso,Lg,Pde,Gso,Oso,bI,Vso,Xso,zso,yg,Bde,Qso,Wso,vI,Uso,Hso,Jso,xg,Ide,Yso,Kso,FI,Zso,elo,olo,$g,Nde,rlo,tlo,TI,alo,nlo,slo,kg,qde,llo,ilo,MI,dlo,clo,mlo,Sg,jde,flo,glo,EI,hlo,ulo,plo,Rg,Dde,_lo,blo,CI,vlo,Flo,Tlo,Pg,Gde,Mlo,Elo,wI,Clo,wlo,Alo,Bg,Ode,Llo,ylo,AI,xlo,$lo,klo,Ig,Vde,Slo,Rlo,LI,Plo,Blo,Ilo,Ng,Xde,Nlo,qlo,yI,jlo,Dlo,Glo,qg,zde,Olo,Vlo,xI,Xlo,zlo,Qlo,jg,Qde,Wlo,Ulo,$I,Hlo,Jlo,Ylo,Dg,Wde,Klo,Zlo,kI,eio,oio,rio,Gg,Ude,tio,aio,SI,nio,sio,lio,Og,Hde,iio,dio,RI,cio,mio,fio,Vg,Jde,gio,hio,PI,uio,pio,_io,Xg,Yde,bio,vio,BI,Fio,Tio,Mio,zg,Kde,Eio,Cio,II,wio,Aio,Lio,Qg,Zde,yio,xio,NI,$io,kio,Sio,Wg,ece,Rio,Pio,qI,Bio,Iio,Nio,Ug,oce,qio,jio,jI,Dio,Gio,Oio,Hg,rce,Vio,Xio,DI,zio,Qio,Wio,Jg,tce,Uio,Hio,GI,Jio,Yio,Kio,Yg,ace,Zio,edo,OI,odo,rdo,tdo,Kg,nce,ado,ndo,VI,sdo,ldo,ido,Zg,sce,ddo,cdo,XI,mdo,fdo,gdo,eh,lce,hdo,udo,zI,pdo,_do,bdo,oh,ice,vdo,Fdo,QI,Tdo,Mdo,Edo,rh,dce,Cdo,wdo,WI,Ado,Ldo,ydo,th,cce,xdo,$do,UI,kdo,Sdo,Rdo,ah,mce,Pdo,Bdo,HI,Ido,Ndo,qdo,nh,fce,jdo,Ddo,JI,Gdo,Odo,Vdo,sh,gce,Xdo,zdo,YI,Qdo,Wdo,Udo,lh,hce,Hdo,Jdo,KI,Ydo,Kdo,Zdo,ih,uce,eco,oco,ZI,rco,tco,aco,dh,pce,nco,sco,eN,lco,ico,dco,ch,_ce,cco,mco,oN,fco,gco,hco,mh,bce,uco,pco,rN,_co,bco,vco,fh,vce,Fco,Tco,tN,Mco,Eco,Cco,gh,Fce,wco,Aco,aN,Lco,yco,xco,hh,Tce,$co,kco,nN,Sco,Rco,Pco,uh,Mce,Bco,Ico,sN,Nco,qco,jco,ph,Ece,Dco,Gco,lN,Oco,Vco,Xco,_h,Cce,zco,Qco,iN,Wco,Uco,Hco,bh,wce,Jco,Yco,dN,Kco,Zco,emo,vh,Ace,omo,rmo,cN,tmo,amo,nmo,Fh,Lce,smo,lmo,mN,imo,dmo,cmo,Th,yce,mmo,fmo,fN,gmo,hmo,umo,Mh,xce,pmo,_mo,gN,bmo,vmo,Fmo,Eh,$ce,Tmo,Mmo,hN,Emo,Cmo,wmo,Ch,kce,Amo,Lmo,uN,ymo,xmo,$mo,wh,Sce,kmo,Smo,pN,Rmo,Pmo,Bmo,Ah,Rce,Imo,Nmo,_N,qmo,jmo,Dmo,Lh,Pce,Gmo,Omo,bN,Vmo,Xmo,zmo,yh,Bce,Qmo,Wmo,vN,Umo,Hmo,Jmo,xh,Ice,Ymo,Kmo,FN,Zmo,efo,ofo,$h,Nce,rfo,tfo,TN,afo,nfo,sfo,kh,qce,lfo,ifo,MN,dfo,cfo,mfo,Sh,jce,ffo,gfo,EN,hfo,ufo,pfo,Rh,Dce,_fo,bfo,CN,vfo,Ffo,Tfo,Ph,Gce,Mfo,Efo,wN,Cfo,wfo,Afo,Bh,Oce,Lfo,yfo,AN,xfo,$fo,kfo,Ih,Vce,Sfo,Rfo,LN,Pfo,Bfo,Ifo,Nh,Xce,Nfo,qfo,yN,jfo,Dfo,Gfo,qh,zce,Ofo,Vfo,xN,Xfo,zfo,Qfo,jh,Qce,Wfo,Ufo,$N,Hfo,Jfo,Yfo,Dh,Wce,Kfo,Zfo,kN,ego,ogo,rgo,Gh,Uce,tgo,ago,SN,ngo,sgo,lgo,Oh,Hce,igo,dgo,RN,cgo,mgo,fgo,Vh,Jce,ggo,hgo,PN,ugo,pgo,_go,Xh,bgo,zh,v9,vgo,Yce,Fgo,WJe,md,Qh,Kce,F9,Tgo,Zce,Mgo,UJe,$o,T9,Ego,M9,Cgo,BN,wgo,Ago,Lgo,E9,ygo,eme,xgo,$go,kgo,Br,C9,Sgo,ome,Rgo,Pgo,Ua,Bgo,rme,Igo,Ngo,tme,qgo,jgo,ame,Dgo,Ggo,Ogo,k,as,nme,Vgo,Xgo,IN,zgo,Qgo,NN,Wgo,Ugo,Hgo,ns,sme,Jgo,Ygo,qN,Kgo,Zgo,jN,eho,oho,rho,ss,lme,tho,aho,DN,nho,sho,GN,lho,iho,dho,Wh,ime,cho,mho,ON,fho,gho,hho,ls,dme,uho,pho,VN,_ho,bho,XN,vho,Fho,Tho,Uh,cme,Mho,Eho,zN,Cho,who,Aho,Hh,mme,Lho,yho,QN,xho,$ho,kho,Jh,fme,Sho,Rho,WN,Pho,Bho,Iho,is,gme,Nho,qho,UN,jho,Dho,HN,Gho,Oho,Vho,ds,hme,Xho,zho,JN,Qho,Who,YN,Uho,Hho,Jho,cs,ume,Yho,Kho,KN,Zho,euo,ZN,ouo,ruo,tuo,Yh,pme,auo,nuo,eq,suo,luo,iuo,Kh,_me,duo,cuo,oq,muo,fuo,guo,Zh,bme,huo,uuo,rq,puo,_uo,buo,ms,vme,vuo,Fuo,tq,Tuo,Muo,aq,Euo,Cuo,wuo,eu,Fme,Auo,Luo,nq,yuo,xuo,$uo,fs,Tme,kuo,Suo,sq,Ruo,Puo,lq,Buo,Iuo,Nuo,gs,Mme,quo,juo,iq,Duo,Guo,dq,Ouo,Vuo,Xuo,hs,Eme,zuo,Quo,cq,Wuo,Uuo,mq,Huo,Juo,Yuo,us,Cme,Kuo,Zuo,fq,epo,opo,gq,rpo,tpo,apo,ou,wme,npo,spo,hq,lpo,ipo,dpo,ps,Ame,cpo,mpo,uq,fpo,gpo,pq,hpo,upo,ppo,_s,Lme,_po,bpo,_q,vpo,Fpo,bq,Tpo,Mpo,Epo,bs,yme,Cpo,wpo,vq,Apo,Lpo,Fq,ypo,xpo,$po,vs,xme,kpo,Spo,Tq,Rpo,Ppo,Mq,Bpo,Ipo,Npo,Fs,$me,qpo,jpo,Eq,Dpo,Gpo,Cq,Opo,Vpo,Xpo,Ts,kme,zpo,Qpo,wq,Wpo,Upo,Aq,Hpo,Jpo,Ypo,ru,Sme,Kpo,Zpo,Lq,e_o,o_o,r_o,Ms,Rme,t_o,a_o,yq,n_o,s_o,xq,l_o,i_o,d_o,tu,Pme,c_o,m_o,$q,f_o,g_o,h_o,Es,Bme,u_o,p_o,kq,__o,b_o,Sq,v_o,F_o,T_o,Cs,Ime,M_o,E_o,Rq,C_o,w_o,Pq,A_o,L_o,y_o,ws,Nme,x_o,$_o,Bq,k_o,S_o,Iq,R_o,P_o,B_o,au,qme,I_o,N_o,Nq,q_o,j_o,D_o,As,jme,G_o,O_o,qq,V_o,X_o,jq,z_o,Q_o,W_o,Ls,Dme,U_o,H_o,Dq,J_o,Y_o,Gq,K_o,Z_o,ebo,ys,Gme,obo,rbo,Oq,tbo,abo,Vq,nbo,sbo,lbo,nu,Ome,ibo,dbo,Xq,cbo,mbo,fbo,xs,Vme,gbo,hbo,zq,ubo,pbo,Qq,_bo,bbo,vbo,$s,Xme,Fbo,Tbo,Wq,Mbo,Ebo,Uq,Cbo,wbo,Abo,ks,zme,Lbo,ybo,Hq,xbo,$bo,Jq,kbo,Sbo,Rbo,Ss,Qme,Pbo,Bbo,Yq,Ibo,Nbo,Kq,qbo,jbo,Dbo,Rs,Wme,Gbo,Obo,Zq,Vbo,Xbo,ej,zbo,Qbo,Wbo,Ps,Ume,Ubo,Hbo,oj,Jbo,Ybo,rj,Kbo,Zbo,e2o,Bs,Hme,o2o,r2o,tj,t2o,a2o,aj,n2o,s2o,l2o,Is,Jme,i2o,d2o,nj,c2o,m2o,sj,f2o,g2o,h2o,su,Yme,u2o,p2o,lj,_2o,b2o,v2o,Ns,Kme,F2o,T2o,ij,M2o,E2o,dj,C2o,w2o,A2o,lu,Zme,L2o,y2o,cj,x2o,$2o,k2o,iu,efe,S2o,R2o,mj,P2o,B2o,I2o,qs,ofe,N2o,q2o,fj,j2o,D2o,gj,G2o,O2o,V2o,js,rfe,X2o,z2o,hj,Q2o,W2o,uj,U2o,H2o,J2o,Ds,tfe,Y2o,K2o,pj,Z2o,evo,_j,ovo,rvo,tvo,du,afe,avo,nvo,bj,svo,lvo,ivo,Gs,nfe,dvo,cvo,vj,mvo,fvo,Fj,gvo,hvo,uvo,Os,sfe,pvo,_vo,Tj,bvo,vvo,Mj,Fvo,Tvo,Mvo,Vs,lfe,Evo,Cvo,Ej,wvo,Avo,Cj,Lvo,yvo,xvo,Xs,ife,$vo,kvo,wj,Svo,Rvo,Aj,Pvo,Bvo,Ivo,zs,dfe,Nvo,qvo,Lj,jvo,Dvo,yj,Gvo,Ovo,Vvo,Qs,cfe,Xvo,zvo,xj,Qvo,Wvo,$j,Uvo,Hvo,Jvo,Ws,mfe,Yvo,Kvo,kj,Zvo,e1o,Sj,o1o,r1o,t1o,Us,ffe,a1o,n1o,Rj,s1o,l1o,Pj,i1o,d1o,c1o,cu,gfe,m1o,f1o,Bj,g1o,h1o,u1o,Hs,hfe,p1o,_1o,Ij,b1o,v1o,Nj,F1o,T1o,M1o,Js,ufe,E1o,C1o,qj,w1o,A1o,jj,L1o,y1o,x1o,mu,pfe,$1o,k1o,Dj,S1o,R1o,P1o,fu,_fe,B1o,I1o,Gj,N1o,q1o,j1o,gu,bfe,D1o,G1o,Oj,O1o,V1o,X1o,hu,vfe,z1o,Q1o,Vj,W1o,U1o,H1o,Ys,Ffe,J1o,Y1o,Xj,K1o,Z1o,zj,eFo,oFo,rFo,uu,Tfe,tFo,aFo,Qj,nFo,sFo,lFo,Ks,Mfe,iFo,dFo,Wj,cFo,mFo,Uj,fFo,gFo,hFo,Zs,Efe,uFo,pFo,Hj,_Fo,bFo,Jj,vFo,FFo,TFo,el,Cfe,MFo,EFo,Yj,CFo,wFo,Kj,AFo,LFo,yFo,ol,wfe,xFo,$Fo,Zj,kFo,SFo,eD,RFo,PFo,BFo,rl,Afe,IFo,NFo,oD,qFo,jFo,rD,DFo,GFo,OFo,tl,Lfe,VFo,XFo,tD,zFo,QFo,aD,WFo,UFo,HFo,pu,yfe,JFo,YFo,nD,KFo,ZFo,eTo,_u,xfe,oTo,rTo,sD,tTo,aTo,nTo,al,$fe,sTo,lTo,lD,iTo,dTo,iD,cTo,mTo,fTo,nl,kfe,gTo,hTo,dD,uTo,pTo,cD,_To,bTo,vTo,sl,Sfe,FTo,TTo,mD,MTo,ETo,fD,CTo,wTo,ATo,bu,Rfe,LTo,yTo,gD,xTo,$To,kTo,vu,Pfe,STo,RTo,hD,PTo,BTo,ITo,Fu,Bfe,NTo,qTo,uD,jTo,DTo,GTo,ll,Ife,OTo,VTo,pD,XTo,zTo,_D,QTo,WTo,UTo,il,Nfe,HTo,JTo,bD,YTo,KTo,vD,ZTo,eMo,oMo,Tu,qfe,rMo,tMo,FD,aMo,nMo,sMo,Mu,jfe,lMo,iMo,TD,dMo,cMo,mMo,Eu,Dfe,fMo,gMo,MD,hMo,uMo,pMo,dl,Gfe,_Mo,bMo,ED,vMo,FMo,CD,TMo,MMo,EMo,cl,Ofe,CMo,wMo,wD,AMo,LMo,AD,yMo,xMo,$Mo,Cu,Vfe,kMo,SMo,LD,RMo,PMo,BMo,wu,Xfe,IMo,NMo,yD,qMo,jMo,DMo,ml,zfe,GMo,OMo,xD,VMo,XMo,$D,zMo,QMo,WMo,fl,Qfe,UMo,HMo,kD,JMo,YMo,SD,KMo,ZMo,eEo,gl,Wfe,oEo,rEo,RD,tEo,aEo,PD,nEo,sEo,lEo,hl,Ufe,iEo,dEo,BD,cEo,mEo,ID,fEo,gEo,hEo,Au,uEo,Lu,w9,pEo,Hfe,_Eo,HJe,fd,yu,Jfe,A9,bEo,Yfe,vEo,JJe,ko,L9,FEo,y9,TEo,ND,MEo,EEo,CEo,x9,wEo,Kfe,AEo,LEo,yEo,Je,$9,xEo,Zfe,$Eo,kEo,Ha,SEo,ege,REo,PEo,oge,BEo,IEo,rge,NEo,qEo,jEo,Q,xu,tge,DEo,GEo,qD,OEo,VEo,XEo,$u,age,zEo,QEo,jD,WEo,UEo,HEo,ku,nge,JEo,YEo,DD,KEo,ZEo,e4o,Su,sge,o4o,r4o,GD,t4o,a4o,n4o,Ru,lge,s4o,l4o,OD,i4o,d4o,c4o,Pu,ige,m4o,f4o,VD,g4o,h4o,u4o,Bu,dge,p4o,_4o,XD,b4o,v4o,F4o,Iu,cge,T4o,M4o,zD,E4o,C4o,w4o,Nu,mge,A4o,L4o,QD,y4o,x4o,$4o,qu,fge,k4o,S4o,WD,R4o,P4o,B4o,ju,gge,I4o,N4o,UD,q4o,j4o,D4o,Du,hge,G4o,O4o,HD,V4o,X4o,z4o,Gu,uge,Q4o,W4o,JD,U4o,H4o,J4o,Ou,pge,Y4o,K4o,YD,Z4o,eCo,oCo,Vu,_ge,rCo,tCo,KD,aCo,nCo,sCo,Xu,bge,lCo,iCo,ZD,dCo,cCo,mCo,zu,vge,fCo,gCo,eG,hCo,uCo,pCo,Qu,Fge,_Co,bCo,oG,vCo,FCo,TCo,Wu,Tge,MCo,ECo,rG,CCo,wCo,ACo,Uu,Mge,LCo,yCo,tG,xCo,$Co,kCo,Hu,Ege,SCo,RCo,aG,PCo,BCo,ICo,Ju,Cge,NCo,qCo,nG,jCo,DCo,GCo,Yu,wge,OCo,VCo,sG,XCo,zCo,QCo,Ku,Age,WCo,UCo,lG,HCo,JCo,YCo,Zu,Lge,KCo,ZCo,iG,e3o,o3o,r3o,ep,yge,t3o,a3o,dG,n3o,s3o,l3o,op,xge,i3o,d3o,cG,c3o,m3o,f3o,rp,$ge,g3o,h3o,mG,u3o,p3o,_3o,tp,kge,b3o,v3o,fG,F3o,T3o,M3o,ap,Sge,E3o,C3o,gG,w3o,A3o,L3o,np,Rge,y3o,x3o,hG,$3o,k3o,S3o,sp,Pge,R3o,P3o,uG,B3o,I3o,N3o,lp,Bge,q3o,j3o,pG,D3o,G3o,O3o,ip,Ige,V3o,X3o,_G,z3o,Q3o,W3o,dp,Nge,U3o,H3o,bG,J3o,Y3o,K3o,cp,qge,Z3o,e5o,vG,o5o,r5o,t5o,mp,jge,a5o,n5o,FG,s5o,l5o,i5o,fp,Dge,d5o,c5o,TG,m5o,f5o,g5o,gp,Gge,h5o,u5o,MG,p5o,_5o,b5o,hp,v5o,up,F5o,pp,k9,T5o,Oge,M5o,YJe,gd,_p,Vge,S9,E5o,Xge,C5o,KJe,So,R9,w5o,P9,A5o,EG,L5o,y5o,x5o,B9,$5o,zge,k5o,S5o,R5o,Ye,I9,P5o,Qge,B5o,I5o,hd,N5o,Wge,q5o,j5o,Uge,D5o,G5o,O5o,ie,bp,Hge,V5o,X5o,CG,z5o,Q5o,W5o,vp,Jge,U5o,H5o,wG,J5o,Y5o,K5o,Fp,Yge,Z5o,e0o,AG,o0o,r0o,t0o,Tp,Kge,a0o,n0o,LG,s0o,l0o,i0o,Mp,Zge,d0o,c0o,yG,m0o,f0o,g0o,Ep,ehe,h0o,u0o,xG,p0o,_0o,b0o,Cp,ohe,v0o,F0o,$G,T0o,M0o,E0o,wp,rhe,C0o,w0o,kG,A0o,L0o,y0o,Ap,the,x0o,$0o,SG,k0o,S0o,R0o,Lp,ahe,P0o,B0o,RG,I0o,N0o,q0o,yp,nhe,j0o,D0o,PG,G0o,O0o,V0o,xp,she,X0o,z0o,BG,Q0o,W0o,U0o,$p,lhe,H0o,J0o,IG,Y0o,K0o,Z0o,kp,ihe,ewo,owo,NG,rwo,two,awo,Sp,dhe,nwo,swo,qG,lwo,iwo,dwo,Rp,che,cwo,mwo,jG,fwo,gwo,hwo,Pp,mhe,uwo,pwo,DG,_wo,bwo,vwo,Bp,fhe,Fwo,Two,GG,Mwo,Ewo,Cwo,Ip,ghe,wwo,Awo,OG,Lwo,ywo,xwo,Np,hhe,$wo,kwo,VG,Swo,Rwo,Pwo,qp,uhe,Bwo,Iwo,XG,Nwo,qwo,jwo,jp,Dwo,Dp,Gwo,Gp,N9,Owo,phe,Vwo,ZJe,ud,Op,_he,q9,Xwo,bhe,zwo,eYe,Ro,j9,Qwo,pd,Wwo,zG,Uwo,Hwo,QG,Jwo,Ywo,Kwo,D9,Zwo,vhe,eAo,oAo,rAo,pt,G9,tAo,Fhe,aAo,nAo,_d,sAo,The,lAo,iAo,WG,dAo,cAo,mAo,Vp,fAo,Ke,O9,gAo,Mhe,hAo,uAo,Ja,pAo,Ehe,_Ao,bAo,Che,vAo,FAo,whe,TAo,MAo,EAo,y,Xp,Ahe,CAo,wAo,UG,AAo,LAo,yAo,zp,Lhe,xAo,$Ao,HG,kAo,SAo,RAo,Qp,yhe,PAo,BAo,JG,IAo,NAo,qAo,Wp,xhe,jAo,DAo,YG,GAo,OAo,VAo,Up,$he,XAo,zAo,KG,QAo,WAo,UAo,Hp,khe,HAo,JAo,ZG,YAo,KAo,ZAo,Jp,She,e6o,o6o,eO,r6o,t6o,a6o,Yp,Rhe,n6o,s6o,oO,l6o,i6o,d6o,Kp,Phe,c6o,m6o,rO,f6o,g6o,h6o,Zp,Bhe,u6o,p6o,tO,_6o,b6o,v6o,e_,Ihe,F6o,T6o,aO,M6o,E6o,C6o,o_,Nhe,w6o,A6o,nO,L6o,y6o,x6o,r_,qhe,$6o,k6o,sO,S6o,R6o,P6o,t_,jhe,B6o,I6o,lO,N6o,q6o,j6o,a_,Dhe,D6o,G6o,iO,O6o,V6o,X6o,n_,Ghe,z6o,Q6o,dO,W6o,U6o,H6o,s_,Ohe,J6o,Y6o,cO,K6o,Z6o,e7o,l_,Vhe,o7o,r7o,mO,t7o,a7o,n7o,i_,Xhe,s7o,l7o,fO,i7o,d7o,c7o,d_,zhe,m7o,f7o,gO,g7o,h7o,u7o,c_,Qhe,p7o,_7o,hO,b7o,v7o,F7o,m_,Whe,T7o,M7o,uO,E7o,C7o,w7o,f_,Uhe,A7o,L7o,pO,y7o,x7o,$7o,g_,Hhe,k7o,S7o,_O,R7o,P7o,B7o,h_,Jhe,I7o,N7o,bO,q7o,j7o,D7o,u_,Yhe,G7o,O7o,vO,V7o,X7o,z7o,p_,Khe,Q7o,W7o,FO,U7o,H7o,J7o,__,Zhe,Y7o,K7o,TO,Z7o,eLo,oLo,b_,eue,rLo,tLo,MO,aLo,nLo,sLo,v_,oue,lLo,iLo,EO,dLo,cLo,mLo,F_,rue,fLo,gLo,CO,hLo,uLo,pLo,T_,tue,_Lo,bLo,wO,vLo,FLo,TLo,M_,aue,MLo,ELo,AO,CLo,wLo,ALo,E_,nue,LLo,yLo,LO,xLo,$Lo,kLo,C_,sue,SLo,RLo,yO,PLo,BLo,ILo,ul,lue,NLo,qLo,xO,jLo,DLo,$O,GLo,OLo,VLo,w_,iue,XLo,zLo,kO,QLo,WLo,ULo,A_,due,HLo,JLo,SO,YLo,KLo,ZLo,L_,cue,eyo,oyo,RO,ryo,tyo,ayo,y_,mue,nyo,syo,PO,lyo,iyo,dyo,x_,fue,cyo,myo,BO,fyo,gyo,hyo,$_,gue,uyo,pyo,IO,_yo,byo,vyo,k_,hue,Fyo,Tyo,NO,Myo,Eyo,Cyo,S_,uue,wyo,Ayo,qO,Lyo,yyo,xyo,R_,pue,$yo,kyo,jO,Syo,Ryo,Pyo,P_,_ue,Byo,Iyo,DO,Nyo,qyo,jyo,B_,bue,Dyo,Gyo,GO,Oyo,Vyo,Xyo,I_,vue,zyo,Qyo,OO,Wyo,Uyo,Hyo,N_,Fue,Jyo,Yyo,VO,Kyo,Zyo,e8o,q_,Tue,o8o,r8o,XO,t8o,a8o,n8o,j_,Mue,s8o,l8o,zO,i8o,d8o,c8o,D_,Eue,m8o,f8o,QO,g8o,h8o,u8o,G_,Cue,p8o,_8o,WO,b8o,v8o,F8o,O_,wue,T8o,M8o,UO,E8o,C8o,w8o,V_,Aue,A8o,L8o,HO,y8o,x8o,$8o,X_,Lue,k8o,S8o,JO,R8o,P8o,B8o,z_,yue,I8o,N8o,YO,q8o,j8o,D8o,Q_,xue,G8o,O8o,KO,V8o,X8o,z8o,W_,$ue,Q8o,W8o,ZO,U8o,H8o,J8o,U_,kue,Y8o,K8o,eV,Z8o,e9o,o9o,H_,Sue,r9o,t9o,oV,a9o,n9o,s9o,J_,Rue,l9o,i9o,rV,d9o,c9o,m9o,Y_,Pue,f9o,g9o,tV,h9o,u9o,p9o,K_,Bue,_9o,b9o,aV,v9o,F9o,T9o,Z_,Iue,M9o,E9o,nV,C9o,w9o,A9o,eb,Nue,L9o,y9o,sV,x9o,$9o,k9o,ob,que,S9o,R9o,lV,P9o,B9o,I9o,rb,jue,N9o,q9o,iV,j9o,D9o,G9o,tb,Due,O9o,V9o,dV,X9o,z9o,Q9o,ab,Gue,W9o,U9o,cV,H9o,J9o,Y9o,nb,Oue,K9o,Z9o,mV,exo,oxo,rxo,sb,Vue,txo,axo,fV,nxo,sxo,lxo,lb,Xue,ixo,dxo,gV,cxo,mxo,fxo,ib,zue,gxo,hxo,hV,uxo,pxo,_xo,db,Que,bxo,vxo,uV,Fxo,Txo,Mxo,cb,Wue,Exo,Cxo,pV,wxo,Axo,Lxo,mb,Uue,yxo,xxo,_V,$xo,kxo,Sxo,fb,Hue,Rxo,Pxo,bV,Bxo,Ixo,Nxo,gb,Jue,qxo,jxo,vV,Dxo,Gxo,Oxo,hb,Yue,Vxo,Xxo,FV,zxo,Qxo,Wxo,ub,Kue,Uxo,Hxo,TV,Jxo,Yxo,Kxo,pb,Zue,Zxo,e$o,MV,o$o,r$o,t$o,_b,epe,a$o,n$o,EV,s$o,l$o,i$o,bb,ope,d$o,c$o,CV,m$o,f$o,g$o,vb,rpe,h$o,u$o,wV,p$o,_$o,b$o,Fb,tpe,v$o,F$o,AV,T$o,M$o,E$o,Tb,ape,C$o,w$o,LV,A$o,L$o,y$o,Mb,npe,x$o,$$o,yV,k$o,S$o,R$o,Eb,spe,P$o,B$o,xV,I$o,N$o,q$o,Cb,lpe,j$o,D$o,$V,G$o,O$o,V$o,wb,ipe,X$o,z$o,kV,Q$o,W$o,U$o,Ab,dpe,H$o,J$o,SV,Y$o,K$o,Z$o,Lb,cpe,eko,oko,RV,rko,tko,ako,yb,mpe,nko,sko,PV,lko,iko,dko,xb,fpe,cko,mko,BV,fko,gko,hko,$b,gpe,uko,pko,IV,_ko,bko,vko,kb,hpe,Fko,Tko,NV,Mko,Eko,Cko,Sb,upe,wko,Ako,qV,Lko,yko,xko,Rb,ppe,$ko,kko,jV,Sko,Rko,Pko,Pb,_pe,Bko,Iko,DV,Nko,qko,jko,Bb,bpe,Dko,Gko,GV,Oko,Vko,Xko,Ib,vpe,zko,Qko,OV,Wko,Uko,Hko,Nb,Fpe,Jko,Yko,VV,Kko,Zko,eSo,qb,Tpe,oSo,rSo,XV,tSo,aSo,nSo,jb,Mpe,sSo,lSo,zV,iSo,dSo,cSo,Db,Epe,mSo,fSo,QV,gSo,hSo,uSo,Gb,Cpe,pSo,_So,WV,bSo,vSo,FSo,Ob,wpe,TSo,MSo,UV,ESo,CSo,wSo,Vb,Ape,ASo,LSo,HV,ySo,xSo,$So,Xb,Lpe,kSo,SSo,JV,RSo,PSo,BSo,zb,ype,ISo,NSo,YV,qSo,jSo,DSo,Qb,xpe,GSo,OSo,KV,VSo,XSo,zSo,Wb,$pe,QSo,WSo,ZV,USo,HSo,JSo,Ub,kpe,YSo,KSo,eX,ZSo,eRo,oRo,Hb,Spe,rRo,tRo,oX,aRo,nRo,sRo,Jb,Rpe,lRo,iRo,rX,dRo,cRo,mRo,Yb,Ppe,fRo,gRo,tX,hRo,uRo,pRo,Kb,Bpe,_Ro,bRo,aX,vRo,FRo,TRo,Zb,MRo,Ipe,ERo,CRo,Npe,wRo,ARo,e2,oYe,bd,o2,qpe,V9,LRo,jpe,yRo,rYe,Po,X9,xRo,vd,$Ro,nX,kRo,SRo,sX,RRo,PRo,BRo,z9,IRo,Dpe,NRo,qRo,jRo,_t,Q9,DRo,Gpe,GRo,ORo,Fd,VRo,Ope,XRo,zRo,lX,QRo,WRo,URo,r2,HRo,Ze,W9,JRo,Vpe,YRo,KRo,Ya,ZRo,Xpe,ePo,oPo,zpe,rPo,tPo,Qpe,aPo,nPo,sPo,G,t2,Wpe,lPo,iPo,iX,dPo,cPo,mPo,a2,Upe,fPo,gPo,dX,hPo,uPo,pPo,n2,Hpe,_Po,bPo,cX,vPo,FPo,TPo,s2,Jpe,MPo,EPo,mX,CPo,wPo,APo,l2,Ype,LPo,yPo,fX,xPo,$Po,kPo,i2,Kpe,SPo,RPo,gX,PPo,BPo,IPo,d2,Zpe,NPo,qPo,hX,jPo,DPo,GPo,c2,e_e,OPo,VPo,uX,XPo,zPo,QPo,m2,o_e,WPo,UPo,pX,HPo,JPo,YPo,f2,r_e,KPo,ZPo,_X,eBo,oBo,rBo,g2,t_e,tBo,aBo,bX,nBo,sBo,lBo,h2,a_e,iBo,dBo,vX,cBo,mBo,fBo,u2,n_e,gBo,hBo,FX,uBo,pBo,_Bo,p2,s_e,bBo,vBo,TX,FBo,TBo,MBo,_2,l_e,EBo,CBo,MX,wBo,ABo,LBo,b2,i_e,yBo,xBo,EX,$Bo,kBo,SBo,v2,d_e,RBo,PBo,CX,BBo,IBo,NBo,F2,c_e,qBo,jBo,wX,DBo,GBo,OBo,T2,m_e,VBo,XBo,AX,zBo,QBo,WBo,M2,f_e,UBo,HBo,LX,JBo,YBo,KBo,E2,g_e,ZBo,eIo,yX,oIo,rIo,tIo,C2,h_e,aIo,nIo,xX,sIo,lIo,iIo,w2,u_e,dIo,cIo,$X,mIo,fIo,gIo,A2,p_e,hIo,uIo,kX,pIo,_Io,bIo,L2,__e,vIo,FIo,SX,TIo,MIo,EIo,y2,b_e,CIo,wIo,RX,AIo,LIo,yIo,x2,v_e,xIo,$Io,PX,kIo,SIo,RIo,$2,F_e,PIo,BIo,BX,IIo,NIo,qIo,k2,T_e,jIo,DIo,IX,GIo,OIo,VIo,S2,M_e,XIo,zIo,NX,QIo,WIo,UIo,R2,E_e,HIo,JIo,qX,YIo,KIo,ZIo,P2,C_e,eNo,oNo,jX,rNo,tNo,aNo,B2,w_e,nNo,sNo,DX,lNo,iNo,dNo,I2,A_e,cNo,mNo,GX,fNo,gNo,hNo,N2,L_e,uNo,pNo,OX,_No,bNo,vNo,q2,y_e,FNo,TNo,VX,MNo,ENo,CNo,j2,x_e,wNo,ANo,XX,LNo,yNo,xNo,D2,$_e,$No,kNo,zX,SNo,RNo,PNo,G2,k_e,BNo,INo,QX,NNo,qNo,jNo,O2,S_e,DNo,GNo,WX,ONo,VNo,XNo,V2,R_e,zNo,QNo,UX,WNo,UNo,HNo,X2,P_e,JNo,YNo,HX,KNo,ZNo,eqo,z2,B_e,oqo,rqo,JX,tqo,aqo,nqo,Q2,I_e,sqo,lqo,YX,iqo,dqo,cqo,W2,N_e,mqo,fqo,KX,gqo,hqo,uqo,U2,q_e,pqo,_qo,ZX,bqo,vqo,Fqo,H2,j_e,Tqo,Mqo,ez,Eqo,Cqo,wqo,J2,Aqo,D_e,Lqo,yqo,G_e,xqo,$qo,Y2,tYe,Td,K2,O_e,U9,kqo,V_e,Sqo,aYe,Bo,H9,Rqo,Md,Pqo,oz,Bqo,Iqo,rz,Nqo,qqo,jqo,J9,Dqo,X_e,Gqo,Oqo,Vqo,bt,Y9,Xqo,z_e,zqo,Qqo,Ed,Wqo,Q_e,Uqo,Hqo,tz,Jqo,Yqo,Kqo,Z2,Zqo,eo,K9,ejo,W_e,ojo,rjo,Ka,tjo,U_e,ajo,njo,H_e,sjo,ljo,J_e,ijo,djo,cjo,z,ev,Y_e,mjo,fjo,az,gjo,hjo,ujo,ov,K_e,pjo,_jo,nz,bjo,vjo,Fjo,rv,Z_e,Tjo,Mjo,sz,Ejo,Cjo,wjo,tv,ebe,Ajo,Ljo,lz,yjo,xjo,$jo,av,obe,kjo,Sjo,iz,Rjo,Pjo,Bjo,nv,rbe,Ijo,Njo,dz,qjo,jjo,Djo,sv,tbe,Gjo,Ojo,cz,Vjo,Xjo,zjo,lv,abe,Qjo,Wjo,mz,Ujo,Hjo,Jjo,iv,nbe,Yjo,Kjo,fz,Zjo,eDo,oDo,dv,sbe,rDo,tDo,gz,aDo,nDo,sDo,cv,lbe,lDo,iDo,hz,dDo,cDo,mDo,mv,ibe,fDo,gDo,uz,hDo,uDo,pDo,fv,dbe,_Do,bDo,pz,vDo,FDo,TDo,gv,cbe,MDo,EDo,_z,CDo,wDo,ADo,hv,mbe,LDo,yDo,bz,xDo,$Do,kDo,uv,fbe,SDo,RDo,vz,PDo,BDo,IDo,pv,gbe,NDo,qDo,Fz,jDo,DDo,GDo,_v,hbe,ODo,VDo,Tz,XDo,zDo,QDo,bv,ube,WDo,UDo,Mz,HDo,JDo,YDo,vv,pbe,KDo,ZDo,Ez,eGo,oGo,rGo,Fv,_be,tGo,aGo,Cz,nGo,sGo,lGo,Tv,bbe,iGo,dGo,wz,cGo,mGo,fGo,Mv,vbe,gGo,hGo,Az,uGo,pGo,_Go,Ev,Fbe,bGo,vGo,Lz,FGo,TGo,MGo,Cv,Tbe,EGo,CGo,yz,wGo,AGo,LGo,wv,Mbe,yGo,xGo,xz,$Go,kGo,SGo,Av,Ebe,RGo,PGo,$z,BGo,IGo,NGo,Lv,Cbe,qGo,jGo,kz,DGo,GGo,OGo,yv,wbe,VGo,XGo,Sz,zGo,QGo,WGo,xv,Abe,UGo,HGo,Rz,JGo,YGo,KGo,$v,Lbe,ZGo,eOo,Pz,oOo,rOo,tOo,kv,ybe,aOo,nOo,Bz,sOo,lOo,iOo,Sv,xbe,dOo,cOo,Iz,mOo,fOo,gOo,Rv,$be,hOo,uOo,Nz,pOo,_Oo,bOo,Pv,kbe,vOo,FOo,qz,TOo,MOo,EOo,Bv,Sbe,COo,wOo,jz,AOo,LOo,yOo,Iv,Rbe,xOo,$Oo,Dz,kOo,SOo,ROo,Nv,Pbe,POo,BOo,Gz,IOo,NOo,qOo,qv,Bbe,jOo,DOo,Oz,GOo,OOo,VOo,jv,Ibe,XOo,zOo,Vz,QOo,WOo,UOo,Dv,HOo,Nbe,JOo,YOo,qbe,KOo,ZOo,Gv,nYe,Cd,Ov,jbe,Z9,eVo,Dbe,oVo,sYe,Io,ex,rVo,wd,tVo,Xz,aVo,nVo,zz,sVo,lVo,iVo,ox,dVo,Gbe,cVo,mVo,fVo,vt,rx,gVo,Obe,hVo,uVo,Ad,pVo,Vbe,_Vo,bVo,Qz,vVo,FVo,TVo,Vv,MVo,oo,tx,EVo,Xbe,CVo,wVo,Za,AVo,zbe,LVo,yVo,Qbe,xVo,$Vo,Wbe,kVo,SVo,RVo,U,Xv,Ube,PVo,BVo,Wz,IVo,NVo,qVo,zv,Hbe,jVo,DVo,Uz,GVo,OVo,VVo,Qv,Jbe,XVo,zVo,Hz,QVo,WVo,UVo,Wv,Ybe,HVo,JVo,Jz,YVo,KVo,ZVo,Uv,Kbe,eXo,oXo,Yz,rXo,tXo,aXo,Hv,Zbe,nXo,sXo,Kz,lXo,iXo,dXo,Jv,e2e,cXo,mXo,Zz,fXo,gXo,hXo,Yv,o2e,uXo,pXo,eQ,_Xo,bXo,vXo,Kv,r2e,FXo,TXo,oQ,MXo,EXo,CXo,Zv,t2e,wXo,AXo,rQ,LXo,yXo,xXo,e1,a2e,$Xo,kXo,tQ,SXo,RXo,PXo,o1,n2e,BXo,IXo,aQ,NXo,qXo,jXo,r1,s2e,DXo,GXo,nQ,OXo,VXo,XXo,t1,l2e,zXo,QXo,sQ,WXo,UXo,HXo,a1,i2e,JXo,YXo,lQ,KXo,ZXo,ezo,n1,d2e,ozo,rzo,iQ,tzo,azo,nzo,s1,c2e,szo,lzo,dQ,izo,dzo,czo,l1,m2e,mzo,fzo,cQ,gzo,hzo,uzo,i1,f2e,pzo,_zo,mQ,bzo,vzo,Fzo,d1,g2e,Tzo,Mzo,fQ,Ezo,Czo,wzo,c1,h2e,Azo,Lzo,gQ,yzo,xzo,$zo,m1,u2e,kzo,Szo,hQ,Rzo,Pzo,Bzo,f1,p2e,Izo,Nzo,uQ,qzo,jzo,Dzo,g1,_2e,Gzo,Ozo,pQ,Vzo,Xzo,zzo,h1,b2e,Qzo,Wzo,_Q,Uzo,Hzo,Jzo,u1,v2e,Yzo,Kzo,bQ,Zzo,eQo,oQo,p1,F2e,rQo,tQo,vQ,aQo,nQo,sQo,_1,T2e,lQo,iQo,FQ,dQo,cQo,mQo,b1,M2e,fQo,gQo,TQ,hQo,uQo,pQo,v1,E2e,_Qo,bQo,MQ,vQo,FQo,TQo,F1,C2e,MQo,EQo,EQ,CQo,wQo,AQo,T1,w2e,LQo,yQo,CQ,xQo,$Qo,kQo,M1,A2e,SQo,RQo,wQ,PQo,BQo,IQo,E1,L2e,NQo,qQo,y2e,jQo,DQo,GQo,C1,x2e,OQo,VQo,AQ,XQo,zQo,QQo,w1,$2e,WQo,UQo,LQ,HQo,JQo,YQo,A1,k2e,KQo,ZQo,yQ,eWo,oWo,rWo,L1,S2e,tWo,aWo,xQ,nWo,sWo,lWo,y1,iWo,R2e,dWo,cWo,P2e,mWo,fWo,x1,lYe,Ld,$1,B2e,ax,gWo,I2e,hWo,iYe,No,nx,uWo,yd,pWo,$Q,_Wo,bWo,kQ,vWo,FWo,TWo,sx,MWo,N2e,EWo,CWo,wWo,Ft,lx,AWo,q2e,LWo,yWo,xd,xWo,j2e,$Wo,kWo,SQ,SWo,RWo,PWo,k1,BWo,ro,ix,IWo,D2e,NWo,qWo,en,jWo,G2e,DWo,GWo,O2e,OWo,VWo,V2e,XWo,zWo,QWo,me,S1,X2e,WWo,UWo,RQ,HWo,JWo,YWo,R1,z2e,KWo,ZWo,PQ,eUo,oUo,rUo,P1,Q2e,tUo,aUo,BQ,nUo,sUo,lUo,B1,W2e,iUo,dUo,IQ,cUo,mUo,fUo,I1,U2e,gUo,hUo,NQ,uUo,pUo,_Uo,N1,H2e,bUo,vUo,qQ,FUo,TUo,MUo,q1,J2e,EUo,CUo,jQ,wUo,AUo,LUo,j1,Y2e,yUo,xUo,DQ,$Uo,kUo,SUo,D1,K2e,RUo,PUo,GQ,BUo,IUo,NUo,G1,Z2e,qUo,jUo,OQ,DUo,GUo,OUo,O1,eve,VUo,XUo,VQ,zUo,QUo,WUo,V1,ove,UUo,HUo,XQ,JUo,YUo,KUo,X1,rve,ZUo,eHo,zQ,oHo,rHo,tHo,z1,tve,aHo,nHo,QQ,sHo,lHo,iHo,Q1,ave,dHo,cHo,WQ,mHo,fHo,gHo,W1,nve,hHo,uHo,UQ,pHo,_Ho,bHo,U1,sve,vHo,FHo,HQ,THo,MHo,EHo,H1,lve,CHo,wHo,JQ,AHo,LHo,yHo,J1,ive,xHo,$Ho,YQ,kHo,SHo,RHo,Y1,dve,PHo,BHo,KQ,IHo,NHo,qHo,K1,jHo,cve,DHo,GHo,mve,OHo,VHo,Z1,dYe,$d,eF,fve,dx,XHo,gve,zHo,cYe,qo,cx,QHo,kd,WHo,ZQ,UHo,HHo,eW,JHo,YHo,KHo,mx,ZHo,hve,eJo,oJo,rJo,Tt,fx,tJo,uve,aJo,nJo,Sd,sJo,pve,lJo,iJo,oW,dJo,cJo,mJo,oF,fJo,to,gx,gJo,_ve,hJo,uJo,on,pJo,bve,_Jo,bJo,vve,vJo,FJo,Fve,TJo,MJo,EJo,j,rF,Tve,CJo,wJo,rW,AJo,LJo,yJo,tF,Mve,xJo,$Jo,tW,kJo,SJo,RJo,aF,Eve,PJo,BJo,aW,IJo,NJo,qJo,nF,Cve,jJo,DJo,nW,GJo,OJo,VJo,sF,wve,XJo,zJo,sW,QJo,WJo,UJo,lF,Ave,HJo,JJo,lW,YJo,KJo,ZJo,iF,Lve,eYo,oYo,iW,rYo,tYo,aYo,dF,yve,nYo,sYo,dW,lYo,iYo,dYo,cF,xve,cYo,mYo,cW,fYo,gYo,hYo,mF,$ve,uYo,pYo,mW,_Yo,bYo,vYo,fF,kve,FYo,TYo,fW,MYo,EYo,CYo,gF,Sve,wYo,AYo,gW,LYo,yYo,xYo,hF,Rve,$Yo,kYo,hW,SYo,RYo,PYo,uF,Pve,BYo,IYo,uW,NYo,qYo,jYo,pF,Bve,DYo,GYo,pW,OYo,VYo,XYo,_F,Ive,zYo,QYo,_W,WYo,UYo,HYo,bF,Nve,JYo,YYo,bW,KYo,ZYo,eKo,vF,qve,oKo,rKo,vW,tKo,aKo,nKo,FF,jve,sKo,lKo,FW,iKo,dKo,cKo,TF,Dve,mKo,fKo,TW,gKo,hKo,uKo,MF,Gve,pKo,_Ko,MW,bKo,vKo,FKo,EF,Ove,TKo,MKo,EW,EKo,CKo,wKo,CF,Vve,AKo,LKo,CW,yKo,xKo,$Ko,wF,Xve,kKo,SKo,wW,RKo,PKo,BKo,AF,zve,IKo,NKo,AW,qKo,jKo,DKo,LF,Qve,GKo,OKo,LW,VKo,XKo,zKo,yF,Wve,QKo,WKo,yW,UKo,HKo,JKo,xF,Uve,YKo,KKo,xW,ZKo,eZo,oZo,$F,Hve,rZo,tZo,$W,aZo,nZo,sZo,kF,Jve,lZo,iZo,kW,dZo,cZo,mZo,SF,Yve,fZo,gZo,SW,hZo,uZo,pZo,RF,Kve,_Zo,bZo,RW,vZo,FZo,TZo,PF,Zve,MZo,EZo,PW,CZo,wZo,AZo,BF,e1e,LZo,yZo,BW,xZo,$Zo,kZo,IF,o1e,SZo,RZo,IW,PZo,BZo,IZo,NF,r1e,NZo,qZo,NW,jZo,DZo,GZo,qF,t1e,OZo,VZo,qW,XZo,zZo,QZo,jF,a1e,WZo,UZo,jW,HZo,JZo,YZo,DF,n1e,KZo,ZZo,DW,eer,oer,rer,GF,s1e,ter,aer,GW,ner,ser,ler,OF,l1e,ier,der,OW,cer,mer,fer,VF,i1e,ger,her,VW,uer,per,_er,XF,d1e,ber,ver,XW,Fer,Ter,Mer,zF,c1e,Eer,Cer,zW,wer,Aer,Ler,QF,m1e,yer,xer,QW,$er,ker,Ser,WF,f1e,Rer,Per,WW,Ber,Ier,Ner,UF,g1e,qer,jer,UW,Der,Ger,Oer,HF,h1e,Ver,Xer,HW,zer,Qer,Wer,JF,u1e,Uer,Her,JW,Jer,Yer,Ker,YF,p1e,Zer,eor,YW,oor,ror,tor,KF,_1e,aor,nor,KW,sor,lor,ior,ZF,b1e,dor,cor,ZW,mor,gor,hor,eT,uor,v1e,por,_or,F1e,bor,vor,oT,mYe,Rd,rT,T1e,hx,For,M1e,Tor,fYe,jo,ux,Mor,Pd,Eor,eU,Cor,wor,oU,Aor,Lor,yor,px,xor,E1e,$or,kor,Sor,Mt,_x,Ror,C1e,Por,Bor,Bd,Ior,w1e,Nor,qor,rU,jor,Dor,Gor,tT,Oor,ao,bx,Vor,A1e,Xor,zor,rn,Qor,L1e,Wor,Uor,y1e,Hor,Jor,x1e,Yor,Kor,Zor,Z,aT,$1e,err,orr,tU,rrr,trr,arr,nT,k1e,nrr,srr,aU,lrr,irr,drr,sT,S1e,crr,mrr,nU,frr,grr,hrr,lT,R1e,urr,prr,sU,_rr,brr,vrr,iT,P1e,Frr,Trr,lU,Mrr,Err,Crr,dT,B1e,wrr,Arr,iU,Lrr,yrr,xrr,cT,I1e,$rr,krr,dU,Srr,Rrr,Prr,mT,N1e,Brr,Irr,cU,Nrr,qrr,jrr,fT,q1e,Drr,Grr,mU,Orr,Vrr,Xrr,gT,j1e,zrr,Qrr,fU,Wrr,Urr,Hrr,hT,D1e,Jrr,Yrr,gU,Krr,Zrr,etr,uT,G1e,otr,rtr,hU,ttr,atr,ntr,pT,O1e,str,ltr,uU,itr,dtr,ctr,_T,V1e,mtr,ftr,pU,gtr,htr,utr,bT,X1e,ptr,_tr,_U,btr,vtr,Ftr,vT,z1e,Ttr,Mtr,bU,Etr,Ctr,wtr,FT,Q1e,Atr,Ltr,vU,ytr,xtr,$tr,TT,W1e,ktr,Str,FU,Rtr,Ptr,Btr,MT,U1e,Itr,Ntr,TU,qtr,jtr,Dtr,ET,H1e,Gtr,Otr,MU,Vtr,Xtr,ztr,CT,J1e,Qtr,Wtr,EU,Utr,Htr,Jtr,wT,Y1e,Ytr,Ktr,CU,Ztr,ear,oar,AT,K1e,rar,tar,wU,aar,nar,sar,LT,Z1e,lar,iar,AU,dar,car,mar,yT,eFe,far,gar,LU,har,uar,par,xT,oFe,_ar,bar,yU,Far,Tar,Mar,$T,rFe,Ear,Car,xU,war,Aar,Lar,kT,tFe,yar,xar,$U,$ar,kar,Sar,ST,aFe,Rar,Par,kU,Bar,Iar,Nar,RT,nFe,qar,jar,SU,Dar,Gar,Oar,PT,sFe,Var,Xar,RU,zar,Qar,War,BT,Uar,lFe,Har,Jar,iFe,Yar,Kar,IT,gYe,Id,NT,dFe,vx,Zar,cFe,enr,hYe,Do,Fx,onr,Nd,rnr,PU,tnr,anr,BU,nnr,snr,lnr,Tx,inr,mFe,dnr,cnr,mnr,Et,Mx,fnr,fFe,gnr,hnr,qd,unr,gFe,pnr,_nr,IU,bnr,vnr,Fnr,qT,Tnr,no,Ex,Mnr,hFe,Enr,Cnr,tn,wnr,uFe,Anr,Lnr,pFe,ynr,xnr,_Fe,$nr,knr,Snr,Go,jT,bFe,Rnr,Pnr,NU,Bnr,Inr,Nnr,DT,vFe,qnr,jnr,qU,Dnr,Gnr,Onr,GT,FFe,Vnr,Xnr,jU,znr,Qnr,Wnr,OT,TFe,Unr,Hnr,DU,Jnr,Ynr,Knr,VT,MFe,Znr,esr,GU,osr,rsr,tsr,XT,EFe,asr,nsr,OU,ssr,lsr,isr,zT,dsr,CFe,csr,msr,wFe,fsr,gsr,QT,uYe,jd,WT,AFe,Cx,hsr,LFe,usr,pYe,Oo,wx,psr,Dd,_sr,VU,bsr,vsr,XU,Fsr,Tsr,Msr,Ax,Esr,yFe,Csr,wsr,Asr,Ct,Lx,Lsr,xFe,ysr,xsr,Gd,$sr,$Fe,ksr,Ssr,zU,Rsr,Psr,Bsr,UT,Isr,so,yx,Nsr,kFe,qsr,jsr,an,Dsr,SFe,Gsr,Osr,RFe,Vsr,Xsr,PFe,zsr,Qsr,Wsr,J,HT,BFe,Usr,Hsr,QU,Jsr,Ysr,Ksr,JT,IFe,Zsr,elr,WU,olr,rlr,tlr,YT,NFe,alr,nlr,UU,slr,llr,ilr,KT,qFe,dlr,clr,HU,mlr,flr,glr,ZT,jFe,hlr,ulr,JU,plr,_lr,blr,eM,DFe,vlr,Flr,YU,Tlr,Mlr,Elr,oM,GFe,Clr,wlr,KU,Alr,Llr,ylr,rM,OFe,xlr,$lr,ZU,klr,Slr,Rlr,tM,VFe,Plr,Blr,eH,Ilr,Nlr,qlr,aM,XFe,jlr,Dlr,oH,Glr,Olr,Vlr,nM,zFe,Xlr,zlr,rH,Qlr,Wlr,Ulr,sM,QFe,Hlr,Jlr,tH,Ylr,Klr,Zlr,lM,WFe,eir,oir,aH,rir,tir,air,iM,UFe,nir,sir,nH,lir,iir,dir,dM,HFe,cir,mir,sH,fir,gir,hir,cM,JFe,uir,pir,lH,_ir,bir,vir,mM,YFe,Fir,Tir,iH,Mir,Eir,Cir,fM,KFe,wir,Air,dH,Lir,yir,xir,gM,ZFe,$ir,kir,cH,Sir,Rir,Pir,hM,eTe,Bir,Iir,mH,Nir,qir,jir,uM,oTe,Dir,Gir,fH,Oir,Vir,Xir,pM,rTe,zir,Qir,gH,Wir,Uir,Hir,_M,tTe,Jir,Yir,hH,Kir,Zir,edr,bM,aTe,odr,rdr,uH,tdr,adr,ndr,vM,nTe,sdr,ldr,pH,idr,ddr,cdr,FM,sTe,mdr,fdr,_H,gdr,hdr,udr,TM,lTe,pdr,_dr,bH,bdr,vdr,Fdr,MM,iTe,Tdr,Mdr,vH,Edr,Cdr,wdr,EM,dTe,Adr,Ldr,FH,ydr,xdr,$dr,CM,cTe,kdr,Sdr,TH,Rdr,Pdr,Bdr,wM,mTe,Idr,Ndr,MH,qdr,jdr,Ddr,AM,fTe,Gdr,Odr,EH,Vdr,Xdr,zdr,LM,gTe,Qdr,Wdr,CH,Udr,Hdr,Jdr,yM,hTe,Ydr,Kdr,wH,Zdr,ecr,ocr,xM,uTe,rcr,tcr,AH,acr,ncr,scr,$M,pTe,lcr,icr,LH,dcr,ccr,mcr,kM,_Te,fcr,gcr,yH,hcr,ucr,pcr,SM,_cr,bTe,bcr,vcr,vTe,Fcr,Tcr,RM,_Ye,Od,PM,FTe,xx,Mcr,TTe,Ecr,bYe,Vo,$x,Ccr,Vd,wcr,xH,Acr,Lcr,$H,ycr,xcr,$cr,kx,kcr,MTe,Scr,Rcr,Pcr,wt,Sx,Bcr,ETe,Icr,Ncr,Xd,qcr,CTe,jcr,Dcr,kH,Gcr,Ocr,Vcr,BM,Xcr,lo,Rx,zcr,wTe,Qcr,Wcr,nn,Ucr,ATe,Hcr,Jcr,LTe,Ycr,Kcr,yTe,Zcr,emr,omr,V,IM,xTe,rmr,tmr,SH,amr,nmr,smr,NM,$Te,lmr,imr,RH,dmr,cmr,mmr,qM,kTe,fmr,gmr,PH,hmr,umr,pmr,jM,STe,_mr,bmr,BH,vmr,Fmr,Tmr,DM,RTe,Mmr,Emr,IH,Cmr,wmr,Amr,GM,PTe,Lmr,ymr,NH,xmr,$mr,kmr,OM,BTe,Smr,Rmr,qH,Pmr,Bmr,Imr,VM,ITe,Nmr,qmr,jH,jmr,Dmr,Gmr,XM,NTe,Omr,Vmr,DH,Xmr,zmr,Qmr,zM,qTe,Wmr,Umr,GH,Hmr,Jmr,Ymr,QM,jTe,Kmr,Zmr,OH,efr,ofr,rfr,WM,DTe,tfr,afr,VH,nfr,sfr,lfr,UM,GTe,ifr,dfr,XH,cfr,mfr,ffr,HM,OTe,gfr,hfr,zH,ufr,pfr,_fr,JM,VTe,bfr,vfr,QH,Ffr,Tfr,Mfr,YM,XTe,Efr,Cfr,WH,wfr,Afr,Lfr,KM,zTe,yfr,xfr,UH,$fr,kfr,Sfr,ZM,QTe,Rfr,Pfr,HH,Bfr,Ifr,Nfr,eE,WTe,qfr,jfr,JH,Dfr,Gfr,Ofr,oE,UTe,Vfr,Xfr,YH,zfr,Qfr,Wfr,rE,HTe,Ufr,Hfr,KH,Jfr,Yfr,Kfr,tE,JTe,Zfr,egr,ZH,ogr,rgr,tgr,aE,YTe,agr,ngr,eJ,sgr,lgr,igr,nE,KTe,dgr,cgr,oJ,mgr,fgr,ggr,sE,ZTe,hgr,ugr,rJ,pgr,_gr,bgr,lE,eMe,vgr,Fgr,tJ,Tgr,Mgr,Egr,iE,oMe,Cgr,wgr,aJ,Agr,Lgr,ygr,dE,rMe,xgr,$gr,nJ,kgr,Sgr,Rgr,cE,tMe,Pgr,Bgr,sJ,Igr,Ngr,qgr,mE,aMe,jgr,Dgr,lJ,Ggr,Ogr,Vgr,fE,nMe,Xgr,zgr,iJ,Qgr,Wgr,Ugr,gE,sMe,Hgr,Jgr,dJ,Ygr,Kgr,Zgr,hE,lMe,ehr,ohr,cJ,rhr,thr,ahr,uE,iMe,nhr,shr,mJ,lhr,ihr,dhr,pE,dMe,chr,mhr,fJ,fhr,ghr,hhr,_E,cMe,uhr,phr,gJ,_hr,bhr,vhr,bE,mMe,Fhr,Thr,hJ,Mhr,Ehr,Chr,vE,fMe,whr,Ahr,uJ,Lhr,yhr,xhr,FE,gMe,$hr,khr,pJ,Shr,Rhr,Phr,TE,hMe,Bhr,Ihr,_J,Nhr,qhr,jhr,ME,uMe,Dhr,Ghr,bJ,Ohr,Vhr,Xhr,EE,pMe,zhr,Qhr,vJ,Whr,Uhr,Hhr,CE,_Me,Jhr,Yhr,FJ,Khr,Zhr,eur,wE,our,bMe,rur,tur,vMe,aur,nur,AE,vYe,zd,LE,FMe,Px,sur,TMe,lur,FYe,Xo,Bx,iur,Qd,dur,TJ,cur,mur,MJ,fur,gur,hur,Ix,uur,MMe,pur,_ur,bur,At,Nx,vur,EMe,Fur,Tur,Wd,Mur,CMe,Eur,Cur,EJ,wur,Aur,Lur,yE,yur,io,qx,xur,wMe,$ur,kur,sn,Sur,AMe,Rur,Pur,LMe,Bur,Iur,yMe,Nur,qur,jur,xMe,xE,$Me,Dur,Gur,CJ,Our,Vur,Xur,$E,zur,kMe,Qur,Wur,SMe,Uur,Hur,kE,TYe,Ud,SE,RMe,jx,Jur,PMe,Yur,MYe,zo,Dx,Kur,Hd,Zur,wJ,epr,opr,AJ,rpr,tpr,apr,Gx,npr,BMe,spr,lpr,ipr,Lt,Ox,dpr,IMe,cpr,mpr,Jd,fpr,NMe,gpr,hpr,LJ,upr,ppr,_pr,RE,bpr,co,Vx,vpr,qMe,Fpr,Tpr,ln,Mpr,jMe,Epr,Cpr,DMe,wpr,Apr,GMe,Lpr,ypr,xpr,Yd,PE,OMe,$pr,kpr,yJ,Spr,Rpr,Ppr,BE,VMe,Bpr,Ipr,xJ,Npr,qpr,jpr,IE,XMe,Dpr,Gpr,$J,Opr,Vpr,Xpr,NE,zpr,zMe,Qpr,Wpr,QMe,Upr,Hpr,qE,EYe,Kd,jE,WMe,Xx,Jpr,UMe,Ypr,CYe,Qo,zx,Kpr,Zd,Zpr,kJ,e_r,o_r,SJ,r_r,t_r,a_r,Qx,n_r,HMe,s_r,l_r,i_r,yt,Wx,d_r,JMe,c_r,m_r,ec,f_r,YMe,g_r,h_r,RJ,u_r,p_r,__r,DE,b_r,mo,Ux,v_r,KMe,F_r,T_r,dn,M_r,ZMe,E_r,C_r,eEe,w_r,A_r,oEe,L_r,y_r,x_r,be,GE,rEe,$_r,k_r,PJ,S_r,R_r,P_r,OE,tEe,B_r,I_r,BJ,N_r,q_r,j_r,VE,aEe,D_r,G_r,IJ,O_r,V_r,X_r,XE,nEe,z_r,Q_r,NJ,W_r,U_r,H_r,pl,sEe,J_r,Y_r,qJ,K_r,Z_r,jJ,ebr,obr,rbr,zE,lEe,tbr,abr,DJ,nbr,sbr,lbr,_l,iEe,ibr,dbr,GJ,cbr,mbr,OJ,fbr,gbr,hbr,QE,dEe,ubr,pbr,VJ,_br,bbr,vbr,xt,cEe,Fbr,Tbr,XJ,Mbr,Ebr,zJ,Cbr,wbr,QJ,Abr,Lbr,ybr,WE,mEe,xbr,$br,WJ,kbr,Sbr,Rbr,UE,fEe,Pbr,Bbr,UJ,Ibr,Nbr,qbr,HE,gEe,jbr,Dbr,HJ,Gbr,Obr,Vbr,JE,hEe,Xbr,zbr,JJ,Qbr,Wbr,Ubr,YE,uEe,Hbr,Jbr,YJ,Ybr,Kbr,Zbr,KE,pEe,e2r,o2r,KJ,r2r,t2r,a2r,ZE,_Ee,n2r,s2r,ZJ,l2r,i2r,d2r,e4,bEe,c2r,m2r,eY,f2r,g2r,h2r,o4,u2r,vEe,p2r,_2r,FEe,b2r,v2r,r4,wYe,oc,t4,TEe,Hx,F2r,MEe,T2r,AYe,Wo,Jx,M2r,rc,E2r,oY,C2r,w2r,rY,A2r,L2r,y2r,Yx,x2r,EEe,$2r,k2r,S2r,$t,Kx,R2r,CEe,P2r,B2r,tc,I2r,wEe,N2r,q2r,tY,j2r,D2r,G2r,a4,O2r,fo,Zx,V2r,AEe,X2r,z2r,cn,Q2r,LEe,W2r,U2r,yEe,H2r,J2r,xEe,Y2r,K2r,Z2r,$Ee,n4,kEe,evr,ovr,aY,rvr,tvr,avr,s4,nvr,SEe,svr,lvr,REe,ivr,dvr,l4,LYe,ac,i4,PEe,e$,cvr,BEe,mvr,yYe,Uo,o$,fvr,nc,gvr,nY,hvr,uvr,sY,pvr,_vr,bvr,r$,vvr,IEe,Fvr,Tvr,Mvr,kt,t$,Evr,NEe,Cvr,wvr,sc,Avr,qEe,Lvr,yvr,lY,xvr,$vr,kvr,d4,Svr,go,a$,Rvr,jEe,Pvr,Bvr,mn,Ivr,DEe,Nvr,qvr,GEe,jvr,Dvr,OEe,Gvr,Ovr,Vvr,VEe,c4,XEe,Xvr,zvr,iY,Qvr,Wvr,Uvr,m4,Hvr,zEe,Jvr,Yvr,QEe,Kvr,Zvr,f4,xYe,lc,g4,WEe,n$,e1r,UEe,o1r,$Ye,Ho,s$,r1r,ic,t1r,dY,a1r,n1r,cY,s1r,l1r,i1r,l$,d1r,HEe,c1r,m1r,f1r,St,i$,g1r,JEe,h1r,u1r,dc,p1r,YEe,_1r,b1r,mY,v1r,F1r,T1r,h4,M1r,ho,d$,E1r,KEe,C1r,w1r,fn,A1r,ZEe,L1r,y1r,e4e,x1r,$1r,o4e,k1r,S1r,R1r,r4e,u4,t4e,P1r,B1r,fY,I1r,N1r,q1r,p4,j1r,a4e,D1r,G1r,n4e,O1r,V1r,_4,kYe,cc,b4,s4e,c$,X1r,l4e,z1r,SYe,Jo,m$,Q1r,mc,W1r,gY,U1r,H1r,hY,J1r,Y1r,K1r,f$,Z1r,i4e,eFr,oFr,rFr,Rt,g$,tFr,d4e,aFr,nFr,fc,sFr,c4e,lFr,iFr,uY,dFr,cFr,mFr,v4,fFr,uo,h$,gFr,m4e,hFr,uFr,gn,pFr,f4e,_Fr,bFr,g4e,vFr,FFr,h4e,TFr,MFr,EFr,Pe,F4,u4e,CFr,wFr,pY,AFr,LFr,yFr,T4,p4e,xFr,$Fr,_Y,kFr,SFr,RFr,M4,_4e,PFr,BFr,bY,IFr,NFr,qFr,E4,b4e,jFr,DFr,vY,GFr,OFr,VFr,C4,v4e,XFr,zFr,FY,QFr,WFr,UFr,w4,F4e,HFr,JFr,TY,YFr,KFr,ZFr,A4,T4e,eTr,oTr,MY,rTr,tTr,aTr,L4,M4e,nTr,sTr,EY,lTr,iTr,dTr,y4,E4e,cTr,mTr,CY,fTr,gTr,hTr,x4,uTr,C4e,pTr,_Tr,w4e,bTr,vTr,$4,RYe,gc,k4,A4e,u$,FTr,L4e,TTr,PYe,Yo,p$,MTr,hc,ETr,wY,CTr,wTr,AY,ATr,LTr,yTr,_$,xTr,y4e,$Tr,kTr,STr,Pt,b$,RTr,x4e,PTr,BTr,uc,ITr,$4e,NTr,qTr,LY,jTr,DTr,GTr,S4,OTr,po,v$,VTr,k4e,XTr,zTr,hn,QTr,S4e,WTr,UTr,R4e,HTr,JTr,P4e,YTr,KTr,ZTr,ct,R4,B4e,eMr,oMr,yY,rMr,tMr,aMr,P4,I4e,nMr,sMr,xY,lMr,iMr,dMr,B4,N4e,cMr,mMr,$Y,fMr,gMr,hMr,I4,q4e,uMr,pMr,kY,_Mr,bMr,vMr,N4,j4e,FMr,TMr,SY,MMr,EMr,CMr,q4,wMr,D4e,AMr,LMr,G4e,yMr,xMr,j4,BYe,pc,D4,O4e,F$,$Mr,V4e,kMr,IYe,Ko,T$,SMr,_c,RMr,RY,PMr,BMr,PY,IMr,NMr,qMr,M$,jMr,X4e,DMr,GMr,OMr,Bt,E$,VMr,z4e,XMr,zMr,bc,QMr,Q4e,WMr,UMr,BY,HMr,JMr,YMr,G4,KMr,_o,C$,ZMr,W4e,eEr,oEr,un,rEr,U4e,tEr,aEr,H4e,nEr,sEr,J4e,lEr,iEr,dEr,Le,O4,Y4e,cEr,mEr,IY,fEr,gEr,hEr,V4,K4e,uEr,pEr,NY,_Er,bEr,vEr,X4,Z4e,FEr,TEr,qY,MEr,EEr,CEr,z4,eCe,wEr,AEr,jY,LEr,yEr,xEr,Q4,oCe,$Er,kEr,DY,SEr,REr,PEr,W4,rCe,BEr,IEr,GY,NEr,qEr,jEr,U4,tCe,DEr,GEr,OY,OEr,VEr,XEr,H4,aCe,zEr,QEr,VY,WEr,UEr,HEr,J4,nCe,JEr,YEr,XY,KEr,ZEr,e4r,Y4,sCe,o4r,r4r,zY,t4r,a4r,n4r,K4,s4r,lCe,l4r,i4r,iCe,d4r,c4r,Z4,NYe,vc,eC,dCe,w$,m4r,cCe,f4r,qYe,Zo,A$,g4r,Fc,h4r,QY,u4r,p4r,WY,_4r,b4r,v4r,L$,F4r,mCe,T4r,M4r,E4r,It,y$,C4r,fCe,w4r,A4r,Tc,L4r,gCe,y4r,x4r,UY,$4r,k4r,S4r,oC,R4r,bo,x$,P4r,hCe,B4r,I4r,pn,N4r,uCe,q4r,j4r,pCe,D4r,G4r,_Ce,O4r,V4r,X4r,$$,rC,bCe,z4r,Q4r,HY,W4r,U4r,H4r,tC,vCe,J4r,Y4r,JY,K4r,Z4r,eCr,aC,oCr,FCe,rCr,tCr,TCe,aCr,nCr,nC,jYe,Mc,sC,MCe,k$,sCr,ECe,lCr,DYe,er,S$,iCr,Ec,dCr,YY,cCr,mCr,KY,fCr,gCr,hCr,R$,uCr,CCe,pCr,_Cr,bCr,Nt,P$,vCr,wCe,FCr,TCr,Cc,MCr,ACe,ECr,CCr,ZY,wCr,ACr,LCr,lC,yCr,vo,B$,xCr,LCe,$Cr,kCr,_n,SCr,yCe,RCr,PCr,xCe,BCr,ICr,$Ce,NCr,qCr,jCr,mt,iC,kCe,DCr,GCr,eK,OCr,VCr,XCr,dC,SCe,zCr,QCr,oK,WCr,UCr,HCr,cC,RCe,JCr,YCr,rK,KCr,ZCr,e3r,mC,PCe,o3r,r3r,tK,t3r,a3r,n3r,fC,BCe,s3r,l3r,aK,i3r,d3r,c3r,gC,m3r,ICe,f3r,g3r,NCe,h3r,u3r,hC,GYe,wc,uC,qCe,I$,p3r,jCe,_3r,OYe,or,N$,b3r,Ac,v3r,nK,F3r,T3r,sK,M3r,E3r,C3r,q$,w3r,DCe,A3r,L3r,y3r,qt,j$,x3r,GCe,$3r,k3r,Lc,S3r,OCe,R3r,P3r,lK,B3r,I3r,N3r,pC,q3r,Fo,D$,j3r,VCe,D3r,G3r,bn,O3r,XCe,V3r,X3r,zCe,z3r,Q3r,QCe,W3r,U3r,H3r,vn,_C,WCe,J3r,Y3r,iK,K3r,Z3r,e5r,bC,UCe,o5r,r5r,dK,t5r,a5r,n5r,vC,HCe,s5r,l5r,cK,i5r,d5r,c5r,FC,JCe,m5r,f5r,mK,g5r,h5r,u5r,TC,p5r,YCe,_5r,b5r,KCe,v5r,F5r,MC,VYe,yc,EC,ZCe,G$,T5r,e3e,M5r,XYe,rr,O$,E5r,xc,C5r,fK,w5r,A5r,gK,L5r,y5r,x5r,V$,$5r,o3e,k5r,S5r,R5r,jt,X$,P5r,r3e,B5r,I5r,$c,N5r,t3e,q5r,j5r,hK,D5r,G5r,O5r,CC,V5r,To,z$,X5r,a3e,z5r,Q5r,Fn,W5r,n3e,U5r,H5r,s3e,J5r,Y5r,l3e,K5r,Z5r,e0r,Q$,wC,i3e,o0r,r0r,uK,t0r,a0r,n0r,AC,d3e,s0r,l0r,pK,i0r,d0r,c0r,LC,m0r,c3e,f0r,g0r,m3e,h0r,u0r,yC,zYe,kc,xC,f3e,W$,p0r,g3e,_0r,QYe,tr,U$,b0r,Sc,v0r,_K,F0r,T0r,bK,M0r,E0r,C0r,H$,w0r,h3e,A0r,L0r,y0r,Dt,J$,x0r,u3e,$0r,k0r,Rc,S0r,p3e,R0r,P0r,vK,B0r,I0r,N0r,$C,q0r,Mo,Y$,j0r,_3e,D0r,G0r,Tn,O0r,b3e,V0r,X0r,v3e,z0r,Q0r,F3e,W0r,U0r,H0r,T3e,kC,M3e,J0r,Y0r,FK,K0r,Z0r,ewr,SC,owr,E3e,rwr,twr,C3e,awr,nwr,RC,WYe,Pc,PC,w3e,K$,swr,A3e,lwr,UYe,ar,Z$,iwr,Bc,dwr,TK,cwr,mwr,MK,fwr,gwr,hwr,ek,uwr,L3e,pwr,_wr,bwr,Gt,ok,vwr,y3e,Fwr,Twr,Ic,Mwr,x3e,Ewr,Cwr,EK,wwr,Awr,Lwr,BC,ywr,Eo,rk,xwr,$3e,$wr,kwr,Mn,Swr,k3e,Rwr,Pwr,S3e,Bwr,Iwr,R3e,Nwr,qwr,jwr,ft,IC,P3e,Dwr,Gwr,CK,Owr,Vwr,Xwr,NC,B3e,zwr,Qwr,wK,Wwr,Uwr,Hwr,qC,I3e,Jwr,Ywr,AK,Kwr,Zwr,eAr,jC,N3e,oAr,rAr,LK,tAr,aAr,nAr,DC,q3e,sAr,lAr,yK,iAr,dAr,cAr,GC,mAr,j3e,fAr,gAr,D3e,hAr,uAr,OC,HYe,Nc,VC,G3e,tk,pAr,O3e,_Ar,JYe,nr,ak,bAr,qc,vAr,xK,FAr,TAr,$K,MAr,EAr,CAr,nk,wAr,V3e,AAr,LAr,yAr,Ot,sk,xAr,X3e,$Ar,kAr,jc,SAr,z3e,RAr,PAr,kK,BAr,IAr,NAr,XC,qAr,Co,lk,jAr,Q3e,DAr,GAr,En,OAr,W3e,VAr,XAr,U3e,zAr,QAr,H3e,WAr,UAr,HAr,J3e,zC,Y3e,JAr,YAr,SK,KAr,ZAr,e6r,QC,o6r,K3e,r6r,t6r,Z3e,a6r,n6r,WC,YYe,Dc,UC,e5e,ik,s6r,o5e,l6r,KYe,sr,dk,i6r,Gc,d6r,RK,c6r,m6r,PK,f6r,g6r,h6r,ck,u6r,r5e,p6r,_6r,b6r,Vt,mk,v6r,t5e,F6r,T6r,Oc,M6r,a5e,E6r,C6r,BK,w6r,A6r,L6r,HC,y6r,Ir,fk,x6r,n5e,$6r,k6r,Cn,S6r,s5e,R6r,P6r,l5e,B6r,I6r,i5e,N6r,q6r,j6r,N,JC,d5e,D6r,G6r,IK,O6r,V6r,X6r,YC,c5e,z6r,Q6r,NK,W6r,U6r,H6r,KC,m5e,J6r,Y6r,qK,K6r,Z6r,e7r,ZC,f5e,o7r,r7r,jK,t7r,a7r,n7r,e3,g5e,s7r,l7r,DK,i7r,d7r,c7r,o3,h5e,m7r,f7r,GK,g7r,h7r,u7r,r3,u5e,p7r,_7r,OK,b7r,v7r,F7r,t3,p5e,T7r,M7r,VK,E7r,C7r,w7r,a3,_5e,A7r,L7r,XK,y7r,x7r,$7r,n3,b5e,k7r,S7r,zK,R7r,P7r,B7r,s3,v5e,I7r,N7r,QK,q7r,j7r,D7r,l3,F5e,G7r,O7r,WK,V7r,X7r,z7r,i3,T5e,Q7r,W7r,UK,U7r,H7r,J7r,d3,M5e,Y7r,K7r,HK,Z7r,eLr,oLr,c3,E5e,rLr,tLr,JK,aLr,nLr,sLr,m3,C5e,lLr,iLr,YK,dLr,cLr,mLr,f3,w5e,fLr,gLr,KK,hLr,uLr,pLr,g3,A5e,_Lr,bLr,ZK,vLr,FLr,TLr,bl,L5e,MLr,ELr,eZ,CLr,wLr,oZ,ALr,LLr,yLr,h3,y5e,xLr,$Lr,rZ,kLr,SLr,RLr,u3,x5e,PLr,BLr,tZ,ILr,NLr,qLr,p3,$5e,jLr,DLr,aZ,GLr,OLr,VLr,_3,k5e,XLr,zLr,nZ,QLr,WLr,ULr,b3,S5e,HLr,JLr,sZ,YLr,KLr,ZLr,v3,R5e,eyr,oyr,lZ,ryr,tyr,ayr,F3,P5e,nyr,syr,iZ,lyr,iyr,dyr,T3,B5e,cyr,myr,dZ,fyr,gyr,hyr,M3,I5e,uyr,pyr,cZ,_yr,byr,vyr,E3,N5e,Fyr,Tyr,mZ,Myr,Eyr,Cyr,C3,q5e,wyr,Ayr,fZ,Lyr,yyr,xyr,w3,j5e,$yr,kyr,gZ,Syr,Ryr,Pyr,A3,D5e,Byr,Iyr,hZ,Nyr,qyr,jyr,L3,G5e,Dyr,Gyr,uZ,Oyr,Vyr,Xyr,y3,O5e,zyr,Qyr,pZ,Wyr,Uyr,Hyr,x3,V5e,Jyr,Yyr,_Z,Kyr,Zyr,e8r,$3,X5e,o8r,r8r,bZ,t8r,a8r,n8r,k3,z5e,s8r,l8r,vZ,i8r,d8r,c8r,S3,Q5e,m8r,f8r,FZ,g8r,h8r,u8r,R3,W5e,p8r,_8r,TZ,b8r,v8r,F8r,P3,U5e,T8r,M8r,MZ,E8r,C8r,w8r,B3,H5e,A8r,L8r,EZ,y8r,x8r,$8r,I3,J5e,k8r,S8r,CZ,R8r,P8r,B8r,N3,Y5e,I8r,N8r,wZ,q8r,j8r,D8r,q3,K5e,G8r,O8r,AZ,V8r,X8r,z8r,j3,Z5e,Q8r,W8r,LZ,U8r,H8r,J8r,D3,e0e,Y8r,K8r,yZ,Z8r,e9r,o9r,G3,o0e,r9r,t9r,xZ,a9r,n9r,s9r,O3,r0e,l9r,i9r,$Z,d9r,c9r,m9r,V3,t0e,f9r,g9r,kZ,h9r,u9r,p9r,X3,a0e,_9r,b9r,SZ,v9r,F9r,T9r,z3,n0e,M9r,E9r,RZ,C9r,w9r,A9r,Q3,s0e,L9r,y9r,PZ,x9r,$9r,k9r,W3,l0e,S9r,R9r,BZ,P9r,B9r,I9r,U3,i0e,N9r,q9r,IZ,j9r,D9r,G9r,H3,ZYe,Vc,J3,d0e,gk,O9r,c0e,V9r,eKe,lr,hk,X9r,Xc,z9r,NZ,Q9r,W9r,qZ,U9r,H9r,J9r,uk,Y9r,m0e,K9r,Z9r,exr,Xt,pk,oxr,f0e,rxr,txr,zc,axr,g0e,nxr,sxr,jZ,lxr,ixr,dxr,Y3,cxr,Nr,_k,mxr,h0e,fxr,gxr,wn,hxr,u0e,uxr,pxr,p0e,_xr,bxr,_0e,vxr,Fxr,Txr,se,K3,b0e,Mxr,Exr,DZ,Cxr,wxr,Axr,Z3,v0e,Lxr,yxr,GZ,xxr,$xr,kxr,e5,F0e,Sxr,Rxr,OZ,Pxr,Bxr,Ixr,o5,T0e,Nxr,qxr,VZ,jxr,Dxr,Gxr,r5,M0e,Oxr,Vxr,XZ,Xxr,zxr,Qxr,t5,E0e,Wxr,Uxr,zZ,Hxr,Jxr,Yxr,a5,C0e,Kxr,Zxr,QZ,e$r,o$r,r$r,n5,w0e,t$r,a$r,WZ,n$r,s$r,l$r,s5,A0e,i$r,d$r,UZ,c$r,m$r,f$r,l5,L0e,g$r,h$r,HZ,u$r,p$r,_$r,i5,y0e,b$r,v$r,JZ,F$r,T$r,M$r,d5,x0e,E$r,C$r,YZ,w$r,A$r,L$r,c5,$0e,y$r,x$r,KZ,$$r,k$r,S$r,m5,k0e,R$r,P$r,ZZ,B$r,I$r,N$r,f5,S0e,q$r,j$r,eee,D$r,G$r,O$r,g5,R0e,V$r,X$r,oee,z$r,Q$r,W$r,h5,P0e,U$r,H$r,ree,J$r,Y$r,K$r,u5,B0e,Z$r,ekr,tee,okr,rkr,tkr,p5,I0e,akr,nkr,aee,skr,lkr,ikr,_5,N0e,dkr,ckr,nee,mkr,fkr,gkr,b5,q0e,hkr,ukr,see,pkr,_kr,bkr,v5,j0e,vkr,Fkr,lee,Tkr,Mkr,Ekr,F5,D0e,Ckr,wkr,iee,Akr,Lkr,ykr,T5,oKe,Qc,M5,G0e,bk,xkr,O0e,$kr,rKe,ir,vk,kkr,Wc,Skr,dee,Rkr,Pkr,cee,Bkr,Ikr,Nkr,Fk,qkr,V0e,jkr,Dkr,Gkr,zt,Tk,Okr,X0e,Vkr,Xkr,Uc,zkr,z0e,Qkr,Wkr,mee,Ukr,Hkr,Jkr,E5,Ykr,qr,Mk,Kkr,Q0e,Zkr,eSr,An,oSr,W0e,rSr,tSr,U0e,aSr,nSr,H0e,sSr,lSr,iSr,Me,C5,J0e,dSr,cSr,fee,mSr,fSr,gSr,w5,Y0e,hSr,uSr,gee,pSr,_Sr,bSr,A5,K0e,vSr,FSr,hee,TSr,MSr,ESr,L5,Z0e,CSr,wSr,uee,ASr,LSr,ySr,y5,ewe,xSr,$Sr,pee,kSr,SSr,RSr,x5,owe,PSr,BSr,_ee,ISr,NSr,qSr,$5,rwe,jSr,DSr,bee,GSr,OSr,VSr,k5,twe,XSr,zSr,vee,QSr,WSr,USr,S5,awe,HSr,JSr,Fee,YSr,KSr,ZSr,R5,nwe,eRr,oRr,Tee,rRr,tRr,aRr,P5,swe,nRr,sRr,Mee,lRr,iRr,dRr,B5,lwe,cRr,mRr,Eee,fRr,gRr,hRr,I5,iwe,uRr,pRr,Cee,_Rr,bRr,vRr,N5,dwe,FRr,TRr,wee,MRr,ERr,CRr,q5,tKe,Hc,j5,cwe,Ek,wRr,mwe,ARr,aKe,dr,Ck,LRr,Jc,yRr,Aee,xRr,$Rr,Lee,kRr,SRr,RRr,wk,PRr,fwe,BRr,IRr,NRr,Qt,Ak,qRr,gwe,jRr,DRr,Yc,GRr,hwe,ORr,VRr,yee,XRr,zRr,QRr,D5,WRr,jr,Lk,URr,uwe,HRr,JRr,Ln,YRr,pwe,KRr,ZRr,_we,ePr,oPr,bwe,rPr,tPr,aPr,Be,G5,vwe,nPr,sPr,xee,lPr,iPr,dPr,O5,Fwe,cPr,mPr,$ee,fPr,gPr,hPr,vl,Twe,uPr,pPr,kee,_Pr,bPr,See,vPr,FPr,TPr,V5,Mwe,MPr,EPr,Ree,CPr,wPr,APr,X5,Ewe,LPr,yPr,Pee,xPr,$Pr,kPr,z5,Cwe,SPr,RPr,Bee,PPr,BPr,IPr,Q5,wwe,NPr,qPr,Iee,jPr,DPr,GPr,W5,Awe,OPr,VPr,Nee,XPr,zPr,QPr,U5,Lwe,WPr,UPr,qee,HPr,JPr,YPr,H5,nKe,Kc,J5,ywe,yk,KPr,xwe,ZPr,sKe,cr,xk,eBr,Zc,oBr,jee,rBr,tBr,Dee,aBr,nBr,sBr,$k,lBr,$we,iBr,dBr,cBr,Wt,kk,mBr,kwe,fBr,gBr,em,hBr,Swe,uBr,pBr,Gee,_Br,bBr,vBr,Y5,FBr,Dr,Sk,TBr,Rwe,MBr,EBr,yn,CBr,Pwe,wBr,ABr,Bwe,LBr,yBr,Iwe,xBr,$Br,kBr,om,K5,Nwe,SBr,RBr,Oee,PBr,BBr,IBr,Z5,qwe,NBr,qBr,Vee,jBr,DBr,GBr,e0,jwe,OBr,VBr,Xee,XBr,zBr,QBr,o0,lKe,rm,r0,Dwe,Rk,WBr,Gwe,UBr,iKe,mr,Pk,HBr,tm,JBr,zee,YBr,KBr,Qee,ZBr,eIr,oIr,Bk,rIr,Owe,tIr,aIr,nIr,Ut,Ik,sIr,Vwe,lIr,iIr,am,dIr,Xwe,cIr,mIr,Wee,fIr,gIr,hIr,t0,uIr,Gr,Nk,pIr,zwe,_Ir,bIr,xn,vIr,Qwe,FIr,TIr,Wwe,MIr,EIr,Uwe,CIr,wIr,AIr,fe,a0,Hwe,LIr,yIr,Uee,xIr,$Ir,kIr,n0,Jwe,SIr,RIr,Hee,PIr,BIr,IIr,s0,Ywe,NIr,qIr,Jee,jIr,DIr,GIr,l0,Kwe,OIr,VIr,Yee,XIr,zIr,QIr,i0,Zwe,WIr,UIr,Kee,HIr,JIr,YIr,d0,eAe,KIr,ZIr,Zee,eNr,oNr,rNr,c0,oAe,tNr,aNr,eoe,nNr,sNr,lNr,m0,rAe,iNr,dNr,ooe,cNr,mNr,fNr,f0,tAe,gNr,hNr,roe,uNr,pNr,_Nr,g0,aAe,bNr,vNr,toe,FNr,TNr,MNr,h0,nAe,ENr,CNr,aoe,wNr,ANr,LNr,u0,sAe,yNr,xNr,noe,$Nr,kNr,SNr,p0,lAe,RNr,PNr,soe,BNr,INr,NNr,_0,iAe,qNr,jNr,loe,DNr,GNr,ONr,b0,dAe,VNr,XNr,ioe,zNr,QNr,WNr,v0,cAe,UNr,HNr,doe,JNr,YNr,KNr,F0,mAe,ZNr,eqr,coe,oqr,rqr,tqr,T0,fAe,aqr,nqr,moe,sqr,lqr,iqr,M0,gAe,dqr,cqr,foe,mqr,fqr,gqr,E0,hAe,hqr,uqr,goe,pqr,_qr,bqr,C0,dKe,nm,w0,uAe,qk,vqr,pAe,Fqr,cKe,fr,jk,Tqr,sm,Mqr,hoe,Eqr,Cqr,uoe,wqr,Aqr,Lqr,Dk,yqr,_Ae,xqr,$qr,kqr,Ht,Gk,Sqr,bAe,Rqr,Pqr,lm,Bqr,vAe,Iqr,Nqr,poe,qqr,jqr,Dqr,A0,Gqr,Or,Ok,Oqr,FAe,Vqr,Xqr,$n,zqr,TAe,Qqr,Wqr,MAe,Uqr,Hqr,EAe,Jqr,Yqr,Kqr,ye,L0,CAe,Zqr,ejr,_oe,ojr,rjr,tjr,y0,wAe,ajr,njr,boe,sjr,ljr,ijr,x0,AAe,djr,cjr,voe,mjr,fjr,gjr,$0,LAe,hjr,ujr,Foe,pjr,_jr,bjr,k0,yAe,vjr,Fjr,Toe,Tjr,Mjr,Ejr,S0,xAe,Cjr,wjr,Moe,Ajr,Ljr,yjr,R0,$Ae,xjr,$jr,Eoe,kjr,Sjr,Rjr,P0,kAe,Pjr,Bjr,Coe,Ijr,Njr,qjr,B0,SAe,jjr,Djr,woe,Gjr,Ojr,Vjr,I0,RAe,Xjr,zjr,Aoe,Qjr,Wjr,Ujr,N0,mKe,im,q0,PAe,Vk,Hjr,BAe,Jjr,fKe,gr,Xk,Yjr,dm,Kjr,Loe,Zjr,eDr,yoe,oDr,rDr,tDr,zk,aDr,IAe,nDr,sDr,lDr,Jt,Qk,iDr,NAe,dDr,cDr,cm,mDr,qAe,fDr,gDr,xoe,hDr,uDr,pDr,j0,_Dr,Vr,Wk,bDr,jAe,vDr,FDr,kn,TDr,DAe,MDr,EDr,GAe,CDr,wDr,OAe,ADr,LDr,yDr,re,D0,VAe,xDr,$Dr,$oe,kDr,SDr,RDr,G0,XAe,PDr,BDr,koe,IDr,NDr,qDr,O0,zAe,jDr,DDr,Soe,GDr,ODr,VDr,V0,QAe,XDr,zDr,Roe,QDr,WDr,UDr,X0,WAe,HDr,JDr,Poe,YDr,KDr,ZDr,z0,UAe,eGr,oGr,Boe,rGr,tGr,aGr,Q0,HAe,nGr,sGr,Ioe,lGr,iGr,dGr,W0,JAe,cGr,mGr,Noe,fGr,gGr,hGr,U0,YAe,uGr,pGr,qoe,_Gr,bGr,vGr,H0,KAe,FGr,TGr,joe,MGr,EGr,CGr,J0,ZAe,wGr,AGr,Doe,LGr,yGr,xGr,Y0,e6e,$Gr,kGr,Goe,SGr,RGr,PGr,K0,o6e,BGr,IGr,Ooe,NGr,qGr,jGr,Z0,r6e,DGr,GGr,Voe,OGr,VGr,XGr,ew,t6e,zGr,QGr,Xoe,WGr,UGr,HGr,ow,a6e,JGr,YGr,zoe,KGr,ZGr,eOr,rw,n6e,oOr,rOr,Qoe,tOr,aOr,nOr,tw,s6e,sOr,lOr,Woe,iOr,dOr,cOr,aw,l6e,mOr,fOr,Uoe,gOr,hOr,uOr,nw,i6e,pOr,_Or,Hoe,bOr,vOr,FOr,sw,d6e,TOr,MOr,Joe,EOr,COr,wOr,lw,c6e,AOr,LOr,Yoe,yOr,xOr,$Or,iw,m6e,kOr,SOr,Koe,ROr,POr,BOr,dw,f6e,IOr,NOr,Zoe,qOr,jOr,DOr,cw,g6e,GOr,OOr,ere,VOr,XOr,zOr,mw,h6e,QOr,WOr,ore,UOr,HOr,JOr,fw,u6e,YOr,KOr,rre,ZOr,eVr,oVr,gw,gKe,mm,hw,p6e,Uk,rVr,_6e,tVr,hKe,hr,Hk,aVr,fm,nVr,tre,sVr,lVr,are,iVr,dVr,cVr,Jk,mVr,b6e,fVr,gVr,hVr,Yt,Yk,uVr,v6e,pVr,_Vr,gm,bVr,F6e,vVr,FVr,nre,TVr,MVr,EVr,uw,CVr,Xr,Kk,wVr,T6e,AVr,LVr,Sn,yVr,M6e,xVr,$Vr,E6e,kVr,SVr,C6e,RVr,PVr,BVr,ve,pw,w6e,IVr,NVr,sre,qVr,jVr,DVr,_w,A6e,GVr,OVr,lre,VVr,XVr,zVr,bw,L6e,QVr,WVr,ire,UVr,HVr,JVr,vw,y6e,YVr,KVr,dre,ZVr,eXr,oXr,Fw,x6e,rXr,tXr,cre,aXr,nXr,sXr,Tw,$6e,lXr,iXr,mre,dXr,cXr,mXr,Mw,k6e,fXr,gXr,fre,hXr,uXr,pXr,Ew,S6e,_Xr,bXr,gre,vXr,FXr,TXr,Cw,R6e,MXr,EXr,hre,CXr,wXr,AXr,ww,P6e,LXr,yXr,ure,xXr,$Xr,kXr,Aw,B6e,SXr,RXr,pre,PXr,BXr,IXr,Lw,I6e,NXr,qXr,_re,jXr,DXr,GXr,yw,N6e,OXr,VXr,bre,XXr,zXr,QXr,xw,q6e,WXr,UXr,vre,HXr,JXr,YXr,$w,j6e,KXr,ZXr,Fre,ezr,ozr,rzr,kw,D6e,tzr,azr,Tre,nzr,szr,lzr,Sw,G6e,izr,dzr,Mre,czr,mzr,fzr,Rw,uKe,hm,Pw,O6e,Zk,gzr,V6e,hzr,pKe,ur,eS,uzr,um,pzr,Ere,_zr,bzr,Cre,vzr,Fzr,Tzr,oS,Mzr,X6e,Ezr,Czr,wzr,Kt,rS,Azr,z6e,Lzr,yzr,pm,xzr,Q6e,$zr,kzr,wre,Szr,Rzr,Pzr,Bw,Bzr,zr,tS,Izr,W6e,Nzr,qzr,Rn,jzr,U6e,Dzr,Gzr,H6e,Ozr,Vzr,J6e,Xzr,zzr,Qzr,aS,Iw,Y6e,Wzr,Uzr,Are,Hzr,Jzr,Yzr,Nw,K6e,Kzr,Zzr,Lre,eQr,oQr,rQr,qw,_Ke,_m,jw,Z6e,nS,tQr,e7e,aQr,bKe,pr,sS,nQr,bm,sQr,yre,lQr,iQr,xre,dQr,cQr,mQr,lS,fQr,o7e,gQr,hQr,uQr,Zt,iS,pQr,r7e,_Qr,bQr,vm,vQr,t7e,FQr,TQr,$re,MQr,EQr,CQr,Dw,wQr,Qr,dS,AQr,a7e,LQr,yQr,Pn,xQr,n7e,$Qr,kQr,s7e,SQr,RQr,l7e,PQr,BQr,IQr,i7e,Gw,d7e,NQr,qQr,kre,jQr,DQr,GQr,Ow,vKe,Fm,Vw,c7e,cS,OQr,m7e,VQr,FKe,_r,mS,XQr,Tm,zQr,Sre,QQr,WQr,Rre,UQr,HQr,JQr,fS,YQr,f7e,KQr,ZQr,eWr,ea,gS,oWr,g7e,rWr,tWr,Mm,aWr,h7e,nWr,sWr,Pre,lWr,iWr,dWr,Xw,cWr,Wr,hS,mWr,u7e,fWr,gWr,Bn,hWr,p7e,uWr,pWr,_7e,_Wr,bWr,b7e,vWr,FWr,TWr,v7e,zw,F7e,MWr,EWr,Bre,CWr,wWr,AWr,Qw,TKe,Em,Ww,T7e,uS,LWr,M7e,yWr,MKe,br,pS,xWr,Cm,$Wr,Ire,kWr,SWr,Nre,RWr,PWr,BWr,_S,IWr,E7e,NWr,qWr,jWr,oa,bS,DWr,C7e,GWr,OWr,wm,VWr,w7e,XWr,zWr,qre,QWr,WWr,UWr,Uw,HWr,Ur,vS,JWr,A7e,YWr,KWr,In,ZWr,L7e,eUr,oUr,y7e,rUr,tUr,x7e,aUr,nUr,sUr,de,Hw,$7e,lUr,iUr,jre,dUr,cUr,mUr,Jw,k7e,fUr,gUr,Dre,hUr,uUr,pUr,Yw,S7e,_Ur,bUr,Gre,vUr,FUr,TUr,Kw,R7e,MUr,EUr,Ore,CUr,wUr,AUr,Zw,P7e,LUr,yUr,Vre,xUr,$Ur,kUr,eA,B7e,SUr,RUr,Xre,PUr,BUr,IUr,oA,I7e,NUr,qUr,zre,jUr,DUr,GUr,rA,N7e,OUr,VUr,Qre,XUr,zUr,QUr,tA,q7e,WUr,UUr,Wre,HUr,JUr,YUr,aA,j7e,KUr,ZUr,Ure,eHr,oHr,rHr,nA,D7e,tHr,aHr,Hre,nHr,sHr,lHr,sA,G7e,iHr,dHr,Jre,cHr,mHr,fHr,lA,O7e,gHr,hHr,Yre,uHr,pHr,_Hr,iA,V7e,bHr,vHr,Kre,FHr,THr,MHr,dA,X7e,EHr,CHr,Zre,wHr,AHr,LHr,cA,z7e,yHr,xHr,ete,$Hr,kHr,SHr,mA,Q7e,RHr,PHr,ote,BHr,IHr,NHr,fA,W7e,qHr,jHr,rte,DHr,GHr,OHr,gA,U7e,VHr,XHr,tte,zHr,QHr,WHr,hA,H7e,UHr,HHr,ate,JHr,YHr,KHr,uA,J7e,ZHr,eJr,nte,oJr,rJr,tJr,pA,EKe,Am,_A,Y7e,FS,aJr,K7e,nJr,CKe,vr,TS,sJr,Lm,lJr,ste,iJr,dJr,lte,cJr,mJr,fJr,MS,gJr,Z7e,hJr,uJr,pJr,ra,ES,_Jr,eLe,bJr,vJr,ym,FJr,oLe,TJr,MJr,ite,EJr,CJr,wJr,bA,AJr,Hr,CS,LJr,rLe,yJr,xJr,Nn,$Jr,tLe,kJr,SJr,aLe,RJr,PJr,nLe,BJr,IJr,NJr,ce,vA,sLe,qJr,jJr,dte,DJr,GJr,OJr,FA,lLe,VJr,XJr,cte,zJr,QJr,WJr,TA,iLe,UJr,HJr,mte,JJr,YJr,KJr,MA,dLe,ZJr,eYr,fte,oYr,rYr,tYr,EA,cLe,aYr,nYr,gte,sYr,lYr,iYr,CA,mLe,dYr,cYr,hte,mYr,fYr,gYr,wA,fLe,hYr,uYr,ute,pYr,_Yr,bYr,AA,gLe,vYr,FYr,pte,TYr,MYr,EYr,LA,hLe,CYr,wYr,_te,AYr,LYr,yYr,yA,uLe,xYr,$Yr,bte,kYr,SYr,RYr,xA,pLe,PYr,BYr,vte,IYr,NYr,qYr,$A,_Le,jYr,DYr,Fte,GYr,OYr,VYr,kA,bLe,XYr,zYr,Tte,QYr,WYr,UYr,SA,vLe,HYr,JYr,Mte,YYr,KYr,ZYr,RA,FLe,eKr,oKr,Ete,rKr,tKr,aKr,PA,TLe,nKr,sKr,Cte,lKr,iKr,dKr,BA,MLe,cKr,mKr,wte,fKr,gKr,hKr,IA,ELe,uKr,pKr,Ate,_Kr,bKr,vKr,NA,CLe,FKr,TKr,Lte,MKr,EKr,CKr,qA,wLe,wKr,AKr,yte,LKr,yKr,xKr,jA,ALe,$Kr,kKr,xte,SKr,RKr,PKr,DA,wKe,xm,GA,LLe,wS,BKr,yLe,IKr,AKe,Fr,AS,NKr,$m,qKr,$te,jKr,DKr,kte,GKr,OKr,VKr,LS,XKr,xLe,zKr,QKr,WKr,ta,yS,UKr,$Le,HKr,JKr,km,YKr,kLe,KKr,ZKr,Ste,eZr,oZr,rZr,OA,tZr,Jr,xS,aZr,SLe,nZr,sZr,qn,lZr,RLe,iZr,dZr,PLe,cZr,mZr,BLe,fZr,gZr,hZr,ILe,VA,NLe,uZr,pZr,Rte,_Zr,bZr,vZr,XA,LKe,Sm,zA,qLe,$S,FZr,jLe,TZr,yKe,Tr,kS,MZr,Rm,EZr,Pte,CZr,wZr,Bte,AZr,LZr,yZr,SS,xZr,DLe,$Zr,kZr,SZr,aa,RS,RZr,GLe,PZr,BZr,Pm,IZr,OLe,NZr,qZr,Ite,jZr,DZr,GZr,QA,OZr,Yr,PS,VZr,VLe,XZr,zZr,jn,QZr,XLe,WZr,UZr,zLe,HZr,JZr,QLe,YZr,KZr,ZZr,WLe,WA,ULe,eet,oet,Nte,ret,tet,aet,UA,xKe,Bm,HA,HLe,BS,net,JLe,set,$Ke,Mr,IS,iet,Im,det,qte,cet,met,jte,fet,get,het,NS,uet,YLe,pet,_et,bet,na,qS,vet,KLe,Fet,Tet,Nm,Met,ZLe,Eet,Cet,Dte,wet,Aet,Let,JA,yet,Kr,jS,xet,eye,$et,ket,Dn,Set,oye,Ret,Pet,rye,Bet,Iet,tye,Net,qet,jet,te,YA,aye,Det,Get,Gte,Oet,Vet,Xet,KA,nye,zet,Qet,Ote,Wet,Uet,Het,ZA,sye,Jet,Yet,Vte,Ket,Zet,eot,e6,lye,oot,rot,Xte,tot,aot,not,o6,iye,sot,lot,zte,iot,dot,cot,r6,dye,mot,fot,Qte,got,hot,uot,t6,cye,pot,_ot,Wte,bot,vot,Fot,a6,mye,Tot,Mot,Ute,Eot,Cot,wot,n6,fye,Aot,Lot,Hte,yot,xot,$ot,s6,gye,kot,Sot,Jte,Rot,Pot,Bot,l6,hye,Iot,Not,Yte,qot,jot,Dot,i6,uye,Got,Oot,Kte,Vot,Xot,zot,d6,pye,Qot,Wot,Zte,Uot,Hot,Jot,c6,_ye,Yot,Kot,eae,Zot,ert,ort,m6,bye,rrt,trt,oae,art,nrt,srt,f6,vye,lrt,irt,rae,drt,crt,mrt,g6,Fye,frt,grt,tae,hrt,urt,prt,h6,Tye,_rt,brt,aae,vrt,Frt,Trt,u6,Mye,Mrt,Ert,nae,Crt,wrt,Art,p6,Eye,Lrt,yrt,sae,xrt,$rt,krt,_6,Cye,Srt,Rrt,lae,Prt,Brt,Irt,b6,wye,Nrt,qrt,iae,jrt,Drt,Grt,v6,Aye,Ort,Vrt,dae,Xrt,zrt,Qrt,F6,Lye,Wrt,Urt,cae,Hrt,Jrt,Yrt,T6,yye,Krt,Zrt,mae,ett,ott,rtt,M6,xye,ttt,att,fae,ntt,stt,ltt,E6,$ye,itt,dtt,gae,ctt,mtt,ftt,C6,kKe,qm,w6,kye,DS,gtt,Sye,htt,SKe,Er,GS,utt,jm,ptt,hae,_tt,btt,uae,vtt,Ftt,Ttt,OS,Mtt,Rye,Ett,Ctt,wtt,sa,VS,Att,Pye,Ltt,ytt,Dm,xtt,Bye,$tt,ktt,pae,Stt,Rtt,Ptt,A6,Btt,Zr,XS,Itt,Iye,Ntt,qtt,Gn,jtt,Nye,Dtt,Gtt,qye,Ott,Vtt,jye,Xtt,ztt,Qtt,xe,L6,Dye,Wtt,Utt,_ae,Htt,Jtt,Ytt,y6,Gye,Ktt,Ztt,bae,eat,oat,rat,x6,Oye,tat,aat,vae,nat,sat,lat,$6,Vye,iat,dat,Fae,cat,mat,fat,k6,Xye,gat,hat,Tae,uat,pat,_at,S6,zye,bat,vat,Mae,Fat,Tat,Mat,R6,Qye,Eat,Cat,Eae,wat,Aat,Lat,P6,Wye,yat,xat,Cae,$at,kat,Sat,B6,Uye,Rat,Pat,wae,Bat,Iat,Nat,I6,Hye,qat,jat,Aae,Dat,Gat,Oat,N6,RKe,Gm,q6,Jye,zS,Vat,Yye,Xat,PKe,Cr,QS,zat,Om,Qat,Lae,Wat,Uat,yae,Hat,Jat,Yat,WS,Kat,Kye,Zat,ent,ont,la,US,rnt,Zye,tnt,ant,Vm,nnt,e8e,snt,lnt,xae,int,dnt,cnt,j6,mnt,et,HS,fnt,o8e,gnt,hnt,On,unt,r8e,pnt,_nt,t8e,bnt,vnt,a8e,Fnt,Tnt,Mnt,Ee,D6,n8e,Ent,Cnt,$ae,wnt,Ant,Lnt,G6,s8e,ynt,xnt,kae,$nt,knt,Snt,O6,l8e,Rnt,Pnt,Sae,Bnt,Int,Nnt,V6,i8e,qnt,jnt,Rae,Dnt,Gnt,Ont,X6,d8e,Vnt,Xnt,Pae,znt,Qnt,Wnt,z6,c8e,Unt,Hnt,Bae,Jnt,Ynt,Knt,Q6,m8e,Znt,est,Iae,ost,rst,tst,W6,f8e,ast,nst,Nae,sst,lst,ist,U6,g8e,dst,cst,qae,mst,fst,gst,H6,h8e,hst,ust,jae,pst,_st,bst,J6,u8e,vst,Fst,Dae,Tst,Mst,Est,Y6,p8e,Cst,wst,Gae,Ast,Lst,yst,K6,_8e,xst,$st,Oae,kst,Sst,Rst,Z6,BKe,Xm,e7,b8e,JS,Pst,v8e,Bst,IKe,wr,YS,Ist,zm,Nst,Vae,qst,jst,Xae,Dst,Gst,Ost,KS,Vst,F8e,Xst,zst,Qst,ia,ZS,Wst,T8e,Ust,Hst,Qm,Jst,M8e,Yst,Kst,zae,Zst,elt,olt,o7,rlt,ot,eR,tlt,E8e,alt,nlt,Vn,slt,C8e,llt,ilt,w8e,dlt,clt,A8e,mlt,flt,glt,$e,r7,L8e,hlt,ult,Qae,plt,_lt,blt,t7,y8e,vlt,Flt,Wae,Tlt,Mlt,Elt,a7,x8e,Clt,wlt,Uae,Alt,Llt,ylt,n7,$8e,xlt,$lt,Hae,klt,Slt,Rlt,s7,k8e,Plt,Blt,Jae,Ilt,Nlt,qlt,l7,S8e,jlt,Dlt,Yae,Glt,Olt,Vlt,i7,R8e,Xlt,zlt,Kae,Qlt,Wlt,Ult,d7,P8e,Hlt,Jlt,Zae,Ylt,Klt,Zlt,c7,B8e,eit,oit,ene,rit,tit,ait,m7,I8e,nit,sit,one,lit,iit,dit,f7,NKe,Wm,g7,N8e,oR,cit,q8e,mit,qKe,Ar,rR,fit,Um,git,rne,hit,uit,tne,pit,_it,bit,tR,vit,j8e,Fit,Tit,Mit,da,aR,Eit,D8e,Cit,wit,Hm,Ait,G8e,Lit,yit,ane,xit,$it,kit,h7,Sit,rt,nR,Rit,O8e,Pit,Bit,Xn,Iit,V8e,Nit,qit,X8e,jit,Dit,z8e,Git,Oit,Vit,ke,u7,Q8e,Xit,zit,nne,Qit,Wit,Uit,p7,W8e,Hit,Jit,sne,Yit,Kit,Zit,_7,U8e,edt,odt,lne,rdt,tdt,adt,b7,H8e,ndt,sdt,ine,ldt,idt,ddt,v7,J8e,cdt,mdt,dne,fdt,gdt,hdt,F7,Y8e,udt,pdt,cne,_dt,bdt,vdt,T7,K8e,Fdt,Tdt,mne,Mdt,Edt,Cdt,M7,Z8e,wdt,Adt,fne,Ldt,ydt,xdt,E7,e9e,$dt,kdt,gne,Sdt,Rdt,Pdt,C7,o9e,Bdt,Idt,hne,Ndt,qdt,jdt,w7,jKe,Jm,A7,r9e,sR,Ddt,t9e,Gdt,DKe,Lr,lR,Odt,Ym,Vdt,une,Xdt,zdt,pne,Qdt,Wdt,Udt,iR,Hdt,a9e,Jdt,Ydt,Kdt,ca,dR,Zdt,n9e,ect,oct,Km,rct,s9e,tct,act,_ne,nct,sct,lct,L7,ict,tt,cR,dct,l9e,cct,mct,zn,fct,i9e,gct,hct,d9e,uct,pct,c9e,_ct,bct,vct,Se,y7,m9e,Fct,Tct,bne,Mct,Ect,Cct,x7,f9e,wct,Act,vne,Lct,yct,xct,$7,g9e,$ct,kct,Fne,Sct,Rct,Pct,k7,h9e,Bct,Ict,Tne,Nct,qct,jct,S7,u9e,Dct,Gct,Mne,Oct,Vct,Xct,R7,p9e,zct,Qct,Ene,Wct,Uct,Hct,P7,_9e,Jct,Yct,Cne,Kct,Zct,emt,B7,b9e,omt,rmt,wne,tmt,amt,nmt,I7,v9e,smt,lmt,Ane,imt,dmt,cmt,N7,F9e,mmt,fmt,Lne,gmt,hmt,umt,q7,GKe,Zm,j7,T9e,mR,pmt,M9e,_mt,OKe,yr,fR,bmt,ef,vmt,yne,Fmt,Tmt,xne,Mmt,Emt,Cmt,gR,wmt,E9e,Amt,Lmt,ymt,ma,hR,xmt,C9e,$mt,kmt,of,Smt,w9e,Rmt,Pmt,$ne,Bmt,Imt,Nmt,D7,qmt,at,uR,jmt,A9e,Dmt,Gmt,Qn,Omt,L9e,Vmt,Xmt,y9e,zmt,Qmt,x9e,Wmt,Umt,Hmt,Re,G7,$9e,Jmt,Ymt,kne,Kmt,Zmt,eft,O7,k9e,oft,rft,Sne,tft,aft,nft,V7,S9e,sft,lft,Rne,ift,dft,cft,X7,R9e,mft,fft,Pne,gft,hft,uft,z7,P9e,pft,_ft,Bne,bft,vft,Fft,Q7,B9e,Tft,Mft,Ine,Eft,Cft,wft,W7,I9e,Aft,Lft,Nne,yft,xft,$ft,U7,N9e,kft,Sft,qne,Rft,Pft,Bft,H7,q9e,Ift,Nft,jne,qft,jft,Dft,J7,j9e,Gft,Oft,Dne,Vft,Xft,zft,Y7,VKe,rf,K7,D9e,pR,Qft,G9e,Wft,XKe,xr,_R,Uft,tf,Hft,Gne,Jft,Yft,One,Kft,Zft,egt,bR,ogt,O9e,rgt,tgt,agt,fa,vR,ngt,V9e,sgt,lgt,af,igt,X9e,dgt,cgt,Vne,mgt,fgt,ggt,Z7,hgt,nt,FR,ugt,z9e,pgt,_gt,Wn,bgt,Q9e,vgt,Fgt,W9e,Tgt,Mgt,U9e,Egt,Cgt,wgt,Xe,eL,H9e,Agt,Lgt,Xne,ygt,xgt,$gt,oL,J9e,kgt,Sgt,zne,Rgt,Pgt,Bgt,rL,Y9e,Igt,Ngt,Qne,qgt,jgt,Dgt,tL,K9e,Ggt,Ogt,Wne,Vgt,Xgt,zgt,aL,Z9e,Qgt,Wgt,Une,Ugt,Hgt,Jgt,nL,exe,Ygt,Kgt,Hne,Zgt,eht,oht,sL,oxe,rht,tht,Jne,aht,nht,sht,lL,rxe,lht,iht,Yne,dht,cht,mht,iL,zKe,nf,dL,txe,TR,fht,axe,ght,QKe,$r,MR,hht,sf,uht,Kne,pht,_ht,Zne,bht,vht,Fht,ER,Tht,nxe,Mht,Eht,Cht,ga,CR,wht,sxe,Aht,Lht,lf,yht,lxe,xht,$ht,ese,kht,Sht,Rht,cL,Pht,st,wR,Bht,ixe,Iht,Nht,Un,qht,dxe,jht,Dht,cxe,Ght,Oht,mxe,Vht,Xht,zht,ze,mL,fxe,Qht,Wht,ose,Uht,Hht,Jht,fL,gxe,Yht,Kht,rse,Zht,eut,out,gL,hxe,rut,tut,tse,aut,nut,sut,hL,uxe,lut,iut,ase,dut,cut,mut,uL,pxe,fut,gut,nse,hut,uut,put,pL,_xe,_ut,but,sse,vut,Fut,Tut,_L,bxe,Mut,Eut,lse,Cut,wut,Aut,bL,vxe,Lut,yut,ise,xut,$ut,kut,vL,WKe,df,FL,Fxe,AR,Sut,Txe,Rut,UKe,kr,LR,Put,cf,But,dse,Iut,Nut,cse,qut,jut,Dut,yR,Gut,Mxe,Out,Vut,Xut,ha,xR,zut,Exe,Qut,Wut,mf,Uut,Cxe,Hut,Jut,mse,Yut,Kut,Zut,TL,ept,lt,$R,opt,wxe,rpt,tpt,Hn,apt,Axe,npt,spt,Lxe,lpt,ipt,yxe,dpt,cpt,mpt,xxe,ML,$xe,fpt,gpt,fse,hpt,upt,ppt,EL,HKe,ff,CL,kxe,kR,_pt,Sxe,bpt,JKe,Sr,SR,vpt,gf,Fpt,gse,Tpt,Mpt,hse,Ept,Cpt,wpt,RR,Apt,Rxe,Lpt,ypt,xpt,ua,PR,$pt,Pxe,kpt,Spt,hf,Rpt,Bxe,Ppt,Bpt,use,Ipt,Npt,qpt,wL,jpt,it,BR,Dpt,Ixe,Gpt,Opt,Jn,Vpt,Nxe,Xpt,zpt,qxe,Qpt,Wpt,jxe,Upt,Hpt,Jpt,IR,AL,Dxe,Ypt,Kpt,pse,Zpt,e_t,o_t,LL,Gxe,r_t,t_t,_se,a_t,n_t,s_t,yL,YKe,uf,xL,Oxe,NR,l_t,Vxe,i_t,KKe,Rr,qR,d_t,pf,c_t,bse,m_t,f_t,vse,g_t,h_t,u_t,jR,p_t,Xxe,__t,b_t,v_t,pa,DR,F_t,zxe,T_t,M_t,_f,E_t,Qxe,C_t,w_t,Fse,A_t,L_t,y_t,$L,x_t,dt,GR,$_t,Wxe,k_t,S_t,Yn,R_t,Uxe,P_t,B_t,Hxe,I_t,N_t,Jxe,q_t,j_t,D_t,Yxe,kL,Kxe,G_t,O_t,Tse,V_t,X_t,z_t,SL,ZKe;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),f9=new oe({}),g9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Af=new Q_t({props:{warning:!0,$$slots:{default:[Cca]},$$scope:{ctx:$}}}),h9=new oe({}),u9=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L632"}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L655"}}),Xh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[wca]},$$scope:{ctx:$}}}),v9=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L778"}}),F9=new oe({}),T9=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L419"}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L433"}}),Au=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Aca]},$$scope:{ctx:$}}}),w9=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L634"}}),A9=new oe({}),L9=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L214"}}),hp=new Q_t({props:{$$slots:{default:[Lca]},$$scope:{ctx:$}}}),up=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[yca]},$$scope:{ctx:$}}}),k9=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L341"}}),S9=new oe({}),R9=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L92"}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L106"}}),jp=new Q_t({props:{$$slots:{default:[xca]},$$scope:{ctx:$}}}),Dp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[$ca]},$$scope:{ctx:$}}}),N9=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L259"}}),q9=new oe({}),j9=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[kca]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Sca]},$$scope:{ctx:$}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L830"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Rca]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Pca]},$$scope:{ctx:$}}}),U9=new oe({}),H9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L845"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Bca]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Gv=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ica]},$$scope:{ctx:$}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L852"}}),rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Nca]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qca]},$$scope:{ctx:$}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L859"}}),lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jca]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Dca]},$$scope:{ctx:$}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Gca]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Oca]},$$scope:{ctx:$}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L924"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Vca]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Xca]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L931"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[zca]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Qca]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L917"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Wca]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Uca]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Hca]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Jca]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Yca]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Kca]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Zca]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[ema]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L940"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[oma]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[rma]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L979"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[tma]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[ama]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L986"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[nma]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sma]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L895"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[lma]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[ima]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L993"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[dma]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[cma]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1016"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[mma]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[fma]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1000"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[gma]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[hma]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1007"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[uma]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[pma]},$$scope:{ctx:$}}}),k$=new oe({}),S$=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1025"}}),P$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[_ma]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[bma]},$$scope:{ctx:$}}}),I$=new oe({}),N$=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1032"}}),j$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[vma]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Fma]},$$scope:{ctx:$}}}),G$=new oe({}),O$=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L972"}}),X$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Tma]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Mma]},$$scope:{ctx:$}}}),W$=new oe({}),U$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L947"}}),J$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Ema]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Cma]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L954"}}),ok=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[wma]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ama]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L963"}}),sk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Lma]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[yma]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[xma]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H3=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[$ma]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[kma]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Sma]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Rma]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Pma]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Bma]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ima]},$$scope:{ctx:$}}}),yk=new oe({}),xk=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),kk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Nma]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[qma]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[jma]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Dma]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Gma]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Oma]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Qk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Vma]},$$scope:{ctx:$}}}),Wk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Xma]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L559"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zma]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qma]},$$scope:{ctx:$}}}),Zk=new oe({}),eS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L566"}}),rS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Wma]},$$scope:{ctx:$}}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Uma]},$$scope:{ctx:$}}}),nS=new oe({}),sS=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),iS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Hma]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Jma]},$$scope:{ctx:$}}}),cS=new oe({}),mS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),gS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Yma]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Kma]},$$scope:{ctx:$}}}),uS=new oe({}),pS=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),bS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Zma]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[efa]},$$scope:{ctx:$}}}),FS=new oe({}),TS=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),ES=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ofa]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[rfa]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),yS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[tfa]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[afa]},$$scope:{ctx:$}}}),$S=new oe({}),kS=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L575"}}),RS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nfa]},$$scope:{ctx:$}}}),PS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UA=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sfa]},$$scope:{ctx:$}}}),BS=new oe({}),IS=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),qS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JA=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[lfa]},$$scope:{ctx:$}}}),jS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ifa]},$$scope:{ctx:$}}}),DS=new oe({}),GS=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),VS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[dfa]},$$scope:{ctx:$}}}),XS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cfa]},$$scope:{ctx:$}}}),zS=new oe({}),QS=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),US=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[mfa]},$$scope:{ctx:$}}}),HS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ffa]},$$scope:{ctx:$}}}),JS=new oe({}),YS=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),ZS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[gfa]},$$scope:{ctx:$}}}),eR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hfa]},$$scope:{ctx:$}}}),oR=new oe({}),rR=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),aR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ufa]},$$scope:{ctx:$}}}),nR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pfa]},$$scope:{ctx:$}}}),sR=new oe({}),lR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),dR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L7=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_fa]},$$scope:{ctx:$}}}),cR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[bfa]},$$scope:{ctx:$}}}),mR=new oe({}),fR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),hR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vfa]},$$scope:{ctx:$}}}),uR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ffa]},$$scope:{ctx:$}}}),pR=new oe({}),_R=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),vR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Tfa]},$$scope:{ctx:$}}}),FR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Mfa]},$$scope:{ctx:$}}}),TR=new oe({}),MR=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),CR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Efa]},$$scope:{ctx:$}}}),wR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Cfa]},$$scope:{ctx:$}}}),AR=new oe({}),LR=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),xR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wfa]},$$scope:{ctx:$}}}),$R=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Afa]},$$scope:{ctx:$}}}),kR=new oe({}),SR=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),PR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Lfa]},$$scope:{ctx:$}}}),BR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yfa]},$$scope:{ctx:$}}}),NR=new oe({}),qR=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),DR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$L=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[xfa]},$$scope:{ctx:$}}}),GR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SL=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$fa]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Lo=a("span"),od=o("Auto Classes"),Tf=l(),ut=a("p"),rd=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),td=a("code"),i9=o("from_pretrained()"),Mf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),Ue=a("p"),ad=o("Instantiating one of "),Zn=a("a"),d9=o("AutoConfig"),es=o(", "),os=a("a"),c9=o("AutoModel"),nd=o(`, and
`),rs=a("a"),m9=o("AutoTokenizer"),sd=o(" will directly create a class of the relevant architecture. For instance"),Ef=l(),F(Qa.$$.fragment),He=l(),Ae=a("p"),fB=o("will create a model that is an instance of "),ld=a("a"),gB=o("BertModel"),hB=o("."),yo=l(),Wa=a("p"),uB=o("There is one class of "),Cf=a("code"),pB=o("AutoModel"),_oo=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DJe=l(),id=a("h2"),wf=a("a"),wie=a("span"),F(f9.$$.fragment),boo=l(),Aie=a("span"),voo=o("Extending the Auto Classes"),GJe=l(),ts=a("p"),Foo=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Lie=a("code"),Too=o("NewModel"),Moo=o(", make sure you have a "),yie=a("code"),Eoo=o("NewModelConfig"),Coo=o(` then you can add those to the auto
classes like this:`),OJe=l(),F(g9.$$.fragment),VJe=l(),_B=a("p"),woo=o("You will then be able to use the auto classes like you would usually do!"),XJe=l(),F(Af.$$.fragment),zJe=l(),dd=a("h2"),Lf=a("a"),xie=a("span"),F(h9.$$.fragment),Aoo=l(),$ie=a("span"),Loo=o("AutoConfig"),QJe=l(),xo=a("div"),F(u9.$$.fragment),yoo=l(),p9=a("p"),xoo=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bB=a("a"),$oo=o("from_pretrained()"),koo=o(" class method."),Soo=l(),_9=a("p"),Roo=o("This class cannot be instantiated directly using "),kie=a("code"),Poo=o("__init__()"),Boo=o(" (throws an error)."),Ioo=l(),Pr=a("div"),F(b9.$$.fragment),Noo=l(),Sie=a("p"),qoo=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),joo=l(),cd=a("p"),Doo=o("The configuration class to instantiate is selected based on the "),Rie=a("code"),Goo=o("model_type"),Ooo=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Pie=a("code"),Voo=o("pretrained_model_name_or_path"),Xoo=o(":"),zoo=l(),A=a("ul"),yf=a("li"),Bie=a("strong"),Qoo=o("albert"),Woo=o(" \u2014 "),vB=a("a"),Uoo=o("AlbertConfig"),Hoo=o(" (ALBERT model)"),Joo=l(),xf=a("li"),Iie=a("strong"),Yoo=o("bart"),Koo=o(" \u2014 "),FB=a("a"),Zoo=o("BartConfig"),ero=o(" (BART model)"),oro=l(),$f=a("li"),Nie=a("strong"),rro=o("beit"),tro=o(" \u2014 "),TB=a("a"),aro=o("BeitConfig"),nro=o(" (BEiT model)"),sro=l(),kf=a("li"),qie=a("strong"),lro=o("bert"),iro=o(" \u2014 "),MB=a("a"),dro=o("BertConfig"),cro=o(" (BERT model)"),mro=l(),Sf=a("li"),jie=a("strong"),fro=o("bert-generation"),gro=o(" \u2014 "),EB=a("a"),hro=o("BertGenerationConfig"),uro=o(" (Bert Generation model)"),pro=l(),Rf=a("li"),Die=a("strong"),_ro=o("big_bird"),bro=o(" \u2014 "),CB=a("a"),vro=o("BigBirdConfig"),Fro=o(" (BigBird model)"),Tro=l(),Pf=a("li"),Gie=a("strong"),Mro=o("bigbird_pegasus"),Ero=o(" \u2014 "),wB=a("a"),Cro=o("BigBirdPegasusConfig"),wro=o(" (BigBird-Pegasus model)"),Aro=l(),Bf=a("li"),Oie=a("strong"),Lro=o("blenderbot"),yro=o(" \u2014 "),AB=a("a"),xro=o("BlenderbotConfig"),$ro=o(" (Blenderbot model)"),kro=l(),If=a("li"),Vie=a("strong"),Sro=o("blenderbot-small"),Rro=o(" \u2014 "),LB=a("a"),Pro=o("BlenderbotSmallConfig"),Bro=o(" (BlenderbotSmall model)"),Iro=l(),Nf=a("li"),Xie=a("strong"),Nro=o("bloom"),qro=o(" \u2014 "),yB=a("a"),jro=o("BloomConfig"),Dro=o(" (BLOOM model)"),Gro=l(),qf=a("li"),zie=a("strong"),Oro=o("camembert"),Vro=o(" \u2014 "),xB=a("a"),Xro=o("CamembertConfig"),zro=o(" (CamemBERT model)"),Qro=l(),jf=a("li"),Qie=a("strong"),Wro=o("canine"),Uro=o(" \u2014 "),$B=a("a"),Hro=o("CanineConfig"),Jro=o(" (CANINE model)"),Yro=l(),Df=a("li"),Wie=a("strong"),Kro=o("clip"),Zro=o(" \u2014 "),kB=a("a"),eto=o("CLIPConfig"),oto=o(" (CLIP model)"),rto=l(),Gf=a("li"),Uie=a("strong"),tto=o("codegen"),ato=o(" \u2014 "),SB=a("a"),nto=o("CodeGenConfig"),sto=o(" (CodeGen model)"),lto=l(),Of=a("li"),Hie=a("strong"),ito=o("convbert"),dto=o(" \u2014 "),RB=a("a"),cto=o("ConvBertConfig"),mto=o(" (ConvBERT model)"),fto=l(),Vf=a("li"),Jie=a("strong"),gto=o("convnext"),hto=o(" \u2014 "),PB=a("a"),uto=o("ConvNextConfig"),pto=o(" (ConvNeXT model)"),_to=l(),Xf=a("li"),Yie=a("strong"),bto=o("ctrl"),vto=o(" \u2014 "),BB=a("a"),Fto=o("CTRLConfig"),Tto=o(" (CTRL model)"),Mto=l(),zf=a("li"),Kie=a("strong"),Eto=o("cvt"),Cto=o(" \u2014 "),IB=a("a"),wto=o("CvtConfig"),Ato=o(" (CvT model)"),Lto=l(),Qf=a("li"),Zie=a("strong"),yto=o("data2vec-audio"),xto=o(" \u2014 "),NB=a("a"),$to=o("Data2VecAudioConfig"),kto=o(" (Data2VecAudio model)"),Sto=l(),Wf=a("li"),ede=a("strong"),Rto=o("data2vec-text"),Pto=o(" \u2014 "),qB=a("a"),Bto=o("Data2VecTextConfig"),Ito=o(" (Data2VecText model)"),Nto=l(),Uf=a("li"),ode=a("strong"),qto=o("data2vec-vision"),jto=o(" \u2014 "),jB=a("a"),Dto=o("Data2VecVisionConfig"),Gto=o(" (Data2VecVision model)"),Oto=l(),Hf=a("li"),rde=a("strong"),Vto=o("deberta"),Xto=o(" \u2014 "),DB=a("a"),zto=o("DebertaConfig"),Qto=o(" (DeBERTa model)"),Wto=l(),Jf=a("li"),tde=a("strong"),Uto=o("deberta-v2"),Hto=o(" \u2014 "),GB=a("a"),Jto=o("DebertaV2Config"),Yto=o(" (DeBERTa-v2 model)"),Kto=l(),Yf=a("li"),ade=a("strong"),Zto=o("decision_transformer"),eao=o(" \u2014 "),OB=a("a"),oao=o("DecisionTransformerConfig"),rao=o(" (Decision Transformer model)"),tao=l(),Kf=a("li"),nde=a("strong"),aao=o("deit"),nao=o(" \u2014 "),VB=a("a"),sao=o("DeiTConfig"),lao=o(" (DeiT model)"),iao=l(),Zf=a("li"),sde=a("strong"),dao=o("detr"),cao=o(" \u2014 "),XB=a("a"),mao=o("DetrConfig"),fao=o(" (DETR model)"),gao=l(),eg=a("li"),lde=a("strong"),hao=o("distilbert"),uao=o(" \u2014 "),zB=a("a"),pao=o("DistilBertConfig"),_ao=o(" (DistilBERT model)"),bao=l(),og=a("li"),ide=a("strong"),vao=o("donut-swin"),Fao=o(" \u2014 "),QB=a("a"),Tao=o("DonutSwinConfig"),Mao=o(" (DonutSwin model)"),Eao=l(),rg=a("li"),dde=a("strong"),Cao=o("dpr"),wao=o(" \u2014 "),WB=a("a"),Aao=o("DPRConfig"),Lao=o(" (DPR model)"),yao=l(),tg=a("li"),cde=a("strong"),xao=o("dpt"),$ao=o(" \u2014 "),UB=a("a"),kao=o("DPTConfig"),Sao=o(" (DPT model)"),Rao=l(),ag=a("li"),mde=a("strong"),Pao=o("electra"),Bao=o(" \u2014 "),HB=a("a"),Iao=o("ElectraConfig"),Nao=o(" (ELECTRA model)"),qao=l(),ng=a("li"),fde=a("strong"),jao=o("encoder-decoder"),Dao=o(" \u2014 "),JB=a("a"),Gao=o("EncoderDecoderConfig"),Oao=o(" (Encoder decoder model)"),Vao=l(),sg=a("li"),gde=a("strong"),Xao=o("flaubert"),zao=o(" \u2014 "),YB=a("a"),Qao=o("FlaubertConfig"),Wao=o(" (FlauBERT model)"),Uao=l(),lg=a("li"),hde=a("strong"),Hao=o("flava"),Jao=o(" \u2014 "),KB=a("a"),Yao=o("FlavaConfig"),Kao=o(" (FLAVA model)"),Zao=l(),ig=a("li"),ude=a("strong"),eno=o("fnet"),ono=o(" \u2014 "),ZB=a("a"),rno=o("FNetConfig"),tno=o(" (FNet model)"),ano=l(),dg=a("li"),pde=a("strong"),nno=o("fsmt"),sno=o(" \u2014 "),eI=a("a"),lno=o("FSMTConfig"),ino=o(" (FairSeq Machine-Translation model)"),dno=l(),cg=a("li"),_de=a("strong"),cno=o("funnel"),mno=o(" \u2014 "),oI=a("a"),fno=o("FunnelConfig"),gno=o(" (Funnel Transformer model)"),hno=l(),mg=a("li"),bde=a("strong"),uno=o("glpn"),pno=o(" \u2014 "),rI=a("a"),_no=o("GLPNConfig"),bno=o(" (GLPN model)"),vno=l(),fg=a("li"),vde=a("strong"),Fno=o("gpt2"),Tno=o(" \u2014 "),tI=a("a"),Mno=o("GPT2Config"),Eno=o(" (OpenAI GPT-2 model)"),Cno=l(),gg=a("li"),Fde=a("strong"),wno=o("gpt_neo"),Ano=o(" \u2014 "),aI=a("a"),Lno=o("GPTNeoConfig"),yno=o(" (GPT Neo model)"),xno=l(),hg=a("li"),Tde=a("strong"),$no=o("gpt_neox"),kno=o(" \u2014 "),nI=a("a"),Sno=o("GPTNeoXConfig"),Rno=o(" (GPT NeoX model)"),Pno=l(),ug=a("li"),Mde=a("strong"),Bno=o("gptj"),Ino=o(" \u2014 "),sI=a("a"),Nno=o("GPTJConfig"),qno=o(" (GPT-J model)"),jno=l(),pg=a("li"),Ede=a("strong"),Dno=o("groupvit"),Gno=o(" \u2014 "),lI=a("a"),Ono=o("GroupViTConfig"),Vno=o(" (GroupViT model)"),Xno=l(),_g=a("li"),Cde=a("strong"),zno=o("hubert"),Qno=o(" \u2014 "),iI=a("a"),Wno=o("HubertConfig"),Uno=o(" (Hubert model)"),Hno=l(),bg=a("li"),wde=a("strong"),Jno=o("ibert"),Yno=o(" \u2014 "),dI=a("a"),Kno=o("IBertConfig"),Zno=o(" (I-BERT model)"),eso=l(),vg=a("li"),Ade=a("strong"),oso=o("imagegpt"),rso=o(" \u2014 "),cI=a("a"),tso=o("ImageGPTConfig"),aso=o(" (ImageGPT model)"),nso=l(),Fg=a("li"),Lde=a("strong"),sso=o("layoutlm"),lso=o(" \u2014 "),mI=a("a"),iso=o("LayoutLMConfig"),dso=o(" (LayoutLM model)"),cso=l(),Tg=a("li"),yde=a("strong"),mso=o("layoutlmv2"),fso=o(" \u2014 "),fI=a("a"),gso=o("LayoutLMv2Config"),hso=o(" (LayoutLMv2 model)"),uso=l(),Mg=a("li"),xde=a("strong"),pso=o("layoutlmv3"),_so=o(" \u2014 "),gI=a("a"),bso=o("LayoutLMv3Config"),vso=o(" (LayoutLMv3 model)"),Fso=l(),Eg=a("li"),$de=a("strong"),Tso=o("led"),Mso=o(" \u2014 "),hI=a("a"),Eso=o("LEDConfig"),Cso=o(" (LED model)"),wso=l(),Cg=a("li"),kde=a("strong"),Aso=o("levit"),Lso=o(" \u2014 "),uI=a("a"),yso=o("LevitConfig"),xso=o(" (LeViT model)"),$so=l(),wg=a("li"),Sde=a("strong"),kso=o("longformer"),Sso=o(" \u2014 "),pI=a("a"),Rso=o("LongformerConfig"),Pso=o(" (Longformer model)"),Bso=l(),Ag=a("li"),Rde=a("strong"),Iso=o("longt5"),Nso=o(" \u2014 "),_I=a("a"),qso=o("LongT5Config"),jso=o(" (LongT5 model)"),Dso=l(),Lg=a("li"),Pde=a("strong"),Gso=o("luke"),Oso=o(" \u2014 "),bI=a("a"),Vso=o("LukeConfig"),Xso=o(" (LUKE model)"),zso=l(),yg=a("li"),Bde=a("strong"),Qso=o("lxmert"),Wso=o(" \u2014 "),vI=a("a"),Uso=o("LxmertConfig"),Hso=o(" (LXMERT model)"),Jso=l(),xg=a("li"),Ide=a("strong"),Yso=o("m2m_100"),Kso=o(" \u2014 "),FI=a("a"),Zso=o("M2M100Config"),elo=o(" (M2M100 model)"),olo=l(),$g=a("li"),Nde=a("strong"),rlo=o("marian"),tlo=o(" \u2014 "),TI=a("a"),alo=o("MarianConfig"),nlo=o(" (Marian model)"),slo=l(),kg=a("li"),qde=a("strong"),llo=o("maskformer"),ilo=o(" \u2014 "),MI=a("a"),dlo=o("MaskFormerConfig"),clo=o(" (MaskFormer model)"),mlo=l(),Sg=a("li"),jde=a("strong"),flo=o("mbart"),glo=o(" \u2014 "),EI=a("a"),hlo=o("MBartConfig"),ulo=o(" (mBART model)"),plo=l(),Rg=a("li"),Dde=a("strong"),_lo=o("mctct"),blo=o(" \u2014 "),CI=a("a"),vlo=o("MCTCTConfig"),Flo=o(" (M-CTC-T model)"),Tlo=l(),Pg=a("li"),Gde=a("strong"),Mlo=o("megatron-bert"),Elo=o(" \u2014 "),wI=a("a"),Clo=o("MegatronBertConfig"),wlo=o(" (Megatron-BERT model)"),Alo=l(),Bg=a("li"),Ode=a("strong"),Llo=o("mobilebert"),ylo=o(" \u2014 "),AI=a("a"),xlo=o("MobileBertConfig"),$lo=o(" (MobileBERT model)"),klo=l(),Ig=a("li"),Vde=a("strong"),Slo=o("mobilevit"),Rlo=o(" \u2014 "),LI=a("a"),Plo=o("MobileViTConfig"),Blo=o(" (MobileViT model)"),Ilo=l(),Ng=a("li"),Xde=a("strong"),Nlo=o("mpnet"),qlo=o(" \u2014 "),yI=a("a"),jlo=o("MPNetConfig"),Dlo=o(" (MPNet model)"),Glo=l(),qg=a("li"),zde=a("strong"),Olo=o("mt5"),Vlo=o(" \u2014 "),xI=a("a"),Xlo=o("MT5Config"),zlo=o(" (MT5 model)"),Qlo=l(),jg=a("li"),Qde=a("strong"),Wlo=o("mvp"),Ulo=o(" \u2014 "),$I=a("a"),Hlo=o("MvpConfig"),Jlo=o(" (MVP model)"),Ylo=l(),Dg=a("li"),Wde=a("strong"),Klo=o("nezha"),Zlo=o(" \u2014 "),kI=a("a"),eio=o("NezhaConfig"),oio=o(" (Nezha model)"),rio=l(),Gg=a("li"),Ude=a("strong"),tio=o("nystromformer"),aio=o(" \u2014 "),SI=a("a"),nio=o("NystromformerConfig"),sio=o(" (Nystr\xF6mformer model)"),lio=l(),Og=a("li"),Hde=a("strong"),iio=o("openai-gpt"),dio=o(" \u2014 "),RI=a("a"),cio=o("OpenAIGPTConfig"),mio=o(" (OpenAI GPT model)"),fio=l(),Vg=a("li"),Jde=a("strong"),gio=o("opt"),hio=o(" \u2014 "),PI=a("a"),uio=o("OPTConfig"),pio=o(" (OPT model)"),_io=l(),Xg=a("li"),Yde=a("strong"),bio=o("owlvit"),vio=o(" \u2014 "),BI=a("a"),Fio=o("OwlViTConfig"),Tio=o(" (OWL-ViT model)"),Mio=l(),zg=a("li"),Kde=a("strong"),Eio=o("pegasus"),Cio=o(" \u2014 "),II=a("a"),wio=o("PegasusConfig"),Aio=o(" (Pegasus model)"),Lio=l(),Qg=a("li"),Zde=a("strong"),yio=o("pegasus_x"),xio=o(" \u2014 "),NI=a("a"),$io=o("PegasusXConfig"),kio=o(" (PEGASUS-X model)"),Sio=l(),Wg=a("li"),ece=a("strong"),Rio=o("perceiver"),Pio=o(" \u2014 "),qI=a("a"),Bio=o("PerceiverConfig"),Iio=o(" (Perceiver model)"),Nio=l(),Ug=a("li"),oce=a("strong"),qio=o("plbart"),jio=o(" \u2014 "),jI=a("a"),Dio=o("PLBartConfig"),Gio=o(" (PLBart model)"),Oio=l(),Hg=a("li"),rce=a("strong"),Vio=o("poolformer"),Xio=o(" \u2014 "),DI=a("a"),zio=o("PoolFormerConfig"),Qio=o(" (PoolFormer model)"),Wio=l(),Jg=a("li"),tce=a("strong"),Uio=o("prophetnet"),Hio=o(" \u2014 "),GI=a("a"),Jio=o("ProphetNetConfig"),Yio=o(" (ProphetNet model)"),Kio=l(),Yg=a("li"),ace=a("strong"),Zio=o("qdqbert"),edo=o(" \u2014 "),OI=a("a"),odo=o("QDQBertConfig"),rdo=o(" (QDQBert model)"),tdo=l(),Kg=a("li"),nce=a("strong"),ado=o("rag"),ndo=o(" \u2014 "),VI=a("a"),sdo=o("RagConfig"),ldo=o(" (RAG model)"),ido=l(),Zg=a("li"),sce=a("strong"),ddo=o("realm"),cdo=o(" \u2014 "),XI=a("a"),mdo=o("RealmConfig"),fdo=o(" (REALM model)"),gdo=l(),eh=a("li"),lce=a("strong"),hdo=o("reformer"),udo=o(" \u2014 "),zI=a("a"),pdo=o("ReformerConfig"),_do=o(" (Reformer model)"),bdo=l(),oh=a("li"),ice=a("strong"),vdo=o("regnet"),Fdo=o(" \u2014 "),QI=a("a"),Tdo=o("RegNetConfig"),Mdo=o(" (RegNet model)"),Edo=l(),rh=a("li"),dce=a("strong"),Cdo=o("rembert"),wdo=o(" \u2014 "),WI=a("a"),Ado=o("RemBertConfig"),Ldo=o(" (RemBERT model)"),ydo=l(),th=a("li"),cce=a("strong"),xdo=o("resnet"),$do=o(" \u2014 "),UI=a("a"),kdo=o("ResNetConfig"),Sdo=o(" (ResNet model)"),Rdo=l(),ah=a("li"),mce=a("strong"),Pdo=o("retribert"),Bdo=o(" \u2014 "),HI=a("a"),Ido=o("RetriBertConfig"),Ndo=o(" (RetriBERT model)"),qdo=l(),nh=a("li"),fce=a("strong"),jdo=o("roberta"),Ddo=o(" \u2014 "),JI=a("a"),Gdo=o("RobertaConfig"),Odo=o(" (RoBERTa model)"),Vdo=l(),sh=a("li"),gce=a("strong"),Xdo=o("roformer"),zdo=o(" \u2014 "),YI=a("a"),Qdo=o("RoFormerConfig"),Wdo=o(" (RoFormer model)"),Udo=l(),lh=a("li"),hce=a("strong"),Hdo=o("segformer"),Jdo=o(" \u2014 "),KI=a("a"),Ydo=o("SegformerConfig"),Kdo=o(" (SegFormer model)"),Zdo=l(),ih=a("li"),uce=a("strong"),eco=o("sew"),oco=o(" \u2014 "),ZI=a("a"),rco=o("SEWConfig"),tco=o(" (SEW model)"),aco=l(),dh=a("li"),pce=a("strong"),nco=o("sew-d"),sco=o(" \u2014 "),eN=a("a"),lco=o("SEWDConfig"),ico=o(" (SEW-D model)"),dco=l(),ch=a("li"),_ce=a("strong"),cco=o("speech-encoder-decoder"),mco=o(" \u2014 "),oN=a("a"),fco=o("SpeechEncoderDecoderConfig"),gco=o(" (Speech Encoder decoder model)"),hco=l(),mh=a("li"),bce=a("strong"),uco=o("speech_to_text"),pco=o(" \u2014 "),rN=a("a"),_co=o("Speech2TextConfig"),bco=o(" (Speech2Text model)"),vco=l(),fh=a("li"),vce=a("strong"),Fco=o("speech_to_text_2"),Tco=o(" \u2014 "),tN=a("a"),Mco=o("Speech2Text2Config"),Eco=o(" (Speech2Text2 model)"),Cco=l(),gh=a("li"),Fce=a("strong"),wco=o("splinter"),Aco=o(" \u2014 "),aN=a("a"),Lco=o("SplinterConfig"),yco=o(" (Splinter model)"),xco=l(),hh=a("li"),Tce=a("strong"),$co=o("squeezebert"),kco=o(" \u2014 "),nN=a("a"),Sco=o("SqueezeBertConfig"),Rco=o(" (SqueezeBERT model)"),Pco=l(),uh=a("li"),Mce=a("strong"),Bco=o("swin"),Ico=o(" \u2014 "),sN=a("a"),Nco=o("SwinConfig"),qco=o(" (Swin Transformer model)"),jco=l(),ph=a("li"),Ece=a("strong"),Dco=o("swinv2"),Gco=o(" \u2014 "),lN=a("a"),Oco=o("Swinv2Config"),Vco=o(" (Swin Transformer V2 model)"),Xco=l(),_h=a("li"),Cce=a("strong"),zco=o("t5"),Qco=o(" \u2014 "),iN=a("a"),Wco=o("T5Config"),Uco=o(" (T5 model)"),Hco=l(),bh=a("li"),wce=a("strong"),Jco=o("tapas"),Yco=o(" \u2014 "),dN=a("a"),Kco=o("TapasConfig"),Zco=o(" (TAPAS model)"),emo=l(),vh=a("li"),Ace=a("strong"),omo=o("trajectory_transformer"),rmo=o(" \u2014 "),cN=a("a"),tmo=o("TrajectoryTransformerConfig"),amo=o(" (Trajectory Transformer model)"),nmo=l(),Fh=a("li"),Lce=a("strong"),smo=o("transfo-xl"),lmo=o(" \u2014 "),mN=a("a"),imo=o("TransfoXLConfig"),dmo=o(" (Transformer-XL model)"),cmo=l(),Th=a("li"),yce=a("strong"),mmo=o("trocr"),fmo=o(" \u2014 "),fN=a("a"),gmo=o("TrOCRConfig"),hmo=o(" (TrOCR model)"),umo=l(),Mh=a("li"),xce=a("strong"),pmo=o("unispeech"),_mo=o(" \u2014 "),gN=a("a"),bmo=o("UniSpeechConfig"),vmo=o(" (UniSpeech model)"),Fmo=l(),Eh=a("li"),$ce=a("strong"),Tmo=o("unispeech-sat"),Mmo=o(" \u2014 "),hN=a("a"),Emo=o("UniSpeechSatConfig"),Cmo=o(" (UniSpeechSat model)"),wmo=l(),Ch=a("li"),kce=a("strong"),Amo=o("van"),Lmo=o(" \u2014 "),uN=a("a"),ymo=o("VanConfig"),xmo=o(" (VAN model)"),$mo=l(),wh=a("li"),Sce=a("strong"),kmo=o("videomae"),Smo=o(" \u2014 "),pN=a("a"),Rmo=o("VideoMAEConfig"),Pmo=o(" (VideoMAE model)"),Bmo=l(),Ah=a("li"),Rce=a("strong"),Imo=o("vilt"),Nmo=o(" \u2014 "),_N=a("a"),qmo=o("ViltConfig"),jmo=o(" (ViLT model)"),Dmo=l(),Lh=a("li"),Pce=a("strong"),Gmo=o("vision-encoder-decoder"),Omo=o(" \u2014 "),bN=a("a"),Vmo=o("VisionEncoderDecoderConfig"),Xmo=o(" (Vision Encoder decoder model)"),zmo=l(),yh=a("li"),Bce=a("strong"),Qmo=o("vision-text-dual-encoder"),Wmo=o(" \u2014 "),vN=a("a"),Umo=o("VisionTextDualEncoderConfig"),Hmo=o(" (VisionTextDualEncoder model)"),Jmo=l(),xh=a("li"),Ice=a("strong"),Ymo=o("visual_bert"),Kmo=o(" \u2014 "),FN=a("a"),Zmo=o("VisualBertConfig"),efo=o(" (VisualBERT model)"),ofo=l(),$h=a("li"),Nce=a("strong"),rfo=o("vit"),tfo=o(" \u2014 "),TN=a("a"),afo=o("ViTConfig"),nfo=o(" (ViT model)"),sfo=l(),kh=a("li"),qce=a("strong"),lfo=o("vit_mae"),ifo=o(" \u2014 "),MN=a("a"),dfo=o("ViTMAEConfig"),cfo=o(" (ViTMAE model)"),mfo=l(),Sh=a("li"),jce=a("strong"),ffo=o("wav2vec2"),gfo=o(" \u2014 "),EN=a("a"),hfo=o("Wav2Vec2Config"),ufo=o(" (Wav2Vec2 model)"),pfo=l(),Rh=a("li"),Dce=a("strong"),_fo=o("wav2vec2-conformer"),bfo=o(" \u2014 "),CN=a("a"),vfo=o("Wav2Vec2ConformerConfig"),Ffo=o(" (Wav2Vec2-Conformer model)"),Tfo=l(),Ph=a("li"),Gce=a("strong"),Mfo=o("wavlm"),Efo=o(" \u2014 "),wN=a("a"),Cfo=o("WavLMConfig"),wfo=o(" (WavLM model)"),Afo=l(),Bh=a("li"),Oce=a("strong"),Lfo=o("xclip"),yfo=o(" \u2014 "),AN=a("a"),xfo=o("XCLIPConfig"),$fo=o(" (X-CLIP model)"),kfo=l(),Ih=a("li"),Vce=a("strong"),Sfo=o("xglm"),Rfo=o(" \u2014 "),LN=a("a"),Pfo=o("XGLMConfig"),Bfo=o(" (XGLM model)"),Ifo=l(),Nh=a("li"),Xce=a("strong"),Nfo=o("xlm"),qfo=o(" \u2014 "),yN=a("a"),jfo=o("XLMConfig"),Dfo=o(" (XLM model)"),Gfo=l(),qh=a("li"),zce=a("strong"),Ofo=o("xlm-prophetnet"),Vfo=o(" \u2014 "),xN=a("a"),Xfo=o("XLMProphetNetConfig"),zfo=o(" (XLM-ProphetNet model)"),Qfo=l(),jh=a("li"),Qce=a("strong"),Wfo=o("xlm-roberta"),Ufo=o(" \u2014 "),$N=a("a"),Hfo=o("XLMRobertaConfig"),Jfo=o(" (XLM-RoBERTa model)"),Yfo=l(),Dh=a("li"),Wce=a("strong"),Kfo=o("xlm-roberta-xl"),Zfo=o(" \u2014 "),kN=a("a"),ego=o("XLMRobertaXLConfig"),ogo=o(" (XLM-RoBERTa-XL model)"),rgo=l(),Gh=a("li"),Uce=a("strong"),tgo=o("xlnet"),ago=o(" \u2014 "),SN=a("a"),ngo=o("XLNetConfig"),sgo=o(" (XLNet model)"),lgo=l(),Oh=a("li"),Hce=a("strong"),igo=o("yolos"),dgo=o(" \u2014 "),RN=a("a"),cgo=o("YolosConfig"),mgo=o(" (YOLOS model)"),fgo=l(),Vh=a("li"),Jce=a("strong"),ggo=o("yoso"),hgo=o(" \u2014 "),PN=a("a"),ugo=o("YosoConfig"),pgo=o(" (YOSO model)"),_go=l(),F(Xh.$$.fragment),bgo=l(),zh=a("div"),F(v9.$$.fragment),vgo=l(),Yce=a("p"),Fgo=o("Register a new configuration for this class."),WJe=l(),md=a("h2"),Qh=a("a"),Kce=a("span"),F(F9.$$.fragment),Tgo=l(),Zce=a("span"),Mgo=o("AutoTokenizer"),UJe=l(),$o=a("div"),F(T9.$$.fragment),Ego=l(),M9=a("p"),Cgo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),BN=a("a"),wgo=o("AutoTokenizer.from_pretrained()"),Ago=o(" class method."),Lgo=l(),E9=a("p"),ygo=o("This class cannot be instantiated directly using "),eme=a("code"),xgo=o("__init__()"),$go=o(" (throws an error)."),kgo=l(),Br=a("div"),F(C9.$$.fragment),Sgo=l(),ome=a("p"),Rgo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Pgo=l(),Ua=a("p"),Bgo=o("The tokenizer class to instantiate is selected based on the "),rme=a("code"),Igo=o("model_type"),Ngo=o(` property of the config object (either
passed as an argument or loaded from `),tme=a("code"),qgo=o("pretrained_model_name_or_path"),jgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=a("code"),Dgo=o("pretrained_model_name_or_path"),Ggo=o(":"),Ogo=l(),k=a("ul"),as=a("li"),nme=a("strong"),Vgo=o("albert"),Xgo=o(" \u2014 "),IN=a("a"),zgo=o("AlbertTokenizer"),Qgo=o(" or "),NN=a("a"),Wgo=o("AlbertTokenizerFast"),Ugo=o(" (ALBERT model)"),Hgo=l(),ns=a("li"),sme=a("strong"),Jgo=o("bart"),Ygo=o(" \u2014 "),qN=a("a"),Kgo=o("BartTokenizer"),Zgo=o(" or "),jN=a("a"),eho=o("BartTokenizerFast"),oho=o(" (BART model)"),rho=l(),ss=a("li"),lme=a("strong"),tho=o("barthez"),aho=o(" \u2014 "),DN=a("a"),nho=o("BarthezTokenizer"),sho=o(" or "),GN=a("a"),lho=o("BarthezTokenizerFast"),iho=o(" (BARThez model)"),dho=l(),Wh=a("li"),ime=a("strong"),cho=o("bartpho"),mho=o(" \u2014 "),ON=a("a"),fho=o("BartphoTokenizer"),gho=o(" (BARTpho model)"),hho=l(),ls=a("li"),dme=a("strong"),uho=o("bert"),pho=o(" \u2014 "),VN=a("a"),_ho=o("BertTokenizer"),bho=o(" or "),XN=a("a"),vho=o("BertTokenizerFast"),Fho=o(" (BERT model)"),Tho=l(),Uh=a("li"),cme=a("strong"),Mho=o("bert-generation"),Eho=o(" \u2014 "),zN=a("a"),Cho=o("BertGenerationTokenizer"),who=o(" (Bert Generation model)"),Aho=l(),Hh=a("li"),mme=a("strong"),Lho=o("bert-japanese"),yho=o(" \u2014 "),QN=a("a"),xho=o("BertJapaneseTokenizer"),$ho=o(" (BertJapanese model)"),kho=l(),Jh=a("li"),fme=a("strong"),Sho=o("bertweet"),Rho=o(" \u2014 "),WN=a("a"),Pho=o("BertweetTokenizer"),Bho=o(" (BERTweet model)"),Iho=l(),is=a("li"),gme=a("strong"),Nho=o("big_bird"),qho=o(" \u2014 "),UN=a("a"),jho=o("BigBirdTokenizer"),Dho=o(" or "),HN=a("a"),Gho=o("BigBirdTokenizerFast"),Oho=o(" (BigBird model)"),Vho=l(),ds=a("li"),hme=a("strong"),Xho=o("bigbird_pegasus"),zho=o(" \u2014 "),JN=a("a"),Qho=o("PegasusTokenizer"),Who=o(" or "),YN=a("a"),Uho=o("PegasusTokenizerFast"),Hho=o(" (BigBird-Pegasus model)"),Jho=l(),cs=a("li"),ume=a("strong"),Yho=o("blenderbot"),Kho=o(" \u2014 "),KN=a("a"),Zho=o("BlenderbotTokenizer"),euo=o(" or "),ZN=a("a"),ouo=o("BlenderbotTokenizerFast"),ruo=o(" (Blenderbot model)"),tuo=l(),Yh=a("li"),pme=a("strong"),auo=o("blenderbot-small"),nuo=o(" \u2014 "),eq=a("a"),suo=o("BlenderbotSmallTokenizer"),luo=o(" (BlenderbotSmall model)"),iuo=l(),Kh=a("li"),_me=a("strong"),duo=o("bloom"),cuo=o(" \u2014 "),oq=a("a"),muo=o("BloomTokenizerFast"),fuo=o(" (BLOOM model)"),guo=l(),Zh=a("li"),bme=a("strong"),huo=o("byt5"),uuo=o(" \u2014 "),rq=a("a"),puo=o("ByT5Tokenizer"),_uo=o(" (ByT5 model)"),buo=l(),ms=a("li"),vme=a("strong"),vuo=o("camembert"),Fuo=o(" \u2014 "),tq=a("a"),Tuo=o("CamembertTokenizer"),Muo=o(" or "),aq=a("a"),Euo=o("CamembertTokenizerFast"),Cuo=o(" (CamemBERT model)"),wuo=l(),eu=a("li"),Fme=a("strong"),Auo=o("canine"),Luo=o(" \u2014 "),nq=a("a"),yuo=o("CanineTokenizer"),xuo=o(" (CANINE model)"),$uo=l(),fs=a("li"),Tme=a("strong"),kuo=o("clip"),Suo=o(" \u2014 "),sq=a("a"),Ruo=o("CLIPTokenizer"),Puo=o(" or "),lq=a("a"),Buo=o("CLIPTokenizerFast"),Iuo=o(" (CLIP model)"),Nuo=l(),gs=a("li"),Mme=a("strong"),quo=o("codegen"),juo=o(" \u2014 "),iq=a("a"),Duo=o("CodeGenTokenizer"),Guo=o(" or "),dq=a("a"),Ouo=o("CodeGenTokenizerFast"),Vuo=o(" (CodeGen model)"),Xuo=l(),hs=a("li"),Eme=a("strong"),zuo=o("convbert"),Quo=o(" \u2014 "),cq=a("a"),Wuo=o("ConvBertTokenizer"),Uuo=o(" or "),mq=a("a"),Huo=o("ConvBertTokenizerFast"),Juo=o(" (ConvBERT model)"),Yuo=l(),us=a("li"),Cme=a("strong"),Kuo=o("cpm"),Zuo=o(" \u2014 "),fq=a("a"),epo=o("CpmTokenizer"),opo=o(" or "),gq=a("a"),rpo=o("CpmTokenizerFast"),tpo=o(" (CPM model)"),apo=l(),ou=a("li"),wme=a("strong"),npo=o("ctrl"),spo=o(" \u2014 "),hq=a("a"),lpo=o("CTRLTokenizer"),ipo=o(" (CTRL model)"),dpo=l(),ps=a("li"),Ame=a("strong"),cpo=o("data2vec-text"),mpo=o(" \u2014 "),uq=a("a"),fpo=o("RobertaTokenizer"),gpo=o(" or "),pq=a("a"),hpo=o("RobertaTokenizerFast"),upo=o(" (Data2VecText model)"),ppo=l(),_s=a("li"),Lme=a("strong"),_po=o("deberta"),bpo=o(" \u2014 "),_q=a("a"),vpo=o("DebertaTokenizer"),Fpo=o(" or "),bq=a("a"),Tpo=o("DebertaTokenizerFast"),Mpo=o(" (DeBERTa model)"),Epo=l(),bs=a("li"),yme=a("strong"),Cpo=o("deberta-v2"),wpo=o(" \u2014 "),vq=a("a"),Apo=o("DebertaV2Tokenizer"),Lpo=o(" or "),Fq=a("a"),ypo=o("DebertaV2TokenizerFast"),xpo=o(" (DeBERTa-v2 model)"),$po=l(),vs=a("li"),xme=a("strong"),kpo=o("distilbert"),Spo=o(" \u2014 "),Tq=a("a"),Rpo=o("DistilBertTokenizer"),Ppo=o(" or "),Mq=a("a"),Bpo=o("DistilBertTokenizerFast"),Ipo=o(" (DistilBERT model)"),Npo=l(),Fs=a("li"),$me=a("strong"),qpo=o("dpr"),jpo=o(" \u2014 "),Eq=a("a"),Dpo=o("DPRQuestionEncoderTokenizer"),Gpo=o(" or "),Cq=a("a"),Opo=o("DPRQuestionEncoderTokenizerFast"),Vpo=o(" (DPR model)"),Xpo=l(),Ts=a("li"),kme=a("strong"),zpo=o("electra"),Qpo=o(" \u2014 "),wq=a("a"),Wpo=o("ElectraTokenizer"),Upo=o(" or "),Aq=a("a"),Hpo=o("ElectraTokenizerFast"),Jpo=o(" (ELECTRA model)"),Ypo=l(),ru=a("li"),Sme=a("strong"),Kpo=o("flaubert"),Zpo=o(" \u2014 "),Lq=a("a"),e_o=o("FlaubertTokenizer"),o_o=o(" (FlauBERT model)"),r_o=l(),Ms=a("li"),Rme=a("strong"),t_o=o("fnet"),a_o=o(" \u2014 "),yq=a("a"),n_o=o("FNetTokenizer"),s_o=o(" or "),xq=a("a"),l_o=o("FNetTokenizerFast"),i_o=o(" (FNet model)"),d_o=l(),tu=a("li"),Pme=a("strong"),c_o=o("fsmt"),m_o=o(" \u2014 "),$q=a("a"),f_o=o("FSMTTokenizer"),g_o=o(" (FairSeq Machine-Translation model)"),h_o=l(),Es=a("li"),Bme=a("strong"),u_o=o("funnel"),p_o=o(" \u2014 "),kq=a("a"),__o=o("FunnelTokenizer"),b_o=o(" or "),Sq=a("a"),v_o=o("FunnelTokenizerFast"),F_o=o(" (Funnel Transformer model)"),T_o=l(),Cs=a("li"),Ime=a("strong"),M_o=o("gpt2"),E_o=o(" \u2014 "),Rq=a("a"),C_o=o("GPT2Tokenizer"),w_o=o(" or "),Pq=a("a"),A_o=o("GPT2TokenizerFast"),L_o=o(" (OpenAI GPT-2 model)"),y_o=l(),ws=a("li"),Nme=a("strong"),x_o=o("gpt_neo"),$_o=o(" \u2014 "),Bq=a("a"),k_o=o("GPT2Tokenizer"),S_o=o(" or "),Iq=a("a"),R_o=o("GPT2TokenizerFast"),P_o=o(" (GPT Neo model)"),B_o=l(),au=a("li"),qme=a("strong"),I_o=o("gpt_neox"),N_o=o(" \u2014 "),Nq=a("a"),q_o=o("GPTNeoXTokenizerFast"),j_o=o(" (GPT NeoX model)"),D_o=l(),As=a("li"),jme=a("strong"),G_o=o("gptj"),O_o=o(" \u2014 "),qq=a("a"),V_o=o("GPT2Tokenizer"),X_o=o(" or "),jq=a("a"),z_o=o("GPT2TokenizerFast"),Q_o=o(" (GPT-J model)"),W_o=l(),Ls=a("li"),Dme=a("strong"),U_o=o("groupvit"),H_o=o(" \u2014 "),Dq=a("a"),J_o=o("CLIPTokenizer"),Y_o=o(" or "),Gq=a("a"),K_o=o("CLIPTokenizerFast"),Z_o=o(" (GroupViT model)"),ebo=l(),ys=a("li"),Gme=a("strong"),obo=o("herbert"),rbo=o(" \u2014 "),Oq=a("a"),tbo=o("HerbertTokenizer"),abo=o(" or "),Vq=a("a"),nbo=o("HerbertTokenizerFast"),sbo=o(" (HerBERT model)"),lbo=l(),nu=a("li"),Ome=a("strong"),ibo=o("hubert"),dbo=o(" \u2014 "),Xq=a("a"),cbo=o("Wav2Vec2CTCTokenizer"),mbo=o(" (Hubert model)"),fbo=l(),xs=a("li"),Vme=a("strong"),gbo=o("ibert"),hbo=o(" \u2014 "),zq=a("a"),ubo=o("RobertaTokenizer"),pbo=o(" or "),Qq=a("a"),_bo=o("RobertaTokenizerFast"),bbo=o(" (I-BERT model)"),vbo=l(),$s=a("li"),Xme=a("strong"),Fbo=o("layoutlm"),Tbo=o(" \u2014 "),Wq=a("a"),Mbo=o("LayoutLMTokenizer"),Ebo=o(" or "),Uq=a("a"),Cbo=o("LayoutLMTokenizerFast"),wbo=o(" (LayoutLM model)"),Abo=l(),ks=a("li"),zme=a("strong"),Lbo=o("layoutlmv2"),ybo=o(" \u2014 "),Hq=a("a"),xbo=o("LayoutLMv2Tokenizer"),$bo=o(" or "),Jq=a("a"),kbo=o("LayoutLMv2TokenizerFast"),Sbo=o(" (LayoutLMv2 model)"),Rbo=l(),Ss=a("li"),Qme=a("strong"),Pbo=o("layoutlmv3"),Bbo=o(" \u2014 "),Yq=a("a"),Ibo=o("LayoutLMv3Tokenizer"),Nbo=o(" or "),Kq=a("a"),qbo=o("LayoutLMv3TokenizerFast"),jbo=o(" (LayoutLMv3 model)"),Dbo=l(),Rs=a("li"),Wme=a("strong"),Gbo=o("layoutxlm"),Obo=o(" \u2014 "),Zq=a("a"),Vbo=o("LayoutXLMTokenizer"),Xbo=o(" or "),ej=a("a"),zbo=o("LayoutXLMTokenizerFast"),Qbo=o(" (LayoutXLM model)"),Wbo=l(),Ps=a("li"),Ume=a("strong"),Ubo=o("led"),Hbo=o(" \u2014 "),oj=a("a"),Jbo=o("LEDTokenizer"),Ybo=o(" or "),rj=a("a"),Kbo=o("LEDTokenizerFast"),Zbo=o(" (LED model)"),e2o=l(),Bs=a("li"),Hme=a("strong"),o2o=o("longformer"),r2o=o(" \u2014 "),tj=a("a"),t2o=o("LongformerTokenizer"),a2o=o(" or "),aj=a("a"),n2o=o("LongformerTokenizerFast"),s2o=o(" (Longformer model)"),l2o=l(),Is=a("li"),Jme=a("strong"),i2o=o("longt5"),d2o=o(" \u2014 "),nj=a("a"),c2o=o("T5Tokenizer"),m2o=o(" or "),sj=a("a"),f2o=o("T5TokenizerFast"),g2o=o(" (LongT5 model)"),h2o=l(),su=a("li"),Yme=a("strong"),u2o=o("luke"),p2o=o(" \u2014 "),lj=a("a"),_2o=o("LukeTokenizer"),b2o=o(" (LUKE model)"),v2o=l(),Ns=a("li"),Kme=a("strong"),F2o=o("lxmert"),T2o=o(" \u2014 "),ij=a("a"),M2o=o("LxmertTokenizer"),E2o=o(" or "),dj=a("a"),C2o=o("LxmertTokenizerFast"),w2o=o(" (LXMERT model)"),A2o=l(),lu=a("li"),Zme=a("strong"),L2o=o("m2m_100"),y2o=o(" \u2014 "),cj=a("a"),x2o=o("M2M100Tokenizer"),$2o=o(" (M2M100 model)"),k2o=l(),iu=a("li"),efe=a("strong"),S2o=o("marian"),R2o=o(" \u2014 "),mj=a("a"),P2o=o("MarianTokenizer"),B2o=o(" (Marian model)"),I2o=l(),qs=a("li"),ofe=a("strong"),N2o=o("mbart"),q2o=o(" \u2014 "),fj=a("a"),j2o=o("MBartTokenizer"),D2o=o(" or "),gj=a("a"),G2o=o("MBartTokenizerFast"),O2o=o(" (mBART model)"),V2o=l(),js=a("li"),rfe=a("strong"),X2o=o("mbart50"),z2o=o(" \u2014 "),hj=a("a"),Q2o=o("MBart50Tokenizer"),W2o=o(" or "),uj=a("a"),U2o=o("MBart50TokenizerFast"),H2o=o(" (mBART-50 model)"),J2o=l(),Ds=a("li"),tfe=a("strong"),Y2o=o("megatron-bert"),K2o=o(" \u2014 "),pj=a("a"),Z2o=o("BertTokenizer"),evo=o(" or "),_j=a("a"),ovo=o("BertTokenizerFast"),rvo=o(" (Megatron-BERT model)"),tvo=l(),du=a("li"),afe=a("strong"),avo=o("mluke"),nvo=o(" \u2014 "),bj=a("a"),svo=o("MLukeTokenizer"),lvo=o(" (mLUKE model)"),ivo=l(),Gs=a("li"),nfe=a("strong"),dvo=o("mobilebert"),cvo=o(" \u2014 "),vj=a("a"),mvo=o("MobileBertTokenizer"),fvo=o(" or "),Fj=a("a"),gvo=o("MobileBertTokenizerFast"),hvo=o(" (MobileBERT model)"),uvo=l(),Os=a("li"),sfe=a("strong"),pvo=o("mpnet"),_vo=o(" \u2014 "),Tj=a("a"),bvo=o("MPNetTokenizer"),vvo=o(" or "),Mj=a("a"),Fvo=o("MPNetTokenizerFast"),Tvo=o(" (MPNet model)"),Mvo=l(),Vs=a("li"),lfe=a("strong"),Evo=o("mt5"),Cvo=o(" \u2014 "),Ej=a("a"),wvo=o("MT5Tokenizer"),Avo=o(" or "),Cj=a("a"),Lvo=o("MT5TokenizerFast"),yvo=o(" (MT5 model)"),xvo=l(),Xs=a("li"),ife=a("strong"),$vo=o("mvp"),kvo=o(" \u2014 "),wj=a("a"),Svo=o("MvpTokenizer"),Rvo=o(" or "),Aj=a("a"),Pvo=o("MvpTokenizerFast"),Bvo=o(" (MVP model)"),Ivo=l(),zs=a("li"),dfe=a("strong"),Nvo=o("nezha"),qvo=o(" \u2014 "),Lj=a("a"),jvo=o("BertTokenizer"),Dvo=o(" or "),yj=a("a"),Gvo=o("BertTokenizerFast"),Ovo=o(" (Nezha model)"),Vvo=l(),Qs=a("li"),cfe=a("strong"),Xvo=o("nllb"),zvo=o(" \u2014 "),xj=a("a"),Qvo=o("NllbTokenizer"),Wvo=o(" or "),$j=a("a"),Uvo=o("NllbTokenizerFast"),Hvo=o(" (NLLB model)"),Jvo=l(),Ws=a("li"),mfe=a("strong"),Yvo=o("nystromformer"),Kvo=o(" \u2014 "),kj=a("a"),Zvo=o("AlbertTokenizer"),e1o=o(" or "),Sj=a("a"),o1o=o("AlbertTokenizerFast"),r1o=o(" (Nystr\xF6mformer model)"),t1o=l(),Us=a("li"),ffe=a("strong"),a1o=o("openai-gpt"),n1o=o(" \u2014 "),Rj=a("a"),s1o=o("OpenAIGPTTokenizer"),l1o=o(" or "),Pj=a("a"),i1o=o("OpenAIGPTTokenizerFast"),d1o=o(" (OpenAI GPT model)"),c1o=l(),cu=a("li"),gfe=a("strong"),m1o=o("opt"),f1o=o(" \u2014 "),Bj=a("a"),g1o=o("GPT2Tokenizer"),h1o=o(" (OPT model)"),u1o=l(),Hs=a("li"),hfe=a("strong"),p1o=o("owlvit"),_1o=o(" \u2014 "),Ij=a("a"),b1o=o("CLIPTokenizer"),v1o=o(" or "),Nj=a("a"),F1o=o("CLIPTokenizerFast"),T1o=o(" (OWL-ViT model)"),M1o=l(),Js=a("li"),ufe=a("strong"),E1o=o("pegasus"),C1o=o(" \u2014 "),qj=a("a"),w1o=o("PegasusTokenizer"),A1o=o(" or "),jj=a("a"),L1o=o("PegasusTokenizerFast"),y1o=o(" (Pegasus model)"),x1o=l(),mu=a("li"),pfe=a("strong"),$1o=o("perceiver"),k1o=o(" \u2014 "),Dj=a("a"),S1o=o("PerceiverTokenizer"),R1o=o(" (Perceiver model)"),P1o=l(),fu=a("li"),_fe=a("strong"),B1o=o("phobert"),I1o=o(" \u2014 "),Gj=a("a"),N1o=o("PhobertTokenizer"),q1o=o(" (PhoBERT model)"),j1o=l(),gu=a("li"),bfe=a("strong"),D1o=o("plbart"),G1o=o(" \u2014 "),Oj=a("a"),O1o=o("PLBartTokenizer"),V1o=o(" (PLBart model)"),X1o=l(),hu=a("li"),vfe=a("strong"),z1o=o("prophetnet"),Q1o=o(" \u2014 "),Vj=a("a"),W1o=o("ProphetNetTokenizer"),U1o=o(" (ProphetNet model)"),H1o=l(),Ys=a("li"),Ffe=a("strong"),J1o=o("qdqbert"),Y1o=o(" \u2014 "),Xj=a("a"),K1o=o("BertTokenizer"),Z1o=o(" or "),zj=a("a"),eFo=o("BertTokenizerFast"),oFo=o(" (QDQBert model)"),rFo=l(),uu=a("li"),Tfe=a("strong"),tFo=o("rag"),aFo=o(" \u2014 "),Qj=a("a"),nFo=o("RagTokenizer"),sFo=o(" (RAG model)"),lFo=l(),Ks=a("li"),Mfe=a("strong"),iFo=o("realm"),dFo=o(" \u2014 "),Wj=a("a"),cFo=o("RealmTokenizer"),mFo=o(" or "),Uj=a("a"),fFo=o("RealmTokenizerFast"),gFo=o(" (REALM model)"),hFo=l(),Zs=a("li"),Efe=a("strong"),uFo=o("reformer"),pFo=o(" \u2014 "),Hj=a("a"),_Fo=o("ReformerTokenizer"),bFo=o(" or "),Jj=a("a"),vFo=o("ReformerTokenizerFast"),FFo=o(" (Reformer model)"),TFo=l(),el=a("li"),Cfe=a("strong"),MFo=o("rembert"),EFo=o(" \u2014 "),Yj=a("a"),CFo=o("RemBertTokenizer"),wFo=o(" or "),Kj=a("a"),AFo=o("RemBertTokenizerFast"),LFo=o(" (RemBERT model)"),yFo=l(),ol=a("li"),wfe=a("strong"),xFo=o("retribert"),$Fo=o(" \u2014 "),Zj=a("a"),kFo=o("RetriBertTokenizer"),SFo=o(" or "),eD=a("a"),RFo=o("RetriBertTokenizerFast"),PFo=o(" (RetriBERT model)"),BFo=l(),rl=a("li"),Afe=a("strong"),IFo=o("roberta"),NFo=o(" \u2014 "),oD=a("a"),qFo=o("RobertaTokenizer"),jFo=o(" or "),rD=a("a"),DFo=o("RobertaTokenizerFast"),GFo=o(" (RoBERTa model)"),OFo=l(),tl=a("li"),Lfe=a("strong"),VFo=o("roformer"),XFo=o(" \u2014 "),tD=a("a"),zFo=o("RoFormerTokenizer"),QFo=o(" or "),aD=a("a"),WFo=o("RoFormerTokenizerFast"),UFo=o(" (RoFormer model)"),HFo=l(),pu=a("li"),yfe=a("strong"),JFo=o("speech_to_text"),YFo=o(" \u2014 "),nD=a("a"),KFo=o("Speech2TextTokenizer"),ZFo=o(" (Speech2Text model)"),eTo=l(),_u=a("li"),xfe=a("strong"),oTo=o("speech_to_text_2"),rTo=o(" \u2014 "),sD=a("a"),tTo=o("Speech2Text2Tokenizer"),aTo=o(" (Speech2Text2 model)"),nTo=l(),al=a("li"),$fe=a("strong"),sTo=o("splinter"),lTo=o(" \u2014 "),lD=a("a"),iTo=o("SplinterTokenizer"),dTo=o(" or "),iD=a("a"),cTo=o("SplinterTokenizerFast"),mTo=o(" (Splinter model)"),fTo=l(),nl=a("li"),kfe=a("strong"),gTo=o("squeezebert"),hTo=o(" \u2014 "),dD=a("a"),uTo=o("SqueezeBertTokenizer"),pTo=o(" or "),cD=a("a"),_To=o("SqueezeBertTokenizerFast"),bTo=o(" (SqueezeBERT model)"),vTo=l(),sl=a("li"),Sfe=a("strong"),FTo=o("t5"),TTo=o(" \u2014 "),mD=a("a"),MTo=o("T5Tokenizer"),ETo=o(" or "),fD=a("a"),CTo=o("T5TokenizerFast"),wTo=o(" (T5 model)"),ATo=l(),bu=a("li"),Rfe=a("strong"),LTo=o("tapas"),yTo=o(" \u2014 "),gD=a("a"),xTo=o("TapasTokenizer"),$To=o(" (TAPAS model)"),kTo=l(),vu=a("li"),Pfe=a("strong"),STo=o("tapex"),RTo=o(" \u2014 "),hD=a("a"),PTo=o("TapexTokenizer"),BTo=o(" (TAPEX model)"),ITo=l(),Fu=a("li"),Bfe=a("strong"),NTo=o("transfo-xl"),qTo=o(" \u2014 "),uD=a("a"),jTo=o("TransfoXLTokenizer"),DTo=o(" (Transformer-XL model)"),GTo=l(),ll=a("li"),Ife=a("strong"),OTo=o("vilt"),VTo=o(" \u2014 "),pD=a("a"),XTo=o("BertTokenizer"),zTo=o(" or "),_D=a("a"),QTo=o("BertTokenizerFast"),WTo=o(" (ViLT model)"),UTo=l(),il=a("li"),Nfe=a("strong"),HTo=o("visual_bert"),JTo=o(" \u2014 "),bD=a("a"),YTo=o("BertTokenizer"),KTo=o(" or "),vD=a("a"),ZTo=o("BertTokenizerFast"),eMo=o(" (VisualBERT model)"),oMo=l(),Tu=a("li"),qfe=a("strong"),rMo=o("wav2vec2"),tMo=o(" \u2014 "),FD=a("a"),aMo=o("Wav2Vec2CTCTokenizer"),nMo=o(" (Wav2Vec2 model)"),sMo=l(),Mu=a("li"),jfe=a("strong"),lMo=o("wav2vec2-conformer"),iMo=o(" \u2014 "),TD=a("a"),dMo=o("Wav2Vec2CTCTokenizer"),cMo=o(" (Wav2Vec2-Conformer model)"),mMo=l(),Eu=a("li"),Dfe=a("strong"),fMo=o("wav2vec2_phoneme"),gMo=o(" \u2014 "),MD=a("a"),hMo=o("Wav2Vec2PhonemeCTCTokenizer"),uMo=o(" (Wav2Vec2Phoneme model)"),pMo=l(),dl=a("li"),Gfe=a("strong"),_Mo=o("xclip"),bMo=o(" \u2014 "),ED=a("a"),vMo=o("CLIPTokenizer"),FMo=o(" or "),CD=a("a"),TMo=o("CLIPTokenizerFast"),MMo=o(" (X-CLIP model)"),EMo=l(),cl=a("li"),Ofe=a("strong"),CMo=o("xglm"),wMo=o(" \u2014 "),wD=a("a"),AMo=o("XGLMTokenizer"),LMo=o(" or "),AD=a("a"),yMo=o("XGLMTokenizerFast"),xMo=o(" (XGLM model)"),$Mo=l(),Cu=a("li"),Vfe=a("strong"),kMo=o("xlm"),SMo=o(" \u2014 "),LD=a("a"),RMo=o("XLMTokenizer"),PMo=o(" (XLM model)"),BMo=l(),wu=a("li"),Xfe=a("strong"),IMo=o("xlm-prophetnet"),NMo=o(" \u2014 "),yD=a("a"),qMo=o("XLMProphetNetTokenizer"),jMo=o(" (XLM-ProphetNet model)"),DMo=l(),ml=a("li"),zfe=a("strong"),GMo=o("xlm-roberta"),OMo=o(" \u2014 "),xD=a("a"),VMo=o("XLMRobertaTokenizer"),XMo=o(" or "),$D=a("a"),zMo=o("XLMRobertaTokenizerFast"),QMo=o(" (XLM-RoBERTa model)"),WMo=l(),fl=a("li"),Qfe=a("strong"),UMo=o("xlm-roberta-xl"),HMo=o(" \u2014 "),kD=a("a"),JMo=o("RobertaTokenizer"),YMo=o(" or "),SD=a("a"),KMo=o("RobertaTokenizerFast"),ZMo=o(" (XLM-RoBERTa-XL model)"),eEo=l(),gl=a("li"),Wfe=a("strong"),oEo=o("xlnet"),rEo=o(" \u2014 "),RD=a("a"),tEo=o("XLNetTokenizer"),aEo=o(" or "),PD=a("a"),nEo=o("XLNetTokenizerFast"),sEo=o(" (XLNet model)"),lEo=l(),hl=a("li"),Ufe=a("strong"),iEo=o("yoso"),dEo=o(" \u2014 "),BD=a("a"),cEo=o("AlbertTokenizer"),mEo=o(" or "),ID=a("a"),fEo=o("AlbertTokenizerFast"),gEo=o(" (YOSO model)"),hEo=l(),F(Au.$$.fragment),uEo=l(),Lu=a("div"),F(w9.$$.fragment),pEo=l(),Hfe=a("p"),_Eo=o("Register a new tokenizer in this mapping."),HJe=l(),fd=a("h2"),yu=a("a"),Jfe=a("span"),F(A9.$$.fragment),bEo=l(),Yfe=a("span"),vEo=o("AutoFeatureExtractor"),JJe=l(),ko=a("div"),F(L9.$$.fragment),FEo=l(),y9=a("p"),TEo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ND=a("a"),MEo=o("AutoFeatureExtractor.from_pretrained()"),EEo=o(" class method."),CEo=l(),x9=a("p"),wEo=o("This class cannot be instantiated directly using "),Kfe=a("code"),AEo=o("__init__()"),LEo=o(" (throws an error)."),yEo=l(),Je=a("div"),F($9.$$.fragment),xEo=l(),Zfe=a("p"),$Eo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kEo=l(),Ha=a("p"),SEo=o("The feature extractor class to instantiate is selected based on the "),ege=a("code"),REo=o("model_type"),PEo=o(` property of the config object
(either passed as an argument or loaded from `),oge=a("code"),BEo=o("pretrained_model_name_or_path"),IEo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rge=a("code"),NEo=o("pretrained_model_name_or_path"),qEo=o(":"),jEo=l(),Q=a("ul"),xu=a("li"),tge=a("strong"),DEo=o("beit"),GEo=o(" \u2014 "),qD=a("a"),OEo=o("BeitFeatureExtractor"),VEo=o(" (BEiT model)"),XEo=l(),$u=a("li"),age=a("strong"),zEo=o("clip"),QEo=o(" \u2014 "),jD=a("a"),WEo=o("CLIPFeatureExtractor"),UEo=o(" (CLIP model)"),HEo=l(),ku=a("li"),nge=a("strong"),JEo=o("convnext"),YEo=o(" \u2014 "),DD=a("a"),KEo=o("ConvNextFeatureExtractor"),ZEo=o(" (ConvNeXT model)"),e4o=l(),Su=a("li"),sge=a("strong"),o4o=o("cvt"),r4o=o(" \u2014 "),GD=a("a"),t4o=o("ConvNextFeatureExtractor"),a4o=o(" (CvT model)"),n4o=l(),Ru=a("li"),lge=a("strong"),s4o=o("data2vec-audio"),l4o=o(" \u2014 "),OD=a("a"),i4o=o("Wav2Vec2FeatureExtractor"),d4o=o(" (Data2VecAudio model)"),c4o=l(),Pu=a("li"),ige=a("strong"),m4o=o("data2vec-vision"),f4o=o(" \u2014 "),VD=a("a"),g4o=o("BeitFeatureExtractor"),h4o=o(" (Data2VecVision model)"),u4o=l(),Bu=a("li"),dge=a("strong"),p4o=o("deit"),_4o=o(" \u2014 "),XD=a("a"),b4o=o("DeiTFeatureExtractor"),v4o=o(" (DeiT model)"),F4o=l(),Iu=a("li"),cge=a("strong"),T4o=o("detr"),M4o=o(" \u2014 "),zD=a("a"),E4o=o("DetrFeatureExtractor"),C4o=o(" (DETR model)"),w4o=l(),Nu=a("li"),mge=a("strong"),A4o=o("donut"),L4o=o(" \u2014 "),QD=a("a"),y4o=o("DonutFeatureExtractor"),x4o=o(" (Donut model)"),$4o=l(),qu=a("li"),fge=a("strong"),k4o=o("dpt"),S4o=o(" \u2014 "),WD=a("a"),R4o=o("DPTFeatureExtractor"),P4o=o(" (DPT model)"),B4o=l(),ju=a("li"),gge=a("strong"),I4o=o("flava"),N4o=o(" \u2014 "),UD=a("a"),q4o=o("FlavaFeatureExtractor"),j4o=o(" (FLAVA model)"),D4o=l(),Du=a("li"),hge=a("strong"),G4o=o("glpn"),O4o=o(" \u2014 "),HD=a("a"),V4o=o("GLPNFeatureExtractor"),X4o=o(" (GLPN model)"),z4o=l(),Gu=a("li"),uge=a("strong"),Q4o=o("groupvit"),W4o=o(" \u2014 "),JD=a("a"),U4o=o("CLIPFeatureExtractor"),H4o=o(" (GroupViT model)"),J4o=l(),Ou=a("li"),pge=a("strong"),Y4o=o("hubert"),K4o=o(" \u2014 "),YD=a("a"),Z4o=o("Wav2Vec2FeatureExtractor"),eCo=o(" (Hubert model)"),oCo=l(),Vu=a("li"),_ge=a("strong"),rCo=o("imagegpt"),tCo=o(" \u2014 "),KD=a("a"),aCo=o("ImageGPTFeatureExtractor"),nCo=o(" (ImageGPT model)"),sCo=l(),Xu=a("li"),bge=a("strong"),lCo=o("layoutlmv2"),iCo=o(" \u2014 "),ZD=a("a"),dCo=o("LayoutLMv2FeatureExtractor"),cCo=o(" (LayoutLMv2 model)"),mCo=l(),zu=a("li"),vge=a("strong"),fCo=o("layoutlmv3"),gCo=o(" \u2014 "),eG=a("a"),hCo=o("LayoutLMv3FeatureExtractor"),uCo=o(" (LayoutLMv3 model)"),pCo=l(),Qu=a("li"),Fge=a("strong"),_Co=o("levit"),bCo=o(" \u2014 "),oG=a("a"),vCo=o("LevitFeatureExtractor"),FCo=o(" (LeViT model)"),TCo=l(),Wu=a("li"),Tge=a("strong"),MCo=o("maskformer"),ECo=o(" \u2014 "),rG=a("a"),CCo=o("MaskFormerFeatureExtractor"),wCo=o(" (MaskFormer model)"),ACo=l(),Uu=a("li"),Mge=a("strong"),LCo=o("mctct"),yCo=o(" \u2014 "),tG=a("a"),xCo=o("MCTCTFeatureExtractor"),$Co=o(" (M-CTC-T model)"),kCo=l(),Hu=a("li"),Ege=a("strong"),SCo=o("mobilevit"),RCo=o(" \u2014 "),aG=a("a"),PCo=o("MobileViTFeatureExtractor"),BCo=o(" (MobileViT model)"),ICo=l(),Ju=a("li"),Cge=a("strong"),NCo=o("owlvit"),qCo=o(" \u2014 "),nG=a("a"),jCo=o("OwlViTFeatureExtractor"),DCo=o(" (OWL-ViT model)"),GCo=l(),Yu=a("li"),wge=a("strong"),OCo=o("perceiver"),VCo=o(" \u2014 "),sG=a("a"),XCo=o("PerceiverFeatureExtractor"),zCo=o(" (Perceiver model)"),QCo=l(),Ku=a("li"),Age=a("strong"),WCo=o("poolformer"),UCo=o(" \u2014 "),lG=a("a"),HCo=o("PoolFormerFeatureExtractor"),JCo=o(" (PoolFormer model)"),YCo=l(),Zu=a("li"),Lge=a("strong"),KCo=o("regnet"),ZCo=o(" \u2014 "),iG=a("a"),e3o=o("ConvNextFeatureExtractor"),o3o=o(" (RegNet model)"),r3o=l(),ep=a("li"),yge=a("strong"),t3o=o("resnet"),a3o=o(" \u2014 "),dG=a("a"),n3o=o("ConvNextFeatureExtractor"),s3o=o(" (ResNet model)"),l3o=l(),op=a("li"),xge=a("strong"),i3o=o("segformer"),d3o=o(" \u2014 "),cG=a("a"),c3o=o("SegformerFeatureExtractor"),m3o=o(" (SegFormer model)"),f3o=l(),rp=a("li"),$ge=a("strong"),g3o=o("speech_to_text"),h3o=o(" \u2014 "),mG=a("a"),u3o=o("Speech2TextFeatureExtractor"),p3o=o(" (Speech2Text model)"),_3o=l(),tp=a("li"),kge=a("strong"),b3o=o("swin"),v3o=o(" \u2014 "),fG=a("a"),F3o=o("ViTFeatureExtractor"),T3o=o(" (Swin Transformer model)"),M3o=l(),ap=a("li"),Sge=a("strong"),E3o=o("swinv2"),C3o=o(" \u2014 "),gG=a("a"),w3o=o("ViTFeatureExtractor"),A3o=o(" (Swin Transformer V2 model)"),L3o=l(),np=a("li"),Rge=a("strong"),y3o=o("van"),x3o=o(" \u2014 "),hG=a("a"),$3o=o("ConvNextFeatureExtractor"),k3o=o(" (VAN model)"),S3o=l(),sp=a("li"),Pge=a("strong"),R3o=o("videomae"),P3o=o(" \u2014 "),uG=a("a"),B3o=o("VideoMAEFeatureExtractor"),I3o=o(" (VideoMAE model)"),N3o=l(),lp=a("li"),Bge=a("strong"),q3o=o("vilt"),j3o=o(" \u2014 "),pG=a("a"),D3o=o("ViltFeatureExtractor"),G3o=o(" (ViLT model)"),O3o=l(),ip=a("li"),Ige=a("strong"),V3o=o("vit"),X3o=o(" \u2014 "),_G=a("a"),z3o=o("ViTFeatureExtractor"),Q3o=o(" (ViT model)"),W3o=l(),dp=a("li"),Nge=a("strong"),U3o=o("vit_mae"),H3o=o(" \u2014 "),bG=a("a"),J3o=o("ViTFeatureExtractor"),Y3o=o(" (ViTMAE model)"),K3o=l(),cp=a("li"),qge=a("strong"),Z3o=o("wav2vec2"),e5o=o(" \u2014 "),vG=a("a"),o5o=o("Wav2Vec2FeatureExtractor"),r5o=o(" (Wav2Vec2 model)"),t5o=l(),mp=a("li"),jge=a("strong"),a5o=o("wav2vec2-conformer"),n5o=o(" \u2014 "),FG=a("a"),s5o=o("Wav2Vec2FeatureExtractor"),l5o=o(" (Wav2Vec2-Conformer model)"),i5o=l(),fp=a("li"),Dge=a("strong"),d5o=o("xclip"),c5o=o(" \u2014 "),TG=a("a"),m5o=o("CLIPFeatureExtractor"),f5o=o(" (X-CLIP model)"),g5o=l(),gp=a("li"),Gge=a("strong"),h5o=o("yolos"),u5o=o(" \u2014 "),MG=a("a"),p5o=o("YolosFeatureExtractor"),_5o=o(" (YOLOS model)"),b5o=l(),F(hp.$$.fragment),v5o=l(),F(up.$$.fragment),F5o=l(),pp=a("div"),F(k9.$$.fragment),T5o=l(),Oge=a("p"),M5o=o("Register a new feature extractor for this class."),YJe=l(),gd=a("h2"),_p=a("a"),Vge=a("span"),F(S9.$$.fragment),E5o=l(),Xge=a("span"),C5o=o("AutoProcessor"),KJe=l(),So=a("div"),F(R9.$$.fragment),w5o=l(),P9=a("p"),A5o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EG=a("a"),L5o=o("AutoProcessor.from_pretrained()"),y5o=o(" class method."),x5o=l(),B9=a("p"),$5o=o("This class cannot be instantiated directly using "),zge=a("code"),k5o=o("__init__()"),S5o=o(" (throws an error)."),R5o=l(),Ye=a("div"),F(I9.$$.fragment),P5o=l(),Qge=a("p"),B5o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),I5o=l(),hd=a("p"),N5o=o("The processor class to instantiate is selected based on the "),Wge=a("code"),q5o=o("model_type"),j5o=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),D5o=o("pretrained_model_name_or_path"),G5o=o(" if possible):"),O5o=l(),ie=a("ul"),bp=a("li"),Hge=a("strong"),V5o=o("clip"),X5o=o(" \u2014 "),CG=a("a"),z5o=o("CLIPProcessor"),Q5o=o(" (CLIP model)"),W5o=l(),vp=a("li"),Jge=a("strong"),U5o=o("donut"),H5o=o(" \u2014 "),wG=a("a"),J5o=o("DonutProcessor"),Y5o=o(" (Donut model)"),K5o=l(),Fp=a("li"),Yge=a("strong"),Z5o=o("flava"),e0o=o(" \u2014 "),AG=a("a"),o0o=o("FlavaProcessor"),r0o=o(" (FLAVA model)"),t0o=l(),Tp=a("li"),Kge=a("strong"),a0o=o("groupvit"),n0o=o(" \u2014 "),LG=a("a"),s0o=o("CLIPProcessor"),l0o=o(" (GroupViT model)"),i0o=l(),Mp=a("li"),Zge=a("strong"),d0o=o("layoutlmv2"),c0o=o(" \u2014 "),yG=a("a"),m0o=o("LayoutLMv2Processor"),f0o=o(" (LayoutLMv2 model)"),g0o=l(),Ep=a("li"),ehe=a("strong"),h0o=o("layoutlmv3"),u0o=o(" \u2014 "),xG=a("a"),p0o=o("LayoutLMv3Processor"),_0o=o(" (LayoutLMv3 model)"),b0o=l(),Cp=a("li"),ohe=a("strong"),v0o=o("layoutxlm"),F0o=o(" \u2014 "),$G=a("a"),T0o=o("LayoutXLMProcessor"),M0o=o(" (LayoutXLM model)"),E0o=l(),wp=a("li"),rhe=a("strong"),C0o=o("owlvit"),w0o=o(" \u2014 "),kG=a("a"),A0o=o("OwlViTProcessor"),L0o=o(" (OWL-ViT model)"),y0o=l(),Ap=a("li"),the=a("strong"),x0o=o("sew"),$0o=o(" \u2014 "),SG=a("a"),k0o=o("Wav2Vec2Processor"),S0o=o(" (SEW model)"),R0o=l(),Lp=a("li"),ahe=a("strong"),P0o=o("sew-d"),B0o=o(" \u2014 "),RG=a("a"),I0o=o("Wav2Vec2Processor"),N0o=o(" (SEW-D model)"),q0o=l(),yp=a("li"),nhe=a("strong"),j0o=o("speech_to_text"),D0o=o(" \u2014 "),PG=a("a"),G0o=o("Speech2TextProcessor"),O0o=o(" (Speech2Text model)"),V0o=l(),xp=a("li"),she=a("strong"),X0o=o("speech_to_text_2"),z0o=o(" \u2014 "),BG=a("a"),Q0o=o("Speech2Text2Processor"),W0o=o(" (Speech2Text2 model)"),U0o=l(),$p=a("li"),lhe=a("strong"),H0o=o("trocr"),J0o=o(" \u2014 "),IG=a("a"),Y0o=o("TrOCRProcessor"),K0o=o(" (TrOCR model)"),Z0o=l(),kp=a("li"),ihe=a("strong"),ewo=o("unispeech"),owo=o(" \u2014 "),NG=a("a"),rwo=o("Wav2Vec2Processor"),two=o(" (UniSpeech model)"),awo=l(),Sp=a("li"),dhe=a("strong"),nwo=o("unispeech-sat"),swo=o(" \u2014 "),qG=a("a"),lwo=o("Wav2Vec2Processor"),iwo=o(" (UniSpeechSat model)"),dwo=l(),Rp=a("li"),che=a("strong"),cwo=o("vilt"),mwo=o(" \u2014 "),jG=a("a"),fwo=o("ViltProcessor"),gwo=o(" (ViLT model)"),hwo=l(),Pp=a("li"),mhe=a("strong"),uwo=o("vision-text-dual-encoder"),pwo=o(" \u2014 "),DG=a("a"),_wo=o("VisionTextDualEncoderProcessor"),bwo=o(" (VisionTextDualEncoder model)"),vwo=l(),Bp=a("li"),fhe=a("strong"),Fwo=o("wav2vec2"),Two=o(" \u2014 "),GG=a("a"),Mwo=o("Wav2Vec2Processor"),Ewo=o(" (Wav2Vec2 model)"),Cwo=l(),Ip=a("li"),ghe=a("strong"),wwo=o("wav2vec2-conformer"),Awo=o(" \u2014 "),OG=a("a"),Lwo=o("Wav2Vec2Processor"),ywo=o(" (Wav2Vec2-Conformer model)"),xwo=l(),Np=a("li"),hhe=a("strong"),$wo=o("wavlm"),kwo=o(" \u2014 "),VG=a("a"),Swo=o("Wav2Vec2Processor"),Rwo=o(" (WavLM model)"),Pwo=l(),qp=a("li"),uhe=a("strong"),Bwo=o("xclip"),Iwo=o(" \u2014 "),XG=a("a"),Nwo=o("CLIPProcessor"),qwo=o(" (X-CLIP model)"),jwo=l(),F(jp.$$.fragment),Dwo=l(),F(Dp.$$.fragment),Gwo=l(),Gp=a("div"),F(N9.$$.fragment),Owo=l(),phe=a("p"),Vwo=o("Register a new processor for this class."),ZJe=l(),ud=a("h2"),Op=a("a"),_he=a("span"),F(q9.$$.fragment),Xwo=l(),bhe=a("span"),zwo=o("AutoModel"),eYe=l(),Ro=a("div"),F(j9.$$.fragment),Qwo=l(),pd=a("p"),Wwo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zG=a("a"),Uwo=o("from_pretrained()"),Hwo=o(" class method or the "),QG=a("a"),Jwo=o("from_config()"),Ywo=o(` class
method.`),Kwo=l(),D9=a("p"),Zwo=o("This class cannot be instantiated directly using "),vhe=a("code"),eAo=o("__init__()"),oAo=o(" (throws an error)."),rAo=l(),pt=a("div"),F(G9.$$.fragment),tAo=l(),Fhe=a("p"),aAo=o("Instantiates one of the base model classes of the library from a configuration."),nAo=l(),_d=a("p"),sAo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),lAo=o("not"),iAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),dAo=o("from_pretrained()"),cAo=o(" to load the model weights."),mAo=l(),F(Vp.$$.fragment),fAo=l(),Ke=a("div"),F(O9.$$.fragment),gAo=l(),Mhe=a("p"),hAo=o("Instantiate one of the base model classes of the library from a pretrained model."),uAo=l(),Ja=a("p"),pAo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),_Ao=o("model_type"),bAo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),vAo=o("pretrained_model_name_or_path"),FAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),TAo=o("pretrained_model_name_or_path"),MAo=o(":"),EAo=l(),y=a("ul"),Xp=a("li"),Ahe=a("strong"),CAo=o("albert"),wAo=o(" \u2014 "),UG=a("a"),AAo=o("AlbertModel"),LAo=o(" (ALBERT model)"),yAo=l(),zp=a("li"),Lhe=a("strong"),xAo=o("bart"),$Ao=o(" \u2014 "),HG=a("a"),kAo=o("BartModel"),SAo=o(" (BART model)"),RAo=l(),Qp=a("li"),yhe=a("strong"),PAo=o("beit"),BAo=o(" \u2014 "),JG=a("a"),IAo=o("BeitModel"),NAo=o(" (BEiT model)"),qAo=l(),Wp=a("li"),xhe=a("strong"),jAo=o("bert"),DAo=o(" \u2014 "),YG=a("a"),GAo=o("BertModel"),OAo=o(" (BERT model)"),VAo=l(),Up=a("li"),$he=a("strong"),XAo=o("bert-generation"),zAo=o(" \u2014 "),KG=a("a"),QAo=o("BertGenerationEncoder"),WAo=o(" (Bert Generation model)"),UAo=l(),Hp=a("li"),khe=a("strong"),HAo=o("big_bird"),JAo=o(" \u2014 "),ZG=a("a"),YAo=o("BigBirdModel"),KAo=o(" (BigBird model)"),ZAo=l(),Jp=a("li"),She=a("strong"),e6o=o("bigbird_pegasus"),o6o=o(" \u2014 "),eO=a("a"),r6o=o("BigBirdPegasusModel"),t6o=o(" (BigBird-Pegasus model)"),a6o=l(),Yp=a("li"),Rhe=a("strong"),n6o=o("blenderbot"),s6o=o(" \u2014 "),oO=a("a"),l6o=o("BlenderbotModel"),i6o=o(" (Blenderbot model)"),d6o=l(),Kp=a("li"),Phe=a("strong"),c6o=o("blenderbot-small"),m6o=o(" \u2014 "),rO=a("a"),f6o=o("BlenderbotSmallModel"),g6o=o(" (BlenderbotSmall model)"),h6o=l(),Zp=a("li"),Bhe=a("strong"),u6o=o("bloom"),p6o=o(" \u2014 "),tO=a("a"),_6o=o("BloomModel"),b6o=o(" (BLOOM model)"),v6o=l(),e_=a("li"),Ihe=a("strong"),F6o=o("camembert"),T6o=o(" \u2014 "),aO=a("a"),M6o=o("CamembertModel"),E6o=o(" (CamemBERT model)"),C6o=l(),o_=a("li"),Nhe=a("strong"),w6o=o("canine"),A6o=o(" \u2014 "),nO=a("a"),L6o=o("CanineModel"),y6o=o(" (CANINE model)"),x6o=l(),r_=a("li"),qhe=a("strong"),$6o=o("clip"),k6o=o(" \u2014 "),sO=a("a"),S6o=o("CLIPModel"),R6o=o(" (CLIP model)"),P6o=l(),t_=a("li"),jhe=a("strong"),B6o=o("codegen"),I6o=o(" \u2014 "),lO=a("a"),N6o=o("CodeGenModel"),q6o=o(" (CodeGen model)"),j6o=l(),a_=a("li"),Dhe=a("strong"),D6o=o("convbert"),G6o=o(" \u2014 "),iO=a("a"),O6o=o("ConvBertModel"),V6o=o(" (ConvBERT model)"),X6o=l(),n_=a("li"),Ghe=a("strong"),z6o=o("convnext"),Q6o=o(" \u2014 "),dO=a("a"),W6o=o("ConvNextModel"),U6o=o(" (ConvNeXT model)"),H6o=l(),s_=a("li"),Ohe=a("strong"),J6o=o("ctrl"),Y6o=o(" \u2014 "),cO=a("a"),K6o=o("CTRLModel"),Z6o=o(" (CTRL model)"),e7o=l(),l_=a("li"),Vhe=a("strong"),o7o=o("cvt"),r7o=o(" \u2014 "),mO=a("a"),t7o=o("CvtModel"),a7o=o(" (CvT model)"),n7o=l(),i_=a("li"),Xhe=a("strong"),s7o=o("data2vec-audio"),l7o=o(" \u2014 "),fO=a("a"),i7o=o("Data2VecAudioModel"),d7o=o(" (Data2VecAudio model)"),c7o=l(),d_=a("li"),zhe=a("strong"),m7o=o("data2vec-text"),f7o=o(" \u2014 "),gO=a("a"),g7o=o("Data2VecTextModel"),h7o=o(" (Data2VecText model)"),u7o=l(),c_=a("li"),Qhe=a("strong"),p7o=o("data2vec-vision"),_7o=o(" \u2014 "),hO=a("a"),b7o=o("Data2VecVisionModel"),v7o=o(" (Data2VecVision model)"),F7o=l(),m_=a("li"),Whe=a("strong"),T7o=o("deberta"),M7o=o(" \u2014 "),uO=a("a"),E7o=o("DebertaModel"),C7o=o(" (DeBERTa model)"),w7o=l(),f_=a("li"),Uhe=a("strong"),A7o=o("deberta-v2"),L7o=o(" \u2014 "),pO=a("a"),y7o=o("DebertaV2Model"),x7o=o(" (DeBERTa-v2 model)"),$7o=l(),g_=a("li"),Hhe=a("strong"),k7o=o("decision_transformer"),S7o=o(" \u2014 "),_O=a("a"),R7o=o("DecisionTransformerModel"),P7o=o(" (Decision Transformer model)"),B7o=l(),h_=a("li"),Jhe=a("strong"),I7o=o("deit"),N7o=o(" \u2014 "),bO=a("a"),q7o=o("DeiTModel"),j7o=o(" (DeiT model)"),D7o=l(),u_=a("li"),Yhe=a("strong"),G7o=o("detr"),O7o=o(" \u2014 "),vO=a("a"),V7o=o("DetrModel"),X7o=o(" (DETR model)"),z7o=l(),p_=a("li"),Khe=a("strong"),Q7o=o("distilbert"),W7o=o(" \u2014 "),FO=a("a"),U7o=o("DistilBertModel"),H7o=o(" (DistilBERT model)"),J7o=l(),__=a("li"),Zhe=a("strong"),Y7o=o("donut-swin"),K7o=o(" \u2014 "),TO=a("a"),Z7o=o("DonutSwinModel"),eLo=o(" (DonutSwin model)"),oLo=l(),b_=a("li"),eue=a("strong"),rLo=o("dpr"),tLo=o(" \u2014 "),MO=a("a"),aLo=o("DPRQuestionEncoder"),nLo=o(" (DPR model)"),sLo=l(),v_=a("li"),oue=a("strong"),lLo=o("dpt"),iLo=o(" \u2014 "),EO=a("a"),dLo=o("DPTModel"),cLo=o(" (DPT model)"),mLo=l(),F_=a("li"),rue=a("strong"),fLo=o("electra"),gLo=o(" \u2014 "),CO=a("a"),hLo=o("ElectraModel"),uLo=o(" (ELECTRA model)"),pLo=l(),T_=a("li"),tue=a("strong"),_Lo=o("flaubert"),bLo=o(" \u2014 "),wO=a("a"),vLo=o("FlaubertModel"),FLo=o(" (FlauBERT model)"),TLo=l(),M_=a("li"),aue=a("strong"),MLo=o("flava"),ELo=o(" \u2014 "),AO=a("a"),CLo=o("FlavaModel"),wLo=o(" (FLAVA model)"),ALo=l(),E_=a("li"),nue=a("strong"),LLo=o("fnet"),yLo=o(" \u2014 "),LO=a("a"),xLo=o("FNetModel"),$Lo=o(" (FNet model)"),kLo=l(),C_=a("li"),sue=a("strong"),SLo=o("fsmt"),RLo=o(" \u2014 "),yO=a("a"),PLo=o("FSMTModel"),BLo=o(" (FairSeq Machine-Translation model)"),ILo=l(),ul=a("li"),lue=a("strong"),NLo=o("funnel"),qLo=o(" \u2014 "),xO=a("a"),jLo=o("FunnelModel"),DLo=o(" or "),$O=a("a"),GLo=o("FunnelBaseModel"),OLo=o(" (Funnel Transformer model)"),VLo=l(),w_=a("li"),iue=a("strong"),XLo=o("glpn"),zLo=o(" \u2014 "),kO=a("a"),QLo=o("GLPNModel"),WLo=o(" (GLPN model)"),ULo=l(),A_=a("li"),due=a("strong"),HLo=o("gpt2"),JLo=o(" \u2014 "),SO=a("a"),YLo=o("GPT2Model"),KLo=o(" (OpenAI GPT-2 model)"),ZLo=l(),L_=a("li"),cue=a("strong"),eyo=o("gpt_neo"),oyo=o(" \u2014 "),RO=a("a"),ryo=o("GPTNeoModel"),tyo=o(" (GPT Neo model)"),ayo=l(),y_=a("li"),mue=a("strong"),nyo=o("gpt_neox"),syo=o(" \u2014 "),PO=a("a"),lyo=o("GPTNeoXModel"),iyo=o(" (GPT NeoX model)"),dyo=l(),x_=a("li"),fue=a("strong"),cyo=o("gptj"),myo=o(" \u2014 "),BO=a("a"),fyo=o("GPTJModel"),gyo=o(" (GPT-J model)"),hyo=l(),$_=a("li"),gue=a("strong"),uyo=o("groupvit"),pyo=o(" \u2014 "),IO=a("a"),_yo=o("GroupViTModel"),byo=o(" (GroupViT model)"),vyo=l(),k_=a("li"),hue=a("strong"),Fyo=o("hubert"),Tyo=o(" \u2014 "),NO=a("a"),Myo=o("HubertModel"),Eyo=o(" (Hubert model)"),Cyo=l(),S_=a("li"),uue=a("strong"),wyo=o("ibert"),Ayo=o(" \u2014 "),qO=a("a"),Lyo=o("IBertModel"),yyo=o(" (I-BERT model)"),xyo=l(),R_=a("li"),pue=a("strong"),$yo=o("imagegpt"),kyo=o(" \u2014 "),jO=a("a"),Syo=o("ImageGPTModel"),Ryo=o(" (ImageGPT model)"),Pyo=l(),P_=a("li"),_ue=a("strong"),Byo=o("layoutlm"),Iyo=o(" \u2014 "),DO=a("a"),Nyo=o("LayoutLMModel"),qyo=o(" (LayoutLM model)"),jyo=l(),B_=a("li"),bue=a("strong"),Dyo=o("layoutlmv2"),Gyo=o(" \u2014 "),GO=a("a"),Oyo=o("LayoutLMv2Model"),Vyo=o(" (LayoutLMv2 model)"),Xyo=l(),I_=a("li"),vue=a("strong"),zyo=o("layoutlmv3"),Qyo=o(" \u2014 "),OO=a("a"),Wyo=o("LayoutLMv3Model"),Uyo=o(" (LayoutLMv3 model)"),Hyo=l(),N_=a("li"),Fue=a("strong"),Jyo=o("led"),Yyo=o(" \u2014 "),VO=a("a"),Kyo=o("LEDModel"),Zyo=o(" (LED model)"),e8o=l(),q_=a("li"),Tue=a("strong"),o8o=o("levit"),r8o=o(" \u2014 "),XO=a("a"),t8o=o("LevitModel"),a8o=o(" (LeViT model)"),n8o=l(),j_=a("li"),Mue=a("strong"),s8o=o("longformer"),l8o=o(" \u2014 "),zO=a("a"),i8o=o("LongformerModel"),d8o=o(" (Longformer model)"),c8o=l(),D_=a("li"),Eue=a("strong"),m8o=o("longt5"),f8o=o(" \u2014 "),QO=a("a"),g8o=o("LongT5Model"),h8o=o(" (LongT5 model)"),u8o=l(),G_=a("li"),Cue=a("strong"),p8o=o("luke"),_8o=o(" \u2014 "),WO=a("a"),b8o=o("LukeModel"),v8o=o(" (LUKE model)"),F8o=l(),O_=a("li"),wue=a("strong"),T8o=o("lxmert"),M8o=o(" \u2014 "),UO=a("a"),E8o=o("LxmertModel"),C8o=o(" (LXMERT model)"),w8o=l(),V_=a("li"),Aue=a("strong"),A8o=o("m2m_100"),L8o=o(" \u2014 "),HO=a("a"),y8o=o("M2M100Model"),x8o=o(" (M2M100 model)"),$8o=l(),X_=a("li"),Lue=a("strong"),k8o=o("marian"),S8o=o(" \u2014 "),JO=a("a"),R8o=o("MarianModel"),P8o=o(" (Marian model)"),B8o=l(),z_=a("li"),yue=a("strong"),I8o=o("maskformer"),N8o=o(" \u2014 "),YO=a("a"),q8o=o("MaskFormerModel"),j8o=o(" (MaskFormer model)"),D8o=l(),Q_=a("li"),xue=a("strong"),G8o=o("mbart"),O8o=o(" \u2014 "),KO=a("a"),V8o=o("MBartModel"),X8o=o(" (mBART model)"),z8o=l(),W_=a("li"),$ue=a("strong"),Q8o=o("mctct"),W8o=o(" \u2014 "),ZO=a("a"),U8o=o("MCTCTModel"),H8o=o(" (M-CTC-T model)"),J8o=l(),U_=a("li"),kue=a("strong"),Y8o=o("megatron-bert"),K8o=o(" \u2014 "),eV=a("a"),Z8o=o("MegatronBertModel"),e9o=o(" (Megatron-BERT model)"),o9o=l(),H_=a("li"),Sue=a("strong"),r9o=o("mobilebert"),t9o=o(" \u2014 "),oV=a("a"),a9o=o("MobileBertModel"),n9o=o(" (MobileBERT model)"),s9o=l(),J_=a("li"),Rue=a("strong"),l9o=o("mobilevit"),i9o=o(" \u2014 "),rV=a("a"),d9o=o("MobileViTModel"),c9o=o(" (MobileViT model)"),m9o=l(),Y_=a("li"),Pue=a("strong"),f9o=o("mpnet"),g9o=o(" \u2014 "),tV=a("a"),h9o=o("MPNetModel"),u9o=o(" (MPNet model)"),p9o=l(),K_=a("li"),Bue=a("strong"),_9o=o("mt5"),b9o=o(" \u2014 "),aV=a("a"),v9o=o("MT5Model"),F9o=o(" (MT5 model)"),T9o=l(),Z_=a("li"),Iue=a("strong"),M9o=o("mvp"),E9o=o(" \u2014 "),nV=a("a"),C9o=o("MvpModel"),w9o=o(" (MVP model)"),A9o=l(),eb=a("li"),Nue=a("strong"),L9o=o("nezha"),y9o=o(" \u2014 "),sV=a("a"),x9o=o("NezhaModel"),$9o=o(" (Nezha model)"),k9o=l(),ob=a("li"),que=a("strong"),S9o=o("nllb"),R9o=o(" \u2014 "),lV=a("a"),P9o=o("M2M100Model"),B9o=o(" (NLLB model)"),I9o=l(),rb=a("li"),jue=a("strong"),N9o=o("nystromformer"),q9o=o(" \u2014 "),iV=a("a"),j9o=o("NystromformerModel"),D9o=o(" (Nystr\xF6mformer model)"),G9o=l(),tb=a("li"),Due=a("strong"),O9o=o("openai-gpt"),V9o=o(" \u2014 "),dV=a("a"),X9o=o("OpenAIGPTModel"),z9o=o(" (OpenAI GPT model)"),Q9o=l(),ab=a("li"),Gue=a("strong"),W9o=o("opt"),U9o=o(" \u2014 "),cV=a("a"),H9o=o("OPTModel"),J9o=o(" (OPT model)"),Y9o=l(),nb=a("li"),Oue=a("strong"),K9o=o("owlvit"),Z9o=o(" \u2014 "),mV=a("a"),exo=o("OwlViTModel"),oxo=o(" (OWL-ViT model)"),rxo=l(),sb=a("li"),Vue=a("strong"),txo=o("pegasus"),axo=o(" \u2014 "),fV=a("a"),nxo=o("PegasusModel"),sxo=o(" (Pegasus model)"),lxo=l(),lb=a("li"),Xue=a("strong"),ixo=o("pegasus_x"),dxo=o(" \u2014 "),gV=a("a"),cxo=o("PegasusXModel"),mxo=o(" (PEGASUS-X model)"),fxo=l(),ib=a("li"),zue=a("strong"),gxo=o("perceiver"),hxo=o(" \u2014 "),hV=a("a"),uxo=o("PerceiverModel"),pxo=o(" (Perceiver model)"),_xo=l(),db=a("li"),Que=a("strong"),bxo=o("plbart"),vxo=o(" \u2014 "),uV=a("a"),Fxo=o("PLBartModel"),Txo=o(" (PLBart model)"),Mxo=l(),cb=a("li"),Wue=a("strong"),Exo=o("poolformer"),Cxo=o(" \u2014 "),pV=a("a"),wxo=o("PoolFormerModel"),Axo=o(" (PoolFormer model)"),Lxo=l(),mb=a("li"),Uue=a("strong"),yxo=o("prophetnet"),xxo=o(" \u2014 "),_V=a("a"),$xo=o("ProphetNetModel"),kxo=o(" (ProphetNet model)"),Sxo=l(),fb=a("li"),Hue=a("strong"),Rxo=o("qdqbert"),Pxo=o(" \u2014 "),bV=a("a"),Bxo=o("QDQBertModel"),Ixo=o(" (QDQBert model)"),Nxo=l(),gb=a("li"),Jue=a("strong"),qxo=o("reformer"),jxo=o(" \u2014 "),vV=a("a"),Dxo=o("ReformerModel"),Gxo=o(" (Reformer model)"),Oxo=l(),hb=a("li"),Yue=a("strong"),Vxo=o("regnet"),Xxo=o(" \u2014 "),FV=a("a"),zxo=o("RegNetModel"),Qxo=o(" (RegNet model)"),Wxo=l(),ub=a("li"),Kue=a("strong"),Uxo=o("rembert"),Hxo=o(" \u2014 "),TV=a("a"),Jxo=o("RemBertModel"),Yxo=o(" (RemBERT model)"),Kxo=l(),pb=a("li"),Zue=a("strong"),Zxo=o("resnet"),e$o=o(" \u2014 "),MV=a("a"),o$o=o("ResNetModel"),r$o=o(" (ResNet model)"),t$o=l(),_b=a("li"),epe=a("strong"),a$o=o("retribert"),n$o=o(" \u2014 "),EV=a("a"),s$o=o("RetriBertModel"),l$o=o(" (RetriBERT model)"),i$o=l(),bb=a("li"),ope=a("strong"),d$o=o("roberta"),c$o=o(" \u2014 "),CV=a("a"),m$o=o("RobertaModel"),f$o=o(" (RoBERTa model)"),g$o=l(),vb=a("li"),rpe=a("strong"),h$o=o("roformer"),u$o=o(" \u2014 "),wV=a("a"),p$o=o("RoFormerModel"),_$o=o(" (RoFormer model)"),b$o=l(),Fb=a("li"),tpe=a("strong"),v$o=o("segformer"),F$o=o(" \u2014 "),AV=a("a"),T$o=o("SegformerModel"),M$o=o(" (SegFormer model)"),E$o=l(),Tb=a("li"),ape=a("strong"),C$o=o("sew"),w$o=o(" \u2014 "),LV=a("a"),A$o=o("SEWModel"),L$o=o(" (SEW model)"),y$o=l(),Mb=a("li"),npe=a("strong"),x$o=o("sew-d"),$$o=o(" \u2014 "),yV=a("a"),k$o=o("SEWDModel"),S$o=o(" (SEW-D model)"),R$o=l(),Eb=a("li"),spe=a("strong"),P$o=o("speech_to_text"),B$o=o(" \u2014 "),xV=a("a"),I$o=o("Speech2TextModel"),N$o=o(" (Speech2Text model)"),q$o=l(),Cb=a("li"),lpe=a("strong"),j$o=o("splinter"),D$o=o(" \u2014 "),$V=a("a"),G$o=o("SplinterModel"),O$o=o(" (Splinter model)"),V$o=l(),wb=a("li"),ipe=a("strong"),X$o=o("squeezebert"),z$o=o(" \u2014 "),kV=a("a"),Q$o=o("SqueezeBertModel"),W$o=o(" (SqueezeBERT model)"),U$o=l(),Ab=a("li"),dpe=a("strong"),H$o=o("swin"),J$o=o(" \u2014 "),SV=a("a"),Y$o=o("SwinModel"),K$o=o(" (Swin Transformer model)"),Z$o=l(),Lb=a("li"),cpe=a("strong"),eko=o("swinv2"),oko=o(" \u2014 "),RV=a("a"),rko=o("Swinv2Model"),tko=o(" (Swin Transformer V2 model)"),ako=l(),yb=a("li"),mpe=a("strong"),nko=o("t5"),sko=o(" \u2014 "),PV=a("a"),lko=o("T5Model"),iko=o(" (T5 model)"),dko=l(),xb=a("li"),fpe=a("strong"),cko=o("tapas"),mko=o(" \u2014 "),BV=a("a"),fko=o("TapasModel"),gko=o(" (TAPAS model)"),hko=l(),$b=a("li"),gpe=a("strong"),uko=o("trajectory_transformer"),pko=o(" \u2014 "),IV=a("a"),_ko=o("TrajectoryTransformerModel"),bko=o(" (Trajectory Transformer model)"),vko=l(),kb=a("li"),hpe=a("strong"),Fko=o("transfo-xl"),Tko=o(" \u2014 "),NV=a("a"),Mko=o("TransfoXLModel"),Eko=o(" (Transformer-XL model)"),Cko=l(),Sb=a("li"),upe=a("strong"),wko=o("unispeech"),Ako=o(" \u2014 "),qV=a("a"),Lko=o("UniSpeechModel"),yko=o(" (UniSpeech model)"),xko=l(),Rb=a("li"),ppe=a("strong"),$ko=o("unispeech-sat"),kko=o(" \u2014 "),jV=a("a"),Sko=o("UniSpeechSatModel"),Rko=o(" (UniSpeechSat model)"),Pko=l(),Pb=a("li"),_pe=a("strong"),Bko=o("van"),Iko=o(" \u2014 "),DV=a("a"),Nko=o("VanModel"),qko=o(" (VAN model)"),jko=l(),Bb=a("li"),bpe=a("strong"),Dko=o("videomae"),Gko=o(" \u2014 "),GV=a("a"),Oko=o("VideoMAEModel"),Vko=o(" (VideoMAE model)"),Xko=l(),Ib=a("li"),vpe=a("strong"),zko=o("vilt"),Qko=o(" \u2014 "),OV=a("a"),Wko=o("ViltModel"),Uko=o(" (ViLT model)"),Hko=l(),Nb=a("li"),Fpe=a("strong"),Jko=o("vision-text-dual-encoder"),Yko=o(" \u2014 "),VV=a("a"),Kko=o("VisionTextDualEncoderModel"),Zko=o(" (VisionTextDualEncoder model)"),eSo=l(),qb=a("li"),Tpe=a("strong"),oSo=o("visual_bert"),rSo=o(" \u2014 "),XV=a("a"),tSo=o("VisualBertModel"),aSo=o(" (VisualBERT model)"),nSo=l(),jb=a("li"),Mpe=a("strong"),sSo=o("vit"),lSo=o(" \u2014 "),zV=a("a"),iSo=o("ViTModel"),dSo=o(" (ViT model)"),cSo=l(),Db=a("li"),Epe=a("strong"),mSo=o("vit_mae"),fSo=o(" \u2014 "),QV=a("a"),gSo=o("ViTMAEModel"),hSo=o(" (ViTMAE model)"),uSo=l(),Gb=a("li"),Cpe=a("strong"),pSo=o("wav2vec2"),_So=o(" \u2014 "),WV=a("a"),bSo=o("Wav2Vec2Model"),vSo=o(" (Wav2Vec2 model)"),FSo=l(),Ob=a("li"),wpe=a("strong"),TSo=o("wav2vec2-conformer"),MSo=o(" \u2014 "),UV=a("a"),ESo=o("Wav2Vec2ConformerModel"),CSo=o(" (Wav2Vec2-Conformer model)"),wSo=l(),Vb=a("li"),Ape=a("strong"),ASo=o("wavlm"),LSo=o(" \u2014 "),HV=a("a"),ySo=o("WavLMModel"),xSo=o(" (WavLM model)"),$So=l(),Xb=a("li"),Lpe=a("strong"),kSo=o("xclip"),SSo=o(" \u2014 "),JV=a("a"),RSo=o("XCLIPModel"),PSo=o(" (X-CLIP model)"),BSo=l(),zb=a("li"),ype=a("strong"),ISo=o("xglm"),NSo=o(" \u2014 "),YV=a("a"),qSo=o("XGLMModel"),jSo=o(" (XGLM model)"),DSo=l(),Qb=a("li"),xpe=a("strong"),GSo=o("xlm"),OSo=o(" \u2014 "),KV=a("a"),VSo=o("XLMModel"),XSo=o(" (XLM model)"),zSo=l(),Wb=a("li"),$pe=a("strong"),QSo=o("xlm-prophetnet"),WSo=o(" \u2014 "),ZV=a("a"),USo=o("XLMProphetNetModel"),HSo=o(" (XLM-ProphetNet model)"),JSo=l(),Ub=a("li"),kpe=a("strong"),YSo=o("xlm-roberta"),KSo=o(" \u2014 "),eX=a("a"),ZSo=o("XLMRobertaModel"),eRo=o(" (XLM-RoBERTa model)"),oRo=l(),Hb=a("li"),Spe=a("strong"),rRo=o("xlm-roberta-xl"),tRo=o(" \u2014 "),oX=a("a"),aRo=o("XLMRobertaXLModel"),nRo=o(" (XLM-RoBERTa-XL model)"),sRo=l(),Jb=a("li"),Rpe=a("strong"),lRo=o("xlnet"),iRo=o(" \u2014 "),rX=a("a"),dRo=o("XLNetModel"),cRo=o(" (XLNet model)"),mRo=l(),Yb=a("li"),Ppe=a("strong"),fRo=o("yolos"),gRo=o(" \u2014 "),tX=a("a"),hRo=o("YolosModel"),uRo=o(" (YOLOS model)"),pRo=l(),Kb=a("li"),Bpe=a("strong"),_Ro=o("yoso"),bRo=o(" \u2014 "),aX=a("a"),vRo=o("YosoModel"),FRo=o(" (YOSO model)"),TRo=l(),Zb=a("p"),MRo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),ERo=o("model.eval()"),CRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),wRo=o("model.train()"),ARo=l(),F(e2.$$.fragment),oYe=l(),bd=a("h2"),o2=a("a"),qpe=a("span"),F(V9.$$.fragment),LRo=l(),jpe=a("span"),yRo=o("AutoModelForPreTraining"),rYe=l(),Po=a("div"),F(X9.$$.fragment),xRo=l(),vd=a("p"),$Ro=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nX=a("a"),kRo=o("from_pretrained()"),SRo=o(" class method or the "),sX=a("a"),RRo=o("from_config()"),PRo=o(` class
method.`),BRo=l(),z9=a("p"),IRo=o("This class cannot be instantiated directly using "),Dpe=a("code"),NRo=o("__init__()"),qRo=o(" (throws an error)."),jRo=l(),_t=a("div"),F(Q9.$$.fragment),DRo=l(),Gpe=a("p"),GRo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ORo=l(),Fd=a("p"),VRo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),XRo=o("not"),zRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),QRo=o("from_pretrained()"),WRo=o(" to load the model weights."),URo=l(),F(r2.$$.fragment),HRo=l(),Ze=a("div"),F(W9.$$.fragment),JRo=l(),Vpe=a("p"),YRo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KRo=l(),Ya=a("p"),ZRo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),ePo=o("model_type"),oPo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),rPo=o("pretrained_model_name_or_path"),tPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),aPo=o("pretrained_model_name_or_path"),nPo=o(":"),sPo=l(),G=a("ul"),t2=a("li"),Wpe=a("strong"),lPo=o("albert"),iPo=o(" \u2014 "),iX=a("a"),dPo=o("AlbertForPreTraining"),cPo=o(" (ALBERT model)"),mPo=l(),a2=a("li"),Upe=a("strong"),fPo=o("bart"),gPo=o(" \u2014 "),dX=a("a"),hPo=o("BartForConditionalGeneration"),uPo=o(" (BART model)"),pPo=l(),n2=a("li"),Hpe=a("strong"),_Po=o("bert"),bPo=o(" \u2014 "),cX=a("a"),vPo=o("BertForPreTraining"),FPo=o(" (BERT model)"),TPo=l(),s2=a("li"),Jpe=a("strong"),MPo=o("big_bird"),EPo=o(" \u2014 "),mX=a("a"),CPo=o("BigBirdForPreTraining"),wPo=o(" (BigBird model)"),APo=l(),l2=a("li"),Ype=a("strong"),LPo=o("bloom"),yPo=o(" \u2014 "),fX=a("a"),xPo=o("BloomForCausalLM"),$Po=o(" (BLOOM model)"),kPo=l(),i2=a("li"),Kpe=a("strong"),SPo=o("camembert"),RPo=o(" \u2014 "),gX=a("a"),PPo=o("CamembertForMaskedLM"),BPo=o(" (CamemBERT model)"),IPo=l(),d2=a("li"),Zpe=a("strong"),NPo=o("ctrl"),qPo=o(" \u2014 "),hX=a("a"),jPo=o("CTRLLMHeadModel"),DPo=o(" (CTRL model)"),GPo=l(),c2=a("li"),e_e=a("strong"),OPo=o("data2vec-text"),VPo=o(" \u2014 "),uX=a("a"),XPo=o("Data2VecTextForMaskedLM"),zPo=o(" (Data2VecText model)"),QPo=l(),m2=a("li"),o_e=a("strong"),WPo=o("deberta"),UPo=o(" \u2014 "),pX=a("a"),HPo=o("DebertaForMaskedLM"),JPo=o(" (DeBERTa model)"),YPo=l(),f2=a("li"),r_e=a("strong"),KPo=o("deberta-v2"),ZPo=o(" \u2014 "),_X=a("a"),eBo=o("DebertaV2ForMaskedLM"),oBo=o(" (DeBERTa-v2 model)"),rBo=l(),g2=a("li"),t_e=a("strong"),tBo=o("distilbert"),aBo=o(" \u2014 "),bX=a("a"),nBo=o("DistilBertForMaskedLM"),sBo=o(" (DistilBERT model)"),lBo=l(),h2=a("li"),a_e=a("strong"),iBo=o("electra"),dBo=o(" \u2014 "),vX=a("a"),cBo=o("ElectraForPreTraining"),mBo=o(" (ELECTRA model)"),fBo=l(),u2=a("li"),n_e=a("strong"),gBo=o("flaubert"),hBo=o(" \u2014 "),FX=a("a"),uBo=o("FlaubertWithLMHeadModel"),pBo=o(" (FlauBERT model)"),_Bo=l(),p2=a("li"),s_e=a("strong"),bBo=o("flava"),vBo=o(" \u2014 "),TX=a("a"),FBo=o("FlavaForPreTraining"),TBo=o(" (FLAVA model)"),MBo=l(),_2=a("li"),l_e=a("strong"),EBo=o("fnet"),CBo=o(" \u2014 "),MX=a("a"),wBo=o("FNetForPreTraining"),ABo=o(" (FNet model)"),LBo=l(),b2=a("li"),i_e=a("strong"),yBo=o("fsmt"),xBo=o(" \u2014 "),EX=a("a"),$Bo=o("FSMTForConditionalGeneration"),kBo=o(" (FairSeq Machine-Translation model)"),SBo=l(),v2=a("li"),d_e=a("strong"),RBo=o("funnel"),PBo=o(" \u2014 "),CX=a("a"),BBo=o("FunnelForPreTraining"),IBo=o(" (Funnel Transformer model)"),NBo=l(),F2=a("li"),c_e=a("strong"),qBo=o("gpt2"),jBo=o(" \u2014 "),wX=a("a"),DBo=o("GPT2LMHeadModel"),GBo=o(" (OpenAI GPT-2 model)"),OBo=l(),T2=a("li"),m_e=a("strong"),VBo=o("ibert"),XBo=o(" \u2014 "),AX=a("a"),zBo=o("IBertForMaskedLM"),QBo=o(" (I-BERT model)"),WBo=l(),M2=a("li"),f_e=a("strong"),UBo=o("layoutlm"),HBo=o(" \u2014 "),LX=a("a"),JBo=o("LayoutLMForMaskedLM"),YBo=o(" (LayoutLM model)"),KBo=l(),E2=a("li"),g_e=a("strong"),ZBo=o("longformer"),eIo=o(" \u2014 "),yX=a("a"),oIo=o("LongformerForMaskedLM"),rIo=o(" (Longformer model)"),tIo=l(),C2=a("li"),h_e=a("strong"),aIo=o("luke"),nIo=o(" \u2014 "),xX=a("a"),sIo=o("LukeForMaskedLM"),lIo=o(" (LUKE model)"),iIo=l(),w2=a("li"),u_e=a("strong"),dIo=o("lxmert"),cIo=o(" \u2014 "),$X=a("a"),mIo=o("LxmertForPreTraining"),fIo=o(" (LXMERT model)"),gIo=l(),A2=a("li"),p_e=a("strong"),hIo=o("megatron-bert"),uIo=o(" \u2014 "),kX=a("a"),pIo=o("MegatronBertForPreTraining"),_Io=o(" (Megatron-BERT model)"),bIo=l(),L2=a("li"),__e=a("strong"),vIo=o("mobilebert"),FIo=o(" \u2014 "),SX=a("a"),TIo=o("MobileBertForPreTraining"),MIo=o(" (MobileBERT model)"),EIo=l(),y2=a("li"),b_e=a("strong"),CIo=o("mpnet"),wIo=o(" \u2014 "),RX=a("a"),AIo=o("MPNetForMaskedLM"),LIo=o(" (MPNet model)"),yIo=l(),x2=a("li"),v_e=a("strong"),xIo=o("mvp"),$Io=o(" \u2014 "),PX=a("a"),kIo=o("MvpForConditionalGeneration"),SIo=o(" (MVP model)"),RIo=l(),$2=a("li"),F_e=a("strong"),PIo=o("nezha"),BIo=o(" \u2014 "),BX=a("a"),IIo=o("NezhaForPreTraining"),NIo=o(" (Nezha model)"),qIo=l(),k2=a("li"),T_e=a("strong"),jIo=o("openai-gpt"),DIo=o(" \u2014 "),IX=a("a"),GIo=o("OpenAIGPTLMHeadModel"),OIo=o(" (OpenAI GPT model)"),VIo=l(),S2=a("li"),M_e=a("strong"),XIo=o("retribert"),zIo=o(" \u2014 "),NX=a("a"),QIo=o("RetriBertModel"),WIo=o(" (RetriBERT model)"),UIo=l(),R2=a("li"),E_e=a("strong"),HIo=o("roberta"),JIo=o(" \u2014 "),qX=a("a"),YIo=o("RobertaForMaskedLM"),KIo=o(" (RoBERTa model)"),ZIo=l(),P2=a("li"),C_e=a("strong"),eNo=o("splinter"),oNo=o(" \u2014 "),jX=a("a"),rNo=o("SplinterForPreTraining"),tNo=o(" (Splinter model)"),aNo=l(),B2=a("li"),w_e=a("strong"),nNo=o("squeezebert"),sNo=o(" \u2014 "),DX=a("a"),lNo=o("SqueezeBertForMaskedLM"),iNo=o(" (SqueezeBERT model)"),dNo=l(),I2=a("li"),A_e=a("strong"),cNo=o("t5"),mNo=o(" \u2014 "),GX=a("a"),fNo=o("T5ForConditionalGeneration"),gNo=o(" (T5 model)"),hNo=l(),N2=a("li"),L_e=a("strong"),uNo=o("tapas"),pNo=o(" \u2014 "),OX=a("a"),_No=o("TapasForMaskedLM"),bNo=o(" (TAPAS model)"),vNo=l(),q2=a("li"),y_e=a("strong"),FNo=o("transfo-xl"),TNo=o(" \u2014 "),VX=a("a"),MNo=o("TransfoXLLMHeadModel"),ENo=o(" (Transformer-XL model)"),CNo=l(),j2=a("li"),x_e=a("strong"),wNo=o("unispeech"),ANo=o(" \u2014 "),XX=a("a"),LNo=o("UniSpeechForPreTraining"),yNo=o(" (UniSpeech model)"),xNo=l(),D2=a("li"),$_e=a("strong"),$No=o("unispeech-sat"),kNo=o(" \u2014 "),zX=a("a"),SNo=o("UniSpeechSatForPreTraining"),RNo=o(" (UniSpeechSat model)"),PNo=l(),G2=a("li"),k_e=a("strong"),BNo=o("videomae"),INo=o(" \u2014 "),QX=a("a"),NNo=o("VideoMAEForPreTraining"),qNo=o(" (VideoMAE model)"),jNo=l(),O2=a("li"),S_e=a("strong"),DNo=o("visual_bert"),GNo=o(" \u2014 "),WX=a("a"),ONo=o("VisualBertForPreTraining"),VNo=o(" (VisualBERT model)"),XNo=l(),V2=a("li"),R_e=a("strong"),zNo=o("vit_mae"),QNo=o(" \u2014 "),UX=a("a"),WNo=o("ViTMAEForPreTraining"),UNo=o(" (ViTMAE model)"),HNo=l(),X2=a("li"),P_e=a("strong"),JNo=o("wav2vec2"),YNo=o(" \u2014 "),HX=a("a"),KNo=o("Wav2Vec2ForPreTraining"),ZNo=o(" (Wav2Vec2 model)"),eqo=l(),z2=a("li"),B_e=a("strong"),oqo=o("wav2vec2-conformer"),rqo=o(" \u2014 "),JX=a("a"),tqo=o("Wav2Vec2ConformerForPreTraining"),aqo=o(" (Wav2Vec2-Conformer model)"),nqo=l(),Q2=a("li"),I_e=a("strong"),sqo=o("xlm"),lqo=o(" \u2014 "),YX=a("a"),iqo=o("XLMWithLMHeadModel"),dqo=o(" (XLM model)"),cqo=l(),W2=a("li"),N_e=a("strong"),mqo=o("xlm-roberta"),fqo=o(" \u2014 "),KX=a("a"),gqo=o("XLMRobertaForMaskedLM"),hqo=o(" (XLM-RoBERTa model)"),uqo=l(),U2=a("li"),q_e=a("strong"),pqo=o("xlm-roberta-xl"),_qo=o(" \u2014 "),ZX=a("a"),bqo=o("XLMRobertaXLForMaskedLM"),vqo=o(" (XLM-RoBERTa-XL model)"),Fqo=l(),H2=a("li"),j_e=a("strong"),Tqo=o("xlnet"),Mqo=o(" \u2014 "),ez=a("a"),Eqo=o("XLNetLMHeadModel"),Cqo=o(" (XLNet model)"),wqo=l(),J2=a("p"),Aqo=o("The model is set in evaluation mode by default using "),D_e=a("code"),Lqo=o("model.eval()"),yqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=a("code"),xqo=o("model.train()"),$qo=l(),F(Y2.$$.fragment),tYe=l(),Td=a("h2"),K2=a("a"),O_e=a("span"),F(U9.$$.fragment),kqo=l(),V_e=a("span"),Sqo=o("AutoModelForCausalLM"),aYe=l(),Bo=a("div"),F(H9.$$.fragment),Rqo=l(),Md=a("p"),Pqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oz=a("a"),Bqo=o("from_pretrained()"),Iqo=o(" class method or the "),rz=a("a"),Nqo=o("from_config()"),qqo=o(` class
method.`),jqo=l(),J9=a("p"),Dqo=o("This class cannot be instantiated directly using "),X_e=a("code"),Gqo=o("__init__()"),Oqo=o(" (throws an error)."),Vqo=l(),bt=a("div"),F(Y9.$$.fragment),Xqo=l(),z_e=a("p"),zqo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qqo=l(),Ed=a("p"),Wqo=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Uqo=o("not"),Hqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),Jqo=o("from_pretrained()"),Yqo=o(" to load the model weights."),Kqo=l(),F(Z2.$$.fragment),Zqo=l(),eo=a("div"),F(K9.$$.fragment),ejo=l(),W_e=a("p"),ojo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rjo=l(),Ka=a("p"),tjo=o("The model class to instantiate is selected based on the "),U_e=a("code"),ajo=o("model_type"),njo=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),sjo=o("pretrained_model_name_or_path"),ljo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),ijo=o("pretrained_model_name_or_path"),djo=o(":"),cjo=l(),z=a("ul"),ev=a("li"),Y_e=a("strong"),mjo=o("bart"),fjo=o(" \u2014 "),az=a("a"),gjo=o("BartForCausalLM"),hjo=o(" (BART model)"),ujo=l(),ov=a("li"),K_e=a("strong"),pjo=o("bert"),_jo=o(" \u2014 "),nz=a("a"),bjo=o("BertLMHeadModel"),vjo=o(" (BERT model)"),Fjo=l(),rv=a("li"),Z_e=a("strong"),Tjo=o("bert-generation"),Mjo=o(" \u2014 "),sz=a("a"),Ejo=o("BertGenerationDecoder"),Cjo=o(" (Bert Generation model)"),wjo=l(),tv=a("li"),ebe=a("strong"),Ajo=o("big_bird"),Ljo=o(" \u2014 "),lz=a("a"),yjo=o("BigBirdForCausalLM"),xjo=o(" (BigBird model)"),$jo=l(),av=a("li"),obe=a("strong"),kjo=o("bigbird_pegasus"),Sjo=o(" \u2014 "),iz=a("a"),Rjo=o("BigBirdPegasusForCausalLM"),Pjo=o(" (BigBird-Pegasus model)"),Bjo=l(),nv=a("li"),rbe=a("strong"),Ijo=o("blenderbot"),Njo=o(" \u2014 "),dz=a("a"),qjo=o("BlenderbotForCausalLM"),jjo=o(" (Blenderbot model)"),Djo=l(),sv=a("li"),tbe=a("strong"),Gjo=o("blenderbot-small"),Ojo=o(" \u2014 "),cz=a("a"),Vjo=o("BlenderbotSmallForCausalLM"),Xjo=o(" (BlenderbotSmall model)"),zjo=l(),lv=a("li"),abe=a("strong"),Qjo=o("bloom"),Wjo=o(" \u2014 "),mz=a("a"),Ujo=o("BloomForCausalLM"),Hjo=o(" (BLOOM model)"),Jjo=l(),iv=a("li"),nbe=a("strong"),Yjo=o("camembert"),Kjo=o(" \u2014 "),fz=a("a"),Zjo=o("CamembertForCausalLM"),eDo=o(" (CamemBERT model)"),oDo=l(),dv=a("li"),sbe=a("strong"),rDo=o("codegen"),tDo=o(" \u2014 "),gz=a("a"),aDo=o("CodeGenForCausalLM"),nDo=o(" (CodeGen model)"),sDo=l(),cv=a("li"),lbe=a("strong"),lDo=o("ctrl"),iDo=o(" \u2014 "),hz=a("a"),dDo=o("CTRLLMHeadModel"),cDo=o(" (CTRL model)"),mDo=l(),mv=a("li"),ibe=a("strong"),fDo=o("data2vec-text"),gDo=o(" \u2014 "),uz=a("a"),hDo=o("Data2VecTextForCausalLM"),uDo=o(" (Data2VecText model)"),pDo=l(),fv=a("li"),dbe=a("strong"),_Do=o("electra"),bDo=o(" \u2014 "),pz=a("a"),vDo=o("ElectraForCausalLM"),FDo=o(" (ELECTRA model)"),TDo=l(),gv=a("li"),cbe=a("strong"),MDo=o("gpt2"),EDo=o(" \u2014 "),_z=a("a"),CDo=o("GPT2LMHeadModel"),wDo=o(" (OpenAI GPT-2 model)"),ADo=l(),hv=a("li"),mbe=a("strong"),LDo=o("gpt_neo"),yDo=o(" \u2014 "),bz=a("a"),xDo=o("GPTNeoForCausalLM"),$Do=o(" (GPT Neo model)"),kDo=l(),uv=a("li"),fbe=a("strong"),SDo=o("gpt_neox"),RDo=o(" \u2014 "),vz=a("a"),PDo=o("GPTNeoXForCausalLM"),BDo=o(" (GPT NeoX model)"),IDo=l(),pv=a("li"),gbe=a("strong"),NDo=o("gptj"),qDo=o(" \u2014 "),Fz=a("a"),jDo=o("GPTJForCausalLM"),DDo=o(" (GPT-J model)"),GDo=l(),_v=a("li"),hbe=a("strong"),ODo=o("marian"),VDo=o(" \u2014 "),Tz=a("a"),XDo=o("MarianForCausalLM"),zDo=o(" (Marian model)"),QDo=l(),bv=a("li"),ube=a("strong"),WDo=o("mbart"),UDo=o(" \u2014 "),Mz=a("a"),HDo=o("MBartForCausalLM"),JDo=o(" (mBART model)"),YDo=l(),vv=a("li"),pbe=a("strong"),KDo=o("megatron-bert"),ZDo=o(" \u2014 "),Ez=a("a"),eGo=o("MegatronBertForCausalLM"),oGo=o(" (Megatron-BERT model)"),rGo=l(),Fv=a("li"),_be=a("strong"),tGo=o("mvp"),aGo=o(" \u2014 "),Cz=a("a"),nGo=o("MvpForCausalLM"),sGo=o(" (MVP model)"),lGo=l(),Tv=a("li"),bbe=a("strong"),iGo=o("openai-gpt"),dGo=o(" \u2014 "),wz=a("a"),cGo=o("OpenAIGPTLMHeadModel"),mGo=o(" (OpenAI GPT model)"),fGo=l(),Mv=a("li"),vbe=a("strong"),gGo=o("opt"),hGo=o(" \u2014 "),Az=a("a"),uGo=o("OPTForCausalLM"),pGo=o(" (OPT model)"),_Go=l(),Ev=a("li"),Fbe=a("strong"),bGo=o("pegasus"),vGo=o(" \u2014 "),Lz=a("a"),FGo=o("PegasusForCausalLM"),TGo=o(" (Pegasus model)"),MGo=l(),Cv=a("li"),Tbe=a("strong"),EGo=o("plbart"),CGo=o(" \u2014 "),yz=a("a"),wGo=o("PLBartForCausalLM"),AGo=o(" (PLBart model)"),LGo=l(),wv=a("li"),Mbe=a("strong"),yGo=o("prophetnet"),xGo=o(" \u2014 "),xz=a("a"),$Go=o("ProphetNetForCausalLM"),kGo=o(" (ProphetNet model)"),SGo=l(),Av=a("li"),Ebe=a("strong"),RGo=o("qdqbert"),PGo=o(" \u2014 "),$z=a("a"),BGo=o("QDQBertLMHeadModel"),IGo=o(" (QDQBert model)"),NGo=l(),Lv=a("li"),Cbe=a("strong"),qGo=o("reformer"),jGo=o(" \u2014 "),kz=a("a"),DGo=o("ReformerModelWithLMHead"),GGo=o(" (Reformer model)"),OGo=l(),yv=a("li"),wbe=a("strong"),VGo=o("rembert"),XGo=o(" \u2014 "),Sz=a("a"),zGo=o("RemBertForCausalLM"),QGo=o(" (RemBERT model)"),WGo=l(),xv=a("li"),Abe=a("strong"),UGo=o("roberta"),HGo=o(" \u2014 "),Rz=a("a"),JGo=o("RobertaForCausalLM"),YGo=o(" (RoBERTa model)"),KGo=l(),$v=a("li"),Lbe=a("strong"),ZGo=o("roformer"),eOo=o(" \u2014 "),Pz=a("a"),oOo=o("RoFormerForCausalLM"),rOo=o(" (RoFormer model)"),tOo=l(),kv=a("li"),ybe=a("strong"),aOo=o("speech_to_text_2"),nOo=o(" \u2014 "),Bz=a("a"),sOo=o("Speech2Text2ForCausalLM"),lOo=o(" (Speech2Text2 model)"),iOo=l(),Sv=a("li"),xbe=a("strong"),dOo=o("transfo-xl"),cOo=o(" \u2014 "),Iz=a("a"),mOo=o("TransfoXLLMHeadModel"),fOo=o(" (Transformer-XL model)"),gOo=l(),Rv=a("li"),$be=a("strong"),hOo=o("trocr"),uOo=o(" \u2014 "),Nz=a("a"),pOo=o("TrOCRForCausalLM"),_Oo=o(" (TrOCR model)"),bOo=l(),Pv=a("li"),kbe=a("strong"),vOo=o("xglm"),FOo=o(" \u2014 "),qz=a("a"),TOo=o("XGLMForCausalLM"),MOo=o(" (XGLM model)"),EOo=l(),Bv=a("li"),Sbe=a("strong"),COo=o("xlm"),wOo=o(" \u2014 "),jz=a("a"),AOo=o("XLMWithLMHeadModel"),LOo=o(" (XLM model)"),yOo=l(),Iv=a("li"),Rbe=a("strong"),xOo=o("xlm-prophetnet"),$Oo=o(" \u2014 "),Dz=a("a"),kOo=o("XLMProphetNetForCausalLM"),SOo=o(" (XLM-ProphetNet model)"),ROo=l(),Nv=a("li"),Pbe=a("strong"),POo=o("xlm-roberta"),BOo=o(" \u2014 "),Gz=a("a"),IOo=o("XLMRobertaForCausalLM"),NOo=o(" (XLM-RoBERTa model)"),qOo=l(),qv=a("li"),Bbe=a("strong"),jOo=o("xlm-roberta-xl"),DOo=o(" \u2014 "),Oz=a("a"),GOo=o("XLMRobertaXLForCausalLM"),OOo=o(" (XLM-RoBERTa-XL model)"),VOo=l(),jv=a("li"),Ibe=a("strong"),XOo=o("xlnet"),zOo=o(" \u2014 "),Vz=a("a"),QOo=o("XLNetLMHeadModel"),WOo=o(" (XLNet model)"),UOo=l(),Dv=a("p"),HOo=o("The model is set in evaluation mode by default using "),Nbe=a("code"),JOo=o("model.eval()"),YOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=a("code"),KOo=o("model.train()"),ZOo=l(),F(Gv.$$.fragment),nYe=l(),Cd=a("h2"),Ov=a("a"),jbe=a("span"),F(Z9.$$.fragment),eVo=l(),Dbe=a("span"),oVo=o("AutoModelForMaskedLM"),sYe=l(),Io=a("div"),F(ex.$$.fragment),rVo=l(),wd=a("p"),tVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Xz=a("a"),aVo=o("from_pretrained()"),nVo=o(" class method or the "),zz=a("a"),sVo=o("from_config()"),lVo=o(` class
method.`),iVo=l(),ox=a("p"),dVo=o("This class cannot be instantiated directly using "),Gbe=a("code"),cVo=o("__init__()"),mVo=o(" (throws an error)."),fVo=l(),vt=a("div"),F(rx.$$.fragment),gVo=l(),Obe=a("p"),hVo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uVo=l(),Ad=a("p"),pVo=o(`Note:
Loading a model from its configuration file does `),Vbe=a("strong"),_Vo=o("not"),bVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),vVo=o("from_pretrained()"),FVo=o(" to load the model weights."),TVo=l(),F(Vv.$$.fragment),MVo=l(),oo=a("div"),F(tx.$$.fragment),EVo=l(),Xbe=a("p"),CVo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wVo=l(),Za=a("p"),AVo=o("The model class to instantiate is selected based on the "),zbe=a("code"),LVo=o("model_type"),yVo=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),xVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),kVo=o("pretrained_model_name_or_path"),SVo=o(":"),RVo=l(),U=a("ul"),Xv=a("li"),Ube=a("strong"),PVo=o("albert"),BVo=o(" \u2014 "),Wz=a("a"),IVo=o("AlbertForMaskedLM"),NVo=o(" (ALBERT model)"),qVo=l(),zv=a("li"),Hbe=a("strong"),jVo=o("bart"),DVo=o(" \u2014 "),Uz=a("a"),GVo=o("BartForConditionalGeneration"),OVo=o(" (BART model)"),VVo=l(),Qv=a("li"),Jbe=a("strong"),XVo=o("bert"),zVo=o(" \u2014 "),Hz=a("a"),QVo=o("BertForMaskedLM"),WVo=o(" (BERT model)"),UVo=l(),Wv=a("li"),Ybe=a("strong"),HVo=o("big_bird"),JVo=o(" \u2014 "),Jz=a("a"),YVo=o("BigBirdForMaskedLM"),KVo=o(" (BigBird model)"),ZVo=l(),Uv=a("li"),Kbe=a("strong"),eXo=o("camembert"),oXo=o(" \u2014 "),Yz=a("a"),rXo=o("CamembertForMaskedLM"),tXo=o(" (CamemBERT model)"),aXo=l(),Hv=a("li"),Zbe=a("strong"),nXo=o("convbert"),sXo=o(" \u2014 "),Kz=a("a"),lXo=o("ConvBertForMaskedLM"),iXo=o(" (ConvBERT model)"),dXo=l(),Jv=a("li"),e2e=a("strong"),cXo=o("data2vec-text"),mXo=o(" \u2014 "),Zz=a("a"),fXo=o("Data2VecTextForMaskedLM"),gXo=o(" (Data2VecText model)"),hXo=l(),Yv=a("li"),o2e=a("strong"),uXo=o("deberta"),pXo=o(" \u2014 "),eQ=a("a"),_Xo=o("DebertaForMaskedLM"),bXo=o(" (DeBERTa model)"),vXo=l(),Kv=a("li"),r2e=a("strong"),FXo=o("deberta-v2"),TXo=o(" \u2014 "),oQ=a("a"),MXo=o("DebertaV2ForMaskedLM"),EXo=o(" (DeBERTa-v2 model)"),CXo=l(),Zv=a("li"),t2e=a("strong"),wXo=o("distilbert"),AXo=o(" \u2014 "),rQ=a("a"),LXo=o("DistilBertForMaskedLM"),yXo=o(" (DistilBERT model)"),xXo=l(),e1=a("li"),a2e=a("strong"),$Xo=o("electra"),kXo=o(" \u2014 "),tQ=a("a"),SXo=o("ElectraForMaskedLM"),RXo=o(" (ELECTRA model)"),PXo=l(),o1=a("li"),n2e=a("strong"),BXo=o("flaubert"),IXo=o(" \u2014 "),aQ=a("a"),NXo=o("FlaubertWithLMHeadModel"),qXo=o(" (FlauBERT model)"),jXo=l(),r1=a("li"),s2e=a("strong"),DXo=o("fnet"),GXo=o(" \u2014 "),nQ=a("a"),OXo=o("FNetForMaskedLM"),VXo=o(" (FNet model)"),XXo=l(),t1=a("li"),l2e=a("strong"),zXo=o("funnel"),QXo=o(" \u2014 "),sQ=a("a"),WXo=o("FunnelForMaskedLM"),UXo=o(" (Funnel Transformer model)"),HXo=l(),a1=a("li"),i2e=a("strong"),JXo=o("ibert"),YXo=o(" \u2014 "),lQ=a("a"),KXo=o("IBertForMaskedLM"),ZXo=o(" (I-BERT model)"),ezo=l(),n1=a("li"),d2e=a("strong"),ozo=o("layoutlm"),rzo=o(" \u2014 "),iQ=a("a"),tzo=o("LayoutLMForMaskedLM"),azo=o(" (LayoutLM model)"),nzo=l(),s1=a("li"),c2e=a("strong"),szo=o("longformer"),lzo=o(" \u2014 "),dQ=a("a"),izo=o("LongformerForMaskedLM"),dzo=o(" (Longformer model)"),czo=l(),l1=a("li"),m2e=a("strong"),mzo=o("luke"),fzo=o(" \u2014 "),cQ=a("a"),gzo=o("LukeForMaskedLM"),hzo=o(" (LUKE model)"),uzo=l(),i1=a("li"),f2e=a("strong"),pzo=o("mbart"),_zo=o(" \u2014 "),mQ=a("a"),bzo=o("MBartForConditionalGeneration"),vzo=o(" (mBART model)"),Fzo=l(),d1=a("li"),g2e=a("strong"),Tzo=o("megatron-bert"),Mzo=o(" \u2014 "),fQ=a("a"),Ezo=o("MegatronBertForMaskedLM"),Czo=o(" (Megatron-BERT model)"),wzo=l(),c1=a("li"),h2e=a("strong"),Azo=o("mobilebert"),Lzo=o(" \u2014 "),gQ=a("a"),yzo=o("MobileBertForMaskedLM"),xzo=o(" (MobileBERT model)"),$zo=l(),m1=a("li"),u2e=a("strong"),kzo=o("mpnet"),Szo=o(" \u2014 "),hQ=a("a"),Rzo=o("MPNetForMaskedLM"),Pzo=o(" (MPNet model)"),Bzo=l(),f1=a("li"),p2e=a("strong"),Izo=o("mvp"),Nzo=o(" \u2014 "),uQ=a("a"),qzo=o("MvpForConditionalGeneration"),jzo=o(" (MVP model)"),Dzo=l(),g1=a("li"),_2e=a("strong"),Gzo=o("nezha"),Ozo=o(" \u2014 "),pQ=a("a"),Vzo=o("NezhaForMaskedLM"),Xzo=o(" (Nezha model)"),zzo=l(),h1=a("li"),b2e=a("strong"),Qzo=o("nystromformer"),Wzo=o(" \u2014 "),_Q=a("a"),Uzo=o("NystromformerForMaskedLM"),Hzo=o(" (Nystr\xF6mformer model)"),Jzo=l(),u1=a("li"),v2e=a("strong"),Yzo=o("perceiver"),Kzo=o(" \u2014 "),bQ=a("a"),Zzo=o("PerceiverForMaskedLM"),eQo=o(" (Perceiver model)"),oQo=l(),p1=a("li"),F2e=a("strong"),rQo=o("qdqbert"),tQo=o(" \u2014 "),vQ=a("a"),aQo=o("QDQBertForMaskedLM"),nQo=o(" (QDQBert model)"),sQo=l(),_1=a("li"),T2e=a("strong"),lQo=o("reformer"),iQo=o(" \u2014 "),FQ=a("a"),dQo=o("ReformerForMaskedLM"),cQo=o(" (Reformer model)"),mQo=l(),b1=a("li"),M2e=a("strong"),fQo=o("rembert"),gQo=o(" \u2014 "),TQ=a("a"),hQo=o("RemBertForMaskedLM"),uQo=o(" (RemBERT model)"),pQo=l(),v1=a("li"),E2e=a("strong"),_Qo=o("roberta"),bQo=o(" \u2014 "),MQ=a("a"),vQo=o("RobertaForMaskedLM"),FQo=o(" (RoBERTa model)"),TQo=l(),F1=a("li"),C2e=a("strong"),MQo=o("roformer"),EQo=o(" \u2014 "),EQ=a("a"),CQo=o("RoFormerForMaskedLM"),wQo=o(" (RoFormer model)"),AQo=l(),T1=a("li"),w2e=a("strong"),LQo=o("squeezebert"),yQo=o(" \u2014 "),CQ=a("a"),xQo=o("SqueezeBertForMaskedLM"),$Qo=o(" (SqueezeBERT model)"),kQo=l(),M1=a("li"),A2e=a("strong"),SQo=o("tapas"),RQo=o(" \u2014 "),wQ=a("a"),PQo=o("TapasForMaskedLM"),BQo=o(" (TAPAS model)"),IQo=l(),E1=a("li"),L2e=a("strong"),NQo=o("wav2vec2"),qQo=o(" \u2014 "),y2e=a("code"),jQo=o("Wav2Vec2ForMaskedLM"),DQo=o(" (Wav2Vec2 model)"),GQo=l(),C1=a("li"),x2e=a("strong"),OQo=o("xlm"),VQo=o(" \u2014 "),AQ=a("a"),XQo=o("XLMWithLMHeadModel"),zQo=o(" (XLM model)"),QQo=l(),w1=a("li"),$2e=a("strong"),WQo=o("xlm-roberta"),UQo=o(" \u2014 "),LQ=a("a"),HQo=o("XLMRobertaForMaskedLM"),JQo=o(" (XLM-RoBERTa model)"),YQo=l(),A1=a("li"),k2e=a("strong"),KQo=o("xlm-roberta-xl"),ZQo=o(" \u2014 "),yQ=a("a"),eWo=o("XLMRobertaXLForMaskedLM"),oWo=o(" (XLM-RoBERTa-XL model)"),rWo=l(),L1=a("li"),S2e=a("strong"),tWo=o("yoso"),aWo=o(" \u2014 "),xQ=a("a"),nWo=o("YosoForMaskedLM"),sWo=o(" (YOSO model)"),lWo=l(),y1=a("p"),iWo=o("The model is set in evaluation mode by default using "),R2e=a("code"),dWo=o("model.eval()"),cWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),mWo=o("model.train()"),fWo=l(),F(x1.$$.fragment),lYe=l(),Ld=a("h2"),$1=a("a"),B2e=a("span"),F(ax.$$.fragment),gWo=l(),I2e=a("span"),hWo=o("AutoModelForSeq2SeqLM"),iYe=l(),No=a("div"),F(nx.$$.fragment),uWo=l(),yd=a("p"),pWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=a("a"),_Wo=o("from_pretrained()"),bWo=o(" class method or the "),kQ=a("a"),vWo=o("from_config()"),FWo=o(` class
method.`),TWo=l(),sx=a("p"),MWo=o("This class cannot be instantiated directly using "),N2e=a("code"),EWo=o("__init__()"),CWo=o(" (throws an error)."),wWo=l(),Ft=a("div"),F(lx.$$.fragment),AWo=l(),q2e=a("p"),LWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yWo=l(),xd=a("p"),xWo=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),$Wo=o("not"),kWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),SWo=o("from_pretrained()"),RWo=o(" to load the model weights."),PWo=l(),F(k1.$$.fragment),BWo=l(),ro=a("div"),F(ix.$$.fragment),IWo=l(),D2e=a("p"),NWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qWo=l(),en=a("p"),jWo=o("The model class to instantiate is selected based on the "),G2e=a("code"),DWo=o("model_type"),GWo=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),XWo=o("pretrained_model_name_or_path"),zWo=o(":"),QWo=l(),me=a("ul"),S1=a("li"),X2e=a("strong"),WWo=o("bart"),UWo=o(" \u2014 "),RQ=a("a"),HWo=o("BartForConditionalGeneration"),JWo=o(" (BART model)"),YWo=l(),R1=a("li"),z2e=a("strong"),KWo=o("bigbird_pegasus"),ZWo=o(" \u2014 "),PQ=a("a"),eUo=o("BigBirdPegasusForConditionalGeneration"),oUo=o(" (BigBird-Pegasus model)"),rUo=l(),P1=a("li"),Q2e=a("strong"),tUo=o("blenderbot"),aUo=o(" \u2014 "),BQ=a("a"),nUo=o("BlenderbotForConditionalGeneration"),sUo=o(" (Blenderbot model)"),lUo=l(),B1=a("li"),W2e=a("strong"),iUo=o("blenderbot-small"),dUo=o(" \u2014 "),IQ=a("a"),cUo=o("BlenderbotSmallForConditionalGeneration"),mUo=o(" (BlenderbotSmall model)"),fUo=l(),I1=a("li"),U2e=a("strong"),gUo=o("encoder-decoder"),hUo=o(" \u2014 "),NQ=a("a"),uUo=o("EncoderDecoderModel"),pUo=o(" (Encoder decoder model)"),_Uo=l(),N1=a("li"),H2e=a("strong"),bUo=o("fsmt"),vUo=o(" \u2014 "),qQ=a("a"),FUo=o("FSMTForConditionalGeneration"),TUo=o(" (FairSeq Machine-Translation model)"),MUo=l(),q1=a("li"),J2e=a("strong"),EUo=o("led"),CUo=o(" \u2014 "),jQ=a("a"),wUo=o("LEDForConditionalGeneration"),AUo=o(" (LED model)"),LUo=l(),j1=a("li"),Y2e=a("strong"),yUo=o("longt5"),xUo=o(" \u2014 "),DQ=a("a"),$Uo=o("LongT5ForConditionalGeneration"),kUo=o(" (LongT5 model)"),SUo=l(),D1=a("li"),K2e=a("strong"),RUo=o("m2m_100"),PUo=o(" \u2014 "),GQ=a("a"),BUo=o("M2M100ForConditionalGeneration"),IUo=o(" (M2M100 model)"),NUo=l(),G1=a("li"),Z2e=a("strong"),qUo=o("marian"),jUo=o(" \u2014 "),OQ=a("a"),DUo=o("MarianMTModel"),GUo=o(" (Marian model)"),OUo=l(),O1=a("li"),eve=a("strong"),VUo=o("mbart"),XUo=o(" \u2014 "),VQ=a("a"),zUo=o("MBartForConditionalGeneration"),QUo=o(" (mBART model)"),WUo=l(),V1=a("li"),ove=a("strong"),UUo=o("mt5"),HUo=o(" \u2014 "),XQ=a("a"),JUo=o("MT5ForConditionalGeneration"),YUo=o(" (MT5 model)"),KUo=l(),X1=a("li"),rve=a("strong"),ZUo=o("mvp"),eHo=o(" \u2014 "),zQ=a("a"),oHo=o("MvpForConditionalGeneration"),rHo=o(" (MVP model)"),tHo=l(),z1=a("li"),tve=a("strong"),aHo=o("nllb"),nHo=o(" \u2014 "),QQ=a("a"),sHo=o("M2M100ForConditionalGeneration"),lHo=o(" (NLLB model)"),iHo=l(),Q1=a("li"),ave=a("strong"),dHo=o("pegasus"),cHo=o(" \u2014 "),WQ=a("a"),mHo=o("PegasusForConditionalGeneration"),fHo=o(" (Pegasus model)"),gHo=l(),W1=a("li"),nve=a("strong"),hHo=o("pegasus_x"),uHo=o(" \u2014 "),UQ=a("a"),pHo=o("PegasusXForConditionalGeneration"),_Ho=o(" (PEGASUS-X model)"),bHo=l(),U1=a("li"),sve=a("strong"),vHo=o("plbart"),FHo=o(" \u2014 "),HQ=a("a"),THo=o("PLBartForConditionalGeneration"),MHo=o(" (PLBart model)"),EHo=l(),H1=a("li"),lve=a("strong"),CHo=o("prophetnet"),wHo=o(" \u2014 "),JQ=a("a"),AHo=o("ProphetNetForConditionalGeneration"),LHo=o(" (ProphetNet model)"),yHo=l(),J1=a("li"),ive=a("strong"),xHo=o("t5"),$Ho=o(" \u2014 "),YQ=a("a"),kHo=o("T5ForConditionalGeneration"),SHo=o(" (T5 model)"),RHo=l(),Y1=a("li"),dve=a("strong"),PHo=o("xlm-prophetnet"),BHo=o(" \u2014 "),KQ=a("a"),IHo=o("XLMProphetNetForConditionalGeneration"),NHo=o(" (XLM-ProphetNet model)"),qHo=l(),K1=a("p"),jHo=o("The model is set in evaluation mode by default using "),cve=a("code"),DHo=o("model.eval()"),GHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),OHo=o("model.train()"),VHo=l(),F(Z1.$$.fragment),dYe=l(),$d=a("h2"),eF=a("a"),fve=a("span"),F(dx.$$.fragment),XHo=l(),gve=a("span"),zHo=o("AutoModelForSequenceClassification"),cYe=l(),qo=a("div"),F(cx.$$.fragment),QHo=l(),kd=a("p"),WHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZQ=a("a"),UHo=o("from_pretrained()"),HHo=o(" class method or the "),eW=a("a"),JHo=o("from_config()"),YHo=o(` class
method.`),KHo=l(),mx=a("p"),ZHo=o("This class cannot be instantiated directly using "),hve=a("code"),eJo=o("__init__()"),oJo=o(" (throws an error)."),rJo=l(),Tt=a("div"),F(fx.$$.fragment),tJo=l(),uve=a("p"),aJo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nJo=l(),Sd=a("p"),sJo=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),lJo=o("not"),iJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),dJo=o("from_pretrained()"),cJo=o(" to load the model weights."),mJo=l(),F(oF.$$.fragment),fJo=l(),to=a("div"),F(gx.$$.fragment),gJo=l(),_ve=a("p"),hJo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uJo=l(),on=a("p"),pJo=o("The model class to instantiate is selected based on the "),bve=a("code"),_Jo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(":"),EJo=l(),j=a("ul"),rF=a("li"),Tve=a("strong"),CJo=o("albert"),wJo=o(" \u2014 "),rW=a("a"),AJo=o("AlbertForSequenceClassification"),LJo=o(" (ALBERT model)"),yJo=l(),tF=a("li"),Mve=a("strong"),xJo=o("bart"),$Jo=o(" \u2014 "),tW=a("a"),kJo=o("BartForSequenceClassification"),SJo=o(" (BART model)"),RJo=l(),aF=a("li"),Eve=a("strong"),PJo=o("bert"),BJo=o(" \u2014 "),aW=a("a"),IJo=o("BertForSequenceClassification"),NJo=o(" (BERT model)"),qJo=l(),nF=a("li"),Cve=a("strong"),jJo=o("big_bird"),DJo=o(" \u2014 "),nW=a("a"),GJo=o("BigBirdForSequenceClassification"),OJo=o(" (BigBird model)"),VJo=l(),sF=a("li"),wve=a("strong"),XJo=o("bigbird_pegasus"),zJo=o(" \u2014 "),sW=a("a"),QJo=o("BigBirdPegasusForSequenceClassification"),WJo=o(" (BigBird-Pegasus model)"),UJo=l(),lF=a("li"),Ave=a("strong"),HJo=o("bloom"),JJo=o(" \u2014 "),lW=a("a"),YJo=o("BloomForSequenceClassification"),KJo=o(" (BLOOM model)"),ZJo=l(),iF=a("li"),Lve=a("strong"),eYo=o("camembert"),oYo=o(" \u2014 "),iW=a("a"),rYo=o("CamembertForSequenceClassification"),tYo=o(" (CamemBERT model)"),aYo=l(),dF=a("li"),yve=a("strong"),nYo=o("canine"),sYo=o(" \u2014 "),dW=a("a"),lYo=o("CanineForSequenceClassification"),iYo=o(" (CANINE model)"),dYo=l(),cF=a("li"),xve=a("strong"),cYo=o("convbert"),mYo=o(" \u2014 "),cW=a("a"),fYo=o("ConvBertForSequenceClassification"),gYo=o(" (ConvBERT model)"),hYo=l(),mF=a("li"),$ve=a("strong"),uYo=o("ctrl"),pYo=o(" \u2014 "),mW=a("a"),_Yo=o("CTRLForSequenceClassification"),bYo=o(" (CTRL model)"),vYo=l(),fF=a("li"),kve=a("strong"),FYo=o("data2vec-text"),TYo=o(" \u2014 "),fW=a("a"),MYo=o("Data2VecTextForSequenceClassification"),EYo=o(" (Data2VecText model)"),CYo=l(),gF=a("li"),Sve=a("strong"),wYo=o("deberta"),AYo=o(" \u2014 "),gW=a("a"),LYo=o("DebertaForSequenceClassification"),yYo=o(" (DeBERTa model)"),xYo=l(),hF=a("li"),Rve=a("strong"),$Yo=o("deberta-v2"),kYo=o(" \u2014 "),hW=a("a"),SYo=o("DebertaV2ForSequenceClassification"),RYo=o(" (DeBERTa-v2 model)"),PYo=l(),uF=a("li"),Pve=a("strong"),BYo=o("distilbert"),IYo=o(" \u2014 "),uW=a("a"),NYo=o("DistilBertForSequenceClassification"),qYo=o(" (DistilBERT model)"),jYo=l(),pF=a("li"),Bve=a("strong"),DYo=o("electra"),GYo=o(" \u2014 "),pW=a("a"),OYo=o("ElectraForSequenceClassification"),VYo=o(" (ELECTRA model)"),XYo=l(),_F=a("li"),Ive=a("strong"),zYo=o("flaubert"),QYo=o(" \u2014 "),_W=a("a"),WYo=o("FlaubertForSequenceClassification"),UYo=o(" (FlauBERT model)"),HYo=l(),bF=a("li"),Nve=a("strong"),JYo=o("fnet"),YYo=o(" \u2014 "),bW=a("a"),KYo=o("FNetForSequenceClassification"),ZYo=o(" (FNet model)"),eKo=l(),vF=a("li"),qve=a("strong"),oKo=o("funnel"),rKo=o(" \u2014 "),vW=a("a"),tKo=o("FunnelForSequenceClassification"),aKo=o(" (Funnel Transformer model)"),nKo=l(),FF=a("li"),jve=a("strong"),sKo=o("gpt2"),lKo=o(" \u2014 "),FW=a("a"),iKo=o("GPT2ForSequenceClassification"),dKo=o(" (OpenAI GPT-2 model)"),cKo=l(),TF=a("li"),Dve=a("strong"),mKo=o("gpt_neo"),fKo=o(" \u2014 "),TW=a("a"),gKo=o("GPTNeoForSequenceClassification"),hKo=o(" (GPT Neo model)"),uKo=l(),MF=a("li"),Gve=a("strong"),pKo=o("gptj"),_Ko=o(" \u2014 "),MW=a("a"),bKo=o("GPTJForSequenceClassification"),vKo=o(" (GPT-J model)"),FKo=l(),EF=a("li"),Ove=a("strong"),TKo=o("ibert"),MKo=o(" \u2014 "),EW=a("a"),EKo=o("IBertForSequenceClassification"),CKo=o(" (I-BERT model)"),wKo=l(),CF=a("li"),Vve=a("strong"),AKo=o("layoutlm"),LKo=o(" \u2014 "),CW=a("a"),yKo=o("LayoutLMForSequenceClassification"),xKo=o(" (LayoutLM model)"),$Ko=l(),wF=a("li"),Xve=a("strong"),kKo=o("layoutlmv2"),SKo=o(" \u2014 "),wW=a("a"),RKo=o("LayoutLMv2ForSequenceClassification"),PKo=o(" (LayoutLMv2 model)"),BKo=l(),AF=a("li"),zve=a("strong"),IKo=o("layoutlmv3"),NKo=o(" \u2014 "),AW=a("a"),qKo=o("LayoutLMv3ForSequenceClassification"),jKo=o(" (LayoutLMv3 model)"),DKo=l(),LF=a("li"),Qve=a("strong"),GKo=o("led"),OKo=o(" \u2014 "),LW=a("a"),VKo=o("LEDForSequenceClassification"),XKo=o(" (LED model)"),zKo=l(),yF=a("li"),Wve=a("strong"),QKo=o("longformer"),WKo=o(" \u2014 "),yW=a("a"),UKo=o("LongformerForSequenceClassification"),HKo=o(" (Longformer model)"),JKo=l(),xF=a("li"),Uve=a("strong"),YKo=o("luke"),KKo=o(" \u2014 "),xW=a("a"),ZKo=o("LukeForSequenceClassification"),eZo=o(" (LUKE model)"),oZo=l(),$F=a("li"),Hve=a("strong"),rZo=o("mbart"),tZo=o(" \u2014 "),$W=a("a"),aZo=o("MBartForSequenceClassification"),nZo=o(" (mBART model)"),sZo=l(),kF=a("li"),Jve=a("strong"),lZo=o("megatron-bert"),iZo=o(" \u2014 "),kW=a("a"),dZo=o("MegatronBertForSequenceClassification"),cZo=o(" (Megatron-BERT model)"),mZo=l(),SF=a("li"),Yve=a("strong"),fZo=o("mobilebert"),gZo=o(" \u2014 "),SW=a("a"),hZo=o("MobileBertForSequenceClassification"),uZo=o(" (MobileBERT model)"),pZo=l(),RF=a("li"),Kve=a("strong"),_Zo=o("mpnet"),bZo=o(" \u2014 "),RW=a("a"),vZo=o("MPNetForSequenceClassification"),FZo=o(" (MPNet model)"),TZo=l(),PF=a("li"),Zve=a("strong"),MZo=o("mvp"),EZo=o(" \u2014 "),PW=a("a"),CZo=o("MvpForSequenceClassification"),wZo=o(" (MVP model)"),AZo=l(),BF=a("li"),e1e=a("strong"),LZo=o("nezha"),yZo=o(" \u2014 "),BW=a("a"),xZo=o("NezhaForSequenceClassification"),$Zo=o(" (Nezha model)"),kZo=l(),IF=a("li"),o1e=a("strong"),SZo=o("nystromformer"),RZo=o(" \u2014 "),IW=a("a"),PZo=o("NystromformerForSequenceClassification"),BZo=o(" (Nystr\xF6mformer model)"),IZo=l(),NF=a("li"),r1e=a("strong"),NZo=o("openai-gpt"),qZo=o(" \u2014 "),NW=a("a"),jZo=o("OpenAIGPTForSequenceClassification"),DZo=o(" (OpenAI GPT model)"),GZo=l(),qF=a("li"),t1e=a("strong"),OZo=o("opt"),VZo=o(" \u2014 "),qW=a("a"),XZo=o("OPTForSequenceClassification"),zZo=o(" (OPT model)"),QZo=l(),jF=a("li"),a1e=a("strong"),WZo=o("perceiver"),UZo=o(" \u2014 "),jW=a("a"),HZo=o("PerceiverForSequenceClassification"),JZo=o(" (Perceiver model)"),YZo=l(),DF=a("li"),n1e=a("strong"),KZo=o("plbart"),ZZo=o(" \u2014 "),DW=a("a"),eer=o("PLBartForSequenceClassification"),oer=o(" (PLBart model)"),rer=l(),GF=a("li"),s1e=a("strong"),ter=o("qdqbert"),aer=o(" \u2014 "),GW=a("a"),ner=o("QDQBertForSequenceClassification"),ser=o(" (QDQBert model)"),ler=l(),OF=a("li"),l1e=a("strong"),ier=o("reformer"),der=o(" \u2014 "),OW=a("a"),cer=o("ReformerForSequenceClassification"),mer=o(" (Reformer model)"),fer=l(),VF=a("li"),i1e=a("strong"),ger=o("rembert"),her=o(" \u2014 "),VW=a("a"),uer=o("RemBertForSequenceClassification"),per=o(" (RemBERT model)"),_er=l(),XF=a("li"),d1e=a("strong"),ber=o("roberta"),ver=o(" \u2014 "),XW=a("a"),Fer=o("RobertaForSequenceClassification"),Ter=o(" (RoBERTa model)"),Mer=l(),zF=a("li"),c1e=a("strong"),Eer=o("roformer"),Cer=o(" \u2014 "),zW=a("a"),wer=o("RoFormerForSequenceClassification"),Aer=o(" (RoFormer model)"),Ler=l(),QF=a("li"),m1e=a("strong"),yer=o("squeezebert"),xer=o(" \u2014 "),QW=a("a"),$er=o("SqueezeBertForSequenceClassification"),ker=o(" (SqueezeBERT model)"),Ser=l(),WF=a("li"),f1e=a("strong"),Rer=o("tapas"),Per=o(" \u2014 "),WW=a("a"),Ber=o("TapasForSequenceClassification"),Ier=o(" (TAPAS model)"),Ner=l(),UF=a("li"),g1e=a("strong"),qer=o("transfo-xl"),jer=o(" \u2014 "),UW=a("a"),Der=o("TransfoXLForSequenceClassification"),Ger=o(" (Transformer-XL model)"),Oer=l(),HF=a("li"),h1e=a("strong"),Ver=o("xlm"),Xer=o(" \u2014 "),HW=a("a"),zer=o("XLMForSequenceClassification"),Qer=o(" (XLM model)"),Wer=l(),JF=a("li"),u1e=a("strong"),Uer=o("xlm-roberta"),Her=o(" \u2014 "),JW=a("a"),Jer=o("XLMRobertaForSequenceClassification"),Yer=o(" (XLM-RoBERTa model)"),Ker=l(),YF=a("li"),p1e=a("strong"),Zer=o("xlm-roberta-xl"),eor=o(" \u2014 "),YW=a("a"),oor=o("XLMRobertaXLForSequenceClassification"),ror=o(" (XLM-RoBERTa-XL model)"),tor=l(),KF=a("li"),_1e=a("strong"),aor=o("xlnet"),nor=o(" \u2014 "),KW=a("a"),sor=o("XLNetForSequenceClassification"),lor=o(" (XLNet model)"),ior=l(),ZF=a("li"),b1e=a("strong"),dor=o("yoso"),cor=o(" \u2014 "),ZW=a("a"),mor=o("YosoForSequenceClassification"),gor=o(" (YOSO model)"),hor=l(),eT=a("p"),uor=o("The model is set in evaluation mode by default using "),v1e=a("code"),por=o("model.eval()"),_or=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=a("code"),bor=o("model.train()"),vor=l(),F(oT.$$.fragment),mYe=l(),Rd=a("h2"),rT=a("a"),T1e=a("span"),F(hx.$$.fragment),For=l(),M1e=a("span"),Tor=o("AutoModelForMultipleChoice"),fYe=l(),jo=a("div"),F(ux.$$.fragment),Mor=l(),Pd=a("p"),Eor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eU=a("a"),Cor=o("from_pretrained()"),wor=o(" class method or the "),oU=a("a"),Aor=o("from_config()"),Lor=o(` class
method.`),yor=l(),px=a("p"),xor=o("This class cannot be instantiated directly using "),E1e=a("code"),$or=o("__init__()"),kor=o(" (throws an error)."),Sor=l(),Mt=a("div"),F(_x.$$.fragment),Ror=l(),C1e=a("p"),Por=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Bor=l(),Bd=a("p"),Ior=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),Nor=o("not"),qor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),jor=o("from_pretrained()"),Dor=o(" to load the model weights."),Gor=l(),F(tT.$$.fragment),Oor=l(),ao=a("div"),F(bx.$$.fragment),Vor=l(),A1e=a("p"),Xor=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zor=l(),rn=a("p"),Qor=o("The model class to instantiate is selected based on the "),L1e=a("code"),Wor=o("model_type"),Uor=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),Hor=o("pretrained_model_name_or_path"),Jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),Yor=o("pretrained_model_name_or_path"),Kor=o(":"),Zor=l(),Z=a("ul"),aT=a("li"),$1e=a("strong"),err=o("albert"),orr=o(" \u2014 "),tU=a("a"),rrr=o("AlbertForMultipleChoice"),trr=o(" (ALBERT model)"),arr=l(),nT=a("li"),k1e=a("strong"),nrr=o("bert"),srr=o(" \u2014 "),aU=a("a"),lrr=o("BertForMultipleChoice"),irr=o(" (BERT model)"),drr=l(),sT=a("li"),S1e=a("strong"),crr=o("big_bird"),mrr=o(" \u2014 "),nU=a("a"),frr=o("BigBirdForMultipleChoice"),grr=o(" (BigBird model)"),hrr=l(),lT=a("li"),R1e=a("strong"),urr=o("camembert"),prr=o(" \u2014 "),sU=a("a"),_rr=o("CamembertForMultipleChoice"),brr=o(" (CamemBERT model)"),vrr=l(),iT=a("li"),P1e=a("strong"),Frr=o("canine"),Trr=o(" \u2014 "),lU=a("a"),Mrr=o("CanineForMultipleChoice"),Err=o(" (CANINE model)"),Crr=l(),dT=a("li"),B1e=a("strong"),wrr=o("convbert"),Arr=o(" \u2014 "),iU=a("a"),Lrr=o("ConvBertForMultipleChoice"),yrr=o(" (ConvBERT model)"),xrr=l(),cT=a("li"),I1e=a("strong"),$rr=o("data2vec-text"),krr=o(" \u2014 "),dU=a("a"),Srr=o("Data2VecTextForMultipleChoice"),Rrr=o(" (Data2VecText model)"),Prr=l(),mT=a("li"),N1e=a("strong"),Brr=o("deberta-v2"),Irr=o(" \u2014 "),cU=a("a"),Nrr=o("DebertaV2ForMultipleChoice"),qrr=o(" (DeBERTa-v2 model)"),jrr=l(),fT=a("li"),q1e=a("strong"),Drr=o("distilbert"),Grr=o(" \u2014 "),mU=a("a"),Orr=o("DistilBertForMultipleChoice"),Vrr=o(" (DistilBERT model)"),Xrr=l(),gT=a("li"),j1e=a("strong"),zrr=o("electra"),Qrr=o(" \u2014 "),fU=a("a"),Wrr=o("ElectraForMultipleChoice"),Urr=o(" (ELECTRA model)"),Hrr=l(),hT=a("li"),D1e=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),gU=a("a"),Krr=o("FlaubertForMultipleChoice"),Zrr=o(" (FlauBERT model)"),etr=l(),uT=a("li"),G1e=a("strong"),otr=o("fnet"),rtr=o(" \u2014 "),hU=a("a"),ttr=o("FNetForMultipleChoice"),atr=o(" (FNet model)"),ntr=l(),pT=a("li"),O1e=a("strong"),str=o("funnel"),ltr=o(" \u2014 "),uU=a("a"),itr=o("FunnelForMultipleChoice"),dtr=o(" (Funnel Transformer model)"),ctr=l(),_T=a("li"),V1e=a("strong"),mtr=o("ibert"),ftr=o(" \u2014 "),pU=a("a"),gtr=o("IBertForMultipleChoice"),htr=o(" (I-BERT model)"),utr=l(),bT=a("li"),X1e=a("strong"),ptr=o("longformer"),_tr=o(" \u2014 "),_U=a("a"),btr=o("LongformerForMultipleChoice"),vtr=o(" (Longformer model)"),Ftr=l(),vT=a("li"),z1e=a("strong"),Ttr=o("luke"),Mtr=o(" \u2014 "),bU=a("a"),Etr=o("LukeForMultipleChoice"),Ctr=o(" (LUKE model)"),wtr=l(),FT=a("li"),Q1e=a("strong"),Atr=o("megatron-bert"),Ltr=o(" \u2014 "),vU=a("a"),ytr=o("MegatronBertForMultipleChoice"),xtr=o(" (Megatron-BERT model)"),$tr=l(),TT=a("li"),W1e=a("strong"),ktr=o("mobilebert"),Str=o(" \u2014 "),FU=a("a"),Rtr=o("MobileBertForMultipleChoice"),Ptr=o(" (MobileBERT model)"),Btr=l(),MT=a("li"),U1e=a("strong"),Itr=o("mpnet"),Ntr=o(" \u2014 "),TU=a("a"),qtr=o("MPNetForMultipleChoice"),jtr=o(" (MPNet model)"),Dtr=l(),ET=a("li"),H1e=a("strong"),Gtr=o("nezha"),Otr=o(" \u2014 "),MU=a("a"),Vtr=o("NezhaForMultipleChoice"),Xtr=o(" (Nezha model)"),ztr=l(),CT=a("li"),J1e=a("strong"),Qtr=o("nystromformer"),Wtr=o(" \u2014 "),EU=a("a"),Utr=o("NystromformerForMultipleChoice"),Htr=o(" (Nystr\xF6mformer model)"),Jtr=l(),wT=a("li"),Y1e=a("strong"),Ytr=o("qdqbert"),Ktr=o(" \u2014 "),CU=a("a"),Ztr=o("QDQBertForMultipleChoice"),ear=o(" (QDQBert model)"),oar=l(),AT=a("li"),K1e=a("strong"),rar=o("rembert"),tar=o(" \u2014 "),wU=a("a"),aar=o("RemBertForMultipleChoice"),nar=o(" (RemBERT model)"),sar=l(),LT=a("li"),Z1e=a("strong"),lar=o("roberta"),iar=o(" \u2014 "),AU=a("a"),dar=o("RobertaForMultipleChoice"),car=o(" (RoBERTa model)"),mar=l(),yT=a("li"),eFe=a("strong"),far=o("roformer"),gar=o(" \u2014 "),LU=a("a"),har=o("RoFormerForMultipleChoice"),uar=o(" (RoFormer model)"),par=l(),xT=a("li"),oFe=a("strong"),_ar=o("squeezebert"),bar=o(" \u2014 "),yU=a("a"),Far=o("SqueezeBertForMultipleChoice"),Tar=o(" (SqueezeBERT model)"),Mar=l(),$T=a("li"),rFe=a("strong"),Ear=o("xlm"),Car=o(" \u2014 "),xU=a("a"),war=o("XLMForMultipleChoice"),Aar=o(" (XLM model)"),Lar=l(),kT=a("li"),tFe=a("strong"),yar=o("xlm-roberta"),xar=o(" \u2014 "),$U=a("a"),$ar=o("XLMRobertaForMultipleChoice"),kar=o(" (XLM-RoBERTa model)"),Sar=l(),ST=a("li"),aFe=a("strong"),Rar=o("xlm-roberta-xl"),Par=o(" \u2014 "),kU=a("a"),Bar=o("XLMRobertaXLForMultipleChoice"),Iar=o(" (XLM-RoBERTa-XL model)"),Nar=l(),RT=a("li"),nFe=a("strong"),qar=o("xlnet"),jar=o(" \u2014 "),SU=a("a"),Dar=o("XLNetForMultipleChoice"),Gar=o(" (XLNet model)"),Oar=l(),PT=a("li"),sFe=a("strong"),Var=o("yoso"),Xar=o(" \u2014 "),RU=a("a"),zar=o("YosoForMultipleChoice"),Qar=o(" (YOSO model)"),War=l(),BT=a("p"),Uar=o("The model is set in evaluation mode by default using "),lFe=a("code"),Har=o("model.eval()"),Jar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=a("code"),Yar=o("model.train()"),Kar=l(),F(IT.$$.fragment),gYe=l(),Id=a("h2"),NT=a("a"),dFe=a("span"),F(vx.$$.fragment),Zar=l(),cFe=a("span"),enr=o("AutoModelForNextSentencePrediction"),hYe=l(),Do=a("div"),F(Fx.$$.fragment),onr=l(),Nd=a("p"),rnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=a("a"),tnr=o("from_pretrained()"),anr=o(" class method or the "),BU=a("a"),nnr=o("from_config()"),snr=o(` class
method.`),lnr=l(),Tx=a("p"),inr=o("This class cannot be instantiated directly using "),mFe=a("code"),dnr=o("__init__()"),cnr=o(" (throws an error)."),mnr=l(),Et=a("div"),F(Mx.$$.fragment),fnr=l(),fFe=a("p"),gnr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hnr=l(),qd=a("p"),unr=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),pnr=o("not"),_nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),bnr=o("from_pretrained()"),vnr=o(" to load the model weights."),Fnr=l(),F(qT.$$.fragment),Tnr=l(),no=a("div"),F(Ex.$$.fragment),Mnr=l(),hFe=a("p"),Enr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Cnr=l(),tn=a("p"),wnr=o("The model class to instantiate is selected based on the "),uFe=a("code"),Anr=o("model_type"),Lnr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),ynr=o("pretrained_model_name_or_path"),xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(":"),Snr=l(),Go=a("ul"),jT=a("li"),bFe=a("strong"),Rnr=o("bert"),Pnr=o(" \u2014 "),NU=a("a"),Bnr=o("BertForNextSentencePrediction"),Inr=o(" (BERT model)"),Nnr=l(),DT=a("li"),vFe=a("strong"),qnr=o("fnet"),jnr=o(" \u2014 "),qU=a("a"),Dnr=o("FNetForNextSentencePrediction"),Gnr=o(" (FNet model)"),Onr=l(),GT=a("li"),FFe=a("strong"),Vnr=o("megatron-bert"),Xnr=o(" \u2014 "),jU=a("a"),znr=o("MegatronBertForNextSentencePrediction"),Qnr=o(" (Megatron-BERT model)"),Wnr=l(),OT=a("li"),TFe=a("strong"),Unr=o("mobilebert"),Hnr=o(" \u2014 "),DU=a("a"),Jnr=o("MobileBertForNextSentencePrediction"),Ynr=o(" (MobileBERT model)"),Knr=l(),VT=a("li"),MFe=a("strong"),Znr=o("nezha"),esr=o(" \u2014 "),GU=a("a"),osr=o("NezhaForNextSentencePrediction"),rsr=o(" (Nezha model)"),tsr=l(),XT=a("li"),EFe=a("strong"),asr=o("qdqbert"),nsr=o(" \u2014 "),OU=a("a"),ssr=o("QDQBertForNextSentencePrediction"),lsr=o(" (QDQBert model)"),isr=l(),zT=a("p"),dsr=o("The model is set in evaluation mode by default using "),CFe=a("code"),csr=o("model.eval()"),msr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=a("code"),fsr=o("model.train()"),gsr=l(),F(QT.$$.fragment),uYe=l(),jd=a("h2"),WT=a("a"),AFe=a("span"),F(Cx.$$.fragment),hsr=l(),LFe=a("span"),usr=o("AutoModelForTokenClassification"),pYe=l(),Oo=a("div"),F(wx.$$.fragment),psr=l(),Dd=a("p"),_sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=a("a"),bsr=o("from_pretrained()"),vsr=o(" class method or the "),XU=a("a"),Fsr=o("from_config()"),Tsr=o(` class
method.`),Msr=l(),Ax=a("p"),Esr=o("This class cannot be instantiated directly using "),yFe=a("code"),Csr=o("__init__()"),wsr=o(" (throws an error)."),Asr=l(),Ct=a("div"),F(Lx.$$.fragment),Lsr=l(),xFe=a("p"),ysr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xsr=l(),Gd=a("p"),$sr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),ksr=o("not"),Ssr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),Rsr=o("from_pretrained()"),Psr=o(" to load the model weights."),Bsr=l(),F(UT.$$.fragment),Isr=l(),so=a("div"),F(yx.$$.fragment),Nsr=l(),kFe=a("p"),qsr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jsr=l(),an=a("p"),Dsr=o("The model class to instantiate is selected based on the "),SFe=a("code"),Gsr=o("model_type"),Osr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),zsr=o("pretrained_model_name_or_path"),Qsr=o(":"),Wsr=l(),J=a("ul"),HT=a("li"),BFe=a("strong"),Usr=o("albert"),Hsr=o(" \u2014 "),QU=a("a"),Jsr=o("AlbertForTokenClassification"),Ysr=o(" (ALBERT model)"),Ksr=l(),JT=a("li"),IFe=a("strong"),Zsr=o("bert"),elr=o(" \u2014 "),WU=a("a"),olr=o("BertForTokenClassification"),rlr=o(" (BERT model)"),tlr=l(),YT=a("li"),NFe=a("strong"),alr=o("big_bird"),nlr=o(" \u2014 "),UU=a("a"),slr=o("BigBirdForTokenClassification"),llr=o(" (BigBird model)"),ilr=l(),KT=a("li"),qFe=a("strong"),dlr=o("bloom"),clr=o(" \u2014 "),HU=a("a"),mlr=o("BloomForTokenClassification"),flr=o(" (BLOOM model)"),glr=l(),ZT=a("li"),jFe=a("strong"),hlr=o("camembert"),ulr=o(" \u2014 "),JU=a("a"),plr=o("CamembertForTokenClassification"),_lr=o(" (CamemBERT model)"),blr=l(),eM=a("li"),DFe=a("strong"),vlr=o("canine"),Flr=o(" \u2014 "),YU=a("a"),Tlr=o("CanineForTokenClassification"),Mlr=o(" (CANINE model)"),Elr=l(),oM=a("li"),GFe=a("strong"),Clr=o("convbert"),wlr=o(" \u2014 "),KU=a("a"),Alr=o("ConvBertForTokenClassification"),Llr=o(" (ConvBERT model)"),ylr=l(),rM=a("li"),OFe=a("strong"),xlr=o("data2vec-text"),$lr=o(" \u2014 "),ZU=a("a"),klr=o("Data2VecTextForTokenClassification"),Slr=o(" (Data2VecText model)"),Rlr=l(),tM=a("li"),VFe=a("strong"),Plr=o("deberta"),Blr=o(" \u2014 "),eH=a("a"),Ilr=o("DebertaForTokenClassification"),Nlr=o(" (DeBERTa model)"),qlr=l(),aM=a("li"),XFe=a("strong"),jlr=o("deberta-v2"),Dlr=o(" \u2014 "),oH=a("a"),Glr=o("DebertaV2ForTokenClassification"),Olr=o(" (DeBERTa-v2 model)"),Vlr=l(),nM=a("li"),zFe=a("strong"),Xlr=o("distilbert"),zlr=o(" \u2014 "),rH=a("a"),Qlr=o("DistilBertForTokenClassification"),Wlr=o(" (DistilBERT model)"),Ulr=l(),sM=a("li"),QFe=a("strong"),Hlr=o("electra"),Jlr=o(" \u2014 "),tH=a("a"),Ylr=o("ElectraForTokenClassification"),Klr=o(" (ELECTRA model)"),Zlr=l(),lM=a("li"),WFe=a("strong"),eir=o("flaubert"),oir=o(" \u2014 "),aH=a("a"),rir=o("FlaubertForTokenClassification"),tir=o(" (FlauBERT model)"),air=l(),iM=a("li"),UFe=a("strong"),nir=o("fnet"),sir=o(" \u2014 "),nH=a("a"),lir=o("FNetForTokenClassification"),iir=o(" (FNet model)"),dir=l(),dM=a("li"),HFe=a("strong"),cir=o("funnel"),mir=o(" \u2014 "),sH=a("a"),fir=o("FunnelForTokenClassification"),gir=o(" (Funnel Transformer model)"),hir=l(),cM=a("li"),JFe=a("strong"),uir=o("gpt2"),pir=o(" \u2014 "),lH=a("a"),_ir=o("GPT2ForTokenClassification"),bir=o(" (OpenAI GPT-2 model)"),vir=l(),mM=a("li"),YFe=a("strong"),Fir=o("ibert"),Tir=o(" \u2014 "),iH=a("a"),Mir=o("IBertForTokenClassification"),Eir=o(" (I-BERT model)"),Cir=l(),fM=a("li"),KFe=a("strong"),wir=o("layoutlm"),Air=o(" \u2014 "),dH=a("a"),Lir=o("LayoutLMForTokenClassification"),yir=o(" (LayoutLM model)"),xir=l(),gM=a("li"),ZFe=a("strong"),$ir=o("layoutlmv2"),kir=o(" \u2014 "),cH=a("a"),Sir=o("LayoutLMv2ForTokenClassification"),Rir=o(" (LayoutLMv2 model)"),Pir=l(),hM=a("li"),eTe=a("strong"),Bir=o("layoutlmv3"),Iir=o(" \u2014 "),mH=a("a"),Nir=o("LayoutLMv3ForTokenClassification"),qir=o(" (LayoutLMv3 model)"),jir=l(),uM=a("li"),oTe=a("strong"),Dir=o("longformer"),Gir=o(" \u2014 "),fH=a("a"),Oir=o("LongformerForTokenClassification"),Vir=o(" (Longformer model)"),Xir=l(),pM=a("li"),rTe=a("strong"),zir=o("luke"),Qir=o(" \u2014 "),gH=a("a"),Wir=o("LukeForTokenClassification"),Uir=o(" (LUKE model)"),Hir=l(),_M=a("li"),tTe=a("strong"),Jir=o("megatron-bert"),Yir=o(" \u2014 "),hH=a("a"),Kir=o("MegatronBertForTokenClassification"),Zir=o(" (Megatron-BERT model)"),edr=l(),bM=a("li"),aTe=a("strong"),odr=o("mobilebert"),rdr=o(" \u2014 "),uH=a("a"),tdr=o("MobileBertForTokenClassification"),adr=o(" (MobileBERT model)"),ndr=l(),vM=a("li"),nTe=a("strong"),sdr=o("mpnet"),ldr=o(" \u2014 "),pH=a("a"),idr=o("MPNetForTokenClassification"),ddr=o(" (MPNet model)"),cdr=l(),FM=a("li"),sTe=a("strong"),mdr=o("nezha"),fdr=o(" \u2014 "),_H=a("a"),gdr=o("NezhaForTokenClassification"),hdr=o(" (Nezha model)"),udr=l(),TM=a("li"),lTe=a("strong"),pdr=o("nystromformer"),_dr=o(" \u2014 "),bH=a("a"),bdr=o("NystromformerForTokenClassification"),vdr=o(" (Nystr\xF6mformer model)"),Fdr=l(),MM=a("li"),iTe=a("strong"),Tdr=o("qdqbert"),Mdr=o(" \u2014 "),vH=a("a"),Edr=o("QDQBertForTokenClassification"),Cdr=o(" (QDQBert model)"),wdr=l(),EM=a("li"),dTe=a("strong"),Adr=o("rembert"),Ldr=o(" \u2014 "),FH=a("a"),ydr=o("RemBertForTokenClassification"),xdr=o(" (RemBERT model)"),$dr=l(),CM=a("li"),cTe=a("strong"),kdr=o("roberta"),Sdr=o(" \u2014 "),TH=a("a"),Rdr=o("RobertaForTokenClassification"),Pdr=o(" (RoBERTa model)"),Bdr=l(),wM=a("li"),mTe=a("strong"),Idr=o("roformer"),Ndr=o(" \u2014 "),MH=a("a"),qdr=o("RoFormerForTokenClassification"),jdr=o(" (RoFormer model)"),Ddr=l(),AM=a("li"),fTe=a("strong"),Gdr=o("squeezebert"),Odr=o(" \u2014 "),EH=a("a"),Vdr=o("SqueezeBertForTokenClassification"),Xdr=o(" (SqueezeBERT model)"),zdr=l(),LM=a("li"),gTe=a("strong"),Qdr=o("xlm"),Wdr=o(" \u2014 "),CH=a("a"),Udr=o("XLMForTokenClassification"),Hdr=o(" (XLM model)"),Jdr=l(),yM=a("li"),hTe=a("strong"),Ydr=o("xlm-roberta"),Kdr=o(" \u2014 "),wH=a("a"),Zdr=o("XLMRobertaForTokenClassification"),ecr=o(" (XLM-RoBERTa model)"),ocr=l(),xM=a("li"),uTe=a("strong"),rcr=o("xlm-roberta-xl"),tcr=o(" \u2014 "),AH=a("a"),acr=o("XLMRobertaXLForTokenClassification"),ncr=o(" (XLM-RoBERTa-XL model)"),scr=l(),$M=a("li"),pTe=a("strong"),lcr=o("xlnet"),icr=o(" \u2014 "),LH=a("a"),dcr=o("XLNetForTokenClassification"),ccr=o(" (XLNet model)"),mcr=l(),kM=a("li"),_Te=a("strong"),fcr=o("yoso"),gcr=o(" \u2014 "),yH=a("a"),hcr=o("YosoForTokenClassification"),ucr=o(" (YOSO model)"),pcr=l(),SM=a("p"),_cr=o("The model is set in evaluation mode by default using "),bTe=a("code"),bcr=o("model.eval()"),vcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vTe=a("code"),Fcr=o("model.train()"),Tcr=l(),F(RM.$$.fragment),_Ye=l(),Od=a("h2"),PM=a("a"),FTe=a("span"),F(xx.$$.fragment),Mcr=l(),TTe=a("span"),Ecr=o("AutoModelForQuestionAnswering"),bYe=l(),Vo=a("div"),F($x.$$.fragment),Ccr=l(),Vd=a("p"),wcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=a("a"),Acr=o("from_pretrained()"),Lcr=o(" class method or the "),$H=a("a"),ycr=o("from_config()"),xcr=o(` class
method.`),$cr=l(),kx=a("p"),kcr=o("This class cannot be instantiated directly using "),MTe=a("code"),Scr=o("__init__()"),Rcr=o(" (throws an error)."),Pcr=l(),wt=a("div"),F(Sx.$$.fragment),Bcr=l(),ETe=a("p"),Icr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ncr=l(),Xd=a("p"),qcr=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),jcr=o("not"),Dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" to load the model weights."),Vcr=l(),F(BM.$$.fragment),Xcr=l(),lo=a("div"),F(Rx.$$.fragment),zcr=l(),wTe=a("p"),Qcr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wcr=l(),nn=a("p"),Ucr=o("The model class to instantiate is selected based on the "),ATe=a("code"),Hcr=o("model_type"),Jcr=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),Zcr=o("pretrained_model_name_or_path"),emr=o(":"),omr=l(),V=a("ul"),IM=a("li"),xTe=a("strong"),rmr=o("albert"),tmr=o(" \u2014 "),SH=a("a"),amr=o("AlbertForQuestionAnswering"),nmr=o(" (ALBERT model)"),smr=l(),NM=a("li"),$Te=a("strong"),lmr=o("bart"),imr=o(" \u2014 "),RH=a("a"),dmr=o("BartForQuestionAnswering"),cmr=o(" (BART model)"),mmr=l(),qM=a("li"),kTe=a("strong"),fmr=o("bert"),gmr=o(" \u2014 "),PH=a("a"),hmr=o("BertForQuestionAnswering"),umr=o(" (BERT model)"),pmr=l(),jM=a("li"),STe=a("strong"),_mr=o("big_bird"),bmr=o(" \u2014 "),BH=a("a"),vmr=o("BigBirdForQuestionAnswering"),Fmr=o(" (BigBird model)"),Tmr=l(),DM=a("li"),RTe=a("strong"),Mmr=o("bigbird_pegasus"),Emr=o(" \u2014 "),IH=a("a"),Cmr=o("BigBirdPegasusForQuestionAnswering"),wmr=o(" (BigBird-Pegasus model)"),Amr=l(),GM=a("li"),PTe=a("strong"),Lmr=o("camembert"),ymr=o(" \u2014 "),NH=a("a"),xmr=o("CamembertForQuestionAnswering"),$mr=o(" (CamemBERT model)"),kmr=l(),OM=a("li"),BTe=a("strong"),Smr=o("canine"),Rmr=o(" \u2014 "),qH=a("a"),Pmr=o("CanineForQuestionAnswering"),Bmr=o(" (CANINE model)"),Imr=l(),VM=a("li"),ITe=a("strong"),Nmr=o("convbert"),qmr=o(" \u2014 "),jH=a("a"),jmr=o("ConvBertForQuestionAnswering"),Dmr=o(" (ConvBERT model)"),Gmr=l(),XM=a("li"),NTe=a("strong"),Omr=o("data2vec-text"),Vmr=o(" \u2014 "),DH=a("a"),Xmr=o("Data2VecTextForQuestionAnswering"),zmr=o(" (Data2VecText model)"),Qmr=l(),zM=a("li"),qTe=a("strong"),Wmr=o("deberta"),Umr=o(" \u2014 "),GH=a("a"),Hmr=o("DebertaForQuestionAnswering"),Jmr=o(" (DeBERTa model)"),Ymr=l(),QM=a("li"),jTe=a("strong"),Kmr=o("deberta-v2"),Zmr=o(" \u2014 "),OH=a("a"),efr=o("DebertaV2ForQuestionAnswering"),ofr=o(" (DeBERTa-v2 model)"),rfr=l(),WM=a("li"),DTe=a("strong"),tfr=o("distilbert"),afr=o(" \u2014 "),VH=a("a"),nfr=o("DistilBertForQuestionAnswering"),sfr=o(" (DistilBERT model)"),lfr=l(),UM=a("li"),GTe=a("strong"),ifr=o("electra"),dfr=o(" \u2014 "),XH=a("a"),cfr=o("ElectraForQuestionAnswering"),mfr=o(" (ELECTRA model)"),ffr=l(),HM=a("li"),OTe=a("strong"),gfr=o("flaubert"),hfr=o(" \u2014 "),zH=a("a"),ufr=o("FlaubertForQuestionAnsweringSimple"),pfr=o(" (FlauBERT model)"),_fr=l(),JM=a("li"),VTe=a("strong"),bfr=o("fnet"),vfr=o(" \u2014 "),QH=a("a"),Ffr=o("FNetForQuestionAnswering"),Tfr=o(" (FNet model)"),Mfr=l(),YM=a("li"),XTe=a("strong"),Efr=o("funnel"),Cfr=o(" \u2014 "),WH=a("a"),wfr=o("FunnelForQuestionAnswering"),Afr=o(" (Funnel Transformer model)"),Lfr=l(),KM=a("li"),zTe=a("strong"),yfr=o("gptj"),xfr=o(" \u2014 "),UH=a("a"),$fr=o("GPTJForQuestionAnswering"),kfr=o(" (GPT-J model)"),Sfr=l(),ZM=a("li"),QTe=a("strong"),Rfr=o("ibert"),Pfr=o(" \u2014 "),HH=a("a"),Bfr=o("IBertForQuestionAnswering"),Ifr=o(" (I-BERT model)"),Nfr=l(),eE=a("li"),WTe=a("strong"),qfr=o("layoutlmv2"),jfr=o(" \u2014 "),JH=a("a"),Dfr=o("LayoutLMv2ForQuestionAnswering"),Gfr=o(" (LayoutLMv2 model)"),Ofr=l(),oE=a("li"),UTe=a("strong"),Vfr=o("layoutlmv3"),Xfr=o(" \u2014 "),YH=a("a"),zfr=o("LayoutLMv3ForQuestionAnswering"),Qfr=o(" (LayoutLMv3 model)"),Wfr=l(),rE=a("li"),HTe=a("strong"),Ufr=o("led"),Hfr=o(" \u2014 "),KH=a("a"),Jfr=o("LEDForQuestionAnswering"),Yfr=o(" (LED model)"),Kfr=l(),tE=a("li"),JTe=a("strong"),Zfr=o("longformer"),egr=o(" \u2014 "),ZH=a("a"),ogr=o("LongformerForQuestionAnswering"),rgr=o(" (Longformer model)"),tgr=l(),aE=a("li"),YTe=a("strong"),agr=o("luke"),ngr=o(" \u2014 "),eJ=a("a"),sgr=o("LukeForQuestionAnswering"),lgr=o(" (LUKE model)"),igr=l(),nE=a("li"),KTe=a("strong"),dgr=o("lxmert"),cgr=o(" \u2014 "),oJ=a("a"),mgr=o("LxmertForQuestionAnswering"),fgr=o(" (LXMERT model)"),ggr=l(),sE=a("li"),ZTe=a("strong"),hgr=o("mbart"),ugr=o(" \u2014 "),rJ=a("a"),pgr=o("MBartForQuestionAnswering"),_gr=o(" (mBART model)"),bgr=l(),lE=a("li"),eMe=a("strong"),vgr=o("megatron-bert"),Fgr=o(" \u2014 "),tJ=a("a"),Tgr=o("MegatronBertForQuestionAnswering"),Mgr=o(" (Megatron-BERT model)"),Egr=l(),iE=a("li"),oMe=a("strong"),Cgr=o("mobilebert"),wgr=o(" \u2014 "),aJ=a("a"),Agr=o("MobileBertForQuestionAnswering"),Lgr=o(" (MobileBERT model)"),ygr=l(),dE=a("li"),rMe=a("strong"),xgr=o("mpnet"),$gr=o(" \u2014 "),nJ=a("a"),kgr=o("MPNetForQuestionAnswering"),Sgr=o(" (MPNet model)"),Rgr=l(),cE=a("li"),tMe=a("strong"),Pgr=o("mvp"),Bgr=o(" \u2014 "),sJ=a("a"),Igr=o("MvpForQuestionAnswering"),Ngr=o(" (MVP model)"),qgr=l(),mE=a("li"),aMe=a("strong"),jgr=o("nezha"),Dgr=o(" \u2014 "),lJ=a("a"),Ggr=o("NezhaForQuestionAnswering"),Ogr=o(" (Nezha model)"),Vgr=l(),fE=a("li"),nMe=a("strong"),Xgr=o("nystromformer"),zgr=o(" \u2014 "),iJ=a("a"),Qgr=o("NystromformerForQuestionAnswering"),Wgr=o(" (Nystr\xF6mformer model)"),Ugr=l(),gE=a("li"),sMe=a("strong"),Hgr=o("qdqbert"),Jgr=o(" \u2014 "),dJ=a("a"),Ygr=o("QDQBertForQuestionAnswering"),Kgr=o(" (QDQBert model)"),Zgr=l(),hE=a("li"),lMe=a("strong"),ehr=o("reformer"),ohr=o(" \u2014 "),cJ=a("a"),rhr=o("ReformerForQuestionAnswering"),thr=o(" (Reformer model)"),ahr=l(),uE=a("li"),iMe=a("strong"),nhr=o("rembert"),shr=o(" \u2014 "),mJ=a("a"),lhr=o("RemBertForQuestionAnswering"),ihr=o(" (RemBERT model)"),dhr=l(),pE=a("li"),dMe=a("strong"),chr=o("roberta"),mhr=o(" \u2014 "),fJ=a("a"),fhr=o("RobertaForQuestionAnswering"),ghr=o(" (RoBERTa model)"),hhr=l(),_E=a("li"),cMe=a("strong"),uhr=o("roformer"),phr=o(" \u2014 "),gJ=a("a"),_hr=o("RoFormerForQuestionAnswering"),bhr=o(" (RoFormer model)"),vhr=l(),bE=a("li"),mMe=a("strong"),Fhr=o("splinter"),Thr=o(" \u2014 "),hJ=a("a"),Mhr=o("SplinterForQuestionAnswering"),Ehr=o(" (Splinter model)"),Chr=l(),vE=a("li"),fMe=a("strong"),whr=o("squeezebert"),Ahr=o(" \u2014 "),uJ=a("a"),Lhr=o("SqueezeBertForQuestionAnswering"),yhr=o(" (SqueezeBERT model)"),xhr=l(),FE=a("li"),gMe=a("strong"),$hr=o("xlm"),khr=o(" \u2014 "),pJ=a("a"),Shr=o("XLMForQuestionAnsweringSimple"),Rhr=o(" (XLM model)"),Phr=l(),TE=a("li"),hMe=a("strong"),Bhr=o("xlm-roberta"),Ihr=o(" \u2014 "),_J=a("a"),Nhr=o("XLMRobertaForQuestionAnswering"),qhr=o(" (XLM-RoBERTa model)"),jhr=l(),ME=a("li"),uMe=a("strong"),Dhr=o("xlm-roberta-xl"),Ghr=o(" \u2014 "),bJ=a("a"),Ohr=o("XLMRobertaXLForQuestionAnswering"),Vhr=o(" (XLM-RoBERTa-XL model)"),Xhr=l(),EE=a("li"),pMe=a("strong"),zhr=o("xlnet"),Qhr=o(" \u2014 "),vJ=a("a"),Whr=o("XLNetForQuestionAnsweringSimple"),Uhr=o(" (XLNet model)"),Hhr=l(),CE=a("li"),_Me=a("strong"),Jhr=o("yoso"),Yhr=o(" \u2014 "),FJ=a("a"),Khr=o("YosoForQuestionAnswering"),Zhr=o(" (YOSO model)"),eur=l(),wE=a("p"),our=o("The model is set in evaluation mode by default using "),bMe=a("code"),rur=o("model.eval()"),tur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vMe=a("code"),aur=o("model.train()"),nur=l(),F(AE.$$.fragment),vYe=l(),zd=a("h2"),LE=a("a"),FMe=a("span"),F(Px.$$.fragment),sur=l(),TMe=a("span"),lur=o("AutoModelForTableQuestionAnswering"),FYe=l(),Xo=a("div"),F(Bx.$$.fragment),iur=l(),Qd=a("p"),dur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TJ=a("a"),cur=o("from_pretrained()"),mur=o(" class method or the "),MJ=a("a"),fur=o("from_config()"),gur=o(` class
method.`),hur=l(),Ix=a("p"),uur=o("This class cannot be instantiated directly using "),MMe=a("code"),pur=o("__init__()"),_ur=o(" (throws an error)."),bur=l(),At=a("div"),F(Nx.$$.fragment),vur=l(),EMe=a("p"),Fur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Tur=l(),Wd=a("p"),Mur=o(`Note:
Loading a model from its configuration file does `),CMe=a("strong"),Eur=o("not"),Cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),wur=o("from_pretrained()"),Aur=o(" to load the model weights."),Lur=l(),F(yE.$$.fragment),yur=l(),io=a("div"),F(qx.$$.fragment),xur=l(),wMe=a("p"),$ur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kur=l(),sn=a("p"),Sur=o("The model class to instantiate is selected based on the "),AMe=a("code"),Rur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),Bur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(":"),jur=l(),xMe=a("ul"),xE=a("li"),$Me=a("strong"),Dur=o("tapas"),Gur=o(" \u2014 "),CJ=a("a"),Our=o("TapasForQuestionAnswering"),Vur=o(" (TAPAS model)"),Xur=l(),$E=a("p"),zur=o("The model is set in evaluation mode by default using "),kMe=a("code"),Qur=o("model.eval()"),Wur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SMe=a("code"),Uur=o("model.train()"),Hur=l(),F(kE.$$.fragment),TYe=l(),Ud=a("h2"),SE=a("a"),RMe=a("span"),F(jx.$$.fragment),Jur=l(),PMe=a("span"),Yur=o("AutoModelForDocumentQuestionAnswering"),MYe=l(),zo=a("div"),F(Dx.$$.fragment),Kur=l(),Hd=a("p"),Zur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),wJ=a("a"),epr=o("from_pretrained()"),opr=o(" class method or the "),AJ=a("a"),rpr=o("from_config()"),tpr=o(` class
method.`),apr=l(),Gx=a("p"),npr=o("This class cannot be instantiated directly using "),BMe=a("code"),spr=o("__init__()"),lpr=o(" (throws an error)."),ipr=l(),Lt=a("div"),F(Ox.$$.fragment),dpr=l(),IMe=a("p"),cpr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),mpr=l(),Jd=a("p"),fpr=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),gpr=o("not"),hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=a("a"),upr=o("from_pretrained()"),ppr=o(" to load the model weights."),_pr=l(),F(RE.$$.fragment),bpr=l(),co=a("div"),F(Vx.$$.fragment),vpr=l(),qMe=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Tpr=l(),ln=a("p"),Mpr=o("The model class to instantiate is selected based on the "),jMe=a("code"),Epr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),Lpr=o("pretrained_model_name_or_path"),ypr=o(":"),xpr=l(),Yd=a("ul"),PE=a("li"),OMe=a("strong"),$pr=o("layoutlm"),kpr=o(" \u2014 "),yJ=a("a"),Spr=o("LayoutLMForQuestionAnswering"),Rpr=o(" (LayoutLM model)"),Ppr=l(),BE=a("li"),VMe=a("strong"),Bpr=o("layoutlmv2"),Ipr=o(" \u2014 "),xJ=a("a"),Npr=o("LayoutLMv2ForQuestionAnswering"),qpr=o(" (LayoutLMv2 model)"),jpr=l(),IE=a("li"),XMe=a("strong"),Dpr=o("layoutlmv3"),Gpr=o(" \u2014 "),$J=a("a"),Opr=o("LayoutLMv3ForQuestionAnswering"),Vpr=o(" (LayoutLMv3 model)"),Xpr=l(),NE=a("p"),zpr=o("The model is set in evaluation mode by default using "),zMe=a("code"),Qpr=o("model.eval()"),Wpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QMe=a("code"),Upr=o("model.train()"),Hpr=l(),F(qE.$$.fragment),EYe=l(),Kd=a("h2"),jE=a("a"),WMe=a("span"),F(Xx.$$.fragment),Jpr=l(),UMe=a("span"),Ypr=o("AutoModelForImageClassification"),CYe=l(),Qo=a("div"),F(zx.$$.fragment),Kpr=l(),Zd=a("p"),Zpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kJ=a("a"),e_r=o("from_pretrained()"),o_r=o(" class method or the "),SJ=a("a"),r_r=o("from_config()"),t_r=o(` class
method.`),a_r=l(),Qx=a("p"),n_r=o("This class cannot be instantiated directly using "),HMe=a("code"),s_r=o("__init__()"),l_r=o(" (throws an error)."),i_r=l(),yt=a("div"),F(Wx.$$.fragment),d_r=l(),JMe=a("p"),c_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m_r=l(),ec=a("p"),f_r=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),g_r=o("not"),h_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),u_r=o("from_pretrained()"),p_r=o(" to load the model weights."),__r=l(),F(DE.$$.fragment),b_r=l(),mo=a("div"),F(Ux.$$.fragment),v_r=l(),KMe=a("p"),F_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),T_r=l(),dn=a("p"),M_r=o("The model class to instantiate is selected based on the "),ZMe=a("code"),E_r=o("model_type"),C_r=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),w_r=o("pretrained_model_name_or_path"),A_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),L_r=o("pretrained_model_name_or_path"),y_r=o(":"),x_r=l(),be=a("ul"),GE=a("li"),rEe=a("strong"),$_r=o("beit"),k_r=o(" \u2014 "),PJ=a("a"),S_r=o("BeitForImageClassification"),R_r=o(" (BEiT model)"),P_r=l(),OE=a("li"),tEe=a("strong"),B_r=o("convnext"),I_r=o(" \u2014 "),BJ=a("a"),N_r=o("ConvNextForImageClassification"),q_r=o(" (ConvNeXT model)"),j_r=l(),VE=a("li"),aEe=a("strong"),D_r=o("cvt"),G_r=o(" \u2014 "),IJ=a("a"),O_r=o("CvtForImageClassification"),V_r=o(" (CvT model)"),X_r=l(),XE=a("li"),nEe=a("strong"),z_r=o("data2vec-vision"),Q_r=o(" \u2014 "),NJ=a("a"),W_r=o("Data2VecVisionForImageClassification"),U_r=o(" (Data2VecVision model)"),H_r=l(),pl=a("li"),sEe=a("strong"),J_r=o("deit"),Y_r=o(" \u2014 "),qJ=a("a"),K_r=o("DeiTForImageClassification"),Z_r=o(" or "),jJ=a("a"),ebr=o("DeiTForImageClassificationWithTeacher"),obr=o(" (DeiT model)"),rbr=l(),zE=a("li"),lEe=a("strong"),tbr=o("imagegpt"),abr=o(" \u2014 "),DJ=a("a"),nbr=o("ImageGPTForImageClassification"),sbr=o(" (ImageGPT model)"),lbr=l(),_l=a("li"),iEe=a("strong"),ibr=o("levit"),dbr=o(" \u2014 "),GJ=a("a"),cbr=o("LevitForImageClassification"),mbr=o(" or "),OJ=a("a"),fbr=o("LevitForImageClassificationWithTeacher"),gbr=o(" (LeViT model)"),hbr=l(),QE=a("li"),dEe=a("strong"),ubr=o("mobilevit"),pbr=o(" \u2014 "),VJ=a("a"),_br=o("MobileViTForImageClassification"),bbr=o(" (MobileViT model)"),vbr=l(),xt=a("li"),cEe=a("strong"),Fbr=o("perceiver"),Tbr=o(" \u2014 "),XJ=a("a"),Mbr=o("PerceiverForImageClassificationLearned"),Ebr=o(" or "),zJ=a("a"),Cbr=o("PerceiverForImageClassificationFourier"),wbr=o(" or "),QJ=a("a"),Abr=o("PerceiverForImageClassificationConvProcessing"),Lbr=o(" (Perceiver model)"),ybr=l(),WE=a("li"),mEe=a("strong"),xbr=o("poolformer"),$br=o(" \u2014 "),WJ=a("a"),kbr=o("PoolFormerForImageClassification"),Sbr=o(" (PoolFormer model)"),Rbr=l(),UE=a("li"),fEe=a("strong"),Pbr=o("regnet"),Bbr=o(" \u2014 "),UJ=a("a"),Ibr=o("RegNetForImageClassification"),Nbr=o(" (RegNet model)"),qbr=l(),HE=a("li"),gEe=a("strong"),jbr=o("resnet"),Dbr=o(" \u2014 "),HJ=a("a"),Gbr=o("ResNetForImageClassification"),Obr=o(" (ResNet model)"),Vbr=l(),JE=a("li"),hEe=a("strong"),Xbr=o("segformer"),zbr=o(" \u2014 "),JJ=a("a"),Qbr=o("SegformerForImageClassification"),Wbr=o(" (SegFormer model)"),Ubr=l(),YE=a("li"),uEe=a("strong"),Hbr=o("swin"),Jbr=o(" \u2014 "),YJ=a("a"),Ybr=o("SwinForImageClassification"),Kbr=o(" (Swin Transformer model)"),Zbr=l(),KE=a("li"),pEe=a("strong"),e2r=o("swinv2"),o2r=o(" \u2014 "),KJ=a("a"),r2r=o("Swinv2ForImageClassification"),t2r=o(" (Swin Transformer V2 model)"),a2r=l(),ZE=a("li"),_Ee=a("strong"),n2r=o("van"),s2r=o(" \u2014 "),ZJ=a("a"),l2r=o("VanForImageClassification"),i2r=o(" (VAN model)"),d2r=l(),e4=a("li"),bEe=a("strong"),c2r=o("vit"),m2r=o(" \u2014 "),eY=a("a"),f2r=o("ViTForImageClassification"),g2r=o(" (ViT model)"),h2r=l(),o4=a("p"),u2r=o("The model is set in evaluation mode by default using "),vEe=a("code"),p2r=o("model.eval()"),_2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FEe=a("code"),b2r=o("model.train()"),v2r=l(),F(r4.$$.fragment),wYe=l(),oc=a("h2"),t4=a("a"),TEe=a("span"),F(Hx.$$.fragment),F2r=l(),MEe=a("span"),T2r=o("AutoModelForVideoClassification"),AYe=l(),Wo=a("div"),F(Jx.$$.fragment),M2r=l(),rc=a("p"),E2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),oY=a("a"),C2r=o("from_pretrained()"),w2r=o(" class method or the "),rY=a("a"),A2r=o("from_config()"),L2r=o(` class
method.`),y2r=l(),Yx=a("p"),x2r=o("This class cannot be instantiated directly using "),EEe=a("code"),$2r=o("__init__()"),k2r=o(" (throws an error)."),S2r=l(),$t=a("div"),F(Kx.$$.fragment),R2r=l(),CEe=a("p"),P2r=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),B2r=l(),tc=a("p"),I2r=o(`Note:
Loading a model from its configuration file does `),wEe=a("strong"),N2r=o("not"),q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),j2r=o("from_pretrained()"),D2r=o(" to load the model weights."),G2r=l(),F(a4.$$.fragment),O2r=l(),fo=a("div"),F(Zx.$$.fragment),V2r=l(),AEe=a("p"),X2r=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),z2r=l(),cn=a("p"),Q2r=o("The model class to instantiate is selected based on the "),LEe=a("code"),W2r=o("model_type"),U2r=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),H2r=o("pretrained_model_name_or_path"),J2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=a("code"),Y2r=o("pretrained_model_name_or_path"),K2r=o(":"),Z2r=l(),$Ee=a("ul"),n4=a("li"),kEe=a("strong"),evr=o("videomae"),ovr=o(" \u2014 "),aY=a("a"),rvr=o("VideoMAEForVideoClassification"),tvr=o(" (VideoMAE model)"),avr=l(),s4=a("p"),nvr=o("The model is set in evaluation mode by default using "),SEe=a("code"),svr=o("model.eval()"),lvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),REe=a("code"),ivr=o("model.train()"),dvr=l(),F(l4.$$.fragment),LYe=l(),ac=a("h2"),i4=a("a"),PEe=a("span"),F(e$.$$.fragment),cvr=l(),BEe=a("span"),mvr=o("AutoModelForVision2Seq"),yYe=l(),Uo=a("div"),F(o$.$$.fragment),fvr=l(),nc=a("p"),gvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nY=a("a"),hvr=o("from_pretrained()"),uvr=o(" class method or the "),sY=a("a"),pvr=o("from_config()"),_vr=o(` class
method.`),bvr=l(),r$=a("p"),vvr=o("This class cannot be instantiated directly using "),IEe=a("code"),Fvr=o("__init__()"),Tvr=o(" (throws an error)."),Mvr=l(),kt=a("div"),F(t$.$$.fragment),Evr=l(),NEe=a("p"),Cvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wvr=l(),sc=a("p"),Avr=o(`Note:
Loading a model from its configuration file does `),qEe=a("strong"),Lvr=o("not"),yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),xvr=o("from_pretrained()"),$vr=o(" to load the model weights."),kvr=l(),F(d4.$$.fragment),Svr=l(),go=a("div"),F(a$.$$.fragment),Rvr=l(),jEe=a("p"),Pvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bvr=l(),mn=a("p"),Ivr=o("The model class to instantiate is selected based on the "),DEe=a("code"),Nvr=o("model_type"),qvr=o(` property of the config object (either
passed as an argument or loaded from `),GEe=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(":"),Vvr=l(),VEe=a("ul"),c4=a("li"),XEe=a("strong"),Xvr=o("vision-encoder-decoder"),zvr=o(" \u2014 "),iY=a("a"),Qvr=o("VisionEncoderDecoderModel"),Wvr=o(" (Vision Encoder decoder model)"),Uvr=l(),m4=a("p"),Hvr=o("The model is set in evaluation mode by default using "),zEe=a("code"),Jvr=o("model.eval()"),Yvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QEe=a("code"),Kvr=o("model.train()"),Zvr=l(),F(f4.$$.fragment),xYe=l(),lc=a("h2"),g4=a("a"),WEe=a("span"),F(n$.$$.fragment),e1r=l(),UEe=a("span"),o1r=o("AutoModelForVisualQuestionAnswering"),$Ye=l(),Ho=a("div"),F(s$.$$.fragment),r1r=l(),ic=a("p"),t1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),dY=a("a"),a1r=o("from_pretrained()"),n1r=o(" class method or the "),cY=a("a"),s1r=o("from_config()"),l1r=o(` class
method.`),i1r=l(),l$=a("p"),d1r=o("This class cannot be instantiated directly using "),HEe=a("code"),c1r=o("__init__()"),m1r=o(" (throws an error)."),f1r=l(),St=a("div"),F(i$.$$.fragment),g1r=l(),JEe=a("p"),h1r=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),u1r=l(),dc=a("p"),p1r=o(`Note:
Loading a model from its configuration file does `),YEe=a("strong"),_1r=o("not"),b1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),v1r=o("from_pretrained()"),F1r=o(" to load the model weights."),T1r=l(),F(h4.$$.fragment),M1r=l(),ho=a("div"),F(d$.$$.fragment),E1r=l(),KEe=a("p"),C1r=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),w1r=l(),fn=a("p"),A1r=o("The model class to instantiate is selected based on the "),ZEe=a("code"),L1r=o("model_type"),y1r=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),x1r=o("pretrained_model_name_or_path"),$1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(":"),R1r=l(),r4e=a("ul"),u4=a("li"),t4e=a("strong"),P1r=o("vilt"),B1r=o(" \u2014 "),fY=a("a"),I1r=o("ViltForQuestionAnswering"),N1r=o(" (ViLT model)"),q1r=l(),p4=a("p"),j1r=o("The model is set in evaluation mode by default using "),a4e=a("code"),D1r=o("model.eval()"),G1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=a("code"),O1r=o("model.train()"),V1r=l(),F(_4.$$.fragment),kYe=l(),cc=a("h2"),b4=a("a"),s4e=a("span"),F(c$.$$.fragment),X1r=l(),l4e=a("span"),z1r=o("AutoModelForAudioClassification"),SYe=l(),Jo=a("div"),F(m$.$$.fragment),Q1r=l(),mc=a("p"),W1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gY=a("a"),U1r=o("from_pretrained()"),H1r=o(" class method or the "),hY=a("a"),J1r=o("from_config()"),Y1r=o(` class
method.`),K1r=l(),f$=a("p"),Z1r=o("This class cannot be instantiated directly using "),i4e=a("code"),eFr=o("__init__()"),oFr=o(" (throws an error)."),rFr=l(),Rt=a("div"),F(g$.$$.fragment),tFr=l(),d4e=a("p"),aFr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),nFr=l(),fc=a("p"),sFr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),lFr=o("not"),iFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),dFr=o("from_pretrained()"),cFr=o(" to load the model weights."),mFr=l(),F(v4.$$.fragment),fFr=l(),uo=a("div"),F(h$.$$.fragment),gFr=l(),m4e=a("p"),hFr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uFr=l(),gn=a("p"),pFr=o("The model class to instantiate is selected based on the "),f4e=a("code"),_Fr=o("model_type"),bFr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),vFr=o("pretrained_model_name_or_path"),FFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),TFr=o("pretrained_model_name_or_path"),MFr=o(":"),EFr=l(),Pe=a("ul"),F4=a("li"),u4e=a("strong"),CFr=o("data2vec-audio"),wFr=o(" \u2014 "),pY=a("a"),AFr=o("Data2VecAudioForSequenceClassification"),LFr=o(" (Data2VecAudio model)"),yFr=l(),T4=a("li"),p4e=a("strong"),xFr=o("hubert"),$Fr=o(" \u2014 "),_Y=a("a"),kFr=o("HubertForSequenceClassification"),SFr=o(" (Hubert model)"),RFr=l(),M4=a("li"),_4e=a("strong"),PFr=o("sew"),BFr=o(" \u2014 "),bY=a("a"),IFr=o("SEWForSequenceClassification"),NFr=o(" (SEW model)"),qFr=l(),E4=a("li"),b4e=a("strong"),jFr=o("sew-d"),DFr=o(" \u2014 "),vY=a("a"),GFr=o("SEWDForSequenceClassification"),OFr=o(" (SEW-D model)"),VFr=l(),C4=a("li"),v4e=a("strong"),XFr=o("unispeech"),zFr=o(" \u2014 "),FY=a("a"),QFr=o("UniSpeechForSequenceClassification"),WFr=o(" (UniSpeech model)"),UFr=l(),w4=a("li"),F4e=a("strong"),HFr=o("unispeech-sat"),JFr=o(" \u2014 "),TY=a("a"),YFr=o("UniSpeechSatForSequenceClassification"),KFr=o(" (UniSpeechSat model)"),ZFr=l(),A4=a("li"),T4e=a("strong"),eTr=o("wav2vec2"),oTr=o(" \u2014 "),MY=a("a"),rTr=o("Wav2Vec2ForSequenceClassification"),tTr=o(" (Wav2Vec2 model)"),aTr=l(),L4=a("li"),M4e=a("strong"),nTr=o("wav2vec2-conformer"),sTr=o(" \u2014 "),EY=a("a"),lTr=o("Wav2Vec2ConformerForSequenceClassification"),iTr=o(" (Wav2Vec2-Conformer model)"),dTr=l(),y4=a("li"),E4e=a("strong"),cTr=o("wavlm"),mTr=o(" \u2014 "),CY=a("a"),fTr=o("WavLMForSequenceClassification"),gTr=o(" (WavLM model)"),hTr=l(),x4=a("p"),uTr=o("The model is set in evaluation mode by default using "),C4e=a("code"),pTr=o("model.eval()"),_Tr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=a("code"),bTr=o("model.train()"),vTr=l(),F($4.$$.fragment),RYe=l(),gc=a("h2"),k4=a("a"),A4e=a("span"),F(u$.$$.fragment),FTr=l(),L4e=a("span"),TTr=o("AutoModelForAudioFrameClassification"),PYe=l(),Yo=a("div"),F(p$.$$.fragment),MTr=l(),hc=a("p"),ETr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wY=a("a"),CTr=o("from_pretrained()"),wTr=o(" class method or the "),AY=a("a"),ATr=o("from_config()"),LTr=o(` class
method.`),yTr=l(),_$=a("p"),xTr=o("This class cannot be instantiated directly using "),y4e=a("code"),$Tr=o("__init__()"),kTr=o(" (throws an error)."),STr=l(),Pt=a("div"),F(b$.$$.fragment),RTr=l(),x4e=a("p"),PTr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BTr=l(),uc=a("p"),ITr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),NTr=o("not"),qTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),jTr=o("from_pretrained()"),DTr=o(" to load the model weights."),GTr=l(),F(S4.$$.fragment),OTr=l(),po=a("div"),F(v$.$$.fragment),VTr=l(),k4e=a("p"),XTr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zTr=l(),hn=a("p"),QTr=o("The model class to instantiate is selected based on the "),S4e=a("code"),WTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),HTr=o("pretrained_model_name_or_path"),JTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),YTr=o("pretrained_model_name_or_path"),KTr=o(":"),ZTr=l(),ct=a("ul"),R4=a("li"),B4e=a("strong"),eMr=o("data2vec-audio"),oMr=o(" \u2014 "),yY=a("a"),rMr=o("Data2VecAudioForAudioFrameClassification"),tMr=o(" (Data2VecAudio model)"),aMr=l(),P4=a("li"),I4e=a("strong"),nMr=o("unispeech-sat"),sMr=o(" \u2014 "),xY=a("a"),lMr=o("UniSpeechSatForAudioFrameClassification"),iMr=o(" (UniSpeechSat model)"),dMr=l(),B4=a("li"),N4e=a("strong"),cMr=o("wav2vec2"),mMr=o(" \u2014 "),$Y=a("a"),fMr=o("Wav2Vec2ForAudioFrameClassification"),gMr=o(" (Wav2Vec2 model)"),hMr=l(),I4=a("li"),q4e=a("strong"),uMr=o("wav2vec2-conformer"),pMr=o(" \u2014 "),kY=a("a"),_Mr=o("Wav2Vec2ConformerForAudioFrameClassification"),bMr=o(" (Wav2Vec2-Conformer model)"),vMr=l(),N4=a("li"),j4e=a("strong"),FMr=o("wavlm"),TMr=o(" \u2014 "),SY=a("a"),MMr=o("WavLMForAudioFrameClassification"),EMr=o(" (WavLM model)"),CMr=l(),q4=a("p"),wMr=o("The model is set in evaluation mode by default using "),D4e=a("code"),AMr=o("model.eval()"),LMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),yMr=o("model.train()"),xMr=l(),F(j4.$$.fragment),BYe=l(),pc=a("h2"),D4=a("a"),O4e=a("span"),F(F$.$$.fragment),$Mr=l(),V4e=a("span"),kMr=o("AutoModelForCTC"),IYe=l(),Ko=a("div"),F(T$.$$.fragment),SMr=l(),_c=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RY=a("a"),PMr=o("from_pretrained()"),BMr=o(" class method or the "),PY=a("a"),IMr=o("from_config()"),NMr=o(` class
method.`),qMr=l(),M$=a("p"),jMr=o("This class cannot be instantiated directly using "),X4e=a("code"),DMr=o("__init__()"),GMr=o(" (throws an error)."),OMr=l(),Bt=a("div"),F(E$.$$.fragment),VMr=l(),z4e=a("p"),XMr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zMr=l(),bc=a("p"),QMr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),WMr=o("not"),UMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),HMr=o("from_pretrained()"),JMr=o(" to load the model weights."),YMr=l(),F(G4.$$.fragment),KMr=l(),_o=a("div"),F(C$.$$.fragment),ZMr=l(),W4e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oEr=l(),un=a("p"),rEr=o("The model class to instantiate is selected based on the "),U4e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),Le=a("ul"),O4=a("li"),Y4e=a("strong"),cEr=o("data2vec-audio"),mEr=o(" \u2014 "),IY=a("a"),fEr=o("Data2VecAudioForCTC"),gEr=o(" (Data2VecAudio model)"),hEr=l(),V4=a("li"),K4e=a("strong"),uEr=o("hubert"),pEr=o(" \u2014 "),NY=a("a"),_Er=o("HubertForCTC"),bEr=o(" (Hubert model)"),vEr=l(),X4=a("li"),Z4e=a("strong"),FEr=o("mctct"),TEr=o(" \u2014 "),qY=a("a"),MEr=o("MCTCTForCTC"),EEr=o(" (M-CTC-T model)"),CEr=l(),z4=a("li"),eCe=a("strong"),wEr=o("sew"),AEr=o(" \u2014 "),jY=a("a"),LEr=o("SEWForCTC"),yEr=o(" (SEW model)"),xEr=l(),Q4=a("li"),oCe=a("strong"),$Er=o("sew-d"),kEr=o(" \u2014 "),DY=a("a"),SEr=o("SEWDForCTC"),REr=o(" (SEW-D model)"),PEr=l(),W4=a("li"),rCe=a("strong"),BEr=o("unispeech"),IEr=o(" \u2014 "),GY=a("a"),NEr=o("UniSpeechForCTC"),qEr=o(" (UniSpeech model)"),jEr=l(),U4=a("li"),tCe=a("strong"),DEr=o("unispeech-sat"),GEr=o(" \u2014 "),OY=a("a"),OEr=o("UniSpeechSatForCTC"),VEr=o(" (UniSpeechSat model)"),XEr=l(),H4=a("li"),aCe=a("strong"),zEr=o("wav2vec2"),QEr=o(" \u2014 "),VY=a("a"),WEr=o("Wav2Vec2ForCTC"),UEr=o(" (Wav2Vec2 model)"),HEr=l(),J4=a("li"),nCe=a("strong"),JEr=o("wav2vec2-conformer"),YEr=o(" \u2014 "),XY=a("a"),KEr=o("Wav2Vec2ConformerForCTC"),ZEr=o(" (Wav2Vec2-Conformer model)"),e4r=l(),Y4=a("li"),sCe=a("strong"),o4r=o("wavlm"),r4r=o(" \u2014 "),zY=a("a"),t4r=o("WavLMForCTC"),a4r=o(" (WavLM model)"),n4r=l(),K4=a("p"),s4r=o("The model is set in evaluation mode by default using "),lCe=a("code"),l4r=o("model.eval()"),i4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iCe=a("code"),d4r=o("model.train()"),c4r=l(),F(Z4.$$.fragment),NYe=l(),vc=a("h2"),eC=a("a"),dCe=a("span"),F(w$.$$.fragment),m4r=l(),cCe=a("span"),f4r=o("AutoModelForSpeechSeq2Seq"),qYe=l(),Zo=a("div"),F(A$.$$.fragment),g4r=l(),Fc=a("p"),h4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QY=a("a"),u4r=o("from_pretrained()"),p4r=o(" class method or the "),WY=a("a"),_4r=o("from_config()"),b4r=o(` class
method.`),v4r=l(),L$=a("p"),F4r=o("This class cannot be instantiated directly using "),mCe=a("code"),T4r=o("__init__()"),M4r=o(" (throws an error)."),E4r=l(),It=a("div"),F(y$.$$.fragment),C4r=l(),fCe=a("p"),w4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A4r=l(),Tc=a("p"),L4r=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),y4r=o("not"),x4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),$4r=o("from_pretrained()"),k4r=o(" to load the model weights."),S4r=l(),F(oC.$$.fragment),R4r=l(),bo=a("div"),F(x$.$$.fragment),P4r=l(),hCe=a("p"),B4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I4r=l(),pn=a("p"),N4r=o("The model class to instantiate is selected based on the "),uCe=a("code"),q4r=o("model_type"),j4r=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),D4r=o("pretrained_model_name_or_path"),G4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),O4r=o("pretrained_model_name_or_path"),V4r=o(":"),X4r=l(),$$=a("ul"),rC=a("li"),bCe=a("strong"),z4r=o("speech-encoder-decoder"),Q4r=o(" \u2014 "),HY=a("a"),W4r=o("SpeechEncoderDecoderModel"),U4r=o(" (Speech Encoder decoder model)"),H4r=l(),tC=a("li"),vCe=a("strong"),J4r=o("speech_to_text"),Y4r=o(" \u2014 "),JY=a("a"),K4r=o("Speech2TextForConditionalGeneration"),Z4r=o(" (Speech2Text model)"),eCr=l(),aC=a("p"),oCr=o("The model is set in evaluation mode by default using "),FCe=a("code"),rCr=o("model.eval()"),tCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TCe=a("code"),aCr=o("model.train()"),nCr=l(),F(nC.$$.fragment),jYe=l(),Mc=a("h2"),sC=a("a"),MCe=a("span"),F(k$.$$.fragment),sCr=l(),ECe=a("span"),lCr=o("AutoModelForAudioXVector"),DYe=l(),er=a("div"),F(S$.$$.fragment),iCr=l(),Ec=a("p"),dCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YY=a("a"),cCr=o("from_pretrained()"),mCr=o(" class method or the "),KY=a("a"),fCr=o("from_config()"),gCr=o(` class
method.`),hCr=l(),R$=a("p"),uCr=o("This class cannot be instantiated directly using "),CCe=a("code"),pCr=o("__init__()"),_Cr=o(" (throws an error)."),bCr=l(),Nt=a("div"),F(P$.$$.fragment),vCr=l(),wCe=a("p"),FCr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),TCr=l(),Cc=a("p"),MCr=o(`Note:
Loading a model from its configuration file does `),ACe=a("strong"),ECr=o("not"),CCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),wCr=o("from_pretrained()"),ACr=o(" to load the model weights."),LCr=l(),F(lC.$$.fragment),yCr=l(),vo=a("div"),F(B$.$$.fragment),xCr=l(),LCe=a("p"),$Cr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kCr=l(),_n=a("p"),SCr=o("The model class to instantiate is selected based on the "),yCe=a("code"),RCr=o("model_type"),PCr=o(` property of the config object (either
passed as an argument or loaded from `),xCe=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=a("code"),NCr=o("pretrained_model_name_or_path"),qCr=o(":"),jCr=l(),mt=a("ul"),iC=a("li"),kCe=a("strong"),DCr=o("data2vec-audio"),GCr=o(" \u2014 "),eK=a("a"),OCr=o("Data2VecAudioForXVector"),VCr=o(" (Data2VecAudio model)"),XCr=l(),dC=a("li"),SCe=a("strong"),zCr=o("unispeech-sat"),QCr=o(" \u2014 "),oK=a("a"),WCr=o("UniSpeechSatForXVector"),UCr=o(" (UniSpeechSat model)"),HCr=l(),cC=a("li"),RCe=a("strong"),JCr=o("wav2vec2"),YCr=o(" \u2014 "),rK=a("a"),KCr=o("Wav2Vec2ForXVector"),ZCr=o(" (Wav2Vec2 model)"),e3r=l(),mC=a("li"),PCe=a("strong"),o3r=o("wav2vec2-conformer"),r3r=o(" \u2014 "),tK=a("a"),t3r=o("Wav2Vec2ConformerForXVector"),a3r=o(" (Wav2Vec2-Conformer model)"),n3r=l(),fC=a("li"),BCe=a("strong"),s3r=o("wavlm"),l3r=o(" \u2014 "),aK=a("a"),i3r=o("WavLMForXVector"),d3r=o(" (WavLM model)"),c3r=l(),gC=a("p"),m3r=o("The model is set in evaluation mode by default using "),ICe=a("code"),f3r=o("model.eval()"),g3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NCe=a("code"),h3r=o("model.train()"),u3r=l(),F(hC.$$.fragment),GYe=l(),wc=a("h2"),uC=a("a"),qCe=a("span"),F(I$.$$.fragment),p3r=l(),jCe=a("span"),_3r=o("AutoModelForMaskedImageModeling"),OYe=l(),or=a("div"),F(N$.$$.fragment),b3r=l(),Ac=a("p"),v3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nK=a("a"),F3r=o("from_pretrained()"),T3r=o(" class method or the "),sK=a("a"),M3r=o("from_config()"),E3r=o(` class
method.`),C3r=l(),q$=a("p"),w3r=o("This class cannot be instantiated directly using "),DCe=a("code"),A3r=o("__init__()"),L3r=o(" (throws an error)."),y3r=l(),qt=a("div"),F(j$.$$.fragment),x3r=l(),GCe=a("p"),$3r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),k3r=l(),Lc=a("p"),S3r=o(`Note:
Loading a model from its configuration file does `),OCe=a("strong"),R3r=o("not"),P3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),B3r=o("from_pretrained()"),I3r=o(" to load the model weights."),N3r=l(),F(pC.$$.fragment),q3r=l(),Fo=a("div"),F(D$.$$.fragment),j3r=l(),VCe=a("p"),D3r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),G3r=l(),bn=a("p"),O3r=o("The model class to instantiate is selected based on the "),XCe=a("code"),V3r=o("model_type"),X3r=o(` property of the config object (either
passed as an argument or loaded from `),zCe=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=a("code"),W3r=o("pretrained_model_name_or_path"),U3r=o(":"),H3r=l(),vn=a("ul"),_C=a("li"),WCe=a("strong"),J3r=o("deit"),Y3r=o(" \u2014 "),iK=a("a"),K3r=o("DeiTForMaskedImageModeling"),Z3r=o(" (DeiT model)"),e5r=l(),bC=a("li"),UCe=a("strong"),o5r=o("swin"),r5r=o(" \u2014 "),dK=a("a"),t5r=o("SwinForMaskedImageModeling"),a5r=o(" (Swin Transformer model)"),n5r=l(),vC=a("li"),HCe=a("strong"),s5r=o("swinv2"),l5r=o(" \u2014 "),cK=a("a"),i5r=o("Swinv2ForMaskedImageModeling"),d5r=o(" (Swin Transformer V2 model)"),c5r=l(),FC=a("li"),JCe=a("strong"),m5r=o("vit"),f5r=o(" \u2014 "),mK=a("a"),g5r=o("ViTForMaskedImageModeling"),h5r=o(" (ViT model)"),u5r=l(),TC=a("p"),p5r=o("The model is set in evaluation mode by default using "),YCe=a("code"),_5r=o("model.eval()"),b5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KCe=a("code"),v5r=o("model.train()"),F5r=l(),F(MC.$$.fragment),VYe=l(),yc=a("h2"),EC=a("a"),ZCe=a("span"),F(G$.$$.fragment),T5r=l(),e3e=a("span"),M5r=o("AutoModelForObjectDetection"),XYe=l(),rr=a("div"),F(O$.$$.fragment),E5r=l(),xc=a("p"),C5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fK=a("a"),w5r=o("from_pretrained()"),A5r=o(" class method or the "),gK=a("a"),L5r=o("from_config()"),y5r=o(` class
method.`),x5r=l(),V$=a("p"),$5r=o("This class cannot be instantiated directly using "),o3e=a("code"),k5r=o("__init__()"),S5r=o(" (throws an error)."),R5r=l(),jt=a("div"),F(X$.$$.fragment),P5r=l(),r3e=a("p"),B5r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),I5r=l(),$c=a("p"),N5r=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),q5r=o("not"),j5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),D5r=o("from_pretrained()"),G5r=o(" to load the model weights."),O5r=l(),F(CC.$$.fragment),V5r=l(),To=a("div"),F(z$.$$.fragment),X5r=l(),a3e=a("p"),z5r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Q5r=l(),Fn=a("p"),W5r=o("The model class to instantiate is selected based on the "),n3e=a("code"),U5r=o("model_type"),H5r=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(":"),e0r=l(),Q$=a("ul"),wC=a("li"),i3e=a("strong"),o0r=o("detr"),r0r=o(" \u2014 "),uK=a("a"),t0r=o("DetrForObjectDetection"),a0r=o(" (DETR model)"),n0r=l(),AC=a("li"),d3e=a("strong"),s0r=o("yolos"),l0r=o(" \u2014 "),pK=a("a"),i0r=o("YolosForObjectDetection"),d0r=o(" (YOLOS model)"),c0r=l(),LC=a("p"),m0r=o("The model is set in evaluation mode by default using "),c3e=a("code"),f0r=o("model.eval()"),g0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=a("code"),h0r=o("model.train()"),u0r=l(),F(yC.$$.fragment),zYe=l(),kc=a("h2"),xC=a("a"),f3e=a("span"),F(W$.$$.fragment),p0r=l(),g3e=a("span"),_0r=o("AutoModelForImageSegmentation"),QYe=l(),tr=a("div"),F(U$.$$.fragment),b0r=l(),Sc=a("p"),v0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_K=a("a"),F0r=o("from_pretrained()"),T0r=o(" class method or the "),bK=a("a"),M0r=o("from_config()"),E0r=o(` class
method.`),C0r=l(),H$=a("p"),w0r=o("This class cannot be instantiated directly using "),h3e=a("code"),A0r=o("__init__()"),L0r=o(" (throws an error)."),y0r=l(),Dt=a("div"),F(J$.$$.fragment),x0r=l(),u3e=a("p"),$0r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),k0r=l(),Rc=a("p"),S0r=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),R0r=o("not"),P0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),B0r=o("from_pretrained()"),I0r=o(" to load the model weights."),N0r=l(),F($C.$$.fragment),q0r=l(),Mo=a("div"),F(Y$.$$.fragment),j0r=l(),_3e=a("p"),D0r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),G0r=l(),Tn=a("p"),O0r=o("The model class to instantiate is selected based on the "),b3e=a("code"),V0r=o("model_type"),X0r=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),z0r=o("pretrained_model_name_or_path"),Q0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),W0r=o("pretrained_model_name_or_path"),U0r=o(":"),H0r=l(),T3e=a("ul"),kC=a("li"),M3e=a("strong"),J0r=o("detr"),Y0r=o(" \u2014 "),FK=a("a"),K0r=o("DetrForSegmentation"),Z0r=o(" (DETR model)"),ewr=l(),SC=a("p"),owr=o("The model is set in evaluation mode by default using "),E3e=a("code"),rwr=o("model.eval()"),twr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C3e=a("code"),awr=o("model.train()"),nwr=l(),F(RC.$$.fragment),WYe=l(),Pc=a("h2"),PC=a("a"),w3e=a("span"),F(K$.$$.fragment),swr=l(),A3e=a("span"),lwr=o("AutoModelForSemanticSegmentation"),UYe=l(),ar=a("div"),F(Z$.$$.fragment),iwr=l(),Bc=a("p"),dwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),TK=a("a"),cwr=o("from_pretrained()"),mwr=o(" class method or the "),MK=a("a"),fwr=o("from_config()"),gwr=o(` class
method.`),hwr=l(),ek=a("p"),uwr=o("This class cannot be instantiated directly using "),L3e=a("code"),pwr=o("__init__()"),_wr=o(" (throws an error)."),bwr=l(),Gt=a("div"),F(ok.$$.fragment),vwr=l(),y3e=a("p"),Fwr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Twr=l(),Ic=a("p"),Mwr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),Ewr=o("not"),Cwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),wwr=o("from_pretrained()"),Awr=o(" to load the model weights."),Lwr=l(),F(BC.$$.fragment),ywr=l(),Eo=a("div"),F(rk.$$.fragment),xwr=l(),$3e=a("p"),$wr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),kwr=l(),Mn=a("p"),Swr=o("The model class to instantiate is selected based on the "),k3e=a("code"),Rwr=o("model_type"),Pwr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),Bwr=o("pretrained_model_name_or_path"),Iwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),Nwr=o("pretrained_model_name_or_path"),qwr=o(":"),jwr=l(),ft=a("ul"),IC=a("li"),P3e=a("strong"),Dwr=o("beit"),Gwr=o(" \u2014 "),CK=a("a"),Owr=o("BeitForSemanticSegmentation"),Vwr=o(" (BEiT model)"),Xwr=l(),NC=a("li"),B3e=a("strong"),zwr=o("data2vec-vision"),Qwr=o(" \u2014 "),wK=a("a"),Wwr=o("Data2VecVisionForSemanticSegmentation"),Uwr=o(" (Data2VecVision model)"),Hwr=l(),qC=a("li"),I3e=a("strong"),Jwr=o("dpt"),Ywr=o(" \u2014 "),AK=a("a"),Kwr=o("DPTForSemanticSegmentation"),Zwr=o(" (DPT model)"),eAr=l(),jC=a("li"),N3e=a("strong"),oAr=o("mobilevit"),rAr=o(" \u2014 "),LK=a("a"),tAr=o("MobileViTForSemanticSegmentation"),aAr=o(" (MobileViT model)"),nAr=l(),DC=a("li"),q3e=a("strong"),sAr=o("segformer"),lAr=o(" \u2014 "),yK=a("a"),iAr=o("SegformerForSemanticSegmentation"),dAr=o(" (SegFormer model)"),cAr=l(),GC=a("p"),mAr=o("The model is set in evaluation mode by default using "),j3e=a("code"),fAr=o("model.eval()"),gAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D3e=a("code"),hAr=o("model.train()"),uAr=l(),F(OC.$$.fragment),HYe=l(),Nc=a("h2"),VC=a("a"),G3e=a("span"),F(tk.$$.fragment),pAr=l(),O3e=a("span"),_Ar=o("AutoModelForInstanceSegmentation"),JYe=l(),nr=a("div"),F(ak.$$.fragment),bAr=l(),qc=a("p"),vAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xK=a("a"),FAr=o("from_pretrained()"),TAr=o(" class method or the "),$K=a("a"),MAr=o("from_config()"),EAr=o(` class
method.`),CAr=l(),nk=a("p"),wAr=o("This class cannot be instantiated directly using "),V3e=a("code"),AAr=o("__init__()"),LAr=o(" (throws an error)."),yAr=l(),Ot=a("div"),F(sk.$$.fragment),xAr=l(),X3e=a("p"),$Ar=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),kAr=l(),jc=a("p"),SAr=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),RAr=o("not"),PAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),BAr=o("from_pretrained()"),IAr=o(" to load the model weights."),NAr=l(),F(XC.$$.fragment),qAr=l(),Co=a("div"),F(lk.$$.fragment),jAr=l(),Q3e=a("p"),DAr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),GAr=l(),En=a("p"),OAr=o("The model class to instantiate is selected based on the "),W3e=a("code"),VAr=o("model_type"),XAr=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),zAr=o("pretrained_model_name_or_path"),QAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),WAr=o("pretrained_model_name_or_path"),UAr=o(":"),HAr=l(),J3e=a("ul"),zC=a("li"),Y3e=a("strong"),JAr=o("maskformer"),YAr=o(" \u2014 "),SK=a("a"),KAr=o("MaskFormerForInstanceSegmentation"),ZAr=o(" (MaskFormer model)"),e6r=l(),QC=a("p"),o6r=o("The model is set in evaluation mode by default using "),K3e=a("code"),r6r=o("model.eval()"),t6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z3e=a("code"),a6r=o("model.train()"),n6r=l(),F(WC.$$.fragment),YYe=l(),Dc=a("h2"),UC=a("a"),e5e=a("span"),F(ik.$$.fragment),s6r=l(),o5e=a("span"),l6r=o("TFAutoModel"),KYe=l(),sr=a("div"),F(dk.$$.fragment),i6r=l(),Gc=a("p"),d6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RK=a("a"),c6r=o("from_pretrained()"),m6r=o(" class method or the "),PK=a("a"),f6r=o("from_config()"),g6r=o(` class
method.`),h6r=l(),ck=a("p"),u6r=o("This class cannot be instantiated directly using "),r5e=a("code"),p6r=o("__init__()"),_6r=o(" (throws an error)."),b6r=l(),Vt=a("div"),F(mk.$$.fragment),v6r=l(),t5e=a("p"),F6r=o("Instantiates one of the base model classes of the library from a configuration."),T6r=l(),Oc=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),E6r=o("not"),C6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),w6r=o("from_pretrained()"),A6r=o(" to load the model weights."),L6r=l(),F(HC.$$.fragment),y6r=l(),Ir=a("div"),F(fk.$$.fragment),x6r=l(),n5e=a("p"),$6r=o("Instantiate one of the base model classes of the library from a pretrained model."),k6r=l(),Cn=a("p"),S6r=o("The model class to instantiate is selected based on the "),s5e=a("code"),R6r=o("model_type"),P6r=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),B6r=o("pretrained_model_name_or_path"),I6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(":"),j6r=l(),N=a("ul"),JC=a("li"),d5e=a("strong"),D6r=o("albert"),G6r=o(" \u2014 "),IK=a("a"),O6r=o("TFAlbertModel"),V6r=o(" (ALBERT model)"),X6r=l(),YC=a("li"),c5e=a("strong"),z6r=o("bart"),Q6r=o(" \u2014 "),NK=a("a"),W6r=o("TFBartModel"),U6r=o(" (BART model)"),H6r=l(),KC=a("li"),m5e=a("strong"),J6r=o("bert"),Y6r=o(" \u2014 "),qK=a("a"),K6r=o("TFBertModel"),Z6r=o(" (BERT model)"),e7r=l(),ZC=a("li"),f5e=a("strong"),o7r=o("blenderbot"),r7r=o(" \u2014 "),jK=a("a"),t7r=o("TFBlenderbotModel"),a7r=o(" (Blenderbot model)"),n7r=l(),e3=a("li"),g5e=a("strong"),s7r=o("blenderbot-small"),l7r=o(" \u2014 "),DK=a("a"),i7r=o("TFBlenderbotSmallModel"),d7r=o(" (BlenderbotSmall model)"),c7r=l(),o3=a("li"),h5e=a("strong"),m7r=o("camembert"),f7r=o(" \u2014 "),GK=a("a"),g7r=o("TFCamembertModel"),h7r=o(" (CamemBERT model)"),u7r=l(),r3=a("li"),u5e=a("strong"),p7r=o("clip"),_7r=o(" \u2014 "),OK=a("a"),b7r=o("TFCLIPModel"),v7r=o(" (CLIP model)"),F7r=l(),t3=a("li"),p5e=a("strong"),T7r=o("convbert"),M7r=o(" \u2014 "),VK=a("a"),E7r=o("TFConvBertModel"),C7r=o(" (ConvBERT model)"),w7r=l(),a3=a("li"),_5e=a("strong"),A7r=o("convnext"),L7r=o(" \u2014 "),XK=a("a"),y7r=o("TFConvNextModel"),x7r=o(" (ConvNeXT model)"),$7r=l(),n3=a("li"),b5e=a("strong"),k7r=o("ctrl"),S7r=o(" \u2014 "),zK=a("a"),R7r=o("TFCTRLModel"),P7r=o(" (CTRL model)"),B7r=l(),s3=a("li"),v5e=a("strong"),I7r=o("data2vec-vision"),N7r=o(" \u2014 "),QK=a("a"),q7r=o("TFData2VecVisionModel"),j7r=o(" (Data2VecVision model)"),D7r=l(),l3=a("li"),F5e=a("strong"),G7r=o("deberta"),O7r=o(" \u2014 "),WK=a("a"),V7r=o("TFDebertaModel"),X7r=o(" (DeBERTa model)"),z7r=l(),i3=a("li"),T5e=a("strong"),Q7r=o("deberta-v2"),W7r=o(" \u2014 "),UK=a("a"),U7r=o("TFDebertaV2Model"),H7r=o(" (DeBERTa-v2 model)"),J7r=l(),d3=a("li"),M5e=a("strong"),Y7r=o("deit"),K7r=o(" \u2014 "),HK=a("a"),Z7r=o("TFDeiTModel"),eLr=o(" (DeiT model)"),oLr=l(),c3=a("li"),E5e=a("strong"),rLr=o("distilbert"),tLr=o(" \u2014 "),JK=a("a"),aLr=o("TFDistilBertModel"),nLr=o(" (DistilBERT model)"),sLr=l(),m3=a("li"),C5e=a("strong"),lLr=o("dpr"),iLr=o(" \u2014 "),YK=a("a"),dLr=o("TFDPRQuestionEncoder"),cLr=o(" (DPR model)"),mLr=l(),f3=a("li"),w5e=a("strong"),fLr=o("electra"),gLr=o(" \u2014 "),KK=a("a"),hLr=o("TFElectraModel"),uLr=o(" (ELECTRA model)"),pLr=l(),g3=a("li"),A5e=a("strong"),_Lr=o("flaubert"),bLr=o(" \u2014 "),ZK=a("a"),vLr=o("TFFlaubertModel"),FLr=o(" (FlauBERT model)"),TLr=l(),bl=a("li"),L5e=a("strong"),MLr=o("funnel"),ELr=o(" \u2014 "),eZ=a("a"),CLr=o("TFFunnelModel"),wLr=o(" or "),oZ=a("a"),ALr=o("TFFunnelBaseModel"),LLr=o(" (Funnel Transformer model)"),yLr=l(),h3=a("li"),y5e=a("strong"),xLr=o("gpt2"),$Lr=o(" \u2014 "),rZ=a("a"),kLr=o("TFGPT2Model"),SLr=o(" (OpenAI GPT-2 model)"),RLr=l(),u3=a("li"),x5e=a("strong"),PLr=o("gptj"),BLr=o(" \u2014 "),tZ=a("a"),ILr=o("TFGPTJModel"),NLr=o(" (GPT-J model)"),qLr=l(),p3=a("li"),$5e=a("strong"),jLr=o("hubert"),DLr=o(" \u2014 "),aZ=a("a"),GLr=o("TFHubertModel"),OLr=o(" (Hubert model)"),VLr=l(),_3=a("li"),k5e=a("strong"),XLr=o("layoutlm"),zLr=o(" \u2014 "),nZ=a("a"),QLr=o("TFLayoutLMModel"),WLr=o(" (LayoutLM model)"),ULr=l(),b3=a("li"),S5e=a("strong"),HLr=o("layoutlmv3"),JLr=o(" \u2014 "),sZ=a("a"),YLr=o("TFLayoutLMv3Model"),KLr=o(" (LayoutLMv3 model)"),ZLr=l(),v3=a("li"),R5e=a("strong"),eyr=o("led"),oyr=o(" \u2014 "),lZ=a("a"),ryr=o("TFLEDModel"),tyr=o(" (LED model)"),ayr=l(),F3=a("li"),P5e=a("strong"),nyr=o("longformer"),syr=o(" \u2014 "),iZ=a("a"),lyr=o("TFLongformerModel"),iyr=o(" (Longformer model)"),dyr=l(),T3=a("li"),B5e=a("strong"),cyr=o("lxmert"),myr=o(" \u2014 "),dZ=a("a"),fyr=o("TFLxmertModel"),gyr=o(" (LXMERT model)"),hyr=l(),M3=a("li"),I5e=a("strong"),uyr=o("marian"),pyr=o(" \u2014 "),cZ=a("a"),_yr=o("TFMarianModel"),byr=o(" (Marian model)"),vyr=l(),E3=a("li"),N5e=a("strong"),Fyr=o("mbart"),Tyr=o(" \u2014 "),mZ=a("a"),Myr=o("TFMBartModel"),Eyr=o(" (mBART model)"),Cyr=l(),C3=a("li"),q5e=a("strong"),wyr=o("mobilebert"),Ayr=o(" \u2014 "),fZ=a("a"),Lyr=o("TFMobileBertModel"),yyr=o(" (MobileBERT model)"),xyr=l(),w3=a("li"),j5e=a("strong"),$yr=o("mobilevit"),kyr=o(" \u2014 "),gZ=a("a"),Syr=o("TFMobileViTModel"),Ryr=o(" (MobileViT model)"),Pyr=l(),A3=a("li"),D5e=a("strong"),Byr=o("mpnet"),Iyr=o(" \u2014 "),hZ=a("a"),Nyr=o("TFMPNetModel"),qyr=o(" (MPNet model)"),jyr=l(),L3=a("li"),G5e=a("strong"),Dyr=o("mt5"),Gyr=o(" \u2014 "),uZ=a("a"),Oyr=o("TFMT5Model"),Vyr=o(" (MT5 model)"),Xyr=l(),y3=a("li"),O5e=a("strong"),zyr=o("openai-gpt"),Qyr=o(" \u2014 "),pZ=a("a"),Wyr=o("TFOpenAIGPTModel"),Uyr=o(" (OpenAI GPT model)"),Hyr=l(),x3=a("li"),V5e=a("strong"),Jyr=o("opt"),Yyr=o(" \u2014 "),_Z=a("a"),Kyr=o("TFOPTModel"),Zyr=o(" (OPT model)"),e8r=l(),$3=a("li"),X5e=a("strong"),o8r=o("pegasus"),r8r=o(" \u2014 "),bZ=a("a"),t8r=o("TFPegasusModel"),a8r=o(" (Pegasus model)"),n8r=l(),k3=a("li"),z5e=a("strong"),s8r=o("regnet"),l8r=o(" \u2014 "),vZ=a("a"),i8r=o("TFRegNetModel"),d8r=o(" (RegNet model)"),c8r=l(),S3=a("li"),Q5e=a("strong"),m8r=o("rembert"),f8r=o(" \u2014 "),FZ=a("a"),g8r=o("TFRemBertModel"),h8r=o(" (RemBERT model)"),u8r=l(),R3=a("li"),W5e=a("strong"),p8r=o("resnet"),_8r=o(" \u2014 "),TZ=a("a"),b8r=o("TFResNetModel"),v8r=o(" (ResNet model)"),F8r=l(),P3=a("li"),U5e=a("strong"),T8r=o("roberta"),M8r=o(" \u2014 "),MZ=a("a"),E8r=o("TFRobertaModel"),C8r=o(" (RoBERTa model)"),w8r=l(),B3=a("li"),H5e=a("strong"),A8r=o("roformer"),L8r=o(" \u2014 "),EZ=a("a"),y8r=o("TFRoFormerModel"),x8r=o(" (RoFormer model)"),$8r=l(),I3=a("li"),J5e=a("strong"),k8r=o("segformer"),S8r=o(" \u2014 "),CZ=a("a"),R8r=o("TFSegformerModel"),P8r=o(" (SegFormer model)"),B8r=l(),N3=a("li"),Y5e=a("strong"),I8r=o("speech_to_text"),N8r=o(" \u2014 "),wZ=a("a"),q8r=o("TFSpeech2TextModel"),j8r=o(" (Speech2Text model)"),D8r=l(),q3=a("li"),K5e=a("strong"),G8r=o("swin"),O8r=o(" \u2014 "),AZ=a("a"),V8r=o("TFSwinModel"),X8r=o(" (Swin Transformer model)"),z8r=l(),j3=a("li"),Z5e=a("strong"),Q8r=o("t5"),W8r=o(" \u2014 "),LZ=a("a"),U8r=o("TFT5Model"),H8r=o(" (T5 model)"),J8r=l(),D3=a("li"),e0e=a("strong"),Y8r=o("tapas"),K8r=o(" \u2014 "),yZ=a("a"),Z8r=o("TFTapasModel"),e9r=o(" (TAPAS model)"),o9r=l(),G3=a("li"),o0e=a("strong"),r9r=o("transfo-xl"),t9r=o(" \u2014 "),xZ=a("a"),a9r=o("TFTransfoXLModel"),n9r=o(" (Transformer-XL model)"),s9r=l(),O3=a("li"),r0e=a("strong"),l9r=o("vit"),i9r=o(" \u2014 "),$Z=a("a"),d9r=o("TFViTModel"),c9r=o(" (ViT model)"),m9r=l(),V3=a("li"),t0e=a("strong"),f9r=o("vit_mae"),g9r=o(" \u2014 "),kZ=a("a"),h9r=o("TFViTMAEModel"),u9r=o(" (ViTMAE model)"),p9r=l(),X3=a("li"),a0e=a("strong"),_9r=o("wav2vec2"),b9r=o(" \u2014 "),SZ=a("a"),v9r=o("TFWav2Vec2Model"),F9r=o(" (Wav2Vec2 model)"),T9r=l(),z3=a("li"),n0e=a("strong"),M9r=o("xglm"),E9r=o(" \u2014 "),RZ=a("a"),C9r=o("TFXGLMModel"),w9r=o(" (XGLM model)"),A9r=l(),Q3=a("li"),s0e=a("strong"),L9r=o("xlm"),y9r=o(" \u2014 "),PZ=a("a"),x9r=o("TFXLMModel"),$9r=o(" (XLM model)"),k9r=l(),W3=a("li"),l0e=a("strong"),S9r=o("xlm-roberta"),R9r=o(" \u2014 "),BZ=a("a"),P9r=o("TFXLMRobertaModel"),B9r=o(" (XLM-RoBERTa model)"),I9r=l(),U3=a("li"),i0e=a("strong"),N9r=o("xlnet"),q9r=o(" \u2014 "),IZ=a("a"),j9r=o("TFXLNetModel"),D9r=o(" (XLNet model)"),G9r=l(),F(H3.$$.fragment),ZYe=l(),Vc=a("h2"),J3=a("a"),d0e=a("span"),F(gk.$$.fragment),O9r=l(),c0e=a("span"),V9r=o("TFAutoModelForPreTraining"),eKe=l(),lr=a("div"),F(hk.$$.fragment),X9r=l(),Xc=a("p"),z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=a("a"),Q9r=o("from_pretrained()"),W9r=o(" class method or the "),qZ=a("a"),U9r=o("from_config()"),H9r=o(` class
method.`),J9r=l(),uk=a("p"),Y9r=o("This class cannot be instantiated directly using "),m0e=a("code"),K9r=o("__init__()"),Z9r=o(" (throws an error)."),exr=l(),Xt=a("div"),F(pk.$$.fragment),oxr=l(),f0e=a("p"),rxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),txr=l(),zc=a("p"),axr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),nxr=o("not"),sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=a("a"),lxr=o("from_pretrained()"),ixr=o(" to load the model weights."),dxr=l(),F(Y3.$$.fragment),cxr=l(),Nr=a("div"),F(_k.$$.fragment),mxr=l(),h0e=a("p"),fxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gxr=l(),wn=a("p"),hxr=o("The model class to instantiate is selected based on the "),u0e=a("code"),uxr=o("model_type"),pxr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),_xr=o("pretrained_model_name_or_path"),bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),vxr=o("pretrained_model_name_or_path"),Fxr=o(":"),Txr=l(),se=a("ul"),K3=a("li"),b0e=a("strong"),Mxr=o("albert"),Exr=o(" \u2014 "),DZ=a("a"),Cxr=o("TFAlbertForPreTraining"),wxr=o(" (ALBERT model)"),Axr=l(),Z3=a("li"),v0e=a("strong"),Lxr=o("bart"),yxr=o(" \u2014 "),GZ=a("a"),xxr=o("TFBartForConditionalGeneration"),$xr=o(" (BART model)"),kxr=l(),e5=a("li"),F0e=a("strong"),Sxr=o("bert"),Rxr=o(" \u2014 "),OZ=a("a"),Pxr=o("TFBertForPreTraining"),Bxr=o(" (BERT model)"),Ixr=l(),o5=a("li"),T0e=a("strong"),Nxr=o("camembert"),qxr=o(" \u2014 "),VZ=a("a"),jxr=o("TFCamembertForMaskedLM"),Dxr=o(" (CamemBERT model)"),Gxr=l(),r5=a("li"),M0e=a("strong"),Oxr=o("ctrl"),Vxr=o(" \u2014 "),XZ=a("a"),Xxr=o("TFCTRLLMHeadModel"),zxr=o(" (CTRL model)"),Qxr=l(),t5=a("li"),E0e=a("strong"),Wxr=o("distilbert"),Uxr=o(" \u2014 "),zZ=a("a"),Hxr=o("TFDistilBertForMaskedLM"),Jxr=o(" (DistilBERT model)"),Yxr=l(),a5=a("li"),C0e=a("strong"),Kxr=o("electra"),Zxr=o(" \u2014 "),QZ=a("a"),e$r=o("TFElectraForPreTraining"),o$r=o(" (ELECTRA model)"),r$r=l(),n5=a("li"),w0e=a("strong"),t$r=o("flaubert"),a$r=o(" \u2014 "),WZ=a("a"),n$r=o("TFFlaubertWithLMHeadModel"),s$r=o(" (FlauBERT model)"),l$r=l(),s5=a("li"),A0e=a("strong"),i$r=o("funnel"),d$r=o(" \u2014 "),UZ=a("a"),c$r=o("TFFunnelForPreTraining"),m$r=o(" (Funnel Transformer model)"),f$r=l(),l5=a("li"),L0e=a("strong"),g$r=o("gpt2"),h$r=o(" \u2014 "),HZ=a("a"),u$r=o("TFGPT2LMHeadModel"),p$r=o(" (OpenAI GPT-2 model)"),_$r=l(),i5=a("li"),y0e=a("strong"),b$r=o("layoutlm"),v$r=o(" \u2014 "),JZ=a("a"),F$r=o("TFLayoutLMForMaskedLM"),T$r=o(" (LayoutLM model)"),M$r=l(),d5=a("li"),x0e=a("strong"),E$r=o("lxmert"),C$r=o(" \u2014 "),YZ=a("a"),w$r=o("TFLxmertForPreTraining"),A$r=o(" (LXMERT model)"),L$r=l(),c5=a("li"),$0e=a("strong"),y$r=o("mobilebert"),x$r=o(" \u2014 "),KZ=a("a"),$$r=o("TFMobileBertForPreTraining"),k$r=o(" (MobileBERT model)"),S$r=l(),m5=a("li"),k0e=a("strong"),R$r=o("mpnet"),P$r=o(" \u2014 "),ZZ=a("a"),B$r=o("TFMPNetForMaskedLM"),I$r=o(" (MPNet model)"),N$r=l(),f5=a("li"),S0e=a("strong"),q$r=o("openai-gpt"),j$r=o(" \u2014 "),eee=a("a"),D$r=o("TFOpenAIGPTLMHeadModel"),G$r=o(" (OpenAI GPT model)"),O$r=l(),g5=a("li"),R0e=a("strong"),V$r=o("roberta"),X$r=o(" \u2014 "),oee=a("a"),z$r=o("TFRobertaForMaskedLM"),Q$r=o(" (RoBERTa model)"),W$r=l(),h5=a("li"),P0e=a("strong"),U$r=o("t5"),H$r=o(" \u2014 "),ree=a("a"),J$r=o("TFT5ForConditionalGeneration"),Y$r=o(" (T5 model)"),K$r=l(),u5=a("li"),B0e=a("strong"),Z$r=o("tapas"),ekr=o(" \u2014 "),tee=a("a"),okr=o("TFTapasForMaskedLM"),rkr=o(" (TAPAS model)"),tkr=l(),p5=a("li"),I0e=a("strong"),akr=o("transfo-xl"),nkr=o(" \u2014 "),aee=a("a"),skr=o("TFTransfoXLLMHeadModel"),lkr=o(" (Transformer-XL model)"),ikr=l(),_5=a("li"),N0e=a("strong"),dkr=o("vit_mae"),ckr=o(" \u2014 "),nee=a("a"),mkr=o("TFViTMAEForPreTraining"),fkr=o(" (ViTMAE model)"),gkr=l(),b5=a("li"),q0e=a("strong"),hkr=o("xlm"),ukr=o(" \u2014 "),see=a("a"),pkr=o("TFXLMWithLMHeadModel"),_kr=o(" (XLM model)"),bkr=l(),v5=a("li"),j0e=a("strong"),vkr=o("xlm-roberta"),Fkr=o(" \u2014 "),lee=a("a"),Tkr=o("TFXLMRobertaForMaskedLM"),Mkr=o(" (XLM-RoBERTa model)"),Ekr=l(),F5=a("li"),D0e=a("strong"),Ckr=o("xlnet"),wkr=o(" \u2014 "),iee=a("a"),Akr=o("TFXLNetLMHeadModel"),Lkr=o(" (XLNet model)"),ykr=l(),F(T5.$$.fragment),oKe=l(),Qc=a("h2"),M5=a("a"),G0e=a("span"),F(bk.$$.fragment),xkr=l(),O0e=a("span"),$kr=o("TFAutoModelForCausalLM"),rKe=l(),ir=a("div"),F(vk.$$.fragment),kkr=l(),Wc=a("p"),Skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dee=a("a"),Rkr=o("from_pretrained()"),Pkr=o(" class method or the "),cee=a("a"),Bkr=o("from_config()"),Ikr=o(` class
method.`),Nkr=l(),Fk=a("p"),qkr=o("This class cannot be instantiated directly using "),V0e=a("code"),jkr=o("__init__()"),Dkr=o(" (throws an error)."),Gkr=l(),zt=a("div"),F(Tk.$$.fragment),Okr=l(),X0e=a("p"),Vkr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Xkr=l(),Uc=a("p"),zkr=o(`Note:
Loading a model from its configuration file does `),z0e=a("strong"),Qkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),Ukr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Jkr=l(),F(E5.$$.fragment),Ykr=l(),qr=a("div"),F(Mk.$$.fragment),Kkr=l(),Q0e=a("p"),Zkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eSr=l(),An=a("p"),oSr=o("The model class to instantiate is selected based on the "),W0e=a("code"),rSr=o("model_type"),tSr=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),aSr=o("pretrained_model_name_or_path"),nSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),sSr=o("pretrained_model_name_or_path"),lSr=o(":"),iSr=l(),Me=a("ul"),C5=a("li"),J0e=a("strong"),dSr=o("bert"),cSr=o(" \u2014 "),fee=a("a"),mSr=o("TFBertLMHeadModel"),fSr=o(" (BERT model)"),gSr=l(),w5=a("li"),Y0e=a("strong"),hSr=o("camembert"),uSr=o(" \u2014 "),gee=a("a"),pSr=o("TFCamembertForCausalLM"),_Sr=o(" (CamemBERT model)"),bSr=l(),A5=a("li"),K0e=a("strong"),vSr=o("ctrl"),FSr=o(" \u2014 "),hee=a("a"),TSr=o("TFCTRLLMHeadModel"),MSr=o(" (CTRL model)"),ESr=l(),L5=a("li"),Z0e=a("strong"),CSr=o("gpt2"),wSr=o(" \u2014 "),uee=a("a"),ASr=o("TFGPT2LMHeadModel"),LSr=o(" (OpenAI GPT-2 model)"),ySr=l(),y5=a("li"),ewe=a("strong"),xSr=o("gptj"),$Sr=o(" \u2014 "),pee=a("a"),kSr=o("TFGPTJForCausalLM"),SSr=o(" (GPT-J model)"),RSr=l(),x5=a("li"),owe=a("strong"),PSr=o("openai-gpt"),BSr=o(" \u2014 "),_ee=a("a"),ISr=o("TFOpenAIGPTLMHeadModel"),NSr=o(" (OpenAI GPT model)"),qSr=l(),$5=a("li"),rwe=a("strong"),jSr=o("opt"),DSr=o(" \u2014 "),bee=a("a"),GSr=o("TFOPTForCausalLM"),OSr=o(" (OPT model)"),VSr=l(),k5=a("li"),twe=a("strong"),XSr=o("rembert"),zSr=o(" \u2014 "),vee=a("a"),QSr=o("TFRemBertForCausalLM"),WSr=o(" (RemBERT model)"),USr=l(),S5=a("li"),awe=a("strong"),HSr=o("roberta"),JSr=o(" \u2014 "),Fee=a("a"),YSr=o("TFRobertaForCausalLM"),KSr=o(" (RoBERTa model)"),ZSr=l(),R5=a("li"),nwe=a("strong"),eRr=o("roformer"),oRr=o(" \u2014 "),Tee=a("a"),rRr=o("TFRoFormerForCausalLM"),tRr=o(" (RoFormer model)"),aRr=l(),P5=a("li"),swe=a("strong"),nRr=o("transfo-xl"),sRr=o(" \u2014 "),Mee=a("a"),lRr=o("TFTransfoXLLMHeadModel"),iRr=o(" (Transformer-XL model)"),dRr=l(),B5=a("li"),lwe=a("strong"),cRr=o("xglm"),mRr=o(" \u2014 "),Eee=a("a"),fRr=o("TFXGLMForCausalLM"),gRr=o(" (XGLM model)"),hRr=l(),I5=a("li"),iwe=a("strong"),uRr=o("xlm"),pRr=o(" \u2014 "),Cee=a("a"),_Rr=o("TFXLMWithLMHeadModel"),bRr=o(" (XLM model)"),vRr=l(),N5=a("li"),dwe=a("strong"),FRr=o("xlnet"),TRr=o(" \u2014 "),wee=a("a"),MRr=o("TFXLNetLMHeadModel"),ERr=o(" (XLNet model)"),CRr=l(),F(q5.$$.fragment),tKe=l(),Hc=a("h2"),j5=a("a"),cwe=a("span"),F(Ek.$$.fragment),wRr=l(),mwe=a("span"),ARr=o("TFAutoModelForImageClassification"),aKe=l(),dr=a("div"),F(Ck.$$.fragment),LRr=l(),Jc=a("p"),yRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Aee=a("a"),xRr=o("from_pretrained()"),$Rr=o(" class method or the "),Lee=a("a"),kRr=o("from_config()"),SRr=o(` class
method.`),RRr=l(),wk=a("p"),PRr=o("This class cannot be instantiated directly using "),fwe=a("code"),BRr=o("__init__()"),IRr=o(" (throws an error)."),NRr=l(),Qt=a("div"),F(Ak.$$.fragment),qRr=l(),gwe=a("p"),jRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DRr=l(),Yc=a("p"),GRr=o(`Note:
Loading a model from its configuration file does `),hwe=a("strong"),ORr=o("not"),VRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),XRr=o("from_pretrained()"),zRr=o(" to load the model weights."),QRr=l(),F(D5.$$.fragment),WRr=l(),jr=a("div"),F(Lk.$$.fragment),URr=l(),uwe=a("p"),HRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JRr=l(),Ln=a("p"),YRr=o("The model class to instantiate is selected based on the "),pwe=a("code"),KRr=o("model_type"),ZRr=o(` property of the config object (either
passed as an argument or loaded from `),_we=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(":"),aPr=l(),Be=a("ul"),G5=a("li"),vwe=a("strong"),nPr=o("convnext"),sPr=o(" \u2014 "),xee=a("a"),lPr=o("TFConvNextForImageClassification"),iPr=o(" (ConvNeXT model)"),dPr=l(),O5=a("li"),Fwe=a("strong"),cPr=o("data2vec-vision"),mPr=o(" \u2014 "),$ee=a("a"),fPr=o("TFData2VecVisionForImageClassification"),gPr=o(" (Data2VecVision model)"),hPr=l(),vl=a("li"),Twe=a("strong"),uPr=o("deit"),pPr=o(" \u2014 "),kee=a("a"),_Pr=o("TFDeiTForImageClassification"),bPr=o(" or "),See=a("a"),vPr=o("TFDeiTForImageClassificationWithTeacher"),FPr=o(" (DeiT model)"),TPr=l(),V5=a("li"),Mwe=a("strong"),MPr=o("mobilevit"),EPr=o(" \u2014 "),Ree=a("a"),CPr=o("TFMobileViTForImageClassification"),wPr=o(" (MobileViT model)"),APr=l(),X5=a("li"),Ewe=a("strong"),LPr=o("regnet"),yPr=o(" \u2014 "),Pee=a("a"),xPr=o("TFRegNetForImageClassification"),$Pr=o(" (RegNet model)"),kPr=l(),z5=a("li"),Cwe=a("strong"),SPr=o("resnet"),RPr=o(" \u2014 "),Bee=a("a"),PPr=o("TFResNetForImageClassification"),BPr=o(" (ResNet model)"),IPr=l(),Q5=a("li"),wwe=a("strong"),NPr=o("segformer"),qPr=o(" \u2014 "),Iee=a("a"),jPr=o("TFSegformerForImageClassification"),DPr=o(" (SegFormer model)"),GPr=l(),W5=a("li"),Awe=a("strong"),OPr=o("swin"),VPr=o(" \u2014 "),Nee=a("a"),XPr=o("TFSwinForImageClassification"),zPr=o(" (Swin Transformer model)"),QPr=l(),U5=a("li"),Lwe=a("strong"),WPr=o("vit"),UPr=o(" \u2014 "),qee=a("a"),HPr=o("TFViTForImageClassification"),JPr=o(" (ViT model)"),YPr=l(),F(H5.$$.fragment),nKe=l(),Kc=a("h2"),J5=a("a"),ywe=a("span"),F(yk.$$.fragment),KPr=l(),xwe=a("span"),ZPr=o("TFAutoModelForSemanticSegmentation"),sKe=l(),cr=a("div"),F(xk.$$.fragment),eBr=l(),Zc=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jee=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),Dee=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),$k=a("p"),lBr=o("This class cannot be instantiated directly using "),$we=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),Wt=a("div"),F(kk.$$.fragment),mBr=l(),kwe=a("p"),fBr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gBr=l(),em=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),Swe=a("strong"),uBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=a("a"),_Br=o("from_pretrained()"),bBr=o(" to load the model weights."),vBr=l(),F(Y5.$$.fragment),FBr=l(),Dr=a("div"),F(Sk.$$.fragment),TBr=l(),Rwe=a("p"),MBr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),EBr=l(),yn=a("p"),CBr=o("The model class to instantiate is selected based on the "),Pwe=a("code"),wBr=o("model_type"),ABr=o(` property of the config object (either
passed as an argument or loaded from `),Bwe=a("code"),LBr=o("pretrained_model_name_or_path"),yBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(":"),kBr=l(),om=a("ul"),K5=a("li"),Nwe=a("strong"),SBr=o("data2vec-vision"),RBr=o(" \u2014 "),Oee=a("a"),PBr=o("TFData2VecVisionForSemanticSegmentation"),BBr=o(" (Data2VecVision model)"),IBr=l(),Z5=a("li"),qwe=a("strong"),NBr=o("mobilevit"),qBr=o(" \u2014 "),Vee=a("a"),jBr=o("TFMobileViTForSemanticSegmentation"),DBr=o(" (MobileViT model)"),GBr=l(),e0=a("li"),jwe=a("strong"),OBr=o("segformer"),VBr=o(" \u2014 "),Xee=a("a"),XBr=o("TFSegformerForSemanticSegmentation"),zBr=o(" (SegFormer model)"),QBr=l(),F(o0.$$.fragment),lKe=l(),rm=a("h2"),r0=a("a"),Dwe=a("span"),F(Rk.$$.fragment),WBr=l(),Gwe=a("span"),UBr=o("TFAutoModelForMaskedLM"),iKe=l(),mr=a("div"),F(Pk.$$.fragment),HBr=l(),tm=a("p"),JBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=a("a"),YBr=o("from_pretrained()"),KBr=o(" class method or the "),Qee=a("a"),ZBr=o("from_config()"),eIr=o(` class
method.`),oIr=l(),Bk=a("p"),rIr=o("This class cannot be instantiated directly using "),Owe=a("code"),tIr=o("__init__()"),aIr=o(" (throws an error)."),nIr=l(),Ut=a("div"),F(Ik.$$.fragment),sIr=l(),Vwe=a("p"),lIr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iIr=l(),am=a("p"),dIr=o(`Note:
Loading a model from its configuration file does `),Xwe=a("strong"),cIr=o("not"),mIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),fIr=o("from_pretrained()"),gIr=o(" to load the model weights."),hIr=l(),F(t0.$$.fragment),uIr=l(),Gr=a("div"),F(Nk.$$.fragment),pIr=l(),zwe=a("p"),_Ir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bIr=l(),xn=a("p"),vIr=o("The model class to instantiate is selected based on the "),Qwe=a("code"),FIr=o("model_type"),TIr=o(` property of the config object (either
passed as an argument or loaded from `),Wwe=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=a("code"),CIr=o("pretrained_model_name_or_path"),wIr=o(":"),AIr=l(),fe=a("ul"),a0=a("li"),Hwe=a("strong"),LIr=o("albert"),yIr=o(" \u2014 "),Uee=a("a"),xIr=o("TFAlbertForMaskedLM"),$Ir=o(" (ALBERT model)"),kIr=l(),n0=a("li"),Jwe=a("strong"),SIr=o("bert"),RIr=o(" \u2014 "),Hee=a("a"),PIr=o("TFBertForMaskedLM"),BIr=o(" (BERT model)"),IIr=l(),s0=a("li"),Ywe=a("strong"),NIr=o("camembert"),qIr=o(" \u2014 "),Jee=a("a"),jIr=o("TFCamembertForMaskedLM"),DIr=o(" (CamemBERT model)"),GIr=l(),l0=a("li"),Kwe=a("strong"),OIr=o("convbert"),VIr=o(" \u2014 "),Yee=a("a"),XIr=o("TFConvBertForMaskedLM"),zIr=o(" (ConvBERT model)"),QIr=l(),i0=a("li"),Zwe=a("strong"),WIr=o("deberta"),UIr=o(" \u2014 "),Kee=a("a"),HIr=o("TFDebertaForMaskedLM"),JIr=o(" (DeBERTa model)"),YIr=l(),d0=a("li"),eAe=a("strong"),KIr=o("deberta-v2"),ZIr=o(" \u2014 "),Zee=a("a"),eNr=o("TFDebertaV2ForMaskedLM"),oNr=o(" (DeBERTa-v2 model)"),rNr=l(),c0=a("li"),oAe=a("strong"),tNr=o("distilbert"),aNr=o(" \u2014 "),eoe=a("a"),nNr=o("TFDistilBertForMaskedLM"),sNr=o(" (DistilBERT model)"),lNr=l(),m0=a("li"),rAe=a("strong"),iNr=o("electra"),dNr=o(" \u2014 "),ooe=a("a"),cNr=o("TFElectraForMaskedLM"),mNr=o(" (ELECTRA model)"),fNr=l(),f0=a("li"),tAe=a("strong"),gNr=o("flaubert"),hNr=o(" \u2014 "),roe=a("a"),uNr=o("TFFlaubertWithLMHeadModel"),pNr=o(" (FlauBERT model)"),_Nr=l(),g0=a("li"),aAe=a("strong"),bNr=o("funnel"),vNr=o(" \u2014 "),toe=a("a"),FNr=o("TFFunnelForMaskedLM"),TNr=o(" (Funnel Transformer model)"),MNr=l(),h0=a("li"),nAe=a("strong"),ENr=o("layoutlm"),CNr=o(" \u2014 "),aoe=a("a"),wNr=o("TFLayoutLMForMaskedLM"),ANr=o(" (LayoutLM model)"),LNr=l(),u0=a("li"),sAe=a("strong"),yNr=o("longformer"),xNr=o(" \u2014 "),noe=a("a"),$Nr=o("TFLongformerForMaskedLM"),kNr=o(" (Longformer model)"),SNr=l(),p0=a("li"),lAe=a("strong"),RNr=o("mobilebert"),PNr=o(" \u2014 "),soe=a("a"),BNr=o("TFMobileBertForMaskedLM"),INr=o(" (MobileBERT model)"),NNr=l(),_0=a("li"),iAe=a("strong"),qNr=o("mpnet"),jNr=o(" \u2014 "),loe=a("a"),DNr=o("TFMPNetForMaskedLM"),GNr=o(" (MPNet model)"),ONr=l(),b0=a("li"),dAe=a("strong"),VNr=o("rembert"),XNr=o(" \u2014 "),ioe=a("a"),zNr=o("TFRemBertForMaskedLM"),QNr=o(" (RemBERT model)"),WNr=l(),v0=a("li"),cAe=a("strong"),UNr=o("roberta"),HNr=o(" \u2014 "),doe=a("a"),JNr=o("TFRobertaForMaskedLM"),YNr=o(" (RoBERTa model)"),KNr=l(),F0=a("li"),mAe=a("strong"),ZNr=o("roformer"),eqr=o(" \u2014 "),coe=a("a"),oqr=o("TFRoFormerForMaskedLM"),rqr=o(" (RoFormer model)"),tqr=l(),T0=a("li"),fAe=a("strong"),aqr=o("tapas"),nqr=o(" \u2014 "),moe=a("a"),sqr=o("TFTapasForMaskedLM"),lqr=o(" (TAPAS model)"),iqr=l(),M0=a("li"),gAe=a("strong"),dqr=o("xlm"),cqr=o(" \u2014 "),foe=a("a"),mqr=o("TFXLMWithLMHeadModel"),fqr=o(" (XLM model)"),gqr=l(),E0=a("li"),hAe=a("strong"),hqr=o("xlm-roberta"),uqr=o(" \u2014 "),goe=a("a"),pqr=o("TFXLMRobertaForMaskedLM"),_qr=o(" (XLM-RoBERTa model)"),bqr=l(),F(C0.$$.fragment),dKe=l(),nm=a("h2"),w0=a("a"),uAe=a("span"),F(qk.$$.fragment),vqr=l(),pAe=a("span"),Fqr=o("TFAutoModelForSeq2SeqLM"),cKe=l(),fr=a("div"),F(jk.$$.fragment),Tqr=l(),sm=a("p"),Mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=a("a"),Eqr=o("from_pretrained()"),Cqr=o(" class method or the "),uoe=a("a"),wqr=o("from_config()"),Aqr=o(` class
method.`),Lqr=l(),Dk=a("p"),yqr=o("This class cannot be instantiated directly using "),_Ae=a("code"),xqr=o("__init__()"),$qr=o(" (throws an error)."),kqr=l(),Ht=a("div"),F(Gk.$$.fragment),Sqr=l(),bAe=a("p"),Rqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pqr=l(),lm=a("p"),Bqr=o(`Note:
Loading a model from its configuration file does `),vAe=a("strong"),Iqr=o("not"),Nqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=a("a"),qqr=o("from_pretrained()"),jqr=o(" to load the model weights."),Dqr=l(),F(A0.$$.fragment),Gqr=l(),Or=a("div"),F(Ok.$$.fragment),Oqr=l(),FAe=a("p"),Vqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xqr=l(),$n=a("p"),zqr=o("The model class to instantiate is selected based on the "),TAe=a("code"),Qqr=o("model_type"),Wqr=o(` property of the config object (either
passed as an argument or loaded from `),MAe=a("code"),Uqr=o("pretrained_model_name_or_path"),Hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=a("code"),Jqr=o("pretrained_model_name_or_path"),Yqr=o(":"),Kqr=l(),ye=a("ul"),L0=a("li"),CAe=a("strong"),Zqr=o("bart"),ejr=o(" \u2014 "),_oe=a("a"),ojr=o("TFBartForConditionalGeneration"),rjr=o(" (BART model)"),tjr=l(),y0=a("li"),wAe=a("strong"),ajr=o("blenderbot"),njr=o(" \u2014 "),boe=a("a"),sjr=o("TFBlenderbotForConditionalGeneration"),ljr=o(" (Blenderbot model)"),ijr=l(),x0=a("li"),AAe=a("strong"),djr=o("blenderbot-small"),cjr=o(" \u2014 "),voe=a("a"),mjr=o("TFBlenderbotSmallForConditionalGeneration"),fjr=o(" (BlenderbotSmall model)"),gjr=l(),$0=a("li"),LAe=a("strong"),hjr=o("encoder-decoder"),ujr=o(" \u2014 "),Foe=a("a"),pjr=o("TFEncoderDecoderModel"),_jr=o(" (Encoder decoder model)"),bjr=l(),k0=a("li"),yAe=a("strong"),vjr=o("led"),Fjr=o(" \u2014 "),Toe=a("a"),Tjr=o("TFLEDForConditionalGeneration"),Mjr=o(" (LED model)"),Ejr=l(),S0=a("li"),xAe=a("strong"),Cjr=o("marian"),wjr=o(" \u2014 "),Moe=a("a"),Ajr=o("TFMarianMTModel"),Ljr=o(" (Marian model)"),yjr=l(),R0=a("li"),$Ae=a("strong"),xjr=o("mbart"),$jr=o(" \u2014 "),Eoe=a("a"),kjr=o("TFMBartForConditionalGeneration"),Sjr=o(" (mBART model)"),Rjr=l(),P0=a("li"),kAe=a("strong"),Pjr=o("mt5"),Bjr=o(" \u2014 "),Coe=a("a"),Ijr=o("TFMT5ForConditionalGeneration"),Njr=o(" (MT5 model)"),qjr=l(),B0=a("li"),SAe=a("strong"),jjr=o("pegasus"),Djr=o(" \u2014 "),woe=a("a"),Gjr=o("TFPegasusForConditionalGeneration"),Ojr=o(" (Pegasus model)"),Vjr=l(),I0=a("li"),RAe=a("strong"),Xjr=o("t5"),zjr=o(" \u2014 "),Aoe=a("a"),Qjr=o("TFT5ForConditionalGeneration"),Wjr=o(" (T5 model)"),Ujr=l(),F(N0.$$.fragment),mKe=l(),im=a("h2"),q0=a("a"),PAe=a("span"),F(Vk.$$.fragment),Hjr=l(),BAe=a("span"),Jjr=o("TFAutoModelForSequenceClassification"),fKe=l(),gr=a("div"),F(Xk.$$.fragment),Yjr=l(),dm=a("p"),Kjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=a("a"),Zjr=o("from_pretrained()"),eDr=o(" class method or the "),yoe=a("a"),oDr=o("from_config()"),rDr=o(` class
method.`),tDr=l(),zk=a("p"),aDr=o("This class cannot be instantiated directly using "),IAe=a("code"),nDr=o("__init__()"),sDr=o(" (throws an error)."),lDr=l(),Jt=a("div"),F(Qk.$$.fragment),iDr=l(),NAe=a("p"),dDr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cDr=l(),cm=a("p"),mDr=o(`Note:
Loading a model from its configuration file does `),qAe=a("strong"),fDr=o("not"),gDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),hDr=o("from_pretrained()"),uDr=o(" to load the model weights."),pDr=l(),F(j0.$$.fragment),_Dr=l(),Vr=a("div"),F(Wk.$$.fragment),bDr=l(),jAe=a("p"),vDr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FDr=l(),kn=a("p"),TDr=o("The model class to instantiate is selected based on the "),DAe=a("code"),MDr=o("model_type"),EDr=o(` property of the config object (either
passed as an argument or loaded from `),GAe=a("code"),CDr=o("pretrained_model_name_or_path"),wDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=a("code"),ADr=o("pretrained_model_name_or_path"),LDr=o(":"),yDr=l(),re=a("ul"),D0=a("li"),VAe=a("strong"),xDr=o("albert"),$Dr=o(" \u2014 "),$oe=a("a"),kDr=o("TFAlbertForSequenceClassification"),SDr=o(" (ALBERT model)"),RDr=l(),G0=a("li"),XAe=a("strong"),PDr=o("bert"),BDr=o(" \u2014 "),koe=a("a"),IDr=o("TFBertForSequenceClassification"),NDr=o(" (BERT model)"),qDr=l(),O0=a("li"),zAe=a("strong"),jDr=o("camembert"),DDr=o(" \u2014 "),Soe=a("a"),GDr=o("TFCamembertForSequenceClassification"),ODr=o(" (CamemBERT model)"),VDr=l(),V0=a("li"),QAe=a("strong"),XDr=o("convbert"),zDr=o(" \u2014 "),Roe=a("a"),QDr=o("TFConvBertForSequenceClassification"),WDr=o(" (ConvBERT model)"),UDr=l(),X0=a("li"),WAe=a("strong"),HDr=o("ctrl"),JDr=o(" \u2014 "),Poe=a("a"),YDr=o("TFCTRLForSequenceClassification"),KDr=o(" (CTRL model)"),ZDr=l(),z0=a("li"),UAe=a("strong"),eGr=o("deberta"),oGr=o(" \u2014 "),Boe=a("a"),rGr=o("TFDebertaForSequenceClassification"),tGr=o(" (DeBERTa model)"),aGr=l(),Q0=a("li"),HAe=a("strong"),nGr=o("deberta-v2"),sGr=o(" \u2014 "),Ioe=a("a"),lGr=o("TFDebertaV2ForSequenceClassification"),iGr=o(" (DeBERTa-v2 model)"),dGr=l(),W0=a("li"),JAe=a("strong"),cGr=o("distilbert"),mGr=o(" \u2014 "),Noe=a("a"),fGr=o("TFDistilBertForSequenceClassification"),gGr=o(" (DistilBERT model)"),hGr=l(),U0=a("li"),YAe=a("strong"),uGr=o("electra"),pGr=o(" \u2014 "),qoe=a("a"),_Gr=o("TFElectraForSequenceClassification"),bGr=o(" (ELECTRA model)"),vGr=l(),H0=a("li"),KAe=a("strong"),FGr=o("flaubert"),TGr=o(" \u2014 "),joe=a("a"),MGr=o("TFFlaubertForSequenceClassification"),EGr=o(" (FlauBERT model)"),CGr=l(),J0=a("li"),ZAe=a("strong"),wGr=o("funnel"),AGr=o(" \u2014 "),Doe=a("a"),LGr=o("TFFunnelForSequenceClassification"),yGr=o(" (Funnel Transformer model)"),xGr=l(),Y0=a("li"),e6e=a("strong"),$Gr=o("gpt2"),kGr=o(" \u2014 "),Goe=a("a"),SGr=o("TFGPT2ForSequenceClassification"),RGr=o(" (OpenAI GPT-2 model)"),PGr=l(),K0=a("li"),o6e=a("strong"),BGr=o("gptj"),IGr=o(" \u2014 "),Ooe=a("a"),NGr=o("TFGPTJForSequenceClassification"),qGr=o(" (GPT-J model)"),jGr=l(),Z0=a("li"),r6e=a("strong"),DGr=o("layoutlm"),GGr=o(" \u2014 "),Voe=a("a"),OGr=o("TFLayoutLMForSequenceClassification"),VGr=o(" (LayoutLM model)"),XGr=l(),ew=a("li"),t6e=a("strong"),zGr=o("layoutlmv3"),QGr=o(" \u2014 "),Xoe=a("a"),WGr=o("TFLayoutLMv3ForSequenceClassification"),UGr=o(" (LayoutLMv3 model)"),HGr=l(),ow=a("li"),a6e=a("strong"),JGr=o("longformer"),YGr=o(" \u2014 "),zoe=a("a"),KGr=o("TFLongformerForSequenceClassification"),ZGr=o(" (Longformer model)"),eOr=l(),rw=a("li"),n6e=a("strong"),oOr=o("mobilebert"),rOr=o(" \u2014 "),Qoe=a("a"),tOr=o("TFMobileBertForSequenceClassification"),aOr=o(" (MobileBERT model)"),nOr=l(),tw=a("li"),s6e=a("strong"),sOr=o("mpnet"),lOr=o(" \u2014 "),Woe=a("a"),iOr=o("TFMPNetForSequenceClassification"),dOr=o(" (MPNet model)"),cOr=l(),aw=a("li"),l6e=a("strong"),mOr=o("openai-gpt"),fOr=o(" \u2014 "),Uoe=a("a"),gOr=o("TFOpenAIGPTForSequenceClassification"),hOr=o(" (OpenAI GPT model)"),uOr=l(),nw=a("li"),i6e=a("strong"),pOr=o("rembert"),_Or=o(" \u2014 "),Hoe=a("a"),bOr=o("TFRemBertForSequenceClassification"),vOr=o(" (RemBERT model)"),FOr=l(),sw=a("li"),d6e=a("strong"),TOr=o("roberta"),MOr=o(" \u2014 "),Joe=a("a"),EOr=o("TFRobertaForSequenceClassification"),COr=o(" (RoBERTa model)"),wOr=l(),lw=a("li"),c6e=a("strong"),AOr=o("roformer"),LOr=o(" \u2014 "),Yoe=a("a"),yOr=o("TFRoFormerForSequenceClassification"),xOr=o(" (RoFormer model)"),$Or=l(),iw=a("li"),m6e=a("strong"),kOr=o("tapas"),SOr=o(" \u2014 "),Koe=a("a"),ROr=o("TFTapasForSequenceClassification"),POr=o(" (TAPAS model)"),BOr=l(),dw=a("li"),f6e=a("strong"),IOr=o("transfo-xl"),NOr=o(" \u2014 "),Zoe=a("a"),qOr=o("TFTransfoXLForSequenceClassification"),jOr=o(" (Transformer-XL model)"),DOr=l(),cw=a("li"),g6e=a("strong"),GOr=o("xlm"),OOr=o(" \u2014 "),ere=a("a"),VOr=o("TFXLMForSequenceClassification"),XOr=o(" (XLM model)"),zOr=l(),mw=a("li"),h6e=a("strong"),QOr=o("xlm-roberta"),WOr=o(" \u2014 "),ore=a("a"),UOr=o("TFXLMRobertaForSequenceClassification"),HOr=o(" (XLM-RoBERTa model)"),JOr=l(),fw=a("li"),u6e=a("strong"),YOr=o("xlnet"),KOr=o(" \u2014 "),rre=a("a"),ZOr=o("TFXLNetForSequenceClassification"),eVr=o(" (XLNet model)"),oVr=l(),F(gw.$$.fragment),gKe=l(),mm=a("h2"),hw=a("a"),p6e=a("span"),F(Uk.$$.fragment),rVr=l(),_6e=a("span"),tVr=o("TFAutoModelForMultipleChoice"),hKe=l(),hr=a("div"),F(Hk.$$.fragment),aVr=l(),fm=a("p"),nVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tre=a("a"),sVr=o("from_pretrained()"),lVr=o(" class method or the "),are=a("a"),iVr=o("from_config()"),dVr=o(` class
method.`),cVr=l(),Jk=a("p"),mVr=o("This class cannot be instantiated directly using "),b6e=a("code"),fVr=o("__init__()"),gVr=o(" (throws an error)."),hVr=l(),Yt=a("div"),F(Yk.$$.fragment),uVr=l(),v6e=a("p"),pVr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_Vr=l(),gm=a("p"),bVr=o(`Note:
Loading a model from its configuration file does `),F6e=a("strong"),vVr=o("not"),FVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("a"),TVr=o("from_pretrained()"),MVr=o(" to load the model weights."),EVr=l(),F(uw.$$.fragment),CVr=l(),Xr=a("div"),F(Kk.$$.fragment),wVr=l(),T6e=a("p"),AVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LVr=l(),Sn=a("p"),yVr=o("The model class to instantiate is selected based on the "),M6e=a("code"),xVr=o("model_type"),$Vr=o(` property of the config object (either
passed as an argument or loaded from `),E6e=a("code"),kVr=o("pretrained_model_name_or_path"),SVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=a("code"),RVr=o("pretrained_model_name_or_path"),PVr=o(":"),BVr=l(),ve=a("ul"),pw=a("li"),w6e=a("strong"),IVr=o("albert"),NVr=o(" \u2014 "),sre=a("a"),qVr=o("TFAlbertForMultipleChoice"),jVr=o(" (ALBERT model)"),DVr=l(),_w=a("li"),A6e=a("strong"),GVr=o("bert"),OVr=o(" \u2014 "),lre=a("a"),VVr=o("TFBertForMultipleChoice"),XVr=o(" (BERT model)"),zVr=l(),bw=a("li"),L6e=a("strong"),QVr=o("camembert"),WVr=o(" \u2014 "),ire=a("a"),UVr=o("TFCamembertForMultipleChoice"),HVr=o(" (CamemBERT model)"),JVr=l(),vw=a("li"),y6e=a("strong"),YVr=o("convbert"),KVr=o(" \u2014 "),dre=a("a"),ZVr=o("TFConvBertForMultipleChoice"),eXr=o(" (ConvBERT model)"),oXr=l(),Fw=a("li"),x6e=a("strong"),rXr=o("distilbert"),tXr=o(" \u2014 "),cre=a("a"),aXr=o("TFDistilBertForMultipleChoice"),nXr=o(" (DistilBERT model)"),sXr=l(),Tw=a("li"),$6e=a("strong"),lXr=o("electra"),iXr=o(" \u2014 "),mre=a("a"),dXr=o("TFElectraForMultipleChoice"),cXr=o(" (ELECTRA model)"),mXr=l(),Mw=a("li"),k6e=a("strong"),fXr=o("flaubert"),gXr=o(" \u2014 "),fre=a("a"),hXr=o("TFFlaubertForMultipleChoice"),uXr=o(" (FlauBERT model)"),pXr=l(),Ew=a("li"),S6e=a("strong"),_Xr=o("funnel"),bXr=o(" \u2014 "),gre=a("a"),vXr=o("TFFunnelForMultipleChoice"),FXr=o(" (Funnel Transformer model)"),TXr=l(),Cw=a("li"),R6e=a("strong"),MXr=o("longformer"),EXr=o(" \u2014 "),hre=a("a"),CXr=o("TFLongformerForMultipleChoice"),wXr=o(" (Longformer model)"),AXr=l(),ww=a("li"),P6e=a("strong"),LXr=o("mobilebert"),yXr=o(" \u2014 "),ure=a("a"),xXr=o("TFMobileBertForMultipleChoice"),$Xr=o(" (MobileBERT model)"),kXr=l(),Aw=a("li"),B6e=a("strong"),SXr=o("mpnet"),RXr=o(" \u2014 "),pre=a("a"),PXr=o("TFMPNetForMultipleChoice"),BXr=o(" (MPNet model)"),IXr=l(),Lw=a("li"),I6e=a("strong"),NXr=o("rembert"),qXr=o(" \u2014 "),_re=a("a"),jXr=o("TFRemBertForMultipleChoice"),DXr=o(" (RemBERT model)"),GXr=l(),yw=a("li"),N6e=a("strong"),OXr=o("roberta"),VXr=o(" \u2014 "),bre=a("a"),XXr=o("TFRobertaForMultipleChoice"),zXr=o(" (RoBERTa model)"),QXr=l(),xw=a("li"),q6e=a("strong"),WXr=o("roformer"),UXr=o(" \u2014 "),vre=a("a"),HXr=o("TFRoFormerForMultipleChoice"),JXr=o(" (RoFormer model)"),YXr=l(),$w=a("li"),j6e=a("strong"),KXr=o("xlm"),ZXr=o(" \u2014 "),Fre=a("a"),ezr=o("TFXLMForMultipleChoice"),ozr=o(" (XLM model)"),rzr=l(),kw=a("li"),D6e=a("strong"),tzr=o("xlm-roberta"),azr=o(" \u2014 "),Tre=a("a"),nzr=o("TFXLMRobertaForMultipleChoice"),szr=o(" (XLM-RoBERTa model)"),lzr=l(),Sw=a("li"),G6e=a("strong"),izr=o("xlnet"),dzr=o(" \u2014 "),Mre=a("a"),czr=o("TFXLNetForMultipleChoice"),mzr=o(" (XLNet model)"),fzr=l(),F(Rw.$$.fragment),uKe=l(),hm=a("h2"),Pw=a("a"),O6e=a("span"),F(Zk.$$.fragment),gzr=l(),V6e=a("span"),hzr=o("TFAutoModelForNextSentencePrediction"),pKe=l(),ur=a("div"),F(eS.$$.fragment),uzr=l(),um=a("p"),pzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ere=a("a"),_zr=o("from_pretrained()"),bzr=o(" class method or the "),Cre=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),oS=a("p"),Mzr=o("This class cannot be instantiated directly using "),X6e=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Kt=a("div"),F(rS.$$.fragment),Azr=l(),z6e=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yzr=l(),pm=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),Q6e=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(Bw.$$.fragment),Bzr=l(),zr=a("div"),F(tS.$$.fragment),Izr=l(),W6e=a("p"),Nzr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qzr=l(),Rn=a("p"),jzr=o("The model class to instantiate is selected based on the "),U6e=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Qzr=l(),aS=a("ul"),Iw=a("li"),Y6e=a("strong"),Wzr=o("bert"),Uzr=o(" \u2014 "),Are=a("a"),Hzr=o("TFBertForNextSentencePrediction"),Jzr=o(" (BERT model)"),Yzr=l(),Nw=a("li"),K6e=a("strong"),Kzr=o("mobilebert"),Zzr=o(" \u2014 "),Lre=a("a"),eQr=o("TFMobileBertForNextSentencePrediction"),oQr=o(" (MobileBERT model)"),rQr=l(),F(qw.$$.fragment),_Ke=l(),_m=a("h2"),jw=a("a"),Z6e=a("span"),F(nS.$$.fragment),tQr=l(),e7e=a("span"),aQr=o("TFAutoModelForTableQuestionAnswering"),bKe=l(),pr=a("div"),F(sS.$$.fragment),nQr=l(),bm=a("p"),sQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yre=a("a"),lQr=o("from_pretrained()"),iQr=o(" class method or the "),xre=a("a"),dQr=o("from_config()"),cQr=o(` class
method.`),mQr=l(),lS=a("p"),fQr=o("This class cannot be instantiated directly using "),o7e=a("code"),gQr=o("__init__()"),hQr=o(" (throws an error)."),uQr=l(),Zt=a("div"),F(iS.$$.fragment),pQr=l(),r7e=a("p"),_Qr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bQr=l(),vm=a("p"),vQr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),FQr=o("not"),TQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=a("a"),MQr=o("from_pretrained()"),EQr=o(" to load the model weights."),CQr=l(),F(Dw.$$.fragment),wQr=l(),Qr=a("div"),F(dS.$$.fragment),AQr=l(),a7e=a("p"),LQr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),yQr=l(),Pn=a("p"),xQr=o("The model class to instantiate is selected based on the "),n7e=a("code"),$Qr=o("model_type"),kQr=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),SQr=o("pretrained_model_name_or_path"),RQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),PQr=o("pretrained_model_name_or_path"),BQr=o(":"),IQr=l(),i7e=a("ul"),Gw=a("li"),d7e=a("strong"),NQr=o("tapas"),qQr=o(" \u2014 "),kre=a("a"),jQr=o("TFTapasForQuestionAnswering"),DQr=o(" (TAPAS model)"),GQr=l(),F(Ow.$$.fragment),vKe=l(),Fm=a("h2"),Vw=a("a"),c7e=a("span"),F(cS.$$.fragment),OQr=l(),m7e=a("span"),VQr=o("TFAutoModelForDocumentQuestionAnswering"),FKe=l(),_r=a("div"),F(mS.$$.fragment),XQr=l(),Tm=a("p"),zQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Sre=a("a"),QQr=o("from_pretrained()"),WQr=o(" class method or the "),Rre=a("a"),UQr=o("from_config()"),HQr=o(` class
method.`),JQr=l(),fS=a("p"),YQr=o("This class cannot be instantiated directly using "),f7e=a("code"),KQr=o("__init__()"),ZQr=o(" (throws an error)."),eWr=l(),ea=a("div"),F(gS.$$.fragment),oWr=l(),g7e=a("p"),rWr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),tWr=l(),Mm=a("p"),aWr=o(`Note:
Loading a model from its configuration file does `),h7e=a("strong"),nWr=o("not"),sWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=a("a"),lWr=o("from_pretrained()"),iWr=o(" to load the model weights."),dWr=l(),F(Xw.$$.fragment),cWr=l(),Wr=a("div"),F(hS.$$.fragment),mWr=l(),u7e=a("p"),fWr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),gWr=l(),Bn=a("p"),hWr=o("The model class to instantiate is selected based on the "),p7e=a("code"),uWr=o("model_type"),pWr=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),_Wr=o("pretrained_model_name_or_path"),bWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=a("code"),vWr=o("pretrained_model_name_or_path"),FWr=o(":"),TWr=l(),v7e=a("ul"),zw=a("li"),F7e=a("strong"),MWr=o("layoutlm"),EWr=o(" \u2014 "),Bre=a("a"),CWr=o("TFLayoutLMForQuestionAnswering"),wWr=o(" (LayoutLM model)"),AWr=l(),F(Qw.$$.fragment),TKe=l(),Em=a("h2"),Ww=a("a"),T7e=a("span"),F(uS.$$.fragment),LWr=l(),M7e=a("span"),yWr=o("TFAutoModelForTokenClassification"),MKe=l(),br=a("div"),F(pS.$$.fragment),xWr=l(),Cm=a("p"),$Wr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ire=a("a"),kWr=o("from_pretrained()"),SWr=o(" class method or the "),Nre=a("a"),RWr=o("from_config()"),PWr=o(` class
method.`),BWr=l(),_S=a("p"),IWr=o("This class cannot be instantiated directly using "),E7e=a("code"),NWr=o("__init__()"),qWr=o(" (throws an error)."),jWr=l(),oa=a("div"),F(bS.$$.fragment),DWr=l(),C7e=a("p"),GWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OWr=l(),wm=a("p"),VWr=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),XWr=o("not"),zWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=a("a"),QWr=o("from_pretrained()"),WWr=o(" to load the model weights."),UWr=l(),F(Uw.$$.fragment),HWr=l(),Ur=a("div"),F(vS.$$.fragment),JWr=l(),A7e=a("p"),YWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KWr=l(),In=a("p"),ZWr=o("The model class to instantiate is selected based on the "),L7e=a("code"),eUr=o("model_type"),oUr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),rUr=o("pretrained_model_name_or_path"),tUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),aUr=o("pretrained_model_name_or_path"),nUr=o(":"),sUr=l(),de=a("ul"),Hw=a("li"),$7e=a("strong"),lUr=o("albert"),iUr=o(" \u2014 "),jre=a("a"),dUr=o("TFAlbertForTokenClassification"),cUr=o(" (ALBERT model)"),mUr=l(),Jw=a("li"),k7e=a("strong"),fUr=o("bert"),gUr=o(" \u2014 "),Dre=a("a"),hUr=o("TFBertForTokenClassification"),uUr=o(" (BERT model)"),pUr=l(),Yw=a("li"),S7e=a("strong"),_Ur=o("camembert"),bUr=o(" \u2014 "),Gre=a("a"),vUr=o("TFCamembertForTokenClassification"),FUr=o(" (CamemBERT model)"),TUr=l(),Kw=a("li"),R7e=a("strong"),MUr=o("convbert"),EUr=o(" \u2014 "),Ore=a("a"),CUr=o("TFConvBertForTokenClassification"),wUr=o(" (ConvBERT model)"),AUr=l(),Zw=a("li"),P7e=a("strong"),LUr=o("deberta"),yUr=o(" \u2014 "),Vre=a("a"),xUr=o("TFDebertaForTokenClassification"),$Ur=o(" (DeBERTa model)"),kUr=l(),eA=a("li"),B7e=a("strong"),SUr=o("deberta-v2"),RUr=o(" \u2014 "),Xre=a("a"),PUr=o("TFDebertaV2ForTokenClassification"),BUr=o(" (DeBERTa-v2 model)"),IUr=l(),oA=a("li"),I7e=a("strong"),NUr=o("distilbert"),qUr=o(" \u2014 "),zre=a("a"),jUr=o("TFDistilBertForTokenClassification"),DUr=o(" (DistilBERT model)"),GUr=l(),rA=a("li"),N7e=a("strong"),OUr=o("electra"),VUr=o(" \u2014 "),Qre=a("a"),XUr=o("TFElectraForTokenClassification"),zUr=o(" (ELECTRA model)"),QUr=l(),tA=a("li"),q7e=a("strong"),WUr=o("flaubert"),UUr=o(" \u2014 "),Wre=a("a"),HUr=o("TFFlaubertForTokenClassification"),JUr=o(" (FlauBERT model)"),YUr=l(),aA=a("li"),j7e=a("strong"),KUr=o("funnel"),ZUr=o(" \u2014 "),Ure=a("a"),eHr=o("TFFunnelForTokenClassification"),oHr=o(" (Funnel Transformer model)"),rHr=l(),nA=a("li"),D7e=a("strong"),tHr=o("layoutlm"),aHr=o(" \u2014 "),Hre=a("a"),nHr=o("TFLayoutLMForTokenClassification"),sHr=o(" (LayoutLM model)"),lHr=l(),sA=a("li"),G7e=a("strong"),iHr=o("layoutlmv3"),dHr=o(" \u2014 "),Jre=a("a"),cHr=o("TFLayoutLMv3ForTokenClassification"),mHr=o(" (LayoutLMv3 model)"),fHr=l(),lA=a("li"),O7e=a("strong"),gHr=o("longformer"),hHr=o(" \u2014 "),Yre=a("a"),uHr=o("TFLongformerForTokenClassification"),pHr=o(" (Longformer model)"),_Hr=l(),iA=a("li"),V7e=a("strong"),bHr=o("mobilebert"),vHr=o(" \u2014 "),Kre=a("a"),FHr=o("TFMobileBertForTokenClassification"),THr=o(" (MobileBERT model)"),MHr=l(),dA=a("li"),X7e=a("strong"),EHr=o("mpnet"),CHr=o(" \u2014 "),Zre=a("a"),wHr=o("TFMPNetForTokenClassification"),AHr=o(" (MPNet model)"),LHr=l(),cA=a("li"),z7e=a("strong"),yHr=o("rembert"),xHr=o(" \u2014 "),ete=a("a"),$Hr=o("TFRemBertForTokenClassification"),kHr=o(" (RemBERT model)"),SHr=l(),mA=a("li"),Q7e=a("strong"),RHr=o("roberta"),PHr=o(" \u2014 "),ote=a("a"),BHr=o("TFRobertaForTokenClassification"),IHr=o(" (RoBERTa model)"),NHr=l(),fA=a("li"),W7e=a("strong"),qHr=o("roformer"),jHr=o(" \u2014 "),rte=a("a"),DHr=o("TFRoFormerForTokenClassification"),GHr=o(" (RoFormer model)"),OHr=l(),gA=a("li"),U7e=a("strong"),VHr=o("xlm"),XHr=o(" \u2014 "),tte=a("a"),zHr=o("TFXLMForTokenClassification"),QHr=o(" (XLM model)"),WHr=l(),hA=a("li"),H7e=a("strong"),UHr=o("xlm-roberta"),HHr=o(" \u2014 "),ate=a("a"),JHr=o("TFXLMRobertaForTokenClassification"),YHr=o(" (XLM-RoBERTa model)"),KHr=l(),uA=a("li"),J7e=a("strong"),ZHr=o("xlnet"),eJr=o(" \u2014 "),nte=a("a"),oJr=o("TFXLNetForTokenClassification"),rJr=o(" (XLNet model)"),tJr=l(),F(pA.$$.fragment),EKe=l(),Am=a("h2"),_A=a("a"),Y7e=a("span"),F(FS.$$.fragment),aJr=l(),K7e=a("span"),nJr=o("TFAutoModelForQuestionAnswering"),CKe=l(),vr=a("div"),F(TS.$$.fragment),sJr=l(),Lm=a("p"),lJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ste=a("a"),iJr=o("from_pretrained()"),dJr=o(" class method or the "),lte=a("a"),cJr=o("from_config()"),mJr=o(` class
method.`),fJr=l(),MS=a("p"),gJr=o("This class cannot be instantiated directly using "),Z7e=a("code"),hJr=o("__init__()"),uJr=o(" (throws an error)."),pJr=l(),ra=a("div"),F(ES.$$.fragment),_Jr=l(),eLe=a("p"),bJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vJr=l(),ym=a("p"),FJr=o(`Note:
Loading a model from its configuration file does `),oLe=a("strong"),TJr=o("not"),MJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=a("a"),EJr=o("from_pretrained()"),CJr=o(" to load the model weights."),wJr=l(),F(bA.$$.fragment),AJr=l(),Hr=a("div"),F(CS.$$.fragment),LJr=l(),rLe=a("p"),yJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xJr=l(),Nn=a("p"),$Jr=o("The model class to instantiate is selected based on the "),tLe=a("code"),kJr=o("model_type"),SJr=o(` property of the config object (either
passed as an argument or loaded from `),aLe=a("code"),RJr=o("pretrained_model_name_or_path"),PJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nLe=a("code"),BJr=o("pretrained_model_name_or_path"),IJr=o(":"),NJr=l(),ce=a("ul"),vA=a("li"),sLe=a("strong"),qJr=o("albert"),jJr=o(" \u2014 "),dte=a("a"),DJr=o("TFAlbertForQuestionAnswering"),GJr=o(" (ALBERT model)"),OJr=l(),FA=a("li"),lLe=a("strong"),VJr=o("bert"),XJr=o(" \u2014 "),cte=a("a"),zJr=o("TFBertForQuestionAnswering"),QJr=o(" (BERT model)"),WJr=l(),TA=a("li"),iLe=a("strong"),UJr=o("camembert"),HJr=o(" \u2014 "),mte=a("a"),JJr=o("TFCamembertForQuestionAnswering"),YJr=o(" (CamemBERT model)"),KJr=l(),MA=a("li"),dLe=a("strong"),ZJr=o("convbert"),eYr=o(" \u2014 "),fte=a("a"),oYr=o("TFConvBertForQuestionAnswering"),rYr=o(" (ConvBERT model)"),tYr=l(),EA=a("li"),cLe=a("strong"),aYr=o("deberta"),nYr=o(" \u2014 "),gte=a("a"),sYr=o("TFDebertaForQuestionAnswering"),lYr=o(" (DeBERTa model)"),iYr=l(),CA=a("li"),mLe=a("strong"),dYr=o("deberta-v2"),cYr=o(" \u2014 "),hte=a("a"),mYr=o("TFDebertaV2ForQuestionAnswering"),fYr=o(" (DeBERTa-v2 model)"),gYr=l(),wA=a("li"),fLe=a("strong"),hYr=o("distilbert"),uYr=o(" \u2014 "),ute=a("a"),pYr=o("TFDistilBertForQuestionAnswering"),_Yr=o(" (DistilBERT model)"),bYr=l(),AA=a("li"),gLe=a("strong"),vYr=o("electra"),FYr=o(" \u2014 "),pte=a("a"),TYr=o("TFElectraForQuestionAnswering"),MYr=o(" (ELECTRA model)"),EYr=l(),LA=a("li"),hLe=a("strong"),CYr=o("flaubert"),wYr=o(" \u2014 "),_te=a("a"),AYr=o("TFFlaubertForQuestionAnsweringSimple"),LYr=o(" (FlauBERT model)"),yYr=l(),yA=a("li"),uLe=a("strong"),xYr=o("funnel"),$Yr=o(" \u2014 "),bte=a("a"),kYr=o("TFFunnelForQuestionAnswering"),SYr=o(" (Funnel Transformer model)"),RYr=l(),xA=a("li"),pLe=a("strong"),PYr=o("gptj"),BYr=o(" \u2014 "),vte=a("a"),IYr=o("TFGPTJForQuestionAnswering"),NYr=o(" (GPT-J model)"),qYr=l(),$A=a("li"),_Le=a("strong"),jYr=o("layoutlmv3"),DYr=o(" \u2014 "),Fte=a("a"),GYr=o("TFLayoutLMv3ForQuestionAnswering"),OYr=o(" (LayoutLMv3 model)"),VYr=l(),kA=a("li"),bLe=a("strong"),XYr=o("longformer"),zYr=o(" \u2014 "),Tte=a("a"),QYr=o("TFLongformerForQuestionAnswering"),WYr=o(" (Longformer model)"),UYr=l(),SA=a("li"),vLe=a("strong"),HYr=o("mobilebert"),JYr=o(" \u2014 "),Mte=a("a"),YYr=o("TFMobileBertForQuestionAnswering"),KYr=o(" (MobileBERT model)"),ZYr=l(),RA=a("li"),FLe=a("strong"),eKr=o("mpnet"),oKr=o(" \u2014 "),Ete=a("a"),rKr=o("TFMPNetForQuestionAnswering"),tKr=o(" (MPNet model)"),aKr=l(),PA=a("li"),TLe=a("strong"),nKr=o("rembert"),sKr=o(" \u2014 "),Cte=a("a"),lKr=o("TFRemBertForQuestionAnswering"),iKr=o(" (RemBERT model)"),dKr=l(),BA=a("li"),MLe=a("strong"),cKr=o("roberta"),mKr=o(" \u2014 "),wte=a("a"),fKr=o("TFRobertaForQuestionAnswering"),gKr=o(" (RoBERTa model)"),hKr=l(),IA=a("li"),ELe=a("strong"),uKr=o("roformer"),pKr=o(" \u2014 "),Ate=a("a"),_Kr=o("TFRoFormerForQuestionAnswering"),bKr=o(" (RoFormer model)"),vKr=l(),NA=a("li"),CLe=a("strong"),FKr=o("xlm"),TKr=o(" \u2014 "),Lte=a("a"),MKr=o("TFXLMForQuestionAnsweringSimple"),EKr=o(" (XLM model)"),CKr=l(),qA=a("li"),wLe=a("strong"),wKr=o("xlm-roberta"),AKr=o(" \u2014 "),yte=a("a"),LKr=o("TFXLMRobertaForQuestionAnswering"),yKr=o(" (XLM-RoBERTa model)"),xKr=l(),jA=a("li"),ALe=a("strong"),$Kr=o("xlnet"),kKr=o(" \u2014 "),xte=a("a"),SKr=o("TFXLNetForQuestionAnsweringSimple"),RKr=o(" (XLNet model)"),PKr=l(),F(DA.$$.fragment),wKe=l(),xm=a("h2"),GA=a("a"),LLe=a("span"),F(wS.$$.fragment),BKr=l(),yLe=a("span"),IKr=o("TFAutoModelForVision2Seq"),AKe=l(),Fr=a("div"),F(AS.$$.fragment),NKr=l(),$m=a("p"),qKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$te=a("a"),jKr=o("from_pretrained()"),DKr=o(" class method or the "),kte=a("a"),GKr=o("from_config()"),OKr=o(` class
method.`),VKr=l(),LS=a("p"),XKr=o("This class cannot be instantiated directly using "),xLe=a("code"),zKr=o("__init__()"),QKr=o(" (throws an error)."),WKr=l(),ta=a("div"),F(yS.$$.fragment),UKr=l(),$Le=a("p"),HKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JKr=l(),km=a("p"),YKr=o(`Note:
Loading a model from its configuration file does `),kLe=a("strong"),KKr=o("not"),ZKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=a("a"),eZr=o("from_pretrained()"),oZr=o(" to load the model weights."),rZr=l(),F(OA.$$.fragment),tZr=l(),Jr=a("div"),F(xS.$$.fragment),aZr=l(),SLe=a("p"),nZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sZr=l(),qn=a("p"),lZr=o("The model class to instantiate is selected based on the "),RLe=a("code"),iZr=o("model_type"),dZr=o(` property of the config object (either
passed as an argument or loaded from `),PLe=a("code"),cZr=o("pretrained_model_name_or_path"),mZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=a("code"),fZr=o("pretrained_model_name_or_path"),gZr=o(":"),hZr=l(),ILe=a("ul"),VA=a("li"),NLe=a("strong"),uZr=o("vision-encoder-decoder"),pZr=o(" \u2014 "),Rte=a("a"),_Zr=o("TFVisionEncoderDecoderModel"),bZr=o(" (Vision Encoder decoder model)"),vZr=l(),F(XA.$$.fragment),LKe=l(),Sm=a("h2"),zA=a("a"),qLe=a("span"),F($S.$$.fragment),FZr=l(),jLe=a("span"),TZr=o("TFAutoModelForSpeechSeq2Seq"),yKe=l(),Tr=a("div"),F(kS.$$.fragment),MZr=l(),Rm=a("p"),EZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pte=a("a"),CZr=o("from_pretrained()"),wZr=o(" class method or the "),Bte=a("a"),AZr=o("from_config()"),LZr=o(` class
method.`),yZr=l(),SS=a("p"),xZr=o("This class cannot be instantiated directly using "),DLe=a("code"),$Zr=o("__init__()"),kZr=o(" (throws an error)."),SZr=l(),aa=a("div"),F(RS.$$.fragment),RZr=l(),GLe=a("p"),PZr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BZr=l(),Pm=a("p"),IZr=o(`Note:
Loading a model from its configuration file does `),OLe=a("strong"),NZr=o("not"),qZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ite=a("a"),jZr=o("from_pretrained()"),DZr=o(" to load the model weights."),GZr=l(),F(QA.$$.fragment),OZr=l(),Yr=a("div"),F(PS.$$.fragment),VZr=l(),VLe=a("p"),XZr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zZr=l(),jn=a("p"),QZr=o("The model class to instantiate is selected based on the "),XLe=a("code"),WZr=o("model_type"),UZr=o(` property of the config object (either
passed as an argument or loaded from `),zLe=a("code"),HZr=o("pretrained_model_name_or_path"),JZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QLe=a("code"),YZr=o("pretrained_model_name_or_path"),KZr=o(":"),ZZr=l(),WLe=a("ul"),WA=a("li"),ULe=a("strong"),eet=o("speech_to_text"),oet=o(" \u2014 "),Nte=a("a"),ret=o("TFSpeech2TextForConditionalGeneration"),tet=o(" (Speech2Text model)"),aet=l(),F(UA.$$.fragment),xKe=l(),Bm=a("h2"),HA=a("a"),HLe=a("span"),F(BS.$$.fragment),net=l(),JLe=a("span"),set=o("FlaxAutoModel"),$Ke=l(),Mr=a("div"),F(IS.$$.fragment),iet=l(),Im=a("p"),det=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qte=a("a"),cet=o("from_pretrained()"),met=o(" class method or the "),jte=a("a"),fet=o("from_config()"),get=o(` class
method.`),het=l(),NS=a("p"),uet=o("This class cannot be instantiated directly using "),YLe=a("code"),pet=o("__init__()"),_et=o(" (throws an error)."),bet=l(),na=a("div"),F(qS.$$.fragment),vet=l(),KLe=a("p"),Fet=o("Instantiates one of the base model classes of the library from a configuration."),Tet=l(),Nm=a("p"),Met=o(`Note:
Loading a model from its configuration file does `),ZLe=a("strong"),Eet=o("not"),Cet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=a("a"),wet=o("from_pretrained()"),Aet=o(" to load the model weights."),Let=l(),F(JA.$$.fragment),yet=l(),Kr=a("div"),F(jS.$$.fragment),xet=l(),eye=a("p"),$et=o("Instantiate one of the base model classes of the library from a pretrained model."),ket=l(),Dn=a("p"),Set=o("The model class to instantiate is selected based on the "),oye=a("code"),Ret=o("model_type"),Pet=o(` property of the config object (either
passed as an argument or loaded from `),rye=a("code"),Bet=o("pretrained_model_name_or_path"),Iet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tye=a("code"),Net=o("pretrained_model_name_or_path"),qet=o(":"),jet=l(),te=a("ul"),YA=a("li"),aye=a("strong"),Det=o("albert"),Get=o(" \u2014 "),Gte=a("a"),Oet=o("FlaxAlbertModel"),Vet=o(" (ALBERT model)"),Xet=l(),KA=a("li"),nye=a("strong"),zet=o("bart"),Qet=o(" \u2014 "),Ote=a("a"),Wet=o("FlaxBartModel"),Uet=o(" (BART model)"),Het=l(),ZA=a("li"),sye=a("strong"),Jet=o("beit"),Yet=o(" \u2014 "),Vte=a("a"),Ket=o("FlaxBeitModel"),Zet=o(" (BEiT model)"),eot=l(),e6=a("li"),lye=a("strong"),oot=o("bert"),rot=o(" \u2014 "),Xte=a("a"),tot=o("FlaxBertModel"),aot=o(" (BERT model)"),not=l(),o6=a("li"),iye=a("strong"),sot=o("big_bird"),lot=o(" \u2014 "),zte=a("a"),iot=o("FlaxBigBirdModel"),dot=o(" (BigBird model)"),cot=l(),r6=a("li"),dye=a("strong"),mot=o("blenderbot"),fot=o(" \u2014 "),Qte=a("a"),got=o("FlaxBlenderbotModel"),hot=o(" (Blenderbot model)"),uot=l(),t6=a("li"),cye=a("strong"),pot=o("blenderbot-small"),_ot=o(" \u2014 "),Wte=a("a"),bot=o("FlaxBlenderbotSmallModel"),vot=o(" (BlenderbotSmall model)"),Fot=l(),a6=a("li"),mye=a("strong"),Tot=o("clip"),Mot=o(" \u2014 "),Ute=a("a"),Eot=o("FlaxCLIPModel"),Cot=o(" (CLIP model)"),wot=l(),n6=a("li"),fye=a("strong"),Aot=o("distilbert"),Lot=o(" \u2014 "),Hte=a("a"),yot=o("FlaxDistilBertModel"),xot=o(" (DistilBERT model)"),$ot=l(),s6=a("li"),gye=a("strong"),kot=o("electra"),Sot=o(" \u2014 "),Jte=a("a"),Rot=o("FlaxElectraModel"),Pot=o(" (ELECTRA model)"),Bot=l(),l6=a("li"),hye=a("strong"),Iot=o("gpt2"),Not=o(" \u2014 "),Yte=a("a"),qot=o("FlaxGPT2Model"),jot=o(" (OpenAI GPT-2 model)"),Dot=l(),i6=a("li"),uye=a("strong"),Got=o("gpt_neo"),Oot=o(" \u2014 "),Kte=a("a"),Vot=o("FlaxGPTNeoModel"),Xot=o(" (GPT Neo model)"),zot=l(),d6=a("li"),pye=a("strong"),Qot=o("gptj"),Wot=o(" \u2014 "),Zte=a("a"),Uot=o("FlaxGPTJModel"),Hot=o(" (GPT-J model)"),Jot=l(),c6=a("li"),_ye=a("strong"),Yot=o("longt5"),Kot=o(" \u2014 "),eae=a("a"),Zot=o("FlaxLongT5Model"),ert=o(" (LongT5 model)"),ort=l(),m6=a("li"),bye=a("strong"),rrt=o("marian"),trt=o(" \u2014 "),oae=a("a"),art=o("FlaxMarianModel"),nrt=o(" (Marian model)"),srt=l(),f6=a("li"),vye=a("strong"),lrt=o("mbart"),irt=o(" \u2014 "),rae=a("a"),drt=o("FlaxMBartModel"),crt=o(" (mBART model)"),mrt=l(),g6=a("li"),Fye=a("strong"),frt=o("mt5"),grt=o(" \u2014 "),tae=a("a"),hrt=o("FlaxMT5Model"),urt=o(" (MT5 model)"),prt=l(),h6=a("li"),Tye=a("strong"),_rt=o("opt"),brt=o(" \u2014 "),aae=a("a"),vrt=o("FlaxOPTModel"),Frt=o(" (OPT model)"),Trt=l(),u6=a("li"),Mye=a("strong"),Mrt=o("pegasus"),Ert=o(" \u2014 "),nae=a("a"),Crt=o("FlaxPegasusModel"),wrt=o(" (Pegasus model)"),Art=l(),p6=a("li"),Eye=a("strong"),Lrt=o("roberta"),yrt=o(" \u2014 "),sae=a("a"),xrt=o("FlaxRobertaModel"),$rt=o(" (RoBERTa model)"),krt=l(),_6=a("li"),Cye=a("strong"),Srt=o("roformer"),Rrt=o(" \u2014 "),lae=a("a"),Prt=o("FlaxRoFormerModel"),Brt=o(" (RoFormer model)"),Irt=l(),b6=a("li"),wye=a("strong"),Nrt=o("t5"),qrt=o(" \u2014 "),iae=a("a"),jrt=o("FlaxT5Model"),Drt=o(" (T5 model)"),Grt=l(),v6=a("li"),Aye=a("strong"),Ort=o("vision-text-dual-encoder"),Vrt=o(" \u2014 "),dae=a("a"),Xrt=o("FlaxVisionTextDualEncoderModel"),zrt=o(" (VisionTextDualEncoder model)"),Qrt=l(),F6=a("li"),Lye=a("strong"),Wrt=o("vit"),Urt=o(" \u2014 "),cae=a("a"),Hrt=o("FlaxViTModel"),Jrt=o(" (ViT model)"),Yrt=l(),T6=a("li"),yye=a("strong"),Krt=o("wav2vec2"),Zrt=o(" \u2014 "),mae=a("a"),ett=o("FlaxWav2Vec2Model"),ott=o(" (Wav2Vec2 model)"),rtt=l(),M6=a("li"),xye=a("strong"),ttt=o("xglm"),att=o(" \u2014 "),fae=a("a"),ntt=o("FlaxXGLMModel"),stt=o(" (XGLM model)"),ltt=l(),E6=a("li"),$ye=a("strong"),itt=o("xlm-roberta"),dtt=o(" \u2014 "),gae=a("a"),ctt=o("FlaxXLMRobertaModel"),mtt=o(" (XLM-RoBERTa model)"),ftt=l(),F(C6.$$.fragment),kKe=l(),qm=a("h2"),w6=a("a"),kye=a("span"),F(DS.$$.fragment),gtt=l(),Sye=a("span"),htt=o("FlaxAutoModelForCausalLM"),SKe=l(),Er=a("div"),F(GS.$$.fragment),utt=l(),jm=a("p"),ptt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hae=a("a"),_tt=o("from_pretrained()"),btt=o(" class method or the "),uae=a("a"),vtt=o("from_config()"),Ftt=o(` class
method.`),Ttt=l(),OS=a("p"),Mtt=o("This class cannot be instantiated directly using "),Rye=a("code"),Ett=o("__init__()"),Ctt=o(" (throws an error)."),wtt=l(),sa=a("div"),F(VS.$$.fragment),Att=l(),Pye=a("p"),Ltt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ytt=l(),Dm=a("p"),xtt=o(`Note:
Loading a model from its configuration file does `),Bye=a("strong"),$tt=o("not"),ktt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pae=a("a"),Stt=o("from_pretrained()"),Rtt=o(" to load the model weights."),Ptt=l(),F(A6.$$.fragment),Btt=l(),Zr=a("div"),F(XS.$$.fragment),Itt=l(),Iye=a("p"),Ntt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qtt=l(),Gn=a("p"),jtt=o("The model class to instantiate is selected based on the "),Nye=a("code"),Dtt=o("model_type"),Gtt=o(` property of the config object (either
passed as an argument or loaded from `),qye=a("code"),Ott=o("pretrained_model_name_or_path"),Vtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jye=a("code"),Xtt=o("pretrained_model_name_or_path"),ztt=o(":"),Qtt=l(),xe=a("ul"),L6=a("li"),Dye=a("strong"),Wtt=o("bart"),Utt=o(" \u2014 "),_ae=a("a"),Htt=o("FlaxBartForCausalLM"),Jtt=o(" (BART model)"),Ytt=l(),y6=a("li"),Gye=a("strong"),Ktt=o("bert"),Ztt=o(" \u2014 "),bae=a("a"),eat=o("FlaxBertForCausalLM"),oat=o(" (BERT model)"),rat=l(),x6=a("li"),Oye=a("strong"),tat=o("big_bird"),aat=o(" \u2014 "),vae=a("a"),nat=o("FlaxBigBirdForCausalLM"),sat=o(" (BigBird model)"),lat=l(),$6=a("li"),Vye=a("strong"),iat=o("electra"),dat=o(" \u2014 "),Fae=a("a"),cat=o("FlaxElectraForCausalLM"),mat=o(" (ELECTRA model)"),fat=l(),k6=a("li"),Xye=a("strong"),gat=o("gpt2"),hat=o(" \u2014 "),Tae=a("a"),uat=o("FlaxGPT2LMHeadModel"),pat=o(" (OpenAI GPT-2 model)"),_at=l(),S6=a("li"),zye=a("strong"),bat=o("gpt_neo"),vat=o(" \u2014 "),Mae=a("a"),Fat=o("FlaxGPTNeoForCausalLM"),Tat=o(" (GPT Neo model)"),Mat=l(),R6=a("li"),Qye=a("strong"),Eat=o("gptj"),Cat=o(" \u2014 "),Eae=a("a"),wat=o("FlaxGPTJForCausalLM"),Aat=o(" (GPT-J model)"),Lat=l(),P6=a("li"),Wye=a("strong"),yat=o("opt"),xat=o(" \u2014 "),Cae=a("a"),$at=o("FlaxOPTForCausalLM"),kat=o(" (OPT model)"),Sat=l(),B6=a("li"),Uye=a("strong"),Rat=o("roberta"),Pat=o(" \u2014 "),wae=a("a"),Bat=o("FlaxRobertaForCausalLM"),Iat=o(" (RoBERTa model)"),Nat=l(),I6=a("li"),Hye=a("strong"),qat=o("xglm"),jat=o(" \u2014 "),Aae=a("a"),Dat=o("FlaxXGLMForCausalLM"),Gat=o(" (XGLM model)"),Oat=l(),F(N6.$$.fragment),RKe=l(),Gm=a("h2"),q6=a("a"),Jye=a("span"),F(zS.$$.fragment),Vat=l(),Yye=a("span"),Xat=o("FlaxAutoModelForPreTraining"),PKe=l(),Cr=a("div"),F(QS.$$.fragment),zat=l(),Om=a("p"),Qat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lae=a("a"),Wat=o("from_pretrained()"),Uat=o(" class method or the "),yae=a("a"),Hat=o("from_config()"),Jat=o(` class
method.`),Yat=l(),WS=a("p"),Kat=o("This class cannot be instantiated directly using "),Kye=a("code"),Zat=o("__init__()"),ent=o(" (throws an error)."),ont=l(),la=a("div"),F(US.$$.fragment),rnt=l(),Zye=a("p"),tnt=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ant=l(),Vm=a("p"),nnt=o(`Note:
Loading a model from its configuration file does `),e8e=a("strong"),snt=o("not"),lnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("a"),int=o("from_pretrained()"),dnt=o(" to load the model weights."),cnt=l(),F(j6.$$.fragment),mnt=l(),et=a("div"),F(HS.$$.fragment),fnt=l(),o8e=a("p"),gnt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hnt=l(),On=a("p"),unt=o("The model class to instantiate is selected based on the "),r8e=a("code"),pnt=o("model_type"),_nt=o(` property of the config object (either
passed as an argument or loaded from `),t8e=a("code"),bnt=o("pretrained_model_name_or_path"),vnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a8e=a("code"),Fnt=o("pretrained_model_name_or_path"),Tnt=o(":"),Mnt=l(),Ee=a("ul"),D6=a("li"),n8e=a("strong"),Ent=o("albert"),Cnt=o(" \u2014 "),$ae=a("a"),wnt=o("FlaxAlbertForPreTraining"),Ant=o(" (ALBERT model)"),Lnt=l(),G6=a("li"),s8e=a("strong"),ynt=o("bart"),xnt=o(" \u2014 "),kae=a("a"),$nt=o("FlaxBartForConditionalGeneration"),knt=o(" (BART model)"),Snt=l(),O6=a("li"),l8e=a("strong"),Rnt=o("bert"),Pnt=o(" \u2014 "),Sae=a("a"),Bnt=o("FlaxBertForPreTraining"),Int=o(" (BERT model)"),Nnt=l(),V6=a("li"),i8e=a("strong"),qnt=o("big_bird"),jnt=o(" \u2014 "),Rae=a("a"),Dnt=o("FlaxBigBirdForPreTraining"),Gnt=o(" (BigBird model)"),Ont=l(),X6=a("li"),d8e=a("strong"),Vnt=o("electra"),Xnt=o(" \u2014 "),Pae=a("a"),znt=o("FlaxElectraForPreTraining"),Qnt=o(" (ELECTRA model)"),Wnt=l(),z6=a("li"),c8e=a("strong"),Unt=o("longt5"),Hnt=o(" \u2014 "),Bae=a("a"),Jnt=o("FlaxLongT5ForConditionalGeneration"),Ynt=o(" (LongT5 model)"),Knt=l(),Q6=a("li"),m8e=a("strong"),Znt=o("mbart"),est=o(" \u2014 "),Iae=a("a"),ost=o("FlaxMBartForConditionalGeneration"),rst=o(" (mBART model)"),tst=l(),W6=a("li"),f8e=a("strong"),ast=o("mt5"),nst=o(" \u2014 "),Nae=a("a"),sst=o("FlaxMT5ForConditionalGeneration"),lst=o(" (MT5 model)"),ist=l(),U6=a("li"),g8e=a("strong"),dst=o("roberta"),cst=o(" \u2014 "),qae=a("a"),mst=o("FlaxRobertaForMaskedLM"),fst=o(" (RoBERTa model)"),gst=l(),H6=a("li"),h8e=a("strong"),hst=o("roformer"),ust=o(" \u2014 "),jae=a("a"),pst=o("FlaxRoFormerForMaskedLM"),_st=o(" (RoFormer model)"),bst=l(),J6=a("li"),u8e=a("strong"),vst=o("t5"),Fst=o(" \u2014 "),Dae=a("a"),Tst=o("FlaxT5ForConditionalGeneration"),Mst=o(" (T5 model)"),Est=l(),Y6=a("li"),p8e=a("strong"),Cst=o("wav2vec2"),wst=o(" \u2014 "),Gae=a("a"),Ast=o("FlaxWav2Vec2ForPreTraining"),Lst=o(" (Wav2Vec2 model)"),yst=l(),K6=a("li"),_8e=a("strong"),xst=o("xlm-roberta"),$st=o(" \u2014 "),Oae=a("a"),kst=o("FlaxXLMRobertaForMaskedLM"),Sst=o(" (XLM-RoBERTa model)"),Rst=l(),F(Z6.$$.fragment),BKe=l(),Xm=a("h2"),e7=a("a"),b8e=a("span"),F(JS.$$.fragment),Pst=l(),v8e=a("span"),Bst=o("FlaxAutoModelForMaskedLM"),IKe=l(),wr=a("div"),F(YS.$$.fragment),Ist=l(),zm=a("p"),Nst=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Vae=a("a"),qst=o("from_pretrained()"),jst=o(" class method or the "),Xae=a("a"),Dst=o("from_config()"),Gst=o(` class
method.`),Ost=l(),KS=a("p"),Vst=o("This class cannot be instantiated directly using "),F8e=a("code"),Xst=o("__init__()"),zst=o(" (throws an error)."),Qst=l(),ia=a("div"),F(ZS.$$.fragment),Wst=l(),T8e=a("p"),Ust=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hst=l(),Qm=a("p"),Jst=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),Yst=o("not"),Kst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=a("a"),Zst=o("from_pretrained()"),elt=o(" to load the model weights."),olt=l(),F(o7.$$.fragment),rlt=l(),ot=a("div"),F(eR.$$.fragment),tlt=l(),E8e=a("p"),alt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nlt=l(),Vn=a("p"),slt=o("The model class to instantiate is selected based on the "),C8e=a("code"),llt=o("model_type"),ilt=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),dlt=o("pretrained_model_name_or_path"),clt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),mlt=o("pretrained_model_name_or_path"),flt=o(":"),glt=l(),$e=a("ul"),r7=a("li"),L8e=a("strong"),hlt=o("albert"),ult=o(" \u2014 "),Qae=a("a"),plt=o("FlaxAlbertForMaskedLM"),_lt=o(" (ALBERT model)"),blt=l(),t7=a("li"),y8e=a("strong"),vlt=o("bart"),Flt=o(" \u2014 "),Wae=a("a"),Tlt=o("FlaxBartForConditionalGeneration"),Mlt=o(" (BART model)"),Elt=l(),a7=a("li"),x8e=a("strong"),Clt=o("bert"),wlt=o(" \u2014 "),Uae=a("a"),Alt=o("FlaxBertForMaskedLM"),Llt=o(" (BERT model)"),ylt=l(),n7=a("li"),$8e=a("strong"),xlt=o("big_bird"),$lt=o(" \u2014 "),Hae=a("a"),klt=o("FlaxBigBirdForMaskedLM"),Slt=o(" (BigBird model)"),Rlt=l(),s7=a("li"),k8e=a("strong"),Plt=o("distilbert"),Blt=o(" \u2014 "),Jae=a("a"),Ilt=o("FlaxDistilBertForMaskedLM"),Nlt=o(" (DistilBERT model)"),qlt=l(),l7=a("li"),S8e=a("strong"),jlt=o("electra"),Dlt=o(" \u2014 "),Yae=a("a"),Glt=o("FlaxElectraForMaskedLM"),Olt=o(" (ELECTRA model)"),Vlt=l(),i7=a("li"),R8e=a("strong"),Xlt=o("mbart"),zlt=o(" \u2014 "),Kae=a("a"),Qlt=o("FlaxMBartForConditionalGeneration"),Wlt=o(" (mBART model)"),Ult=l(),d7=a("li"),P8e=a("strong"),Hlt=o("roberta"),Jlt=o(" \u2014 "),Zae=a("a"),Ylt=o("FlaxRobertaForMaskedLM"),Klt=o(" (RoBERTa model)"),Zlt=l(),c7=a("li"),B8e=a("strong"),eit=o("roformer"),oit=o(" \u2014 "),ene=a("a"),rit=o("FlaxRoFormerForMaskedLM"),tit=o(" (RoFormer model)"),ait=l(),m7=a("li"),I8e=a("strong"),nit=o("xlm-roberta"),sit=o(" \u2014 "),one=a("a"),lit=o("FlaxXLMRobertaForMaskedLM"),iit=o(" (XLM-RoBERTa model)"),dit=l(),F(f7.$$.fragment),NKe=l(),Wm=a("h2"),g7=a("a"),N8e=a("span"),F(oR.$$.fragment),cit=l(),q8e=a("span"),mit=o("FlaxAutoModelForSeq2SeqLM"),qKe=l(),Ar=a("div"),F(rR.$$.fragment),fit=l(),Um=a("p"),git=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rne=a("a"),hit=o("from_pretrained()"),uit=o(" class method or the "),tne=a("a"),pit=o("from_config()"),_it=o(` class
method.`),bit=l(),tR=a("p"),vit=o("This class cannot be instantiated directly using "),j8e=a("code"),Fit=o("__init__()"),Tit=o(" (throws an error)."),Mit=l(),da=a("div"),F(aR.$$.fragment),Eit=l(),D8e=a("p"),Cit=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wit=l(),Hm=a("p"),Ait=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),Lit=o("not"),yit=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ane=a("a"),xit=o("from_pretrained()"),$it=o(" to load the model weights."),kit=l(),F(h7.$$.fragment),Sit=l(),rt=a("div"),F(nR.$$.fragment),Rit=l(),O8e=a("p"),Pit=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bit=l(),Xn=a("p"),Iit=o("The model class to instantiate is selected based on the "),V8e=a("code"),Nit=o("model_type"),qit=o(` property of the config object (either
passed as an argument or loaded from `),X8e=a("code"),jit=o("pretrained_model_name_or_path"),Dit=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=a("code"),Git=o("pretrained_model_name_or_path"),Oit=o(":"),Vit=l(),ke=a("ul"),u7=a("li"),Q8e=a("strong"),Xit=o("bart"),zit=o(" \u2014 "),nne=a("a"),Qit=o("FlaxBartForConditionalGeneration"),Wit=o(" (BART model)"),Uit=l(),p7=a("li"),W8e=a("strong"),Hit=o("blenderbot"),Jit=o(" \u2014 "),sne=a("a"),Yit=o("FlaxBlenderbotForConditionalGeneration"),Kit=o(" (Blenderbot model)"),Zit=l(),_7=a("li"),U8e=a("strong"),edt=o("blenderbot-small"),odt=o(" \u2014 "),lne=a("a"),rdt=o("FlaxBlenderbotSmallForConditionalGeneration"),tdt=o(" (BlenderbotSmall model)"),adt=l(),b7=a("li"),H8e=a("strong"),ndt=o("encoder-decoder"),sdt=o(" \u2014 "),ine=a("a"),ldt=o("FlaxEncoderDecoderModel"),idt=o(" (Encoder decoder model)"),ddt=l(),v7=a("li"),J8e=a("strong"),cdt=o("longt5"),mdt=o(" \u2014 "),dne=a("a"),fdt=o("FlaxLongT5ForConditionalGeneration"),gdt=o(" (LongT5 model)"),hdt=l(),F7=a("li"),Y8e=a("strong"),udt=o("marian"),pdt=o(" \u2014 "),cne=a("a"),_dt=o("FlaxMarianMTModel"),bdt=o(" (Marian model)"),vdt=l(),T7=a("li"),K8e=a("strong"),Fdt=o("mbart"),Tdt=o(" \u2014 "),mne=a("a"),Mdt=o("FlaxMBartForConditionalGeneration"),Edt=o(" (mBART model)"),Cdt=l(),M7=a("li"),Z8e=a("strong"),wdt=o("mt5"),Adt=o(" \u2014 "),fne=a("a"),Ldt=o("FlaxMT5ForConditionalGeneration"),ydt=o(" (MT5 model)"),xdt=l(),E7=a("li"),e9e=a("strong"),$dt=o("pegasus"),kdt=o(" \u2014 "),gne=a("a"),Sdt=o("FlaxPegasusForConditionalGeneration"),Rdt=o(" (Pegasus model)"),Pdt=l(),C7=a("li"),o9e=a("strong"),Bdt=o("t5"),Idt=o(" \u2014 "),hne=a("a"),Ndt=o("FlaxT5ForConditionalGeneration"),qdt=o(" (T5 model)"),jdt=l(),F(w7.$$.fragment),jKe=l(),Jm=a("h2"),A7=a("a"),r9e=a("span"),F(sR.$$.fragment),Ddt=l(),t9e=a("span"),Gdt=o("FlaxAutoModelForSequenceClassification"),DKe=l(),Lr=a("div"),F(lR.$$.fragment),Odt=l(),Ym=a("p"),Vdt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),une=a("a"),Xdt=o("from_pretrained()"),zdt=o(" class method or the "),pne=a("a"),Qdt=o("from_config()"),Wdt=o(` class
method.`),Udt=l(),iR=a("p"),Hdt=o("This class cannot be instantiated directly using "),a9e=a("code"),Jdt=o("__init__()"),Ydt=o(" (throws an error)."),Kdt=l(),ca=a("div"),F(dR.$$.fragment),Zdt=l(),n9e=a("p"),ect=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oct=l(),Km=a("p"),rct=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),tct=o("not"),act=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=a("a"),nct=o("from_pretrained()"),sct=o(" to load the model weights."),lct=l(),F(L7.$$.fragment),ict=l(),tt=a("div"),F(cR.$$.fragment),dct=l(),l9e=a("p"),cct=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mct=l(),zn=a("p"),fct=o("The model class to instantiate is selected based on the "),i9e=a("code"),gct=o("model_type"),hct=o(` property of the config object (either
passed as an argument or loaded from `),d9e=a("code"),uct=o("pretrained_model_name_or_path"),pct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=a("code"),_ct=o("pretrained_model_name_or_path"),bct=o(":"),vct=l(),Se=a("ul"),y7=a("li"),m9e=a("strong"),Fct=o("albert"),Tct=o(" \u2014 "),bne=a("a"),Mct=o("FlaxAlbertForSequenceClassification"),Ect=o(" (ALBERT model)"),Cct=l(),x7=a("li"),f9e=a("strong"),wct=o("bart"),Act=o(" \u2014 "),vne=a("a"),Lct=o("FlaxBartForSequenceClassification"),yct=o(" (BART model)"),xct=l(),$7=a("li"),g9e=a("strong"),$ct=o("bert"),kct=o(" \u2014 "),Fne=a("a"),Sct=o("FlaxBertForSequenceClassification"),Rct=o(" (BERT model)"),Pct=l(),k7=a("li"),h9e=a("strong"),Bct=o("big_bird"),Ict=o(" \u2014 "),Tne=a("a"),Nct=o("FlaxBigBirdForSequenceClassification"),qct=o(" (BigBird model)"),jct=l(),S7=a("li"),u9e=a("strong"),Dct=o("distilbert"),Gct=o(" \u2014 "),Mne=a("a"),Oct=o("FlaxDistilBertForSequenceClassification"),Vct=o(" (DistilBERT model)"),Xct=l(),R7=a("li"),p9e=a("strong"),zct=o("electra"),Qct=o(" \u2014 "),Ene=a("a"),Wct=o("FlaxElectraForSequenceClassification"),Uct=o(" (ELECTRA model)"),Hct=l(),P7=a("li"),_9e=a("strong"),Jct=o("mbart"),Yct=o(" \u2014 "),Cne=a("a"),Kct=o("FlaxMBartForSequenceClassification"),Zct=o(" (mBART model)"),emt=l(),B7=a("li"),b9e=a("strong"),omt=o("roberta"),rmt=o(" \u2014 "),wne=a("a"),tmt=o("FlaxRobertaForSequenceClassification"),amt=o(" (RoBERTa model)"),nmt=l(),I7=a("li"),v9e=a("strong"),smt=o("roformer"),lmt=o(" \u2014 "),Ane=a("a"),imt=o("FlaxRoFormerForSequenceClassification"),dmt=o(" (RoFormer model)"),cmt=l(),N7=a("li"),F9e=a("strong"),mmt=o("xlm-roberta"),fmt=o(" \u2014 "),Lne=a("a"),gmt=o("FlaxXLMRobertaForSequenceClassification"),hmt=o(" (XLM-RoBERTa model)"),umt=l(),F(q7.$$.fragment),GKe=l(),Zm=a("h2"),j7=a("a"),T9e=a("span"),F(mR.$$.fragment),pmt=l(),M9e=a("span"),_mt=o("FlaxAutoModelForQuestionAnswering"),OKe=l(),yr=a("div"),F(fR.$$.fragment),bmt=l(),ef=a("p"),vmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yne=a("a"),Fmt=o("from_pretrained()"),Tmt=o(" class method or the "),xne=a("a"),Mmt=o("from_config()"),Emt=o(` class
method.`),Cmt=l(),gR=a("p"),wmt=o("This class cannot be instantiated directly using "),E9e=a("code"),Amt=o("__init__()"),Lmt=o(" (throws an error)."),ymt=l(),ma=a("div"),F(hR.$$.fragment),xmt=l(),C9e=a("p"),$mt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kmt=l(),of=a("p"),Smt=o(`Note:
Loading a model from its configuration file does `),w9e=a("strong"),Rmt=o("not"),Pmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$ne=a("a"),Bmt=o("from_pretrained()"),Imt=o(" to load the model weights."),Nmt=l(),F(D7.$$.fragment),qmt=l(),at=a("div"),F(uR.$$.fragment),jmt=l(),A9e=a("p"),Dmt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Gmt=l(),Qn=a("p"),Omt=o("The model class to instantiate is selected based on the "),L9e=a("code"),Vmt=o("model_type"),Xmt=o(` property of the config object (either
passed as an argument or loaded from `),y9e=a("code"),zmt=o("pretrained_model_name_or_path"),Qmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x9e=a("code"),Wmt=o("pretrained_model_name_or_path"),Umt=o(":"),Hmt=l(),Re=a("ul"),G7=a("li"),$9e=a("strong"),Jmt=o("albert"),Ymt=o(" \u2014 "),kne=a("a"),Kmt=o("FlaxAlbertForQuestionAnswering"),Zmt=o(" (ALBERT model)"),eft=l(),O7=a("li"),k9e=a("strong"),oft=o("bart"),rft=o(" \u2014 "),Sne=a("a"),tft=o("FlaxBartForQuestionAnswering"),aft=o(" (BART model)"),nft=l(),V7=a("li"),S9e=a("strong"),sft=o("bert"),lft=o(" \u2014 "),Rne=a("a"),ift=o("FlaxBertForQuestionAnswering"),dft=o(" (BERT model)"),cft=l(),X7=a("li"),R9e=a("strong"),mft=o("big_bird"),fft=o(" \u2014 "),Pne=a("a"),gft=o("FlaxBigBirdForQuestionAnswering"),hft=o(" (BigBird model)"),uft=l(),z7=a("li"),P9e=a("strong"),pft=o("distilbert"),_ft=o(" \u2014 "),Bne=a("a"),bft=o("FlaxDistilBertForQuestionAnswering"),vft=o(" (DistilBERT model)"),Fft=l(),Q7=a("li"),B9e=a("strong"),Tft=o("electra"),Mft=o(" \u2014 "),Ine=a("a"),Eft=o("FlaxElectraForQuestionAnswering"),Cft=o(" (ELECTRA model)"),wft=l(),W7=a("li"),I9e=a("strong"),Aft=o("mbart"),Lft=o(" \u2014 "),Nne=a("a"),yft=o("FlaxMBartForQuestionAnswering"),xft=o(" (mBART model)"),$ft=l(),U7=a("li"),N9e=a("strong"),kft=o("roberta"),Sft=o(" \u2014 "),qne=a("a"),Rft=o("FlaxRobertaForQuestionAnswering"),Pft=o(" (RoBERTa model)"),Bft=l(),H7=a("li"),q9e=a("strong"),Ift=o("roformer"),Nft=o(" \u2014 "),jne=a("a"),qft=o("FlaxRoFormerForQuestionAnswering"),jft=o(" (RoFormer model)"),Dft=l(),J7=a("li"),j9e=a("strong"),Gft=o("xlm-roberta"),Oft=o(" \u2014 "),Dne=a("a"),Vft=o("FlaxXLMRobertaForQuestionAnswering"),Xft=o(" (XLM-RoBERTa model)"),zft=l(),F(Y7.$$.fragment),VKe=l(),rf=a("h2"),K7=a("a"),D9e=a("span"),F(pR.$$.fragment),Qft=l(),G9e=a("span"),Wft=o("FlaxAutoModelForTokenClassification"),XKe=l(),xr=a("div"),F(_R.$$.fragment),Uft=l(),tf=a("p"),Hft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gne=a("a"),Jft=o("from_pretrained()"),Yft=o(" class method or the "),One=a("a"),Kft=o("from_config()"),Zft=o(` class
method.`),egt=l(),bR=a("p"),ogt=o("This class cannot be instantiated directly using "),O9e=a("code"),rgt=o("__init__()"),tgt=o(" (throws an error)."),agt=l(),fa=a("div"),F(vR.$$.fragment),ngt=l(),V9e=a("p"),sgt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lgt=l(),af=a("p"),igt=o(`Note:
Loading a model from its configuration file does `),X9e=a("strong"),dgt=o("not"),cgt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vne=a("a"),mgt=o("from_pretrained()"),fgt=o(" to load the model weights."),ggt=l(),F(Z7.$$.fragment),hgt=l(),nt=a("div"),F(FR.$$.fragment),ugt=l(),z9e=a("p"),pgt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_gt=l(),Wn=a("p"),bgt=o("The model class to instantiate is selected based on the "),Q9e=a("code"),vgt=o("model_type"),Fgt=o(` property of the config object (either
passed as an argument or loaded from `),W9e=a("code"),Tgt=o("pretrained_model_name_or_path"),Mgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=a("code"),Egt=o("pretrained_model_name_or_path"),Cgt=o(":"),wgt=l(),Xe=a("ul"),eL=a("li"),H9e=a("strong"),Agt=o("albert"),Lgt=o(" \u2014 "),Xne=a("a"),ygt=o("FlaxAlbertForTokenClassification"),xgt=o(" (ALBERT model)"),$gt=l(),oL=a("li"),J9e=a("strong"),kgt=o("bert"),Sgt=o(" \u2014 "),zne=a("a"),Rgt=o("FlaxBertForTokenClassification"),Pgt=o(" (BERT model)"),Bgt=l(),rL=a("li"),Y9e=a("strong"),Igt=o("big_bird"),Ngt=o(" \u2014 "),Qne=a("a"),qgt=o("FlaxBigBirdForTokenClassification"),jgt=o(" (BigBird model)"),Dgt=l(),tL=a("li"),K9e=a("strong"),Ggt=o("distilbert"),Ogt=o(" \u2014 "),Wne=a("a"),Vgt=o("FlaxDistilBertForTokenClassification"),Xgt=o(" (DistilBERT model)"),zgt=l(),aL=a("li"),Z9e=a("strong"),Qgt=o("electra"),Wgt=o(" \u2014 "),Une=a("a"),Ugt=o("FlaxElectraForTokenClassification"),Hgt=o(" (ELECTRA model)"),Jgt=l(),nL=a("li"),exe=a("strong"),Ygt=o("roberta"),Kgt=o(" \u2014 "),Hne=a("a"),Zgt=o("FlaxRobertaForTokenClassification"),eht=o(" (RoBERTa model)"),oht=l(),sL=a("li"),oxe=a("strong"),rht=o("roformer"),tht=o(" \u2014 "),Jne=a("a"),aht=o("FlaxRoFormerForTokenClassification"),nht=o(" (RoFormer model)"),sht=l(),lL=a("li"),rxe=a("strong"),lht=o("xlm-roberta"),iht=o(" \u2014 "),Yne=a("a"),dht=o("FlaxXLMRobertaForTokenClassification"),cht=o(" (XLM-RoBERTa model)"),mht=l(),F(iL.$$.fragment),zKe=l(),nf=a("h2"),dL=a("a"),txe=a("span"),F(TR.$$.fragment),fht=l(),axe=a("span"),ght=o("FlaxAutoModelForMultipleChoice"),QKe=l(),$r=a("div"),F(MR.$$.fragment),hht=l(),sf=a("p"),uht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kne=a("a"),pht=o("from_pretrained()"),_ht=o(" class method or the "),Zne=a("a"),bht=o("from_config()"),vht=o(` class
method.`),Fht=l(),ER=a("p"),Tht=o("This class cannot be instantiated directly using "),nxe=a("code"),Mht=o("__init__()"),Eht=o(" (throws an error)."),Cht=l(),ga=a("div"),F(CR.$$.fragment),wht=l(),sxe=a("p"),Aht=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lht=l(),lf=a("p"),yht=o(`Note:
Loading a model from its configuration file does `),lxe=a("strong"),xht=o("not"),$ht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=a("a"),kht=o("from_pretrained()"),Sht=o(" to load the model weights."),Rht=l(),F(cL.$$.fragment),Pht=l(),st=a("div"),F(wR.$$.fragment),Bht=l(),ixe=a("p"),Iht=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nht=l(),Un=a("p"),qht=o("The model class to instantiate is selected based on the "),dxe=a("code"),jht=o("model_type"),Dht=o(` property of the config object (either
passed as an argument or loaded from `),cxe=a("code"),Ght=o("pretrained_model_name_or_path"),Oht=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mxe=a("code"),Vht=o("pretrained_model_name_or_path"),Xht=o(":"),zht=l(),ze=a("ul"),mL=a("li"),fxe=a("strong"),Qht=o("albert"),Wht=o(" \u2014 "),ose=a("a"),Uht=o("FlaxAlbertForMultipleChoice"),Hht=o(" (ALBERT model)"),Jht=l(),fL=a("li"),gxe=a("strong"),Yht=o("bert"),Kht=o(" \u2014 "),rse=a("a"),Zht=o("FlaxBertForMultipleChoice"),eut=o(" (BERT model)"),out=l(),gL=a("li"),hxe=a("strong"),rut=o("big_bird"),tut=o(" \u2014 "),tse=a("a"),aut=o("FlaxBigBirdForMultipleChoice"),nut=o(" (BigBird model)"),sut=l(),hL=a("li"),uxe=a("strong"),lut=o("distilbert"),iut=o(" \u2014 "),ase=a("a"),dut=o("FlaxDistilBertForMultipleChoice"),cut=o(" (DistilBERT model)"),mut=l(),uL=a("li"),pxe=a("strong"),fut=o("electra"),gut=o(" \u2014 "),nse=a("a"),hut=o("FlaxElectraForMultipleChoice"),uut=o(" (ELECTRA model)"),put=l(),pL=a("li"),_xe=a("strong"),_ut=o("roberta"),but=o(" \u2014 "),sse=a("a"),vut=o("FlaxRobertaForMultipleChoice"),Fut=o(" (RoBERTa model)"),Tut=l(),_L=a("li"),bxe=a("strong"),Mut=o("roformer"),Eut=o(" \u2014 "),lse=a("a"),Cut=o("FlaxRoFormerForMultipleChoice"),wut=o(" (RoFormer model)"),Aut=l(),bL=a("li"),vxe=a("strong"),Lut=o("xlm-roberta"),yut=o(" \u2014 "),ise=a("a"),xut=o("FlaxXLMRobertaForMultipleChoice"),$ut=o(" (XLM-RoBERTa model)"),kut=l(),F(vL.$$.fragment),WKe=l(),df=a("h2"),FL=a("a"),Fxe=a("span"),F(AR.$$.fragment),Sut=l(),Txe=a("span"),Rut=o("FlaxAutoModelForNextSentencePrediction"),UKe=l(),kr=a("div"),F(LR.$$.fragment),Put=l(),cf=a("p"),But=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dse=a("a"),Iut=o("from_pretrained()"),Nut=o(" class method or the "),cse=a("a"),qut=o("from_config()"),jut=o(` class
method.`),Dut=l(),yR=a("p"),Gut=o("This class cannot be instantiated directly using "),Mxe=a("code"),Out=o("__init__()"),Vut=o(" (throws an error)."),Xut=l(),ha=a("div"),F(xR.$$.fragment),zut=l(),Exe=a("p"),Qut=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wut=l(),mf=a("p"),Uut=o(`Note:
Loading a model from its configuration file does `),Cxe=a("strong"),Hut=o("not"),Jut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mse=a("a"),Yut=o("from_pretrained()"),Kut=o(" to load the model weights."),Zut=l(),F(TL.$$.fragment),ept=l(),lt=a("div"),F($R.$$.fragment),opt=l(),wxe=a("p"),rpt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tpt=l(),Hn=a("p"),apt=o("The model class to instantiate is selected based on the "),Axe=a("code"),npt=o("model_type"),spt=o(` property of the config object (either
passed as an argument or loaded from `),Lxe=a("code"),lpt=o("pretrained_model_name_or_path"),ipt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yxe=a("code"),dpt=o("pretrained_model_name_or_path"),cpt=o(":"),mpt=l(),xxe=a("ul"),ML=a("li"),$xe=a("strong"),fpt=o("bert"),gpt=o(" \u2014 "),fse=a("a"),hpt=o("FlaxBertForNextSentencePrediction"),upt=o(" (BERT model)"),ppt=l(),F(EL.$$.fragment),HKe=l(),ff=a("h2"),CL=a("a"),kxe=a("span"),F(kR.$$.fragment),_pt=l(),Sxe=a("span"),bpt=o("FlaxAutoModelForImageClassification"),JKe=l(),Sr=a("div"),F(SR.$$.fragment),vpt=l(),gf=a("p"),Fpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gse=a("a"),Tpt=o("from_pretrained()"),Mpt=o(" class method or the "),hse=a("a"),Ept=o("from_config()"),Cpt=o(` class
method.`),wpt=l(),RR=a("p"),Apt=o("This class cannot be instantiated directly using "),Rxe=a("code"),Lpt=o("__init__()"),ypt=o(" (throws an error)."),xpt=l(),ua=a("div"),F(PR.$$.fragment),$pt=l(),Pxe=a("p"),kpt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Spt=l(),hf=a("p"),Rpt=o(`Note:
Loading a model from its configuration file does `),Bxe=a("strong"),Ppt=o("not"),Bpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),use=a("a"),Ipt=o("from_pretrained()"),Npt=o(" to load the model weights."),qpt=l(),F(wL.$$.fragment),jpt=l(),it=a("div"),F(BR.$$.fragment),Dpt=l(),Ixe=a("p"),Gpt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Opt=l(),Jn=a("p"),Vpt=o("The model class to instantiate is selected based on the "),Nxe=a("code"),Xpt=o("model_type"),zpt=o(` property of the config object (either
passed as an argument or loaded from `),qxe=a("code"),Qpt=o("pretrained_model_name_or_path"),Wpt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jxe=a("code"),Upt=o("pretrained_model_name_or_path"),Hpt=o(":"),Jpt=l(),IR=a("ul"),AL=a("li"),Dxe=a("strong"),Ypt=o("beit"),Kpt=o(" \u2014 "),pse=a("a"),Zpt=o("FlaxBeitForImageClassification"),e_t=o(" (BEiT model)"),o_t=l(),LL=a("li"),Gxe=a("strong"),r_t=o("vit"),t_t=o(" \u2014 "),_se=a("a"),a_t=o("FlaxViTForImageClassification"),n_t=o(" (ViT model)"),s_t=l(),F(yL.$$.fragment),YKe=l(),uf=a("h2"),xL=a("a"),Oxe=a("span"),F(NR.$$.fragment),l_t=l(),Vxe=a("span"),i_t=o("FlaxAutoModelForVision2Seq"),KKe=l(),Rr=a("div"),F(qR.$$.fragment),d_t=l(),pf=a("p"),c_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bse=a("a"),m_t=o("from_pretrained()"),f_t=o(" class method or the "),vse=a("a"),g_t=o("from_config()"),h_t=o(` class
method.`),u_t=l(),jR=a("p"),p_t=o("This class cannot be instantiated directly using "),Xxe=a("code"),__t=o("__init__()"),b_t=o(" (throws an error)."),v_t=l(),pa=a("div"),F(DR.$$.fragment),F_t=l(),zxe=a("p"),T_t=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M_t=l(),_f=a("p"),E_t=o(`Note:
Loading a model from its configuration file does `),Qxe=a("strong"),C_t=o("not"),w_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fse=a("a"),A_t=o("from_pretrained()"),L_t=o(" to load the model weights."),y_t=l(),F($L.$$.fragment),x_t=l(),dt=a("div"),F(GR.$$.fragment),$_t=l(),Wxe=a("p"),k_t=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S_t=l(),Yn=a("p"),R_t=o("The model class to instantiate is selected based on the "),Uxe=a("code"),P_t=o("model_type"),B_t=o(` property of the config object (either
passed as an argument or loaded from `),Hxe=a("code"),I_t=o("pretrained_model_name_or_path"),N_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jxe=a("code"),q_t=o("pretrained_model_name_or_path"),j_t=o(":"),D_t=l(),Yxe=a("ul"),kL=a("li"),Kxe=a("strong"),G_t=o("vision-encoder-decoder"),O_t=o(" \u2014 "),Tse=a("a"),V_t=o("FlaxVisionEncoderDecoderModel"),X_t=o(" (Vision Encoder decoder model)"),z_t=l(),F(SL.$$.fragment),this.h()},l(m){const _=Mca('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var OR=s(u);f=n(OR,"A",{id:!0,class:!0,href:!0});var Zxe=s(f);p=n(Zxe,"SPAN",{});var e$e=s(p);T(d.$$.fragment,e$e),e$e.forEach(t),Zxe.forEach(t),h=i(OR),Lo=n(OR,"SPAN",{});var o$e=s(Lo);od=r(o$e,"Auto Classes"),o$e.forEach(t),OR.forEach(t),Tf=i(m),ut=n(m,"P",{});var VR=s(ut);rd=r(VR,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),td=n(VR,"CODE",{});var r$e=s(td);i9=r(r$e,"from_pretrained()"),r$e.forEach(t),Mf=r(VR,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),VR.forEach(t),Ve=i(m),Ue=n(m,"P",{});var Kn=s(Ue);ad=r(Kn,"Instantiating one of "),Zn=n(Kn,"A",{href:!0});var t$e=s(Zn);d9=r(t$e,"AutoConfig"),t$e.forEach(t),es=r(Kn,", "),os=n(Kn,"A",{href:!0});var a$e=s(os);c9=r(a$e,"AutoModel"),a$e.forEach(t),nd=r(Kn,`, and
`),rs=n(Kn,"A",{href:!0});var n$e=s(rs);m9=r(n$e,"AutoTokenizer"),n$e.forEach(t),sd=r(Kn," will directly create a class of the relevant architecture. For instance"),Kn.forEach(t),Ef=i(m),T(Qa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var XR=s(Ae);fB=r(XR,"will create a model that is an instance of "),ld=n(XR,"A",{href:!0});var s$e=s(ld);gB=r(s$e,"BertModel"),s$e.forEach(t),hB=r(XR,"."),XR.forEach(t),yo=i(m),Wa=n(m,"P",{});var zR=s(Wa);uB=r(zR,"There is one class of "),Cf=n(zR,"CODE",{});var l$e=s(Cf);pB=r(l$e,"AutoModel"),l$e.forEach(t),_oo=r(zR," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zR.forEach(t),DJe=i(m),id=n(m,"H2",{class:!0});var QR=s(id);wf=n(QR,"A",{id:!0,class:!0,href:!0});var i$e=s(wf);wie=n(i$e,"SPAN",{});var d$e=s(wie);T(f9.$$.fragment,d$e),d$e.forEach(t),i$e.forEach(t),boo=i(QR),Aie=n(QR,"SPAN",{});var c$e=s(Aie);voo=r(c$e,"Extending the Auto Classes"),c$e.forEach(t),QR.forEach(t),GJe=i(m),ts=n(m,"P",{});var bf=s(ts);Foo=r(bf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Lie=n(bf,"CODE",{});var m$e=s(Lie);Too=r(m$e,"NewModel"),m$e.forEach(t),Moo=r(bf,", make sure you have a "),yie=n(bf,"CODE",{});var f$e=s(yie);Eoo=r(f$e,"NewModelConfig"),f$e.forEach(t),Coo=r(bf,` then you can add those to the auto
classes like this:`),bf.forEach(t),OJe=i(m),T(g9.$$.fragment,m),VJe=i(m),_B=n(m,"P",{});var g$e=s(_B);woo=r(g$e,"You will then be able to use the auto classes like you would usually do!"),g$e.forEach(t),XJe=i(m),T(Af.$$.fragment,m),zJe=i(m),dd=n(m,"H2",{class:!0});var WR=s(dd);Lf=n(WR,"A",{id:!0,class:!0,href:!0});var h$e=s(Lf);xie=n(h$e,"SPAN",{});var u$e=s(xie);T(h9.$$.fragment,u$e),u$e.forEach(t),h$e.forEach(t),Aoo=i(WR),$ie=n(WR,"SPAN",{});var p$e=s($ie);Loo=r(p$e,"AutoConfig"),p$e.forEach(t),WR.forEach(t),QJe=i(m),xo=n(m,"DIV",{class:!0});var gt=s(xo);T(u9.$$.fragment,gt),yoo=i(gt),p9=n(gt,"P",{});var UR=s(p9);xoo=r(UR,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),bB=n(UR,"A",{href:!0});var _$e=s(bB);$oo=r(_$e,"from_pretrained()"),_$e.forEach(t),koo=r(UR," class method."),UR.forEach(t),Soo=i(gt),_9=n(gt,"P",{});var HR=s(_9);Roo=r(HR,"This class cannot be instantiated directly using "),kie=n(HR,"CODE",{});var b$e=s(kie);Poo=r(b$e,"__init__()"),b$e.forEach(t),Boo=r(HR," (throws an error)."),HR.forEach(t),Ioo=i(gt),Pr=n(gt,"DIV",{class:!0});var ht=s(Pr);T(b9.$$.fragment,ht),Noo=i(ht),Sie=n(ht,"P",{});var v$e=s(Sie);qoo=r(v$e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),v$e.forEach(t),joo=i(ht),cd=n(ht,"P",{});var vf=s(cd);Doo=r(vf,"The configuration class to instantiate is selected based on the "),Rie=n(vf,"CODE",{});var F$e=s(Rie);Goo=r(F$e,"model_type"),F$e.forEach(t),Ooo=r(vf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Pie=n(vf,"CODE",{});var T$e=s(Pie);Voo=r(T$e,"pretrained_model_name_or_path"),T$e.forEach(t),Xoo=r(vf,":"),vf.forEach(t),zoo=i(ht),A=n(ht,"UL",{});var L=s(A);yf=n(L,"LI",{});var RL=s(yf);Bie=n(RL,"STRONG",{});var M$e=s(Bie);Qoo=r(M$e,"albert"),M$e.forEach(t),Woo=r(RL," \u2014 "),vB=n(RL,"A",{href:!0});var E$e=s(vB);Uoo=r(E$e,"AlbertConfig"),E$e.forEach(t),Hoo=r(RL," (ALBERT model)"),RL.forEach(t),Joo=i(L),xf=n(L,"LI",{});var PL=s(xf);Iie=n(PL,"STRONG",{});var C$e=s(Iie);Yoo=r(C$e,"bart"),C$e.forEach(t),Koo=r(PL," \u2014 "),FB=n(PL,"A",{href:!0});var w$e=s(FB);Zoo=r(w$e,"BartConfig"),w$e.forEach(t),ero=r(PL," (BART model)"),PL.forEach(t),oro=i(L),$f=n(L,"LI",{});var BL=s($f);Nie=n(BL,"STRONG",{});var A$e=s(Nie);rro=r(A$e,"beit"),A$e.forEach(t),tro=r(BL," \u2014 "),TB=n(BL,"A",{href:!0});var L$e=s(TB);aro=r(L$e,"BeitConfig"),L$e.forEach(t),nro=r(BL," (BEiT model)"),BL.forEach(t),sro=i(L),kf=n(L,"LI",{});var IL=s(kf);qie=n(IL,"STRONG",{});var y$e=s(qie);lro=r(y$e,"bert"),y$e.forEach(t),iro=r(IL," \u2014 "),MB=n(IL,"A",{href:!0});var x$e=s(MB);dro=r(x$e,"BertConfig"),x$e.forEach(t),cro=r(IL," (BERT model)"),IL.forEach(t),mro=i(L),Sf=n(L,"LI",{});var NL=s(Sf);jie=n(NL,"STRONG",{});var $$e=s(jie);fro=r($$e,"bert-generation"),$$e.forEach(t),gro=r(NL," \u2014 "),EB=n(NL,"A",{href:!0});var k$e=s(EB);hro=r(k$e,"BertGenerationConfig"),k$e.forEach(t),uro=r(NL," (Bert Generation model)"),NL.forEach(t),pro=i(L),Rf=n(L,"LI",{});var qL=s(Rf);Die=n(qL,"STRONG",{});var S$e=s(Die);_ro=r(S$e,"big_bird"),S$e.forEach(t),bro=r(qL," \u2014 "),CB=n(qL,"A",{href:!0});var R$e=s(CB);vro=r(R$e,"BigBirdConfig"),R$e.forEach(t),Fro=r(qL," (BigBird model)"),qL.forEach(t),Tro=i(L),Pf=n(L,"LI",{});var jL=s(Pf);Gie=n(jL,"STRONG",{});var P$e=s(Gie);Mro=r(P$e,"bigbird_pegasus"),P$e.forEach(t),Ero=r(jL," \u2014 "),wB=n(jL,"A",{href:!0});var B$e=s(wB);Cro=r(B$e,"BigBirdPegasusConfig"),B$e.forEach(t),wro=r(jL," (BigBird-Pegasus model)"),jL.forEach(t),Aro=i(L),Bf=n(L,"LI",{});var DL=s(Bf);Oie=n(DL,"STRONG",{});var I$e=s(Oie);Lro=r(I$e,"blenderbot"),I$e.forEach(t),yro=r(DL," \u2014 "),AB=n(DL,"A",{href:!0});var N$e=s(AB);xro=r(N$e,"BlenderbotConfig"),N$e.forEach(t),$ro=r(DL," (Blenderbot model)"),DL.forEach(t),kro=i(L),If=n(L,"LI",{});var GL=s(If);Vie=n(GL,"STRONG",{});var q$e=s(Vie);Sro=r(q$e,"blenderbot-small"),q$e.forEach(t),Rro=r(GL," \u2014 "),LB=n(GL,"A",{href:!0});var j$e=s(LB);Pro=r(j$e,"BlenderbotSmallConfig"),j$e.forEach(t),Bro=r(GL," (BlenderbotSmall model)"),GL.forEach(t),Iro=i(L),Nf=n(L,"LI",{});var OL=s(Nf);Xie=n(OL,"STRONG",{});var D$e=s(Xie);Nro=r(D$e,"bloom"),D$e.forEach(t),qro=r(OL," \u2014 "),yB=n(OL,"A",{href:!0});var G$e=s(yB);jro=r(G$e,"BloomConfig"),G$e.forEach(t),Dro=r(OL," (BLOOM model)"),OL.forEach(t),Gro=i(L),qf=n(L,"LI",{});var VL=s(qf);zie=n(VL,"STRONG",{});var O$e=s(zie);Oro=r(O$e,"camembert"),O$e.forEach(t),Vro=r(VL," \u2014 "),xB=n(VL,"A",{href:!0});var V$e=s(xB);Xro=r(V$e,"CamembertConfig"),V$e.forEach(t),zro=r(VL," (CamemBERT model)"),VL.forEach(t),Qro=i(L),jf=n(L,"LI",{});var XL=s(jf);Qie=n(XL,"STRONG",{});var X$e=s(Qie);Wro=r(X$e,"canine"),X$e.forEach(t),Uro=r(XL," \u2014 "),$B=n(XL,"A",{href:!0});var z$e=s($B);Hro=r(z$e,"CanineConfig"),z$e.forEach(t),Jro=r(XL," (CANINE model)"),XL.forEach(t),Yro=i(L),Df=n(L,"LI",{});var zL=s(Df);Wie=n(zL,"STRONG",{});var Q$e=s(Wie);Kro=r(Q$e,"clip"),Q$e.forEach(t),Zro=r(zL," \u2014 "),kB=n(zL,"A",{href:!0});var W$e=s(kB);eto=r(W$e,"CLIPConfig"),W$e.forEach(t),oto=r(zL," (CLIP model)"),zL.forEach(t),rto=i(L),Gf=n(L,"LI",{});var QL=s(Gf);Uie=n(QL,"STRONG",{});var U$e=s(Uie);tto=r(U$e,"codegen"),U$e.forEach(t),ato=r(QL," \u2014 "),SB=n(QL,"A",{href:!0});var H$e=s(SB);nto=r(H$e,"CodeGenConfig"),H$e.forEach(t),sto=r(QL," (CodeGen model)"),QL.forEach(t),lto=i(L),Of=n(L,"LI",{});var WL=s(Of);Hie=n(WL,"STRONG",{});var J$e=s(Hie);ito=r(J$e,"convbert"),J$e.forEach(t),dto=r(WL," \u2014 "),RB=n(WL,"A",{href:!0});var Y$e=s(RB);cto=r(Y$e,"ConvBertConfig"),Y$e.forEach(t),mto=r(WL," (ConvBERT model)"),WL.forEach(t),fto=i(L),Vf=n(L,"LI",{});var UL=s(Vf);Jie=n(UL,"STRONG",{});var K$e=s(Jie);gto=r(K$e,"convnext"),K$e.forEach(t),hto=r(UL," \u2014 "),PB=n(UL,"A",{href:!0});var Z$e=s(PB);uto=r(Z$e,"ConvNextConfig"),Z$e.forEach(t),pto=r(UL," (ConvNeXT model)"),UL.forEach(t),_to=i(L),Xf=n(L,"LI",{});var HL=s(Xf);Yie=n(HL,"STRONG",{});var eke=s(Yie);bto=r(eke,"ctrl"),eke.forEach(t),vto=r(HL," \u2014 "),BB=n(HL,"A",{href:!0});var oke=s(BB);Fto=r(oke,"CTRLConfig"),oke.forEach(t),Tto=r(HL," (CTRL model)"),HL.forEach(t),Mto=i(L),zf=n(L,"LI",{});var JL=s(zf);Kie=n(JL,"STRONG",{});var rke=s(Kie);Eto=r(rke,"cvt"),rke.forEach(t),Cto=r(JL," \u2014 "),IB=n(JL,"A",{href:!0});var tke=s(IB);wto=r(tke,"CvtConfig"),tke.forEach(t),Ato=r(JL," (CvT model)"),JL.forEach(t),Lto=i(L),Qf=n(L,"LI",{});var YL=s(Qf);Zie=n(YL,"STRONG",{});var ake=s(Zie);yto=r(ake,"data2vec-audio"),ake.forEach(t),xto=r(YL," \u2014 "),NB=n(YL,"A",{href:!0});var nke=s(NB);$to=r(nke,"Data2VecAudioConfig"),nke.forEach(t),kto=r(YL," (Data2VecAudio model)"),YL.forEach(t),Sto=i(L),Wf=n(L,"LI",{});var KL=s(Wf);ede=n(KL,"STRONG",{});var ske=s(ede);Rto=r(ske,"data2vec-text"),ske.forEach(t),Pto=r(KL," \u2014 "),qB=n(KL,"A",{href:!0});var lke=s(qB);Bto=r(lke,"Data2VecTextConfig"),lke.forEach(t),Ito=r(KL," (Data2VecText model)"),KL.forEach(t),Nto=i(L),Uf=n(L,"LI",{});var ZL=s(Uf);ode=n(ZL,"STRONG",{});var ike=s(ode);qto=r(ike,"data2vec-vision"),ike.forEach(t),jto=r(ZL," \u2014 "),jB=n(ZL,"A",{href:!0});var dke=s(jB);Dto=r(dke,"Data2VecVisionConfig"),dke.forEach(t),Gto=r(ZL," (Data2VecVision model)"),ZL.forEach(t),Oto=i(L),Hf=n(L,"LI",{});var ey=s(Hf);rde=n(ey,"STRONG",{});var cke=s(rde);Vto=r(cke,"deberta"),cke.forEach(t),Xto=r(ey," \u2014 "),DB=n(ey,"A",{href:!0});var mke=s(DB);zto=r(mke,"DebertaConfig"),mke.forEach(t),Qto=r(ey," (DeBERTa model)"),ey.forEach(t),Wto=i(L),Jf=n(L,"LI",{});var oy=s(Jf);tde=n(oy,"STRONG",{});var fke=s(tde);Uto=r(fke,"deberta-v2"),fke.forEach(t),Hto=r(oy," \u2014 "),GB=n(oy,"A",{href:!0});var gke=s(GB);Jto=r(gke,"DebertaV2Config"),gke.forEach(t),Yto=r(oy," (DeBERTa-v2 model)"),oy.forEach(t),Kto=i(L),Yf=n(L,"LI",{});var ry=s(Yf);ade=n(ry,"STRONG",{});var hke=s(ade);Zto=r(hke,"decision_transformer"),hke.forEach(t),eao=r(ry," \u2014 "),OB=n(ry,"A",{href:!0});var uke=s(OB);oao=r(uke,"DecisionTransformerConfig"),uke.forEach(t),rao=r(ry," (Decision Transformer model)"),ry.forEach(t),tao=i(L),Kf=n(L,"LI",{});var ty=s(Kf);nde=n(ty,"STRONG",{});var pke=s(nde);aao=r(pke,"deit"),pke.forEach(t),nao=r(ty," \u2014 "),VB=n(ty,"A",{href:!0});var _ke=s(VB);sao=r(_ke,"DeiTConfig"),_ke.forEach(t),lao=r(ty," (DeiT model)"),ty.forEach(t),iao=i(L),Zf=n(L,"LI",{});var ay=s(Zf);sde=n(ay,"STRONG",{});var bke=s(sde);dao=r(bke,"detr"),bke.forEach(t),cao=r(ay," \u2014 "),XB=n(ay,"A",{href:!0});var vke=s(XB);mao=r(vke,"DetrConfig"),vke.forEach(t),fao=r(ay," (DETR model)"),ay.forEach(t),gao=i(L),eg=n(L,"LI",{});var Fke=s(eg);lde=n(Fke,"STRONG",{});var W_t=s(lde);hao=r(W_t,"distilbert"),W_t.forEach(t),uao=r(Fke," \u2014 "),zB=n(Fke,"A",{href:!0});var U_t=s(zB);pao=r(U_t,"DistilBertConfig"),U_t.forEach(t),_ao=r(Fke," (DistilBERT model)"),Fke.forEach(t),bao=i(L),og=n(L,"LI",{});var Tke=s(og);ide=n(Tke,"STRONG",{});var H_t=s(ide);vao=r(H_t,"donut-swin"),H_t.forEach(t),Fao=r(Tke," \u2014 "),QB=n(Tke,"A",{href:!0});var J_t=s(QB);Tao=r(J_t,"DonutSwinConfig"),J_t.forEach(t),Mao=r(Tke," (DonutSwin model)"),Tke.forEach(t),Eao=i(L),rg=n(L,"LI",{});var Mke=s(rg);dde=n(Mke,"STRONG",{});var Y_t=s(dde);Cao=r(Y_t,"dpr"),Y_t.forEach(t),wao=r(Mke," \u2014 "),WB=n(Mke,"A",{href:!0});var K_t=s(WB);Aao=r(K_t,"DPRConfig"),K_t.forEach(t),Lao=r(Mke," (DPR model)"),Mke.forEach(t),yao=i(L),tg=n(L,"LI",{});var Eke=s(tg);cde=n(Eke,"STRONG",{});var Z_t=s(cde);xao=r(Z_t,"dpt"),Z_t.forEach(t),$ao=r(Eke," \u2014 "),UB=n(Eke,"A",{href:!0});var ebt=s(UB);kao=r(ebt,"DPTConfig"),ebt.forEach(t),Sao=r(Eke," (DPT model)"),Eke.forEach(t),Rao=i(L),ag=n(L,"LI",{});var Cke=s(ag);mde=n(Cke,"STRONG",{});var obt=s(mde);Pao=r(obt,"electra"),obt.forEach(t),Bao=r(Cke," \u2014 "),HB=n(Cke,"A",{href:!0});var rbt=s(HB);Iao=r(rbt,"ElectraConfig"),rbt.forEach(t),Nao=r(Cke," (ELECTRA model)"),Cke.forEach(t),qao=i(L),ng=n(L,"LI",{});var wke=s(ng);fde=n(wke,"STRONG",{});var tbt=s(fde);jao=r(tbt,"encoder-decoder"),tbt.forEach(t),Dao=r(wke," \u2014 "),JB=n(wke,"A",{href:!0});var abt=s(JB);Gao=r(abt,"EncoderDecoderConfig"),abt.forEach(t),Oao=r(wke," (Encoder decoder model)"),wke.forEach(t),Vao=i(L),sg=n(L,"LI",{});var Ake=s(sg);gde=n(Ake,"STRONG",{});var nbt=s(gde);Xao=r(nbt,"flaubert"),nbt.forEach(t),zao=r(Ake," \u2014 "),YB=n(Ake,"A",{href:!0});var sbt=s(YB);Qao=r(sbt,"FlaubertConfig"),sbt.forEach(t),Wao=r(Ake," (FlauBERT model)"),Ake.forEach(t),Uao=i(L),lg=n(L,"LI",{});var Lke=s(lg);hde=n(Lke,"STRONG",{});var lbt=s(hde);Hao=r(lbt,"flava"),lbt.forEach(t),Jao=r(Lke," \u2014 "),KB=n(Lke,"A",{href:!0});var ibt=s(KB);Yao=r(ibt,"FlavaConfig"),ibt.forEach(t),Kao=r(Lke," (FLAVA model)"),Lke.forEach(t),Zao=i(L),ig=n(L,"LI",{});var yke=s(ig);ude=n(yke,"STRONG",{});var dbt=s(ude);eno=r(dbt,"fnet"),dbt.forEach(t),ono=r(yke," \u2014 "),ZB=n(yke,"A",{href:!0});var cbt=s(ZB);rno=r(cbt,"FNetConfig"),cbt.forEach(t),tno=r(yke," (FNet model)"),yke.forEach(t),ano=i(L),dg=n(L,"LI",{});var xke=s(dg);pde=n(xke,"STRONG",{});var mbt=s(pde);nno=r(mbt,"fsmt"),mbt.forEach(t),sno=r(xke," \u2014 "),eI=n(xke,"A",{href:!0});var fbt=s(eI);lno=r(fbt,"FSMTConfig"),fbt.forEach(t),ino=r(xke," (FairSeq Machine-Translation model)"),xke.forEach(t),dno=i(L),cg=n(L,"LI",{});var $ke=s(cg);_de=n($ke,"STRONG",{});var gbt=s(_de);cno=r(gbt,"funnel"),gbt.forEach(t),mno=r($ke," \u2014 "),oI=n($ke,"A",{href:!0});var hbt=s(oI);fno=r(hbt,"FunnelConfig"),hbt.forEach(t),gno=r($ke," (Funnel Transformer model)"),$ke.forEach(t),hno=i(L),mg=n(L,"LI",{});var kke=s(mg);bde=n(kke,"STRONG",{});var ubt=s(bde);uno=r(ubt,"glpn"),ubt.forEach(t),pno=r(kke," \u2014 "),rI=n(kke,"A",{href:!0});var pbt=s(rI);_no=r(pbt,"GLPNConfig"),pbt.forEach(t),bno=r(kke," (GLPN model)"),kke.forEach(t),vno=i(L),fg=n(L,"LI",{});var Ske=s(fg);vde=n(Ske,"STRONG",{});var _bt=s(vde);Fno=r(_bt,"gpt2"),_bt.forEach(t),Tno=r(Ske," \u2014 "),tI=n(Ske,"A",{href:!0});var bbt=s(tI);Mno=r(bbt,"GPT2Config"),bbt.forEach(t),Eno=r(Ske," (OpenAI GPT-2 model)"),Ske.forEach(t),Cno=i(L),gg=n(L,"LI",{});var Rke=s(gg);Fde=n(Rke,"STRONG",{});var vbt=s(Fde);wno=r(vbt,"gpt_neo"),vbt.forEach(t),Ano=r(Rke," \u2014 "),aI=n(Rke,"A",{href:!0});var Fbt=s(aI);Lno=r(Fbt,"GPTNeoConfig"),Fbt.forEach(t),yno=r(Rke," (GPT Neo model)"),Rke.forEach(t),xno=i(L),hg=n(L,"LI",{});var Pke=s(hg);Tde=n(Pke,"STRONG",{});var Tbt=s(Tde);$no=r(Tbt,"gpt_neox"),Tbt.forEach(t),kno=r(Pke," \u2014 "),nI=n(Pke,"A",{href:!0});var Mbt=s(nI);Sno=r(Mbt,"GPTNeoXConfig"),Mbt.forEach(t),Rno=r(Pke," (GPT NeoX model)"),Pke.forEach(t),Pno=i(L),ug=n(L,"LI",{});var Bke=s(ug);Mde=n(Bke,"STRONG",{});var Ebt=s(Mde);Bno=r(Ebt,"gptj"),Ebt.forEach(t),Ino=r(Bke," \u2014 "),sI=n(Bke,"A",{href:!0});var Cbt=s(sI);Nno=r(Cbt,"GPTJConfig"),Cbt.forEach(t),qno=r(Bke," (GPT-J model)"),Bke.forEach(t),jno=i(L),pg=n(L,"LI",{});var Ike=s(pg);Ede=n(Ike,"STRONG",{});var wbt=s(Ede);Dno=r(wbt,"groupvit"),wbt.forEach(t),Gno=r(Ike," \u2014 "),lI=n(Ike,"A",{href:!0});var Abt=s(lI);Ono=r(Abt,"GroupViTConfig"),Abt.forEach(t),Vno=r(Ike," (GroupViT model)"),Ike.forEach(t),Xno=i(L),_g=n(L,"LI",{});var Nke=s(_g);Cde=n(Nke,"STRONG",{});var Lbt=s(Cde);zno=r(Lbt,"hubert"),Lbt.forEach(t),Qno=r(Nke," \u2014 "),iI=n(Nke,"A",{href:!0});var ybt=s(iI);Wno=r(ybt,"HubertConfig"),ybt.forEach(t),Uno=r(Nke," (Hubert model)"),Nke.forEach(t),Hno=i(L),bg=n(L,"LI",{});var qke=s(bg);wde=n(qke,"STRONG",{});var xbt=s(wde);Jno=r(xbt,"ibert"),xbt.forEach(t),Yno=r(qke," \u2014 "),dI=n(qke,"A",{href:!0});var $bt=s(dI);Kno=r($bt,"IBertConfig"),$bt.forEach(t),Zno=r(qke," (I-BERT model)"),qke.forEach(t),eso=i(L),vg=n(L,"LI",{});var jke=s(vg);Ade=n(jke,"STRONG",{});var kbt=s(Ade);oso=r(kbt,"imagegpt"),kbt.forEach(t),rso=r(jke," \u2014 "),cI=n(jke,"A",{href:!0});var Sbt=s(cI);tso=r(Sbt,"ImageGPTConfig"),Sbt.forEach(t),aso=r(jke," (ImageGPT model)"),jke.forEach(t),nso=i(L),Fg=n(L,"LI",{});var Dke=s(Fg);Lde=n(Dke,"STRONG",{});var Rbt=s(Lde);sso=r(Rbt,"layoutlm"),Rbt.forEach(t),lso=r(Dke," \u2014 "),mI=n(Dke,"A",{href:!0});var Pbt=s(mI);iso=r(Pbt,"LayoutLMConfig"),Pbt.forEach(t),dso=r(Dke," (LayoutLM model)"),Dke.forEach(t),cso=i(L),Tg=n(L,"LI",{});var Gke=s(Tg);yde=n(Gke,"STRONG",{});var Bbt=s(yde);mso=r(Bbt,"layoutlmv2"),Bbt.forEach(t),fso=r(Gke," \u2014 "),fI=n(Gke,"A",{href:!0});var Ibt=s(fI);gso=r(Ibt,"LayoutLMv2Config"),Ibt.forEach(t),hso=r(Gke," (LayoutLMv2 model)"),Gke.forEach(t),uso=i(L),Mg=n(L,"LI",{});var Oke=s(Mg);xde=n(Oke,"STRONG",{});var Nbt=s(xde);pso=r(Nbt,"layoutlmv3"),Nbt.forEach(t),_so=r(Oke," \u2014 "),gI=n(Oke,"A",{href:!0});var qbt=s(gI);bso=r(qbt,"LayoutLMv3Config"),qbt.forEach(t),vso=r(Oke," (LayoutLMv3 model)"),Oke.forEach(t),Fso=i(L),Eg=n(L,"LI",{});var Vke=s(Eg);$de=n(Vke,"STRONG",{});var jbt=s($de);Tso=r(jbt,"led"),jbt.forEach(t),Mso=r(Vke," \u2014 "),hI=n(Vke,"A",{href:!0});var Dbt=s(hI);Eso=r(Dbt,"LEDConfig"),Dbt.forEach(t),Cso=r(Vke," (LED model)"),Vke.forEach(t),wso=i(L),Cg=n(L,"LI",{});var Xke=s(Cg);kde=n(Xke,"STRONG",{});var Gbt=s(kde);Aso=r(Gbt,"levit"),Gbt.forEach(t),Lso=r(Xke," \u2014 "),uI=n(Xke,"A",{href:!0});var Obt=s(uI);yso=r(Obt,"LevitConfig"),Obt.forEach(t),xso=r(Xke," (LeViT model)"),Xke.forEach(t),$so=i(L),wg=n(L,"LI",{});var zke=s(wg);Sde=n(zke,"STRONG",{});var Vbt=s(Sde);kso=r(Vbt,"longformer"),Vbt.forEach(t),Sso=r(zke," \u2014 "),pI=n(zke,"A",{href:!0});var Xbt=s(pI);Rso=r(Xbt,"LongformerConfig"),Xbt.forEach(t),Pso=r(zke," (Longformer model)"),zke.forEach(t),Bso=i(L),Ag=n(L,"LI",{});var Qke=s(Ag);Rde=n(Qke,"STRONG",{});var zbt=s(Rde);Iso=r(zbt,"longt5"),zbt.forEach(t),Nso=r(Qke," \u2014 "),_I=n(Qke,"A",{href:!0});var Qbt=s(_I);qso=r(Qbt,"LongT5Config"),Qbt.forEach(t),jso=r(Qke," (LongT5 model)"),Qke.forEach(t),Dso=i(L),Lg=n(L,"LI",{});var Wke=s(Lg);Pde=n(Wke,"STRONG",{});var Wbt=s(Pde);Gso=r(Wbt,"luke"),Wbt.forEach(t),Oso=r(Wke," \u2014 "),bI=n(Wke,"A",{href:!0});var Ubt=s(bI);Vso=r(Ubt,"LukeConfig"),Ubt.forEach(t),Xso=r(Wke," (LUKE model)"),Wke.forEach(t),zso=i(L),yg=n(L,"LI",{});var Uke=s(yg);Bde=n(Uke,"STRONG",{});var Hbt=s(Bde);Qso=r(Hbt,"lxmert"),Hbt.forEach(t),Wso=r(Uke," \u2014 "),vI=n(Uke,"A",{href:!0});var Jbt=s(vI);Uso=r(Jbt,"LxmertConfig"),Jbt.forEach(t),Hso=r(Uke," (LXMERT model)"),Uke.forEach(t),Jso=i(L),xg=n(L,"LI",{});var Hke=s(xg);Ide=n(Hke,"STRONG",{});var Ybt=s(Ide);Yso=r(Ybt,"m2m_100"),Ybt.forEach(t),Kso=r(Hke," \u2014 "),FI=n(Hke,"A",{href:!0});var Kbt=s(FI);Zso=r(Kbt,"M2M100Config"),Kbt.forEach(t),elo=r(Hke," (M2M100 model)"),Hke.forEach(t),olo=i(L),$g=n(L,"LI",{});var Jke=s($g);Nde=n(Jke,"STRONG",{});var Zbt=s(Nde);rlo=r(Zbt,"marian"),Zbt.forEach(t),tlo=r(Jke," \u2014 "),TI=n(Jke,"A",{href:!0});var e2t=s(TI);alo=r(e2t,"MarianConfig"),e2t.forEach(t),nlo=r(Jke," (Marian model)"),Jke.forEach(t),slo=i(L),kg=n(L,"LI",{});var Yke=s(kg);qde=n(Yke,"STRONG",{});var o2t=s(qde);llo=r(o2t,"maskformer"),o2t.forEach(t),ilo=r(Yke," \u2014 "),MI=n(Yke,"A",{href:!0});var r2t=s(MI);dlo=r(r2t,"MaskFormerConfig"),r2t.forEach(t),clo=r(Yke," (MaskFormer model)"),Yke.forEach(t),mlo=i(L),Sg=n(L,"LI",{});var Kke=s(Sg);jde=n(Kke,"STRONG",{});var t2t=s(jde);flo=r(t2t,"mbart"),t2t.forEach(t),glo=r(Kke," \u2014 "),EI=n(Kke,"A",{href:!0});var a2t=s(EI);hlo=r(a2t,"MBartConfig"),a2t.forEach(t),ulo=r(Kke," (mBART model)"),Kke.forEach(t),plo=i(L),Rg=n(L,"LI",{});var Zke=s(Rg);Dde=n(Zke,"STRONG",{});var n2t=s(Dde);_lo=r(n2t,"mctct"),n2t.forEach(t),blo=r(Zke," \u2014 "),CI=n(Zke,"A",{href:!0});var s2t=s(CI);vlo=r(s2t,"MCTCTConfig"),s2t.forEach(t),Flo=r(Zke," (M-CTC-T model)"),Zke.forEach(t),Tlo=i(L),Pg=n(L,"LI",{});var eSe=s(Pg);Gde=n(eSe,"STRONG",{});var l2t=s(Gde);Mlo=r(l2t,"megatron-bert"),l2t.forEach(t),Elo=r(eSe," \u2014 "),wI=n(eSe,"A",{href:!0});var i2t=s(wI);Clo=r(i2t,"MegatronBertConfig"),i2t.forEach(t),wlo=r(eSe," (Megatron-BERT model)"),eSe.forEach(t),Alo=i(L),Bg=n(L,"LI",{});var oSe=s(Bg);Ode=n(oSe,"STRONG",{});var d2t=s(Ode);Llo=r(d2t,"mobilebert"),d2t.forEach(t),ylo=r(oSe," \u2014 "),AI=n(oSe,"A",{href:!0});var c2t=s(AI);xlo=r(c2t,"MobileBertConfig"),c2t.forEach(t),$lo=r(oSe," (MobileBERT model)"),oSe.forEach(t),klo=i(L),Ig=n(L,"LI",{});var rSe=s(Ig);Vde=n(rSe,"STRONG",{});var m2t=s(Vde);Slo=r(m2t,"mobilevit"),m2t.forEach(t),Rlo=r(rSe," \u2014 "),LI=n(rSe,"A",{href:!0});var f2t=s(LI);Plo=r(f2t,"MobileViTConfig"),f2t.forEach(t),Blo=r(rSe," (MobileViT model)"),rSe.forEach(t),Ilo=i(L),Ng=n(L,"LI",{});var tSe=s(Ng);Xde=n(tSe,"STRONG",{});var g2t=s(Xde);Nlo=r(g2t,"mpnet"),g2t.forEach(t),qlo=r(tSe," \u2014 "),yI=n(tSe,"A",{href:!0});var h2t=s(yI);jlo=r(h2t,"MPNetConfig"),h2t.forEach(t),Dlo=r(tSe," (MPNet model)"),tSe.forEach(t),Glo=i(L),qg=n(L,"LI",{});var aSe=s(qg);zde=n(aSe,"STRONG",{});var u2t=s(zde);Olo=r(u2t,"mt5"),u2t.forEach(t),Vlo=r(aSe," \u2014 "),xI=n(aSe,"A",{href:!0});var p2t=s(xI);Xlo=r(p2t,"MT5Config"),p2t.forEach(t),zlo=r(aSe," (MT5 model)"),aSe.forEach(t),Qlo=i(L),jg=n(L,"LI",{});var nSe=s(jg);Qde=n(nSe,"STRONG",{});var _2t=s(Qde);Wlo=r(_2t,"mvp"),_2t.forEach(t),Ulo=r(nSe," \u2014 "),$I=n(nSe,"A",{href:!0});var b2t=s($I);Hlo=r(b2t,"MvpConfig"),b2t.forEach(t),Jlo=r(nSe," (MVP model)"),nSe.forEach(t),Ylo=i(L),Dg=n(L,"LI",{});var sSe=s(Dg);Wde=n(sSe,"STRONG",{});var v2t=s(Wde);Klo=r(v2t,"nezha"),v2t.forEach(t),Zlo=r(sSe," \u2014 "),kI=n(sSe,"A",{href:!0});var F2t=s(kI);eio=r(F2t,"NezhaConfig"),F2t.forEach(t),oio=r(sSe," (Nezha model)"),sSe.forEach(t),rio=i(L),Gg=n(L,"LI",{});var lSe=s(Gg);Ude=n(lSe,"STRONG",{});var T2t=s(Ude);tio=r(T2t,"nystromformer"),T2t.forEach(t),aio=r(lSe," \u2014 "),SI=n(lSe,"A",{href:!0});var M2t=s(SI);nio=r(M2t,"NystromformerConfig"),M2t.forEach(t),sio=r(lSe," (Nystr\xF6mformer model)"),lSe.forEach(t),lio=i(L),Og=n(L,"LI",{});var iSe=s(Og);Hde=n(iSe,"STRONG",{});var E2t=s(Hde);iio=r(E2t,"openai-gpt"),E2t.forEach(t),dio=r(iSe," \u2014 "),RI=n(iSe,"A",{href:!0});var C2t=s(RI);cio=r(C2t,"OpenAIGPTConfig"),C2t.forEach(t),mio=r(iSe," (OpenAI GPT model)"),iSe.forEach(t),fio=i(L),Vg=n(L,"LI",{});var dSe=s(Vg);Jde=n(dSe,"STRONG",{});var w2t=s(Jde);gio=r(w2t,"opt"),w2t.forEach(t),hio=r(dSe," \u2014 "),PI=n(dSe,"A",{href:!0});var A2t=s(PI);uio=r(A2t,"OPTConfig"),A2t.forEach(t),pio=r(dSe," (OPT model)"),dSe.forEach(t),_io=i(L),Xg=n(L,"LI",{});var cSe=s(Xg);Yde=n(cSe,"STRONG",{});var L2t=s(Yde);bio=r(L2t,"owlvit"),L2t.forEach(t),vio=r(cSe," \u2014 "),BI=n(cSe,"A",{href:!0});var y2t=s(BI);Fio=r(y2t,"OwlViTConfig"),y2t.forEach(t),Tio=r(cSe," (OWL-ViT model)"),cSe.forEach(t),Mio=i(L),zg=n(L,"LI",{});var mSe=s(zg);Kde=n(mSe,"STRONG",{});var x2t=s(Kde);Eio=r(x2t,"pegasus"),x2t.forEach(t),Cio=r(mSe," \u2014 "),II=n(mSe,"A",{href:!0});var $2t=s(II);wio=r($2t,"PegasusConfig"),$2t.forEach(t),Aio=r(mSe," (Pegasus model)"),mSe.forEach(t),Lio=i(L),Qg=n(L,"LI",{});var fSe=s(Qg);Zde=n(fSe,"STRONG",{});var k2t=s(Zde);yio=r(k2t,"pegasus_x"),k2t.forEach(t),xio=r(fSe," \u2014 "),NI=n(fSe,"A",{href:!0});var S2t=s(NI);$io=r(S2t,"PegasusXConfig"),S2t.forEach(t),kio=r(fSe," (PEGASUS-X model)"),fSe.forEach(t),Sio=i(L),Wg=n(L,"LI",{});var gSe=s(Wg);ece=n(gSe,"STRONG",{});var R2t=s(ece);Rio=r(R2t,"perceiver"),R2t.forEach(t),Pio=r(gSe," \u2014 "),qI=n(gSe,"A",{href:!0});var P2t=s(qI);Bio=r(P2t,"PerceiverConfig"),P2t.forEach(t),Iio=r(gSe," (Perceiver model)"),gSe.forEach(t),Nio=i(L),Ug=n(L,"LI",{});var hSe=s(Ug);oce=n(hSe,"STRONG",{});var B2t=s(oce);qio=r(B2t,"plbart"),B2t.forEach(t),jio=r(hSe," \u2014 "),jI=n(hSe,"A",{href:!0});var I2t=s(jI);Dio=r(I2t,"PLBartConfig"),I2t.forEach(t),Gio=r(hSe," (PLBart model)"),hSe.forEach(t),Oio=i(L),Hg=n(L,"LI",{});var uSe=s(Hg);rce=n(uSe,"STRONG",{});var N2t=s(rce);Vio=r(N2t,"poolformer"),N2t.forEach(t),Xio=r(uSe," \u2014 "),DI=n(uSe,"A",{href:!0});var q2t=s(DI);zio=r(q2t,"PoolFormerConfig"),q2t.forEach(t),Qio=r(uSe," (PoolFormer model)"),uSe.forEach(t),Wio=i(L),Jg=n(L,"LI",{});var pSe=s(Jg);tce=n(pSe,"STRONG",{});var j2t=s(tce);Uio=r(j2t,"prophetnet"),j2t.forEach(t),Hio=r(pSe," \u2014 "),GI=n(pSe,"A",{href:!0});var D2t=s(GI);Jio=r(D2t,"ProphetNetConfig"),D2t.forEach(t),Yio=r(pSe," (ProphetNet model)"),pSe.forEach(t),Kio=i(L),Yg=n(L,"LI",{});var _Se=s(Yg);ace=n(_Se,"STRONG",{});var G2t=s(ace);Zio=r(G2t,"qdqbert"),G2t.forEach(t),edo=r(_Se," \u2014 "),OI=n(_Se,"A",{href:!0});var O2t=s(OI);odo=r(O2t,"QDQBertConfig"),O2t.forEach(t),rdo=r(_Se," (QDQBert model)"),_Se.forEach(t),tdo=i(L),Kg=n(L,"LI",{});var bSe=s(Kg);nce=n(bSe,"STRONG",{});var V2t=s(nce);ado=r(V2t,"rag"),V2t.forEach(t),ndo=r(bSe," \u2014 "),VI=n(bSe,"A",{href:!0});var X2t=s(VI);sdo=r(X2t,"RagConfig"),X2t.forEach(t),ldo=r(bSe," (RAG model)"),bSe.forEach(t),ido=i(L),Zg=n(L,"LI",{});var vSe=s(Zg);sce=n(vSe,"STRONG",{});var z2t=s(sce);ddo=r(z2t,"realm"),z2t.forEach(t),cdo=r(vSe," \u2014 "),XI=n(vSe,"A",{href:!0});var Q2t=s(XI);mdo=r(Q2t,"RealmConfig"),Q2t.forEach(t),fdo=r(vSe," (REALM model)"),vSe.forEach(t),gdo=i(L),eh=n(L,"LI",{});var FSe=s(eh);lce=n(FSe,"STRONG",{});var W2t=s(lce);hdo=r(W2t,"reformer"),W2t.forEach(t),udo=r(FSe," \u2014 "),zI=n(FSe,"A",{href:!0});var U2t=s(zI);pdo=r(U2t,"ReformerConfig"),U2t.forEach(t),_do=r(FSe," (Reformer model)"),FSe.forEach(t),bdo=i(L),oh=n(L,"LI",{});var TSe=s(oh);ice=n(TSe,"STRONG",{});var H2t=s(ice);vdo=r(H2t,"regnet"),H2t.forEach(t),Fdo=r(TSe," \u2014 "),QI=n(TSe,"A",{href:!0});var J2t=s(QI);Tdo=r(J2t,"RegNetConfig"),J2t.forEach(t),Mdo=r(TSe," (RegNet model)"),TSe.forEach(t),Edo=i(L),rh=n(L,"LI",{});var MSe=s(rh);dce=n(MSe,"STRONG",{});var Y2t=s(dce);Cdo=r(Y2t,"rembert"),Y2t.forEach(t),wdo=r(MSe," \u2014 "),WI=n(MSe,"A",{href:!0});var K2t=s(WI);Ado=r(K2t,"RemBertConfig"),K2t.forEach(t),Ldo=r(MSe," (RemBERT model)"),MSe.forEach(t),ydo=i(L),th=n(L,"LI",{});var ESe=s(th);cce=n(ESe,"STRONG",{});var Z2t=s(cce);xdo=r(Z2t,"resnet"),Z2t.forEach(t),$do=r(ESe," \u2014 "),UI=n(ESe,"A",{href:!0});var evt=s(UI);kdo=r(evt,"ResNetConfig"),evt.forEach(t),Sdo=r(ESe," (ResNet model)"),ESe.forEach(t),Rdo=i(L),ah=n(L,"LI",{});var CSe=s(ah);mce=n(CSe,"STRONG",{});var ovt=s(mce);Pdo=r(ovt,"retribert"),ovt.forEach(t),Bdo=r(CSe," \u2014 "),HI=n(CSe,"A",{href:!0});var rvt=s(HI);Ido=r(rvt,"RetriBertConfig"),rvt.forEach(t),Ndo=r(CSe," (RetriBERT model)"),CSe.forEach(t),qdo=i(L),nh=n(L,"LI",{});var wSe=s(nh);fce=n(wSe,"STRONG",{});var tvt=s(fce);jdo=r(tvt,"roberta"),tvt.forEach(t),Ddo=r(wSe," \u2014 "),JI=n(wSe,"A",{href:!0});var avt=s(JI);Gdo=r(avt,"RobertaConfig"),avt.forEach(t),Odo=r(wSe," (RoBERTa model)"),wSe.forEach(t),Vdo=i(L),sh=n(L,"LI",{});var ASe=s(sh);gce=n(ASe,"STRONG",{});var nvt=s(gce);Xdo=r(nvt,"roformer"),nvt.forEach(t),zdo=r(ASe," \u2014 "),YI=n(ASe,"A",{href:!0});var svt=s(YI);Qdo=r(svt,"RoFormerConfig"),svt.forEach(t),Wdo=r(ASe," (RoFormer model)"),ASe.forEach(t),Udo=i(L),lh=n(L,"LI",{});var LSe=s(lh);hce=n(LSe,"STRONG",{});var lvt=s(hce);Hdo=r(lvt,"segformer"),lvt.forEach(t),Jdo=r(LSe," \u2014 "),KI=n(LSe,"A",{href:!0});var ivt=s(KI);Ydo=r(ivt,"SegformerConfig"),ivt.forEach(t),Kdo=r(LSe," (SegFormer model)"),LSe.forEach(t),Zdo=i(L),ih=n(L,"LI",{});var ySe=s(ih);uce=n(ySe,"STRONG",{});var dvt=s(uce);eco=r(dvt,"sew"),dvt.forEach(t),oco=r(ySe," \u2014 "),ZI=n(ySe,"A",{href:!0});var cvt=s(ZI);rco=r(cvt,"SEWConfig"),cvt.forEach(t),tco=r(ySe," (SEW model)"),ySe.forEach(t),aco=i(L),dh=n(L,"LI",{});var xSe=s(dh);pce=n(xSe,"STRONG",{});var mvt=s(pce);nco=r(mvt,"sew-d"),mvt.forEach(t),sco=r(xSe," \u2014 "),eN=n(xSe,"A",{href:!0});var fvt=s(eN);lco=r(fvt,"SEWDConfig"),fvt.forEach(t),ico=r(xSe," (SEW-D model)"),xSe.forEach(t),dco=i(L),ch=n(L,"LI",{});var $Se=s(ch);_ce=n($Se,"STRONG",{});var gvt=s(_ce);cco=r(gvt,"speech-encoder-decoder"),gvt.forEach(t),mco=r($Se," \u2014 "),oN=n($Se,"A",{href:!0});var hvt=s(oN);fco=r(hvt,"SpeechEncoderDecoderConfig"),hvt.forEach(t),gco=r($Se," (Speech Encoder decoder model)"),$Se.forEach(t),hco=i(L),mh=n(L,"LI",{});var kSe=s(mh);bce=n(kSe,"STRONG",{});var uvt=s(bce);uco=r(uvt,"speech_to_text"),uvt.forEach(t),pco=r(kSe," \u2014 "),rN=n(kSe,"A",{href:!0});var pvt=s(rN);_co=r(pvt,"Speech2TextConfig"),pvt.forEach(t),bco=r(kSe," (Speech2Text model)"),kSe.forEach(t),vco=i(L),fh=n(L,"LI",{});var SSe=s(fh);vce=n(SSe,"STRONG",{});var _vt=s(vce);Fco=r(_vt,"speech_to_text_2"),_vt.forEach(t),Tco=r(SSe," \u2014 "),tN=n(SSe,"A",{href:!0});var bvt=s(tN);Mco=r(bvt,"Speech2Text2Config"),bvt.forEach(t),Eco=r(SSe," (Speech2Text2 model)"),SSe.forEach(t),Cco=i(L),gh=n(L,"LI",{});var RSe=s(gh);Fce=n(RSe,"STRONG",{});var vvt=s(Fce);wco=r(vvt,"splinter"),vvt.forEach(t),Aco=r(RSe," \u2014 "),aN=n(RSe,"A",{href:!0});var Fvt=s(aN);Lco=r(Fvt,"SplinterConfig"),Fvt.forEach(t),yco=r(RSe," (Splinter model)"),RSe.forEach(t),xco=i(L),hh=n(L,"LI",{});var PSe=s(hh);Tce=n(PSe,"STRONG",{});var Tvt=s(Tce);$co=r(Tvt,"squeezebert"),Tvt.forEach(t),kco=r(PSe," \u2014 "),nN=n(PSe,"A",{href:!0});var Mvt=s(nN);Sco=r(Mvt,"SqueezeBertConfig"),Mvt.forEach(t),Rco=r(PSe," (SqueezeBERT model)"),PSe.forEach(t),Pco=i(L),uh=n(L,"LI",{});var BSe=s(uh);Mce=n(BSe,"STRONG",{});var Evt=s(Mce);Bco=r(Evt,"swin"),Evt.forEach(t),Ico=r(BSe," \u2014 "),sN=n(BSe,"A",{href:!0});var Cvt=s(sN);Nco=r(Cvt,"SwinConfig"),Cvt.forEach(t),qco=r(BSe," (Swin Transformer model)"),BSe.forEach(t),jco=i(L),ph=n(L,"LI",{});var ISe=s(ph);Ece=n(ISe,"STRONG",{});var wvt=s(Ece);Dco=r(wvt,"swinv2"),wvt.forEach(t),Gco=r(ISe," \u2014 "),lN=n(ISe,"A",{href:!0});var Avt=s(lN);Oco=r(Avt,"Swinv2Config"),Avt.forEach(t),Vco=r(ISe," (Swin Transformer V2 model)"),ISe.forEach(t),Xco=i(L),_h=n(L,"LI",{});var NSe=s(_h);Cce=n(NSe,"STRONG",{});var Lvt=s(Cce);zco=r(Lvt,"t5"),Lvt.forEach(t),Qco=r(NSe," \u2014 "),iN=n(NSe,"A",{href:!0});var yvt=s(iN);Wco=r(yvt,"T5Config"),yvt.forEach(t),Uco=r(NSe," (T5 model)"),NSe.forEach(t),Hco=i(L),bh=n(L,"LI",{});var qSe=s(bh);wce=n(qSe,"STRONG",{});var xvt=s(wce);Jco=r(xvt,"tapas"),xvt.forEach(t),Yco=r(qSe," \u2014 "),dN=n(qSe,"A",{href:!0});var $vt=s(dN);Kco=r($vt,"TapasConfig"),$vt.forEach(t),Zco=r(qSe," (TAPAS model)"),qSe.forEach(t),emo=i(L),vh=n(L,"LI",{});var jSe=s(vh);Ace=n(jSe,"STRONG",{});var kvt=s(Ace);omo=r(kvt,"trajectory_transformer"),kvt.forEach(t),rmo=r(jSe," \u2014 "),cN=n(jSe,"A",{href:!0});var Svt=s(cN);tmo=r(Svt,"TrajectoryTransformerConfig"),Svt.forEach(t),amo=r(jSe," (Trajectory Transformer model)"),jSe.forEach(t),nmo=i(L),Fh=n(L,"LI",{});var DSe=s(Fh);Lce=n(DSe,"STRONG",{});var Rvt=s(Lce);smo=r(Rvt,"transfo-xl"),Rvt.forEach(t),lmo=r(DSe," \u2014 "),mN=n(DSe,"A",{href:!0});var Pvt=s(mN);imo=r(Pvt,"TransfoXLConfig"),Pvt.forEach(t),dmo=r(DSe," (Transformer-XL model)"),DSe.forEach(t),cmo=i(L),Th=n(L,"LI",{});var GSe=s(Th);yce=n(GSe,"STRONG",{});var Bvt=s(yce);mmo=r(Bvt,"trocr"),Bvt.forEach(t),fmo=r(GSe," \u2014 "),fN=n(GSe,"A",{href:!0});var Ivt=s(fN);gmo=r(Ivt,"TrOCRConfig"),Ivt.forEach(t),hmo=r(GSe," (TrOCR model)"),GSe.forEach(t),umo=i(L),Mh=n(L,"LI",{});var OSe=s(Mh);xce=n(OSe,"STRONG",{});var Nvt=s(xce);pmo=r(Nvt,"unispeech"),Nvt.forEach(t),_mo=r(OSe," \u2014 "),gN=n(OSe,"A",{href:!0});var qvt=s(gN);bmo=r(qvt,"UniSpeechConfig"),qvt.forEach(t),vmo=r(OSe," (UniSpeech model)"),OSe.forEach(t),Fmo=i(L),Eh=n(L,"LI",{});var VSe=s(Eh);$ce=n(VSe,"STRONG",{});var jvt=s($ce);Tmo=r(jvt,"unispeech-sat"),jvt.forEach(t),Mmo=r(VSe," \u2014 "),hN=n(VSe,"A",{href:!0});var Dvt=s(hN);Emo=r(Dvt,"UniSpeechSatConfig"),Dvt.forEach(t),Cmo=r(VSe," (UniSpeechSat model)"),VSe.forEach(t),wmo=i(L),Ch=n(L,"LI",{});var XSe=s(Ch);kce=n(XSe,"STRONG",{});var Gvt=s(kce);Amo=r(Gvt,"van"),Gvt.forEach(t),Lmo=r(XSe," \u2014 "),uN=n(XSe,"A",{href:!0});var Ovt=s(uN);ymo=r(Ovt,"VanConfig"),Ovt.forEach(t),xmo=r(XSe," (VAN model)"),XSe.forEach(t),$mo=i(L),wh=n(L,"LI",{});var zSe=s(wh);Sce=n(zSe,"STRONG",{});var Vvt=s(Sce);kmo=r(Vvt,"videomae"),Vvt.forEach(t),Smo=r(zSe," \u2014 "),pN=n(zSe,"A",{href:!0});var Xvt=s(pN);Rmo=r(Xvt,"VideoMAEConfig"),Xvt.forEach(t),Pmo=r(zSe," (VideoMAE model)"),zSe.forEach(t),Bmo=i(L),Ah=n(L,"LI",{});var QSe=s(Ah);Rce=n(QSe,"STRONG",{});var zvt=s(Rce);Imo=r(zvt,"vilt"),zvt.forEach(t),Nmo=r(QSe," \u2014 "),_N=n(QSe,"A",{href:!0});var Qvt=s(_N);qmo=r(Qvt,"ViltConfig"),Qvt.forEach(t),jmo=r(QSe," (ViLT model)"),QSe.forEach(t),Dmo=i(L),Lh=n(L,"LI",{});var WSe=s(Lh);Pce=n(WSe,"STRONG",{});var Wvt=s(Pce);Gmo=r(Wvt,"vision-encoder-decoder"),Wvt.forEach(t),Omo=r(WSe," \u2014 "),bN=n(WSe,"A",{href:!0});var Uvt=s(bN);Vmo=r(Uvt,"VisionEncoderDecoderConfig"),Uvt.forEach(t),Xmo=r(WSe," (Vision Encoder decoder model)"),WSe.forEach(t),zmo=i(L),yh=n(L,"LI",{});var USe=s(yh);Bce=n(USe,"STRONG",{});var Hvt=s(Bce);Qmo=r(Hvt,"vision-text-dual-encoder"),Hvt.forEach(t),Wmo=r(USe," \u2014 "),vN=n(USe,"A",{href:!0});var Jvt=s(vN);Umo=r(Jvt,"VisionTextDualEncoderConfig"),Jvt.forEach(t),Hmo=r(USe," (VisionTextDualEncoder model)"),USe.forEach(t),Jmo=i(L),xh=n(L,"LI",{});var HSe=s(xh);Ice=n(HSe,"STRONG",{});var Yvt=s(Ice);Ymo=r(Yvt,"visual_bert"),Yvt.forEach(t),Kmo=r(HSe," \u2014 "),FN=n(HSe,"A",{href:!0});var Kvt=s(FN);Zmo=r(Kvt,"VisualBertConfig"),Kvt.forEach(t),efo=r(HSe," (VisualBERT model)"),HSe.forEach(t),ofo=i(L),$h=n(L,"LI",{});var JSe=s($h);Nce=n(JSe,"STRONG",{});var Zvt=s(Nce);rfo=r(Zvt,"vit"),Zvt.forEach(t),tfo=r(JSe," \u2014 "),TN=n(JSe,"A",{href:!0});var e1t=s(TN);afo=r(e1t,"ViTConfig"),e1t.forEach(t),nfo=r(JSe," (ViT model)"),JSe.forEach(t),sfo=i(L),kh=n(L,"LI",{});var YSe=s(kh);qce=n(YSe,"STRONG",{});var o1t=s(qce);lfo=r(o1t,"vit_mae"),o1t.forEach(t),ifo=r(YSe," \u2014 "),MN=n(YSe,"A",{href:!0});var r1t=s(MN);dfo=r(r1t,"ViTMAEConfig"),r1t.forEach(t),cfo=r(YSe," (ViTMAE model)"),YSe.forEach(t),mfo=i(L),Sh=n(L,"LI",{});var KSe=s(Sh);jce=n(KSe,"STRONG",{});var t1t=s(jce);ffo=r(t1t,"wav2vec2"),t1t.forEach(t),gfo=r(KSe," \u2014 "),EN=n(KSe,"A",{href:!0});var a1t=s(EN);hfo=r(a1t,"Wav2Vec2Config"),a1t.forEach(t),ufo=r(KSe," (Wav2Vec2 model)"),KSe.forEach(t),pfo=i(L),Rh=n(L,"LI",{});var ZSe=s(Rh);Dce=n(ZSe,"STRONG",{});var n1t=s(Dce);_fo=r(n1t,"wav2vec2-conformer"),n1t.forEach(t),bfo=r(ZSe," \u2014 "),CN=n(ZSe,"A",{href:!0});var s1t=s(CN);vfo=r(s1t,"Wav2Vec2ConformerConfig"),s1t.forEach(t),Ffo=r(ZSe," (Wav2Vec2-Conformer model)"),ZSe.forEach(t),Tfo=i(L),Ph=n(L,"LI",{});var eRe=s(Ph);Gce=n(eRe,"STRONG",{});var l1t=s(Gce);Mfo=r(l1t,"wavlm"),l1t.forEach(t),Efo=r(eRe," \u2014 "),wN=n(eRe,"A",{href:!0});var i1t=s(wN);Cfo=r(i1t,"WavLMConfig"),i1t.forEach(t),wfo=r(eRe," (WavLM model)"),eRe.forEach(t),Afo=i(L),Bh=n(L,"LI",{});var oRe=s(Bh);Oce=n(oRe,"STRONG",{});var d1t=s(Oce);Lfo=r(d1t,"xclip"),d1t.forEach(t),yfo=r(oRe," \u2014 "),AN=n(oRe,"A",{href:!0});var c1t=s(AN);xfo=r(c1t,"XCLIPConfig"),c1t.forEach(t),$fo=r(oRe," (X-CLIP model)"),oRe.forEach(t),kfo=i(L),Ih=n(L,"LI",{});var rRe=s(Ih);Vce=n(rRe,"STRONG",{});var m1t=s(Vce);Sfo=r(m1t,"xglm"),m1t.forEach(t),Rfo=r(rRe," \u2014 "),LN=n(rRe,"A",{href:!0});var f1t=s(LN);Pfo=r(f1t,"XGLMConfig"),f1t.forEach(t),Bfo=r(rRe," (XGLM model)"),rRe.forEach(t),Ifo=i(L),Nh=n(L,"LI",{});var tRe=s(Nh);Xce=n(tRe,"STRONG",{});var g1t=s(Xce);Nfo=r(g1t,"xlm"),g1t.forEach(t),qfo=r(tRe," \u2014 "),yN=n(tRe,"A",{href:!0});var h1t=s(yN);jfo=r(h1t,"XLMConfig"),h1t.forEach(t),Dfo=r(tRe," (XLM model)"),tRe.forEach(t),Gfo=i(L),qh=n(L,"LI",{});var aRe=s(qh);zce=n(aRe,"STRONG",{});var u1t=s(zce);Ofo=r(u1t,"xlm-prophetnet"),u1t.forEach(t),Vfo=r(aRe," \u2014 "),xN=n(aRe,"A",{href:!0});var p1t=s(xN);Xfo=r(p1t,"XLMProphetNetConfig"),p1t.forEach(t),zfo=r(aRe," (XLM-ProphetNet model)"),aRe.forEach(t),Qfo=i(L),jh=n(L,"LI",{});var nRe=s(jh);Qce=n(nRe,"STRONG",{});var _1t=s(Qce);Wfo=r(_1t,"xlm-roberta"),_1t.forEach(t),Ufo=r(nRe," \u2014 "),$N=n(nRe,"A",{href:!0});var b1t=s($N);Hfo=r(b1t,"XLMRobertaConfig"),b1t.forEach(t),Jfo=r(nRe," (XLM-RoBERTa model)"),nRe.forEach(t),Yfo=i(L),Dh=n(L,"LI",{});var sRe=s(Dh);Wce=n(sRe,"STRONG",{});var v1t=s(Wce);Kfo=r(v1t,"xlm-roberta-xl"),v1t.forEach(t),Zfo=r(sRe," \u2014 "),kN=n(sRe,"A",{href:!0});var F1t=s(kN);ego=r(F1t,"XLMRobertaXLConfig"),F1t.forEach(t),ogo=r(sRe," (XLM-RoBERTa-XL model)"),sRe.forEach(t),rgo=i(L),Gh=n(L,"LI",{});var lRe=s(Gh);Uce=n(lRe,"STRONG",{});var T1t=s(Uce);tgo=r(T1t,"xlnet"),T1t.forEach(t),ago=r(lRe," \u2014 "),SN=n(lRe,"A",{href:!0});var M1t=s(SN);ngo=r(M1t,"XLNetConfig"),M1t.forEach(t),sgo=r(lRe," (XLNet model)"),lRe.forEach(t),lgo=i(L),Oh=n(L,"LI",{});var iRe=s(Oh);Hce=n(iRe,"STRONG",{});var E1t=s(Hce);igo=r(E1t,"yolos"),E1t.forEach(t),dgo=r(iRe," \u2014 "),RN=n(iRe,"A",{href:!0});var C1t=s(RN);cgo=r(C1t,"YolosConfig"),C1t.forEach(t),mgo=r(iRe," (YOLOS model)"),iRe.forEach(t),fgo=i(L),Vh=n(L,"LI",{});var dRe=s(Vh);Jce=n(dRe,"STRONG",{});var w1t=s(Jce);ggo=r(w1t,"yoso"),w1t.forEach(t),hgo=r(dRe," \u2014 "),PN=n(dRe,"A",{href:!0});var A1t=s(PN);ugo=r(A1t,"YosoConfig"),A1t.forEach(t),pgo=r(dRe," (YOSO model)"),dRe.forEach(t),L.forEach(t),_go=i(ht),T(Xh.$$.fragment,ht),ht.forEach(t),bgo=i(gt),zh=n(gt,"DIV",{class:!0});var eZe=s(zh);T(v9.$$.fragment,eZe),vgo=i(eZe),Yce=n(eZe,"P",{});var L1t=s(Yce);Fgo=r(L1t,"Register a new configuration for this class."),L1t.forEach(t),eZe.forEach(t),gt.forEach(t),WJe=i(m),md=n(m,"H2",{class:!0});var oZe=s(md);Qh=n(oZe,"A",{id:!0,class:!0,href:!0});var y1t=s(Qh);Kce=n(y1t,"SPAN",{});var x1t=s(Kce);T(F9.$$.fragment,x1t),x1t.forEach(t),y1t.forEach(t),Tgo=i(oZe),Zce=n(oZe,"SPAN",{});var $1t=s(Zce);Mgo=r($1t,"AutoTokenizer"),$1t.forEach(t),oZe.forEach(t),UJe=i(m),$o=n(m,"DIV",{class:!0});var Fl=s($o);T(T9.$$.fragment,Fl),Ego=i(Fl),M9=n(Fl,"P",{});var rZe=s(M9);Cgo=r(rZe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),BN=n(rZe,"A",{href:!0});var k1t=s(BN);wgo=r(k1t,"AutoTokenizer.from_pretrained()"),k1t.forEach(t),Ago=r(rZe," class method."),rZe.forEach(t),Lgo=i(Fl),E9=n(Fl,"P",{});var tZe=s(E9);ygo=r(tZe,"This class cannot be instantiated directly using "),eme=n(tZe,"CODE",{});var S1t=s(eme);xgo=r(S1t,"__init__()"),S1t.forEach(t),$go=r(tZe," (throws an error)."),tZe.forEach(t),kgo=i(Fl),Br=n(Fl,"DIV",{class:!0});var Tl=s(Br);T(C9.$$.fragment,Tl),Sgo=i(Tl),ome=n(Tl,"P",{});var R1t=s(ome);Rgo=r(R1t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),R1t.forEach(t),Pgo=i(Tl),Ua=n(Tl,"P",{});var ny=s(Ua);Bgo=r(ny,"The tokenizer class to instantiate is selected based on the "),rme=n(ny,"CODE",{});var P1t=s(rme);Igo=r(P1t,"model_type"),P1t.forEach(t),Ngo=r(ny,` property of the config object (either
passed as an argument or loaded from `),tme=n(ny,"CODE",{});var B1t=s(tme);qgo=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),jgo=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ame=n(ny,"CODE",{});var I1t=s(ame);Dgo=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Ggo=r(ny,":"),ny.forEach(t),Ogo=i(Tl),k=n(Tl,"UL",{});var S=s(k);as=n(S,"LI",{});var JR=s(as);nme=n(JR,"STRONG",{});var N1t=s(nme);Vgo=r(N1t,"albert"),N1t.forEach(t),Xgo=r(JR," \u2014 "),IN=n(JR,"A",{href:!0});var q1t=s(IN);zgo=r(q1t,"AlbertTokenizer"),q1t.forEach(t),Qgo=r(JR," or "),NN=n(JR,"A",{href:!0});var j1t=s(NN);Wgo=r(j1t,"AlbertTokenizerFast"),j1t.forEach(t),Ugo=r(JR," (ALBERT model)"),JR.forEach(t),Hgo=i(S),ns=n(S,"LI",{});var YR=s(ns);sme=n(YR,"STRONG",{});var D1t=s(sme);Jgo=r(D1t,"bart"),D1t.forEach(t),Ygo=r(YR," \u2014 "),qN=n(YR,"A",{href:!0});var G1t=s(qN);Kgo=r(G1t,"BartTokenizer"),G1t.forEach(t),Zgo=r(YR," or "),jN=n(YR,"A",{href:!0});var O1t=s(jN);eho=r(O1t,"BartTokenizerFast"),O1t.forEach(t),oho=r(YR," (BART model)"),YR.forEach(t),rho=i(S),ss=n(S,"LI",{});var KR=s(ss);lme=n(KR,"STRONG",{});var V1t=s(lme);tho=r(V1t,"barthez"),V1t.forEach(t),aho=r(KR," \u2014 "),DN=n(KR,"A",{href:!0});var X1t=s(DN);nho=r(X1t,"BarthezTokenizer"),X1t.forEach(t),sho=r(KR," or "),GN=n(KR,"A",{href:!0});var z1t=s(GN);lho=r(z1t,"BarthezTokenizerFast"),z1t.forEach(t),iho=r(KR," (BARThez model)"),KR.forEach(t),dho=i(S),Wh=n(S,"LI",{});var cRe=s(Wh);ime=n(cRe,"STRONG",{});var Q1t=s(ime);cho=r(Q1t,"bartpho"),Q1t.forEach(t),mho=r(cRe," \u2014 "),ON=n(cRe,"A",{href:!0});var W1t=s(ON);fho=r(W1t,"BartphoTokenizer"),W1t.forEach(t),gho=r(cRe," (BARTpho model)"),cRe.forEach(t),hho=i(S),ls=n(S,"LI",{});var ZR=s(ls);dme=n(ZR,"STRONG",{});var U1t=s(dme);uho=r(U1t,"bert"),U1t.forEach(t),pho=r(ZR," \u2014 "),VN=n(ZR,"A",{href:!0});var H1t=s(VN);_ho=r(H1t,"BertTokenizer"),H1t.forEach(t),bho=r(ZR," or "),XN=n(ZR,"A",{href:!0});var J1t=s(XN);vho=r(J1t,"BertTokenizerFast"),J1t.forEach(t),Fho=r(ZR," (BERT model)"),ZR.forEach(t),Tho=i(S),Uh=n(S,"LI",{});var mRe=s(Uh);cme=n(mRe,"STRONG",{});var Y1t=s(cme);Mho=r(Y1t,"bert-generation"),Y1t.forEach(t),Eho=r(mRe," \u2014 "),zN=n(mRe,"A",{href:!0});var K1t=s(zN);Cho=r(K1t,"BertGenerationTokenizer"),K1t.forEach(t),who=r(mRe," (Bert Generation model)"),mRe.forEach(t),Aho=i(S),Hh=n(S,"LI",{});var fRe=s(Hh);mme=n(fRe,"STRONG",{});var Z1t=s(mme);Lho=r(Z1t,"bert-japanese"),Z1t.forEach(t),yho=r(fRe," \u2014 "),QN=n(fRe,"A",{href:!0});var eFt=s(QN);xho=r(eFt,"BertJapaneseTokenizer"),eFt.forEach(t),$ho=r(fRe," (BertJapanese model)"),fRe.forEach(t),kho=i(S),Jh=n(S,"LI",{});var gRe=s(Jh);fme=n(gRe,"STRONG",{});var oFt=s(fme);Sho=r(oFt,"bertweet"),oFt.forEach(t),Rho=r(gRe," \u2014 "),WN=n(gRe,"A",{href:!0});var rFt=s(WN);Pho=r(rFt,"BertweetTokenizer"),rFt.forEach(t),Bho=r(gRe," (BERTweet model)"),gRe.forEach(t),Iho=i(S),is=n(S,"LI",{});var eP=s(is);gme=n(eP,"STRONG",{});var tFt=s(gme);Nho=r(tFt,"big_bird"),tFt.forEach(t),qho=r(eP," \u2014 "),UN=n(eP,"A",{href:!0});var aFt=s(UN);jho=r(aFt,"BigBirdTokenizer"),aFt.forEach(t),Dho=r(eP," or "),HN=n(eP,"A",{href:!0});var nFt=s(HN);Gho=r(nFt,"BigBirdTokenizerFast"),nFt.forEach(t),Oho=r(eP," (BigBird model)"),eP.forEach(t),Vho=i(S),ds=n(S,"LI",{});var oP=s(ds);hme=n(oP,"STRONG",{});var sFt=s(hme);Xho=r(sFt,"bigbird_pegasus"),sFt.forEach(t),zho=r(oP," \u2014 "),JN=n(oP,"A",{href:!0});var lFt=s(JN);Qho=r(lFt,"PegasusTokenizer"),lFt.forEach(t),Who=r(oP," or "),YN=n(oP,"A",{href:!0});var iFt=s(YN);Uho=r(iFt,"PegasusTokenizerFast"),iFt.forEach(t),Hho=r(oP," (BigBird-Pegasus model)"),oP.forEach(t),Jho=i(S),cs=n(S,"LI",{});var rP=s(cs);ume=n(rP,"STRONG",{});var dFt=s(ume);Yho=r(dFt,"blenderbot"),dFt.forEach(t),Kho=r(rP," \u2014 "),KN=n(rP,"A",{href:!0});var cFt=s(KN);Zho=r(cFt,"BlenderbotTokenizer"),cFt.forEach(t),euo=r(rP," or "),ZN=n(rP,"A",{href:!0});var mFt=s(ZN);ouo=r(mFt,"BlenderbotTokenizerFast"),mFt.forEach(t),ruo=r(rP," (Blenderbot model)"),rP.forEach(t),tuo=i(S),Yh=n(S,"LI",{});var hRe=s(Yh);pme=n(hRe,"STRONG",{});var fFt=s(pme);auo=r(fFt,"blenderbot-small"),fFt.forEach(t),nuo=r(hRe," \u2014 "),eq=n(hRe,"A",{href:!0});var gFt=s(eq);suo=r(gFt,"BlenderbotSmallTokenizer"),gFt.forEach(t),luo=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),iuo=i(S),Kh=n(S,"LI",{});var uRe=s(Kh);_me=n(uRe,"STRONG",{});var hFt=s(_me);duo=r(hFt,"bloom"),hFt.forEach(t),cuo=r(uRe," \u2014 "),oq=n(uRe,"A",{href:!0});var uFt=s(oq);muo=r(uFt,"BloomTokenizerFast"),uFt.forEach(t),fuo=r(uRe," (BLOOM model)"),uRe.forEach(t),guo=i(S),Zh=n(S,"LI",{});var pRe=s(Zh);bme=n(pRe,"STRONG",{});var pFt=s(bme);huo=r(pFt,"byt5"),pFt.forEach(t),uuo=r(pRe," \u2014 "),rq=n(pRe,"A",{href:!0});var _Ft=s(rq);puo=r(_Ft,"ByT5Tokenizer"),_Ft.forEach(t),_uo=r(pRe," (ByT5 model)"),pRe.forEach(t),buo=i(S),ms=n(S,"LI",{});var tP=s(ms);vme=n(tP,"STRONG",{});var bFt=s(vme);vuo=r(bFt,"camembert"),bFt.forEach(t),Fuo=r(tP," \u2014 "),tq=n(tP,"A",{href:!0});var vFt=s(tq);Tuo=r(vFt,"CamembertTokenizer"),vFt.forEach(t),Muo=r(tP," or "),aq=n(tP,"A",{href:!0});var FFt=s(aq);Euo=r(FFt,"CamembertTokenizerFast"),FFt.forEach(t),Cuo=r(tP," (CamemBERT model)"),tP.forEach(t),wuo=i(S),eu=n(S,"LI",{});var _Re=s(eu);Fme=n(_Re,"STRONG",{});var TFt=s(Fme);Auo=r(TFt,"canine"),TFt.forEach(t),Luo=r(_Re," \u2014 "),nq=n(_Re,"A",{href:!0});var MFt=s(nq);yuo=r(MFt,"CanineTokenizer"),MFt.forEach(t),xuo=r(_Re," (CANINE model)"),_Re.forEach(t),$uo=i(S),fs=n(S,"LI",{});var aP=s(fs);Tme=n(aP,"STRONG",{});var EFt=s(Tme);kuo=r(EFt,"clip"),EFt.forEach(t),Suo=r(aP," \u2014 "),sq=n(aP,"A",{href:!0});var CFt=s(sq);Ruo=r(CFt,"CLIPTokenizer"),CFt.forEach(t),Puo=r(aP," or "),lq=n(aP,"A",{href:!0});var wFt=s(lq);Buo=r(wFt,"CLIPTokenizerFast"),wFt.forEach(t),Iuo=r(aP," (CLIP model)"),aP.forEach(t),Nuo=i(S),gs=n(S,"LI",{});var nP=s(gs);Mme=n(nP,"STRONG",{});var AFt=s(Mme);quo=r(AFt,"codegen"),AFt.forEach(t),juo=r(nP," \u2014 "),iq=n(nP,"A",{href:!0});var LFt=s(iq);Duo=r(LFt,"CodeGenTokenizer"),LFt.forEach(t),Guo=r(nP," or "),dq=n(nP,"A",{href:!0});var yFt=s(dq);Ouo=r(yFt,"CodeGenTokenizerFast"),yFt.forEach(t),Vuo=r(nP," (CodeGen model)"),nP.forEach(t),Xuo=i(S),hs=n(S,"LI",{});var sP=s(hs);Eme=n(sP,"STRONG",{});var xFt=s(Eme);zuo=r(xFt,"convbert"),xFt.forEach(t),Quo=r(sP," \u2014 "),cq=n(sP,"A",{href:!0});var $Ft=s(cq);Wuo=r($Ft,"ConvBertTokenizer"),$Ft.forEach(t),Uuo=r(sP," or "),mq=n(sP,"A",{href:!0});var kFt=s(mq);Huo=r(kFt,"ConvBertTokenizerFast"),kFt.forEach(t),Juo=r(sP," (ConvBERT model)"),sP.forEach(t),Yuo=i(S),us=n(S,"LI",{});var lP=s(us);Cme=n(lP,"STRONG",{});var SFt=s(Cme);Kuo=r(SFt,"cpm"),SFt.forEach(t),Zuo=r(lP," \u2014 "),fq=n(lP,"A",{href:!0});var RFt=s(fq);epo=r(RFt,"CpmTokenizer"),RFt.forEach(t),opo=r(lP," or "),gq=n(lP,"A",{href:!0});var PFt=s(gq);rpo=r(PFt,"CpmTokenizerFast"),PFt.forEach(t),tpo=r(lP," (CPM model)"),lP.forEach(t),apo=i(S),ou=n(S,"LI",{});var bRe=s(ou);wme=n(bRe,"STRONG",{});var BFt=s(wme);npo=r(BFt,"ctrl"),BFt.forEach(t),spo=r(bRe," \u2014 "),hq=n(bRe,"A",{href:!0});var IFt=s(hq);lpo=r(IFt,"CTRLTokenizer"),IFt.forEach(t),ipo=r(bRe," (CTRL model)"),bRe.forEach(t),dpo=i(S),ps=n(S,"LI",{});var iP=s(ps);Ame=n(iP,"STRONG",{});var NFt=s(Ame);cpo=r(NFt,"data2vec-text"),NFt.forEach(t),mpo=r(iP," \u2014 "),uq=n(iP,"A",{href:!0});var qFt=s(uq);fpo=r(qFt,"RobertaTokenizer"),qFt.forEach(t),gpo=r(iP," or "),pq=n(iP,"A",{href:!0});var jFt=s(pq);hpo=r(jFt,"RobertaTokenizerFast"),jFt.forEach(t),upo=r(iP," (Data2VecText model)"),iP.forEach(t),ppo=i(S),_s=n(S,"LI",{});var dP=s(_s);Lme=n(dP,"STRONG",{});var DFt=s(Lme);_po=r(DFt,"deberta"),DFt.forEach(t),bpo=r(dP," \u2014 "),_q=n(dP,"A",{href:!0});var GFt=s(_q);vpo=r(GFt,"DebertaTokenizer"),GFt.forEach(t),Fpo=r(dP," or "),bq=n(dP,"A",{href:!0});var OFt=s(bq);Tpo=r(OFt,"DebertaTokenizerFast"),OFt.forEach(t),Mpo=r(dP," (DeBERTa model)"),dP.forEach(t),Epo=i(S),bs=n(S,"LI",{});var cP=s(bs);yme=n(cP,"STRONG",{});var VFt=s(yme);Cpo=r(VFt,"deberta-v2"),VFt.forEach(t),wpo=r(cP," \u2014 "),vq=n(cP,"A",{href:!0});var XFt=s(vq);Apo=r(XFt,"DebertaV2Tokenizer"),XFt.forEach(t),Lpo=r(cP," or "),Fq=n(cP,"A",{href:!0});var zFt=s(Fq);ypo=r(zFt,"DebertaV2TokenizerFast"),zFt.forEach(t),xpo=r(cP," (DeBERTa-v2 model)"),cP.forEach(t),$po=i(S),vs=n(S,"LI",{});var mP=s(vs);xme=n(mP,"STRONG",{});var QFt=s(xme);kpo=r(QFt,"distilbert"),QFt.forEach(t),Spo=r(mP," \u2014 "),Tq=n(mP,"A",{href:!0});var WFt=s(Tq);Rpo=r(WFt,"DistilBertTokenizer"),WFt.forEach(t),Ppo=r(mP," or "),Mq=n(mP,"A",{href:!0});var UFt=s(Mq);Bpo=r(UFt,"DistilBertTokenizerFast"),UFt.forEach(t),Ipo=r(mP," (DistilBERT model)"),mP.forEach(t),Npo=i(S),Fs=n(S,"LI",{});var fP=s(Fs);$me=n(fP,"STRONG",{});var HFt=s($me);qpo=r(HFt,"dpr"),HFt.forEach(t),jpo=r(fP," \u2014 "),Eq=n(fP,"A",{href:!0});var JFt=s(Eq);Dpo=r(JFt,"DPRQuestionEncoderTokenizer"),JFt.forEach(t),Gpo=r(fP," or "),Cq=n(fP,"A",{href:!0});var YFt=s(Cq);Opo=r(YFt,"DPRQuestionEncoderTokenizerFast"),YFt.forEach(t),Vpo=r(fP," (DPR model)"),fP.forEach(t),Xpo=i(S),Ts=n(S,"LI",{});var gP=s(Ts);kme=n(gP,"STRONG",{});var KFt=s(kme);zpo=r(KFt,"electra"),KFt.forEach(t),Qpo=r(gP," \u2014 "),wq=n(gP,"A",{href:!0});var ZFt=s(wq);Wpo=r(ZFt,"ElectraTokenizer"),ZFt.forEach(t),Upo=r(gP," or "),Aq=n(gP,"A",{href:!0});var eTt=s(Aq);Hpo=r(eTt,"ElectraTokenizerFast"),eTt.forEach(t),Jpo=r(gP," (ELECTRA model)"),gP.forEach(t),Ypo=i(S),ru=n(S,"LI",{});var vRe=s(ru);Sme=n(vRe,"STRONG",{});var oTt=s(Sme);Kpo=r(oTt,"flaubert"),oTt.forEach(t),Zpo=r(vRe," \u2014 "),Lq=n(vRe,"A",{href:!0});var rTt=s(Lq);e_o=r(rTt,"FlaubertTokenizer"),rTt.forEach(t),o_o=r(vRe," (FlauBERT model)"),vRe.forEach(t),r_o=i(S),Ms=n(S,"LI",{});var hP=s(Ms);Rme=n(hP,"STRONG",{});var tTt=s(Rme);t_o=r(tTt,"fnet"),tTt.forEach(t),a_o=r(hP," \u2014 "),yq=n(hP,"A",{href:!0});var aTt=s(yq);n_o=r(aTt,"FNetTokenizer"),aTt.forEach(t),s_o=r(hP," or "),xq=n(hP,"A",{href:!0});var nTt=s(xq);l_o=r(nTt,"FNetTokenizerFast"),nTt.forEach(t),i_o=r(hP," (FNet model)"),hP.forEach(t),d_o=i(S),tu=n(S,"LI",{});var FRe=s(tu);Pme=n(FRe,"STRONG",{});var sTt=s(Pme);c_o=r(sTt,"fsmt"),sTt.forEach(t),m_o=r(FRe," \u2014 "),$q=n(FRe,"A",{href:!0});var lTt=s($q);f_o=r(lTt,"FSMTTokenizer"),lTt.forEach(t),g_o=r(FRe," (FairSeq Machine-Translation model)"),FRe.forEach(t),h_o=i(S),Es=n(S,"LI",{});var uP=s(Es);Bme=n(uP,"STRONG",{});var iTt=s(Bme);u_o=r(iTt,"funnel"),iTt.forEach(t),p_o=r(uP," \u2014 "),kq=n(uP,"A",{href:!0});var dTt=s(kq);__o=r(dTt,"FunnelTokenizer"),dTt.forEach(t),b_o=r(uP," or "),Sq=n(uP,"A",{href:!0});var cTt=s(Sq);v_o=r(cTt,"FunnelTokenizerFast"),cTt.forEach(t),F_o=r(uP," (Funnel Transformer model)"),uP.forEach(t),T_o=i(S),Cs=n(S,"LI",{});var pP=s(Cs);Ime=n(pP,"STRONG",{});var mTt=s(Ime);M_o=r(mTt,"gpt2"),mTt.forEach(t),E_o=r(pP," \u2014 "),Rq=n(pP,"A",{href:!0});var fTt=s(Rq);C_o=r(fTt,"GPT2Tokenizer"),fTt.forEach(t),w_o=r(pP," or "),Pq=n(pP,"A",{href:!0});var gTt=s(Pq);A_o=r(gTt,"GPT2TokenizerFast"),gTt.forEach(t),L_o=r(pP," (OpenAI GPT-2 model)"),pP.forEach(t),y_o=i(S),ws=n(S,"LI",{});var _P=s(ws);Nme=n(_P,"STRONG",{});var hTt=s(Nme);x_o=r(hTt,"gpt_neo"),hTt.forEach(t),$_o=r(_P," \u2014 "),Bq=n(_P,"A",{href:!0});var uTt=s(Bq);k_o=r(uTt,"GPT2Tokenizer"),uTt.forEach(t),S_o=r(_P," or "),Iq=n(_P,"A",{href:!0});var pTt=s(Iq);R_o=r(pTt,"GPT2TokenizerFast"),pTt.forEach(t),P_o=r(_P," (GPT Neo model)"),_P.forEach(t),B_o=i(S),au=n(S,"LI",{});var TRe=s(au);qme=n(TRe,"STRONG",{});var _Tt=s(qme);I_o=r(_Tt,"gpt_neox"),_Tt.forEach(t),N_o=r(TRe," \u2014 "),Nq=n(TRe,"A",{href:!0});var bTt=s(Nq);q_o=r(bTt,"GPTNeoXTokenizerFast"),bTt.forEach(t),j_o=r(TRe," (GPT NeoX model)"),TRe.forEach(t),D_o=i(S),As=n(S,"LI",{});var bP=s(As);jme=n(bP,"STRONG",{});var vTt=s(jme);G_o=r(vTt,"gptj"),vTt.forEach(t),O_o=r(bP," \u2014 "),qq=n(bP,"A",{href:!0});var FTt=s(qq);V_o=r(FTt,"GPT2Tokenizer"),FTt.forEach(t),X_o=r(bP," or "),jq=n(bP,"A",{href:!0});var TTt=s(jq);z_o=r(TTt,"GPT2TokenizerFast"),TTt.forEach(t),Q_o=r(bP," (GPT-J model)"),bP.forEach(t),W_o=i(S),Ls=n(S,"LI",{});var vP=s(Ls);Dme=n(vP,"STRONG",{});var MTt=s(Dme);U_o=r(MTt,"groupvit"),MTt.forEach(t),H_o=r(vP," \u2014 "),Dq=n(vP,"A",{href:!0});var ETt=s(Dq);J_o=r(ETt,"CLIPTokenizer"),ETt.forEach(t),Y_o=r(vP," or "),Gq=n(vP,"A",{href:!0});var CTt=s(Gq);K_o=r(CTt,"CLIPTokenizerFast"),CTt.forEach(t),Z_o=r(vP," (GroupViT model)"),vP.forEach(t),ebo=i(S),ys=n(S,"LI",{});var FP=s(ys);Gme=n(FP,"STRONG",{});var wTt=s(Gme);obo=r(wTt,"herbert"),wTt.forEach(t),rbo=r(FP," \u2014 "),Oq=n(FP,"A",{href:!0});var ATt=s(Oq);tbo=r(ATt,"HerbertTokenizer"),ATt.forEach(t),abo=r(FP," or "),Vq=n(FP,"A",{href:!0});var LTt=s(Vq);nbo=r(LTt,"HerbertTokenizerFast"),LTt.forEach(t),sbo=r(FP," (HerBERT model)"),FP.forEach(t),lbo=i(S),nu=n(S,"LI",{});var MRe=s(nu);Ome=n(MRe,"STRONG",{});var yTt=s(Ome);ibo=r(yTt,"hubert"),yTt.forEach(t),dbo=r(MRe," \u2014 "),Xq=n(MRe,"A",{href:!0});var xTt=s(Xq);cbo=r(xTt,"Wav2Vec2CTCTokenizer"),xTt.forEach(t),mbo=r(MRe," (Hubert model)"),MRe.forEach(t),fbo=i(S),xs=n(S,"LI",{});var TP=s(xs);Vme=n(TP,"STRONG",{});var $Tt=s(Vme);gbo=r($Tt,"ibert"),$Tt.forEach(t),hbo=r(TP," \u2014 "),zq=n(TP,"A",{href:!0});var kTt=s(zq);ubo=r(kTt,"RobertaTokenizer"),kTt.forEach(t),pbo=r(TP," or "),Qq=n(TP,"A",{href:!0});var STt=s(Qq);_bo=r(STt,"RobertaTokenizerFast"),STt.forEach(t),bbo=r(TP," (I-BERT model)"),TP.forEach(t),vbo=i(S),$s=n(S,"LI",{});var MP=s($s);Xme=n(MP,"STRONG",{});var RTt=s(Xme);Fbo=r(RTt,"layoutlm"),RTt.forEach(t),Tbo=r(MP," \u2014 "),Wq=n(MP,"A",{href:!0});var PTt=s(Wq);Mbo=r(PTt,"LayoutLMTokenizer"),PTt.forEach(t),Ebo=r(MP," or "),Uq=n(MP,"A",{href:!0});var BTt=s(Uq);Cbo=r(BTt,"LayoutLMTokenizerFast"),BTt.forEach(t),wbo=r(MP," (LayoutLM model)"),MP.forEach(t),Abo=i(S),ks=n(S,"LI",{});var EP=s(ks);zme=n(EP,"STRONG",{});var ITt=s(zme);Lbo=r(ITt,"layoutlmv2"),ITt.forEach(t),ybo=r(EP," \u2014 "),Hq=n(EP,"A",{href:!0});var NTt=s(Hq);xbo=r(NTt,"LayoutLMv2Tokenizer"),NTt.forEach(t),$bo=r(EP," or "),Jq=n(EP,"A",{href:!0});var qTt=s(Jq);kbo=r(qTt,"LayoutLMv2TokenizerFast"),qTt.forEach(t),Sbo=r(EP," (LayoutLMv2 model)"),EP.forEach(t),Rbo=i(S),Ss=n(S,"LI",{});var CP=s(Ss);Qme=n(CP,"STRONG",{});var jTt=s(Qme);Pbo=r(jTt,"layoutlmv3"),jTt.forEach(t),Bbo=r(CP," \u2014 "),Yq=n(CP,"A",{href:!0});var DTt=s(Yq);Ibo=r(DTt,"LayoutLMv3Tokenizer"),DTt.forEach(t),Nbo=r(CP," or "),Kq=n(CP,"A",{href:!0});var GTt=s(Kq);qbo=r(GTt,"LayoutLMv3TokenizerFast"),GTt.forEach(t),jbo=r(CP," (LayoutLMv3 model)"),CP.forEach(t),Dbo=i(S),Rs=n(S,"LI",{});var wP=s(Rs);Wme=n(wP,"STRONG",{});var OTt=s(Wme);Gbo=r(OTt,"layoutxlm"),OTt.forEach(t),Obo=r(wP," \u2014 "),Zq=n(wP,"A",{href:!0});var VTt=s(Zq);Vbo=r(VTt,"LayoutXLMTokenizer"),VTt.forEach(t),Xbo=r(wP," or "),ej=n(wP,"A",{href:!0});var XTt=s(ej);zbo=r(XTt,"LayoutXLMTokenizerFast"),XTt.forEach(t),Qbo=r(wP," (LayoutXLM model)"),wP.forEach(t),Wbo=i(S),Ps=n(S,"LI",{});var AP=s(Ps);Ume=n(AP,"STRONG",{});var zTt=s(Ume);Ubo=r(zTt,"led"),zTt.forEach(t),Hbo=r(AP," \u2014 "),oj=n(AP,"A",{href:!0});var QTt=s(oj);Jbo=r(QTt,"LEDTokenizer"),QTt.forEach(t),Ybo=r(AP," or "),rj=n(AP,"A",{href:!0});var WTt=s(rj);Kbo=r(WTt,"LEDTokenizerFast"),WTt.forEach(t),Zbo=r(AP," (LED model)"),AP.forEach(t),e2o=i(S),Bs=n(S,"LI",{});var LP=s(Bs);Hme=n(LP,"STRONG",{});var UTt=s(Hme);o2o=r(UTt,"longformer"),UTt.forEach(t),r2o=r(LP," \u2014 "),tj=n(LP,"A",{href:!0});var HTt=s(tj);t2o=r(HTt,"LongformerTokenizer"),HTt.forEach(t),a2o=r(LP," or "),aj=n(LP,"A",{href:!0});var JTt=s(aj);n2o=r(JTt,"LongformerTokenizerFast"),JTt.forEach(t),s2o=r(LP," (Longformer model)"),LP.forEach(t),l2o=i(S),Is=n(S,"LI",{});var yP=s(Is);Jme=n(yP,"STRONG",{});var YTt=s(Jme);i2o=r(YTt,"longt5"),YTt.forEach(t),d2o=r(yP," \u2014 "),nj=n(yP,"A",{href:!0});var KTt=s(nj);c2o=r(KTt,"T5Tokenizer"),KTt.forEach(t),m2o=r(yP," or "),sj=n(yP,"A",{href:!0});var ZTt=s(sj);f2o=r(ZTt,"T5TokenizerFast"),ZTt.forEach(t),g2o=r(yP," (LongT5 model)"),yP.forEach(t),h2o=i(S),su=n(S,"LI",{});var ERe=s(su);Yme=n(ERe,"STRONG",{});var eMt=s(Yme);u2o=r(eMt,"luke"),eMt.forEach(t),p2o=r(ERe," \u2014 "),lj=n(ERe,"A",{href:!0});var oMt=s(lj);_2o=r(oMt,"LukeTokenizer"),oMt.forEach(t),b2o=r(ERe," (LUKE model)"),ERe.forEach(t),v2o=i(S),Ns=n(S,"LI",{});var xP=s(Ns);Kme=n(xP,"STRONG",{});var rMt=s(Kme);F2o=r(rMt,"lxmert"),rMt.forEach(t),T2o=r(xP," \u2014 "),ij=n(xP,"A",{href:!0});var tMt=s(ij);M2o=r(tMt,"LxmertTokenizer"),tMt.forEach(t),E2o=r(xP," or "),dj=n(xP,"A",{href:!0});var aMt=s(dj);C2o=r(aMt,"LxmertTokenizerFast"),aMt.forEach(t),w2o=r(xP," (LXMERT model)"),xP.forEach(t),A2o=i(S),lu=n(S,"LI",{});var CRe=s(lu);Zme=n(CRe,"STRONG",{});var nMt=s(Zme);L2o=r(nMt,"m2m_100"),nMt.forEach(t),y2o=r(CRe," \u2014 "),cj=n(CRe,"A",{href:!0});var sMt=s(cj);x2o=r(sMt,"M2M100Tokenizer"),sMt.forEach(t),$2o=r(CRe," (M2M100 model)"),CRe.forEach(t),k2o=i(S),iu=n(S,"LI",{});var wRe=s(iu);efe=n(wRe,"STRONG",{});var lMt=s(efe);S2o=r(lMt,"marian"),lMt.forEach(t),R2o=r(wRe," \u2014 "),mj=n(wRe,"A",{href:!0});var iMt=s(mj);P2o=r(iMt,"MarianTokenizer"),iMt.forEach(t),B2o=r(wRe," (Marian model)"),wRe.forEach(t),I2o=i(S),qs=n(S,"LI",{});var $P=s(qs);ofe=n($P,"STRONG",{});var dMt=s(ofe);N2o=r(dMt,"mbart"),dMt.forEach(t),q2o=r($P," \u2014 "),fj=n($P,"A",{href:!0});var cMt=s(fj);j2o=r(cMt,"MBartTokenizer"),cMt.forEach(t),D2o=r($P," or "),gj=n($P,"A",{href:!0});var mMt=s(gj);G2o=r(mMt,"MBartTokenizerFast"),mMt.forEach(t),O2o=r($P," (mBART model)"),$P.forEach(t),V2o=i(S),js=n(S,"LI",{});var kP=s(js);rfe=n(kP,"STRONG",{});var fMt=s(rfe);X2o=r(fMt,"mbart50"),fMt.forEach(t),z2o=r(kP," \u2014 "),hj=n(kP,"A",{href:!0});var gMt=s(hj);Q2o=r(gMt,"MBart50Tokenizer"),gMt.forEach(t),W2o=r(kP," or "),uj=n(kP,"A",{href:!0});var hMt=s(uj);U2o=r(hMt,"MBart50TokenizerFast"),hMt.forEach(t),H2o=r(kP," (mBART-50 model)"),kP.forEach(t),J2o=i(S),Ds=n(S,"LI",{});var SP=s(Ds);tfe=n(SP,"STRONG",{});var uMt=s(tfe);Y2o=r(uMt,"megatron-bert"),uMt.forEach(t),K2o=r(SP," \u2014 "),pj=n(SP,"A",{href:!0});var pMt=s(pj);Z2o=r(pMt,"BertTokenizer"),pMt.forEach(t),evo=r(SP," or "),_j=n(SP,"A",{href:!0});var _Mt=s(_j);ovo=r(_Mt,"BertTokenizerFast"),_Mt.forEach(t),rvo=r(SP," (Megatron-BERT model)"),SP.forEach(t),tvo=i(S),du=n(S,"LI",{});var ARe=s(du);afe=n(ARe,"STRONG",{});var bMt=s(afe);avo=r(bMt,"mluke"),bMt.forEach(t),nvo=r(ARe," \u2014 "),bj=n(ARe,"A",{href:!0});var vMt=s(bj);svo=r(vMt,"MLukeTokenizer"),vMt.forEach(t),lvo=r(ARe," (mLUKE model)"),ARe.forEach(t),ivo=i(S),Gs=n(S,"LI",{});var RP=s(Gs);nfe=n(RP,"STRONG",{});var FMt=s(nfe);dvo=r(FMt,"mobilebert"),FMt.forEach(t),cvo=r(RP," \u2014 "),vj=n(RP,"A",{href:!0});var TMt=s(vj);mvo=r(TMt,"MobileBertTokenizer"),TMt.forEach(t),fvo=r(RP," or "),Fj=n(RP,"A",{href:!0});var MMt=s(Fj);gvo=r(MMt,"MobileBertTokenizerFast"),MMt.forEach(t),hvo=r(RP," (MobileBERT model)"),RP.forEach(t),uvo=i(S),Os=n(S,"LI",{});var PP=s(Os);sfe=n(PP,"STRONG",{});var EMt=s(sfe);pvo=r(EMt,"mpnet"),EMt.forEach(t),_vo=r(PP," \u2014 "),Tj=n(PP,"A",{href:!0});var CMt=s(Tj);bvo=r(CMt,"MPNetTokenizer"),CMt.forEach(t),vvo=r(PP," or "),Mj=n(PP,"A",{href:!0});var wMt=s(Mj);Fvo=r(wMt,"MPNetTokenizerFast"),wMt.forEach(t),Tvo=r(PP," (MPNet model)"),PP.forEach(t),Mvo=i(S),Vs=n(S,"LI",{});var BP=s(Vs);lfe=n(BP,"STRONG",{});var AMt=s(lfe);Evo=r(AMt,"mt5"),AMt.forEach(t),Cvo=r(BP," \u2014 "),Ej=n(BP,"A",{href:!0});var LMt=s(Ej);wvo=r(LMt,"MT5Tokenizer"),LMt.forEach(t),Avo=r(BP," or "),Cj=n(BP,"A",{href:!0});var yMt=s(Cj);Lvo=r(yMt,"MT5TokenizerFast"),yMt.forEach(t),yvo=r(BP," (MT5 model)"),BP.forEach(t),xvo=i(S),Xs=n(S,"LI",{});var IP=s(Xs);ife=n(IP,"STRONG",{});var xMt=s(ife);$vo=r(xMt,"mvp"),xMt.forEach(t),kvo=r(IP," \u2014 "),wj=n(IP,"A",{href:!0});var $Mt=s(wj);Svo=r($Mt,"MvpTokenizer"),$Mt.forEach(t),Rvo=r(IP," or "),Aj=n(IP,"A",{href:!0});var kMt=s(Aj);Pvo=r(kMt,"MvpTokenizerFast"),kMt.forEach(t),Bvo=r(IP," (MVP model)"),IP.forEach(t),Ivo=i(S),zs=n(S,"LI",{});var NP=s(zs);dfe=n(NP,"STRONG",{});var SMt=s(dfe);Nvo=r(SMt,"nezha"),SMt.forEach(t),qvo=r(NP," \u2014 "),Lj=n(NP,"A",{href:!0});var RMt=s(Lj);jvo=r(RMt,"BertTokenizer"),RMt.forEach(t),Dvo=r(NP," or "),yj=n(NP,"A",{href:!0});var PMt=s(yj);Gvo=r(PMt,"BertTokenizerFast"),PMt.forEach(t),Ovo=r(NP," (Nezha model)"),NP.forEach(t),Vvo=i(S),Qs=n(S,"LI",{});var qP=s(Qs);cfe=n(qP,"STRONG",{});var BMt=s(cfe);Xvo=r(BMt,"nllb"),BMt.forEach(t),zvo=r(qP," \u2014 "),xj=n(qP,"A",{href:!0});var IMt=s(xj);Qvo=r(IMt,"NllbTokenizer"),IMt.forEach(t),Wvo=r(qP," or "),$j=n(qP,"A",{href:!0});var NMt=s($j);Uvo=r(NMt,"NllbTokenizerFast"),NMt.forEach(t),Hvo=r(qP," (NLLB model)"),qP.forEach(t),Jvo=i(S),Ws=n(S,"LI",{});var jP=s(Ws);mfe=n(jP,"STRONG",{});var qMt=s(mfe);Yvo=r(qMt,"nystromformer"),qMt.forEach(t),Kvo=r(jP," \u2014 "),kj=n(jP,"A",{href:!0});var jMt=s(kj);Zvo=r(jMt,"AlbertTokenizer"),jMt.forEach(t),e1o=r(jP," or "),Sj=n(jP,"A",{href:!0});var DMt=s(Sj);o1o=r(DMt,"AlbertTokenizerFast"),DMt.forEach(t),r1o=r(jP," (Nystr\xF6mformer model)"),jP.forEach(t),t1o=i(S),Us=n(S,"LI",{});var DP=s(Us);ffe=n(DP,"STRONG",{});var GMt=s(ffe);a1o=r(GMt,"openai-gpt"),GMt.forEach(t),n1o=r(DP," \u2014 "),Rj=n(DP,"A",{href:!0});var OMt=s(Rj);s1o=r(OMt,"OpenAIGPTTokenizer"),OMt.forEach(t),l1o=r(DP," or "),Pj=n(DP,"A",{href:!0});var VMt=s(Pj);i1o=r(VMt,"OpenAIGPTTokenizerFast"),VMt.forEach(t),d1o=r(DP," (OpenAI GPT model)"),DP.forEach(t),c1o=i(S),cu=n(S,"LI",{});var LRe=s(cu);gfe=n(LRe,"STRONG",{});var XMt=s(gfe);m1o=r(XMt,"opt"),XMt.forEach(t),f1o=r(LRe," \u2014 "),Bj=n(LRe,"A",{href:!0});var zMt=s(Bj);g1o=r(zMt,"GPT2Tokenizer"),zMt.forEach(t),h1o=r(LRe," (OPT model)"),LRe.forEach(t),u1o=i(S),Hs=n(S,"LI",{});var GP=s(Hs);hfe=n(GP,"STRONG",{});var QMt=s(hfe);p1o=r(QMt,"owlvit"),QMt.forEach(t),_1o=r(GP," \u2014 "),Ij=n(GP,"A",{href:!0});var WMt=s(Ij);b1o=r(WMt,"CLIPTokenizer"),WMt.forEach(t),v1o=r(GP," or "),Nj=n(GP,"A",{href:!0});var UMt=s(Nj);F1o=r(UMt,"CLIPTokenizerFast"),UMt.forEach(t),T1o=r(GP," (OWL-ViT model)"),GP.forEach(t),M1o=i(S),Js=n(S,"LI",{});var OP=s(Js);ufe=n(OP,"STRONG",{});var HMt=s(ufe);E1o=r(HMt,"pegasus"),HMt.forEach(t),C1o=r(OP," \u2014 "),qj=n(OP,"A",{href:!0});var JMt=s(qj);w1o=r(JMt,"PegasusTokenizer"),JMt.forEach(t),A1o=r(OP," or "),jj=n(OP,"A",{href:!0});var YMt=s(jj);L1o=r(YMt,"PegasusTokenizerFast"),YMt.forEach(t),y1o=r(OP," (Pegasus model)"),OP.forEach(t),x1o=i(S),mu=n(S,"LI",{});var yRe=s(mu);pfe=n(yRe,"STRONG",{});var KMt=s(pfe);$1o=r(KMt,"perceiver"),KMt.forEach(t),k1o=r(yRe," \u2014 "),Dj=n(yRe,"A",{href:!0});var ZMt=s(Dj);S1o=r(ZMt,"PerceiverTokenizer"),ZMt.forEach(t),R1o=r(yRe," (Perceiver model)"),yRe.forEach(t),P1o=i(S),fu=n(S,"LI",{});var xRe=s(fu);_fe=n(xRe,"STRONG",{});var eEt=s(_fe);B1o=r(eEt,"phobert"),eEt.forEach(t),I1o=r(xRe," \u2014 "),Gj=n(xRe,"A",{href:!0});var oEt=s(Gj);N1o=r(oEt,"PhobertTokenizer"),oEt.forEach(t),q1o=r(xRe," (PhoBERT model)"),xRe.forEach(t),j1o=i(S),gu=n(S,"LI",{});var $Re=s(gu);bfe=n($Re,"STRONG",{});var rEt=s(bfe);D1o=r(rEt,"plbart"),rEt.forEach(t),G1o=r($Re," \u2014 "),Oj=n($Re,"A",{href:!0});var tEt=s(Oj);O1o=r(tEt,"PLBartTokenizer"),tEt.forEach(t),V1o=r($Re," (PLBart model)"),$Re.forEach(t),X1o=i(S),hu=n(S,"LI",{});var kRe=s(hu);vfe=n(kRe,"STRONG",{});var aEt=s(vfe);z1o=r(aEt,"prophetnet"),aEt.forEach(t),Q1o=r(kRe," \u2014 "),Vj=n(kRe,"A",{href:!0});var nEt=s(Vj);W1o=r(nEt,"ProphetNetTokenizer"),nEt.forEach(t),U1o=r(kRe," (ProphetNet model)"),kRe.forEach(t),H1o=i(S),Ys=n(S,"LI",{});var VP=s(Ys);Ffe=n(VP,"STRONG",{});var sEt=s(Ffe);J1o=r(sEt,"qdqbert"),sEt.forEach(t),Y1o=r(VP," \u2014 "),Xj=n(VP,"A",{href:!0});var lEt=s(Xj);K1o=r(lEt,"BertTokenizer"),lEt.forEach(t),Z1o=r(VP," or "),zj=n(VP,"A",{href:!0});var iEt=s(zj);eFo=r(iEt,"BertTokenizerFast"),iEt.forEach(t),oFo=r(VP," (QDQBert model)"),VP.forEach(t),rFo=i(S),uu=n(S,"LI",{});var SRe=s(uu);Tfe=n(SRe,"STRONG",{});var dEt=s(Tfe);tFo=r(dEt,"rag"),dEt.forEach(t),aFo=r(SRe," \u2014 "),Qj=n(SRe,"A",{href:!0});var cEt=s(Qj);nFo=r(cEt,"RagTokenizer"),cEt.forEach(t),sFo=r(SRe," (RAG model)"),SRe.forEach(t),lFo=i(S),Ks=n(S,"LI",{});var XP=s(Ks);Mfe=n(XP,"STRONG",{});var mEt=s(Mfe);iFo=r(mEt,"realm"),mEt.forEach(t),dFo=r(XP," \u2014 "),Wj=n(XP,"A",{href:!0});var fEt=s(Wj);cFo=r(fEt,"RealmTokenizer"),fEt.forEach(t),mFo=r(XP," or "),Uj=n(XP,"A",{href:!0});var gEt=s(Uj);fFo=r(gEt,"RealmTokenizerFast"),gEt.forEach(t),gFo=r(XP," (REALM model)"),XP.forEach(t),hFo=i(S),Zs=n(S,"LI",{});var zP=s(Zs);Efe=n(zP,"STRONG",{});var hEt=s(Efe);uFo=r(hEt,"reformer"),hEt.forEach(t),pFo=r(zP," \u2014 "),Hj=n(zP,"A",{href:!0});var uEt=s(Hj);_Fo=r(uEt,"ReformerTokenizer"),uEt.forEach(t),bFo=r(zP," or "),Jj=n(zP,"A",{href:!0});var pEt=s(Jj);vFo=r(pEt,"ReformerTokenizerFast"),pEt.forEach(t),FFo=r(zP," (Reformer model)"),zP.forEach(t),TFo=i(S),el=n(S,"LI",{});var QP=s(el);Cfe=n(QP,"STRONG",{});var _Et=s(Cfe);MFo=r(_Et,"rembert"),_Et.forEach(t),EFo=r(QP," \u2014 "),Yj=n(QP,"A",{href:!0});var bEt=s(Yj);CFo=r(bEt,"RemBertTokenizer"),bEt.forEach(t),wFo=r(QP," or "),Kj=n(QP,"A",{href:!0});var vEt=s(Kj);AFo=r(vEt,"RemBertTokenizerFast"),vEt.forEach(t),LFo=r(QP," (RemBERT model)"),QP.forEach(t),yFo=i(S),ol=n(S,"LI",{});var WP=s(ol);wfe=n(WP,"STRONG",{});var FEt=s(wfe);xFo=r(FEt,"retribert"),FEt.forEach(t),$Fo=r(WP," \u2014 "),Zj=n(WP,"A",{href:!0});var TEt=s(Zj);kFo=r(TEt,"RetriBertTokenizer"),TEt.forEach(t),SFo=r(WP," or "),eD=n(WP,"A",{href:!0});var MEt=s(eD);RFo=r(MEt,"RetriBertTokenizerFast"),MEt.forEach(t),PFo=r(WP," (RetriBERT model)"),WP.forEach(t),BFo=i(S),rl=n(S,"LI",{});var UP=s(rl);Afe=n(UP,"STRONG",{});var EEt=s(Afe);IFo=r(EEt,"roberta"),EEt.forEach(t),NFo=r(UP," \u2014 "),oD=n(UP,"A",{href:!0});var CEt=s(oD);qFo=r(CEt,"RobertaTokenizer"),CEt.forEach(t),jFo=r(UP," or "),rD=n(UP,"A",{href:!0});var wEt=s(rD);DFo=r(wEt,"RobertaTokenizerFast"),wEt.forEach(t),GFo=r(UP," (RoBERTa model)"),UP.forEach(t),OFo=i(S),tl=n(S,"LI",{});var HP=s(tl);Lfe=n(HP,"STRONG",{});var AEt=s(Lfe);VFo=r(AEt,"roformer"),AEt.forEach(t),XFo=r(HP," \u2014 "),tD=n(HP,"A",{href:!0});var LEt=s(tD);zFo=r(LEt,"RoFormerTokenizer"),LEt.forEach(t),QFo=r(HP," or "),aD=n(HP,"A",{href:!0});var yEt=s(aD);WFo=r(yEt,"RoFormerTokenizerFast"),yEt.forEach(t),UFo=r(HP," (RoFormer model)"),HP.forEach(t),HFo=i(S),pu=n(S,"LI",{});var RRe=s(pu);yfe=n(RRe,"STRONG",{});var xEt=s(yfe);JFo=r(xEt,"speech_to_text"),xEt.forEach(t),YFo=r(RRe," \u2014 "),nD=n(RRe,"A",{href:!0});var $Et=s(nD);KFo=r($Et,"Speech2TextTokenizer"),$Et.forEach(t),ZFo=r(RRe," (Speech2Text model)"),RRe.forEach(t),eTo=i(S),_u=n(S,"LI",{});var PRe=s(_u);xfe=n(PRe,"STRONG",{});var kEt=s(xfe);oTo=r(kEt,"speech_to_text_2"),kEt.forEach(t),rTo=r(PRe," \u2014 "),sD=n(PRe,"A",{href:!0});var SEt=s(sD);tTo=r(SEt,"Speech2Text2Tokenizer"),SEt.forEach(t),aTo=r(PRe," (Speech2Text2 model)"),PRe.forEach(t),nTo=i(S),al=n(S,"LI",{});var JP=s(al);$fe=n(JP,"STRONG",{});var REt=s($fe);sTo=r(REt,"splinter"),REt.forEach(t),lTo=r(JP," \u2014 "),lD=n(JP,"A",{href:!0});var PEt=s(lD);iTo=r(PEt,"SplinterTokenizer"),PEt.forEach(t),dTo=r(JP," or "),iD=n(JP,"A",{href:!0});var BEt=s(iD);cTo=r(BEt,"SplinterTokenizerFast"),BEt.forEach(t),mTo=r(JP," (Splinter model)"),JP.forEach(t),fTo=i(S),nl=n(S,"LI",{});var YP=s(nl);kfe=n(YP,"STRONG",{});var IEt=s(kfe);gTo=r(IEt,"squeezebert"),IEt.forEach(t),hTo=r(YP," \u2014 "),dD=n(YP,"A",{href:!0});var NEt=s(dD);uTo=r(NEt,"SqueezeBertTokenizer"),NEt.forEach(t),pTo=r(YP," or "),cD=n(YP,"A",{href:!0});var qEt=s(cD);_To=r(qEt,"SqueezeBertTokenizerFast"),qEt.forEach(t),bTo=r(YP," (SqueezeBERT model)"),YP.forEach(t),vTo=i(S),sl=n(S,"LI",{});var KP=s(sl);Sfe=n(KP,"STRONG",{});var jEt=s(Sfe);FTo=r(jEt,"t5"),jEt.forEach(t),TTo=r(KP," \u2014 "),mD=n(KP,"A",{href:!0});var DEt=s(mD);MTo=r(DEt,"T5Tokenizer"),DEt.forEach(t),ETo=r(KP," or "),fD=n(KP,"A",{href:!0});var GEt=s(fD);CTo=r(GEt,"T5TokenizerFast"),GEt.forEach(t),wTo=r(KP," (T5 model)"),KP.forEach(t),ATo=i(S),bu=n(S,"LI",{});var BRe=s(bu);Rfe=n(BRe,"STRONG",{});var OEt=s(Rfe);LTo=r(OEt,"tapas"),OEt.forEach(t),yTo=r(BRe," \u2014 "),gD=n(BRe,"A",{href:!0});var VEt=s(gD);xTo=r(VEt,"TapasTokenizer"),VEt.forEach(t),$To=r(BRe," (TAPAS model)"),BRe.forEach(t),kTo=i(S),vu=n(S,"LI",{});var IRe=s(vu);Pfe=n(IRe,"STRONG",{});var XEt=s(Pfe);STo=r(XEt,"tapex"),XEt.forEach(t),RTo=r(IRe," \u2014 "),hD=n(IRe,"A",{href:!0});var zEt=s(hD);PTo=r(zEt,"TapexTokenizer"),zEt.forEach(t),BTo=r(IRe," (TAPEX model)"),IRe.forEach(t),ITo=i(S),Fu=n(S,"LI",{});var NRe=s(Fu);Bfe=n(NRe,"STRONG",{});var QEt=s(Bfe);NTo=r(QEt,"transfo-xl"),QEt.forEach(t),qTo=r(NRe," \u2014 "),uD=n(NRe,"A",{href:!0});var WEt=s(uD);jTo=r(WEt,"TransfoXLTokenizer"),WEt.forEach(t),DTo=r(NRe," (Transformer-XL model)"),NRe.forEach(t),GTo=i(S),ll=n(S,"LI",{});var ZP=s(ll);Ife=n(ZP,"STRONG",{});var UEt=s(Ife);OTo=r(UEt,"vilt"),UEt.forEach(t),VTo=r(ZP," \u2014 "),pD=n(ZP,"A",{href:!0});var HEt=s(pD);XTo=r(HEt,"BertTokenizer"),HEt.forEach(t),zTo=r(ZP," or "),_D=n(ZP,"A",{href:!0});var JEt=s(_D);QTo=r(JEt,"BertTokenizerFast"),JEt.forEach(t),WTo=r(ZP," (ViLT model)"),ZP.forEach(t),UTo=i(S),il=n(S,"LI",{});var eB=s(il);Nfe=n(eB,"STRONG",{});var YEt=s(Nfe);HTo=r(YEt,"visual_bert"),YEt.forEach(t),JTo=r(eB," \u2014 "),bD=n(eB,"A",{href:!0});var KEt=s(bD);YTo=r(KEt,"BertTokenizer"),KEt.forEach(t),KTo=r(eB," or "),vD=n(eB,"A",{href:!0});var ZEt=s(vD);ZTo=r(ZEt,"BertTokenizerFast"),ZEt.forEach(t),eMo=r(eB," (VisualBERT model)"),eB.forEach(t),oMo=i(S),Tu=n(S,"LI",{});var qRe=s(Tu);qfe=n(qRe,"STRONG",{});var e4t=s(qfe);rMo=r(e4t,"wav2vec2"),e4t.forEach(t),tMo=r(qRe," \u2014 "),FD=n(qRe,"A",{href:!0});var o4t=s(FD);aMo=r(o4t,"Wav2Vec2CTCTokenizer"),o4t.forEach(t),nMo=r(qRe," (Wav2Vec2 model)"),qRe.forEach(t),sMo=i(S),Mu=n(S,"LI",{});var jRe=s(Mu);jfe=n(jRe,"STRONG",{});var r4t=s(jfe);lMo=r(r4t,"wav2vec2-conformer"),r4t.forEach(t),iMo=r(jRe," \u2014 "),TD=n(jRe,"A",{href:!0});var t4t=s(TD);dMo=r(t4t,"Wav2Vec2CTCTokenizer"),t4t.forEach(t),cMo=r(jRe," (Wav2Vec2-Conformer model)"),jRe.forEach(t),mMo=i(S),Eu=n(S,"LI",{});var DRe=s(Eu);Dfe=n(DRe,"STRONG",{});var a4t=s(Dfe);fMo=r(a4t,"wav2vec2_phoneme"),a4t.forEach(t),gMo=r(DRe," \u2014 "),MD=n(DRe,"A",{href:!0});var n4t=s(MD);hMo=r(n4t,"Wav2Vec2PhonemeCTCTokenizer"),n4t.forEach(t),uMo=r(DRe," (Wav2Vec2Phoneme model)"),DRe.forEach(t),pMo=i(S),dl=n(S,"LI",{});var oB=s(dl);Gfe=n(oB,"STRONG",{});var s4t=s(Gfe);_Mo=r(s4t,"xclip"),s4t.forEach(t),bMo=r(oB," \u2014 "),ED=n(oB,"A",{href:!0});var l4t=s(ED);vMo=r(l4t,"CLIPTokenizer"),l4t.forEach(t),FMo=r(oB," or "),CD=n(oB,"A",{href:!0});var i4t=s(CD);TMo=r(i4t,"CLIPTokenizerFast"),i4t.forEach(t),MMo=r(oB," (X-CLIP model)"),oB.forEach(t),EMo=i(S),cl=n(S,"LI",{});var rB=s(cl);Ofe=n(rB,"STRONG",{});var d4t=s(Ofe);CMo=r(d4t,"xglm"),d4t.forEach(t),wMo=r(rB," \u2014 "),wD=n(rB,"A",{href:!0});var c4t=s(wD);AMo=r(c4t,"XGLMTokenizer"),c4t.forEach(t),LMo=r(rB," or "),AD=n(rB,"A",{href:!0});var m4t=s(AD);yMo=r(m4t,"XGLMTokenizerFast"),m4t.forEach(t),xMo=r(rB," (XGLM model)"),rB.forEach(t),$Mo=i(S),Cu=n(S,"LI",{});var GRe=s(Cu);Vfe=n(GRe,"STRONG",{});var f4t=s(Vfe);kMo=r(f4t,"xlm"),f4t.forEach(t),SMo=r(GRe," \u2014 "),LD=n(GRe,"A",{href:!0});var g4t=s(LD);RMo=r(g4t,"XLMTokenizer"),g4t.forEach(t),PMo=r(GRe," (XLM model)"),GRe.forEach(t),BMo=i(S),wu=n(S,"LI",{});var ORe=s(wu);Xfe=n(ORe,"STRONG",{});var h4t=s(Xfe);IMo=r(h4t,"xlm-prophetnet"),h4t.forEach(t),NMo=r(ORe," \u2014 "),yD=n(ORe,"A",{href:!0});var u4t=s(yD);qMo=r(u4t,"XLMProphetNetTokenizer"),u4t.forEach(t),jMo=r(ORe," (XLM-ProphetNet model)"),ORe.forEach(t),DMo=i(S),ml=n(S,"LI",{});var tB=s(ml);zfe=n(tB,"STRONG",{});var p4t=s(zfe);GMo=r(p4t,"xlm-roberta"),p4t.forEach(t),OMo=r(tB," \u2014 "),xD=n(tB,"A",{href:!0});var _4t=s(xD);VMo=r(_4t,"XLMRobertaTokenizer"),_4t.forEach(t),XMo=r(tB," or "),$D=n(tB,"A",{href:!0});var b4t=s($D);zMo=r(b4t,"XLMRobertaTokenizerFast"),b4t.forEach(t),QMo=r(tB," (XLM-RoBERTa model)"),tB.forEach(t),WMo=i(S),fl=n(S,"LI",{});var aB=s(fl);Qfe=n(aB,"STRONG",{});var v4t=s(Qfe);UMo=r(v4t,"xlm-roberta-xl"),v4t.forEach(t),HMo=r(aB," \u2014 "),kD=n(aB,"A",{href:!0});var F4t=s(kD);JMo=r(F4t,"RobertaTokenizer"),F4t.forEach(t),YMo=r(aB," or "),SD=n(aB,"A",{href:!0});var T4t=s(SD);KMo=r(T4t,"RobertaTokenizerFast"),T4t.forEach(t),ZMo=r(aB," (XLM-RoBERTa-XL model)"),aB.forEach(t),eEo=i(S),gl=n(S,"LI",{});var nB=s(gl);Wfe=n(nB,"STRONG",{});var M4t=s(Wfe);oEo=r(M4t,"xlnet"),M4t.forEach(t),rEo=r(nB," \u2014 "),RD=n(nB,"A",{href:!0});var E4t=s(RD);tEo=r(E4t,"XLNetTokenizer"),E4t.forEach(t),aEo=r(nB," or "),PD=n(nB,"A",{href:!0});var C4t=s(PD);nEo=r(C4t,"XLNetTokenizerFast"),C4t.forEach(t),sEo=r(nB," (XLNet model)"),nB.forEach(t),lEo=i(S),hl=n(S,"LI",{});var sB=s(hl);Ufe=n(sB,"STRONG",{});var w4t=s(Ufe);iEo=r(w4t,"yoso"),w4t.forEach(t),dEo=r(sB," \u2014 "),BD=n(sB,"A",{href:!0});var A4t=s(BD);cEo=r(A4t,"AlbertTokenizer"),A4t.forEach(t),mEo=r(sB," or "),ID=n(sB,"A",{href:!0});var L4t=s(ID);fEo=r(L4t,"AlbertTokenizerFast"),L4t.forEach(t),gEo=r(sB," (YOSO model)"),sB.forEach(t),S.forEach(t),hEo=i(Tl),T(Au.$$.fragment,Tl),Tl.forEach(t),uEo=i(Fl),Lu=n(Fl,"DIV",{class:!0});var aZe=s(Lu);T(w9.$$.fragment,aZe),pEo=i(aZe),Hfe=n(aZe,"P",{});var y4t=s(Hfe);_Eo=r(y4t,"Register a new tokenizer in this mapping."),y4t.forEach(t),aZe.forEach(t),Fl.forEach(t),HJe=i(m),fd=n(m,"H2",{class:!0});var nZe=s(fd);yu=n(nZe,"A",{id:!0,class:!0,href:!0});var x4t=s(yu);Jfe=n(x4t,"SPAN",{});var $4t=s(Jfe);T(A9.$$.fragment,$4t),$4t.forEach(t),x4t.forEach(t),bEo=i(nZe),Yfe=n(nZe,"SPAN",{});var k4t=s(Yfe);vEo=r(k4t,"AutoFeatureExtractor"),k4t.forEach(t),nZe.forEach(t),JJe=i(m),ko=n(m,"DIV",{class:!0});var Ml=s(ko);T(L9.$$.fragment,Ml),FEo=i(Ml),y9=n(Ml,"P",{});var sZe=s(y9);TEo=r(sZe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),ND=n(sZe,"A",{href:!0});var S4t=s(ND);MEo=r(S4t,"AutoFeatureExtractor.from_pretrained()"),S4t.forEach(t),EEo=r(sZe," class method."),sZe.forEach(t),CEo=i(Ml),x9=n(Ml,"P",{});var lZe=s(x9);wEo=r(lZe,"This class cannot be instantiated directly using "),Kfe=n(lZe,"CODE",{});var R4t=s(Kfe);AEo=r(R4t,"__init__()"),R4t.forEach(t),LEo=r(lZe," (throws an error)."),lZe.forEach(t),yEo=i(Ml),Je=n(Ml,"DIV",{class:!0});var _a=s(Je);T($9.$$.fragment,_a),xEo=i(_a),Zfe=n(_a,"P",{});var P4t=s(Zfe);$Eo=r(P4t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),P4t.forEach(t),kEo=i(_a),Ha=n(_a,"P",{});var sy=s(Ha);SEo=r(sy,"The feature extractor class to instantiate is selected based on the "),ege=n(sy,"CODE",{});var B4t=s(ege);REo=r(B4t,"model_type"),B4t.forEach(t),PEo=r(sy,` property of the config object
(either passed as an argument or loaded from `),oge=n(sy,"CODE",{});var I4t=s(oge);BEo=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),IEo=r(sy,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),rge=n(sy,"CODE",{});var N4t=s(rge);NEo=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),qEo=r(sy,":"),sy.forEach(t),jEo=i(_a),Q=n(_a,"UL",{});var H=s(Q);xu=n(H,"LI",{});var VRe=s(xu);tge=n(VRe,"STRONG",{});var q4t=s(tge);DEo=r(q4t,"beit"),q4t.forEach(t),GEo=r(VRe," \u2014 "),qD=n(VRe,"A",{href:!0});var j4t=s(qD);OEo=r(j4t,"BeitFeatureExtractor"),j4t.forEach(t),VEo=r(VRe," (BEiT model)"),VRe.forEach(t),XEo=i(H),$u=n(H,"LI",{});var XRe=s($u);age=n(XRe,"STRONG",{});var D4t=s(age);zEo=r(D4t,"clip"),D4t.forEach(t),QEo=r(XRe," \u2014 "),jD=n(XRe,"A",{href:!0});var G4t=s(jD);WEo=r(G4t,"CLIPFeatureExtractor"),G4t.forEach(t),UEo=r(XRe," (CLIP model)"),XRe.forEach(t),HEo=i(H),ku=n(H,"LI",{});var zRe=s(ku);nge=n(zRe,"STRONG",{});var O4t=s(nge);JEo=r(O4t,"convnext"),O4t.forEach(t),YEo=r(zRe," \u2014 "),DD=n(zRe,"A",{href:!0});var V4t=s(DD);KEo=r(V4t,"ConvNextFeatureExtractor"),V4t.forEach(t),ZEo=r(zRe," (ConvNeXT model)"),zRe.forEach(t),e4o=i(H),Su=n(H,"LI",{});var QRe=s(Su);sge=n(QRe,"STRONG",{});var X4t=s(sge);o4o=r(X4t,"cvt"),X4t.forEach(t),r4o=r(QRe," \u2014 "),GD=n(QRe,"A",{href:!0});var z4t=s(GD);t4o=r(z4t,"ConvNextFeatureExtractor"),z4t.forEach(t),a4o=r(QRe," (CvT model)"),QRe.forEach(t),n4o=i(H),Ru=n(H,"LI",{});var WRe=s(Ru);lge=n(WRe,"STRONG",{});var Q4t=s(lge);s4o=r(Q4t,"data2vec-audio"),Q4t.forEach(t),l4o=r(WRe," \u2014 "),OD=n(WRe,"A",{href:!0});var W4t=s(OD);i4o=r(W4t,"Wav2Vec2FeatureExtractor"),W4t.forEach(t),d4o=r(WRe," (Data2VecAudio model)"),WRe.forEach(t),c4o=i(H),Pu=n(H,"LI",{});var URe=s(Pu);ige=n(URe,"STRONG",{});var U4t=s(ige);m4o=r(U4t,"data2vec-vision"),U4t.forEach(t),f4o=r(URe," \u2014 "),VD=n(URe,"A",{href:!0});var H4t=s(VD);g4o=r(H4t,"BeitFeatureExtractor"),H4t.forEach(t),h4o=r(URe," (Data2VecVision model)"),URe.forEach(t),u4o=i(H),Bu=n(H,"LI",{});var HRe=s(Bu);dge=n(HRe,"STRONG",{});var J4t=s(dge);p4o=r(J4t,"deit"),J4t.forEach(t),_4o=r(HRe," \u2014 "),XD=n(HRe,"A",{href:!0});var Y4t=s(XD);b4o=r(Y4t,"DeiTFeatureExtractor"),Y4t.forEach(t),v4o=r(HRe," (DeiT model)"),HRe.forEach(t),F4o=i(H),Iu=n(H,"LI",{});var JRe=s(Iu);cge=n(JRe,"STRONG",{});var K4t=s(cge);T4o=r(K4t,"detr"),K4t.forEach(t),M4o=r(JRe," \u2014 "),zD=n(JRe,"A",{href:!0});var Z4t=s(zD);E4o=r(Z4t,"DetrFeatureExtractor"),Z4t.forEach(t),C4o=r(JRe," (DETR model)"),JRe.forEach(t),w4o=i(H),Nu=n(H,"LI",{});var YRe=s(Nu);mge=n(YRe,"STRONG",{});var eCt=s(mge);A4o=r(eCt,"donut"),eCt.forEach(t),L4o=r(YRe," \u2014 "),QD=n(YRe,"A",{href:!0});var oCt=s(QD);y4o=r(oCt,"DonutFeatureExtractor"),oCt.forEach(t),x4o=r(YRe," (Donut model)"),YRe.forEach(t),$4o=i(H),qu=n(H,"LI",{});var KRe=s(qu);fge=n(KRe,"STRONG",{});var rCt=s(fge);k4o=r(rCt,"dpt"),rCt.forEach(t),S4o=r(KRe," \u2014 "),WD=n(KRe,"A",{href:!0});var tCt=s(WD);R4o=r(tCt,"DPTFeatureExtractor"),tCt.forEach(t),P4o=r(KRe," (DPT model)"),KRe.forEach(t),B4o=i(H),ju=n(H,"LI",{});var ZRe=s(ju);gge=n(ZRe,"STRONG",{});var aCt=s(gge);I4o=r(aCt,"flava"),aCt.forEach(t),N4o=r(ZRe," \u2014 "),UD=n(ZRe,"A",{href:!0});var nCt=s(UD);q4o=r(nCt,"FlavaFeatureExtractor"),nCt.forEach(t),j4o=r(ZRe," (FLAVA model)"),ZRe.forEach(t),D4o=i(H),Du=n(H,"LI",{});var ePe=s(Du);hge=n(ePe,"STRONG",{});var sCt=s(hge);G4o=r(sCt,"glpn"),sCt.forEach(t),O4o=r(ePe," \u2014 "),HD=n(ePe,"A",{href:!0});var lCt=s(HD);V4o=r(lCt,"GLPNFeatureExtractor"),lCt.forEach(t),X4o=r(ePe," (GLPN model)"),ePe.forEach(t),z4o=i(H),Gu=n(H,"LI",{});var oPe=s(Gu);uge=n(oPe,"STRONG",{});var iCt=s(uge);Q4o=r(iCt,"groupvit"),iCt.forEach(t),W4o=r(oPe," \u2014 "),JD=n(oPe,"A",{href:!0});var dCt=s(JD);U4o=r(dCt,"CLIPFeatureExtractor"),dCt.forEach(t),H4o=r(oPe," (GroupViT model)"),oPe.forEach(t),J4o=i(H),Ou=n(H,"LI",{});var rPe=s(Ou);pge=n(rPe,"STRONG",{});var cCt=s(pge);Y4o=r(cCt,"hubert"),cCt.forEach(t),K4o=r(rPe," \u2014 "),YD=n(rPe,"A",{href:!0});var mCt=s(YD);Z4o=r(mCt,"Wav2Vec2FeatureExtractor"),mCt.forEach(t),eCo=r(rPe," (Hubert model)"),rPe.forEach(t),oCo=i(H),Vu=n(H,"LI",{});var tPe=s(Vu);_ge=n(tPe,"STRONG",{});var fCt=s(_ge);rCo=r(fCt,"imagegpt"),fCt.forEach(t),tCo=r(tPe," \u2014 "),KD=n(tPe,"A",{href:!0});var gCt=s(KD);aCo=r(gCt,"ImageGPTFeatureExtractor"),gCt.forEach(t),nCo=r(tPe," (ImageGPT model)"),tPe.forEach(t),sCo=i(H),Xu=n(H,"LI",{});var aPe=s(Xu);bge=n(aPe,"STRONG",{});var hCt=s(bge);lCo=r(hCt,"layoutlmv2"),hCt.forEach(t),iCo=r(aPe," \u2014 "),ZD=n(aPe,"A",{href:!0});var uCt=s(ZD);dCo=r(uCt,"LayoutLMv2FeatureExtractor"),uCt.forEach(t),cCo=r(aPe," (LayoutLMv2 model)"),aPe.forEach(t),mCo=i(H),zu=n(H,"LI",{});var nPe=s(zu);vge=n(nPe,"STRONG",{});var pCt=s(vge);fCo=r(pCt,"layoutlmv3"),pCt.forEach(t),gCo=r(nPe," \u2014 "),eG=n(nPe,"A",{href:!0});var _Ct=s(eG);hCo=r(_Ct,"LayoutLMv3FeatureExtractor"),_Ct.forEach(t),uCo=r(nPe," (LayoutLMv3 model)"),nPe.forEach(t),pCo=i(H),Qu=n(H,"LI",{});var sPe=s(Qu);Fge=n(sPe,"STRONG",{});var bCt=s(Fge);_Co=r(bCt,"levit"),bCt.forEach(t),bCo=r(sPe," \u2014 "),oG=n(sPe,"A",{href:!0});var vCt=s(oG);vCo=r(vCt,"LevitFeatureExtractor"),vCt.forEach(t),FCo=r(sPe," (LeViT model)"),sPe.forEach(t),TCo=i(H),Wu=n(H,"LI",{});var lPe=s(Wu);Tge=n(lPe,"STRONG",{});var FCt=s(Tge);MCo=r(FCt,"maskformer"),FCt.forEach(t),ECo=r(lPe," \u2014 "),rG=n(lPe,"A",{href:!0});var TCt=s(rG);CCo=r(TCt,"MaskFormerFeatureExtractor"),TCt.forEach(t),wCo=r(lPe," (MaskFormer model)"),lPe.forEach(t),ACo=i(H),Uu=n(H,"LI",{});var iPe=s(Uu);Mge=n(iPe,"STRONG",{});var MCt=s(Mge);LCo=r(MCt,"mctct"),MCt.forEach(t),yCo=r(iPe," \u2014 "),tG=n(iPe,"A",{href:!0});var ECt=s(tG);xCo=r(ECt,"MCTCTFeatureExtractor"),ECt.forEach(t),$Co=r(iPe," (M-CTC-T model)"),iPe.forEach(t),kCo=i(H),Hu=n(H,"LI",{});var dPe=s(Hu);Ege=n(dPe,"STRONG",{});var CCt=s(Ege);SCo=r(CCt,"mobilevit"),CCt.forEach(t),RCo=r(dPe," \u2014 "),aG=n(dPe,"A",{href:!0});var wCt=s(aG);PCo=r(wCt,"MobileViTFeatureExtractor"),wCt.forEach(t),BCo=r(dPe," (MobileViT model)"),dPe.forEach(t),ICo=i(H),Ju=n(H,"LI",{});var cPe=s(Ju);Cge=n(cPe,"STRONG",{});var ACt=s(Cge);NCo=r(ACt,"owlvit"),ACt.forEach(t),qCo=r(cPe," \u2014 "),nG=n(cPe,"A",{href:!0});var LCt=s(nG);jCo=r(LCt,"OwlViTFeatureExtractor"),LCt.forEach(t),DCo=r(cPe," (OWL-ViT model)"),cPe.forEach(t),GCo=i(H),Yu=n(H,"LI",{});var mPe=s(Yu);wge=n(mPe,"STRONG",{});var yCt=s(wge);OCo=r(yCt,"perceiver"),yCt.forEach(t),VCo=r(mPe," \u2014 "),sG=n(mPe,"A",{href:!0});var xCt=s(sG);XCo=r(xCt,"PerceiverFeatureExtractor"),xCt.forEach(t),zCo=r(mPe," (Perceiver model)"),mPe.forEach(t),QCo=i(H),Ku=n(H,"LI",{});var fPe=s(Ku);Age=n(fPe,"STRONG",{});var $Ct=s(Age);WCo=r($Ct,"poolformer"),$Ct.forEach(t),UCo=r(fPe," \u2014 "),lG=n(fPe,"A",{href:!0});var kCt=s(lG);HCo=r(kCt,"PoolFormerFeatureExtractor"),kCt.forEach(t),JCo=r(fPe," (PoolFormer model)"),fPe.forEach(t),YCo=i(H),Zu=n(H,"LI",{});var gPe=s(Zu);Lge=n(gPe,"STRONG",{});var SCt=s(Lge);KCo=r(SCt,"regnet"),SCt.forEach(t),ZCo=r(gPe," \u2014 "),iG=n(gPe,"A",{href:!0});var RCt=s(iG);e3o=r(RCt,"ConvNextFeatureExtractor"),RCt.forEach(t),o3o=r(gPe," (RegNet model)"),gPe.forEach(t),r3o=i(H),ep=n(H,"LI",{});var hPe=s(ep);yge=n(hPe,"STRONG",{});var PCt=s(yge);t3o=r(PCt,"resnet"),PCt.forEach(t),a3o=r(hPe," \u2014 "),dG=n(hPe,"A",{href:!0});var BCt=s(dG);n3o=r(BCt,"ConvNextFeatureExtractor"),BCt.forEach(t),s3o=r(hPe," (ResNet model)"),hPe.forEach(t),l3o=i(H),op=n(H,"LI",{});var uPe=s(op);xge=n(uPe,"STRONG",{});var ICt=s(xge);i3o=r(ICt,"segformer"),ICt.forEach(t),d3o=r(uPe," \u2014 "),cG=n(uPe,"A",{href:!0});var NCt=s(cG);c3o=r(NCt,"SegformerFeatureExtractor"),NCt.forEach(t),m3o=r(uPe," (SegFormer model)"),uPe.forEach(t),f3o=i(H),rp=n(H,"LI",{});var pPe=s(rp);$ge=n(pPe,"STRONG",{});var qCt=s($ge);g3o=r(qCt,"speech_to_text"),qCt.forEach(t),h3o=r(pPe," \u2014 "),mG=n(pPe,"A",{href:!0});var jCt=s(mG);u3o=r(jCt,"Speech2TextFeatureExtractor"),jCt.forEach(t),p3o=r(pPe," (Speech2Text model)"),pPe.forEach(t),_3o=i(H),tp=n(H,"LI",{});var _Pe=s(tp);kge=n(_Pe,"STRONG",{});var DCt=s(kge);b3o=r(DCt,"swin"),DCt.forEach(t),v3o=r(_Pe," \u2014 "),fG=n(_Pe,"A",{href:!0});var GCt=s(fG);F3o=r(GCt,"ViTFeatureExtractor"),GCt.forEach(t),T3o=r(_Pe," (Swin Transformer model)"),_Pe.forEach(t),M3o=i(H),ap=n(H,"LI",{});var bPe=s(ap);Sge=n(bPe,"STRONG",{});var OCt=s(Sge);E3o=r(OCt,"swinv2"),OCt.forEach(t),C3o=r(bPe," \u2014 "),gG=n(bPe,"A",{href:!0});var VCt=s(gG);w3o=r(VCt,"ViTFeatureExtractor"),VCt.forEach(t),A3o=r(bPe," (Swin Transformer V2 model)"),bPe.forEach(t),L3o=i(H),np=n(H,"LI",{});var vPe=s(np);Rge=n(vPe,"STRONG",{});var XCt=s(Rge);y3o=r(XCt,"van"),XCt.forEach(t),x3o=r(vPe," \u2014 "),hG=n(vPe,"A",{href:!0});var zCt=s(hG);$3o=r(zCt,"ConvNextFeatureExtractor"),zCt.forEach(t),k3o=r(vPe," (VAN model)"),vPe.forEach(t),S3o=i(H),sp=n(H,"LI",{});var FPe=s(sp);Pge=n(FPe,"STRONG",{});var QCt=s(Pge);R3o=r(QCt,"videomae"),QCt.forEach(t),P3o=r(FPe," \u2014 "),uG=n(FPe,"A",{href:!0});var WCt=s(uG);B3o=r(WCt,"VideoMAEFeatureExtractor"),WCt.forEach(t),I3o=r(FPe," (VideoMAE model)"),FPe.forEach(t),N3o=i(H),lp=n(H,"LI",{});var TPe=s(lp);Bge=n(TPe,"STRONG",{});var UCt=s(Bge);q3o=r(UCt,"vilt"),UCt.forEach(t),j3o=r(TPe," \u2014 "),pG=n(TPe,"A",{href:!0});var HCt=s(pG);D3o=r(HCt,"ViltFeatureExtractor"),HCt.forEach(t),G3o=r(TPe," (ViLT model)"),TPe.forEach(t),O3o=i(H),ip=n(H,"LI",{});var MPe=s(ip);Ige=n(MPe,"STRONG",{});var JCt=s(Ige);V3o=r(JCt,"vit"),JCt.forEach(t),X3o=r(MPe," \u2014 "),_G=n(MPe,"A",{href:!0});var YCt=s(_G);z3o=r(YCt,"ViTFeatureExtractor"),YCt.forEach(t),Q3o=r(MPe," (ViT model)"),MPe.forEach(t),W3o=i(H),dp=n(H,"LI",{});var EPe=s(dp);Nge=n(EPe,"STRONG",{});var KCt=s(Nge);U3o=r(KCt,"vit_mae"),KCt.forEach(t),H3o=r(EPe," \u2014 "),bG=n(EPe,"A",{href:!0});var ZCt=s(bG);J3o=r(ZCt,"ViTFeatureExtractor"),ZCt.forEach(t),Y3o=r(EPe," (ViTMAE model)"),EPe.forEach(t),K3o=i(H),cp=n(H,"LI",{});var CPe=s(cp);qge=n(CPe,"STRONG",{});var e3t=s(qge);Z3o=r(e3t,"wav2vec2"),e3t.forEach(t),e5o=r(CPe," \u2014 "),vG=n(CPe,"A",{href:!0});var o3t=s(vG);o5o=r(o3t,"Wav2Vec2FeatureExtractor"),o3t.forEach(t),r5o=r(CPe," (Wav2Vec2 model)"),CPe.forEach(t),t5o=i(H),mp=n(H,"LI",{});var wPe=s(mp);jge=n(wPe,"STRONG",{});var r3t=s(jge);a5o=r(r3t,"wav2vec2-conformer"),r3t.forEach(t),n5o=r(wPe," \u2014 "),FG=n(wPe,"A",{href:!0});var t3t=s(FG);s5o=r(t3t,"Wav2Vec2FeatureExtractor"),t3t.forEach(t),l5o=r(wPe," (Wav2Vec2-Conformer model)"),wPe.forEach(t),i5o=i(H),fp=n(H,"LI",{});var APe=s(fp);Dge=n(APe,"STRONG",{});var a3t=s(Dge);d5o=r(a3t,"xclip"),a3t.forEach(t),c5o=r(APe," \u2014 "),TG=n(APe,"A",{href:!0});var n3t=s(TG);m5o=r(n3t,"CLIPFeatureExtractor"),n3t.forEach(t),f5o=r(APe," (X-CLIP model)"),APe.forEach(t),g5o=i(H),gp=n(H,"LI",{});var LPe=s(gp);Gge=n(LPe,"STRONG",{});var s3t=s(Gge);h5o=r(s3t,"yolos"),s3t.forEach(t),u5o=r(LPe," \u2014 "),MG=n(LPe,"A",{href:!0});var l3t=s(MG);p5o=r(l3t,"YolosFeatureExtractor"),l3t.forEach(t),_5o=r(LPe," (YOLOS model)"),LPe.forEach(t),H.forEach(t),b5o=i(_a),T(hp.$$.fragment,_a),v5o=i(_a),T(up.$$.fragment,_a),_a.forEach(t),F5o=i(Ml),pp=n(Ml,"DIV",{class:!0});var iZe=s(pp);T(k9.$$.fragment,iZe),T5o=i(iZe),Oge=n(iZe,"P",{});var i3t=s(Oge);M5o=r(i3t,"Register a new feature extractor for this class."),i3t.forEach(t),iZe.forEach(t),Ml.forEach(t),YJe=i(m),gd=n(m,"H2",{class:!0});var dZe=s(gd);_p=n(dZe,"A",{id:!0,class:!0,href:!0});var d3t=s(_p);Vge=n(d3t,"SPAN",{});var c3t=s(Vge);T(S9.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),E5o=i(dZe),Xge=n(dZe,"SPAN",{});var m3t=s(Xge);C5o=r(m3t,"AutoProcessor"),m3t.forEach(t),dZe.forEach(t),KJe=i(m),So=n(m,"DIV",{class:!0});var El=s(So);T(R9.$$.fragment,El),w5o=i(El),P9=n(El,"P",{});var cZe=s(P9);A5o=r(cZe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),EG=n(cZe,"A",{href:!0});var f3t=s(EG);L5o=r(f3t,"AutoProcessor.from_pretrained()"),f3t.forEach(t),y5o=r(cZe," class method."),cZe.forEach(t),x5o=i(El),B9=n(El,"P",{});var mZe=s(B9);$5o=r(mZe,"This class cannot be instantiated directly using "),zge=n(mZe,"CODE",{});var g3t=s(zge);k5o=r(g3t,"__init__()"),g3t.forEach(t),S5o=r(mZe," (throws an error)."),mZe.forEach(t),R5o=i(El),Ye=n(El,"DIV",{class:!0});var ba=s(Ye);T(I9.$$.fragment,ba),P5o=i(ba),Qge=n(ba,"P",{});var h3t=s(Qge);B5o=r(h3t,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),h3t.forEach(t),I5o=i(ba),hd=n(ba,"P",{});var Mse=s(hd);N5o=r(Mse,"The processor class to instantiate is selected based on the "),Wge=n(Mse,"CODE",{});var u3t=s(Wge);q5o=r(u3t,"model_type"),u3t.forEach(t),j5o=r(Mse,` property of the config object (either
passed as an argument or loaded from `),Uge=n(Mse,"CODE",{});var p3t=s(Uge);D5o=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),G5o=r(Mse," if possible):"),Mse.forEach(t),O5o=i(ba),ie=n(ba,"UL",{});var ge=s(ie);bp=n(ge,"LI",{});var yPe=s(bp);Hge=n(yPe,"STRONG",{});var _3t=s(Hge);V5o=r(_3t,"clip"),_3t.forEach(t),X5o=r(yPe," \u2014 "),CG=n(yPe,"A",{href:!0});var b3t=s(CG);z5o=r(b3t,"CLIPProcessor"),b3t.forEach(t),Q5o=r(yPe," (CLIP model)"),yPe.forEach(t),W5o=i(ge),vp=n(ge,"LI",{});var xPe=s(vp);Jge=n(xPe,"STRONG",{});var v3t=s(Jge);U5o=r(v3t,"donut"),v3t.forEach(t),H5o=r(xPe," \u2014 "),wG=n(xPe,"A",{href:!0});var F3t=s(wG);J5o=r(F3t,"DonutProcessor"),F3t.forEach(t),Y5o=r(xPe," (Donut model)"),xPe.forEach(t),K5o=i(ge),Fp=n(ge,"LI",{});var $Pe=s(Fp);Yge=n($Pe,"STRONG",{});var T3t=s(Yge);Z5o=r(T3t,"flava"),T3t.forEach(t),e0o=r($Pe," \u2014 "),AG=n($Pe,"A",{href:!0});var M3t=s(AG);o0o=r(M3t,"FlavaProcessor"),M3t.forEach(t),r0o=r($Pe," (FLAVA model)"),$Pe.forEach(t),t0o=i(ge),Tp=n(ge,"LI",{});var kPe=s(Tp);Kge=n(kPe,"STRONG",{});var E3t=s(Kge);a0o=r(E3t,"groupvit"),E3t.forEach(t),n0o=r(kPe," \u2014 "),LG=n(kPe,"A",{href:!0});var C3t=s(LG);s0o=r(C3t,"CLIPProcessor"),C3t.forEach(t),l0o=r(kPe," (GroupViT model)"),kPe.forEach(t),i0o=i(ge),Mp=n(ge,"LI",{});var SPe=s(Mp);Zge=n(SPe,"STRONG",{});var w3t=s(Zge);d0o=r(w3t,"layoutlmv2"),w3t.forEach(t),c0o=r(SPe," \u2014 "),yG=n(SPe,"A",{href:!0});var A3t=s(yG);m0o=r(A3t,"LayoutLMv2Processor"),A3t.forEach(t),f0o=r(SPe," (LayoutLMv2 model)"),SPe.forEach(t),g0o=i(ge),Ep=n(ge,"LI",{});var RPe=s(Ep);ehe=n(RPe,"STRONG",{});var L3t=s(ehe);h0o=r(L3t,"layoutlmv3"),L3t.forEach(t),u0o=r(RPe," \u2014 "),xG=n(RPe,"A",{href:!0});var y3t=s(xG);p0o=r(y3t,"LayoutLMv3Processor"),y3t.forEach(t),_0o=r(RPe," (LayoutLMv3 model)"),RPe.forEach(t),b0o=i(ge),Cp=n(ge,"LI",{});var PPe=s(Cp);ohe=n(PPe,"STRONG",{});var x3t=s(ohe);v0o=r(x3t,"layoutxlm"),x3t.forEach(t),F0o=r(PPe," \u2014 "),$G=n(PPe,"A",{href:!0});var $3t=s($G);T0o=r($3t,"LayoutXLMProcessor"),$3t.forEach(t),M0o=r(PPe," (LayoutXLM model)"),PPe.forEach(t),E0o=i(ge),wp=n(ge,"LI",{});var BPe=s(wp);rhe=n(BPe,"STRONG",{});var k3t=s(rhe);C0o=r(k3t,"owlvit"),k3t.forEach(t),w0o=r(BPe," \u2014 "),kG=n(BPe,"A",{href:!0});var S3t=s(kG);A0o=r(S3t,"OwlViTProcessor"),S3t.forEach(t),L0o=r(BPe," (OWL-ViT model)"),BPe.forEach(t),y0o=i(ge),Ap=n(ge,"LI",{});var IPe=s(Ap);the=n(IPe,"STRONG",{});var R3t=s(the);x0o=r(R3t,"sew"),R3t.forEach(t),$0o=r(IPe," \u2014 "),SG=n(IPe,"A",{href:!0});var P3t=s(SG);k0o=r(P3t,"Wav2Vec2Processor"),P3t.forEach(t),S0o=r(IPe," (SEW model)"),IPe.forEach(t),R0o=i(ge),Lp=n(ge,"LI",{});var NPe=s(Lp);ahe=n(NPe,"STRONG",{});var B3t=s(ahe);P0o=r(B3t,"sew-d"),B3t.forEach(t),B0o=r(NPe," \u2014 "),RG=n(NPe,"A",{href:!0});var I3t=s(RG);I0o=r(I3t,"Wav2Vec2Processor"),I3t.forEach(t),N0o=r(NPe," (SEW-D model)"),NPe.forEach(t),q0o=i(ge),yp=n(ge,"LI",{});var qPe=s(yp);nhe=n(qPe,"STRONG",{});var N3t=s(nhe);j0o=r(N3t,"speech_to_text"),N3t.forEach(t),D0o=r(qPe," \u2014 "),PG=n(qPe,"A",{href:!0});var q3t=s(PG);G0o=r(q3t,"Speech2TextProcessor"),q3t.forEach(t),O0o=r(qPe," (Speech2Text model)"),qPe.forEach(t),V0o=i(ge),xp=n(ge,"LI",{});var jPe=s(xp);she=n(jPe,"STRONG",{});var j3t=s(she);X0o=r(j3t,"speech_to_text_2"),j3t.forEach(t),z0o=r(jPe," \u2014 "),BG=n(jPe,"A",{href:!0});var D3t=s(BG);Q0o=r(D3t,"Speech2Text2Processor"),D3t.forEach(t),W0o=r(jPe," (Speech2Text2 model)"),jPe.forEach(t),U0o=i(ge),$p=n(ge,"LI",{});var DPe=s($p);lhe=n(DPe,"STRONG",{});var G3t=s(lhe);H0o=r(G3t,"trocr"),G3t.forEach(t),J0o=r(DPe," \u2014 "),IG=n(DPe,"A",{href:!0});var O3t=s(IG);Y0o=r(O3t,"TrOCRProcessor"),O3t.forEach(t),K0o=r(DPe," (TrOCR model)"),DPe.forEach(t),Z0o=i(ge),kp=n(ge,"LI",{});var GPe=s(kp);ihe=n(GPe,"STRONG",{});var V3t=s(ihe);ewo=r(V3t,"unispeech"),V3t.forEach(t),owo=r(GPe," \u2014 "),NG=n(GPe,"A",{href:!0});var X3t=s(NG);rwo=r(X3t,"Wav2Vec2Processor"),X3t.forEach(t),two=r(GPe," (UniSpeech model)"),GPe.forEach(t),awo=i(ge),Sp=n(ge,"LI",{});var OPe=s(Sp);dhe=n(OPe,"STRONG",{});var z3t=s(dhe);nwo=r(z3t,"unispeech-sat"),z3t.forEach(t),swo=r(OPe," \u2014 "),qG=n(OPe,"A",{href:!0});var Q3t=s(qG);lwo=r(Q3t,"Wav2Vec2Processor"),Q3t.forEach(t),iwo=r(OPe," (UniSpeechSat model)"),OPe.forEach(t),dwo=i(ge),Rp=n(ge,"LI",{});var VPe=s(Rp);che=n(VPe,"STRONG",{});var W3t=s(che);cwo=r(W3t,"vilt"),W3t.forEach(t),mwo=r(VPe," \u2014 "),jG=n(VPe,"A",{href:!0});var U3t=s(jG);fwo=r(U3t,"ViltProcessor"),U3t.forEach(t),gwo=r(VPe," (ViLT model)"),VPe.forEach(t),hwo=i(ge),Pp=n(ge,"LI",{});var XPe=s(Pp);mhe=n(XPe,"STRONG",{});var H3t=s(mhe);uwo=r(H3t,"vision-text-dual-encoder"),H3t.forEach(t),pwo=r(XPe," \u2014 "),DG=n(XPe,"A",{href:!0});var J3t=s(DG);_wo=r(J3t,"VisionTextDualEncoderProcessor"),J3t.forEach(t),bwo=r(XPe," (VisionTextDualEncoder model)"),XPe.forEach(t),vwo=i(ge),Bp=n(ge,"LI",{});var zPe=s(Bp);fhe=n(zPe,"STRONG",{});var Y3t=s(fhe);Fwo=r(Y3t,"wav2vec2"),Y3t.forEach(t),Two=r(zPe," \u2014 "),GG=n(zPe,"A",{href:!0});var K3t=s(GG);Mwo=r(K3t,"Wav2Vec2Processor"),K3t.forEach(t),Ewo=r(zPe," (Wav2Vec2 model)"),zPe.forEach(t),Cwo=i(ge),Ip=n(ge,"LI",{});var QPe=s(Ip);ghe=n(QPe,"STRONG",{});var Z3t=s(ghe);wwo=r(Z3t,"wav2vec2-conformer"),Z3t.forEach(t),Awo=r(QPe," \u2014 "),OG=n(QPe,"A",{href:!0});var e5t=s(OG);Lwo=r(e5t,"Wav2Vec2Processor"),e5t.forEach(t),ywo=r(QPe," (Wav2Vec2-Conformer model)"),QPe.forEach(t),xwo=i(ge),Np=n(ge,"LI",{});var WPe=s(Np);hhe=n(WPe,"STRONG",{});var o5t=s(hhe);$wo=r(o5t,"wavlm"),o5t.forEach(t),kwo=r(WPe," \u2014 "),VG=n(WPe,"A",{href:!0});var r5t=s(VG);Swo=r(r5t,"Wav2Vec2Processor"),r5t.forEach(t),Rwo=r(WPe," (WavLM model)"),WPe.forEach(t),Pwo=i(ge),qp=n(ge,"LI",{});var UPe=s(qp);uhe=n(UPe,"STRONG",{});var t5t=s(uhe);Bwo=r(t5t,"xclip"),t5t.forEach(t),Iwo=r(UPe," \u2014 "),XG=n(UPe,"A",{href:!0});var a5t=s(XG);Nwo=r(a5t,"CLIPProcessor"),a5t.forEach(t),qwo=r(UPe," (X-CLIP model)"),UPe.forEach(t),ge.forEach(t),jwo=i(ba),T(jp.$$.fragment,ba),Dwo=i(ba),T(Dp.$$.fragment,ba),ba.forEach(t),Gwo=i(El),Gp=n(El,"DIV",{class:!0});var fZe=s(Gp);T(N9.$$.fragment,fZe),Owo=i(fZe),phe=n(fZe,"P",{});var n5t=s(phe);Vwo=r(n5t,"Register a new processor for this class."),n5t.forEach(t),fZe.forEach(t),El.forEach(t),ZJe=i(m),ud=n(m,"H2",{class:!0});var gZe=s(ud);Op=n(gZe,"A",{id:!0,class:!0,href:!0});var s5t=s(Op);_he=n(s5t,"SPAN",{});var l5t=s(_he);T(q9.$$.fragment,l5t),l5t.forEach(t),s5t.forEach(t),Xwo=i(gZe),bhe=n(gZe,"SPAN",{});var i5t=s(bhe);zwo=r(i5t,"AutoModel"),i5t.forEach(t),gZe.forEach(t),eYe=i(m),Ro=n(m,"DIV",{class:!0});var Cl=s(Ro);T(j9.$$.fragment,Cl),Qwo=i(Cl),pd=n(Cl,"P",{});var Ese=s(pd);Wwo=r(Ese,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zG=n(Ese,"A",{href:!0});var d5t=s(zG);Uwo=r(d5t,"from_pretrained()"),d5t.forEach(t),Hwo=r(Ese," class method or the "),QG=n(Ese,"A",{href:!0});var c5t=s(QG);Jwo=r(c5t,"from_config()"),c5t.forEach(t),Ywo=r(Ese,` class
method.`),Ese.forEach(t),Kwo=i(Cl),D9=n(Cl,"P",{});var hZe=s(D9);Zwo=r(hZe,"This class cannot be instantiated directly using "),vhe=n(hZe,"CODE",{});var m5t=s(vhe);eAo=r(m5t,"__init__()"),m5t.forEach(t),oAo=r(hZe," (throws an error)."),hZe.forEach(t),rAo=i(Cl),pt=n(Cl,"DIV",{class:!0});var ly=s(pt);T(G9.$$.fragment,ly),tAo=i(ly),Fhe=n(ly,"P",{});var f5t=s(Fhe);aAo=r(f5t,"Instantiates one of the base model classes of the library from a configuration."),f5t.forEach(t),nAo=i(ly),_d=n(ly,"P",{});var Cse=s(_d);sAo=r(Cse,`Note:
Loading a model from its configuration file does `),The=n(Cse,"STRONG",{});var g5t=s(The);lAo=r(g5t,"not"),g5t.forEach(t),iAo=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n(Cse,"A",{href:!0});var h5t=s(WG);dAo=r(h5t,"from_pretrained()"),h5t.forEach(t),cAo=r(Cse," to load the model weights."),Cse.forEach(t),mAo=i(ly),T(Vp.$$.fragment,ly),ly.forEach(t),fAo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var va=s(Ke);T(O9.$$.fragment,va),gAo=i(va),Mhe=n(va,"P",{});var u5t=s(Mhe);hAo=r(u5t,"Instantiate one of the base model classes of the library from a pretrained model."),u5t.forEach(t),uAo=i(va),Ja=n(va,"P",{});var iy=s(Ja);pAo=r(iy,"The model class to instantiate is selected based on the "),Ehe=n(iy,"CODE",{});var p5t=s(Ehe);_Ao=r(p5t,"model_type"),p5t.forEach(t),bAo=r(iy,` property of the config object (either
passed as an argument or loaded from `),Che=n(iy,"CODE",{});var _5t=s(Che);vAo=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),FAo=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(iy,"CODE",{});var b5t=s(whe);TAo=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),MAo=r(iy,":"),iy.forEach(t),EAo=i(va),y=n(va,"UL",{});var x=s(y);Xp=n(x,"LI",{});var HPe=s(Xp);Ahe=n(HPe,"STRONG",{});var v5t=s(Ahe);CAo=r(v5t,"albert"),v5t.forEach(t),wAo=r(HPe," \u2014 "),UG=n(HPe,"A",{href:!0});var F5t=s(UG);AAo=r(F5t,"AlbertModel"),F5t.forEach(t),LAo=r(HPe," (ALBERT model)"),HPe.forEach(t),yAo=i(x),zp=n(x,"LI",{});var JPe=s(zp);Lhe=n(JPe,"STRONG",{});var T5t=s(Lhe);xAo=r(T5t,"bart"),T5t.forEach(t),$Ao=r(JPe," \u2014 "),HG=n(JPe,"A",{href:!0});var M5t=s(HG);kAo=r(M5t,"BartModel"),M5t.forEach(t),SAo=r(JPe," (BART model)"),JPe.forEach(t),RAo=i(x),Qp=n(x,"LI",{});var YPe=s(Qp);yhe=n(YPe,"STRONG",{});var E5t=s(yhe);PAo=r(E5t,"beit"),E5t.forEach(t),BAo=r(YPe," \u2014 "),JG=n(YPe,"A",{href:!0});var C5t=s(JG);IAo=r(C5t,"BeitModel"),C5t.forEach(t),NAo=r(YPe," (BEiT model)"),YPe.forEach(t),qAo=i(x),Wp=n(x,"LI",{});var KPe=s(Wp);xhe=n(KPe,"STRONG",{});var w5t=s(xhe);jAo=r(w5t,"bert"),w5t.forEach(t),DAo=r(KPe," \u2014 "),YG=n(KPe,"A",{href:!0});var A5t=s(YG);GAo=r(A5t,"BertModel"),A5t.forEach(t),OAo=r(KPe," (BERT model)"),KPe.forEach(t),VAo=i(x),Up=n(x,"LI",{});var ZPe=s(Up);$he=n(ZPe,"STRONG",{});var L5t=s($he);XAo=r(L5t,"bert-generation"),L5t.forEach(t),zAo=r(ZPe," \u2014 "),KG=n(ZPe,"A",{href:!0});var y5t=s(KG);QAo=r(y5t,"BertGenerationEncoder"),y5t.forEach(t),WAo=r(ZPe," (Bert Generation model)"),ZPe.forEach(t),UAo=i(x),Hp=n(x,"LI",{});var eBe=s(Hp);khe=n(eBe,"STRONG",{});var x5t=s(khe);HAo=r(x5t,"big_bird"),x5t.forEach(t),JAo=r(eBe," \u2014 "),ZG=n(eBe,"A",{href:!0});var $5t=s(ZG);YAo=r($5t,"BigBirdModel"),$5t.forEach(t),KAo=r(eBe," (BigBird model)"),eBe.forEach(t),ZAo=i(x),Jp=n(x,"LI",{});var oBe=s(Jp);She=n(oBe,"STRONG",{});var k5t=s(She);e6o=r(k5t,"bigbird_pegasus"),k5t.forEach(t),o6o=r(oBe," \u2014 "),eO=n(oBe,"A",{href:!0});var S5t=s(eO);r6o=r(S5t,"BigBirdPegasusModel"),S5t.forEach(t),t6o=r(oBe," (BigBird-Pegasus model)"),oBe.forEach(t),a6o=i(x),Yp=n(x,"LI",{});var rBe=s(Yp);Rhe=n(rBe,"STRONG",{});var R5t=s(Rhe);n6o=r(R5t,"blenderbot"),R5t.forEach(t),s6o=r(rBe," \u2014 "),oO=n(rBe,"A",{href:!0});var P5t=s(oO);l6o=r(P5t,"BlenderbotModel"),P5t.forEach(t),i6o=r(rBe," (Blenderbot model)"),rBe.forEach(t),d6o=i(x),Kp=n(x,"LI",{});var tBe=s(Kp);Phe=n(tBe,"STRONG",{});var B5t=s(Phe);c6o=r(B5t,"blenderbot-small"),B5t.forEach(t),m6o=r(tBe," \u2014 "),rO=n(tBe,"A",{href:!0});var I5t=s(rO);f6o=r(I5t,"BlenderbotSmallModel"),I5t.forEach(t),g6o=r(tBe," (BlenderbotSmall model)"),tBe.forEach(t),h6o=i(x),Zp=n(x,"LI",{});var aBe=s(Zp);Bhe=n(aBe,"STRONG",{});var N5t=s(Bhe);u6o=r(N5t,"bloom"),N5t.forEach(t),p6o=r(aBe," \u2014 "),tO=n(aBe,"A",{href:!0});var q5t=s(tO);_6o=r(q5t,"BloomModel"),q5t.forEach(t),b6o=r(aBe," (BLOOM model)"),aBe.forEach(t),v6o=i(x),e_=n(x,"LI",{});var nBe=s(e_);Ihe=n(nBe,"STRONG",{});var j5t=s(Ihe);F6o=r(j5t,"camembert"),j5t.forEach(t),T6o=r(nBe," \u2014 "),aO=n(nBe,"A",{href:!0});var D5t=s(aO);M6o=r(D5t,"CamembertModel"),D5t.forEach(t),E6o=r(nBe," (CamemBERT model)"),nBe.forEach(t),C6o=i(x),o_=n(x,"LI",{});var sBe=s(o_);Nhe=n(sBe,"STRONG",{});var G5t=s(Nhe);w6o=r(G5t,"canine"),G5t.forEach(t),A6o=r(sBe," \u2014 "),nO=n(sBe,"A",{href:!0});var O5t=s(nO);L6o=r(O5t,"CanineModel"),O5t.forEach(t),y6o=r(sBe," (CANINE model)"),sBe.forEach(t),x6o=i(x),r_=n(x,"LI",{});var lBe=s(r_);qhe=n(lBe,"STRONG",{});var V5t=s(qhe);$6o=r(V5t,"clip"),V5t.forEach(t),k6o=r(lBe," \u2014 "),sO=n(lBe,"A",{href:!0});var X5t=s(sO);S6o=r(X5t,"CLIPModel"),X5t.forEach(t),R6o=r(lBe," (CLIP model)"),lBe.forEach(t),P6o=i(x),t_=n(x,"LI",{});var iBe=s(t_);jhe=n(iBe,"STRONG",{});var z5t=s(jhe);B6o=r(z5t,"codegen"),z5t.forEach(t),I6o=r(iBe," \u2014 "),lO=n(iBe,"A",{href:!0});var Q5t=s(lO);N6o=r(Q5t,"CodeGenModel"),Q5t.forEach(t),q6o=r(iBe," (CodeGen model)"),iBe.forEach(t),j6o=i(x),a_=n(x,"LI",{});var dBe=s(a_);Dhe=n(dBe,"STRONG",{});var W5t=s(Dhe);D6o=r(W5t,"convbert"),W5t.forEach(t),G6o=r(dBe," \u2014 "),iO=n(dBe,"A",{href:!0});var U5t=s(iO);O6o=r(U5t,"ConvBertModel"),U5t.forEach(t),V6o=r(dBe," (ConvBERT model)"),dBe.forEach(t),X6o=i(x),n_=n(x,"LI",{});var cBe=s(n_);Ghe=n(cBe,"STRONG",{});var H5t=s(Ghe);z6o=r(H5t,"convnext"),H5t.forEach(t),Q6o=r(cBe," \u2014 "),dO=n(cBe,"A",{href:!0});var J5t=s(dO);W6o=r(J5t,"ConvNextModel"),J5t.forEach(t),U6o=r(cBe," (ConvNeXT model)"),cBe.forEach(t),H6o=i(x),s_=n(x,"LI",{});var mBe=s(s_);Ohe=n(mBe,"STRONG",{});var Y5t=s(Ohe);J6o=r(Y5t,"ctrl"),Y5t.forEach(t),Y6o=r(mBe," \u2014 "),cO=n(mBe,"A",{href:!0});var K5t=s(cO);K6o=r(K5t,"CTRLModel"),K5t.forEach(t),Z6o=r(mBe," (CTRL model)"),mBe.forEach(t),e7o=i(x),l_=n(x,"LI",{});var fBe=s(l_);Vhe=n(fBe,"STRONG",{});var Z5t=s(Vhe);o7o=r(Z5t,"cvt"),Z5t.forEach(t),r7o=r(fBe," \u2014 "),mO=n(fBe,"A",{href:!0});var e0t=s(mO);t7o=r(e0t,"CvtModel"),e0t.forEach(t),a7o=r(fBe," (CvT model)"),fBe.forEach(t),n7o=i(x),i_=n(x,"LI",{});var gBe=s(i_);Xhe=n(gBe,"STRONG",{});var o0t=s(Xhe);s7o=r(o0t,"data2vec-audio"),o0t.forEach(t),l7o=r(gBe," \u2014 "),fO=n(gBe,"A",{href:!0});var r0t=s(fO);i7o=r(r0t,"Data2VecAudioModel"),r0t.forEach(t),d7o=r(gBe," (Data2VecAudio model)"),gBe.forEach(t),c7o=i(x),d_=n(x,"LI",{});var hBe=s(d_);zhe=n(hBe,"STRONG",{});var t0t=s(zhe);m7o=r(t0t,"data2vec-text"),t0t.forEach(t),f7o=r(hBe," \u2014 "),gO=n(hBe,"A",{href:!0});var a0t=s(gO);g7o=r(a0t,"Data2VecTextModel"),a0t.forEach(t),h7o=r(hBe," (Data2VecText model)"),hBe.forEach(t),u7o=i(x),c_=n(x,"LI",{});var uBe=s(c_);Qhe=n(uBe,"STRONG",{});var n0t=s(Qhe);p7o=r(n0t,"data2vec-vision"),n0t.forEach(t),_7o=r(uBe," \u2014 "),hO=n(uBe,"A",{href:!0});var s0t=s(hO);b7o=r(s0t,"Data2VecVisionModel"),s0t.forEach(t),v7o=r(uBe," (Data2VecVision model)"),uBe.forEach(t),F7o=i(x),m_=n(x,"LI",{});var pBe=s(m_);Whe=n(pBe,"STRONG",{});var l0t=s(Whe);T7o=r(l0t,"deberta"),l0t.forEach(t),M7o=r(pBe," \u2014 "),uO=n(pBe,"A",{href:!0});var i0t=s(uO);E7o=r(i0t,"DebertaModel"),i0t.forEach(t),C7o=r(pBe," (DeBERTa model)"),pBe.forEach(t),w7o=i(x),f_=n(x,"LI",{});var _Be=s(f_);Uhe=n(_Be,"STRONG",{});var d0t=s(Uhe);A7o=r(d0t,"deberta-v2"),d0t.forEach(t),L7o=r(_Be," \u2014 "),pO=n(_Be,"A",{href:!0});var c0t=s(pO);y7o=r(c0t,"DebertaV2Model"),c0t.forEach(t),x7o=r(_Be," (DeBERTa-v2 model)"),_Be.forEach(t),$7o=i(x),g_=n(x,"LI",{});var bBe=s(g_);Hhe=n(bBe,"STRONG",{});var m0t=s(Hhe);k7o=r(m0t,"decision_transformer"),m0t.forEach(t),S7o=r(bBe," \u2014 "),_O=n(bBe,"A",{href:!0});var f0t=s(_O);R7o=r(f0t,"DecisionTransformerModel"),f0t.forEach(t),P7o=r(bBe," (Decision Transformer model)"),bBe.forEach(t),B7o=i(x),h_=n(x,"LI",{});var vBe=s(h_);Jhe=n(vBe,"STRONG",{});var g0t=s(Jhe);I7o=r(g0t,"deit"),g0t.forEach(t),N7o=r(vBe," \u2014 "),bO=n(vBe,"A",{href:!0});var h0t=s(bO);q7o=r(h0t,"DeiTModel"),h0t.forEach(t),j7o=r(vBe," (DeiT model)"),vBe.forEach(t),D7o=i(x),u_=n(x,"LI",{});var FBe=s(u_);Yhe=n(FBe,"STRONG",{});var u0t=s(Yhe);G7o=r(u0t,"detr"),u0t.forEach(t),O7o=r(FBe," \u2014 "),vO=n(FBe,"A",{href:!0});var p0t=s(vO);V7o=r(p0t,"DetrModel"),p0t.forEach(t),X7o=r(FBe," (DETR model)"),FBe.forEach(t),z7o=i(x),p_=n(x,"LI",{});var TBe=s(p_);Khe=n(TBe,"STRONG",{});var _0t=s(Khe);Q7o=r(_0t,"distilbert"),_0t.forEach(t),W7o=r(TBe," \u2014 "),FO=n(TBe,"A",{href:!0});var b0t=s(FO);U7o=r(b0t,"DistilBertModel"),b0t.forEach(t),H7o=r(TBe," (DistilBERT model)"),TBe.forEach(t),J7o=i(x),__=n(x,"LI",{});var MBe=s(__);Zhe=n(MBe,"STRONG",{});var v0t=s(Zhe);Y7o=r(v0t,"donut-swin"),v0t.forEach(t),K7o=r(MBe," \u2014 "),TO=n(MBe,"A",{href:!0});var F0t=s(TO);Z7o=r(F0t,"DonutSwinModel"),F0t.forEach(t),eLo=r(MBe," (DonutSwin model)"),MBe.forEach(t),oLo=i(x),b_=n(x,"LI",{});var EBe=s(b_);eue=n(EBe,"STRONG",{});var T0t=s(eue);rLo=r(T0t,"dpr"),T0t.forEach(t),tLo=r(EBe," \u2014 "),MO=n(EBe,"A",{href:!0});var M0t=s(MO);aLo=r(M0t,"DPRQuestionEncoder"),M0t.forEach(t),nLo=r(EBe," (DPR model)"),EBe.forEach(t),sLo=i(x),v_=n(x,"LI",{});var CBe=s(v_);oue=n(CBe,"STRONG",{});var E0t=s(oue);lLo=r(E0t,"dpt"),E0t.forEach(t),iLo=r(CBe," \u2014 "),EO=n(CBe,"A",{href:!0});var C0t=s(EO);dLo=r(C0t,"DPTModel"),C0t.forEach(t),cLo=r(CBe," (DPT model)"),CBe.forEach(t),mLo=i(x),F_=n(x,"LI",{});var wBe=s(F_);rue=n(wBe,"STRONG",{});var w0t=s(rue);fLo=r(w0t,"electra"),w0t.forEach(t),gLo=r(wBe," \u2014 "),CO=n(wBe,"A",{href:!0});var A0t=s(CO);hLo=r(A0t,"ElectraModel"),A0t.forEach(t),uLo=r(wBe," (ELECTRA model)"),wBe.forEach(t),pLo=i(x),T_=n(x,"LI",{});var ABe=s(T_);tue=n(ABe,"STRONG",{});var L0t=s(tue);_Lo=r(L0t,"flaubert"),L0t.forEach(t),bLo=r(ABe," \u2014 "),wO=n(ABe,"A",{href:!0});var y0t=s(wO);vLo=r(y0t,"FlaubertModel"),y0t.forEach(t),FLo=r(ABe," (FlauBERT model)"),ABe.forEach(t),TLo=i(x),M_=n(x,"LI",{});var LBe=s(M_);aue=n(LBe,"STRONG",{});var x0t=s(aue);MLo=r(x0t,"flava"),x0t.forEach(t),ELo=r(LBe," \u2014 "),AO=n(LBe,"A",{href:!0});var $0t=s(AO);CLo=r($0t,"FlavaModel"),$0t.forEach(t),wLo=r(LBe," (FLAVA model)"),LBe.forEach(t),ALo=i(x),E_=n(x,"LI",{});var yBe=s(E_);nue=n(yBe,"STRONG",{});var k0t=s(nue);LLo=r(k0t,"fnet"),k0t.forEach(t),yLo=r(yBe," \u2014 "),LO=n(yBe,"A",{href:!0});var S0t=s(LO);xLo=r(S0t,"FNetModel"),S0t.forEach(t),$Lo=r(yBe," (FNet model)"),yBe.forEach(t),kLo=i(x),C_=n(x,"LI",{});var xBe=s(C_);sue=n(xBe,"STRONG",{});var R0t=s(sue);SLo=r(R0t,"fsmt"),R0t.forEach(t),RLo=r(xBe," \u2014 "),yO=n(xBe,"A",{href:!0});var P0t=s(yO);PLo=r(P0t,"FSMTModel"),P0t.forEach(t),BLo=r(xBe," (FairSeq Machine-Translation model)"),xBe.forEach(t),ILo=i(x),ul=n(x,"LI",{});var lB=s(ul);lue=n(lB,"STRONG",{});var B0t=s(lue);NLo=r(B0t,"funnel"),B0t.forEach(t),qLo=r(lB," \u2014 "),xO=n(lB,"A",{href:!0});var I0t=s(xO);jLo=r(I0t,"FunnelModel"),I0t.forEach(t),DLo=r(lB," or "),$O=n(lB,"A",{href:!0});var N0t=s($O);GLo=r(N0t,"FunnelBaseModel"),N0t.forEach(t),OLo=r(lB," (Funnel Transformer model)"),lB.forEach(t),VLo=i(x),w_=n(x,"LI",{});var $Be=s(w_);iue=n($Be,"STRONG",{});var q0t=s(iue);XLo=r(q0t,"glpn"),q0t.forEach(t),zLo=r($Be," \u2014 "),kO=n($Be,"A",{href:!0});var j0t=s(kO);QLo=r(j0t,"GLPNModel"),j0t.forEach(t),WLo=r($Be," (GLPN model)"),$Be.forEach(t),ULo=i(x),A_=n(x,"LI",{});var kBe=s(A_);due=n(kBe,"STRONG",{});var D0t=s(due);HLo=r(D0t,"gpt2"),D0t.forEach(t),JLo=r(kBe," \u2014 "),SO=n(kBe,"A",{href:!0});var G0t=s(SO);YLo=r(G0t,"GPT2Model"),G0t.forEach(t),KLo=r(kBe," (OpenAI GPT-2 model)"),kBe.forEach(t),ZLo=i(x),L_=n(x,"LI",{});var SBe=s(L_);cue=n(SBe,"STRONG",{});var O0t=s(cue);eyo=r(O0t,"gpt_neo"),O0t.forEach(t),oyo=r(SBe," \u2014 "),RO=n(SBe,"A",{href:!0});var V0t=s(RO);ryo=r(V0t,"GPTNeoModel"),V0t.forEach(t),tyo=r(SBe," (GPT Neo model)"),SBe.forEach(t),ayo=i(x),y_=n(x,"LI",{});var RBe=s(y_);mue=n(RBe,"STRONG",{});var X0t=s(mue);nyo=r(X0t,"gpt_neox"),X0t.forEach(t),syo=r(RBe," \u2014 "),PO=n(RBe,"A",{href:!0});var z0t=s(PO);lyo=r(z0t,"GPTNeoXModel"),z0t.forEach(t),iyo=r(RBe," (GPT NeoX model)"),RBe.forEach(t),dyo=i(x),x_=n(x,"LI",{});var PBe=s(x_);fue=n(PBe,"STRONG",{});var Q0t=s(fue);cyo=r(Q0t,"gptj"),Q0t.forEach(t),myo=r(PBe," \u2014 "),BO=n(PBe,"A",{href:!0});var W0t=s(BO);fyo=r(W0t,"GPTJModel"),W0t.forEach(t),gyo=r(PBe," (GPT-J model)"),PBe.forEach(t),hyo=i(x),$_=n(x,"LI",{});var BBe=s($_);gue=n(BBe,"STRONG",{});var U0t=s(gue);uyo=r(U0t,"groupvit"),U0t.forEach(t),pyo=r(BBe," \u2014 "),IO=n(BBe,"A",{href:!0});var H0t=s(IO);_yo=r(H0t,"GroupViTModel"),H0t.forEach(t),byo=r(BBe," (GroupViT model)"),BBe.forEach(t),vyo=i(x),k_=n(x,"LI",{});var IBe=s(k_);hue=n(IBe,"STRONG",{});var J0t=s(hue);Fyo=r(J0t,"hubert"),J0t.forEach(t),Tyo=r(IBe," \u2014 "),NO=n(IBe,"A",{href:!0});var Y0t=s(NO);Myo=r(Y0t,"HubertModel"),Y0t.forEach(t),Eyo=r(IBe," (Hubert model)"),IBe.forEach(t),Cyo=i(x),S_=n(x,"LI",{});var NBe=s(S_);uue=n(NBe,"STRONG",{});var K0t=s(uue);wyo=r(K0t,"ibert"),K0t.forEach(t),Ayo=r(NBe," \u2014 "),qO=n(NBe,"A",{href:!0});var Z0t=s(qO);Lyo=r(Z0t,"IBertModel"),Z0t.forEach(t),yyo=r(NBe," (I-BERT model)"),NBe.forEach(t),xyo=i(x),R_=n(x,"LI",{});var qBe=s(R_);pue=n(qBe,"STRONG",{});var ewt=s(pue);$yo=r(ewt,"imagegpt"),ewt.forEach(t),kyo=r(qBe," \u2014 "),jO=n(qBe,"A",{href:!0});var owt=s(jO);Syo=r(owt,"ImageGPTModel"),owt.forEach(t),Ryo=r(qBe," (ImageGPT model)"),qBe.forEach(t),Pyo=i(x),P_=n(x,"LI",{});var jBe=s(P_);_ue=n(jBe,"STRONG",{});var rwt=s(_ue);Byo=r(rwt,"layoutlm"),rwt.forEach(t),Iyo=r(jBe," \u2014 "),DO=n(jBe,"A",{href:!0});var twt=s(DO);Nyo=r(twt,"LayoutLMModel"),twt.forEach(t),qyo=r(jBe," (LayoutLM model)"),jBe.forEach(t),jyo=i(x),B_=n(x,"LI",{});var DBe=s(B_);bue=n(DBe,"STRONG",{});var awt=s(bue);Dyo=r(awt,"layoutlmv2"),awt.forEach(t),Gyo=r(DBe," \u2014 "),GO=n(DBe,"A",{href:!0});var nwt=s(GO);Oyo=r(nwt,"LayoutLMv2Model"),nwt.forEach(t),Vyo=r(DBe," (LayoutLMv2 model)"),DBe.forEach(t),Xyo=i(x),I_=n(x,"LI",{});var GBe=s(I_);vue=n(GBe,"STRONG",{});var swt=s(vue);zyo=r(swt,"layoutlmv3"),swt.forEach(t),Qyo=r(GBe," \u2014 "),OO=n(GBe,"A",{href:!0});var lwt=s(OO);Wyo=r(lwt,"LayoutLMv3Model"),lwt.forEach(t),Uyo=r(GBe," (LayoutLMv3 model)"),GBe.forEach(t),Hyo=i(x),N_=n(x,"LI",{});var OBe=s(N_);Fue=n(OBe,"STRONG",{});var iwt=s(Fue);Jyo=r(iwt,"led"),iwt.forEach(t),Yyo=r(OBe," \u2014 "),VO=n(OBe,"A",{href:!0});var dwt=s(VO);Kyo=r(dwt,"LEDModel"),dwt.forEach(t),Zyo=r(OBe," (LED model)"),OBe.forEach(t),e8o=i(x),q_=n(x,"LI",{});var VBe=s(q_);Tue=n(VBe,"STRONG",{});var cwt=s(Tue);o8o=r(cwt,"levit"),cwt.forEach(t),r8o=r(VBe," \u2014 "),XO=n(VBe,"A",{href:!0});var mwt=s(XO);t8o=r(mwt,"LevitModel"),mwt.forEach(t),a8o=r(VBe," (LeViT model)"),VBe.forEach(t),n8o=i(x),j_=n(x,"LI",{});var XBe=s(j_);Mue=n(XBe,"STRONG",{});var fwt=s(Mue);s8o=r(fwt,"longformer"),fwt.forEach(t),l8o=r(XBe," \u2014 "),zO=n(XBe,"A",{href:!0});var gwt=s(zO);i8o=r(gwt,"LongformerModel"),gwt.forEach(t),d8o=r(XBe," (Longformer model)"),XBe.forEach(t),c8o=i(x),D_=n(x,"LI",{});var zBe=s(D_);Eue=n(zBe,"STRONG",{});var hwt=s(Eue);m8o=r(hwt,"longt5"),hwt.forEach(t),f8o=r(zBe," \u2014 "),QO=n(zBe,"A",{href:!0});var uwt=s(QO);g8o=r(uwt,"LongT5Model"),uwt.forEach(t),h8o=r(zBe," (LongT5 model)"),zBe.forEach(t),u8o=i(x),G_=n(x,"LI",{});var QBe=s(G_);Cue=n(QBe,"STRONG",{});var pwt=s(Cue);p8o=r(pwt,"luke"),pwt.forEach(t),_8o=r(QBe," \u2014 "),WO=n(QBe,"A",{href:!0});var _wt=s(WO);b8o=r(_wt,"LukeModel"),_wt.forEach(t),v8o=r(QBe," (LUKE model)"),QBe.forEach(t),F8o=i(x),O_=n(x,"LI",{});var WBe=s(O_);wue=n(WBe,"STRONG",{});var bwt=s(wue);T8o=r(bwt,"lxmert"),bwt.forEach(t),M8o=r(WBe," \u2014 "),UO=n(WBe,"A",{href:!0});var vwt=s(UO);E8o=r(vwt,"LxmertModel"),vwt.forEach(t),C8o=r(WBe," (LXMERT model)"),WBe.forEach(t),w8o=i(x),V_=n(x,"LI",{});var UBe=s(V_);Aue=n(UBe,"STRONG",{});var Fwt=s(Aue);A8o=r(Fwt,"m2m_100"),Fwt.forEach(t),L8o=r(UBe," \u2014 "),HO=n(UBe,"A",{href:!0});var Twt=s(HO);y8o=r(Twt,"M2M100Model"),Twt.forEach(t),x8o=r(UBe," (M2M100 model)"),UBe.forEach(t),$8o=i(x),X_=n(x,"LI",{});var HBe=s(X_);Lue=n(HBe,"STRONG",{});var Mwt=s(Lue);k8o=r(Mwt,"marian"),Mwt.forEach(t),S8o=r(HBe," \u2014 "),JO=n(HBe,"A",{href:!0});var Ewt=s(JO);R8o=r(Ewt,"MarianModel"),Ewt.forEach(t),P8o=r(HBe," (Marian model)"),HBe.forEach(t),B8o=i(x),z_=n(x,"LI",{});var JBe=s(z_);yue=n(JBe,"STRONG",{});var Cwt=s(yue);I8o=r(Cwt,"maskformer"),Cwt.forEach(t),N8o=r(JBe," \u2014 "),YO=n(JBe,"A",{href:!0});var wwt=s(YO);q8o=r(wwt,"MaskFormerModel"),wwt.forEach(t),j8o=r(JBe," (MaskFormer model)"),JBe.forEach(t),D8o=i(x),Q_=n(x,"LI",{});var YBe=s(Q_);xue=n(YBe,"STRONG",{});var Awt=s(xue);G8o=r(Awt,"mbart"),Awt.forEach(t),O8o=r(YBe," \u2014 "),KO=n(YBe,"A",{href:!0});var Lwt=s(KO);V8o=r(Lwt,"MBartModel"),Lwt.forEach(t),X8o=r(YBe," (mBART model)"),YBe.forEach(t),z8o=i(x),W_=n(x,"LI",{});var KBe=s(W_);$ue=n(KBe,"STRONG",{});var ywt=s($ue);Q8o=r(ywt,"mctct"),ywt.forEach(t),W8o=r(KBe," \u2014 "),ZO=n(KBe,"A",{href:!0});var xwt=s(ZO);U8o=r(xwt,"MCTCTModel"),xwt.forEach(t),H8o=r(KBe," (M-CTC-T model)"),KBe.forEach(t),J8o=i(x),U_=n(x,"LI",{});var ZBe=s(U_);kue=n(ZBe,"STRONG",{});var $wt=s(kue);Y8o=r($wt,"megatron-bert"),$wt.forEach(t),K8o=r(ZBe," \u2014 "),eV=n(ZBe,"A",{href:!0});var kwt=s(eV);Z8o=r(kwt,"MegatronBertModel"),kwt.forEach(t),e9o=r(ZBe," (Megatron-BERT model)"),ZBe.forEach(t),o9o=i(x),H_=n(x,"LI",{});var eIe=s(H_);Sue=n(eIe,"STRONG",{});var Swt=s(Sue);r9o=r(Swt,"mobilebert"),Swt.forEach(t),t9o=r(eIe," \u2014 "),oV=n(eIe,"A",{href:!0});var Rwt=s(oV);a9o=r(Rwt,"MobileBertModel"),Rwt.forEach(t),n9o=r(eIe," (MobileBERT model)"),eIe.forEach(t),s9o=i(x),J_=n(x,"LI",{});var oIe=s(J_);Rue=n(oIe,"STRONG",{});var Pwt=s(Rue);l9o=r(Pwt,"mobilevit"),Pwt.forEach(t),i9o=r(oIe," \u2014 "),rV=n(oIe,"A",{href:!0});var Bwt=s(rV);d9o=r(Bwt,"MobileViTModel"),Bwt.forEach(t),c9o=r(oIe," (MobileViT model)"),oIe.forEach(t),m9o=i(x),Y_=n(x,"LI",{});var rIe=s(Y_);Pue=n(rIe,"STRONG",{});var Iwt=s(Pue);f9o=r(Iwt,"mpnet"),Iwt.forEach(t),g9o=r(rIe," \u2014 "),tV=n(rIe,"A",{href:!0});var Nwt=s(tV);h9o=r(Nwt,"MPNetModel"),Nwt.forEach(t),u9o=r(rIe," (MPNet model)"),rIe.forEach(t),p9o=i(x),K_=n(x,"LI",{});var tIe=s(K_);Bue=n(tIe,"STRONG",{});var qwt=s(Bue);_9o=r(qwt,"mt5"),qwt.forEach(t),b9o=r(tIe," \u2014 "),aV=n(tIe,"A",{href:!0});var jwt=s(aV);v9o=r(jwt,"MT5Model"),jwt.forEach(t),F9o=r(tIe," (MT5 model)"),tIe.forEach(t),T9o=i(x),Z_=n(x,"LI",{});var aIe=s(Z_);Iue=n(aIe,"STRONG",{});var Dwt=s(Iue);M9o=r(Dwt,"mvp"),Dwt.forEach(t),E9o=r(aIe," \u2014 "),nV=n(aIe,"A",{href:!0});var Gwt=s(nV);C9o=r(Gwt,"MvpModel"),Gwt.forEach(t),w9o=r(aIe," (MVP model)"),aIe.forEach(t),A9o=i(x),eb=n(x,"LI",{});var nIe=s(eb);Nue=n(nIe,"STRONG",{});var Owt=s(Nue);L9o=r(Owt,"nezha"),Owt.forEach(t),y9o=r(nIe," \u2014 "),sV=n(nIe,"A",{href:!0});var Vwt=s(sV);x9o=r(Vwt,"NezhaModel"),Vwt.forEach(t),$9o=r(nIe," (Nezha model)"),nIe.forEach(t),k9o=i(x),ob=n(x,"LI",{});var sIe=s(ob);que=n(sIe,"STRONG",{});var Xwt=s(que);S9o=r(Xwt,"nllb"),Xwt.forEach(t),R9o=r(sIe," \u2014 "),lV=n(sIe,"A",{href:!0});var zwt=s(lV);P9o=r(zwt,"M2M100Model"),zwt.forEach(t),B9o=r(sIe," (NLLB model)"),sIe.forEach(t),I9o=i(x),rb=n(x,"LI",{});var lIe=s(rb);jue=n(lIe,"STRONG",{});var Qwt=s(jue);N9o=r(Qwt,"nystromformer"),Qwt.forEach(t),q9o=r(lIe," \u2014 "),iV=n(lIe,"A",{href:!0});var Wwt=s(iV);j9o=r(Wwt,"NystromformerModel"),Wwt.forEach(t),D9o=r(lIe," (Nystr\xF6mformer model)"),lIe.forEach(t),G9o=i(x),tb=n(x,"LI",{});var iIe=s(tb);Due=n(iIe,"STRONG",{});var Uwt=s(Due);O9o=r(Uwt,"openai-gpt"),Uwt.forEach(t),V9o=r(iIe," \u2014 "),dV=n(iIe,"A",{href:!0});var Hwt=s(dV);X9o=r(Hwt,"OpenAIGPTModel"),Hwt.forEach(t),z9o=r(iIe," (OpenAI GPT model)"),iIe.forEach(t),Q9o=i(x),ab=n(x,"LI",{});var dIe=s(ab);Gue=n(dIe,"STRONG",{});var Jwt=s(Gue);W9o=r(Jwt,"opt"),Jwt.forEach(t),U9o=r(dIe," \u2014 "),cV=n(dIe,"A",{href:!0});var Ywt=s(cV);H9o=r(Ywt,"OPTModel"),Ywt.forEach(t),J9o=r(dIe," (OPT model)"),dIe.forEach(t),Y9o=i(x),nb=n(x,"LI",{});var cIe=s(nb);Oue=n(cIe,"STRONG",{});var Kwt=s(Oue);K9o=r(Kwt,"owlvit"),Kwt.forEach(t),Z9o=r(cIe," \u2014 "),mV=n(cIe,"A",{href:!0});var Zwt=s(mV);exo=r(Zwt,"OwlViTModel"),Zwt.forEach(t),oxo=r(cIe," (OWL-ViT model)"),cIe.forEach(t),rxo=i(x),sb=n(x,"LI",{});var mIe=s(sb);Vue=n(mIe,"STRONG",{});var eAt=s(Vue);txo=r(eAt,"pegasus"),eAt.forEach(t),axo=r(mIe," \u2014 "),fV=n(mIe,"A",{href:!0});var oAt=s(fV);nxo=r(oAt,"PegasusModel"),oAt.forEach(t),sxo=r(mIe," (Pegasus model)"),mIe.forEach(t),lxo=i(x),lb=n(x,"LI",{});var fIe=s(lb);Xue=n(fIe,"STRONG",{});var rAt=s(Xue);ixo=r(rAt,"pegasus_x"),rAt.forEach(t),dxo=r(fIe," \u2014 "),gV=n(fIe,"A",{href:!0});var tAt=s(gV);cxo=r(tAt,"PegasusXModel"),tAt.forEach(t),mxo=r(fIe," (PEGASUS-X model)"),fIe.forEach(t),fxo=i(x),ib=n(x,"LI",{});var gIe=s(ib);zue=n(gIe,"STRONG",{});var aAt=s(zue);gxo=r(aAt,"perceiver"),aAt.forEach(t),hxo=r(gIe," \u2014 "),hV=n(gIe,"A",{href:!0});var nAt=s(hV);uxo=r(nAt,"PerceiverModel"),nAt.forEach(t),pxo=r(gIe," (Perceiver model)"),gIe.forEach(t),_xo=i(x),db=n(x,"LI",{});var hIe=s(db);Que=n(hIe,"STRONG",{});var sAt=s(Que);bxo=r(sAt,"plbart"),sAt.forEach(t),vxo=r(hIe," \u2014 "),uV=n(hIe,"A",{href:!0});var lAt=s(uV);Fxo=r(lAt,"PLBartModel"),lAt.forEach(t),Txo=r(hIe," (PLBart model)"),hIe.forEach(t),Mxo=i(x),cb=n(x,"LI",{});var uIe=s(cb);Wue=n(uIe,"STRONG",{});var iAt=s(Wue);Exo=r(iAt,"poolformer"),iAt.forEach(t),Cxo=r(uIe," \u2014 "),pV=n(uIe,"A",{href:!0});var dAt=s(pV);wxo=r(dAt,"PoolFormerModel"),dAt.forEach(t),Axo=r(uIe," (PoolFormer model)"),uIe.forEach(t),Lxo=i(x),mb=n(x,"LI",{});var pIe=s(mb);Uue=n(pIe,"STRONG",{});var cAt=s(Uue);yxo=r(cAt,"prophetnet"),cAt.forEach(t),xxo=r(pIe," \u2014 "),_V=n(pIe,"A",{href:!0});var mAt=s(_V);$xo=r(mAt,"ProphetNetModel"),mAt.forEach(t),kxo=r(pIe," (ProphetNet model)"),pIe.forEach(t),Sxo=i(x),fb=n(x,"LI",{});var _Ie=s(fb);Hue=n(_Ie,"STRONG",{});var fAt=s(Hue);Rxo=r(fAt,"qdqbert"),fAt.forEach(t),Pxo=r(_Ie," \u2014 "),bV=n(_Ie,"A",{href:!0});var gAt=s(bV);Bxo=r(gAt,"QDQBertModel"),gAt.forEach(t),Ixo=r(_Ie," (QDQBert model)"),_Ie.forEach(t),Nxo=i(x),gb=n(x,"LI",{});var bIe=s(gb);Jue=n(bIe,"STRONG",{});var hAt=s(Jue);qxo=r(hAt,"reformer"),hAt.forEach(t),jxo=r(bIe," \u2014 "),vV=n(bIe,"A",{href:!0});var uAt=s(vV);Dxo=r(uAt,"ReformerModel"),uAt.forEach(t),Gxo=r(bIe," (Reformer model)"),bIe.forEach(t),Oxo=i(x),hb=n(x,"LI",{});var vIe=s(hb);Yue=n(vIe,"STRONG",{});var pAt=s(Yue);Vxo=r(pAt,"regnet"),pAt.forEach(t),Xxo=r(vIe," \u2014 "),FV=n(vIe,"A",{href:!0});var _At=s(FV);zxo=r(_At,"RegNetModel"),_At.forEach(t),Qxo=r(vIe," (RegNet model)"),vIe.forEach(t),Wxo=i(x),ub=n(x,"LI",{});var FIe=s(ub);Kue=n(FIe,"STRONG",{});var bAt=s(Kue);Uxo=r(bAt,"rembert"),bAt.forEach(t),Hxo=r(FIe," \u2014 "),TV=n(FIe,"A",{href:!0});var vAt=s(TV);Jxo=r(vAt,"RemBertModel"),vAt.forEach(t),Yxo=r(FIe," (RemBERT model)"),FIe.forEach(t),Kxo=i(x),pb=n(x,"LI",{});var TIe=s(pb);Zue=n(TIe,"STRONG",{});var FAt=s(Zue);Zxo=r(FAt,"resnet"),FAt.forEach(t),e$o=r(TIe," \u2014 "),MV=n(TIe,"A",{href:!0});var TAt=s(MV);o$o=r(TAt,"ResNetModel"),TAt.forEach(t),r$o=r(TIe," (ResNet model)"),TIe.forEach(t),t$o=i(x),_b=n(x,"LI",{});var MIe=s(_b);epe=n(MIe,"STRONG",{});var MAt=s(epe);a$o=r(MAt,"retribert"),MAt.forEach(t),n$o=r(MIe," \u2014 "),EV=n(MIe,"A",{href:!0});var EAt=s(EV);s$o=r(EAt,"RetriBertModel"),EAt.forEach(t),l$o=r(MIe," (RetriBERT model)"),MIe.forEach(t),i$o=i(x),bb=n(x,"LI",{});var EIe=s(bb);ope=n(EIe,"STRONG",{});var CAt=s(ope);d$o=r(CAt,"roberta"),CAt.forEach(t),c$o=r(EIe," \u2014 "),CV=n(EIe,"A",{href:!0});var wAt=s(CV);m$o=r(wAt,"RobertaModel"),wAt.forEach(t),f$o=r(EIe," (RoBERTa model)"),EIe.forEach(t),g$o=i(x),vb=n(x,"LI",{});var CIe=s(vb);rpe=n(CIe,"STRONG",{});var AAt=s(rpe);h$o=r(AAt,"roformer"),AAt.forEach(t),u$o=r(CIe," \u2014 "),wV=n(CIe,"A",{href:!0});var LAt=s(wV);p$o=r(LAt,"RoFormerModel"),LAt.forEach(t),_$o=r(CIe," (RoFormer model)"),CIe.forEach(t),b$o=i(x),Fb=n(x,"LI",{});var wIe=s(Fb);tpe=n(wIe,"STRONG",{});var yAt=s(tpe);v$o=r(yAt,"segformer"),yAt.forEach(t),F$o=r(wIe," \u2014 "),AV=n(wIe,"A",{href:!0});var xAt=s(AV);T$o=r(xAt,"SegformerModel"),xAt.forEach(t),M$o=r(wIe," (SegFormer model)"),wIe.forEach(t),E$o=i(x),Tb=n(x,"LI",{});var AIe=s(Tb);ape=n(AIe,"STRONG",{});var $At=s(ape);C$o=r($At,"sew"),$At.forEach(t),w$o=r(AIe," \u2014 "),LV=n(AIe,"A",{href:!0});var kAt=s(LV);A$o=r(kAt,"SEWModel"),kAt.forEach(t),L$o=r(AIe," (SEW model)"),AIe.forEach(t),y$o=i(x),Mb=n(x,"LI",{});var LIe=s(Mb);npe=n(LIe,"STRONG",{});var SAt=s(npe);x$o=r(SAt,"sew-d"),SAt.forEach(t),$$o=r(LIe," \u2014 "),yV=n(LIe,"A",{href:!0});var RAt=s(yV);k$o=r(RAt,"SEWDModel"),RAt.forEach(t),S$o=r(LIe," (SEW-D model)"),LIe.forEach(t),R$o=i(x),Eb=n(x,"LI",{});var yIe=s(Eb);spe=n(yIe,"STRONG",{});var PAt=s(spe);P$o=r(PAt,"speech_to_text"),PAt.forEach(t),B$o=r(yIe," \u2014 "),xV=n(yIe,"A",{href:!0});var BAt=s(xV);I$o=r(BAt,"Speech2TextModel"),BAt.forEach(t),N$o=r(yIe," (Speech2Text model)"),yIe.forEach(t),q$o=i(x),Cb=n(x,"LI",{});var xIe=s(Cb);lpe=n(xIe,"STRONG",{});var IAt=s(lpe);j$o=r(IAt,"splinter"),IAt.forEach(t),D$o=r(xIe," \u2014 "),$V=n(xIe,"A",{href:!0});var NAt=s($V);G$o=r(NAt,"SplinterModel"),NAt.forEach(t),O$o=r(xIe," (Splinter model)"),xIe.forEach(t),V$o=i(x),wb=n(x,"LI",{});var $Ie=s(wb);ipe=n($Ie,"STRONG",{});var qAt=s(ipe);X$o=r(qAt,"squeezebert"),qAt.forEach(t),z$o=r($Ie," \u2014 "),kV=n($Ie,"A",{href:!0});var jAt=s(kV);Q$o=r(jAt,"SqueezeBertModel"),jAt.forEach(t),W$o=r($Ie," (SqueezeBERT model)"),$Ie.forEach(t),U$o=i(x),Ab=n(x,"LI",{});var kIe=s(Ab);dpe=n(kIe,"STRONG",{});var DAt=s(dpe);H$o=r(DAt,"swin"),DAt.forEach(t),J$o=r(kIe," \u2014 "),SV=n(kIe,"A",{href:!0});var GAt=s(SV);Y$o=r(GAt,"SwinModel"),GAt.forEach(t),K$o=r(kIe," (Swin Transformer model)"),kIe.forEach(t),Z$o=i(x),Lb=n(x,"LI",{});var SIe=s(Lb);cpe=n(SIe,"STRONG",{});var OAt=s(cpe);eko=r(OAt,"swinv2"),OAt.forEach(t),oko=r(SIe," \u2014 "),RV=n(SIe,"A",{href:!0});var VAt=s(RV);rko=r(VAt,"Swinv2Model"),VAt.forEach(t),tko=r(SIe," (Swin Transformer V2 model)"),SIe.forEach(t),ako=i(x),yb=n(x,"LI",{});var RIe=s(yb);mpe=n(RIe,"STRONG",{});var XAt=s(mpe);nko=r(XAt,"t5"),XAt.forEach(t),sko=r(RIe," \u2014 "),PV=n(RIe,"A",{href:!0});var zAt=s(PV);lko=r(zAt,"T5Model"),zAt.forEach(t),iko=r(RIe," (T5 model)"),RIe.forEach(t),dko=i(x),xb=n(x,"LI",{});var PIe=s(xb);fpe=n(PIe,"STRONG",{});var QAt=s(fpe);cko=r(QAt,"tapas"),QAt.forEach(t),mko=r(PIe," \u2014 "),BV=n(PIe,"A",{href:!0});var WAt=s(BV);fko=r(WAt,"TapasModel"),WAt.forEach(t),gko=r(PIe," (TAPAS model)"),PIe.forEach(t),hko=i(x),$b=n(x,"LI",{});var BIe=s($b);gpe=n(BIe,"STRONG",{});var UAt=s(gpe);uko=r(UAt,"trajectory_transformer"),UAt.forEach(t),pko=r(BIe," \u2014 "),IV=n(BIe,"A",{href:!0});var HAt=s(IV);_ko=r(HAt,"TrajectoryTransformerModel"),HAt.forEach(t),bko=r(BIe," (Trajectory Transformer model)"),BIe.forEach(t),vko=i(x),kb=n(x,"LI",{});var IIe=s(kb);hpe=n(IIe,"STRONG",{});var JAt=s(hpe);Fko=r(JAt,"transfo-xl"),JAt.forEach(t),Tko=r(IIe," \u2014 "),NV=n(IIe,"A",{href:!0});var YAt=s(NV);Mko=r(YAt,"TransfoXLModel"),YAt.forEach(t),Eko=r(IIe," (Transformer-XL model)"),IIe.forEach(t),Cko=i(x),Sb=n(x,"LI",{});var NIe=s(Sb);upe=n(NIe,"STRONG",{});var KAt=s(upe);wko=r(KAt,"unispeech"),KAt.forEach(t),Ako=r(NIe," \u2014 "),qV=n(NIe,"A",{href:!0});var ZAt=s(qV);Lko=r(ZAt,"UniSpeechModel"),ZAt.forEach(t),yko=r(NIe," (UniSpeech model)"),NIe.forEach(t),xko=i(x),Rb=n(x,"LI",{});var qIe=s(Rb);ppe=n(qIe,"STRONG",{});var e6t=s(ppe);$ko=r(e6t,"unispeech-sat"),e6t.forEach(t),kko=r(qIe," \u2014 "),jV=n(qIe,"A",{href:!0});var o6t=s(jV);Sko=r(o6t,"UniSpeechSatModel"),o6t.forEach(t),Rko=r(qIe," (UniSpeechSat model)"),qIe.forEach(t),Pko=i(x),Pb=n(x,"LI",{});var jIe=s(Pb);_pe=n(jIe,"STRONG",{});var r6t=s(_pe);Bko=r(r6t,"van"),r6t.forEach(t),Iko=r(jIe," \u2014 "),DV=n(jIe,"A",{href:!0});var t6t=s(DV);Nko=r(t6t,"VanModel"),t6t.forEach(t),qko=r(jIe," (VAN model)"),jIe.forEach(t),jko=i(x),Bb=n(x,"LI",{});var DIe=s(Bb);bpe=n(DIe,"STRONG",{});var a6t=s(bpe);Dko=r(a6t,"videomae"),a6t.forEach(t),Gko=r(DIe," \u2014 "),GV=n(DIe,"A",{href:!0});var n6t=s(GV);Oko=r(n6t,"VideoMAEModel"),n6t.forEach(t),Vko=r(DIe," (VideoMAE model)"),DIe.forEach(t),Xko=i(x),Ib=n(x,"LI",{});var GIe=s(Ib);vpe=n(GIe,"STRONG",{});var s6t=s(vpe);zko=r(s6t,"vilt"),s6t.forEach(t),Qko=r(GIe," \u2014 "),OV=n(GIe,"A",{href:!0});var l6t=s(OV);Wko=r(l6t,"ViltModel"),l6t.forEach(t),Uko=r(GIe," (ViLT model)"),GIe.forEach(t),Hko=i(x),Nb=n(x,"LI",{});var OIe=s(Nb);Fpe=n(OIe,"STRONG",{});var i6t=s(Fpe);Jko=r(i6t,"vision-text-dual-encoder"),i6t.forEach(t),Yko=r(OIe," \u2014 "),VV=n(OIe,"A",{href:!0});var d6t=s(VV);Kko=r(d6t,"VisionTextDualEncoderModel"),d6t.forEach(t),Zko=r(OIe," (VisionTextDualEncoder model)"),OIe.forEach(t),eSo=i(x),qb=n(x,"LI",{});var VIe=s(qb);Tpe=n(VIe,"STRONG",{});var c6t=s(Tpe);oSo=r(c6t,"visual_bert"),c6t.forEach(t),rSo=r(VIe," \u2014 "),XV=n(VIe,"A",{href:!0});var m6t=s(XV);tSo=r(m6t,"VisualBertModel"),m6t.forEach(t),aSo=r(VIe," (VisualBERT model)"),VIe.forEach(t),nSo=i(x),jb=n(x,"LI",{});var XIe=s(jb);Mpe=n(XIe,"STRONG",{});var f6t=s(Mpe);sSo=r(f6t,"vit"),f6t.forEach(t),lSo=r(XIe," \u2014 "),zV=n(XIe,"A",{href:!0});var g6t=s(zV);iSo=r(g6t,"ViTModel"),g6t.forEach(t),dSo=r(XIe," (ViT model)"),XIe.forEach(t),cSo=i(x),Db=n(x,"LI",{});var zIe=s(Db);Epe=n(zIe,"STRONG",{});var h6t=s(Epe);mSo=r(h6t,"vit_mae"),h6t.forEach(t),fSo=r(zIe," \u2014 "),QV=n(zIe,"A",{href:!0});var u6t=s(QV);gSo=r(u6t,"ViTMAEModel"),u6t.forEach(t),hSo=r(zIe," (ViTMAE model)"),zIe.forEach(t),uSo=i(x),Gb=n(x,"LI",{});var QIe=s(Gb);Cpe=n(QIe,"STRONG",{});var p6t=s(Cpe);pSo=r(p6t,"wav2vec2"),p6t.forEach(t),_So=r(QIe," \u2014 "),WV=n(QIe,"A",{href:!0});var _6t=s(WV);bSo=r(_6t,"Wav2Vec2Model"),_6t.forEach(t),vSo=r(QIe," (Wav2Vec2 model)"),QIe.forEach(t),FSo=i(x),Ob=n(x,"LI",{});var WIe=s(Ob);wpe=n(WIe,"STRONG",{});var b6t=s(wpe);TSo=r(b6t,"wav2vec2-conformer"),b6t.forEach(t),MSo=r(WIe," \u2014 "),UV=n(WIe,"A",{href:!0});var v6t=s(UV);ESo=r(v6t,"Wav2Vec2ConformerModel"),v6t.forEach(t),CSo=r(WIe," (Wav2Vec2-Conformer model)"),WIe.forEach(t),wSo=i(x),Vb=n(x,"LI",{});var UIe=s(Vb);Ape=n(UIe,"STRONG",{});var F6t=s(Ape);ASo=r(F6t,"wavlm"),F6t.forEach(t),LSo=r(UIe," \u2014 "),HV=n(UIe,"A",{href:!0});var T6t=s(HV);ySo=r(T6t,"WavLMModel"),T6t.forEach(t),xSo=r(UIe," (WavLM model)"),UIe.forEach(t),$So=i(x),Xb=n(x,"LI",{});var HIe=s(Xb);Lpe=n(HIe,"STRONG",{});var M6t=s(Lpe);kSo=r(M6t,"xclip"),M6t.forEach(t),SSo=r(HIe," \u2014 "),JV=n(HIe,"A",{href:!0});var E6t=s(JV);RSo=r(E6t,"XCLIPModel"),E6t.forEach(t),PSo=r(HIe," (X-CLIP model)"),HIe.forEach(t),BSo=i(x),zb=n(x,"LI",{});var JIe=s(zb);ype=n(JIe,"STRONG",{});var C6t=s(ype);ISo=r(C6t,"xglm"),C6t.forEach(t),NSo=r(JIe," \u2014 "),YV=n(JIe,"A",{href:!0});var w6t=s(YV);qSo=r(w6t,"XGLMModel"),w6t.forEach(t),jSo=r(JIe," (XGLM model)"),JIe.forEach(t),DSo=i(x),Qb=n(x,"LI",{});var YIe=s(Qb);xpe=n(YIe,"STRONG",{});var A6t=s(xpe);GSo=r(A6t,"xlm"),A6t.forEach(t),OSo=r(YIe," \u2014 "),KV=n(YIe,"A",{href:!0});var L6t=s(KV);VSo=r(L6t,"XLMModel"),L6t.forEach(t),XSo=r(YIe," (XLM model)"),YIe.forEach(t),zSo=i(x),Wb=n(x,"LI",{});var KIe=s(Wb);$pe=n(KIe,"STRONG",{});var y6t=s($pe);QSo=r(y6t,"xlm-prophetnet"),y6t.forEach(t),WSo=r(KIe," \u2014 "),ZV=n(KIe,"A",{href:!0});var x6t=s(ZV);USo=r(x6t,"XLMProphetNetModel"),x6t.forEach(t),HSo=r(KIe," (XLM-ProphetNet model)"),KIe.forEach(t),JSo=i(x),Ub=n(x,"LI",{});var ZIe=s(Ub);kpe=n(ZIe,"STRONG",{});var $6t=s(kpe);YSo=r($6t,"xlm-roberta"),$6t.forEach(t),KSo=r(ZIe," \u2014 "),eX=n(ZIe,"A",{href:!0});var k6t=s(eX);ZSo=r(k6t,"XLMRobertaModel"),k6t.forEach(t),eRo=r(ZIe," (XLM-RoBERTa model)"),ZIe.forEach(t),oRo=i(x),Hb=n(x,"LI",{});var eNe=s(Hb);Spe=n(eNe,"STRONG",{});var S6t=s(Spe);rRo=r(S6t,"xlm-roberta-xl"),S6t.forEach(t),tRo=r(eNe," \u2014 "),oX=n(eNe,"A",{href:!0});var R6t=s(oX);aRo=r(R6t,"XLMRobertaXLModel"),R6t.forEach(t),nRo=r(eNe," (XLM-RoBERTa-XL model)"),eNe.forEach(t),sRo=i(x),Jb=n(x,"LI",{});var oNe=s(Jb);Rpe=n(oNe,"STRONG",{});var P6t=s(Rpe);lRo=r(P6t,"xlnet"),P6t.forEach(t),iRo=r(oNe," \u2014 "),rX=n(oNe,"A",{href:!0});var B6t=s(rX);dRo=r(B6t,"XLNetModel"),B6t.forEach(t),cRo=r(oNe," (XLNet model)"),oNe.forEach(t),mRo=i(x),Yb=n(x,"LI",{});var rNe=s(Yb);Ppe=n(rNe,"STRONG",{});var I6t=s(Ppe);fRo=r(I6t,"yolos"),I6t.forEach(t),gRo=r(rNe," \u2014 "),tX=n(rNe,"A",{href:!0});var N6t=s(tX);hRo=r(N6t,"YolosModel"),N6t.forEach(t),uRo=r(rNe," (YOLOS model)"),rNe.forEach(t),pRo=i(x),Kb=n(x,"LI",{});var tNe=s(Kb);Bpe=n(tNe,"STRONG",{});var q6t=s(Bpe);_Ro=r(q6t,"yoso"),q6t.forEach(t),bRo=r(tNe," \u2014 "),aX=n(tNe,"A",{href:!0});var j6t=s(aX);vRo=r(j6t,"YosoModel"),j6t.forEach(t),FRo=r(tNe," (YOSO model)"),tNe.forEach(t),x.forEach(t),TRo=i(va),Zb=n(va,"P",{});var aNe=s(Zb);MRo=r(aNe,"The model is set in evaluation mode by default using "),Ipe=n(aNe,"CODE",{});var D6t=s(Ipe);ERo=r(D6t,"model.eval()"),D6t.forEach(t),CRo=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(aNe,"CODE",{});var G6t=s(Npe);wRo=r(G6t,"model.train()"),G6t.forEach(t),aNe.forEach(t),ARo=i(va),T(e2.$$.fragment,va),va.forEach(t),Cl.forEach(t),oYe=i(m),bd=n(m,"H2",{class:!0});var uZe=s(bd);o2=n(uZe,"A",{id:!0,class:!0,href:!0});var O6t=s(o2);qpe=n(O6t,"SPAN",{});var V6t=s(qpe);T(V9.$$.fragment,V6t),V6t.forEach(t),O6t.forEach(t),LRo=i(uZe),jpe=n(uZe,"SPAN",{});var X6t=s(jpe);yRo=r(X6t,"AutoModelForPreTraining"),X6t.forEach(t),uZe.forEach(t),rYe=i(m),Po=n(m,"DIV",{class:!0});var wl=s(Po);T(X9.$$.fragment,wl),xRo=i(wl),vd=n(wl,"P",{});var wse=s(vd);$Ro=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nX=n(wse,"A",{href:!0});var z6t=s(nX);kRo=r(z6t,"from_pretrained()"),z6t.forEach(t),SRo=r(wse," class method or the "),sX=n(wse,"A",{href:!0});var Q6t=s(sX);RRo=r(Q6t,"from_config()"),Q6t.forEach(t),PRo=r(wse,` class
method.`),wse.forEach(t),BRo=i(wl),z9=n(wl,"P",{});var pZe=s(z9);IRo=r(pZe,"This class cannot be instantiated directly using "),Dpe=n(pZe,"CODE",{});var W6t=s(Dpe);NRo=r(W6t,"__init__()"),W6t.forEach(t),qRo=r(pZe," (throws an error)."),pZe.forEach(t),jRo=i(wl),_t=n(wl,"DIV",{class:!0});var dy=s(_t);T(Q9.$$.fragment,dy),DRo=i(dy),Gpe=n(dy,"P",{});var U6t=s(Gpe);GRo=r(U6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U6t.forEach(t),ORo=i(dy),Fd=n(dy,"P",{});var Ase=s(Fd);VRo=r(Ase,`Note:
Loading a model from its configuration file does `),Ope=n(Ase,"STRONG",{});var H6t=s(Ope);XRo=r(H6t,"not"),H6t.forEach(t),zRo=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(Ase,"A",{href:!0});var J6t=s(lX);QRo=r(J6t,"from_pretrained()"),J6t.forEach(t),WRo=r(Ase," to load the model weights."),Ase.forEach(t),URo=i(dy),T(r2.$$.fragment,dy),dy.forEach(t),HRo=i(wl),Ze=n(wl,"DIV",{class:!0});var Fa=s(Ze);T(W9.$$.fragment,Fa),JRo=i(Fa),Vpe=n(Fa,"P",{});var Y6t=s(Vpe);YRo=r(Y6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y6t.forEach(t),KRo=i(Fa),Ya=n(Fa,"P",{});var cy=s(Ya);ZRo=r(cy,"The model class to instantiate is selected based on the "),Xpe=n(cy,"CODE",{});var K6t=s(Xpe);ePo=r(K6t,"model_type"),K6t.forEach(t),oPo=r(cy,` property of the config object (either
passed as an argument or loaded from `),zpe=n(cy,"CODE",{});var Z6t=s(zpe);rPo=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),tPo=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(cy,"CODE",{});var e7t=s(Qpe);aPo=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),nPo=r(cy,":"),cy.forEach(t),sPo=i(Fa),G=n(Fa,"UL",{});var O=s(G);t2=n(O,"LI",{});var nNe=s(t2);Wpe=n(nNe,"STRONG",{});var o7t=s(Wpe);lPo=r(o7t,"albert"),o7t.forEach(t),iPo=r(nNe," \u2014 "),iX=n(nNe,"A",{href:!0});var r7t=s(iX);dPo=r(r7t,"AlbertForPreTraining"),r7t.forEach(t),cPo=r(nNe," (ALBERT model)"),nNe.forEach(t),mPo=i(O),a2=n(O,"LI",{});var sNe=s(a2);Upe=n(sNe,"STRONG",{});var t7t=s(Upe);fPo=r(t7t,"bart"),t7t.forEach(t),gPo=r(sNe," \u2014 "),dX=n(sNe,"A",{href:!0});var a7t=s(dX);hPo=r(a7t,"BartForConditionalGeneration"),a7t.forEach(t),uPo=r(sNe," (BART model)"),sNe.forEach(t),pPo=i(O),n2=n(O,"LI",{});var lNe=s(n2);Hpe=n(lNe,"STRONG",{});var n7t=s(Hpe);_Po=r(n7t,"bert"),n7t.forEach(t),bPo=r(lNe," \u2014 "),cX=n(lNe,"A",{href:!0});var s7t=s(cX);vPo=r(s7t,"BertForPreTraining"),s7t.forEach(t),FPo=r(lNe," (BERT model)"),lNe.forEach(t),TPo=i(O),s2=n(O,"LI",{});var iNe=s(s2);Jpe=n(iNe,"STRONG",{});var l7t=s(Jpe);MPo=r(l7t,"big_bird"),l7t.forEach(t),EPo=r(iNe," \u2014 "),mX=n(iNe,"A",{href:!0});var i7t=s(mX);CPo=r(i7t,"BigBirdForPreTraining"),i7t.forEach(t),wPo=r(iNe," (BigBird model)"),iNe.forEach(t),APo=i(O),l2=n(O,"LI",{});var dNe=s(l2);Ype=n(dNe,"STRONG",{});var d7t=s(Ype);LPo=r(d7t,"bloom"),d7t.forEach(t),yPo=r(dNe," \u2014 "),fX=n(dNe,"A",{href:!0});var c7t=s(fX);xPo=r(c7t,"BloomForCausalLM"),c7t.forEach(t),$Po=r(dNe," (BLOOM model)"),dNe.forEach(t),kPo=i(O),i2=n(O,"LI",{});var cNe=s(i2);Kpe=n(cNe,"STRONG",{});var m7t=s(Kpe);SPo=r(m7t,"camembert"),m7t.forEach(t),RPo=r(cNe," \u2014 "),gX=n(cNe,"A",{href:!0});var f7t=s(gX);PPo=r(f7t,"CamembertForMaskedLM"),f7t.forEach(t),BPo=r(cNe," (CamemBERT model)"),cNe.forEach(t),IPo=i(O),d2=n(O,"LI",{});var mNe=s(d2);Zpe=n(mNe,"STRONG",{});var g7t=s(Zpe);NPo=r(g7t,"ctrl"),g7t.forEach(t),qPo=r(mNe," \u2014 "),hX=n(mNe,"A",{href:!0});var h7t=s(hX);jPo=r(h7t,"CTRLLMHeadModel"),h7t.forEach(t),DPo=r(mNe," (CTRL model)"),mNe.forEach(t),GPo=i(O),c2=n(O,"LI",{});var fNe=s(c2);e_e=n(fNe,"STRONG",{});var u7t=s(e_e);OPo=r(u7t,"data2vec-text"),u7t.forEach(t),VPo=r(fNe," \u2014 "),uX=n(fNe,"A",{href:!0});var p7t=s(uX);XPo=r(p7t,"Data2VecTextForMaskedLM"),p7t.forEach(t),zPo=r(fNe," (Data2VecText model)"),fNe.forEach(t),QPo=i(O),m2=n(O,"LI",{});var gNe=s(m2);o_e=n(gNe,"STRONG",{});var _7t=s(o_e);WPo=r(_7t,"deberta"),_7t.forEach(t),UPo=r(gNe," \u2014 "),pX=n(gNe,"A",{href:!0});var b7t=s(pX);HPo=r(b7t,"DebertaForMaskedLM"),b7t.forEach(t),JPo=r(gNe," (DeBERTa model)"),gNe.forEach(t),YPo=i(O),f2=n(O,"LI",{});var hNe=s(f2);r_e=n(hNe,"STRONG",{});var v7t=s(r_e);KPo=r(v7t,"deberta-v2"),v7t.forEach(t),ZPo=r(hNe," \u2014 "),_X=n(hNe,"A",{href:!0});var F7t=s(_X);eBo=r(F7t,"DebertaV2ForMaskedLM"),F7t.forEach(t),oBo=r(hNe," (DeBERTa-v2 model)"),hNe.forEach(t),rBo=i(O),g2=n(O,"LI",{});var uNe=s(g2);t_e=n(uNe,"STRONG",{});var T7t=s(t_e);tBo=r(T7t,"distilbert"),T7t.forEach(t),aBo=r(uNe," \u2014 "),bX=n(uNe,"A",{href:!0});var M7t=s(bX);nBo=r(M7t,"DistilBertForMaskedLM"),M7t.forEach(t),sBo=r(uNe," (DistilBERT model)"),uNe.forEach(t),lBo=i(O),h2=n(O,"LI",{});var pNe=s(h2);a_e=n(pNe,"STRONG",{});var E7t=s(a_e);iBo=r(E7t,"electra"),E7t.forEach(t),dBo=r(pNe," \u2014 "),vX=n(pNe,"A",{href:!0});var C7t=s(vX);cBo=r(C7t,"ElectraForPreTraining"),C7t.forEach(t),mBo=r(pNe," (ELECTRA model)"),pNe.forEach(t),fBo=i(O),u2=n(O,"LI",{});var _Ne=s(u2);n_e=n(_Ne,"STRONG",{});var w7t=s(n_e);gBo=r(w7t,"flaubert"),w7t.forEach(t),hBo=r(_Ne," \u2014 "),FX=n(_Ne,"A",{href:!0});var A7t=s(FX);uBo=r(A7t,"FlaubertWithLMHeadModel"),A7t.forEach(t),pBo=r(_Ne," (FlauBERT model)"),_Ne.forEach(t),_Bo=i(O),p2=n(O,"LI",{});var bNe=s(p2);s_e=n(bNe,"STRONG",{});var L7t=s(s_e);bBo=r(L7t,"flava"),L7t.forEach(t),vBo=r(bNe," \u2014 "),TX=n(bNe,"A",{href:!0});var y7t=s(TX);FBo=r(y7t,"FlavaForPreTraining"),y7t.forEach(t),TBo=r(bNe," (FLAVA model)"),bNe.forEach(t),MBo=i(O),_2=n(O,"LI",{});var vNe=s(_2);l_e=n(vNe,"STRONG",{});var x7t=s(l_e);EBo=r(x7t,"fnet"),x7t.forEach(t),CBo=r(vNe," \u2014 "),MX=n(vNe,"A",{href:!0});var $7t=s(MX);wBo=r($7t,"FNetForPreTraining"),$7t.forEach(t),ABo=r(vNe," (FNet model)"),vNe.forEach(t),LBo=i(O),b2=n(O,"LI",{});var FNe=s(b2);i_e=n(FNe,"STRONG",{});var k7t=s(i_e);yBo=r(k7t,"fsmt"),k7t.forEach(t),xBo=r(FNe," \u2014 "),EX=n(FNe,"A",{href:!0});var S7t=s(EX);$Bo=r(S7t,"FSMTForConditionalGeneration"),S7t.forEach(t),kBo=r(FNe," (FairSeq Machine-Translation model)"),FNe.forEach(t),SBo=i(O),v2=n(O,"LI",{});var TNe=s(v2);d_e=n(TNe,"STRONG",{});var R7t=s(d_e);RBo=r(R7t,"funnel"),R7t.forEach(t),PBo=r(TNe," \u2014 "),CX=n(TNe,"A",{href:!0});var P7t=s(CX);BBo=r(P7t,"FunnelForPreTraining"),P7t.forEach(t),IBo=r(TNe," (Funnel Transformer model)"),TNe.forEach(t),NBo=i(O),F2=n(O,"LI",{});var MNe=s(F2);c_e=n(MNe,"STRONG",{});var B7t=s(c_e);qBo=r(B7t,"gpt2"),B7t.forEach(t),jBo=r(MNe," \u2014 "),wX=n(MNe,"A",{href:!0});var I7t=s(wX);DBo=r(I7t,"GPT2LMHeadModel"),I7t.forEach(t),GBo=r(MNe," (OpenAI GPT-2 model)"),MNe.forEach(t),OBo=i(O),T2=n(O,"LI",{});var ENe=s(T2);m_e=n(ENe,"STRONG",{});var N7t=s(m_e);VBo=r(N7t,"ibert"),N7t.forEach(t),XBo=r(ENe," \u2014 "),AX=n(ENe,"A",{href:!0});var q7t=s(AX);zBo=r(q7t,"IBertForMaskedLM"),q7t.forEach(t),QBo=r(ENe," (I-BERT model)"),ENe.forEach(t),WBo=i(O),M2=n(O,"LI",{});var CNe=s(M2);f_e=n(CNe,"STRONG",{});var j7t=s(f_e);UBo=r(j7t,"layoutlm"),j7t.forEach(t),HBo=r(CNe," \u2014 "),LX=n(CNe,"A",{href:!0});var D7t=s(LX);JBo=r(D7t,"LayoutLMForMaskedLM"),D7t.forEach(t),YBo=r(CNe," (LayoutLM model)"),CNe.forEach(t),KBo=i(O),E2=n(O,"LI",{});var wNe=s(E2);g_e=n(wNe,"STRONG",{});var G7t=s(g_e);ZBo=r(G7t,"longformer"),G7t.forEach(t),eIo=r(wNe," \u2014 "),yX=n(wNe,"A",{href:!0});var O7t=s(yX);oIo=r(O7t,"LongformerForMaskedLM"),O7t.forEach(t),rIo=r(wNe," (Longformer model)"),wNe.forEach(t),tIo=i(O),C2=n(O,"LI",{});var ANe=s(C2);h_e=n(ANe,"STRONG",{});var V7t=s(h_e);aIo=r(V7t,"luke"),V7t.forEach(t),nIo=r(ANe," \u2014 "),xX=n(ANe,"A",{href:!0});var X7t=s(xX);sIo=r(X7t,"LukeForMaskedLM"),X7t.forEach(t),lIo=r(ANe," (LUKE model)"),ANe.forEach(t),iIo=i(O),w2=n(O,"LI",{});var LNe=s(w2);u_e=n(LNe,"STRONG",{});var z7t=s(u_e);dIo=r(z7t,"lxmert"),z7t.forEach(t),cIo=r(LNe," \u2014 "),$X=n(LNe,"A",{href:!0});var Q7t=s($X);mIo=r(Q7t,"LxmertForPreTraining"),Q7t.forEach(t),fIo=r(LNe," (LXMERT model)"),LNe.forEach(t),gIo=i(O),A2=n(O,"LI",{});var yNe=s(A2);p_e=n(yNe,"STRONG",{});var W7t=s(p_e);hIo=r(W7t,"megatron-bert"),W7t.forEach(t),uIo=r(yNe," \u2014 "),kX=n(yNe,"A",{href:!0});var U7t=s(kX);pIo=r(U7t,"MegatronBertForPreTraining"),U7t.forEach(t),_Io=r(yNe," (Megatron-BERT model)"),yNe.forEach(t),bIo=i(O),L2=n(O,"LI",{});var xNe=s(L2);__e=n(xNe,"STRONG",{});var H7t=s(__e);vIo=r(H7t,"mobilebert"),H7t.forEach(t),FIo=r(xNe," \u2014 "),SX=n(xNe,"A",{href:!0});var J7t=s(SX);TIo=r(J7t,"MobileBertForPreTraining"),J7t.forEach(t),MIo=r(xNe," (MobileBERT model)"),xNe.forEach(t),EIo=i(O),y2=n(O,"LI",{});var $Ne=s(y2);b_e=n($Ne,"STRONG",{});var Y7t=s(b_e);CIo=r(Y7t,"mpnet"),Y7t.forEach(t),wIo=r($Ne," \u2014 "),RX=n($Ne,"A",{href:!0});var K7t=s(RX);AIo=r(K7t,"MPNetForMaskedLM"),K7t.forEach(t),LIo=r($Ne," (MPNet model)"),$Ne.forEach(t),yIo=i(O),x2=n(O,"LI",{});var kNe=s(x2);v_e=n(kNe,"STRONG",{});var Z7t=s(v_e);xIo=r(Z7t,"mvp"),Z7t.forEach(t),$Io=r(kNe," \u2014 "),PX=n(kNe,"A",{href:!0});var eLt=s(PX);kIo=r(eLt,"MvpForConditionalGeneration"),eLt.forEach(t),SIo=r(kNe," (MVP model)"),kNe.forEach(t),RIo=i(O),$2=n(O,"LI",{});var SNe=s($2);F_e=n(SNe,"STRONG",{});var oLt=s(F_e);PIo=r(oLt,"nezha"),oLt.forEach(t),BIo=r(SNe," \u2014 "),BX=n(SNe,"A",{href:!0});var rLt=s(BX);IIo=r(rLt,"NezhaForPreTraining"),rLt.forEach(t),NIo=r(SNe," (Nezha model)"),SNe.forEach(t),qIo=i(O),k2=n(O,"LI",{});var RNe=s(k2);T_e=n(RNe,"STRONG",{});var tLt=s(T_e);jIo=r(tLt,"openai-gpt"),tLt.forEach(t),DIo=r(RNe," \u2014 "),IX=n(RNe,"A",{href:!0});var aLt=s(IX);GIo=r(aLt,"OpenAIGPTLMHeadModel"),aLt.forEach(t),OIo=r(RNe," (OpenAI GPT model)"),RNe.forEach(t),VIo=i(O),S2=n(O,"LI",{});var PNe=s(S2);M_e=n(PNe,"STRONG",{});var nLt=s(M_e);XIo=r(nLt,"retribert"),nLt.forEach(t),zIo=r(PNe," \u2014 "),NX=n(PNe,"A",{href:!0});var sLt=s(NX);QIo=r(sLt,"RetriBertModel"),sLt.forEach(t),WIo=r(PNe," (RetriBERT model)"),PNe.forEach(t),UIo=i(O),R2=n(O,"LI",{});var BNe=s(R2);E_e=n(BNe,"STRONG",{});var lLt=s(E_e);HIo=r(lLt,"roberta"),lLt.forEach(t),JIo=r(BNe," \u2014 "),qX=n(BNe,"A",{href:!0});var iLt=s(qX);YIo=r(iLt,"RobertaForMaskedLM"),iLt.forEach(t),KIo=r(BNe," (RoBERTa model)"),BNe.forEach(t),ZIo=i(O),P2=n(O,"LI",{});var INe=s(P2);C_e=n(INe,"STRONG",{});var dLt=s(C_e);eNo=r(dLt,"splinter"),dLt.forEach(t),oNo=r(INe," \u2014 "),jX=n(INe,"A",{href:!0});var cLt=s(jX);rNo=r(cLt,"SplinterForPreTraining"),cLt.forEach(t),tNo=r(INe," (Splinter model)"),INe.forEach(t),aNo=i(O),B2=n(O,"LI",{});var NNe=s(B2);w_e=n(NNe,"STRONG",{});var mLt=s(w_e);nNo=r(mLt,"squeezebert"),mLt.forEach(t),sNo=r(NNe," \u2014 "),DX=n(NNe,"A",{href:!0});var fLt=s(DX);lNo=r(fLt,"SqueezeBertForMaskedLM"),fLt.forEach(t),iNo=r(NNe," (SqueezeBERT model)"),NNe.forEach(t),dNo=i(O),I2=n(O,"LI",{});var qNe=s(I2);A_e=n(qNe,"STRONG",{});var gLt=s(A_e);cNo=r(gLt,"t5"),gLt.forEach(t),mNo=r(qNe," \u2014 "),GX=n(qNe,"A",{href:!0});var hLt=s(GX);fNo=r(hLt,"T5ForConditionalGeneration"),hLt.forEach(t),gNo=r(qNe," (T5 model)"),qNe.forEach(t),hNo=i(O),N2=n(O,"LI",{});var jNe=s(N2);L_e=n(jNe,"STRONG",{});var uLt=s(L_e);uNo=r(uLt,"tapas"),uLt.forEach(t),pNo=r(jNe," \u2014 "),OX=n(jNe,"A",{href:!0});var pLt=s(OX);_No=r(pLt,"TapasForMaskedLM"),pLt.forEach(t),bNo=r(jNe," (TAPAS model)"),jNe.forEach(t),vNo=i(O),q2=n(O,"LI",{});var DNe=s(q2);y_e=n(DNe,"STRONG",{});var _Lt=s(y_e);FNo=r(_Lt,"transfo-xl"),_Lt.forEach(t),TNo=r(DNe," \u2014 "),VX=n(DNe,"A",{href:!0});var bLt=s(VX);MNo=r(bLt,"TransfoXLLMHeadModel"),bLt.forEach(t),ENo=r(DNe," (Transformer-XL model)"),DNe.forEach(t),CNo=i(O),j2=n(O,"LI",{});var GNe=s(j2);x_e=n(GNe,"STRONG",{});var vLt=s(x_e);wNo=r(vLt,"unispeech"),vLt.forEach(t),ANo=r(GNe," \u2014 "),XX=n(GNe,"A",{href:!0});var FLt=s(XX);LNo=r(FLt,"UniSpeechForPreTraining"),FLt.forEach(t),yNo=r(GNe," (UniSpeech model)"),GNe.forEach(t),xNo=i(O),D2=n(O,"LI",{});var ONe=s(D2);$_e=n(ONe,"STRONG",{});var TLt=s($_e);$No=r(TLt,"unispeech-sat"),TLt.forEach(t),kNo=r(ONe," \u2014 "),zX=n(ONe,"A",{href:!0});var MLt=s(zX);SNo=r(MLt,"UniSpeechSatForPreTraining"),MLt.forEach(t),RNo=r(ONe," (UniSpeechSat model)"),ONe.forEach(t),PNo=i(O),G2=n(O,"LI",{});var VNe=s(G2);k_e=n(VNe,"STRONG",{});var ELt=s(k_e);BNo=r(ELt,"videomae"),ELt.forEach(t),INo=r(VNe," \u2014 "),QX=n(VNe,"A",{href:!0});var CLt=s(QX);NNo=r(CLt,"VideoMAEForPreTraining"),CLt.forEach(t),qNo=r(VNe," (VideoMAE model)"),VNe.forEach(t),jNo=i(O),O2=n(O,"LI",{});var XNe=s(O2);S_e=n(XNe,"STRONG",{});var wLt=s(S_e);DNo=r(wLt,"visual_bert"),wLt.forEach(t),GNo=r(XNe," \u2014 "),WX=n(XNe,"A",{href:!0});var ALt=s(WX);ONo=r(ALt,"VisualBertForPreTraining"),ALt.forEach(t),VNo=r(XNe," (VisualBERT model)"),XNe.forEach(t),XNo=i(O),V2=n(O,"LI",{});var zNe=s(V2);R_e=n(zNe,"STRONG",{});var LLt=s(R_e);zNo=r(LLt,"vit_mae"),LLt.forEach(t),QNo=r(zNe," \u2014 "),UX=n(zNe,"A",{href:!0});var yLt=s(UX);WNo=r(yLt,"ViTMAEForPreTraining"),yLt.forEach(t),UNo=r(zNe," (ViTMAE model)"),zNe.forEach(t),HNo=i(O),X2=n(O,"LI",{});var QNe=s(X2);P_e=n(QNe,"STRONG",{});var xLt=s(P_e);JNo=r(xLt,"wav2vec2"),xLt.forEach(t),YNo=r(QNe," \u2014 "),HX=n(QNe,"A",{href:!0});var $Lt=s(HX);KNo=r($Lt,"Wav2Vec2ForPreTraining"),$Lt.forEach(t),ZNo=r(QNe," (Wav2Vec2 model)"),QNe.forEach(t),eqo=i(O),z2=n(O,"LI",{});var WNe=s(z2);B_e=n(WNe,"STRONG",{});var kLt=s(B_e);oqo=r(kLt,"wav2vec2-conformer"),kLt.forEach(t),rqo=r(WNe," \u2014 "),JX=n(WNe,"A",{href:!0});var SLt=s(JX);tqo=r(SLt,"Wav2Vec2ConformerForPreTraining"),SLt.forEach(t),aqo=r(WNe," (Wav2Vec2-Conformer model)"),WNe.forEach(t),nqo=i(O),Q2=n(O,"LI",{});var UNe=s(Q2);I_e=n(UNe,"STRONG",{});var RLt=s(I_e);sqo=r(RLt,"xlm"),RLt.forEach(t),lqo=r(UNe," \u2014 "),YX=n(UNe,"A",{href:!0});var PLt=s(YX);iqo=r(PLt,"XLMWithLMHeadModel"),PLt.forEach(t),dqo=r(UNe," (XLM model)"),UNe.forEach(t),cqo=i(O),W2=n(O,"LI",{});var HNe=s(W2);N_e=n(HNe,"STRONG",{});var BLt=s(N_e);mqo=r(BLt,"xlm-roberta"),BLt.forEach(t),fqo=r(HNe," \u2014 "),KX=n(HNe,"A",{href:!0});var ILt=s(KX);gqo=r(ILt,"XLMRobertaForMaskedLM"),ILt.forEach(t),hqo=r(HNe," (XLM-RoBERTa model)"),HNe.forEach(t),uqo=i(O),U2=n(O,"LI",{});var JNe=s(U2);q_e=n(JNe,"STRONG",{});var NLt=s(q_e);pqo=r(NLt,"xlm-roberta-xl"),NLt.forEach(t),_qo=r(JNe," \u2014 "),ZX=n(JNe,"A",{href:!0});var qLt=s(ZX);bqo=r(qLt,"XLMRobertaXLForMaskedLM"),qLt.forEach(t),vqo=r(JNe," (XLM-RoBERTa-XL model)"),JNe.forEach(t),Fqo=i(O),H2=n(O,"LI",{});var YNe=s(H2);j_e=n(YNe,"STRONG",{});var jLt=s(j_e);Tqo=r(jLt,"xlnet"),jLt.forEach(t),Mqo=r(YNe," \u2014 "),ez=n(YNe,"A",{href:!0});var DLt=s(ez);Eqo=r(DLt,"XLNetLMHeadModel"),DLt.forEach(t),Cqo=r(YNe," (XLNet model)"),YNe.forEach(t),O.forEach(t),wqo=i(Fa),J2=n(Fa,"P",{});var KNe=s(J2);Aqo=r(KNe,"The model is set in evaluation mode by default using "),D_e=n(KNe,"CODE",{});var GLt=s(D_e);Lqo=r(GLt,"model.eval()"),GLt.forEach(t),yqo=r(KNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G_e=n(KNe,"CODE",{});var OLt=s(G_e);xqo=r(OLt,"model.train()"),OLt.forEach(t),KNe.forEach(t),$qo=i(Fa),T(Y2.$$.fragment,Fa),Fa.forEach(t),wl.forEach(t),tYe=i(m),Td=n(m,"H2",{class:!0});var _Ze=s(Td);K2=n(_Ze,"A",{id:!0,class:!0,href:!0});var VLt=s(K2);O_e=n(VLt,"SPAN",{});var XLt=s(O_e);T(U9.$$.fragment,XLt),XLt.forEach(t),VLt.forEach(t),kqo=i(_Ze),V_e=n(_Ze,"SPAN",{});var zLt=s(V_e);Sqo=r(zLt,"AutoModelForCausalLM"),zLt.forEach(t),_Ze.forEach(t),aYe=i(m),Bo=n(m,"DIV",{class:!0});var Al=s(Bo);T(H9.$$.fragment,Al),Rqo=i(Al),Md=n(Al,"P",{});var Lse=s(Md);Pqo=r(Lse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oz=n(Lse,"A",{href:!0});var QLt=s(oz);Bqo=r(QLt,"from_pretrained()"),QLt.forEach(t),Iqo=r(Lse," class method or the "),rz=n(Lse,"A",{href:!0});var WLt=s(rz);Nqo=r(WLt,"from_config()"),WLt.forEach(t),qqo=r(Lse,` class
method.`),Lse.forEach(t),jqo=i(Al),J9=n(Al,"P",{});var bZe=s(J9);Dqo=r(bZe,"This class cannot be instantiated directly using "),X_e=n(bZe,"CODE",{});var ULt=s(X_e);Gqo=r(ULt,"__init__()"),ULt.forEach(t),Oqo=r(bZe," (throws an error)."),bZe.forEach(t),Vqo=i(Al),bt=n(Al,"DIV",{class:!0});var my=s(bt);T(Y9.$$.fragment,my),Xqo=i(my),z_e=n(my,"P",{});var HLt=s(z_e);zqo=r(HLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HLt.forEach(t),Qqo=i(my),Ed=n(my,"P",{});var yse=s(Ed);Wqo=r(yse,`Note:
Loading a model from its configuration file does `),Q_e=n(yse,"STRONG",{});var JLt=s(Q_e);Uqo=r(JLt,"not"),JLt.forEach(t),Hqo=r(yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(yse,"A",{href:!0});var YLt=s(tz);Jqo=r(YLt,"from_pretrained()"),YLt.forEach(t),Yqo=r(yse," to load the model weights."),yse.forEach(t),Kqo=i(my),T(Z2.$$.fragment,my),my.forEach(t),Zqo=i(Al),eo=n(Al,"DIV",{class:!0});var Ta=s(eo);T(K9.$$.fragment,Ta),ejo=i(Ta),W_e=n(Ta,"P",{});var KLt=s(W_e);ojo=r(KLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KLt.forEach(t),rjo=i(Ta),Ka=n(Ta,"P",{});var fy=s(Ka);tjo=r(fy,"The model class to instantiate is selected based on the "),U_e=n(fy,"CODE",{});var ZLt=s(U_e);ajo=r(ZLt,"model_type"),ZLt.forEach(t),njo=r(fy,` property of the config object (either
passed as an argument or loaded from `),H_e=n(fy,"CODE",{});var eyt=s(H_e);sjo=r(eyt,"pretrained_model_name_or_path"),eyt.forEach(t),ljo=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(fy,"CODE",{});var oyt=s(J_e);ijo=r(oyt,"pretrained_model_name_or_path"),oyt.forEach(t),djo=r(fy,":"),fy.forEach(t),cjo=i(Ta),z=n(Ta,"UL",{});var W=s(z);ev=n(W,"LI",{});var ZNe=s(ev);Y_e=n(ZNe,"STRONG",{});var ryt=s(Y_e);mjo=r(ryt,"bart"),ryt.forEach(t),fjo=r(ZNe," \u2014 "),az=n(ZNe,"A",{href:!0});var tyt=s(az);gjo=r(tyt,"BartForCausalLM"),tyt.forEach(t),hjo=r(ZNe," (BART model)"),ZNe.forEach(t),ujo=i(W),ov=n(W,"LI",{});var eqe=s(ov);K_e=n(eqe,"STRONG",{});var ayt=s(K_e);pjo=r(ayt,"bert"),ayt.forEach(t),_jo=r(eqe," \u2014 "),nz=n(eqe,"A",{href:!0});var nyt=s(nz);bjo=r(nyt,"BertLMHeadModel"),nyt.forEach(t),vjo=r(eqe," (BERT model)"),eqe.forEach(t),Fjo=i(W),rv=n(W,"LI",{});var oqe=s(rv);Z_e=n(oqe,"STRONG",{});var syt=s(Z_e);Tjo=r(syt,"bert-generation"),syt.forEach(t),Mjo=r(oqe," \u2014 "),sz=n(oqe,"A",{href:!0});var lyt=s(sz);Ejo=r(lyt,"BertGenerationDecoder"),lyt.forEach(t),Cjo=r(oqe," (Bert Generation model)"),oqe.forEach(t),wjo=i(W),tv=n(W,"LI",{});var rqe=s(tv);ebe=n(rqe,"STRONG",{});var iyt=s(ebe);Ajo=r(iyt,"big_bird"),iyt.forEach(t),Ljo=r(rqe," \u2014 "),lz=n(rqe,"A",{href:!0});var dyt=s(lz);yjo=r(dyt,"BigBirdForCausalLM"),dyt.forEach(t),xjo=r(rqe," (BigBird model)"),rqe.forEach(t),$jo=i(W),av=n(W,"LI",{});var tqe=s(av);obe=n(tqe,"STRONG",{});var cyt=s(obe);kjo=r(cyt,"bigbird_pegasus"),cyt.forEach(t),Sjo=r(tqe," \u2014 "),iz=n(tqe,"A",{href:!0});var myt=s(iz);Rjo=r(myt,"BigBirdPegasusForCausalLM"),myt.forEach(t),Pjo=r(tqe," (BigBird-Pegasus model)"),tqe.forEach(t),Bjo=i(W),nv=n(W,"LI",{});var aqe=s(nv);rbe=n(aqe,"STRONG",{});var fyt=s(rbe);Ijo=r(fyt,"blenderbot"),fyt.forEach(t),Njo=r(aqe," \u2014 "),dz=n(aqe,"A",{href:!0});var gyt=s(dz);qjo=r(gyt,"BlenderbotForCausalLM"),gyt.forEach(t),jjo=r(aqe," (Blenderbot model)"),aqe.forEach(t),Djo=i(W),sv=n(W,"LI",{});var nqe=s(sv);tbe=n(nqe,"STRONG",{});var hyt=s(tbe);Gjo=r(hyt,"blenderbot-small"),hyt.forEach(t),Ojo=r(nqe," \u2014 "),cz=n(nqe,"A",{href:!0});var uyt=s(cz);Vjo=r(uyt,"BlenderbotSmallForCausalLM"),uyt.forEach(t),Xjo=r(nqe," (BlenderbotSmall model)"),nqe.forEach(t),zjo=i(W),lv=n(W,"LI",{});var sqe=s(lv);abe=n(sqe,"STRONG",{});var pyt=s(abe);Qjo=r(pyt,"bloom"),pyt.forEach(t),Wjo=r(sqe," \u2014 "),mz=n(sqe,"A",{href:!0});var _yt=s(mz);Ujo=r(_yt,"BloomForCausalLM"),_yt.forEach(t),Hjo=r(sqe," (BLOOM model)"),sqe.forEach(t),Jjo=i(W),iv=n(W,"LI",{});var lqe=s(iv);nbe=n(lqe,"STRONG",{});var byt=s(nbe);Yjo=r(byt,"camembert"),byt.forEach(t),Kjo=r(lqe," \u2014 "),fz=n(lqe,"A",{href:!0});var vyt=s(fz);Zjo=r(vyt,"CamembertForCausalLM"),vyt.forEach(t),eDo=r(lqe," (CamemBERT model)"),lqe.forEach(t),oDo=i(W),dv=n(W,"LI",{});var iqe=s(dv);sbe=n(iqe,"STRONG",{});var Fyt=s(sbe);rDo=r(Fyt,"codegen"),Fyt.forEach(t),tDo=r(iqe," \u2014 "),gz=n(iqe,"A",{href:!0});var Tyt=s(gz);aDo=r(Tyt,"CodeGenForCausalLM"),Tyt.forEach(t),nDo=r(iqe," (CodeGen model)"),iqe.forEach(t),sDo=i(W),cv=n(W,"LI",{});var dqe=s(cv);lbe=n(dqe,"STRONG",{});var Myt=s(lbe);lDo=r(Myt,"ctrl"),Myt.forEach(t),iDo=r(dqe," \u2014 "),hz=n(dqe,"A",{href:!0});var Eyt=s(hz);dDo=r(Eyt,"CTRLLMHeadModel"),Eyt.forEach(t),cDo=r(dqe," (CTRL model)"),dqe.forEach(t),mDo=i(W),mv=n(W,"LI",{});var cqe=s(mv);ibe=n(cqe,"STRONG",{});var Cyt=s(ibe);fDo=r(Cyt,"data2vec-text"),Cyt.forEach(t),gDo=r(cqe," \u2014 "),uz=n(cqe,"A",{href:!0});var wyt=s(uz);hDo=r(wyt,"Data2VecTextForCausalLM"),wyt.forEach(t),uDo=r(cqe," (Data2VecText model)"),cqe.forEach(t),pDo=i(W),fv=n(W,"LI",{});var mqe=s(fv);dbe=n(mqe,"STRONG",{});var Ayt=s(dbe);_Do=r(Ayt,"electra"),Ayt.forEach(t),bDo=r(mqe," \u2014 "),pz=n(mqe,"A",{href:!0});var Lyt=s(pz);vDo=r(Lyt,"ElectraForCausalLM"),Lyt.forEach(t),FDo=r(mqe," (ELECTRA model)"),mqe.forEach(t),TDo=i(W),gv=n(W,"LI",{});var fqe=s(gv);cbe=n(fqe,"STRONG",{});var yyt=s(cbe);MDo=r(yyt,"gpt2"),yyt.forEach(t),EDo=r(fqe," \u2014 "),_z=n(fqe,"A",{href:!0});var xyt=s(_z);CDo=r(xyt,"GPT2LMHeadModel"),xyt.forEach(t),wDo=r(fqe," (OpenAI GPT-2 model)"),fqe.forEach(t),ADo=i(W),hv=n(W,"LI",{});var gqe=s(hv);mbe=n(gqe,"STRONG",{});var $yt=s(mbe);LDo=r($yt,"gpt_neo"),$yt.forEach(t),yDo=r(gqe," \u2014 "),bz=n(gqe,"A",{href:!0});var kyt=s(bz);xDo=r(kyt,"GPTNeoForCausalLM"),kyt.forEach(t),$Do=r(gqe," (GPT Neo model)"),gqe.forEach(t),kDo=i(W),uv=n(W,"LI",{});var hqe=s(uv);fbe=n(hqe,"STRONG",{});var Syt=s(fbe);SDo=r(Syt,"gpt_neox"),Syt.forEach(t),RDo=r(hqe," \u2014 "),vz=n(hqe,"A",{href:!0});var Ryt=s(vz);PDo=r(Ryt,"GPTNeoXForCausalLM"),Ryt.forEach(t),BDo=r(hqe," (GPT NeoX model)"),hqe.forEach(t),IDo=i(W),pv=n(W,"LI",{});var uqe=s(pv);gbe=n(uqe,"STRONG",{});var Pyt=s(gbe);NDo=r(Pyt,"gptj"),Pyt.forEach(t),qDo=r(uqe," \u2014 "),Fz=n(uqe,"A",{href:!0});var Byt=s(Fz);jDo=r(Byt,"GPTJForCausalLM"),Byt.forEach(t),DDo=r(uqe," (GPT-J model)"),uqe.forEach(t),GDo=i(W),_v=n(W,"LI",{});var pqe=s(_v);hbe=n(pqe,"STRONG",{});var Iyt=s(hbe);ODo=r(Iyt,"marian"),Iyt.forEach(t),VDo=r(pqe," \u2014 "),Tz=n(pqe,"A",{href:!0});var Nyt=s(Tz);XDo=r(Nyt,"MarianForCausalLM"),Nyt.forEach(t),zDo=r(pqe," (Marian model)"),pqe.forEach(t),QDo=i(W),bv=n(W,"LI",{});var _qe=s(bv);ube=n(_qe,"STRONG",{});var qyt=s(ube);WDo=r(qyt,"mbart"),qyt.forEach(t),UDo=r(_qe," \u2014 "),Mz=n(_qe,"A",{href:!0});var jyt=s(Mz);HDo=r(jyt,"MBartForCausalLM"),jyt.forEach(t),JDo=r(_qe," (mBART model)"),_qe.forEach(t),YDo=i(W),vv=n(W,"LI",{});var bqe=s(vv);pbe=n(bqe,"STRONG",{});var Dyt=s(pbe);KDo=r(Dyt,"megatron-bert"),Dyt.forEach(t),ZDo=r(bqe," \u2014 "),Ez=n(bqe,"A",{href:!0});var Gyt=s(Ez);eGo=r(Gyt,"MegatronBertForCausalLM"),Gyt.forEach(t),oGo=r(bqe," (Megatron-BERT model)"),bqe.forEach(t),rGo=i(W),Fv=n(W,"LI",{});var vqe=s(Fv);_be=n(vqe,"STRONG",{});var Oyt=s(_be);tGo=r(Oyt,"mvp"),Oyt.forEach(t),aGo=r(vqe," \u2014 "),Cz=n(vqe,"A",{href:!0});var Vyt=s(Cz);nGo=r(Vyt,"MvpForCausalLM"),Vyt.forEach(t),sGo=r(vqe," (MVP model)"),vqe.forEach(t),lGo=i(W),Tv=n(W,"LI",{});var Fqe=s(Tv);bbe=n(Fqe,"STRONG",{});var Xyt=s(bbe);iGo=r(Xyt,"openai-gpt"),Xyt.forEach(t),dGo=r(Fqe," \u2014 "),wz=n(Fqe,"A",{href:!0});var zyt=s(wz);cGo=r(zyt,"OpenAIGPTLMHeadModel"),zyt.forEach(t),mGo=r(Fqe," (OpenAI GPT model)"),Fqe.forEach(t),fGo=i(W),Mv=n(W,"LI",{});var Tqe=s(Mv);vbe=n(Tqe,"STRONG",{});var Qyt=s(vbe);gGo=r(Qyt,"opt"),Qyt.forEach(t),hGo=r(Tqe," \u2014 "),Az=n(Tqe,"A",{href:!0});var Wyt=s(Az);uGo=r(Wyt,"OPTForCausalLM"),Wyt.forEach(t),pGo=r(Tqe," (OPT model)"),Tqe.forEach(t),_Go=i(W),Ev=n(W,"LI",{});var Mqe=s(Ev);Fbe=n(Mqe,"STRONG",{});var Uyt=s(Fbe);bGo=r(Uyt,"pegasus"),Uyt.forEach(t),vGo=r(Mqe," \u2014 "),Lz=n(Mqe,"A",{href:!0});var Hyt=s(Lz);FGo=r(Hyt,"PegasusForCausalLM"),Hyt.forEach(t),TGo=r(Mqe," (Pegasus model)"),Mqe.forEach(t),MGo=i(W),Cv=n(W,"LI",{});var Eqe=s(Cv);Tbe=n(Eqe,"STRONG",{});var Jyt=s(Tbe);EGo=r(Jyt,"plbart"),Jyt.forEach(t),CGo=r(Eqe," \u2014 "),yz=n(Eqe,"A",{href:!0});var Yyt=s(yz);wGo=r(Yyt,"PLBartForCausalLM"),Yyt.forEach(t),AGo=r(Eqe," (PLBart model)"),Eqe.forEach(t),LGo=i(W),wv=n(W,"LI",{});var Cqe=s(wv);Mbe=n(Cqe,"STRONG",{});var Kyt=s(Mbe);yGo=r(Kyt,"prophetnet"),Kyt.forEach(t),xGo=r(Cqe," \u2014 "),xz=n(Cqe,"A",{href:!0});var Zyt=s(xz);$Go=r(Zyt,"ProphetNetForCausalLM"),Zyt.forEach(t),kGo=r(Cqe," (ProphetNet model)"),Cqe.forEach(t),SGo=i(W),Av=n(W,"LI",{});var wqe=s(Av);Ebe=n(wqe,"STRONG",{});var e8t=s(Ebe);RGo=r(e8t,"qdqbert"),e8t.forEach(t),PGo=r(wqe," \u2014 "),$z=n(wqe,"A",{href:!0});var o8t=s($z);BGo=r(o8t,"QDQBertLMHeadModel"),o8t.forEach(t),IGo=r(wqe," (QDQBert model)"),wqe.forEach(t),NGo=i(W),Lv=n(W,"LI",{});var Aqe=s(Lv);Cbe=n(Aqe,"STRONG",{});var r8t=s(Cbe);qGo=r(r8t,"reformer"),r8t.forEach(t),jGo=r(Aqe," \u2014 "),kz=n(Aqe,"A",{href:!0});var t8t=s(kz);DGo=r(t8t,"ReformerModelWithLMHead"),t8t.forEach(t),GGo=r(Aqe," (Reformer model)"),Aqe.forEach(t),OGo=i(W),yv=n(W,"LI",{});var Lqe=s(yv);wbe=n(Lqe,"STRONG",{});var a8t=s(wbe);VGo=r(a8t,"rembert"),a8t.forEach(t),XGo=r(Lqe," \u2014 "),Sz=n(Lqe,"A",{href:!0});var n8t=s(Sz);zGo=r(n8t,"RemBertForCausalLM"),n8t.forEach(t),QGo=r(Lqe," (RemBERT model)"),Lqe.forEach(t),WGo=i(W),xv=n(W,"LI",{});var yqe=s(xv);Abe=n(yqe,"STRONG",{});var s8t=s(Abe);UGo=r(s8t,"roberta"),s8t.forEach(t),HGo=r(yqe," \u2014 "),Rz=n(yqe,"A",{href:!0});var l8t=s(Rz);JGo=r(l8t,"RobertaForCausalLM"),l8t.forEach(t),YGo=r(yqe," (RoBERTa model)"),yqe.forEach(t),KGo=i(W),$v=n(W,"LI",{});var xqe=s($v);Lbe=n(xqe,"STRONG",{});var i8t=s(Lbe);ZGo=r(i8t,"roformer"),i8t.forEach(t),eOo=r(xqe," \u2014 "),Pz=n(xqe,"A",{href:!0});var d8t=s(Pz);oOo=r(d8t,"RoFormerForCausalLM"),d8t.forEach(t),rOo=r(xqe," (RoFormer model)"),xqe.forEach(t),tOo=i(W),kv=n(W,"LI",{});var $qe=s(kv);ybe=n($qe,"STRONG",{});var c8t=s(ybe);aOo=r(c8t,"speech_to_text_2"),c8t.forEach(t),nOo=r($qe," \u2014 "),Bz=n($qe,"A",{href:!0});var m8t=s(Bz);sOo=r(m8t,"Speech2Text2ForCausalLM"),m8t.forEach(t),lOo=r($qe," (Speech2Text2 model)"),$qe.forEach(t),iOo=i(W),Sv=n(W,"LI",{});var kqe=s(Sv);xbe=n(kqe,"STRONG",{});var f8t=s(xbe);dOo=r(f8t,"transfo-xl"),f8t.forEach(t),cOo=r(kqe," \u2014 "),Iz=n(kqe,"A",{href:!0});var g8t=s(Iz);mOo=r(g8t,"TransfoXLLMHeadModel"),g8t.forEach(t),fOo=r(kqe," (Transformer-XL model)"),kqe.forEach(t),gOo=i(W),Rv=n(W,"LI",{});var Sqe=s(Rv);$be=n(Sqe,"STRONG",{});var h8t=s($be);hOo=r(h8t,"trocr"),h8t.forEach(t),uOo=r(Sqe," \u2014 "),Nz=n(Sqe,"A",{href:!0});var u8t=s(Nz);pOo=r(u8t,"TrOCRForCausalLM"),u8t.forEach(t),_Oo=r(Sqe," (TrOCR model)"),Sqe.forEach(t),bOo=i(W),Pv=n(W,"LI",{});var Rqe=s(Pv);kbe=n(Rqe,"STRONG",{});var p8t=s(kbe);vOo=r(p8t,"xglm"),p8t.forEach(t),FOo=r(Rqe," \u2014 "),qz=n(Rqe,"A",{href:!0});var _8t=s(qz);TOo=r(_8t,"XGLMForCausalLM"),_8t.forEach(t),MOo=r(Rqe," (XGLM model)"),Rqe.forEach(t),EOo=i(W),Bv=n(W,"LI",{});var Pqe=s(Bv);Sbe=n(Pqe,"STRONG",{});var b8t=s(Sbe);COo=r(b8t,"xlm"),b8t.forEach(t),wOo=r(Pqe," \u2014 "),jz=n(Pqe,"A",{href:!0});var v8t=s(jz);AOo=r(v8t,"XLMWithLMHeadModel"),v8t.forEach(t),LOo=r(Pqe," (XLM model)"),Pqe.forEach(t),yOo=i(W),Iv=n(W,"LI",{});var Bqe=s(Iv);Rbe=n(Bqe,"STRONG",{});var F8t=s(Rbe);xOo=r(F8t,"xlm-prophetnet"),F8t.forEach(t),$Oo=r(Bqe," \u2014 "),Dz=n(Bqe,"A",{href:!0});var T8t=s(Dz);kOo=r(T8t,"XLMProphetNetForCausalLM"),T8t.forEach(t),SOo=r(Bqe," (XLM-ProphetNet model)"),Bqe.forEach(t),ROo=i(W),Nv=n(W,"LI",{});var Iqe=s(Nv);Pbe=n(Iqe,"STRONG",{});var M8t=s(Pbe);POo=r(M8t,"xlm-roberta"),M8t.forEach(t),BOo=r(Iqe," \u2014 "),Gz=n(Iqe,"A",{href:!0});var E8t=s(Gz);IOo=r(E8t,"XLMRobertaForCausalLM"),E8t.forEach(t),NOo=r(Iqe," (XLM-RoBERTa model)"),Iqe.forEach(t),qOo=i(W),qv=n(W,"LI",{});var Nqe=s(qv);Bbe=n(Nqe,"STRONG",{});var C8t=s(Bbe);jOo=r(C8t,"xlm-roberta-xl"),C8t.forEach(t),DOo=r(Nqe," \u2014 "),Oz=n(Nqe,"A",{href:!0});var w8t=s(Oz);GOo=r(w8t,"XLMRobertaXLForCausalLM"),w8t.forEach(t),OOo=r(Nqe," (XLM-RoBERTa-XL model)"),Nqe.forEach(t),VOo=i(W),jv=n(W,"LI",{});var qqe=s(jv);Ibe=n(qqe,"STRONG",{});var A8t=s(Ibe);XOo=r(A8t,"xlnet"),A8t.forEach(t),zOo=r(qqe," \u2014 "),Vz=n(qqe,"A",{href:!0});var L8t=s(Vz);QOo=r(L8t,"XLNetLMHeadModel"),L8t.forEach(t),WOo=r(qqe," (XLNet model)"),qqe.forEach(t),W.forEach(t),UOo=i(Ta),Dv=n(Ta,"P",{});var jqe=s(Dv);HOo=r(jqe,"The model is set in evaluation mode by default using "),Nbe=n(jqe,"CODE",{});var y8t=s(Nbe);JOo=r(y8t,"model.eval()"),y8t.forEach(t),YOo=r(jqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qbe=n(jqe,"CODE",{});var x8t=s(qbe);KOo=r(x8t,"model.train()"),x8t.forEach(t),jqe.forEach(t),ZOo=i(Ta),T(Gv.$$.fragment,Ta),Ta.forEach(t),Al.forEach(t),nYe=i(m),Cd=n(m,"H2",{class:!0});var vZe=s(Cd);Ov=n(vZe,"A",{id:!0,class:!0,href:!0});var $8t=s(Ov);jbe=n($8t,"SPAN",{});var k8t=s(jbe);T(Z9.$$.fragment,k8t),k8t.forEach(t),$8t.forEach(t),eVo=i(vZe),Dbe=n(vZe,"SPAN",{});var S8t=s(Dbe);oVo=r(S8t,"AutoModelForMaskedLM"),S8t.forEach(t),vZe.forEach(t),sYe=i(m),Io=n(m,"DIV",{class:!0});var Ll=s(Io);T(ex.$$.fragment,Ll),rVo=i(Ll),wd=n(Ll,"P",{});var xse=s(wd);tVo=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Xz=n(xse,"A",{href:!0});var R8t=s(Xz);aVo=r(R8t,"from_pretrained()"),R8t.forEach(t),nVo=r(xse," class method or the "),zz=n(xse,"A",{href:!0});var P8t=s(zz);sVo=r(P8t,"from_config()"),P8t.forEach(t),lVo=r(xse,` class
method.`),xse.forEach(t),iVo=i(Ll),ox=n(Ll,"P",{});var FZe=s(ox);dVo=r(FZe,"This class cannot be instantiated directly using "),Gbe=n(FZe,"CODE",{});var B8t=s(Gbe);cVo=r(B8t,"__init__()"),B8t.forEach(t),mVo=r(FZe," (throws an error)."),FZe.forEach(t),fVo=i(Ll),vt=n(Ll,"DIV",{class:!0});var gy=s(vt);T(rx.$$.fragment,gy),gVo=i(gy),Obe=n(gy,"P",{});var I8t=s(Obe);hVo=r(I8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I8t.forEach(t),uVo=i(gy),Ad=n(gy,"P",{});var $se=s(Ad);pVo=r($se,`Note:
Loading a model from its configuration file does `),Vbe=n($se,"STRONG",{});var N8t=s(Vbe);_Vo=r(N8t,"not"),N8t.forEach(t),bVo=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n($se,"A",{href:!0});var q8t=s(Qz);vVo=r(q8t,"from_pretrained()"),q8t.forEach(t),FVo=r($se," to load the model weights."),$se.forEach(t),TVo=i(gy),T(Vv.$$.fragment,gy),gy.forEach(t),MVo=i(Ll),oo=n(Ll,"DIV",{class:!0});var Ma=s(oo);T(tx.$$.fragment,Ma),EVo=i(Ma),Xbe=n(Ma,"P",{});var j8t=s(Xbe);CVo=r(j8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),j8t.forEach(t),wVo=i(Ma),Za=n(Ma,"P",{});var hy=s(Za);AVo=r(hy,"The model class to instantiate is selected based on the "),zbe=n(hy,"CODE",{});var D8t=s(zbe);LVo=r(D8t,"model_type"),D8t.forEach(t),yVo=r(hy,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(hy,"CODE",{});var G8t=s(Qbe);xVo=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),$Vo=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(hy,"CODE",{});var O8t=s(Wbe);kVo=r(O8t,"pretrained_model_name_or_path"),O8t.forEach(t),SVo=r(hy,":"),hy.forEach(t),RVo=i(Ma),U=n(Ma,"UL",{});var Y=s(U);Xv=n(Y,"LI",{});var Dqe=s(Xv);Ube=n(Dqe,"STRONG",{});var V8t=s(Ube);PVo=r(V8t,"albert"),V8t.forEach(t),BVo=r(Dqe," \u2014 "),Wz=n(Dqe,"A",{href:!0});var X8t=s(Wz);IVo=r(X8t,"AlbertForMaskedLM"),X8t.forEach(t),NVo=r(Dqe," (ALBERT model)"),Dqe.forEach(t),qVo=i(Y),zv=n(Y,"LI",{});var Gqe=s(zv);Hbe=n(Gqe,"STRONG",{});var z8t=s(Hbe);jVo=r(z8t,"bart"),z8t.forEach(t),DVo=r(Gqe," \u2014 "),Uz=n(Gqe,"A",{href:!0});var Q8t=s(Uz);GVo=r(Q8t,"BartForConditionalGeneration"),Q8t.forEach(t),OVo=r(Gqe," (BART model)"),Gqe.forEach(t),VVo=i(Y),Qv=n(Y,"LI",{});var Oqe=s(Qv);Jbe=n(Oqe,"STRONG",{});var W8t=s(Jbe);XVo=r(W8t,"bert"),W8t.forEach(t),zVo=r(Oqe," \u2014 "),Hz=n(Oqe,"A",{href:!0});var U8t=s(Hz);QVo=r(U8t,"BertForMaskedLM"),U8t.forEach(t),WVo=r(Oqe," (BERT model)"),Oqe.forEach(t),UVo=i(Y),Wv=n(Y,"LI",{});var Vqe=s(Wv);Ybe=n(Vqe,"STRONG",{});var H8t=s(Ybe);HVo=r(H8t,"big_bird"),H8t.forEach(t),JVo=r(Vqe," \u2014 "),Jz=n(Vqe,"A",{href:!0});var J8t=s(Jz);YVo=r(J8t,"BigBirdForMaskedLM"),J8t.forEach(t),KVo=r(Vqe," (BigBird model)"),Vqe.forEach(t),ZVo=i(Y),Uv=n(Y,"LI",{});var Xqe=s(Uv);Kbe=n(Xqe,"STRONG",{});var Y8t=s(Kbe);eXo=r(Y8t,"camembert"),Y8t.forEach(t),oXo=r(Xqe," \u2014 "),Yz=n(Xqe,"A",{href:!0});var K8t=s(Yz);rXo=r(K8t,"CamembertForMaskedLM"),K8t.forEach(t),tXo=r(Xqe," (CamemBERT model)"),Xqe.forEach(t),aXo=i(Y),Hv=n(Y,"LI",{});var zqe=s(Hv);Zbe=n(zqe,"STRONG",{});var Z8t=s(Zbe);nXo=r(Z8t,"convbert"),Z8t.forEach(t),sXo=r(zqe," \u2014 "),Kz=n(zqe,"A",{href:!0});var e9t=s(Kz);lXo=r(e9t,"ConvBertForMaskedLM"),e9t.forEach(t),iXo=r(zqe," (ConvBERT model)"),zqe.forEach(t),dXo=i(Y),Jv=n(Y,"LI",{});var Qqe=s(Jv);e2e=n(Qqe,"STRONG",{});var o9t=s(e2e);cXo=r(o9t,"data2vec-text"),o9t.forEach(t),mXo=r(Qqe," \u2014 "),Zz=n(Qqe,"A",{href:!0});var r9t=s(Zz);fXo=r(r9t,"Data2VecTextForMaskedLM"),r9t.forEach(t),gXo=r(Qqe," (Data2VecText model)"),Qqe.forEach(t),hXo=i(Y),Yv=n(Y,"LI",{});var Wqe=s(Yv);o2e=n(Wqe,"STRONG",{});var t9t=s(o2e);uXo=r(t9t,"deberta"),t9t.forEach(t),pXo=r(Wqe," \u2014 "),eQ=n(Wqe,"A",{href:!0});var a9t=s(eQ);_Xo=r(a9t,"DebertaForMaskedLM"),a9t.forEach(t),bXo=r(Wqe," (DeBERTa model)"),Wqe.forEach(t),vXo=i(Y),Kv=n(Y,"LI",{});var Uqe=s(Kv);r2e=n(Uqe,"STRONG",{});var n9t=s(r2e);FXo=r(n9t,"deberta-v2"),n9t.forEach(t),TXo=r(Uqe," \u2014 "),oQ=n(Uqe,"A",{href:!0});var s9t=s(oQ);MXo=r(s9t,"DebertaV2ForMaskedLM"),s9t.forEach(t),EXo=r(Uqe," (DeBERTa-v2 model)"),Uqe.forEach(t),CXo=i(Y),Zv=n(Y,"LI",{});var Hqe=s(Zv);t2e=n(Hqe,"STRONG",{});var l9t=s(t2e);wXo=r(l9t,"distilbert"),l9t.forEach(t),AXo=r(Hqe," \u2014 "),rQ=n(Hqe,"A",{href:!0});var i9t=s(rQ);LXo=r(i9t,"DistilBertForMaskedLM"),i9t.forEach(t),yXo=r(Hqe," (DistilBERT model)"),Hqe.forEach(t),xXo=i(Y),e1=n(Y,"LI",{});var Jqe=s(e1);a2e=n(Jqe,"STRONG",{});var d9t=s(a2e);$Xo=r(d9t,"electra"),d9t.forEach(t),kXo=r(Jqe," \u2014 "),tQ=n(Jqe,"A",{href:!0});var c9t=s(tQ);SXo=r(c9t,"ElectraForMaskedLM"),c9t.forEach(t),RXo=r(Jqe," (ELECTRA model)"),Jqe.forEach(t),PXo=i(Y),o1=n(Y,"LI",{});var Yqe=s(o1);n2e=n(Yqe,"STRONG",{});var m9t=s(n2e);BXo=r(m9t,"flaubert"),m9t.forEach(t),IXo=r(Yqe," \u2014 "),aQ=n(Yqe,"A",{href:!0});var f9t=s(aQ);NXo=r(f9t,"FlaubertWithLMHeadModel"),f9t.forEach(t),qXo=r(Yqe," (FlauBERT model)"),Yqe.forEach(t),jXo=i(Y),r1=n(Y,"LI",{});var Kqe=s(r1);s2e=n(Kqe,"STRONG",{});var g9t=s(s2e);DXo=r(g9t,"fnet"),g9t.forEach(t),GXo=r(Kqe," \u2014 "),nQ=n(Kqe,"A",{href:!0});var h9t=s(nQ);OXo=r(h9t,"FNetForMaskedLM"),h9t.forEach(t),VXo=r(Kqe," (FNet model)"),Kqe.forEach(t),XXo=i(Y),t1=n(Y,"LI",{});var Zqe=s(t1);l2e=n(Zqe,"STRONG",{});var u9t=s(l2e);zXo=r(u9t,"funnel"),u9t.forEach(t),QXo=r(Zqe," \u2014 "),sQ=n(Zqe,"A",{href:!0});var p9t=s(sQ);WXo=r(p9t,"FunnelForMaskedLM"),p9t.forEach(t),UXo=r(Zqe," (Funnel Transformer model)"),Zqe.forEach(t),HXo=i(Y),a1=n(Y,"LI",{});var eje=s(a1);i2e=n(eje,"STRONG",{});var _9t=s(i2e);JXo=r(_9t,"ibert"),_9t.forEach(t),YXo=r(eje," \u2014 "),lQ=n(eje,"A",{href:!0});var b9t=s(lQ);KXo=r(b9t,"IBertForMaskedLM"),b9t.forEach(t),ZXo=r(eje," (I-BERT model)"),eje.forEach(t),ezo=i(Y),n1=n(Y,"LI",{});var oje=s(n1);d2e=n(oje,"STRONG",{});var v9t=s(d2e);ozo=r(v9t,"layoutlm"),v9t.forEach(t),rzo=r(oje," \u2014 "),iQ=n(oje,"A",{href:!0});var F9t=s(iQ);tzo=r(F9t,"LayoutLMForMaskedLM"),F9t.forEach(t),azo=r(oje," (LayoutLM model)"),oje.forEach(t),nzo=i(Y),s1=n(Y,"LI",{});var rje=s(s1);c2e=n(rje,"STRONG",{});var T9t=s(c2e);szo=r(T9t,"longformer"),T9t.forEach(t),lzo=r(rje," \u2014 "),dQ=n(rje,"A",{href:!0});var M9t=s(dQ);izo=r(M9t,"LongformerForMaskedLM"),M9t.forEach(t),dzo=r(rje," (Longformer model)"),rje.forEach(t),czo=i(Y),l1=n(Y,"LI",{});var tje=s(l1);m2e=n(tje,"STRONG",{});var E9t=s(m2e);mzo=r(E9t,"luke"),E9t.forEach(t),fzo=r(tje," \u2014 "),cQ=n(tje,"A",{href:!0});var C9t=s(cQ);gzo=r(C9t,"LukeForMaskedLM"),C9t.forEach(t),hzo=r(tje," (LUKE model)"),tje.forEach(t),uzo=i(Y),i1=n(Y,"LI",{});var aje=s(i1);f2e=n(aje,"STRONG",{});var w9t=s(f2e);pzo=r(w9t,"mbart"),w9t.forEach(t),_zo=r(aje," \u2014 "),mQ=n(aje,"A",{href:!0});var A9t=s(mQ);bzo=r(A9t,"MBartForConditionalGeneration"),A9t.forEach(t),vzo=r(aje," (mBART model)"),aje.forEach(t),Fzo=i(Y),d1=n(Y,"LI",{});var nje=s(d1);g2e=n(nje,"STRONG",{});var L9t=s(g2e);Tzo=r(L9t,"megatron-bert"),L9t.forEach(t),Mzo=r(nje," \u2014 "),fQ=n(nje,"A",{href:!0});var y9t=s(fQ);Ezo=r(y9t,"MegatronBertForMaskedLM"),y9t.forEach(t),Czo=r(nje," (Megatron-BERT model)"),nje.forEach(t),wzo=i(Y),c1=n(Y,"LI",{});var sje=s(c1);h2e=n(sje,"STRONG",{});var x9t=s(h2e);Azo=r(x9t,"mobilebert"),x9t.forEach(t),Lzo=r(sje," \u2014 "),gQ=n(sje,"A",{href:!0});var $9t=s(gQ);yzo=r($9t,"MobileBertForMaskedLM"),$9t.forEach(t),xzo=r(sje," (MobileBERT model)"),sje.forEach(t),$zo=i(Y),m1=n(Y,"LI",{});var lje=s(m1);u2e=n(lje,"STRONG",{});var k9t=s(u2e);kzo=r(k9t,"mpnet"),k9t.forEach(t),Szo=r(lje," \u2014 "),hQ=n(lje,"A",{href:!0});var S9t=s(hQ);Rzo=r(S9t,"MPNetForMaskedLM"),S9t.forEach(t),Pzo=r(lje," (MPNet model)"),lje.forEach(t),Bzo=i(Y),f1=n(Y,"LI",{});var ije=s(f1);p2e=n(ije,"STRONG",{});var R9t=s(p2e);Izo=r(R9t,"mvp"),R9t.forEach(t),Nzo=r(ije," \u2014 "),uQ=n(ije,"A",{href:!0});var P9t=s(uQ);qzo=r(P9t,"MvpForConditionalGeneration"),P9t.forEach(t),jzo=r(ije," (MVP model)"),ije.forEach(t),Dzo=i(Y),g1=n(Y,"LI",{});var dje=s(g1);_2e=n(dje,"STRONG",{});var B9t=s(_2e);Gzo=r(B9t,"nezha"),B9t.forEach(t),Ozo=r(dje," \u2014 "),pQ=n(dje,"A",{href:!0});var I9t=s(pQ);Vzo=r(I9t,"NezhaForMaskedLM"),I9t.forEach(t),Xzo=r(dje," (Nezha model)"),dje.forEach(t),zzo=i(Y),h1=n(Y,"LI",{});var cje=s(h1);b2e=n(cje,"STRONG",{});var N9t=s(b2e);Qzo=r(N9t,"nystromformer"),N9t.forEach(t),Wzo=r(cje," \u2014 "),_Q=n(cje,"A",{href:!0});var q9t=s(_Q);Uzo=r(q9t,"NystromformerForMaskedLM"),q9t.forEach(t),Hzo=r(cje," (Nystr\xF6mformer model)"),cje.forEach(t),Jzo=i(Y),u1=n(Y,"LI",{});var mje=s(u1);v2e=n(mje,"STRONG",{});var j9t=s(v2e);Yzo=r(j9t,"perceiver"),j9t.forEach(t),Kzo=r(mje," \u2014 "),bQ=n(mje,"A",{href:!0});var D9t=s(bQ);Zzo=r(D9t,"PerceiverForMaskedLM"),D9t.forEach(t),eQo=r(mje," (Perceiver model)"),mje.forEach(t),oQo=i(Y),p1=n(Y,"LI",{});var fje=s(p1);F2e=n(fje,"STRONG",{});var G9t=s(F2e);rQo=r(G9t,"qdqbert"),G9t.forEach(t),tQo=r(fje," \u2014 "),vQ=n(fje,"A",{href:!0});var O9t=s(vQ);aQo=r(O9t,"QDQBertForMaskedLM"),O9t.forEach(t),nQo=r(fje," (QDQBert model)"),fje.forEach(t),sQo=i(Y),_1=n(Y,"LI",{});var gje=s(_1);T2e=n(gje,"STRONG",{});var V9t=s(T2e);lQo=r(V9t,"reformer"),V9t.forEach(t),iQo=r(gje," \u2014 "),FQ=n(gje,"A",{href:!0});var X9t=s(FQ);dQo=r(X9t,"ReformerForMaskedLM"),X9t.forEach(t),cQo=r(gje," (Reformer model)"),gje.forEach(t),mQo=i(Y),b1=n(Y,"LI",{});var hje=s(b1);M2e=n(hje,"STRONG",{});var z9t=s(M2e);fQo=r(z9t,"rembert"),z9t.forEach(t),gQo=r(hje," \u2014 "),TQ=n(hje,"A",{href:!0});var Q9t=s(TQ);hQo=r(Q9t,"RemBertForMaskedLM"),Q9t.forEach(t),uQo=r(hje," (RemBERT model)"),hje.forEach(t),pQo=i(Y),v1=n(Y,"LI",{});var uje=s(v1);E2e=n(uje,"STRONG",{});var W9t=s(E2e);_Qo=r(W9t,"roberta"),W9t.forEach(t),bQo=r(uje," \u2014 "),MQ=n(uje,"A",{href:!0});var U9t=s(MQ);vQo=r(U9t,"RobertaForMaskedLM"),U9t.forEach(t),FQo=r(uje," (RoBERTa model)"),uje.forEach(t),TQo=i(Y),F1=n(Y,"LI",{});var pje=s(F1);C2e=n(pje,"STRONG",{});var H9t=s(C2e);MQo=r(H9t,"roformer"),H9t.forEach(t),EQo=r(pje," \u2014 "),EQ=n(pje,"A",{href:!0});var J9t=s(EQ);CQo=r(J9t,"RoFormerForMaskedLM"),J9t.forEach(t),wQo=r(pje," (RoFormer model)"),pje.forEach(t),AQo=i(Y),T1=n(Y,"LI",{});var _je=s(T1);w2e=n(_je,"STRONG",{});var Y9t=s(w2e);LQo=r(Y9t,"squeezebert"),Y9t.forEach(t),yQo=r(_je," \u2014 "),CQ=n(_je,"A",{href:!0});var K9t=s(CQ);xQo=r(K9t,"SqueezeBertForMaskedLM"),K9t.forEach(t),$Qo=r(_je," (SqueezeBERT model)"),_je.forEach(t),kQo=i(Y),M1=n(Y,"LI",{});var bje=s(M1);A2e=n(bje,"STRONG",{});var Z9t=s(A2e);SQo=r(Z9t,"tapas"),Z9t.forEach(t),RQo=r(bje," \u2014 "),wQ=n(bje,"A",{href:!0});var ext=s(wQ);PQo=r(ext,"TapasForMaskedLM"),ext.forEach(t),BQo=r(bje," (TAPAS model)"),bje.forEach(t),IQo=i(Y),E1=n(Y,"LI",{});var vje=s(E1);L2e=n(vje,"STRONG",{});var oxt=s(L2e);NQo=r(oxt,"wav2vec2"),oxt.forEach(t),qQo=r(vje," \u2014 "),y2e=n(vje,"CODE",{});var rxt=s(y2e);jQo=r(rxt,"Wav2Vec2ForMaskedLM"),rxt.forEach(t),DQo=r(vje," (Wav2Vec2 model)"),vje.forEach(t),GQo=i(Y),C1=n(Y,"LI",{});var Fje=s(C1);x2e=n(Fje,"STRONG",{});var txt=s(x2e);OQo=r(txt,"xlm"),txt.forEach(t),VQo=r(Fje," \u2014 "),AQ=n(Fje,"A",{href:!0});var axt=s(AQ);XQo=r(axt,"XLMWithLMHeadModel"),axt.forEach(t),zQo=r(Fje," (XLM model)"),Fje.forEach(t),QQo=i(Y),w1=n(Y,"LI",{});var Tje=s(w1);$2e=n(Tje,"STRONG",{});var nxt=s($2e);WQo=r(nxt,"xlm-roberta"),nxt.forEach(t),UQo=r(Tje," \u2014 "),LQ=n(Tje,"A",{href:!0});var sxt=s(LQ);HQo=r(sxt,"XLMRobertaForMaskedLM"),sxt.forEach(t),JQo=r(Tje," (XLM-RoBERTa model)"),Tje.forEach(t),YQo=i(Y),A1=n(Y,"LI",{});var Mje=s(A1);k2e=n(Mje,"STRONG",{});var lxt=s(k2e);KQo=r(lxt,"xlm-roberta-xl"),lxt.forEach(t),ZQo=r(Mje," \u2014 "),yQ=n(Mje,"A",{href:!0});var ixt=s(yQ);eWo=r(ixt,"XLMRobertaXLForMaskedLM"),ixt.forEach(t),oWo=r(Mje," (XLM-RoBERTa-XL model)"),Mje.forEach(t),rWo=i(Y),L1=n(Y,"LI",{});var Eje=s(L1);S2e=n(Eje,"STRONG",{});var dxt=s(S2e);tWo=r(dxt,"yoso"),dxt.forEach(t),aWo=r(Eje," \u2014 "),xQ=n(Eje,"A",{href:!0});var cxt=s(xQ);nWo=r(cxt,"YosoForMaskedLM"),cxt.forEach(t),sWo=r(Eje," (YOSO model)"),Eje.forEach(t),Y.forEach(t),lWo=i(Ma),y1=n(Ma,"P",{});var Cje=s(y1);iWo=r(Cje,"The model is set in evaluation mode by default using "),R2e=n(Cje,"CODE",{});var mxt=s(R2e);dWo=r(mxt,"model.eval()"),mxt.forEach(t),cWo=r(Cje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(Cje,"CODE",{});var fxt=s(P2e);mWo=r(fxt,"model.train()"),fxt.forEach(t),Cje.forEach(t),fWo=i(Ma),T(x1.$$.fragment,Ma),Ma.forEach(t),Ll.forEach(t),lYe=i(m),Ld=n(m,"H2",{class:!0});var TZe=s(Ld);$1=n(TZe,"A",{id:!0,class:!0,href:!0});var gxt=s($1);B2e=n(gxt,"SPAN",{});var hxt=s(B2e);T(ax.$$.fragment,hxt),hxt.forEach(t),gxt.forEach(t),gWo=i(TZe),I2e=n(TZe,"SPAN",{});var uxt=s(I2e);hWo=r(uxt,"AutoModelForSeq2SeqLM"),uxt.forEach(t),TZe.forEach(t),iYe=i(m),No=n(m,"DIV",{class:!0});var yl=s(No);T(nx.$$.fragment,yl),uWo=i(yl),yd=n(yl,"P",{});var kse=s(yd);pWo=r(kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Q=n(kse,"A",{href:!0});var pxt=s($Q);_Wo=r(pxt,"from_pretrained()"),pxt.forEach(t),bWo=r(kse," class method or the "),kQ=n(kse,"A",{href:!0});var _xt=s(kQ);vWo=r(_xt,"from_config()"),_xt.forEach(t),FWo=r(kse,` class
method.`),kse.forEach(t),TWo=i(yl),sx=n(yl,"P",{});var MZe=s(sx);MWo=r(MZe,"This class cannot be instantiated directly using "),N2e=n(MZe,"CODE",{});var bxt=s(N2e);EWo=r(bxt,"__init__()"),bxt.forEach(t),CWo=r(MZe," (throws an error)."),MZe.forEach(t),wWo=i(yl),Ft=n(yl,"DIV",{class:!0});var uy=s(Ft);T(lx.$$.fragment,uy),AWo=i(uy),q2e=n(uy,"P",{});var vxt=s(q2e);LWo=r(vxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vxt.forEach(t),yWo=i(uy),xd=n(uy,"P",{});var Sse=s(xd);xWo=r(Sse,`Note:
Loading a model from its configuration file does `),j2e=n(Sse,"STRONG",{});var Fxt=s(j2e);$Wo=r(Fxt,"not"),Fxt.forEach(t),kWo=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(Sse,"A",{href:!0});var Txt=s(SQ);SWo=r(Txt,"from_pretrained()"),Txt.forEach(t),RWo=r(Sse," to load the model weights."),Sse.forEach(t),PWo=i(uy),T(k1.$$.fragment,uy),uy.forEach(t),BWo=i(yl),ro=n(yl,"DIV",{class:!0});var Ea=s(ro);T(ix.$$.fragment,Ea),IWo=i(Ea),D2e=n(Ea,"P",{});var Mxt=s(D2e);NWo=r(Mxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Mxt.forEach(t),qWo=i(Ea),en=n(Ea,"P",{});var py=s(en);jWo=r(py,"The model class to instantiate is selected based on the "),G2e=n(py,"CODE",{});var Ext=s(G2e);DWo=r(Ext,"model_type"),Ext.forEach(t),GWo=r(py,` property of the config object (either
passed as an argument or loaded from `),O2e=n(py,"CODE",{});var Cxt=s(O2e);OWo=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),VWo=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(py,"CODE",{});var wxt=s(V2e);XWo=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),zWo=r(py,":"),py.forEach(t),QWo=i(Ea),me=n(Ea,"UL",{});var pe=s(me);S1=n(pe,"LI",{});var wje=s(S1);X2e=n(wje,"STRONG",{});var Axt=s(X2e);WWo=r(Axt,"bart"),Axt.forEach(t),UWo=r(wje," \u2014 "),RQ=n(wje,"A",{href:!0});var Lxt=s(RQ);HWo=r(Lxt,"BartForConditionalGeneration"),Lxt.forEach(t),JWo=r(wje," (BART model)"),wje.forEach(t),YWo=i(pe),R1=n(pe,"LI",{});var Aje=s(R1);z2e=n(Aje,"STRONG",{});var yxt=s(z2e);KWo=r(yxt,"bigbird_pegasus"),yxt.forEach(t),ZWo=r(Aje," \u2014 "),PQ=n(Aje,"A",{href:!0});var xxt=s(PQ);eUo=r(xxt,"BigBirdPegasusForConditionalGeneration"),xxt.forEach(t),oUo=r(Aje," (BigBird-Pegasus model)"),Aje.forEach(t),rUo=i(pe),P1=n(pe,"LI",{});var Lje=s(P1);Q2e=n(Lje,"STRONG",{});var $xt=s(Q2e);tUo=r($xt,"blenderbot"),$xt.forEach(t),aUo=r(Lje," \u2014 "),BQ=n(Lje,"A",{href:!0});var kxt=s(BQ);nUo=r(kxt,"BlenderbotForConditionalGeneration"),kxt.forEach(t),sUo=r(Lje," (Blenderbot model)"),Lje.forEach(t),lUo=i(pe),B1=n(pe,"LI",{});var yje=s(B1);W2e=n(yje,"STRONG",{});var Sxt=s(W2e);iUo=r(Sxt,"blenderbot-small"),Sxt.forEach(t),dUo=r(yje," \u2014 "),IQ=n(yje,"A",{href:!0});var Rxt=s(IQ);cUo=r(Rxt,"BlenderbotSmallForConditionalGeneration"),Rxt.forEach(t),mUo=r(yje," (BlenderbotSmall model)"),yje.forEach(t),fUo=i(pe),I1=n(pe,"LI",{});var xje=s(I1);U2e=n(xje,"STRONG",{});var Pxt=s(U2e);gUo=r(Pxt,"encoder-decoder"),Pxt.forEach(t),hUo=r(xje," \u2014 "),NQ=n(xje,"A",{href:!0});var Bxt=s(NQ);uUo=r(Bxt,"EncoderDecoderModel"),Bxt.forEach(t),pUo=r(xje," (Encoder decoder model)"),xje.forEach(t),_Uo=i(pe),N1=n(pe,"LI",{});var $je=s(N1);H2e=n($je,"STRONG",{});var Ixt=s(H2e);bUo=r(Ixt,"fsmt"),Ixt.forEach(t),vUo=r($je," \u2014 "),qQ=n($je,"A",{href:!0});var Nxt=s(qQ);FUo=r(Nxt,"FSMTForConditionalGeneration"),Nxt.forEach(t),TUo=r($je," (FairSeq Machine-Translation model)"),$je.forEach(t),MUo=i(pe),q1=n(pe,"LI",{});var kje=s(q1);J2e=n(kje,"STRONG",{});var qxt=s(J2e);EUo=r(qxt,"led"),qxt.forEach(t),CUo=r(kje," \u2014 "),jQ=n(kje,"A",{href:!0});var jxt=s(jQ);wUo=r(jxt,"LEDForConditionalGeneration"),jxt.forEach(t),AUo=r(kje," (LED model)"),kje.forEach(t),LUo=i(pe),j1=n(pe,"LI",{});var Sje=s(j1);Y2e=n(Sje,"STRONG",{});var Dxt=s(Y2e);yUo=r(Dxt,"longt5"),Dxt.forEach(t),xUo=r(Sje," \u2014 "),DQ=n(Sje,"A",{href:!0});var Gxt=s(DQ);$Uo=r(Gxt,"LongT5ForConditionalGeneration"),Gxt.forEach(t),kUo=r(Sje," (LongT5 model)"),Sje.forEach(t),SUo=i(pe),D1=n(pe,"LI",{});var Rje=s(D1);K2e=n(Rje,"STRONG",{});var Oxt=s(K2e);RUo=r(Oxt,"m2m_100"),Oxt.forEach(t),PUo=r(Rje," \u2014 "),GQ=n(Rje,"A",{href:!0});var Vxt=s(GQ);BUo=r(Vxt,"M2M100ForConditionalGeneration"),Vxt.forEach(t),IUo=r(Rje," (M2M100 model)"),Rje.forEach(t),NUo=i(pe),G1=n(pe,"LI",{});var Pje=s(G1);Z2e=n(Pje,"STRONG",{});var Xxt=s(Z2e);qUo=r(Xxt,"marian"),Xxt.forEach(t),jUo=r(Pje," \u2014 "),OQ=n(Pje,"A",{href:!0});var zxt=s(OQ);DUo=r(zxt,"MarianMTModel"),zxt.forEach(t),GUo=r(Pje," (Marian model)"),Pje.forEach(t),OUo=i(pe),O1=n(pe,"LI",{});var Bje=s(O1);eve=n(Bje,"STRONG",{});var Qxt=s(eve);VUo=r(Qxt,"mbart"),Qxt.forEach(t),XUo=r(Bje," \u2014 "),VQ=n(Bje,"A",{href:!0});var Wxt=s(VQ);zUo=r(Wxt,"MBartForConditionalGeneration"),Wxt.forEach(t),QUo=r(Bje," (mBART model)"),Bje.forEach(t),WUo=i(pe),V1=n(pe,"LI",{});var Ije=s(V1);ove=n(Ije,"STRONG",{});var Uxt=s(ove);UUo=r(Uxt,"mt5"),Uxt.forEach(t),HUo=r(Ije," \u2014 "),XQ=n(Ije,"A",{href:!0});var Hxt=s(XQ);JUo=r(Hxt,"MT5ForConditionalGeneration"),Hxt.forEach(t),YUo=r(Ije," (MT5 model)"),Ije.forEach(t),KUo=i(pe),X1=n(pe,"LI",{});var Nje=s(X1);rve=n(Nje,"STRONG",{});var Jxt=s(rve);ZUo=r(Jxt,"mvp"),Jxt.forEach(t),eHo=r(Nje," \u2014 "),zQ=n(Nje,"A",{href:!0});var Yxt=s(zQ);oHo=r(Yxt,"MvpForConditionalGeneration"),Yxt.forEach(t),rHo=r(Nje," (MVP model)"),Nje.forEach(t),tHo=i(pe),z1=n(pe,"LI",{});var qje=s(z1);tve=n(qje,"STRONG",{});var Kxt=s(tve);aHo=r(Kxt,"nllb"),Kxt.forEach(t),nHo=r(qje," \u2014 "),QQ=n(qje,"A",{href:!0});var Zxt=s(QQ);sHo=r(Zxt,"M2M100ForConditionalGeneration"),Zxt.forEach(t),lHo=r(qje," (NLLB model)"),qje.forEach(t),iHo=i(pe),Q1=n(pe,"LI",{});var jje=s(Q1);ave=n(jje,"STRONG",{});var e$t=s(ave);dHo=r(e$t,"pegasus"),e$t.forEach(t),cHo=r(jje," \u2014 "),WQ=n(jje,"A",{href:!0});var o$t=s(WQ);mHo=r(o$t,"PegasusForConditionalGeneration"),o$t.forEach(t),fHo=r(jje," (Pegasus model)"),jje.forEach(t),gHo=i(pe),W1=n(pe,"LI",{});var Dje=s(W1);nve=n(Dje,"STRONG",{});var r$t=s(nve);hHo=r(r$t,"pegasus_x"),r$t.forEach(t),uHo=r(Dje," \u2014 "),UQ=n(Dje,"A",{href:!0});var t$t=s(UQ);pHo=r(t$t,"PegasusXForConditionalGeneration"),t$t.forEach(t),_Ho=r(Dje," (PEGASUS-X model)"),Dje.forEach(t),bHo=i(pe),U1=n(pe,"LI",{});var Gje=s(U1);sve=n(Gje,"STRONG",{});var a$t=s(sve);vHo=r(a$t,"plbart"),a$t.forEach(t),FHo=r(Gje," \u2014 "),HQ=n(Gje,"A",{href:!0});var n$t=s(HQ);THo=r(n$t,"PLBartForConditionalGeneration"),n$t.forEach(t),MHo=r(Gje," (PLBart model)"),Gje.forEach(t),EHo=i(pe),H1=n(pe,"LI",{});var Oje=s(H1);lve=n(Oje,"STRONG",{});var s$t=s(lve);CHo=r(s$t,"prophetnet"),s$t.forEach(t),wHo=r(Oje," \u2014 "),JQ=n(Oje,"A",{href:!0});var l$t=s(JQ);AHo=r(l$t,"ProphetNetForConditionalGeneration"),l$t.forEach(t),LHo=r(Oje," (ProphetNet model)"),Oje.forEach(t),yHo=i(pe),J1=n(pe,"LI",{});var Vje=s(J1);ive=n(Vje,"STRONG",{});var i$t=s(ive);xHo=r(i$t,"t5"),i$t.forEach(t),$Ho=r(Vje," \u2014 "),YQ=n(Vje,"A",{href:!0});var d$t=s(YQ);kHo=r(d$t,"T5ForConditionalGeneration"),d$t.forEach(t),SHo=r(Vje," (T5 model)"),Vje.forEach(t),RHo=i(pe),Y1=n(pe,"LI",{});var Xje=s(Y1);dve=n(Xje,"STRONG",{});var c$t=s(dve);PHo=r(c$t,"xlm-prophetnet"),c$t.forEach(t),BHo=r(Xje," \u2014 "),KQ=n(Xje,"A",{href:!0});var m$t=s(KQ);IHo=r(m$t,"XLMProphetNetForConditionalGeneration"),m$t.forEach(t),NHo=r(Xje," (XLM-ProphetNet model)"),Xje.forEach(t),pe.forEach(t),qHo=i(Ea),K1=n(Ea,"P",{});var zje=s(K1);jHo=r(zje,"The model is set in evaluation mode by default using "),cve=n(zje,"CODE",{});var f$t=s(cve);DHo=r(f$t,"model.eval()"),f$t.forEach(t),GHo=r(zje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n(zje,"CODE",{});var g$t=s(mve);OHo=r(g$t,"model.train()"),g$t.forEach(t),zje.forEach(t),VHo=i(Ea),T(Z1.$$.fragment,Ea),Ea.forEach(t),yl.forEach(t),dYe=i(m),$d=n(m,"H2",{class:!0});var EZe=s($d);eF=n(EZe,"A",{id:!0,class:!0,href:!0});var h$t=s(eF);fve=n(h$t,"SPAN",{});var u$t=s(fve);T(dx.$$.fragment,u$t),u$t.forEach(t),h$t.forEach(t),XHo=i(EZe),gve=n(EZe,"SPAN",{});var p$t=s(gve);zHo=r(p$t,"AutoModelForSequenceClassification"),p$t.forEach(t),EZe.forEach(t),cYe=i(m),qo=n(m,"DIV",{class:!0});var xl=s(qo);T(cx.$$.fragment,xl),QHo=i(xl),kd=n(xl,"P",{});var Rse=s(kd);WHo=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZQ=n(Rse,"A",{href:!0});var _$t=s(ZQ);UHo=r(_$t,"from_pretrained()"),_$t.forEach(t),HHo=r(Rse," class method or the "),eW=n(Rse,"A",{href:!0});var b$t=s(eW);JHo=r(b$t,"from_config()"),b$t.forEach(t),YHo=r(Rse,` class
method.`),Rse.forEach(t),KHo=i(xl),mx=n(xl,"P",{});var CZe=s(mx);ZHo=r(CZe,"This class cannot be instantiated directly using "),hve=n(CZe,"CODE",{});var v$t=s(hve);eJo=r(v$t,"__init__()"),v$t.forEach(t),oJo=r(CZe," (throws an error)."),CZe.forEach(t),rJo=i(xl),Tt=n(xl,"DIV",{class:!0});var _y=s(Tt);T(fx.$$.fragment,_y),tJo=i(_y),uve=n(_y,"P",{});var F$t=s(uve);aJo=r(F$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),F$t.forEach(t),nJo=i(_y),Sd=n(_y,"P",{});var Pse=s(Sd);sJo=r(Pse,`Note:
Loading a model from its configuration file does `),pve=n(Pse,"STRONG",{});var T$t=s(pve);lJo=r(T$t,"not"),T$t.forEach(t),iJo=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(Pse,"A",{href:!0});var M$t=s(oW);dJo=r(M$t,"from_pretrained()"),M$t.forEach(t),cJo=r(Pse," to load the model weights."),Pse.forEach(t),mJo=i(_y),T(oF.$$.fragment,_y),_y.forEach(t),fJo=i(xl),to=n(xl,"DIV",{class:!0});var Ca=s(to);T(gx.$$.fragment,Ca),gJo=i(Ca),_ve=n(Ca,"P",{});var E$t=s(_ve);hJo=r(E$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),E$t.forEach(t),uJo=i(Ca),on=n(Ca,"P",{});var by=s(on);pJo=r(by,"The model class to instantiate is selected based on the "),bve=n(by,"CODE",{});var C$t=s(bve);_Jo=r(C$t,"model_type"),C$t.forEach(t),bJo=r(by,` property of the config object (either
passed as an argument or loaded from `),vve=n(by,"CODE",{});var w$t=s(vve);vJo=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),FJo=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(by,"CODE",{});var A$t=s(Fve);TJo=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),MJo=r(by,":"),by.forEach(t),EJo=i(Ca),j=n(Ca,"UL",{});var D=s(j);rF=n(D,"LI",{});var Qje=s(rF);Tve=n(Qje,"STRONG",{});var L$t=s(Tve);CJo=r(L$t,"albert"),L$t.forEach(t),wJo=r(Qje," \u2014 "),rW=n(Qje,"A",{href:!0});var y$t=s(rW);AJo=r(y$t,"AlbertForSequenceClassification"),y$t.forEach(t),LJo=r(Qje," (ALBERT model)"),Qje.forEach(t),yJo=i(D),tF=n(D,"LI",{});var Wje=s(tF);Mve=n(Wje,"STRONG",{});var x$t=s(Mve);xJo=r(x$t,"bart"),x$t.forEach(t),$Jo=r(Wje," \u2014 "),tW=n(Wje,"A",{href:!0});var $$t=s(tW);kJo=r($$t,"BartForSequenceClassification"),$$t.forEach(t),SJo=r(Wje," (BART model)"),Wje.forEach(t),RJo=i(D),aF=n(D,"LI",{});var Uje=s(aF);Eve=n(Uje,"STRONG",{});var k$t=s(Eve);PJo=r(k$t,"bert"),k$t.forEach(t),BJo=r(Uje," \u2014 "),aW=n(Uje,"A",{href:!0});var S$t=s(aW);IJo=r(S$t,"BertForSequenceClassification"),S$t.forEach(t),NJo=r(Uje," (BERT model)"),Uje.forEach(t),qJo=i(D),nF=n(D,"LI",{});var Hje=s(nF);Cve=n(Hje,"STRONG",{});var R$t=s(Cve);jJo=r(R$t,"big_bird"),R$t.forEach(t),DJo=r(Hje," \u2014 "),nW=n(Hje,"A",{href:!0});var P$t=s(nW);GJo=r(P$t,"BigBirdForSequenceClassification"),P$t.forEach(t),OJo=r(Hje," (BigBird model)"),Hje.forEach(t),VJo=i(D),sF=n(D,"LI",{});var Jje=s(sF);wve=n(Jje,"STRONG",{});var B$t=s(wve);XJo=r(B$t,"bigbird_pegasus"),B$t.forEach(t),zJo=r(Jje," \u2014 "),sW=n(Jje,"A",{href:!0});var I$t=s(sW);QJo=r(I$t,"BigBirdPegasusForSequenceClassification"),I$t.forEach(t),WJo=r(Jje," (BigBird-Pegasus model)"),Jje.forEach(t),UJo=i(D),lF=n(D,"LI",{});var Yje=s(lF);Ave=n(Yje,"STRONG",{});var N$t=s(Ave);HJo=r(N$t,"bloom"),N$t.forEach(t),JJo=r(Yje," \u2014 "),lW=n(Yje,"A",{href:!0});var q$t=s(lW);YJo=r(q$t,"BloomForSequenceClassification"),q$t.forEach(t),KJo=r(Yje," (BLOOM model)"),Yje.forEach(t),ZJo=i(D),iF=n(D,"LI",{});var Kje=s(iF);Lve=n(Kje,"STRONG",{});var j$t=s(Lve);eYo=r(j$t,"camembert"),j$t.forEach(t),oYo=r(Kje," \u2014 "),iW=n(Kje,"A",{href:!0});var D$t=s(iW);rYo=r(D$t,"CamembertForSequenceClassification"),D$t.forEach(t),tYo=r(Kje," (CamemBERT model)"),Kje.forEach(t),aYo=i(D),dF=n(D,"LI",{});var Zje=s(dF);yve=n(Zje,"STRONG",{});var G$t=s(yve);nYo=r(G$t,"canine"),G$t.forEach(t),sYo=r(Zje," \u2014 "),dW=n(Zje,"A",{href:!0});var O$t=s(dW);lYo=r(O$t,"CanineForSequenceClassification"),O$t.forEach(t),iYo=r(Zje," (CANINE model)"),Zje.forEach(t),dYo=i(D),cF=n(D,"LI",{});var eDe=s(cF);xve=n(eDe,"STRONG",{});var V$t=s(xve);cYo=r(V$t,"convbert"),V$t.forEach(t),mYo=r(eDe," \u2014 "),cW=n(eDe,"A",{href:!0});var X$t=s(cW);fYo=r(X$t,"ConvBertForSequenceClassification"),X$t.forEach(t),gYo=r(eDe," (ConvBERT model)"),eDe.forEach(t),hYo=i(D),mF=n(D,"LI",{});var oDe=s(mF);$ve=n(oDe,"STRONG",{});var z$t=s($ve);uYo=r(z$t,"ctrl"),z$t.forEach(t),pYo=r(oDe," \u2014 "),mW=n(oDe,"A",{href:!0});var Q$t=s(mW);_Yo=r(Q$t,"CTRLForSequenceClassification"),Q$t.forEach(t),bYo=r(oDe," (CTRL model)"),oDe.forEach(t),vYo=i(D),fF=n(D,"LI",{});var rDe=s(fF);kve=n(rDe,"STRONG",{});var W$t=s(kve);FYo=r(W$t,"data2vec-text"),W$t.forEach(t),TYo=r(rDe," \u2014 "),fW=n(rDe,"A",{href:!0});var U$t=s(fW);MYo=r(U$t,"Data2VecTextForSequenceClassification"),U$t.forEach(t),EYo=r(rDe," (Data2VecText model)"),rDe.forEach(t),CYo=i(D),gF=n(D,"LI",{});var tDe=s(gF);Sve=n(tDe,"STRONG",{});var H$t=s(Sve);wYo=r(H$t,"deberta"),H$t.forEach(t),AYo=r(tDe," \u2014 "),gW=n(tDe,"A",{href:!0});var J$t=s(gW);LYo=r(J$t,"DebertaForSequenceClassification"),J$t.forEach(t),yYo=r(tDe," (DeBERTa model)"),tDe.forEach(t),xYo=i(D),hF=n(D,"LI",{});var aDe=s(hF);Rve=n(aDe,"STRONG",{});var Y$t=s(Rve);$Yo=r(Y$t,"deberta-v2"),Y$t.forEach(t),kYo=r(aDe," \u2014 "),hW=n(aDe,"A",{href:!0});var K$t=s(hW);SYo=r(K$t,"DebertaV2ForSequenceClassification"),K$t.forEach(t),RYo=r(aDe," (DeBERTa-v2 model)"),aDe.forEach(t),PYo=i(D),uF=n(D,"LI",{});var nDe=s(uF);Pve=n(nDe,"STRONG",{});var Z$t=s(Pve);BYo=r(Z$t,"distilbert"),Z$t.forEach(t),IYo=r(nDe," \u2014 "),uW=n(nDe,"A",{href:!0});var ekt=s(uW);NYo=r(ekt,"DistilBertForSequenceClassification"),ekt.forEach(t),qYo=r(nDe," (DistilBERT model)"),nDe.forEach(t),jYo=i(D),pF=n(D,"LI",{});var sDe=s(pF);Bve=n(sDe,"STRONG",{});var okt=s(Bve);DYo=r(okt,"electra"),okt.forEach(t),GYo=r(sDe," \u2014 "),pW=n(sDe,"A",{href:!0});var rkt=s(pW);OYo=r(rkt,"ElectraForSequenceClassification"),rkt.forEach(t),VYo=r(sDe," (ELECTRA model)"),sDe.forEach(t),XYo=i(D),_F=n(D,"LI",{});var lDe=s(_F);Ive=n(lDe,"STRONG",{});var tkt=s(Ive);zYo=r(tkt,"flaubert"),tkt.forEach(t),QYo=r(lDe," \u2014 "),_W=n(lDe,"A",{href:!0});var akt=s(_W);WYo=r(akt,"FlaubertForSequenceClassification"),akt.forEach(t),UYo=r(lDe," (FlauBERT model)"),lDe.forEach(t),HYo=i(D),bF=n(D,"LI",{});var iDe=s(bF);Nve=n(iDe,"STRONG",{});var nkt=s(Nve);JYo=r(nkt,"fnet"),nkt.forEach(t),YYo=r(iDe," \u2014 "),bW=n(iDe,"A",{href:!0});var skt=s(bW);KYo=r(skt,"FNetForSequenceClassification"),skt.forEach(t),ZYo=r(iDe," (FNet model)"),iDe.forEach(t),eKo=i(D),vF=n(D,"LI",{});var dDe=s(vF);qve=n(dDe,"STRONG",{});var lkt=s(qve);oKo=r(lkt,"funnel"),lkt.forEach(t),rKo=r(dDe," \u2014 "),vW=n(dDe,"A",{href:!0});var ikt=s(vW);tKo=r(ikt,"FunnelForSequenceClassification"),ikt.forEach(t),aKo=r(dDe," (Funnel Transformer model)"),dDe.forEach(t),nKo=i(D),FF=n(D,"LI",{});var cDe=s(FF);jve=n(cDe,"STRONG",{});var dkt=s(jve);sKo=r(dkt,"gpt2"),dkt.forEach(t),lKo=r(cDe," \u2014 "),FW=n(cDe,"A",{href:!0});var ckt=s(FW);iKo=r(ckt,"GPT2ForSequenceClassification"),ckt.forEach(t),dKo=r(cDe," (OpenAI GPT-2 model)"),cDe.forEach(t),cKo=i(D),TF=n(D,"LI",{});var mDe=s(TF);Dve=n(mDe,"STRONG",{});var mkt=s(Dve);mKo=r(mkt,"gpt_neo"),mkt.forEach(t),fKo=r(mDe," \u2014 "),TW=n(mDe,"A",{href:!0});var fkt=s(TW);gKo=r(fkt,"GPTNeoForSequenceClassification"),fkt.forEach(t),hKo=r(mDe," (GPT Neo model)"),mDe.forEach(t),uKo=i(D),MF=n(D,"LI",{});var fDe=s(MF);Gve=n(fDe,"STRONG",{});var gkt=s(Gve);pKo=r(gkt,"gptj"),gkt.forEach(t),_Ko=r(fDe," \u2014 "),MW=n(fDe,"A",{href:!0});var hkt=s(MW);bKo=r(hkt,"GPTJForSequenceClassification"),hkt.forEach(t),vKo=r(fDe," (GPT-J model)"),fDe.forEach(t),FKo=i(D),EF=n(D,"LI",{});var gDe=s(EF);Ove=n(gDe,"STRONG",{});var ukt=s(Ove);TKo=r(ukt,"ibert"),ukt.forEach(t),MKo=r(gDe," \u2014 "),EW=n(gDe,"A",{href:!0});var pkt=s(EW);EKo=r(pkt,"IBertForSequenceClassification"),pkt.forEach(t),CKo=r(gDe," (I-BERT model)"),gDe.forEach(t),wKo=i(D),CF=n(D,"LI",{});var hDe=s(CF);Vve=n(hDe,"STRONG",{});var _kt=s(Vve);AKo=r(_kt,"layoutlm"),_kt.forEach(t),LKo=r(hDe," \u2014 "),CW=n(hDe,"A",{href:!0});var bkt=s(CW);yKo=r(bkt,"LayoutLMForSequenceClassification"),bkt.forEach(t),xKo=r(hDe," (LayoutLM model)"),hDe.forEach(t),$Ko=i(D),wF=n(D,"LI",{});var uDe=s(wF);Xve=n(uDe,"STRONG",{});var vkt=s(Xve);kKo=r(vkt,"layoutlmv2"),vkt.forEach(t),SKo=r(uDe," \u2014 "),wW=n(uDe,"A",{href:!0});var Fkt=s(wW);RKo=r(Fkt,"LayoutLMv2ForSequenceClassification"),Fkt.forEach(t),PKo=r(uDe," (LayoutLMv2 model)"),uDe.forEach(t),BKo=i(D),AF=n(D,"LI",{});var pDe=s(AF);zve=n(pDe,"STRONG",{});var Tkt=s(zve);IKo=r(Tkt,"layoutlmv3"),Tkt.forEach(t),NKo=r(pDe," \u2014 "),AW=n(pDe,"A",{href:!0});var Mkt=s(AW);qKo=r(Mkt,"LayoutLMv3ForSequenceClassification"),Mkt.forEach(t),jKo=r(pDe," (LayoutLMv3 model)"),pDe.forEach(t),DKo=i(D),LF=n(D,"LI",{});var _De=s(LF);Qve=n(_De,"STRONG",{});var Ekt=s(Qve);GKo=r(Ekt,"led"),Ekt.forEach(t),OKo=r(_De," \u2014 "),LW=n(_De,"A",{href:!0});var Ckt=s(LW);VKo=r(Ckt,"LEDForSequenceClassification"),Ckt.forEach(t),XKo=r(_De," (LED model)"),_De.forEach(t),zKo=i(D),yF=n(D,"LI",{});var bDe=s(yF);Wve=n(bDe,"STRONG",{});var wkt=s(Wve);QKo=r(wkt,"longformer"),wkt.forEach(t),WKo=r(bDe," \u2014 "),yW=n(bDe,"A",{href:!0});var Akt=s(yW);UKo=r(Akt,"LongformerForSequenceClassification"),Akt.forEach(t),HKo=r(bDe," (Longformer model)"),bDe.forEach(t),JKo=i(D),xF=n(D,"LI",{});var vDe=s(xF);Uve=n(vDe,"STRONG",{});var Lkt=s(Uve);YKo=r(Lkt,"luke"),Lkt.forEach(t),KKo=r(vDe," \u2014 "),xW=n(vDe,"A",{href:!0});var ykt=s(xW);ZKo=r(ykt,"LukeForSequenceClassification"),ykt.forEach(t),eZo=r(vDe," (LUKE model)"),vDe.forEach(t),oZo=i(D),$F=n(D,"LI",{});var FDe=s($F);Hve=n(FDe,"STRONG",{});var xkt=s(Hve);rZo=r(xkt,"mbart"),xkt.forEach(t),tZo=r(FDe," \u2014 "),$W=n(FDe,"A",{href:!0});var $kt=s($W);aZo=r($kt,"MBartForSequenceClassification"),$kt.forEach(t),nZo=r(FDe," (mBART model)"),FDe.forEach(t),sZo=i(D),kF=n(D,"LI",{});var TDe=s(kF);Jve=n(TDe,"STRONG",{});var kkt=s(Jve);lZo=r(kkt,"megatron-bert"),kkt.forEach(t),iZo=r(TDe," \u2014 "),kW=n(TDe,"A",{href:!0});var Skt=s(kW);dZo=r(Skt,"MegatronBertForSequenceClassification"),Skt.forEach(t),cZo=r(TDe," (Megatron-BERT model)"),TDe.forEach(t),mZo=i(D),SF=n(D,"LI",{});var MDe=s(SF);Yve=n(MDe,"STRONG",{});var Rkt=s(Yve);fZo=r(Rkt,"mobilebert"),Rkt.forEach(t),gZo=r(MDe," \u2014 "),SW=n(MDe,"A",{href:!0});var Pkt=s(SW);hZo=r(Pkt,"MobileBertForSequenceClassification"),Pkt.forEach(t),uZo=r(MDe," (MobileBERT model)"),MDe.forEach(t),pZo=i(D),RF=n(D,"LI",{});var EDe=s(RF);Kve=n(EDe,"STRONG",{});var Bkt=s(Kve);_Zo=r(Bkt,"mpnet"),Bkt.forEach(t),bZo=r(EDe," \u2014 "),RW=n(EDe,"A",{href:!0});var Ikt=s(RW);vZo=r(Ikt,"MPNetForSequenceClassification"),Ikt.forEach(t),FZo=r(EDe," (MPNet model)"),EDe.forEach(t),TZo=i(D),PF=n(D,"LI",{});var CDe=s(PF);Zve=n(CDe,"STRONG",{});var Nkt=s(Zve);MZo=r(Nkt,"mvp"),Nkt.forEach(t),EZo=r(CDe," \u2014 "),PW=n(CDe,"A",{href:!0});var qkt=s(PW);CZo=r(qkt,"MvpForSequenceClassification"),qkt.forEach(t),wZo=r(CDe," (MVP model)"),CDe.forEach(t),AZo=i(D),BF=n(D,"LI",{});var wDe=s(BF);e1e=n(wDe,"STRONG",{});var jkt=s(e1e);LZo=r(jkt,"nezha"),jkt.forEach(t),yZo=r(wDe," \u2014 "),BW=n(wDe,"A",{href:!0});var Dkt=s(BW);xZo=r(Dkt,"NezhaForSequenceClassification"),Dkt.forEach(t),$Zo=r(wDe," (Nezha model)"),wDe.forEach(t),kZo=i(D),IF=n(D,"LI",{});var ADe=s(IF);o1e=n(ADe,"STRONG",{});var Gkt=s(o1e);SZo=r(Gkt,"nystromformer"),Gkt.forEach(t),RZo=r(ADe," \u2014 "),IW=n(ADe,"A",{href:!0});var Okt=s(IW);PZo=r(Okt,"NystromformerForSequenceClassification"),Okt.forEach(t),BZo=r(ADe," (Nystr\xF6mformer model)"),ADe.forEach(t),IZo=i(D),NF=n(D,"LI",{});var LDe=s(NF);r1e=n(LDe,"STRONG",{});var Vkt=s(r1e);NZo=r(Vkt,"openai-gpt"),Vkt.forEach(t),qZo=r(LDe," \u2014 "),NW=n(LDe,"A",{href:!0});var Xkt=s(NW);jZo=r(Xkt,"OpenAIGPTForSequenceClassification"),Xkt.forEach(t),DZo=r(LDe," (OpenAI GPT model)"),LDe.forEach(t),GZo=i(D),qF=n(D,"LI",{});var yDe=s(qF);t1e=n(yDe,"STRONG",{});var zkt=s(t1e);OZo=r(zkt,"opt"),zkt.forEach(t),VZo=r(yDe," \u2014 "),qW=n(yDe,"A",{href:!0});var Qkt=s(qW);XZo=r(Qkt,"OPTForSequenceClassification"),Qkt.forEach(t),zZo=r(yDe," (OPT model)"),yDe.forEach(t),QZo=i(D),jF=n(D,"LI",{});var xDe=s(jF);a1e=n(xDe,"STRONG",{});var Wkt=s(a1e);WZo=r(Wkt,"perceiver"),Wkt.forEach(t),UZo=r(xDe," \u2014 "),jW=n(xDe,"A",{href:!0});var Ukt=s(jW);HZo=r(Ukt,"PerceiverForSequenceClassification"),Ukt.forEach(t),JZo=r(xDe," (Perceiver model)"),xDe.forEach(t),YZo=i(D),DF=n(D,"LI",{});var $De=s(DF);n1e=n($De,"STRONG",{});var Hkt=s(n1e);KZo=r(Hkt,"plbart"),Hkt.forEach(t),ZZo=r($De," \u2014 "),DW=n($De,"A",{href:!0});var Jkt=s(DW);eer=r(Jkt,"PLBartForSequenceClassification"),Jkt.forEach(t),oer=r($De," (PLBart model)"),$De.forEach(t),rer=i(D),GF=n(D,"LI",{});var kDe=s(GF);s1e=n(kDe,"STRONG",{});var Ykt=s(s1e);ter=r(Ykt,"qdqbert"),Ykt.forEach(t),aer=r(kDe," \u2014 "),GW=n(kDe,"A",{href:!0});var Kkt=s(GW);ner=r(Kkt,"QDQBertForSequenceClassification"),Kkt.forEach(t),ser=r(kDe," (QDQBert model)"),kDe.forEach(t),ler=i(D),OF=n(D,"LI",{});var SDe=s(OF);l1e=n(SDe,"STRONG",{});var Zkt=s(l1e);ier=r(Zkt,"reformer"),Zkt.forEach(t),der=r(SDe," \u2014 "),OW=n(SDe,"A",{href:!0});var eSt=s(OW);cer=r(eSt,"ReformerForSequenceClassification"),eSt.forEach(t),mer=r(SDe," (Reformer model)"),SDe.forEach(t),fer=i(D),VF=n(D,"LI",{});var RDe=s(VF);i1e=n(RDe,"STRONG",{});var oSt=s(i1e);ger=r(oSt,"rembert"),oSt.forEach(t),her=r(RDe," \u2014 "),VW=n(RDe,"A",{href:!0});var rSt=s(VW);uer=r(rSt,"RemBertForSequenceClassification"),rSt.forEach(t),per=r(RDe," (RemBERT model)"),RDe.forEach(t),_er=i(D),XF=n(D,"LI",{});var PDe=s(XF);d1e=n(PDe,"STRONG",{});var tSt=s(d1e);ber=r(tSt,"roberta"),tSt.forEach(t),ver=r(PDe," \u2014 "),XW=n(PDe,"A",{href:!0});var aSt=s(XW);Fer=r(aSt,"RobertaForSequenceClassification"),aSt.forEach(t),Ter=r(PDe," (RoBERTa model)"),PDe.forEach(t),Mer=i(D),zF=n(D,"LI",{});var BDe=s(zF);c1e=n(BDe,"STRONG",{});var nSt=s(c1e);Eer=r(nSt,"roformer"),nSt.forEach(t),Cer=r(BDe," \u2014 "),zW=n(BDe,"A",{href:!0});var sSt=s(zW);wer=r(sSt,"RoFormerForSequenceClassification"),sSt.forEach(t),Aer=r(BDe," (RoFormer model)"),BDe.forEach(t),Ler=i(D),QF=n(D,"LI",{});var IDe=s(QF);m1e=n(IDe,"STRONG",{});var lSt=s(m1e);yer=r(lSt,"squeezebert"),lSt.forEach(t),xer=r(IDe," \u2014 "),QW=n(IDe,"A",{href:!0});var iSt=s(QW);$er=r(iSt,"SqueezeBertForSequenceClassification"),iSt.forEach(t),ker=r(IDe," (SqueezeBERT model)"),IDe.forEach(t),Ser=i(D),WF=n(D,"LI",{});var NDe=s(WF);f1e=n(NDe,"STRONG",{});var dSt=s(f1e);Rer=r(dSt,"tapas"),dSt.forEach(t),Per=r(NDe," \u2014 "),WW=n(NDe,"A",{href:!0});var cSt=s(WW);Ber=r(cSt,"TapasForSequenceClassification"),cSt.forEach(t),Ier=r(NDe," (TAPAS model)"),NDe.forEach(t),Ner=i(D),UF=n(D,"LI",{});var qDe=s(UF);g1e=n(qDe,"STRONG",{});var mSt=s(g1e);qer=r(mSt,"transfo-xl"),mSt.forEach(t),jer=r(qDe," \u2014 "),UW=n(qDe,"A",{href:!0});var fSt=s(UW);Der=r(fSt,"TransfoXLForSequenceClassification"),fSt.forEach(t),Ger=r(qDe," (Transformer-XL model)"),qDe.forEach(t),Oer=i(D),HF=n(D,"LI",{});var jDe=s(HF);h1e=n(jDe,"STRONG",{});var gSt=s(h1e);Ver=r(gSt,"xlm"),gSt.forEach(t),Xer=r(jDe," \u2014 "),HW=n(jDe,"A",{href:!0});var hSt=s(HW);zer=r(hSt,"XLMForSequenceClassification"),hSt.forEach(t),Qer=r(jDe," (XLM model)"),jDe.forEach(t),Wer=i(D),JF=n(D,"LI",{});var DDe=s(JF);u1e=n(DDe,"STRONG",{});var uSt=s(u1e);Uer=r(uSt,"xlm-roberta"),uSt.forEach(t),Her=r(DDe," \u2014 "),JW=n(DDe,"A",{href:!0});var pSt=s(JW);Jer=r(pSt,"XLMRobertaForSequenceClassification"),pSt.forEach(t),Yer=r(DDe," (XLM-RoBERTa model)"),DDe.forEach(t),Ker=i(D),YF=n(D,"LI",{});var GDe=s(YF);p1e=n(GDe,"STRONG",{});var _St=s(p1e);Zer=r(_St,"xlm-roberta-xl"),_St.forEach(t),eor=r(GDe," \u2014 "),YW=n(GDe,"A",{href:!0});var bSt=s(YW);oor=r(bSt,"XLMRobertaXLForSequenceClassification"),bSt.forEach(t),ror=r(GDe," (XLM-RoBERTa-XL model)"),GDe.forEach(t),tor=i(D),KF=n(D,"LI",{});var ODe=s(KF);_1e=n(ODe,"STRONG",{});var vSt=s(_1e);aor=r(vSt,"xlnet"),vSt.forEach(t),nor=r(ODe," \u2014 "),KW=n(ODe,"A",{href:!0});var FSt=s(KW);sor=r(FSt,"XLNetForSequenceClassification"),FSt.forEach(t),lor=r(ODe," (XLNet model)"),ODe.forEach(t),ior=i(D),ZF=n(D,"LI",{});var VDe=s(ZF);b1e=n(VDe,"STRONG",{});var TSt=s(b1e);dor=r(TSt,"yoso"),TSt.forEach(t),cor=r(VDe," \u2014 "),ZW=n(VDe,"A",{href:!0});var MSt=s(ZW);mor=r(MSt,"YosoForSequenceClassification"),MSt.forEach(t),gor=r(VDe," (YOSO model)"),VDe.forEach(t),D.forEach(t),hor=i(Ca),eT=n(Ca,"P",{});var XDe=s(eT);uor=r(XDe,"The model is set in evaluation mode by default using "),v1e=n(XDe,"CODE",{});var ESt=s(v1e);por=r(ESt,"model.eval()"),ESt.forEach(t),_or=r(XDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=n(XDe,"CODE",{});var CSt=s(F1e);bor=r(CSt,"model.train()"),CSt.forEach(t),XDe.forEach(t),vor=i(Ca),T(oT.$$.fragment,Ca),Ca.forEach(t),xl.forEach(t),mYe=i(m),Rd=n(m,"H2",{class:!0});var wZe=s(Rd);rT=n(wZe,"A",{id:!0,class:!0,href:!0});var wSt=s(rT);T1e=n(wSt,"SPAN",{});var ASt=s(T1e);T(hx.$$.fragment,ASt),ASt.forEach(t),wSt.forEach(t),For=i(wZe),M1e=n(wZe,"SPAN",{});var LSt=s(M1e);Tor=r(LSt,"AutoModelForMultipleChoice"),LSt.forEach(t),wZe.forEach(t),fYe=i(m),jo=n(m,"DIV",{class:!0});var $l=s(jo);T(ux.$$.fragment,$l),Mor=i($l),Pd=n($l,"P",{});var Bse=s(Pd);Eor=r(Bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eU=n(Bse,"A",{href:!0});var ySt=s(eU);Cor=r(ySt,"from_pretrained()"),ySt.forEach(t),wor=r(Bse," class method or the "),oU=n(Bse,"A",{href:!0});var xSt=s(oU);Aor=r(xSt,"from_config()"),xSt.forEach(t),Lor=r(Bse,` class
method.`),Bse.forEach(t),yor=i($l),px=n($l,"P",{});var AZe=s(px);xor=r(AZe,"This class cannot be instantiated directly using "),E1e=n(AZe,"CODE",{});var $St=s(E1e);$or=r($St,"__init__()"),$St.forEach(t),kor=r(AZe," (throws an error)."),AZe.forEach(t),Sor=i($l),Mt=n($l,"DIV",{class:!0});var vy=s(Mt);T(_x.$$.fragment,vy),Ror=i(vy),C1e=n(vy,"P",{});var kSt=s(C1e);Por=r(kSt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kSt.forEach(t),Bor=i(vy),Bd=n(vy,"P",{});var Ise=s(Bd);Ior=r(Ise,`Note:
Loading a model from its configuration file does `),w1e=n(Ise,"STRONG",{});var SSt=s(w1e);Nor=r(SSt,"not"),SSt.forEach(t),qor=r(Ise,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(Ise,"A",{href:!0});var RSt=s(rU);jor=r(RSt,"from_pretrained()"),RSt.forEach(t),Dor=r(Ise," to load the model weights."),Ise.forEach(t),Gor=i(vy),T(tT.$$.fragment,vy),vy.forEach(t),Oor=i($l),ao=n($l,"DIV",{class:!0});var wa=s(ao);T(bx.$$.fragment,wa),Vor=i(wa),A1e=n(wa,"P",{});var PSt=s(A1e);Xor=r(PSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),PSt.forEach(t),zor=i(wa),rn=n(wa,"P",{});var Fy=s(rn);Qor=r(Fy,"The model class to instantiate is selected based on the "),L1e=n(Fy,"CODE",{});var BSt=s(L1e);Wor=r(BSt,"model_type"),BSt.forEach(t),Uor=r(Fy,` property of the config object (either
passed as an argument or loaded from `),y1e=n(Fy,"CODE",{});var ISt=s(y1e);Hor=r(ISt,"pretrained_model_name_or_path"),ISt.forEach(t),Jor=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(Fy,"CODE",{});var NSt=s(x1e);Yor=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),Kor=r(Fy,":"),Fy.forEach(t),Zor=i(wa),Z=n(wa,"UL",{});var ee=s(Z);aT=n(ee,"LI",{});var zDe=s(aT);$1e=n(zDe,"STRONG",{});var qSt=s($1e);err=r(qSt,"albert"),qSt.forEach(t),orr=r(zDe," \u2014 "),tU=n(zDe,"A",{href:!0});var jSt=s(tU);rrr=r(jSt,"AlbertForMultipleChoice"),jSt.forEach(t),trr=r(zDe," (ALBERT model)"),zDe.forEach(t),arr=i(ee),nT=n(ee,"LI",{});var QDe=s(nT);k1e=n(QDe,"STRONG",{});var DSt=s(k1e);nrr=r(DSt,"bert"),DSt.forEach(t),srr=r(QDe," \u2014 "),aU=n(QDe,"A",{href:!0});var GSt=s(aU);lrr=r(GSt,"BertForMultipleChoice"),GSt.forEach(t),irr=r(QDe," (BERT model)"),QDe.forEach(t),drr=i(ee),sT=n(ee,"LI",{});var WDe=s(sT);S1e=n(WDe,"STRONG",{});var OSt=s(S1e);crr=r(OSt,"big_bird"),OSt.forEach(t),mrr=r(WDe," \u2014 "),nU=n(WDe,"A",{href:!0});var VSt=s(nU);frr=r(VSt,"BigBirdForMultipleChoice"),VSt.forEach(t),grr=r(WDe," (BigBird model)"),WDe.forEach(t),hrr=i(ee),lT=n(ee,"LI",{});var UDe=s(lT);R1e=n(UDe,"STRONG",{});var XSt=s(R1e);urr=r(XSt,"camembert"),XSt.forEach(t),prr=r(UDe," \u2014 "),sU=n(UDe,"A",{href:!0});var zSt=s(sU);_rr=r(zSt,"CamembertForMultipleChoice"),zSt.forEach(t),brr=r(UDe," (CamemBERT model)"),UDe.forEach(t),vrr=i(ee),iT=n(ee,"LI",{});var HDe=s(iT);P1e=n(HDe,"STRONG",{});var QSt=s(P1e);Frr=r(QSt,"canine"),QSt.forEach(t),Trr=r(HDe," \u2014 "),lU=n(HDe,"A",{href:!0});var WSt=s(lU);Mrr=r(WSt,"CanineForMultipleChoice"),WSt.forEach(t),Err=r(HDe," (CANINE model)"),HDe.forEach(t),Crr=i(ee),dT=n(ee,"LI",{});var JDe=s(dT);B1e=n(JDe,"STRONG",{});var USt=s(B1e);wrr=r(USt,"convbert"),USt.forEach(t),Arr=r(JDe," \u2014 "),iU=n(JDe,"A",{href:!0});var HSt=s(iU);Lrr=r(HSt,"ConvBertForMultipleChoice"),HSt.forEach(t),yrr=r(JDe," (ConvBERT model)"),JDe.forEach(t),xrr=i(ee),cT=n(ee,"LI",{});var YDe=s(cT);I1e=n(YDe,"STRONG",{});var JSt=s(I1e);$rr=r(JSt,"data2vec-text"),JSt.forEach(t),krr=r(YDe," \u2014 "),dU=n(YDe,"A",{href:!0});var YSt=s(dU);Srr=r(YSt,"Data2VecTextForMultipleChoice"),YSt.forEach(t),Rrr=r(YDe," (Data2VecText model)"),YDe.forEach(t),Prr=i(ee),mT=n(ee,"LI",{});var KDe=s(mT);N1e=n(KDe,"STRONG",{});var KSt=s(N1e);Brr=r(KSt,"deberta-v2"),KSt.forEach(t),Irr=r(KDe," \u2014 "),cU=n(KDe,"A",{href:!0});var ZSt=s(cU);Nrr=r(ZSt,"DebertaV2ForMultipleChoice"),ZSt.forEach(t),qrr=r(KDe," (DeBERTa-v2 model)"),KDe.forEach(t),jrr=i(ee),fT=n(ee,"LI",{});var ZDe=s(fT);q1e=n(ZDe,"STRONG",{});var eRt=s(q1e);Drr=r(eRt,"distilbert"),eRt.forEach(t),Grr=r(ZDe," \u2014 "),mU=n(ZDe,"A",{href:!0});var oRt=s(mU);Orr=r(oRt,"DistilBertForMultipleChoice"),oRt.forEach(t),Vrr=r(ZDe," (DistilBERT model)"),ZDe.forEach(t),Xrr=i(ee),gT=n(ee,"LI",{});var eGe=s(gT);j1e=n(eGe,"STRONG",{});var rRt=s(j1e);zrr=r(rRt,"electra"),rRt.forEach(t),Qrr=r(eGe," \u2014 "),fU=n(eGe,"A",{href:!0});var tRt=s(fU);Wrr=r(tRt,"ElectraForMultipleChoice"),tRt.forEach(t),Urr=r(eGe," (ELECTRA model)"),eGe.forEach(t),Hrr=i(ee),hT=n(ee,"LI",{});var oGe=s(hT);D1e=n(oGe,"STRONG",{});var aRt=s(D1e);Jrr=r(aRt,"flaubert"),aRt.forEach(t),Yrr=r(oGe," \u2014 "),gU=n(oGe,"A",{href:!0});var nRt=s(gU);Krr=r(nRt,"FlaubertForMultipleChoice"),nRt.forEach(t),Zrr=r(oGe," (FlauBERT model)"),oGe.forEach(t),etr=i(ee),uT=n(ee,"LI",{});var rGe=s(uT);G1e=n(rGe,"STRONG",{});var sRt=s(G1e);otr=r(sRt,"fnet"),sRt.forEach(t),rtr=r(rGe," \u2014 "),hU=n(rGe,"A",{href:!0});var lRt=s(hU);ttr=r(lRt,"FNetForMultipleChoice"),lRt.forEach(t),atr=r(rGe," (FNet model)"),rGe.forEach(t),ntr=i(ee),pT=n(ee,"LI",{});var tGe=s(pT);O1e=n(tGe,"STRONG",{});var iRt=s(O1e);str=r(iRt,"funnel"),iRt.forEach(t),ltr=r(tGe," \u2014 "),uU=n(tGe,"A",{href:!0});var dRt=s(uU);itr=r(dRt,"FunnelForMultipleChoice"),dRt.forEach(t),dtr=r(tGe," (Funnel Transformer model)"),tGe.forEach(t),ctr=i(ee),_T=n(ee,"LI",{});var aGe=s(_T);V1e=n(aGe,"STRONG",{});var cRt=s(V1e);mtr=r(cRt,"ibert"),cRt.forEach(t),ftr=r(aGe," \u2014 "),pU=n(aGe,"A",{href:!0});var mRt=s(pU);gtr=r(mRt,"IBertForMultipleChoice"),mRt.forEach(t),htr=r(aGe," (I-BERT model)"),aGe.forEach(t),utr=i(ee),bT=n(ee,"LI",{});var nGe=s(bT);X1e=n(nGe,"STRONG",{});var fRt=s(X1e);ptr=r(fRt,"longformer"),fRt.forEach(t),_tr=r(nGe," \u2014 "),_U=n(nGe,"A",{href:!0});var gRt=s(_U);btr=r(gRt,"LongformerForMultipleChoice"),gRt.forEach(t),vtr=r(nGe," (Longformer model)"),nGe.forEach(t),Ftr=i(ee),vT=n(ee,"LI",{});var sGe=s(vT);z1e=n(sGe,"STRONG",{});var hRt=s(z1e);Ttr=r(hRt,"luke"),hRt.forEach(t),Mtr=r(sGe," \u2014 "),bU=n(sGe,"A",{href:!0});var uRt=s(bU);Etr=r(uRt,"LukeForMultipleChoice"),uRt.forEach(t),Ctr=r(sGe," (LUKE model)"),sGe.forEach(t),wtr=i(ee),FT=n(ee,"LI",{});var lGe=s(FT);Q1e=n(lGe,"STRONG",{});var pRt=s(Q1e);Atr=r(pRt,"megatron-bert"),pRt.forEach(t),Ltr=r(lGe," \u2014 "),vU=n(lGe,"A",{href:!0});var _Rt=s(vU);ytr=r(_Rt,"MegatronBertForMultipleChoice"),_Rt.forEach(t),xtr=r(lGe," (Megatron-BERT model)"),lGe.forEach(t),$tr=i(ee),TT=n(ee,"LI",{});var iGe=s(TT);W1e=n(iGe,"STRONG",{});var bRt=s(W1e);ktr=r(bRt,"mobilebert"),bRt.forEach(t),Str=r(iGe," \u2014 "),FU=n(iGe,"A",{href:!0});var vRt=s(FU);Rtr=r(vRt,"MobileBertForMultipleChoice"),vRt.forEach(t),Ptr=r(iGe," (MobileBERT model)"),iGe.forEach(t),Btr=i(ee),MT=n(ee,"LI",{});var dGe=s(MT);U1e=n(dGe,"STRONG",{});var FRt=s(U1e);Itr=r(FRt,"mpnet"),FRt.forEach(t),Ntr=r(dGe," \u2014 "),TU=n(dGe,"A",{href:!0});var TRt=s(TU);qtr=r(TRt,"MPNetForMultipleChoice"),TRt.forEach(t),jtr=r(dGe," (MPNet model)"),dGe.forEach(t),Dtr=i(ee),ET=n(ee,"LI",{});var cGe=s(ET);H1e=n(cGe,"STRONG",{});var MRt=s(H1e);Gtr=r(MRt,"nezha"),MRt.forEach(t),Otr=r(cGe," \u2014 "),MU=n(cGe,"A",{href:!0});var ERt=s(MU);Vtr=r(ERt,"NezhaForMultipleChoice"),ERt.forEach(t),Xtr=r(cGe," (Nezha model)"),cGe.forEach(t),ztr=i(ee),CT=n(ee,"LI",{});var mGe=s(CT);J1e=n(mGe,"STRONG",{});var CRt=s(J1e);Qtr=r(CRt,"nystromformer"),CRt.forEach(t),Wtr=r(mGe," \u2014 "),EU=n(mGe,"A",{href:!0});var wRt=s(EU);Utr=r(wRt,"NystromformerForMultipleChoice"),wRt.forEach(t),Htr=r(mGe," (Nystr\xF6mformer model)"),mGe.forEach(t),Jtr=i(ee),wT=n(ee,"LI",{});var fGe=s(wT);Y1e=n(fGe,"STRONG",{});var ARt=s(Y1e);Ytr=r(ARt,"qdqbert"),ARt.forEach(t),Ktr=r(fGe," \u2014 "),CU=n(fGe,"A",{href:!0});var LRt=s(CU);Ztr=r(LRt,"QDQBertForMultipleChoice"),LRt.forEach(t),ear=r(fGe," (QDQBert model)"),fGe.forEach(t),oar=i(ee),AT=n(ee,"LI",{});var gGe=s(AT);K1e=n(gGe,"STRONG",{});var yRt=s(K1e);rar=r(yRt,"rembert"),yRt.forEach(t),tar=r(gGe," \u2014 "),wU=n(gGe,"A",{href:!0});var xRt=s(wU);aar=r(xRt,"RemBertForMultipleChoice"),xRt.forEach(t),nar=r(gGe," (RemBERT model)"),gGe.forEach(t),sar=i(ee),LT=n(ee,"LI",{});var hGe=s(LT);Z1e=n(hGe,"STRONG",{});var $Rt=s(Z1e);lar=r($Rt,"roberta"),$Rt.forEach(t),iar=r(hGe," \u2014 "),AU=n(hGe,"A",{href:!0});var kRt=s(AU);dar=r(kRt,"RobertaForMultipleChoice"),kRt.forEach(t),car=r(hGe," (RoBERTa model)"),hGe.forEach(t),mar=i(ee),yT=n(ee,"LI",{});var uGe=s(yT);eFe=n(uGe,"STRONG",{});var SRt=s(eFe);far=r(SRt,"roformer"),SRt.forEach(t),gar=r(uGe," \u2014 "),LU=n(uGe,"A",{href:!0});var RRt=s(LU);har=r(RRt,"RoFormerForMultipleChoice"),RRt.forEach(t),uar=r(uGe," (RoFormer model)"),uGe.forEach(t),par=i(ee),xT=n(ee,"LI",{});var pGe=s(xT);oFe=n(pGe,"STRONG",{});var PRt=s(oFe);_ar=r(PRt,"squeezebert"),PRt.forEach(t),bar=r(pGe," \u2014 "),yU=n(pGe,"A",{href:!0});var BRt=s(yU);Far=r(BRt,"SqueezeBertForMultipleChoice"),BRt.forEach(t),Tar=r(pGe," (SqueezeBERT model)"),pGe.forEach(t),Mar=i(ee),$T=n(ee,"LI",{});var _Ge=s($T);rFe=n(_Ge,"STRONG",{});var IRt=s(rFe);Ear=r(IRt,"xlm"),IRt.forEach(t),Car=r(_Ge," \u2014 "),xU=n(_Ge,"A",{href:!0});var NRt=s(xU);war=r(NRt,"XLMForMultipleChoice"),NRt.forEach(t),Aar=r(_Ge," (XLM model)"),_Ge.forEach(t),Lar=i(ee),kT=n(ee,"LI",{});var bGe=s(kT);tFe=n(bGe,"STRONG",{});var qRt=s(tFe);yar=r(qRt,"xlm-roberta"),qRt.forEach(t),xar=r(bGe," \u2014 "),$U=n(bGe,"A",{href:!0});var jRt=s($U);$ar=r(jRt,"XLMRobertaForMultipleChoice"),jRt.forEach(t),kar=r(bGe," (XLM-RoBERTa model)"),bGe.forEach(t),Sar=i(ee),ST=n(ee,"LI",{});var vGe=s(ST);aFe=n(vGe,"STRONG",{});var DRt=s(aFe);Rar=r(DRt,"xlm-roberta-xl"),DRt.forEach(t),Par=r(vGe," \u2014 "),kU=n(vGe,"A",{href:!0});var GRt=s(kU);Bar=r(GRt,"XLMRobertaXLForMultipleChoice"),GRt.forEach(t),Iar=r(vGe," (XLM-RoBERTa-XL model)"),vGe.forEach(t),Nar=i(ee),RT=n(ee,"LI",{});var FGe=s(RT);nFe=n(FGe,"STRONG",{});var ORt=s(nFe);qar=r(ORt,"xlnet"),ORt.forEach(t),jar=r(FGe," \u2014 "),SU=n(FGe,"A",{href:!0});var VRt=s(SU);Dar=r(VRt,"XLNetForMultipleChoice"),VRt.forEach(t),Gar=r(FGe," (XLNet model)"),FGe.forEach(t),Oar=i(ee),PT=n(ee,"LI",{});var TGe=s(PT);sFe=n(TGe,"STRONG",{});var XRt=s(sFe);Var=r(XRt,"yoso"),XRt.forEach(t),Xar=r(TGe," \u2014 "),RU=n(TGe,"A",{href:!0});var zRt=s(RU);zar=r(zRt,"YosoForMultipleChoice"),zRt.forEach(t),Qar=r(TGe," (YOSO model)"),TGe.forEach(t),ee.forEach(t),War=i(wa),BT=n(wa,"P",{});var MGe=s(BT);Uar=r(MGe,"The model is set in evaluation mode by default using "),lFe=n(MGe,"CODE",{});var QRt=s(lFe);Har=r(QRt,"model.eval()"),QRt.forEach(t),Jar=r(MGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=n(MGe,"CODE",{});var WRt=s(iFe);Yar=r(WRt,"model.train()"),WRt.forEach(t),MGe.forEach(t),Kar=i(wa),T(IT.$$.fragment,wa),wa.forEach(t),$l.forEach(t),gYe=i(m),Id=n(m,"H2",{class:!0});var LZe=s(Id);NT=n(LZe,"A",{id:!0,class:!0,href:!0});var URt=s(NT);dFe=n(URt,"SPAN",{});var HRt=s(dFe);T(vx.$$.fragment,HRt),HRt.forEach(t),URt.forEach(t),Zar=i(LZe),cFe=n(LZe,"SPAN",{});var JRt=s(cFe);enr=r(JRt,"AutoModelForNextSentencePrediction"),JRt.forEach(t),LZe.forEach(t),hYe=i(m),Do=n(m,"DIV",{class:!0});var kl=s(Do);T(Fx.$$.fragment,kl),onr=i(kl),Nd=n(kl,"P",{});var Nse=s(Nd);rnr=r(Nse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PU=n(Nse,"A",{href:!0});var YRt=s(PU);tnr=r(YRt,"from_pretrained()"),YRt.forEach(t),anr=r(Nse," class method or the "),BU=n(Nse,"A",{href:!0});var KRt=s(BU);nnr=r(KRt,"from_config()"),KRt.forEach(t),snr=r(Nse,` class
method.`),Nse.forEach(t),lnr=i(kl),Tx=n(kl,"P",{});var yZe=s(Tx);inr=r(yZe,"This class cannot be instantiated directly using "),mFe=n(yZe,"CODE",{});var ZRt=s(mFe);dnr=r(ZRt,"__init__()"),ZRt.forEach(t),cnr=r(yZe," (throws an error)."),yZe.forEach(t),mnr=i(kl),Et=n(kl,"DIV",{class:!0});var Ty=s(Et);T(Mx.$$.fragment,Ty),fnr=i(Ty),fFe=n(Ty,"P",{});var ePt=s(fFe);gnr=r(ePt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ePt.forEach(t),hnr=i(Ty),qd=n(Ty,"P",{});var qse=s(qd);unr=r(qse,`Note:
Loading a model from its configuration file does `),gFe=n(qse,"STRONG",{});var oPt=s(gFe);pnr=r(oPt,"not"),oPt.forEach(t),_nr=r(qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(qse,"A",{href:!0});var rPt=s(IU);bnr=r(rPt,"from_pretrained()"),rPt.forEach(t),vnr=r(qse," to load the model weights."),qse.forEach(t),Fnr=i(Ty),T(qT.$$.fragment,Ty),Ty.forEach(t),Tnr=i(kl),no=n(kl,"DIV",{class:!0});var Aa=s(no);T(Ex.$$.fragment,Aa),Mnr=i(Aa),hFe=n(Aa,"P",{});var tPt=s(hFe);Enr=r(tPt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tPt.forEach(t),Cnr=i(Aa),tn=n(Aa,"P",{});var My=s(tn);wnr=r(My,"The model class to instantiate is selected based on the "),uFe=n(My,"CODE",{});var aPt=s(uFe);Anr=r(aPt,"model_type"),aPt.forEach(t),Lnr=r(My,` property of the config object (either
passed as an argument or loaded from `),pFe=n(My,"CODE",{});var nPt=s(pFe);ynr=r(nPt,"pretrained_model_name_or_path"),nPt.forEach(t),xnr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(My,"CODE",{});var sPt=s(_Fe);$nr=r(sPt,"pretrained_model_name_or_path"),sPt.forEach(t),knr=r(My,":"),My.forEach(t),Snr=i(Aa),Go=n(Aa,"UL",{});var La=s(Go);jT=n(La,"LI",{});var EGe=s(jT);bFe=n(EGe,"STRONG",{});var lPt=s(bFe);Rnr=r(lPt,"bert"),lPt.forEach(t),Pnr=r(EGe," \u2014 "),NU=n(EGe,"A",{href:!0});var iPt=s(NU);Bnr=r(iPt,"BertForNextSentencePrediction"),iPt.forEach(t),Inr=r(EGe," (BERT model)"),EGe.forEach(t),Nnr=i(La),DT=n(La,"LI",{});var CGe=s(DT);vFe=n(CGe,"STRONG",{});var dPt=s(vFe);qnr=r(dPt,"fnet"),dPt.forEach(t),jnr=r(CGe," \u2014 "),qU=n(CGe,"A",{href:!0});var cPt=s(qU);Dnr=r(cPt,"FNetForNextSentencePrediction"),cPt.forEach(t),Gnr=r(CGe," (FNet model)"),CGe.forEach(t),Onr=i(La),GT=n(La,"LI",{});var wGe=s(GT);FFe=n(wGe,"STRONG",{});var mPt=s(FFe);Vnr=r(mPt,"megatron-bert"),mPt.forEach(t),Xnr=r(wGe," \u2014 "),jU=n(wGe,"A",{href:!0});var fPt=s(jU);znr=r(fPt,"MegatronBertForNextSentencePrediction"),fPt.forEach(t),Qnr=r(wGe," (Megatron-BERT model)"),wGe.forEach(t),Wnr=i(La),OT=n(La,"LI",{});var AGe=s(OT);TFe=n(AGe,"STRONG",{});var gPt=s(TFe);Unr=r(gPt,"mobilebert"),gPt.forEach(t),Hnr=r(AGe," \u2014 "),DU=n(AGe,"A",{href:!0});var hPt=s(DU);Jnr=r(hPt,"MobileBertForNextSentencePrediction"),hPt.forEach(t),Ynr=r(AGe," (MobileBERT model)"),AGe.forEach(t),Knr=i(La),VT=n(La,"LI",{});var LGe=s(VT);MFe=n(LGe,"STRONG",{});var uPt=s(MFe);Znr=r(uPt,"nezha"),uPt.forEach(t),esr=r(LGe," \u2014 "),GU=n(LGe,"A",{href:!0});var pPt=s(GU);osr=r(pPt,"NezhaForNextSentencePrediction"),pPt.forEach(t),rsr=r(LGe," (Nezha model)"),LGe.forEach(t),tsr=i(La),XT=n(La,"LI",{});var yGe=s(XT);EFe=n(yGe,"STRONG",{});var _Pt=s(EFe);asr=r(_Pt,"qdqbert"),_Pt.forEach(t),nsr=r(yGe," \u2014 "),OU=n(yGe,"A",{href:!0});var bPt=s(OU);ssr=r(bPt,"QDQBertForNextSentencePrediction"),bPt.forEach(t),lsr=r(yGe," (QDQBert model)"),yGe.forEach(t),La.forEach(t),isr=i(Aa),zT=n(Aa,"P",{});var xGe=s(zT);dsr=r(xGe,"The model is set in evaluation mode by default using "),CFe=n(xGe,"CODE",{});var vPt=s(CFe);csr=r(vPt,"model.eval()"),vPt.forEach(t),msr=r(xGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wFe=n(xGe,"CODE",{});var FPt=s(wFe);fsr=r(FPt,"model.train()"),FPt.forEach(t),xGe.forEach(t),gsr=i(Aa),T(QT.$$.fragment,Aa),Aa.forEach(t),kl.forEach(t),uYe=i(m),jd=n(m,"H2",{class:!0});var xZe=s(jd);WT=n(xZe,"A",{id:!0,class:!0,href:!0});var TPt=s(WT);AFe=n(TPt,"SPAN",{});var MPt=s(AFe);T(Cx.$$.fragment,MPt),MPt.forEach(t),TPt.forEach(t),hsr=i(xZe),LFe=n(xZe,"SPAN",{});var EPt=s(LFe);usr=r(EPt,"AutoModelForTokenClassification"),EPt.forEach(t),xZe.forEach(t),pYe=i(m),Oo=n(m,"DIV",{class:!0});var Sl=s(Oo);T(wx.$$.fragment,Sl),psr=i(Sl),Dd=n(Sl,"P",{});var jse=s(Dd);_sr=r(jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VU=n(jse,"A",{href:!0});var CPt=s(VU);bsr=r(CPt,"from_pretrained()"),CPt.forEach(t),vsr=r(jse," class method or the "),XU=n(jse,"A",{href:!0});var wPt=s(XU);Fsr=r(wPt,"from_config()"),wPt.forEach(t),Tsr=r(jse,` class
method.`),jse.forEach(t),Msr=i(Sl),Ax=n(Sl,"P",{});var $Ze=s(Ax);Esr=r($Ze,"This class cannot be instantiated directly using "),yFe=n($Ze,"CODE",{});var APt=s(yFe);Csr=r(APt,"__init__()"),APt.forEach(t),wsr=r($Ze," (throws an error)."),$Ze.forEach(t),Asr=i(Sl),Ct=n(Sl,"DIV",{class:!0});var Ey=s(Ct);T(Lx.$$.fragment,Ey),Lsr=i(Ey),xFe=n(Ey,"P",{});var LPt=s(xFe);ysr=r(LPt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LPt.forEach(t),xsr=i(Ey),Gd=n(Ey,"P",{});var Dse=s(Gd);$sr=r(Dse,`Note:
Loading a model from its configuration file does `),$Fe=n(Dse,"STRONG",{});var yPt=s($Fe);ksr=r(yPt,"not"),yPt.forEach(t),Ssr=r(Dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(Dse,"A",{href:!0});var xPt=s(zU);Rsr=r(xPt,"from_pretrained()"),xPt.forEach(t),Psr=r(Dse," to load the model weights."),Dse.forEach(t),Bsr=i(Ey),T(UT.$$.fragment,Ey),Ey.forEach(t),Isr=i(Sl),so=n(Sl,"DIV",{class:!0});var ya=s(so);T(yx.$$.fragment,ya),Nsr=i(ya),kFe=n(ya,"P",{});var $Pt=s(kFe);qsr=r($Pt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$Pt.forEach(t),jsr=i(ya),an=n(ya,"P",{});var Cy=s(an);Dsr=r(Cy,"The model class to instantiate is selected based on the "),SFe=n(Cy,"CODE",{});var kPt=s(SFe);Gsr=r(kPt,"model_type"),kPt.forEach(t),Osr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),RFe=n(Cy,"CODE",{});var SPt=s(RFe);Vsr=r(SPt,"pretrained_model_name_or_path"),SPt.forEach(t),Xsr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(Cy,"CODE",{});var RPt=s(PFe);zsr=r(RPt,"pretrained_model_name_or_path"),RPt.forEach(t),Qsr=r(Cy,":"),Cy.forEach(t),Wsr=i(ya),J=n(ya,"UL",{});var K=s(J);HT=n(K,"LI",{});var $Ge=s(HT);BFe=n($Ge,"STRONG",{});var PPt=s(BFe);Usr=r(PPt,"albert"),PPt.forEach(t),Hsr=r($Ge," \u2014 "),QU=n($Ge,"A",{href:!0});var BPt=s(QU);Jsr=r(BPt,"AlbertForTokenClassification"),BPt.forEach(t),Ysr=r($Ge," (ALBERT model)"),$Ge.forEach(t),Ksr=i(K),JT=n(K,"LI",{});var kGe=s(JT);IFe=n(kGe,"STRONG",{});var IPt=s(IFe);Zsr=r(IPt,"bert"),IPt.forEach(t),elr=r(kGe," \u2014 "),WU=n(kGe,"A",{href:!0});var NPt=s(WU);olr=r(NPt,"BertForTokenClassification"),NPt.forEach(t),rlr=r(kGe," (BERT model)"),kGe.forEach(t),tlr=i(K),YT=n(K,"LI",{});var SGe=s(YT);NFe=n(SGe,"STRONG",{});var qPt=s(NFe);alr=r(qPt,"big_bird"),qPt.forEach(t),nlr=r(SGe," \u2014 "),UU=n(SGe,"A",{href:!0});var jPt=s(UU);slr=r(jPt,"BigBirdForTokenClassification"),jPt.forEach(t),llr=r(SGe," (BigBird model)"),SGe.forEach(t),ilr=i(K),KT=n(K,"LI",{});var RGe=s(KT);qFe=n(RGe,"STRONG",{});var DPt=s(qFe);dlr=r(DPt,"bloom"),DPt.forEach(t),clr=r(RGe," \u2014 "),HU=n(RGe,"A",{href:!0});var GPt=s(HU);mlr=r(GPt,"BloomForTokenClassification"),GPt.forEach(t),flr=r(RGe," (BLOOM model)"),RGe.forEach(t),glr=i(K),ZT=n(K,"LI",{});var PGe=s(ZT);jFe=n(PGe,"STRONG",{});var OPt=s(jFe);hlr=r(OPt,"camembert"),OPt.forEach(t),ulr=r(PGe," \u2014 "),JU=n(PGe,"A",{href:!0});var VPt=s(JU);plr=r(VPt,"CamembertForTokenClassification"),VPt.forEach(t),_lr=r(PGe," (CamemBERT model)"),PGe.forEach(t),blr=i(K),eM=n(K,"LI",{});var BGe=s(eM);DFe=n(BGe,"STRONG",{});var XPt=s(DFe);vlr=r(XPt,"canine"),XPt.forEach(t),Flr=r(BGe," \u2014 "),YU=n(BGe,"A",{href:!0});var zPt=s(YU);Tlr=r(zPt,"CanineForTokenClassification"),zPt.forEach(t),Mlr=r(BGe," (CANINE model)"),BGe.forEach(t),Elr=i(K),oM=n(K,"LI",{});var IGe=s(oM);GFe=n(IGe,"STRONG",{});var QPt=s(GFe);Clr=r(QPt,"convbert"),QPt.forEach(t),wlr=r(IGe," \u2014 "),KU=n(IGe,"A",{href:!0});var WPt=s(KU);Alr=r(WPt,"ConvBertForTokenClassification"),WPt.forEach(t),Llr=r(IGe," (ConvBERT model)"),IGe.forEach(t),ylr=i(K),rM=n(K,"LI",{});var NGe=s(rM);OFe=n(NGe,"STRONG",{});var UPt=s(OFe);xlr=r(UPt,"data2vec-text"),UPt.forEach(t),$lr=r(NGe," \u2014 "),ZU=n(NGe,"A",{href:!0});var HPt=s(ZU);klr=r(HPt,"Data2VecTextForTokenClassification"),HPt.forEach(t),Slr=r(NGe," (Data2VecText model)"),NGe.forEach(t),Rlr=i(K),tM=n(K,"LI",{});var qGe=s(tM);VFe=n(qGe,"STRONG",{});var JPt=s(VFe);Plr=r(JPt,"deberta"),JPt.forEach(t),Blr=r(qGe," \u2014 "),eH=n(qGe,"A",{href:!0});var YPt=s(eH);Ilr=r(YPt,"DebertaForTokenClassification"),YPt.forEach(t),Nlr=r(qGe," (DeBERTa model)"),qGe.forEach(t),qlr=i(K),aM=n(K,"LI",{});var jGe=s(aM);XFe=n(jGe,"STRONG",{});var KPt=s(XFe);jlr=r(KPt,"deberta-v2"),KPt.forEach(t),Dlr=r(jGe," \u2014 "),oH=n(jGe,"A",{href:!0});var ZPt=s(oH);Glr=r(ZPt,"DebertaV2ForTokenClassification"),ZPt.forEach(t),Olr=r(jGe," (DeBERTa-v2 model)"),jGe.forEach(t),Vlr=i(K),nM=n(K,"LI",{});var DGe=s(nM);zFe=n(DGe,"STRONG",{});var eBt=s(zFe);Xlr=r(eBt,"distilbert"),eBt.forEach(t),zlr=r(DGe," \u2014 "),rH=n(DGe,"A",{href:!0});var oBt=s(rH);Qlr=r(oBt,"DistilBertForTokenClassification"),oBt.forEach(t),Wlr=r(DGe," (DistilBERT model)"),DGe.forEach(t),Ulr=i(K),sM=n(K,"LI",{});var GGe=s(sM);QFe=n(GGe,"STRONG",{});var rBt=s(QFe);Hlr=r(rBt,"electra"),rBt.forEach(t),Jlr=r(GGe," \u2014 "),tH=n(GGe,"A",{href:!0});var tBt=s(tH);Ylr=r(tBt,"ElectraForTokenClassification"),tBt.forEach(t),Klr=r(GGe," (ELECTRA model)"),GGe.forEach(t),Zlr=i(K),lM=n(K,"LI",{});var OGe=s(lM);WFe=n(OGe,"STRONG",{});var aBt=s(WFe);eir=r(aBt,"flaubert"),aBt.forEach(t),oir=r(OGe," \u2014 "),aH=n(OGe,"A",{href:!0});var nBt=s(aH);rir=r(nBt,"FlaubertForTokenClassification"),nBt.forEach(t),tir=r(OGe," (FlauBERT model)"),OGe.forEach(t),air=i(K),iM=n(K,"LI",{});var VGe=s(iM);UFe=n(VGe,"STRONG",{});var sBt=s(UFe);nir=r(sBt,"fnet"),sBt.forEach(t),sir=r(VGe," \u2014 "),nH=n(VGe,"A",{href:!0});var lBt=s(nH);lir=r(lBt,"FNetForTokenClassification"),lBt.forEach(t),iir=r(VGe," (FNet model)"),VGe.forEach(t),dir=i(K),dM=n(K,"LI",{});var XGe=s(dM);HFe=n(XGe,"STRONG",{});var iBt=s(HFe);cir=r(iBt,"funnel"),iBt.forEach(t),mir=r(XGe," \u2014 "),sH=n(XGe,"A",{href:!0});var dBt=s(sH);fir=r(dBt,"FunnelForTokenClassification"),dBt.forEach(t),gir=r(XGe," (Funnel Transformer model)"),XGe.forEach(t),hir=i(K),cM=n(K,"LI",{});var zGe=s(cM);JFe=n(zGe,"STRONG",{});var cBt=s(JFe);uir=r(cBt,"gpt2"),cBt.forEach(t),pir=r(zGe," \u2014 "),lH=n(zGe,"A",{href:!0});var mBt=s(lH);_ir=r(mBt,"GPT2ForTokenClassification"),mBt.forEach(t),bir=r(zGe," (OpenAI GPT-2 model)"),zGe.forEach(t),vir=i(K),mM=n(K,"LI",{});var QGe=s(mM);YFe=n(QGe,"STRONG",{});var fBt=s(YFe);Fir=r(fBt,"ibert"),fBt.forEach(t),Tir=r(QGe," \u2014 "),iH=n(QGe,"A",{href:!0});var gBt=s(iH);Mir=r(gBt,"IBertForTokenClassification"),gBt.forEach(t),Eir=r(QGe," (I-BERT model)"),QGe.forEach(t),Cir=i(K),fM=n(K,"LI",{});var WGe=s(fM);KFe=n(WGe,"STRONG",{});var hBt=s(KFe);wir=r(hBt,"layoutlm"),hBt.forEach(t),Air=r(WGe," \u2014 "),dH=n(WGe,"A",{href:!0});var uBt=s(dH);Lir=r(uBt,"LayoutLMForTokenClassification"),uBt.forEach(t),yir=r(WGe," (LayoutLM model)"),WGe.forEach(t),xir=i(K),gM=n(K,"LI",{});var UGe=s(gM);ZFe=n(UGe,"STRONG",{});var pBt=s(ZFe);$ir=r(pBt,"layoutlmv2"),pBt.forEach(t),kir=r(UGe," \u2014 "),cH=n(UGe,"A",{href:!0});var _Bt=s(cH);Sir=r(_Bt,"LayoutLMv2ForTokenClassification"),_Bt.forEach(t),Rir=r(UGe," (LayoutLMv2 model)"),UGe.forEach(t),Pir=i(K),hM=n(K,"LI",{});var HGe=s(hM);eTe=n(HGe,"STRONG",{});var bBt=s(eTe);Bir=r(bBt,"layoutlmv3"),bBt.forEach(t),Iir=r(HGe," \u2014 "),mH=n(HGe,"A",{href:!0});var vBt=s(mH);Nir=r(vBt,"LayoutLMv3ForTokenClassification"),vBt.forEach(t),qir=r(HGe," (LayoutLMv3 model)"),HGe.forEach(t),jir=i(K),uM=n(K,"LI",{});var JGe=s(uM);oTe=n(JGe,"STRONG",{});var FBt=s(oTe);Dir=r(FBt,"longformer"),FBt.forEach(t),Gir=r(JGe," \u2014 "),fH=n(JGe,"A",{href:!0});var TBt=s(fH);Oir=r(TBt,"LongformerForTokenClassification"),TBt.forEach(t),Vir=r(JGe," (Longformer model)"),JGe.forEach(t),Xir=i(K),pM=n(K,"LI",{});var YGe=s(pM);rTe=n(YGe,"STRONG",{});var MBt=s(rTe);zir=r(MBt,"luke"),MBt.forEach(t),Qir=r(YGe," \u2014 "),gH=n(YGe,"A",{href:!0});var EBt=s(gH);Wir=r(EBt,"LukeForTokenClassification"),EBt.forEach(t),Uir=r(YGe," (LUKE model)"),YGe.forEach(t),Hir=i(K),_M=n(K,"LI",{});var KGe=s(_M);tTe=n(KGe,"STRONG",{});var CBt=s(tTe);Jir=r(CBt,"megatron-bert"),CBt.forEach(t),Yir=r(KGe," \u2014 "),hH=n(KGe,"A",{href:!0});var wBt=s(hH);Kir=r(wBt,"MegatronBertForTokenClassification"),wBt.forEach(t),Zir=r(KGe," (Megatron-BERT model)"),KGe.forEach(t),edr=i(K),bM=n(K,"LI",{});var ZGe=s(bM);aTe=n(ZGe,"STRONG",{});var ABt=s(aTe);odr=r(ABt,"mobilebert"),ABt.forEach(t),rdr=r(ZGe," \u2014 "),uH=n(ZGe,"A",{href:!0});var LBt=s(uH);tdr=r(LBt,"MobileBertForTokenClassification"),LBt.forEach(t),adr=r(ZGe," (MobileBERT model)"),ZGe.forEach(t),ndr=i(K),vM=n(K,"LI",{});var eOe=s(vM);nTe=n(eOe,"STRONG",{});var yBt=s(nTe);sdr=r(yBt,"mpnet"),yBt.forEach(t),ldr=r(eOe," \u2014 "),pH=n(eOe,"A",{href:!0});var xBt=s(pH);idr=r(xBt,"MPNetForTokenClassification"),xBt.forEach(t),ddr=r(eOe," (MPNet model)"),eOe.forEach(t),cdr=i(K),FM=n(K,"LI",{});var oOe=s(FM);sTe=n(oOe,"STRONG",{});var $Bt=s(sTe);mdr=r($Bt,"nezha"),$Bt.forEach(t),fdr=r(oOe," \u2014 "),_H=n(oOe,"A",{href:!0});var kBt=s(_H);gdr=r(kBt,"NezhaForTokenClassification"),kBt.forEach(t),hdr=r(oOe," (Nezha model)"),oOe.forEach(t),udr=i(K),TM=n(K,"LI",{});var rOe=s(TM);lTe=n(rOe,"STRONG",{});var SBt=s(lTe);pdr=r(SBt,"nystromformer"),SBt.forEach(t),_dr=r(rOe," \u2014 "),bH=n(rOe,"A",{href:!0});var RBt=s(bH);bdr=r(RBt,"NystromformerForTokenClassification"),RBt.forEach(t),vdr=r(rOe," (Nystr\xF6mformer model)"),rOe.forEach(t),Fdr=i(K),MM=n(K,"LI",{});var tOe=s(MM);iTe=n(tOe,"STRONG",{});var PBt=s(iTe);Tdr=r(PBt,"qdqbert"),PBt.forEach(t),Mdr=r(tOe," \u2014 "),vH=n(tOe,"A",{href:!0});var BBt=s(vH);Edr=r(BBt,"QDQBertForTokenClassification"),BBt.forEach(t),Cdr=r(tOe," (QDQBert model)"),tOe.forEach(t),wdr=i(K),EM=n(K,"LI",{});var aOe=s(EM);dTe=n(aOe,"STRONG",{});var IBt=s(dTe);Adr=r(IBt,"rembert"),IBt.forEach(t),Ldr=r(aOe," \u2014 "),FH=n(aOe,"A",{href:!0});var NBt=s(FH);ydr=r(NBt,"RemBertForTokenClassification"),NBt.forEach(t),xdr=r(aOe," (RemBERT model)"),aOe.forEach(t),$dr=i(K),CM=n(K,"LI",{});var nOe=s(CM);cTe=n(nOe,"STRONG",{});var qBt=s(cTe);kdr=r(qBt,"roberta"),qBt.forEach(t),Sdr=r(nOe," \u2014 "),TH=n(nOe,"A",{href:!0});var jBt=s(TH);Rdr=r(jBt,"RobertaForTokenClassification"),jBt.forEach(t),Pdr=r(nOe," (RoBERTa model)"),nOe.forEach(t),Bdr=i(K),wM=n(K,"LI",{});var sOe=s(wM);mTe=n(sOe,"STRONG",{});var DBt=s(mTe);Idr=r(DBt,"roformer"),DBt.forEach(t),Ndr=r(sOe," \u2014 "),MH=n(sOe,"A",{href:!0});var GBt=s(MH);qdr=r(GBt,"RoFormerForTokenClassification"),GBt.forEach(t),jdr=r(sOe," (RoFormer model)"),sOe.forEach(t),Ddr=i(K),AM=n(K,"LI",{});var lOe=s(AM);fTe=n(lOe,"STRONG",{});var OBt=s(fTe);Gdr=r(OBt,"squeezebert"),OBt.forEach(t),Odr=r(lOe," \u2014 "),EH=n(lOe,"A",{href:!0});var VBt=s(EH);Vdr=r(VBt,"SqueezeBertForTokenClassification"),VBt.forEach(t),Xdr=r(lOe," (SqueezeBERT model)"),lOe.forEach(t),zdr=i(K),LM=n(K,"LI",{});var iOe=s(LM);gTe=n(iOe,"STRONG",{});var XBt=s(gTe);Qdr=r(XBt,"xlm"),XBt.forEach(t),Wdr=r(iOe," \u2014 "),CH=n(iOe,"A",{href:!0});var zBt=s(CH);Udr=r(zBt,"XLMForTokenClassification"),zBt.forEach(t),Hdr=r(iOe," (XLM model)"),iOe.forEach(t),Jdr=i(K),yM=n(K,"LI",{});var dOe=s(yM);hTe=n(dOe,"STRONG",{});var QBt=s(hTe);Ydr=r(QBt,"xlm-roberta"),QBt.forEach(t),Kdr=r(dOe," \u2014 "),wH=n(dOe,"A",{href:!0});var WBt=s(wH);Zdr=r(WBt,"XLMRobertaForTokenClassification"),WBt.forEach(t),ecr=r(dOe," (XLM-RoBERTa model)"),dOe.forEach(t),ocr=i(K),xM=n(K,"LI",{});var cOe=s(xM);uTe=n(cOe,"STRONG",{});var UBt=s(uTe);rcr=r(UBt,"xlm-roberta-xl"),UBt.forEach(t),tcr=r(cOe," \u2014 "),AH=n(cOe,"A",{href:!0});var HBt=s(AH);acr=r(HBt,"XLMRobertaXLForTokenClassification"),HBt.forEach(t),ncr=r(cOe," (XLM-RoBERTa-XL model)"),cOe.forEach(t),scr=i(K),$M=n(K,"LI",{});var mOe=s($M);pTe=n(mOe,"STRONG",{});var JBt=s(pTe);lcr=r(JBt,"xlnet"),JBt.forEach(t),icr=r(mOe," \u2014 "),LH=n(mOe,"A",{href:!0});var YBt=s(LH);dcr=r(YBt,"XLNetForTokenClassification"),YBt.forEach(t),ccr=r(mOe," (XLNet model)"),mOe.forEach(t),mcr=i(K),kM=n(K,"LI",{});var fOe=s(kM);_Te=n(fOe,"STRONG",{});var KBt=s(_Te);fcr=r(KBt,"yoso"),KBt.forEach(t),gcr=r(fOe," \u2014 "),yH=n(fOe,"A",{href:!0});var ZBt=s(yH);hcr=r(ZBt,"YosoForTokenClassification"),ZBt.forEach(t),ucr=r(fOe," (YOSO model)"),fOe.forEach(t),K.forEach(t),pcr=i(ya),SM=n(ya,"P",{});var gOe=s(SM);_cr=r(gOe,"The model is set in evaluation mode by default using "),bTe=n(gOe,"CODE",{});var eIt=s(bTe);bcr=r(eIt,"model.eval()"),eIt.forEach(t),vcr=r(gOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vTe=n(gOe,"CODE",{});var oIt=s(vTe);Fcr=r(oIt,"model.train()"),oIt.forEach(t),gOe.forEach(t),Tcr=i(ya),T(RM.$$.fragment,ya),ya.forEach(t),Sl.forEach(t),_Ye=i(m),Od=n(m,"H2",{class:!0});var kZe=s(Od);PM=n(kZe,"A",{id:!0,class:!0,href:!0});var rIt=s(PM);FTe=n(rIt,"SPAN",{});var tIt=s(FTe);T(xx.$$.fragment,tIt),tIt.forEach(t),rIt.forEach(t),Mcr=i(kZe),TTe=n(kZe,"SPAN",{});var aIt=s(TTe);Ecr=r(aIt,"AutoModelForQuestionAnswering"),aIt.forEach(t),kZe.forEach(t),bYe=i(m),Vo=n(m,"DIV",{class:!0});var Rl=s(Vo);T($x.$$.fragment,Rl),Ccr=i(Rl),Vd=n(Rl,"P",{});var Gse=s(Vd);wcr=r(Gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=n(Gse,"A",{href:!0});var nIt=s(xH);Acr=r(nIt,"from_pretrained()"),nIt.forEach(t),Lcr=r(Gse," class method or the "),$H=n(Gse,"A",{href:!0});var sIt=s($H);ycr=r(sIt,"from_config()"),sIt.forEach(t),xcr=r(Gse,` class
method.`),Gse.forEach(t),$cr=i(Rl),kx=n(Rl,"P",{});var SZe=s(kx);kcr=r(SZe,"This class cannot be instantiated directly using "),MTe=n(SZe,"CODE",{});var lIt=s(MTe);Scr=r(lIt,"__init__()"),lIt.forEach(t),Rcr=r(SZe," (throws an error)."),SZe.forEach(t),Pcr=i(Rl),wt=n(Rl,"DIV",{class:!0});var wy=s(wt);T(Sx.$$.fragment,wy),Bcr=i(wy),ETe=n(wy,"P",{});var iIt=s(ETe);Icr=r(iIt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iIt.forEach(t),Ncr=i(wy),Xd=n(wy,"P",{});var Ose=s(Xd);qcr=r(Ose,`Note:
Loading a model from its configuration file does `),CTe=n(Ose,"STRONG",{});var dIt=s(CTe);jcr=r(dIt,"not"),dIt.forEach(t),Dcr=r(Ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(Ose,"A",{href:!0});var cIt=s(kH);Gcr=r(cIt,"from_pretrained()"),cIt.forEach(t),Ocr=r(Ose," to load the model weights."),Ose.forEach(t),Vcr=i(wy),T(BM.$$.fragment,wy),wy.forEach(t),Xcr=i(Rl),lo=n(Rl,"DIV",{class:!0});var xa=s(lo);T(Rx.$$.fragment,xa),zcr=i(xa),wTe=n(xa,"P",{});var mIt=s(wTe);Qcr=r(mIt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mIt.forEach(t),Wcr=i(xa),nn=n(xa,"P",{});var Ay=s(nn);Ucr=r(Ay,"The model class to instantiate is selected based on the "),ATe=n(Ay,"CODE",{});var fIt=s(ATe);Hcr=r(fIt,"model_type"),fIt.forEach(t),Jcr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),LTe=n(Ay,"CODE",{});var gIt=s(LTe);Ycr=r(gIt,"pretrained_model_name_or_path"),gIt.forEach(t),Kcr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(Ay,"CODE",{});var hIt=s(yTe);Zcr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),emr=r(Ay,":"),Ay.forEach(t),omr=i(xa),V=n(xa,"UL",{});var X=s(V);IM=n(X,"LI",{});var hOe=s(IM);xTe=n(hOe,"STRONG",{});var uIt=s(xTe);rmr=r(uIt,"albert"),uIt.forEach(t),tmr=r(hOe," \u2014 "),SH=n(hOe,"A",{href:!0});var pIt=s(SH);amr=r(pIt,"AlbertForQuestionAnswering"),pIt.forEach(t),nmr=r(hOe," (ALBERT model)"),hOe.forEach(t),smr=i(X),NM=n(X,"LI",{});var uOe=s(NM);$Te=n(uOe,"STRONG",{});var _It=s($Te);lmr=r(_It,"bart"),_It.forEach(t),imr=r(uOe," \u2014 "),RH=n(uOe,"A",{href:!0});var bIt=s(RH);dmr=r(bIt,"BartForQuestionAnswering"),bIt.forEach(t),cmr=r(uOe," (BART model)"),uOe.forEach(t),mmr=i(X),qM=n(X,"LI",{});var pOe=s(qM);kTe=n(pOe,"STRONG",{});var vIt=s(kTe);fmr=r(vIt,"bert"),vIt.forEach(t),gmr=r(pOe," \u2014 "),PH=n(pOe,"A",{href:!0});var FIt=s(PH);hmr=r(FIt,"BertForQuestionAnswering"),FIt.forEach(t),umr=r(pOe," (BERT model)"),pOe.forEach(t),pmr=i(X),jM=n(X,"LI",{});var _Oe=s(jM);STe=n(_Oe,"STRONG",{});var TIt=s(STe);_mr=r(TIt,"big_bird"),TIt.forEach(t),bmr=r(_Oe," \u2014 "),BH=n(_Oe,"A",{href:!0});var MIt=s(BH);vmr=r(MIt,"BigBirdForQuestionAnswering"),MIt.forEach(t),Fmr=r(_Oe," (BigBird model)"),_Oe.forEach(t),Tmr=i(X),DM=n(X,"LI",{});var bOe=s(DM);RTe=n(bOe,"STRONG",{});var EIt=s(RTe);Mmr=r(EIt,"bigbird_pegasus"),EIt.forEach(t),Emr=r(bOe," \u2014 "),IH=n(bOe,"A",{href:!0});var CIt=s(IH);Cmr=r(CIt,"BigBirdPegasusForQuestionAnswering"),CIt.forEach(t),wmr=r(bOe," (BigBird-Pegasus model)"),bOe.forEach(t),Amr=i(X),GM=n(X,"LI",{});var vOe=s(GM);PTe=n(vOe,"STRONG",{});var wIt=s(PTe);Lmr=r(wIt,"camembert"),wIt.forEach(t),ymr=r(vOe," \u2014 "),NH=n(vOe,"A",{href:!0});var AIt=s(NH);xmr=r(AIt,"CamembertForQuestionAnswering"),AIt.forEach(t),$mr=r(vOe," (CamemBERT model)"),vOe.forEach(t),kmr=i(X),OM=n(X,"LI",{});var FOe=s(OM);BTe=n(FOe,"STRONG",{});var LIt=s(BTe);Smr=r(LIt,"canine"),LIt.forEach(t),Rmr=r(FOe," \u2014 "),qH=n(FOe,"A",{href:!0});var yIt=s(qH);Pmr=r(yIt,"CanineForQuestionAnswering"),yIt.forEach(t),Bmr=r(FOe," (CANINE model)"),FOe.forEach(t),Imr=i(X),VM=n(X,"LI",{});var TOe=s(VM);ITe=n(TOe,"STRONG",{});var xIt=s(ITe);Nmr=r(xIt,"convbert"),xIt.forEach(t),qmr=r(TOe," \u2014 "),jH=n(TOe,"A",{href:!0});var $It=s(jH);jmr=r($It,"ConvBertForQuestionAnswering"),$It.forEach(t),Dmr=r(TOe," (ConvBERT model)"),TOe.forEach(t),Gmr=i(X),XM=n(X,"LI",{});var MOe=s(XM);NTe=n(MOe,"STRONG",{});var kIt=s(NTe);Omr=r(kIt,"data2vec-text"),kIt.forEach(t),Vmr=r(MOe," \u2014 "),DH=n(MOe,"A",{href:!0});var SIt=s(DH);Xmr=r(SIt,"Data2VecTextForQuestionAnswering"),SIt.forEach(t),zmr=r(MOe," (Data2VecText model)"),MOe.forEach(t),Qmr=i(X),zM=n(X,"LI",{});var EOe=s(zM);qTe=n(EOe,"STRONG",{});var RIt=s(qTe);Wmr=r(RIt,"deberta"),RIt.forEach(t),Umr=r(EOe," \u2014 "),GH=n(EOe,"A",{href:!0});var PIt=s(GH);Hmr=r(PIt,"DebertaForQuestionAnswering"),PIt.forEach(t),Jmr=r(EOe," (DeBERTa model)"),EOe.forEach(t),Ymr=i(X),QM=n(X,"LI",{});var COe=s(QM);jTe=n(COe,"STRONG",{});var BIt=s(jTe);Kmr=r(BIt,"deberta-v2"),BIt.forEach(t),Zmr=r(COe," \u2014 "),OH=n(COe,"A",{href:!0});var IIt=s(OH);efr=r(IIt,"DebertaV2ForQuestionAnswering"),IIt.forEach(t),ofr=r(COe," (DeBERTa-v2 model)"),COe.forEach(t),rfr=i(X),WM=n(X,"LI",{});var wOe=s(WM);DTe=n(wOe,"STRONG",{});var NIt=s(DTe);tfr=r(NIt,"distilbert"),NIt.forEach(t),afr=r(wOe," \u2014 "),VH=n(wOe,"A",{href:!0});var qIt=s(VH);nfr=r(qIt,"DistilBertForQuestionAnswering"),qIt.forEach(t),sfr=r(wOe," (DistilBERT model)"),wOe.forEach(t),lfr=i(X),UM=n(X,"LI",{});var AOe=s(UM);GTe=n(AOe,"STRONG",{});var jIt=s(GTe);ifr=r(jIt,"electra"),jIt.forEach(t),dfr=r(AOe," \u2014 "),XH=n(AOe,"A",{href:!0});var DIt=s(XH);cfr=r(DIt,"ElectraForQuestionAnswering"),DIt.forEach(t),mfr=r(AOe," (ELECTRA model)"),AOe.forEach(t),ffr=i(X),HM=n(X,"LI",{});var LOe=s(HM);OTe=n(LOe,"STRONG",{});var GIt=s(OTe);gfr=r(GIt,"flaubert"),GIt.forEach(t),hfr=r(LOe," \u2014 "),zH=n(LOe,"A",{href:!0});var OIt=s(zH);ufr=r(OIt,"FlaubertForQuestionAnsweringSimple"),OIt.forEach(t),pfr=r(LOe," (FlauBERT model)"),LOe.forEach(t),_fr=i(X),JM=n(X,"LI",{});var yOe=s(JM);VTe=n(yOe,"STRONG",{});var VIt=s(VTe);bfr=r(VIt,"fnet"),VIt.forEach(t),vfr=r(yOe," \u2014 "),QH=n(yOe,"A",{href:!0});var XIt=s(QH);Ffr=r(XIt,"FNetForQuestionAnswering"),XIt.forEach(t),Tfr=r(yOe," (FNet model)"),yOe.forEach(t),Mfr=i(X),YM=n(X,"LI",{});var xOe=s(YM);XTe=n(xOe,"STRONG",{});var zIt=s(XTe);Efr=r(zIt,"funnel"),zIt.forEach(t),Cfr=r(xOe," \u2014 "),WH=n(xOe,"A",{href:!0});var QIt=s(WH);wfr=r(QIt,"FunnelForQuestionAnswering"),QIt.forEach(t),Afr=r(xOe," (Funnel Transformer model)"),xOe.forEach(t),Lfr=i(X),KM=n(X,"LI",{});var $Oe=s(KM);zTe=n($Oe,"STRONG",{});var WIt=s(zTe);yfr=r(WIt,"gptj"),WIt.forEach(t),xfr=r($Oe," \u2014 "),UH=n($Oe,"A",{href:!0});var UIt=s(UH);$fr=r(UIt,"GPTJForQuestionAnswering"),UIt.forEach(t),kfr=r($Oe," (GPT-J model)"),$Oe.forEach(t),Sfr=i(X),ZM=n(X,"LI",{});var kOe=s(ZM);QTe=n(kOe,"STRONG",{});var HIt=s(QTe);Rfr=r(HIt,"ibert"),HIt.forEach(t),Pfr=r(kOe," \u2014 "),HH=n(kOe,"A",{href:!0});var JIt=s(HH);Bfr=r(JIt,"IBertForQuestionAnswering"),JIt.forEach(t),Ifr=r(kOe," (I-BERT model)"),kOe.forEach(t),Nfr=i(X),eE=n(X,"LI",{});var SOe=s(eE);WTe=n(SOe,"STRONG",{});var YIt=s(WTe);qfr=r(YIt,"layoutlmv2"),YIt.forEach(t),jfr=r(SOe," \u2014 "),JH=n(SOe,"A",{href:!0});var KIt=s(JH);Dfr=r(KIt,"LayoutLMv2ForQuestionAnswering"),KIt.forEach(t),Gfr=r(SOe," (LayoutLMv2 model)"),SOe.forEach(t),Ofr=i(X),oE=n(X,"LI",{});var ROe=s(oE);UTe=n(ROe,"STRONG",{});var ZIt=s(UTe);Vfr=r(ZIt,"layoutlmv3"),ZIt.forEach(t),Xfr=r(ROe," \u2014 "),YH=n(ROe,"A",{href:!0});var eNt=s(YH);zfr=r(eNt,"LayoutLMv3ForQuestionAnswering"),eNt.forEach(t),Qfr=r(ROe," (LayoutLMv3 model)"),ROe.forEach(t),Wfr=i(X),rE=n(X,"LI",{});var POe=s(rE);HTe=n(POe,"STRONG",{});var oNt=s(HTe);Ufr=r(oNt,"led"),oNt.forEach(t),Hfr=r(POe," \u2014 "),KH=n(POe,"A",{href:!0});var rNt=s(KH);Jfr=r(rNt,"LEDForQuestionAnswering"),rNt.forEach(t),Yfr=r(POe," (LED model)"),POe.forEach(t),Kfr=i(X),tE=n(X,"LI",{});var BOe=s(tE);JTe=n(BOe,"STRONG",{});var tNt=s(JTe);Zfr=r(tNt,"longformer"),tNt.forEach(t),egr=r(BOe," \u2014 "),ZH=n(BOe,"A",{href:!0});var aNt=s(ZH);ogr=r(aNt,"LongformerForQuestionAnswering"),aNt.forEach(t),rgr=r(BOe," (Longformer model)"),BOe.forEach(t),tgr=i(X),aE=n(X,"LI",{});var IOe=s(aE);YTe=n(IOe,"STRONG",{});var nNt=s(YTe);agr=r(nNt,"luke"),nNt.forEach(t),ngr=r(IOe," \u2014 "),eJ=n(IOe,"A",{href:!0});var sNt=s(eJ);sgr=r(sNt,"LukeForQuestionAnswering"),sNt.forEach(t),lgr=r(IOe," (LUKE model)"),IOe.forEach(t),igr=i(X),nE=n(X,"LI",{});var NOe=s(nE);KTe=n(NOe,"STRONG",{});var lNt=s(KTe);dgr=r(lNt,"lxmert"),lNt.forEach(t),cgr=r(NOe," \u2014 "),oJ=n(NOe,"A",{href:!0});var iNt=s(oJ);mgr=r(iNt,"LxmertForQuestionAnswering"),iNt.forEach(t),fgr=r(NOe," (LXMERT model)"),NOe.forEach(t),ggr=i(X),sE=n(X,"LI",{});var qOe=s(sE);ZTe=n(qOe,"STRONG",{});var dNt=s(ZTe);hgr=r(dNt,"mbart"),dNt.forEach(t),ugr=r(qOe," \u2014 "),rJ=n(qOe,"A",{href:!0});var cNt=s(rJ);pgr=r(cNt,"MBartForQuestionAnswering"),cNt.forEach(t),_gr=r(qOe," (mBART model)"),qOe.forEach(t),bgr=i(X),lE=n(X,"LI",{});var jOe=s(lE);eMe=n(jOe,"STRONG",{});var mNt=s(eMe);vgr=r(mNt,"megatron-bert"),mNt.forEach(t),Fgr=r(jOe," \u2014 "),tJ=n(jOe,"A",{href:!0});var fNt=s(tJ);Tgr=r(fNt,"MegatronBertForQuestionAnswering"),fNt.forEach(t),Mgr=r(jOe," (Megatron-BERT model)"),jOe.forEach(t),Egr=i(X),iE=n(X,"LI",{});var DOe=s(iE);oMe=n(DOe,"STRONG",{});var gNt=s(oMe);Cgr=r(gNt,"mobilebert"),gNt.forEach(t),wgr=r(DOe," \u2014 "),aJ=n(DOe,"A",{href:!0});var hNt=s(aJ);Agr=r(hNt,"MobileBertForQuestionAnswering"),hNt.forEach(t),Lgr=r(DOe," (MobileBERT model)"),DOe.forEach(t),ygr=i(X),dE=n(X,"LI",{});var GOe=s(dE);rMe=n(GOe,"STRONG",{});var uNt=s(rMe);xgr=r(uNt,"mpnet"),uNt.forEach(t),$gr=r(GOe," \u2014 "),nJ=n(GOe,"A",{href:!0});var pNt=s(nJ);kgr=r(pNt,"MPNetForQuestionAnswering"),pNt.forEach(t),Sgr=r(GOe," (MPNet model)"),GOe.forEach(t),Rgr=i(X),cE=n(X,"LI",{});var OOe=s(cE);tMe=n(OOe,"STRONG",{});var _Nt=s(tMe);Pgr=r(_Nt,"mvp"),_Nt.forEach(t),Bgr=r(OOe," \u2014 "),sJ=n(OOe,"A",{href:!0});var bNt=s(sJ);Igr=r(bNt,"MvpForQuestionAnswering"),bNt.forEach(t),Ngr=r(OOe," (MVP model)"),OOe.forEach(t),qgr=i(X),mE=n(X,"LI",{});var VOe=s(mE);aMe=n(VOe,"STRONG",{});var vNt=s(aMe);jgr=r(vNt,"nezha"),vNt.forEach(t),Dgr=r(VOe," \u2014 "),lJ=n(VOe,"A",{href:!0});var FNt=s(lJ);Ggr=r(FNt,"NezhaForQuestionAnswering"),FNt.forEach(t),Ogr=r(VOe," (Nezha model)"),VOe.forEach(t),Vgr=i(X),fE=n(X,"LI",{});var XOe=s(fE);nMe=n(XOe,"STRONG",{});var TNt=s(nMe);Xgr=r(TNt,"nystromformer"),TNt.forEach(t),zgr=r(XOe," \u2014 "),iJ=n(XOe,"A",{href:!0});var MNt=s(iJ);Qgr=r(MNt,"NystromformerForQuestionAnswering"),MNt.forEach(t),Wgr=r(XOe," (Nystr\xF6mformer model)"),XOe.forEach(t),Ugr=i(X),gE=n(X,"LI",{});var zOe=s(gE);sMe=n(zOe,"STRONG",{});var ENt=s(sMe);Hgr=r(ENt,"qdqbert"),ENt.forEach(t),Jgr=r(zOe," \u2014 "),dJ=n(zOe,"A",{href:!0});var CNt=s(dJ);Ygr=r(CNt,"QDQBertForQuestionAnswering"),CNt.forEach(t),Kgr=r(zOe," (QDQBert model)"),zOe.forEach(t),Zgr=i(X),hE=n(X,"LI",{});var QOe=s(hE);lMe=n(QOe,"STRONG",{});var wNt=s(lMe);ehr=r(wNt,"reformer"),wNt.forEach(t),ohr=r(QOe," \u2014 "),cJ=n(QOe,"A",{href:!0});var ANt=s(cJ);rhr=r(ANt,"ReformerForQuestionAnswering"),ANt.forEach(t),thr=r(QOe," (Reformer model)"),QOe.forEach(t),ahr=i(X),uE=n(X,"LI",{});var WOe=s(uE);iMe=n(WOe,"STRONG",{});var LNt=s(iMe);nhr=r(LNt,"rembert"),LNt.forEach(t),shr=r(WOe," \u2014 "),mJ=n(WOe,"A",{href:!0});var yNt=s(mJ);lhr=r(yNt,"RemBertForQuestionAnswering"),yNt.forEach(t),ihr=r(WOe," (RemBERT model)"),WOe.forEach(t),dhr=i(X),pE=n(X,"LI",{});var UOe=s(pE);dMe=n(UOe,"STRONG",{});var xNt=s(dMe);chr=r(xNt,"roberta"),xNt.forEach(t),mhr=r(UOe," \u2014 "),fJ=n(UOe,"A",{href:!0});var $Nt=s(fJ);fhr=r($Nt,"RobertaForQuestionAnswering"),$Nt.forEach(t),ghr=r(UOe," (RoBERTa model)"),UOe.forEach(t),hhr=i(X),_E=n(X,"LI",{});var HOe=s(_E);cMe=n(HOe,"STRONG",{});var kNt=s(cMe);uhr=r(kNt,"roformer"),kNt.forEach(t),phr=r(HOe," \u2014 "),gJ=n(HOe,"A",{href:!0});var SNt=s(gJ);_hr=r(SNt,"RoFormerForQuestionAnswering"),SNt.forEach(t),bhr=r(HOe," (RoFormer model)"),HOe.forEach(t),vhr=i(X),bE=n(X,"LI",{});var JOe=s(bE);mMe=n(JOe,"STRONG",{});var RNt=s(mMe);Fhr=r(RNt,"splinter"),RNt.forEach(t),Thr=r(JOe," \u2014 "),hJ=n(JOe,"A",{href:!0});var PNt=s(hJ);Mhr=r(PNt,"SplinterForQuestionAnswering"),PNt.forEach(t),Ehr=r(JOe," (Splinter model)"),JOe.forEach(t),Chr=i(X),vE=n(X,"LI",{});var YOe=s(vE);fMe=n(YOe,"STRONG",{});var BNt=s(fMe);whr=r(BNt,"squeezebert"),BNt.forEach(t),Ahr=r(YOe," \u2014 "),uJ=n(YOe,"A",{href:!0});var INt=s(uJ);Lhr=r(INt,"SqueezeBertForQuestionAnswering"),INt.forEach(t),yhr=r(YOe," (SqueezeBERT model)"),YOe.forEach(t),xhr=i(X),FE=n(X,"LI",{});var KOe=s(FE);gMe=n(KOe,"STRONG",{});var NNt=s(gMe);$hr=r(NNt,"xlm"),NNt.forEach(t),khr=r(KOe," \u2014 "),pJ=n(KOe,"A",{href:!0});var qNt=s(pJ);Shr=r(qNt,"XLMForQuestionAnsweringSimple"),qNt.forEach(t),Rhr=r(KOe," (XLM model)"),KOe.forEach(t),Phr=i(X),TE=n(X,"LI",{});var ZOe=s(TE);hMe=n(ZOe,"STRONG",{});var jNt=s(hMe);Bhr=r(jNt,"xlm-roberta"),jNt.forEach(t),Ihr=r(ZOe," \u2014 "),_J=n(ZOe,"A",{href:!0});var DNt=s(_J);Nhr=r(DNt,"XLMRobertaForQuestionAnswering"),DNt.forEach(t),qhr=r(ZOe," (XLM-RoBERTa model)"),ZOe.forEach(t),jhr=i(X),ME=n(X,"LI",{});var eVe=s(ME);uMe=n(eVe,"STRONG",{});var GNt=s(uMe);Dhr=r(GNt,"xlm-roberta-xl"),GNt.forEach(t),Ghr=r(eVe," \u2014 "),bJ=n(eVe,"A",{href:!0});var ONt=s(bJ);Ohr=r(ONt,"XLMRobertaXLForQuestionAnswering"),ONt.forEach(t),Vhr=r(eVe," (XLM-RoBERTa-XL model)"),eVe.forEach(t),Xhr=i(X),EE=n(X,"LI",{});var oVe=s(EE);pMe=n(oVe,"STRONG",{});var VNt=s(pMe);zhr=r(VNt,"xlnet"),VNt.forEach(t),Qhr=r(oVe," \u2014 "),vJ=n(oVe,"A",{href:!0});var XNt=s(vJ);Whr=r(XNt,"XLNetForQuestionAnsweringSimple"),XNt.forEach(t),Uhr=r(oVe," (XLNet model)"),oVe.forEach(t),Hhr=i(X),CE=n(X,"LI",{});var rVe=s(CE);_Me=n(rVe,"STRONG",{});var zNt=s(_Me);Jhr=r(zNt,"yoso"),zNt.forEach(t),Yhr=r(rVe," \u2014 "),FJ=n(rVe,"A",{href:!0});var QNt=s(FJ);Khr=r(QNt,"YosoForQuestionAnswering"),QNt.forEach(t),Zhr=r(rVe," (YOSO model)"),rVe.forEach(t),X.forEach(t),eur=i(xa),wE=n(xa,"P",{});var tVe=s(wE);our=r(tVe,"The model is set in evaluation mode by default using "),bMe=n(tVe,"CODE",{});var WNt=s(bMe);rur=r(WNt,"model.eval()"),WNt.forEach(t),tur=r(tVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vMe=n(tVe,"CODE",{});var UNt=s(vMe);aur=r(UNt,"model.train()"),UNt.forEach(t),tVe.forEach(t),nur=i(xa),T(AE.$$.fragment,xa),xa.forEach(t),Rl.forEach(t),vYe=i(m),zd=n(m,"H2",{class:!0});var RZe=s(zd);LE=n(RZe,"A",{id:!0,class:!0,href:!0});var HNt=s(LE);FMe=n(HNt,"SPAN",{});var JNt=s(FMe);T(Px.$$.fragment,JNt),JNt.forEach(t),HNt.forEach(t),sur=i(RZe),TMe=n(RZe,"SPAN",{});var YNt=s(TMe);lur=r(YNt,"AutoModelForTableQuestionAnswering"),YNt.forEach(t),RZe.forEach(t),FYe=i(m),Xo=n(m,"DIV",{class:!0});var Pl=s(Xo);T(Bx.$$.fragment,Pl),iur=i(Pl),Qd=n(Pl,"P",{});var Vse=s(Qd);dur=r(Vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TJ=n(Vse,"A",{href:!0});var KNt=s(TJ);cur=r(KNt,"from_pretrained()"),KNt.forEach(t),mur=r(Vse," class method or the "),MJ=n(Vse,"A",{href:!0});var ZNt=s(MJ);fur=r(ZNt,"from_config()"),ZNt.forEach(t),gur=r(Vse,` class
method.`),Vse.forEach(t),hur=i(Pl),Ix=n(Pl,"P",{});var PZe=s(Ix);uur=r(PZe,"This class cannot be instantiated directly using "),MMe=n(PZe,"CODE",{});var eqt=s(MMe);pur=r(eqt,"__init__()"),eqt.forEach(t),_ur=r(PZe," (throws an error)."),PZe.forEach(t),bur=i(Pl),At=n(Pl,"DIV",{class:!0});var Ly=s(At);T(Nx.$$.fragment,Ly),vur=i(Ly),EMe=n(Ly,"P",{});var oqt=s(EMe);Fur=r(oqt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oqt.forEach(t),Tur=i(Ly),Wd=n(Ly,"P",{});var Xse=s(Wd);Mur=r(Xse,`Note:
Loading a model from its configuration file does `),CMe=n(Xse,"STRONG",{});var rqt=s(CMe);Eur=r(rqt,"not"),rqt.forEach(t),Cur=r(Xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(Xse,"A",{href:!0});var tqt=s(EJ);wur=r(tqt,"from_pretrained()"),tqt.forEach(t),Aur=r(Xse," to load the model weights."),Xse.forEach(t),Lur=i(Ly),T(yE.$$.fragment,Ly),Ly.forEach(t),yur=i(Pl),io=n(Pl,"DIV",{class:!0});var $a=s(io);T(qx.$$.fragment,$a),xur=i($a),wMe=n($a,"P",{});var aqt=s(wMe);$ur=r(aqt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aqt.forEach(t),kur=i($a),sn=n($a,"P",{});var yy=s(sn);Sur=r(yy,"The model class to instantiate is selected based on the "),AMe=n(yy,"CODE",{});var nqt=s(AMe);Rur=r(nqt,"model_type"),nqt.forEach(t),Pur=r(yy,` property of the config object (either
passed as an argument or loaded from `),LMe=n(yy,"CODE",{});var sqt=s(LMe);Bur=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),Iur=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yMe=n(yy,"CODE",{});var lqt=s(yMe);Nur=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),qur=r(yy,":"),yy.forEach(t),jur=i($a),xMe=n($a,"UL",{});var iqt=s(xMe);xE=n(iqt,"LI",{});var aVe=s(xE);$Me=n(aVe,"STRONG",{});var dqt=s($Me);Dur=r(dqt,"tapas"),dqt.forEach(t),Gur=r(aVe," \u2014 "),CJ=n(aVe,"A",{href:!0});var cqt=s(CJ);Our=r(cqt,"TapasForQuestionAnswering"),cqt.forEach(t),Vur=r(aVe," (TAPAS model)"),aVe.forEach(t),iqt.forEach(t),Xur=i($a),$E=n($a,"P",{});var nVe=s($E);zur=r(nVe,"The model is set in evaluation mode by default using "),kMe=n(nVe,"CODE",{});var mqt=s(kMe);Qur=r(mqt,"model.eval()"),mqt.forEach(t),Wur=r(nVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SMe=n(nVe,"CODE",{});var fqt=s(SMe);Uur=r(fqt,"model.train()"),fqt.forEach(t),nVe.forEach(t),Hur=i($a),T(kE.$$.fragment,$a),$a.forEach(t),Pl.forEach(t),TYe=i(m),Ud=n(m,"H2",{class:!0});var BZe=s(Ud);SE=n(BZe,"A",{id:!0,class:!0,href:!0});var gqt=s(SE);RMe=n(gqt,"SPAN",{});var hqt=s(RMe);T(jx.$$.fragment,hqt),hqt.forEach(t),gqt.forEach(t),Jur=i(BZe),PMe=n(BZe,"SPAN",{});var uqt=s(PMe);Yur=r(uqt,"AutoModelForDocumentQuestionAnswering"),uqt.forEach(t),BZe.forEach(t),MYe=i(m),zo=n(m,"DIV",{class:!0});var Bl=s(zo);T(Dx.$$.fragment,Bl),Kur=i(Bl),Hd=n(Bl,"P",{});var zse=s(Hd);Zur=r(zse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),wJ=n(zse,"A",{href:!0});var pqt=s(wJ);epr=r(pqt,"from_pretrained()"),pqt.forEach(t),opr=r(zse," class method or the "),AJ=n(zse,"A",{href:!0});var _qt=s(AJ);rpr=r(_qt,"from_config()"),_qt.forEach(t),tpr=r(zse,` class
method.`),zse.forEach(t),apr=i(Bl),Gx=n(Bl,"P",{});var IZe=s(Gx);npr=r(IZe,"This class cannot be instantiated directly using "),BMe=n(IZe,"CODE",{});var bqt=s(BMe);spr=r(bqt,"__init__()"),bqt.forEach(t),lpr=r(IZe," (throws an error)."),IZe.forEach(t),ipr=i(Bl),Lt=n(Bl,"DIV",{class:!0});var xy=s(Lt);T(Ox.$$.fragment,xy),dpr=i(xy),IMe=n(xy,"P",{});var vqt=s(IMe);cpr=r(vqt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),vqt.forEach(t),mpr=i(xy),Jd=n(xy,"P",{});var Qse=s(Jd);fpr=r(Qse,`Note:
Loading a model from its configuration file does `),NMe=n(Qse,"STRONG",{});var Fqt=s(NMe);gpr=r(Fqt,"not"),Fqt.forEach(t),hpr=r(Qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=n(Qse,"A",{href:!0});var Tqt=s(LJ);upr=r(Tqt,"from_pretrained()"),Tqt.forEach(t),ppr=r(Qse," to load the model weights."),Qse.forEach(t),_pr=i(xy),T(RE.$$.fragment,xy),xy.forEach(t),bpr=i(Bl),co=n(Bl,"DIV",{class:!0});var ka=s(co);T(Vx.$$.fragment,ka),vpr=i(ka),qMe=n(ka,"P",{});var Mqt=s(qMe);Fpr=r(Mqt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Mqt.forEach(t),Tpr=i(ka),ln=n(ka,"P",{});var $y=s(ln);Mpr=r($y,"The model class to instantiate is selected based on the "),jMe=n($y,"CODE",{});var Eqt=s(jMe);Epr=r(Eqt,"model_type"),Eqt.forEach(t),Cpr=r($y,` property of the config object (either
passed as an argument or loaded from `),DMe=n($y,"CODE",{});var Cqt=s(DMe);wpr=r(Cqt,"pretrained_model_name_or_path"),Cqt.forEach(t),Apr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n($y,"CODE",{});var wqt=s(GMe);Lpr=r(wqt,"pretrained_model_name_or_path"),wqt.forEach(t),ypr=r($y,":"),$y.forEach(t),xpr=i(ka),Yd=n(ka,"UL",{});var Wse=s(Yd);PE=n(Wse,"LI",{});var sVe=s(PE);OMe=n(sVe,"STRONG",{});var Aqt=s(OMe);$pr=r(Aqt,"layoutlm"),Aqt.forEach(t),kpr=r(sVe," \u2014 "),yJ=n(sVe,"A",{href:!0});var Lqt=s(yJ);Spr=r(Lqt,"LayoutLMForQuestionAnswering"),Lqt.forEach(t),Rpr=r(sVe," (LayoutLM model)"),sVe.forEach(t),Ppr=i(Wse),BE=n(Wse,"LI",{});var lVe=s(BE);VMe=n(lVe,"STRONG",{});var yqt=s(VMe);Bpr=r(yqt,"layoutlmv2"),yqt.forEach(t),Ipr=r(lVe," \u2014 "),xJ=n(lVe,"A",{href:!0});var xqt=s(xJ);Npr=r(xqt,"LayoutLMv2ForQuestionAnswering"),xqt.forEach(t),qpr=r(lVe," (LayoutLMv2 model)"),lVe.forEach(t),jpr=i(Wse),IE=n(Wse,"LI",{});var iVe=s(IE);XMe=n(iVe,"STRONG",{});var $qt=s(XMe);Dpr=r($qt,"layoutlmv3"),$qt.forEach(t),Gpr=r(iVe," \u2014 "),$J=n(iVe,"A",{href:!0});var kqt=s($J);Opr=r(kqt,"LayoutLMv3ForQuestionAnswering"),kqt.forEach(t),Vpr=r(iVe," (LayoutLMv3 model)"),iVe.forEach(t),Wse.forEach(t),Xpr=i(ka),NE=n(ka,"P",{});var dVe=s(NE);zpr=r(dVe,"The model is set in evaluation mode by default using "),zMe=n(dVe,"CODE",{});var Sqt=s(zMe);Qpr=r(Sqt,"model.eval()"),Sqt.forEach(t),Wpr=r(dVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QMe=n(dVe,"CODE",{});var Rqt=s(QMe);Upr=r(Rqt,"model.train()"),Rqt.forEach(t),dVe.forEach(t),Hpr=i(ka),T(qE.$$.fragment,ka),ka.forEach(t),Bl.forEach(t),EYe=i(m),Kd=n(m,"H2",{class:!0});var NZe=s(Kd);jE=n(NZe,"A",{id:!0,class:!0,href:!0});var Pqt=s(jE);WMe=n(Pqt,"SPAN",{});var Bqt=s(WMe);T(Xx.$$.fragment,Bqt),Bqt.forEach(t),Pqt.forEach(t),Jpr=i(NZe),UMe=n(NZe,"SPAN",{});var Iqt=s(UMe);Ypr=r(Iqt,"AutoModelForImageClassification"),Iqt.forEach(t),NZe.forEach(t),CYe=i(m),Qo=n(m,"DIV",{class:!0});var Il=s(Qo);T(zx.$$.fragment,Il),Kpr=i(Il),Zd=n(Il,"P",{});var Use=s(Zd);Zpr=r(Use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kJ=n(Use,"A",{href:!0});var Nqt=s(kJ);e_r=r(Nqt,"from_pretrained()"),Nqt.forEach(t),o_r=r(Use," class method or the "),SJ=n(Use,"A",{href:!0});var qqt=s(SJ);r_r=r(qqt,"from_config()"),qqt.forEach(t),t_r=r(Use,` class
method.`),Use.forEach(t),a_r=i(Il),Qx=n(Il,"P",{});var qZe=s(Qx);n_r=r(qZe,"This class cannot be instantiated directly using "),HMe=n(qZe,"CODE",{});var jqt=s(HMe);s_r=r(jqt,"__init__()"),jqt.forEach(t),l_r=r(qZe," (throws an error)."),qZe.forEach(t),i_r=i(Il),yt=n(Il,"DIV",{class:!0});var ky=s(yt);T(Wx.$$.fragment,ky),d_r=i(ky),JMe=n(ky,"P",{});var Dqt=s(JMe);c_r=r(Dqt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dqt.forEach(t),m_r=i(ky),ec=n(ky,"P",{});var Hse=s(ec);f_r=r(Hse,`Note:
Loading a model from its configuration file does `),YMe=n(Hse,"STRONG",{});var Gqt=s(YMe);g_r=r(Gqt,"not"),Gqt.forEach(t),h_r=r(Hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Hse,"A",{href:!0});var Oqt=s(RJ);u_r=r(Oqt,"from_pretrained()"),Oqt.forEach(t),p_r=r(Hse," to load the model weights."),Hse.forEach(t),__r=i(ky),T(DE.$$.fragment,ky),ky.forEach(t),b_r=i(Il),mo=n(Il,"DIV",{class:!0});var Sa=s(mo);T(Ux.$$.fragment,Sa),v_r=i(Sa),KMe=n(Sa,"P",{});var Vqt=s(KMe);F_r=r(Vqt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vqt.forEach(t),T_r=i(Sa),dn=n(Sa,"P",{});var Sy=s(dn);M_r=r(Sy,"The model class to instantiate is selected based on the "),ZMe=n(Sy,"CODE",{});var Xqt=s(ZMe);E_r=r(Xqt,"model_type"),Xqt.forEach(t),C_r=r(Sy,` property of the config object (either
passed as an argument or loaded from `),eEe=n(Sy,"CODE",{});var zqt=s(eEe);w_r=r(zqt,"pretrained_model_name_or_path"),zqt.forEach(t),A_r=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(Sy,"CODE",{});var Qqt=s(oEe);L_r=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),y_r=r(Sy,":"),Sy.forEach(t),x_r=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);GE=n(Fe,"LI",{});var cVe=s(GE);rEe=n(cVe,"STRONG",{});var Wqt=s(rEe);$_r=r(Wqt,"beit"),Wqt.forEach(t),k_r=r(cVe," \u2014 "),PJ=n(cVe,"A",{href:!0});var Uqt=s(PJ);S_r=r(Uqt,"BeitForImageClassification"),Uqt.forEach(t),R_r=r(cVe," (BEiT model)"),cVe.forEach(t),P_r=i(Fe),OE=n(Fe,"LI",{});var mVe=s(OE);tEe=n(mVe,"STRONG",{});var Hqt=s(tEe);B_r=r(Hqt,"convnext"),Hqt.forEach(t),I_r=r(mVe," \u2014 "),BJ=n(mVe,"A",{href:!0});var Jqt=s(BJ);N_r=r(Jqt,"ConvNextForImageClassification"),Jqt.forEach(t),q_r=r(mVe," (ConvNeXT model)"),mVe.forEach(t),j_r=i(Fe),VE=n(Fe,"LI",{});var fVe=s(VE);aEe=n(fVe,"STRONG",{});var Yqt=s(aEe);D_r=r(Yqt,"cvt"),Yqt.forEach(t),G_r=r(fVe," \u2014 "),IJ=n(fVe,"A",{href:!0});var Kqt=s(IJ);O_r=r(Kqt,"CvtForImageClassification"),Kqt.forEach(t),V_r=r(fVe," (CvT model)"),fVe.forEach(t),X_r=i(Fe),XE=n(Fe,"LI",{});var gVe=s(XE);nEe=n(gVe,"STRONG",{});var Zqt=s(nEe);z_r=r(Zqt,"data2vec-vision"),Zqt.forEach(t),Q_r=r(gVe," \u2014 "),NJ=n(gVe,"A",{href:!0});var ejt=s(NJ);W_r=r(ejt,"Data2VecVisionForImageClassification"),ejt.forEach(t),U_r=r(gVe," (Data2VecVision model)"),gVe.forEach(t),H_r=i(Fe),pl=n(Fe,"LI",{});var iB=s(pl);sEe=n(iB,"STRONG",{});var ojt=s(sEe);J_r=r(ojt,"deit"),ojt.forEach(t),Y_r=r(iB," \u2014 "),qJ=n(iB,"A",{href:!0});var rjt=s(qJ);K_r=r(rjt,"DeiTForImageClassification"),rjt.forEach(t),Z_r=r(iB," or "),jJ=n(iB,"A",{href:!0});var tjt=s(jJ);ebr=r(tjt,"DeiTForImageClassificationWithTeacher"),tjt.forEach(t),obr=r(iB," (DeiT model)"),iB.forEach(t),rbr=i(Fe),zE=n(Fe,"LI",{});var hVe=s(zE);lEe=n(hVe,"STRONG",{});var ajt=s(lEe);tbr=r(ajt,"imagegpt"),ajt.forEach(t),abr=r(hVe," \u2014 "),DJ=n(hVe,"A",{href:!0});var njt=s(DJ);nbr=r(njt,"ImageGPTForImageClassification"),njt.forEach(t),sbr=r(hVe," (ImageGPT model)"),hVe.forEach(t),lbr=i(Fe),_l=n(Fe,"LI",{});var dB=s(_l);iEe=n(dB,"STRONG",{});var sjt=s(iEe);ibr=r(sjt,"levit"),sjt.forEach(t),dbr=r(dB," \u2014 "),GJ=n(dB,"A",{href:!0});var ljt=s(GJ);cbr=r(ljt,"LevitForImageClassification"),ljt.forEach(t),mbr=r(dB," or "),OJ=n(dB,"A",{href:!0});var ijt=s(OJ);fbr=r(ijt,"LevitForImageClassificationWithTeacher"),ijt.forEach(t),gbr=r(dB," (LeViT model)"),dB.forEach(t),hbr=i(Fe),QE=n(Fe,"LI",{});var uVe=s(QE);dEe=n(uVe,"STRONG",{});var djt=s(dEe);ubr=r(djt,"mobilevit"),djt.forEach(t),pbr=r(uVe," \u2014 "),VJ=n(uVe,"A",{href:!0});var cjt=s(VJ);_br=r(cjt,"MobileViTForImageClassification"),cjt.forEach(t),bbr=r(uVe," (MobileViT model)"),uVe.forEach(t),vbr=i(Fe),xt=n(Fe,"LI",{});var Ff=s(xt);cEe=n(Ff,"STRONG",{});var mjt=s(cEe);Fbr=r(mjt,"perceiver"),mjt.forEach(t),Tbr=r(Ff," \u2014 "),XJ=n(Ff,"A",{href:!0});var fjt=s(XJ);Mbr=r(fjt,"PerceiverForImageClassificationLearned"),fjt.forEach(t),Ebr=r(Ff," or "),zJ=n(Ff,"A",{href:!0});var gjt=s(zJ);Cbr=r(gjt,"PerceiverForImageClassificationFourier"),gjt.forEach(t),wbr=r(Ff," or "),QJ=n(Ff,"A",{href:!0});var hjt=s(QJ);Abr=r(hjt,"PerceiverForImageClassificationConvProcessing"),hjt.forEach(t),Lbr=r(Ff," (Perceiver model)"),Ff.forEach(t),ybr=i(Fe),WE=n(Fe,"LI",{});var pVe=s(WE);mEe=n(pVe,"STRONG",{});var ujt=s(mEe);xbr=r(ujt,"poolformer"),ujt.forEach(t),$br=r(pVe," \u2014 "),WJ=n(pVe,"A",{href:!0});var pjt=s(WJ);kbr=r(pjt,"PoolFormerForImageClassification"),pjt.forEach(t),Sbr=r(pVe," (PoolFormer model)"),pVe.forEach(t),Rbr=i(Fe),UE=n(Fe,"LI",{});var _Ve=s(UE);fEe=n(_Ve,"STRONG",{});var _jt=s(fEe);Pbr=r(_jt,"regnet"),_jt.forEach(t),Bbr=r(_Ve," \u2014 "),UJ=n(_Ve,"A",{href:!0});var bjt=s(UJ);Ibr=r(bjt,"RegNetForImageClassification"),bjt.forEach(t),Nbr=r(_Ve," (RegNet model)"),_Ve.forEach(t),qbr=i(Fe),HE=n(Fe,"LI",{});var bVe=s(HE);gEe=n(bVe,"STRONG",{});var vjt=s(gEe);jbr=r(vjt,"resnet"),vjt.forEach(t),Dbr=r(bVe," \u2014 "),HJ=n(bVe,"A",{href:!0});var Fjt=s(HJ);Gbr=r(Fjt,"ResNetForImageClassification"),Fjt.forEach(t),Obr=r(bVe," (ResNet model)"),bVe.forEach(t),Vbr=i(Fe),JE=n(Fe,"LI",{});var vVe=s(JE);hEe=n(vVe,"STRONG",{});var Tjt=s(hEe);Xbr=r(Tjt,"segformer"),Tjt.forEach(t),zbr=r(vVe," \u2014 "),JJ=n(vVe,"A",{href:!0});var Mjt=s(JJ);Qbr=r(Mjt,"SegformerForImageClassification"),Mjt.forEach(t),Wbr=r(vVe," (SegFormer model)"),vVe.forEach(t),Ubr=i(Fe),YE=n(Fe,"LI",{});var FVe=s(YE);uEe=n(FVe,"STRONG",{});var Ejt=s(uEe);Hbr=r(Ejt,"swin"),Ejt.forEach(t),Jbr=r(FVe," \u2014 "),YJ=n(FVe,"A",{href:!0});var Cjt=s(YJ);Ybr=r(Cjt,"SwinForImageClassification"),Cjt.forEach(t),Kbr=r(FVe," (Swin Transformer model)"),FVe.forEach(t),Zbr=i(Fe),KE=n(Fe,"LI",{});var TVe=s(KE);pEe=n(TVe,"STRONG",{});var wjt=s(pEe);e2r=r(wjt,"swinv2"),wjt.forEach(t),o2r=r(TVe," \u2014 "),KJ=n(TVe,"A",{href:!0});var Ajt=s(KJ);r2r=r(Ajt,"Swinv2ForImageClassification"),Ajt.forEach(t),t2r=r(TVe," (Swin Transformer V2 model)"),TVe.forEach(t),a2r=i(Fe),ZE=n(Fe,"LI",{});var MVe=s(ZE);_Ee=n(MVe,"STRONG",{});var Ljt=s(_Ee);n2r=r(Ljt,"van"),Ljt.forEach(t),s2r=r(MVe," \u2014 "),ZJ=n(MVe,"A",{href:!0});var yjt=s(ZJ);l2r=r(yjt,"VanForImageClassification"),yjt.forEach(t),i2r=r(MVe," (VAN model)"),MVe.forEach(t),d2r=i(Fe),e4=n(Fe,"LI",{});var EVe=s(e4);bEe=n(EVe,"STRONG",{});var xjt=s(bEe);c2r=r(xjt,"vit"),xjt.forEach(t),m2r=r(EVe," \u2014 "),eY=n(EVe,"A",{href:!0});var $jt=s(eY);f2r=r($jt,"ViTForImageClassification"),$jt.forEach(t),g2r=r(EVe," (ViT model)"),EVe.forEach(t),Fe.forEach(t),h2r=i(Sa),o4=n(Sa,"P",{});var CVe=s(o4);u2r=r(CVe,"The model is set in evaluation mode by default using "),vEe=n(CVe,"CODE",{});var kjt=s(vEe);p2r=r(kjt,"model.eval()"),kjt.forEach(t),_2r=r(CVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FEe=n(CVe,"CODE",{});var Sjt=s(FEe);b2r=r(Sjt,"model.train()"),Sjt.forEach(t),CVe.forEach(t),v2r=i(Sa),T(r4.$$.fragment,Sa),Sa.forEach(t),Il.forEach(t),wYe=i(m),oc=n(m,"H2",{class:!0});var jZe=s(oc);t4=n(jZe,"A",{id:!0,class:!0,href:!0});var Rjt=s(t4);TEe=n(Rjt,"SPAN",{});var Pjt=s(TEe);T(Hx.$$.fragment,Pjt),Pjt.forEach(t),Rjt.forEach(t),F2r=i(jZe),MEe=n(jZe,"SPAN",{});var Bjt=s(MEe);T2r=r(Bjt,"AutoModelForVideoClassification"),Bjt.forEach(t),jZe.forEach(t),AYe=i(m),Wo=n(m,"DIV",{class:!0});var Nl=s(Wo);T(Jx.$$.fragment,Nl),M2r=i(Nl),rc=n(Nl,"P",{});var Jse=s(rc);E2r=r(Jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),oY=n(Jse,"A",{href:!0});var Ijt=s(oY);C2r=r(Ijt,"from_pretrained()"),Ijt.forEach(t),w2r=r(Jse," class method or the "),rY=n(Jse,"A",{href:!0});var Njt=s(rY);A2r=r(Njt,"from_config()"),Njt.forEach(t),L2r=r(Jse,` class
method.`),Jse.forEach(t),y2r=i(Nl),Yx=n(Nl,"P",{});var DZe=s(Yx);x2r=r(DZe,"This class cannot be instantiated directly using "),EEe=n(DZe,"CODE",{});var qjt=s(EEe);$2r=r(qjt,"__init__()"),qjt.forEach(t),k2r=r(DZe," (throws an error)."),DZe.forEach(t),S2r=i(Nl),$t=n(Nl,"DIV",{class:!0});var Ry=s($t);T(Kx.$$.fragment,Ry),R2r=i(Ry),CEe=n(Ry,"P",{});var jjt=s(CEe);P2r=r(jjt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),jjt.forEach(t),B2r=i(Ry),tc=n(Ry,"P",{});var Yse=s(tc);I2r=r(Yse,`Note:
Loading a model from its configuration file does `),wEe=n(Yse,"STRONG",{});var Djt=s(wEe);N2r=r(Djt,"not"),Djt.forEach(t),q2r=r(Yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(Yse,"A",{href:!0});var Gjt=s(tY);j2r=r(Gjt,"from_pretrained()"),Gjt.forEach(t),D2r=r(Yse," to load the model weights."),Yse.forEach(t),G2r=i(Ry),T(a4.$$.fragment,Ry),Ry.forEach(t),O2r=i(Nl),fo=n(Nl,"DIV",{class:!0});var Ra=s(fo);T(Zx.$$.fragment,Ra),V2r=i(Ra),AEe=n(Ra,"P",{});var Ojt=s(AEe);X2r=r(Ojt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Ojt.forEach(t),z2r=i(Ra),cn=n(Ra,"P",{});var Py=s(cn);Q2r=r(Py,"The model class to instantiate is selected based on the "),LEe=n(Py,"CODE",{});var Vjt=s(LEe);W2r=r(Vjt,"model_type"),Vjt.forEach(t),U2r=r(Py,` property of the config object (either
passed as an argument or loaded from `),yEe=n(Py,"CODE",{});var Xjt=s(yEe);H2r=r(Xjt,"pretrained_model_name_or_path"),Xjt.forEach(t),J2r=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=n(Py,"CODE",{});var zjt=s(xEe);Y2r=r(zjt,"pretrained_model_name_or_path"),zjt.forEach(t),K2r=r(Py,":"),Py.forEach(t),Z2r=i(Ra),$Ee=n(Ra,"UL",{});var Qjt=s($Ee);n4=n(Qjt,"LI",{});var wVe=s(n4);kEe=n(wVe,"STRONG",{});var Wjt=s(kEe);evr=r(Wjt,"videomae"),Wjt.forEach(t),ovr=r(wVe," \u2014 "),aY=n(wVe,"A",{href:!0});var Ujt=s(aY);rvr=r(Ujt,"VideoMAEForVideoClassification"),Ujt.forEach(t),tvr=r(wVe," (VideoMAE model)"),wVe.forEach(t),Qjt.forEach(t),avr=i(Ra),s4=n(Ra,"P",{});var AVe=s(s4);nvr=r(AVe,"The model is set in evaluation mode by default using "),SEe=n(AVe,"CODE",{});var Hjt=s(SEe);svr=r(Hjt,"model.eval()"),Hjt.forEach(t),lvr=r(AVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),REe=n(AVe,"CODE",{});var Jjt=s(REe);ivr=r(Jjt,"model.train()"),Jjt.forEach(t),AVe.forEach(t),dvr=i(Ra),T(l4.$$.fragment,Ra),Ra.forEach(t),Nl.forEach(t),LYe=i(m),ac=n(m,"H2",{class:!0});var GZe=s(ac);i4=n(GZe,"A",{id:!0,class:!0,href:!0});var Yjt=s(i4);PEe=n(Yjt,"SPAN",{});var Kjt=s(PEe);T(e$.$$.fragment,Kjt),Kjt.forEach(t),Yjt.forEach(t),cvr=i(GZe),BEe=n(GZe,"SPAN",{});var Zjt=s(BEe);mvr=r(Zjt,"AutoModelForVision2Seq"),Zjt.forEach(t),GZe.forEach(t),yYe=i(m),Uo=n(m,"DIV",{class:!0});var ql=s(Uo);T(o$.$$.fragment,ql),fvr=i(ql),nc=n(ql,"P",{});var Kse=s(nc);gvr=r(Kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nY=n(Kse,"A",{href:!0});var eDt=s(nY);hvr=r(eDt,"from_pretrained()"),eDt.forEach(t),uvr=r(Kse," class method or the "),sY=n(Kse,"A",{href:!0});var oDt=s(sY);pvr=r(oDt,"from_config()"),oDt.forEach(t),_vr=r(Kse,` class
method.`),Kse.forEach(t),bvr=i(ql),r$=n(ql,"P",{});var OZe=s(r$);vvr=r(OZe,"This class cannot be instantiated directly using "),IEe=n(OZe,"CODE",{});var rDt=s(IEe);Fvr=r(rDt,"__init__()"),rDt.forEach(t),Tvr=r(OZe," (throws an error)."),OZe.forEach(t),Mvr=i(ql),kt=n(ql,"DIV",{class:!0});var By=s(kt);T(t$.$$.fragment,By),Evr=i(By),NEe=n(By,"P",{});var tDt=s(NEe);Cvr=r(tDt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tDt.forEach(t),wvr=i(By),sc=n(By,"P",{});var Zse=s(sc);Avr=r(Zse,`Note:
Loading a model from its configuration file does `),qEe=n(Zse,"STRONG",{});var aDt=s(qEe);Lvr=r(aDt,"not"),aDt.forEach(t),yvr=r(Zse,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(Zse,"A",{href:!0});var nDt=s(lY);xvr=r(nDt,"from_pretrained()"),nDt.forEach(t),$vr=r(Zse," to load the model weights."),Zse.forEach(t),kvr=i(By),T(d4.$$.fragment,By),By.forEach(t),Svr=i(ql),go=n(ql,"DIV",{class:!0});var Pa=s(go);T(a$.$$.fragment,Pa),Rvr=i(Pa),jEe=n(Pa,"P",{});var sDt=s(jEe);Pvr=r(sDt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sDt.forEach(t),Bvr=i(Pa),mn=n(Pa,"P",{});var Iy=s(mn);Ivr=r(Iy,"The model class to instantiate is selected based on the "),DEe=n(Iy,"CODE",{});var lDt=s(DEe);Nvr=r(lDt,"model_type"),lDt.forEach(t),qvr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),GEe=n(Iy,"CODE",{});var iDt=s(GEe);jvr=r(iDt,"pretrained_model_name_or_path"),iDt.forEach(t),Dvr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OEe=n(Iy,"CODE",{});var dDt=s(OEe);Gvr=r(dDt,"pretrained_model_name_or_path"),dDt.forEach(t),Ovr=r(Iy,":"),Iy.forEach(t),Vvr=i(Pa),VEe=n(Pa,"UL",{});var cDt=s(VEe);c4=n(cDt,"LI",{});var LVe=s(c4);XEe=n(LVe,"STRONG",{});var mDt=s(XEe);Xvr=r(mDt,"vision-encoder-decoder"),mDt.forEach(t),zvr=r(LVe," \u2014 "),iY=n(LVe,"A",{href:!0});var fDt=s(iY);Qvr=r(fDt,"VisionEncoderDecoderModel"),fDt.forEach(t),Wvr=r(LVe," (Vision Encoder decoder model)"),LVe.forEach(t),cDt.forEach(t),Uvr=i(Pa),m4=n(Pa,"P",{});var yVe=s(m4);Hvr=r(yVe,"The model is set in evaluation mode by default using "),zEe=n(yVe,"CODE",{});var gDt=s(zEe);Jvr=r(gDt,"model.eval()"),gDt.forEach(t),Yvr=r(yVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QEe=n(yVe,"CODE",{});var hDt=s(QEe);Kvr=r(hDt,"model.train()"),hDt.forEach(t),yVe.forEach(t),Zvr=i(Pa),T(f4.$$.fragment,Pa),Pa.forEach(t),ql.forEach(t),xYe=i(m),lc=n(m,"H2",{class:!0});var VZe=s(lc);g4=n(VZe,"A",{id:!0,class:!0,href:!0});var uDt=s(g4);WEe=n(uDt,"SPAN",{});var pDt=s(WEe);T(n$.$$.fragment,pDt),pDt.forEach(t),uDt.forEach(t),e1r=i(VZe),UEe=n(VZe,"SPAN",{});var _Dt=s(UEe);o1r=r(_Dt,"AutoModelForVisualQuestionAnswering"),_Dt.forEach(t),VZe.forEach(t),$Ye=i(m),Ho=n(m,"DIV",{class:!0});var jl=s(Ho);T(s$.$$.fragment,jl),r1r=i(jl),ic=n(jl,"P",{});var ele=s(ic);t1r=r(ele,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),dY=n(ele,"A",{href:!0});var bDt=s(dY);a1r=r(bDt,"from_pretrained()"),bDt.forEach(t),n1r=r(ele," class method or the "),cY=n(ele,"A",{href:!0});var vDt=s(cY);s1r=r(vDt,"from_config()"),vDt.forEach(t),l1r=r(ele,` class
method.`),ele.forEach(t),i1r=i(jl),l$=n(jl,"P",{});var XZe=s(l$);d1r=r(XZe,"This class cannot be instantiated directly using "),HEe=n(XZe,"CODE",{});var FDt=s(HEe);c1r=r(FDt,"__init__()"),FDt.forEach(t),m1r=r(XZe," (throws an error)."),XZe.forEach(t),f1r=i(jl),St=n(jl,"DIV",{class:!0});var Ny=s(St);T(i$.$$.fragment,Ny),g1r=i(Ny),JEe=n(Ny,"P",{});var TDt=s(JEe);h1r=r(TDt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),TDt.forEach(t),u1r=i(Ny),dc=n(Ny,"P",{});var ole=s(dc);p1r=r(ole,`Note:
Loading a model from its configuration file does `),YEe=n(ole,"STRONG",{});var MDt=s(YEe);_1r=r(MDt,"not"),MDt.forEach(t),b1r=r(ole,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(ole,"A",{href:!0});var EDt=s(mY);v1r=r(EDt,"from_pretrained()"),EDt.forEach(t),F1r=r(ole," to load the model weights."),ole.forEach(t),T1r=i(Ny),T(h4.$$.fragment,Ny),Ny.forEach(t),M1r=i(jl),ho=n(jl,"DIV",{class:!0});var Ba=s(ho);T(d$.$$.fragment,Ba),E1r=i(Ba),KEe=n(Ba,"P",{});var CDt=s(KEe);C1r=r(CDt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),CDt.forEach(t),w1r=i(Ba),fn=n(Ba,"P",{});var qy=s(fn);A1r=r(qy,"The model class to instantiate is selected based on the "),ZEe=n(qy,"CODE",{});var wDt=s(ZEe);L1r=r(wDt,"model_type"),wDt.forEach(t),y1r=r(qy,` property of the config object (either
passed as an argument or loaded from `),e4e=n(qy,"CODE",{});var ADt=s(e4e);x1r=r(ADt,"pretrained_model_name_or_path"),ADt.forEach(t),$1r=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(qy,"CODE",{});var LDt=s(o4e);k1r=r(LDt,"pretrained_model_name_or_path"),LDt.forEach(t),S1r=r(qy,":"),qy.forEach(t),R1r=i(Ba),r4e=n(Ba,"UL",{});var yDt=s(r4e);u4=n(yDt,"LI",{});var xVe=s(u4);t4e=n(xVe,"STRONG",{});var xDt=s(t4e);P1r=r(xDt,"vilt"),xDt.forEach(t),B1r=r(xVe," \u2014 "),fY=n(xVe,"A",{href:!0});var $Dt=s(fY);I1r=r($Dt,"ViltForQuestionAnswering"),$Dt.forEach(t),N1r=r(xVe," (ViLT model)"),xVe.forEach(t),yDt.forEach(t),q1r=i(Ba),p4=n(Ba,"P",{});var $Ve=s(p4);j1r=r($Ve,"The model is set in evaluation mode by default using "),a4e=n($Ve,"CODE",{});var kDt=s(a4e);D1r=r(kDt,"model.eval()"),kDt.forEach(t),G1r=r($Ve,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n4e=n($Ve,"CODE",{});var SDt=s(n4e);O1r=r(SDt,"model.train()"),SDt.forEach(t),$Ve.forEach(t),V1r=i(Ba),T(_4.$$.fragment,Ba),Ba.forEach(t),jl.forEach(t),kYe=i(m),cc=n(m,"H2",{class:!0});var zZe=s(cc);b4=n(zZe,"A",{id:!0,class:!0,href:!0});var RDt=s(b4);s4e=n(RDt,"SPAN",{});var PDt=s(s4e);T(c$.$$.fragment,PDt),PDt.forEach(t),RDt.forEach(t),X1r=i(zZe),l4e=n(zZe,"SPAN",{});var BDt=s(l4e);z1r=r(BDt,"AutoModelForAudioClassification"),BDt.forEach(t),zZe.forEach(t),SYe=i(m),Jo=n(m,"DIV",{class:!0});var Dl=s(Jo);T(m$.$$.fragment,Dl),Q1r=i(Dl),mc=n(Dl,"P",{});var rle=s(mc);W1r=r(rle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gY=n(rle,"A",{href:!0});var IDt=s(gY);U1r=r(IDt,"from_pretrained()"),IDt.forEach(t),H1r=r(rle," class method or the "),hY=n(rle,"A",{href:!0});var NDt=s(hY);J1r=r(NDt,"from_config()"),NDt.forEach(t),Y1r=r(rle,` class
method.`),rle.forEach(t),K1r=i(Dl),f$=n(Dl,"P",{});var QZe=s(f$);Z1r=r(QZe,"This class cannot be instantiated directly using "),i4e=n(QZe,"CODE",{});var qDt=s(i4e);eFr=r(qDt,"__init__()"),qDt.forEach(t),oFr=r(QZe," (throws an error)."),QZe.forEach(t),rFr=i(Dl),Rt=n(Dl,"DIV",{class:!0});var jy=s(Rt);T(g$.$$.fragment,jy),tFr=i(jy),d4e=n(jy,"P",{});var jDt=s(d4e);aFr=r(jDt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),jDt.forEach(t),nFr=i(jy),fc=n(jy,"P",{});var tle=s(fc);sFr=r(tle,`Note:
Loading a model from its configuration file does `),c4e=n(tle,"STRONG",{});var DDt=s(c4e);lFr=r(DDt,"not"),DDt.forEach(t),iFr=r(tle,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(tle,"A",{href:!0});var GDt=s(uY);dFr=r(GDt,"from_pretrained()"),GDt.forEach(t),cFr=r(tle," to load the model weights."),tle.forEach(t),mFr=i(jy),T(v4.$$.fragment,jy),jy.forEach(t),fFr=i(Dl),uo=n(Dl,"DIV",{class:!0});var Ia=s(uo);T(h$.$$.fragment,Ia),gFr=i(Ia),m4e=n(Ia,"P",{});var ODt=s(m4e);hFr=r(ODt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ODt.forEach(t),uFr=i(Ia),gn=n(Ia,"P",{});var Dy=s(gn);pFr=r(Dy,"The model class to instantiate is selected based on the "),f4e=n(Dy,"CODE",{});var VDt=s(f4e);_Fr=r(VDt,"model_type"),VDt.forEach(t),bFr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),g4e=n(Dy,"CODE",{});var XDt=s(g4e);vFr=r(XDt,"pretrained_model_name_or_path"),XDt.forEach(t),FFr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(Dy,"CODE",{});var zDt=s(h4e);TFr=r(zDt,"pretrained_model_name_or_path"),zDt.forEach(t),MFr=r(Dy,":"),Dy.forEach(t),EFr=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);F4=n(Qe,"LI",{});var kVe=s(F4);u4e=n(kVe,"STRONG",{});var QDt=s(u4e);CFr=r(QDt,"data2vec-audio"),QDt.forEach(t),wFr=r(kVe," \u2014 "),pY=n(kVe,"A",{href:!0});var WDt=s(pY);AFr=r(WDt,"Data2VecAudioForSequenceClassification"),WDt.forEach(t),LFr=r(kVe," (Data2VecAudio model)"),kVe.forEach(t),yFr=i(Qe),T4=n(Qe,"LI",{});var SVe=s(T4);p4e=n(SVe,"STRONG",{});var UDt=s(p4e);xFr=r(UDt,"hubert"),UDt.forEach(t),$Fr=r(SVe," \u2014 "),_Y=n(SVe,"A",{href:!0});var HDt=s(_Y);kFr=r(HDt,"HubertForSequenceClassification"),HDt.forEach(t),SFr=r(SVe," (Hubert model)"),SVe.forEach(t),RFr=i(Qe),M4=n(Qe,"LI",{});var RVe=s(M4);_4e=n(RVe,"STRONG",{});var JDt=s(_4e);PFr=r(JDt,"sew"),JDt.forEach(t),BFr=r(RVe," \u2014 "),bY=n(RVe,"A",{href:!0});var YDt=s(bY);IFr=r(YDt,"SEWForSequenceClassification"),YDt.forEach(t),NFr=r(RVe," (SEW model)"),RVe.forEach(t),qFr=i(Qe),E4=n(Qe,"LI",{});var PVe=s(E4);b4e=n(PVe,"STRONG",{});var KDt=s(b4e);jFr=r(KDt,"sew-d"),KDt.forEach(t),DFr=r(PVe," \u2014 "),vY=n(PVe,"A",{href:!0});var ZDt=s(vY);GFr=r(ZDt,"SEWDForSequenceClassification"),ZDt.forEach(t),OFr=r(PVe," (SEW-D model)"),PVe.forEach(t),VFr=i(Qe),C4=n(Qe,"LI",{});var BVe=s(C4);v4e=n(BVe,"STRONG",{});var eGt=s(v4e);XFr=r(eGt,"unispeech"),eGt.forEach(t),zFr=r(BVe," \u2014 "),FY=n(BVe,"A",{href:!0});var oGt=s(FY);QFr=r(oGt,"UniSpeechForSequenceClassification"),oGt.forEach(t),WFr=r(BVe," (UniSpeech model)"),BVe.forEach(t),UFr=i(Qe),w4=n(Qe,"LI",{});var IVe=s(w4);F4e=n(IVe,"STRONG",{});var rGt=s(F4e);HFr=r(rGt,"unispeech-sat"),rGt.forEach(t),JFr=r(IVe," \u2014 "),TY=n(IVe,"A",{href:!0});var tGt=s(TY);YFr=r(tGt,"UniSpeechSatForSequenceClassification"),tGt.forEach(t),KFr=r(IVe," (UniSpeechSat model)"),IVe.forEach(t),ZFr=i(Qe),A4=n(Qe,"LI",{});var NVe=s(A4);T4e=n(NVe,"STRONG",{});var aGt=s(T4e);eTr=r(aGt,"wav2vec2"),aGt.forEach(t),oTr=r(NVe," \u2014 "),MY=n(NVe,"A",{href:!0});var nGt=s(MY);rTr=r(nGt,"Wav2Vec2ForSequenceClassification"),nGt.forEach(t),tTr=r(NVe," (Wav2Vec2 model)"),NVe.forEach(t),aTr=i(Qe),L4=n(Qe,"LI",{});var qVe=s(L4);M4e=n(qVe,"STRONG",{});var sGt=s(M4e);nTr=r(sGt,"wav2vec2-conformer"),sGt.forEach(t),sTr=r(qVe," \u2014 "),EY=n(qVe,"A",{href:!0});var lGt=s(EY);lTr=r(lGt,"Wav2Vec2ConformerForSequenceClassification"),lGt.forEach(t),iTr=r(qVe," (Wav2Vec2-Conformer model)"),qVe.forEach(t),dTr=i(Qe),y4=n(Qe,"LI",{});var jVe=s(y4);E4e=n(jVe,"STRONG",{});var iGt=s(E4e);cTr=r(iGt,"wavlm"),iGt.forEach(t),mTr=r(jVe," \u2014 "),CY=n(jVe,"A",{href:!0});var dGt=s(CY);fTr=r(dGt,"WavLMForSequenceClassification"),dGt.forEach(t),gTr=r(jVe," (WavLM model)"),jVe.forEach(t),Qe.forEach(t),hTr=i(Ia),x4=n(Ia,"P",{});var DVe=s(x4);uTr=r(DVe,"The model is set in evaluation mode by default using "),C4e=n(DVe,"CODE",{});var cGt=s(C4e);pTr=r(cGt,"model.eval()"),cGt.forEach(t),_Tr=r(DVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=n(DVe,"CODE",{});var mGt=s(w4e);bTr=r(mGt,"model.train()"),mGt.forEach(t),DVe.forEach(t),vTr=i(Ia),T($4.$$.fragment,Ia),Ia.forEach(t),Dl.forEach(t),RYe=i(m),gc=n(m,"H2",{class:!0});var WZe=s(gc);k4=n(WZe,"A",{id:!0,class:!0,href:!0});var fGt=s(k4);A4e=n(fGt,"SPAN",{});var gGt=s(A4e);T(u$.$$.fragment,gGt),gGt.forEach(t),fGt.forEach(t),FTr=i(WZe),L4e=n(WZe,"SPAN",{});var hGt=s(L4e);TTr=r(hGt,"AutoModelForAudioFrameClassification"),hGt.forEach(t),WZe.forEach(t),PYe=i(m),Yo=n(m,"DIV",{class:!0});var Gl=s(Yo);T(p$.$$.fragment,Gl),MTr=i(Gl),hc=n(Gl,"P",{});var ale=s(hc);ETr=r(ale,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wY=n(ale,"A",{href:!0});var uGt=s(wY);CTr=r(uGt,"from_pretrained()"),uGt.forEach(t),wTr=r(ale," class method or the "),AY=n(ale,"A",{href:!0});var pGt=s(AY);ATr=r(pGt,"from_config()"),pGt.forEach(t),LTr=r(ale,` class
method.`),ale.forEach(t),yTr=i(Gl),_$=n(Gl,"P",{});var UZe=s(_$);xTr=r(UZe,"This class cannot be instantiated directly using "),y4e=n(UZe,"CODE",{});var _Gt=s(y4e);$Tr=r(_Gt,"__init__()"),_Gt.forEach(t),kTr=r(UZe," (throws an error)."),UZe.forEach(t),STr=i(Gl),Pt=n(Gl,"DIV",{class:!0});var Gy=s(Pt);T(b$.$$.fragment,Gy),RTr=i(Gy),x4e=n(Gy,"P",{});var bGt=s(x4e);PTr=r(bGt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),bGt.forEach(t),BTr=i(Gy),uc=n(Gy,"P",{});var nle=s(uc);ITr=r(nle,`Note:
Loading a model from its configuration file does `),$4e=n(nle,"STRONG",{});var vGt=s($4e);NTr=r(vGt,"not"),vGt.forEach(t),qTr=r(nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(nle,"A",{href:!0});var FGt=s(LY);jTr=r(FGt,"from_pretrained()"),FGt.forEach(t),DTr=r(nle," to load the model weights."),nle.forEach(t),GTr=i(Gy),T(S4.$$.fragment,Gy),Gy.forEach(t),OTr=i(Gl),po=n(Gl,"DIV",{class:!0});var Na=s(po);T(v$.$$.fragment,Na),VTr=i(Na),k4e=n(Na,"P",{});var TGt=s(k4e);XTr=r(TGt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TGt.forEach(t),zTr=i(Na),hn=n(Na,"P",{});var Oy=s(hn);QTr=r(Oy,"The model class to instantiate is selected based on the "),S4e=n(Oy,"CODE",{});var MGt=s(S4e);WTr=r(MGt,"model_type"),MGt.forEach(t),UTr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),R4e=n(Oy,"CODE",{});var EGt=s(R4e);HTr=r(EGt,"pretrained_model_name_or_path"),EGt.forEach(t),JTr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(Oy,"CODE",{});var CGt=s(P4e);YTr=r(CGt,"pretrained_model_name_or_path"),CGt.forEach(t),KTr=r(Oy,":"),Oy.forEach(t),ZTr=i(Na),ct=n(Na,"UL",{});var Ol=s(ct);R4=n(Ol,"LI",{});var GVe=s(R4);B4e=n(GVe,"STRONG",{});var wGt=s(B4e);eMr=r(wGt,"data2vec-audio"),wGt.forEach(t),oMr=r(GVe," \u2014 "),yY=n(GVe,"A",{href:!0});var AGt=s(yY);rMr=r(AGt,"Data2VecAudioForAudioFrameClassification"),AGt.forEach(t),tMr=r(GVe," (Data2VecAudio model)"),GVe.forEach(t),aMr=i(Ol),P4=n(Ol,"LI",{});var OVe=s(P4);I4e=n(OVe,"STRONG",{});var LGt=s(I4e);nMr=r(LGt,"unispeech-sat"),LGt.forEach(t),sMr=r(OVe," \u2014 "),xY=n(OVe,"A",{href:!0});var yGt=s(xY);lMr=r(yGt,"UniSpeechSatForAudioFrameClassification"),yGt.forEach(t),iMr=r(OVe," (UniSpeechSat model)"),OVe.forEach(t),dMr=i(Ol),B4=n(Ol,"LI",{});var VVe=s(B4);N4e=n(VVe,"STRONG",{});var xGt=s(N4e);cMr=r(xGt,"wav2vec2"),xGt.forEach(t),mMr=r(VVe," \u2014 "),$Y=n(VVe,"A",{href:!0});var $Gt=s($Y);fMr=r($Gt,"Wav2Vec2ForAudioFrameClassification"),$Gt.forEach(t),gMr=r(VVe," (Wav2Vec2 model)"),VVe.forEach(t),hMr=i(Ol),I4=n(Ol,"LI",{});var XVe=s(I4);q4e=n(XVe,"STRONG",{});var kGt=s(q4e);uMr=r(kGt,"wav2vec2-conformer"),kGt.forEach(t),pMr=r(XVe," \u2014 "),kY=n(XVe,"A",{href:!0});var SGt=s(kY);_Mr=r(SGt,"Wav2Vec2ConformerForAudioFrameClassification"),SGt.forEach(t),bMr=r(XVe," (Wav2Vec2-Conformer model)"),XVe.forEach(t),vMr=i(Ol),N4=n(Ol,"LI",{});var zVe=s(N4);j4e=n(zVe,"STRONG",{});var RGt=s(j4e);FMr=r(RGt,"wavlm"),RGt.forEach(t),TMr=r(zVe," \u2014 "),SY=n(zVe,"A",{href:!0});var PGt=s(SY);MMr=r(PGt,"WavLMForAudioFrameClassification"),PGt.forEach(t),EMr=r(zVe," (WavLM model)"),zVe.forEach(t),Ol.forEach(t),CMr=i(Na),q4=n(Na,"P",{});var QVe=s(q4);wMr=r(QVe,"The model is set in evaluation mode by default using "),D4e=n(QVe,"CODE",{});var BGt=s(D4e);AMr=r(BGt,"model.eval()"),BGt.forEach(t),LMr=r(QVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(QVe,"CODE",{});var IGt=s(G4e);yMr=r(IGt,"model.train()"),IGt.forEach(t),QVe.forEach(t),xMr=i(Na),T(j4.$$.fragment,Na),Na.forEach(t),Gl.forEach(t),BYe=i(m),pc=n(m,"H2",{class:!0});var HZe=s(pc);D4=n(HZe,"A",{id:!0,class:!0,href:!0});var NGt=s(D4);O4e=n(NGt,"SPAN",{});var qGt=s(O4e);T(F$.$$.fragment,qGt),qGt.forEach(t),NGt.forEach(t),$Mr=i(HZe),V4e=n(HZe,"SPAN",{});var jGt=s(V4e);kMr=r(jGt,"AutoModelForCTC"),jGt.forEach(t),HZe.forEach(t),IYe=i(m),Ko=n(m,"DIV",{class:!0});var Vl=s(Ko);T(T$.$$.fragment,Vl),SMr=i(Vl),_c=n(Vl,"P",{});var sle=s(_c);RMr=r(sle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RY=n(sle,"A",{href:!0});var DGt=s(RY);PMr=r(DGt,"from_pretrained()"),DGt.forEach(t),BMr=r(sle," class method or the "),PY=n(sle,"A",{href:!0});var GGt=s(PY);IMr=r(GGt,"from_config()"),GGt.forEach(t),NMr=r(sle,` class
method.`),sle.forEach(t),qMr=i(Vl),M$=n(Vl,"P",{});var JZe=s(M$);jMr=r(JZe,"This class cannot be instantiated directly using "),X4e=n(JZe,"CODE",{});var OGt=s(X4e);DMr=r(OGt,"__init__()"),OGt.forEach(t),GMr=r(JZe," (throws an error)."),JZe.forEach(t),OMr=i(Vl),Bt=n(Vl,"DIV",{class:!0});var Vy=s(Bt);T(E$.$$.fragment,Vy),VMr=i(Vy),z4e=n(Vy,"P",{});var VGt=s(z4e);XMr=r(VGt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),VGt.forEach(t),zMr=i(Vy),bc=n(Vy,"P",{});var lle=s(bc);QMr=r(lle,`Note:
Loading a model from its configuration file does `),Q4e=n(lle,"STRONG",{});var XGt=s(Q4e);WMr=r(XGt,"not"),XGt.forEach(t),UMr=r(lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(lle,"A",{href:!0});var zGt=s(BY);HMr=r(zGt,"from_pretrained()"),zGt.forEach(t),JMr=r(lle," to load the model weights."),lle.forEach(t),YMr=i(Vy),T(G4.$$.fragment,Vy),Vy.forEach(t),KMr=i(Vl),_o=n(Vl,"DIV",{class:!0});var qa=s(_o);T(C$.$$.fragment,qa),ZMr=i(qa),W4e=n(qa,"P",{});var QGt=s(W4e);eEr=r(QGt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),QGt.forEach(t),oEr=i(qa),un=n(qa,"P",{});var Xy=s(un);rEr=r(Xy,"The model class to instantiate is selected based on the "),U4e=n(Xy,"CODE",{});var WGt=s(U4e);tEr=r(WGt,"model_type"),WGt.forEach(t),aEr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),H4e=n(Xy,"CODE",{});var UGt=s(H4e);nEr=r(UGt,"pretrained_model_name_or_path"),UGt.forEach(t),sEr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(Xy,"CODE",{});var HGt=s(J4e);lEr=r(HGt,"pretrained_model_name_or_path"),HGt.forEach(t),iEr=r(Xy,":"),Xy.forEach(t),dEr=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);O4=n(Ie,"LI",{});var WVe=s(O4);Y4e=n(WVe,"STRONG",{});var JGt=s(Y4e);cEr=r(JGt,"data2vec-audio"),JGt.forEach(t),mEr=r(WVe," \u2014 "),IY=n(WVe,"A",{href:!0});var YGt=s(IY);fEr=r(YGt,"Data2VecAudioForCTC"),YGt.forEach(t),gEr=r(WVe," (Data2VecAudio model)"),WVe.forEach(t),hEr=i(Ie),V4=n(Ie,"LI",{});var UVe=s(V4);K4e=n(UVe,"STRONG",{});var KGt=s(K4e);uEr=r(KGt,"hubert"),KGt.forEach(t),pEr=r(UVe," \u2014 "),NY=n(UVe,"A",{href:!0});var ZGt=s(NY);_Er=r(ZGt,"HubertForCTC"),ZGt.forEach(t),bEr=r(UVe," (Hubert model)"),UVe.forEach(t),vEr=i(Ie),X4=n(Ie,"LI",{});var HVe=s(X4);Z4e=n(HVe,"STRONG",{});var eOt=s(Z4e);FEr=r(eOt,"mctct"),eOt.forEach(t),TEr=r(HVe," \u2014 "),qY=n(HVe,"A",{href:!0});var oOt=s(qY);MEr=r(oOt,"MCTCTForCTC"),oOt.forEach(t),EEr=r(HVe," (M-CTC-T model)"),HVe.forEach(t),CEr=i(Ie),z4=n(Ie,"LI",{});var JVe=s(z4);eCe=n(JVe,"STRONG",{});var rOt=s(eCe);wEr=r(rOt,"sew"),rOt.forEach(t),AEr=r(JVe," \u2014 "),jY=n(JVe,"A",{href:!0});var tOt=s(jY);LEr=r(tOt,"SEWForCTC"),tOt.forEach(t),yEr=r(JVe," (SEW model)"),JVe.forEach(t),xEr=i(Ie),Q4=n(Ie,"LI",{});var YVe=s(Q4);oCe=n(YVe,"STRONG",{});var aOt=s(oCe);$Er=r(aOt,"sew-d"),aOt.forEach(t),kEr=r(YVe," \u2014 "),DY=n(YVe,"A",{href:!0});var nOt=s(DY);SEr=r(nOt,"SEWDForCTC"),nOt.forEach(t),REr=r(YVe," (SEW-D model)"),YVe.forEach(t),PEr=i(Ie),W4=n(Ie,"LI",{});var KVe=s(W4);rCe=n(KVe,"STRONG",{});var sOt=s(rCe);BEr=r(sOt,"unispeech"),sOt.forEach(t),IEr=r(KVe," \u2014 "),GY=n(KVe,"A",{href:!0});var lOt=s(GY);NEr=r(lOt,"UniSpeechForCTC"),lOt.forEach(t),qEr=r(KVe," (UniSpeech model)"),KVe.forEach(t),jEr=i(Ie),U4=n(Ie,"LI",{});var ZVe=s(U4);tCe=n(ZVe,"STRONG",{});var iOt=s(tCe);DEr=r(iOt,"unispeech-sat"),iOt.forEach(t),GEr=r(ZVe," \u2014 "),OY=n(ZVe,"A",{href:!0});var dOt=s(OY);OEr=r(dOt,"UniSpeechSatForCTC"),dOt.forEach(t),VEr=r(ZVe," (UniSpeechSat model)"),ZVe.forEach(t),XEr=i(Ie),H4=n(Ie,"LI",{});var eXe=s(H4);aCe=n(eXe,"STRONG",{});var cOt=s(aCe);zEr=r(cOt,"wav2vec2"),cOt.forEach(t),QEr=r(eXe," \u2014 "),VY=n(eXe,"A",{href:!0});var mOt=s(VY);WEr=r(mOt,"Wav2Vec2ForCTC"),mOt.forEach(t),UEr=r(eXe," (Wav2Vec2 model)"),eXe.forEach(t),HEr=i(Ie),J4=n(Ie,"LI",{});var oXe=s(J4);nCe=n(oXe,"STRONG",{});var fOt=s(nCe);JEr=r(fOt,"wav2vec2-conformer"),fOt.forEach(t),YEr=r(oXe," \u2014 "),XY=n(oXe,"A",{href:!0});var gOt=s(XY);KEr=r(gOt,"Wav2Vec2ConformerForCTC"),gOt.forEach(t),ZEr=r(oXe," (Wav2Vec2-Conformer model)"),oXe.forEach(t),e4r=i(Ie),Y4=n(Ie,"LI",{});var rXe=s(Y4);sCe=n(rXe,"STRONG",{});var hOt=s(sCe);o4r=r(hOt,"wavlm"),hOt.forEach(t),r4r=r(rXe," \u2014 "),zY=n(rXe,"A",{href:!0});var uOt=s(zY);t4r=r(uOt,"WavLMForCTC"),uOt.forEach(t),a4r=r(rXe," (WavLM model)"),rXe.forEach(t),Ie.forEach(t),n4r=i(qa),K4=n(qa,"P",{});var tXe=s(K4);s4r=r(tXe,"The model is set in evaluation mode by default using "),lCe=n(tXe,"CODE",{});var pOt=s(lCe);l4r=r(pOt,"model.eval()"),pOt.forEach(t),i4r=r(tXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iCe=n(tXe,"CODE",{});var _Ot=s(iCe);d4r=r(_Ot,"model.train()"),_Ot.forEach(t),tXe.forEach(t),c4r=i(qa),T(Z4.$$.fragment,qa),qa.forEach(t),Vl.forEach(t),NYe=i(m),vc=n(m,"H2",{class:!0});var YZe=s(vc);eC=n(YZe,"A",{id:!0,class:!0,href:!0});var bOt=s(eC);dCe=n(bOt,"SPAN",{});var vOt=s(dCe);T(w$.$$.fragment,vOt),vOt.forEach(t),bOt.forEach(t),m4r=i(YZe),cCe=n(YZe,"SPAN",{});var FOt=s(cCe);f4r=r(FOt,"AutoModelForSpeechSeq2Seq"),FOt.forEach(t),YZe.forEach(t),qYe=i(m),Zo=n(m,"DIV",{class:!0});var Xl=s(Zo);T(A$.$$.fragment,Xl),g4r=i(Xl),Fc=n(Xl,"P",{});var ile=s(Fc);h4r=r(ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QY=n(ile,"A",{href:!0});var TOt=s(QY);u4r=r(TOt,"from_pretrained()"),TOt.forEach(t),p4r=r(ile," class method or the "),WY=n(ile,"A",{href:!0});var MOt=s(WY);_4r=r(MOt,"from_config()"),MOt.forEach(t),b4r=r(ile,` class
method.`),ile.forEach(t),v4r=i(Xl),L$=n(Xl,"P",{});var KZe=s(L$);F4r=r(KZe,"This class cannot be instantiated directly using "),mCe=n(KZe,"CODE",{});var EOt=s(mCe);T4r=r(EOt,"__init__()"),EOt.forEach(t),M4r=r(KZe," (throws an error)."),KZe.forEach(t),E4r=i(Xl),It=n(Xl,"DIV",{class:!0});var zy=s(It);T(y$.$$.fragment,zy),C4r=i(zy),fCe=n(zy,"P",{});var COt=s(fCe);w4r=r(COt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),COt.forEach(t),A4r=i(zy),Tc=n(zy,"P",{});var dle=s(Tc);L4r=r(dle,`Note:
Loading a model from its configuration file does `),gCe=n(dle,"STRONG",{});var wOt=s(gCe);y4r=r(wOt,"not"),wOt.forEach(t),x4r=r(dle,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(dle,"A",{href:!0});var AOt=s(UY);$4r=r(AOt,"from_pretrained()"),AOt.forEach(t),k4r=r(dle," to load the model weights."),dle.forEach(t),S4r=i(zy),T(oC.$$.fragment,zy),zy.forEach(t),R4r=i(Xl),bo=n(Xl,"DIV",{class:!0});var ja=s(bo);T(x$.$$.fragment,ja),P4r=i(ja),hCe=n(ja,"P",{});var LOt=s(hCe);B4r=r(LOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),LOt.forEach(t),I4r=i(ja),pn=n(ja,"P",{});var Qy=s(pn);N4r=r(Qy,"The model class to instantiate is selected based on the "),uCe=n(Qy,"CODE",{});var yOt=s(uCe);q4r=r(yOt,"model_type"),yOt.forEach(t),j4r=r(Qy,` property of the config object (either
passed as an argument or loaded from `),pCe=n(Qy,"CODE",{});var xOt=s(pCe);D4r=r(xOt,"pretrained_model_name_or_path"),xOt.forEach(t),G4r=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(Qy,"CODE",{});var $Ot=s(_Ce);O4r=r($Ot,"pretrained_model_name_or_path"),$Ot.forEach(t),V4r=r(Qy,":"),Qy.forEach(t),X4r=i(ja),$$=n(ja,"UL",{});var ZZe=s($$);rC=n(ZZe,"LI",{});var aXe=s(rC);bCe=n(aXe,"STRONG",{});var kOt=s(bCe);z4r=r(kOt,"speech-encoder-decoder"),kOt.forEach(t),Q4r=r(aXe," \u2014 "),HY=n(aXe,"A",{href:!0});var SOt=s(HY);W4r=r(SOt,"SpeechEncoderDecoderModel"),SOt.forEach(t),U4r=r(aXe," (Speech Encoder decoder model)"),aXe.forEach(t),H4r=i(ZZe),tC=n(ZZe,"LI",{});var nXe=s(tC);vCe=n(nXe,"STRONG",{});var ROt=s(vCe);J4r=r(ROt,"speech_to_text"),ROt.forEach(t),Y4r=r(nXe," \u2014 "),JY=n(nXe,"A",{href:!0});var POt=s(JY);K4r=r(POt,"Speech2TextForConditionalGeneration"),POt.forEach(t),Z4r=r(nXe," (Speech2Text model)"),nXe.forEach(t),ZZe.forEach(t),eCr=i(ja),aC=n(ja,"P",{});var sXe=s(aC);oCr=r(sXe,"The model is set in evaluation mode by default using "),FCe=n(sXe,"CODE",{});var BOt=s(FCe);rCr=r(BOt,"model.eval()"),BOt.forEach(t),tCr=r(sXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TCe=n(sXe,"CODE",{});var IOt=s(TCe);aCr=r(IOt,"model.train()"),IOt.forEach(t),sXe.forEach(t),nCr=i(ja),T(nC.$$.fragment,ja),ja.forEach(t),Xl.forEach(t),jYe=i(m),Mc=n(m,"H2",{class:!0});var eeo=s(Mc);sC=n(eeo,"A",{id:!0,class:!0,href:!0});var NOt=s(sC);MCe=n(NOt,"SPAN",{});var qOt=s(MCe);T(k$.$$.fragment,qOt),qOt.forEach(t),NOt.forEach(t),sCr=i(eeo),ECe=n(eeo,"SPAN",{});var jOt=s(ECe);lCr=r(jOt,"AutoModelForAudioXVector"),jOt.forEach(t),eeo.forEach(t),DYe=i(m),er=n(m,"DIV",{class:!0});var zl=s(er);T(S$.$$.fragment,zl),iCr=i(zl),Ec=n(zl,"P",{});var cle=s(Ec);dCr=r(cle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YY=n(cle,"A",{href:!0});var DOt=s(YY);cCr=r(DOt,"from_pretrained()"),DOt.forEach(t),mCr=r(cle," class method or the "),KY=n(cle,"A",{href:!0});var GOt=s(KY);fCr=r(GOt,"from_config()"),GOt.forEach(t),gCr=r(cle,` class
method.`),cle.forEach(t),hCr=i(zl),R$=n(zl,"P",{});var oeo=s(R$);uCr=r(oeo,"This class cannot be instantiated directly using "),CCe=n(oeo,"CODE",{});var OOt=s(CCe);pCr=r(OOt,"__init__()"),OOt.forEach(t),_Cr=r(oeo," (throws an error)."),oeo.forEach(t),bCr=i(zl),Nt=n(zl,"DIV",{class:!0});var Wy=s(Nt);T(P$.$$.fragment,Wy),vCr=i(Wy),wCe=n(Wy,"P",{});var VOt=s(wCe);FCr=r(VOt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),VOt.forEach(t),TCr=i(Wy),Cc=n(Wy,"P",{});var mle=s(Cc);MCr=r(mle,`Note:
Loading a model from its configuration file does `),ACe=n(mle,"STRONG",{});var XOt=s(ACe);ECr=r(XOt,"not"),XOt.forEach(t),CCr=r(mle,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(mle,"A",{href:!0});var zOt=s(ZY);wCr=r(zOt,"from_pretrained()"),zOt.forEach(t),ACr=r(mle," to load the model weights."),mle.forEach(t),LCr=i(Wy),T(lC.$$.fragment,Wy),Wy.forEach(t),yCr=i(zl),vo=n(zl,"DIV",{class:!0});var Da=s(vo);T(B$.$$.fragment,Da),xCr=i(Da),LCe=n(Da,"P",{});var QOt=s(LCe);$Cr=r(QOt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),QOt.forEach(t),kCr=i(Da),_n=n(Da,"P",{});var Uy=s(_n);SCr=r(Uy,"The model class to instantiate is selected based on the "),yCe=n(Uy,"CODE",{});var WOt=s(yCe);RCr=r(WOt,"model_type"),WOt.forEach(t),PCr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),xCe=n(Uy,"CODE",{});var UOt=s(xCe);BCr=r(UOt,"pretrained_model_name_or_path"),UOt.forEach(t),ICr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=n(Uy,"CODE",{});var HOt=s($Ce);NCr=r(HOt,"pretrained_model_name_or_path"),HOt.forEach(t),qCr=r(Uy,":"),Uy.forEach(t),jCr=i(Da),mt=n(Da,"UL",{});var Ql=s(mt);iC=n(Ql,"LI",{});var lXe=s(iC);kCe=n(lXe,"STRONG",{});var JOt=s(kCe);DCr=r(JOt,"data2vec-audio"),JOt.forEach(t),GCr=r(lXe," \u2014 "),eK=n(lXe,"A",{href:!0});var YOt=s(eK);OCr=r(YOt,"Data2VecAudioForXVector"),YOt.forEach(t),VCr=r(lXe," (Data2VecAudio model)"),lXe.forEach(t),XCr=i(Ql),dC=n(Ql,"LI",{});var iXe=s(dC);SCe=n(iXe,"STRONG",{});var KOt=s(SCe);zCr=r(KOt,"unispeech-sat"),KOt.forEach(t),QCr=r(iXe," \u2014 "),oK=n(iXe,"A",{href:!0});var ZOt=s(oK);WCr=r(ZOt,"UniSpeechSatForXVector"),ZOt.forEach(t),UCr=r(iXe," (UniSpeechSat model)"),iXe.forEach(t),HCr=i(Ql),cC=n(Ql,"LI",{});var dXe=s(cC);RCe=n(dXe,"STRONG",{});var eVt=s(RCe);JCr=r(eVt,"wav2vec2"),eVt.forEach(t),YCr=r(dXe," \u2014 "),rK=n(dXe,"A",{href:!0});var oVt=s(rK);KCr=r(oVt,"Wav2Vec2ForXVector"),oVt.forEach(t),ZCr=r(dXe," (Wav2Vec2 model)"),dXe.forEach(t),e3r=i(Ql),mC=n(Ql,"LI",{});var cXe=s(mC);PCe=n(cXe,"STRONG",{});var rVt=s(PCe);o3r=r(rVt,"wav2vec2-conformer"),rVt.forEach(t),r3r=r(cXe," \u2014 "),tK=n(cXe,"A",{href:!0});var tVt=s(tK);t3r=r(tVt,"Wav2Vec2ConformerForXVector"),tVt.forEach(t),a3r=r(cXe," (Wav2Vec2-Conformer model)"),cXe.forEach(t),n3r=i(Ql),fC=n(Ql,"LI",{});var mXe=s(fC);BCe=n(mXe,"STRONG",{});var aVt=s(BCe);s3r=r(aVt,"wavlm"),aVt.forEach(t),l3r=r(mXe," \u2014 "),aK=n(mXe,"A",{href:!0});var nVt=s(aK);i3r=r(nVt,"WavLMForXVector"),nVt.forEach(t),d3r=r(mXe," (WavLM model)"),mXe.forEach(t),Ql.forEach(t),c3r=i(Da),gC=n(Da,"P",{});var fXe=s(gC);m3r=r(fXe,"The model is set in evaluation mode by default using "),ICe=n(fXe,"CODE",{});var sVt=s(ICe);f3r=r(sVt,"model.eval()"),sVt.forEach(t),g3r=r(fXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),NCe=n(fXe,"CODE",{});var lVt=s(NCe);h3r=r(lVt,"model.train()"),lVt.forEach(t),fXe.forEach(t),u3r=i(Da),T(hC.$$.fragment,Da),Da.forEach(t),zl.forEach(t),GYe=i(m),wc=n(m,"H2",{class:!0});var reo=s(wc);uC=n(reo,"A",{id:!0,class:!0,href:!0});var iVt=s(uC);qCe=n(iVt,"SPAN",{});var dVt=s(qCe);T(I$.$$.fragment,dVt),dVt.forEach(t),iVt.forEach(t),p3r=i(reo),jCe=n(reo,"SPAN",{});var cVt=s(jCe);_3r=r(cVt,"AutoModelForMaskedImageModeling"),cVt.forEach(t),reo.forEach(t),OYe=i(m),or=n(m,"DIV",{class:!0});var Wl=s(or);T(N$.$$.fragment,Wl),b3r=i(Wl),Ac=n(Wl,"P",{});var fle=s(Ac);v3r=r(fle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nK=n(fle,"A",{href:!0});var mVt=s(nK);F3r=r(mVt,"from_pretrained()"),mVt.forEach(t),T3r=r(fle," class method or the "),sK=n(fle,"A",{href:!0});var fVt=s(sK);M3r=r(fVt,"from_config()"),fVt.forEach(t),E3r=r(fle,` class
method.`),fle.forEach(t),C3r=i(Wl),q$=n(Wl,"P",{});var teo=s(q$);w3r=r(teo,"This class cannot be instantiated directly using "),DCe=n(teo,"CODE",{});var gVt=s(DCe);A3r=r(gVt,"__init__()"),gVt.forEach(t),L3r=r(teo," (throws an error)."),teo.forEach(t),y3r=i(Wl),qt=n(Wl,"DIV",{class:!0});var Hy=s(qt);T(j$.$$.fragment,Hy),x3r=i(Hy),GCe=n(Hy,"P",{});var hVt=s(GCe);$3r=r(hVt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hVt.forEach(t),k3r=i(Hy),Lc=n(Hy,"P",{});var gle=s(Lc);S3r=r(gle,`Note:
Loading a model from its configuration file does `),OCe=n(gle,"STRONG",{});var uVt=s(OCe);R3r=r(uVt,"not"),uVt.forEach(t),P3r=r(gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(gle,"A",{href:!0});var pVt=s(lK);B3r=r(pVt,"from_pretrained()"),pVt.forEach(t),I3r=r(gle," to load the model weights."),gle.forEach(t),N3r=i(Hy),T(pC.$$.fragment,Hy),Hy.forEach(t),q3r=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Ga=s(Fo);T(D$.$$.fragment,Ga),j3r=i(Ga),VCe=n(Ga,"P",{});var _Vt=s(VCe);D3r=r(_Vt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_Vt.forEach(t),G3r=i(Ga),bn=n(Ga,"P",{});var Jy=s(bn);O3r=r(Jy,"The model class to instantiate is selected based on the "),XCe=n(Jy,"CODE",{});var bVt=s(XCe);V3r=r(bVt,"model_type"),bVt.forEach(t),X3r=r(Jy,` property of the config object (either
passed as an argument or loaded from `),zCe=n(Jy,"CODE",{});var vVt=s(zCe);z3r=r(vVt,"pretrained_model_name_or_path"),vVt.forEach(t),Q3r=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QCe=n(Jy,"CODE",{});var FVt=s(QCe);W3r=r(FVt,"pretrained_model_name_or_path"),FVt.forEach(t),U3r=r(Jy,":"),Jy.forEach(t),H3r=i(Ga),vn=n(Ga,"UL",{});var Yy=s(vn);_C=n(Yy,"LI",{});var gXe=s(_C);WCe=n(gXe,"STRONG",{});var TVt=s(WCe);J3r=r(TVt,"deit"),TVt.forEach(t),Y3r=r(gXe," \u2014 "),iK=n(gXe,"A",{href:!0});var MVt=s(iK);K3r=r(MVt,"DeiTForMaskedImageModeling"),MVt.forEach(t),Z3r=r(gXe," (DeiT model)"),gXe.forEach(t),e5r=i(Yy),bC=n(Yy,"LI",{});var hXe=s(bC);UCe=n(hXe,"STRONG",{});var EVt=s(UCe);o5r=r(EVt,"swin"),EVt.forEach(t),r5r=r(hXe," \u2014 "),dK=n(hXe,"A",{href:!0});var CVt=s(dK);t5r=r(CVt,"SwinForMaskedImageModeling"),CVt.forEach(t),a5r=r(hXe," (Swin Transformer model)"),hXe.forEach(t),n5r=i(Yy),vC=n(Yy,"LI",{});var uXe=s(vC);HCe=n(uXe,"STRONG",{});var wVt=s(HCe);s5r=r(wVt,"swinv2"),wVt.forEach(t),l5r=r(uXe," \u2014 "),cK=n(uXe,"A",{href:!0});var AVt=s(cK);i5r=r(AVt,"Swinv2ForMaskedImageModeling"),AVt.forEach(t),d5r=r(uXe," (Swin Transformer V2 model)"),uXe.forEach(t),c5r=i(Yy),FC=n(Yy,"LI",{});var pXe=s(FC);JCe=n(pXe,"STRONG",{});var LVt=s(JCe);m5r=r(LVt,"vit"),LVt.forEach(t),f5r=r(pXe," \u2014 "),mK=n(pXe,"A",{href:!0});var yVt=s(mK);g5r=r(yVt,"ViTForMaskedImageModeling"),yVt.forEach(t),h5r=r(pXe," (ViT model)"),pXe.forEach(t),Yy.forEach(t),u5r=i(Ga),TC=n(Ga,"P",{});var _Xe=s(TC);p5r=r(_Xe,"The model is set in evaluation mode by default using "),YCe=n(_Xe,"CODE",{});var xVt=s(YCe);_5r=r(xVt,"model.eval()"),xVt.forEach(t),b5r=r(_Xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KCe=n(_Xe,"CODE",{});var $Vt=s(KCe);v5r=r($Vt,"model.train()"),$Vt.forEach(t),_Xe.forEach(t),F5r=i(Ga),T(MC.$$.fragment,Ga),Ga.forEach(t),Wl.forEach(t),VYe=i(m),yc=n(m,"H2",{class:!0});var aeo=s(yc);EC=n(aeo,"A",{id:!0,class:!0,href:!0});var kVt=s(EC);ZCe=n(kVt,"SPAN",{});var SVt=s(ZCe);T(G$.$$.fragment,SVt),SVt.forEach(t),kVt.forEach(t),T5r=i(aeo),e3e=n(aeo,"SPAN",{});var RVt=s(e3e);M5r=r(RVt,"AutoModelForObjectDetection"),RVt.forEach(t),aeo.forEach(t),XYe=i(m),rr=n(m,"DIV",{class:!0});var Ul=s(rr);T(O$.$$.fragment,Ul),E5r=i(Ul),xc=n(Ul,"P",{});var hle=s(xc);C5r=r(hle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fK=n(hle,"A",{href:!0});var PVt=s(fK);w5r=r(PVt,"from_pretrained()"),PVt.forEach(t),A5r=r(hle," class method or the "),gK=n(hle,"A",{href:!0});var BVt=s(gK);L5r=r(BVt,"from_config()"),BVt.forEach(t),y5r=r(hle,` class
method.`),hle.forEach(t),x5r=i(Ul),V$=n(Ul,"P",{});var neo=s(V$);$5r=r(neo,"This class cannot be instantiated directly using "),o3e=n(neo,"CODE",{});var IVt=s(o3e);k5r=r(IVt,"__init__()"),IVt.forEach(t),S5r=r(neo," (throws an error)."),neo.forEach(t),R5r=i(Ul),jt=n(Ul,"DIV",{class:!0});var Ky=s(jt);T(X$.$$.fragment,Ky),P5r=i(Ky),r3e=n(Ky,"P",{});var NVt=s(r3e);B5r=r(NVt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),NVt.forEach(t),I5r=i(Ky),$c=n(Ky,"P",{});var ule=s($c);N5r=r(ule,`Note:
Loading a model from its configuration file does `),t3e=n(ule,"STRONG",{});var qVt=s(t3e);q5r=r(qVt,"not"),qVt.forEach(t),j5r=r(ule,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(ule,"A",{href:!0});var jVt=s(hK);D5r=r(jVt,"from_pretrained()"),jVt.forEach(t),G5r=r(ule," to load the model weights."),ule.forEach(t),O5r=i(Ky),T(CC.$$.fragment,Ky),Ky.forEach(t),V5r=i(Ul),To=n(Ul,"DIV",{class:!0});var Oa=s(To);T(z$.$$.fragment,Oa),X5r=i(Oa),a3e=n(Oa,"P",{});var DVt=s(a3e);z5r=r(DVt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),DVt.forEach(t),Q5r=i(Oa),Fn=n(Oa,"P",{});var Zy=s(Fn);W5r=r(Zy,"The model class to instantiate is selected based on the "),n3e=n(Zy,"CODE",{});var GVt=s(n3e);U5r=r(GVt,"model_type"),GVt.forEach(t),H5r=r(Zy,` property of the config object (either
passed as an argument or loaded from `),s3e=n(Zy,"CODE",{});var OVt=s(s3e);J5r=r(OVt,"pretrained_model_name_or_path"),OVt.forEach(t),Y5r=r(Zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(Zy,"CODE",{});var VVt=s(l3e);K5r=r(VVt,"pretrained_model_name_or_path"),VVt.forEach(t),Z5r=r(Zy,":"),Zy.forEach(t),e0r=i(Oa),Q$=n(Oa,"UL",{});var seo=s(Q$);wC=n(seo,"LI",{});var bXe=s(wC);i3e=n(bXe,"STRONG",{});var XVt=s(i3e);o0r=r(XVt,"detr"),XVt.forEach(t),r0r=r(bXe," \u2014 "),uK=n(bXe,"A",{href:!0});var zVt=s(uK);t0r=r(zVt,"DetrForObjectDetection"),zVt.forEach(t),a0r=r(bXe," (DETR model)"),bXe.forEach(t),n0r=i(seo),AC=n(seo,"LI",{});var vXe=s(AC);d3e=n(vXe,"STRONG",{});var QVt=s(d3e);s0r=r(QVt,"yolos"),QVt.forEach(t),l0r=r(vXe," \u2014 "),pK=n(vXe,"A",{href:!0});var WVt=s(pK);i0r=r(WVt,"YolosForObjectDetection"),WVt.forEach(t),d0r=r(vXe," (YOLOS model)"),vXe.forEach(t),seo.forEach(t),c0r=i(Oa),LC=n(Oa,"P",{});var FXe=s(LC);m0r=r(FXe,"The model is set in evaluation mode by default using "),c3e=n(FXe,"CODE",{});var UVt=s(c3e);f0r=r(UVt,"model.eval()"),UVt.forEach(t),g0r=r(FXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=n(FXe,"CODE",{});var HVt=s(m3e);h0r=r(HVt,"model.train()"),HVt.forEach(t),FXe.forEach(t),u0r=i(Oa),T(yC.$$.fragment,Oa),Oa.forEach(t),Ul.forEach(t),zYe=i(m),kc=n(m,"H2",{class:!0});var leo=s(kc);xC=n(leo,"A",{id:!0,class:!0,href:!0});var JVt=s(xC);f3e=n(JVt,"SPAN",{});var YVt=s(f3e);T(W$.$$.fragment,YVt),YVt.forEach(t),JVt.forEach(t),p0r=i(leo),g3e=n(leo,"SPAN",{});var KVt=s(g3e);_0r=r(KVt,"AutoModelForImageSegmentation"),KVt.forEach(t),leo.forEach(t),QYe=i(m),tr=n(m,"DIV",{class:!0});var Hl=s(tr);T(U$.$$.fragment,Hl),b0r=i(Hl),Sc=n(Hl,"P",{});var ple=s(Sc);v0r=r(ple,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_K=n(ple,"A",{href:!0});var ZVt=s(_K);F0r=r(ZVt,"from_pretrained()"),ZVt.forEach(t),T0r=r(ple," class method or the "),bK=n(ple,"A",{href:!0});var eXt=s(bK);M0r=r(eXt,"from_config()"),eXt.forEach(t),E0r=r(ple,` class
method.`),ple.forEach(t),C0r=i(Hl),H$=n(Hl,"P",{});var ieo=s(H$);w0r=r(ieo,"This class cannot be instantiated directly using "),h3e=n(ieo,"CODE",{});var oXt=s(h3e);A0r=r(oXt,"__init__()"),oXt.forEach(t),L0r=r(ieo," (throws an error)."),ieo.forEach(t),y0r=i(Hl),Dt=n(Hl,"DIV",{class:!0});var e8=s(Dt);T(J$.$$.fragment,e8),x0r=i(e8),u3e=n(e8,"P",{});var rXt=s(u3e);$0r=r(rXt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rXt.forEach(t),k0r=i(e8),Rc=n(e8,"P",{});var _le=s(Rc);S0r=r(_le,`Note:
Loading a model from its configuration file does `),p3e=n(_le,"STRONG",{});var tXt=s(p3e);R0r=r(tXt,"not"),tXt.forEach(t),P0r=r(_le,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(_le,"A",{href:!0});var aXt=s(vK);B0r=r(aXt,"from_pretrained()"),aXt.forEach(t),I0r=r(_le," to load the model weights."),_le.forEach(t),N0r=i(e8),T($C.$$.fragment,e8),e8.forEach(t),q0r=i(Hl),Mo=n(Hl,"DIV",{class:!0});var Va=s(Mo);T(Y$.$$.fragment,Va),j0r=i(Va),_3e=n(Va,"P",{});var nXt=s(_3e);D0r=r(nXt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nXt.forEach(t),G0r=i(Va),Tn=n(Va,"P",{});var o8=s(Tn);O0r=r(o8,"The model class to instantiate is selected based on the "),b3e=n(o8,"CODE",{});var sXt=s(b3e);V0r=r(sXt,"model_type"),sXt.forEach(t),X0r=r(o8,` property of the config object (either
passed as an argument or loaded from `),v3e=n(o8,"CODE",{});var lXt=s(v3e);z0r=r(lXt,"pretrained_model_name_or_path"),lXt.forEach(t),Q0r=r(o8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(o8,"CODE",{});var iXt=s(F3e);W0r=r(iXt,"pretrained_model_name_or_path"),iXt.forEach(t),U0r=r(o8,":"),o8.forEach(t),H0r=i(Va),T3e=n(Va,"UL",{});var dXt=s(T3e);kC=n(dXt,"LI",{});var TXe=s(kC);M3e=n(TXe,"STRONG",{});var cXt=s(M3e);J0r=r(cXt,"detr"),cXt.forEach(t),Y0r=r(TXe," \u2014 "),FK=n(TXe,"A",{href:!0});var mXt=s(FK);K0r=r(mXt,"DetrForSegmentation"),mXt.forEach(t),Z0r=r(TXe," (DETR model)"),TXe.forEach(t),dXt.forEach(t),ewr=i(Va),SC=n(Va,"P",{});var MXe=s(SC);owr=r(MXe,"The model is set in evaluation mode by default using "),E3e=n(MXe,"CODE",{});var fXt=s(E3e);rwr=r(fXt,"model.eval()"),fXt.forEach(t),twr=r(MXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C3e=n(MXe,"CODE",{});var gXt=s(C3e);awr=r(gXt,"model.train()"),gXt.forEach(t),MXe.forEach(t),nwr=i(Va),T(RC.$$.fragment,Va),Va.forEach(t),Hl.forEach(t),WYe=i(m),Pc=n(m,"H2",{class:!0});var deo=s(Pc);PC=n(deo,"A",{id:!0,class:!0,href:!0});var hXt=s(PC);w3e=n(hXt,"SPAN",{});var uXt=s(w3e);T(K$.$$.fragment,uXt),uXt.forEach(t),hXt.forEach(t),swr=i(deo),A3e=n(deo,"SPAN",{});var pXt=s(A3e);lwr=r(pXt,"AutoModelForSemanticSegmentation"),pXt.forEach(t),deo.forEach(t),UYe=i(m),ar=n(m,"DIV",{class:!0});var Jl=s(ar);T(Z$.$$.fragment,Jl),iwr=i(Jl),Bc=n(Jl,"P",{});var ble=s(Bc);dwr=r(ble,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),TK=n(ble,"A",{href:!0});var _Xt=s(TK);cwr=r(_Xt,"from_pretrained()"),_Xt.forEach(t),mwr=r(ble," class method or the "),MK=n(ble,"A",{href:!0});var bXt=s(MK);fwr=r(bXt,"from_config()"),bXt.forEach(t),gwr=r(ble,` class
method.`),ble.forEach(t),hwr=i(Jl),ek=n(Jl,"P",{});var ceo=s(ek);uwr=r(ceo,"This class cannot be instantiated directly using "),L3e=n(ceo,"CODE",{});var vXt=s(L3e);pwr=r(vXt,"__init__()"),vXt.forEach(t),_wr=r(ceo," (throws an error)."),ceo.forEach(t),bwr=i(Jl),Gt=n(Jl,"DIV",{class:!0});var r8=s(Gt);T(ok.$$.fragment,r8),vwr=i(r8),y3e=n(r8,"P",{});var FXt=s(y3e);Fwr=r(FXt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),FXt.forEach(t),Twr=i(r8),Ic=n(r8,"P",{});var vle=s(Ic);Mwr=r(vle,`Note:
Loading a model from its configuration file does `),x3e=n(vle,"STRONG",{});var TXt=s(x3e);Ewr=r(TXt,"not"),TXt.forEach(t),Cwr=r(vle,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(vle,"A",{href:!0});var MXt=s(EK);wwr=r(MXt,"from_pretrained()"),MXt.forEach(t),Awr=r(vle," to load the model weights."),vle.forEach(t),Lwr=i(r8),T(BC.$$.fragment,r8),r8.forEach(t),ywr=i(Jl),Eo=n(Jl,"DIV",{class:!0});var Xa=s(Eo);T(rk.$$.fragment,Xa),xwr=i(Xa),$3e=n(Xa,"P",{});var EXt=s($3e);$wr=r(EXt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),EXt.forEach(t),kwr=i(Xa),Mn=n(Xa,"P",{});var t8=s(Mn);Swr=r(t8,"The model class to instantiate is selected based on the "),k3e=n(t8,"CODE",{});var CXt=s(k3e);Rwr=r(CXt,"model_type"),CXt.forEach(t),Pwr=r(t8,` property of the config object (either
passed as an argument or loaded from `),S3e=n(t8,"CODE",{});var wXt=s(S3e);Bwr=r(wXt,"pretrained_model_name_or_path"),wXt.forEach(t),Iwr=r(t8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(t8,"CODE",{});var AXt=s(R3e);Nwr=r(AXt,"pretrained_model_name_or_path"),AXt.forEach(t),qwr=r(t8,":"),t8.forEach(t),jwr=i(Xa),ft=n(Xa,"UL",{});var Yl=s(ft);IC=n(Yl,"LI",{});var EXe=s(IC);P3e=n(EXe,"STRONG",{});var LXt=s(P3e);Dwr=r(LXt,"beit"),LXt.forEach(t),Gwr=r(EXe," \u2014 "),CK=n(EXe,"A",{href:!0});var yXt=s(CK);Owr=r(yXt,"BeitForSemanticSegmentation"),yXt.forEach(t),Vwr=r(EXe," (BEiT model)"),EXe.forEach(t),Xwr=i(Yl),NC=n(Yl,"LI",{});var CXe=s(NC);B3e=n(CXe,"STRONG",{});var xXt=s(B3e);zwr=r(xXt,"data2vec-vision"),xXt.forEach(t),Qwr=r(CXe," \u2014 "),wK=n(CXe,"A",{href:!0});var $Xt=s(wK);Wwr=r($Xt,"Data2VecVisionForSemanticSegmentation"),$Xt.forEach(t),Uwr=r(CXe," (Data2VecVision model)"),CXe.forEach(t),Hwr=i(Yl),qC=n(Yl,"LI",{});var wXe=s(qC);I3e=n(wXe,"STRONG",{});var kXt=s(I3e);Jwr=r(kXt,"dpt"),kXt.forEach(t),Ywr=r(wXe," \u2014 "),AK=n(wXe,"A",{href:!0});var SXt=s(AK);Kwr=r(SXt,"DPTForSemanticSegmentation"),SXt.forEach(t),Zwr=r(wXe," (DPT model)"),wXe.forEach(t),eAr=i(Yl),jC=n(Yl,"LI",{});var AXe=s(jC);N3e=n(AXe,"STRONG",{});var RXt=s(N3e);oAr=r(RXt,"mobilevit"),RXt.forEach(t),rAr=r(AXe," \u2014 "),LK=n(AXe,"A",{href:!0});var PXt=s(LK);tAr=r(PXt,"MobileViTForSemanticSegmentation"),PXt.forEach(t),aAr=r(AXe," (MobileViT model)"),AXe.forEach(t),nAr=i(Yl),DC=n(Yl,"LI",{});var LXe=s(DC);q3e=n(LXe,"STRONG",{});var BXt=s(q3e);sAr=r(BXt,"segformer"),BXt.forEach(t),lAr=r(LXe," \u2014 "),yK=n(LXe,"A",{href:!0});var IXt=s(yK);iAr=r(IXt,"SegformerForSemanticSegmentation"),IXt.forEach(t),dAr=r(LXe," (SegFormer model)"),LXe.forEach(t),Yl.forEach(t),cAr=i(Xa),GC=n(Xa,"P",{});var yXe=s(GC);mAr=r(yXe,"The model is set in evaluation mode by default using "),j3e=n(yXe,"CODE",{});var NXt=s(j3e);fAr=r(NXt,"model.eval()"),NXt.forEach(t),gAr=r(yXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D3e=n(yXe,"CODE",{});var qXt=s(D3e);hAr=r(qXt,"model.train()"),qXt.forEach(t),yXe.forEach(t),uAr=i(Xa),T(OC.$$.fragment,Xa),Xa.forEach(t),Jl.forEach(t),HYe=i(m),Nc=n(m,"H2",{class:!0});var meo=s(Nc);VC=n(meo,"A",{id:!0,class:!0,href:!0});var jXt=s(VC);G3e=n(jXt,"SPAN",{});var DXt=s(G3e);T(tk.$$.fragment,DXt),DXt.forEach(t),jXt.forEach(t),pAr=i(meo),O3e=n(meo,"SPAN",{});var GXt=s(O3e);_Ar=r(GXt,"AutoModelForInstanceSegmentation"),GXt.forEach(t),meo.forEach(t),JYe=i(m),nr=n(m,"DIV",{class:!0});var Kl=s(nr);T(ak.$$.fragment,Kl),bAr=i(Kl),qc=n(Kl,"P",{});var Fle=s(qc);vAr=r(Fle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),xK=n(Fle,"A",{href:!0});var OXt=s(xK);FAr=r(OXt,"from_pretrained()"),OXt.forEach(t),TAr=r(Fle," class method or the "),$K=n(Fle,"A",{href:!0});var VXt=s($K);MAr=r(VXt,"from_config()"),VXt.forEach(t),EAr=r(Fle,` class
method.`),Fle.forEach(t),CAr=i(Kl),nk=n(Kl,"P",{});var feo=s(nk);wAr=r(feo,"This class cannot be instantiated directly using "),V3e=n(feo,"CODE",{});var XXt=s(V3e);AAr=r(XXt,"__init__()"),XXt.forEach(t),LAr=r(feo," (throws an error)."),feo.forEach(t),yAr=i(Kl),Ot=n(Kl,"DIV",{class:!0});var a8=s(Ot);T(sk.$$.fragment,a8),xAr=i(a8),X3e=n(a8,"P",{});var zXt=s(X3e);$Ar=r(zXt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zXt.forEach(t),kAr=i(a8),jc=n(a8,"P",{});var Tle=s(jc);SAr=r(Tle,`Note:
Loading a model from its configuration file does `),z3e=n(Tle,"STRONG",{});var QXt=s(z3e);RAr=r(QXt,"not"),QXt.forEach(t),PAr=r(Tle,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(Tle,"A",{href:!0});var WXt=s(kK);BAr=r(WXt,"from_pretrained()"),WXt.forEach(t),IAr=r(Tle," to load the model weights."),Tle.forEach(t),NAr=i(a8),T(XC.$$.fragment,a8),a8.forEach(t),qAr=i(Kl),Co=n(Kl,"DIV",{class:!0});var za=s(Co);T(lk.$$.fragment,za),jAr=i(za),Q3e=n(za,"P",{});var UXt=s(Q3e);DAr=r(UXt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),UXt.forEach(t),GAr=i(za),En=n(za,"P",{});var n8=s(En);OAr=r(n8,"The model class to instantiate is selected based on the "),W3e=n(n8,"CODE",{});var HXt=s(W3e);VAr=r(HXt,"model_type"),HXt.forEach(t),XAr=r(n8,` property of the config object (either
passed as an argument or loaded from `),U3e=n(n8,"CODE",{});var JXt=s(U3e);zAr=r(JXt,"pretrained_model_name_or_path"),JXt.forEach(t),QAr=r(n8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(n8,"CODE",{});var YXt=s(H3e);WAr=r(YXt,"pretrained_model_name_or_path"),YXt.forEach(t),UAr=r(n8,":"),n8.forEach(t),HAr=i(za),J3e=n(za,"UL",{});var KXt=s(J3e);zC=n(KXt,"LI",{});var xXe=s(zC);Y3e=n(xXe,"STRONG",{});var ZXt=s(Y3e);JAr=r(ZXt,"maskformer"),ZXt.forEach(t),YAr=r(xXe," \u2014 "),SK=n(xXe,"A",{href:!0});var ezt=s(SK);KAr=r(ezt,"MaskFormerForInstanceSegmentation"),ezt.forEach(t),ZAr=r(xXe," (MaskFormer model)"),xXe.forEach(t),KXt.forEach(t),e6r=i(za),QC=n(za,"P",{});var $Xe=s(QC);o6r=r($Xe,"The model is set in evaluation mode by default using "),K3e=n($Xe,"CODE",{});var ozt=s(K3e);r6r=r(ozt,"model.eval()"),ozt.forEach(t),t6r=r($Xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z3e=n($Xe,"CODE",{});var rzt=s(Z3e);a6r=r(rzt,"model.train()"),rzt.forEach(t),$Xe.forEach(t),n6r=i(za),T(WC.$$.fragment,za),za.forEach(t),Kl.forEach(t),YYe=i(m),Dc=n(m,"H2",{class:!0});var geo=s(Dc);UC=n(geo,"A",{id:!0,class:!0,href:!0});var tzt=s(UC);e5e=n(tzt,"SPAN",{});var azt=s(e5e);T(ik.$$.fragment,azt),azt.forEach(t),tzt.forEach(t),s6r=i(geo),o5e=n(geo,"SPAN",{});var nzt=s(o5e);l6r=r(nzt,"TFAutoModel"),nzt.forEach(t),geo.forEach(t),KYe=i(m),sr=n(m,"DIV",{class:!0});var Zl=s(sr);T(dk.$$.fragment,Zl),i6r=i(Zl),Gc=n(Zl,"P",{});var Mle=s(Gc);d6r=r(Mle,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RK=n(Mle,"A",{href:!0});var szt=s(RK);c6r=r(szt,"from_pretrained()"),szt.forEach(t),m6r=r(Mle," class method or the "),PK=n(Mle,"A",{href:!0});var lzt=s(PK);f6r=r(lzt,"from_config()"),lzt.forEach(t),g6r=r(Mle,` class
method.`),Mle.forEach(t),h6r=i(Zl),ck=n(Zl,"P",{});var heo=s(ck);u6r=r(heo,"This class cannot be instantiated directly using "),r5e=n(heo,"CODE",{});var izt=s(r5e);p6r=r(izt,"__init__()"),izt.forEach(t),_6r=r(heo," (throws an error)."),heo.forEach(t),b6r=i(Zl),Vt=n(Zl,"DIV",{class:!0});var s8=s(Vt);T(mk.$$.fragment,s8),v6r=i(s8),t5e=n(s8,"P",{});var dzt=s(t5e);F6r=r(dzt,"Instantiates one of the base model classes of the library from a configuration."),dzt.forEach(t),T6r=i(s8),Oc=n(s8,"P",{});var Ele=s(Oc);M6r=r(Ele,`Note:
Loading a model from its configuration file does `),a5e=n(Ele,"STRONG",{});var czt=s(a5e);E6r=r(czt,"not"),czt.forEach(t),C6r=r(Ele,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Ele,"A",{href:!0});var mzt=s(BK);w6r=r(mzt,"from_pretrained()"),mzt.forEach(t),A6r=r(Ele," to load the model weights."),Ele.forEach(t),L6r=i(s8),T(HC.$$.fragment,s8),s8.forEach(t),y6r=i(Zl),Ir=n(Zl,"DIV",{class:!0});var ei=s(Ir);T(fk.$$.fragment,ei),x6r=i(ei),n5e=n(ei,"P",{});var fzt=s(n5e);$6r=r(fzt,"Instantiate one of the base model classes of the library from a pretrained model."),fzt.forEach(t),k6r=i(ei),Cn=n(ei,"P",{});var l8=s(Cn);S6r=r(l8,"The model class to instantiate is selected based on the "),s5e=n(l8,"CODE",{});var gzt=s(s5e);R6r=r(gzt,"model_type"),gzt.forEach(t),P6r=r(l8,` property of the config object (either
passed as an argument or loaded from `),l5e=n(l8,"CODE",{});var hzt=s(l5e);B6r=r(hzt,"pretrained_model_name_or_path"),hzt.forEach(t),I6r=r(l8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(l8,"CODE",{});var uzt=s(i5e);N6r=r(uzt,"pretrained_model_name_or_path"),uzt.forEach(t),q6r=r(l8,":"),l8.forEach(t),j6r=i(ei),N=n(ei,"UL",{});var q=s(N);JC=n(q,"LI",{});var kXe=s(JC);d5e=n(kXe,"STRONG",{});var pzt=s(d5e);D6r=r(pzt,"albert"),pzt.forEach(t),G6r=r(kXe," \u2014 "),IK=n(kXe,"A",{href:!0});var _zt=s(IK);O6r=r(_zt,"TFAlbertModel"),_zt.forEach(t),V6r=r(kXe," (ALBERT model)"),kXe.forEach(t),X6r=i(q),YC=n(q,"LI",{});var SXe=s(YC);c5e=n(SXe,"STRONG",{});var bzt=s(c5e);z6r=r(bzt,"bart"),bzt.forEach(t),Q6r=r(SXe," \u2014 "),NK=n(SXe,"A",{href:!0});var vzt=s(NK);W6r=r(vzt,"TFBartModel"),vzt.forEach(t),U6r=r(SXe," (BART model)"),SXe.forEach(t),H6r=i(q),KC=n(q,"LI",{});var RXe=s(KC);m5e=n(RXe,"STRONG",{});var Fzt=s(m5e);J6r=r(Fzt,"bert"),Fzt.forEach(t),Y6r=r(RXe," \u2014 "),qK=n(RXe,"A",{href:!0});var Tzt=s(qK);K6r=r(Tzt,"TFBertModel"),Tzt.forEach(t),Z6r=r(RXe," (BERT model)"),RXe.forEach(t),e7r=i(q),ZC=n(q,"LI",{});var PXe=s(ZC);f5e=n(PXe,"STRONG",{});var Mzt=s(f5e);o7r=r(Mzt,"blenderbot"),Mzt.forEach(t),r7r=r(PXe," \u2014 "),jK=n(PXe,"A",{href:!0});var Ezt=s(jK);t7r=r(Ezt,"TFBlenderbotModel"),Ezt.forEach(t),a7r=r(PXe," (Blenderbot model)"),PXe.forEach(t),n7r=i(q),e3=n(q,"LI",{});var BXe=s(e3);g5e=n(BXe,"STRONG",{});var Czt=s(g5e);s7r=r(Czt,"blenderbot-small"),Czt.forEach(t),l7r=r(BXe," \u2014 "),DK=n(BXe,"A",{href:!0});var wzt=s(DK);i7r=r(wzt,"TFBlenderbotSmallModel"),wzt.forEach(t),d7r=r(BXe," (BlenderbotSmall model)"),BXe.forEach(t),c7r=i(q),o3=n(q,"LI",{});var IXe=s(o3);h5e=n(IXe,"STRONG",{});var Azt=s(h5e);m7r=r(Azt,"camembert"),Azt.forEach(t),f7r=r(IXe," \u2014 "),GK=n(IXe,"A",{href:!0});var Lzt=s(GK);g7r=r(Lzt,"TFCamembertModel"),Lzt.forEach(t),h7r=r(IXe," (CamemBERT model)"),IXe.forEach(t),u7r=i(q),r3=n(q,"LI",{});var NXe=s(r3);u5e=n(NXe,"STRONG",{});var yzt=s(u5e);p7r=r(yzt,"clip"),yzt.forEach(t),_7r=r(NXe," \u2014 "),OK=n(NXe,"A",{href:!0});var xzt=s(OK);b7r=r(xzt,"TFCLIPModel"),xzt.forEach(t),v7r=r(NXe," (CLIP model)"),NXe.forEach(t),F7r=i(q),t3=n(q,"LI",{});var qXe=s(t3);p5e=n(qXe,"STRONG",{});var $zt=s(p5e);T7r=r($zt,"convbert"),$zt.forEach(t),M7r=r(qXe," \u2014 "),VK=n(qXe,"A",{href:!0});var kzt=s(VK);E7r=r(kzt,"TFConvBertModel"),kzt.forEach(t),C7r=r(qXe," (ConvBERT model)"),qXe.forEach(t),w7r=i(q),a3=n(q,"LI",{});var jXe=s(a3);_5e=n(jXe,"STRONG",{});var Szt=s(_5e);A7r=r(Szt,"convnext"),Szt.forEach(t),L7r=r(jXe," \u2014 "),XK=n(jXe,"A",{href:!0});var Rzt=s(XK);y7r=r(Rzt,"TFConvNextModel"),Rzt.forEach(t),x7r=r(jXe," (ConvNeXT model)"),jXe.forEach(t),$7r=i(q),n3=n(q,"LI",{});var DXe=s(n3);b5e=n(DXe,"STRONG",{});var Pzt=s(b5e);k7r=r(Pzt,"ctrl"),Pzt.forEach(t),S7r=r(DXe," \u2014 "),zK=n(DXe,"A",{href:!0});var Bzt=s(zK);R7r=r(Bzt,"TFCTRLModel"),Bzt.forEach(t),P7r=r(DXe," (CTRL model)"),DXe.forEach(t),B7r=i(q),s3=n(q,"LI",{});var GXe=s(s3);v5e=n(GXe,"STRONG",{});var Izt=s(v5e);I7r=r(Izt,"data2vec-vision"),Izt.forEach(t),N7r=r(GXe," \u2014 "),QK=n(GXe,"A",{href:!0});var Nzt=s(QK);q7r=r(Nzt,"TFData2VecVisionModel"),Nzt.forEach(t),j7r=r(GXe," (Data2VecVision model)"),GXe.forEach(t),D7r=i(q),l3=n(q,"LI",{});var OXe=s(l3);F5e=n(OXe,"STRONG",{});var qzt=s(F5e);G7r=r(qzt,"deberta"),qzt.forEach(t),O7r=r(OXe," \u2014 "),WK=n(OXe,"A",{href:!0});var jzt=s(WK);V7r=r(jzt,"TFDebertaModel"),jzt.forEach(t),X7r=r(OXe," (DeBERTa model)"),OXe.forEach(t),z7r=i(q),i3=n(q,"LI",{});var VXe=s(i3);T5e=n(VXe,"STRONG",{});var Dzt=s(T5e);Q7r=r(Dzt,"deberta-v2"),Dzt.forEach(t),W7r=r(VXe," \u2014 "),UK=n(VXe,"A",{href:!0});var Gzt=s(UK);U7r=r(Gzt,"TFDebertaV2Model"),Gzt.forEach(t),H7r=r(VXe," (DeBERTa-v2 model)"),VXe.forEach(t),J7r=i(q),d3=n(q,"LI",{});var XXe=s(d3);M5e=n(XXe,"STRONG",{});var Ozt=s(M5e);Y7r=r(Ozt,"deit"),Ozt.forEach(t),K7r=r(XXe," \u2014 "),HK=n(XXe,"A",{href:!0});var Vzt=s(HK);Z7r=r(Vzt,"TFDeiTModel"),Vzt.forEach(t),eLr=r(XXe," (DeiT model)"),XXe.forEach(t),oLr=i(q),c3=n(q,"LI",{});var zXe=s(c3);E5e=n(zXe,"STRONG",{});var Xzt=s(E5e);rLr=r(Xzt,"distilbert"),Xzt.forEach(t),tLr=r(zXe," \u2014 "),JK=n(zXe,"A",{href:!0});var zzt=s(JK);aLr=r(zzt,"TFDistilBertModel"),zzt.forEach(t),nLr=r(zXe," (DistilBERT model)"),zXe.forEach(t),sLr=i(q),m3=n(q,"LI",{});var QXe=s(m3);C5e=n(QXe,"STRONG",{});var Qzt=s(C5e);lLr=r(Qzt,"dpr"),Qzt.forEach(t),iLr=r(QXe," \u2014 "),YK=n(QXe,"A",{href:!0});var Wzt=s(YK);dLr=r(Wzt,"TFDPRQuestionEncoder"),Wzt.forEach(t),cLr=r(QXe," (DPR model)"),QXe.forEach(t),mLr=i(q),f3=n(q,"LI",{});var WXe=s(f3);w5e=n(WXe,"STRONG",{});var Uzt=s(w5e);fLr=r(Uzt,"electra"),Uzt.forEach(t),gLr=r(WXe," \u2014 "),KK=n(WXe,"A",{href:!0});var Hzt=s(KK);hLr=r(Hzt,"TFElectraModel"),Hzt.forEach(t),uLr=r(WXe," (ELECTRA model)"),WXe.forEach(t),pLr=i(q),g3=n(q,"LI",{});var UXe=s(g3);A5e=n(UXe,"STRONG",{});var Jzt=s(A5e);_Lr=r(Jzt,"flaubert"),Jzt.forEach(t),bLr=r(UXe," \u2014 "),ZK=n(UXe,"A",{href:!0});var Yzt=s(ZK);vLr=r(Yzt,"TFFlaubertModel"),Yzt.forEach(t),FLr=r(UXe," (FlauBERT model)"),UXe.forEach(t),TLr=i(q),bl=n(q,"LI",{});var cB=s(bl);L5e=n(cB,"STRONG",{});var Kzt=s(L5e);MLr=r(Kzt,"funnel"),Kzt.forEach(t),ELr=r(cB," \u2014 "),eZ=n(cB,"A",{href:!0});var Zzt=s(eZ);CLr=r(Zzt,"TFFunnelModel"),Zzt.forEach(t),wLr=r(cB," or "),oZ=n(cB,"A",{href:!0});var eQt=s(oZ);ALr=r(eQt,"TFFunnelBaseModel"),eQt.forEach(t),LLr=r(cB," (Funnel Transformer model)"),cB.forEach(t),yLr=i(q),h3=n(q,"LI",{});var HXe=s(h3);y5e=n(HXe,"STRONG",{});var oQt=s(y5e);xLr=r(oQt,"gpt2"),oQt.forEach(t),$Lr=r(HXe," \u2014 "),rZ=n(HXe,"A",{href:!0});var rQt=s(rZ);kLr=r(rQt,"TFGPT2Model"),rQt.forEach(t),SLr=r(HXe," (OpenAI GPT-2 model)"),HXe.forEach(t),RLr=i(q),u3=n(q,"LI",{});var JXe=s(u3);x5e=n(JXe,"STRONG",{});var tQt=s(x5e);PLr=r(tQt,"gptj"),tQt.forEach(t),BLr=r(JXe," \u2014 "),tZ=n(JXe,"A",{href:!0});var aQt=s(tZ);ILr=r(aQt,"TFGPTJModel"),aQt.forEach(t),NLr=r(JXe," (GPT-J model)"),JXe.forEach(t),qLr=i(q),p3=n(q,"LI",{});var YXe=s(p3);$5e=n(YXe,"STRONG",{});var nQt=s($5e);jLr=r(nQt,"hubert"),nQt.forEach(t),DLr=r(YXe," \u2014 "),aZ=n(YXe,"A",{href:!0});var sQt=s(aZ);GLr=r(sQt,"TFHubertModel"),sQt.forEach(t),OLr=r(YXe," (Hubert model)"),YXe.forEach(t),VLr=i(q),_3=n(q,"LI",{});var KXe=s(_3);k5e=n(KXe,"STRONG",{});var lQt=s(k5e);XLr=r(lQt,"layoutlm"),lQt.forEach(t),zLr=r(KXe," \u2014 "),nZ=n(KXe,"A",{href:!0});var iQt=s(nZ);QLr=r(iQt,"TFLayoutLMModel"),iQt.forEach(t),WLr=r(KXe," (LayoutLM model)"),KXe.forEach(t),ULr=i(q),b3=n(q,"LI",{});var ZXe=s(b3);S5e=n(ZXe,"STRONG",{});var dQt=s(S5e);HLr=r(dQt,"layoutlmv3"),dQt.forEach(t),JLr=r(ZXe," \u2014 "),sZ=n(ZXe,"A",{href:!0});var cQt=s(sZ);YLr=r(cQt,"TFLayoutLMv3Model"),cQt.forEach(t),KLr=r(ZXe," (LayoutLMv3 model)"),ZXe.forEach(t),ZLr=i(q),v3=n(q,"LI",{});var eze=s(v3);R5e=n(eze,"STRONG",{});var mQt=s(R5e);eyr=r(mQt,"led"),mQt.forEach(t),oyr=r(eze," \u2014 "),lZ=n(eze,"A",{href:!0});var fQt=s(lZ);ryr=r(fQt,"TFLEDModel"),fQt.forEach(t),tyr=r(eze," (LED model)"),eze.forEach(t),ayr=i(q),F3=n(q,"LI",{});var oze=s(F3);P5e=n(oze,"STRONG",{});var gQt=s(P5e);nyr=r(gQt,"longformer"),gQt.forEach(t),syr=r(oze," \u2014 "),iZ=n(oze,"A",{href:!0});var hQt=s(iZ);lyr=r(hQt,"TFLongformerModel"),hQt.forEach(t),iyr=r(oze," (Longformer model)"),oze.forEach(t),dyr=i(q),T3=n(q,"LI",{});var rze=s(T3);B5e=n(rze,"STRONG",{});var uQt=s(B5e);cyr=r(uQt,"lxmert"),uQt.forEach(t),myr=r(rze," \u2014 "),dZ=n(rze,"A",{href:!0});var pQt=s(dZ);fyr=r(pQt,"TFLxmertModel"),pQt.forEach(t),gyr=r(rze," (LXMERT model)"),rze.forEach(t),hyr=i(q),M3=n(q,"LI",{});var tze=s(M3);I5e=n(tze,"STRONG",{});var _Qt=s(I5e);uyr=r(_Qt,"marian"),_Qt.forEach(t),pyr=r(tze," \u2014 "),cZ=n(tze,"A",{href:!0});var bQt=s(cZ);_yr=r(bQt,"TFMarianModel"),bQt.forEach(t),byr=r(tze," (Marian model)"),tze.forEach(t),vyr=i(q),E3=n(q,"LI",{});var aze=s(E3);N5e=n(aze,"STRONG",{});var vQt=s(N5e);Fyr=r(vQt,"mbart"),vQt.forEach(t),Tyr=r(aze," \u2014 "),mZ=n(aze,"A",{href:!0});var FQt=s(mZ);Myr=r(FQt,"TFMBartModel"),FQt.forEach(t),Eyr=r(aze," (mBART model)"),aze.forEach(t),Cyr=i(q),C3=n(q,"LI",{});var nze=s(C3);q5e=n(nze,"STRONG",{});var TQt=s(q5e);wyr=r(TQt,"mobilebert"),TQt.forEach(t),Ayr=r(nze," \u2014 "),fZ=n(nze,"A",{href:!0});var MQt=s(fZ);Lyr=r(MQt,"TFMobileBertModel"),MQt.forEach(t),yyr=r(nze," (MobileBERT model)"),nze.forEach(t),xyr=i(q),w3=n(q,"LI",{});var sze=s(w3);j5e=n(sze,"STRONG",{});var EQt=s(j5e);$yr=r(EQt,"mobilevit"),EQt.forEach(t),kyr=r(sze," \u2014 "),gZ=n(sze,"A",{href:!0});var CQt=s(gZ);Syr=r(CQt,"TFMobileViTModel"),CQt.forEach(t),Ryr=r(sze," (MobileViT model)"),sze.forEach(t),Pyr=i(q),A3=n(q,"LI",{});var lze=s(A3);D5e=n(lze,"STRONG",{});var wQt=s(D5e);Byr=r(wQt,"mpnet"),wQt.forEach(t),Iyr=r(lze," \u2014 "),hZ=n(lze,"A",{href:!0});var AQt=s(hZ);Nyr=r(AQt,"TFMPNetModel"),AQt.forEach(t),qyr=r(lze," (MPNet model)"),lze.forEach(t),jyr=i(q),L3=n(q,"LI",{});var ize=s(L3);G5e=n(ize,"STRONG",{});var LQt=s(G5e);Dyr=r(LQt,"mt5"),LQt.forEach(t),Gyr=r(ize," \u2014 "),uZ=n(ize,"A",{href:!0});var yQt=s(uZ);Oyr=r(yQt,"TFMT5Model"),yQt.forEach(t),Vyr=r(ize," (MT5 model)"),ize.forEach(t),Xyr=i(q),y3=n(q,"LI",{});var dze=s(y3);O5e=n(dze,"STRONG",{});var xQt=s(O5e);zyr=r(xQt,"openai-gpt"),xQt.forEach(t),Qyr=r(dze," \u2014 "),pZ=n(dze,"A",{href:!0});var $Qt=s(pZ);Wyr=r($Qt,"TFOpenAIGPTModel"),$Qt.forEach(t),Uyr=r(dze," (OpenAI GPT model)"),dze.forEach(t),Hyr=i(q),x3=n(q,"LI",{});var cze=s(x3);V5e=n(cze,"STRONG",{});var kQt=s(V5e);Jyr=r(kQt,"opt"),kQt.forEach(t),Yyr=r(cze," \u2014 "),_Z=n(cze,"A",{href:!0});var SQt=s(_Z);Kyr=r(SQt,"TFOPTModel"),SQt.forEach(t),Zyr=r(cze," (OPT model)"),cze.forEach(t),e8r=i(q),$3=n(q,"LI",{});var mze=s($3);X5e=n(mze,"STRONG",{});var RQt=s(X5e);o8r=r(RQt,"pegasus"),RQt.forEach(t),r8r=r(mze," \u2014 "),bZ=n(mze,"A",{href:!0});var PQt=s(bZ);t8r=r(PQt,"TFPegasusModel"),PQt.forEach(t),a8r=r(mze," (Pegasus model)"),mze.forEach(t),n8r=i(q),k3=n(q,"LI",{});var fze=s(k3);z5e=n(fze,"STRONG",{});var BQt=s(z5e);s8r=r(BQt,"regnet"),BQt.forEach(t),l8r=r(fze," \u2014 "),vZ=n(fze,"A",{href:!0});var IQt=s(vZ);i8r=r(IQt,"TFRegNetModel"),IQt.forEach(t),d8r=r(fze," (RegNet model)"),fze.forEach(t),c8r=i(q),S3=n(q,"LI",{});var gze=s(S3);Q5e=n(gze,"STRONG",{});var NQt=s(Q5e);m8r=r(NQt,"rembert"),NQt.forEach(t),f8r=r(gze," \u2014 "),FZ=n(gze,"A",{href:!0});var qQt=s(FZ);g8r=r(qQt,"TFRemBertModel"),qQt.forEach(t),h8r=r(gze," (RemBERT model)"),gze.forEach(t),u8r=i(q),R3=n(q,"LI",{});var hze=s(R3);W5e=n(hze,"STRONG",{});var jQt=s(W5e);p8r=r(jQt,"resnet"),jQt.forEach(t),_8r=r(hze," \u2014 "),TZ=n(hze,"A",{href:!0});var DQt=s(TZ);b8r=r(DQt,"TFResNetModel"),DQt.forEach(t),v8r=r(hze," (ResNet model)"),hze.forEach(t),F8r=i(q),P3=n(q,"LI",{});var uze=s(P3);U5e=n(uze,"STRONG",{});var GQt=s(U5e);T8r=r(GQt,"roberta"),GQt.forEach(t),M8r=r(uze," \u2014 "),MZ=n(uze,"A",{href:!0});var OQt=s(MZ);E8r=r(OQt,"TFRobertaModel"),OQt.forEach(t),C8r=r(uze," (RoBERTa model)"),uze.forEach(t),w8r=i(q),B3=n(q,"LI",{});var pze=s(B3);H5e=n(pze,"STRONG",{});var VQt=s(H5e);A8r=r(VQt,"roformer"),VQt.forEach(t),L8r=r(pze," \u2014 "),EZ=n(pze,"A",{href:!0});var XQt=s(EZ);y8r=r(XQt,"TFRoFormerModel"),XQt.forEach(t),x8r=r(pze," (RoFormer model)"),pze.forEach(t),$8r=i(q),I3=n(q,"LI",{});var _ze=s(I3);J5e=n(_ze,"STRONG",{});var zQt=s(J5e);k8r=r(zQt,"segformer"),zQt.forEach(t),S8r=r(_ze," \u2014 "),CZ=n(_ze,"A",{href:!0});var QQt=s(CZ);R8r=r(QQt,"TFSegformerModel"),QQt.forEach(t),P8r=r(_ze," (SegFormer model)"),_ze.forEach(t),B8r=i(q),N3=n(q,"LI",{});var bze=s(N3);Y5e=n(bze,"STRONG",{});var WQt=s(Y5e);I8r=r(WQt,"speech_to_text"),WQt.forEach(t),N8r=r(bze," \u2014 "),wZ=n(bze,"A",{href:!0});var UQt=s(wZ);q8r=r(UQt,"TFSpeech2TextModel"),UQt.forEach(t),j8r=r(bze," (Speech2Text model)"),bze.forEach(t),D8r=i(q),q3=n(q,"LI",{});var vze=s(q3);K5e=n(vze,"STRONG",{});var HQt=s(K5e);G8r=r(HQt,"swin"),HQt.forEach(t),O8r=r(vze," \u2014 "),AZ=n(vze,"A",{href:!0});var JQt=s(AZ);V8r=r(JQt,"TFSwinModel"),JQt.forEach(t),X8r=r(vze," (Swin Transformer model)"),vze.forEach(t),z8r=i(q),j3=n(q,"LI",{});var Fze=s(j3);Z5e=n(Fze,"STRONG",{});var YQt=s(Z5e);Q8r=r(YQt,"t5"),YQt.forEach(t),W8r=r(Fze," \u2014 "),LZ=n(Fze,"A",{href:!0});var KQt=s(LZ);U8r=r(KQt,"TFT5Model"),KQt.forEach(t),H8r=r(Fze," (T5 model)"),Fze.forEach(t),J8r=i(q),D3=n(q,"LI",{});var Tze=s(D3);e0e=n(Tze,"STRONG",{});var ZQt=s(e0e);Y8r=r(ZQt,"tapas"),ZQt.forEach(t),K8r=r(Tze," \u2014 "),yZ=n(Tze,"A",{href:!0});var eWt=s(yZ);Z8r=r(eWt,"TFTapasModel"),eWt.forEach(t),e9r=r(Tze," (TAPAS model)"),Tze.forEach(t),o9r=i(q),G3=n(q,"LI",{});var Mze=s(G3);o0e=n(Mze,"STRONG",{});var oWt=s(o0e);r9r=r(oWt,"transfo-xl"),oWt.forEach(t),t9r=r(Mze," \u2014 "),xZ=n(Mze,"A",{href:!0});var rWt=s(xZ);a9r=r(rWt,"TFTransfoXLModel"),rWt.forEach(t),n9r=r(Mze," (Transformer-XL model)"),Mze.forEach(t),s9r=i(q),O3=n(q,"LI",{});var Eze=s(O3);r0e=n(Eze,"STRONG",{});var tWt=s(r0e);l9r=r(tWt,"vit"),tWt.forEach(t),i9r=r(Eze," \u2014 "),$Z=n(Eze,"A",{href:!0});var aWt=s($Z);d9r=r(aWt,"TFViTModel"),aWt.forEach(t),c9r=r(Eze," (ViT model)"),Eze.forEach(t),m9r=i(q),V3=n(q,"LI",{});var Cze=s(V3);t0e=n(Cze,"STRONG",{});var nWt=s(t0e);f9r=r(nWt,"vit_mae"),nWt.forEach(t),g9r=r(Cze," \u2014 "),kZ=n(Cze,"A",{href:!0});var sWt=s(kZ);h9r=r(sWt,"TFViTMAEModel"),sWt.forEach(t),u9r=r(Cze," (ViTMAE model)"),Cze.forEach(t),p9r=i(q),X3=n(q,"LI",{});var wze=s(X3);a0e=n(wze,"STRONG",{});var lWt=s(a0e);_9r=r(lWt,"wav2vec2"),lWt.forEach(t),b9r=r(wze," \u2014 "),SZ=n(wze,"A",{href:!0});var iWt=s(SZ);v9r=r(iWt,"TFWav2Vec2Model"),iWt.forEach(t),F9r=r(wze," (Wav2Vec2 model)"),wze.forEach(t),T9r=i(q),z3=n(q,"LI",{});var Aze=s(z3);n0e=n(Aze,"STRONG",{});var dWt=s(n0e);M9r=r(dWt,"xglm"),dWt.forEach(t),E9r=r(Aze," \u2014 "),RZ=n(Aze,"A",{href:!0});var cWt=s(RZ);C9r=r(cWt,"TFXGLMModel"),cWt.forEach(t),w9r=r(Aze," (XGLM model)"),Aze.forEach(t),A9r=i(q),Q3=n(q,"LI",{});var Lze=s(Q3);s0e=n(Lze,"STRONG",{});var mWt=s(s0e);L9r=r(mWt,"xlm"),mWt.forEach(t),y9r=r(Lze," \u2014 "),PZ=n(Lze,"A",{href:!0});var fWt=s(PZ);x9r=r(fWt,"TFXLMModel"),fWt.forEach(t),$9r=r(Lze," (XLM model)"),Lze.forEach(t),k9r=i(q),W3=n(q,"LI",{});var yze=s(W3);l0e=n(yze,"STRONG",{});var gWt=s(l0e);S9r=r(gWt,"xlm-roberta"),gWt.forEach(t),R9r=r(yze," \u2014 "),BZ=n(yze,"A",{href:!0});var hWt=s(BZ);P9r=r(hWt,"TFXLMRobertaModel"),hWt.forEach(t),B9r=r(yze," (XLM-RoBERTa model)"),yze.forEach(t),I9r=i(q),U3=n(q,"LI",{});var xze=s(U3);i0e=n(xze,"STRONG",{});var uWt=s(i0e);N9r=r(uWt,"xlnet"),uWt.forEach(t),q9r=r(xze," \u2014 "),IZ=n(xze,"A",{href:!0});var pWt=s(IZ);j9r=r(pWt,"TFXLNetModel"),pWt.forEach(t),D9r=r(xze," (XLNet model)"),xze.forEach(t),q.forEach(t),G9r=i(ei),T(H3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),ZYe=i(m),Vc=n(m,"H2",{class:!0});var ueo=s(Vc);J3=n(ueo,"A",{id:!0,class:!0,href:!0});var _Wt=s(J3);d0e=n(_Wt,"SPAN",{});var bWt=s(d0e);T(gk.$$.fragment,bWt),bWt.forEach(t),_Wt.forEach(t),O9r=i(ueo),c0e=n(ueo,"SPAN",{});var vWt=s(c0e);V9r=r(vWt,"TFAutoModelForPreTraining"),vWt.forEach(t),ueo.forEach(t),eKe=i(m),lr=n(m,"DIV",{class:!0});var oi=s(lr);T(hk.$$.fragment,oi),X9r=i(oi),Xc=n(oi,"P",{});var Cle=s(Xc);z9r=r(Cle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NZ=n(Cle,"A",{href:!0});var FWt=s(NZ);Q9r=r(FWt,"from_pretrained()"),FWt.forEach(t),W9r=r(Cle," class method or the "),qZ=n(Cle,"A",{href:!0});var TWt=s(qZ);U9r=r(TWt,"from_config()"),TWt.forEach(t),H9r=r(Cle,` class
method.`),Cle.forEach(t),J9r=i(oi),uk=n(oi,"P",{});var peo=s(uk);Y9r=r(peo,"This class cannot be instantiated directly using "),m0e=n(peo,"CODE",{});var MWt=s(m0e);K9r=r(MWt,"__init__()"),MWt.forEach(t),Z9r=r(peo," (throws an error)."),peo.forEach(t),exr=i(oi),Xt=n(oi,"DIV",{class:!0});var i8=s(Xt);T(pk.$$.fragment,i8),oxr=i(i8),f0e=n(i8,"P",{});var EWt=s(f0e);rxr=r(EWt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EWt.forEach(t),txr=i(i8),zc=n(i8,"P",{});var wle=s(zc);axr=r(wle,`Note:
Loading a model from its configuration file does `),g0e=n(wle,"STRONG",{});var CWt=s(g0e);nxr=r(CWt,"not"),CWt.forEach(t),sxr=r(wle,` load the model weights. It only affects the
model\u2019s configuration. Use `),jZ=n(wle,"A",{href:!0});var wWt=s(jZ);lxr=r(wWt,"from_pretrained()"),wWt.forEach(t),ixr=r(wle," to load the model weights."),wle.forEach(t),dxr=i(i8),T(Y3.$$.fragment,i8),i8.forEach(t),cxr=i(oi),Nr=n(oi,"DIV",{class:!0});var ri=s(Nr);T(_k.$$.fragment,ri),mxr=i(ri),h0e=n(ri,"P",{});var AWt=s(h0e);fxr=r(AWt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),AWt.forEach(t),gxr=i(ri),wn=n(ri,"P",{});var d8=s(wn);hxr=r(d8,"The model class to instantiate is selected based on the "),u0e=n(d8,"CODE",{});var LWt=s(u0e);uxr=r(LWt,"model_type"),LWt.forEach(t),pxr=r(d8,` property of the config object (either
passed as an argument or loaded from `),p0e=n(d8,"CODE",{});var yWt=s(p0e);_xr=r(yWt,"pretrained_model_name_or_path"),yWt.forEach(t),bxr=r(d8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(d8,"CODE",{});var xWt=s(_0e);vxr=r(xWt,"pretrained_model_name_or_path"),xWt.forEach(t),Fxr=r(d8,":"),d8.forEach(t),Txr=i(ri),se=n(ri,"UL",{});var le=s(se);K3=n(le,"LI",{});var $ze=s(K3);b0e=n($ze,"STRONG",{});var $Wt=s(b0e);Mxr=r($Wt,"albert"),$Wt.forEach(t),Exr=r($ze," \u2014 "),DZ=n($ze,"A",{href:!0});var kWt=s(DZ);Cxr=r(kWt,"TFAlbertForPreTraining"),kWt.forEach(t),wxr=r($ze," (ALBERT model)"),$ze.forEach(t),Axr=i(le),Z3=n(le,"LI",{});var kze=s(Z3);v0e=n(kze,"STRONG",{});var SWt=s(v0e);Lxr=r(SWt,"bart"),SWt.forEach(t),yxr=r(kze," \u2014 "),GZ=n(kze,"A",{href:!0});var RWt=s(GZ);xxr=r(RWt,"TFBartForConditionalGeneration"),RWt.forEach(t),$xr=r(kze," (BART model)"),kze.forEach(t),kxr=i(le),e5=n(le,"LI",{});var Sze=s(e5);F0e=n(Sze,"STRONG",{});var PWt=s(F0e);Sxr=r(PWt,"bert"),PWt.forEach(t),Rxr=r(Sze," \u2014 "),OZ=n(Sze,"A",{href:!0});var BWt=s(OZ);Pxr=r(BWt,"TFBertForPreTraining"),BWt.forEach(t),Bxr=r(Sze," (BERT model)"),Sze.forEach(t),Ixr=i(le),o5=n(le,"LI",{});var Rze=s(o5);T0e=n(Rze,"STRONG",{});var IWt=s(T0e);Nxr=r(IWt,"camembert"),IWt.forEach(t),qxr=r(Rze," \u2014 "),VZ=n(Rze,"A",{href:!0});var NWt=s(VZ);jxr=r(NWt,"TFCamembertForMaskedLM"),NWt.forEach(t),Dxr=r(Rze," (CamemBERT model)"),Rze.forEach(t),Gxr=i(le),r5=n(le,"LI",{});var Pze=s(r5);M0e=n(Pze,"STRONG",{});var qWt=s(M0e);Oxr=r(qWt,"ctrl"),qWt.forEach(t),Vxr=r(Pze," \u2014 "),XZ=n(Pze,"A",{href:!0});var jWt=s(XZ);Xxr=r(jWt,"TFCTRLLMHeadModel"),jWt.forEach(t),zxr=r(Pze," (CTRL model)"),Pze.forEach(t),Qxr=i(le),t5=n(le,"LI",{});var Bze=s(t5);E0e=n(Bze,"STRONG",{});var DWt=s(E0e);Wxr=r(DWt,"distilbert"),DWt.forEach(t),Uxr=r(Bze," \u2014 "),zZ=n(Bze,"A",{href:!0});var GWt=s(zZ);Hxr=r(GWt,"TFDistilBertForMaskedLM"),GWt.forEach(t),Jxr=r(Bze," (DistilBERT model)"),Bze.forEach(t),Yxr=i(le),a5=n(le,"LI",{});var Ize=s(a5);C0e=n(Ize,"STRONG",{});var OWt=s(C0e);Kxr=r(OWt,"electra"),OWt.forEach(t),Zxr=r(Ize," \u2014 "),QZ=n(Ize,"A",{href:!0});var VWt=s(QZ);e$r=r(VWt,"TFElectraForPreTraining"),VWt.forEach(t),o$r=r(Ize," (ELECTRA model)"),Ize.forEach(t),r$r=i(le),n5=n(le,"LI",{});var Nze=s(n5);w0e=n(Nze,"STRONG",{});var XWt=s(w0e);t$r=r(XWt,"flaubert"),XWt.forEach(t),a$r=r(Nze," \u2014 "),WZ=n(Nze,"A",{href:!0});var zWt=s(WZ);n$r=r(zWt,"TFFlaubertWithLMHeadModel"),zWt.forEach(t),s$r=r(Nze," (FlauBERT model)"),Nze.forEach(t),l$r=i(le),s5=n(le,"LI",{});var qze=s(s5);A0e=n(qze,"STRONG",{});var QWt=s(A0e);i$r=r(QWt,"funnel"),QWt.forEach(t),d$r=r(qze," \u2014 "),UZ=n(qze,"A",{href:!0});var WWt=s(UZ);c$r=r(WWt,"TFFunnelForPreTraining"),WWt.forEach(t),m$r=r(qze," (Funnel Transformer model)"),qze.forEach(t),f$r=i(le),l5=n(le,"LI",{});var jze=s(l5);L0e=n(jze,"STRONG",{});var UWt=s(L0e);g$r=r(UWt,"gpt2"),UWt.forEach(t),h$r=r(jze," \u2014 "),HZ=n(jze,"A",{href:!0});var HWt=s(HZ);u$r=r(HWt,"TFGPT2LMHeadModel"),HWt.forEach(t),p$r=r(jze," (OpenAI GPT-2 model)"),jze.forEach(t),_$r=i(le),i5=n(le,"LI",{});var Dze=s(i5);y0e=n(Dze,"STRONG",{});var JWt=s(y0e);b$r=r(JWt,"layoutlm"),JWt.forEach(t),v$r=r(Dze," \u2014 "),JZ=n(Dze,"A",{href:!0});var YWt=s(JZ);F$r=r(YWt,"TFLayoutLMForMaskedLM"),YWt.forEach(t),T$r=r(Dze," (LayoutLM model)"),Dze.forEach(t),M$r=i(le),d5=n(le,"LI",{});var Gze=s(d5);x0e=n(Gze,"STRONG",{});var KWt=s(x0e);E$r=r(KWt,"lxmert"),KWt.forEach(t),C$r=r(Gze," \u2014 "),YZ=n(Gze,"A",{href:!0});var ZWt=s(YZ);w$r=r(ZWt,"TFLxmertForPreTraining"),ZWt.forEach(t),A$r=r(Gze," (LXMERT model)"),Gze.forEach(t),L$r=i(le),c5=n(le,"LI",{});var Oze=s(c5);$0e=n(Oze,"STRONG",{});var eUt=s($0e);y$r=r(eUt,"mobilebert"),eUt.forEach(t),x$r=r(Oze," \u2014 "),KZ=n(Oze,"A",{href:!0});var oUt=s(KZ);$$r=r(oUt,"TFMobileBertForPreTraining"),oUt.forEach(t),k$r=r(Oze," (MobileBERT model)"),Oze.forEach(t),S$r=i(le),m5=n(le,"LI",{});var Vze=s(m5);k0e=n(Vze,"STRONG",{});var rUt=s(k0e);R$r=r(rUt,"mpnet"),rUt.forEach(t),P$r=r(Vze," \u2014 "),ZZ=n(Vze,"A",{href:!0});var tUt=s(ZZ);B$r=r(tUt,"TFMPNetForMaskedLM"),tUt.forEach(t),I$r=r(Vze," (MPNet model)"),Vze.forEach(t),N$r=i(le),f5=n(le,"LI",{});var Xze=s(f5);S0e=n(Xze,"STRONG",{});var aUt=s(S0e);q$r=r(aUt,"openai-gpt"),aUt.forEach(t),j$r=r(Xze," \u2014 "),eee=n(Xze,"A",{href:!0});var nUt=s(eee);D$r=r(nUt,"TFOpenAIGPTLMHeadModel"),nUt.forEach(t),G$r=r(Xze," (OpenAI GPT model)"),Xze.forEach(t),O$r=i(le),g5=n(le,"LI",{});var zze=s(g5);R0e=n(zze,"STRONG",{});var sUt=s(R0e);V$r=r(sUt,"roberta"),sUt.forEach(t),X$r=r(zze," \u2014 "),oee=n(zze,"A",{href:!0});var lUt=s(oee);z$r=r(lUt,"TFRobertaForMaskedLM"),lUt.forEach(t),Q$r=r(zze," (RoBERTa model)"),zze.forEach(t),W$r=i(le),h5=n(le,"LI",{});var Qze=s(h5);P0e=n(Qze,"STRONG",{});var iUt=s(P0e);U$r=r(iUt,"t5"),iUt.forEach(t),H$r=r(Qze," \u2014 "),ree=n(Qze,"A",{href:!0});var dUt=s(ree);J$r=r(dUt,"TFT5ForConditionalGeneration"),dUt.forEach(t),Y$r=r(Qze," (T5 model)"),Qze.forEach(t),K$r=i(le),u5=n(le,"LI",{});var Wze=s(u5);B0e=n(Wze,"STRONG",{});var cUt=s(B0e);Z$r=r(cUt,"tapas"),cUt.forEach(t),ekr=r(Wze," \u2014 "),tee=n(Wze,"A",{href:!0});var mUt=s(tee);okr=r(mUt,"TFTapasForMaskedLM"),mUt.forEach(t),rkr=r(Wze," (TAPAS model)"),Wze.forEach(t),tkr=i(le),p5=n(le,"LI",{});var Uze=s(p5);I0e=n(Uze,"STRONG",{});var fUt=s(I0e);akr=r(fUt,"transfo-xl"),fUt.forEach(t),nkr=r(Uze," \u2014 "),aee=n(Uze,"A",{href:!0});var gUt=s(aee);skr=r(gUt,"TFTransfoXLLMHeadModel"),gUt.forEach(t),lkr=r(Uze," (Transformer-XL model)"),Uze.forEach(t),ikr=i(le),_5=n(le,"LI",{});var Hze=s(_5);N0e=n(Hze,"STRONG",{});var hUt=s(N0e);dkr=r(hUt,"vit_mae"),hUt.forEach(t),ckr=r(Hze," \u2014 "),nee=n(Hze,"A",{href:!0});var uUt=s(nee);mkr=r(uUt,"TFViTMAEForPreTraining"),uUt.forEach(t),fkr=r(Hze," (ViTMAE model)"),Hze.forEach(t),gkr=i(le),b5=n(le,"LI",{});var Jze=s(b5);q0e=n(Jze,"STRONG",{});var pUt=s(q0e);hkr=r(pUt,"xlm"),pUt.forEach(t),ukr=r(Jze," \u2014 "),see=n(Jze,"A",{href:!0});var _Ut=s(see);pkr=r(_Ut,"TFXLMWithLMHeadModel"),_Ut.forEach(t),_kr=r(Jze," (XLM model)"),Jze.forEach(t),bkr=i(le),v5=n(le,"LI",{});var Yze=s(v5);j0e=n(Yze,"STRONG",{});var bUt=s(j0e);vkr=r(bUt,"xlm-roberta"),bUt.forEach(t),Fkr=r(Yze," \u2014 "),lee=n(Yze,"A",{href:!0});var vUt=s(lee);Tkr=r(vUt,"TFXLMRobertaForMaskedLM"),vUt.forEach(t),Mkr=r(Yze," (XLM-RoBERTa model)"),Yze.forEach(t),Ekr=i(le),F5=n(le,"LI",{});var Kze=s(F5);D0e=n(Kze,"STRONG",{});var FUt=s(D0e);Ckr=r(FUt,"xlnet"),FUt.forEach(t),wkr=r(Kze," \u2014 "),iee=n(Kze,"A",{href:!0});var TUt=s(iee);Akr=r(TUt,"TFXLNetLMHeadModel"),TUt.forEach(t),Lkr=r(Kze," (XLNet model)"),Kze.forEach(t),le.forEach(t),ykr=i(ri),T(T5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),oKe=i(m),Qc=n(m,"H2",{class:!0});var _eo=s(Qc);M5=n(_eo,"A",{id:!0,class:!0,href:!0});var MUt=s(M5);G0e=n(MUt,"SPAN",{});var EUt=s(G0e);T(bk.$$.fragment,EUt),EUt.forEach(t),MUt.forEach(t),xkr=i(_eo),O0e=n(_eo,"SPAN",{});var CUt=s(O0e);$kr=r(CUt,"TFAutoModelForCausalLM"),CUt.forEach(t),_eo.forEach(t),rKe=i(m),ir=n(m,"DIV",{class:!0});var ti=s(ir);T(vk.$$.fragment,ti),kkr=i(ti),Wc=n(ti,"P",{});var Ale=s(Wc);Skr=r(Ale,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dee=n(Ale,"A",{href:!0});var wUt=s(dee);Rkr=r(wUt,"from_pretrained()"),wUt.forEach(t),Pkr=r(Ale," class method or the "),cee=n(Ale,"A",{href:!0});var AUt=s(cee);Bkr=r(AUt,"from_config()"),AUt.forEach(t),Ikr=r(Ale,` class
method.`),Ale.forEach(t),Nkr=i(ti),Fk=n(ti,"P",{});var beo=s(Fk);qkr=r(beo,"This class cannot be instantiated directly using "),V0e=n(beo,"CODE",{});var LUt=s(V0e);jkr=r(LUt,"__init__()"),LUt.forEach(t),Dkr=r(beo," (throws an error)."),beo.forEach(t),Gkr=i(ti),zt=n(ti,"DIV",{class:!0});var c8=s(zt);T(Tk.$$.fragment,c8),Okr=i(c8),X0e=n(c8,"P",{});var yUt=s(X0e);Vkr=r(yUt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yUt.forEach(t),Xkr=i(c8),Uc=n(c8,"P",{});var Lle=s(Uc);zkr=r(Lle,`Note:
Loading a model from its configuration file does `),z0e=n(Lle,"STRONG",{});var xUt=s(z0e);Qkr=r(xUt,"not"),xUt.forEach(t),Wkr=r(Lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Lle,"A",{href:!0});var $Ut=s(mee);Ukr=r($Ut,"from_pretrained()"),$Ut.forEach(t),Hkr=r(Lle," to load the model weights."),Lle.forEach(t),Jkr=i(c8),T(E5.$$.fragment,c8),c8.forEach(t),Ykr=i(ti),qr=n(ti,"DIV",{class:!0});var ai=s(qr);T(Mk.$$.fragment,ai),Kkr=i(ai),Q0e=n(ai,"P",{});var kUt=s(Q0e);Zkr=r(kUt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kUt.forEach(t),eSr=i(ai),An=n(ai,"P",{});var m8=s(An);oSr=r(m8,"The model class to instantiate is selected based on the "),W0e=n(m8,"CODE",{});var SUt=s(W0e);rSr=r(SUt,"model_type"),SUt.forEach(t),tSr=r(m8,` property of the config object (either
passed as an argument or loaded from `),U0e=n(m8,"CODE",{});var RUt=s(U0e);aSr=r(RUt,"pretrained_model_name_or_path"),RUt.forEach(t),nSr=r(m8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(m8,"CODE",{});var PUt=s(H0e);sSr=r(PUt,"pretrained_model_name_or_path"),PUt.forEach(t),lSr=r(m8,":"),m8.forEach(t),iSr=i(ai),Me=n(ai,"UL",{});var Ce=s(Me);C5=n(Ce,"LI",{});var Zze=s(C5);J0e=n(Zze,"STRONG",{});var BUt=s(J0e);dSr=r(BUt,"bert"),BUt.forEach(t),cSr=r(Zze," \u2014 "),fee=n(Zze,"A",{href:!0});var IUt=s(fee);mSr=r(IUt,"TFBertLMHeadModel"),IUt.forEach(t),fSr=r(Zze," (BERT model)"),Zze.forEach(t),gSr=i(Ce),w5=n(Ce,"LI",{});var eQe=s(w5);Y0e=n(eQe,"STRONG",{});var NUt=s(Y0e);hSr=r(NUt,"camembert"),NUt.forEach(t),uSr=r(eQe," \u2014 "),gee=n(eQe,"A",{href:!0});var qUt=s(gee);pSr=r(qUt,"TFCamembertForCausalLM"),qUt.forEach(t),_Sr=r(eQe," (CamemBERT model)"),eQe.forEach(t),bSr=i(Ce),A5=n(Ce,"LI",{});var oQe=s(A5);K0e=n(oQe,"STRONG",{});var jUt=s(K0e);vSr=r(jUt,"ctrl"),jUt.forEach(t),FSr=r(oQe," \u2014 "),hee=n(oQe,"A",{href:!0});var DUt=s(hee);TSr=r(DUt,"TFCTRLLMHeadModel"),DUt.forEach(t),MSr=r(oQe," (CTRL model)"),oQe.forEach(t),ESr=i(Ce),L5=n(Ce,"LI",{});var rQe=s(L5);Z0e=n(rQe,"STRONG",{});var GUt=s(Z0e);CSr=r(GUt,"gpt2"),GUt.forEach(t),wSr=r(rQe," \u2014 "),uee=n(rQe,"A",{href:!0});var OUt=s(uee);ASr=r(OUt,"TFGPT2LMHeadModel"),OUt.forEach(t),LSr=r(rQe," (OpenAI GPT-2 model)"),rQe.forEach(t),ySr=i(Ce),y5=n(Ce,"LI",{});var tQe=s(y5);ewe=n(tQe,"STRONG",{});var VUt=s(ewe);xSr=r(VUt,"gptj"),VUt.forEach(t),$Sr=r(tQe," \u2014 "),pee=n(tQe,"A",{href:!0});var XUt=s(pee);kSr=r(XUt,"TFGPTJForCausalLM"),XUt.forEach(t),SSr=r(tQe," (GPT-J model)"),tQe.forEach(t),RSr=i(Ce),x5=n(Ce,"LI",{});var aQe=s(x5);owe=n(aQe,"STRONG",{});var zUt=s(owe);PSr=r(zUt,"openai-gpt"),zUt.forEach(t),BSr=r(aQe," \u2014 "),_ee=n(aQe,"A",{href:!0});var QUt=s(_ee);ISr=r(QUt,"TFOpenAIGPTLMHeadModel"),QUt.forEach(t),NSr=r(aQe," (OpenAI GPT model)"),aQe.forEach(t),qSr=i(Ce),$5=n(Ce,"LI",{});var nQe=s($5);rwe=n(nQe,"STRONG",{});var WUt=s(rwe);jSr=r(WUt,"opt"),WUt.forEach(t),DSr=r(nQe," \u2014 "),bee=n(nQe,"A",{href:!0});var UUt=s(bee);GSr=r(UUt,"TFOPTForCausalLM"),UUt.forEach(t),OSr=r(nQe," (OPT model)"),nQe.forEach(t),VSr=i(Ce),k5=n(Ce,"LI",{});var sQe=s(k5);twe=n(sQe,"STRONG",{});var HUt=s(twe);XSr=r(HUt,"rembert"),HUt.forEach(t),zSr=r(sQe," \u2014 "),vee=n(sQe,"A",{href:!0});var JUt=s(vee);QSr=r(JUt,"TFRemBertForCausalLM"),JUt.forEach(t),WSr=r(sQe," (RemBERT model)"),sQe.forEach(t),USr=i(Ce),S5=n(Ce,"LI",{});var lQe=s(S5);awe=n(lQe,"STRONG",{});var YUt=s(awe);HSr=r(YUt,"roberta"),YUt.forEach(t),JSr=r(lQe," \u2014 "),Fee=n(lQe,"A",{href:!0});var KUt=s(Fee);YSr=r(KUt,"TFRobertaForCausalLM"),KUt.forEach(t),KSr=r(lQe," (RoBERTa model)"),lQe.forEach(t),ZSr=i(Ce),R5=n(Ce,"LI",{});var iQe=s(R5);nwe=n(iQe,"STRONG",{});var ZUt=s(nwe);eRr=r(ZUt,"roformer"),ZUt.forEach(t),oRr=r(iQe," \u2014 "),Tee=n(iQe,"A",{href:!0});var eHt=s(Tee);rRr=r(eHt,"TFRoFormerForCausalLM"),eHt.forEach(t),tRr=r(iQe," (RoFormer model)"),iQe.forEach(t),aRr=i(Ce),P5=n(Ce,"LI",{});var dQe=s(P5);swe=n(dQe,"STRONG",{});var oHt=s(swe);nRr=r(oHt,"transfo-xl"),oHt.forEach(t),sRr=r(dQe," \u2014 "),Mee=n(dQe,"A",{href:!0});var rHt=s(Mee);lRr=r(rHt,"TFTransfoXLLMHeadModel"),rHt.forEach(t),iRr=r(dQe," (Transformer-XL model)"),dQe.forEach(t),dRr=i(Ce),B5=n(Ce,"LI",{});var cQe=s(B5);lwe=n(cQe,"STRONG",{});var tHt=s(lwe);cRr=r(tHt,"xglm"),tHt.forEach(t),mRr=r(cQe," \u2014 "),Eee=n(cQe,"A",{href:!0});var aHt=s(Eee);fRr=r(aHt,"TFXGLMForCausalLM"),aHt.forEach(t),gRr=r(cQe," (XGLM model)"),cQe.forEach(t),hRr=i(Ce),I5=n(Ce,"LI",{});var mQe=s(I5);iwe=n(mQe,"STRONG",{});var nHt=s(iwe);uRr=r(nHt,"xlm"),nHt.forEach(t),pRr=r(mQe," \u2014 "),Cee=n(mQe,"A",{href:!0});var sHt=s(Cee);_Rr=r(sHt,"TFXLMWithLMHeadModel"),sHt.forEach(t),bRr=r(mQe," (XLM model)"),mQe.forEach(t),vRr=i(Ce),N5=n(Ce,"LI",{});var fQe=s(N5);dwe=n(fQe,"STRONG",{});var lHt=s(dwe);FRr=r(lHt,"xlnet"),lHt.forEach(t),TRr=r(fQe," \u2014 "),wee=n(fQe,"A",{href:!0});var iHt=s(wee);MRr=r(iHt,"TFXLNetLMHeadModel"),iHt.forEach(t),ERr=r(fQe," (XLNet model)"),fQe.forEach(t),Ce.forEach(t),CRr=i(ai),T(q5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),tKe=i(m),Hc=n(m,"H2",{class:!0});var veo=s(Hc);j5=n(veo,"A",{id:!0,class:!0,href:!0});var dHt=s(j5);cwe=n(dHt,"SPAN",{});var cHt=s(cwe);T(Ek.$$.fragment,cHt),cHt.forEach(t),dHt.forEach(t),wRr=i(veo),mwe=n(veo,"SPAN",{});var mHt=s(mwe);ARr=r(mHt,"TFAutoModelForImageClassification"),mHt.forEach(t),veo.forEach(t),aKe=i(m),dr=n(m,"DIV",{class:!0});var ni=s(dr);T(Ck.$$.fragment,ni),LRr=i(ni),Jc=n(ni,"P",{});var yle=s(Jc);yRr=r(yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Aee=n(yle,"A",{href:!0});var fHt=s(Aee);xRr=r(fHt,"from_pretrained()"),fHt.forEach(t),$Rr=r(yle," class method or the "),Lee=n(yle,"A",{href:!0});var gHt=s(Lee);kRr=r(gHt,"from_config()"),gHt.forEach(t),SRr=r(yle,` class
method.`),yle.forEach(t),RRr=i(ni),wk=n(ni,"P",{});var Feo=s(wk);PRr=r(Feo,"This class cannot be instantiated directly using "),fwe=n(Feo,"CODE",{});var hHt=s(fwe);BRr=r(hHt,"__init__()"),hHt.forEach(t),IRr=r(Feo," (throws an error)."),Feo.forEach(t),NRr=i(ni),Qt=n(ni,"DIV",{class:!0});var f8=s(Qt);T(Ak.$$.fragment,f8),qRr=i(f8),gwe=n(f8,"P",{});var uHt=s(gwe);jRr=r(uHt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uHt.forEach(t),DRr=i(f8),Yc=n(f8,"P",{});var xle=s(Yc);GRr=r(xle,`Note:
Loading a model from its configuration file does `),hwe=n(xle,"STRONG",{});var pHt=s(hwe);ORr=r(pHt,"not"),pHt.forEach(t),VRr=r(xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(xle,"A",{href:!0});var _Ht=s(yee);XRr=r(_Ht,"from_pretrained()"),_Ht.forEach(t),zRr=r(xle," to load the model weights."),xle.forEach(t),QRr=i(f8),T(D5.$$.fragment,f8),f8.forEach(t),WRr=i(ni),jr=n(ni,"DIV",{class:!0});var si=s(jr);T(Lk.$$.fragment,si),URr=i(si),uwe=n(si,"P",{});var bHt=s(uwe);HRr=r(bHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bHt.forEach(t),JRr=i(si),Ln=n(si,"P",{});var g8=s(Ln);YRr=r(g8,"The model class to instantiate is selected based on the "),pwe=n(g8,"CODE",{});var vHt=s(pwe);KRr=r(vHt,"model_type"),vHt.forEach(t),ZRr=r(g8,` property of the config object (either
passed as an argument or loaded from `),_we=n(g8,"CODE",{});var FHt=s(_we);ePr=r(FHt,"pretrained_model_name_or_path"),FHt.forEach(t),oPr=r(g8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bwe=n(g8,"CODE",{});var THt=s(bwe);rPr=r(THt,"pretrained_model_name_or_path"),THt.forEach(t),tPr=r(g8,":"),g8.forEach(t),aPr=i(si),Be=n(si,"UL",{});var We=s(Be);G5=n(We,"LI",{});var gQe=s(G5);vwe=n(gQe,"STRONG",{});var MHt=s(vwe);nPr=r(MHt,"convnext"),MHt.forEach(t),sPr=r(gQe," \u2014 "),xee=n(gQe,"A",{href:!0});var EHt=s(xee);lPr=r(EHt,"TFConvNextForImageClassification"),EHt.forEach(t),iPr=r(gQe," (ConvNeXT model)"),gQe.forEach(t),dPr=i(We),O5=n(We,"LI",{});var hQe=s(O5);Fwe=n(hQe,"STRONG",{});var CHt=s(Fwe);cPr=r(CHt,"data2vec-vision"),CHt.forEach(t),mPr=r(hQe," \u2014 "),$ee=n(hQe,"A",{href:!0});var wHt=s($ee);fPr=r(wHt,"TFData2VecVisionForImageClassification"),wHt.forEach(t),gPr=r(hQe," (Data2VecVision model)"),hQe.forEach(t),hPr=i(We),vl=n(We,"LI",{});var mB=s(vl);Twe=n(mB,"STRONG",{});var AHt=s(Twe);uPr=r(AHt,"deit"),AHt.forEach(t),pPr=r(mB," \u2014 "),kee=n(mB,"A",{href:!0});var LHt=s(kee);_Pr=r(LHt,"TFDeiTForImageClassification"),LHt.forEach(t),bPr=r(mB," or "),See=n(mB,"A",{href:!0});var yHt=s(See);vPr=r(yHt,"TFDeiTForImageClassificationWithTeacher"),yHt.forEach(t),FPr=r(mB," (DeiT model)"),mB.forEach(t),TPr=i(We),V5=n(We,"LI",{});var uQe=s(V5);Mwe=n(uQe,"STRONG",{});var xHt=s(Mwe);MPr=r(xHt,"mobilevit"),xHt.forEach(t),EPr=r(uQe," \u2014 "),Ree=n(uQe,"A",{href:!0});var $Ht=s(Ree);CPr=r($Ht,"TFMobileViTForImageClassification"),$Ht.forEach(t),wPr=r(uQe," (MobileViT model)"),uQe.forEach(t),APr=i(We),X5=n(We,"LI",{});var pQe=s(X5);Ewe=n(pQe,"STRONG",{});var kHt=s(Ewe);LPr=r(kHt,"regnet"),kHt.forEach(t),yPr=r(pQe," \u2014 "),Pee=n(pQe,"A",{href:!0});var SHt=s(Pee);xPr=r(SHt,"TFRegNetForImageClassification"),SHt.forEach(t),$Pr=r(pQe," (RegNet model)"),pQe.forEach(t),kPr=i(We),z5=n(We,"LI",{});var _Qe=s(z5);Cwe=n(_Qe,"STRONG",{});var RHt=s(Cwe);SPr=r(RHt,"resnet"),RHt.forEach(t),RPr=r(_Qe," \u2014 "),Bee=n(_Qe,"A",{href:!0});var PHt=s(Bee);PPr=r(PHt,"TFResNetForImageClassification"),PHt.forEach(t),BPr=r(_Qe," (ResNet model)"),_Qe.forEach(t),IPr=i(We),Q5=n(We,"LI",{});var bQe=s(Q5);wwe=n(bQe,"STRONG",{});var BHt=s(wwe);NPr=r(BHt,"segformer"),BHt.forEach(t),qPr=r(bQe," \u2014 "),Iee=n(bQe,"A",{href:!0});var IHt=s(Iee);jPr=r(IHt,"TFSegformerForImageClassification"),IHt.forEach(t),DPr=r(bQe," (SegFormer model)"),bQe.forEach(t),GPr=i(We),W5=n(We,"LI",{});var vQe=s(W5);Awe=n(vQe,"STRONG",{});var NHt=s(Awe);OPr=r(NHt,"swin"),NHt.forEach(t),VPr=r(vQe," \u2014 "),Nee=n(vQe,"A",{href:!0});var qHt=s(Nee);XPr=r(qHt,"TFSwinForImageClassification"),qHt.forEach(t),zPr=r(vQe," (Swin Transformer model)"),vQe.forEach(t),QPr=i(We),U5=n(We,"LI",{});var FQe=s(U5);Lwe=n(FQe,"STRONG",{});var jHt=s(Lwe);WPr=r(jHt,"vit"),jHt.forEach(t),UPr=r(FQe," \u2014 "),qee=n(FQe,"A",{href:!0});var DHt=s(qee);HPr=r(DHt,"TFViTForImageClassification"),DHt.forEach(t),JPr=r(FQe," (ViT model)"),FQe.forEach(t),We.forEach(t),YPr=i(si),T(H5.$$.fragment,si),si.forEach(t),ni.forEach(t),nKe=i(m),Kc=n(m,"H2",{class:!0});var Teo=s(Kc);J5=n(Teo,"A",{id:!0,class:!0,href:!0});var GHt=s(J5);ywe=n(GHt,"SPAN",{});var OHt=s(ywe);T(yk.$$.fragment,OHt),OHt.forEach(t),GHt.forEach(t),KPr=i(Teo),xwe=n(Teo,"SPAN",{});var VHt=s(xwe);ZPr=r(VHt,"TFAutoModelForSemanticSegmentation"),VHt.forEach(t),Teo.forEach(t),sKe=i(m),cr=n(m,"DIV",{class:!0});var li=s(cr);T(xk.$$.fragment,li),eBr=i(li),Zc=n(li,"P",{});var $le=s(Zc);oBr=r($le,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jee=n($le,"A",{href:!0});var XHt=s(jee);rBr=r(XHt,"from_pretrained()"),XHt.forEach(t),tBr=r($le," class method or the "),Dee=n($le,"A",{href:!0});var zHt=s(Dee);aBr=r(zHt,"from_config()"),zHt.forEach(t),nBr=r($le,` class
method.`),$le.forEach(t),sBr=i(li),$k=n(li,"P",{});var Meo=s($k);lBr=r(Meo,"This class cannot be instantiated directly using "),$we=n(Meo,"CODE",{});var QHt=s($we);iBr=r(QHt,"__init__()"),QHt.forEach(t),dBr=r(Meo," (throws an error)."),Meo.forEach(t),cBr=i(li),Wt=n(li,"DIV",{class:!0});var h8=s(Wt);T(kk.$$.fragment,h8),mBr=i(h8),kwe=n(h8,"P",{});var WHt=s(kwe);fBr=r(WHt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WHt.forEach(t),gBr=i(h8),em=n(h8,"P",{});var kle=s(em);hBr=r(kle,`Note:
Loading a model from its configuration file does `),Swe=n(kle,"STRONG",{});var UHt=s(Swe);uBr=r(UHt,"not"),UHt.forEach(t),pBr=r(kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gee=n(kle,"A",{href:!0});var HHt=s(Gee);_Br=r(HHt,"from_pretrained()"),HHt.forEach(t),bBr=r(kle," to load the model weights."),kle.forEach(t),vBr=i(h8),T(Y5.$$.fragment,h8),h8.forEach(t),FBr=i(li),Dr=n(li,"DIV",{class:!0});var ii=s(Dr);T(Sk.$$.fragment,ii),TBr=i(ii),Rwe=n(ii,"P",{});var JHt=s(Rwe);MBr=r(JHt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JHt.forEach(t),EBr=i(ii),yn=n(ii,"P",{});var u8=s(yn);CBr=r(u8,"The model class to instantiate is selected based on the "),Pwe=n(u8,"CODE",{});var YHt=s(Pwe);wBr=r(YHt,"model_type"),YHt.forEach(t),ABr=r(u8,` property of the config object (either
passed as an argument or loaded from `),Bwe=n(u8,"CODE",{});var KHt=s(Bwe);LBr=r(KHt,"pretrained_model_name_or_path"),KHt.forEach(t),yBr=r(u8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=n(u8,"CODE",{});var ZHt=s(Iwe);xBr=r(ZHt,"pretrained_model_name_or_path"),ZHt.forEach(t),$Br=r(u8,":"),u8.forEach(t),kBr=i(ii),om=n(ii,"UL",{});var Sle=s(om);K5=n(Sle,"LI",{});var TQe=s(K5);Nwe=n(TQe,"STRONG",{});var eJt=s(Nwe);SBr=r(eJt,"data2vec-vision"),eJt.forEach(t),RBr=r(TQe," \u2014 "),Oee=n(TQe,"A",{href:!0});var oJt=s(Oee);PBr=r(oJt,"TFData2VecVisionForSemanticSegmentation"),oJt.forEach(t),BBr=r(TQe," (Data2VecVision model)"),TQe.forEach(t),IBr=i(Sle),Z5=n(Sle,"LI",{});var MQe=s(Z5);qwe=n(MQe,"STRONG",{});var rJt=s(qwe);NBr=r(rJt,"mobilevit"),rJt.forEach(t),qBr=r(MQe," \u2014 "),Vee=n(MQe,"A",{href:!0});var tJt=s(Vee);jBr=r(tJt,"TFMobileViTForSemanticSegmentation"),tJt.forEach(t),DBr=r(MQe," (MobileViT model)"),MQe.forEach(t),GBr=i(Sle),e0=n(Sle,"LI",{});var EQe=s(e0);jwe=n(EQe,"STRONG",{});var aJt=s(jwe);OBr=r(aJt,"segformer"),aJt.forEach(t),VBr=r(EQe," \u2014 "),Xee=n(EQe,"A",{href:!0});var nJt=s(Xee);XBr=r(nJt,"TFSegformerForSemanticSegmentation"),nJt.forEach(t),zBr=r(EQe," (SegFormer model)"),EQe.forEach(t),Sle.forEach(t),QBr=i(ii),T(o0.$$.fragment,ii),ii.forEach(t),li.forEach(t),lKe=i(m),rm=n(m,"H2",{class:!0});var Eeo=s(rm);r0=n(Eeo,"A",{id:!0,class:!0,href:!0});var sJt=s(r0);Dwe=n(sJt,"SPAN",{});var lJt=s(Dwe);T(Rk.$$.fragment,lJt),lJt.forEach(t),sJt.forEach(t),WBr=i(Eeo),Gwe=n(Eeo,"SPAN",{});var iJt=s(Gwe);UBr=r(iJt,"TFAutoModelForMaskedLM"),iJt.forEach(t),Eeo.forEach(t),iKe=i(m),mr=n(m,"DIV",{class:!0});var di=s(mr);T(Pk.$$.fragment,di),HBr=i(di),tm=n(di,"P",{});var Rle=s(tm);JBr=r(Rle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=n(Rle,"A",{href:!0});var dJt=s(zee);YBr=r(dJt,"from_pretrained()"),dJt.forEach(t),KBr=r(Rle," class method or the "),Qee=n(Rle,"A",{href:!0});var cJt=s(Qee);ZBr=r(cJt,"from_config()"),cJt.forEach(t),eIr=r(Rle,` class
method.`),Rle.forEach(t),oIr=i(di),Bk=n(di,"P",{});var Ceo=s(Bk);rIr=r(Ceo,"This class cannot be instantiated directly using "),Owe=n(Ceo,"CODE",{});var mJt=s(Owe);tIr=r(mJt,"__init__()"),mJt.forEach(t),aIr=r(Ceo," (throws an error)."),Ceo.forEach(t),nIr=i(di),Ut=n(di,"DIV",{class:!0});var p8=s(Ut);T(Ik.$$.fragment,p8),sIr=i(p8),Vwe=n(p8,"P",{});var fJt=s(Vwe);lIr=r(fJt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fJt.forEach(t),iIr=i(p8),am=n(p8,"P",{});var Ple=s(am);dIr=r(Ple,`Note:
Loading a model from its configuration file does `),Xwe=n(Ple,"STRONG",{});var gJt=s(Xwe);cIr=r(gJt,"not"),gJt.forEach(t),mIr=r(Ple,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(Ple,"A",{href:!0});var hJt=s(Wee);fIr=r(hJt,"from_pretrained()"),hJt.forEach(t),gIr=r(Ple," to load the model weights."),Ple.forEach(t),hIr=i(p8),T(t0.$$.fragment,p8),p8.forEach(t),uIr=i(di),Gr=n(di,"DIV",{class:!0});var ci=s(Gr);T(Nk.$$.fragment,ci),pIr=i(ci),zwe=n(ci,"P",{});var uJt=s(zwe);_Ir=r(uJt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uJt.forEach(t),bIr=i(ci),xn=n(ci,"P",{});var _8=s(xn);vIr=r(_8,"The model class to instantiate is selected based on the "),Qwe=n(_8,"CODE",{});var pJt=s(Qwe);FIr=r(pJt,"model_type"),pJt.forEach(t),TIr=r(_8,` property of the config object (either
passed as an argument or loaded from `),Wwe=n(_8,"CODE",{});var _Jt=s(Wwe);MIr=r(_Jt,"pretrained_model_name_or_path"),_Jt.forEach(t),EIr=r(_8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=n(_8,"CODE",{});var bJt=s(Uwe);CIr=r(bJt,"pretrained_model_name_or_path"),bJt.forEach(t),wIr=r(_8,":"),_8.forEach(t),AIr=i(ci),fe=n(ci,"UL",{});var _e=s(fe);a0=n(_e,"LI",{});var CQe=s(a0);Hwe=n(CQe,"STRONG",{});var vJt=s(Hwe);LIr=r(vJt,"albert"),vJt.forEach(t),yIr=r(CQe," \u2014 "),Uee=n(CQe,"A",{href:!0});var FJt=s(Uee);xIr=r(FJt,"TFAlbertForMaskedLM"),FJt.forEach(t),$Ir=r(CQe," (ALBERT model)"),CQe.forEach(t),kIr=i(_e),n0=n(_e,"LI",{});var wQe=s(n0);Jwe=n(wQe,"STRONG",{});var TJt=s(Jwe);SIr=r(TJt,"bert"),TJt.forEach(t),RIr=r(wQe," \u2014 "),Hee=n(wQe,"A",{href:!0});var MJt=s(Hee);PIr=r(MJt,"TFBertForMaskedLM"),MJt.forEach(t),BIr=r(wQe," (BERT model)"),wQe.forEach(t),IIr=i(_e),s0=n(_e,"LI",{});var AQe=s(s0);Ywe=n(AQe,"STRONG",{});var EJt=s(Ywe);NIr=r(EJt,"camembert"),EJt.forEach(t),qIr=r(AQe," \u2014 "),Jee=n(AQe,"A",{href:!0});var CJt=s(Jee);jIr=r(CJt,"TFCamembertForMaskedLM"),CJt.forEach(t),DIr=r(AQe," (CamemBERT model)"),AQe.forEach(t),GIr=i(_e),l0=n(_e,"LI",{});var LQe=s(l0);Kwe=n(LQe,"STRONG",{});var wJt=s(Kwe);OIr=r(wJt,"convbert"),wJt.forEach(t),VIr=r(LQe," \u2014 "),Yee=n(LQe,"A",{href:!0});var AJt=s(Yee);XIr=r(AJt,"TFConvBertForMaskedLM"),AJt.forEach(t),zIr=r(LQe," (ConvBERT model)"),LQe.forEach(t),QIr=i(_e),i0=n(_e,"LI",{});var yQe=s(i0);Zwe=n(yQe,"STRONG",{});var LJt=s(Zwe);WIr=r(LJt,"deberta"),LJt.forEach(t),UIr=r(yQe," \u2014 "),Kee=n(yQe,"A",{href:!0});var yJt=s(Kee);HIr=r(yJt,"TFDebertaForMaskedLM"),yJt.forEach(t),JIr=r(yQe," (DeBERTa model)"),yQe.forEach(t),YIr=i(_e),d0=n(_e,"LI",{});var xQe=s(d0);eAe=n(xQe,"STRONG",{});var xJt=s(eAe);KIr=r(xJt,"deberta-v2"),xJt.forEach(t),ZIr=r(xQe," \u2014 "),Zee=n(xQe,"A",{href:!0});var $Jt=s(Zee);eNr=r($Jt,"TFDebertaV2ForMaskedLM"),$Jt.forEach(t),oNr=r(xQe," (DeBERTa-v2 model)"),xQe.forEach(t),rNr=i(_e),c0=n(_e,"LI",{});var $Qe=s(c0);oAe=n($Qe,"STRONG",{});var kJt=s(oAe);tNr=r(kJt,"distilbert"),kJt.forEach(t),aNr=r($Qe," \u2014 "),eoe=n($Qe,"A",{href:!0});var SJt=s(eoe);nNr=r(SJt,"TFDistilBertForMaskedLM"),SJt.forEach(t),sNr=r($Qe," (DistilBERT model)"),$Qe.forEach(t),lNr=i(_e),m0=n(_e,"LI",{});var kQe=s(m0);rAe=n(kQe,"STRONG",{});var RJt=s(rAe);iNr=r(RJt,"electra"),RJt.forEach(t),dNr=r(kQe," \u2014 "),ooe=n(kQe,"A",{href:!0});var PJt=s(ooe);cNr=r(PJt,"TFElectraForMaskedLM"),PJt.forEach(t),mNr=r(kQe," (ELECTRA model)"),kQe.forEach(t),fNr=i(_e),f0=n(_e,"LI",{});var SQe=s(f0);tAe=n(SQe,"STRONG",{});var BJt=s(tAe);gNr=r(BJt,"flaubert"),BJt.forEach(t),hNr=r(SQe," \u2014 "),roe=n(SQe,"A",{href:!0});var IJt=s(roe);uNr=r(IJt,"TFFlaubertWithLMHeadModel"),IJt.forEach(t),pNr=r(SQe," (FlauBERT model)"),SQe.forEach(t),_Nr=i(_e),g0=n(_e,"LI",{});var RQe=s(g0);aAe=n(RQe,"STRONG",{});var NJt=s(aAe);bNr=r(NJt,"funnel"),NJt.forEach(t),vNr=r(RQe," \u2014 "),toe=n(RQe,"A",{href:!0});var qJt=s(toe);FNr=r(qJt,"TFFunnelForMaskedLM"),qJt.forEach(t),TNr=r(RQe," (Funnel Transformer model)"),RQe.forEach(t),MNr=i(_e),h0=n(_e,"LI",{});var PQe=s(h0);nAe=n(PQe,"STRONG",{});var jJt=s(nAe);ENr=r(jJt,"layoutlm"),jJt.forEach(t),CNr=r(PQe," \u2014 "),aoe=n(PQe,"A",{href:!0});var DJt=s(aoe);wNr=r(DJt,"TFLayoutLMForMaskedLM"),DJt.forEach(t),ANr=r(PQe," (LayoutLM model)"),PQe.forEach(t),LNr=i(_e),u0=n(_e,"LI",{});var BQe=s(u0);sAe=n(BQe,"STRONG",{});var GJt=s(sAe);yNr=r(GJt,"longformer"),GJt.forEach(t),xNr=r(BQe," \u2014 "),noe=n(BQe,"A",{href:!0});var OJt=s(noe);$Nr=r(OJt,"TFLongformerForMaskedLM"),OJt.forEach(t),kNr=r(BQe," (Longformer model)"),BQe.forEach(t),SNr=i(_e),p0=n(_e,"LI",{});var IQe=s(p0);lAe=n(IQe,"STRONG",{});var VJt=s(lAe);RNr=r(VJt,"mobilebert"),VJt.forEach(t),PNr=r(IQe," \u2014 "),soe=n(IQe,"A",{href:!0});var XJt=s(soe);BNr=r(XJt,"TFMobileBertForMaskedLM"),XJt.forEach(t),INr=r(IQe," (MobileBERT model)"),IQe.forEach(t),NNr=i(_e),_0=n(_e,"LI",{});var NQe=s(_0);iAe=n(NQe,"STRONG",{});var zJt=s(iAe);qNr=r(zJt,"mpnet"),zJt.forEach(t),jNr=r(NQe," \u2014 "),loe=n(NQe,"A",{href:!0});var QJt=s(loe);DNr=r(QJt,"TFMPNetForMaskedLM"),QJt.forEach(t),GNr=r(NQe," (MPNet model)"),NQe.forEach(t),ONr=i(_e),b0=n(_e,"LI",{});var qQe=s(b0);dAe=n(qQe,"STRONG",{});var WJt=s(dAe);VNr=r(WJt,"rembert"),WJt.forEach(t),XNr=r(qQe," \u2014 "),ioe=n(qQe,"A",{href:!0});var UJt=s(ioe);zNr=r(UJt,"TFRemBertForMaskedLM"),UJt.forEach(t),QNr=r(qQe," (RemBERT model)"),qQe.forEach(t),WNr=i(_e),v0=n(_e,"LI",{});var jQe=s(v0);cAe=n(jQe,"STRONG",{});var HJt=s(cAe);UNr=r(HJt,"roberta"),HJt.forEach(t),HNr=r(jQe," \u2014 "),doe=n(jQe,"A",{href:!0});var JJt=s(doe);JNr=r(JJt,"TFRobertaForMaskedLM"),JJt.forEach(t),YNr=r(jQe," (RoBERTa model)"),jQe.forEach(t),KNr=i(_e),F0=n(_e,"LI",{});var DQe=s(F0);mAe=n(DQe,"STRONG",{});var YJt=s(mAe);ZNr=r(YJt,"roformer"),YJt.forEach(t),eqr=r(DQe," \u2014 "),coe=n(DQe,"A",{href:!0});var KJt=s(coe);oqr=r(KJt,"TFRoFormerForMaskedLM"),KJt.forEach(t),rqr=r(DQe," (RoFormer model)"),DQe.forEach(t),tqr=i(_e),T0=n(_e,"LI",{});var GQe=s(T0);fAe=n(GQe,"STRONG",{});var ZJt=s(fAe);aqr=r(ZJt,"tapas"),ZJt.forEach(t),nqr=r(GQe," \u2014 "),moe=n(GQe,"A",{href:!0});var eYt=s(moe);sqr=r(eYt,"TFTapasForMaskedLM"),eYt.forEach(t),lqr=r(GQe," (TAPAS model)"),GQe.forEach(t),iqr=i(_e),M0=n(_e,"LI",{});var OQe=s(M0);gAe=n(OQe,"STRONG",{});var oYt=s(gAe);dqr=r(oYt,"xlm"),oYt.forEach(t),cqr=r(OQe," \u2014 "),foe=n(OQe,"A",{href:!0});var rYt=s(foe);mqr=r(rYt,"TFXLMWithLMHeadModel"),rYt.forEach(t),fqr=r(OQe," (XLM model)"),OQe.forEach(t),gqr=i(_e),E0=n(_e,"LI",{});var VQe=s(E0);hAe=n(VQe,"STRONG",{});var tYt=s(hAe);hqr=r(tYt,"xlm-roberta"),tYt.forEach(t),uqr=r(VQe," \u2014 "),goe=n(VQe,"A",{href:!0});var aYt=s(goe);pqr=r(aYt,"TFXLMRobertaForMaskedLM"),aYt.forEach(t),_qr=r(VQe," (XLM-RoBERTa model)"),VQe.forEach(t),_e.forEach(t),bqr=i(ci),T(C0.$$.fragment,ci),ci.forEach(t),di.forEach(t),dKe=i(m),nm=n(m,"H2",{class:!0});var weo=s(nm);w0=n(weo,"A",{id:!0,class:!0,href:!0});var nYt=s(w0);uAe=n(nYt,"SPAN",{});var sYt=s(uAe);T(qk.$$.fragment,sYt),sYt.forEach(t),nYt.forEach(t),vqr=i(weo),pAe=n(weo,"SPAN",{});var lYt=s(pAe);Fqr=r(lYt,"TFAutoModelForSeq2SeqLM"),lYt.forEach(t),weo.forEach(t),cKe=i(m),fr=n(m,"DIV",{class:!0});var mi=s(fr);T(jk.$$.fragment,mi),Tqr=i(mi),sm=n(mi,"P",{});var Ble=s(sm);Mqr=r(Ble,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),hoe=n(Ble,"A",{href:!0});var iYt=s(hoe);Eqr=r(iYt,"from_pretrained()"),iYt.forEach(t),Cqr=r(Ble," class method or the "),uoe=n(Ble,"A",{href:!0});var dYt=s(uoe);wqr=r(dYt,"from_config()"),dYt.forEach(t),Aqr=r(Ble,` class
method.`),Ble.forEach(t),Lqr=i(mi),Dk=n(mi,"P",{});var Aeo=s(Dk);yqr=r(Aeo,"This class cannot be instantiated directly using "),_Ae=n(Aeo,"CODE",{});var cYt=s(_Ae);xqr=r(cYt,"__init__()"),cYt.forEach(t),$qr=r(Aeo," (throws an error)."),Aeo.forEach(t),kqr=i(mi),Ht=n(mi,"DIV",{class:!0});var b8=s(Ht);T(Gk.$$.fragment,b8),Sqr=i(b8),bAe=n(b8,"P",{});var mYt=s(bAe);Rqr=r(mYt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mYt.forEach(t),Pqr=i(b8),lm=n(b8,"P",{});var Ile=s(lm);Bqr=r(Ile,`Note:
Loading a model from its configuration file does `),vAe=n(Ile,"STRONG",{});var fYt=s(vAe);Iqr=r(fYt,"not"),fYt.forEach(t),Nqr=r(Ile,` load the model weights. It only affects the
model\u2019s configuration. Use `),poe=n(Ile,"A",{href:!0});var gYt=s(poe);qqr=r(gYt,"from_pretrained()"),gYt.forEach(t),jqr=r(Ile," to load the model weights."),Ile.forEach(t),Dqr=i(b8),T(A0.$$.fragment,b8),b8.forEach(t),Gqr=i(mi),Or=n(mi,"DIV",{class:!0});var fi=s(Or);T(Ok.$$.fragment,fi),Oqr=i(fi),FAe=n(fi,"P",{});var hYt=s(FAe);Vqr=r(hYt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hYt.forEach(t),Xqr=i(fi),$n=n(fi,"P",{});var v8=s($n);zqr=r(v8,"The model class to instantiate is selected based on the "),TAe=n(v8,"CODE",{});var uYt=s(TAe);Qqr=r(uYt,"model_type"),uYt.forEach(t),Wqr=r(v8,` property of the config object (either
passed as an argument or loaded from `),MAe=n(v8,"CODE",{});var pYt=s(MAe);Uqr=r(pYt,"pretrained_model_name_or_path"),pYt.forEach(t),Hqr=r(v8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EAe=n(v8,"CODE",{});var _Yt=s(EAe);Jqr=r(_Yt,"pretrained_model_name_or_path"),_Yt.forEach(t),Yqr=r(v8,":"),v8.forEach(t),Kqr=i(fi),ye=n(fi,"UL",{});var Ne=s(ye);L0=n(Ne,"LI",{});var XQe=s(L0);CAe=n(XQe,"STRONG",{});var bYt=s(CAe);Zqr=r(bYt,"bart"),bYt.forEach(t),ejr=r(XQe," \u2014 "),_oe=n(XQe,"A",{href:!0});var vYt=s(_oe);ojr=r(vYt,"TFBartForConditionalGeneration"),vYt.forEach(t),rjr=r(XQe," (BART model)"),XQe.forEach(t),tjr=i(Ne),y0=n(Ne,"LI",{});var zQe=s(y0);wAe=n(zQe,"STRONG",{});var FYt=s(wAe);ajr=r(FYt,"blenderbot"),FYt.forEach(t),njr=r(zQe," \u2014 "),boe=n(zQe,"A",{href:!0});var TYt=s(boe);sjr=r(TYt,"TFBlenderbotForConditionalGeneration"),TYt.forEach(t),ljr=r(zQe," (Blenderbot model)"),zQe.forEach(t),ijr=i(Ne),x0=n(Ne,"LI",{});var QQe=s(x0);AAe=n(QQe,"STRONG",{});var MYt=s(AAe);djr=r(MYt,"blenderbot-small"),MYt.forEach(t),cjr=r(QQe," \u2014 "),voe=n(QQe,"A",{href:!0});var EYt=s(voe);mjr=r(EYt,"TFBlenderbotSmallForConditionalGeneration"),EYt.forEach(t),fjr=r(QQe," (BlenderbotSmall model)"),QQe.forEach(t),gjr=i(Ne),$0=n(Ne,"LI",{});var WQe=s($0);LAe=n(WQe,"STRONG",{});var CYt=s(LAe);hjr=r(CYt,"encoder-decoder"),CYt.forEach(t),ujr=r(WQe," \u2014 "),Foe=n(WQe,"A",{href:!0});var wYt=s(Foe);pjr=r(wYt,"TFEncoderDecoderModel"),wYt.forEach(t),_jr=r(WQe," (Encoder decoder model)"),WQe.forEach(t),bjr=i(Ne),k0=n(Ne,"LI",{});var UQe=s(k0);yAe=n(UQe,"STRONG",{});var AYt=s(yAe);vjr=r(AYt,"led"),AYt.forEach(t),Fjr=r(UQe," \u2014 "),Toe=n(UQe,"A",{href:!0});var LYt=s(Toe);Tjr=r(LYt,"TFLEDForConditionalGeneration"),LYt.forEach(t),Mjr=r(UQe," (LED model)"),UQe.forEach(t),Ejr=i(Ne),S0=n(Ne,"LI",{});var HQe=s(S0);xAe=n(HQe,"STRONG",{});var yYt=s(xAe);Cjr=r(yYt,"marian"),yYt.forEach(t),wjr=r(HQe," \u2014 "),Moe=n(HQe,"A",{href:!0});var xYt=s(Moe);Ajr=r(xYt,"TFMarianMTModel"),xYt.forEach(t),Ljr=r(HQe," (Marian model)"),HQe.forEach(t),yjr=i(Ne),R0=n(Ne,"LI",{});var JQe=s(R0);$Ae=n(JQe,"STRONG",{});var $Yt=s($Ae);xjr=r($Yt,"mbart"),$Yt.forEach(t),$jr=r(JQe," \u2014 "),Eoe=n(JQe,"A",{href:!0});var kYt=s(Eoe);kjr=r(kYt,"TFMBartForConditionalGeneration"),kYt.forEach(t),Sjr=r(JQe," (mBART model)"),JQe.forEach(t),Rjr=i(Ne),P0=n(Ne,"LI",{});var YQe=s(P0);kAe=n(YQe,"STRONG",{});var SYt=s(kAe);Pjr=r(SYt,"mt5"),SYt.forEach(t),Bjr=r(YQe," \u2014 "),Coe=n(YQe,"A",{href:!0});var RYt=s(Coe);Ijr=r(RYt,"TFMT5ForConditionalGeneration"),RYt.forEach(t),Njr=r(YQe," (MT5 model)"),YQe.forEach(t),qjr=i(Ne),B0=n(Ne,"LI",{});var KQe=s(B0);SAe=n(KQe,"STRONG",{});var PYt=s(SAe);jjr=r(PYt,"pegasus"),PYt.forEach(t),Djr=r(KQe," \u2014 "),woe=n(KQe,"A",{href:!0});var BYt=s(woe);Gjr=r(BYt,"TFPegasusForConditionalGeneration"),BYt.forEach(t),Ojr=r(KQe," (Pegasus model)"),KQe.forEach(t),Vjr=i(Ne),I0=n(Ne,"LI",{});var ZQe=s(I0);RAe=n(ZQe,"STRONG",{});var IYt=s(RAe);Xjr=r(IYt,"t5"),IYt.forEach(t),zjr=r(ZQe," \u2014 "),Aoe=n(ZQe,"A",{href:!0});var NYt=s(Aoe);Qjr=r(NYt,"TFT5ForConditionalGeneration"),NYt.forEach(t),Wjr=r(ZQe," (T5 model)"),ZQe.forEach(t),Ne.forEach(t),Ujr=i(fi),T(N0.$$.fragment,fi),fi.forEach(t),mi.forEach(t),mKe=i(m),im=n(m,"H2",{class:!0});var Leo=s(im);q0=n(Leo,"A",{id:!0,class:!0,href:!0});var qYt=s(q0);PAe=n(qYt,"SPAN",{});var jYt=s(PAe);T(Vk.$$.fragment,jYt),jYt.forEach(t),qYt.forEach(t),Hjr=i(Leo),BAe=n(Leo,"SPAN",{});var DYt=s(BAe);Jjr=r(DYt,"TFAutoModelForSequenceClassification"),DYt.forEach(t),Leo.forEach(t),fKe=i(m),gr=n(m,"DIV",{class:!0});var gi=s(gr);T(Xk.$$.fragment,gi),Yjr=i(gi),dm=n(gi,"P",{});var Nle=s(dm);Kjr=r(Nle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Loe=n(Nle,"A",{href:!0});var GYt=s(Loe);Zjr=r(GYt,"from_pretrained()"),GYt.forEach(t),eDr=r(Nle," class method or the "),yoe=n(Nle,"A",{href:!0});var OYt=s(yoe);oDr=r(OYt,"from_config()"),OYt.forEach(t),rDr=r(Nle,` class
method.`),Nle.forEach(t),tDr=i(gi),zk=n(gi,"P",{});var yeo=s(zk);aDr=r(yeo,"This class cannot be instantiated directly using "),IAe=n(yeo,"CODE",{});var VYt=s(IAe);nDr=r(VYt,"__init__()"),VYt.forEach(t),sDr=r(yeo," (throws an error)."),yeo.forEach(t),lDr=i(gi),Jt=n(gi,"DIV",{class:!0});var F8=s(Jt);T(Qk.$$.fragment,F8),iDr=i(F8),NAe=n(F8,"P",{});var XYt=s(NAe);dDr=r(XYt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XYt.forEach(t),cDr=i(F8),cm=n(F8,"P",{});var qle=s(cm);mDr=r(qle,`Note:
Loading a model from its configuration file does `),qAe=n(qle,"STRONG",{});var zYt=s(qAe);fDr=r(zYt,"not"),zYt.forEach(t),gDr=r(qle,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(qle,"A",{href:!0});var QYt=s(xoe);hDr=r(QYt,"from_pretrained()"),QYt.forEach(t),uDr=r(qle," to load the model weights."),qle.forEach(t),pDr=i(F8),T(j0.$$.fragment,F8),F8.forEach(t),_Dr=i(gi),Vr=n(gi,"DIV",{class:!0});var hi=s(Vr);T(Wk.$$.fragment,hi),bDr=i(hi),jAe=n(hi,"P",{});var WYt=s(jAe);vDr=r(WYt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WYt.forEach(t),FDr=i(hi),kn=n(hi,"P",{});var T8=s(kn);TDr=r(T8,"The model class to instantiate is selected based on the "),DAe=n(T8,"CODE",{});var UYt=s(DAe);MDr=r(UYt,"model_type"),UYt.forEach(t),EDr=r(T8,` property of the config object (either
passed as an argument or loaded from `),GAe=n(T8,"CODE",{});var HYt=s(GAe);CDr=r(HYt,"pretrained_model_name_or_path"),HYt.forEach(t),wDr=r(T8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=n(T8,"CODE",{});var JYt=s(OAe);ADr=r(JYt,"pretrained_model_name_or_path"),JYt.forEach(t),LDr=r(T8,":"),T8.forEach(t),yDr=i(hi),re=n(hi,"UL",{});var ae=s(re);D0=n(ae,"LI",{});var eWe=s(D0);VAe=n(eWe,"STRONG",{});var YYt=s(VAe);xDr=r(YYt,"albert"),YYt.forEach(t),$Dr=r(eWe," \u2014 "),$oe=n(eWe,"A",{href:!0});var KYt=s($oe);kDr=r(KYt,"TFAlbertForSequenceClassification"),KYt.forEach(t),SDr=r(eWe," (ALBERT model)"),eWe.forEach(t),RDr=i(ae),G0=n(ae,"LI",{});var oWe=s(G0);XAe=n(oWe,"STRONG",{});var ZYt=s(XAe);PDr=r(ZYt,"bert"),ZYt.forEach(t),BDr=r(oWe," \u2014 "),koe=n(oWe,"A",{href:!0});var eKt=s(koe);IDr=r(eKt,"TFBertForSequenceClassification"),eKt.forEach(t),NDr=r(oWe," (BERT model)"),oWe.forEach(t),qDr=i(ae),O0=n(ae,"LI",{});var rWe=s(O0);zAe=n(rWe,"STRONG",{});var oKt=s(zAe);jDr=r(oKt,"camembert"),oKt.forEach(t),DDr=r(rWe," \u2014 "),Soe=n(rWe,"A",{href:!0});var rKt=s(Soe);GDr=r(rKt,"TFCamembertForSequenceClassification"),rKt.forEach(t),ODr=r(rWe," (CamemBERT model)"),rWe.forEach(t),VDr=i(ae),V0=n(ae,"LI",{});var tWe=s(V0);QAe=n(tWe,"STRONG",{});var tKt=s(QAe);XDr=r(tKt,"convbert"),tKt.forEach(t),zDr=r(tWe," \u2014 "),Roe=n(tWe,"A",{href:!0});var aKt=s(Roe);QDr=r(aKt,"TFConvBertForSequenceClassification"),aKt.forEach(t),WDr=r(tWe," (ConvBERT model)"),tWe.forEach(t),UDr=i(ae),X0=n(ae,"LI",{});var aWe=s(X0);WAe=n(aWe,"STRONG",{});var nKt=s(WAe);HDr=r(nKt,"ctrl"),nKt.forEach(t),JDr=r(aWe," \u2014 "),Poe=n(aWe,"A",{href:!0});var sKt=s(Poe);YDr=r(sKt,"TFCTRLForSequenceClassification"),sKt.forEach(t),KDr=r(aWe," (CTRL model)"),aWe.forEach(t),ZDr=i(ae),z0=n(ae,"LI",{});var nWe=s(z0);UAe=n(nWe,"STRONG",{});var lKt=s(UAe);eGr=r(lKt,"deberta"),lKt.forEach(t),oGr=r(nWe," \u2014 "),Boe=n(nWe,"A",{href:!0});var iKt=s(Boe);rGr=r(iKt,"TFDebertaForSequenceClassification"),iKt.forEach(t),tGr=r(nWe," (DeBERTa model)"),nWe.forEach(t),aGr=i(ae),Q0=n(ae,"LI",{});var sWe=s(Q0);HAe=n(sWe,"STRONG",{});var dKt=s(HAe);nGr=r(dKt,"deberta-v2"),dKt.forEach(t),sGr=r(sWe," \u2014 "),Ioe=n(sWe,"A",{href:!0});var cKt=s(Ioe);lGr=r(cKt,"TFDebertaV2ForSequenceClassification"),cKt.forEach(t),iGr=r(sWe," (DeBERTa-v2 model)"),sWe.forEach(t),dGr=i(ae),W0=n(ae,"LI",{});var lWe=s(W0);JAe=n(lWe,"STRONG",{});var mKt=s(JAe);cGr=r(mKt,"distilbert"),mKt.forEach(t),mGr=r(lWe," \u2014 "),Noe=n(lWe,"A",{href:!0});var fKt=s(Noe);fGr=r(fKt,"TFDistilBertForSequenceClassification"),fKt.forEach(t),gGr=r(lWe," (DistilBERT model)"),lWe.forEach(t),hGr=i(ae),U0=n(ae,"LI",{});var iWe=s(U0);YAe=n(iWe,"STRONG",{});var gKt=s(YAe);uGr=r(gKt,"electra"),gKt.forEach(t),pGr=r(iWe," \u2014 "),qoe=n(iWe,"A",{href:!0});var hKt=s(qoe);_Gr=r(hKt,"TFElectraForSequenceClassification"),hKt.forEach(t),bGr=r(iWe," (ELECTRA model)"),iWe.forEach(t),vGr=i(ae),H0=n(ae,"LI",{});var dWe=s(H0);KAe=n(dWe,"STRONG",{});var uKt=s(KAe);FGr=r(uKt,"flaubert"),uKt.forEach(t),TGr=r(dWe," \u2014 "),joe=n(dWe,"A",{href:!0});var pKt=s(joe);MGr=r(pKt,"TFFlaubertForSequenceClassification"),pKt.forEach(t),EGr=r(dWe," (FlauBERT model)"),dWe.forEach(t),CGr=i(ae),J0=n(ae,"LI",{});var cWe=s(J0);ZAe=n(cWe,"STRONG",{});var _Kt=s(ZAe);wGr=r(_Kt,"funnel"),_Kt.forEach(t),AGr=r(cWe," \u2014 "),Doe=n(cWe,"A",{href:!0});var bKt=s(Doe);LGr=r(bKt,"TFFunnelForSequenceClassification"),bKt.forEach(t),yGr=r(cWe," (Funnel Transformer model)"),cWe.forEach(t),xGr=i(ae),Y0=n(ae,"LI",{});var mWe=s(Y0);e6e=n(mWe,"STRONG",{});var vKt=s(e6e);$Gr=r(vKt,"gpt2"),vKt.forEach(t),kGr=r(mWe," \u2014 "),Goe=n(mWe,"A",{href:!0});var FKt=s(Goe);SGr=r(FKt,"TFGPT2ForSequenceClassification"),FKt.forEach(t),RGr=r(mWe," (OpenAI GPT-2 model)"),mWe.forEach(t),PGr=i(ae),K0=n(ae,"LI",{});var fWe=s(K0);o6e=n(fWe,"STRONG",{});var TKt=s(o6e);BGr=r(TKt,"gptj"),TKt.forEach(t),IGr=r(fWe," \u2014 "),Ooe=n(fWe,"A",{href:!0});var MKt=s(Ooe);NGr=r(MKt,"TFGPTJForSequenceClassification"),MKt.forEach(t),qGr=r(fWe," (GPT-J model)"),fWe.forEach(t),jGr=i(ae),Z0=n(ae,"LI",{});var gWe=s(Z0);r6e=n(gWe,"STRONG",{});var EKt=s(r6e);DGr=r(EKt,"layoutlm"),EKt.forEach(t),GGr=r(gWe," \u2014 "),Voe=n(gWe,"A",{href:!0});var CKt=s(Voe);OGr=r(CKt,"TFLayoutLMForSequenceClassification"),CKt.forEach(t),VGr=r(gWe," (LayoutLM model)"),gWe.forEach(t),XGr=i(ae),ew=n(ae,"LI",{});var hWe=s(ew);t6e=n(hWe,"STRONG",{});var wKt=s(t6e);zGr=r(wKt,"layoutlmv3"),wKt.forEach(t),QGr=r(hWe," \u2014 "),Xoe=n(hWe,"A",{href:!0});var AKt=s(Xoe);WGr=r(AKt,"TFLayoutLMv3ForSequenceClassification"),AKt.forEach(t),UGr=r(hWe," (LayoutLMv3 model)"),hWe.forEach(t),HGr=i(ae),ow=n(ae,"LI",{});var uWe=s(ow);a6e=n(uWe,"STRONG",{});var LKt=s(a6e);JGr=r(LKt,"longformer"),LKt.forEach(t),YGr=r(uWe," \u2014 "),zoe=n(uWe,"A",{href:!0});var yKt=s(zoe);KGr=r(yKt,"TFLongformerForSequenceClassification"),yKt.forEach(t),ZGr=r(uWe," (Longformer model)"),uWe.forEach(t),eOr=i(ae),rw=n(ae,"LI",{});var pWe=s(rw);n6e=n(pWe,"STRONG",{});var xKt=s(n6e);oOr=r(xKt,"mobilebert"),xKt.forEach(t),rOr=r(pWe," \u2014 "),Qoe=n(pWe,"A",{href:!0});var $Kt=s(Qoe);tOr=r($Kt,"TFMobileBertForSequenceClassification"),$Kt.forEach(t),aOr=r(pWe," (MobileBERT model)"),pWe.forEach(t),nOr=i(ae),tw=n(ae,"LI",{});var _We=s(tw);s6e=n(_We,"STRONG",{});var kKt=s(s6e);sOr=r(kKt,"mpnet"),kKt.forEach(t),lOr=r(_We," \u2014 "),Woe=n(_We,"A",{href:!0});var SKt=s(Woe);iOr=r(SKt,"TFMPNetForSequenceClassification"),SKt.forEach(t),dOr=r(_We," (MPNet model)"),_We.forEach(t),cOr=i(ae),aw=n(ae,"LI",{});var bWe=s(aw);l6e=n(bWe,"STRONG",{});var RKt=s(l6e);mOr=r(RKt,"openai-gpt"),RKt.forEach(t),fOr=r(bWe," \u2014 "),Uoe=n(bWe,"A",{href:!0});var PKt=s(Uoe);gOr=r(PKt,"TFOpenAIGPTForSequenceClassification"),PKt.forEach(t),hOr=r(bWe," (OpenAI GPT model)"),bWe.forEach(t),uOr=i(ae),nw=n(ae,"LI",{});var vWe=s(nw);i6e=n(vWe,"STRONG",{});var BKt=s(i6e);pOr=r(BKt,"rembert"),BKt.forEach(t),_Or=r(vWe," \u2014 "),Hoe=n(vWe,"A",{href:!0});var IKt=s(Hoe);bOr=r(IKt,"TFRemBertForSequenceClassification"),IKt.forEach(t),vOr=r(vWe," (RemBERT model)"),vWe.forEach(t),FOr=i(ae),sw=n(ae,"LI",{});var FWe=s(sw);d6e=n(FWe,"STRONG",{});var NKt=s(d6e);TOr=r(NKt,"roberta"),NKt.forEach(t),MOr=r(FWe," \u2014 "),Joe=n(FWe,"A",{href:!0});var qKt=s(Joe);EOr=r(qKt,"TFRobertaForSequenceClassification"),qKt.forEach(t),COr=r(FWe," (RoBERTa model)"),FWe.forEach(t),wOr=i(ae),lw=n(ae,"LI",{});var TWe=s(lw);c6e=n(TWe,"STRONG",{});var jKt=s(c6e);AOr=r(jKt,"roformer"),jKt.forEach(t),LOr=r(TWe," \u2014 "),Yoe=n(TWe,"A",{href:!0});var DKt=s(Yoe);yOr=r(DKt,"TFRoFormerForSequenceClassification"),DKt.forEach(t),xOr=r(TWe," (RoFormer model)"),TWe.forEach(t),$Or=i(ae),iw=n(ae,"LI",{});var MWe=s(iw);m6e=n(MWe,"STRONG",{});var GKt=s(m6e);kOr=r(GKt,"tapas"),GKt.forEach(t),SOr=r(MWe," \u2014 "),Koe=n(MWe,"A",{href:!0});var OKt=s(Koe);ROr=r(OKt,"TFTapasForSequenceClassification"),OKt.forEach(t),POr=r(MWe," (TAPAS model)"),MWe.forEach(t),BOr=i(ae),dw=n(ae,"LI",{});var EWe=s(dw);f6e=n(EWe,"STRONG",{});var VKt=s(f6e);IOr=r(VKt,"transfo-xl"),VKt.forEach(t),NOr=r(EWe," \u2014 "),Zoe=n(EWe,"A",{href:!0});var XKt=s(Zoe);qOr=r(XKt,"TFTransfoXLForSequenceClassification"),XKt.forEach(t),jOr=r(EWe," (Transformer-XL model)"),EWe.forEach(t),DOr=i(ae),cw=n(ae,"LI",{});var CWe=s(cw);g6e=n(CWe,"STRONG",{});var zKt=s(g6e);GOr=r(zKt,"xlm"),zKt.forEach(t),OOr=r(CWe," \u2014 "),ere=n(CWe,"A",{href:!0});var QKt=s(ere);VOr=r(QKt,"TFXLMForSequenceClassification"),QKt.forEach(t),XOr=r(CWe," (XLM model)"),CWe.forEach(t),zOr=i(ae),mw=n(ae,"LI",{});var wWe=s(mw);h6e=n(wWe,"STRONG",{});var WKt=s(h6e);QOr=r(WKt,"xlm-roberta"),WKt.forEach(t),WOr=r(wWe," \u2014 "),ore=n(wWe,"A",{href:!0});var UKt=s(ore);UOr=r(UKt,"TFXLMRobertaForSequenceClassification"),UKt.forEach(t),HOr=r(wWe," (XLM-RoBERTa model)"),wWe.forEach(t),JOr=i(ae),fw=n(ae,"LI",{});var AWe=s(fw);u6e=n(AWe,"STRONG",{});var HKt=s(u6e);YOr=r(HKt,"xlnet"),HKt.forEach(t),KOr=r(AWe," \u2014 "),rre=n(AWe,"A",{href:!0});var JKt=s(rre);ZOr=r(JKt,"TFXLNetForSequenceClassification"),JKt.forEach(t),eVr=r(AWe," (XLNet model)"),AWe.forEach(t),ae.forEach(t),oVr=i(hi),T(gw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),gKe=i(m),mm=n(m,"H2",{class:!0});var xeo=s(mm);hw=n(xeo,"A",{id:!0,class:!0,href:!0});var YKt=s(hw);p6e=n(YKt,"SPAN",{});var KKt=s(p6e);T(Uk.$$.fragment,KKt),KKt.forEach(t),YKt.forEach(t),rVr=i(xeo),_6e=n(xeo,"SPAN",{});var ZKt=s(_6e);tVr=r(ZKt,"TFAutoModelForMultipleChoice"),ZKt.forEach(t),xeo.forEach(t),hKe=i(m),hr=n(m,"DIV",{class:!0});var ui=s(hr);T(Hk.$$.fragment,ui),aVr=i(ui),fm=n(ui,"P",{});var jle=s(fm);nVr=r(jle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tre=n(jle,"A",{href:!0});var eZt=s(tre);sVr=r(eZt,"from_pretrained()"),eZt.forEach(t),lVr=r(jle," class method or the "),are=n(jle,"A",{href:!0});var oZt=s(are);iVr=r(oZt,"from_config()"),oZt.forEach(t),dVr=r(jle,` class
method.`),jle.forEach(t),cVr=i(ui),Jk=n(ui,"P",{});var $eo=s(Jk);mVr=r($eo,"This class cannot be instantiated directly using "),b6e=n($eo,"CODE",{});var rZt=s(b6e);fVr=r(rZt,"__init__()"),rZt.forEach(t),gVr=r($eo," (throws an error)."),$eo.forEach(t),hVr=i(ui),Yt=n(ui,"DIV",{class:!0});var M8=s(Yt);T(Yk.$$.fragment,M8),uVr=i(M8),v6e=n(M8,"P",{});var tZt=s(v6e);pVr=r(tZt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tZt.forEach(t),_Vr=i(M8),gm=n(M8,"P",{});var Dle=s(gm);bVr=r(Dle,`Note:
Loading a model from its configuration file does `),F6e=n(Dle,"STRONG",{});var aZt=s(F6e);vVr=r(aZt,"not"),aZt.forEach(t),FVr=r(Dle,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(Dle,"A",{href:!0});var nZt=s(nre);TVr=r(nZt,"from_pretrained()"),nZt.forEach(t),MVr=r(Dle," to load the model weights."),Dle.forEach(t),EVr=i(M8),T(uw.$$.fragment,M8),M8.forEach(t),CVr=i(ui),Xr=n(ui,"DIV",{class:!0});var pi=s(Xr);T(Kk.$$.fragment,pi),wVr=i(pi),T6e=n(pi,"P",{});var sZt=s(T6e);AVr=r(sZt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sZt.forEach(t),LVr=i(pi),Sn=n(pi,"P",{});var E8=s(Sn);yVr=r(E8,"The model class to instantiate is selected based on the "),M6e=n(E8,"CODE",{});var lZt=s(M6e);xVr=r(lZt,"model_type"),lZt.forEach(t),$Vr=r(E8,` property of the config object (either
passed as an argument or loaded from `),E6e=n(E8,"CODE",{});var iZt=s(E6e);kVr=r(iZt,"pretrained_model_name_or_path"),iZt.forEach(t),SVr=r(E8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C6e=n(E8,"CODE",{});var dZt=s(C6e);RVr=r(dZt,"pretrained_model_name_or_path"),dZt.forEach(t),PVr=r(E8,":"),E8.forEach(t),BVr=i(pi),ve=n(pi,"UL",{});var Te=s(ve);pw=n(Te,"LI",{});var LWe=s(pw);w6e=n(LWe,"STRONG",{});var cZt=s(w6e);IVr=r(cZt,"albert"),cZt.forEach(t),NVr=r(LWe," \u2014 "),sre=n(LWe,"A",{href:!0});var mZt=s(sre);qVr=r(mZt,"TFAlbertForMultipleChoice"),mZt.forEach(t),jVr=r(LWe," (ALBERT model)"),LWe.forEach(t),DVr=i(Te),_w=n(Te,"LI",{});var yWe=s(_w);A6e=n(yWe,"STRONG",{});var fZt=s(A6e);GVr=r(fZt,"bert"),fZt.forEach(t),OVr=r(yWe," \u2014 "),lre=n(yWe,"A",{href:!0});var gZt=s(lre);VVr=r(gZt,"TFBertForMultipleChoice"),gZt.forEach(t),XVr=r(yWe," (BERT model)"),yWe.forEach(t),zVr=i(Te),bw=n(Te,"LI",{});var xWe=s(bw);L6e=n(xWe,"STRONG",{});var hZt=s(L6e);QVr=r(hZt,"camembert"),hZt.forEach(t),WVr=r(xWe," \u2014 "),ire=n(xWe,"A",{href:!0});var uZt=s(ire);UVr=r(uZt,"TFCamembertForMultipleChoice"),uZt.forEach(t),HVr=r(xWe," (CamemBERT model)"),xWe.forEach(t),JVr=i(Te),vw=n(Te,"LI",{});var $We=s(vw);y6e=n($We,"STRONG",{});var pZt=s(y6e);YVr=r(pZt,"convbert"),pZt.forEach(t),KVr=r($We," \u2014 "),dre=n($We,"A",{href:!0});var _Zt=s(dre);ZVr=r(_Zt,"TFConvBertForMultipleChoice"),_Zt.forEach(t),eXr=r($We," (ConvBERT model)"),$We.forEach(t),oXr=i(Te),Fw=n(Te,"LI",{});var kWe=s(Fw);x6e=n(kWe,"STRONG",{});var bZt=s(x6e);rXr=r(bZt,"distilbert"),bZt.forEach(t),tXr=r(kWe," \u2014 "),cre=n(kWe,"A",{href:!0});var vZt=s(cre);aXr=r(vZt,"TFDistilBertForMultipleChoice"),vZt.forEach(t),nXr=r(kWe," (DistilBERT model)"),kWe.forEach(t),sXr=i(Te),Tw=n(Te,"LI",{});var SWe=s(Tw);$6e=n(SWe,"STRONG",{});var FZt=s($6e);lXr=r(FZt,"electra"),FZt.forEach(t),iXr=r(SWe," \u2014 "),mre=n(SWe,"A",{href:!0});var TZt=s(mre);dXr=r(TZt,"TFElectraForMultipleChoice"),TZt.forEach(t),cXr=r(SWe," (ELECTRA model)"),SWe.forEach(t),mXr=i(Te),Mw=n(Te,"LI",{});var RWe=s(Mw);k6e=n(RWe,"STRONG",{});var MZt=s(k6e);fXr=r(MZt,"flaubert"),MZt.forEach(t),gXr=r(RWe," \u2014 "),fre=n(RWe,"A",{href:!0});var EZt=s(fre);hXr=r(EZt,"TFFlaubertForMultipleChoice"),EZt.forEach(t),uXr=r(RWe," (FlauBERT model)"),RWe.forEach(t),pXr=i(Te),Ew=n(Te,"LI",{});var PWe=s(Ew);S6e=n(PWe,"STRONG",{});var CZt=s(S6e);_Xr=r(CZt,"funnel"),CZt.forEach(t),bXr=r(PWe," \u2014 "),gre=n(PWe,"A",{href:!0});var wZt=s(gre);vXr=r(wZt,"TFFunnelForMultipleChoice"),wZt.forEach(t),FXr=r(PWe," (Funnel Transformer model)"),PWe.forEach(t),TXr=i(Te),Cw=n(Te,"LI",{});var BWe=s(Cw);R6e=n(BWe,"STRONG",{});var AZt=s(R6e);MXr=r(AZt,"longformer"),AZt.forEach(t),EXr=r(BWe," \u2014 "),hre=n(BWe,"A",{href:!0});var LZt=s(hre);CXr=r(LZt,"TFLongformerForMultipleChoice"),LZt.forEach(t),wXr=r(BWe," (Longformer model)"),BWe.forEach(t),AXr=i(Te),ww=n(Te,"LI",{});var IWe=s(ww);P6e=n(IWe,"STRONG",{});var yZt=s(P6e);LXr=r(yZt,"mobilebert"),yZt.forEach(t),yXr=r(IWe," \u2014 "),ure=n(IWe,"A",{href:!0});var xZt=s(ure);xXr=r(xZt,"TFMobileBertForMultipleChoice"),xZt.forEach(t),$Xr=r(IWe," (MobileBERT model)"),IWe.forEach(t),kXr=i(Te),Aw=n(Te,"LI",{});var NWe=s(Aw);B6e=n(NWe,"STRONG",{});var $Zt=s(B6e);SXr=r($Zt,"mpnet"),$Zt.forEach(t),RXr=r(NWe," \u2014 "),pre=n(NWe,"A",{href:!0});var kZt=s(pre);PXr=r(kZt,"TFMPNetForMultipleChoice"),kZt.forEach(t),BXr=r(NWe," (MPNet model)"),NWe.forEach(t),IXr=i(Te),Lw=n(Te,"LI",{});var qWe=s(Lw);I6e=n(qWe,"STRONG",{});var SZt=s(I6e);NXr=r(SZt,"rembert"),SZt.forEach(t),qXr=r(qWe," \u2014 "),_re=n(qWe,"A",{href:!0});var RZt=s(_re);jXr=r(RZt,"TFRemBertForMultipleChoice"),RZt.forEach(t),DXr=r(qWe," (RemBERT model)"),qWe.forEach(t),GXr=i(Te),yw=n(Te,"LI",{});var jWe=s(yw);N6e=n(jWe,"STRONG",{});var PZt=s(N6e);OXr=r(PZt,"roberta"),PZt.forEach(t),VXr=r(jWe," \u2014 "),bre=n(jWe,"A",{href:!0});var BZt=s(bre);XXr=r(BZt,"TFRobertaForMultipleChoice"),BZt.forEach(t),zXr=r(jWe," (RoBERTa model)"),jWe.forEach(t),QXr=i(Te),xw=n(Te,"LI",{});var DWe=s(xw);q6e=n(DWe,"STRONG",{});var IZt=s(q6e);WXr=r(IZt,"roformer"),IZt.forEach(t),UXr=r(DWe," \u2014 "),vre=n(DWe,"A",{href:!0});var NZt=s(vre);HXr=r(NZt,"TFRoFormerForMultipleChoice"),NZt.forEach(t),JXr=r(DWe," (RoFormer model)"),DWe.forEach(t),YXr=i(Te),$w=n(Te,"LI",{});var GWe=s($w);j6e=n(GWe,"STRONG",{});var qZt=s(j6e);KXr=r(qZt,"xlm"),qZt.forEach(t),ZXr=r(GWe," \u2014 "),Fre=n(GWe,"A",{href:!0});var jZt=s(Fre);ezr=r(jZt,"TFXLMForMultipleChoice"),jZt.forEach(t),ozr=r(GWe," (XLM model)"),GWe.forEach(t),rzr=i(Te),kw=n(Te,"LI",{});var OWe=s(kw);D6e=n(OWe,"STRONG",{});var DZt=s(D6e);tzr=r(DZt,"xlm-roberta"),DZt.forEach(t),azr=r(OWe," \u2014 "),Tre=n(OWe,"A",{href:!0});var GZt=s(Tre);nzr=r(GZt,"TFXLMRobertaForMultipleChoice"),GZt.forEach(t),szr=r(OWe," (XLM-RoBERTa model)"),OWe.forEach(t),lzr=i(Te),Sw=n(Te,"LI",{});var VWe=s(Sw);G6e=n(VWe,"STRONG",{});var OZt=s(G6e);izr=r(OZt,"xlnet"),OZt.forEach(t),dzr=r(VWe," \u2014 "),Mre=n(VWe,"A",{href:!0});var VZt=s(Mre);czr=r(VZt,"TFXLNetForMultipleChoice"),VZt.forEach(t),mzr=r(VWe," (XLNet model)"),VWe.forEach(t),Te.forEach(t),fzr=i(pi),T(Rw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),uKe=i(m),hm=n(m,"H2",{class:!0});var keo=s(hm);Pw=n(keo,"A",{id:!0,class:!0,href:!0});var XZt=s(Pw);O6e=n(XZt,"SPAN",{});var zZt=s(O6e);T(Zk.$$.fragment,zZt),zZt.forEach(t),XZt.forEach(t),gzr=i(keo),V6e=n(keo,"SPAN",{});var QZt=s(V6e);hzr=r(QZt,"TFAutoModelForNextSentencePrediction"),QZt.forEach(t),keo.forEach(t),pKe=i(m),ur=n(m,"DIV",{class:!0});var _i=s(ur);T(eS.$$.fragment,_i),uzr=i(_i),um=n(_i,"P",{});var Gle=s(um);pzr=r(Gle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ere=n(Gle,"A",{href:!0});var WZt=s(Ere);_zr=r(WZt,"from_pretrained()"),WZt.forEach(t),bzr=r(Gle," class method or the "),Cre=n(Gle,"A",{href:!0});var UZt=s(Cre);vzr=r(UZt,"from_config()"),UZt.forEach(t),Fzr=r(Gle,` class
method.`),Gle.forEach(t),Tzr=i(_i),oS=n(_i,"P",{});var Seo=s(oS);Mzr=r(Seo,"This class cannot be instantiated directly using "),X6e=n(Seo,"CODE",{});var HZt=s(X6e);Ezr=r(HZt,"__init__()"),HZt.forEach(t),Czr=r(Seo," (throws an error)."),Seo.forEach(t),wzr=i(_i),Kt=n(_i,"DIV",{class:!0});var C8=s(Kt);T(rS.$$.fragment,C8),Azr=i(C8),z6e=n(C8,"P",{});var JZt=s(z6e);Lzr=r(JZt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JZt.forEach(t),yzr=i(C8),pm=n(C8,"P",{});var Ole=s(pm);xzr=r(Ole,`Note:
Loading a model from its configuration file does `),Q6e=n(Ole,"STRONG",{});var YZt=s(Q6e);$zr=r(YZt,"not"),YZt.forEach(t),kzr=r(Ole,` load the model weights. It only affects the
model\u2019s configuration. Use `),wre=n(Ole,"A",{href:!0});var KZt=s(wre);Szr=r(KZt,"from_pretrained()"),KZt.forEach(t),Rzr=r(Ole," to load the model weights."),Ole.forEach(t),Pzr=i(C8),T(Bw.$$.fragment,C8),C8.forEach(t),Bzr=i(_i),zr=n(_i,"DIV",{class:!0});var bi=s(zr);T(tS.$$.fragment,bi),Izr=i(bi),W6e=n(bi,"P",{});var ZZt=s(W6e);Nzr=r(ZZt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ZZt.forEach(t),qzr=i(bi),Rn=n(bi,"P",{});var w8=s(Rn);jzr=r(w8,"The model class to instantiate is selected based on the "),U6e=n(w8,"CODE",{});var eea=s(U6e);Dzr=r(eea,"model_type"),eea.forEach(t),Gzr=r(w8,` property of the config object (either
passed as an argument or loaded from `),H6e=n(w8,"CODE",{});var oea=s(H6e);Ozr=r(oea,"pretrained_model_name_or_path"),oea.forEach(t),Vzr=r(w8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(w8,"CODE",{});var rea=s(J6e);Xzr=r(rea,"pretrained_model_name_or_path"),rea.forEach(t),zzr=r(w8,":"),w8.forEach(t),Qzr=i(bi),aS=n(bi,"UL",{});var Reo=s(aS);Iw=n(Reo,"LI",{});var XWe=s(Iw);Y6e=n(XWe,"STRONG",{});var tea=s(Y6e);Wzr=r(tea,"bert"),tea.forEach(t),Uzr=r(XWe," \u2014 "),Are=n(XWe,"A",{href:!0});var aea=s(Are);Hzr=r(aea,"TFBertForNextSentencePrediction"),aea.forEach(t),Jzr=r(XWe," (BERT model)"),XWe.forEach(t),Yzr=i(Reo),Nw=n(Reo,"LI",{});var zWe=s(Nw);K6e=n(zWe,"STRONG",{});var nea=s(K6e);Kzr=r(nea,"mobilebert"),nea.forEach(t),Zzr=r(zWe," \u2014 "),Lre=n(zWe,"A",{href:!0});var sea=s(Lre);eQr=r(sea,"TFMobileBertForNextSentencePrediction"),sea.forEach(t),oQr=r(zWe," (MobileBERT model)"),zWe.forEach(t),Reo.forEach(t),rQr=i(bi),T(qw.$$.fragment,bi),bi.forEach(t),_i.forEach(t),_Ke=i(m),_m=n(m,"H2",{class:!0});var Peo=s(_m);jw=n(Peo,"A",{id:!0,class:!0,href:!0});var lea=s(jw);Z6e=n(lea,"SPAN",{});var iea=s(Z6e);T(nS.$$.fragment,iea),iea.forEach(t),lea.forEach(t),tQr=i(Peo),e7e=n(Peo,"SPAN",{});var dea=s(e7e);aQr=r(dea,"TFAutoModelForTableQuestionAnswering"),dea.forEach(t),Peo.forEach(t),bKe=i(m),pr=n(m,"DIV",{class:!0});var vi=s(pr);T(sS.$$.fragment,vi),nQr=i(vi),bm=n(vi,"P",{});var Vle=s(bm);sQr=r(Vle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yre=n(Vle,"A",{href:!0});var cea=s(yre);lQr=r(cea,"from_pretrained()"),cea.forEach(t),iQr=r(Vle," class method or the "),xre=n(Vle,"A",{href:!0});var mea=s(xre);dQr=r(mea,"from_config()"),mea.forEach(t),cQr=r(Vle,` class
method.`),Vle.forEach(t),mQr=i(vi),lS=n(vi,"P",{});var Beo=s(lS);fQr=r(Beo,"This class cannot be instantiated directly using "),o7e=n(Beo,"CODE",{});var fea=s(o7e);gQr=r(fea,"__init__()"),fea.forEach(t),hQr=r(Beo," (throws an error)."),Beo.forEach(t),uQr=i(vi),Zt=n(vi,"DIV",{class:!0});var A8=s(Zt);T(iS.$$.fragment,A8),pQr=i(A8),r7e=n(A8,"P",{});var gea=s(r7e);_Qr=r(gea,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gea.forEach(t),bQr=i(A8),vm=n(A8,"P",{});var Xle=s(vm);vQr=r(Xle,`Note:
Loading a model from its configuration file does `),t7e=n(Xle,"STRONG",{});var hea=s(t7e);FQr=r(hea,"not"),hea.forEach(t),TQr=r(Xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),$re=n(Xle,"A",{href:!0});var uea=s($re);MQr=r(uea,"from_pretrained()"),uea.forEach(t),EQr=r(Xle," to load the model weights."),Xle.forEach(t),CQr=i(A8),T(Dw.$$.fragment,A8),A8.forEach(t),wQr=i(vi),Qr=n(vi,"DIV",{class:!0});var Fi=s(Qr);T(dS.$$.fragment,Fi),AQr=i(Fi),a7e=n(Fi,"P",{});var pea=s(a7e);LQr=r(pea,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pea.forEach(t),yQr=i(Fi),Pn=n(Fi,"P",{});var L8=s(Pn);xQr=r(L8,"The model class to instantiate is selected based on the "),n7e=n(L8,"CODE",{});var _ea=s(n7e);$Qr=r(_ea,"model_type"),_ea.forEach(t),kQr=r(L8,` property of the config object (either
passed as an argument or loaded from `),s7e=n(L8,"CODE",{});var bea=s(s7e);SQr=r(bea,"pretrained_model_name_or_path"),bea.forEach(t),RQr=r(L8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(L8,"CODE",{});var vea=s(l7e);PQr=r(vea,"pretrained_model_name_or_path"),vea.forEach(t),BQr=r(L8,":"),L8.forEach(t),IQr=i(Fi),i7e=n(Fi,"UL",{});var Fea=s(i7e);Gw=n(Fea,"LI",{});var QWe=s(Gw);d7e=n(QWe,"STRONG",{});var Tea=s(d7e);NQr=r(Tea,"tapas"),Tea.forEach(t),qQr=r(QWe," \u2014 "),kre=n(QWe,"A",{href:!0});var Mea=s(kre);jQr=r(Mea,"TFTapasForQuestionAnswering"),Mea.forEach(t),DQr=r(QWe," (TAPAS model)"),QWe.forEach(t),Fea.forEach(t),GQr=i(Fi),T(Ow.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),vKe=i(m),Fm=n(m,"H2",{class:!0});var Ieo=s(Fm);Vw=n(Ieo,"A",{id:!0,class:!0,href:!0});var Eea=s(Vw);c7e=n(Eea,"SPAN",{});var Cea=s(c7e);T(cS.$$.fragment,Cea),Cea.forEach(t),Eea.forEach(t),OQr=i(Ieo),m7e=n(Ieo,"SPAN",{});var wea=s(m7e);VQr=r(wea,"TFAutoModelForDocumentQuestionAnswering"),wea.forEach(t),Ieo.forEach(t),FKe=i(m),_r=n(m,"DIV",{class:!0});var Ti=s(_r);T(mS.$$.fragment,Ti),XQr=i(Ti),Tm=n(Ti,"P",{});var zle=s(Tm);zQr=r(zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Sre=n(zle,"A",{href:!0});var Aea=s(Sre);QQr=r(Aea,"from_pretrained()"),Aea.forEach(t),WQr=r(zle," class method or the "),Rre=n(zle,"A",{href:!0});var Lea=s(Rre);UQr=r(Lea,"from_config()"),Lea.forEach(t),HQr=r(zle,` class
method.`),zle.forEach(t),JQr=i(Ti),fS=n(Ti,"P",{});var Neo=s(fS);YQr=r(Neo,"This class cannot be instantiated directly using "),f7e=n(Neo,"CODE",{});var yea=s(f7e);KQr=r(yea,"__init__()"),yea.forEach(t),ZQr=r(Neo," (throws an error)."),Neo.forEach(t),eWr=i(Ti),ea=n(Ti,"DIV",{class:!0});var y8=s(ea);T(gS.$$.fragment,y8),oWr=i(y8),g7e=n(y8,"P",{});var xea=s(g7e);rWr=r(xea,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),xea.forEach(t),tWr=i(y8),Mm=n(y8,"P",{});var Qle=s(Mm);aWr=r(Qle,`Note:
Loading a model from its configuration file does `),h7e=n(Qle,"STRONG",{});var $ea=s(h7e);nWr=r($ea,"not"),$ea.forEach(t),sWr=r(Qle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pre=n(Qle,"A",{href:!0});var kea=s(Pre);lWr=r(kea,"from_pretrained()"),kea.forEach(t),iWr=r(Qle," to load the model weights."),Qle.forEach(t),dWr=i(y8),T(Xw.$$.fragment,y8),y8.forEach(t),cWr=i(Ti),Wr=n(Ti,"DIV",{class:!0});var Mi=s(Wr);T(hS.$$.fragment,Mi),mWr=i(Mi),u7e=n(Mi,"P",{});var Sea=s(u7e);fWr=r(Sea,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Sea.forEach(t),gWr=i(Mi),Bn=n(Mi,"P",{});var x8=s(Bn);hWr=r(x8,"The model class to instantiate is selected based on the "),p7e=n(x8,"CODE",{});var Rea=s(p7e);uWr=r(Rea,"model_type"),Rea.forEach(t),pWr=r(x8,` property of the config object (either
passed as an argument or loaded from `),_7e=n(x8,"CODE",{});var Pea=s(_7e);_Wr=r(Pea,"pretrained_model_name_or_path"),Pea.forEach(t),bWr=r(x8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b7e=n(x8,"CODE",{});var Bea=s(b7e);vWr=r(Bea,"pretrained_model_name_or_path"),Bea.forEach(t),FWr=r(x8,":"),x8.forEach(t),TWr=i(Mi),v7e=n(Mi,"UL",{});var Iea=s(v7e);zw=n(Iea,"LI",{});var WWe=s(zw);F7e=n(WWe,"STRONG",{});var Nea=s(F7e);MWr=r(Nea,"layoutlm"),Nea.forEach(t),EWr=r(WWe," \u2014 "),Bre=n(WWe,"A",{href:!0});var qea=s(Bre);CWr=r(qea,"TFLayoutLMForQuestionAnswering"),qea.forEach(t),wWr=r(WWe," (LayoutLM model)"),WWe.forEach(t),Iea.forEach(t),AWr=i(Mi),T(Qw.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),TKe=i(m),Em=n(m,"H2",{class:!0});var qeo=s(Em);Ww=n(qeo,"A",{id:!0,class:!0,href:!0});var jea=s(Ww);T7e=n(jea,"SPAN",{});var Dea=s(T7e);T(uS.$$.fragment,Dea),Dea.forEach(t),jea.forEach(t),LWr=i(qeo),M7e=n(qeo,"SPAN",{});var Gea=s(M7e);yWr=r(Gea,"TFAutoModelForTokenClassification"),Gea.forEach(t),qeo.forEach(t),MKe=i(m),br=n(m,"DIV",{class:!0});var Ei=s(br);T(pS.$$.fragment,Ei),xWr=i(Ei),Cm=n(Ei,"P",{});var Wle=s(Cm);$Wr=r(Wle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ire=n(Wle,"A",{href:!0});var Oea=s(Ire);kWr=r(Oea,"from_pretrained()"),Oea.forEach(t),SWr=r(Wle," class method or the "),Nre=n(Wle,"A",{href:!0});var Vea=s(Nre);RWr=r(Vea,"from_config()"),Vea.forEach(t),PWr=r(Wle,` class
method.`),Wle.forEach(t),BWr=i(Ei),_S=n(Ei,"P",{});var jeo=s(_S);IWr=r(jeo,"This class cannot be instantiated directly using "),E7e=n(jeo,"CODE",{});var Xea=s(E7e);NWr=r(Xea,"__init__()"),Xea.forEach(t),qWr=r(jeo," (throws an error)."),jeo.forEach(t),jWr=i(Ei),oa=n(Ei,"DIV",{class:!0});var $8=s(oa);T(bS.$$.fragment,$8),DWr=i($8),C7e=n($8,"P",{});var zea=s(C7e);GWr=r(zea,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zea.forEach(t),OWr=i($8),wm=n($8,"P",{});var Ule=s(wm);VWr=r(Ule,`Note:
Loading a model from its configuration file does `),w7e=n(Ule,"STRONG",{});var Qea=s(w7e);XWr=r(Qea,"not"),Qea.forEach(t),zWr=r(Ule,` load the model weights. It only affects the
model\u2019s configuration. Use `),qre=n(Ule,"A",{href:!0});var Wea=s(qre);QWr=r(Wea,"from_pretrained()"),Wea.forEach(t),WWr=r(Ule," to load the model weights."),Ule.forEach(t),UWr=i($8),T(Uw.$$.fragment,$8),$8.forEach(t),HWr=i(Ei),Ur=n(Ei,"DIV",{class:!0});var Ci=s(Ur);T(vS.$$.fragment,Ci),JWr=i(Ci),A7e=n(Ci,"P",{});var Uea=s(A7e);YWr=r(Uea,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uea.forEach(t),KWr=i(Ci),In=n(Ci,"P",{});var k8=s(In);ZWr=r(k8,"The model class to instantiate is selected based on the "),L7e=n(k8,"CODE",{});var Hea=s(L7e);eUr=r(Hea,"model_type"),Hea.forEach(t),oUr=r(k8,` property of the config object (either
passed as an argument or loaded from `),y7e=n(k8,"CODE",{});var Jea=s(y7e);rUr=r(Jea,"pretrained_model_name_or_path"),Jea.forEach(t),tUr=r(k8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(k8,"CODE",{});var Yea=s(x7e);aUr=r(Yea,"pretrained_model_name_or_path"),Yea.forEach(t),nUr=r(k8,":"),k8.forEach(t),sUr=i(Ci),de=n(Ci,"UL",{});var he=s(de);Hw=n(he,"LI",{});var UWe=s(Hw);$7e=n(UWe,"STRONG",{});var Kea=s($7e);lUr=r(Kea,"albert"),Kea.forEach(t),iUr=r(UWe," \u2014 "),jre=n(UWe,"A",{href:!0});var Zea=s(jre);dUr=r(Zea,"TFAlbertForTokenClassification"),Zea.forEach(t),cUr=r(UWe," (ALBERT model)"),UWe.forEach(t),mUr=i(he),Jw=n(he,"LI",{});var HWe=s(Jw);k7e=n(HWe,"STRONG",{});var eoa=s(k7e);fUr=r(eoa,"bert"),eoa.forEach(t),gUr=r(HWe," \u2014 "),Dre=n(HWe,"A",{href:!0});var ooa=s(Dre);hUr=r(ooa,"TFBertForTokenClassification"),ooa.forEach(t),uUr=r(HWe," (BERT model)"),HWe.forEach(t),pUr=i(he),Yw=n(he,"LI",{});var JWe=s(Yw);S7e=n(JWe,"STRONG",{});var roa=s(S7e);_Ur=r(roa,"camembert"),roa.forEach(t),bUr=r(JWe," \u2014 "),Gre=n(JWe,"A",{href:!0});var toa=s(Gre);vUr=r(toa,"TFCamembertForTokenClassification"),toa.forEach(t),FUr=r(JWe," (CamemBERT model)"),JWe.forEach(t),TUr=i(he),Kw=n(he,"LI",{});var YWe=s(Kw);R7e=n(YWe,"STRONG",{});var aoa=s(R7e);MUr=r(aoa,"convbert"),aoa.forEach(t),EUr=r(YWe," \u2014 "),Ore=n(YWe,"A",{href:!0});var noa=s(Ore);CUr=r(noa,"TFConvBertForTokenClassification"),noa.forEach(t),wUr=r(YWe," (ConvBERT model)"),YWe.forEach(t),AUr=i(he),Zw=n(he,"LI",{});var KWe=s(Zw);P7e=n(KWe,"STRONG",{});var soa=s(P7e);LUr=r(soa,"deberta"),soa.forEach(t),yUr=r(KWe," \u2014 "),Vre=n(KWe,"A",{href:!0});var loa=s(Vre);xUr=r(loa,"TFDebertaForTokenClassification"),loa.forEach(t),$Ur=r(KWe," (DeBERTa model)"),KWe.forEach(t),kUr=i(he),eA=n(he,"LI",{});var ZWe=s(eA);B7e=n(ZWe,"STRONG",{});var ioa=s(B7e);SUr=r(ioa,"deberta-v2"),ioa.forEach(t),RUr=r(ZWe," \u2014 "),Xre=n(ZWe,"A",{href:!0});var doa=s(Xre);PUr=r(doa,"TFDebertaV2ForTokenClassification"),doa.forEach(t),BUr=r(ZWe," (DeBERTa-v2 model)"),ZWe.forEach(t),IUr=i(he),oA=n(he,"LI",{});var eUe=s(oA);I7e=n(eUe,"STRONG",{});var coa=s(I7e);NUr=r(coa,"distilbert"),coa.forEach(t),qUr=r(eUe," \u2014 "),zre=n(eUe,"A",{href:!0});var moa=s(zre);jUr=r(moa,"TFDistilBertForTokenClassification"),moa.forEach(t),DUr=r(eUe," (DistilBERT model)"),eUe.forEach(t),GUr=i(he),rA=n(he,"LI",{});var oUe=s(rA);N7e=n(oUe,"STRONG",{});var foa=s(N7e);OUr=r(foa,"electra"),foa.forEach(t),VUr=r(oUe," \u2014 "),Qre=n(oUe,"A",{href:!0});var goa=s(Qre);XUr=r(goa,"TFElectraForTokenClassification"),goa.forEach(t),zUr=r(oUe," (ELECTRA model)"),oUe.forEach(t),QUr=i(he),tA=n(he,"LI",{});var rUe=s(tA);q7e=n(rUe,"STRONG",{});var hoa=s(q7e);WUr=r(hoa,"flaubert"),hoa.forEach(t),UUr=r(rUe," \u2014 "),Wre=n(rUe,"A",{href:!0});var uoa=s(Wre);HUr=r(uoa,"TFFlaubertForTokenClassification"),uoa.forEach(t),JUr=r(rUe," (FlauBERT model)"),rUe.forEach(t),YUr=i(he),aA=n(he,"LI",{});var tUe=s(aA);j7e=n(tUe,"STRONG",{});var poa=s(j7e);KUr=r(poa,"funnel"),poa.forEach(t),ZUr=r(tUe," \u2014 "),Ure=n(tUe,"A",{href:!0});var _oa=s(Ure);eHr=r(_oa,"TFFunnelForTokenClassification"),_oa.forEach(t),oHr=r(tUe," (Funnel Transformer model)"),tUe.forEach(t),rHr=i(he),nA=n(he,"LI",{});var aUe=s(nA);D7e=n(aUe,"STRONG",{});var boa=s(D7e);tHr=r(boa,"layoutlm"),boa.forEach(t),aHr=r(aUe," \u2014 "),Hre=n(aUe,"A",{href:!0});var voa=s(Hre);nHr=r(voa,"TFLayoutLMForTokenClassification"),voa.forEach(t),sHr=r(aUe," (LayoutLM model)"),aUe.forEach(t),lHr=i(he),sA=n(he,"LI",{});var nUe=s(sA);G7e=n(nUe,"STRONG",{});var Foa=s(G7e);iHr=r(Foa,"layoutlmv3"),Foa.forEach(t),dHr=r(nUe," \u2014 "),Jre=n(nUe,"A",{href:!0});var Toa=s(Jre);cHr=r(Toa,"TFLayoutLMv3ForTokenClassification"),Toa.forEach(t),mHr=r(nUe," (LayoutLMv3 model)"),nUe.forEach(t),fHr=i(he),lA=n(he,"LI",{});var sUe=s(lA);O7e=n(sUe,"STRONG",{});var Moa=s(O7e);gHr=r(Moa,"longformer"),Moa.forEach(t),hHr=r(sUe," \u2014 "),Yre=n(sUe,"A",{href:!0});var Eoa=s(Yre);uHr=r(Eoa,"TFLongformerForTokenClassification"),Eoa.forEach(t),pHr=r(sUe," (Longformer model)"),sUe.forEach(t),_Hr=i(he),iA=n(he,"LI",{});var lUe=s(iA);V7e=n(lUe,"STRONG",{});var Coa=s(V7e);bHr=r(Coa,"mobilebert"),Coa.forEach(t),vHr=r(lUe," \u2014 "),Kre=n(lUe,"A",{href:!0});var woa=s(Kre);FHr=r(woa,"TFMobileBertForTokenClassification"),woa.forEach(t),THr=r(lUe," (MobileBERT model)"),lUe.forEach(t),MHr=i(he),dA=n(he,"LI",{});var iUe=s(dA);X7e=n(iUe,"STRONG",{});var Aoa=s(X7e);EHr=r(Aoa,"mpnet"),Aoa.forEach(t),CHr=r(iUe," \u2014 "),Zre=n(iUe,"A",{href:!0});var Loa=s(Zre);wHr=r(Loa,"TFMPNetForTokenClassification"),Loa.forEach(t),AHr=r(iUe," (MPNet model)"),iUe.forEach(t),LHr=i(he),cA=n(he,"LI",{});var dUe=s(cA);z7e=n(dUe,"STRONG",{});var yoa=s(z7e);yHr=r(yoa,"rembert"),yoa.forEach(t),xHr=r(dUe," \u2014 "),ete=n(dUe,"A",{href:!0});var xoa=s(ete);$Hr=r(xoa,"TFRemBertForTokenClassification"),xoa.forEach(t),kHr=r(dUe," (RemBERT model)"),dUe.forEach(t),SHr=i(he),mA=n(he,"LI",{});var cUe=s(mA);Q7e=n(cUe,"STRONG",{});var $oa=s(Q7e);RHr=r($oa,"roberta"),$oa.forEach(t),PHr=r(cUe," \u2014 "),ote=n(cUe,"A",{href:!0});var koa=s(ote);BHr=r(koa,"TFRobertaForTokenClassification"),koa.forEach(t),IHr=r(cUe," (RoBERTa model)"),cUe.forEach(t),NHr=i(he),fA=n(he,"LI",{});var mUe=s(fA);W7e=n(mUe,"STRONG",{});var Soa=s(W7e);qHr=r(Soa,"roformer"),Soa.forEach(t),jHr=r(mUe," \u2014 "),rte=n(mUe,"A",{href:!0});var Roa=s(rte);DHr=r(Roa,"TFRoFormerForTokenClassification"),Roa.forEach(t),GHr=r(mUe," (RoFormer model)"),mUe.forEach(t),OHr=i(he),gA=n(he,"LI",{});var fUe=s(gA);U7e=n(fUe,"STRONG",{});var Poa=s(U7e);VHr=r(Poa,"xlm"),Poa.forEach(t),XHr=r(fUe," \u2014 "),tte=n(fUe,"A",{href:!0});var Boa=s(tte);zHr=r(Boa,"TFXLMForTokenClassification"),Boa.forEach(t),QHr=r(fUe," (XLM model)"),fUe.forEach(t),WHr=i(he),hA=n(he,"LI",{});var gUe=s(hA);H7e=n(gUe,"STRONG",{});var Ioa=s(H7e);UHr=r(Ioa,"xlm-roberta"),Ioa.forEach(t),HHr=r(gUe," \u2014 "),ate=n(gUe,"A",{href:!0});var Noa=s(ate);JHr=r(Noa,"TFXLMRobertaForTokenClassification"),Noa.forEach(t),YHr=r(gUe," (XLM-RoBERTa model)"),gUe.forEach(t),KHr=i(he),uA=n(he,"LI",{});var hUe=s(uA);J7e=n(hUe,"STRONG",{});var qoa=s(J7e);ZHr=r(qoa,"xlnet"),qoa.forEach(t),eJr=r(hUe," \u2014 "),nte=n(hUe,"A",{href:!0});var joa=s(nte);oJr=r(joa,"TFXLNetForTokenClassification"),joa.forEach(t),rJr=r(hUe," (XLNet model)"),hUe.forEach(t),he.forEach(t),tJr=i(Ci),T(pA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),EKe=i(m),Am=n(m,"H2",{class:!0});var Deo=s(Am);_A=n(Deo,"A",{id:!0,class:!0,href:!0});var Doa=s(_A);Y7e=n(Doa,"SPAN",{});var Goa=s(Y7e);T(FS.$$.fragment,Goa),Goa.forEach(t),Doa.forEach(t),aJr=i(Deo),K7e=n(Deo,"SPAN",{});var Ooa=s(K7e);nJr=r(Ooa,"TFAutoModelForQuestionAnswering"),Ooa.forEach(t),Deo.forEach(t),CKe=i(m),vr=n(m,"DIV",{class:!0});var wi=s(vr);T(TS.$$.fragment,wi),sJr=i(wi),Lm=n(wi,"P",{});var Hle=s(Lm);lJr=r(Hle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ste=n(Hle,"A",{href:!0});var Voa=s(ste);iJr=r(Voa,"from_pretrained()"),Voa.forEach(t),dJr=r(Hle," class method or the "),lte=n(Hle,"A",{href:!0});var Xoa=s(lte);cJr=r(Xoa,"from_config()"),Xoa.forEach(t),mJr=r(Hle,` class
method.`),Hle.forEach(t),fJr=i(wi),MS=n(wi,"P",{});var Geo=s(MS);gJr=r(Geo,"This class cannot be instantiated directly using "),Z7e=n(Geo,"CODE",{});var zoa=s(Z7e);hJr=r(zoa,"__init__()"),zoa.forEach(t),uJr=r(Geo," (throws an error)."),Geo.forEach(t),pJr=i(wi),ra=n(wi,"DIV",{class:!0});var S8=s(ra);T(ES.$$.fragment,S8),_Jr=i(S8),eLe=n(S8,"P",{});var Qoa=s(eLe);bJr=r(Qoa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qoa.forEach(t),vJr=i(S8),ym=n(S8,"P",{});var Jle=s(ym);FJr=r(Jle,`Note:
Loading a model from its configuration file does `),oLe=n(Jle,"STRONG",{});var Woa=s(oLe);TJr=r(Woa,"not"),Woa.forEach(t),MJr=r(Jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),ite=n(Jle,"A",{href:!0});var Uoa=s(ite);EJr=r(Uoa,"from_pretrained()"),Uoa.forEach(t),CJr=r(Jle," to load the model weights."),Jle.forEach(t),wJr=i(S8),T(bA.$$.fragment,S8),S8.forEach(t),AJr=i(wi),Hr=n(wi,"DIV",{class:!0});var Ai=s(Hr);T(CS.$$.fragment,Ai),LJr=i(Ai),rLe=n(Ai,"P",{});var Hoa=s(rLe);yJr=r(Hoa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hoa.forEach(t),xJr=i(Ai),Nn=n(Ai,"P",{});var R8=s(Nn);$Jr=r(R8,"The model class to instantiate is selected based on the "),tLe=n(R8,"CODE",{});var Joa=s(tLe);kJr=r(Joa,"model_type"),Joa.forEach(t),SJr=r(R8,` property of the config object (either
passed as an argument or loaded from `),aLe=n(R8,"CODE",{});var Yoa=s(aLe);RJr=r(Yoa,"pretrained_model_name_or_path"),Yoa.forEach(t),PJr=r(R8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nLe=n(R8,"CODE",{});var Koa=s(nLe);BJr=r(Koa,"pretrained_model_name_or_path"),Koa.forEach(t),IJr=r(R8,":"),R8.forEach(t),NJr=i(Ai),ce=n(Ai,"UL",{});var ue=s(ce);vA=n(ue,"LI",{});var uUe=s(vA);sLe=n(uUe,"STRONG",{});var Zoa=s(sLe);qJr=r(Zoa,"albert"),Zoa.forEach(t),jJr=r(uUe," \u2014 "),dte=n(uUe,"A",{href:!0});var era=s(dte);DJr=r(era,"TFAlbertForQuestionAnswering"),era.forEach(t),GJr=r(uUe," (ALBERT model)"),uUe.forEach(t),OJr=i(ue),FA=n(ue,"LI",{});var pUe=s(FA);lLe=n(pUe,"STRONG",{});var ora=s(lLe);VJr=r(ora,"bert"),ora.forEach(t),XJr=r(pUe," \u2014 "),cte=n(pUe,"A",{href:!0});var rra=s(cte);zJr=r(rra,"TFBertForQuestionAnswering"),rra.forEach(t),QJr=r(pUe," (BERT model)"),pUe.forEach(t),WJr=i(ue),TA=n(ue,"LI",{});var _Ue=s(TA);iLe=n(_Ue,"STRONG",{});var tra=s(iLe);UJr=r(tra,"camembert"),tra.forEach(t),HJr=r(_Ue," \u2014 "),mte=n(_Ue,"A",{href:!0});var ara=s(mte);JJr=r(ara,"TFCamembertForQuestionAnswering"),ara.forEach(t),YJr=r(_Ue," (CamemBERT model)"),_Ue.forEach(t),KJr=i(ue),MA=n(ue,"LI",{});var bUe=s(MA);dLe=n(bUe,"STRONG",{});var nra=s(dLe);ZJr=r(nra,"convbert"),nra.forEach(t),eYr=r(bUe," \u2014 "),fte=n(bUe,"A",{href:!0});var sra=s(fte);oYr=r(sra,"TFConvBertForQuestionAnswering"),sra.forEach(t),rYr=r(bUe," (ConvBERT model)"),bUe.forEach(t),tYr=i(ue),EA=n(ue,"LI",{});var vUe=s(EA);cLe=n(vUe,"STRONG",{});var lra=s(cLe);aYr=r(lra,"deberta"),lra.forEach(t),nYr=r(vUe," \u2014 "),gte=n(vUe,"A",{href:!0});var ira=s(gte);sYr=r(ira,"TFDebertaForQuestionAnswering"),ira.forEach(t),lYr=r(vUe," (DeBERTa model)"),vUe.forEach(t),iYr=i(ue),CA=n(ue,"LI",{});var FUe=s(CA);mLe=n(FUe,"STRONG",{});var dra=s(mLe);dYr=r(dra,"deberta-v2"),dra.forEach(t),cYr=r(FUe," \u2014 "),hte=n(FUe,"A",{href:!0});var cra=s(hte);mYr=r(cra,"TFDebertaV2ForQuestionAnswering"),cra.forEach(t),fYr=r(FUe," (DeBERTa-v2 model)"),FUe.forEach(t),gYr=i(ue),wA=n(ue,"LI",{});var TUe=s(wA);fLe=n(TUe,"STRONG",{});var mra=s(fLe);hYr=r(mra,"distilbert"),mra.forEach(t),uYr=r(TUe," \u2014 "),ute=n(TUe,"A",{href:!0});var fra=s(ute);pYr=r(fra,"TFDistilBertForQuestionAnswering"),fra.forEach(t),_Yr=r(TUe," (DistilBERT model)"),TUe.forEach(t),bYr=i(ue),AA=n(ue,"LI",{});var MUe=s(AA);gLe=n(MUe,"STRONG",{});var gra=s(gLe);vYr=r(gra,"electra"),gra.forEach(t),FYr=r(MUe," \u2014 "),pte=n(MUe,"A",{href:!0});var hra=s(pte);TYr=r(hra,"TFElectraForQuestionAnswering"),hra.forEach(t),MYr=r(MUe," (ELECTRA model)"),MUe.forEach(t),EYr=i(ue),LA=n(ue,"LI",{});var EUe=s(LA);hLe=n(EUe,"STRONG",{});var ura=s(hLe);CYr=r(ura,"flaubert"),ura.forEach(t),wYr=r(EUe," \u2014 "),_te=n(EUe,"A",{href:!0});var pra=s(_te);AYr=r(pra,"TFFlaubertForQuestionAnsweringSimple"),pra.forEach(t),LYr=r(EUe," (FlauBERT model)"),EUe.forEach(t),yYr=i(ue),yA=n(ue,"LI",{});var CUe=s(yA);uLe=n(CUe,"STRONG",{});var _ra=s(uLe);xYr=r(_ra,"funnel"),_ra.forEach(t),$Yr=r(CUe," \u2014 "),bte=n(CUe,"A",{href:!0});var bra=s(bte);kYr=r(bra,"TFFunnelForQuestionAnswering"),bra.forEach(t),SYr=r(CUe," (Funnel Transformer model)"),CUe.forEach(t),RYr=i(ue),xA=n(ue,"LI",{});var wUe=s(xA);pLe=n(wUe,"STRONG",{});var vra=s(pLe);PYr=r(vra,"gptj"),vra.forEach(t),BYr=r(wUe," \u2014 "),vte=n(wUe,"A",{href:!0});var Fra=s(vte);IYr=r(Fra,"TFGPTJForQuestionAnswering"),Fra.forEach(t),NYr=r(wUe," (GPT-J model)"),wUe.forEach(t),qYr=i(ue),$A=n(ue,"LI",{});var AUe=s($A);_Le=n(AUe,"STRONG",{});var Tra=s(_Le);jYr=r(Tra,"layoutlmv3"),Tra.forEach(t),DYr=r(AUe," \u2014 "),Fte=n(AUe,"A",{href:!0});var Mra=s(Fte);GYr=r(Mra,"TFLayoutLMv3ForQuestionAnswering"),Mra.forEach(t),OYr=r(AUe," (LayoutLMv3 model)"),AUe.forEach(t),VYr=i(ue),kA=n(ue,"LI",{});var LUe=s(kA);bLe=n(LUe,"STRONG",{});var Era=s(bLe);XYr=r(Era,"longformer"),Era.forEach(t),zYr=r(LUe," \u2014 "),Tte=n(LUe,"A",{href:!0});var Cra=s(Tte);QYr=r(Cra,"TFLongformerForQuestionAnswering"),Cra.forEach(t),WYr=r(LUe," (Longformer model)"),LUe.forEach(t),UYr=i(ue),SA=n(ue,"LI",{});var yUe=s(SA);vLe=n(yUe,"STRONG",{});var wra=s(vLe);HYr=r(wra,"mobilebert"),wra.forEach(t),JYr=r(yUe," \u2014 "),Mte=n(yUe,"A",{href:!0});var Ara=s(Mte);YYr=r(Ara,"TFMobileBertForQuestionAnswering"),Ara.forEach(t),KYr=r(yUe," (MobileBERT model)"),yUe.forEach(t),ZYr=i(ue),RA=n(ue,"LI",{});var xUe=s(RA);FLe=n(xUe,"STRONG",{});var Lra=s(FLe);eKr=r(Lra,"mpnet"),Lra.forEach(t),oKr=r(xUe," \u2014 "),Ete=n(xUe,"A",{href:!0});var yra=s(Ete);rKr=r(yra,"TFMPNetForQuestionAnswering"),yra.forEach(t),tKr=r(xUe," (MPNet model)"),xUe.forEach(t),aKr=i(ue),PA=n(ue,"LI",{});var $Ue=s(PA);TLe=n($Ue,"STRONG",{});var xra=s(TLe);nKr=r(xra,"rembert"),xra.forEach(t),sKr=r($Ue," \u2014 "),Cte=n($Ue,"A",{href:!0});var $ra=s(Cte);lKr=r($ra,"TFRemBertForQuestionAnswering"),$ra.forEach(t),iKr=r($Ue," (RemBERT model)"),$Ue.forEach(t),dKr=i(ue),BA=n(ue,"LI",{});var kUe=s(BA);MLe=n(kUe,"STRONG",{});var kra=s(MLe);cKr=r(kra,"roberta"),kra.forEach(t),mKr=r(kUe," \u2014 "),wte=n(kUe,"A",{href:!0});var Sra=s(wte);fKr=r(Sra,"TFRobertaForQuestionAnswering"),Sra.forEach(t),gKr=r(kUe," (RoBERTa model)"),kUe.forEach(t),hKr=i(ue),IA=n(ue,"LI",{});var SUe=s(IA);ELe=n(SUe,"STRONG",{});var Rra=s(ELe);uKr=r(Rra,"roformer"),Rra.forEach(t),pKr=r(SUe," \u2014 "),Ate=n(SUe,"A",{href:!0});var Pra=s(Ate);_Kr=r(Pra,"TFRoFormerForQuestionAnswering"),Pra.forEach(t),bKr=r(SUe," (RoFormer model)"),SUe.forEach(t),vKr=i(ue),NA=n(ue,"LI",{});var RUe=s(NA);CLe=n(RUe,"STRONG",{});var Bra=s(CLe);FKr=r(Bra,"xlm"),Bra.forEach(t),TKr=r(RUe," \u2014 "),Lte=n(RUe,"A",{href:!0});var Ira=s(Lte);MKr=r(Ira,"TFXLMForQuestionAnsweringSimple"),Ira.forEach(t),EKr=r(RUe," (XLM model)"),RUe.forEach(t),CKr=i(ue),qA=n(ue,"LI",{});var PUe=s(qA);wLe=n(PUe,"STRONG",{});var Nra=s(wLe);wKr=r(Nra,"xlm-roberta"),Nra.forEach(t),AKr=r(PUe," \u2014 "),yte=n(PUe,"A",{href:!0});var qra=s(yte);LKr=r(qra,"TFXLMRobertaForQuestionAnswering"),qra.forEach(t),yKr=r(PUe," (XLM-RoBERTa model)"),PUe.forEach(t),xKr=i(ue),jA=n(ue,"LI",{});var BUe=s(jA);ALe=n(BUe,"STRONG",{});var jra=s(ALe);$Kr=r(jra,"xlnet"),jra.forEach(t),kKr=r(BUe," \u2014 "),xte=n(BUe,"A",{href:!0});var Dra=s(xte);SKr=r(Dra,"TFXLNetForQuestionAnsweringSimple"),Dra.forEach(t),RKr=r(BUe," (XLNet model)"),BUe.forEach(t),ue.forEach(t),PKr=i(Ai),T(DA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),wKe=i(m),xm=n(m,"H2",{class:!0});var Oeo=s(xm);GA=n(Oeo,"A",{id:!0,class:!0,href:!0});var Gra=s(GA);LLe=n(Gra,"SPAN",{});var Ora=s(LLe);T(wS.$$.fragment,Ora),Ora.forEach(t),Gra.forEach(t),BKr=i(Oeo),yLe=n(Oeo,"SPAN",{});var Vra=s(yLe);IKr=r(Vra,"TFAutoModelForVision2Seq"),Vra.forEach(t),Oeo.forEach(t),AKe=i(m),Fr=n(m,"DIV",{class:!0});var Li=s(Fr);T(AS.$$.fragment,Li),NKr=i(Li),$m=n(Li,"P",{});var Yle=s($m);qKr=r(Yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$te=n(Yle,"A",{href:!0});var Xra=s($te);jKr=r(Xra,"from_pretrained()"),Xra.forEach(t),DKr=r(Yle," class method or the "),kte=n(Yle,"A",{href:!0});var zra=s(kte);GKr=r(zra,"from_config()"),zra.forEach(t),OKr=r(Yle,` class
method.`),Yle.forEach(t),VKr=i(Li),LS=n(Li,"P",{});var Veo=s(LS);XKr=r(Veo,"This class cannot be instantiated directly using "),xLe=n(Veo,"CODE",{});var Qra=s(xLe);zKr=r(Qra,"__init__()"),Qra.forEach(t),QKr=r(Veo," (throws an error)."),Veo.forEach(t),WKr=i(Li),ta=n(Li,"DIV",{class:!0});var P8=s(ta);T(yS.$$.fragment,P8),UKr=i(P8),$Le=n(P8,"P",{});var Wra=s($Le);HKr=r(Wra,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wra.forEach(t),JKr=i(P8),km=n(P8,"P",{});var Kle=s(km);YKr=r(Kle,`Note:
Loading a model from its configuration file does `),kLe=n(Kle,"STRONG",{});var Ura=s(kLe);KKr=r(Ura,"not"),Ura.forEach(t),ZKr=r(Kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ste=n(Kle,"A",{href:!0});var Hra=s(Ste);eZr=r(Hra,"from_pretrained()"),Hra.forEach(t),oZr=r(Kle," to load the model weights."),Kle.forEach(t),rZr=i(P8),T(OA.$$.fragment,P8),P8.forEach(t),tZr=i(Li),Jr=n(Li,"DIV",{class:!0});var yi=s(Jr);T(xS.$$.fragment,yi),aZr=i(yi),SLe=n(yi,"P",{});var Jra=s(SLe);nZr=r(Jra,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Jra.forEach(t),sZr=i(yi),qn=n(yi,"P",{});var B8=s(qn);lZr=r(B8,"The model class to instantiate is selected based on the "),RLe=n(B8,"CODE",{});var Yra=s(RLe);iZr=r(Yra,"model_type"),Yra.forEach(t),dZr=r(B8,` property of the config object (either
passed as an argument or loaded from `),PLe=n(B8,"CODE",{});var Kra=s(PLe);cZr=r(Kra,"pretrained_model_name_or_path"),Kra.forEach(t),mZr=r(B8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BLe=n(B8,"CODE",{});var Zra=s(BLe);fZr=r(Zra,"pretrained_model_name_or_path"),Zra.forEach(t),gZr=r(B8,":"),B8.forEach(t),hZr=i(yi),ILe=n(yi,"UL",{});var eta=s(ILe);VA=n(eta,"LI",{});var IUe=s(VA);NLe=n(IUe,"STRONG",{});var ota=s(NLe);uZr=r(ota,"vision-encoder-decoder"),ota.forEach(t),pZr=r(IUe," \u2014 "),Rte=n(IUe,"A",{href:!0});var rta=s(Rte);_Zr=r(rta,"TFVisionEncoderDecoderModel"),rta.forEach(t),bZr=r(IUe," (Vision Encoder decoder model)"),IUe.forEach(t),eta.forEach(t),vZr=i(yi),T(XA.$$.fragment,yi),yi.forEach(t),Li.forEach(t),LKe=i(m),Sm=n(m,"H2",{class:!0});var Xeo=s(Sm);zA=n(Xeo,"A",{id:!0,class:!0,href:!0});var tta=s(zA);qLe=n(tta,"SPAN",{});var ata=s(qLe);T($S.$$.fragment,ata),ata.forEach(t),tta.forEach(t),FZr=i(Xeo),jLe=n(Xeo,"SPAN",{});var nta=s(jLe);TZr=r(nta,"TFAutoModelForSpeechSeq2Seq"),nta.forEach(t),Xeo.forEach(t),yKe=i(m),Tr=n(m,"DIV",{class:!0});var xi=s(Tr);T(kS.$$.fragment,xi),MZr=i(xi),Rm=n(xi,"P",{});var Zle=s(Rm);EZr=r(Zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Pte=n(Zle,"A",{href:!0});var sta=s(Pte);CZr=r(sta,"from_pretrained()"),sta.forEach(t),wZr=r(Zle," class method or the "),Bte=n(Zle,"A",{href:!0});var lta=s(Bte);AZr=r(lta,"from_config()"),lta.forEach(t),LZr=r(Zle,` class
method.`),Zle.forEach(t),yZr=i(xi),SS=n(xi,"P",{});var zeo=s(SS);xZr=r(zeo,"This class cannot be instantiated directly using "),DLe=n(zeo,"CODE",{});var ita=s(DLe);$Zr=r(ita,"__init__()"),ita.forEach(t),kZr=r(zeo," (throws an error)."),zeo.forEach(t),SZr=i(xi),aa=n(xi,"DIV",{class:!0});var I8=s(aa);T(RS.$$.fragment,I8),RZr=i(I8),GLe=n(I8,"P",{});var dta=s(GLe);PZr=r(dta,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dta.forEach(t),BZr=i(I8),Pm=n(I8,"P",{});var eie=s(Pm);IZr=r(eie,`Note:
Loading a model from its configuration file does `),OLe=n(eie,"STRONG",{});var cta=s(OLe);NZr=r(cta,"not"),cta.forEach(t),qZr=r(eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ite=n(eie,"A",{href:!0});var mta=s(Ite);jZr=r(mta,"from_pretrained()"),mta.forEach(t),DZr=r(eie," to load the model weights."),eie.forEach(t),GZr=i(I8),T(QA.$$.fragment,I8),I8.forEach(t),OZr=i(xi),Yr=n(xi,"DIV",{class:!0});var $i=s(Yr);T(PS.$$.fragment,$i),VZr=i($i),VLe=n($i,"P",{});var fta=s(VLe);XZr=r(fta,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fta.forEach(t),zZr=i($i),jn=n($i,"P",{});var N8=s(jn);QZr=r(N8,"The model class to instantiate is selected based on the "),XLe=n(N8,"CODE",{});var gta=s(XLe);WZr=r(gta,"model_type"),gta.forEach(t),UZr=r(N8,` property of the config object (either
passed as an argument or loaded from `),zLe=n(N8,"CODE",{});var hta=s(zLe);HZr=r(hta,"pretrained_model_name_or_path"),hta.forEach(t),JZr=r(N8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QLe=n(N8,"CODE",{});var uta=s(QLe);YZr=r(uta,"pretrained_model_name_or_path"),uta.forEach(t),KZr=r(N8,":"),N8.forEach(t),ZZr=i($i),WLe=n($i,"UL",{});var pta=s(WLe);WA=n(pta,"LI",{});var NUe=s(WA);ULe=n(NUe,"STRONG",{});var _ta=s(ULe);eet=r(_ta,"speech_to_text"),_ta.forEach(t),oet=r(NUe," \u2014 "),Nte=n(NUe,"A",{href:!0});var bta=s(Nte);ret=r(bta,"TFSpeech2TextForConditionalGeneration"),bta.forEach(t),tet=r(NUe," (Speech2Text model)"),NUe.forEach(t),pta.forEach(t),aet=i($i),T(UA.$$.fragment,$i),$i.forEach(t),xi.forEach(t),xKe=i(m),Bm=n(m,"H2",{class:!0});var Qeo=s(Bm);HA=n(Qeo,"A",{id:!0,class:!0,href:!0});var vta=s(HA);HLe=n(vta,"SPAN",{});var Fta=s(HLe);T(BS.$$.fragment,Fta),Fta.forEach(t),vta.forEach(t),net=i(Qeo),JLe=n(Qeo,"SPAN",{});var Tta=s(JLe);set=r(Tta,"FlaxAutoModel"),Tta.forEach(t),Qeo.forEach(t),$Ke=i(m),Mr=n(m,"DIV",{class:!0});var ki=s(Mr);T(IS.$$.fragment,ki),iet=i(ki),Im=n(ki,"P",{});var oie=s(Im);det=r(oie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qte=n(oie,"A",{href:!0});var Mta=s(qte);cet=r(Mta,"from_pretrained()"),Mta.forEach(t),met=r(oie," class method or the "),jte=n(oie,"A",{href:!0});var Eta=s(jte);fet=r(Eta,"from_config()"),Eta.forEach(t),get=r(oie,` class
method.`),oie.forEach(t),het=i(ki),NS=n(ki,"P",{});var Weo=s(NS);uet=r(Weo,"This class cannot be instantiated directly using "),YLe=n(Weo,"CODE",{});var Cta=s(YLe);pet=r(Cta,"__init__()"),Cta.forEach(t),_et=r(Weo," (throws an error)."),Weo.forEach(t),bet=i(ki),na=n(ki,"DIV",{class:!0});var q8=s(na);T(qS.$$.fragment,q8),vet=i(q8),KLe=n(q8,"P",{});var wta=s(KLe);Fet=r(wta,"Instantiates one of the base model classes of the library from a configuration."),wta.forEach(t),Tet=i(q8),Nm=n(q8,"P",{});var rie=s(Nm);Met=r(rie,`Note:
Loading a model from its configuration file does `),ZLe=n(rie,"STRONG",{});var Ata=s(ZLe);Eet=r(Ata,"not"),Ata.forEach(t),Cet=r(rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dte=n(rie,"A",{href:!0});var Lta=s(Dte);wet=r(Lta,"from_pretrained()"),Lta.forEach(t),Aet=r(rie," to load the model weights."),rie.forEach(t),Let=i(q8),T(JA.$$.fragment,q8),q8.forEach(t),yet=i(ki),Kr=n(ki,"DIV",{class:!0});var Si=s(Kr);T(jS.$$.fragment,Si),xet=i(Si),eye=n(Si,"P",{});var yta=s(eye);$et=r(yta,"Instantiate one of the base model classes of the library from a pretrained model."),yta.forEach(t),ket=i(Si),Dn=n(Si,"P",{});var j8=s(Dn);Set=r(j8,"The model class to instantiate is selected based on the "),oye=n(j8,"CODE",{});var xta=s(oye);Ret=r(xta,"model_type"),xta.forEach(t),Pet=r(j8,` property of the config object (either
passed as an argument or loaded from `),rye=n(j8,"CODE",{});var $ta=s(rye);Bet=r($ta,"pretrained_model_name_or_path"),$ta.forEach(t),Iet=r(j8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tye=n(j8,"CODE",{});var kta=s(tye);Net=r(kta,"pretrained_model_name_or_path"),kta.forEach(t),qet=r(j8,":"),j8.forEach(t),jet=i(Si),te=n(Si,"UL",{});var ne=s(te);YA=n(ne,"LI",{});var qUe=s(YA);aye=n(qUe,"STRONG",{});var Sta=s(aye);Det=r(Sta,"albert"),Sta.forEach(t),Get=r(qUe," \u2014 "),Gte=n(qUe,"A",{href:!0});var Rta=s(Gte);Oet=r(Rta,"FlaxAlbertModel"),Rta.forEach(t),Vet=r(qUe," (ALBERT model)"),qUe.forEach(t),Xet=i(ne),KA=n(ne,"LI",{});var jUe=s(KA);nye=n(jUe,"STRONG",{});var Pta=s(nye);zet=r(Pta,"bart"),Pta.forEach(t),Qet=r(jUe," \u2014 "),Ote=n(jUe,"A",{href:!0});var Bta=s(Ote);Wet=r(Bta,"FlaxBartModel"),Bta.forEach(t),Uet=r(jUe," (BART model)"),jUe.forEach(t),Het=i(ne),ZA=n(ne,"LI",{});var DUe=s(ZA);sye=n(DUe,"STRONG",{});var Ita=s(sye);Jet=r(Ita,"beit"),Ita.forEach(t),Yet=r(DUe," \u2014 "),Vte=n(DUe,"A",{href:!0});var Nta=s(Vte);Ket=r(Nta,"FlaxBeitModel"),Nta.forEach(t),Zet=r(DUe," (BEiT model)"),DUe.forEach(t),eot=i(ne),e6=n(ne,"LI",{});var GUe=s(e6);lye=n(GUe,"STRONG",{});var qta=s(lye);oot=r(qta,"bert"),qta.forEach(t),rot=r(GUe," \u2014 "),Xte=n(GUe,"A",{href:!0});var jta=s(Xte);tot=r(jta,"FlaxBertModel"),jta.forEach(t),aot=r(GUe," (BERT model)"),GUe.forEach(t),not=i(ne),o6=n(ne,"LI",{});var OUe=s(o6);iye=n(OUe,"STRONG",{});var Dta=s(iye);sot=r(Dta,"big_bird"),Dta.forEach(t),lot=r(OUe," \u2014 "),zte=n(OUe,"A",{href:!0});var Gta=s(zte);iot=r(Gta,"FlaxBigBirdModel"),Gta.forEach(t),dot=r(OUe," (BigBird model)"),OUe.forEach(t),cot=i(ne),r6=n(ne,"LI",{});var VUe=s(r6);dye=n(VUe,"STRONG",{});var Ota=s(dye);mot=r(Ota,"blenderbot"),Ota.forEach(t),fot=r(VUe," \u2014 "),Qte=n(VUe,"A",{href:!0});var Vta=s(Qte);got=r(Vta,"FlaxBlenderbotModel"),Vta.forEach(t),hot=r(VUe," (Blenderbot model)"),VUe.forEach(t),uot=i(ne),t6=n(ne,"LI",{});var XUe=s(t6);cye=n(XUe,"STRONG",{});var Xta=s(cye);pot=r(Xta,"blenderbot-small"),Xta.forEach(t),_ot=r(XUe," \u2014 "),Wte=n(XUe,"A",{href:!0});var zta=s(Wte);bot=r(zta,"FlaxBlenderbotSmallModel"),zta.forEach(t),vot=r(XUe," (BlenderbotSmall model)"),XUe.forEach(t),Fot=i(ne),a6=n(ne,"LI",{});var zUe=s(a6);mye=n(zUe,"STRONG",{});var Qta=s(mye);Tot=r(Qta,"clip"),Qta.forEach(t),Mot=r(zUe," \u2014 "),Ute=n(zUe,"A",{href:!0});var Wta=s(Ute);Eot=r(Wta,"FlaxCLIPModel"),Wta.forEach(t),Cot=r(zUe," (CLIP model)"),zUe.forEach(t),wot=i(ne),n6=n(ne,"LI",{});var QUe=s(n6);fye=n(QUe,"STRONG",{});var Uta=s(fye);Aot=r(Uta,"distilbert"),Uta.forEach(t),Lot=r(QUe," \u2014 "),Hte=n(QUe,"A",{href:!0});var Hta=s(Hte);yot=r(Hta,"FlaxDistilBertModel"),Hta.forEach(t),xot=r(QUe," (DistilBERT model)"),QUe.forEach(t),$ot=i(ne),s6=n(ne,"LI",{});var WUe=s(s6);gye=n(WUe,"STRONG",{});var Jta=s(gye);kot=r(Jta,"electra"),Jta.forEach(t),Sot=r(WUe," \u2014 "),Jte=n(WUe,"A",{href:!0});var Yta=s(Jte);Rot=r(Yta,"FlaxElectraModel"),Yta.forEach(t),Pot=r(WUe," (ELECTRA model)"),WUe.forEach(t),Bot=i(ne),l6=n(ne,"LI",{});var UUe=s(l6);hye=n(UUe,"STRONG",{});var Kta=s(hye);Iot=r(Kta,"gpt2"),Kta.forEach(t),Not=r(UUe," \u2014 "),Yte=n(UUe,"A",{href:!0});var Zta=s(Yte);qot=r(Zta,"FlaxGPT2Model"),Zta.forEach(t),jot=r(UUe," (OpenAI GPT-2 model)"),UUe.forEach(t),Dot=i(ne),i6=n(ne,"LI",{});var HUe=s(i6);uye=n(HUe,"STRONG",{});var eaa=s(uye);Got=r(eaa,"gpt_neo"),eaa.forEach(t),Oot=r(HUe," \u2014 "),Kte=n(HUe,"A",{href:!0});var oaa=s(Kte);Vot=r(oaa,"FlaxGPTNeoModel"),oaa.forEach(t),Xot=r(HUe," (GPT Neo model)"),HUe.forEach(t),zot=i(ne),d6=n(ne,"LI",{});var JUe=s(d6);pye=n(JUe,"STRONG",{});var raa=s(pye);Qot=r(raa,"gptj"),raa.forEach(t),Wot=r(JUe," \u2014 "),Zte=n(JUe,"A",{href:!0});var taa=s(Zte);Uot=r(taa,"FlaxGPTJModel"),taa.forEach(t),Hot=r(JUe," (GPT-J model)"),JUe.forEach(t),Jot=i(ne),c6=n(ne,"LI",{});var YUe=s(c6);_ye=n(YUe,"STRONG",{});var aaa=s(_ye);Yot=r(aaa,"longt5"),aaa.forEach(t),Kot=r(YUe," \u2014 "),eae=n(YUe,"A",{href:!0});var naa=s(eae);Zot=r(naa,"FlaxLongT5Model"),naa.forEach(t),ert=r(YUe," (LongT5 model)"),YUe.forEach(t),ort=i(ne),m6=n(ne,"LI",{});var KUe=s(m6);bye=n(KUe,"STRONG",{});var saa=s(bye);rrt=r(saa,"marian"),saa.forEach(t),trt=r(KUe," \u2014 "),oae=n(KUe,"A",{href:!0});var laa=s(oae);art=r(laa,"FlaxMarianModel"),laa.forEach(t),nrt=r(KUe," (Marian model)"),KUe.forEach(t),srt=i(ne),f6=n(ne,"LI",{});var ZUe=s(f6);vye=n(ZUe,"STRONG",{});var iaa=s(vye);lrt=r(iaa,"mbart"),iaa.forEach(t),irt=r(ZUe," \u2014 "),rae=n(ZUe,"A",{href:!0});var daa=s(rae);drt=r(daa,"FlaxMBartModel"),daa.forEach(t),crt=r(ZUe," (mBART model)"),ZUe.forEach(t),mrt=i(ne),g6=n(ne,"LI",{});var eHe=s(g6);Fye=n(eHe,"STRONG",{});var caa=s(Fye);frt=r(caa,"mt5"),caa.forEach(t),grt=r(eHe," \u2014 "),tae=n(eHe,"A",{href:!0});var maa=s(tae);hrt=r(maa,"FlaxMT5Model"),maa.forEach(t),urt=r(eHe," (MT5 model)"),eHe.forEach(t),prt=i(ne),h6=n(ne,"LI",{});var oHe=s(h6);Tye=n(oHe,"STRONG",{});var faa=s(Tye);_rt=r(faa,"opt"),faa.forEach(t),brt=r(oHe," \u2014 "),aae=n(oHe,"A",{href:!0});var gaa=s(aae);vrt=r(gaa,"FlaxOPTModel"),gaa.forEach(t),Frt=r(oHe," (OPT model)"),oHe.forEach(t),Trt=i(ne),u6=n(ne,"LI",{});var rHe=s(u6);Mye=n(rHe,"STRONG",{});var haa=s(Mye);Mrt=r(haa,"pegasus"),haa.forEach(t),Ert=r(rHe," \u2014 "),nae=n(rHe,"A",{href:!0});var uaa=s(nae);Crt=r(uaa,"FlaxPegasusModel"),uaa.forEach(t),wrt=r(rHe," (Pegasus model)"),rHe.forEach(t),Art=i(ne),p6=n(ne,"LI",{});var tHe=s(p6);Eye=n(tHe,"STRONG",{});var paa=s(Eye);Lrt=r(paa,"roberta"),paa.forEach(t),yrt=r(tHe," \u2014 "),sae=n(tHe,"A",{href:!0});var _aa=s(sae);xrt=r(_aa,"FlaxRobertaModel"),_aa.forEach(t),$rt=r(tHe," (RoBERTa model)"),tHe.forEach(t),krt=i(ne),_6=n(ne,"LI",{});var aHe=s(_6);Cye=n(aHe,"STRONG",{});var baa=s(Cye);Srt=r(baa,"roformer"),baa.forEach(t),Rrt=r(aHe," \u2014 "),lae=n(aHe,"A",{href:!0});var vaa=s(lae);Prt=r(vaa,"FlaxRoFormerModel"),vaa.forEach(t),Brt=r(aHe," (RoFormer model)"),aHe.forEach(t),Irt=i(ne),b6=n(ne,"LI",{});var nHe=s(b6);wye=n(nHe,"STRONG",{});var Faa=s(wye);Nrt=r(Faa,"t5"),Faa.forEach(t),qrt=r(nHe," \u2014 "),iae=n(nHe,"A",{href:!0});var Taa=s(iae);jrt=r(Taa,"FlaxT5Model"),Taa.forEach(t),Drt=r(nHe," (T5 model)"),nHe.forEach(t),Grt=i(ne),v6=n(ne,"LI",{});var sHe=s(v6);Aye=n(sHe,"STRONG",{});var Maa=s(Aye);Ort=r(Maa,"vision-text-dual-encoder"),Maa.forEach(t),Vrt=r(sHe," \u2014 "),dae=n(sHe,"A",{href:!0});var Eaa=s(dae);Xrt=r(Eaa,"FlaxVisionTextDualEncoderModel"),Eaa.forEach(t),zrt=r(sHe," (VisionTextDualEncoder model)"),sHe.forEach(t),Qrt=i(ne),F6=n(ne,"LI",{});var lHe=s(F6);Lye=n(lHe,"STRONG",{});var Caa=s(Lye);Wrt=r(Caa,"vit"),Caa.forEach(t),Urt=r(lHe," \u2014 "),cae=n(lHe,"A",{href:!0});var waa=s(cae);Hrt=r(waa,"FlaxViTModel"),waa.forEach(t),Jrt=r(lHe," (ViT model)"),lHe.forEach(t),Yrt=i(ne),T6=n(ne,"LI",{});var iHe=s(T6);yye=n(iHe,"STRONG",{});var Aaa=s(yye);Krt=r(Aaa,"wav2vec2"),Aaa.forEach(t),Zrt=r(iHe," \u2014 "),mae=n(iHe,"A",{href:!0});var Laa=s(mae);ett=r(Laa,"FlaxWav2Vec2Model"),Laa.forEach(t),ott=r(iHe," (Wav2Vec2 model)"),iHe.forEach(t),rtt=i(ne),M6=n(ne,"LI",{});var dHe=s(M6);xye=n(dHe,"STRONG",{});var yaa=s(xye);ttt=r(yaa,"xglm"),yaa.forEach(t),att=r(dHe," \u2014 "),fae=n(dHe,"A",{href:!0});var xaa=s(fae);ntt=r(xaa,"FlaxXGLMModel"),xaa.forEach(t),stt=r(dHe," (XGLM model)"),dHe.forEach(t),ltt=i(ne),E6=n(ne,"LI",{});var cHe=s(E6);$ye=n(cHe,"STRONG",{});var $aa=s($ye);itt=r($aa,"xlm-roberta"),$aa.forEach(t),dtt=r(cHe," \u2014 "),gae=n(cHe,"A",{href:!0});var kaa=s(gae);ctt=r(kaa,"FlaxXLMRobertaModel"),kaa.forEach(t),mtt=r(cHe," (XLM-RoBERTa model)"),cHe.forEach(t),ne.forEach(t),ftt=i(Si),T(C6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),kKe=i(m),qm=n(m,"H2",{class:!0});var Ueo=s(qm);w6=n(Ueo,"A",{id:!0,class:!0,href:!0});var Saa=s(w6);kye=n(Saa,"SPAN",{});var Raa=s(kye);T(DS.$$.fragment,Raa),Raa.forEach(t),Saa.forEach(t),gtt=i(Ueo),Sye=n(Ueo,"SPAN",{});var Paa=s(Sye);htt=r(Paa,"FlaxAutoModelForCausalLM"),Paa.forEach(t),Ueo.forEach(t),SKe=i(m),Er=n(m,"DIV",{class:!0});var Ri=s(Er);T(GS.$$.fragment,Ri),utt=i(Ri),jm=n(Ri,"P",{});var tie=s(jm);ptt=r(tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hae=n(tie,"A",{href:!0});var Baa=s(hae);_tt=r(Baa,"from_pretrained()"),Baa.forEach(t),btt=r(tie," class method or the "),uae=n(tie,"A",{href:!0});var Iaa=s(uae);vtt=r(Iaa,"from_config()"),Iaa.forEach(t),Ftt=r(tie,` class
method.`),tie.forEach(t),Ttt=i(Ri),OS=n(Ri,"P",{});var Heo=s(OS);Mtt=r(Heo,"This class cannot be instantiated directly using "),Rye=n(Heo,"CODE",{});var Naa=s(Rye);Ett=r(Naa,"__init__()"),Naa.forEach(t),Ctt=r(Heo," (throws an error)."),Heo.forEach(t),wtt=i(Ri),sa=n(Ri,"DIV",{class:!0});var D8=s(sa);T(VS.$$.fragment,D8),Att=i(D8),Pye=n(D8,"P",{});var qaa=s(Pye);Ltt=r(qaa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qaa.forEach(t),ytt=i(D8),Dm=n(D8,"P",{});var aie=s(Dm);xtt=r(aie,`Note:
Loading a model from its configuration file does `),Bye=n(aie,"STRONG",{});var jaa=s(Bye);$tt=r(jaa,"not"),jaa.forEach(t),ktt=r(aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pae=n(aie,"A",{href:!0});var Daa=s(pae);Stt=r(Daa,"from_pretrained()"),Daa.forEach(t),Rtt=r(aie," to load the model weights."),aie.forEach(t),Ptt=i(D8),T(A6.$$.fragment,D8),D8.forEach(t),Btt=i(Ri),Zr=n(Ri,"DIV",{class:!0});var Pi=s(Zr);T(XS.$$.fragment,Pi),Itt=i(Pi),Iye=n(Pi,"P",{});var Gaa=s(Iye);Ntt=r(Gaa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gaa.forEach(t),qtt=i(Pi),Gn=n(Pi,"P",{});var G8=s(Gn);jtt=r(G8,"The model class to instantiate is selected based on the "),Nye=n(G8,"CODE",{});var Oaa=s(Nye);Dtt=r(Oaa,"model_type"),Oaa.forEach(t),Gtt=r(G8,` property of the config object (either
passed as an argument or loaded from `),qye=n(G8,"CODE",{});var Vaa=s(qye);Ott=r(Vaa,"pretrained_model_name_or_path"),Vaa.forEach(t),Vtt=r(G8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jye=n(G8,"CODE",{});var Xaa=s(jye);Xtt=r(Xaa,"pretrained_model_name_or_path"),Xaa.forEach(t),ztt=r(G8,":"),G8.forEach(t),Qtt=i(Pi),xe=n(Pi,"UL",{});var qe=s(xe);L6=n(qe,"LI",{});var mHe=s(L6);Dye=n(mHe,"STRONG",{});var zaa=s(Dye);Wtt=r(zaa,"bart"),zaa.forEach(t),Utt=r(mHe," \u2014 "),_ae=n(mHe,"A",{href:!0});var Qaa=s(_ae);Htt=r(Qaa,"FlaxBartForCausalLM"),Qaa.forEach(t),Jtt=r(mHe," (BART model)"),mHe.forEach(t),Ytt=i(qe),y6=n(qe,"LI",{});var fHe=s(y6);Gye=n(fHe,"STRONG",{});var Waa=s(Gye);Ktt=r(Waa,"bert"),Waa.forEach(t),Ztt=r(fHe," \u2014 "),bae=n(fHe,"A",{href:!0});var Uaa=s(bae);eat=r(Uaa,"FlaxBertForCausalLM"),Uaa.forEach(t),oat=r(fHe," (BERT model)"),fHe.forEach(t),rat=i(qe),x6=n(qe,"LI",{});var gHe=s(x6);Oye=n(gHe,"STRONG",{});var Haa=s(Oye);tat=r(Haa,"big_bird"),Haa.forEach(t),aat=r(gHe," \u2014 "),vae=n(gHe,"A",{href:!0});var Jaa=s(vae);nat=r(Jaa,"FlaxBigBirdForCausalLM"),Jaa.forEach(t),sat=r(gHe," (BigBird model)"),gHe.forEach(t),lat=i(qe),$6=n(qe,"LI",{});var hHe=s($6);Vye=n(hHe,"STRONG",{});var Yaa=s(Vye);iat=r(Yaa,"electra"),Yaa.forEach(t),dat=r(hHe," \u2014 "),Fae=n(hHe,"A",{href:!0});var Kaa=s(Fae);cat=r(Kaa,"FlaxElectraForCausalLM"),Kaa.forEach(t),mat=r(hHe," (ELECTRA model)"),hHe.forEach(t),fat=i(qe),k6=n(qe,"LI",{});var uHe=s(k6);Xye=n(uHe,"STRONG",{});var Zaa=s(Xye);gat=r(Zaa,"gpt2"),Zaa.forEach(t),hat=r(uHe," \u2014 "),Tae=n(uHe,"A",{href:!0});var ena=s(Tae);uat=r(ena,"FlaxGPT2LMHeadModel"),ena.forEach(t),pat=r(uHe," (OpenAI GPT-2 model)"),uHe.forEach(t),_at=i(qe),S6=n(qe,"LI",{});var pHe=s(S6);zye=n(pHe,"STRONG",{});var ona=s(zye);bat=r(ona,"gpt_neo"),ona.forEach(t),vat=r(pHe," \u2014 "),Mae=n(pHe,"A",{href:!0});var rna=s(Mae);Fat=r(rna,"FlaxGPTNeoForCausalLM"),rna.forEach(t),Tat=r(pHe," (GPT Neo model)"),pHe.forEach(t),Mat=i(qe),R6=n(qe,"LI",{});var _He=s(R6);Qye=n(_He,"STRONG",{});var tna=s(Qye);Eat=r(tna,"gptj"),tna.forEach(t),Cat=r(_He," \u2014 "),Eae=n(_He,"A",{href:!0});var ana=s(Eae);wat=r(ana,"FlaxGPTJForCausalLM"),ana.forEach(t),Aat=r(_He," (GPT-J model)"),_He.forEach(t),Lat=i(qe),P6=n(qe,"LI",{});var bHe=s(P6);Wye=n(bHe,"STRONG",{});var nna=s(Wye);yat=r(nna,"opt"),nna.forEach(t),xat=r(bHe," \u2014 "),Cae=n(bHe,"A",{href:!0});var sna=s(Cae);$at=r(sna,"FlaxOPTForCausalLM"),sna.forEach(t),kat=r(bHe," (OPT model)"),bHe.forEach(t),Sat=i(qe),B6=n(qe,"LI",{});var vHe=s(B6);Uye=n(vHe,"STRONG",{});var lna=s(Uye);Rat=r(lna,"roberta"),lna.forEach(t),Pat=r(vHe," \u2014 "),wae=n(vHe,"A",{href:!0});var ina=s(wae);Bat=r(ina,"FlaxRobertaForCausalLM"),ina.forEach(t),Iat=r(vHe," (RoBERTa model)"),vHe.forEach(t),Nat=i(qe),I6=n(qe,"LI",{});var FHe=s(I6);Hye=n(FHe,"STRONG",{});var dna=s(Hye);qat=r(dna,"xglm"),dna.forEach(t),jat=r(FHe," \u2014 "),Aae=n(FHe,"A",{href:!0});var cna=s(Aae);Dat=r(cna,"FlaxXGLMForCausalLM"),cna.forEach(t),Gat=r(FHe," (XGLM model)"),FHe.forEach(t),qe.forEach(t),Oat=i(Pi),T(N6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),RKe=i(m),Gm=n(m,"H2",{class:!0});var Jeo=s(Gm);q6=n(Jeo,"A",{id:!0,class:!0,href:!0});var mna=s(q6);Jye=n(mna,"SPAN",{});var fna=s(Jye);T(zS.$$.fragment,fna),fna.forEach(t),mna.forEach(t),Vat=i(Jeo),Yye=n(Jeo,"SPAN",{});var gna=s(Yye);Xat=r(gna,"FlaxAutoModelForPreTraining"),gna.forEach(t),Jeo.forEach(t),PKe=i(m),Cr=n(m,"DIV",{class:!0});var Bi=s(Cr);T(QS.$$.fragment,Bi),zat=i(Bi),Om=n(Bi,"P",{});var nie=s(Om);Qat=r(nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lae=n(nie,"A",{href:!0});var hna=s(Lae);Wat=r(hna,"from_pretrained()"),hna.forEach(t),Uat=r(nie," class method or the "),yae=n(nie,"A",{href:!0});var una=s(yae);Hat=r(una,"from_config()"),una.forEach(t),Jat=r(nie,` class
method.`),nie.forEach(t),Yat=i(Bi),WS=n(Bi,"P",{});var Yeo=s(WS);Kat=r(Yeo,"This class cannot be instantiated directly using "),Kye=n(Yeo,"CODE",{});var pna=s(Kye);Zat=r(pna,"__init__()"),pna.forEach(t),ent=r(Yeo," (throws an error)."),Yeo.forEach(t),ont=i(Bi),la=n(Bi,"DIV",{class:!0});var O8=s(la);T(US.$$.fragment,O8),rnt=i(O8),Zye=n(O8,"P",{});var _na=s(Zye);tnt=r(_na,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_na.forEach(t),ant=i(O8),Vm=n(O8,"P",{});var sie=s(Vm);nnt=r(sie,`Note:
Loading a model from its configuration file does `),e8e=n(sie,"STRONG",{});var bna=s(e8e);snt=r(bna,"not"),bna.forEach(t),lnt=r(sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=n(sie,"A",{href:!0});var vna=s(xae);int=r(vna,"from_pretrained()"),vna.forEach(t),dnt=r(sie," to load the model weights."),sie.forEach(t),cnt=i(O8),T(j6.$$.fragment,O8),O8.forEach(t),mnt=i(Bi),et=n(Bi,"DIV",{class:!0});var Ii=s(et);T(HS.$$.fragment,Ii),fnt=i(Ii),o8e=n(Ii,"P",{});var Fna=s(o8e);gnt=r(Fna,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fna.forEach(t),hnt=i(Ii),On=n(Ii,"P",{});var V8=s(On);unt=r(V8,"The model class to instantiate is selected based on the "),r8e=n(V8,"CODE",{});var Tna=s(r8e);pnt=r(Tna,"model_type"),Tna.forEach(t),_nt=r(V8,` property of the config object (either
passed as an argument or loaded from `),t8e=n(V8,"CODE",{});var Mna=s(t8e);bnt=r(Mna,"pretrained_model_name_or_path"),Mna.forEach(t),vnt=r(V8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a8e=n(V8,"CODE",{});var Ena=s(a8e);Fnt=r(Ena,"pretrained_model_name_or_path"),Ena.forEach(t),Tnt=r(V8,":"),V8.forEach(t),Mnt=i(Ii),Ee=n(Ii,"UL",{});var we=s(Ee);D6=n(we,"LI",{});var THe=s(D6);n8e=n(THe,"STRONG",{});var Cna=s(n8e);Ent=r(Cna,"albert"),Cna.forEach(t),Cnt=r(THe," \u2014 "),$ae=n(THe,"A",{href:!0});var wna=s($ae);wnt=r(wna,"FlaxAlbertForPreTraining"),wna.forEach(t),Ant=r(THe," (ALBERT model)"),THe.forEach(t),Lnt=i(we),G6=n(we,"LI",{});var MHe=s(G6);s8e=n(MHe,"STRONG",{});var Ana=s(s8e);ynt=r(Ana,"bart"),Ana.forEach(t),xnt=r(MHe," \u2014 "),kae=n(MHe,"A",{href:!0});var Lna=s(kae);$nt=r(Lna,"FlaxBartForConditionalGeneration"),Lna.forEach(t),knt=r(MHe," (BART model)"),MHe.forEach(t),Snt=i(we),O6=n(we,"LI",{});var EHe=s(O6);l8e=n(EHe,"STRONG",{});var yna=s(l8e);Rnt=r(yna,"bert"),yna.forEach(t),Pnt=r(EHe," \u2014 "),Sae=n(EHe,"A",{href:!0});var xna=s(Sae);Bnt=r(xna,"FlaxBertForPreTraining"),xna.forEach(t),Int=r(EHe," (BERT model)"),EHe.forEach(t),Nnt=i(we),V6=n(we,"LI",{});var CHe=s(V6);i8e=n(CHe,"STRONG",{});var $na=s(i8e);qnt=r($na,"big_bird"),$na.forEach(t),jnt=r(CHe," \u2014 "),Rae=n(CHe,"A",{href:!0});var kna=s(Rae);Dnt=r(kna,"FlaxBigBirdForPreTraining"),kna.forEach(t),Gnt=r(CHe," (BigBird model)"),CHe.forEach(t),Ont=i(we),X6=n(we,"LI",{});var wHe=s(X6);d8e=n(wHe,"STRONG",{});var Sna=s(d8e);Vnt=r(Sna,"electra"),Sna.forEach(t),Xnt=r(wHe," \u2014 "),Pae=n(wHe,"A",{href:!0});var Rna=s(Pae);znt=r(Rna,"FlaxElectraForPreTraining"),Rna.forEach(t),Qnt=r(wHe," (ELECTRA model)"),wHe.forEach(t),Wnt=i(we),z6=n(we,"LI",{});var AHe=s(z6);c8e=n(AHe,"STRONG",{});var Pna=s(c8e);Unt=r(Pna,"longt5"),Pna.forEach(t),Hnt=r(AHe," \u2014 "),Bae=n(AHe,"A",{href:!0});var Bna=s(Bae);Jnt=r(Bna,"FlaxLongT5ForConditionalGeneration"),Bna.forEach(t),Ynt=r(AHe," (LongT5 model)"),AHe.forEach(t),Knt=i(we),Q6=n(we,"LI",{});var LHe=s(Q6);m8e=n(LHe,"STRONG",{});var Ina=s(m8e);Znt=r(Ina,"mbart"),Ina.forEach(t),est=r(LHe," \u2014 "),Iae=n(LHe,"A",{href:!0});var Nna=s(Iae);ost=r(Nna,"FlaxMBartForConditionalGeneration"),Nna.forEach(t),rst=r(LHe," (mBART model)"),LHe.forEach(t),tst=i(we),W6=n(we,"LI",{});var yHe=s(W6);f8e=n(yHe,"STRONG",{});var qna=s(f8e);ast=r(qna,"mt5"),qna.forEach(t),nst=r(yHe," \u2014 "),Nae=n(yHe,"A",{href:!0});var jna=s(Nae);sst=r(jna,"FlaxMT5ForConditionalGeneration"),jna.forEach(t),lst=r(yHe," (MT5 model)"),yHe.forEach(t),ist=i(we),U6=n(we,"LI",{});var xHe=s(U6);g8e=n(xHe,"STRONG",{});var Dna=s(g8e);dst=r(Dna,"roberta"),Dna.forEach(t),cst=r(xHe," \u2014 "),qae=n(xHe,"A",{href:!0});var Gna=s(qae);mst=r(Gna,"FlaxRobertaForMaskedLM"),Gna.forEach(t),fst=r(xHe," (RoBERTa model)"),xHe.forEach(t),gst=i(we),H6=n(we,"LI",{});var $He=s(H6);h8e=n($He,"STRONG",{});var Ona=s(h8e);hst=r(Ona,"roformer"),Ona.forEach(t),ust=r($He," \u2014 "),jae=n($He,"A",{href:!0});var Vna=s(jae);pst=r(Vna,"FlaxRoFormerForMaskedLM"),Vna.forEach(t),_st=r($He," (RoFormer model)"),$He.forEach(t),bst=i(we),J6=n(we,"LI",{});var kHe=s(J6);u8e=n(kHe,"STRONG",{});var Xna=s(u8e);vst=r(Xna,"t5"),Xna.forEach(t),Fst=r(kHe," \u2014 "),Dae=n(kHe,"A",{href:!0});var zna=s(Dae);Tst=r(zna,"FlaxT5ForConditionalGeneration"),zna.forEach(t),Mst=r(kHe," (T5 model)"),kHe.forEach(t),Est=i(we),Y6=n(we,"LI",{});var SHe=s(Y6);p8e=n(SHe,"STRONG",{});var Qna=s(p8e);Cst=r(Qna,"wav2vec2"),Qna.forEach(t),wst=r(SHe," \u2014 "),Gae=n(SHe,"A",{href:!0});var Wna=s(Gae);Ast=r(Wna,"FlaxWav2Vec2ForPreTraining"),Wna.forEach(t),Lst=r(SHe," (Wav2Vec2 model)"),SHe.forEach(t),yst=i(we),K6=n(we,"LI",{});var RHe=s(K6);_8e=n(RHe,"STRONG",{});var Una=s(_8e);xst=r(Una,"xlm-roberta"),Una.forEach(t),$st=r(RHe," \u2014 "),Oae=n(RHe,"A",{href:!0});var Hna=s(Oae);kst=r(Hna,"FlaxXLMRobertaForMaskedLM"),Hna.forEach(t),Sst=r(RHe," (XLM-RoBERTa model)"),RHe.forEach(t),we.forEach(t),Rst=i(Ii),T(Z6.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),BKe=i(m),Xm=n(m,"H2",{class:!0});var Keo=s(Xm);e7=n(Keo,"A",{id:!0,class:!0,href:!0});var Jna=s(e7);b8e=n(Jna,"SPAN",{});var Yna=s(b8e);T(JS.$$.fragment,Yna),Yna.forEach(t),Jna.forEach(t),Pst=i(Keo),v8e=n(Keo,"SPAN",{});var Kna=s(v8e);Bst=r(Kna,"FlaxAutoModelForMaskedLM"),Kna.forEach(t),Keo.forEach(t),IKe=i(m),wr=n(m,"DIV",{class:!0});var Ni=s(wr);T(YS.$$.fragment,Ni),Ist=i(Ni),zm=n(Ni,"P",{});var lie=s(zm);Nst=r(lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Vae=n(lie,"A",{href:!0});var Zna=s(Vae);qst=r(Zna,"from_pretrained()"),Zna.forEach(t),jst=r(lie," class method or the "),Xae=n(lie,"A",{href:!0});var esa=s(Xae);Dst=r(esa,"from_config()"),esa.forEach(t),Gst=r(lie,` class
method.`),lie.forEach(t),Ost=i(Ni),KS=n(Ni,"P",{});var Zeo=s(KS);Vst=r(Zeo,"This class cannot be instantiated directly using "),F8e=n(Zeo,"CODE",{});var osa=s(F8e);Xst=r(osa,"__init__()"),osa.forEach(t),zst=r(Zeo," (throws an error)."),Zeo.forEach(t),Qst=i(Ni),ia=n(Ni,"DIV",{class:!0});var X8=s(ia);T(ZS.$$.fragment,X8),Wst=i(X8),T8e=n(X8,"P",{});var rsa=s(T8e);Ust=r(rsa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rsa.forEach(t),Hst=i(X8),Qm=n(X8,"P",{});var iie=s(Qm);Jst=r(iie,`Note:
Loading a model from its configuration file does `),M8e=n(iie,"STRONG",{});var tsa=s(M8e);Yst=r(tsa,"not"),tsa.forEach(t),Kst=r(iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),zae=n(iie,"A",{href:!0});var asa=s(zae);Zst=r(asa,"from_pretrained()"),asa.forEach(t),elt=r(iie," to load the model weights."),iie.forEach(t),olt=i(X8),T(o7.$$.fragment,X8),X8.forEach(t),rlt=i(Ni),ot=n(Ni,"DIV",{class:!0});var qi=s(ot);T(eR.$$.fragment,qi),tlt=i(qi),E8e=n(qi,"P",{});var nsa=s(E8e);alt=r(nsa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nsa.forEach(t),nlt=i(qi),Vn=n(qi,"P",{});var z8=s(Vn);slt=r(z8,"The model class to instantiate is selected based on the "),C8e=n(z8,"CODE",{});var ssa=s(C8e);llt=r(ssa,"model_type"),ssa.forEach(t),ilt=r(z8,` property of the config object (either
passed as an argument or loaded from `),w8e=n(z8,"CODE",{});var lsa=s(w8e);dlt=r(lsa,"pretrained_model_name_or_path"),lsa.forEach(t),clt=r(z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(z8,"CODE",{});var isa=s(A8e);mlt=r(isa,"pretrained_model_name_or_path"),isa.forEach(t),flt=r(z8,":"),z8.forEach(t),glt=i(qi),$e=n(qi,"UL",{});var je=s($e);r7=n(je,"LI",{});var PHe=s(r7);L8e=n(PHe,"STRONG",{});var dsa=s(L8e);hlt=r(dsa,"albert"),dsa.forEach(t),ult=r(PHe," \u2014 "),Qae=n(PHe,"A",{href:!0});var csa=s(Qae);plt=r(csa,"FlaxAlbertForMaskedLM"),csa.forEach(t),_lt=r(PHe," (ALBERT model)"),PHe.forEach(t),blt=i(je),t7=n(je,"LI",{});var BHe=s(t7);y8e=n(BHe,"STRONG",{});var msa=s(y8e);vlt=r(msa,"bart"),msa.forEach(t),Flt=r(BHe," \u2014 "),Wae=n(BHe,"A",{href:!0});var fsa=s(Wae);Tlt=r(fsa,"FlaxBartForConditionalGeneration"),fsa.forEach(t),Mlt=r(BHe," (BART model)"),BHe.forEach(t),Elt=i(je),a7=n(je,"LI",{});var IHe=s(a7);x8e=n(IHe,"STRONG",{});var gsa=s(x8e);Clt=r(gsa,"bert"),gsa.forEach(t),wlt=r(IHe," \u2014 "),Uae=n(IHe,"A",{href:!0});var hsa=s(Uae);Alt=r(hsa,"FlaxBertForMaskedLM"),hsa.forEach(t),Llt=r(IHe," (BERT model)"),IHe.forEach(t),ylt=i(je),n7=n(je,"LI",{});var NHe=s(n7);$8e=n(NHe,"STRONG",{});var usa=s($8e);xlt=r(usa,"big_bird"),usa.forEach(t),$lt=r(NHe," \u2014 "),Hae=n(NHe,"A",{href:!0});var psa=s(Hae);klt=r(psa,"FlaxBigBirdForMaskedLM"),psa.forEach(t),Slt=r(NHe," (BigBird model)"),NHe.forEach(t),Rlt=i(je),s7=n(je,"LI",{});var qHe=s(s7);k8e=n(qHe,"STRONG",{});var _sa=s(k8e);Plt=r(_sa,"distilbert"),_sa.forEach(t),Blt=r(qHe," \u2014 "),Jae=n(qHe,"A",{href:!0});var bsa=s(Jae);Ilt=r(bsa,"FlaxDistilBertForMaskedLM"),bsa.forEach(t),Nlt=r(qHe," (DistilBERT model)"),qHe.forEach(t),qlt=i(je),l7=n(je,"LI",{});var jHe=s(l7);S8e=n(jHe,"STRONG",{});var vsa=s(S8e);jlt=r(vsa,"electra"),vsa.forEach(t),Dlt=r(jHe," \u2014 "),Yae=n(jHe,"A",{href:!0});var Fsa=s(Yae);Glt=r(Fsa,"FlaxElectraForMaskedLM"),Fsa.forEach(t),Olt=r(jHe," (ELECTRA model)"),jHe.forEach(t),Vlt=i(je),i7=n(je,"LI",{});var DHe=s(i7);R8e=n(DHe,"STRONG",{});var Tsa=s(R8e);Xlt=r(Tsa,"mbart"),Tsa.forEach(t),zlt=r(DHe," \u2014 "),Kae=n(DHe,"A",{href:!0});var Msa=s(Kae);Qlt=r(Msa,"FlaxMBartForConditionalGeneration"),Msa.forEach(t),Wlt=r(DHe," (mBART model)"),DHe.forEach(t),Ult=i(je),d7=n(je,"LI",{});var GHe=s(d7);P8e=n(GHe,"STRONG",{});var Esa=s(P8e);Hlt=r(Esa,"roberta"),Esa.forEach(t),Jlt=r(GHe," \u2014 "),Zae=n(GHe,"A",{href:!0});var Csa=s(Zae);Ylt=r(Csa,"FlaxRobertaForMaskedLM"),Csa.forEach(t),Klt=r(GHe," (RoBERTa model)"),GHe.forEach(t),Zlt=i(je),c7=n(je,"LI",{});var OHe=s(c7);B8e=n(OHe,"STRONG",{});var wsa=s(B8e);eit=r(wsa,"roformer"),wsa.forEach(t),oit=r(OHe," \u2014 "),ene=n(OHe,"A",{href:!0});var Asa=s(ene);rit=r(Asa,"FlaxRoFormerForMaskedLM"),Asa.forEach(t),tit=r(OHe," (RoFormer model)"),OHe.forEach(t),ait=i(je),m7=n(je,"LI",{});var VHe=s(m7);I8e=n(VHe,"STRONG",{});var Lsa=s(I8e);nit=r(Lsa,"xlm-roberta"),Lsa.forEach(t),sit=r(VHe," \u2014 "),one=n(VHe,"A",{href:!0});var ysa=s(one);lit=r(ysa,"FlaxXLMRobertaForMaskedLM"),ysa.forEach(t),iit=r(VHe," (XLM-RoBERTa model)"),VHe.forEach(t),je.forEach(t),dit=i(qi),T(f7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),NKe=i(m),Wm=n(m,"H2",{class:!0});var eoo=s(Wm);g7=n(eoo,"A",{id:!0,class:!0,href:!0});var xsa=s(g7);N8e=n(xsa,"SPAN",{});var $sa=s(N8e);T(oR.$$.fragment,$sa),$sa.forEach(t),xsa.forEach(t),cit=i(eoo),q8e=n(eoo,"SPAN",{});var ksa=s(q8e);mit=r(ksa,"FlaxAutoModelForSeq2SeqLM"),ksa.forEach(t),eoo.forEach(t),qKe=i(m),Ar=n(m,"DIV",{class:!0});var ji=s(Ar);T(rR.$$.fragment,ji),fit=i(ji),Um=n(ji,"P",{});var die=s(Um);git=r(die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rne=n(die,"A",{href:!0});var Ssa=s(rne);hit=r(Ssa,"from_pretrained()"),Ssa.forEach(t),uit=r(die," class method or the "),tne=n(die,"A",{href:!0});var Rsa=s(tne);pit=r(Rsa,"from_config()"),Rsa.forEach(t),_it=r(die,` class
method.`),die.forEach(t),bit=i(ji),tR=n(ji,"P",{});var ooo=s(tR);vit=r(ooo,"This class cannot be instantiated directly using "),j8e=n(ooo,"CODE",{});var Psa=s(j8e);Fit=r(Psa,"__init__()"),Psa.forEach(t),Tit=r(ooo," (throws an error)."),ooo.forEach(t),Mit=i(ji),da=n(ji,"DIV",{class:!0});var Q8=s(da);T(aR.$$.fragment,Q8),Eit=i(Q8),D8e=n(Q8,"P",{});var Bsa=s(D8e);Cit=r(Bsa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bsa.forEach(t),wit=i(Q8),Hm=n(Q8,"P",{});var cie=s(Hm);Ait=r(cie,`Note:
Loading a model from its configuration file does `),G8e=n(cie,"STRONG",{});var Isa=s(G8e);Lit=r(Isa,"not"),Isa.forEach(t),yit=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ane=n(cie,"A",{href:!0});var Nsa=s(ane);xit=r(Nsa,"from_pretrained()"),Nsa.forEach(t),$it=r(cie," to load the model weights."),cie.forEach(t),kit=i(Q8),T(h7.$$.fragment,Q8),Q8.forEach(t),Sit=i(ji),rt=n(ji,"DIV",{class:!0});var Di=s(rt);T(nR.$$.fragment,Di),Rit=i(Di),O8e=n(Di,"P",{});var qsa=s(O8e);Pit=r(qsa,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qsa.forEach(t),Bit=i(Di),Xn=n(Di,"P",{});var W8=s(Xn);Iit=r(W8,"The model class to instantiate is selected based on the "),V8e=n(W8,"CODE",{});var jsa=s(V8e);Nit=r(jsa,"model_type"),jsa.forEach(t),qit=r(W8,` property of the config object (either
passed as an argument or loaded from `),X8e=n(W8,"CODE",{});var Dsa=s(X8e);jit=r(Dsa,"pretrained_model_name_or_path"),Dsa.forEach(t),Dit=r(W8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=n(W8,"CODE",{});var Gsa=s(z8e);Git=r(Gsa,"pretrained_model_name_or_path"),Gsa.forEach(t),Oit=r(W8,":"),W8.forEach(t),Vit=i(Di),ke=n(Di,"UL",{});var De=s(ke);u7=n(De,"LI",{});var XHe=s(u7);Q8e=n(XHe,"STRONG",{});var Osa=s(Q8e);Xit=r(Osa,"bart"),Osa.forEach(t),zit=r(XHe," \u2014 "),nne=n(XHe,"A",{href:!0});var Vsa=s(nne);Qit=r(Vsa,"FlaxBartForConditionalGeneration"),Vsa.forEach(t),Wit=r(XHe," (BART model)"),XHe.forEach(t),Uit=i(De),p7=n(De,"LI",{});var zHe=s(p7);W8e=n(zHe,"STRONG",{});var Xsa=s(W8e);Hit=r(Xsa,"blenderbot"),Xsa.forEach(t),Jit=r(zHe," \u2014 "),sne=n(zHe,"A",{href:!0});var zsa=s(sne);Yit=r(zsa,"FlaxBlenderbotForConditionalGeneration"),zsa.forEach(t),Kit=r(zHe," (Blenderbot model)"),zHe.forEach(t),Zit=i(De),_7=n(De,"LI",{});var QHe=s(_7);U8e=n(QHe,"STRONG",{});var Qsa=s(U8e);edt=r(Qsa,"blenderbot-small"),Qsa.forEach(t),odt=r(QHe," \u2014 "),lne=n(QHe,"A",{href:!0});var Wsa=s(lne);rdt=r(Wsa,"FlaxBlenderbotSmallForConditionalGeneration"),Wsa.forEach(t),tdt=r(QHe," (BlenderbotSmall model)"),QHe.forEach(t),adt=i(De),b7=n(De,"LI",{});var WHe=s(b7);H8e=n(WHe,"STRONG",{});var Usa=s(H8e);ndt=r(Usa,"encoder-decoder"),Usa.forEach(t),sdt=r(WHe," \u2014 "),ine=n(WHe,"A",{href:!0});var Hsa=s(ine);ldt=r(Hsa,"FlaxEncoderDecoderModel"),Hsa.forEach(t),idt=r(WHe," (Encoder decoder model)"),WHe.forEach(t),ddt=i(De),v7=n(De,"LI",{});var UHe=s(v7);J8e=n(UHe,"STRONG",{});var Jsa=s(J8e);cdt=r(Jsa,"longt5"),Jsa.forEach(t),mdt=r(UHe," \u2014 "),dne=n(UHe,"A",{href:!0});var Ysa=s(dne);fdt=r(Ysa,"FlaxLongT5ForConditionalGeneration"),Ysa.forEach(t),gdt=r(UHe," (LongT5 model)"),UHe.forEach(t),hdt=i(De),F7=n(De,"LI",{});var HHe=s(F7);Y8e=n(HHe,"STRONG",{});var Ksa=s(Y8e);udt=r(Ksa,"marian"),Ksa.forEach(t),pdt=r(HHe," \u2014 "),cne=n(HHe,"A",{href:!0});var Zsa=s(cne);_dt=r(Zsa,"FlaxMarianMTModel"),Zsa.forEach(t),bdt=r(HHe," (Marian model)"),HHe.forEach(t),vdt=i(De),T7=n(De,"LI",{});var JHe=s(T7);K8e=n(JHe,"STRONG",{});var ela=s(K8e);Fdt=r(ela,"mbart"),ela.forEach(t),Tdt=r(JHe," \u2014 "),mne=n(JHe,"A",{href:!0});var ola=s(mne);Mdt=r(ola,"FlaxMBartForConditionalGeneration"),ola.forEach(t),Edt=r(JHe," (mBART model)"),JHe.forEach(t),Cdt=i(De),M7=n(De,"LI",{});var YHe=s(M7);Z8e=n(YHe,"STRONG",{});var rla=s(Z8e);wdt=r(rla,"mt5"),rla.forEach(t),Adt=r(YHe," \u2014 "),fne=n(YHe,"A",{href:!0});var tla=s(fne);Ldt=r(tla,"FlaxMT5ForConditionalGeneration"),tla.forEach(t),ydt=r(YHe," (MT5 model)"),YHe.forEach(t),xdt=i(De),E7=n(De,"LI",{});var KHe=s(E7);e9e=n(KHe,"STRONG",{});var ala=s(e9e);$dt=r(ala,"pegasus"),ala.forEach(t),kdt=r(KHe," \u2014 "),gne=n(KHe,"A",{href:!0});var nla=s(gne);Sdt=r(nla,"FlaxPegasusForConditionalGeneration"),nla.forEach(t),Rdt=r(KHe," (Pegasus model)"),KHe.forEach(t),Pdt=i(De),C7=n(De,"LI",{});var ZHe=s(C7);o9e=n(ZHe,"STRONG",{});var sla=s(o9e);Bdt=r(sla,"t5"),sla.forEach(t),Idt=r(ZHe," \u2014 "),hne=n(ZHe,"A",{href:!0});var lla=s(hne);Ndt=r(lla,"FlaxT5ForConditionalGeneration"),lla.forEach(t),qdt=r(ZHe," (T5 model)"),ZHe.forEach(t),De.forEach(t),jdt=i(Di),T(w7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),jKe=i(m),Jm=n(m,"H2",{class:!0});var roo=s(Jm);A7=n(roo,"A",{id:!0,class:!0,href:!0});var ila=s(A7);r9e=n(ila,"SPAN",{});var dla=s(r9e);T(sR.$$.fragment,dla),dla.forEach(t),ila.forEach(t),Ddt=i(roo),t9e=n(roo,"SPAN",{});var cla=s(t9e);Gdt=r(cla,"FlaxAutoModelForSequenceClassification"),cla.forEach(t),roo.forEach(t),DKe=i(m),Lr=n(m,"DIV",{class:!0});var Gi=s(Lr);T(lR.$$.fragment,Gi),Odt=i(Gi),Ym=n(Gi,"P",{});var mie=s(Ym);Vdt=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),une=n(mie,"A",{href:!0});var mla=s(une);Xdt=r(mla,"from_pretrained()"),mla.forEach(t),zdt=r(mie," class method or the "),pne=n(mie,"A",{href:!0});var fla=s(pne);Qdt=r(fla,"from_config()"),fla.forEach(t),Wdt=r(mie,` class
method.`),mie.forEach(t),Udt=i(Gi),iR=n(Gi,"P",{});var too=s(iR);Hdt=r(too,"This class cannot be instantiated directly using "),a9e=n(too,"CODE",{});var gla=s(a9e);Jdt=r(gla,"__init__()"),gla.forEach(t),Ydt=r(too," (throws an error)."),too.forEach(t),Kdt=i(Gi),ca=n(Gi,"DIV",{class:!0});var U8=s(ca);T(dR.$$.fragment,U8),Zdt=i(U8),n9e=n(U8,"P",{});var hla=s(n9e);ect=r(hla,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hla.forEach(t),oct=i(U8),Km=n(U8,"P",{});var fie=s(Km);rct=r(fie,`Note:
Loading a model from its configuration file does `),s9e=n(fie,"STRONG",{});var ula=s(s9e);tct=r(ula,"not"),ula.forEach(t),act=r(fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ne=n(fie,"A",{href:!0});var pla=s(_ne);nct=r(pla,"from_pretrained()"),pla.forEach(t),sct=r(fie," to load the model weights."),fie.forEach(t),lct=i(U8),T(L7.$$.fragment,U8),U8.forEach(t),ict=i(Gi),tt=n(Gi,"DIV",{class:!0});var Oi=s(tt);T(cR.$$.fragment,Oi),dct=i(Oi),l9e=n(Oi,"P",{});var _la=s(l9e);cct=r(_la,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_la.forEach(t),mct=i(Oi),zn=n(Oi,"P",{});var H8=s(zn);fct=r(H8,"The model class to instantiate is selected based on the "),i9e=n(H8,"CODE",{});var bla=s(i9e);gct=r(bla,"model_type"),bla.forEach(t),hct=r(H8,` property of the config object (either
passed as an argument or loaded from `),d9e=n(H8,"CODE",{});var vla=s(d9e);uct=r(vla,"pretrained_model_name_or_path"),vla.forEach(t),pct=r(H8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=n(H8,"CODE",{});var Fla=s(c9e);_ct=r(Fla,"pretrained_model_name_or_path"),Fla.forEach(t),bct=r(H8,":"),H8.forEach(t),vct=i(Oi),Se=n(Oi,"UL",{});var Ge=s(Se);y7=n(Ge,"LI",{});var eJe=s(y7);m9e=n(eJe,"STRONG",{});var Tla=s(m9e);Fct=r(Tla,"albert"),Tla.forEach(t),Tct=r(eJe," \u2014 "),bne=n(eJe,"A",{href:!0});var Mla=s(bne);Mct=r(Mla,"FlaxAlbertForSequenceClassification"),Mla.forEach(t),Ect=r(eJe," (ALBERT model)"),eJe.forEach(t),Cct=i(Ge),x7=n(Ge,"LI",{});var oJe=s(x7);f9e=n(oJe,"STRONG",{});var Ela=s(f9e);wct=r(Ela,"bart"),Ela.forEach(t),Act=r(oJe," \u2014 "),vne=n(oJe,"A",{href:!0});var Cla=s(vne);Lct=r(Cla,"FlaxBartForSequenceClassification"),Cla.forEach(t),yct=r(oJe," (BART model)"),oJe.forEach(t),xct=i(Ge),$7=n(Ge,"LI",{});var rJe=s($7);g9e=n(rJe,"STRONG",{});var wla=s(g9e);$ct=r(wla,"bert"),wla.forEach(t),kct=r(rJe," \u2014 "),Fne=n(rJe,"A",{href:!0});var Ala=s(Fne);Sct=r(Ala,"FlaxBertForSequenceClassification"),Ala.forEach(t),Rct=r(rJe," (BERT model)"),rJe.forEach(t),Pct=i(Ge),k7=n(Ge,"LI",{});var tJe=s(k7);h9e=n(tJe,"STRONG",{});var Lla=s(h9e);Bct=r(Lla,"big_bird"),Lla.forEach(t),Ict=r(tJe," \u2014 "),Tne=n(tJe,"A",{href:!0});var yla=s(Tne);Nct=r(yla,"FlaxBigBirdForSequenceClassification"),yla.forEach(t),qct=r(tJe," (BigBird model)"),tJe.forEach(t),jct=i(Ge),S7=n(Ge,"LI",{});var aJe=s(S7);u9e=n(aJe,"STRONG",{});var xla=s(u9e);Dct=r(xla,"distilbert"),xla.forEach(t),Gct=r(aJe," \u2014 "),Mne=n(aJe,"A",{href:!0});var $la=s(Mne);Oct=r($la,"FlaxDistilBertForSequenceClassification"),$la.forEach(t),Vct=r(aJe," (DistilBERT model)"),aJe.forEach(t),Xct=i(Ge),R7=n(Ge,"LI",{});var nJe=s(R7);p9e=n(nJe,"STRONG",{});var kla=s(p9e);zct=r(kla,"electra"),kla.forEach(t),Qct=r(nJe," \u2014 "),Ene=n(nJe,"A",{href:!0});var Sla=s(Ene);Wct=r(Sla,"FlaxElectraForSequenceClassification"),Sla.forEach(t),Uct=r(nJe," (ELECTRA model)"),nJe.forEach(t),Hct=i(Ge),P7=n(Ge,"LI",{});var sJe=s(P7);_9e=n(sJe,"STRONG",{});var Rla=s(_9e);Jct=r(Rla,"mbart"),Rla.forEach(t),Yct=r(sJe," \u2014 "),Cne=n(sJe,"A",{href:!0});var Pla=s(Cne);Kct=r(Pla,"FlaxMBartForSequenceClassification"),Pla.forEach(t),Zct=r(sJe," (mBART model)"),sJe.forEach(t),emt=i(Ge),B7=n(Ge,"LI",{});var lJe=s(B7);b9e=n(lJe,"STRONG",{});var Bla=s(b9e);omt=r(Bla,"roberta"),Bla.forEach(t),rmt=r(lJe," \u2014 "),wne=n(lJe,"A",{href:!0});var Ila=s(wne);tmt=r(Ila,"FlaxRobertaForSequenceClassification"),Ila.forEach(t),amt=r(lJe," (RoBERTa model)"),lJe.forEach(t),nmt=i(Ge),I7=n(Ge,"LI",{});var iJe=s(I7);v9e=n(iJe,"STRONG",{});var Nla=s(v9e);smt=r(Nla,"roformer"),Nla.forEach(t),lmt=r(iJe," \u2014 "),Ane=n(iJe,"A",{href:!0});var qla=s(Ane);imt=r(qla,"FlaxRoFormerForSequenceClassification"),qla.forEach(t),dmt=r(iJe," (RoFormer model)"),iJe.forEach(t),cmt=i(Ge),N7=n(Ge,"LI",{});var dJe=s(N7);F9e=n(dJe,"STRONG",{});var jla=s(F9e);mmt=r(jla,"xlm-roberta"),jla.forEach(t),fmt=r(dJe," \u2014 "),Lne=n(dJe,"A",{href:!0});var Dla=s(Lne);gmt=r(Dla,"FlaxXLMRobertaForSequenceClassification"),Dla.forEach(t),hmt=r(dJe," (XLM-RoBERTa model)"),dJe.forEach(t),Ge.forEach(t),umt=i(Oi),T(q7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),GKe=i(m),Zm=n(m,"H2",{class:!0});var aoo=s(Zm);j7=n(aoo,"A",{id:!0,class:!0,href:!0});var Gla=s(j7);T9e=n(Gla,"SPAN",{});var Ola=s(T9e);T(mR.$$.fragment,Ola),Ola.forEach(t),Gla.forEach(t),pmt=i(aoo),M9e=n(aoo,"SPAN",{});var Vla=s(M9e);_mt=r(Vla,"FlaxAutoModelForQuestionAnswering"),Vla.forEach(t),aoo.forEach(t),OKe=i(m),yr=n(m,"DIV",{class:!0});var Vi=s(yr);T(fR.$$.fragment,Vi),bmt=i(Vi),ef=n(Vi,"P",{});var gie=s(ef);vmt=r(gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yne=n(gie,"A",{href:!0});var Xla=s(yne);Fmt=r(Xla,"from_pretrained()"),Xla.forEach(t),Tmt=r(gie," class method or the "),xne=n(gie,"A",{href:!0});var zla=s(xne);Mmt=r(zla,"from_config()"),zla.forEach(t),Emt=r(gie,` class
method.`),gie.forEach(t),Cmt=i(Vi),gR=n(Vi,"P",{});var noo=s(gR);wmt=r(noo,"This class cannot be instantiated directly using "),E9e=n(noo,"CODE",{});var Qla=s(E9e);Amt=r(Qla,"__init__()"),Qla.forEach(t),Lmt=r(noo," (throws an error)."),noo.forEach(t),ymt=i(Vi),ma=n(Vi,"DIV",{class:!0});var J8=s(ma);T(hR.$$.fragment,J8),xmt=i(J8),C9e=n(J8,"P",{});var Wla=s(C9e);$mt=r(Wla,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wla.forEach(t),kmt=i(J8),of=n(J8,"P",{});var hie=s(of);Smt=r(hie,`Note:
Loading a model from its configuration file does `),w9e=n(hie,"STRONG",{});var Ula=s(w9e);Rmt=r(Ula,"not"),Ula.forEach(t),Pmt=r(hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),$ne=n(hie,"A",{href:!0});var Hla=s($ne);Bmt=r(Hla,"from_pretrained()"),Hla.forEach(t),Imt=r(hie," to load the model weights."),hie.forEach(t),Nmt=i(J8),T(D7.$$.fragment,J8),J8.forEach(t),qmt=i(Vi),at=n(Vi,"DIV",{class:!0});var Xi=s(at);T(uR.$$.fragment,Xi),jmt=i(Xi),A9e=n(Xi,"P",{});var Jla=s(A9e);Dmt=r(Jla,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jla.forEach(t),Gmt=i(Xi),Qn=n(Xi,"P",{});var Y8=s(Qn);Omt=r(Y8,"The model class to instantiate is selected based on the "),L9e=n(Y8,"CODE",{});var Yla=s(L9e);Vmt=r(Yla,"model_type"),Yla.forEach(t),Xmt=r(Y8,` property of the config object (either
passed as an argument or loaded from `),y9e=n(Y8,"CODE",{});var Kla=s(y9e);zmt=r(Kla,"pretrained_model_name_or_path"),Kla.forEach(t),Qmt=r(Y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x9e=n(Y8,"CODE",{});var Zla=s(x9e);Wmt=r(Zla,"pretrained_model_name_or_path"),Zla.forEach(t),Umt=r(Y8,":"),Y8.forEach(t),Hmt=i(Xi),Re=n(Xi,"UL",{});var Oe=s(Re);G7=n(Oe,"LI",{});var cJe=s(G7);$9e=n(cJe,"STRONG",{});var eia=s($9e);Jmt=r(eia,"albert"),eia.forEach(t),Ymt=r(cJe," \u2014 "),kne=n(cJe,"A",{href:!0});var oia=s(kne);Kmt=r(oia,"FlaxAlbertForQuestionAnswering"),oia.forEach(t),Zmt=r(cJe," (ALBERT model)"),cJe.forEach(t),eft=i(Oe),O7=n(Oe,"LI",{});var mJe=s(O7);k9e=n(mJe,"STRONG",{});var ria=s(k9e);oft=r(ria,"bart"),ria.forEach(t),rft=r(mJe," \u2014 "),Sne=n(mJe,"A",{href:!0});var tia=s(Sne);tft=r(tia,"FlaxBartForQuestionAnswering"),tia.forEach(t),aft=r(mJe," (BART model)"),mJe.forEach(t),nft=i(Oe),V7=n(Oe,"LI",{});var fJe=s(V7);S9e=n(fJe,"STRONG",{});var aia=s(S9e);sft=r(aia,"bert"),aia.forEach(t),lft=r(fJe," \u2014 "),Rne=n(fJe,"A",{href:!0});var nia=s(Rne);ift=r(nia,"FlaxBertForQuestionAnswering"),nia.forEach(t),dft=r(fJe," (BERT model)"),fJe.forEach(t),cft=i(Oe),X7=n(Oe,"LI",{});var gJe=s(X7);R9e=n(gJe,"STRONG",{});var sia=s(R9e);mft=r(sia,"big_bird"),sia.forEach(t),fft=r(gJe," \u2014 "),Pne=n(gJe,"A",{href:!0});var lia=s(Pne);gft=r(lia,"FlaxBigBirdForQuestionAnswering"),lia.forEach(t),hft=r(gJe," (BigBird model)"),gJe.forEach(t),uft=i(Oe),z7=n(Oe,"LI",{});var hJe=s(z7);P9e=n(hJe,"STRONG",{});var iia=s(P9e);pft=r(iia,"distilbert"),iia.forEach(t),_ft=r(hJe," \u2014 "),Bne=n(hJe,"A",{href:!0});var dia=s(Bne);bft=r(dia,"FlaxDistilBertForQuestionAnswering"),dia.forEach(t),vft=r(hJe," (DistilBERT model)"),hJe.forEach(t),Fft=i(Oe),Q7=n(Oe,"LI",{});var uJe=s(Q7);B9e=n(uJe,"STRONG",{});var cia=s(B9e);Tft=r(cia,"electra"),cia.forEach(t),Mft=r(uJe," \u2014 "),Ine=n(uJe,"A",{href:!0});var mia=s(Ine);Eft=r(mia,"FlaxElectraForQuestionAnswering"),mia.forEach(t),Cft=r(uJe," (ELECTRA model)"),uJe.forEach(t),wft=i(Oe),W7=n(Oe,"LI",{});var pJe=s(W7);I9e=n(pJe,"STRONG",{});var fia=s(I9e);Aft=r(fia,"mbart"),fia.forEach(t),Lft=r(pJe," \u2014 "),Nne=n(pJe,"A",{href:!0});var gia=s(Nne);yft=r(gia,"FlaxMBartForQuestionAnswering"),gia.forEach(t),xft=r(pJe," (mBART model)"),pJe.forEach(t),$ft=i(Oe),U7=n(Oe,"LI",{});var _Je=s(U7);N9e=n(_Je,"STRONG",{});var hia=s(N9e);kft=r(hia,"roberta"),hia.forEach(t),Sft=r(_Je," \u2014 "),qne=n(_Je,"A",{href:!0});var uia=s(qne);Rft=r(uia,"FlaxRobertaForQuestionAnswering"),uia.forEach(t),Pft=r(_Je," (RoBERTa model)"),_Je.forEach(t),Bft=i(Oe),H7=n(Oe,"LI",{});var bJe=s(H7);q9e=n(bJe,"STRONG",{});var pia=s(q9e);Ift=r(pia,"roformer"),pia.forEach(t),Nft=r(bJe," \u2014 "),jne=n(bJe,"A",{href:!0});var _ia=s(jne);qft=r(_ia,"FlaxRoFormerForQuestionAnswering"),_ia.forEach(t),jft=r(bJe," (RoFormer model)"),bJe.forEach(t),Dft=i(Oe),J7=n(Oe,"LI",{});var vJe=s(J7);j9e=n(vJe,"STRONG",{});var bia=s(j9e);Gft=r(bia,"xlm-roberta"),bia.forEach(t),Oft=r(vJe," \u2014 "),Dne=n(vJe,"A",{href:!0});var via=s(Dne);Vft=r(via,"FlaxXLMRobertaForQuestionAnswering"),via.forEach(t),Xft=r(vJe," (XLM-RoBERTa model)"),vJe.forEach(t),Oe.forEach(t),zft=i(Xi),T(Y7.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),VKe=i(m),rf=n(m,"H2",{class:!0});var soo=s(rf);K7=n(soo,"A",{id:!0,class:!0,href:!0});var Fia=s(K7);D9e=n(Fia,"SPAN",{});var Tia=s(D9e);T(pR.$$.fragment,Tia),Tia.forEach(t),Fia.forEach(t),Qft=i(soo),G9e=n(soo,"SPAN",{});var Mia=s(G9e);Wft=r(Mia,"FlaxAutoModelForTokenClassification"),Mia.forEach(t),soo.forEach(t),XKe=i(m),xr=n(m,"DIV",{class:!0});var zi=s(xr);T(_R.$$.fragment,zi),Uft=i(zi),tf=n(zi,"P",{});var uie=s(tf);Hft=r(uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gne=n(uie,"A",{href:!0});var Eia=s(Gne);Jft=r(Eia,"from_pretrained()"),Eia.forEach(t),Yft=r(uie," class method or the "),One=n(uie,"A",{href:!0});var Cia=s(One);Kft=r(Cia,"from_config()"),Cia.forEach(t),Zft=r(uie,` class
method.`),uie.forEach(t),egt=i(zi),bR=n(zi,"P",{});var loo=s(bR);ogt=r(loo,"This class cannot be instantiated directly using "),O9e=n(loo,"CODE",{});var wia=s(O9e);rgt=r(wia,"__init__()"),wia.forEach(t),tgt=r(loo," (throws an error)."),loo.forEach(t),agt=i(zi),fa=n(zi,"DIV",{class:!0});var K8=s(fa);T(vR.$$.fragment,K8),ngt=i(K8),V9e=n(K8,"P",{});var Aia=s(V9e);sgt=r(Aia,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Aia.forEach(t),lgt=i(K8),af=n(K8,"P",{});var pie=s(af);igt=r(pie,`Note:
Loading a model from its configuration file does `),X9e=n(pie,"STRONG",{});var Lia=s(X9e);dgt=r(Lia,"not"),Lia.forEach(t),cgt=r(pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vne=n(pie,"A",{href:!0});var yia=s(Vne);mgt=r(yia,"from_pretrained()"),yia.forEach(t),fgt=r(pie," to load the model weights."),pie.forEach(t),ggt=i(K8),T(Z7.$$.fragment,K8),K8.forEach(t),hgt=i(zi),nt=n(zi,"DIV",{class:!0});var Qi=s(nt);T(FR.$$.fragment,Qi),ugt=i(Qi),z9e=n(Qi,"P",{});var xia=s(z9e);pgt=r(xia,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),xia.forEach(t),_gt=i(Qi),Wn=n(Qi,"P",{});var Z8=s(Wn);bgt=r(Z8,"The model class to instantiate is selected based on the "),Q9e=n(Z8,"CODE",{});var $ia=s(Q9e);vgt=r($ia,"model_type"),$ia.forEach(t),Fgt=r(Z8,` property of the config object (either
passed as an argument or loaded from `),W9e=n(Z8,"CODE",{});var kia=s(W9e);Tgt=r(kia,"pretrained_model_name_or_path"),kia.forEach(t),Mgt=r(Z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=n(Z8,"CODE",{});var Sia=s(U9e);Egt=r(Sia,"pretrained_model_name_or_path"),Sia.forEach(t),Cgt=r(Z8,":"),Z8.forEach(t),wgt=i(Qi),Xe=n(Qi,"UL",{});var wo=s(Xe);eL=n(wo,"LI",{});var FJe=s(eL);H9e=n(FJe,"STRONG",{});var Ria=s(H9e);Agt=r(Ria,"albert"),Ria.forEach(t),Lgt=r(FJe," \u2014 "),Xne=n(FJe,"A",{href:!0});var Pia=s(Xne);ygt=r(Pia,"FlaxAlbertForTokenClassification"),Pia.forEach(t),xgt=r(FJe," (ALBERT model)"),FJe.forEach(t),$gt=i(wo),oL=n(wo,"LI",{});var TJe=s(oL);J9e=n(TJe,"STRONG",{});var Bia=s(J9e);kgt=r(Bia,"bert"),Bia.forEach(t),Sgt=r(TJe," \u2014 "),zne=n(TJe,"A",{href:!0});var Iia=s(zne);Rgt=r(Iia,"FlaxBertForTokenClassification"),Iia.forEach(t),Pgt=r(TJe," (BERT model)"),TJe.forEach(t),Bgt=i(wo),rL=n(wo,"LI",{});var MJe=s(rL);Y9e=n(MJe,"STRONG",{});var Nia=s(Y9e);Igt=r(Nia,"big_bird"),Nia.forEach(t),Ngt=r(MJe," \u2014 "),Qne=n(MJe,"A",{href:!0});var qia=s(Qne);qgt=r(qia,"FlaxBigBirdForTokenClassification"),qia.forEach(t),jgt=r(MJe," (BigBird model)"),MJe.forEach(t),Dgt=i(wo),tL=n(wo,"LI",{});var EJe=s(tL);K9e=n(EJe,"STRONG",{});var jia=s(K9e);Ggt=r(jia,"distilbert"),jia.forEach(t),Ogt=r(EJe," \u2014 "),Wne=n(EJe,"A",{href:!0});var Dia=s(Wne);Vgt=r(Dia,"FlaxDistilBertForTokenClassification"),Dia.forEach(t),Xgt=r(EJe," (DistilBERT model)"),EJe.forEach(t),zgt=i(wo),aL=n(wo,"LI",{});var CJe=s(aL);Z9e=n(CJe,"STRONG",{});var Gia=s(Z9e);Qgt=r(Gia,"electra"),Gia.forEach(t),Wgt=r(CJe," \u2014 "),Une=n(CJe,"A",{href:!0});var Oia=s(Une);Ugt=r(Oia,"FlaxElectraForTokenClassification"),Oia.forEach(t),Hgt=r(CJe," (ELECTRA model)"),CJe.forEach(t),Jgt=i(wo),nL=n(wo,"LI",{});var wJe=s(nL);exe=n(wJe,"STRONG",{});var Via=s(exe);Ygt=r(Via,"roberta"),Via.forEach(t),Kgt=r(wJe," \u2014 "),Hne=n(wJe,"A",{href:!0});var Xia=s(Hne);Zgt=r(Xia,"FlaxRobertaForTokenClassification"),Xia.forEach(t),eht=r(wJe," (RoBERTa model)"),wJe.forEach(t),oht=i(wo),sL=n(wo,"LI",{});var AJe=s(sL);oxe=n(AJe,"STRONG",{});var zia=s(oxe);rht=r(zia,"roformer"),zia.forEach(t),tht=r(AJe," \u2014 "),Jne=n(AJe,"A",{href:!0});var Qia=s(Jne);aht=r(Qia,"FlaxRoFormerForTokenClassification"),Qia.forEach(t),nht=r(AJe," (RoFormer model)"),AJe.forEach(t),sht=i(wo),lL=n(wo,"LI",{});var LJe=s(lL);rxe=n(LJe,"STRONG",{});var Wia=s(rxe);lht=r(Wia,"xlm-roberta"),Wia.forEach(t),iht=r(LJe," \u2014 "),Yne=n(LJe,"A",{href:!0});var Uia=s(Yne);dht=r(Uia,"FlaxXLMRobertaForTokenClassification"),Uia.forEach(t),cht=r(LJe," (XLM-RoBERTa model)"),LJe.forEach(t),wo.forEach(t),mht=i(Qi),T(iL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),zKe=i(m),nf=n(m,"H2",{class:!0});var ioo=s(nf);dL=n(ioo,"A",{id:!0,class:!0,href:!0});var Hia=s(dL);txe=n(Hia,"SPAN",{});var Jia=s(txe);T(TR.$$.fragment,Jia),Jia.forEach(t),Hia.forEach(t),fht=i(ioo),axe=n(ioo,"SPAN",{});var Yia=s(axe);ght=r(Yia,"FlaxAutoModelForMultipleChoice"),Yia.forEach(t),ioo.forEach(t),QKe=i(m),$r=n(m,"DIV",{class:!0});var Wi=s($r);T(MR.$$.fragment,Wi),hht=i(Wi),sf=n(Wi,"P",{});var _ie=s(sf);uht=r(_ie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kne=n(_ie,"A",{href:!0});var Kia=s(Kne);pht=r(Kia,"from_pretrained()"),Kia.forEach(t),_ht=r(_ie," class method or the "),Zne=n(_ie,"A",{href:!0});var Zia=s(Zne);bht=r(Zia,"from_config()"),Zia.forEach(t),vht=r(_ie,` class
method.`),_ie.forEach(t),Fht=i(Wi),ER=n(Wi,"P",{});var doo=s(ER);Tht=r(doo,"This class cannot be instantiated directly using "),nxe=n(doo,"CODE",{});var eda=s(nxe);Mht=r(eda,"__init__()"),eda.forEach(t),Eht=r(doo," (throws an error)."),doo.forEach(t),Cht=i(Wi),ga=n(Wi,"DIV",{class:!0});var e9=s(ga);T(CR.$$.fragment,e9),wht=i(e9),sxe=n(e9,"P",{});var oda=s(sxe);Aht=r(oda,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oda.forEach(t),Lht=i(e9),lf=n(e9,"P",{});var bie=s(lf);yht=r(bie,`Note:
Loading a model from its configuration file does `),lxe=n(bie,"STRONG",{});var rda=s(lxe);xht=r(rda,"not"),rda.forEach(t),$ht=r(bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=n(bie,"A",{href:!0});var tda=s(ese);kht=r(tda,"from_pretrained()"),tda.forEach(t),Sht=r(bie," to load the model weights."),bie.forEach(t),Rht=i(e9),T(cL.$$.fragment,e9),e9.forEach(t),Pht=i(Wi),st=n(Wi,"DIV",{class:!0});var Ui=s(st);T(wR.$$.fragment,Ui),Bht=i(Ui),ixe=n(Ui,"P",{});var ada=s(ixe);Iht=r(ada,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ada.forEach(t),Nht=i(Ui),Un=n(Ui,"P",{});var o9=s(Un);qht=r(o9,"The model class to instantiate is selected based on the "),dxe=n(o9,"CODE",{});var nda=s(dxe);jht=r(nda,"model_type"),nda.forEach(t),Dht=r(o9,` property of the config object (either
passed as an argument or loaded from `),cxe=n(o9,"CODE",{});var sda=s(cxe);Ght=r(sda,"pretrained_model_name_or_path"),sda.forEach(t),Oht=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mxe=n(o9,"CODE",{});var lda=s(mxe);Vht=r(lda,"pretrained_model_name_or_path"),lda.forEach(t),Xht=r(o9,":"),o9.forEach(t),zht=i(Ui),ze=n(Ui,"UL",{});var Ao=s(ze);mL=n(Ao,"LI",{});var yJe=s(mL);fxe=n(yJe,"STRONG",{});var ida=s(fxe);Qht=r(ida,"albert"),ida.forEach(t),Wht=r(yJe," \u2014 "),ose=n(yJe,"A",{href:!0});var dda=s(ose);Uht=r(dda,"FlaxAlbertForMultipleChoice"),dda.forEach(t),Hht=r(yJe," (ALBERT model)"),yJe.forEach(t),Jht=i(Ao),fL=n(Ao,"LI",{});var xJe=s(fL);gxe=n(xJe,"STRONG",{});var cda=s(gxe);Yht=r(cda,"bert"),cda.forEach(t),Kht=r(xJe," \u2014 "),rse=n(xJe,"A",{href:!0});var mda=s(rse);Zht=r(mda,"FlaxBertForMultipleChoice"),mda.forEach(t),eut=r(xJe," (BERT model)"),xJe.forEach(t),out=i(Ao),gL=n(Ao,"LI",{});var $Je=s(gL);hxe=n($Je,"STRONG",{});var fda=s(hxe);rut=r(fda,"big_bird"),fda.forEach(t),tut=r($Je," \u2014 "),tse=n($Je,"A",{href:!0});var gda=s(tse);aut=r(gda,"FlaxBigBirdForMultipleChoice"),gda.forEach(t),nut=r($Je," (BigBird model)"),$Je.forEach(t),sut=i(Ao),hL=n(Ao,"LI",{});var kJe=s(hL);uxe=n(kJe,"STRONG",{});var hda=s(uxe);lut=r(hda,"distilbert"),hda.forEach(t),iut=r(kJe," \u2014 "),ase=n(kJe,"A",{href:!0});var uda=s(ase);dut=r(uda,"FlaxDistilBertForMultipleChoice"),uda.forEach(t),cut=r(kJe," (DistilBERT model)"),kJe.forEach(t),mut=i(Ao),uL=n(Ao,"LI",{});var SJe=s(uL);pxe=n(SJe,"STRONG",{});var pda=s(pxe);fut=r(pda,"electra"),pda.forEach(t),gut=r(SJe," \u2014 "),nse=n(SJe,"A",{href:!0});var _da=s(nse);hut=r(_da,"FlaxElectraForMultipleChoice"),_da.forEach(t),uut=r(SJe," (ELECTRA model)"),SJe.forEach(t),put=i(Ao),pL=n(Ao,"LI",{});var RJe=s(pL);_xe=n(RJe,"STRONG",{});var bda=s(_xe);_ut=r(bda,"roberta"),bda.forEach(t),but=r(RJe," \u2014 "),sse=n(RJe,"A",{href:!0});var vda=s(sse);vut=r(vda,"FlaxRobertaForMultipleChoice"),vda.forEach(t),Fut=r(RJe," (RoBERTa model)"),RJe.forEach(t),Tut=i(Ao),_L=n(Ao,"LI",{});var PJe=s(_L);bxe=n(PJe,"STRONG",{});var Fda=s(bxe);Mut=r(Fda,"roformer"),Fda.forEach(t),Eut=r(PJe," \u2014 "),lse=n(PJe,"A",{href:!0});var Tda=s(lse);Cut=r(Tda,"FlaxRoFormerForMultipleChoice"),Tda.forEach(t),wut=r(PJe," (RoFormer model)"),PJe.forEach(t),Aut=i(Ao),bL=n(Ao,"LI",{});var BJe=s(bL);vxe=n(BJe,"STRONG",{});var Mda=s(vxe);Lut=r(Mda,"xlm-roberta"),Mda.forEach(t),yut=r(BJe," \u2014 "),ise=n(BJe,"A",{href:!0});var Eda=s(ise);xut=r(Eda,"FlaxXLMRobertaForMultipleChoice"),Eda.forEach(t),$ut=r(BJe," (XLM-RoBERTa model)"),BJe.forEach(t),Ao.forEach(t),kut=i(Ui),T(vL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),WKe=i(m),df=n(m,"H2",{class:!0});var coo=s(df);FL=n(coo,"A",{id:!0,class:!0,href:!0});var Cda=s(FL);Fxe=n(Cda,"SPAN",{});var wda=s(Fxe);T(AR.$$.fragment,wda),wda.forEach(t),Cda.forEach(t),Sut=i(coo),Txe=n(coo,"SPAN",{});var Ada=s(Txe);Rut=r(Ada,"FlaxAutoModelForNextSentencePrediction"),Ada.forEach(t),coo.forEach(t),UKe=i(m),kr=n(m,"DIV",{class:!0});var Hi=s(kr);T(LR.$$.fragment,Hi),Put=i(Hi),cf=n(Hi,"P",{});var vie=s(cf);But=r(vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dse=n(vie,"A",{href:!0});var Lda=s(dse);Iut=r(Lda,"from_pretrained()"),Lda.forEach(t),Nut=r(vie," class method or the "),cse=n(vie,"A",{href:!0});var yda=s(cse);qut=r(yda,"from_config()"),yda.forEach(t),jut=r(vie,` class
method.`),vie.forEach(t),Dut=i(Hi),yR=n(Hi,"P",{});var moo=s(yR);Gut=r(moo,"This class cannot be instantiated directly using "),Mxe=n(moo,"CODE",{});var xda=s(Mxe);Out=r(xda,"__init__()"),xda.forEach(t),Vut=r(moo," (throws an error)."),moo.forEach(t),Xut=i(Hi),ha=n(Hi,"DIV",{class:!0});var r9=s(ha);T(xR.$$.fragment,r9),zut=i(r9),Exe=n(r9,"P",{});var $da=s(Exe);Qut=r($da,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$da.forEach(t),Wut=i(r9),mf=n(r9,"P",{});var Fie=s(mf);Uut=r(Fie,`Note:
Loading a model from its configuration file does `),Cxe=n(Fie,"STRONG",{});var kda=s(Cxe);Hut=r(kda,"not"),kda.forEach(t),Jut=r(Fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),mse=n(Fie,"A",{href:!0});var Sda=s(mse);Yut=r(Sda,"from_pretrained()"),Sda.forEach(t),Kut=r(Fie," to load the model weights."),Fie.forEach(t),Zut=i(r9),T(TL.$$.fragment,r9),r9.forEach(t),ept=i(Hi),lt=n(Hi,"DIV",{class:!0});var Ji=s(lt);T($R.$$.fragment,Ji),opt=i(Ji),wxe=n(Ji,"P",{});var Rda=s(wxe);rpt=r(Rda,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Rda.forEach(t),tpt=i(Ji),Hn=n(Ji,"P",{});var t9=s(Hn);apt=r(t9,"The model class to instantiate is selected based on the "),Axe=n(t9,"CODE",{});var Pda=s(Axe);npt=r(Pda,"model_type"),Pda.forEach(t),spt=r(t9,` property of the config object (either
passed as an argument or loaded from `),Lxe=n(t9,"CODE",{});var Bda=s(Lxe);lpt=r(Bda,"pretrained_model_name_or_path"),Bda.forEach(t),ipt=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yxe=n(t9,"CODE",{});var Ida=s(yxe);dpt=r(Ida,"pretrained_model_name_or_path"),Ida.forEach(t),cpt=r(t9,":"),t9.forEach(t),mpt=i(Ji),xxe=n(Ji,"UL",{});var Nda=s(xxe);ML=n(Nda,"LI",{});var IJe=s(ML);$xe=n(IJe,"STRONG",{});var qda=s($xe);fpt=r(qda,"bert"),qda.forEach(t),gpt=r(IJe," \u2014 "),fse=n(IJe,"A",{href:!0});var jda=s(fse);hpt=r(jda,"FlaxBertForNextSentencePrediction"),jda.forEach(t),upt=r(IJe," (BERT model)"),IJe.forEach(t),Nda.forEach(t),ppt=i(Ji),T(EL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),HKe=i(m),ff=n(m,"H2",{class:!0});var foo=s(ff);CL=n(foo,"A",{id:!0,class:!0,href:!0});var Dda=s(CL);kxe=n(Dda,"SPAN",{});var Gda=s(kxe);T(kR.$$.fragment,Gda),Gda.forEach(t),Dda.forEach(t),_pt=i(foo),Sxe=n(foo,"SPAN",{});var Oda=s(Sxe);bpt=r(Oda,"FlaxAutoModelForImageClassification"),Oda.forEach(t),foo.forEach(t),JKe=i(m),Sr=n(m,"DIV",{class:!0});var Yi=s(Sr);T(SR.$$.fragment,Yi),vpt=i(Yi),gf=n(Yi,"P",{});var Tie=s(gf);Fpt=r(Tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gse=n(Tie,"A",{href:!0});var Vda=s(gse);Tpt=r(Vda,"from_pretrained()"),Vda.forEach(t),Mpt=r(Tie," class method or the "),hse=n(Tie,"A",{href:!0});var Xda=s(hse);Ept=r(Xda,"from_config()"),Xda.forEach(t),Cpt=r(Tie,` class
method.`),Tie.forEach(t),wpt=i(Yi),RR=n(Yi,"P",{});var goo=s(RR);Apt=r(goo,"This class cannot be instantiated directly using "),Rxe=n(goo,"CODE",{});var zda=s(Rxe);Lpt=r(zda,"__init__()"),zda.forEach(t),ypt=r(goo," (throws an error)."),goo.forEach(t),xpt=i(Yi),ua=n(Yi,"DIV",{class:!0});var a9=s(ua);T(PR.$$.fragment,a9),$pt=i(a9),Pxe=n(a9,"P",{});var Qda=s(Pxe);kpt=r(Qda,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Qda.forEach(t),Spt=i(a9),hf=n(a9,"P",{});var Mie=s(hf);Rpt=r(Mie,`Note:
Loading a model from its configuration file does `),Bxe=n(Mie,"STRONG",{});var Wda=s(Bxe);Ppt=r(Wda,"not"),Wda.forEach(t),Bpt=r(Mie,` load the model weights. It only affects the
model\u2019s configuration. Use `),use=n(Mie,"A",{href:!0});var Uda=s(use);Ipt=r(Uda,"from_pretrained()"),Uda.forEach(t),Npt=r(Mie," to load the model weights."),Mie.forEach(t),qpt=i(a9),T(wL.$$.fragment,a9),a9.forEach(t),jpt=i(Yi),it=n(Yi,"DIV",{class:!0});var Ki=s(it);T(BR.$$.fragment,Ki),Dpt=i(Ki),Ixe=n(Ki,"P",{});var Hda=s(Ixe);Gpt=r(Hda,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hda.forEach(t),Opt=i(Ki),Jn=n(Ki,"P",{});var n9=s(Jn);Vpt=r(n9,"The model class to instantiate is selected based on the "),Nxe=n(n9,"CODE",{});var Jda=s(Nxe);Xpt=r(Jda,"model_type"),Jda.forEach(t),zpt=r(n9,` property of the config object (either
passed as an argument or loaded from `),qxe=n(n9,"CODE",{});var Yda=s(qxe);Qpt=r(Yda,"pretrained_model_name_or_path"),Yda.forEach(t),Wpt=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jxe=n(n9,"CODE",{});var Kda=s(jxe);Upt=r(Kda,"pretrained_model_name_or_path"),Kda.forEach(t),Hpt=r(n9,":"),n9.forEach(t),Jpt=i(Ki),IR=n(Ki,"UL",{});var hoo=s(IR);AL=n(hoo,"LI",{});var NJe=s(AL);Dxe=n(NJe,"STRONG",{});var Zda=s(Dxe);Ypt=r(Zda,"beit"),Zda.forEach(t),Kpt=r(NJe," \u2014 "),pse=n(NJe,"A",{href:!0});var eca=s(pse);Zpt=r(eca,"FlaxBeitForImageClassification"),eca.forEach(t),e_t=r(NJe," (BEiT model)"),NJe.forEach(t),o_t=i(hoo),LL=n(hoo,"LI",{});var qJe=s(LL);Gxe=n(qJe,"STRONG",{});var oca=s(Gxe);r_t=r(oca,"vit"),oca.forEach(t),t_t=r(qJe," \u2014 "),_se=n(qJe,"A",{href:!0});var rca=s(_se);a_t=r(rca,"FlaxViTForImageClassification"),rca.forEach(t),n_t=r(qJe," (ViT model)"),qJe.forEach(t),hoo.forEach(t),s_t=i(Ki),T(yL.$$.fragment,Ki),Ki.forEach(t),Yi.forEach(t),YKe=i(m),uf=n(m,"H2",{class:!0});var uoo=s(uf);xL=n(uoo,"A",{id:!0,class:!0,href:!0});var tca=s(xL);Oxe=n(tca,"SPAN",{});var aca=s(Oxe);T(NR.$$.fragment,aca),aca.forEach(t),tca.forEach(t),l_t=i(uoo),Vxe=n(uoo,"SPAN",{});var nca=s(Vxe);i_t=r(nca,"FlaxAutoModelForVision2Seq"),nca.forEach(t),uoo.forEach(t),KKe=i(m),Rr=n(m,"DIV",{class:!0});var Zi=s(Rr);T(qR.$$.fragment,Zi),d_t=i(Zi),pf=n(Zi,"P",{});var Eie=s(pf);c_t=r(Eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bse=n(Eie,"A",{href:!0});var sca=s(bse);m_t=r(sca,"from_pretrained()"),sca.forEach(t),f_t=r(Eie," class method or the "),vse=n(Eie,"A",{href:!0});var lca=s(vse);g_t=r(lca,"from_config()"),lca.forEach(t),h_t=r(Eie,` class
method.`),Eie.forEach(t),u_t=i(Zi),jR=n(Zi,"P",{});var poo=s(jR);p_t=r(poo,"This class cannot be instantiated directly using "),Xxe=n(poo,"CODE",{});var ica=s(Xxe);__t=r(ica,"__init__()"),ica.forEach(t),b_t=r(poo," (throws an error)."),poo.forEach(t),v_t=i(Zi),pa=n(Zi,"DIV",{class:!0});var s9=s(pa);T(DR.$$.fragment,s9),F_t=i(s9),zxe=n(s9,"P",{});var dca=s(zxe);T_t=r(dca,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dca.forEach(t),M_t=i(s9),_f=n(s9,"P",{});var Cie=s(_f);E_t=r(Cie,`Note:
Loading a model from its configuration file does `),Qxe=n(Cie,"STRONG",{});var cca=s(Qxe);C_t=r(cca,"not"),cca.forEach(t),w_t=r(Cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fse=n(Cie,"A",{href:!0});var mca=s(Fse);A_t=r(mca,"from_pretrained()"),mca.forEach(t),L_t=r(Cie," to load the model weights."),Cie.forEach(t),y_t=i(s9),T($L.$$.fragment,s9),s9.forEach(t),x_t=i(Zi),dt=n(Zi,"DIV",{class:!0});var ed=s(dt);T(GR.$$.fragment,ed),$_t=i(ed),Wxe=n(ed,"P",{});var fca=s(Wxe);k_t=r(fca,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fca.forEach(t),S_t=i(ed),Yn=n(ed,"P",{});var l9=s(Yn);R_t=r(l9,"The model class to instantiate is selected based on the "),Uxe=n(l9,"CODE",{});var gca=s(Uxe);P_t=r(gca,"model_type"),gca.forEach(t),B_t=r(l9,` property of the config object (either
passed as an argument or loaded from `),Hxe=n(l9,"CODE",{});var hca=s(Hxe);I_t=r(hca,"pretrained_model_name_or_path"),hca.forEach(t),N_t=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jxe=n(l9,"CODE",{});var uca=s(Jxe);q_t=r(uca,"pretrained_model_name_or_path"),uca.forEach(t),j_t=r(l9,":"),l9.forEach(t),D_t=i(ed),Yxe=n(ed,"UL",{});var pca=s(Yxe);kL=n(pca,"LI",{});var jJe=s(kL);Kxe=n(jJe,"STRONG",{});var _ca=s(Kxe);G_t=r(_ca,"vision-encoder-decoder"),_ca.forEach(t),O_t=r(jJe," \u2014 "),Tse=n(jJe,"A",{href:!0});var bca=s(Tse);V_t=r(bca,"FlaxVisionEncoderDecoderModel"),bca.forEach(t),X_t=r(jJe," (Vision Encoder decoder model)"),jJe.forEach(t),pca.forEach(t),z_t=i(ed),T(SL.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Sfa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Zn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(os,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(ld,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(wf,"id","extending-the-auto-classes"),c(wf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wf,"href","#extending-the-auto-classes"),c(id,"class","relative group"),c(Lf,"id","transformers.AutoConfig"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#transformers.AutoConfig"),c(dd,"class","relative group"),c(bB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(vB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(FB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(TB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(CB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(wB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(LB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c($B,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(RB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(IB,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(OB,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(aI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(hI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(bI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(TI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c($I,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(II,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(NI,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(WI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(aN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(iN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(dN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(CN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c($N,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"id","transformers.AutoTokenizer"),c(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qh,"href","#transformers.AutoTokenizer"),c(md,"class","relative group"),c(BN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(IN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(qN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(DN,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(zN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(WN,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(HN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(JN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(ZN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(eq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(oq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(rq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(tq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(nq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(lq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(iq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(dq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(cq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(mq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(fq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(gq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(hq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_q,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(bq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(vq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Fq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(Tq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Eq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(wq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Lq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c($q,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(kq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(qq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Dq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Oq,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Qq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Wq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Uq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Hq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Yq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(Kq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(Zq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(oj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(tj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(aj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(nj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(cj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Fj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Tj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Ej,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(wj,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(xj,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Bj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ij,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(qj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Oj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Xj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(zj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Qj,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(Wj,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(Uj,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Hj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Yj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Kj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Zj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(nD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(lD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(dD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(fD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(gD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(uD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(bD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(vD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(FD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(ED,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(CD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(AD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(xD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c($D,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(kD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(PD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(BD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(ID,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yu,"id","transformers.AutoFeatureExtractor"),c(yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yu,"href","#transformers.AutoFeatureExtractor"),c(fd,"class","relative group"),c(ND,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(DD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zD,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QD,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(WD,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(UD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(HD,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(JD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(ZD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(eG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(oG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(rG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(aG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(nG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(sG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(lG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(iG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(mG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(fG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(pG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(_G,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(MG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_p,"id","transformers.AutoProcessor"),c(_p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_p,"href","#transformers.AutoProcessor"),c(gd,"class","relative group"),c(EG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(CG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(wG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(AG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(LG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(yG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(xG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c($G,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(kG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(SG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(BG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(IG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(NG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(DG,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(GG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Op,"id","transformers.AutoModel"),c(Op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Op,"href","#transformers.AutoModel"),c(ud,"class","relative group"),c(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(HG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(JG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(YG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(KG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ZG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(eO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(oO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(rO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(tO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(aO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(nO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(sO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(lO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(iO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(dO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(cO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(mO,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(fO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(gO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(hO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(uO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(pO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(_O,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(bO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(vO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(FO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(TO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(MO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(EO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(CO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(wO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(AO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(LO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(yO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(xO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c($O,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(kO,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(SO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(RO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(PO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(BO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(IO,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(NO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(qO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(jO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(DO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(GO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(OO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(VO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(XO,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(zO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(QO,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(WO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(UO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(HO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(JO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(YO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(KO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(eV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(oV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(rV,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(tV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(aV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(nV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(sV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(lV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(iV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cV,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(mV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(fV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(gV,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(hV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(uV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(pV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(_V,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(bV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(vV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(FV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(TV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(MV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(EV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(CV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(wV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(AV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(LV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(yV,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(xV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c($V,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(kV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(SV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(RV,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(PV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(BV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(IV,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(NV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(qV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(DV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(GV,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(OV,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(VV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(XV,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(zV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(QV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(WV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(UV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(HV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(JV,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(YV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(KV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(eX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(oX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(rX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(tX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(aX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o2,"id","transformers.AutoModelForPreTraining"),c(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o2,"href","#transformers.AutoModelForPreTraining"),c(bd,"class","relative group"),c(nX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(dX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(mX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(fX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(gX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_X,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(FX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TX,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(MX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(EX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(CX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(wX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(AX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(LX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(xX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c($X,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(kX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(SX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(RX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(PX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(BX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(IX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(NX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(qX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(DX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(OX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(XX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(zX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(QX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(WX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(UX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(HX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(JX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(YX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(KX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ZX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ez,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K2,"id","transformers.AutoModelForCausalLM"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForCausalLM"),c(Td,"class","relative group"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(nz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(sz,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(lz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(iz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(dz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(cz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(mz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(fz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(gz,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(hz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(pz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_z,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bz,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(vz,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(Mz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Ez,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Cz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(wz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Az,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(Lz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(yz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(xz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c($z,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(kz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Sz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Rz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Pz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Bz,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Iz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(qz,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(jz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Gz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Oz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Vz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ov,"id","transformers.AutoModelForMaskedLM"),c(Ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ov,"href","#transformers.AutoModelForMaskedLM"),c(Cd,"class","relative group"),c(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Uz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(Jz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Zz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(aQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(pQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ld,"class","relative group"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(PQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(BQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(IQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(NQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(jQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(DQ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(GQ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(VQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(QQ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(WQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UQ,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(HQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForSequenceClassification"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForSequenceClassification"),c($d,"class","relative group"),c(ZQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(OW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(VW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(XW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForMultipleChoice"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForMultipleChoice"),c(Rd,"class","relative group"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(aU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(nU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(sU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(lU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(iU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(dU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(cU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(mU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(fU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(gU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(hU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(uU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(pU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(_U,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(bU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(vU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(FU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(TU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(MU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(EU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(LU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($U,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.AutoModelForNextSentencePrediction"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.AutoModelForNextSentencePrediction"),c(Id,"class","relative group"),c(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(OU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.AutoModelForTokenClassification"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.AutoModelForTokenClassification"),c(jd,"class","relative group"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.AutoModelForQuestionAnswering"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.AutoModelForQuestionAnswering"),c(Od,"class","relative group"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RH,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IH,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(HH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KH,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(oJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sJ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(lJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(iJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cJ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(mJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hJ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(uJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_J,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(FJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.AutoModelForTableQuestionAnswering"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zd,"class","relative group"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Ud,"class","relative group"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(xJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c($J,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.AutoModelForImageClassification"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.AutoModelForImageClassification"),c(Kd,"class","relative group"),c(kJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(BJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(IJ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(NJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(qJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(jJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(DJ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(GJ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(OJ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(VJ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(XJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(QJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WJ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(UJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(HJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(KJ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.AutoModelForVideoClassification"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.AutoModelForVideoClassification"),c(oc,"class","relative group"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.AutoModelForVision2Seq"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.AutoModelForVision2Seq"),c(ac,"class","relative group"),c(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(lc,"class","relative group"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b4,"id","transformers.AutoModelForAudioClassification"),c(b4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b4,"href","#transformers.AutoModelForAudioClassification"),c(cc,"class","relative group"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.AutoModelForAudioFrameClassification"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.AutoModelForAudioFrameClassification"),c(gc,"class","relative group"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.AutoModelForCTC"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.AutoModelForCTC"),c(pc,"class","relative group"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(NY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(qY,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(jY,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(DY,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(GY,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(OY,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(VY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(XY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(zY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.AutoModelForSpeechSeq2Seq"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vc,"class","relative group"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(JY,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sC,"id","transformers.AutoModelForAudioXVector"),c(sC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sC,"href","#transformers.AutoModelForAudioXVector"),c(Mc,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(oK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(rK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(tK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(aK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.AutoModelForMaskedImageModeling"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.AutoModelForMaskedImageModeling"),c(wc,"class","relative group"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(dK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(cK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(mK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.AutoModelForObjectDetection"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.AutoModelForObjectDetection"),c(yc,"class","relative group"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(pK,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.AutoModelForImageSegmentation"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.AutoModelForImageSegmentation"),c(kc,"class","relative group"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PC,"id","transformers.AutoModelForSemanticSegmentation"),c(PC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PC,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pc,"class","relative group"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(wK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(AK,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(LK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(yK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.AutoModelForInstanceSegmentation"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nc,"class","relative group"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.TFAutoModel"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModel"),c(Dc,"class","relative group"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(NK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(qK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(jK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(DK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(GK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(OK,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(VK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(XK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(zK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(QK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(WK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(UK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HK,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(JK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(YK,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(KK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(ZK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(eZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(oZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(rZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(tZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(aZ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(nZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(sZ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(lZ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(iZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(dZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(cZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(mZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(fZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(gZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(hZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(uZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(pZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(_Z,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(bZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(vZ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(FZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(TZ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(MZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(EZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(CZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(wZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(AZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(LZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(yZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(xZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c($Z,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(kZ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(SZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(RZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(PZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(BZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(IZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.TFAutoModelForPreTraining"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.TFAutoModelForPreTraining"),c(Vc,"class","relative group"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(GZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(VZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(QZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(WZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(HZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(KZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ZZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(ree,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nee,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(see,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForCausalLM"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForCausalLM"),c(Qc,"class","relative group"),c(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(gee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(hee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(pee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(_ee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(vee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Fee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Tee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Mee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(Cee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.TFAutoModelForImageClassification"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.TFAutoModelForImageClassification"),c(Hc,"class","relative group"),c(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c($ee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(kee,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(See,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(Ree,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(Pee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(Bee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(Iee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Nee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(qee,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForSemanticSegmentation"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Kc,"class","relative group"),c(jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(Vee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(Xee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.TFAutoModelForMaskedLM"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.TFAutoModelForMaskedLM"),c(rm,"class","relative group"),c(zee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Jee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Yee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Kee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Zee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(eoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ooe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(roe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(toe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(aoe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(noe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(soe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(loe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ioe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(doe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(coe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(moe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(foe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(goe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.TFAutoModelForSeq2SeqLM"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(nm,"class","relative group"),c(hoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_oe,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(boe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(voe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(Foe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Moe,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(Eoe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(Coe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(woe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Aoe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.TFAutoModelForSequenceClassification"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.TFAutoModelForSequenceClassification"),c(im,"class","relative group"),c(Loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Xoe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(zoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Qoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Woe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Uoe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Hoe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Joe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Yoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Koe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Zoe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(ere,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ore,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(rre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.TFAutoModelForMultipleChoice"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.TFAutoModelForMultipleChoice"),c(mm,"class","relative group"),c(tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(ire,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(mre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(fre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(ure,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(pre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(_re,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(vre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Fre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Tre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Mre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.TFAutoModelForNextSentencePrediction"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(hm,"class","relative group"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Are,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Lre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_m,"class","relative group"),c(yre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Fm,"class","relative group"),c(Sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.TFAutoModelForTokenClassification"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.TFAutoModelForTokenClassification"),c(Em,"class","relative group"),c(Ire,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Gre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Ore,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(Vre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Xre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(zre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Qre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Wre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Ure,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Hre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Jre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Yre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Kre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Zre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(ete,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(ote,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(rte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(tte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(ate,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(nte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.TFAutoModelForQuestionAnswering"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Am,"class","relative group"),c(ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(cte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(mte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(fte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(gte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(hte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(ute,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(pte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(_te,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(bte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(vte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Fte,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Tte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Mte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Ete,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Cte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(wte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Ate,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Lte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(xte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GA,"id","transformers.TFAutoModelForVision2Seq"),c(GA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GA,"href","#transformers.TFAutoModelForVision2Seq"),c(xm,"class","relative group"),c($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rte,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zA,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(zA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zA,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Sm,"class","relative group"),c(Pte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ite,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nte,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HA,"id","transformers.FlaxAutoModel"),c(HA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HA,"href","#transformers.FlaxAutoModel"),c(Bm,"class","relative group"),c(qte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Ote,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(Vte,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(Xte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(zte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Qte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Wte,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Ute,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Hte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Jte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Yte,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Kte,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Zte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(eae,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(oae,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(rae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(tae,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(aae,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(nae,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(sae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(lae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(iae,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(dae,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(cae,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(mae,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(fae,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(gae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.FlaxAutoModelForCausalLM"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.FlaxAutoModelForCausalLM"),c(qm,"class","relative group"),c(hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_ae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(bae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(vae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Fae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Tae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Mae,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Eae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Cae,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(wae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Aae,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.FlaxAutoModelForPreTraining"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.FlaxAutoModelForPreTraining"),c(Gm,"class","relative group"),c(Lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(kae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Sae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Rae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Pae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Bae,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Iae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Nae,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(qae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Dae,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gae,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Oae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.FlaxAutoModelForMaskedLM"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Xm,"class","relative group"),c(Vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Wae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Uae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Hae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Jae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Yae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Kae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Zae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(ene,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(one,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Wm,"class","relative group"),c(rne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ane,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sne,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(lne,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ine,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(dne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(cne,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(mne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gne,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A7,"id","transformers.FlaxAutoModelForSequenceClassification"),c(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A7,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Jm,"class","relative group"),c(une,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Fne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Tne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Mne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Ene,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Cne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Ane,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Lne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Zm,"class","relative group"),c(yne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Sne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Rne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Pne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Bne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Ine,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Nne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(qne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Dne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.FlaxAutoModelForTokenClassification"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(rf,"class","relative group"),c(Gne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(One,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Qne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Wne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Une,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Hne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Jne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Yne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dL,"id","transformers.FlaxAutoModelForMultipleChoice"),c(dL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dL,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(nf,"class","relative group"),c(Kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ese,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ose,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(ase,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(ise,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FL,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(FL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FL,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(df,"class","relative group"),c(dse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CL,"id","transformers.FlaxAutoModelForImageClassification"),c(CL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CL,"href","#transformers.FlaxAutoModelForImageClassification"),c(ff,"class","relative group"),c(gse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pse,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(_se,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xL,"id","transformers.FlaxAutoModelForVision2Seq"),c(xL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xL,"href","#transformers.FlaxAutoModelForVision2Seq"),c(uf,"class","relative group"),c(bse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tse,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Lo),e(Lo,od),b(m,Tf,_),b(m,ut,_),e(ut,rd),e(ut,td),e(td,i9),e(ut,Mf),b(m,Ve,_),b(m,Ue,_),e(Ue,ad),e(Ue,Zn),e(Zn,d9),e(Ue,es),e(Ue,os),e(os,c9),e(Ue,nd),e(Ue,rs),e(rs,m9),e(Ue,sd),b(m,Ef,_),M(Qa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,fB),e(Ae,ld),e(ld,gB),e(Ae,hB),b(m,yo,_),b(m,Wa,_),e(Wa,uB),e(Wa,Cf),e(Cf,pB),e(Wa,_oo),b(m,DJe,_),b(m,id,_),e(id,wf),e(wf,wie),M(f9,wie,null),e(id,boo),e(id,Aie),e(Aie,voo),b(m,GJe,_),b(m,ts,_),e(ts,Foo),e(ts,Lie),e(Lie,Too),e(ts,Moo),e(ts,yie),e(yie,Eoo),e(ts,Coo),b(m,OJe,_),M(g9,m,_),b(m,VJe,_),b(m,_B,_),e(_B,woo),b(m,XJe,_),M(Af,m,_),b(m,zJe,_),b(m,dd,_),e(dd,Lf),e(Lf,xie),M(h9,xie,null),e(dd,Aoo),e(dd,$ie),e($ie,Loo),b(m,QJe,_),b(m,xo,_),M(u9,xo,null),e(xo,yoo),e(xo,p9),e(p9,xoo),e(p9,bB),e(bB,$oo),e(p9,koo),e(xo,Soo),e(xo,_9),e(_9,Roo),e(_9,kie),e(kie,Poo),e(_9,Boo),e(xo,Ioo),e(xo,Pr),M(b9,Pr,null),e(Pr,Noo),e(Pr,Sie),e(Sie,qoo),e(Pr,joo),e(Pr,cd),e(cd,Doo),e(cd,Rie),e(Rie,Goo),e(cd,Ooo),e(cd,Pie),e(Pie,Voo),e(cd,Xoo),e(Pr,zoo),e(Pr,A),e(A,yf),e(yf,Bie),e(Bie,Qoo),e(yf,Woo),e(yf,vB),e(vB,Uoo),e(yf,Hoo),e(A,Joo),e(A,xf),e(xf,Iie),e(Iie,Yoo),e(xf,Koo),e(xf,FB),e(FB,Zoo),e(xf,ero),e(A,oro),e(A,$f),e($f,Nie),e(Nie,rro),e($f,tro),e($f,TB),e(TB,aro),e($f,nro),e(A,sro),e(A,kf),e(kf,qie),e(qie,lro),e(kf,iro),e(kf,MB),e(MB,dro),e(kf,cro),e(A,mro),e(A,Sf),e(Sf,jie),e(jie,fro),e(Sf,gro),e(Sf,EB),e(EB,hro),e(Sf,uro),e(A,pro),e(A,Rf),e(Rf,Die),e(Die,_ro),e(Rf,bro),e(Rf,CB),e(CB,vro),e(Rf,Fro),e(A,Tro),e(A,Pf),e(Pf,Gie),e(Gie,Mro),e(Pf,Ero),e(Pf,wB),e(wB,Cro),e(Pf,wro),e(A,Aro),e(A,Bf),e(Bf,Oie),e(Oie,Lro),e(Bf,yro),e(Bf,AB),e(AB,xro),e(Bf,$ro),e(A,kro),e(A,If),e(If,Vie),e(Vie,Sro),e(If,Rro),e(If,LB),e(LB,Pro),e(If,Bro),e(A,Iro),e(A,Nf),e(Nf,Xie),e(Xie,Nro),e(Nf,qro),e(Nf,yB),e(yB,jro),e(Nf,Dro),e(A,Gro),e(A,qf),e(qf,zie),e(zie,Oro),e(qf,Vro),e(qf,xB),e(xB,Xro),e(qf,zro),e(A,Qro),e(A,jf),e(jf,Qie),e(Qie,Wro),e(jf,Uro),e(jf,$B),e($B,Hro),e(jf,Jro),e(A,Yro),e(A,Df),e(Df,Wie),e(Wie,Kro),e(Df,Zro),e(Df,kB),e(kB,eto),e(Df,oto),e(A,rto),e(A,Gf),e(Gf,Uie),e(Uie,tto),e(Gf,ato),e(Gf,SB),e(SB,nto),e(Gf,sto),e(A,lto),e(A,Of),e(Of,Hie),e(Hie,ito),e(Of,dto),e(Of,RB),e(RB,cto),e(Of,mto),e(A,fto),e(A,Vf),e(Vf,Jie),e(Jie,gto),e(Vf,hto),e(Vf,PB),e(PB,uto),e(Vf,pto),e(A,_to),e(A,Xf),e(Xf,Yie),e(Yie,bto),e(Xf,vto),e(Xf,BB),e(BB,Fto),e(Xf,Tto),e(A,Mto),e(A,zf),e(zf,Kie),e(Kie,Eto),e(zf,Cto),e(zf,IB),e(IB,wto),e(zf,Ato),e(A,Lto),e(A,Qf),e(Qf,Zie),e(Zie,yto),e(Qf,xto),e(Qf,NB),e(NB,$to),e(Qf,kto),e(A,Sto),e(A,Wf),e(Wf,ede),e(ede,Rto),e(Wf,Pto),e(Wf,qB),e(qB,Bto),e(Wf,Ito),e(A,Nto),e(A,Uf),e(Uf,ode),e(ode,qto),e(Uf,jto),e(Uf,jB),e(jB,Dto),e(Uf,Gto),e(A,Oto),e(A,Hf),e(Hf,rde),e(rde,Vto),e(Hf,Xto),e(Hf,DB),e(DB,zto),e(Hf,Qto),e(A,Wto),e(A,Jf),e(Jf,tde),e(tde,Uto),e(Jf,Hto),e(Jf,GB),e(GB,Jto),e(Jf,Yto),e(A,Kto),e(A,Yf),e(Yf,ade),e(ade,Zto),e(Yf,eao),e(Yf,OB),e(OB,oao),e(Yf,rao),e(A,tao),e(A,Kf),e(Kf,nde),e(nde,aao),e(Kf,nao),e(Kf,VB),e(VB,sao),e(Kf,lao),e(A,iao),e(A,Zf),e(Zf,sde),e(sde,dao),e(Zf,cao),e(Zf,XB),e(XB,mao),e(Zf,fao),e(A,gao),e(A,eg),e(eg,lde),e(lde,hao),e(eg,uao),e(eg,zB),e(zB,pao),e(eg,_ao),e(A,bao),e(A,og),e(og,ide),e(ide,vao),e(og,Fao),e(og,QB),e(QB,Tao),e(og,Mao),e(A,Eao),e(A,rg),e(rg,dde),e(dde,Cao),e(rg,wao),e(rg,WB),e(WB,Aao),e(rg,Lao),e(A,yao),e(A,tg),e(tg,cde),e(cde,xao),e(tg,$ao),e(tg,UB),e(UB,kao),e(tg,Sao),e(A,Rao),e(A,ag),e(ag,mde),e(mde,Pao),e(ag,Bao),e(ag,HB),e(HB,Iao),e(ag,Nao),e(A,qao),e(A,ng),e(ng,fde),e(fde,jao),e(ng,Dao),e(ng,JB),e(JB,Gao),e(ng,Oao),e(A,Vao),e(A,sg),e(sg,gde),e(gde,Xao),e(sg,zao),e(sg,YB),e(YB,Qao),e(sg,Wao),e(A,Uao),e(A,lg),e(lg,hde),e(hde,Hao),e(lg,Jao),e(lg,KB),e(KB,Yao),e(lg,Kao),e(A,Zao),e(A,ig),e(ig,ude),e(ude,eno),e(ig,ono),e(ig,ZB),e(ZB,rno),e(ig,tno),e(A,ano),e(A,dg),e(dg,pde),e(pde,nno),e(dg,sno),e(dg,eI),e(eI,lno),e(dg,ino),e(A,dno),e(A,cg),e(cg,_de),e(_de,cno),e(cg,mno),e(cg,oI),e(oI,fno),e(cg,gno),e(A,hno),e(A,mg),e(mg,bde),e(bde,uno),e(mg,pno),e(mg,rI),e(rI,_no),e(mg,bno),e(A,vno),e(A,fg),e(fg,vde),e(vde,Fno),e(fg,Tno),e(fg,tI),e(tI,Mno),e(fg,Eno),e(A,Cno),e(A,gg),e(gg,Fde),e(Fde,wno),e(gg,Ano),e(gg,aI),e(aI,Lno),e(gg,yno),e(A,xno),e(A,hg),e(hg,Tde),e(Tde,$no),e(hg,kno),e(hg,nI),e(nI,Sno),e(hg,Rno),e(A,Pno),e(A,ug),e(ug,Mde),e(Mde,Bno),e(ug,Ino),e(ug,sI),e(sI,Nno),e(ug,qno),e(A,jno),e(A,pg),e(pg,Ede),e(Ede,Dno),e(pg,Gno),e(pg,lI),e(lI,Ono),e(pg,Vno),e(A,Xno),e(A,_g),e(_g,Cde),e(Cde,zno),e(_g,Qno),e(_g,iI),e(iI,Wno),e(_g,Uno),e(A,Hno),e(A,bg),e(bg,wde),e(wde,Jno),e(bg,Yno),e(bg,dI),e(dI,Kno),e(bg,Zno),e(A,eso),e(A,vg),e(vg,Ade),e(Ade,oso),e(vg,rso),e(vg,cI),e(cI,tso),e(vg,aso),e(A,nso),e(A,Fg),e(Fg,Lde),e(Lde,sso),e(Fg,lso),e(Fg,mI),e(mI,iso),e(Fg,dso),e(A,cso),e(A,Tg),e(Tg,yde),e(yde,mso),e(Tg,fso),e(Tg,fI),e(fI,gso),e(Tg,hso),e(A,uso),e(A,Mg),e(Mg,xde),e(xde,pso),e(Mg,_so),e(Mg,gI),e(gI,bso),e(Mg,vso),e(A,Fso),e(A,Eg),e(Eg,$de),e($de,Tso),e(Eg,Mso),e(Eg,hI),e(hI,Eso),e(Eg,Cso),e(A,wso),e(A,Cg),e(Cg,kde),e(kde,Aso),e(Cg,Lso),e(Cg,uI),e(uI,yso),e(Cg,xso),e(A,$so),e(A,wg),e(wg,Sde),e(Sde,kso),e(wg,Sso),e(wg,pI),e(pI,Rso),e(wg,Pso),e(A,Bso),e(A,Ag),e(Ag,Rde),e(Rde,Iso),e(Ag,Nso),e(Ag,_I),e(_I,qso),e(Ag,jso),e(A,Dso),e(A,Lg),e(Lg,Pde),e(Pde,Gso),e(Lg,Oso),e(Lg,bI),e(bI,Vso),e(Lg,Xso),e(A,zso),e(A,yg),e(yg,Bde),e(Bde,Qso),e(yg,Wso),e(yg,vI),e(vI,Uso),e(yg,Hso),e(A,Jso),e(A,xg),e(xg,Ide),e(Ide,Yso),e(xg,Kso),e(xg,FI),e(FI,Zso),e(xg,elo),e(A,olo),e(A,$g),e($g,Nde),e(Nde,rlo),e($g,tlo),e($g,TI),e(TI,alo),e($g,nlo),e(A,slo),e(A,kg),e(kg,qde),e(qde,llo),e(kg,ilo),e(kg,MI),e(MI,dlo),e(kg,clo),e(A,mlo),e(A,Sg),e(Sg,jde),e(jde,flo),e(Sg,glo),e(Sg,EI),e(EI,hlo),e(Sg,ulo),e(A,plo),e(A,Rg),e(Rg,Dde),e(Dde,_lo),e(Rg,blo),e(Rg,CI),e(CI,vlo),e(Rg,Flo),e(A,Tlo),e(A,Pg),e(Pg,Gde),e(Gde,Mlo),e(Pg,Elo),e(Pg,wI),e(wI,Clo),e(Pg,wlo),e(A,Alo),e(A,Bg),e(Bg,Ode),e(Ode,Llo),e(Bg,ylo),e(Bg,AI),e(AI,xlo),e(Bg,$lo),e(A,klo),e(A,Ig),e(Ig,Vde),e(Vde,Slo),e(Ig,Rlo),e(Ig,LI),e(LI,Plo),e(Ig,Blo),e(A,Ilo),e(A,Ng),e(Ng,Xde),e(Xde,Nlo),e(Ng,qlo),e(Ng,yI),e(yI,jlo),e(Ng,Dlo),e(A,Glo),e(A,qg),e(qg,zde),e(zde,Olo),e(qg,Vlo),e(qg,xI),e(xI,Xlo),e(qg,zlo),e(A,Qlo),e(A,jg),e(jg,Qde),e(Qde,Wlo),e(jg,Ulo),e(jg,$I),e($I,Hlo),e(jg,Jlo),e(A,Ylo),e(A,Dg),e(Dg,Wde),e(Wde,Klo),e(Dg,Zlo),e(Dg,kI),e(kI,eio),e(Dg,oio),e(A,rio),e(A,Gg),e(Gg,Ude),e(Ude,tio),e(Gg,aio),e(Gg,SI),e(SI,nio),e(Gg,sio),e(A,lio),e(A,Og),e(Og,Hde),e(Hde,iio),e(Og,dio),e(Og,RI),e(RI,cio),e(Og,mio),e(A,fio),e(A,Vg),e(Vg,Jde),e(Jde,gio),e(Vg,hio),e(Vg,PI),e(PI,uio),e(Vg,pio),e(A,_io),e(A,Xg),e(Xg,Yde),e(Yde,bio),e(Xg,vio),e(Xg,BI),e(BI,Fio),e(Xg,Tio),e(A,Mio),e(A,zg),e(zg,Kde),e(Kde,Eio),e(zg,Cio),e(zg,II),e(II,wio),e(zg,Aio),e(A,Lio),e(A,Qg),e(Qg,Zde),e(Zde,yio),e(Qg,xio),e(Qg,NI),e(NI,$io),e(Qg,kio),e(A,Sio),e(A,Wg),e(Wg,ece),e(ece,Rio),e(Wg,Pio),e(Wg,qI),e(qI,Bio),e(Wg,Iio),e(A,Nio),e(A,Ug),e(Ug,oce),e(oce,qio),e(Ug,jio),e(Ug,jI),e(jI,Dio),e(Ug,Gio),e(A,Oio),e(A,Hg),e(Hg,rce),e(rce,Vio),e(Hg,Xio),e(Hg,DI),e(DI,zio),e(Hg,Qio),e(A,Wio),e(A,Jg),e(Jg,tce),e(tce,Uio),e(Jg,Hio),e(Jg,GI),e(GI,Jio),e(Jg,Yio),e(A,Kio),e(A,Yg),e(Yg,ace),e(ace,Zio),e(Yg,edo),e(Yg,OI),e(OI,odo),e(Yg,rdo),e(A,tdo),e(A,Kg),e(Kg,nce),e(nce,ado),e(Kg,ndo),e(Kg,VI),e(VI,sdo),e(Kg,ldo),e(A,ido),e(A,Zg),e(Zg,sce),e(sce,ddo),e(Zg,cdo),e(Zg,XI),e(XI,mdo),e(Zg,fdo),e(A,gdo),e(A,eh),e(eh,lce),e(lce,hdo),e(eh,udo),e(eh,zI),e(zI,pdo),e(eh,_do),e(A,bdo),e(A,oh),e(oh,ice),e(ice,vdo),e(oh,Fdo),e(oh,QI),e(QI,Tdo),e(oh,Mdo),e(A,Edo),e(A,rh),e(rh,dce),e(dce,Cdo),e(rh,wdo),e(rh,WI),e(WI,Ado),e(rh,Ldo),e(A,ydo),e(A,th),e(th,cce),e(cce,xdo),e(th,$do),e(th,UI),e(UI,kdo),e(th,Sdo),e(A,Rdo),e(A,ah),e(ah,mce),e(mce,Pdo),e(ah,Bdo),e(ah,HI),e(HI,Ido),e(ah,Ndo),e(A,qdo),e(A,nh),e(nh,fce),e(fce,jdo),e(nh,Ddo),e(nh,JI),e(JI,Gdo),e(nh,Odo),e(A,Vdo),e(A,sh),e(sh,gce),e(gce,Xdo),e(sh,zdo),e(sh,YI),e(YI,Qdo),e(sh,Wdo),e(A,Udo),e(A,lh),e(lh,hce),e(hce,Hdo),e(lh,Jdo),e(lh,KI),e(KI,Ydo),e(lh,Kdo),e(A,Zdo),e(A,ih),e(ih,uce),e(uce,eco),e(ih,oco),e(ih,ZI),e(ZI,rco),e(ih,tco),e(A,aco),e(A,dh),e(dh,pce),e(pce,nco),e(dh,sco),e(dh,eN),e(eN,lco),e(dh,ico),e(A,dco),e(A,ch),e(ch,_ce),e(_ce,cco),e(ch,mco),e(ch,oN),e(oN,fco),e(ch,gco),e(A,hco),e(A,mh),e(mh,bce),e(bce,uco),e(mh,pco),e(mh,rN),e(rN,_co),e(mh,bco),e(A,vco),e(A,fh),e(fh,vce),e(vce,Fco),e(fh,Tco),e(fh,tN),e(tN,Mco),e(fh,Eco),e(A,Cco),e(A,gh),e(gh,Fce),e(Fce,wco),e(gh,Aco),e(gh,aN),e(aN,Lco),e(gh,yco),e(A,xco),e(A,hh),e(hh,Tce),e(Tce,$co),e(hh,kco),e(hh,nN),e(nN,Sco),e(hh,Rco),e(A,Pco),e(A,uh),e(uh,Mce),e(Mce,Bco),e(uh,Ico),e(uh,sN),e(sN,Nco),e(uh,qco),e(A,jco),e(A,ph),e(ph,Ece),e(Ece,Dco),e(ph,Gco),e(ph,lN),e(lN,Oco),e(ph,Vco),e(A,Xco),e(A,_h),e(_h,Cce),e(Cce,zco),e(_h,Qco),e(_h,iN),e(iN,Wco),e(_h,Uco),e(A,Hco),e(A,bh),e(bh,wce),e(wce,Jco),e(bh,Yco),e(bh,dN),e(dN,Kco),e(bh,Zco),e(A,emo),e(A,vh),e(vh,Ace),e(Ace,omo),e(vh,rmo),e(vh,cN),e(cN,tmo),e(vh,amo),e(A,nmo),e(A,Fh),e(Fh,Lce),e(Lce,smo),e(Fh,lmo),e(Fh,mN),e(mN,imo),e(Fh,dmo),e(A,cmo),e(A,Th),e(Th,yce),e(yce,mmo),e(Th,fmo),e(Th,fN),e(fN,gmo),e(Th,hmo),e(A,umo),e(A,Mh),e(Mh,xce),e(xce,pmo),e(Mh,_mo),e(Mh,gN),e(gN,bmo),e(Mh,vmo),e(A,Fmo),e(A,Eh),e(Eh,$ce),e($ce,Tmo),e(Eh,Mmo),e(Eh,hN),e(hN,Emo),e(Eh,Cmo),e(A,wmo),e(A,Ch),e(Ch,kce),e(kce,Amo),e(Ch,Lmo),e(Ch,uN),e(uN,ymo),e(Ch,xmo),e(A,$mo),e(A,wh),e(wh,Sce),e(Sce,kmo),e(wh,Smo),e(wh,pN),e(pN,Rmo),e(wh,Pmo),e(A,Bmo),e(A,Ah),e(Ah,Rce),e(Rce,Imo),e(Ah,Nmo),e(Ah,_N),e(_N,qmo),e(Ah,jmo),e(A,Dmo),e(A,Lh),e(Lh,Pce),e(Pce,Gmo),e(Lh,Omo),e(Lh,bN),e(bN,Vmo),e(Lh,Xmo),e(A,zmo),e(A,yh),e(yh,Bce),e(Bce,Qmo),e(yh,Wmo),e(yh,vN),e(vN,Umo),e(yh,Hmo),e(A,Jmo),e(A,xh),e(xh,Ice),e(Ice,Ymo),e(xh,Kmo),e(xh,FN),e(FN,Zmo),e(xh,efo),e(A,ofo),e(A,$h),e($h,Nce),e(Nce,rfo),e($h,tfo),e($h,TN),e(TN,afo),e($h,nfo),e(A,sfo),e(A,kh),e(kh,qce),e(qce,lfo),e(kh,ifo),e(kh,MN),e(MN,dfo),e(kh,cfo),e(A,mfo),e(A,Sh),e(Sh,jce),e(jce,ffo),e(Sh,gfo),e(Sh,EN),e(EN,hfo),e(Sh,ufo),e(A,pfo),e(A,Rh),e(Rh,Dce),e(Dce,_fo),e(Rh,bfo),e(Rh,CN),e(CN,vfo),e(Rh,Ffo),e(A,Tfo),e(A,Ph),e(Ph,Gce),e(Gce,Mfo),e(Ph,Efo),e(Ph,wN),e(wN,Cfo),e(Ph,wfo),e(A,Afo),e(A,Bh),e(Bh,Oce),e(Oce,Lfo),e(Bh,yfo),e(Bh,AN),e(AN,xfo),e(Bh,$fo),e(A,kfo),e(A,Ih),e(Ih,Vce),e(Vce,Sfo),e(Ih,Rfo),e(Ih,LN),e(LN,Pfo),e(Ih,Bfo),e(A,Ifo),e(A,Nh),e(Nh,Xce),e(Xce,Nfo),e(Nh,qfo),e(Nh,yN),e(yN,jfo),e(Nh,Dfo),e(A,Gfo),e(A,qh),e(qh,zce),e(zce,Ofo),e(qh,Vfo),e(qh,xN),e(xN,Xfo),e(qh,zfo),e(A,Qfo),e(A,jh),e(jh,Qce),e(Qce,Wfo),e(jh,Ufo),e(jh,$N),e($N,Hfo),e(jh,Jfo),e(A,Yfo),e(A,Dh),e(Dh,Wce),e(Wce,Kfo),e(Dh,Zfo),e(Dh,kN),e(kN,ego),e(Dh,ogo),e(A,rgo),e(A,Gh),e(Gh,Uce),e(Uce,tgo),e(Gh,ago),e(Gh,SN),e(SN,ngo),e(Gh,sgo),e(A,lgo),e(A,Oh),e(Oh,Hce),e(Hce,igo),e(Oh,dgo),e(Oh,RN),e(RN,cgo),e(Oh,mgo),e(A,fgo),e(A,Vh),e(Vh,Jce),e(Jce,ggo),e(Vh,hgo),e(Vh,PN),e(PN,ugo),e(Vh,pgo),e(Pr,_go),M(Xh,Pr,null),e(xo,bgo),e(xo,zh),M(v9,zh,null),e(zh,vgo),e(zh,Yce),e(Yce,Fgo),b(m,WJe,_),b(m,md,_),e(md,Qh),e(Qh,Kce),M(F9,Kce,null),e(md,Tgo),e(md,Zce),e(Zce,Mgo),b(m,UJe,_),b(m,$o,_),M(T9,$o,null),e($o,Ego),e($o,M9),e(M9,Cgo),e(M9,BN),e(BN,wgo),e(M9,Ago),e($o,Lgo),e($o,E9),e(E9,ygo),e(E9,eme),e(eme,xgo),e(E9,$go),e($o,kgo),e($o,Br),M(C9,Br,null),e(Br,Sgo),e(Br,ome),e(ome,Rgo),e(Br,Pgo),e(Br,Ua),e(Ua,Bgo),e(Ua,rme),e(rme,Igo),e(Ua,Ngo),e(Ua,tme),e(tme,qgo),e(Ua,jgo),e(Ua,ame),e(ame,Dgo),e(Ua,Ggo),e(Br,Ogo),e(Br,k),e(k,as),e(as,nme),e(nme,Vgo),e(as,Xgo),e(as,IN),e(IN,zgo),e(as,Qgo),e(as,NN),e(NN,Wgo),e(as,Ugo),e(k,Hgo),e(k,ns),e(ns,sme),e(sme,Jgo),e(ns,Ygo),e(ns,qN),e(qN,Kgo),e(ns,Zgo),e(ns,jN),e(jN,eho),e(ns,oho),e(k,rho),e(k,ss),e(ss,lme),e(lme,tho),e(ss,aho),e(ss,DN),e(DN,nho),e(ss,sho),e(ss,GN),e(GN,lho),e(ss,iho),e(k,dho),e(k,Wh),e(Wh,ime),e(ime,cho),e(Wh,mho),e(Wh,ON),e(ON,fho),e(Wh,gho),e(k,hho),e(k,ls),e(ls,dme),e(dme,uho),e(ls,pho),e(ls,VN),e(VN,_ho),e(ls,bho),e(ls,XN),e(XN,vho),e(ls,Fho),e(k,Tho),e(k,Uh),e(Uh,cme),e(cme,Mho),e(Uh,Eho),e(Uh,zN),e(zN,Cho),e(Uh,who),e(k,Aho),e(k,Hh),e(Hh,mme),e(mme,Lho),e(Hh,yho),e(Hh,QN),e(QN,xho),e(Hh,$ho),e(k,kho),e(k,Jh),e(Jh,fme),e(fme,Sho),e(Jh,Rho),e(Jh,WN),e(WN,Pho),e(Jh,Bho),e(k,Iho),e(k,is),e(is,gme),e(gme,Nho),e(is,qho),e(is,UN),e(UN,jho),e(is,Dho),e(is,HN),e(HN,Gho),e(is,Oho),e(k,Vho),e(k,ds),e(ds,hme),e(hme,Xho),e(ds,zho),e(ds,JN),e(JN,Qho),e(ds,Who),e(ds,YN),e(YN,Uho),e(ds,Hho),e(k,Jho),e(k,cs),e(cs,ume),e(ume,Yho),e(cs,Kho),e(cs,KN),e(KN,Zho),e(cs,euo),e(cs,ZN),e(ZN,ouo),e(cs,ruo),e(k,tuo),e(k,Yh),e(Yh,pme),e(pme,auo),e(Yh,nuo),e(Yh,eq),e(eq,suo),e(Yh,luo),e(k,iuo),e(k,Kh),e(Kh,_me),e(_me,duo),e(Kh,cuo),e(Kh,oq),e(oq,muo),e(Kh,fuo),e(k,guo),e(k,Zh),e(Zh,bme),e(bme,huo),e(Zh,uuo),e(Zh,rq),e(rq,puo),e(Zh,_uo),e(k,buo),e(k,ms),e(ms,vme),e(vme,vuo),e(ms,Fuo),e(ms,tq),e(tq,Tuo),e(ms,Muo),e(ms,aq),e(aq,Euo),e(ms,Cuo),e(k,wuo),e(k,eu),e(eu,Fme),e(Fme,Auo),e(eu,Luo),e(eu,nq),e(nq,yuo),e(eu,xuo),e(k,$uo),e(k,fs),e(fs,Tme),e(Tme,kuo),e(fs,Suo),e(fs,sq),e(sq,Ruo),e(fs,Puo),e(fs,lq),e(lq,Buo),e(fs,Iuo),e(k,Nuo),e(k,gs),e(gs,Mme),e(Mme,quo),e(gs,juo),e(gs,iq),e(iq,Duo),e(gs,Guo),e(gs,dq),e(dq,Ouo),e(gs,Vuo),e(k,Xuo),e(k,hs),e(hs,Eme),e(Eme,zuo),e(hs,Quo),e(hs,cq),e(cq,Wuo),e(hs,Uuo),e(hs,mq),e(mq,Huo),e(hs,Juo),e(k,Yuo),e(k,us),e(us,Cme),e(Cme,Kuo),e(us,Zuo),e(us,fq),e(fq,epo),e(us,opo),e(us,gq),e(gq,rpo),e(us,tpo),e(k,apo),e(k,ou),e(ou,wme),e(wme,npo),e(ou,spo),e(ou,hq),e(hq,lpo),e(ou,ipo),e(k,dpo),e(k,ps),e(ps,Ame),e(Ame,cpo),e(ps,mpo),e(ps,uq),e(uq,fpo),e(ps,gpo),e(ps,pq),e(pq,hpo),e(ps,upo),e(k,ppo),e(k,_s),e(_s,Lme),e(Lme,_po),e(_s,bpo),e(_s,_q),e(_q,vpo),e(_s,Fpo),e(_s,bq),e(bq,Tpo),e(_s,Mpo),e(k,Epo),e(k,bs),e(bs,yme),e(yme,Cpo),e(bs,wpo),e(bs,vq),e(vq,Apo),e(bs,Lpo),e(bs,Fq),e(Fq,ypo),e(bs,xpo),e(k,$po),e(k,vs),e(vs,xme),e(xme,kpo),e(vs,Spo),e(vs,Tq),e(Tq,Rpo),e(vs,Ppo),e(vs,Mq),e(Mq,Bpo),e(vs,Ipo),e(k,Npo),e(k,Fs),e(Fs,$me),e($me,qpo),e(Fs,jpo),e(Fs,Eq),e(Eq,Dpo),e(Fs,Gpo),e(Fs,Cq),e(Cq,Opo),e(Fs,Vpo),e(k,Xpo),e(k,Ts),e(Ts,kme),e(kme,zpo),e(Ts,Qpo),e(Ts,wq),e(wq,Wpo),e(Ts,Upo),e(Ts,Aq),e(Aq,Hpo),e(Ts,Jpo),e(k,Ypo),e(k,ru),e(ru,Sme),e(Sme,Kpo),e(ru,Zpo),e(ru,Lq),e(Lq,e_o),e(ru,o_o),e(k,r_o),e(k,Ms),e(Ms,Rme),e(Rme,t_o),e(Ms,a_o),e(Ms,yq),e(yq,n_o),e(Ms,s_o),e(Ms,xq),e(xq,l_o),e(Ms,i_o),e(k,d_o),e(k,tu),e(tu,Pme),e(Pme,c_o),e(tu,m_o),e(tu,$q),e($q,f_o),e(tu,g_o),e(k,h_o),e(k,Es),e(Es,Bme),e(Bme,u_o),e(Es,p_o),e(Es,kq),e(kq,__o),e(Es,b_o),e(Es,Sq),e(Sq,v_o),e(Es,F_o),e(k,T_o),e(k,Cs),e(Cs,Ime),e(Ime,M_o),e(Cs,E_o),e(Cs,Rq),e(Rq,C_o),e(Cs,w_o),e(Cs,Pq),e(Pq,A_o),e(Cs,L_o),e(k,y_o),e(k,ws),e(ws,Nme),e(Nme,x_o),e(ws,$_o),e(ws,Bq),e(Bq,k_o),e(ws,S_o),e(ws,Iq),e(Iq,R_o),e(ws,P_o),e(k,B_o),e(k,au),e(au,qme),e(qme,I_o),e(au,N_o),e(au,Nq),e(Nq,q_o),e(au,j_o),e(k,D_o),e(k,As),e(As,jme),e(jme,G_o),e(As,O_o),e(As,qq),e(qq,V_o),e(As,X_o),e(As,jq),e(jq,z_o),e(As,Q_o),e(k,W_o),e(k,Ls),e(Ls,Dme),e(Dme,U_o),e(Ls,H_o),e(Ls,Dq),e(Dq,J_o),e(Ls,Y_o),e(Ls,Gq),e(Gq,K_o),e(Ls,Z_o),e(k,ebo),e(k,ys),e(ys,Gme),e(Gme,obo),e(ys,rbo),e(ys,Oq),e(Oq,tbo),e(ys,abo),e(ys,Vq),e(Vq,nbo),e(ys,sbo),e(k,lbo),e(k,nu),e(nu,Ome),e(Ome,ibo),e(nu,dbo),e(nu,Xq),e(Xq,cbo),e(nu,mbo),e(k,fbo),e(k,xs),e(xs,Vme),e(Vme,gbo),e(xs,hbo),e(xs,zq),e(zq,ubo),e(xs,pbo),e(xs,Qq),e(Qq,_bo),e(xs,bbo),e(k,vbo),e(k,$s),e($s,Xme),e(Xme,Fbo),e($s,Tbo),e($s,Wq),e(Wq,Mbo),e($s,Ebo),e($s,Uq),e(Uq,Cbo),e($s,wbo),e(k,Abo),e(k,ks),e(ks,zme),e(zme,Lbo),e(ks,ybo),e(ks,Hq),e(Hq,xbo),e(ks,$bo),e(ks,Jq),e(Jq,kbo),e(ks,Sbo),e(k,Rbo),e(k,Ss),e(Ss,Qme),e(Qme,Pbo),e(Ss,Bbo),e(Ss,Yq),e(Yq,Ibo),e(Ss,Nbo),e(Ss,Kq),e(Kq,qbo),e(Ss,jbo),e(k,Dbo),e(k,Rs),e(Rs,Wme),e(Wme,Gbo),e(Rs,Obo),e(Rs,Zq),e(Zq,Vbo),e(Rs,Xbo),e(Rs,ej),e(ej,zbo),e(Rs,Qbo),e(k,Wbo),e(k,Ps),e(Ps,Ume),e(Ume,Ubo),e(Ps,Hbo),e(Ps,oj),e(oj,Jbo),e(Ps,Ybo),e(Ps,rj),e(rj,Kbo),e(Ps,Zbo),e(k,e2o),e(k,Bs),e(Bs,Hme),e(Hme,o2o),e(Bs,r2o),e(Bs,tj),e(tj,t2o),e(Bs,a2o),e(Bs,aj),e(aj,n2o),e(Bs,s2o),e(k,l2o),e(k,Is),e(Is,Jme),e(Jme,i2o),e(Is,d2o),e(Is,nj),e(nj,c2o),e(Is,m2o),e(Is,sj),e(sj,f2o),e(Is,g2o),e(k,h2o),e(k,su),e(su,Yme),e(Yme,u2o),e(su,p2o),e(su,lj),e(lj,_2o),e(su,b2o),e(k,v2o),e(k,Ns),e(Ns,Kme),e(Kme,F2o),e(Ns,T2o),e(Ns,ij),e(ij,M2o),e(Ns,E2o),e(Ns,dj),e(dj,C2o),e(Ns,w2o),e(k,A2o),e(k,lu),e(lu,Zme),e(Zme,L2o),e(lu,y2o),e(lu,cj),e(cj,x2o),e(lu,$2o),e(k,k2o),e(k,iu),e(iu,efe),e(efe,S2o),e(iu,R2o),e(iu,mj),e(mj,P2o),e(iu,B2o),e(k,I2o),e(k,qs),e(qs,ofe),e(ofe,N2o),e(qs,q2o),e(qs,fj),e(fj,j2o),e(qs,D2o),e(qs,gj),e(gj,G2o),e(qs,O2o),e(k,V2o),e(k,js),e(js,rfe),e(rfe,X2o),e(js,z2o),e(js,hj),e(hj,Q2o),e(js,W2o),e(js,uj),e(uj,U2o),e(js,H2o),e(k,J2o),e(k,Ds),e(Ds,tfe),e(tfe,Y2o),e(Ds,K2o),e(Ds,pj),e(pj,Z2o),e(Ds,evo),e(Ds,_j),e(_j,ovo),e(Ds,rvo),e(k,tvo),e(k,du),e(du,afe),e(afe,avo),e(du,nvo),e(du,bj),e(bj,svo),e(du,lvo),e(k,ivo),e(k,Gs),e(Gs,nfe),e(nfe,dvo),e(Gs,cvo),e(Gs,vj),e(vj,mvo),e(Gs,fvo),e(Gs,Fj),e(Fj,gvo),e(Gs,hvo),e(k,uvo),e(k,Os),e(Os,sfe),e(sfe,pvo),e(Os,_vo),e(Os,Tj),e(Tj,bvo),e(Os,vvo),e(Os,Mj),e(Mj,Fvo),e(Os,Tvo),e(k,Mvo),e(k,Vs),e(Vs,lfe),e(lfe,Evo),e(Vs,Cvo),e(Vs,Ej),e(Ej,wvo),e(Vs,Avo),e(Vs,Cj),e(Cj,Lvo),e(Vs,yvo),e(k,xvo),e(k,Xs),e(Xs,ife),e(ife,$vo),e(Xs,kvo),e(Xs,wj),e(wj,Svo),e(Xs,Rvo),e(Xs,Aj),e(Aj,Pvo),e(Xs,Bvo),e(k,Ivo),e(k,zs),e(zs,dfe),e(dfe,Nvo),e(zs,qvo),e(zs,Lj),e(Lj,jvo),e(zs,Dvo),e(zs,yj),e(yj,Gvo),e(zs,Ovo),e(k,Vvo),e(k,Qs),e(Qs,cfe),e(cfe,Xvo),e(Qs,zvo),e(Qs,xj),e(xj,Qvo),e(Qs,Wvo),e(Qs,$j),e($j,Uvo),e(Qs,Hvo),e(k,Jvo),e(k,Ws),e(Ws,mfe),e(mfe,Yvo),e(Ws,Kvo),e(Ws,kj),e(kj,Zvo),e(Ws,e1o),e(Ws,Sj),e(Sj,o1o),e(Ws,r1o),e(k,t1o),e(k,Us),e(Us,ffe),e(ffe,a1o),e(Us,n1o),e(Us,Rj),e(Rj,s1o),e(Us,l1o),e(Us,Pj),e(Pj,i1o),e(Us,d1o),e(k,c1o),e(k,cu),e(cu,gfe),e(gfe,m1o),e(cu,f1o),e(cu,Bj),e(Bj,g1o),e(cu,h1o),e(k,u1o),e(k,Hs),e(Hs,hfe),e(hfe,p1o),e(Hs,_1o),e(Hs,Ij),e(Ij,b1o),e(Hs,v1o),e(Hs,Nj),e(Nj,F1o),e(Hs,T1o),e(k,M1o),e(k,Js),e(Js,ufe),e(ufe,E1o),e(Js,C1o),e(Js,qj),e(qj,w1o),e(Js,A1o),e(Js,jj),e(jj,L1o),e(Js,y1o),e(k,x1o),e(k,mu),e(mu,pfe),e(pfe,$1o),e(mu,k1o),e(mu,Dj),e(Dj,S1o),e(mu,R1o),e(k,P1o),e(k,fu),e(fu,_fe),e(_fe,B1o),e(fu,I1o),e(fu,Gj),e(Gj,N1o),e(fu,q1o),e(k,j1o),e(k,gu),e(gu,bfe),e(bfe,D1o),e(gu,G1o),e(gu,Oj),e(Oj,O1o),e(gu,V1o),e(k,X1o),e(k,hu),e(hu,vfe),e(vfe,z1o),e(hu,Q1o),e(hu,Vj),e(Vj,W1o),e(hu,U1o),e(k,H1o),e(k,Ys),e(Ys,Ffe),e(Ffe,J1o),e(Ys,Y1o),e(Ys,Xj),e(Xj,K1o),e(Ys,Z1o),e(Ys,zj),e(zj,eFo),e(Ys,oFo),e(k,rFo),e(k,uu),e(uu,Tfe),e(Tfe,tFo),e(uu,aFo),e(uu,Qj),e(Qj,nFo),e(uu,sFo),e(k,lFo),e(k,Ks),e(Ks,Mfe),e(Mfe,iFo),e(Ks,dFo),e(Ks,Wj),e(Wj,cFo),e(Ks,mFo),e(Ks,Uj),e(Uj,fFo),e(Ks,gFo),e(k,hFo),e(k,Zs),e(Zs,Efe),e(Efe,uFo),e(Zs,pFo),e(Zs,Hj),e(Hj,_Fo),e(Zs,bFo),e(Zs,Jj),e(Jj,vFo),e(Zs,FFo),e(k,TFo),e(k,el),e(el,Cfe),e(Cfe,MFo),e(el,EFo),e(el,Yj),e(Yj,CFo),e(el,wFo),e(el,Kj),e(Kj,AFo),e(el,LFo),e(k,yFo),e(k,ol),e(ol,wfe),e(wfe,xFo),e(ol,$Fo),e(ol,Zj),e(Zj,kFo),e(ol,SFo),e(ol,eD),e(eD,RFo),e(ol,PFo),e(k,BFo),e(k,rl),e(rl,Afe),e(Afe,IFo),e(rl,NFo),e(rl,oD),e(oD,qFo),e(rl,jFo),e(rl,rD),e(rD,DFo),e(rl,GFo),e(k,OFo),e(k,tl),e(tl,Lfe),e(Lfe,VFo),e(tl,XFo),e(tl,tD),e(tD,zFo),e(tl,QFo),e(tl,aD),e(aD,WFo),e(tl,UFo),e(k,HFo),e(k,pu),e(pu,yfe),e(yfe,JFo),e(pu,YFo),e(pu,nD),e(nD,KFo),e(pu,ZFo),e(k,eTo),e(k,_u),e(_u,xfe),e(xfe,oTo),e(_u,rTo),e(_u,sD),e(sD,tTo),e(_u,aTo),e(k,nTo),e(k,al),e(al,$fe),e($fe,sTo),e(al,lTo),e(al,lD),e(lD,iTo),e(al,dTo),e(al,iD),e(iD,cTo),e(al,mTo),e(k,fTo),e(k,nl),e(nl,kfe),e(kfe,gTo),e(nl,hTo),e(nl,dD),e(dD,uTo),e(nl,pTo),e(nl,cD),e(cD,_To),e(nl,bTo),e(k,vTo),e(k,sl),e(sl,Sfe),e(Sfe,FTo),e(sl,TTo),e(sl,mD),e(mD,MTo),e(sl,ETo),e(sl,fD),e(fD,CTo),e(sl,wTo),e(k,ATo),e(k,bu),e(bu,Rfe),e(Rfe,LTo),e(bu,yTo),e(bu,gD),e(gD,xTo),e(bu,$To),e(k,kTo),e(k,vu),e(vu,Pfe),e(Pfe,STo),e(vu,RTo),e(vu,hD),e(hD,PTo),e(vu,BTo),e(k,ITo),e(k,Fu),e(Fu,Bfe),e(Bfe,NTo),e(Fu,qTo),e(Fu,uD),e(uD,jTo),e(Fu,DTo),e(k,GTo),e(k,ll),e(ll,Ife),e(Ife,OTo),e(ll,VTo),e(ll,pD),e(pD,XTo),e(ll,zTo),e(ll,_D),e(_D,QTo),e(ll,WTo),e(k,UTo),e(k,il),e(il,Nfe),e(Nfe,HTo),e(il,JTo),e(il,bD),e(bD,YTo),e(il,KTo),e(il,vD),e(vD,ZTo),e(il,eMo),e(k,oMo),e(k,Tu),e(Tu,qfe),e(qfe,rMo),e(Tu,tMo),e(Tu,FD),e(FD,aMo),e(Tu,nMo),e(k,sMo),e(k,Mu),e(Mu,jfe),e(jfe,lMo),e(Mu,iMo),e(Mu,TD),e(TD,dMo),e(Mu,cMo),e(k,mMo),e(k,Eu),e(Eu,Dfe),e(Dfe,fMo),e(Eu,gMo),e(Eu,MD),e(MD,hMo),e(Eu,uMo),e(k,pMo),e(k,dl),e(dl,Gfe),e(Gfe,_Mo),e(dl,bMo),e(dl,ED),e(ED,vMo),e(dl,FMo),e(dl,CD),e(CD,TMo),e(dl,MMo),e(k,EMo),e(k,cl),e(cl,Ofe),e(Ofe,CMo),e(cl,wMo),e(cl,wD),e(wD,AMo),e(cl,LMo),e(cl,AD),e(AD,yMo),e(cl,xMo),e(k,$Mo),e(k,Cu),e(Cu,Vfe),e(Vfe,kMo),e(Cu,SMo),e(Cu,LD),e(LD,RMo),e(Cu,PMo),e(k,BMo),e(k,wu),e(wu,Xfe),e(Xfe,IMo),e(wu,NMo),e(wu,yD),e(yD,qMo),e(wu,jMo),e(k,DMo),e(k,ml),e(ml,zfe),e(zfe,GMo),e(ml,OMo),e(ml,xD),e(xD,VMo),e(ml,XMo),e(ml,$D),e($D,zMo),e(ml,QMo),e(k,WMo),e(k,fl),e(fl,Qfe),e(Qfe,UMo),e(fl,HMo),e(fl,kD),e(kD,JMo),e(fl,YMo),e(fl,SD),e(SD,KMo),e(fl,ZMo),e(k,eEo),e(k,gl),e(gl,Wfe),e(Wfe,oEo),e(gl,rEo),e(gl,RD),e(RD,tEo),e(gl,aEo),e(gl,PD),e(PD,nEo),e(gl,sEo),e(k,lEo),e(k,hl),e(hl,Ufe),e(Ufe,iEo),e(hl,dEo),e(hl,BD),e(BD,cEo),e(hl,mEo),e(hl,ID),e(ID,fEo),e(hl,gEo),e(Br,hEo),M(Au,Br,null),e($o,uEo),e($o,Lu),M(w9,Lu,null),e(Lu,pEo),e(Lu,Hfe),e(Hfe,_Eo),b(m,HJe,_),b(m,fd,_),e(fd,yu),e(yu,Jfe),M(A9,Jfe,null),e(fd,bEo),e(fd,Yfe),e(Yfe,vEo),b(m,JJe,_),b(m,ko,_),M(L9,ko,null),e(ko,FEo),e(ko,y9),e(y9,TEo),e(y9,ND),e(ND,MEo),e(y9,EEo),e(ko,CEo),e(ko,x9),e(x9,wEo),e(x9,Kfe),e(Kfe,AEo),e(x9,LEo),e(ko,yEo),e(ko,Je),M($9,Je,null),e(Je,xEo),e(Je,Zfe),e(Zfe,$Eo),e(Je,kEo),e(Je,Ha),e(Ha,SEo),e(Ha,ege),e(ege,REo),e(Ha,PEo),e(Ha,oge),e(oge,BEo),e(Ha,IEo),e(Ha,rge),e(rge,NEo),e(Ha,qEo),e(Je,jEo),e(Je,Q),e(Q,xu),e(xu,tge),e(tge,DEo),e(xu,GEo),e(xu,qD),e(qD,OEo),e(xu,VEo),e(Q,XEo),e(Q,$u),e($u,age),e(age,zEo),e($u,QEo),e($u,jD),e(jD,WEo),e($u,UEo),e(Q,HEo),e(Q,ku),e(ku,nge),e(nge,JEo),e(ku,YEo),e(ku,DD),e(DD,KEo),e(ku,ZEo),e(Q,e4o),e(Q,Su),e(Su,sge),e(sge,o4o),e(Su,r4o),e(Su,GD),e(GD,t4o),e(Su,a4o),e(Q,n4o),e(Q,Ru),e(Ru,lge),e(lge,s4o),e(Ru,l4o),e(Ru,OD),e(OD,i4o),e(Ru,d4o),e(Q,c4o),e(Q,Pu),e(Pu,ige),e(ige,m4o),e(Pu,f4o),e(Pu,VD),e(VD,g4o),e(Pu,h4o),e(Q,u4o),e(Q,Bu),e(Bu,dge),e(dge,p4o),e(Bu,_4o),e(Bu,XD),e(XD,b4o),e(Bu,v4o),e(Q,F4o),e(Q,Iu),e(Iu,cge),e(cge,T4o),e(Iu,M4o),e(Iu,zD),e(zD,E4o),e(Iu,C4o),e(Q,w4o),e(Q,Nu),e(Nu,mge),e(mge,A4o),e(Nu,L4o),e(Nu,QD),e(QD,y4o),e(Nu,x4o),e(Q,$4o),e(Q,qu),e(qu,fge),e(fge,k4o),e(qu,S4o),e(qu,WD),e(WD,R4o),e(qu,P4o),e(Q,B4o),e(Q,ju),e(ju,gge),e(gge,I4o),e(ju,N4o),e(ju,UD),e(UD,q4o),e(ju,j4o),e(Q,D4o),e(Q,Du),e(Du,hge),e(hge,G4o),e(Du,O4o),e(Du,HD),e(HD,V4o),e(Du,X4o),e(Q,z4o),e(Q,Gu),e(Gu,uge),e(uge,Q4o),e(Gu,W4o),e(Gu,JD),e(JD,U4o),e(Gu,H4o),e(Q,J4o),e(Q,Ou),e(Ou,pge),e(pge,Y4o),e(Ou,K4o),e(Ou,YD),e(YD,Z4o),e(Ou,eCo),e(Q,oCo),e(Q,Vu),e(Vu,_ge),e(_ge,rCo),e(Vu,tCo),e(Vu,KD),e(KD,aCo),e(Vu,nCo),e(Q,sCo),e(Q,Xu),e(Xu,bge),e(bge,lCo),e(Xu,iCo),e(Xu,ZD),e(ZD,dCo),e(Xu,cCo),e(Q,mCo),e(Q,zu),e(zu,vge),e(vge,fCo),e(zu,gCo),e(zu,eG),e(eG,hCo),e(zu,uCo),e(Q,pCo),e(Q,Qu),e(Qu,Fge),e(Fge,_Co),e(Qu,bCo),e(Qu,oG),e(oG,vCo),e(Qu,FCo),e(Q,TCo),e(Q,Wu),e(Wu,Tge),e(Tge,MCo),e(Wu,ECo),e(Wu,rG),e(rG,CCo),e(Wu,wCo),e(Q,ACo),e(Q,Uu),e(Uu,Mge),e(Mge,LCo),e(Uu,yCo),e(Uu,tG),e(tG,xCo),e(Uu,$Co),e(Q,kCo),e(Q,Hu),e(Hu,Ege),e(Ege,SCo),e(Hu,RCo),e(Hu,aG),e(aG,PCo),e(Hu,BCo),e(Q,ICo),e(Q,Ju),e(Ju,Cge),e(Cge,NCo),e(Ju,qCo),e(Ju,nG),e(nG,jCo),e(Ju,DCo),e(Q,GCo),e(Q,Yu),e(Yu,wge),e(wge,OCo),e(Yu,VCo),e(Yu,sG),e(sG,XCo),e(Yu,zCo),e(Q,QCo),e(Q,Ku),e(Ku,Age),e(Age,WCo),e(Ku,UCo),e(Ku,lG),e(lG,HCo),e(Ku,JCo),e(Q,YCo),e(Q,Zu),e(Zu,Lge),e(Lge,KCo),e(Zu,ZCo),e(Zu,iG),e(iG,e3o),e(Zu,o3o),e(Q,r3o),e(Q,ep),e(ep,yge),e(yge,t3o),e(ep,a3o),e(ep,dG),e(dG,n3o),e(ep,s3o),e(Q,l3o),e(Q,op),e(op,xge),e(xge,i3o),e(op,d3o),e(op,cG),e(cG,c3o),e(op,m3o),e(Q,f3o),e(Q,rp),e(rp,$ge),e($ge,g3o),e(rp,h3o),e(rp,mG),e(mG,u3o),e(rp,p3o),e(Q,_3o),e(Q,tp),e(tp,kge),e(kge,b3o),e(tp,v3o),e(tp,fG),e(fG,F3o),e(tp,T3o),e(Q,M3o),e(Q,ap),e(ap,Sge),e(Sge,E3o),e(ap,C3o),e(ap,gG),e(gG,w3o),e(ap,A3o),e(Q,L3o),e(Q,np),e(np,Rge),e(Rge,y3o),e(np,x3o),e(np,hG),e(hG,$3o),e(np,k3o),e(Q,S3o),e(Q,sp),e(sp,Pge),e(Pge,R3o),e(sp,P3o),e(sp,uG),e(uG,B3o),e(sp,I3o),e(Q,N3o),e(Q,lp),e(lp,Bge),e(Bge,q3o),e(lp,j3o),e(lp,pG),e(pG,D3o),e(lp,G3o),e(Q,O3o),e(Q,ip),e(ip,Ige),e(Ige,V3o),e(ip,X3o),e(ip,_G),e(_G,z3o),e(ip,Q3o),e(Q,W3o),e(Q,dp),e(dp,Nge),e(Nge,U3o),e(dp,H3o),e(dp,bG),e(bG,J3o),e(dp,Y3o),e(Q,K3o),e(Q,cp),e(cp,qge),e(qge,Z3o),e(cp,e5o),e(cp,vG),e(vG,o5o),e(cp,r5o),e(Q,t5o),e(Q,mp),e(mp,jge),e(jge,a5o),e(mp,n5o),e(mp,FG),e(FG,s5o),e(mp,l5o),e(Q,i5o),e(Q,fp),e(fp,Dge),e(Dge,d5o),e(fp,c5o),e(fp,TG),e(TG,m5o),e(fp,f5o),e(Q,g5o),e(Q,gp),e(gp,Gge),e(Gge,h5o),e(gp,u5o),e(gp,MG),e(MG,p5o),e(gp,_5o),e(Je,b5o),M(hp,Je,null),e(Je,v5o),M(up,Je,null),e(ko,F5o),e(ko,pp),M(k9,pp,null),e(pp,T5o),e(pp,Oge),e(Oge,M5o),b(m,YJe,_),b(m,gd,_),e(gd,_p),e(_p,Vge),M(S9,Vge,null),e(gd,E5o),e(gd,Xge),e(Xge,C5o),b(m,KJe,_),b(m,So,_),M(R9,So,null),e(So,w5o),e(So,P9),e(P9,A5o),e(P9,EG),e(EG,L5o),e(P9,y5o),e(So,x5o),e(So,B9),e(B9,$5o),e(B9,zge),e(zge,k5o),e(B9,S5o),e(So,R5o),e(So,Ye),M(I9,Ye,null),e(Ye,P5o),e(Ye,Qge),e(Qge,B5o),e(Ye,I5o),e(Ye,hd),e(hd,N5o),e(hd,Wge),e(Wge,q5o),e(hd,j5o),e(hd,Uge),e(Uge,D5o),e(hd,G5o),e(Ye,O5o),e(Ye,ie),e(ie,bp),e(bp,Hge),e(Hge,V5o),e(bp,X5o),e(bp,CG),e(CG,z5o),e(bp,Q5o),e(ie,W5o),e(ie,vp),e(vp,Jge),e(Jge,U5o),e(vp,H5o),e(vp,wG),e(wG,J5o),e(vp,Y5o),e(ie,K5o),e(ie,Fp),e(Fp,Yge),e(Yge,Z5o),e(Fp,e0o),e(Fp,AG),e(AG,o0o),e(Fp,r0o),e(ie,t0o),e(ie,Tp),e(Tp,Kge),e(Kge,a0o),e(Tp,n0o),e(Tp,LG),e(LG,s0o),e(Tp,l0o),e(ie,i0o),e(ie,Mp),e(Mp,Zge),e(Zge,d0o),e(Mp,c0o),e(Mp,yG),e(yG,m0o),e(Mp,f0o),e(ie,g0o),e(ie,Ep),e(Ep,ehe),e(ehe,h0o),e(Ep,u0o),e(Ep,xG),e(xG,p0o),e(Ep,_0o),e(ie,b0o),e(ie,Cp),e(Cp,ohe),e(ohe,v0o),e(Cp,F0o),e(Cp,$G),e($G,T0o),e(Cp,M0o),e(ie,E0o),e(ie,wp),e(wp,rhe),e(rhe,C0o),e(wp,w0o),e(wp,kG),e(kG,A0o),e(wp,L0o),e(ie,y0o),e(ie,Ap),e(Ap,the),e(the,x0o),e(Ap,$0o),e(Ap,SG),e(SG,k0o),e(Ap,S0o),e(ie,R0o),e(ie,Lp),e(Lp,ahe),e(ahe,P0o),e(Lp,B0o),e(Lp,RG),e(RG,I0o),e(Lp,N0o),e(ie,q0o),e(ie,yp),e(yp,nhe),e(nhe,j0o),e(yp,D0o),e(yp,PG),e(PG,G0o),e(yp,O0o),e(ie,V0o),e(ie,xp),e(xp,she),e(she,X0o),e(xp,z0o),e(xp,BG),e(BG,Q0o),e(xp,W0o),e(ie,U0o),e(ie,$p),e($p,lhe),e(lhe,H0o),e($p,J0o),e($p,IG),e(IG,Y0o),e($p,K0o),e(ie,Z0o),e(ie,kp),e(kp,ihe),e(ihe,ewo),e(kp,owo),e(kp,NG),e(NG,rwo),e(kp,two),e(ie,awo),e(ie,Sp),e(Sp,dhe),e(dhe,nwo),e(Sp,swo),e(Sp,qG),e(qG,lwo),e(Sp,iwo),e(ie,dwo),e(ie,Rp),e(Rp,che),e(che,cwo),e(Rp,mwo),e(Rp,jG),e(jG,fwo),e(Rp,gwo),e(ie,hwo),e(ie,Pp),e(Pp,mhe),e(mhe,uwo),e(Pp,pwo),e(Pp,DG),e(DG,_wo),e(Pp,bwo),e(ie,vwo),e(ie,Bp),e(Bp,fhe),e(fhe,Fwo),e(Bp,Two),e(Bp,GG),e(GG,Mwo),e(Bp,Ewo),e(ie,Cwo),e(ie,Ip),e(Ip,ghe),e(ghe,wwo),e(Ip,Awo),e(Ip,OG),e(OG,Lwo),e(Ip,ywo),e(ie,xwo),e(ie,Np),e(Np,hhe),e(hhe,$wo),e(Np,kwo),e(Np,VG),e(VG,Swo),e(Np,Rwo),e(ie,Pwo),e(ie,qp),e(qp,uhe),e(uhe,Bwo),e(qp,Iwo),e(qp,XG),e(XG,Nwo),e(qp,qwo),e(Ye,jwo),M(jp,Ye,null),e(Ye,Dwo),M(Dp,Ye,null),e(So,Gwo),e(So,Gp),M(N9,Gp,null),e(Gp,Owo),e(Gp,phe),e(phe,Vwo),b(m,ZJe,_),b(m,ud,_),e(ud,Op),e(Op,_he),M(q9,_he,null),e(ud,Xwo),e(ud,bhe),e(bhe,zwo),b(m,eYe,_),b(m,Ro,_),M(j9,Ro,null),e(Ro,Qwo),e(Ro,pd),e(pd,Wwo),e(pd,zG),e(zG,Uwo),e(pd,Hwo),e(pd,QG),e(QG,Jwo),e(pd,Ywo),e(Ro,Kwo),e(Ro,D9),e(D9,Zwo),e(D9,vhe),e(vhe,eAo),e(D9,oAo),e(Ro,rAo),e(Ro,pt),M(G9,pt,null),e(pt,tAo),e(pt,Fhe),e(Fhe,aAo),e(pt,nAo),e(pt,_d),e(_d,sAo),e(_d,The),e(The,lAo),e(_d,iAo),e(_d,WG),e(WG,dAo),e(_d,cAo),e(pt,mAo),M(Vp,pt,null),e(Ro,fAo),e(Ro,Ke),M(O9,Ke,null),e(Ke,gAo),e(Ke,Mhe),e(Mhe,hAo),e(Ke,uAo),e(Ke,Ja),e(Ja,pAo),e(Ja,Ehe),e(Ehe,_Ao),e(Ja,bAo),e(Ja,Che),e(Che,vAo),e(Ja,FAo),e(Ja,whe),e(whe,TAo),e(Ja,MAo),e(Ke,EAo),e(Ke,y),e(y,Xp),e(Xp,Ahe),e(Ahe,CAo),e(Xp,wAo),e(Xp,UG),e(UG,AAo),e(Xp,LAo),e(y,yAo),e(y,zp),e(zp,Lhe),e(Lhe,xAo),e(zp,$Ao),e(zp,HG),e(HG,kAo),e(zp,SAo),e(y,RAo),e(y,Qp),e(Qp,yhe),e(yhe,PAo),e(Qp,BAo),e(Qp,JG),e(JG,IAo),e(Qp,NAo),e(y,qAo),e(y,Wp),e(Wp,xhe),e(xhe,jAo),e(Wp,DAo),e(Wp,YG),e(YG,GAo),e(Wp,OAo),e(y,VAo),e(y,Up),e(Up,$he),e($he,XAo),e(Up,zAo),e(Up,KG),e(KG,QAo),e(Up,WAo),e(y,UAo),e(y,Hp),e(Hp,khe),e(khe,HAo),e(Hp,JAo),e(Hp,ZG),e(ZG,YAo),e(Hp,KAo),e(y,ZAo),e(y,Jp),e(Jp,She),e(She,e6o),e(Jp,o6o),e(Jp,eO),e(eO,r6o),e(Jp,t6o),e(y,a6o),e(y,Yp),e(Yp,Rhe),e(Rhe,n6o),e(Yp,s6o),e(Yp,oO),e(oO,l6o),e(Yp,i6o),e(y,d6o),e(y,Kp),e(Kp,Phe),e(Phe,c6o),e(Kp,m6o),e(Kp,rO),e(rO,f6o),e(Kp,g6o),e(y,h6o),e(y,Zp),e(Zp,Bhe),e(Bhe,u6o),e(Zp,p6o),e(Zp,tO),e(tO,_6o),e(Zp,b6o),e(y,v6o),e(y,e_),e(e_,Ihe),e(Ihe,F6o),e(e_,T6o),e(e_,aO),e(aO,M6o),e(e_,E6o),e(y,C6o),e(y,o_),e(o_,Nhe),e(Nhe,w6o),e(o_,A6o),e(o_,nO),e(nO,L6o),e(o_,y6o),e(y,x6o),e(y,r_),e(r_,qhe),e(qhe,$6o),e(r_,k6o),e(r_,sO),e(sO,S6o),e(r_,R6o),e(y,P6o),e(y,t_),e(t_,jhe),e(jhe,B6o),e(t_,I6o),e(t_,lO),e(lO,N6o),e(t_,q6o),e(y,j6o),e(y,a_),e(a_,Dhe),e(Dhe,D6o),e(a_,G6o),e(a_,iO),e(iO,O6o),e(a_,V6o),e(y,X6o),e(y,n_),e(n_,Ghe),e(Ghe,z6o),e(n_,Q6o),e(n_,dO),e(dO,W6o),e(n_,U6o),e(y,H6o),e(y,s_),e(s_,Ohe),e(Ohe,J6o),e(s_,Y6o),e(s_,cO),e(cO,K6o),e(s_,Z6o),e(y,e7o),e(y,l_),e(l_,Vhe),e(Vhe,o7o),e(l_,r7o),e(l_,mO),e(mO,t7o),e(l_,a7o),e(y,n7o),e(y,i_),e(i_,Xhe),e(Xhe,s7o),e(i_,l7o),e(i_,fO),e(fO,i7o),e(i_,d7o),e(y,c7o),e(y,d_),e(d_,zhe),e(zhe,m7o),e(d_,f7o),e(d_,gO),e(gO,g7o),e(d_,h7o),e(y,u7o),e(y,c_),e(c_,Qhe),e(Qhe,p7o),e(c_,_7o),e(c_,hO),e(hO,b7o),e(c_,v7o),e(y,F7o),e(y,m_),e(m_,Whe),e(Whe,T7o),e(m_,M7o),e(m_,uO),e(uO,E7o),e(m_,C7o),e(y,w7o),e(y,f_),e(f_,Uhe),e(Uhe,A7o),e(f_,L7o),e(f_,pO),e(pO,y7o),e(f_,x7o),e(y,$7o),e(y,g_),e(g_,Hhe),e(Hhe,k7o),e(g_,S7o),e(g_,_O),e(_O,R7o),e(g_,P7o),e(y,B7o),e(y,h_),e(h_,Jhe),e(Jhe,I7o),e(h_,N7o),e(h_,bO),e(bO,q7o),e(h_,j7o),e(y,D7o),e(y,u_),e(u_,Yhe),e(Yhe,G7o),e(u_,O7o),e(u_,vO),e(vO,V7o),e(u_,X7o),e(y,z7o),e(y,p_),e(p_,Khe),e(Khe,Q7o),e(p_,W7o),e(p_,FO),e(FO,U7o),e(p_,H7o),e(y,J7o),e(y,__),e(__,Zhe),e(Zhe,Y7o),e(__,K7o),e(__,TO),e(TO,Z7o),e(__,eLo),e(y,oLo),e(y,b_),e(b_,eue),e(eue,rLo),e(b_,tLo),e(b_,MO),e(MO,aLo),e(b_,nLo),e(y,sLo),e(y,v_),e(v_,oue),e(oue,lLo),e(v_,iLo),e(v_,EO),e(EO,dLo),e(v_,cLo),e(y,mLo),e(y,F_),e(F_,rue),e(rue,fLo),e(F_,gLo),e(F_,CO),e(CO,hLo),e(F_,uLo),e(y,pLo),e(y,T_),e(T_,tue),e(tue,_Lo),e(T_,bLo),e(T_,wO),e(wO,vLo),e(T_,FLo),e(y,TLo),e(y,M_),e(M_,aue),e(aue,MLo),e(M_,ELo),e(M_,AO),e(AO,CLo),e(M_,wLo),e(y,ALo),e(y,E_),e(E_,nue),e(nue,LLo),e(E_,yLo),e(E_,LO),e(LO,xLo),e(E_,$Lo),e(y,kLo),e(y,C_),e(C_,sue),e(sue,SLo),e(C_,RLo),e(C_,yO),e(yO,PLo),e(C_,BLo),e(y,ILo),e(y,ul),e(ul,lue),e(lue,NLo),e(ul,qLo),e(ul,xO),e(xO,jLo),e(ul,DLo),e(ul,$O),e($O,GLo),e(ul,OLo),e(y,VLo),e(y,w_),e(w_,iue),e(iue,XLo),e(w_,zLo),e(w_,kO),e(kO,QLo),e(w_,WLo),e(y,ULo),e(y,A_),e(A_,due),e(due,HLo),e(A_,JLo),e(A_,SO),e(SO,YLo),e(A_,KLo),e(y,ZLo),e(y,L_),e(L_,cue),e(cue,eyo),e(L_,oyo),e(L_,RO),e(RO,ryo),e(L_,tyo),e(y,ayo),e(y,y_),e(y_,mue),e(mue,nyo),e(y_,syo),e(y_,PO),e(PO,lyo),e(y_,iyo),e(y,dyo),e(y,x_),e(x_,fue),e(fue,cyo),e(x_,myo),e(x_,BO),e(BO,fyo),e(x_,gyo),e(y,hyo),e(y,$_),e($_,gue),e(gue,uyo),e($_,pyo),e($_,IO),e(IO,_yo),e($_,byo),e(y,vyo),e(y,k_),e(k_,hue),e(hue,Fyo),e(k_,Tyo),e(k_,NO),e(NO,Myo),e(k_,Eyo),e(y,Cyo),e(y,S_),e(S_,uue),e(uue,wyo),e(S_,Ayo),e(S_,qO),e(qO,Lyo),e(S_,yyo),e(y,xyo),e(y,R_),e(R_,pue),e(pue,$yo),e(R_,kyo),e(R_,jO),e(jO,Syo),e(R_,Ryo),e(y,Pyo),e(y,P_),e(P_,_ue),e(_ue,Byo),e(P_,Iyo),e(P_,DO),e(DO,Nyo),e(P_,qyo),e(y,jyo),e(y,B_),e(B_,bue),e(bue,Dyo),e(B_,Gyo),e(B_,GO),e(GO,Oyo),e(B_,Vyo),e(y,Xyo),e(y,I_),e(I_,vue),e(vue,zyo),e(I_,Qyo),e(I_,OO),e(OO,Wyo),e(I_,Uyo),e(y,Hyo),e(y,N_),e(N_,Fue),e(Fue,Jyo),e(N_,Yyo),e(N_,VO),e(VO,Kyo),e(N_,Zyo),e(y,e8o),e(y,q_),e(q_,Tue),e(Tue,o8o),e(q_,r8o),e(q_,XO),e(XO,t8o),e(q_,a8o),e(y,n8o),e(y,j_),e(j_,Mue),e(Mue,s8o),e(j_,l8o),e(j_,zO),e(zO,i8o),e(j_,d8o),e(y,c8o),e(y,D_),e(D_,Eue),e(Eue,m8o),e(D_,f8o),e(D_,QO),e(QO,g8o),e(D_,h8o),e(y,u8o),e(y,G_),e(G_,Cue),e(Cue,p8o),e(G_,_8o),e(G_,WO),e(WO,b8o),e(G_,v8o),e(y,F8o),e(y,O_),e(O_,wue),e(wue,T8o),e(O_,M8o),e(O_,UO),e(UO,E8o),e(O_,C8o),e(y,w8o),e(y,V_),e(V_,Aue),e(Aue,A8o),e(V_,L8o),e(V_,HO),e(HO,y8o),e(V_,x8o),e(y,$8o),e(y,X_),e(X_,Lue),e(Lue,k8o),e(X_,S8o),e(X_,JO),e(JO,R8o),e(X_,P8o),e(y,B8o),e(y,z_),e(z_,yue),e(yue,I8o),e(z_,N8o),e(z_,YO),e(YO,q8o),e(z_,j8o),e(y,D8o),e(y,Q_),e(Q_,xue),e(xue,G8o),e(Q_,O8o),e(Q_,KO),e(KO,V8o),e(Q_,X8o),e(y,z8o),e(y,W_),e(W_,$ue),e($ue,Q8o),e(W_,W8o),e(W_,ZO),e(ZO,U8o),e(W_,H8o),e(y,J8o),e(y,U_),e(U_,kue),e(kue,Y8o),e(U_,K8o),e(U_,eV),e(eV,Z8o),e(U_,e9o),e(y,o9o),e(y,H_),e(H_,Sue),e(Sue,r9o),e(H_,t9o),e(H_,oV),e(oV,a9o),e(H_,n9o),e(y,s9o),e(y,J_),e(J_,Rue),e(Rue,l9o),e(J_,i9o),e(J_,rV),e(rV,d9o),e(J_,c9o),e(y,m9o),e(y,Y_),e(Y_,Pue),e(Pue,f9o),e(Y_,g9o),e(Y_,tV),e(tV,h9o),e(Y_,u9o),e(y,p9o),e(y,K_),e(K_,Bue),e(Bue,_9o),e(K_,b9o),e(K_,aV),e(aV,v9o),e(K_,F9o),e(y,T9o),e(y,Z_),e(Z_,Iue),e(Iue,M9o),e(Z_,E9o),e(Z_,nV),e(nV,C9o),e(Z_,w9o),e(y,A9o),e(y,eb),e(eb,Nue),e(Nue,L9o),e(eb,y9o),e(eb,sV),e(sV,x9o),e(eb,$9o),e(y,k9o),e(y,ob),e(ob,que),e(que,S9o),e(ob,R9o),e(ob,lV),e(lV,P9o),e(ob,B9o),e(y,I9o),e(y,rb),e(rb,jue),e(jue,N9o),e(rb,q9o),e(rb,iV),e(iV,j9o),e(rb,D9o),e(y,G9o),e(y,tb),e(tb,Due),e(Due,O9o),e(tb,V9o),e(tb,dV),e(dV,X9o),e(tb,z9o),e(y,Q9o),e(y,ab),e(ab,Gue),e(Gue,W9o),e(ab,U9o),e(ab,cV),e(cV,H9o),e(ab,J9o),e(y,Y9o),e(y,nb),e(nb,Oue),e(Oue,K9o),e(nb,Z9o),e(nb,mV),e(mV,exo),e(nb,oxo),e(y,rxo),e(y,sb),e(sb,Vue),e(Vue,txo),e(sb,axo),e(sb,fV),e(fV,nxo),e(sb,sxo),e(y,lxo),e(y,lb),e(lb,Xue),e(Xue,ixo),e(lb,dxo),e(lb,gV),e(gV,cxo),e(lb,mxo),e(y,fxo),e(y,ib),e(ib,zue),e(zue,gxo),e(ib,hxo),e(ib,hV),e(hV,uxo),e(ib,pxo),e(y,_xo),e(y,db),e(db,Que),e(Que,bxo),e(db,vxo),e(db,uV),e(uV,Fxo),e(db,Txo),e(y,Mxo),e(y,cb),e(cb,Wue),e(Wue,Exo),e(cb,Cxo),e(cb,pV),e(pV,wxo),e(cb,Axo),e(y,Lxo),e(y,mb),e(mb,Uue),e(Uue,yxo),e(mb,xxo),e(mb,_V),e(_V,$xo),e(mb,kxo),e(y,Sxo),e(y,fb),e(fb,Hue),e(Hue,Rxo),e(fb,Pxo),e(fb,bV),e(bV,Bxo),e(fb,Ixo),e(y,Nxo),e(y,gb),e(gb,Jue),e(Jue,qxo),e(gb,jxo),e(gb,vV),e(vV,Dxo),e(gb,Gxo),e(y,Oxo),e(y,hb),e(hb,Yue),e(Yue,Vxo),e(hb,Xxo),e(hb,FV),e(FV,zxo),e(hb,Qxo),e(y,Wxo),e(y,ub),e(ub,Kue),e(Kue,Uxo),e(ub,Hxo),e(ub,TV),e(TV,Jxo),e(ub,Yxo),e(y,Kxo),e(y,pb),e(pb,Zue),e(Zue,Zxo),e(pb,e$o),e(pb,MV),e(MV,o$o),e(pb,r$o),e(y,t$o),e(y,_b),e(_b,epe),e(epe,a$o),e(_b,n$o),e(_b,EV),e(EV,s$o),e(_b,l$o),e(y,i$o),e(y,bb),e(bb,ope),e(ope,d$o),e(bb,c$o),e(bb,CV),e(CV,m$o),e(bb,f$o),e(y,g$o),e(y,vb),e(vb,rpe),e(rpe,h$o),e(vb,u$o),e(vb,wV),e(wV,p$o),e(vb,_$o),e(y,b$o),e(y,Fb),e(Fb,tpe),e(tpe,v$o),e(Fb,F$o),e(Fb,AV),e(AV,T$o),e(Fb,M$o),e(y,E$o),e(y,Tb),e(Tb,ape),e(ape,C$o),e(Tb,w$o),e(Tb,LV),e(LV,A$o),e(Tb,L$o),e(y,y$o),e(y,Mb),e(Mb,npe),e(npe,x$o),e(Mb,$$o),e(Mb,yV),e(yV,k$o),e(Mb,S$o),e(y,R$o),e(y,Eb),e(Eb,spe),e(spe,P$o),e(Eb,B$o),e(Eb,xV),e(xV,I$o),e(Eb,N$o),e(y,q$o),e(y,Cb),e(Cb,lpe),e(lpe,j$o),e(Cb,D$o),e(Cb,$V),e($V,G$o),e(Cb,O$o),e(y,V$o),e(y,wb),e(wb,ipe),e(ipe,X$o),e(wb,z$o),e(wb,kV),e(kV,Q$o),e(wb,W$o),e(y,U$o),e(y,Ab),e(Ab,dpe),e(dpe,H$o),e(Ab,J$o),e(Ab,SV),e(SV,Y$o),e(Ab,K$o),e(y,Z$o),e(y,Lb),e(Lb,cpe),e(cpe,eko),e(Lb,oko),e(Lb,RV),e(RV,rko),e(Lb,tko),e(y,ako),e(y,yb),e(yb,mpe),e(mpe,nko),e(yb,sko),e(yb,PV),e(PV,lko),e(yb,iko),e(y,dko),e(y,xb),e(xb,fpe),e(fpe,cko),e(xb,mko),e(xb,BV),e(BV,fko),e(xb,gko),e(y,hko),e(y,$b),e($b,gpe),e(gpe,uko),e($b,pko),e($b,IV),e(IV,_ko),e($b,bko),e(y,vko),e(y,kb),e(kb,hpe),e(hpe,Fko),e(kb,Tko),e(kb,NV),e(NV,Mko),e(kb,Eko),e(y,Cko),e(y,Sb),e(Sb,upe),e(upe,wko),e(Sb,Ako),e(Sb,qV),e(qV,Lko),e(Sb,yko),e(y,xko),e(y,Rb),e(Rb,ppe),e(ppe,$ko),e(Rb,kko),e(Rb,jV),e(jV,Sko),e(Rb,Rko),e(y,Pko),e(y,Pb),e(Pb,_pe),e(_pe,Bko),e(Pb,Iko),e(Pb,DV),e(DV,Nko),e(Pb,qko),e(y,jko),e(y,Bb),e(Bb,bpe),e(bpe,Dko),e(Bb,Gko),e(Bb,GV),e(GV,Oko),e(Bb,Vko),e(y,Xko),e(y,Ib),e(Ib,vpe),e(vpe,zko),e(Ib,Qko),e(Ib,OV),e(OV,Wko),e(Ib,Uko),e(y,Hko),e(y,Nb),e(Nb,Fpe),e(Fpe,Jko),e(Nb,Yko),e(Nb,VV),e(VV,Kko),e(Nb,Zko),e(y,eSo),e(y,qb),e(qb,Tpe),e(Tpe,oSo),e(qb,rSo),e(qb,XV),e(XV,tSo),e(qb,aSo),e(y,nSo),e(y,jb),e(jb,Mpe),e(Mpe,sSo),e(jb,lSo),e(jb,zV),e(zV,iSo),e(jb,dSo),e(y,cSo),e(y,Db),e(Db,Epe),e(Epe,mSo),e(Db,fSo),e(Db,QV),e(QV,gSo),e(Db,hSo),e(y,uSo),e(y,Gb),e(Gb,Cpe),e(Cpe,pSo),e(Gb,_So),e(Gb,WV),e(WV,bSo),e(Gb,vSo),e(y,FSo),e(y,Ob),e(Ob,wpe),e(wpe,TSo),e(Ob,MSo),e(Ob,UV),e(UV,ESo),e(Ob,CSo),e(y,wSo),e(y,Vb),e(Vb,Ape),e(Ape,ASo),e(Vb,LSo),e(Vb,HV),e(HV,ySo),e(Vb,xSo),e(y,$So),e(y,Xb),e(Xb,Lpe),e(Lpe,kSo),e(Xb,SSo),e(Xb,JV),e(JV,RSo),e(Xb,PSo),e(y,BSo),e(y,zb),e(zb,ype),e(ype,ISo),e(zb,NSo),e(zb,YV),e(YV,qSo),e(zb,jSo),e(y,DSo),e(y,Qb),e(Qb,xpe),e(xpe,GSo),e(Qb,OSo),e(Qb,KV),e(KV,VSo),e(Qb,XSo),e(y,zSo),e(y,Wb),e(Wb,$pe),e($pe,QSo),e(Wb,WSo),e(Wb,ZV),e(ZV,USo),e(Wb,HSo),e(y,JSo),e(y,Ub),e(Ub,kpe),e(kpe,YSo),e(Ub,KSo),e(Ub,eX),e(eX,ZSo),e(Ub,eRo),e(y,oRo),e(y,Hb),e(Hb,Spe),e(Spe,rRo),e(Hb,tRo),e(Hb,oX),e(oX,aRo),e(Hb,nRo),e(y,sRo),e(y,Jb),e(Jb,Rpe),e(Rpe,lRo),e(Jb,iRo),e(Jb,rX),e(rX,dRo),e(Jb,cRo),e(y,mRo),e(y,Yb),e(Yb,Ppe),e(Ppe,fRo),e(Yb,gRo),e(Yb,tX),e(tX,hRo),e(Yb,uRo),e(y,pRo),e(y,Kb),e(Kb,Bpe),e(Bpe,_Ro),e(Kb,bRo),e(Kb,aX),e(aX,vRo),e(Kb,FRo),e(Ke,TRo),e(Ke,Zb),e(Zb,MRo),e(Zb,Ipe),e(Ipe,ERo),e(Zb,CRo),e(Zb,Npe),e(Npe,wRo),e(Ke,ARo),M(e2,Ke,null),b(m,oYe,_),b(m,bd,_),e(bd,o2),e(o2,qpe),M(V9,qpe,null),e(bd,LRo),e(bd,jpe),e(jpe,yRo),b(m,rYe,_),b(m,Po,_),M(X9,Po,null),e(Po,xRo),e(Po,vd),e(vd,$Ro),e(vd,nX),e(nX,kRo),e(vd,SRo),e(vd,sX),e(sX,RRo),e(vd,PRo),e(Po,BRo),e(Po,z9),e(z9,IRo),e(z9,Dpe),e(Dpe,NRo),e(z9,qRo),e(Po,jRo),e(Po,_t),M(Q9,_t,null),e(_t,DRo),e(_t,Gpe),e(Gpe,GRo),e(_t,ORo),e(_t,Fd),e(Fd,VRo),e(Fd,Ope),e(Ope,XRo),e(Fd,zRo),e(Fd,lX),e(lX,QRo),e(Fd,WRo),e(_t,URo),M(r2,_t,null),e(Po,HRo),e(Po,Ze),M(W9,Ze,null),e(Ze,JRo),e(Ze,Vpe),e(Vpe,YRo),e(Ze,KRo),e(Ze,Ya),e(Ya,ZRo),e(Ya,Xpe),e(Xpe,ePo),e(Ya,oPo),e(Ya,zpe),e(zpe,rPo),e(Ya,tPo),e(Ya,Qpe),e(Qpe,aPo),e(Ya,nPo),e(Ze,sPo),e(Ze,G),e(G,t2),e(t2,Wpe),e(Wpe,lPo),e(t2,iPo),e(t2,iX),e(iX,dPo),e(t2,cPo),e(G,mPo),e(G,a2),e(a2,Upe),e(Upe,fPo),e(a2,gPo),e(a2,dX),e(dX,hPo),e(a2,uPo),e(G,pPo),e(G,n2),e(n2,Hpe),e(Hpe,_Po),e(n2,bPo),e(n2,cX),e(cX,vPo),e(n2,FPo),e(G,TPo),e(G,s2),e(s2,Jpe),e(Jpe,MPo),e(s2,EPo),e(s2,mX),e(mX,CPo),e(s2,wPo),e(G,APo),e(G,l2),e(l2,Ype),e(Ype,LPo),e(l2,yPo),e(l2,fX),e(fX,xPo),e(l2,$Po),e(G,kPo),e(G,i2),e(i2,Kpe),e(Kpe,SPo),e(i2,RPo),e(i2,gX),e(gX,PPo),e(i2,BPo),e(G,IPo),e(G,d2),e(d2,Zpe),e(Zpe,NPo),e(d2,qPo),e(d2,hX),e(hX,jPo),e(d2,DPo),e(G,GPo),e(G,c2),e(c2,e_e),e(e_e,OPo),e(c2,VPo),e(c2,uX),e(uX,XPo),e(c2,zPo),e(G,QPo),e(G,m2),e(m2,o_e),e(o_e,WPo),e(m2,UPo),e(m2,pX),e(pX,HPo),e(m2,JPo),e(G,YPo),e(G,f2),e(f2,r_e),e(r_e,KPo),e(f2,ZPo),e(f2,_X),e(_X,eBo),e(f2,oBo),e(G,rBo),e(G,g2),e(g2,t_e),e(t_e,tBo),e(g2,aBo),e(g2,bX),e(bX,nBo),e(g2,sBo),e(G,lBo),e(G,h2),e(h2,a_e),e(a_e,iBo),e(h2,dBo),e(h2,vX),e(vX,cBo),e(h2,mBo),e(G,fBo),e(G,u2),e(u2,n_e),e(n_e,gBo),e(u2,hBo),e(u2,FX),e(FX,uBo),e(u2,pBo),e(G,_Bo),e(G,p2),e(p2,s_e),e(s_e,bBo),e(p2,vBo),e(p2,TX),e(TX,FBo),e(p2,TBo),e(G,MBo),e(G,_2),e(_2,l_e),e(l_e,EBo),e(_2,CBo),e(_2,MX),e(MX,wBo),e(_2,ABo),e(G,LBo),e(G,b2),e(b2,i_e),e(i_e,yBo),e(b2,xBo),e(b2,EX),e(EX,$Bo),e(b2,kBo),e(G,SBo),e(G,v2),e(v2,d_e),e(d_e,RBo),e(v2,PBo),e(v2,CX),e(CX,BBo),e(v2,IBo),e(G,NBo),e(G,F2),e(F2,c_e),e(c_e,qBo),e(F2,jBo),e(F2,wX),e(wX,DBo),e(F2,GBo),e(G,OBo),e(G,T2),e(T2,m_e),e(m_e,VBo),e(T2,XBo),e(T2,AX),e(AX,zBo),e(T2,QBo),e(G,WBo),e(G,M2),e(M2,f_e),e(f_e,UBo),e(M2,HBo),e(M2,LX),e(LX,JBo),e(M2,YBo),e(G,KBo),e(G,E2),e(E2,g_e),e(g_e,ZBo),e(E2,eIo),e(E2,yX),e(yX,oIo),e(E2,rIo),e(G,tIo),e(G,C2),e(C2,h_e),e(h_e,aIo),e(C2,nIo),e(C2,xX),e(xX,sIo),e(C2,lIo),e(G,iIo),e(G,w2),e(w2,u_e),e(u_e,dIo),e(w2,cIo),e(w2,$X),e($X,mIo),e(w2,fIo),e(G,gIo),e(G,A2),e(A2,p_e),e(p_e,hIo),e(A2,uIo),e(A2,kX),e(kX,pIo),e(A2,_Io),e(G,bIo),e(G,L2),e(L2,__e),e(__e,vIo),e(L2,FIo),e(L2,SX),e(SX,TIo),e(L2,MIo),e(G,EIo),e(G,y2),e(y2,b_e),e(b_e,CIo),e(y2,wIo),e(y2,RX),e(RX,AIo),e(y2,LIo),e(G,yIo),e(G,x2),e(x2,v_e),e(v_e,xIo),e(x2,$Io),e(x2,PX),e(PX,kIo),e(x2,SIo),e(G,RIo),e(G,$2),e($2,F_e),e(F_e,PIo),e($2,BIo),e($2,BX),e(BX,IIo),e($2,NIo),e(G,qIo),e(G,k2),e(k2,T_e),e(T_e,jIo),e(k2,DIo),e(k2,IX),e(IX,GIo),e(k2,OIo),e(G,VIo),e(G,S2),e(S2,M_e),e(M_e,XIo),e(S2,zIo),e(S2,NX),e(NX,QIo),e(S2,WIo),e(G,UIo),e(G,R2),e(R2,E_e),e(E_e,HIo),e(R2,JIo),e(R2,qX),e(qX,YIo),e(R2,KIo),e(G,ZIo),e(G,P2),e(P2,C_e),e(C_e,eNo),e(P2,oNo),e(P2,jX),e(jX,rNo),e(P2,tNo),e(G,aNo),e(G,B2),e(B2,w_e),e(w_e,nNo),e(B2,sNo),e(B2,DX),e(DX,lNo),e(B2,iNo),e(G,dNo),e(G,I2),e(I2,A_e),e(A_e,cNo),e(I2,mNo),e(I2,GX),e(GX,fNo),e(I2,gNo),e(G,hNo),e(G,N2),e(N2,L_e),e(L_e,uNo),e(N2,pNo),e(N2,OX),e(OX,_No),e(N2,bNo),e(G,vNo),e(G,q2),e(q2,y_e),e(y_e,FNo),e(q2,TNo),e(q2,VX),e(VX,MNo),e(q2,ENo),e(G,CNo),e(G,j2),e(j2,x_e),e(x_e,wNo),e(j2,ANo),e(j2,XX),e(XX,LNo),e(j2,yNo),e(G,xNo),e(G,D2),e(D2,$_e),e($_e,$No),e(D2,kNo),e(D2,zX),e(zX,SNo),e(D2,RNo),e(G,PNo),e(G,G2),e(G2,k_e),e(k_e,BNo),e(G2,INo),e(G2,QX),e(QX,NNo),e(G2,qNo),e(G,jNo),e(G,O2),e(O2,S_e),e(S_e,DNo),e(O2,GNo),e(O2,WX),e(WX,ONo),e(O2,VNo),e(G,XNo),e(G,V2),e(V2,R_e),e(R_e,zNo),e(V2,QNo),e(V2,UX),e(UX,WNo),e(V2,UNo),e(G,HNo),e(G,X2),e(X2,P_e),e(P_e,JNo),e(X2,YNo),e(X2,HX),e(HX,KNo),e(X2,ZNo),e(G,eqo),e(G,z2),e(z2,B_e),e(B_e,oqo),e(z2,rqo),e(z2,JX),e(JX,tqo),e(z2,aqo),e(G,nqo),e(G,Q2),e(Q2,I_e),e(I_e,sqo),e(Q2,lqo),e(Q2,YX),e(YX,iqo),e(Q2,dqo),e(G,cqo),e(G,W2),e(W2,N_e),e(N_e,mqo),e(W2,fqo),e(W2,KX),e(KX,gqo),e(W2,hqo),e(G,uqo),e(G,U2),e(U2,q_e),e(q_e,pqo),e(U2,_qo),e(U2,ZX),e(ZX,bqo),e(U2,vqo),e(G,Fqo),e(G,H2),e(H2,j_e),e(j_e,Tqo),e(H2,Mqo),e(H2,ez),e(ez,Eqo),e(H2,Cqo),e(Ze,wqo),e(Ze,J2),e(J2,Aqo),e(J2,D_e),e(D_e,Lqo),e(J2,yqo),e(J2,G_e),e(G_e,xqo),e(Ze,$qo),M(Y2,Ze,null),b(m,tYe,_),b(m,Td,_),e(Td,K2),e(K2,O_e),M(U9,O_e,null),e(Td,kqo),e(Td,V_e),e(V_e,Sqo),b(m,aYe,_),b(m,Bo,_),M(H9,Bo,null),e(Bo,Rqo),e(Bo,Md),e(Md,Pqo),e(Md,oz),e(oz,Bqo),e(Md,Iqo),e(Md,rz),e(rz,Nqo),e(Md,qqo),e(Bo,jqo),e(Bo,J9),e(J9,Dqo),e(J9,X_e),e(X_e,Gqo),e(J9,Oqo),e(Bo,Vqo),e(Bo,bt),M(Y9,bt,null),e(bt,Xqo),e(bt,z_e),e(z_e,zqo),e(bt,Qqo),e(bt,Ed),e(Ed,Wqo),e(Ed,Q_e),e(Q_e,Uqo),e(Ed,Hqo),e(Ed,tz),e(tz,Jqo),e(Ed,Yqo),e(bt,Kqo),M(Z2,bt,null),e(Bo,Zqo),e(Bo,eo),M(K9,eo,null),e(eo,ejo),e(eo,W_e),e(W_e,ojo),e(eo,rjo),e(eo,Ka),e(Ka,tjo),e(Ka,U_e),e(U_e,ajo),e(Ka,njo),e(Ka,H_e),e(H_e,sjo),e(Ka,ljo),e(Ka,J_e),e(J_e,ijo),e(Ka,djo),e(eo,cjo),e(eo,z),e(z,ev),e(ev,Y_e),e(Y_e,mjo),e(ev,fjo),e(ev,az),e(az,gjo),e(ev,hjo),e(z,ujo),e(z,ov),e(ov,K_e),e(K_e,pjo),e(ov,_jo),e(ov,nz),e(nz,bjo),e(ov,vjo),e(z,Fjo),e(z,rv),e(rv,Z_e),e(Z_e,Tjo),e(rv,Mjo),e(rv,sz),e(sz,Ejo),e(rv,Cjo),e(z,wjo),e(z,tv),e(tv,ebe),e(ebe,Ajo),e(tv,Ljo),e(tv,lz),e(lz,yjo),e(tv,xjo),e(z,$jo),e(z,av),e(av,obe),e(obe,kjo),e(av,Sjo),e(av,iz),e(iz,Rjo),e(av,Pjo),e(z,Bjo),e(z,nv),e(nv,rbe),e(rbe,Ijo),e(nv,Njo),e(nv,dz),e(dz,qjo),e(nv,jjo),e(z,Djo),e(z,sv),e(sv,tbe),e(tbe,Gjo),e(sv,Ojo),e(sv,cz),e(cz,Vjo),e(sv,Xjo),e(z,zjo),e(z,lv),e(lv,abe),e(abe,Qjo),e(lv,Wjo),e(lv,mz),e(mz,Ujo),e(lv,Hjo),e(z,Jjo),e(z,iv),e(iv,nbe),e(nbe,Yjo),e(iv,Kjo),e(iv,fz),e(fz,Zjo),e(iv,eDo),e(z,oDo),e(z,dv),e(dv,sbe),e(sbe,rDo),e(dv,tDo),e(dv,gz),e(gz,aDo),e(dv,nDo),e(z,sDo),e(z,cv),e(cv,lbe),e(lbe,lDo),e(cv,iDo),e(cv,hz),e(hz,dDo),e(cv,cDo),e(z,mDo),e(z,mv),e(mv,ibe),e(ibe,fDo),e(mv,gDo),e(mv,uz),e(uz,hDo),e(mv,uDo),e(z,pDo),e(z,fv),e(fv,dbe),e(dbe,_Do),e(fv,bDo),e(fv,pz),e(pz,vDo),e(fv,FDo),e(z,TDo),e(z,gv),e(gv,cbe),e(cbe,MDo),e(gv,EDo),e(gv,_z),e(_z,CDo),e(gv,wDo),e(z,ADo),e(z,hv),e(hv,mbe),e(mbe,LDo),e(hv,yDo),e(hv,bz),e(bz,xDo),e(hv,$Do),e(z,kDo),e(z,uv),e(uv,fbe),e(fbe,SDo),e(uv,RDo),e(uv,vz),e(vz,PDo),e(uv,BDo),e(z,IDo),e(z,pv),e(pv,gbe),e(gbe,NDo),e(pv,qDo),e(pv,Fz),e(Fz,jDo),e(pv,DDo),e(z,GDo),e(z,_v),e(_v,hbe),e(hbe,ODo),e(_v,VDo),e(_v,Tz),e(Tz,XDo),e(_v,zDo),e(z,QDo),e(z,bv),e(bv,ube),e(ube,WDo),e(bv,UDo),e(bv,Mz),e(Mz,HDo),e(bv,JDo),e(z,YDo),e(z,vv),e(vv,pbe),e(pbe,KDo),e(vv,ZDo),e(vv,Ez),e(Ez,eGo),e(vv,oGo),e(z,rGo),e(z,Fv),e(Fv,_be),e(_be,tGo),e(Fv,aGo),e(Fv,Cz),e(Cz,nGo),e(Fv,sGo),e(z,lGo),e(z,Tv),e(Tv,bbe),e(bbe,iGo),e(Tv,dGo),e(Tv,wz),e(wz,cGo),e(Tv,mGo),e(z,fGo),e(z,Mv),e(Mv,vbe),e(vbe,gGo),e(Mv,hGo),e(Mv,Az),e(Az,uGo),e(Mv,pGo),e(z,_Go),e(z,Ev),e(Ev,Fbe),e(Fbe,bGo),e(Ev,vGo),e(Ev,Lz),e(Lz,FGo),e(Ev,TGo),e(z,MGo),e(z,Cv),e(Cv,Tbe),e(Tbe,EGo),e(Cv,CGo),e(Cv,yz),e(yz,wGo),e(Cv,AGo),e(z,LGo),e(z,wv),e(wv,Mbe),e(Mbe,yGo),e(wv,xGo),e(wv,xz),e(xz,$Go),e(wv,kGo),e(z,SGo),e(z,Av),e(Av,Ebe),e(Ebe,RGo),e(Av,PGo),e(Av,$z),e($z,BGo),e(Av,IGo),e(z,NGo),e(z,Lv),e(Lv,Cbe),e(Cbe,qGo),e(Lv,jGo),e(Lv,kz),e(kz,DGo),e(Lv,GGo),e(z,OGo),e(z,yv),e(yv,wbe),e(wbe,VGo),e(yv,XGo),e(yv,Sz),e(Sz,zGo),e(yv,QGo),e(z,WGo),e(z,xv),e(xv,Abe),e(Abe,UGo),e(xv,HGo),e(xv,Rz),e(Rz,JGo),e(xv,YGo),e(z,KGo),e(z,$v),e($v,Lbe),e(Lbe,ZGo),e($v,eOo),e($v,Pz),e(Pz,oOo),e($v,rOo),e(z,tOo),e(z,kv),e(kv,ybe),e(ybe,aOo),e(kv,nOo),e(kv,Bz),e(Bz,sOo),e(kv,lOo),e(z,iOo),e(z,Sv),e(Sv,xbe),e(xbe,dOo),e(Sv,cOo),e(Sv,Iz),e(Iz,mOo),e(Sv,fOo),e(z,gOo),e(z,Rv),e(Rv,$be),e($be,hOo),e(Rv,uOo),e(Rv,Nz),e(Nz,pOo),e(Rv,_Oo),e(z,bOo),e(z,Pv),e(Pv,kbe),e(kbe,vOo),e(Pv,FOo),e(Pv,qz),e(qz,TOo),e(Pv,MOo),e(z,EOo),e(z,Bv),e(Bv,Sbe),e(Sbe,COo),e(Bv,wOo),e(Bv,jz),e(jz,AOo),e(Bv,LOo),e(z,yOo),e(z,Iv),e(Iv,Rbe),e(Rbe,xOo),e(Iv,$Oo),e(Iv,Dz),e(Dz,kOo),e(Iv,SOo),e(z,ROo),e(z,Nv),e(Nv,Pbe),e(Pbe,POo),e(Nv,BOo),e(Nv,Gz),e(Gz,IOo),e(Nv,NOo),e(z,qOo),e(z,qv),e(qv,Bbe),e(Bbe,jOo),e(qv,DOo),e(qv,Oz),e(Oz,GOo),e(qv,OOo),e(z,VOo),e(z,jv),e(jv,Ibe),e(Ibe,XOo),e(jv,zOo),e(jv,Vz),e(Vz,QOo),e(jv,WOo),e(eo,UOo),e(eo,Dv),e(Dv,HOo),e(Dv,Nbe),e(Nbe,JOo),e(Dv,YOo),e(Dv,qbe),e(qbe,KOo),e(eo,ZOo),M(Gv,eo,null),b(m,nYe,_),b(m,Cd,_),e(Cd,Ov),e(Ov,jbe),M(Z9,jbe,null),e(Cd,eVo),e(Cd,Dbe),e(Dbe,oVo),b(m,sYe,_),b(m,Io,_),M(ex,Io,null),e(Io,rVo),e(Io,wd),e(wd,tVo),e(wd,Xz),e(Xz,aVo),e(wd,nVo),e(wd,zz),e(zz,sVo),e(wd,lVo),e(Io,iVo),e(Io,ox),e(ox,dVo),e(ox,Gbe),e(Gbe,cVo),e(ox,mVo),e(Io,fVo),e(Io,vt),M(rx,vt,null),e(vt,gVo),e(vt,Obe),e(Obe,hVo),e(vt,uVo),e(vt,Ad),e(Ad,pVo),e(Ad,Vbe),e(Vbe,_Vo),e(Ad,bVo),e(Ad,Qz),e(Qz,vVo),e(Ad,FVo),e(vt,TVo),M(Vv,vt,null),e(Io,MVo),e(Io,oo),M(tx,oo,null),e(oo,EVo),e(oo,Xbe),e(Xbe,CVo),e(oo,wVo),e(oo,Za),e(Za,AVo),e(Za,zbe),e(zbe,LVo),e(Za,yVo),e(Za,Qbe),e(Qbe,xVo),e(Za,$Vo),e(Za,Wbe),e(Wbe,kVo),e(Za,SVo),e(oo,RVo),e(oo,U),e(U,Xv),e(Xv,Ube),e(Ube,PVo),e(Xv,BVo),e(Xv,Wz),e(Wz,IVo),e(Xv,NVo),e(U,qVo),e(U,zv),e(zv,Hbe),e(Hbe,jVo),e(zv,DVo),e(zv,Uz),e(Uz,GVo),e(zv,OVo),e(U,VVo),e(U,Qv),e(Qv,Jbe),e(Jbe,XVo),e(Qv,zVo),e(Qv,Hz),e(Hz,QVo),e(Qv,WVo),e(U,UVo),e(U,Wv),e(Wv,Ybe),e(Ybe,HVo),e(Wv,JVo),e(Wv,Jz),e(Jz,YVo),e(Wv,KVo),e(U,ZVo),e(U,Uv),e(Uv,Kbe),e(Kbe,eXo),e(Uv,oXo),e(Uv,Yz),e(Yz,rXo),e(Uv,tXo),e(U,aXo),e(U,Hv),e(Hv,Zbe),e(Zbe,nXo),e(Hv,sXo),e(Hv,Kz),e(Kz,lXo),e(Hv,iXo),e(U,dXo),e(U,Jv),e(Jv,e2e),e(e2e,cXo),e(Jv,mXo),e(Jv,Zz),e(Zz,fXo),e(Jv,gXo),e(U,hXo),e(U,Yv),e(Yv,o2e),e(o2e,uXo),e(Yv,pXo),e(Yv,eQ),e(eQ,_Xo),e(Yv,bXo),e(U,vXo),e(U,Kv),e(Kv,r2e),e(r2e,FXo),e(Kv,TXo),e(Kv,oQ),e(oQ,MXo),e(Kv,EXo),e(U,CXo),e(U,Zv),e(Zv,t2e),e(t2e,wXo),e(Zv,AXo),e(Zv,rQ),e(rQ,LXo),e(Zv,yXo),e(U,xXo),e(U,e1),e(e1,a2e),e(a2e,$Xo),e(e1,kXo),e(e1,tQ),e(tQ,SXo),e(e1,RXo),e(U,PXo),e(U,o1),e(o1,n2e),e(n2e,BXo),e(o1,IXo),e(o1,aQ),e(aQ,NXo),e(o1,qXo),e(U,jXo),e(U,r1),e(r1,s2e),e(s2e,DXo),e(r1,GXo),e(r1,nQ),e(nQ,OXo),e(r1,VXo),e(U,XXo),e(U,t1),e(t1,l2e),e(l2e,zXo),e(t1,QXo),e(t1,sQ),e(sQ,WXo),e(t1,UXo),e(U,HXo),e(U,a1),e(a1,i2e),e(i2e,JXo),e(a1,YXo),e(a1,lQ),e(lQ,KXo),e(a1,ZXo),e(U,ezo),e(U,n1),e(n1,d2e),e(d2e,ozo),e(n1,rzo),e(n1,iQ),e(iQ,tzo),e(n1,azo),e(U,nzo),e(U,s1),e(s1,c2e),e(c2e,szo),e(s1,lzo),e(s1,dQ),e(dQ,izo),e(s1,dzo),e(U,czo),e(U,l1),e(l1,m2e),e(m2e,mzo),e(l1,fzo),e(l1,cQ),e(cQ,gzo),e(l1,hzo),e(U,uzo),e(U,i1),e(i1,f2e),e(f2e,pzo),e(i1,_zo),e(i1,mQ),e(mQ,bzo),e(i1,vzo),e(U,Fzo),e(U,d1),e(d1,g2e),e(g2e,Tzo),e(d1,Mzo),e(d1,fQ),e(fQ,Ezo),e(d1,Czo),e(U,wzo),e(U,c1),e(c1,h2e),e(h2e,Azo),e(c1,Lzo),e(c1,gQ),e(gQ,yzo),e(c1,xzo),e(U,$zo),e(U,m1),e(m1,u2e),e(u2e,kzo),e(m1,Szo),e(m1,hQ),e(hQ,Rzo),e(m1,Pzo),e(U,Bzo),e(U,f1),e(f1,p2e),e(p2e,Izo),e(f1,Nzo),e(f1,uQ),e(uQ,qzo),e(f1,jzo),e(U,Dzo),e(U,g1),e(g1,_2e),e(_2e,Gzo),e(g1,Ozo),e(g1,pQ),e(pQ,Vzo),e(g1,Xzo),e(U,zzo),e(U,h1),e(h1,b2e),e(b2e,Qzo),e(h1,Wzo),e(h1,_Q),e(_Q,Uzo),e(h1,Hzo),e(U,Jzo),e(U,u1),e(u1,v2e),e(v2e,Yzo),e(u1,Kzo),e(u1,bQ),e(bQ,Zzo),e(u1,eQo),e(U,oQo),e(U,p1),e(p1,F2e),e(F2e,rQo),e(p1,tQo),e(p1,vQ),e(vQ,aQo),e(p1,nQo),e(U,sQo),e(U,_1),e(_1,T2e),e(T2e,lQo),e(_1,iQo),e(_1,FQ),e(FQ,dQo),e(_1,cQo),e(U,mQo),e(U,b1),e(b1,M2e),e(M2e,fQo),e(b1,gQo),e(b1,TQ),e(TQ,hQo),e(b1,uQo),e(U,pQo),e(U,v1),e(v1,E2e),e(E2e,_Qo),e(v1,bQo),e(v1,MQ),e(MQ,vQo),e(v1,FQo),e(U,TQo),e(U,F1),e(F1,C2e),e(C2e,MQo),e(F1,EQo),e(F1,EQ),e(EQ,CQo),e(F1,wQo),e(U,AQo),e(U,T1),e(T1,w2e),e(w2e,LQo),e(T1,yQo),e(T1,CQ),e(CQ,xQo),e(T1,$Qo),e(U,kQo),e(U,M1),e(M1,A2e),e(A2e,SQo),e(M1,RQo),e(M1,wQ),e(wQ,PQo),e(M1,BQo),e(U,IQo),e(U,E1),e(E1,L2e),e(L2e,NQo),e(E1,qQo),e(E1,y2e),e(y2e,jQo),e(E1,DQo),e(U,GQo),e(U,C1),e(C1,x2e),e(x2e,OQo),e(C1,VQo),e(C1,AQ),e(AQ,XQo),e(C1,zQo),e(U,QQo),e(U,w1),e(w1,$2e),e($2e,WQo),e(w1,UQo),e(w1,LQ),e(LQ,HQo),e(w1,JQo),e(U,YQo),e(U,A1),e(A1,k2e),e(k2e,KQo),e(A1,ZQo),e(A1,yQ),e(yQ,eWo),e(A1,oWo),e(U,rWo),e(U,L1),e(L1,S2e),e(S2e,tWo),e(L1,aWo),e(L1,xQ),e(xQ,nWo),e(L1,sWo),e(oo,lWo),e(oo,y1),e(y1,iWo),e(y1,R2e),e(R2e,dWo),e(y1,cWo),e(y1,P2e),e(P2e,mWo),e(oo,fWo),M(x1,oo,null),b(m,lYe,_),b(m,Ld,_),e(Ld,$1),e($1,B2e),M(ax,B2e,null),e(Ld,gWo),e(Ld,I2e),e(I2e,hWo),b(m,iYe,_),b(m,No,_),M(nx,No,null),e(No,uWo),e(No,yd),e(yd,pWo),e(yd,$Q),e($Q,_Wo),e(yd,bWo),e(yd,kQ),e(kQ,vWo),e(yd,FWo),e(No,TWo),e(No,sx),e(sx,MWo),e(sx,N2e),e(N2e,EWo),e(sx,CWo),e(No,wWo),e(No,Ft),M(lx,Ft,null),e(Ft,AWo),e(Ft,q2e),e(q2e,LWo),e(Ft,yWo),e(Ft,xd),e(xd,xWo),e(xd,j2e),e(j2e,$Wo),e(xd,kWo),e(xd,SQ),e(SQ,SWo),e(xd,RWo),e(Ft,PWo),M(k1,Ft,null),e(No,BWo),e(No,ro),M(ix,ro,null),e(ro,IWo),e(ro,D2e),e(D2e,NWo),e(ro,qWo),e(ro,en),e(en,jWo),e(en,G2e),e(G2e,DWo),e(en,GWo),e(en,O2e),e(O2e,OWo),e(en,VWo),e(en,V2e),e(V2e,XWo),e(en,zWo),e(ro,QWo),e(ro,me),e(me,S1),e(S1,X2e),e(X2e,WWo),e(S1,UWo),e(S1,RQ),e(RQ,HWo),e(S1,JWo),e(me,YWo),e(me,R1),e(R1,z2e),e(z2e,KWo),e(R1,ZWo),e(R1,PQ),e(PQ,eUo),e(R1,oUo),e(me,rUo),e(me,P1),e(P1,Q2e),e(Q2e,tUo),e(P1,aUo),e(P1,BQ),e(BQ,nUo),e(P1,sUo),e(me,lUo),e(me,B1),e(B1,W2e),e(W2e,iUo),e(B1,dUo),e(B1,IQ),e(IQ,cUo),e(B1,mUo),e(me,fUo),e(me,I1),e(I1,U2e),e(U2e,gUo),e(I1,hUo),e(I1,NQ),e(NQ,uUo),e(I1,pUo),e(me,_Uo),e(me,N1),e(N1,H2e),e(H2e,bUo),e(N1,vUo),e(N1,qQ),e(qQ,FUo),e(N1,TUo),e(me,MUo),e(me,q1),e(q1,J2e),e(J2e,EUo),e(q1,CUo),e(q1,jQ),e(jQ,wUo),e(q1,AUo),e(me,LUo),e(me,j1),e(j1,Y2e),e(Y2e,yUo),e(j1,xUo),e(j1,DQ),e(DQ,$Uo),e(j1,kUo),e(me,SUo),e(me,D1),e(D1,K2e),e(K2e,RUo),e(D1,PUo),e(D1,GQ),e(GQ,BUo),e(D1,IUo),e(me,NUo),e(me,G1),e(G1,Z2e),e(Z2e,qUo),e(G1,jUo),e(G1,OQ),e(OQ,DUo),e(G1,GUo),e(me,OUo),e(me,O1),e(O1,eve),e(eve,VUo),e(O1,XUo),e(O1,VQ),e(VQ,zUo),e(O1,QUo),e(me,WUo),e(me,V1),e(V1,ove),e(ove,UUo),e(V1,HUo),e(V1,XQ),e(XQ,JUo),e(V1,YUo),e(me,KUo),e(me,X1),e(X1,rve),e(rve,ZUo),e(X1,eHo),e(X1,zQ),e(zQ,oHo),e(X1,rHo),e(me,tHo),e(me,z1),e(z1,tve),e(tve,aHo),e(z1,nHo),e(z1,QQ),e(QQ,sHo),e(z1,lHo),e(me,iHo),e(me,Q1),e(Q1,ave),e(ave,dHo),e(Q1,cHo),e(Q1,WQ),e(WQ,mHo),e(Q1,fHo),e(me,gHo),e(me,W1),e(W1,nve),e(nve,hHo),e(W1,uHo),e(W1,UQ),e(UQ,pHo),e(W1,_Ho),e(me,bHo),e(me,U1),e(U1,sve),e(sve,vHo),e(U1,FHo),e(U1,HQ),e(HQ,THo),e(U1,MHo),e(me,EHo),e(me,H1),e(H1,lve),e(lve,CHo),e(H1,wHo),e(H1,JQ),e(JQ,AHo),e(H1,LHo),e(me,yHo),e(me,J1),e(J1,ive),e(ive,xHo),e(J1,$Ho),e(J1,YQ),e(YQ,kHo),e(J1,SHo),e(me,RHo),e(me,Y1),e(Y1,dve),e(dve,PHo),e(Y1,BHo),e(Y1,KQ),e(KQ,IHo),e(Y1,NHo),e(ro,qHo),e(ro,K1),e(K1,jHo),e(K1,cve),e(cve,DHo),e(K1,GHo),e(K1,mve),e(mve,OHo),e(ro,VHo),M(Z1,ro,null),b(m,dYe,_),b(m,$d,_),e($d,eF),e(eF,fve),M(dx,fve,null),e($d,XHo),e($d,gve),e(gve,zHo),b(m,cYe,_),b(m,qo,_),M(cx,qo,null),e(qo,QHo),e(qo,kd),e(kd,WHo),e(kd,ZQ),e(ZQ,UHo),e(kd,HHo),e(kd,eW),e(eW,JHo),e(kd,YHo),e(qo,KHo),e(qo,mx),e(mx,ZHo),e(mx,hve),e(hve,eJo),e(mx,oJo),e(qo,rJo),e(qo,Tt),M(fx,Tt,null),e(Tt,tJo),e(Tt,uve),e(uve,aJo),e(Tt,nJo),e(Tt,Sd),e(Sd,sJo),e(Sd,pve),e(pve,lJo),e(Sd,iJo),e(Sd,oW),e(oW,dJo),e(Sd,cJo),e(Tt,mJo),M(oF,Tt,null),e(qo,fJo),e(qo,to),M(gx,to,null),e(to,gJo),e(to,_ve),e(_ve,hJo),e(to,uJo),e(to,on),e(on,pJo),e(on,bve),e(bve,_Jo),e(on,bJo),e(on,vve),e(vve,vJo),e(on,FJo),e(on,Fve),e(Fve,TJo),e(on,MJo),e(to,EJo),e(to,j),e(j,rF),e(rF,Tve),e(Tve,CJo),e(rF,wJo),e(rF,rW),e(rW,AJo),e(rF,LJo),e(j,yJo),e(j,tF),e(tF,Mve),e(Mve,xJo),e(tF,$Jo),e(tF,tW),e(tW,kJo),e(tF,SJo),e(j,RJo),e(j,aF),e(aF,Eve),e(Eve,PJo),e(aF,BJo),e(aF,aW),e(aW,IJo),e(aF,NJo),e(j,qJo),e(j,nF),e(nF,Cve),e(Cve,jJo),e(nF,DJo),e(nF,nW),e(nW,GJo),e(nF,OJo),e(j,VJo),e(j,sF),e(sF,wve),e(wve,XJo),e(sF,zJo),e(sF,sW),e(sW,QJo),e(sF,WJo),e(j,UJo),e(j,lF),e(lF,Ave),e(Ave,HJo),e(lF,JJo),e(lF,lW),e(lW,YJo),e(lF,KJo),e(j,ZJo),e(j,iF),e(iF,Lve),e(Lve,eYo),e(iF,oYo),e(iF,iW),e(iW,rYo),e(iF,tYo),e(j,aYo),e(j,dF),e(dF,yve),e(yve,nYo),e(dF,sYo),e(dF,dW),e(dW,lYo),e(dF,iYo),e(j,dYo),e(j,cF),e(cF,xve),e(xve,cYo),e(cF,mYo),e(cF,cW),e(cW,fYo),e(cF,gYo),e(j,hYo),e(j,mF),e(mF,$ve),e($ve,uYo),e(mF,pYo),e(mF,mW),e(mW,_Yo),e(mF,bYo),e(j,vYo),e(j,fF),e(fF,kve),e(kve,FYo),e(fF,TYo),e(fF,fW),e(fW,MYo),e(fF,EYo),e(j,CYo),e(j,gF),e(gF,Sve),e(Sve,wYo),e(gF,AYo),e(gF,gW),e(gW,LYo),e(gF,yYo),e(j,xYo),e(j,hF),e(hF,Rve),e(Rve,$Yo),e(hF,kYo),e(hF,hW),e(hW,SYo),e(hF,RYo),e(j,PYo),e(j,uF),e(uF,Pve),e(Pve,BYo),e(uF,IYo),e(uF,uW),e(uW,NYo),e(uF,qYo),e(j,jYo),e(j,pF),e(pF,Bve),e(Bve,DYo),e(pF,GYo),e(pF,pW),e(pW,OYo),e(pF,VYo),e(j,XYo),e(j,_F),e(_F,Ive),e(Ive,zYo),e(_F,QYo),e(_F,_W),e(_W,WYo),e(_F,UYo),e(j,HYo),e(j,bF),e(bF,Nve),e(Nve,JYo),e(bF,YYo),e(bF,bW),e(bW,KYo),e(bF,ZYo),e(j,eKo),e(j,vF),e(vF,qve),e(qve,oKo),e(vF,rKo),e(vF,vW),e(vW,tKo),e(vF,aKo),e(j,nKo),e(j,FF),e(FF,jve),e(jve,sKo),e(FF,lKo),e(FF,FW),e(FW,iKo),e(FF,dKo),e(j,cKo),e(j,TF),e(TF,Dve),e(Dve,mKo),e(TF,fKo),e(TF,TW),e(TW,gKo),e(TF,hKo),e(j,uKo),e(j,MF),e(MF,Gve),e(Gve,pKo),e(MF,_Ko),e(MF,MW),e(MW,bKo),e(MF,vKo),e(j,FKo),e(j,EF),e(EF,Ove),e(Ove,TKo),e(EF,MKo),e(EF,EW),e(EW,EKo),e(EF,CKo),e(j,wKo),e(j,CF),e(CF,Vve),e(Vve,AKo),e(CF,LKo),e(CF,CW),e(CW,yKo),e(CF,xKo),e(j,$Ko),e(j,wF),e(wF,Xve),e(Xve,kKo),e(wF,SKo),e(wF,wW),e(wW,RKo),e(wF,PKo),e(j,BKo),e(j,AF),e(AF,zve),e(zve,IKo),e(AF,NKo),e(AF,AW),e(AW,qKo),e(AF,jKo),e(j,DKo),e(j,LF),e(LF,Qve),e(Qve,GKo),e(LF,OKo),e(LF,LW),e(LW,VKo),e(LF,XKo),e(j,zKo),e(j,yF),e(yF,Wve),e(Wve,QKo),e(yF,WKo),e(yF,yW),e(yW,UKo),e(yF,HKo),e(j,JKo),e(j,xF),e(xF,Uve),e(Uve,YKo),e(xF,KKo),e(xF,xW),e(xW,ZKo),e(xF,eZo),e(j,oZo),e(j,$F),e($F,Hve),e(Hve,rZo),e($F,tZo),e($F,$W),e($W,aZo),e($F,nZo),e(j,sZo),e(j,kF),e(kF,Jve),e(Jve,lZo),e(kF,iZo),e(kF,kW),e(kW,dZo),e(kF,cZo),e(j,mZo),e(j,SF),e(SF,Yve),e(Yve,fZo),e(SF,gZo),e(SF,SW),e(SW,hZo),e(SF,uZo),e(j,pZo),e(j,RF),e(RF,Kve),e(Kve,_Zo),e(RF,bZo),e(RF,RW),e(RW,vZo),e(RF,FZo),e(j,TZo),e(j,PF),e(PF,Zve),e(Zve,MZo),e(PF,EZo),e(PF,PW),e(PW,CZo),e(PF,wZo),e(j,AZo),e(j,BF),e(BF,e1e),e(e1e,LZo),e(BF,yZo),e(BF,BW),e(BW,xZo),e(BF,$Zo),e(j,kZo),e(j,IF),e(IF,o1e),e(o1e,SZo),e(IF,RZo),e(IF,IW),e(IW,PZo),e(IF,BZo),e(j,IZo),e(j,NF),e(NF,r1e),e(r1e,NZo),e(NF,qZo),e(NF,NW),e(NW,jZo),e(NF,DZo),e(j,GZo),e(j,qF),e(qF,t1e),e(t1e,OZo),e(qF,VZo),e(qF,qW),e(qW,XZo),e(qF,zZo),e(j,QZo),e(j,jF),e(jF,a1e),e(a1e,WZo),e(jF,UZo),e(jF,jW),e(jW,HZo),e(jF,JZo),e(j,YZo),e(j,DF),e(DF,n1e),e(n1e,KZo),e(DF,ZZo),e(DF,DW),e(DW,eer),e(DF,oer),e(j,rer),e(j,GF),e(GF,s1e),e(s1e,ter),e(GF,aer),e(GF,GW),e(GW,ner),e(GF,ser),e(j,ler),e(j,OF),e(OF,l1e),e(l1e,ier),e(OF,der),e(OF,OW),e(OW,cer),e(OF,mer),e(j,fer),e(j,VF),e(VF,i1e),e(i1e,ger),e(VF,her),e(VF,VW),e(VW,uer),e(VF,per),e(j,_er),e(j,XF),e(XF,d1e),e(d1e,ber),e(XF,ver),e(XF,XW),e(XW,Fer),e(XF,Ter),e(j,Mer),e(j,zF),e(zF,c1e),e(c1e,Eer),e(zF,Cer),e(zF,zW),e(zW,wer),e(zF,Aer),e(j,Ler),e(j,QF),e(QF,m1e),e(m1e,yer),e(QF,xer),e(QF,QW),e(QW,$er),e(QF,ker),e(j,Ser),e(j,WF),e(WF,f1e),e(f1e,Rer),e(WF,Per),e(WF,WW),e(WW,Ber),e(WF,Ier),e(j,Ner),e(j,UF),e(UF,g1e),e(g1e,qer),e(UF,jer),e(UF,UW),e(UW,Der),e(UF,Ger),e(j,Oer),e(j,HF),e(HF,h1e),e(h1e,Ver),e(HF,Xer),e(HF,HW),e(HW,zer),e(HF,Qer),e(j,Wer),e(j,JF),e(JF,u1e),e(u1e,Uer),e(JF,Her),e(JF,JW),e(JW,Jer),e(JF,Yer),e(j,Ker),e(j,YF),e(YF,p1e),e(p1e,Zer),e(YF,eor),e(YF,YW),e(YW,oor),e(YF,ror),e(j,tor),e(j,KF),e(KF,_1e),e(_1e,aor),e(KF,nor),e(KF,KW),e(KW,sor),e(KF,lor),e(j,ior),e(j,ZF),e(ZF,b1e),e(b1e,dor),e(ZF,cor),e(ZF,ZW),e(ZW,mor),e(ZF,gor),e(to,hor),e(to,eT),e(eT,uor),e(eT,v1e),e(v1e,por),e(eT,_or),e(eT,F1e),e(F1e,bor),e(to,vor),M(oT,to,null),b(m,mYe,_),b(m,Rd,_),e(Rd,rT),e(rT,T1e),M(hx,T1e,null),e(Rd,For),e(Rd,M1e),e(M1e,Tor),b(m,fYe,_),b(m,jo,_),M(ux,jo,null),e(jo,Mor),e(jo,Pd),e(Pd,Eor),e(Pd,eU),e(eU,Cor),e(Pd,wor),e(Pd,oU),e(oU,Aor),e(Pd,Lor),e(jo,yor),e(jo,px),e(px,xor),e(px,E1e),e(E1e,$or),e(px,kor),e(jo,Sor),e(jo,Mt),M(_x,Mt,null),e(Mt,Ror),e(Mt,C1e),e(C1e,Por),e(Mt,Bor),e(Mt,Bd),e(Bd,Ior),e(Bd,w1e),e(w1e,Nor),e(Bd,qor),e(Bd,rU),e(rU,jor),e(Bd,Dor),e(Mt,Gor),M(tT,Mt,null),e(jo,Oor),e(jo,ao),M(bx,ao,null),e(ao,Vor),e(ao,A1e),e(A1e,Xor),e(ao,zor),e(ao,rn),e(rn,Qor),e(rn,L1e),e(L1e,Wor),e(rn,Uor),e(rn,y1e),e(y1e,Hor),e(rn,Jor),e(rn,x1e),e(x1e,Yor),e(rn,Kor),e(ao,Zor),e(ao,Z),e(Z,aT),e(aT,$1e),e($1e,err),e(aT,orr),e(aT,tU),e(tU,rrr),e(aT,trr),e(Z,arr),e(Z,nT),e(nT,k1e),e(k1e,nrr),e(nT,srr),e(nT,aU),e(aU,lrr),e(nT,irr),e(Z,drr),e(Z,sT),e(sT,S1e),e(S1e,crr),e(sT,mrr),e(sT,nU),e(nU,frr),e(sT,grr),e(Z,hrr),e(Z,lT),e(lT,R1e),e(R1e,urr),e(lT,prr),e(lT,sU),e(sU,_rr),e(lT,brr),e(Z,vrr),e(Z,iT),e(iT,P1e),e(P1e,Frr),e(iT,Trr),e(iT,lU),e(lU,Mrr),e(iT,Err),e(Z,Crr),e(Z,dT),e(dT,B1e),e(B1e,wrr),e(dT,Arr),e(dT,iU),e(iU,Lrr),e(dT,yrr),e(Z,xrr),e(Z,cT),e(cT,I1e),e(I1e,$rr),e(cT,krr),e(cT,dU),e(dU,Srr),e(cT,Rrr),e(Z,Prr),e(Z,mT),e(mT,N1e),e(N1e,Brr),e(mT,Irr),e(mT,cU),e(cU,Nrr),e(mT,qrr),e(Z,jrr),e(Z,fT),e(fT,q1e),e(q1e,Drr),e(fT,Grr),e(fT,mU),e(mU,Orr),e(fT,Vrr),e(Z,Xrr),e(Z,gT),e(gT,j1e),e(j1e,zrr),e(gT,Qrr),e(gT,fU),e(fU,Wrr),e(gT,Urr),e(Z,Hrr),e(Z,hT),e(hT,D1e),e(D1e,Jrr),e(hT,Yrr),e(hT,gU),e(gU,Krr),e(hT,Zrr),e(Z,etr),e(Z,uT),e(uT,G1e),e(G1e,otr),e(uT,rtr),e(uT,hU),e(hU,ttr),e(uT,atr),e(Z,ntr),e(Z,pT),e(pT,O1e),e(O1e,str),e(pT,ltr),e(pT,uU),e(uU,itr),e(pT,dtr),e(Z,ctr),e(Z,_T),e(_T,V1e),e(V1e,mtr),e(_T,ftr),e(_T,pU),e(pU,gtr),e(_T,htr),e(Z,utr),e(Z,bT),e(bT,X1e),e(X1e,ptr),e(bT,_tr),e(bT,_U),e(_U,btr),e(bT,vtr),e(Z,Ftr),e(Z,vT),e(vT,z1e),e(z1e,Ttr),e(vT,Mtr),e(vT,bU),e(bU,Etr),e(vT,Ctr),e(Z,wtr),e(Z,FT),e(FT,Q1e),e(Q1e,Atr),e(FT,Ltr),e(FT,vU),e(vU,ytr),e(FT,xtr),e(Z,$tr),e(Z,TT),e(TT,W1e),e(W1e,ktr),e(TT,Str),e(TT,FU),e(FU,Rtr),e(TT,Ptr),e(Z,Btr),e(Z,MT),e(MT,U1e),e(U1e,Itr),e(MT,Ntr),e(MT,TU),e(TU,qtr),e(MT,jtr),e(Z,Dtr),e(Z,ET),e(ET,H1e),e(H1e,Gtr),e(ET,Otr),e(ET,MU),e(MU,Vtr),e(ET,Xtr),e(Z,ztr),e(Z,CT),e(CT,J1e),e(J1e,Qtr),e(CT,Wtr),e(CT,EU),e(EU,Utr),e(CT,Htr),e(Z,Jtr),e(Z,wT),e(wT,Y1e),e(Y1e,Ytr),e(wT,Ktr),e(wT,CU),e(CU,Ztr),e(wT,ear),e(Z,oar),e(Z,AT),e(AT,K1e),e(K1e,rar),e(AT,tar),e(AT,wU),e(wU,aar),e(AT,nar),e(Z,sar),e(Z,LT),e(LT,Z1e),e(Z1e,lar),e(LT,iar),e(LT,AU),e(AU,dar),e(LT,car),e(Z,mar),e(Z,yT),e(yT,eFe),e(eFe,far),e(yT,gar),e(yT,LU),e(LU,har),e(yT,uar),e(Z,par),e(Z,xT),e(xT,oFe),e(oFe,_ar),e(xT,bar),e(xT,yU),e(yU,Far),e(xT,Tar),e(Z,Mar),e(Z,$T),e($T,rFe),e(rFe,Ear),e($T,Car),e($T,xU),e(xU,war),e($T,Aar),e(Z,Lar),e(Z,kT),e(kT,tFe),e(tFe,yar),e(kT,xar),e(kT,$U),e($U,$ar),e(kT,kar),e(Z,Sar),e(Z,ST),e(ST,aFe),e(aFe,Rar),e(ST,Par),e(ST,kU),e(kU,Bar),e(ST,Iar),e(Z,Nar),e(Z,RT),e(RT,nFe),e(nFe,qar),e(RT,jar),e(RT,SU),e(SU,Dar),e(RT,Gar),e(Z,Oar),e(Z,PT),e(PT,sFe),e(sFe,Var),e(PT,Xar),e(PT,RU),e(RU,zar),e(PT,Qar),e(ao,War),e(ao,BT),e(BT,Uar),e(BT,lFe),e(lFe,Har),e(BT,Jar),e(BT,iFe),e(iFe,Yar),e(ao,Kar),M(IT,ao,null),b(m,gYe,_),b(m,Id,_),e(Id,NT),e(NT,dFe),M(vx,dFe,null),e(Id,Zar),e(Id,cFe),e(cFe,enr),b(m,hYe,_),b(m,Do,_),M(Fx,Do,null),e(Do,onr),e(Do,Nd),e(Nd,rnr),e(Nd,PU),e(PU,tnr),e(Nd,anr),e(Nd,BU),e(BU,nnr),e(Nd,snr),e(Do,lnr),e(Do,Tx),e(Tx,inr),e(Tx,mFe),e(mFe,dnr),e(Tx,cnr),e(Do,mnr),e(Do,Et),M(Mx,Et,null),e(Et,fnr),e(Et,fFe),e(fFe,gnr),e(Et,hnr),e(Et,qd),e(qd,unr),e(qd,gFe),e(gFe,pnr),e(qd,_nr),e(qd,IU),e(IU,bnr),e(qd,vnr),e(Et,Fnr),M(qT,Et,null),e(Do,Tnr),e(Do,no),M(Ex,no,null),e(no,Mnr),e(no,hFe),e(hFe,Enr),e(no,Cnr),e(no,tn),e(tn,wnr),e(tn,uFe),e(uFe,Anr),e(tn,Lnr),e(tn,pFe),e(pFe,ynr),e(tn,xnr),e(tn,_Fe),e(_Fe,$nr),e(tn,knr),e(no,Snr),e(no,Go),e(Go,jT),e(jT,bFe),e(bFe,Rnr),e(jT,Pnr),e(jT,NU),e(NU,Bnr),e(jT,Inr),e(Go,Nnr),e(Go,DT),e(DT,vFe),e(vFe,qnr),e(DT,jnr),e(DT,qU),e(qU,Dnr),e(DT,Gnr),e(Go,Onr),e(Go,GT),e(GT,FFe),e(FFe,Vnr),e(GT,Xnr),e(GT,jU),e(jU,znr),e(GT,Qnr),e(Go,Wnr),e(Go,OT),e(OT,TFe),e(TFe,Unr),e(OT,Hnr),e(OT,DU),e(DU,Jnr),e(OT,Ynr),e(Go,Knr),e(Go,VT),e(VT,MFe),e(MFe,Znr),e(VT,esr),e(VT,GU),e(GU,osr),e(VT,rsr),e(Go,tsr),e(Go,XT),e(XT,EFe),e(EFe,asr),e(XT,nsr),e(XT,OU),e(OU,ssr),e(XT,lsr),e(no,isr),e(no,zT),e(zT,dsr),e(zT,CFe),e(CFe,csr),e(zT,msr),e(zT,wFe),e(wFe,fsr),e(no,gsr),M(QT,no,null),b(m,uYe,_),b(m,jd,_),e(jd,WT),e(WT,AFe),M(Cx,AFe,null),e(jd,hsr),e(jd,LFe),e(LFe,usr),b(m,pYe,_),b(m,Oo,_),M(wx,Oo,null),e(Oo,psr),e(Oo,Dd),e(Dd,_sr),e(Dd,VU),e(VU,bsr),e(Dd,vsr),e(Dd,XU),e(XU,Fsr),e(Dd,Tsr),e(Oo,Msr),e(Oo,Ax),e(Ax,Esr),e(Ax,yFe),e(yFe,Csr),e(Ax,wsr),e(Oo,Asr),e(Oo,Ct),M(Lx,Ct,null),e(Ct,Lsr),e(Ct,xFe),e(xFe,ysr),e(Ct,xsr),e(Ct,Gd),e(Gd,$sr),e(Gd,$Fe),e($Fe,ksr),e(Gd,Ssr),e(Gd,zU),e(zU,Rsr),e(Gd,Psr),e(Ct,Bsr),M(UT,Ct,null),e(Oo,Isr),e(Oo,so),M(yx,so,null),e(so,Nsr),e(so,kFe),e(kFe,qsr),e(so,jsr),e(so,an),e(an,Dsr),e(an,SFe),e(SFe,Gsr),e(an,Osr),e(an,RFe),e(RFe,Vsr),e(an,Xsr),e(an,PFe),e(PFe,zsr),e(an,Qsr),e(so,Wsr),e(so,J),e(J,HT),e(HT,BFe),e(BFe,Usr),e(HT,Hsr),e(HT,QU),e(QU,Jsr),e(HT,Ysr),e(J,Ksr),e(J,JT),e(JT,IFe),e(IFe,Zsr),e(JT,elr),e(JT,WU),e(WU,olr),e(JT,rlr),e(J,tlr),e(J,YT),e(YT,NFe),e(NFe,alr),e(YT,nlr),e(YT,UU),e(UU,slr),e(YT,llr),e(J,ilr),e(J,KT),e(KT,qFe),e(qFe,dlr),e(KT,clr),e(KT,HU),e(HU,mlr),e(KT,flr),e(J,glr),e(J,ZT),e(ZT,jFe),e(jFe,hlr),e(ZT,ulr),e(ZT,JU),e(JU,plr),e(ZT,_lr),e(J,blr),e(J,eM),e(eM,DFe),e(DFe,vlr),e(eM,Flr),e(eM,YU),e(YU,Tlr),e(eM,Mlr),e(J,Elr),e(J,oM),e(oM,GFe),e(GFe,Clr),e(oM,wlr),e(oM,KU),e(KU,Alr),e(oM,Llr),e(J,ylr),e(J,rM),e(rM,OFe),e(OFe,xlr),e(rM,$lr),e(rM,ZU),e(ZU,klr),e(rM,Slr),e(J,Rlr),e(J,tM),e(tM,VFe),e(VFe,Plr),e(tM,Blr),e(tM,eH),e(eH,Ilr),e(tM,Nlr),e(J,qlr),e(J,aM),e(aM,XFe),e(XFe,jlr),e(aM,Dlr),e(aM,oH),e(oH,Glr),e(aM,Olr),e(J,Vlr),e(J,nM),e(nM,zFe),e(zFe,Xlr),e(nM,zlr),e(nM,rH),e(rH,Qlr),e(nM,Wlr),e(J,Ulr),e(J,sM),e(sM,QFe),e(QFe,Hlr),e(sM,Jlr),e(sM,tH),e(tH,Ylr),e(sM,Klr),e(J,Zlr),e(J,lM),e(lM,WFe),e(WFe,eir),e(lM,oir),e(lM,aH),e(aH,rir),e(lM,tir),e(J,air),e(J,iM),e(iM,UFe),e(UFe,nir),e(iM,sir),e(iM,nH),e(nH,lir),e(iM,iir),e(J,dir),e(J,dM),e(dM,HFe),e(HFe,cir),e(dM,mir),e(dM,sH),e(sH,fir),e(dM,gir),e(J,hir),e(J,cM),e(cM,JFe),e(JFe,uir),e(cM,pir),e(cM,lH),e(lH,_ir),e(cM,bir),e(J,vir),e(J,mM),e(mM,YFe),e(YFe,Fir),e(mM,Tir),e(mM,iH),e(iH,Mir),e(mM,Eir),e(J,Cir),e(J,fM),e(fM,KFe),e(KFe,wir),e(fM,Air),e(fM,dH),e(dH,Lir),e(fM,yir),e(J,xir),e(J,gM),e(gM,ZFe),e(ZFe,$ir),e(gM,kir),e(gM,cH),e(cH,Sir),e(gM,Rir),e(J,Pir),e(J,hM),e(hM,eTe),e(eTe,Bir),e(hM,Iir),e(hM,mH),e(mH,Nir),e(hM,qir),e(J,jir),e(J,uM),e(uM,oTe),e(oTe,Dir),e(uM,Gir),e(uM,fH),e(fH,Oir),e(uM,Vir),e(J,Xir),e(J,pM),e(pM,rTe),e(rTe,zir),e(pM,Qir),e(pM,gH),e(gH,Wir),e(pM,Uir),e(J,Hir),e(J,_M),e(_M,tTe),e(tTe,Jir),e(_M,Yir),e(_M,hH),e(hH,Kir),e(_M,Zir),e(J,edr),e(J,bM),e(bM,aTe),e(aTe,odr),e(bM,rdr),e(bM,uH),e(uH,tdr),e(bM,adr),e(J,ndr),e(J,vM),e(vM,nTe),e(nTe,sdr),e(vM,ldr),e(vM,pH),e(pH,idr),e(vM,ddr),e(J,cdr),e(J,FM),e(FM,sTe),e(sTe,mdr),e(FM,fdr),e(FM,_H),e(_H,gdr),e(FM,hdr),e(J,udr),e(J,TM),e(TM,lTe),e(lTe,pdr),e(TM,_dr),e(TM,bH),e(bH,bdr),e(TM,vdr),e(J,Fdr),e(J,MM),e(MM,iTe),e(iTe,Tdr),e(MM,Mdr),e(MM,vH),e(vH,Edr),e(MM,Cdr),e(J,wdr),e(J,EM),e(EM,dTe),e(dTe,Adr),e(EM,Ldr),e(EM,FH),e(FH,ydr),e(EM,xdr),e(J,$dr),e(J,CM),e(CM,cTe),e(cTe,kdr),e(CM,Sdr),e(CM,TH),e(TH,Rdr),e(CM,Pdr),e(J,Bdr),e(J,wM),e(wM,mTe),e(mTe,Idr),e(wM,Ndr),e(wM,MH),e(MH,qdr),e(wM,jdr),e(J,Ddr),e(J,AM),e(AM,fTe),e(fTe,Gdr),e(AM,Odr),e(AM,EH),e(EH,Vdr),e(AM,Xdr),e(J,zdr),e(J,LM),e(LM,gTe),e(gTe,Qdr),e(LM,Wdr),e(LM,CH),e(CH,Udr),e(LM,Hdr),e(J,Jdr),e(J,yM),e(yM,hTe),e(hTe,Ydr),e(yM,Kdr),e(yM,wH),e(wH,Zdr),e(yM,ecr),e(J,ocr),e(J,xM),e(xM,uTe),e(uTe,rcr),e(xM,tcr),e(xM,AH),e(AH,acr),e(xM,ncr),e(J,scr),e(J,$M),e($M,pTe),e(pTe,lcr),e($M,icr),e($M,LH),e(LH,dcr),e($M,ccr),e(J,mcr),e(J,kM),e(kM,_Te),e(_Te,fcr),e(kM,gcr),e(kM,yH),e(yH,hcr),e(kM,ucr),e(so,pcr),e(so,SM),e(SM,_cr),e(SM,bTe),e(bTe,bcr),e(SM,vcr),e(SM,vTe),e(vTe,Fcr),e(so,Tcr),M(RM,so,null),b(m,_Ye,_),b(m,Od,_),e(Od,PM),e(PM,FTe),M(xx,FTe,null),e(Od,Mcr),e(Od,TTe),e(TTe,Ecr),b(m,bYe,_),b(m,Vo,_),M($x,Vo,null),e(Vo,Ccr),e(Vo,Vd),e(Vd,wcr),e(Vd,xH),e(xH,Acr),e(Vd,Lcr),e(Vd,$H),e($H,ycr),e(Vd,xcr),e(Vo,$cr),e(Vo,kx),e(kx,kcr),e(kx,MTe),e(MTe,Scr),e(kx,Rcr),e(Vo,Pcr),e(Vo,wt),M(Sx,wt,null),e(wt,Bcr),e(wt,ETe),e(ETe,Icr),e(wt,Ncr),e(wt,Xd),e(Xd,qcr),e(Xd,CTe),e(CTe,jcr),e(Xd,Dcr),e(Xd,kH),e(kH,Gcr),e(Xd,Ocr),e(wt,Vcr),M(BM,wt,null),e(Vo,Xcr),e(Vo,lo),M(Rx,lo,null),e(lo,zcr),e(lo,wTe),e(wTe,Qcr),e(lo,Wcr),e(lo,nn),e(nn,Ucr),e(nn,ATe),e(ATe,Hcr),e(nn,Jcr),e(nn,LTe),e(LTe,Ycr),e(nn,Kcr),e(nn,yTe),e(yTe,Zcr),e(nn,emr),e(lo,omr),e(lo,V),e(V,IM),e(IM,xTe),e(xTe,rmr),e(IM,tmr),e(IM,SH),e(SH,amr),e(IM,nmr),e(V,smr),e(V,NM),e(NM,$Te),e($Te,lmr),e(NM,imr),e(NM,RH),e(RH,dmr),e(NM,cmr),e(V,mmr),e(V,qM),e(qM,kTe),e(kTe,fmr),e(qM,gmr),e(qM,PH),e(PH,hmr),e(qM,umr),e(V,pmr),e(V,jM),e(jM,STe),e(STe,_mr),e(jM,bmr),e(jM,BH),e(BH,vmr),e(jM,Fmr),e(V,Tmr),e(V,DM),e(DM,RTe),e(RTe,Mmr),e(DM,Emr),e(DM,IH),e(IH,Cmr),e(DM,wmr),e(V,Amr),e(V,GM),e(GM,PTe),e(PTe,Lmr),e(GM,ymr),e(GM,NH),e(NH,xmr),e(GM,$mr),e(V,kmr),e(V,OM),e(OM,BTe),e(BTe,Smr),e(OM,Rmr),e(OM,qH),e(qH,Pmr),e(OM,Bmr),e(V,Imr),e(V,VM),e(VM,ITe),e(ITe,Nmr),e(VM,qmr),e(VM,jH),e(jH,jmr),e(VM,Dmr),e(V,Gmr),e(V,XM),e(XM,NTe),e(NTe,Omr),e(XM,Vmr),e(XM,DH),e(DH,Xmr),e(XM,zmr),e(V,Qmr),e(V,zM),e(zM,qTe),e(qTe,Wmr),e(zM,Umr),e(zM,GH),e(GH,Hmr),e(zM,Jmr),e(V,Ymr),e(V,QM),e(QM,jTe),e(jTe,Kmr),e(QM,Zmr),e(QM,OH),e(OH,efr),e(QM,ofr),e(V,rfr),e(V,WM),e(WM,DTe),e(DTe,tfr),e(WM,afr),e(WM,VH),e(VH,nfr),e(WM,sfr),e(V,lfr),e(V,UM),e(UM,GTe),e(GTe,ifr),e(UM,dfr),e(UM,XH),e(XH,cfr),e(UM,mfr),e(V,ffr),e(V,HM),e(HM,OTe),e(OTe,gfr),e(HM,hfr),e(HM,zH),e(zH,ufr),e(HM,pfr),e(V,_fr),e(V,JM),e(JM,VTe),e(VTe,bfr),e(JM,vfr),e(JM,QH),e(QH,Ffr),e(JM,Tfr),e(V,Mfr),e(V,YM),e(YM,XTe),e(XTe,Efr),e(YM,Cfr),e(YM,WH),e(WH,wfr),e(YM,Afr),e(V,Lfr),e(V,KM),e(KM,zTe),e(zTe,yfr),e(KM,xfr),e(KM,UH),e(UH,$fr),e(KM,kfr),e(V,Sfr),e(V,ZM),e(ZM,QTe),e(QTe,Rfr),e(ZM,Pfr),e(ZM,HH),e(HH,Bfr),e(ZM,Ifr),e(V,Nfr),e(V,eE),e(eE,WTe),e(WTe,qfr),e(eE,jfr),e(eE,JH),e(JH,Dfr),e(eE,Gfr),e(V,Ofr),e(V,oE),e(oE,UTe),e(UTe,Vfr),e(oE,Xfr),e(oE,YH),e(YH,zfr),e(oE,Qfr),e(V,Wfr),e(V,rE),e(rE,HTe),e(HTe,Ufr),e(rE,Hfr),e(rE,KH),e(KH,Jfr),e(rE,Yfr),e(V,Kfr),e(V,tE),e(tE,JTe),e(JTe,Zfr),e(tE,egr),e(tE,ZH),e(ZH,ogr),e(tE,rgr),e(V,tgr),e(V,aE),e(aE,YTe),e(YTe,agr),e(aE,ngr),e(aE,eJ),e(eJ,sgr),e(aE,lgr),e(V,igr),e(V,nE),e(nE,KTe),e(KTe,dgr),e(nE,cgr),e(nE,oJ),e(oJ,mgr),e(nE,fgr),e(V,ggr),e(V,sE),e(sE,ZTe),e(ZTe,hgr),e(sE,ugr),e(sE,rJ),e(rJ,pgr),e(sE,_gr),e(V,bgr),e(V,lE),e(lE,eMe),e(eMe,vgr),e(lE,Fgr),e(lE,tJ),e(tJ,Tgr),e(lE,Mgr),e(V,Egr),e(V,iE),e(iE,oMe),e(oMe,Cgr),e(iE,wgr),e(iE,aJ),e(aJ,Agr),e(iE,Lgr),e(V,ygr),e(V,dE),e(dE,rMe),e(rMe,xgr),e(dE,$gr),e(dE,nJ),e(nJ,kgr),e(dE,Sgr),e(V,Rgr),e(V,cE),e(cE,tMe),e(tMe,Pgr),e(cE,Bgr),e(cE,sJ),e(sJ,Igr),e(cE,Ngr),e(V,qgr),e(V,mE),e(mE,aMe),e(aMe,jgr),e(mE,Dgr),e(mE,lJ),e(lJ,Ggr),e(mE,Ogr),e(V,Vgr),e(V,fE),e(fE,nMe),e(nMe,Xgr),e(fE,zgr),e(fE,iJ),e(iJ,Qgr),e(fE,Wgr),e(V,Ugr),e(V,gE),e(gE,sMe),e(sMe,Hgr),e(gE,Jgr),e(gE,dJ),e(dJ,Ygr),e(gE,Kgr),e(V,Zgr),e(V,hE),e(hE,lMe),e(lMe,ehr),e(hE,ohr),e(hE,cJ),e(cJ,rhr),e(hE,thr),e(V,ahr),e(V,uE),e(uE,iMe),e(iMe,nhr),e(uE,shr),e(uE,mJ),e(mJ,lhr),e(uE,ihr),e(V,dhr),e(V,pE),e(pE,dMe),e(dMe,chr),e(pE,mhr),e(pE,fJ),e(fJ,fhr),e(pE,ghr),e(V,hhr),e(V,_E),e(_E,cMe),e(cMe,uhr),e(_E,phr),e(_E,gJ),e(gJ,_hr),e(_E,bhr),e(V,vhr),e(V,bE),e(bE,mMe),e(mMe,Fhr),e(bE,Thr),e(bE,hJ),e(hJ,Mhr),e(bE,Ehr),e(V,Chr),e(V,vE),e(vE,fMe),e(fMe,whr),e(vE,Ahr),e(vE,uJ),e(uJ,Lhr),e(vE,yhr),e(V,xhr),e(V,FE),e(FE,gMe),e(gMe,$hr),e(FE,khr),e(FE,pJ),e(pJ,Shr),e(FE,Rhr),e(V,Phr),e(V,TE),e(TE,hMe),e(hMe,Bhr),e(TE,Ihr),e(TE,_J),e(_J,Nhr),e(TE,qhr),e(V,jhr),e(V,ME),e(ME,uMe),e(uMe,Dhr),e(ME,Ghr),e(ME,bJ),e(bJ,Ohr),e(ME,Vhr),e(V,Xhr),e(V,EE),e(EE,pMe),e(pMe,zhr),e(EE,Qhr),e(EE,vJ),e(vJ,Whr),e(EE,Uhr),e(V,Hhr),e(V,CE),e(CE,_Me),e(_Me,Jhr),e(CE,Yhr),e(CE,FJ),e(FJ,Khr),e(CE,Zhr),e(lo,eur),e(lo,wE),e(wE,our),e(wE,bMe),e(bMe,rur),e(wE,tur),e(wE,vMe),e(vMe,aur),e(lo,nur),M(AE,lo,null),b(m,vYe,_),b(m,zd,_),e(zd,LE),e(LE,FMe),M(Px,FMe,null),e(zd,sur),e(zd,TMe),e(TMe,lur),b(m,FYe,_),b(m,Xo,_),M(Bx,Xo,null),e(Xo,iur),e(Xo,Qd),e(Qd,dur),e(Qd,TJ),e(TJ,cur),e(Qd,mur),e(Qd,MJ),e(MJ,fur),e(Qd,gur),e(Xo,hur),e(Xo,Ix),e(Ix,uur),e(Ix,MMe),e(MMe,pur),e(Ix,_ur),e(Xo,bur),e(Xo,At),M(Nx,At,null),e(At,vur),e(At,EMe),e(EMe,Fur),e(At,Tur),e(At,Wd),e(Wd,Mur),e(Wd,CMe),e(CMe,Eur),e(Wd,Cur),e(Wd,EJ),e(EJ,wur),e(Wd,Aur),e(At,Lur),M(yE,At,null),e(Xo,yur),e(Xo,io),M(qx,io,null),e(io,xur),e(io,wMe),e(wMe,$ur),e(io,kur),e(io,sn),e(sn,Sur),e(sn,AMe),e(AMe,Rur),e(sn,Pur),e(sn,LMe),e(LMe,Bur),e(sn,Iur),e(sn,yMe),e(yMe,Nur),e(sn,qur),e(io,jur),e(io,xMe),e(xMe,xE),e(xE,$Me),e($Me,Dur),e(xE,Gur),e(xE,CJ),e(CJ,Our),e(xE,Vur),e(io,Xur),e(io,$E),e($E,zur),e($E,kMe),e(kMe,Qur),e($E,Wur),e($E,SMe),e(SMe,Uur),e(io,Hur),M(kE,io,null),b(m,TYe,_),b(m,Ud,_),e(Ud,SE),e(SE,RMe),M(jx,RMe,null),e(Ud,Jur),e(Ud,PMe),e(PMe,Yur),b(m,MYe,_),b(m,zo,_),M(Dx,zo,null),e(zo,Kur),e(zo,Hd),e(Hd,Zur),e(Hd,wJ),e(wJ,epr),e(Hd,opr),e(Hd,AJ),e(AJ,rpr),e(Hd,tpr),e(zo,apr),e(zo,Gx),e(Gx,npr),e(Gx,BMe),e(BMe,spr),e(Gx,lpr),e(zo,ipr),e(zo,Lt),M(Ox,Lt,null),e(Lt,dpr),e(Lt,IMe),e(IMe,cpr),e(Lt,mpr),e(Lt,Jd),e(Jd,fpr),e(Jd,NMe),e(NMe,gpr),e(Jd,hpr),e(Jd,LJ),e(LJ,upr),e(Jd,ppr),e(Lt,_pr),M(RE,Lt,null),e(zo,bpr),e(zo,co),M(Vx,co,null),e(co,vpr),e(co,qMe),e(qMe,Fpr),e(co,Tpr),e(co,ln),e(ln,Mpr),e(ln,jMe),e(jMe,Epr),e(ln,Cpr),e(ln,DMe),e(DMe,wpr),e(ln,Apr),e(ln,GMe),e(GMe,Lpr),e(ln,ypr),e(co,xpr),e(co,Yd),e(Yd,PE),e(PE,OMe),e(OMe,$pr),e(PE,kpr),e(PE,yJ),e(yJ,Spr),e(PE,Rpr),e(Yd,Ppr),e(Yd,BE),e(BE,VMe),e(VMe,Bpr),e(BE,Ipr),e(BE,xJ),e(xJ,Npr),e(BE,qpr),e(Yd,jpr),e(Yd,IE),e(IE,XMe),e(XMe,Dpr),e(IE,Gpr),e(IE,$J),e($J,Opr),e(IE,Vpr),e(co,Xpr),e(co,NE),e(NE,zpr),e(NE,zMe),e(zMe,Qpr),e(NE,Wpr),e(NE,QMe),e(QMe,Upr),e(co,Hpr),M(qE,co,null),b(m,EYe,_),b(m,Kd,_),e(Kd,jE),e(jE,WMe),M(Xx,WMe,null),e(Kd,Jpr),e(Kd,UMe),e(UMe,Ypr),b(m,CYe,_),b(m,Qo,_),M(zx,Qo,null),e(Qo,Kpr),e(Qo,Zd),e(Zd,Zpr),e(Zd,kJ),e(kJ,e_r),e(Zd,o_r),e(Zd,SJ),e(SJ,r_r),e(Zd,t_r),e(Qo,a_r),e(Qo,Qx),e(Qx,n_r),e(Qx,HMe),e(HMe,s_r),e(Qx,l_r),e(Qo,i_r),e(Qo,yt),M(Wx,yt,null),e(yt,d_r),e(yt,JMe),e(JMe,c_r),e(yt,m_r),e(yt,ec),e(ec,f_r),e(ec,YMe),e(YMe,g_r),e(ec,h_r),e(ec,RJ),e(RJ,u_r),e(ec,p_r),e(yt,__r),M(DE,yt,null),e(Qo,b_r),e(Qo,mo),M(Ux,mo,null),e(mo,v_r),e(mo,KMe),e(KMe,F_r),e(mo,T_r),e(mo,dn),e(dn,M_r),e(dn,ZMe),e(ZMe,E_r),e(dn,C_r),e(dn,eEe),e(eEe,w_r),e(dn,A_r),e(dn,oEe),e(oEe,L_r),e(dn,y_r),e(mo,x_r),e(mo,be),e(be,GE),e(GE,rEe),e(rEe,$_r),e(GE,k_r),e(GE,PJ),e(PJ,S_r),e(GE,R_r),e(be,P_r),e(be,OE),e(OE,tEe),e(tEe,B_r),e(OE,I_r),e(OE,BJ),e(BJ,N_r),e(OE,q_r),e(be,j_r),e(be,VE),e(VE,aEe),e(aEe,D_r),e(VE,G_r),e(VE,IJ),e(IJ,O_r),e(VE,V_r),e(be,X_r),e(be,XE),e(XE,nEe),e(nEe,z_r),e(XE,Q_r),e(XE,NJ),e(NJ,W_r),e(XE,U_r),e(be,H_r),e(be,pl),e(pl,sEe),e(sEe,J_r),e(pl,Y_r),e(pl,qJ),e(qJ,K_r),e(pl,Z_r),e(pl,jJ),e(jJ,ebr),e(pl,obr),e(be,rbr),e(be,zE),e(zE,lEe),e(lEe,tbr),e(zE,abr),e(zE,DJ),e(DJ,nbr),e(zE,sbr),e(be,lbr),e(be,_l),e(_l,iEe),e(iEe,ibr),e(_l,dbr),e(_l,GJ),e(GJ,cbr),e(_l,mbr),e(_l,OJ),e(OJ,fbr),e(_l,gbr),e(be,hbr),e(be,QE),e(QE,dEe),e(dEe,ubr),e(QE,pbr),e(QE,VJ),e(VJ,_br),e(QE,bbr),e(be,vbr),e(be,xt),e(xt,cEe),e(cEe,Fbr),e(xt,Tbr),e(xt,XJ),e(XJ,Mbr),e(xt,Ebr),e(xt,zJ),e(zJ,Cbr),e(xt,wbr),e(xt,QJ),e(QJ,Abr),e(xt,Lbr),e(be,ybr),e(be,WE),e(WE,mEe),e(mEe,xbr),e(WE,$br),e(WE,WJ),e(WJ,kbr),e(WE,Sbr),e(be,Rbr),e(be,UE),e(UE,fEe),e(fEe,Pbr),e(UE,Bbr),e(UE,UJ),e(UJ,Ibr),e(UE,Nbr),e(be,qbr),e(be,HE),e(HE,gEe),e(gEe,jbr),e(HE,Dbr),e(HE,HJ),e(HJ,Gbr),e(HE,Obr),e(be,Vbr),e(be,JE),e(JE,hEe),e(hEe,Xbr),e(JE,zbr),e(JE,JJ),e(JJ,Qbr),e(JE,Wbr),e(be,Ubr),e(be,YE),e(YE,uEe),e(uEe,Hbr),e(YE,Jbr),e(YE,YJ),e(YJ,Ybr),e(YE,Kbr),e(be,Zbr),e(be,KE),e(KE,pEe),e(pEe,e2r),e(KE,o2r),e(KE,KJ),e(KJ,r2r),e(KE,t2r),e(be,a2r),e(be,ZE),e(ZE,_Ee),e(_Ee,n2r),e(ZE,s2r),e(ZE,ZJ),e(ZJ,l2r),e(ZE,i2r),e(be,d2r),e(be,e4),e(e4,bEe),e(bEe,c2r),e(e4,m2r),e(e4,eY),e(eY,f2r),e(e4,g2r),e(mo,h2r),e(mo,o4),e(o4,u2r),e(o4,vEe),e(vEe,p2r),e(o4,_2r),e(o4,FEe),e(FEe,b2r),e(mo,v2r),M(r4,mo,null),b(m,wYe,_),b(m,oc,_),e(oc,t4),e(t4,TEe),M(Hx,TEe,null),e(oc,F2r),e(oc,MEe),e(MEe,T2r),b(m,AYe,_),b(m,Wo,_),M(Jx,Wo,null),e(Wo,M2r),e(Wo,rc),e(rc,E2r),e(rc,oY),e(oY,C2r),e(rc,w2r),e(rc,rY),e(rY,A2r),e(rc,L2r),e(Wo,y2r),e(Wo,Yx),e(Yx,x2r),e(Yx,EEe),e(EEe,$2r),e(Yx,k2r),e(Wo,S2r),e(Wo,$t),M(Kx,$t,null),e($t,R2r),e($t,CEe),e(CEe,P2r),e($t,B2r),e($t,tc),e(tc,I2r),e(tc,wEe),e(wEe,N2r),e(tc,q2r),e(tc,tY),e(tY,j2r),e(tc,D2r),e($t,G2r),M(a4,$t,null),e(Wo,O2r),e(Wo,fo),M(Zx,fo,null),e(fo,V2r),e(fo,AEe),e(AEe,X2r),e(fo,z2r),e(fo,cn),e(cn,Q2r),e(cn,LEe),e(LEe,W2r),e(cn,U2r),e(cn,yEe),e(yEe,H2r),e(cn,J2r),e(cn,xEe),e(xEe,Y2r),e(cn,K2r),e(fo,Z2r),e(fo,$Ee),e($Ee,n4),e(n4,kEe),e(kEe,evr),e(n4,ovr),e(n4,aY),e(aY,rvr),e(n4,tvr),e(fo,avr),e(fo,s4),e(s4,nvr),e(s4,SEe),e(SEe,svr),e(s4,lvr),e(s4,REe),e(REe,ivr),e(fo,dvr),M(l4,fo,null),b(m,LYe,_),b(m,ac,_),e(ac,i4),e(i4,PEe),M(e$,PEe,null),e(ac,cvr),e(ac,BEe),e(BEe,mvr),b(m,yYe,_),b(m,Uo,_),M(o$,Uo,null),e(Uo,fvr),e(Uo,nc),e(nc,gvr),e(nc,nY),e(nY,hvr),e(nc,uvr),e(nc,sY),e(sY,pvr),e(nc,_vr),e(Uo,bvr),e(Uo,r$),e(r$,vvr),e(r$,IEe),e(IEe,Fvr),e(r$,Tvr),e(Uo,Mvr),e(Uo,kt),M(t$,kt,null),e(kt,Evr),e(kt,NEe),e(NEe,Cvr),e(kt,wvr),e(kt,sc),e(sc,Avr),e(sc,qEe),e(qEe,Lvr),e(sc,yvr),e(sc,lY),e(lY,xvr),e(sc,$vr),e(kt,kvr),M(d4,kt,null),e(Uo,Svr),e(Uo,go),M(a$,go,null),e(go,Rvr),e(go,jEe),e(jEe,Pvr),e(go,Bvr),e(go,mn),e(mn,Ivr),e(mn,DEe),e(DEe,Nvr),e(mn,qvr),e(mn,GEe),e(GEe,jvr),e(mn,Dvr),e(mn,OEe),e(OEe,Gvr),e(mn,Ovr),e(go,Vvr),e(go,VEe),e(VEe,c4),e(c4,XEe),e(XEe,Xvr),e(c4,zvr),e(c4,iY),e(iY,Qvr),e(c4,Wvr),e(go,Uvr),e(go,m4),e(m4,Hvr),e(m4,zEe),e(zEe,Jvr),e(m4,Yvr),e(m4,QEe),e(QEe,Kvr),e(go,Zvr),M(f4,go,null),b(m,xYe,_),b(m,lc,_),e(lc,g4),e(g4,WEe),M(n$,WEe,null),e(lc,e1r),e(lc,UEe),e(UEe,o1r),b(m,$Ye,_),b(m,Ho,_),M(s$,Ho,null),e(Ho,r1r),e(Ho,ic),e(ic,t1r),e(ic,dY),e(dY,a1r),e(ic,n1r),e(ic,cY),e(cY,s1r),e(ic,l1r),e(Ho,i1r),e(Ho,l$),e(l$,d1r),e(l$,HEe),e(HEe,c1r),e(l$,m1r),e(Ho,f1r),e(Ho,St),M(i$,St,null),e(St,g1r),e(St,JEe),e(JEe,h1r),e(St,u1r),e(St,dc),e(dc,p1r),e(dc,YEe),e(YEe,_1r),e(dc,b1r),e(dc,mY),e(mY,v1r),e(dc,F1r),e(St,T1r),M(h4,St,null),e(Ho,M1r),e(Ho,ho),M(d$,ho,null),e(ho,E1r),e(ho,KEe),e(KEe,C1r),e(ho,w1r),e(ho,fn),e(fn,A1r),e(fn,ZEe),e(ZEe,L1r),e(fn,y1r),e(fn,e4e),e(e4e,x1r),e(fn,$1r),e(fn,o4e),e(o4e,k1r),e(fn,S1r),e(ho,R1r),e(ho,r4e),e(r4e,u4),e(u4,t4e),e(t4e,P1r),e(u4,B1r),e(u4,fY),e(fY,I1r),e(u4,N1r),e(ho,q1r),e(ho,p4),e(p4,j1r),e(p4,a4e),e(a4e,D1r),e(p4,G1r),e(p4,n4e),e(n4e,O1r),e(ho,V1r),M(_4,ho,null),b(m,kYe,_),b(m,cc,_),e(cc,b4),e(b4,s4e),M(c$,s4e,null),e(cc,X1r),e(cc,l4e),e(l4e,z1r),b(m,SYe,_),b(m,Jo,_),M(m$,Jo,null),e(Jo,Q1r),e(Jo,mc),e(mc,W1r),e(mc,gY),e(gY,U1r),e(mc,H1r),e(mc,hY),e(hY,J1r),e(mc,Y1r),e(Jo,K1r),e(Jo,f$),e(f$,Z1r),e(f$,i4e),e(i4e,eFr),e(f$,oFr),e(Jo,rFr),e(Jo,Rt),M(g$,Rt,null),e(Rt,tFr),e(Rt,d4e),e(d4e,aFr),e(Rt,nFr),e(Rt,fc),e(fc,sFr),e(fc,c4e),e(c4e,lFr),e(fc,iFr),e(fc,uY),e(uY,dFr),e(fc,cFr),e(Rt,mFr),M(v4,Rt,null),e(Jo,fFr),e(Jo,uo),M(h$,uo,null),e(uo,gFr),e(uo,m4e),e(m4e,hFr),e(uo,uFr),e(uo,gn),e(gn,pFr),e(gn,f4e),e(f4e,_Fr),e(gn,bFr),e(gn,g4e),e(g4e,vFr),e(gn,FFr),e(gn,h4e),e(h4e,TFr),e(gn,MFr),e(uo,EFr),e(uo,Pe),e(Pe,F4),e(F4,u4e),e(u4e,CFr),e(F4,wFr),e(F4,pY),e(pY,AFr),e(F4,LFr),e(Pe,yFr),e(Pe,T4),e(T4,p4e),e(p4e,xFr),e(T4,$Fr),e(T4,_Y),e(_Y,kFr),e(T4,SFr),e(Pe,RFr),e(Pe,M4),e(M4,_4e),e(_4e,PFr),e(M4,BFr),e(M4,bY),e(bY,IFr),e(M4,NFr),e(Pe,qFr),e(Pe,E4),e(E4,b4e),e(b4e,jFr),e(E4,DFr),e(E4,vY),e(vY,GFr),e(E4,OFr),e(Pe,VFr),e(Pe,C4),e(C4,v4e),e(v4e,XFr),e(C4,zFr),e(C4,FY),e(FY,QFr),e(C4,WFr),e(Pe,UFr),e(Pe,w4),e(w4,F4e),e(F4e,HFr),e(w4,JFr),e(w4,TY),e(TY,YFr),e(w4,KFr),e(Pe,ZFr),e(Pe,A4),e(A4,T4e),e(T4e,eTr),e(A4,oTr),e(A4,MY),e(MY,rTr),e(A4,tTr),e(Pe,aTr),e(Pe,L4),e(L4,M4e),e(M4e,nTr),e(L4,sTr),e(L4,EY),e(EY,lTr),e(L4,iTr),e(Pe,dTr),e(Pe,y4),e(y4,E4e),e(E4e,cTr),e(y4,mTr),e(y4,CY),e(CY,fTr),e(y4,gTr),e(uo,hTr),e(uo,x4),e(x4,uTr),e(x4,C4e),e(C4e,pTr),e(x4,_Tr),e(x4,w4e),e(w4e,bTr),e(uo,vTr),M($4,uo,null),b(m,RYe,_),b(m,gc,_),e(gc,k4),e(k4,A4e),M(u$,A4e,null),e(gc,FTr),e(gc,L4e),e(L4e,TTr),b(m,PYe,_),b(m,Yo,_),M(p$,Yo,null),e(Yo,MTr),e(Yo,hc),e(hc,ETr),e(hc,wY),e(wY,CTr),e(hc,wTr),e(hc,AY),e(AY,ATr),e(hc,LTr),e(Yo,yTr),e(Yo,_$),e(_$,xTr),e(_$,y4e),e(y4e,$Tr),e(_$,kTr),e(Yo,STr),e(Yo,Pt),M(b$,Pt,null),e(Pt,RTr),e(Pt,x4e),e(x4e,PTr),e(Pt,BTr),e(Pt,uc),e(uc,ITr),e(uc,$4e),e($4e,NTr),e(uc,qTr),e(uc,LY),e(LY,jTr),e(uc,DTr),e(Pt,GTr),M(S4,Pt,null),e(Yo,OTr),e(Yo,po),M(v$,po,null),e(po,VTr),e(po,k4e),e(k4e,XTr),e(po,zTr),e(po,hn),e(hn,QTr),e(hn,S4e),e(S4e,WTr),e(hn,UTr),e(hn,R4e),e(R4e,HTr),e(hn,JTr),e(hn,P4e),e(P4e,YTr),e(hn,KTr),e(po,ZTr),e(po,ct),e(ct,R4),e(R4,B4e),e(B4e,eMr),e(R4,oMr),e(R4,yY),e(yY,rMr),e(R4,tMr),e(ct,aMr),e(ct,P4),e(P4,I4e),e(I4e,nMr),e(P4,sMr),e(P4,xY),e(xY,lMr),e(P4,iMr),e(ct,dMr),e(ct,B4),e(B4,N4e),e(N4e,cMr),e(B4,mMr),e(B4,$Y),e($Y,fMr),e(B4,gMr),e(ct,hMr),e(ct,I4),e(I4,q4e),e(q4e,uMr),e(I4,pMr),e(I4,kY),e(kY,_Mr),e(I4,bMr),e(ct,vMr),e(ct,N4),e(N4,j4e),e(j4e,FMr),e(N4,TMr),e(N4,SY),e(SY,MMr),e(N4,EMr),e(po,CMr),e(po,q4),e(q4,wMr),e(q4,D4e),e(D4e,AMr),e(q4,LMr),e(q4,G4e),e(G4e,yMr),e(po,xMr),M(j4,po,null),b(m,BYe,_),b(m,pc,_),e(pc,D4),e(D4,O4e),M(F$,O4e,null),e(pc,$Mr),e(pc,V4e),e(V4e,kMr),b(m,IYe,_),b(m,Ko,_),M(T$,Ko,null),e(Ko,SMr),e(Ko,_c),e(_c,RMr),e(_c,RY),e(RY,PMr),e(_c,BMr),e(_c,PY),e(PY,IMr),e(_c,NMr),e(Ko,qMr),e(Ko,M$),e(M$,jMr),e(M$,X4e),e(X4e,DMr),e(M$,GMr),e(Ko,OMr),e(Ko,Bt),M(E$,Bt,null),e(Bt,VMr),e(Bt,z4e),e(z4e,XMr),e(Bt,zMr),e(Bt,bc),e(bc,QMr),e(bc,Q4e),e(Q4e,WMr),e(bc,UMr),e(bc,BY),e(BY,HMr),e(bc,JMr),e(Bt,YMr),M(G4,Bt,null),e(Ko,KMr),e(Ko,_o),M(C$,_o,null),e(_o,ZMr),e(_o,W4e),e(W4e,eEr),e(_o,oEr),e(_o,un),e(un,rEr),e(un,U4e),e(U4e,tEr),e(un,aEr),e(un,H4e),e(H4e,nEr),e(un,sEr),e(un,J4e),e(J4e,lEr),e(un,iEr),e(_o,dEr),e(_o,Le),e(Le,O4),e(O4,Y4e),e(Y4e,cEr),e(O4,mEr),e(O4,IY),e(IY,fEr),e(O4,gEr),e(Le,hEr),e(Le,V4),e(V4,K4e),e(K4e,uEr),e(V4,pEr),e(V4,NY),e(NY,_Er),e(V4,bEr),e(Le,vEr),e(Le,X4),e(X4,Z4e),e(Z4e,FEr),e(X4,TEr),e(X4,qY),e(qY,MEr),e(X4,EEr),e(Le,CEr),e(Le,z4),e(z4,eCe),e(eCe,wEr),e(z4,AEr),e(z4,jY),e(jY,LEr),e(z4,yEr),e(Le,xEr),e(Le,Q4),e(Q4,oCe),e(oCe,$Er),e(Q4,kEr),e(Q4,DY),e(DY,SEr),e(Q4,REr),e(Le,PEr),e(Le,W4),e(W4,rCe),e(rCe,BEr),e(W4,IEr),e(W4,GY),e(GY,NEr),e(W4,qEr),e(Le,jEr),e(Le,U4),e(U4,tCe),e(tCe,DEr),e(U4,GEr),e(U4,OY),e(OY,OEr),e(U4,VEr),e(Le,XEr),e(Le,H4),e(H4,aCe),e(aCe,zEr),e(H4,QEr),e(H4,VY),e(VY,WEr),e(H4,UEr),e(Le,HEr),e(Le,J4),e(J4,nCe),e(nCe,JEr),e(J4,YEr),e(J4,XY),e(XY,KEr),e(J4,ZEr),e(Le,e4r),e(Le,Y4),e(Y4,sCe),e(sCe,o4r),e(Y4,r4r),e(Y4,zY),e(zY,t4r),e(Y4,a4r),e(_o,n4r),e(_o,K4),e(K4,s4r),e(K4,lCe),e(lCe,l4r),e(K4,i4r),e(K4,iCe),e(iCe,d4r),e(_o,c4r),M(Z4,_o,null),b(m,NYe,_),b(m,vc,_),e(vc,eC),e(eC,dCe),M(w$,dCe,null),e(vc,m4r),e(vc,cCe),e(cCe,f4r),b(m,qYe,_),b(m,Zo,_),M(A$,Zo,null),e(Zo,g4r),e(Zo,Fc),e(Fc,h4r),e(Fc,QY),e(QY,u4r),e(Fc,p4r),e(Fc,WY),e(WY,_4r),e(Fc,b4r),e(Zo,v4r),e(Zo,L$),e(L$,F4r),e(L$,mCe),e(mCe,T4r),e(L$,M4r),e(Zo,E4r),e(Zo,It),M(y$,It,null),e(It,C4r),e(It,fCe),e(fCe,w4r),e(It,A4r),e(It,Tc),e(Tc,L4r),e(Tc,gCe),e(gCe,y4r),e(Tc,x4r),e(Tc,UY),e(UY,$4r),e(Tc,k4r),e(It,S4r),M(oC,It,null),e(Zo,R4r),e(Zo,bo),M(x$,bo,null),e(bo,P4r),e(bo,hCe),e(hCe,B4r),e(bo,I4r),e(bo,pn),e(pn,N4r),e(pn,uCe),e(uCe,q4r),e(pn,j4r),e(pn,pCe),e(pCe,D4r),e(pn,G4r),e(pn,_Ce),e(_Ce,O4r),e(pn,V4r),e(bo,X4r),e(bo,$$),e($$,rC),e(rC,bCe),e(bCe,z4r),e(rC,Q4r),e(rC,HY),e(HY,W4r),e(rC,U4r),e($$,H4r),e($$,tC),e(tC,vCe),e(vCe,J4r),e(tC,Y4r),e(tC,JY),e(JY,K4r),e(tC,Z4r),e(bo,eCr),e(bo,aC),e(aC,oCr),e(aC,FCe),e(FCe,rCr),e(aC,tCr),e(aC,TCe),e(TCe,aCr),e(bo,nCr),M(nC,bo,null),b(m,jYe,_),b(m,Mc,_),e(Mc,sC),e(sC,MCe),M(k$,MCe,null),e(Mc,sCr),e(Mc,ECe),e(ECe,lCr),b(m,DYe,_),b(m,er,_),M(S$,er,null),e(er,iCr),e(er,Ec),e(Ec,dCr),e(Ec,YY),e(YY,cCr),e(Ec,mCr),e(Ec,KY),e(KY,fCr),e(Ec,gCr),e(er,hCr),e(er,R$),e(R$,uCr),e(R$,CCe),e(CCe,pCr),e(R$,_Cr),e(er,bCr),e(er,Nt),M(P$,Nt,null),e(Nt,vCr),e(Nt,wCe),e(wCe,FCr),e(Nt,TCr),e(Nt,Cc),e(Cc,MCr),e(Cc,ACe),e(ACe,ECr),e(Cc,CCr),e(Cc,ZY),e(ZY,wCr),e(Cc,ACr),e(Nt,LCr),M(lC,Nt,null),e(er,yCr),e(er,vo),M(B$,vo,null),e(vo,xCr),e(vo,LCe),e(LCe,$Cr),e(vo,kCr),e(vo,_n),e(_n,SCr),e(_n,yCe),e(yCe,RCr),e(_n,PCr),e(_n,xCe),e(xCe,BCr),e(_n,ICr),e(_n,$Ce),e($Ce,NCr),e(_n,qCr),e(vo,jCr),e(vo,mt),e(mt,iC),e(iC,kCe),e(kCe,DCr),e(iC,GCr),e(iC,eK),e(eK,OCr),e(iC,VCr),e(mt,XCr),e(mt,dC),e(dC,SCe),e(SCe,zCr),e(dC,QCr),e(dC,oK),e(oK,WCr),e(dC,UCr),e(mt,HCr),e(mt,cC),e(cC,RCe),e(RCe,JCr),e(cC,YCr),e(cC,rK),e(rK,KCr),e(cC,ZCr),e(mt,e3r),e(mt,mC),e(mC,PCe),e(PCe,o3r),e(mC,r3r),e(mC,tK),e(tK,t3r),e(mC,a3r),e(mt,n3r),e(mt,fC),e(fC,BCe),e(BCe,s3r),e(fC,l3r),e(fC,aK),e(aK,i3r),e(fC,d3r),e(vo,c3r),e(vo,gC),e(gC,m3r),e(gC,ICe),e(ICe,f3r),e(gC,g3r),e(gC,NCe),e(NCe,h3r),e(vo,u3r),M(hC,vo,null),b(m,GYe,_),b(m,wc,_),e(wc,uC),e(uC,qCe),M(I$,qCe,null),e(wc,p3r),e(wc,jCe),e(jCe,_3r),b(m,OYe,_),b(m,or,_),M(N$,or,null),e(or,b3r),e(or,Ac),e(Ac,v3r),e(Ac,nK),e(nK,F3r),e(Ac,T3r),e(Ac,sK),e(sK,M3r),e(Ac,E3r),e(or,C3r),e(or,q$),e(q$,w3r),e(q$,DCe),e(DCe,A3r),e(q$,L3r),e(or,y3r),e(or,qt),M(j$,qt,null),e(qt,x3r),e(qt,GCe),e(GCe,$3r),e(qt,k3r),e(qt,Lc),e(Lc,S3r),e(Lc,OCe),e(OCe,R3r),e(Lc,P3r),e(Lc,lK),e(lK,B3r),e(Lc,I3r),e(qt,N3r),M(pC,qt,null),e(or,q3r),e(or,Fo),M(D$,Fo,null),e(Fo,j3r),e(Fo,VCe),e(VCe,D3r),e(Fo,G3r),e(Fo,bn),e(bn,O3r),e(bn,XCe),e(XCe,V3r),e(bn,X3r),e(bn,zCe),e(zCe,z3r),e(bn,Q3r),e(bn,QCe),e(QCe,W3r),e(bn,U3r),e(Fo,H3r),e(Fo,vn),e(vn,_C),e(_C,WCe),e(WCe,J3r),e(_C,Y3r),e(_C,iK),e(iK,K3r),e(_C,Z3r),e(vn,e5r),e(vn,bC),e(bC,UCe),e(UCe,o5r),e(bC,r5r),e(bC,dK),e(dK,t5r),e(bC,a5r),e(vn,n5r),e(vn,vC),e(vC,HCe),e(HCe,s5r),e(vC,l5r),e(vC,cK),e(cK,i5r),e(vC,d5r),e(vn,c5r),e(vn,FC),e(FC,JCe),e(JCe,m5r),e(FC,f5r),e(FC,mK),e(mK,g5r),e(FC,h5r),e(Fo,u5r),e(Fo,TC),e(TC,p5r),e(TC,YCe),e(YCe,_5r),e(TC,b5r),e(TC,KCe),e(KCe,v5r),e(Fo,F5r),M(MC,Fo,null),b(m,VYe,_),b(m,yc,_),e(yc,EC),e(EC,ZCe),M(G$,ZCe,null),e(yc,T5r),e(yc,e3e),e(e3e,M5r),b(m,XYe,_),b(m,rr,_),M(O$,rr,null),e(rr,E5r),e(rr,xc),e(xc,C5r),e(xc,fK),e(fK,w5r),e(xc,A5r),e(xc,gK),e(gK,L5r),e(xc,y5r),e(rr,x5r),e(rr,V$),e(V$,$5r),e(V$,o3e),e(o3e,k5r),e(V$,S5r),e(rr,R5r),e(rr,jt),M(X$,jt,null),e(jt,P5r),e(jt,r3e),e(r3e,B5r),e(jt,I5r),e(jt,$c),e($c,N5r),e($c,t3e),e(t3e,q5r),e($c,j5r),e($c,hK),e(hK,D5r),e($c,G5r),e(jt,O5r),M(CC,jt,null),e(rr,V5r),e(rr,To),M(z$,To,null),e(To,X5r),e(To,a3e),e(a3e,z5r),e(To,Q5r),e(To,Fn),e(Fn,W5r),e(Fn,n3e),e(n3e,U5r),e(Fn,H5r),e(Fn,s3e),e(s3e,J5r),e(Fn,Y5r),e(Fn,l3e),e(l3e,K5r),e(Fn,Z5r),e(To,e0r),e(To,Q$),e(Q$,wC),e(wC,i3e),e(i3e,o0r),e(wC,r0r),e(wC,uK),e(uK,t0r),e(wC,a0r),e(Q$,n0r),e(Q$,AC),e(AC,d3e),e(d3e,s0r),e(AC,l0r),e(AC,pK),e(pK,i0r),e(AC,d0r),e(To,c0r),e(To,LC),e(LC,m0r),e(LC,c3e),e(c3e,f0r),e(LC,g0r),e(LC,m3e),e(m3e,h0r),e(To,u0r),M(yC,To,null),b(m,zYe,_),b(m,kc,_),e(kc,xC),e(xC,f3e),M(W$,f3e,null),e(kc,p0r),e(kc,g3e),e(g3e,_0r),b(m,QYe,_),b(m,tr,_),M(U$,tr,null),e(tr,b0r),e(tr,Sc),e(Sc,v0r),e(Sc,_K),e(_K,F0r),e(Sc,T0r),e(Sc,bK),e(bK,M0r),e(Sc,E0r),e(tr,C0r),e(tr,H$),e(H$,w0r),e(H$,h3e),e(h3e,A0r),e(H$,L0r),e(tr,y0r),e(tr,Dt),M(J$,Dt,null),e(Dt,x0r),e(Dt,u3e),e(u3e,$0r),e(Dt,k0r),e(Dt,Rc),e(Rc,S0r),e(Rc,p3e),e(p3e,R0r),e(Rc,P0r),e(Rc,vK),e(vK,B0r),e(Rc,I0r),e(Dt,N0r),M($C,Dt,null),e(tr,q0r),e(tr,Mo),M(Y$,Mo,null),e(Mo,j0r),e(Mo,_3e),e(_3e,D0r),e(Mo,G0r),e(Mo,Tn),e(Tn,O0r),e(Tn,b3e),e(b3e,V0r),e(Tn,X0r),e(Tn,v3e),e(v3e,z0r),e(Tn,Q0r),e(Tn,F3e),e(F3e,W0r),e(Tn,U0r),e(Mo,H0r),e(Mo,T3e),e(T3e,kC),e(kC,M3e),e(M3e,J0r),e(kC,Y0r),e(kC,FK),e(FK,K0r),e(kC,Z0r),e(Mo,ewr),e(Mo,SC),e(SC,owr),e(SC,E3e),e(E3e,rwr),e(SC,twr),e(SC,C3e),e(C3e,awr),e(Mo,nwr),M(RC,Mo,null),b(m,WYe,_),b(m,Pc,_),e(Pc,PC),e(PC,w3e),M(K$,w3e,null),e(Pc,swr),e(Pc,A3e),e(A3e,lwr),b(m,UYe,_),b(m,ar,_),M(Z$,ar,null),e(ar,iwr),e(ar,Bc),e(Bc,dwr),e(Bc,TK),e(TK,cwr),e(Bc,mwr),e(Bc,MK),e(MK,fwr),e(Bc,gwr),e(ar,hwr),e(ar,ek),e(ek,uwr),e(ek,L3e),e(L3e,pwr),e(ek,_wr),e(ar,bwr),e(ar,Gt),M(ok,Gt,null),e(Gt,vwr),e(Gt,y3e),e(y3e,Fwr),e(Gt,Twr),e(Gt,Ic),e(Ic,Mwr),e(Ic,x3e),e(x3e,Ewr),e(Ic,Cwr),e(Ic,EK),e(EK,wwr),e(Ic,Awr),e(Gt,Lwr),M(BC,Gt,null),e(ar,ywr),e(ar,Eo),M(rk,Eo,null),e(Eo,xwr),e(Eo,$3e),e($3e,$wr),e(Eo,kwr),e(Eo,Mn),e(Mn,Swr),e(Mn,k3e),e(k3e,Rwr),e(Mn,Pwr),e(Mn,S3e),e(S3e,Bwr),e(Mn,Iwr),e(Mn,R3e),e(R3e,Nwr),e(Mn,qwr),e(Eo,jwr),e(Eo,ft),e(ft,IC),e(IC,P3e),e(P3e,Dwr),e(IC,Gwr),e(IC,CK),e(CK,Owr),e(IC,Vwr),e(ft,Xwr),e(ft,NC),e(NC,B3e),e(B3e,zwr),e(NC,Qwr),e(NC,wK),e(wK,Wwr),e(NC,Uwr),e(ft,Hwr),e(ft,qC),e(qC,I3e),e(I3e,Jwr),e(qC,Ywr),e(qC,AK),e(AK,Kwr),e(qC,Zwr),e(ft,eAr),e(ft,jC),e(jC,N3e),e(N3e,oAr),e(jC,rAr),e(jC,LK),e(LK,tAr),e(jC,aAr),e(ft,nAr),e(ft,DC),e(DC,q3e),e(q3e,sAr),e(DC,lAr),e(DC,yK),e(yK,iAr),e(DC,dAr),e(Eo,cAr),e(Eo,GC),e(GC,mAr),e(GC,j3e),e(j3e,fAr),e(GC,gAr),e(GC,D3e),e(D3e,hAr),e(Eo,uAr),M(OC,Eo,null),b(m,HYe,_),b(m,Nc,_),e(Nc,VC),e(VC,G3e),M(tk,G3e,null),e(Nc,pAr),e(Nc,O3e),e(O3e,_Ar),b(m,JYe,_),b(m,nr,_),M(ak,nr,null),e(nr,bAr),e(nr,qc),e(qc,vAr),e(qc,xK),e(xK,FAr),e(qc,TAr),e(qc,$K),e($K,MAr),e(qc,EAr),e(nr,CAr),e(nr,nk),e(nk,wAr),e(nk,V3e),e(V3e,AAr),e(nk,LAr),e(nr,yAr),e(nr,Ot),M(sk,Ot,null),e(Ot,xAr),e(Ot,X3e),e(X3e,$Ar),e(Ot,kAr),e(Ot,jc),e(jc,SAr),e(jc,z3e),e(z3e,RAr),e(jc,PAr),e(jc,kK),e(kK,BAr),e(jc,IAr),e(Ot,NAr),M(XC,Ot,null),e(nr,qAr),e(nr,Co),M(lk,Co,null),e(Co,jAr),e(Co,Q3e),e(Q3e,DAr),e(Co,GAr),e(Co,En),e(En,OAr),e(En,W3e),e(W3e,VAr),e(En,XAr),e(En,U3e),e(U3e,zAr),e(En,QAr),e(En,H3e),e(H3e,WAr),e(En,UAr),e(Co,HAr),e(Co,J3e),e(J3e,zC),e(zC,Y3e),e(Y3e,JAr),e(zC,YAr),e(zC,SK),e(SK,KAr),e(zC,ZAr),e(Co,e6r),e(Co,QC),e(QC,o6r),e(QC,K3e),e(K3e,r6r),e(QC,t6r),e(QC,Z3e),e(Z3e,a6r),e(Co,n6r),M(WC,Co,null),b(m,YYe,_),b(m,Dc,_),e(Dc,UC),e(UC,e5e),M(ik,e5e,null),e(Dc,s6r),e(Dc,o5e),e(o5e,l6r),b(m,KYe,_),b(m,sr,_),M(dk,sr,null),e(sr,i6r),e(sr,Gc),e(Gc,d6r),e(Gc,RK),e(RK,c6r),e(Gc,m6r),e(Gc,PK),e(PK,f6r),e(Gc,g6r),e(sr,h6r),e(sr,ck),e(ck,u6r),e(ck,r5e),e(r5e,p6r),e(ck,_6r),e(sr,b6r),e(sr,Vt),M(mk,Vt,null),e(Vt,v6r),e(Vt,t5e),e(t5e,F6r),e(Vt,T6r),e(Vt,Oc),e(Oc,M6r),e(Oc,a5e),e(a5e,E6r),e(Oc,C6r),e(Oc,BK),e(BK,w6r),e(Oc,A6r),e(Vt,L6r),M(HC,Vt,null),e(sr,y6r),e(sr,Ir),M(fk,Ir,null),e(Ir,x6r),e(Ir,n5e),e(n5e,$6r),e(Ir,k6r),e(Ir,Cn),e(Cn,S6r),e(Cn,s5e),e(s5e,R6r),e(Cn,P6r),e(Cn,l5e),e(l5e,B6r),e(Cn,I6r),e(Cn,i5e),e(i5e,N6r),e(Cn,q6r),e(Ir,j6r),e(Ir,N),e(N,JC),e(JC,d5e),e(d5e,D6r),e(JC,G6r),e(JC,IK),e(IK,O6r),e(JC,V6r),e(N,X6r),e(N,YC),e(YC,c5e),e(c5e,z6r),e(YC,Q6r),e(YC,NK),e(NK,W6r),e(YC,U6r),e(N,H6r),e(N,KC),e(KC,m5e),e(m5e,J6r),e(KC,Y6r),e(KC,qK),e(qK,K6r),e(KC,Z6r),e(N,e7r),e(N,ZC),e(ZC,f5e),e(f5e,o7r),e(ZC,r7r),e(ZC,jK),e(jK,t7r),e(ZC,a7r),e(N,n7r),e(N,e3),e(e3,g5e),e(g5e,s7r),e(e3,l7r),e(e3,DK),e(DK,i7r),e(e3,d7r),e(N,c7r),e(N,o3),e(o3,h5e),e(h5e,m7r),e(o3,f7r),e(o3,GK),e(GK,g7r),e(o3,h7r),e(N,u7r),e(N,r3),e(r3,u5e),e(u5e,p7r),e(r3,_7r),e(r3,OK),e(OK,b7r),e(r3,v7r),e(N,F7r),e(N,t3),e(t3,p5e),e(p5e,T7r),e(t3,M7r),e(t3,VK),e(VK,E7r),e(t3,C7r),e(N,w7r),e(N,a3),e(a3,_5e),e(_5e,A7r),e(a3,L7r),e(a3,XK),e(XK,y7r),e(a3,x7r),e(N,$7r),e(N,n3),e(n3,b5e),e(b5e,k7r),e(n3,S7r),e(n3,zK),e(zK,R7r),e(n3,P7r),e(N,B7r),e(N,s3),e(s3,v5e),e(v5e,I7r),e(s3,N7r),e(s3,QK),e(QK,q7r),e(s3,j7r),e(N,D7r),e(N,l3),e(l3,F5e),e(F5e,G7r),e(l3,O7r),e(l3,WK),e(WK,V7r),e(l3,X7r),e(N,z7r),e(N,i3),e(i3,T5e),e(T5e,Q7r),e(i3,W7r),e(i3,UK),e(UK,U7r),e(i3,H7r),e(N,J7r),e(N,d3),e(d3,M5e),e(M5e,Y7r),e(d3,K7r),e(d3,HK),e(HK,Z7r),e(d3,eLr),e(N,oLr),e(N,c3),e(c3,E5e),e(E5e,rLr),e(c3,tLr),e(c3,JK),e(JK,aLr),e(c3,nLr),e(N,sLr),e(N,m3),e(m3,C5e),e(C5e,lLr),e(m3,iLr),e(m3,YK),e(YK,dLr),e(m3,cLr),e(N,mLr),e(N,f3),e(f3,w5e),e(w5e,fLr),e(f3,gLr),e(f3,KK),e(KK,hLr),e(f3,uLr),e(N,pLr),e(N,g3),e(g3,A5e),e(A5e,_Lr),e(g3,bLr),e(g3,ZK),e(ZK,vLr),e(g3,FLr),e(N,TLr),e(N,bl),e(bl,L5e),e(L5e,MLr),e(bl,ELr),e(bl,eZ),e(eZ,CLr),e(bl,wLr),e(bl,oZ),e(oZ,ALr),e(bl,LLr),e(N,yLr),e(N,h3),e(h3,y5e),e(y5e,xLr),e(h3,$Lr),e(h3,rZ),e(rZ,kLr),e(h3,SLr),e(N,RLr),e(N,u3),e(u3,x5e),e(x5e,PLr),e(u3,BLr),e(u3,tZ),e(tZ,ILr),e(u3,NLr),e(N,qLr),e(N,p3),e(p3,$5e),e($5e,jLr),e(p3,DLr),e(p3,aZ),e(aZ,GLr),e(p3,OLr),e(N,VLr),e(N,_3),e(_3,k5e),e(k5e,XLr),e(_3,zLr),e(_3,nZ),e(nZ,QLr),e(_3,WLr),e(N,ULr),e(N,b3),e(b3,S5e),e(S5e,HLr),e(b3,JLr),e(b3,sZ),e(sZ,YLr),e(b3,KLr),e(N,ZLr),e(N,v3),e(v3,R5e),e(R5e,eyr),e(v3,oyr),e(v3,lZ),e(lZ,ryr),e(v3,tyr),e(N,ayr),e(N,F3),e(F3,P5e),e(P5e,nyr),e(F3,syr),e(F3,iZ),e(iZ,lyr),e(F3,iyr),e(N,dyr),e(N,T3),e(T3,B5e),e(B5e,cyr),e(T3,myr),e(T3,dZ),e(dZ,fyr),e(T3,gyr),e(N,hyr),e(N,M3),e(M3,I5e),e(I5e,uyr),e(M3,pyr),e(M3,cZ),e(cZ,_yr),e(M3,byr),e(N,vyr),e(N,E3),e(E3,N5e),e(N5e,Fyr),e(E3,Tyr),e(E3,mZ),e(mZ,Myr),e(E3,Eyr),e(N,Cyr),e(N,C3),e(C3,q5e),e(q5e,wyr),e(C3,Ayr),e(C3,fZ),e(fZ,Lyr),e(C3,yyr),e(N,xyr),e(N,w3),e(w3,j5e),e(j5e,$yr),e(w3,kyr),e(w3,gZ),e(gZ,Syr),e(w3,Ryr),e(N,Pyr),e(N,A3),e(A3,D5e),e(D5e,Byr),e(A3,Iyr),e(A3,hZ),e(hZ,Nyr),e(A3,qyr),e(N,jyr),e(N,L3),e(L3,G5e),e(G5e,Dyr),e(L3,Gyr),e(L3,uZ),e(uZ,Oyr),e(L3,Vyr),e(N,Xyr),e(N,y3),e(y3,O5e),e(O5e,zyr),e(y3,Qyr),e(y3,pZ),e(pZ,Wyr),e(y3,Uyr),e(N,Hyr),e(N,x3),e(x3,V5e),e(V5e,Jyr),e(x3,Yyr),e(x3,_Z),e(_Z,Kyr),e(x3,Zyr),e(N,e8r),e(N,$3),e($3,X5e),e(X5e,o8r),e($3,r8r),e($3,bZ),e(bZ,t8r),e($3,a8r),e(N,n8r),e(N,k3),e(k3,z5e),e(z5e,s8r),e(k3,l8r),e(k3,vZ),e(vZ,i8r),e(k3,d8r),e(N,c8r),e(N,S3),e(S3,Q5e),e(Q5e,m8r),e(S3,f8r),e(S3,FZ),e(FZ,g8r),e(S3,h8r),e(N,u8r),e(N,R3),e(R3,W5e),e(W5e,p8r),e(R3,_8r),e(R3,TZ),e(TZ,b8r),e(R3,v8r),e(N,F8r),e(N,P3),e(P3,U5e),e(U5e,T8r),e(P3,M8r),e(P3,MZ),e(MZ,E8r),e(P3,C8r),e(N,w8r),e(N,B3),e(B3,H5e),e(H5e,A8r),e(B3,L8r),e(B3,EZ),e(EZ,y8r),e(B3,x8r),e(N,$8r),e(N,I3),e(I3,J5e),e(J5e,k8r),e(I3,S8r),e(I3,CZ),e(CZ,R8r),e(I3,P8r),e(N,B8r),e(N,N3),e(N3,Y5e),e(Y5e,I8r),e(N3,N8r),e(N3,wZ),e(wZ,q8r),e(N3,j8r),e(N,D8r),e(N,q3),e(q3,K5e),e(K5e,G8r),e(q3,O8r),e(q3,AZ),e(AZ,V8r),e(q3,X8r),e(N,z8r),e(N,j3),e(j3,Z5e),e(Z5e,Q8r),e(j3,W8r),e(j3,LZ),e(LZ,U8r),e(j3,H8r),e(N,J8r),e(N,D3),e(D3,e0e),e(e0e,Y8r),e(D3,K8r),e(D3,yZ),e(yZ,Z8r),e(D3,e9r),e(N,o9r),e(N,G3),e(G3,o0e),e(o0e,r9r),e(G3,t9r),e(G3,xZ),e(xZ,a9r),e(G3,n9r),e(N,s9r),e(N,O3),e(O3,r0e),e(r0e,l9r),e(O3,i9r),e(O3,$Z),e($Z,d9r),e(O3,c9r),e(N,m9r),e(N,V3),e(V3,t0e),e(t0e,f9r),e(V3,g9r),e(V3,kZ),e(kZ,h9r),e(V3,u9r),e(N,p9r),e(N,X3),e(X3,a0e),e(a0e,_9r),e(X3,b9r),e(X3,SZ),e(SZ,v9r),e(X3,F9r),e(N,T9r),e(N,z3),e(z3,n0e),e(n0e,M9r),e(z3,E9r),e(z3,RZ),e(RZ,C9r),e(z3,w9r),e(N,A9r),e(N,Q3),e(Q3,s0e),e(s0e,L9r),e(Q3,y9r),e(Q3,PZ),e(PZ,x9r),e(Q3,$9r),e(N,k9r),e(N,W3),e(W3,l0e),e(l0e,S9r),e(W3,R9r),e(W3,BZ),e(BZ,P9r),e(W3,B9r),e(N,I9r),e(N,U3),e(U3,i0e),e(i0e,N9r),e(U3,q9r),e(U3,IZ),e(IZ,j9r),e(U3,D9r),e(Ir,G9r),M(H3,Ir,null),b(m,ZYe,_),b(m,Vc,_),e(Vc,J3),e(J3,d0e),M(gk,d0e,null),e(Vc,O9r),e(Vc,c0e),e(c0e,V9r),b(m,eKe,_),b(m,lr,_),M(hk,lr,null),e(lr,X9r),e(lr,Xc),e(Xc,z9r),e(Xc,NZ),e(NZ,Q9r),e(Xc,W9r),e(Xc,qZ),e(qZ,U9r),e(Xc,H9r),e(lr,J9r),e(lr,uk),e(uk,Y9r),e(uk,m0e),e(m0e,K9r),e(uk,Z9r),e(lr,exr),e(lr,Xt),M(pk,Xt,null),e(Xt,oxr),e(Xt,f0e),e(f0e,rxr),e(Xt,txr),e(Xt,zc),e(zc,axr),e(zc,g0e),e(g0e,nxr),e(zc,sxr),e(zc,jZ),e(jZ,lxr),e(zc,ixr),e(Xt,dxr),M(Y3,Xt,null),e(lr,cxr),e(lr,Nr),M(_k,Nr,null),e(Nr,mxr),e(Nr,h0e),e(h0e,fxr),e(Nr,gxr),e(Nr,wn),e(wn,hxr),e(wn,u0e),e(u0e,uxr),e(wn,pxr),e(wn,p0e),e(p0e,_xr),e(wn,bxr),e(wn,_0e),e(_0e,vxr),e(wn,Fxr),e(Nr,Txr),e(Nr,se),e(se,K3),e(K3,b0e),e(b0e,Mxr),e(K3,Exr),e(K3,DZ),e(DZ,Cxr),e(K3,wxr),e(se,Axr),e(se,Z3),e(Z3,v0e),e(v0e,Lxr),e(Z3,yxr),e(Z3,GZ),e(GZ,xxr),e(Z3,$xr),e(se,kxr),e(se,e5),e(e5,F0e),e(F0e,Sxr),e(e5,Rxr),e(e5,OZ),e(OZ,Pxr),e(e5,Bxr),e(se,Ixr),e(se,o5),e(o5,T0e),e(T0e,Nxr),e(o5,qxr),e(o5,VZ),e(VZ,jxr),e(o5,Dxr),e(se,Gxr),e(se,r5),e(r5,M0e),e(M0e,Oxr),e(r5,Vxr),e(r5,XZ),e(XZ,Xxr),e(r5,zxr),e(se,Qxr),e(se,t5),e(t5,E0e),e(E0e,Wxr),e(t5,Uxr),e(t5,zZ),e(zZ,Hxr),e(t5,Jxr),e(se,Yxr),e(se,a5),e(a5,C0e),e(C0e,Kxr),e(a5,Zxr),e(a5,QZ),e(QZ,e$r),e(a5,o$r),e(se,r$r),e(se,n5),e(n5,w0e),e(w0e,t$r),e(n5,a$r),e(n5,WZ),e(WZ,n$r),e(n5,s$r),e(se,l$r),e(se,s5),e(s5,A0e),e(A0e,i$r),e(s5,d$r),e(s5,UZ),e(UZ,c$r),e(s5,m$r),e(se,f$r),e(se,l5),e(l5,L0e),e(L0e,g$r),e(l5,h$r),e(l5,HZ),e(HZ,u$r),e(l5,p$r),e(se,_$r),e(se,i5),e(i5,y0e),e(y0e,b$r),e(i5,v$r),e(i5,JZ),e(JZ,F$r),e(i5,T$r),e(se,M$r),e(se,d5),e(d5,x0e),e(x0e,E$r),e(d5,C$r),e(d5,YZ),e(YZ,w$r),e(d5,A$r),e(se,L$r),e(se,c5),e(c5,$0e),e($0e,y$r),e(c5,x$r),e(c5,KZ),e(KZ,$$r),e(c5,k$r),e(se,S$r),e(se,m5),e(m5,k0e),e(k0e,R$r),e(m5,P$r),e(m5,ZZ),e(ZZ,B$r),e(m5,I$r),e(se,N$r),e(se,f5),e(f5,S0e),e(S0e,q$r),e(f5,j$r),e(f5,eee),e(eee,D$r),e(f5,G$r),e(se,O$r),e(se,g5),e(g5,R0e),e(R0e,V$r),e(g5,X$r),e(g5,oee),e(oee,z$r),e(g5,Q$r),e(se,W$r),e(se,h5),e(h5,P0e),e(P0e,U$r),e(h5,H$r),e(h5,ree),e(ree,J$r),e(h5,Y$r),e(se,K$r),e(se,u5),e(u5,B0e),e(B0e,Z$r),e(u5,ekr),e(u5,tee),e(tee,okr),e(u5,rkr),e(se,tkr),e(se,p5),e(p5,I0e),e(I0e,akr),e(p5,nkr),e(p5,aee),e(aee,skr),e(p5,lkr),e(se,ikr),e(se,_5),e(_5,N0e),e(N0e,dkr),e(_5,ckr),e(_5,nee),e(nee,mkr),e(_5,fkr),e(se,gkr),e(se,b5),e(b5,q0e),e(q0e,hkr),e(b5,ukr),e(b5,see),e(see,pkr),e(b5,_kr),e(se,bkr),e(se,v5),e(v5,j0e),e(j0e,vkr),e(v5,Fkr),e(v5,lee),e(lee,Tkr),e(v5,Mkr),e(se,Ekr),e(se,F5),e(F5,D0e),e(D0e,Ckr),e(F5,wkr),e(F5,iee),e(iee,Akr),e(F5,Lkr),e(Nr,ykr),M(T5,Nr,null),b(m,oKe,_),b(m,Qc,_),e(Qc,M5),e(M5,G0e),M(bk,G0e,null),e(Qc,xkr),e(Qc,O0e),e(O0e,$kr),b(m,rKe,_),b(m,ir,_),M(vk,ir,null),e(ir,kkr),e(ir,Wc),e(Wc,Skr),e(Wc,dee),e(dee,Rkr),e(Wc,Pkr),e(Wc,cee),e(cee,Bkr),e(Wc,Ikr),e(ir,Nkr),e(ir,Fk),e(Fk,qkr),e(Fk,V0e),e(V0e,jkr),e(Fk,Dkr),e(ir,Gkr),e(ir,zt),M(Tk,zt,null),e(zt,Okr),e(zt,X0e),e(X0e,Vkr),e(zt,Xkr),e(zt,Uc),e(Uc,zkr),e(Uc,z0e),e(z0e,Qkr),e(Uc,Wkr),e(Uc,mee),e(mee,Ukr),e(Uc,Hkr),e(zt,Jkr),M(E5,zt,null),e(ir,Ykr),e(ir,qr),M(Mk,qr,null),e(qr,Kkr),e(qr,Q0e),e(Q0e,Zkr),e(qr,eSr),e(qr,An),e(An,oSr),e(An,W0e),e(W0e,rSr),e(An,tSr),e(An,U0e),e(U0e,aSr),e(An,nSr),e(An,H0e),e(H0e,sSr),e(An,lSr),e(qr,iSr),e(qr,Me),e(Me,C5),e(C5,J0e),e(J0e,dSr),e(C5,cSr),e(C5,fee),e(fee,mSr),e(C5,fSr),e(Me,gSr),e(Me,w5),e(w5,Y0e),e(Y0e,hSr),e(w5,uSr),e(w5,gee),e(gee,pSr),e(w5,_Sr),e(Me,bSr),e(Me,A5),e(A5,K0e),e(K0e,vSr),e(A5,FSr),e(A5,hee),e(hee,TSr),e(A5,MSr),e(Me,ESr),e(Me,L5),e(L5,Z0e),e(Z0e,CSr),e(L5,wSr),e(L5,uee),e(uee,ASr),e(L5,LSr),e(Me,ySr),e(Me,y5),e(y5,ewe),e(ewe,xSr),e(y5,$Sr),e(y5,pee),e(pee,kSr),e(y5,SSr),e(Me,RSr),e(Me,x5),e(x5,owe),e(owe,PSr),e(x5,BSr),e(x5,_ee),e(_ee,ISr),e(x5,NSr),e(Me,qSr),e(Me,$5),e($5,rwe),e(rwe,jSr),e($5,DSr),e($5,bee),e(bee,GSr),e($5,OSr),e(Me,VSr),e(Me,k5),e(k5,twe),e(twe,XSr),e(k5,zSr),e(k5,vee),e(vee,QSr),e(k5,WSr),e(Me,USr),e(Me,S5),e(S5,awe),e(awe,HSr),e(S5,JSr),e(S5,Fee),e(Fee,YSr),e(S5,KSr),e(Me,ZSr),e(Me,R5),e(R5,nwe),e(nwe,eRr),e(R5,oRr),e(R5,Tee),e(Tee,rRr),e(R5,tRr),e(Me,aRr),e(Me,P5),e(P5,swe),e(swe,nRr),e(P5,sRr),e(P5,Mee),e(Mee,lRr),e(P5,iRr),e(Me,dRr),e(Me,B5),e(B5,lwe),e(lwe,cRr),e(B5,mRr),e(B5,Eee),e(Eee,fRr),e(B5,gRr),e(Me,hRr),e(Me,I5),e(I5,iwe),e(iwe,uRr),e(I5,pRr),e(I5,Cee),e(Cee,_Rr),e(I5,bRr),e(Me,vRr),e(Me,N5),e(N5,dwe),e(dwe,FRr),e(N5,TRr),e(N5,wee),e(wee,MRr),e(N5,ERr),e(qr,CRr),M(q5,qr,null),b(m,tKe,_),b(m,Hc,_),e(Hc,j5),e(j5,cwe),M(Ek,cwe,null),e(Hc,wRr),e(Hc,mwe),e(mwe,ARr),b(m,aKe,_),b(m,dr,_),M(Ck,dr,null),e(dr,LRr),e(dr,Jc),e(Jc,yRr),e(Jc,Aee),e(Aee,xRr),e(Jc,$Rr),e(Jc,Lee),e(Lee,kRr),e(Jc,SRr),e(dr,RRr),e(dr,wk),e(wk,PRr),e(wk,fwe),e(fwe,BRr),e(wk,IRr),e(dr,NRr),e(dr,Qt),M(Ak,Qt,null),e(Qt,qRr),e(Qt,gwe),e(gwe,jRr),e(Qt,DRr),e(Qt,Yc),e(Yc,GRr),e(Yc,hwe),e(hwe,ORr),e(Yc,VRr),e(Yc,yee),e(yee,XRr),e(Yc,zRr),e(Qt,QRr),M(D5,Qt,null),e(dr,WRr),e(dr,jr),M(Lk,jr,null),e(jr,URr),e(jr,uwe),e(uwe,HRr),e(jr,JRr),e(jr,Ln),e(Ln,YRr),e(Ln,pwe),e(pwe,KRr),e(Ln,ZRr),e(Ln,_we),e(_we,ePr),e(Ln,oPr),e(Ln,bwe),e(bwe,rPr),e(Ln,tPr),e(jr,aPr),e(jr,Be),e(Be,G5),e(G5,vwe),e(vwe,nPr),e(G5,sPr),e(G5,xee),e(xee,lPr),e(G5,iPr),e(Be,dPr),e(Be,O5),e(O5,Fwe),e(Fwe,cPr),e(O5,mPr),e(O5,$ee),e($ee,fPr),e(O5,gPr),e(Be,hPr),e(Be,vl),e(vl,Twe),e(Twe,uPr),e(vl,pPr),e(vl,kee),e(kee,_Pr),e(vl,bPr),e(vl,See),e(See,vPr),e(vl,FPr),e(Be,TPr),e(Be,V5),e(V5,Mwe),e(Mwe,MPr),e(V5,EPr),e(V5,Ree),e(Ree,CPr),e(V5,wPr),e(Be,APr),e(Be,X5),e(X5,Ewe),e(Ewe,LPr),e(X5,yPr),e(X5,Pee),e(Pee,xPr),e(X5,$Pr),e(Be,kPr),e(Be,z5),e(z5,Cwe),e(Cwe,SPr),e(z5,RPr),e(z5,Bee),e(Bee,PPr),e(z5,BPr),e(Be,IPr),e(Be,Q5),e(Q5,wwe),e(wwe,NPr),e(Q5,qPr),e(Q5,Iee),e(Iee,jPr),e(Q5,DPr),e(Be,GPr),e(Be,W5),e(W5,Awe),e(Awe,OPr),e(W5,VPr),e(W5,Nee),e(Nee,XPr),e(W5,zPr),e(Be,QPr),e(Be,U5),e(U5,Lwe),e(Lwe,WPr),e(U5,UPr),e(U5,qee),e(qee,HPr),e(U5,JPr),e(jr,YPr),M(H5,jr,null),b(m,nKe,_),b(m,Kc,_),e(Kc,J5),e(J5,ywe),M(yk,ywe,null),e(Kc,KPr),e(Kc,xwe),e(xwe,ZPr),b(m,sKe,_),b(m,cr,_),M(xk,cr,null),e(cr,eBr),e(cr,Zc),e(Zc,oBr),e(Zc,jee),e(jee,rBr),e(Zc,tBr),e(Zc,Dee),e(Dee,aBr),e(Zc,nBr),e(cr,sBr),e(cr,$k),e($k,lBr),e($k,$we),e($we,iBr),e($k,dBr),e(cr,cBr),e(cr,Wt),M(kk,Wt,null),e(Wt,mBr),e(Wt,kwe),e(kwe,fBr),e(Wt,gBr),e(Wt,em),e(em,hBr),e(em,Swe),e(Swe,uBr),e(em,pBr),e(em,Gee),e(Gee,_Br),e(em,bBr),e(Wt,vBr),M(Y5,Wt,null),e(cr,FBr),e(cr,Dr),M(Sk,Dr,null),e(Dr,TBr),e(Dr,Rwe),e(Rwe,MBr),e(Dr,EBr),e(Dr,yn),e(yn,CBr),e(yn,Pwe),e(Pwe,wBr),e(yn,ABr),e(yn,Bwe),e(Bwe,LBr),e(yn,yBr),e(yn,Iwe),e(Iwe,xBr),e(yn,$Br),e(Dr,kBr),e(Dr,om),e(om,K5),e(K5,Nwe),e(Nwe,SBr),e(K5,RBr),e(K5,Oee),e(Oee,PBr),e(K5,BBr),e(om,IBr),e(om,Z5),e(Z5,qwe),e(qwe,NBr),e(Z5,qBr),e(Z5,Vee),e(Vee,jBr),e(Z5,DBr),e(om,GBr),e(om,e0),e(e0,jwe),e(jwe,OBr),e(e0,VBr),e(e0,Xee),e(Xee,XBr),e(e0,zBr),e(Dr,QBr),M(o0,Dr,null),b(m,lKe,_),b(m,rm,_),e(rm,r0),e(r0,Dwe),M(Rk,Dwe,null),e(rm,WBr),e(rm,Gwe),e(Gwe,UBr),b(m,iKe,_),b(m,mr,_),M(Pk,mr,null),e(mr,HBr),e(mr,tm),e(tm,JBr),e(tm,zee),e(zee,YBr),e(tm,KBr),e(tm,Qee),e(Qee,ZBr),e(tm,eIr),e(mr,oIr),e(mr,Bk),e(Bk,rIr),e(Bk,Owe),e(Owe,tIr),e(Bk,aIr),e(mr,nIr),e(mr,Ut),M(Ik,Ut,null),e(Ut,sIr),e(Ut,Vwe),e(Vwe,lIr),e(Ut,iIr),e(Ut,am),e(am,dIr),e(am,Xwe),e(Xwe,cIr),e(am,mIr),e(am,Wee),e(Wee,fIr),e(am,gIr),e(Ut,hIr),M(t0,Ut,null),e(mr,uIr),e(mr,Gr),M(Nk,Gr,null),e(Gr,pIr),e(Gr,zwe),e(zwe,_Ir),e(Gr,bIr),e(Gr,xn),e(xn,vIr),e(xn,Qwe),e(Qwe,FIr),e(xn,TIr),e(xn,Wwe),e(Wwe,MIr),e(xn,EIr),e(xn,Uwe),e(Uwe,CIr),e(xn,wIr),e(Gr,AIr),e(Gr,fe),e(fe,a0),e(a0,Hwe),e(Hwe,LIr),e(a0,yIr),e(a0,Uee),e(Uee,xIr),e(a0,$Ir),e(fe,kIr),e(fe,n0),e(n0,Jwe),e(Jwe,SIr),e(n0,RIr),e(n0,Hee),e(Hee,PIr),e(n0,BIr),e(fe,IIr),e(fe,s0),e(s0,Ywe),e(Ywe,NIr),e(s0,qIr),e(s0,Jee),e(Jee,jIr),e(s0,DIr),e(fe,GIr),e(fe,l0),e(l0,Kwe),e(Kwe,OIr),e(l0,VIr),e(l0,Yee),e(Yee,XIr),e(l0,zIr),e(fe,QIr),e(fe,i0),e(i0,Zwe),e(Zwe,WIr),e(i0,UIr),e(i0,Kee),e(Kee,HIr),e(i0,JIr),e(fe,YIr),e(fe,d0),e(d0,eAe),e(eAe,KIr),e(d0,ZIr),e(d0,Zee),e(Zee,eNr),e(d0,oNr),e(fe,rNr),e(fe,c0),e(c0,oAe),e(oAe,tNr),e(c0,aNr),e(c0,eoe),e(eoe,nNr),e(c0,sNr),e(fe,lNr),e(fe,m0),e(m0,rAe),e(rAe,iNr),e(m0,dNr),e(m0,ooe),e(ooe,cNr),e(m0,mNr),e(fe,fNr),e(fe,f0),e(f0,tAe),e(tAe,gNr),e(f0,hNr),e(f0,roe),e(roe,uNr),e(f0,pNr),e(fe,_Nr),e(fe,g0),e(g0,aAe),e(aAe,bNr),e(g0,vNr),e(g0,toe),e(toe,FNr),e(g0,TNr),e(fe,MNr),e(fe,h0),e(h0,nAe),e(nAe,ENr),e(h0,CNr),e(h0,aoe),e(aoe,wNr),e(h0,ANr),e(fe,LNr),e(fe,u0),e(u0,sAe),e(sAe,yNr),e(u0,xNr),e(u0,noe),e(noe,$Nr),e(u0,kNr),e(fe,SNr),e(fe,p0),e(p0,lAe),e(lAe,RNr),e(p0,PNr),e(p0,soe),e(soe,BNr),e(p0,INr),e(fe,NNr),e(fe,_0),e(_0,iAe),e(iAe,qNr),e(_0,jNr),e(_0,loe),e(loe,DNr),e(_0,GNr),e(fe,ONr),e(fe,b0),e(b0,dAe),e(dAe,VNr),e(b0,XNr),e(b0,ioe),e(ioe,zNr),e(b0,QNr),e(fe,WNr),e(fe,v0),e(v0,cAe),e(cAe,UNr),e(v0,HNr),e(v0,doe),e(doe,JNr),e(v0,YNr),e(fe,KNr),e(fe,F0),e(F0,mAe),e(mAe,ZNr),e(F0,eqr),e(F0,coe),e(coe,oqr),e(F0,rqr),e(fe,tqr),e(fe,T0),e(T0,fAe),e(fAe,aqr),e(T0,nqr),e(T0,moe),e(moe,sqr),e(T0,lqr),e(fe,iqr),e(fe,M0),e(M0,gAe),e(gAe,dqr),e(M0,cqr),e(M0,foe),e(foe,mqr),e(M0,fqr),e(fe,gqr),e(fe,E0),e(E0,hAe),e(hAe,hqr),e(E0,uqr),e(E0,goe),e(goe,pqr),e(E0,_qr),e(Gr,bqr),M(C0,Gr,null),b(m,dKe,_),b(m,nm,_),e(nm,w0),e(w0,uAe),M(qk,uAe,null),e(nm,vqr),e(nm,pAe),e(pAe,Fqr),b(m,cKe,_),b(m,fr,_),M(jk,fr,null),e(fr,Tqr),e(fr,sm),e(sm,Mqr),e(sm,hoe),e(hoe,Eqr),e(sm,Cqr),e(sm,uoe),e(uoe,wqr),e(sm,Aqr),e(fr,Lqr),e(fr,Dk),e(Dk,yqr),e(Dk,_Ae),e(_Ae,xqr),e(Dk,$qr),e(fr,kqr),e(fr,Ht),M(Gk,Ht,null),e(Ht,Sqr),e(Ht,bAe),e(bAe,Rqr),e(Ht,Pqr),e(Ht,lm),e(lm,Bqr),e(lm,vAe),e(vAe,Iqr),e(lm,Nqr),e(lm,poe),e(poe,qqr),e(lm,jqr),e(Ht,Dqr),M(A0,Ht,null),e(fr,Gqr),e(fr,Or),M(Ok,Or,null),e(Or,Oqr),e(Or,FAe),e(FAe,Vqr),e(Or,Xqr),e(Or,$n),e($n,zqr),e($n,TAe),e(TAe,Qqr),e($n,Wqr),e($n,MAe),e(MAe,Uqr),e($n,Hqr),e($n,EAe),e(EAe,Jqr),e($n,Yqr),e(Or,Kqr),e(Or,ye),e(ye,L0),e(L0,CAe),e(CAe,Zqr),e(L0,ejr),e(L0,_oe),e(_oe,ojr),e(L0,rjr),e(ye,tjr),e(ye,y0),e(y0,wAe),e(wAe,ajr),e(y0,njr),e(y0,boe),e(boe,sjr),e(y0,ljr),e(ye,ijr),e(ye,x0),e(x0,AAe),e(AAe,djr),e(x0,cjr),e(x0,voe),e(voe,mjr),e(x0,fjr),e(ye,gjr),e(ye,$0),e($0,LAe),e(LAe,hjr),e($0,ujr),e($0,Foe),e(Foe,pjr),e($0,_jr),e(ye,bjr),e(ye,k0),e(k0,yAe),e(yAe,vjr),e(k0,Fjr),e(k0,Toe),e(Toe,Tjr),e(k0,Mjr),e(ye,Ejr),e(ye,S0),e(S0,xAe),e(xAe,Cjr),e(S0,wjr),e(S0,Moe),e(Moe,Ajr),e(S0,Ljr),e(ye,yjr),e(ye,R0),e(R0,$Ae),e($Ae,xjr),e(R0,$jr),e(R0,Eoe),e(Eoe,kjr),e(R0,Sjr),e(ye,Rjr),e(ye,P0),e(P0,kAe),e(kAe,Pjr),e(P0,Bjr),e(P0,Coe),e(Coe,Ijr),e(P0,Njr),e(ye,qjr),e(ye,B0),e(B0,SAe),e(SAe,jjr),e(B0,Djr),e(B0,woe),e(woe,Gjr),e(B0,Ojr),e(ye,Vjr),e(ye,I0),e(I0,RAe),e(RAe,Xjr),e(I0,zjr),e(I0,Aoe),e(Aoe,Qjr),e(I0,Wjr),e(Or,Ujr),M(N0,Or,null),b(m,mKe,_),b(m,im,_),e(im,q0),e(q0,PAe),M(Vk,PAe,null),e(im,Hjr),e(im,BAe),e(BAe,Jjr),b(m,fKe,_),b(m,gr,_),M(Xk,gr,null),e(gr,Yjr),e(gr,dm),e(dm,Kjr),e(dm,Loe),e(Loe,Zjr),e(dm,eDr),e(dm,yoe),e(yoe,oDr),e(dm,rDr),e(gr,tDr),e(gr,zk),e(zk,aDr),e(zk,IAe),e(IAe,nDr),e(zk,sDr),e(gr,lDr),e(gr,Jt),M(Qk,Jt,null),e(Jt,iDr),e(Jt,NAe),e(NAe,dDr),e(Jt,cDr),e(Jt,cm),e(cm,mDr),e(cm,qAe),e(qAe,fDr),e(cm,gDr),e(cm,xoe),e(xoe,hDr),e(cm,uDr),e(Jt,pDr),M(j0,Jt,null),e(gr,_Dr),e(gr,Vr),M(Wk,Vr,null),e(Vr,bDr),e(Vr,jAe),e(jAe,vDr),e(Vr,FDr),e(Vr,kn),e(kn,TDr),e(kn,DAe),e(DAe,MDr),e(kn,EDr),e(kn,GAe),e(GAe,CDr),e(kn,wDr),e(kn,OAe),e(OAe,ADr),e(kn,LDr),e(Vr,yDr),e(Vr,re),e(re,D0),e(D0,VAe),e(VAe,xDr),e(D0,$Dr),e(D0,$oe),e($oe,kDr),e(D0,SDr),e(re,RDr),e(re,G0),e(G0,XAe),e(XAe,PDr),e(G0,BDr),e(G0,koe),e(koe,IDr),e(G0,NDr),e(re,qDr),e(re,O0),e(O0,zAe),e(zAe,jDr),e(O0,DDr),e(O0,Soe),e(Soe,GDr),e(O0,ODr),e(re,VDr),e(re,V0),e(V0,QAe),e(QAe,XDr),e(V0,zDr),e(V0,Roe),e(Roe,QDr),e(V0,WDr),e(re,UDr),e(re,X0),e(X0,WAe),e(WAe,HDr),e(X0,JDr),e(X0,Poe),e(Poe,YDr),e(X0,KDr),e(re,ZDr),e(re,z0),e(z0,UAe),e(UAe,eGr),e(z0,oGr),e(z0,Boe),e(Boe,rGr),e(z0,tGr),e(re,aGr),e(re,Q0),e(Q0,HAe),e(HAe,nGr),e(Q0,sGr),e(Q0,Ioe),e(Ioe,lGr),e(Q0,iGr),e(re,dGr),e(re,W0),e(W0,JAe),e(JAe,cGr),e(W0,mGr),e(W0,Noe),e(Noe,fGr),e(W0,gGr),e(re,hGr),e(re,U0),e(U0,YAe),e(YAe,uGr),e(U0,pGr),e(U0,qoe),e(qoe,_Gr),e(U0,bGr),e(re,vGr),e(re,H0),e(H0,KAe),e(KAe,FGr),e(H0,TGr),e(H0,joe),e(joe,MGr),e(H0,EGr),e(re,CGr),e(re,J0),e(J0,ZAe),e(ZAe,wGr),e(J0,AGr),e(J0,Doe),e(Doe,LGr),e(J0,yGr),e(re,xGr),e(re,Y0),e(Y0,e6e),e(e6e,$Gr),e(Y0,kGr),e(Y0,Goe),e(Goe,SGr),e(Y0,RGr),e(re,PGr),e(re,K0),e(K0,o6e),e(o6e,BGr),e(K0,IGr),e(K0,Ooe),e(Ooe,NGr),e(K0,qGr),e(re,jGr),e(re,Z0),e(Z0,r6e),e(r6e,DGr),e(Z0,GGr),e(Z0,Voe),e(Voe,OGr),e(Z0,VGr),e(re,XGr),e(re,ew),e(ew,t6e),e(t6e,zGr),e(ew,QGr),e(ew,Xoe),e(Xoe,WGr),e(ew,UGr),e(re,HGr),e(re,ow),e(ow,a6e),e(a6e,JGr),e(ow,YGr),e(ow,zoe),e(zoe,KGr),e(ow,ZGr),e(re,eOr),e(re,rw),e(rw,n6e),e(n6e,oOr),e(rw,rOr),e(rw,Qoe),e(Qoe,tOr),e(rw,aOr),e(re,nOr),e(re,tw),e(tw,s6e),e(s6e,sOr),e(tw,lOr),e(tw,Woe),e(Woe,iOr),e(tw,dOr),e(re,cOr),e(re,aw),e(aw,l6e),e(l6e,mOr),e(aw,fOr),e(aw,Uoe),e(Uoe,gOr),e(aw,hOr),e(re,uOr),e(re,nw),e(nw,i6e),e(i6e,pOr),e(nw,_Or),e(nw,Hoe),e(Hoe,bOr),e(nw,vOr),e(re,FOr),e(re,sw),e(sw,d6e),e(d6e,TOr),e(sw,MOr),e(sw,Joe),e(Joe,EOr),e(sw,COr),e(re,wOr),e(re,lw),e(lw,c6e),e(c6e,AOr),e(lw,LOr),e(lw,Yoe),e(Yoe,yOr),e(lw,xOr),e(re,$Or),e(re,iw),e(iw,m6e),e(m6e,kOr),e(iw,SOr),e(iw,Koe),e(Koe,ROr),e(iw,POr),e(re,BOr),e(re,dw),e(dw,f6e),e(f6e,IOr),e(dw,NOr),e(dw,Zoe),e(Zoe,qOr),e(dw,jOr),e(re,DOr),e(re,cw),e(cw,g6e),e(g6e,GOr),e(cw,OOr),e(cw,ere),e(ere,VOr),e(cw,XOr),e(re,zOr),e(re,mw),e(mw,h6e),e(h6e,QOr),e(mw,WOr),e(mw,ore),e(ore,UOr),e(mw,HOr),e(re,JOr),e(re,fw),e(fw,u6e),e(u6e,YOr),e(fw,KOr),e(fw,rre),e(rre,ZOr),e(fw,eVr),e(Vr,oVr),M(gw,Vr,null),b(m,gKe,_),b(m,mm,_),e(mm,hw),e(hw,p6e),M(Uk,p6e,null),e(mm,rVr),e(mm,_6e),e(_6e,tVr),b(m,hKe,_),b(m,hr,_),M(Hk,hr,null),e(hr,aVr),e(hr,fm),e(fm,nVr),e(fm,tre),e(tre,sVr),e(fm,lVr),e(fm,are),e(are,iVr),e(fm,dVr),e(hr,cVr),e(hr,Jk),e(Jk,mVr),e(Jk,b6e),e(b6e,fVr),e(Jk,gVr),e(hr,hVr),e(hr,Yt),M(Yk,Yt,null),e(Yt,uVr),e(Yt,v6e),e(v6e,pVr),e(Yt,_Vr),e(Yt,gm),e(gm,bVr),e(gm,F6e),e(F6e,vVr),e(gm,FVr),e(gm,nre),e(nre,TVr),e(gm,MVr),e(Yt,EVr),M(uw,Yt,null),e(hr,CVr),e(hr,Xr),M(Kk,Xr,null),e(Xr,wVr),e(Xr,T6e),e(T6e,AVr),e(Xr,LVr),e(Xr,Sn),e(Sn,yVr),e(Sn,M6e),e(M6e,xVr),e(Sn,$Vr),e(Sn,E6e),e(E6e,kVr),e(Sn,SVr),e(Sn,C6e),e(C6e,RVr),e(Sn,PVr),e(Xr,BVr),e(Xr,ve),e(ve,pw),e(pw,w6e),e(w6e,IVr),e(pw,NVr),e(pw,sre),e(sre,qVr),e(pw,jVr),e(ve,DVr),e(ve,_w),e(_w,A6e),e(A6e,GVr),e(_w,OVr),e(_w,lre),e(lre,VVr),e(_w,XVr),e(ve,zVr),e(ve,bw),e(bw,L6e),e(L6e,QVr),e(bw,WVr),e(bw,ire),e(ire,UVr),e(bw,HVr),e(ve,JVr),e(ve,vw),e(vw,y6e),e(y6e,YVr),e(vw,KVr),e(vw,dre),e(dre,ZVr),e(vw,eXr),e(ve,oXr),e(ve,Fw),e(Fw,x6e),e(x6e,rXr),e(Fw,tXr),e(Fw,cre),e(cre,aXr),e(Fw,nXr),e(ve,sXr),e(ve,Tw),e(Tw,$6e),e($6e,lXr),e(Tw,iXr),e(Tw,mre),e(mre,dXr),e(Tw,cXr),e(ve,mXr),e(ve,Mw),e(Mw,k6e),e(k6e,fXr),e(Mw,gXr),e(Mw,fre),e(fre,hXr),e(Mw,uXr),e(ve,pXr),e(ve,Ew),e(Ew,S6e),e(S6e,_Xr),e(Ew,bXr),e(Ew,gre),e(gre,vXr),e(Ew,FXr),e(ve,TXr),e(ve,Cw),e(Cw,R6e),e(R6e,MXr),e(Cw,EXr),e(Cw,hre),e(hre,CXr),e(Cw,wXr),e(ve,AXr),e(ve,ww),e(ww,P6e),e(P6e,LXr),e(ww,yXr),e(ww,ure),e(ure,xXr),e(ww,$Xr),e(ve,kXr),e(ve,Aw),e(Aw,B6e),e(B6e,SXr),e(Aw,RXr),e(Aw,pre),e(pre,PXr),e(Aw,BXr),e(ve,IXr),e(ve,Lw),e(Lw,I6e),e(I6e,NXr),e(Lw,qXr),e(Lw,_re),e(_re,jXr),e(Lw,DXr),e(ve,GXr),e(ve,yw),e(yw,N6e),e(N6e,OXr),e(yw,VXr),e(yw,bre),e(bre,XXr),e(yw,zXr),e(ve,QXr),e(ve,xw),e(xw,q6e),e(q6e,WXr),e(xw,UXr),e(xw,vre),e(vre,HXr),e(xw,JXr),e(ve,YXr),e(ve,$w),e($w,j6e),e(j6e,KXr),e($w,ZXr),e($w,Fre),e(Fre,ezr),e($w,ozr),e(ve,rzr),e(ve,kw),e(kw,D6e),e(D6e,tzr),e(kw,azr),e(kw,Tre),e(Tre,nzr),e(kw,szr),e(ve,lzr),e(ve,Sw),e(Sw,G6e),e(G6e,izr),e(Sw,dzr),e(Sw,Mre),e(Mre,czr),e(Sw,mzr),e(Xr,fzr),M(Rw,Xr,null),b(m,uKe,_),b(m,hm,_),e(hm,Pw),e(Pw,O6e),M(Zk,O6e,null),e(hm,gzr),e(hm,V6e),e(V6e,hzr),b(m,pKe,_),b(m,ur,_),M(eS,ur,null),e(ur,uzr),e(ur,um),e(um,pzr),e(um,Ere),e(Ere,_zr),e(um,bzr),e(um,Cre),e(Cre,vzr),e(um,Fzr),e(ur,Tzr),e(ur,oS),e(oS,Mzr),e(oS,X6e),e(X6e,Ezr),e(oS,Czr),e(ur,wzr),e(ur,Kt),M(rS,Kt,null),e(Kt,Azr),e(Kt,z6e),e(z6e,Lzr),e(Kt,yzr),e(Kt,pm),e(pm,xzr),e(pm,Q6e),e(Q6e,$zr),e(pm,kzr),e(pm,wre),e(wre,Szr),e(pm,Rzr),e(Kt,Pzr),M(Bw,Kt,null),e(ur,Bzr),e(ur,zr),M(tS,zr,null),e(zr,Izr),e(zr,W6e),e(W6e,Nzr),e(zr,qzr),e(zr,Rn),e(Rn,jzr),e(Rn,U6e),e(U6e,Dzr),e(Rn,Gzr),e(Rn,H6e),e(H6e,Ozr),e(Rn,Vzr),e(Rn,J6e),e(J6e,Xzr),e(Rn,zzr),e(zr,Qzr),e(zr,aS),e(aS,Iw),e(Iw,Y6e),e(Y6e,Wzr),e(Iw,Uzr),e(Iw,Are),e(Are,Hzr),e(Iw,Jzr),e(aS,Yzr),e(aS,Nw),e(Nw,K6e),e(K6e,Kzr),e(Nw,Zzr),e(Nw,Lre),e(Lre,eQr),e(Nw,oQr),e(zr,rQr),M(qw,zr,null),b(m,_Ke,_),b(m,_m,_),e(_m,jw),e(jw,Z6e),M(nS,Z6e,null),e(_m,tQr),e(_m,e7e),e(e7e,aQr),b(m,bKe,_),b(m,pr,_),M(sS,pr,null),e(pr,nQr),e(pr,bm),e(bm,sQr),e(bm,yre),e(yre,lQr),e(bm,iQr),e(bm,xre),e(xre,dQr),e(bm,cQr),e(pr,mQr),e(pr,lS),e(lS,fQr),e(lS,o7e),e(o7e,gQr),e(lS,hQr),e(pr,uQr),e(pr,Zt),M(iS,Zt,null),e(Zt,pQr),e(Zt,r7e),e(r7e,_Qr),e(Zt,bQr),e(Zt,vm),e(vm,vQr),e(vm,t7e),e(t7e,FQr),e(vm,TQr),e(vm,$re),e($re,MQr),e(vm,EQr),e(Zt,CQr),M(Dw,Zt,null),e(pr,wQr),e(pr,Qr),M(dS,Qr,null),e(Qr,AQr),e(Qr,a7e),e(a7e,LQr),e(Qr,yQr),e(Qr,Pn),e(Pn,xQr),e(Pn,n7e),e(n7e,$Qr),e(Pn,kQr),e(Pn,s7e),e(s7e,SQr),e(Pn,RQr),e(Pn,l7e),e(l7e,PQr),e(Pn,BQr),e(Qr,IQr),e(Qr,i7e),e(i7e,Gw),e(Gw,d7e),e(d7e,NQr),e(Gw,qQr),e(Gw,kre),e(kre,jQr),e(Gw,DQr),e(Qr,GQr),M(Ow,Qr,null),b(m,vKe,_),b(m,Fm,_),e(Fm,Vw),e(Vw,c7e),M(cS,c7e,null),e(Fm,OQr),e(Fm,m7e),e(m7e,VQr),b(m,FKe,_),b(m,_r,_),M(mS,_r,null),e(_r,XQr),e(_r,Tm),e(Tm,zQr),e(Tm,Sre),e(Sre,QQr),e(Tm,WQr),e(Tm,Rre),e(Rre,UQr),e(Tm,HQr),e(_r,JQr),e(_r,fS),e(fS,YQr),e(fS,f7e),e(f7e,KQr),e(fS,ZQr),e(_r,eWr),e(_r,ea),M(gS,ea,null),e(ea,oWr),e(ea,g7e),e(g7e,rWr),e(ea,tWr),e(ea,Mm),e(Mm,aWr),e(Mm,h7e),e(h7e,nWr),e(Mm,sWr),e(Mm,Pre),e(Pre,lWr),e(Mm,iWr),e(ea,dWr),M(Xw,ea,null),e(_r,cWr),e(_r,Wr),M(hS,Wr,null),e(Wr,mWr),e(Wr,u7e),e(u7e,fWr),e(Wr,gWr),e(Wr,Bn),e(Bn,hWr),e(Bn,p7e),e(p7e,uWr),e(Bn,pWr),e(Bn,_7e),e(_7e,_Wr),e(Bn,bWr),e(Bn,b7e),e(b7e,vWr),e(Bn,FWr),e(Wr,TWr),e(Wr,v7e),e(v7e,zw),e(zw,F7e),e(F7e,MWr),e(zw,EWr),e(zw,Bre),e(Bre,CWr),e(zw,wWr),e(Wr,AWr),M(Qw,Wr,null),b(m,TKe,_),b(m,Em,_),e(Em,Ww),e(Ww,T7e),M(uS,T7e,null),e(Em,LWr),e(Em,M7e),e(M7e,yWr),b(m,MKe,_),b(m,br,_),M(pS,br,null),e(br,xWr),e(br,Cm),e(Cm,$Wr),e(Cm,Ire),e(Ire,kWr),e(Cm,SWr),e(Cm,Nre),e(Nre,RWr),e(Cm,PWr),e(br,BWr),e(br,_S),e(_S,IWr),e(_S,E7e),e(E7e,NWr),e(_S,qWr),e(br,jWr),e(br,oa),M(bS,oa,null),e(oa,DWr),e(oa,C7e),e(C7e,GWr),e(oa,OWr),e(oa,wm),e(wm,VWr),e(wm,w7e),e(w7e,XWr),e(wm,zWr),e(wm,qre),e(qre,QWr),e(wm,WWr),e(oa,UWr),M(Uw,oa,null),e(br,HWr),e(br,Ur),M(vS,Ur,null),e(Ur,JWr),e(Ur,A7e),e(A7e,YWr),e(Ur,KWr),e(Ur,In),e(In,ZWr),e(In,L7e),e(L7e,eUr),e(In,oUr),e(In,y7e),e(y7e,rUr),e(In,tUr),e(In,x7e),e(x7e,aUr),e(In,nUr),e(Ur,sUr),e(Ur,de),e(de,Hw),e(Hw,$7e),e($7e,lUr),e(Hw,iUr),e(Hw,jre),e(jre,dUr),e(Hw,cUr),e(de,mUr),e(de,Jw),e(Jw,k7e),e(k7e,fUr),e(Jw,gUr),e(Jw,Dre),e(Dre,hUr),e(Jw,uUr),e(de,pUr),e(de,Yw),e(Yw,S7e),e(S7e,_Ur),e(Yw,bUr),e(Yw,Gre),e(Gre,vUr),e(Yw,FUr),e(de,TUr),e(de,Kw),e(Kw,R7e),e(R7e,MUr),e(Kw,EUr),e(Kw,Ore),e(Ore,CUr),e(Kw,wUr),e(de,AUr),e(de,Zw),e(Zw,P7e),e(P7e,LUr),e(Zw,yUr),e(Zw,Vre),e(Vre,xUr),e(Zw,$Ur),e(de,kUr),e(de,eA),e(eA,B7e),e(B7e,SUr),e(eA,RUr),e(eA,Xre),e(Xre,PUr),e(eA,BUr),e(de,IUr),e(de,oA),e(oA,I7e),e(I7e,NUr),e(oA,qUr),e(oA,zre),e(zre,jUr),e(oA,DUr),e(de,GUr),e(de,rA),e(rA,N7e),e(N7e,OUr),e(rA,VUr),e(rA,Qre),e(Qre,XUr),e(rA,zUr),e(de,QUr),e(de,tA),e(tA,q7e),e(q7e,WUr),e(tA,UUr),e(tA,Wre),e(Wre,HUr),e(tA,JUr),e(de,YUr),e(de,aA),e(aA,j7e),e(j7e,KUr),e(aA,ZUr),e(aA,Ure),e(Ure,eHr),e(aA,oHr),e(de,rHr),e(de,nA),e(nA,D7e),e(D7e,tHr),e(nA,aHr),e(nA,Hre),e(Hre,nHr),e(nA,sHr),e(de,lHr),e(de,sA),e(sA,G7e),e(G7e,iHr),e(sA,dHr),e(sA,Jre),e(Jre,cHr),e(sA,mHr),e(de,fHr),e(de,lA),e(lA,O7e),e(O7e,gHr),e(lA,hHr),e(lA,Yre),e(Yre,uHr),e(lA,pHr),e(de,_Hr),e(de,iA),e(iA,V7e),e(V7e,bHr),e(iA,vHr),e(iA,Kre),e(Kre,FHr),e(iA,THr),e(de,MHr),e(de,dA),e(dA,X7e),e(X7e,EHr),e(dA,CHr),e(dA,Zre),e(Zre,wHr),e(dA,AHr),e(de,LHr),e(de,cA),e(cA,z7e),e(z7e,yHr),e(cA,xHr),e(cA,ete),e(ete,$Hr),e(cA,kHr),e(de,SHr),e(de,mA),e(mA,Q7e),e(Q7e,RHr),e(mA,PHr),e(mA,ote),e(ote,BHr),e(mA,IHr),e(de,NHr),e(de,fA),e(fA,W7e),e(W7e,qHr),e(fA,jHr),e(fA,rte),e(rte,DHr),e(fA,GHr),e(de,OHr),e(de,gA),e(gA,U7e),e(U7e,VHr),e(gA,XHr),e(gA,tte),e(tte,zHr),e(gA,QHr),e(de,WHr),e(de,hA),e(hA,H7e),e(H7e,UHr),e(hA,HHr),e(hA,ate),e(ate,JHr),e(hA,YHr),e(de,KHr),e(de,uA),e(uA,J7e),e(J7e,ZHr),e(uA,eJr),e(uA,nte),e(nte,oJr),e(uA,rJr),e(Ur,tJr),M(pA,Ur,null),b(m,EKe,_),b(m,Am,_),e(Am,_A),e(_A,Y7e),M(FS,Y7e,null),e(Am,aJr),e(Am,K7e),e(K7e,nJr),b(m,CKe,_),b(m,vr,_),M(TS,vr,null),e(vr,sJr),e(vr,Lm),e(Lm,lJr),e(Lm,ste),e(ste,iJr),e(Lm,dJr),e(Lm,lte),e(lte,cJr),e(Lm,mJr),e(vr,fJr),e(vr,MS),e(MS,gJr),e(MS,Z7e),e(Z7e,hJr),e(MS,uJr),e(vr,pJr),e(vr,ra),M(ES,ra,null),e(ra,_Jr),e(ra,eLe),e(eLe,bJr),e(ra,vJr),e(ra,ym),e(ym,FJr),e(ym,oLe),e(oLe,TJr),e(ym,MJr),e(ym,ite),e(ite,EJr),e(ym,CJr),e(ra,wJr),M(bA,ra,null),e(vr,AJr),e(vr,Hr),M(CS,Hr,null),e(Hr,LJr),e(Hr,rLe),e(rLe,yJr),e(Hr,xJr),e(Hr,Nn),e(Nn,$Jr),e(Nn,tLe),e(tLe,kJr),e(Nn,SJr),e(Nn,aLe),e(aLe,RJr),e(Nn,PJr),e(Nn,nLe),e(nLe,BJr),e(Nn,IJr),e(Hr,NJr),e(Hr,ce),e(ce,vA),e(vA,sLe),e(sLe,qJr),e(vA,jJr),e(vA,dte),e(dte,DJr),e(vA,GJr),e(ce,OJr),e(ce,FA),e(FA,lLe),e(lLe,VJr),e(FA,XJr),e(FA,cte),e(cte,zJr),e(FA,QJr),e(ce,WJr),e(ce,TA),e(TA,iLe),e(iLe,UJr),e(TA,HJr),e(TA,mte),e(mte,JJr),e(TA,YJr),e(ce,KJr),e(ce,MA),e(MA,dLe),e(dLe,ZJr),e(MA,eYr),e(MA,fte),e(fte,oYr),e(MA,rYr),e(ce,tYr),e(ce,EA),e(EA,cLe),e(cLe,aYr),e(EA,nYr),e(EA,gte),e(gte,sYr),e(EA,lYr),e(ce,iYr),e(ce,CA),e(CA,mLe),e(mLe,dYr),e(CA,cYr),e(CA,hte),e(hte,mYr),e(CA,fYr),e(ce,gYr),e(ce,wA),e(wA,fLe),e(fLe,hYr),e(wA,uYr),e(wA,ute),e(ute,pYr),e(wA,_Yr),e(ce,bYr),e(ce,AA),e(AA,gLe),e(gLe,vYr),e(AA,FYr),e(AA,pte),e(pte,TYr),e(AA,MYr),e(ce,EYr),e(ce,LA),e(LA,hLe),e(hLe,CYr),e(LA,wYr),e(LA,_te),e(_te,AYr),e(LA,LYr),e(ce,yYr),e(ce,yA),e(yA,uLe),e(uLe,xYr),e(yA,$Yr),e(yA,bte),e(bte,kYr),e(yA,SYr),e(ce,RYr),e(ce,xA),e(xA,pLe),e(pLe,PYr),e(xA,BYr),e(xA,vte),e(vte,IYr),e(xA,NYr),e(ce,qYr),e(ce,$A),e($A,_Le),e(_Le,jYr),e($A,DYr),e($A,Fte),e(Fte,GYr),e($A,OYr),e(ce,VYr),e(ce,kA),e(kA,bLe),e(bLe,XYr),e(kA,zYr),e(kA,Tte),e(Tte,QYr),e(kA,WYr),e(ce,UYr),e(ce,SA),e(SA,vLe),e(vLe,HYr),e(SA,JYr),e(SA,Mte),e(Mte,YYr),e(SA,KYr),e(ce,ZYr),e(ce,RA),e(RA,FLe),e(FLe,eKr),e(RA,oKr),e(RA,Ete),e(Ete,rKr),e(RA,tKr),e(ce,aKr),e(ce,PA),e(PA,TLe),e(TLe,nKr),e(PA,sKr),e(PA,Cte),e(Cte,lKr),e(PA,iKr),e(ce,dKr),e(ce,BA),e(BA,MLe),e(MLe,cKr),e(BA,mKr),e(BA,wte),e(wte,fKr),e(BA,gKr),e(ce,hKr),e(ce,IA),e(IA,ELe),e(ELe,uKr),e(IA,pKr),e(IA,Ate),e(Ate,_Kr),e(IA,bKr),e(ce,vKr),e(ce,NA),e(NA,CLe),e(CLe,FKr),e(NA,TKr),e(NA,Lte),e(Lte,MKr),e(NA,EKr),e(ce,CKr),e(ce,qA),e(qA,wLe),e(wLe,wKr),e(qA,AKr),e(qA,yte),e(yte,LKr),e(qA,yKr),e(ce,xKr),e(ce,jA),e(jA,ALe),e(ALe,$Kr),e(jA,kKr),e(jA,xte),e(xte,SKr),e(jA,RKr),e(Hr,PKr),M(DA,Hr,null),b(m,wKe,_),b(m,xm,_),e(xm,GA),e(GA,LLe),M(wS,LLe,null),e(xm,BKr),e(xm,yLe),e(yLe,IKr),b(m,AKe,_),b(m,Fr,_),M(AS,Fr,null),e(Fr,NKr),e(Fr,$m),e($m,qKr),e($m,$te),e($te,jKr),e($m,DKr),e($m,kte),e(kte,GKr),e($m,OKr),e(Fr,VKr),e(Fr,LS),e(LS,XKr),e(LS,xLe),e(xLe,zKr),e(LS,QKr),e(Fr,WKr),e(Fr,ta),M(yS,ta,null),e(ta,UKr),e(ta,$Le),e($Le,HKr),e(ta,JKr),e(ta,km),e(km,YKr),e(km,kLe),e(kLe,KKr),e(km,ZKr),e(km,Ste),e(Ste,eZr),e(km,oZr),e(ta,rZr),M(OA,ta,null),e(Fr,tZr),e(Fr,Jr),M(xS,Jr,null),e(Jr,aZr),e(Jr,SLe),e(SLe,nZr),e(Jr,sZr),e(Jr,qn),e(qn,lZr),e(qn,RLe),e(RLe,iZr),e(qn,dZr),e(qn,PLe),e(PLe,cZr),e(qn,mZr),e(qn,BLe),e(BLe,fZr),e(qn,gZr),e(Jr,hZr),e(Jr,ILe),e(ILe,VA),e(VA,NLe),e(NLe,uZr),e(VA,pZr),e(VA,Rte),e(Rte,_Zr),e(VA,bZr),e(Jr,vZr),M(XA,Jr,null),b(m,LKe,_),b(m,Sm,_),e(Sm,zA),e(zA,qLe),M($S,qLe,null),e(Sm,FZr),e(Sm,jLe),e(jLe,TZr),b(m,yKe,_),b(m,Tr,_),M(kS,Tr,null),e(Tr,MZr),e(Tr,Rm),e(Rm,EZr),e(Rm,Pte),e(Pte,CZr),e(Rm,wZr),e(Rm,Bte),e(Bte,AZr),e(Rm,LZr),e(Tr,yZr),e(Tr,SS),e(SS,xZr),e(SS,DLe),e(DLe,$Zr),e(SS,kZr),e(Tr,SZr),e(Tr,aa),M(RS,aa,null),e(aa,RZr),e(aa,GLe),e(GLe,PZr),e(aa,BZr),e(aa,Pm),e(Pm,IZr),e(Pm,OLe),e(OLe,NZr),e(Pm,qZr),e(Pm,Ite),e(Ite,jZr),e(Pm,DZr),e(aa,GZr),M(QA,aa,null),e(Tr,OZr),e(Tr,Yr),M(PS,Yr,null),e(Yr,VZr),e(Yr,VLe),e(VLe,XZr),e(Yr,zZr),e(Yr,jn),e(jn,QZr),e(jn,XLe),e(XLe,WZr),e(jn,UZr),e(jn,zLe),e(zLe,HZr),e(jn,JZr),e(jn,QLe),e(QLe,YZr),e(jn,KZr),e(Yr,ZZr),e(Yr,WLe),e(WLe,WA),e(WA,ULe),e(ULe,eet),e(WA,oet),e(WA,Nte),e(Nte,ret),e(WA,tet),e(Yr,aet),M(UA,Yr,null),b(m,xKe,_),b(m,Bm,_),e(Bm,HA),e(HA,HLe),M(BS,HLe,null),e(Bm,net),e(Bm,JLe),e(JLe,set),b(m,$Ke,_),b(m,Mr,_),M(IS,Mr,null),e(Mr,iet),e(Mr,Im),e(Im,det),e(Im,qte),e(qte,cet),e(Im,met),e(Im,jte),e(jte,fet),e(Im,get),e(Mr,het),e(Mr,NS),e(NS,uet),e(NS,YLe),e(YLe,pet),e(NS,_et),e(Mr,bet),e(Mr,na),M(qS,na,null),e(na,vet),e(na,KLe),e(KLe,Fet),e(na,Tet),e(na,Nm),e(Nm,Met),e(Nm,ZLe),e(ZLe,Eet),e(Nm,Cet),e(Nm,Dte),e(Dte,wet),e(Nm,Aet),e(na,Let),M(JA,na,null),e(Mr,yet),e(Mr,Kr),M(jS,Kr,null),e(Kr,xet),e(Kr,eye),e(eye,$et),e(Kr,ket),e(Kr,Dn),e(Dn,Set),e(Dn,oye),e(oye,Ret),e(Dn,Pet),e(Dn,rye),e(rye,Bet),e(Dn,Iet),e(Dn,tye),e(tye,Net),e(Dn,qet),e(Kr,jet),e(Kr,te),e(te,YA),e(YA,aye),e(aye,Det),e(YA,Get),e(YA,Gte),e(Gte,Oet),e(YA,Vet),e(te,Xet),e(te,KA),e(KA,nye),e(nye,zet),e(KA,Qet),e(KA,Ote),e(Ote,Wet),e(KA,Uet),e(te,Het),e(te,ZA),e(ZA,sye),e(sye,Jet),e(ZA,Yet),e(ZA,Vte),e(Vte,Ket),e(ZA,Zet),e(te,eot),e(te,e6),e(e6,lye),e(lye,oot),e(e6,rot),e(e6,Xte),e(Xte,tot),e(e6,aot),e(te,not),e(te,o6),e(o6,iye),e(iye,sot),e(o6,lot),e(o6,zte),e(zte,iot),e(o6,dot),e(te,cot),e(te,r6),e(r6,dye),e(dye,mot),e(r6,fot),e(r6,Qte),e(Qte,got),e(r6,hot),e(te,uot),e(te,t6),e(t6,cye),e(cye,pot),e(t6,_ot),e(t6,Wte),e(Wte,bot),e(t6,vot),e(te,Fot),e(te,a6),e(a6,mye),e(mye,Tot),e(a6,Mot),e(a6,Ute),e(Ute,Eot),e(a6,Cot),e(te,wot),e(te,n6),e(n6,fye),e(fye,Aot),e(n6,Lot),e(n6,Hte),e(Hte,yot),e(n6,xot),e(te,$ot),e(te,s6),e(s6,gye),e(gye,kot),e(s6,Sot),e(s6,Jte),e(Jte,Rot),e(s6,Pot),e(te,Bot),e(te,l6),e(l6,hye),e(hye,Iot),e(l6,Not),e(l6,Yte),e(Yte,qot),e(l6,jot),e(te,Dot),e(te,i6),e(i6,uye),e(uye,Got),e(i6,Oot),e(i6,Kte),e(Kte,Vot),e(i6,Xot),e(te,zot),e(te,d6),e(d6,pye),e(pye,Qot),e(d6,Wot),e(d6,Zte),e(Zte,Uot),e(d6,Hot),e(te,Jot),e(te,c6),e(c6,_ye),e(_ye,Yot),e(c6,Kot),e(c6,eae),e(eae,Zot),e(c6,ert),e(te,ort),e(te,m6),e(m6,bye),e(bye,rrt),e(m6,trt),e(m6,oae),e(oae,art),e(m6,nrt),e(te,srt),e(te,f6),e(f6,vye),e(vye,lrt),e(f6,irt),e(f6,rae),e(rae,drt),e(f6,crt),e(te,mrt),e(te,g6),e(g6,Fye),e(Fye,frt),e(g6,grt),e(g6,tae),e(tae,hrt),e(g6,urt),e(te,prt),e(te,h6),e(h6,Tye),e(Tye,_rt),e(h6,brt),e(h6,aae),e(aae,vrt),e(h6,Frt),e(te,Trt),e(te,u6),e(u6,Mye),e(Mye,Mrt),e(u6,Ert),e(u6,nae),e(nae,Crt),e(u6,wrt),e(te,Art),e(te,p6),e(p6,Eye),e(Eye,Lrt),e(p6,yrt),e(p6,sae),e(sae,xrt),e(p6,$rt),e(te,krt),e(te,_6),e(_6,Cye),e(Cye,Srt),e(_6,Rrt),e(_6,lae),e(lae,Prt),e(_6,Brt),e(te,Irt),e(te,b6),e(b6,wye),e(wye,Nrt),e(b6,qrt),e(b6,iae),e(iae,jrt),e(b6,Drt),e(te,Grt),e(te,v6),e(v6,Aye),e(Aye,Ort),e(v6,Vrt),e(v6,dae),e(dae,Xrt),e(v6,zrt),e(te,Qrt),e(te,F6),e(F6,Lye),e(Lye,Wrt),e(F6,Urt),e(F6,cae),e(cae,Hrt),e(F6,Jrt),e(te,Yrt),e(te,T6),e(T6,yye),e(yye,Krt),e(T6,Zrt),e(T6,mae),e(mae,ett),e(T6,ott),e(te,rtt),e(te,M6),e(M6,xye),e(xye,ttt),e(M6,att),e(M6,fae),e(fae,ntt),e(M6,stt),e(te,ltt),e(te,E6),e(E6,$ye),e($ye,itt),e(E6,dtt),e(E6,gae),e(gae,ctt),e(E6,mtt),e(Kr,ftt),M(C6,Kr,null),b(m,kKe,_),b(m,qm,_),e(qm,w6),e(w6,kye),M(DS,kye,null),e(qm,gtt),e(qm,Sye),e(Sye,htt),b(m,SKe,_),b(m,Er,_),M(GS,Er,null),e(Er,utt),e(Er,jm),e(jm,ptt),e(jm,hae),e(hae,_tt),e(jm,btt),e(jm,uae),e(uae,vtt),e(jm,Ftt),e(Er,Ttt),e(Er,OS),e(OS,Mtt),e(OS,Rye),e(Rye,Ett),e(OS,Ctt),e(Er,wtt),e(Er,sa),M(VS,sa,null),e(sa,Att),e(sa,Pye),e(Pye,Ltt),e(sa,ytt),e(sa,Dm),e(Dm,xtt),e(Dm,Bye),e(Bye,$tt),e(Dm,ktt),e(Dm,pae),e(pae,Stt),e(Dm,Rtt),e(sa,Ptt),M(A6,sa,null),e(Er,Btt),e(Er,Zr),M(XS,Zr,null),e(Zr,Itt),e(Zr,Iye),e(Iye,Ntt),e(Zr,qtt),e(Zr,Gn),e(Gn,jtt),e(Gn,Nye),e(Nye,Dtt),e(Gn,Gtt),e(Gn,qye),e(qye,Ott),e(Gn,Vtt),e(Gn,jye),e(jye,Xtt),e(Gn,ztt),e(Zr,Qtt),e(Zr,xe),e(xe,L6),e(L6,Dye),e(Dye,Wtt),e(L6,Utt),e(L6,_ae),e(_ae,Htt),e(L6,Jtt),e(xe,Ytt),e(xe,y6),e(y6,Gye),e(Gye,Ktt),e(y6,Ztt),e(y6,bae),e(bae,eat),e(y6,oat),e(xe,rat),e(xe,x6),e(x6,Oye),e(Oye,tat),e(x6,aat),e(x6,vae),e(vae,nat),e(x6,sat),e(xe,lat),e(xe,$6),e($6,Vye),e(Vye,iat),e($6,dat),e($6,Fae),e(Fae,cat),e($6,mat),e(xe,fat),e(xe,k6),e(k6,Xye),e(Xye,gat),e(k6,hat),e(k6,Tae),e(Tae,uat),e(k6,pat),e(xe,_at),e(xe,S6),e(S6,zye),e(zye,bat),e(S6,vat),e(S6,Mae),e(Mae,Fat),e(S6,Tat),e(xe,Mat),e(xe,R6),e(R6,Qye),e(Qye,Eat),e(R6,Cat),e(R6,Eae),e(Eae,wat),e(R6,Aat),e(xe,Lat),e(xe,P6),e(P6,Wye),e(Wye,yat),e(P6,xat),e(P6,Cae),e(Cae,$at),e(P6,kat),e(xe,Sat),e(xe,B6),e(B6,Uye),e(Uye,Rat),e(B6,Pat),e(B6,wae),e(wae,Bat),e(B6,Iat),e(xe,Nat),e(xe,I6),e(I6,Hye),e(Hye,qat),e(I6,jat),e(I6,Aae),e(Aae,Dat),e(I6,Gat),e(Zr,Oat),M(N6,Zr,null),b(m,RKe,_),b(m,Gm,_),e(Gm,q6),e(q6,Jye),M(zS,Jye,null),e(Gm,Vat),e(Gm,Yye),e(Yye,Xat),b(m,PKe,_),b(m,Cr,_),M(QS,Cr,null),e(Cr,zat),e(Cr,Om),e(Om,Qat),e(Om,Lae),e(Lae,Wat),e(Om,Uat),e(Om,yae),e(yae,Hat),e(Om,Jat),e(Cr,Yat),e(Cr,WS),e(WS,Kat),e(WS,Kye),e(Kye,Zat),e(WS,ent),e(Cr,ont),e(Cr,la),M(US,la,null),e(la,rnt),e(la,Zye),e(Zye,tnt),e(la,ant),e(la,Vm),e(Vm,nnt),e(Vm,e8e),e(e8e,snt),e(Vm,lnt),e(Vm,xae),e(xae,int),e(Vm,dnt),e(la,cnt),M(j6,la,null),e(Cr,mnt),e(Cr,et),M(HS,et,null),e(et,fnt),e(et,o8e),e(o8e,gnt),e(et,hnt),e(et,On),e(On,unt),e(On,r8e),e(r8e,pnt),e(On,_nt),e(On,t8e),e(t8e,bnt),e(On,vnt),e(On,a8e),e(a8e,Fnt),e(On,Tnt),e(et,Mnt),e(et,Ee),e(Ee,D6),e(D6,n8e),e(n8e,Ent),e(D6,Cnt),e(D6,$ae),e($ae,wnt),e(D6,Ant),e(Ee,Lnt),e(Ee,G6),e(G6,s8e),e(s8e,ynt),e(G6,xnt),e(G6,kae),e(kae,$nt),e(G6,knt),e(Ee,Snt),e(Ee,O6),e(O6,l8e),e(l8e,Rnt),e(O6,Pnt),e(O6,Sae),e(Sae,Bnt),e(O6,Int),e(Ee,Nnt),e(Ee,V6),e(V6,i8e),e(i8e,qnt),e(V6,jnt),e(V6,Rae),e(Rae,Dnt),e(V6,Gnt),e(Ee,Ont),e(Ee,X6),e(X6,d8e),e(d8e,Vnt),e(X6,Xnt),e(X6,Pae),e(Pae,znt),e(X6,Qnt),e(Ee,Wnt),e(Ee,z6),e(z6,c8e),e(c8e,Unt),e(z6,Hnt),e(z6,Bae),e(Bae,Jnt),e(z6,Ynt),e(Ee,Knt),e(Ee,Q6),e(Q6,m8e),e(m8e,Znt),e(Q6,est),e(Q6,Iae),e(Iae,ost),e(Q6,rst),e(Ee,tst),e(Ee,W6),e(W6,f8e),e(f8e,ast),e(W6,nst),e(W6,Nae),e(Nae,sst),e(W6,lst),e(Ee,ist),e(Ee,U6),e(U6,g8e),e(g8e,dst),e(U6,cst),e(U6,qae),e(qae,mst),e(U6,fst),e(Ee,gst),e(Ee,H6),e(H6,h8e),e(h8e,hst),e(H6,ust),e(H6,jae),e(jae,pst),e(H6,_st),e(Ee,bst),e(Ee,J6),e(J6,u8e),e(u8e,vst),e(J6,Fst),e(J6,Dae),e(Dae,Tst),e(J6,Mst),e(Ee,Est),e(Ee,Y6),e(Y6,p8e),e(p8e,Cst),e(Y6,wst),e(Y6,Gae),e(Gae,Ast),e(Y6,Lst),e(Ee,yst),e(Ee,K6),e(K6,_8e),e(_8e,xst),e(K6,$st),e(K6,Oae),e(Oae,kst),e(K6,Sst),e(et,Rst),M(Z6,et,null),b(m,BKe,_),b(m,Xm,_),e(Xm,e7),e(e7,b8e),M(JS,b8e,null),e(Xm,Pst),e(Xm,v8e),e(v8e,Bst),b(m,IKe,_),b(m,wr,_),M(YS,wr,null),e(wr,Ist),e(wr,zm),e(zm,Nst),e(zm,Vae),e(Vae,qst),e(zm,jst),e(zm,Xae),e(Xae,Dst),e(zm,Gst),e(wr,Ost),e(wr,KS),e(KS,Vst),e(KS,F8e),e(F8e,Xst),e(KS,zst),e(wr,Qst),e(wr,ia),M(ZS,ia,null),e(ia,Wst),e(ia,T8e),e(T8e,Ust),e(ia,Hst),e(ia,Qm),e(Qm,Jst),e(Qm,M8e),e(M8e,Yst),e(Qm,Kst),e(Qm,zae),e(zae,Zst),e(Qm,elt),e(ia,olt),M(o7,ia,null),e(wr,rlt),e(wr,ot),M(eR,ot,null),e(ot,tlt),e(ot,E8e),e(E8e,alt),e(ot,nlt),e(ot,Vn),e(Vn,slt),e(Vn,C8e),e(C8e,llt),e(Vn,ilt),e(Vn,w8e),e(w8e,dlt),e(Vn,clt),e(Vn,A8e),e(A8e,mlt),e(Vn,flt),e(ot,glt),e(ot,$e),e($e,r7),e(r7,L8e),e(L8e,hlt),e(r7,ult),e(r7,Qae),e(Qae,plt),e(r7,_lt),e($e,blt),e($e,t7),e(t7,y8e),e(y8e,vlt),e(t7,Flt),e(t7,Wae),e(Wae,Tlt),e(t7,Mlt),e($e,Elt),e($e,a7),e(a7,x8e),e(x8e,Clt),e(a7,wlt),e(a7,Uae),e(Uae,Alt),e(a7,Llt),e($e,ylt),e($e,n7),e(n7,$8e),e($8e,xlt),e(n7,$lt),e(n7,Hae),e(Hae,klt),e(n7,Slt),e($e,Rlt),e($e,s7),e(s7,k8e),e(k8e,Plt),e(s7,Blt),e(s7,Jae),e(Jae,Ilt),e(s7,Nlt),e($e,qlt),e($e,l7),e(l7,S8e),e(S8e,jlt),e(l7,Dlt),e(l7,Yae),e(Yae,Glt),e(l7,Olt),e($e,Vlt),e($e,i7),e(i7,R8e),e(R8e,Xlt),e(i7,zlt),e(i7,Kae),e(Kae,Qlt),e(i7,Wlt),e($e,Ult),e($e,d7),e(d7,P8e),e(P8e,Hlt),e(d7,Jlt),e(d7,Zae),e(Zae,Ylt),e(d7,Klt),e($e,Zlt),e($e,c7),e(c7,B8e),e(B8e,eit),e(c7,oit),e(c7,ene),e(ene,rit),e(c7,tit),e($e,ait),e($e,m7),e(m7,I8e),e(I8e,nit),e(m7,sit),e(m7,one),e(one,lit),e(m7,iit),e(ot,dit),M(f7,ot,null),b(m,NKe,_),b(m,Wm,_),e(Wm,g7),e(g7,N8e),M(oR,N8e,null),e(Wm,cit),e(Wm,q8e),e(q8e,mit),b(m,qKe,_),b(m,Ar,_),M(rR,Ar,null),e(Ar,fit),e(Ar,Um),e(Um,git),e(Um,rne),e(rne,hit),e(Um,uit),e(Um,tne),e(tne,pit),e(Um,_it),e(Ar,bit),e(Ar,tR),e(tR,vit),e(tR,j8e),e(j8e,Fit),e(tR,Tit),e(Ar,Mit),e(Ar,da),M(aR,da,null),e(da,Eit),e(da,D8e),e(D8e,Cit),e(da,wit),e(da,Hm),e(Hm,Ait),e(Hm,G8e),e(G8e,Lit),e(Hm,yit),e(Hm,ane),e(ane,xit),e(Hm,$it),e(da,kit),M(h7,da,null),e(Ar,Sit),e(Ar,rt),M(nR,rt,null),e(rt,Rit),e(rt,O8e),e(O8e,Pit),e(rt,Bit),e(rt,Xn),e(Xn,Iit),e(Xn,V8e),e(V8e,Nit),e(Xn,qit),e(Xn,X8e),e(X8e,jit),e(Xn,Dit),e(Xn,z8e),e(z8e,Git),e(Xn,Oit),e(rt,Vit),e(rt,ke),e(ke,u7),e(u7,Q8e),e(Q8e,Xit),e(u7,zit),e(u7,nne),e(nne,Qit),e(u7,Wit),e(ke,Uit),e(ke,p7),e(p7,W8e),e(W8e,Hit),e(p7,Jit),e(p7,sne),e(sne,Yit),e(p7,Kit),e(ke,Zit),e(ke,_7),e(_7,U8e),e(U8e,edt),e(_7,odt),e(_7,lne),e(lne,rdt),e(_7,tdt),e(ke,adt),e(ke,b7),e(b7,H8e),e(H8e,ndt),e(b7,sdt),e(b7,ine),e(ine,ldt),e(b7,idt),e(ke,ddt),e(ke,v7),e(v7,J8e),e(J8e,cdt),e(v7,mdt),e(v7,dne),e(dne,fdt),e(v7,gdt),e(ke,hdt),e(ke,F7),e(F7,Y8e),e(Y8e,udt),e(F7,pdt),e(F7,cne),e(cne,_dt),e(F7,bdt),e(ke,vdt),e(ke,T7),e(T7,K8e),e(K8e,Fdt),e(T7,Tdt),e(T7,mne),e(mne,Mdt),e(T7,Edt),e(ke,Cdt),e(ke,M7),e(M7,Z8e),e(Z8e,wdt),e(M7,Adt),e(M7,fne),e(fne,Ldt),e(M7,ydt),e(ke,xdt),e(ke,E7),e(E7,e9e),e(e9e,$dt),e(E7,kdt),e(E7,gne),e(gne,Sdt),e(E7,Rdt),e(ke,Pdt),e(ke,C7),e(C7,o9e),e(o9e,Bdt),e(C7,Idt),e(C7,hne),e(hne,Ndt),e(C7,qdt),e(rt,jdt),M(w7,rt,null),b(m,jKe,_),b(m,Jm,_),e(Jm,A7),e(A7,r9e),M(sR,r9e,null),e(Jm,Ddt),e(Jm,t9e),e(t9e,Gdt),b(m,DKe,_),b(m,Lr,_),M(lR,Lr,null),e(Lr,Odt),e(Lr,Ym),e(Ym,Vdt),e(Ym,une),e(une,Xdt),e(Ym,zdt),e(Ym,pne),e(pne,Qdt),e(Ym,Wdt),e(Lr,Udt),e(Lr,iR),e(iR,Hdt),e(iR,a9e),e(a9e,Jdt),e(iR,Ydt),e(Lr,Kdt),e(Lr,ca),M(dR,ca,null),e(ca,Zdt),e(ca,n9e),e(n9e,ect),e(ca,oct),e(ca,Km),e(Km,rct),e(Km,s9e),e(s9e,tct),e(Km,act),e(Km,_ne),e(_ne,nct),e(Km,sct),e(ca,lct),M(L7,ca,null),e(Lr,ict),e(Lr,tt),M(cR,tt,null),e(tt,dct),e(tt,l9e),e(l9e,cct),e(tt,mct),e(tt,zn),e(zn,fct),e(zn,i9e),e(i9e,gct),e(zn,hct),e(zn,d9e),e(d9e,uct),e(zn,pct),e(zn,c9e),e(c9e,_ct),e(zn,bct),e(tt,vct),e(tt,Se),e(Se,y7),e(y7,m9e),e(m9e,Fct),e(y7,Tct),e(y7,bne),e(bne,Mct),e(y7,Ect),e(Se,Cct),e(Se,x7),e(x7,f9e),e(f9e,wct),e(x7,Act),e(x7,vne),e(vne,Lct),e(x7,yct),e(Se,xct),e(Se,$7),e($7,g9e),e(g9e,$ct),e($7,kct),e($7,Fne),e(Fne,Sct),e($7,Rct),e(Se,Pct),e(Se,k7),e(k7,h9e),e(h9e,Bct),e(k7,Ict),e(k7,Tne),e(Tne,Nct),e(k7,qct),e(Se,jct),e(Se,S7),e(S7,u9e),e(u9e,Dct),e(S7,Gct),e(S7,Mne),e(Mne,Oct),e(S7,Vct),e(Se,Xct),e(Se,R7),e(R7,p9e),e(p9e,zct),e(R7,Qct),e(R7,Ene),e(Ene,Wct),e(R7,Uct),e(Se,Hct),e(Se,P7),e(P7,_9e),e(_9e,Jct),e(P7,Yct),e(P7,Cne),e(Cne,Kct),e(P7,Zct),e(Se,emt),e(Se,B7),e(B7,b9e),e(b9e,omt),e(B7,rmt),e(B7,wne),e(wne,tmt),e(B7,amt),e(Se,nmt),e(Se,I7),e(I7,v9e),e(v9e,smt),e(I7,lmt),e(I7,Ane),e(Ane,imt),e(I7,dmt),e(Se,cmt),e(Se,N7),e(N7,F9e),e(F9e,mmt),e(N7,fmt),e(N7,Lne),e(Lne,gmt),e(N7,hmt),e(tt,umt),M(q7,tt,null),b(m,GKe,_),b(m,Zm,_),e(Zm,j7),e(j7,T9e),M(mR,T9e,null),e(Zm,pmt),e(Zm,M9e),e(M9e,_mt),b(m,OKe,_),b(m,yr,_),M(fR,yr,null),e(yr,bmt),e(yr,ef),e(ef,vmt),e(ef,yne),e(yne,Fmt),e(ef,Tmt),e(ef,xne),e(xne,Mmt),e(ef,Emt),e(yr,Cmt),e(yr,gR),e(gR,wmt),e(gR,E9e),e(E9e,Amt),e(gR,Lmt),e(yr,ymt),e(yr,ma),M(hR,ma,null),e(ma,xmt),e(ma,C9e),e(C9e,$mt),e(ma,kmt),e(ma,of),e(of,Smt),e(of,w9e),e(w9e,Rmt),e(of,Pmt),e(of,$ne),e($ne,Bmt),e(of,Imt),e(ma,Nmt),M(D7,ma,null),e(yr,qmt),e(yr,at),M(uR,at,null),e(at,jmt),e(at,A9e),e(A9e,Dmt),e(at,Gmt),e(at,Qn),e(Qn,Omt),e(Qn,L9e),e(L9e,Vmt),e(Qn,Xmt),e(Qn,y9e),e(y9e,zmt),e(Qn,Qmt),e(Qn,x9e),e(x9e,Wmt),e(Qn,Umt),e(at,Hmt),e(at,Re),e(Re,G7),e(G7,$9e),e($9e,Jmt),e(G7,Ymt),e(G7,kne),e(kne,Kmt),e(G7,Zmt),e(Re,eft),e(Re,O7),e(O7,k9e),e(k9e,oft),e(O7,rft),e(O7,Sne),e(Sne,tft),e(O7,aft),e(Re,nft),e(Re,V7),e(V7,S9e),e(S9e,sft),e(V7,lft),e(V7,Rne),e(Rne,ift),e(V7,dft),e(Re,cft),e(Re,X7),e(X7,R9e),e(R9e,mft),e(X7,fft),e(X7,Pne),e(Pne,gft),e(X7,hft),e(Re,uft),e(Re,z7),e(z7,P9e),e(P9e,pft),e(z7,_ft),e(z7,Bne),e(Bne,bft),e(z7,vft),e(Re,Fft),e(Re,Q7),e(Q7,B9e),e(B9e,Tft),e(Q7,Mft),e(Q7,Ine),e(Ine,Eft),e(Q7,Cft),e(Re,wft),e(Re,W7),e(W7,I9e),e(I9e,Aft),e(W7,Lft),e(W7,Nne),e(Nne,yft),e(W7,xft),e(Re,$ft),e(Re,U7),e(U7,N9e),e(N9e,kft),e(U7,Sft),e(U7,qne),e(qne,Rft),e(U7,Pft),e(Re,Bft),e(Re,H7),e(H7,q9e),e(q9e,Ift),e(H7,Nft),e(H7,jne),e(jne,qft),e(H7,jft),e(Re,Dft),e(Re,J7),e(J7,j9e),e(j9e,Gft),e(J7,Oft),e(J7,Dne),e(Dne,Vft),e(J7,Xft),e(at,zft),M(Y7,at,null),b(m,VKe,_),b(m,rf,_),e(rf,K7),e(K7,D9e),M(pR,D9e,null),e(rf,Qft),e(rf,G9e),e(G9e,Wft),b(m,XKe,_),b(m,xr,_),M(_R,xr,null),e(xr,Uft),e(xr,tf),e(tf,Hft),e(tf,Gne),e(Gne,Jft),e(tf,Yft),e(tf,One),e(One,Kft),e(tf,Zft),e(xr,egt),e(xr,bR),e(bR,ogt),e(bR,O9e),e(O9e,rgt),e(bR,tgt),e(xr,agt),e(xr,fa),M(vR,fa,null),e(fa,ngt),e(fa,V9e),e(V9e,sgt),e(fa,lgt),e(fa,af),e(af,igt),e(af,X9e),e(X9e,dgt),e(af,cgt),e(af,Vne),e(Vne,mgt),e(af,fgt),e(fa,ggt),M(Z7,fa,null),e(xr,hgt),e(xr,nt),M(FR,nt,null),e(nt,ugt),e(nt,z9e),e(z9e,pgt),e(nt,_gt),e(nt,Wn),e(Wn,bgt),e(Wn,Q9e),e(Q9e,vgt),e(Wn,Fgt),e(Wn,W9e),e(W9e,Tgt),e(Wn,Mgt),e(Wn,U9e),e(U9e,Egt),e(Wn,Cgt),e(nt,wgt),e(nt,Xe),e(Xe,eL),e(eL,H9e),e(H9e,Agt),e(eL,Lgt),e(eL,Xne),e(Xne,ygt),e(eL,xgt),e(Xe,$gt),e(Xe,oL),e(oL,J9e),e(J9e,kgt),e(oL,Sgt),e(oL,zne),e(zne,Rgt),e(oL,Pgt),e(Xe,Bgt),e(Xe,rL),e(rL,Y9e),e(Y9e,Igt),e(rL,Ngt),e(rL,Qne),e(Qne,qgt),e(rL,jgt),e(Xe,Dgt),e(Xe,tL),e(tL,K9e),e(K9e,Ggt),e(tL,Ogt),e(tL,Wne),e(Wne,Vgt),e(tL,Xgt),e(Xe,zgt),e(Xe,aL),e(aL,Z9e),e(Z9e,Qgt),e(aL,Wgt),e(aL,Une),e(Une,Ugt),e(aL,Hgt),e(Xe,Jgt),e(Xe,nL),e(nL,exe),e(exe,Ygt),e(nL,Kgt),e(nL,Hne),e(Hne,Zgt),e(nL,eht),e(Xe,oht),e(Xe,sL),e(sL,oxe),e(oxe,rht),e(sL,tht),e(sL,Jne),e(Jne,aht),e(sL,nht),e(Xe,sht),e(Xe,lL),e(lL,rxe),e(rxe,lht),e(lL,iht),e(lL,Yne),e(Yne,dht),e(lL,cht),e(nt,mht),M(iL,nt,null),b(m,zKe,_),b(m,nf,_),e(nf,dL),e(dL,txe),M(TR,txe,null),e(nf,fht),e(nf,axe),e(axe,ght),b(m,QKe,_),b(m,$r,_),M(MR,$r,null),e($r,hht),e($r,sf),e(sf,uht),e(sf,Kne),e(Kne,pht),e(sf,_ht),e(sf,Zne),e(Zne,bht),e(sf,vht),e($r,Fht),e($r,ER),e(ER,Tht),e(ER,nxe),e(nxe,Mht),e(ER,Eht),e($r,Cht),e($r,ga),M(CR,ga,null),e(ga,wht),e(ga,sxe),e(sxe,Aht),e(ga,Lht),e(ga,lf),e(lf,yht),e(lf,lxe),e(lxe,xht),e(lf,$ht),e(lf,ese),e(ese,kht),e(lf,Sht),e(ga,Rht),M(cL,ga,null),e($r,Pht),e($r,st),M(wR,st,null),e(st,Bht),e(st,ixe),e(ixe,Iht),e(st,Nht),e(st,Un),e(Un,qht),e(Un,dxe),e(dxe,jht),e(Un,Dht),e(Un,cxe),e(cxe,Ght),e(Un,Oht),e(Un,mxe),e(mxe,Vht),e(Un,Xht),e(st,zht),e(st,ze),e(ze,mL),e(mL,fxe),e(fxe,Qht),e(mL,Wht),e(mL,ose),e(ose,Uht),e(mL,Hht),e(ze,Jht),e(ze,fL),e(fL,gxe),e(gxe,Yht),e(fL,Kht),e(fL,rse),e(rse,Zht),e(fL,eut),e(ze,out),e(ze,gL),e(gL,hxe),e(hxe,rut),e(gL,tut),e(gL,tse),e(tse,aut),e(gL,nut),e(ze,sut),e(ze,hL),e(hL,uxe),e(uxe,lut),e(hL,iut),e(hL,ase),e(ase,dut),e(hL,cut),e(ze,mut),e(ze,uL),e(uL,pxe),e(pxe,fut),e(uL,gut),e(uL,nse),e(nse,hut),e(uL,uut),e(ze,put),e(ze,pL),e(pL,_xe),e(_xe,_ut),e(pL,but),e(pL,sse),e(sse,vut),e(pL,Fut),e(ze,Tut),e(ze,_L),e(_L,bxe),e(bxe,Mut),e(_L,Eut),e(_L,lse),e(lse,Cut),e(_L,wut),e(ze,Aut),e(ze,bL),e(bL,vxe),e(vxe,Lut),e(bL,yut),e(bL,ise),e(ise,xut),e(bL,$ut),e(st,kut),M(vL,st,null),b(m,WKe,_),b(m,df,_),e(df,FL),e(FL,Fxe),M(AR,Fxe,null),e(df,Sut),e(df,Txe),e(Txe,Rut),b(m,UKe,_),b(m,kr,_),M(LR,kr,null),e(kr,Put),e(kr,cf),e(cf,But),e(cf,dse),e(dse,Iut),e(cf,Nut),e(cf,cse),e(cse,qut),e(cf,jut),e(kr,Dut),e(kr,yR),e(yR,Gut),e(yR,Mxe),e(Mxe,Out),e(yR,Vut),e(kr,Xut),e(kr,ha),M(xR,ha,null),e(ha,zut),e(ha,Exe),e(Exe,Qut),e(ha,Wut),e(ha,mf),e(mf,Uut),e(mf,Cxe),e(Cxe,Hut),e(mf,Jut),e(mf,mse),e(mse,Yut),e(mf,Kut),e(ha,Zut),M(TL,ha,null),e(kr,ept),e(kr,lt),M($R,lt,null),e(lt,opt),e(lt,wxe),e(wxe,rpt),e(lt,tpt),e(lt,Hn),e(Hn,apt),e(Hn,Axe),e(Axe,npt),e(Hn,spt),e(Hn,Lxe),e(Lxe,lpt),e(Hn,ipt),e(Hn,yxe),e(yxe,dpt),e(Hn,cpt),e(lt,mpt),e(lt,xxe),e(xxe,ML),e(ML,$xe),e($xe,fpt),e(ML,gpt),e(ML,fse),e(fse,hpt),e(ML,upt),e(lt,ppt),M(EL,lt,null),b(m,HKe,_),b(m,ff,_),e(ff,CL),e(CL,kxe),M(kR,kxe,null),e(ff,_pt),e(ff,Sxe),e(Sxe,bpt),b(m,JKe,_),b(m,Sr,_),M(SR,Sr,null),e(Sr,vpt),e(Sr,gf),e(gf,Fpt),e(gf,gse),e(gse,Tpt),e(gf,Mpt),e(gf,hse),e(hse,Ept),e(gf,Cpt),e(Sr,wpt),e(Sr,RR),e(RR,Apt),e(RR,Rxe),e(Rxe,Lpt),e(RR,ypt),e(Sr,xpt),e(Sr,ua),M(PR,ua,null),e(ua,$pt),e(ua,Pxe),e(Pxe,kpt),e(ua,Spt),e(ua,hf),e(hf,Rpt),e(hf,Bxe),e(Bxe,Ppt),e(hf,Bpt),e(hf,use),e(use,Ipt),e(hf,Npt),e(ua,qpt),M(wL,ua,null),e(Sr,jpt),e(Sr,it),M(BR,it,null),e(it,Dpt),e(it,Ixe),e(Ixe,Gpt),e(it,Opt),e(it,Jn),e(Jn,Vpt),e(Jn,Nxe),e(Nxe,Xpt),e(Jn,zpt),e(Jn,qxe),e(qxe,Qpt),e(Jn,Wpt),e(Jn,jxe),e(jxe,Upt),e(Jn,Hpt),e(it,Jpt),e(it,IR),e(IR,AL),e(AL,Dxe),e(Dxe,Ypt),e(AL,Kpt),e(AL,pse),e(pse,Zpt),e(AL,e_t),e(IR,o_t),e(IR,LL),e(LL,Gxe),e(Gxe,r_t),e(LL,t_t),e(LL,_se),e(_se,a_t),e(LL,n_t),e(it,s_t),M(yL,it,null),b(m,YKe,_),b(m,uf,_),e(uf,xL),e(xL,Oxe),M(NR,Oxe,null),e(uf,l_t),e(uf,Vxe),e(Vxe,i_t),b(m,KKe,_),b(m,Rr,_),M(qR,Rr,null),e(Rr,d_t),e(Rr,pf),e(pf,c_t),e(pf,bse),e(bse,m_t),e(pf,f_t),e(pf,vse),e(vse,g_t),e(pf,h_t),e(Rr,u_t),e(Rr,jR),e(jR,p_t),e(jR,Xxe),e(Xxe,__t),e(jR,b_t),e(Rr,v_t),e(Rr,pa),M(DR,pa,null),e(pa,F_t),e(pa,zxe),e(zxe,T_t),e(pa,M_t),e(pa,_f),e(_f,E_t),e(_f,Qxe),e(Qxe,C_t),e(_f,w_t),e(_f,Fse),e(Fse,A_t),e(_f,L_t),e(pa,y_t),M($L,pa,null),e(Rr,x_t),e(Rr,dt),M(GR,dt,null),e(dt,$_t),e(dt,Wxe),e(Wxe,k_t),e(dt,S_t),e(dt,Yn),e(Yn,R_t),e(Yn,Uxe),e(Uxe,P_t),e(Yn,B_t),e(Yn,Hxe),e(Hxe,I_t),e(Yn,N_t),e(Yn,Jxe),e(Jxe,q_t),e(Yn,j_t),e(dt,D_t),e(dt,Yxe),e(Yxe,kL),e(kL,Kxe),e(Kxe,G_t),e(kL,O_t),e(kL,Tse),e(Tse,V_t),e(kL,X_t),e(dt,z_t),M(SL,dt,null),ZKe=!0},p(m,[_]){const OR={};_&2&&(OR.$$scope={dirty:_,ctx:m}),Af.$set(OR);const Zxe={};_&2&&(Zxe.$$scope={dirty:_,ctx:m}),Xh.$set(Zxe);const e$e={};_&2&&(e$e.$$scope={dirty:_,ctx:m}),Au.$set(e$e);const o$e={};_&2&&(o$e.$$scope={dirty:_,ctx:m}),hp.$set(o$e);const VR={};_&2&&(VR.$$scope={dirty:_,ctx:m}),up.$set(VR);const r$e={};_&2&&(r$e.$$scope={dirty:_,ctx:m}),jp.$set(r$e);const Kn={};_&2&&(Kn.$$scope={dirty:_,ctx:m}),Dp.$set(Kn);const t$e={};_&2&&(t$e.$$scope={dirty:_,ctx:m}),Vp.$set(t$e);const a$e={};_&2&&(a$e.$$scope={dirty:_,ctx:m}),e2.$set(a$e);const n$e={};_&2&&(n$e.$$scope={dirty:_,ctx:m}),r2.$set(n$e);const XR={};_&2&&(XR.$$scope={dirty:_,ctx:m}),Y2.$set(XR);const s$e={};_&2&&(s$e.$$scope={dirty:_,ctx:m}),Z2.$set(s$e);const zR={};_&2&&(zR.$$scope={dirty:_,ctx:m}),Gv.$set(zR);const l$e={};_&2&&(l$e.$$scope={dirty:_,ctx:m}),Vv.$set(l$e);const QR={};_&2&&(QR.$$scope={dirty:_,ctx:m}),x1.$set(QR);const i$e={};_&2&&(i$e.$$scope={dirty:_,ctx:m}),k1.$set(i$e);const d$e={};_&2&&(d$e.$$scope={dirty:_,ctx:m}),Z1.$set(d$e);const c$e={};_&2&&(c$e.$$scope={dirty:_,ctx:m}),oF.$set(c$e);const bf={};_&2&&(bf.$$scope={dirty:_,ctx:m}),oT.$set(bf);const m$e={};_&2&&(m$e.$$scope={dirty:_,ctx:m}),tT.$set(m$e);const f$e={};_&2&&(f$e.$$scope={dirty:_,ctx:m}),IT.$set(f$e);const g$e={};_&2&&(g$e.$$scope={dirty:_,ctx:m}),qT.$set(g$e);const WR={};_&2&&(WR.$$scope={dirty:_,ctx:m}),QT.$set(WR);const h$e={};_&2&&(h$e.$$scope={dirty:_,ctx:m}),UT.$set(h$e);const u$e={};_&2&&(u$e.$$scope={dirty:_,ctx:m}),RM.$set(u$e);const p$e={};_&2&&(p$e.$$scope={dirty:_,ctx:m}),BM.$set(p$e);const gt={};_&2&&(gt.$$scope={dirty:_,ctx:m}),AE.$set(gt);const UR={};_&2&&(UR.$$scope={dirty:_,ctx:m}),yE.$set(UR);const _$e={};_&2&&(_$e.$$scope={dirty:_,ctx:m}),kE.$set(_$e);const HR={};_&2&&(HR.$$scope={dirty:_,ctx:m}),RE.$set(HR);const b$e={};_&2&&(b$e.$$scope={dirty:_,ctx:m}),qE.$set(b$e);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),DE.$set(ht);const v$e={};_&2&&(v$e.$$scope={dirty:_,ctx:m}),r4.$set(v$e);const vf={};_&2&&(vf.$$scope={dirty:_,ctx:m}),a4.$set(vf);const F$e={};_&2&&(F$e.$$scope={dirty:_,ctx:m}),l4.$set(F$e);const T$e={};_&2&&(T$e.$$scope={dirty:_,ctx:m}),d4.$set(T$e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),f4.$set(L);const RL={};_&2&&(RL.$$scope={dirty:_,ctx:m}),h4.$set(RL);const M$e={};_&2&&(M$e.$$scope={dirty:_,ctx:m}),_4.$set(M$e);const E$e={};_&2&&(E$e.$$scope={dirty:_,ctx:m}),v4.$set(E$e);const PL={};_&2&&(PL.$$scope={dirty:_,ctx:m}),$4.$set(PL);const C$e={};_&2&&(C$e.$$scope={dirty:_,ctx:m}),S4.$set(C$e);const w$e={};_&2&&(w$e.$$scope={dirty:_,ctx:m}),j4.$set(w$e);const BL={};_&2&&(BL.$$scope={dirty:_,ctx:m}),G4.$set(BL);const A$e={};_&2&&(A$e.$$scope={dirty:_,ctx:m}),Z4.$set(A$e);const L$e={};_&2&&(L$e.$$scope={dirty:_,ctx:m}),oC.$set(L$e);const IL={};_&2&&(IL.$$scope={dirty:_,ctx:m}),nC.$set(IL);const y$e={};_&2&&(y$e.$$scope={dirty:_,ctx:m}),lC.$set(y$e);const x$e={};_&2&&(x$e.$$scope={dirty:_,ctx:m}),hC.$set(x$e);const NL={};_&2&&(NL.$$scope={dirty:_,ctx:m}),pC.$set(NL);const $$e={};_&2&&($$e.$$scope={dirty:_,ctx:m}),MC.$set($$e);const k$e={};_&2&&(k$e.$$scope={dirty:_,ctx:m}),CC.$set(k$e);const qL={};_&2&&(qL.$$scope={dirty:_,ctx:m}),yC.$set(qL);const S$e={};_&2&&(S$e.$$scope={dirty:_,ctx:m}),$C.$set(S$e);const R$e={};_&2&&(R$e.$$scope={dirty:_,ctx:m}),RC.$set(R$e);const jL={};_&2&&(jL.$$scope={dirty:_,ctx:m}),BC.$set(jL);const P$e={};_&2&&(P$e.$$scope={dirty:_,ctx:m}),OC.$set(P$e);const B$e={};_&2&&(B$e.$$scope={dirty:_,ctx:m}),XC.$set(B$e);const DL={};_&2&&(DL.$$scope={dirty:_,ctx:m}),WC.$set(DL);const I$e={};_&2&&(I$e.$$scope={dirty:_,ctx:m}),HC.$set(I$e);const N$e={};_&2&&(N$e.$$scope={dirty:_,ctx:m}),H3.$set(N$e);const GL={};_&2&&(GL.$$scope={dirty:_,ctx:m}),Y3.$set(GL);const q$e={};_&2&&(q$e.$$scope={dirty:_,ctx:m}),T5.$set(q$e);const j$e={};_&2&&(j$e.$$scope={dirty:_,ctx:m}),E5.$set(j$e);const OL={};_&2&&(OL.$$scope={dirty:_,ctx:m}),q5.$set(OL);const D$e={};_&2&&(D$e.$$scope={dirty:_,ctx:m}),D5.$set(D$e);const G$e={};_&2&&(G$e.$$scope={dirty:_,ctx:m}),H5.$set(G$e);const VL={};_&2&&(VL.$$scope={dirty:_,ctx:m}),Y5.$set(VL);const O$e={};_&2&&(O$e.$$scope={dirty:_,ctx:m}),o0.$set(O$e);const V$e={};_&2&&(V$e.$$scope={dirty:_,ctx:m}),t0.$set(V$e);const XL={};_&2&&(XL.$$scope={dirty:_,ctx:m}),C0.$set(XL);const X$e={};_&2&&(X$e.$$scope={dirty:_,ctx:m}),A0.$set(X$e);const z$e={};_&2&&(z$e.$$scope={dirty:_,ctx:m}),N0.$set(z$e);const zL={};_&2&&(zL.$$scope={dirty:_,ctx:m}),j0.$set(zL);const Q$e={};_&2&&(Q$e.$$scope={dirty:_,ctx:m}),gw.$set(Q$e);const W$e={};_&2&&(W$e.$$scope={dirty:_,ctx:m}),uw.$set(W$e);const QL={};_&2&&(QL.$$scope={dirty:_,ctx:m}),Rw.$set(QL);const U$e={};_&2&&(U$e.$$scope={dirty:_,ctx:m}),Bw.$set(U$e);const H$e={};_&2&&(H$e.$$scope={dirty:_,ctx:m}),qw.$set(H$e);const WL={};_&2&&(WL.$$scope={dirty:_,ctx:m}),Dw.$set(WL);const J$e={};_&2&&(J$e.$$scope={dirty:_,ctx:m}),Ow.$set(J$e);const Y$e={};_&2&&(Y$e.$$scope={dirty:_,ctx:m}),Xw.$set(Y$e);const UL={};_&2&&(UL.$$scope={dirty:_,ctx:m}),Qw.$set(UL);const K$e={};_&2&&(K$e.$$scope={dirty:_,ctx:m}),Uw.$set(K$e);const Z$e={};_&2&&(Z$e.$$scope={dirty:_,ctx:m}),pA.$set(Z$e);const HL={};_&2&&(HL.$$scope={dirty:_,ctx:m}),bA.$set(HL);const eke={};_&2&&(eke.$$scope={dirty:_,ctx:m}),DA.$set(eke);const oke={};_&2&&(oke.$$scope={dirty:_,ctx:m}),OA.$set(oke);const JL={};_&2&&(JL.$$scope={dirty:_,ctx:m}),XA.$set(JL);const rke={};_&2&&(rke.$$scope={dirty:_,ctx:m}),QA.$set(rke);const tke={};_&2&&(tke.$$scope={dirty:_,ctx:m}),UA.$set(tke);const YL={};_&2&&(YL.$$scope={dirty:_,ctx:m}),JA.$set(YL);const ake={};_&2&&(ake.$$scope={dirty:_,ctx:m}),C6.$set(ake);const nke={};_&2&&(nke.$$scope={dirty:_,ctx:m}),A6.$set(nke);const KL={};_&2&&(KL.$$scope={dirty:_,ctx:m}),N6.$set(KL);const ske={};_&2&&(ske.$$scope={dirty:_,ctx:m}),j6.$set(ske);const lke={};_&2&&(lke.$$scope={dirty:_,ctx:m}),Z6.$set(lke);const ZL={};_&2&&(ZL.$$scope={dirty:_,ctx:m}),o7.$set(ZL);const ike={};_&2&&(ike.$$scope={dirty:_,ctx:m}),f7.$set(ike);const dke={};_&2&&(dke.$$scope={dirty:_,ctx:m}),h7.$set(dke);const ey={};_&2&&(ey.$$scope={dirty:_,ctx:m}),w7.$set(ey);const cke={};_&2&&(cke.$$scope={dirty:_,ctx:m}),L7.$set(cke);const mke={};_&2&&(mke.$$scope={dirty:_,ctx:m}),q7.$set(mke);const oy={};_&2&&(oy.$$scope={dirty:_,ctx:m}),D7.$set(oy);const fke={};_&2&&(fke.$$scope={dirty:_,ctx:m}),Y7.$set(fke);const gke={};_&2&&(gke.$$scope={dirty:_,ctx:m}),Z7.$set(gke);const ry={};_&2&&(ry.$$scope={dirty:_,ctx:m}),iL.$set(ry);const hke={};_&2&&(hke.$$scope={dirty:_,ctx:m}),cL.$set(hke);const uke={};_&2&&(uke.$$scope={dirty:_,ctx:m}),vL.$set(uke);const ty={};_&2&&(ty.$$scope={dirty:_,ctx:m}),TL.$set(ty);const pke={};_&2&&(pke.$$scope={dirty:_,ctx:m}),EL.$set(pke);const _ke={};_&2&&(_ke.$$scope={dirty:_,ctx:m}),wL.$set(_ke);const ay={};_&2&&(ay.$$scope={dirty:_,ctx:m}),yL.$set(ay);const bke={};_&2&&(bke.$$scope={dirty:_,ctx:m}),$L.$set(bke);const vke={};_&2&&(vke.$$scope={dirty:_,ctx:m}),SL.$set(vke)},i(m){ZKe||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(f9.$$.fragment,m),E(g9.$$.fragment,m),E(Af.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(b9.$$.fragment,m),E(Xh.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(C9.$$.fragment,m),E(Au.$$.fragment,m),E(w9.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E($9.$$.fragment,m),E(hp.$$.fragment,m),E(up.$$.fragment,m),E(k9.$$.fragment,m),E(S9.$$.fragment,m),E(R9.$$.fragment,m),E(I9.$$.fragment,m),E(jp.$$.fragment,m),E(Dp.$$.fragment,m),E(N9.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(G9.$$.fragment,m),E(Vp.$$.fragment,m),E(O9.$$.fragment,m),E(e2.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(Q9.$$.fragment,m),E(r2.$$.fragment,m),E(W9.$$.fragment,m),E(Y2.$$.fragment,m),E(U9.$$.fragment,m),E(H9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z2.$$.fragment,m),E(K9.$$.fragment,m),E(Gv.$$.fragment,m),E(Z9.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(Vv.$$.fragment,m),E(tx.$$.fragment,m),E(x1.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(k1.$$.fragment,m),E(ix.$$.fragment,m),E(Z1.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(oF.$$.fragment,m),E(gx.$$.fragment,m),E(oT.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(tT.$$.fragment,m),E(bx.$$.fragment,m),E(IT.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(qT.$$.fragment,m),E(Ex.$$.fragment,m),E(QT.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(UT.$$.fragment,m),E(yx.$$.fragment,m),E(RM.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(BM.$$.fragment,m),E(Rx.$$.fragment,m),E(AE.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(yE.$$.fragment,m),E(qx.$$.fragment,m),E(kE.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(RE.$$.fragment,m),E(Vx.$$.fragment,m),E(qE.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(DE.$$.fragment,m),E(Ux.$$.fragment,m),E(r4.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(a4.$$.fragment,m),E(Zx.$$.fragment,m),E(l4.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(d4.$$.fragment,m),E(a$.$$.fragment,m),E(f4.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(h4.$$.fragment,m),E(d$.$$.fragment,m),E(_4.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(v4.$$.fragment,m),E(h$.$$.fragment,m),E($4.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(S4.$$.fragment,m),E(v$.$$.fragment,m),E(j4.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(G4.$$.fragment,m),E(C$.$$.fragment,m),E(Z4.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(oC.$$.fragment,m),E(x$.$$.fragment,m),E(nC.$$.fragment,m),E(k$.$$.fragment,m),E(S$.$$.fragment,m),E(P$.$$.fragment,m),E(lC.$$.fragment,m),E(B$.$$.fragment,m),E(hC.$$.fragment,m),E(I$.$$.fragment,m),E(N$.$$.fragment,m),E(j$.$$.fragment,m),E(pC.$$.fragment,m),E(D$.$$.fragment,m),E(MC.$$.fragment,m),E(G$.$$.fragment,m),E(O$.$$.fragment,m),E(X$.$$.fragment,m),E(CC.$$.fragment,m),E(z$.$$.fragment,m),E(yC.$$.fragment,m),E(W$.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E($C.$$.fragment,m),E(Y$.$$.fragment,m),E(RC.$$.fragment,m),E(K$.$$.fragment,m),E(Z$.$$.fragment,m),E(ok.$$.fragment,m),E(BC.$$.fragment,m),E(rk.$$.fragment,m),E(OC.$$.fragment,m),E(tk.$$.fragment,m),E(ak.$$.fragment,m),E(sk.$$.fragment,m),E(XC.$$.fragment,m),E(lk.$$.fragment,m),E(WC.$$.fragment,m),E(ik.$$.fragment,m),E(dk.$$.fragment,m),E(mk.$$.fragment,m),E(HC.$$.fragment,m),E(fk.$$.fragment,m),E(H3.$$.fragment,m),E(gk.$$.fragment,m),E(hk.$$.fragment,m),E(pk.$$.fragment,m),E(Y3.$$.fragment,m),E(_k.$$.fragment,m),E(T5.$$.fragment,m),E(bk.$$.fragment,m),E(vk.$$.fragment,m),E(Tk.$$.fragment,m),E(E5.$$.fragment,m),E(Mk.$$.fragment,m),E(q5.$$.fragment,m),E(Ek.$$.fragment,m),E(Ck.$$.fragment,m),E(Ak.$$.fragment,m),E(D5.$$.fragment,m),E(Lk.$$.fragment,m),E(H5.$$.fragment,m),E(yk.$$.fragment,m),E(xk.$$.fragment,m),E(kk.$$.fragment,m),E(Y5.$$.fragment,m),E(Sk.$$.fragment,m),E(o0.$$.fragment,m),E(Rk.$$.fragment,m),E(Pk.$$.fragment,m),E(Ik.$$.fragment,m),E(t0.$$.fragment,m),E(Nk.$$.fragment,m),E(C0.$$.fragment,m),E(qk.$$.fragment,m),E(jk.$$.fragment,m),E(Gk.$$.fragment,m),E(A0.$$.fragment,m),E(Ok.$$.fragment,m),E(N0.$$.fragment,m),E(Vk.$$.fragment,m),E(Xk.$$.fragment,m),E(Qk.$$.fragment,m),E(j0.$$.fragment,m),E(Wk.$$.fragment,m),E(gw.$$.fragment,m),E(Uk.$$.fragment,m),E(Hk.$$.fragment,m),E(Yk.$$.fragment,m),E(uw.$$.fragment,m),E(Kk.$$.fragment,m),E(Rw.$$.fragment,m),E(Zk.$$.fragment,m),E(eS.$$.fragment,m),E(rS.$$.fragment,m),E(Bw.$$.fragment,m),E(tS.$$.fragment,m),E(qw.$$.fragment,m),E(nS.$$.fragment,m),E(sS.$$.fragment,m),E(iS.$$.fragment,m),E(Dw.$$.fragment,m),E(dS.$$.fragment,m),E(Ow.$$.fragment,m),E(cS.$$.fragment,m),E(mS.$$.fragment,m),E(gS.$$.fragment,m),E(Xw.$$.fragment,m),E(hS.$$.fragment,m),E(Qw.$$.fragment,m),E(uS.$$.fragment,m),E(pS.$$.fragment,m),E(bS.$$.fragment,m),E(Uw.$$.fragment,m),E(vS.$$.fragment,m),E(pA.$$.fragment,m),E(FS.$$.fragment,m),E(TS.$$.fragment,m),E(ES.$$.fragment,m),E(bA.$$.fragment,m),E(CS.$$.fragment,m),E(DA.$$.fragment,m),E(wS.$$.fragment,m),E(AS.$$.fragment,m),E(yS.$$.fragment,m),E(OA.$$.fragment,m),E(xS.$$.fragment,m),E(XA.$$.fragment,m),E($S.$$.fragment,m),E(kS.$$.fragment,m),E(RS.$$.fragment,m),E(QA.$$.fragment,m),E(PS.$$.fragment,m),E(UA.$$.fragment,m),E(BS.$$.fragment,m),E(IS.$$.fragment,m),E(qS.$$.fragment,m),E(JA.$$.fragment,m),E(jS.$$.fragment,m),E(C6.$$.fragment,m),E(DS.$$.fragment,m),E(GS.$$.fragment,m),E(VS.$$.fragment,m),E(A6.$$.fragment,m),E(XS.$$.fragment,m),E(N6.$$.fragment,m),E(zS.$$.fragment,m),E(QS.$$.fragment,m),E(US.$$.fragment,m),E(j6.$$.fragment,m),E(HS.$$.fragment,m),E(Z6.$$.fragment,m),E(JS.$$.fragment,m),E(YS.$$.fragment,m),E(ZS.$$.fragment,m),E(o7.$$.fragment,m),E(eR.$$.fragment,m),E(f7.$$.fragment,m),E(oR.$$.fragment,m),E(rR.$$.fragment,m),E(aR.$$.fragment,m),E(h7.$$.fragment,m),E(nR.$$.fragment,m),E(w7.$$.fragment,m),E(sR.$$.fragment,m),E(lR.$$.fragment,m),E(dR.$$.fragment,m),E(L7.$$.fragment,m),E(cR.$$.fragment,m),E(q7.$$.fragment,m),E(mR.$$.fragment,m),E(fR.$$.fragment,m),E(hR.$$.fragment,m),E(D7.$$.fragment,m),E(uR.$$.fragment,m),E(Y7.$$.fragment,m),E(pR.$$.fragment,m),E(_R.$$.fragment,m),E(vR.$$.fragment,m),E(Z7.$$.fragment,m),E(FR.$$.fragment,m),E(iL.$$.fragment,m),E(TR.$$.fragment,m),E(MR.$$.fragment,m),E(CR.$$.fragment,m),E(cL.$$.fragment,m),E(wR.$$.fragment,m),E(vL.$$.fragment,m),E(AR.$$.fragment,m),E(LR.$$.fragment,m),E(xR.$$.fragment,m),E(TL.$$.fragment,m),E($R.$$.fragment,m),E(EL.$$.fragment,m),E(kR.$$.fragment,m),E(SR.$$.fragment,m),E(PR.$$.fragment,m),E(wL.$$.fragment,m),E(BR.$$.fragment,m),E(yL.$$.fragment,m),E(NR.$$.fragment,m),E(qR.$$.fragment,m),E(DR.$$.fragment,m),E($L.$$.fragment,m),E(GR.$$.fragment,m),E(SL.$$.fragment,m),ZKe=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(f9.$$.fragment,m),C(g9.$$.fragment,m),C(Af.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(b9.$$.fragment,m),C(Xh.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(C9.$$.fragment,m),C(Au.$$.fragment,m),C(w9.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C($9.$$.fragment,m),C(hp.$$.fragment,m),C(up.$$.fragment,m),C(k9.$$.fragment,m),C(S9.$$.fragment,m),C(R9.$$.fragment,m),C(I9.$$.fragment,m),C(jp.$$.fragment,m),C(Dp.$$.fragment,m),C(N9.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(G9.$$.fragment,m),C(Vp.$$.fragment,m),C(O9.$$.fragment,m),C(e2.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(Q9.$$.fragment,m),C(r2.$$.fragment,m),C(W9.$$.fragment,m),C(Y2.$$.fragment,m),C(U9.$$.fragment,m),C(H9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z2.$$.fragment,m),C(K9.$$.fragment,m),C(Gv.$$.fragment,m),C(Z9.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(Vv.$$.fragment,m),C(tx.$$.fragment,m),C(x1.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(k1.$$.fragment,m),C(ix.$$.fragment,m),C(Z1.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(oF.$$.fragment,m),C(gx.$$.fragment,m),C(oT.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(tT.$$.fragment,m),C(bx.$$.fragment,m),C(IT.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(qT.$$.fragment,m),C(Ex.$$.fragment,m),C(QT.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(UT.$$.fragment,m),C(yx.$$.fragment,m),C(RM.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(BM.$$.fragment,m),C(Rx.$$.fragment,m),C(AE.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(yE.$$.fragment,m),C(qx.$$.fragment,m),C(kE.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(RE.$$.fragment,m),C(Vx.$$.fragment,m),C(qE.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(DE.$$.fragment,m),C(Ux.$$.fragment,m),C(r4.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(a4.$$.fragment,m),C(Zx.$$.fragment,m),C(l4.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(d4.$$.fragment,m),C(a$.$$.fragment,m),C(f4.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(h4.$$.fragment,m),C(d$.$$.fragment,m),C(_4.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(v4.$$.fragment,m),C(h$.$$.fragment,m),C($4.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(S4.$$.fragment,m),C(v$.$$.fragment,m),C(j4.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(G4.$$.fragment,m),C(C$.$$.fragment,m),C(Z4.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(oC.$$.fragment,m),C(x$.$$.fragment,m),C(nC.$$.fragment,m),C(k$.$$.fragment,m),C(S$.$$.fragment,m),C(P$.$$.fragment,m),C(lC.$$.fragment,m),C(B$.$$.fragment,m),C(hC.$$.fragment,m),C(I$.$$.fragment,m),C(N$.$$.fragment,m),C(j$.$$.fragment,m),C(pC.$$.fragment,m),C(D$.$$.fragment,m),C(MC.$$.fragment,m),C(G$.$$.fragment,m),C(O$.$$.fragment,m),C(X$.$$.fragment,m),C(CC.$$.fragment,m),C(z$.$$.fragment,m),C(yC.$$.fragment,m),C(W$.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C($C.$$.fragment,m),C(Y$.$$.fragment,m),C(RC.$$.fragment,m),C(K$.$$.fragment,m),C(Z$.$$.fragment,m),C(ok.$$.fragment,m),C(BC.$$.fragment,m),C(rk.$$.fragment,m),C(OC.$$.fragment,m),C(tk.$$.fragment,m),C(ak.$$.fragment,m),C(sk.$$.fragment,m),C(XC.$$.fragment,m),C(lk.$$.fragment,m),C(WC.$$.fragment,m),C(ik.$$.fragment,m),C(dk.$$.fragment,m),C(mk.$$.fragment,m),C(HC.$$.fragment,m),C(fk.$$.fragment,m),C(H3.$$.fragment,m),C(gk.$$.fragment,m),C(hk.$$.fragment,m),C(pk.$$.fragment,m),C(Y3.$$.fragment,m),C(_k.$$.fragment,m),C(T5.$$.fragment,m),C(bk.$$.fragment,m),C(vk.$$.fragment,m),C(Tk.$$.fragment,m),C(E5.$$.fragment,m),C(Mk.$$.fragment,m),C(q5.$$.fragment,m),C(Ek.$$.fragment,m),C(Ck.$$.fragment,m),C(Ak.$$.fragment,m),C(D5.$$.fragment,m),C(Lk.$$.fragment,m),C(H5.$$.fragment,m),C(yk.$$.fragment,m),C(xk.$$.fragment,m),C(kk.$$.fragment,m),C(Y5.$$.fragment,m),C(Sk.$$.fragment,m),C(o0.$$.fragment,m),C(Rk.$$.fragment,m),C(Pk.$$.fragment,m),C(Ik.$$.fragment,m),C(t0.$$.fragment,m),C(Nk.$$.fragment,m),C(C0.$$.fragment,m),C(qk.$$.fragment,m),C(jk.$$.fragment,m),C(Gk.$$.fragment,m),C(A0.$$.fragment,m),C(Ok.$$.fragment,m),C(N0.$$.fragment,m),C(Vk.$$.fragment,m),C(Xk.$$.fragment,m),C(Qk.$$.fragment,m),C(j0.$$.fragment,m),C(Wk.$$.fragment,m),C(gw.$$.fragment,m),C(Uk.$$.fragment,m),C(Hk.$$.fragment,m),C(Yk.$$.fragment,m),C(uw.$$.fragment,m),C(Kk.$$.fragment,m),C(Rw.$$.fragment,m),C(Zk.$$.fragment,m),C(eS.$$.fragment,m),C(rS.$$.fragment,m),C(Bw.$$.fragment,m),C(tS.$$.fragment,m),C(qw.$$.fragment,m),C(nS.$$.fragment,m),C(sS.$$.fragment,m),C(iS.$$.fragment,m),C(Dw.$$.fragment,m),C(dS.$$.fragment,m),C(Ow.$$.fragment,m),C(cS.$$.fragment,m),C(mS.$$.fragment,m),C(gS.$$.fragment,m),C(Xw.$$.fragment,m),C(hS.$$.fragment,m),C(Qw.$$.fragment,m),C(uS.$$.fragment,m),C(pS.$$.fragment,m),C(bS.$$.fragment,m),C(Uw.$$.fragment,m),C(vS.$$.fragment,m),C(pA.$$.fragment,m),C(FS.$$.fragment,m),C(TS.$$.fragment,m),C(ES.$$.fragment,m),C(bA.$$.fragment,m),C(CS.$$.fragment,m),C(DA.$$.fragment,m),C(wS.$$.fragment,m),C(AS.$$.fragment,m),C(yS.$$.fragment,m),C(OA.$$.fragment,m),C(xS.$$.fragment,m),C(XA.$$.fragment,m),C($S.$$.fragment,m),C(kS.$$.fragment,m),C(RS.$$.fragment,m),C(QA.$$.fragment,m),C(PS.$$.fragment,m),C(UA.$$.fragment,m),C(BS.$$.fragment,m),C(IS.$$.fragment,m),C(qS.$$.fragment,m),C(JA.$$.fragment,m),C(jS.$$.fragment,m),C(C6.$$.fragment,m),C(DS.$$.fragment,m),C(GS.$$.fragment,m),C(VS.$$.fragment,m),C(A6.$$.fragment,m),C(XS.$$.fragment,m),C(N6.$$.fragment,m),C(zS.$$.fragment,m),C(QS.$$.fragment,m),C(US.$$.fragment,m),C(j6.$$.fragment,m),C(HS.$$.fragment,m),C(Z6.$$.fragment,m),C(JS.$$.fragment,m),C(YS.$$.fragment,m),C(ZS.$$.fragment,m),C(o7.$$.fragment,m),C(eR.$$.fragment,m),C(f7.$$.fragment,m),C(oR.$$.fragment,m),C(rR.$$.fragment,m),C(aR.$$.fragment,m),C(h7.$$.fragment,m),C(nR.$$.fragment,m),C(w7.$$.fragment,m),C(sR.$$.fragment,m),C(lR.$$.fragment,m),C(dR.$$.fragment,m),C(L7.$$.fragment,m),C(cR.$$.fragment,m),C(q7.$$.fragment,m),C(mR.$$.fragment,m),C(fR.$$.fragment,m),C(hR.$$.fragment,m),C(D7.$$.fragment,m),C(uR.$$.fragment,m),C(Y7.$$.fragment,m),C(pR.$$.fragment,m),C(_R.$$.fragment,m),C(vR.$$.fragment,m),C(Z7.$$.fragment,m),C(FR.$$.fragment,m),C(iL.$$.fragment,m),C(TR.$$.fragment,m),C(MR.$$.fragment,m),C(CR.$$.fragment,m),C(cL.$$.fragment,m),C(wR.$$.fragment,m),C(vL.$$.fragment,m),C(AR.$$.fragment,m),C(LR.$$.fragment,m),C(xR.$$.fragment,m),C(TL.$$.fragment,m),C($R.$$.fragment,m),C(EL.$$.fragment,m),C(kR.$$.fragment,m),C(SR.$$.fragment,m),C(PR.$$.fragment,m),C(wL.$$.fragment,m),C(BR.$$.fragment,m),C(yL.$$.fragment,m),C(NR.$$.fragment,m),C(qR.$$.fragment,m),C(DR.$$.fragment,m),C($L.$$.fragment,m),C(GR.$$.fragment,m),C(SL.$$.fragment,m),ZKe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Tf),m&&t(ut),m&&t(Ve),m&&t(Ue),m&&t(Ef),w(Qa,m),m&&t(He),m&&t(Ae),m&&t(yo),m&&t(Wa),m&&t(DJe),m&&t(id),w(f9),m&&t(GJe),m&&t(ts),m&&t(OJe),w(g9,m),m&&t(VJe),m&&t(_B),m&&t(XJe),w(Af,m),m&&t(zJe),m&&t(dd),w(h9),m&&t(QJe),m&&t(xo),w(u9),w(b9),w(Xh),w(v9),m&&t(WJe),m&&t(md),w(F9),m&&t(UJe),m&&t($o),w(T9),w(C9),w(Au),w(w9),m&&t(HJe),m&&t(fd),w(A9),m&&t(JJe),m&&t(ko),w(L9),w($9),w(hp),w(up),w(k9),m&&t(YJe),m&&t(gd),w(S9),m&&t(KJe),m&&t(So),w(R9),w(I9),w(jp),w(Dp),w(N9),m&&t(ZJe),m&&t(ud),w(q9),m&&t(eYe),m&&t(Ro),w(j9),w(G9),w(Vp),w(O9),w(e2),m&&t(oYe),m&&t(bd),w(V9),m&&t(rYe),m&&t(Po),w(X9),w(Q9),w(r2),w(W9),w(Y2),m&&t(tYe),m&&t(Td),w(U9),m&&t(aYe),m&&t(Bo),w(H9),w(Y9),w(Z2),w(K9),w(Gv),m&&t(nYe),m&&t(Cd),w(Z9),m&&t(sYe),m&&t(Io),w(ex),w(rx),w(Vv),w(tx),w(x1),m&&t(lYe),m&&t(Ld),w(ax),m&&t(iYe),m&&t(No),w(nx),w(lx),w(k1),w(ix),w(Z1),m&&t(dYe),m&&t($d),w(dx),m&&t(cYe),m&&t(qo),w(cx),w(fx),w(oF),w(gx),w(oT),m&&t(mYe),m&&t(Rd),w(hx),m&&t(fYe),m&&t(jo),w(ux),w(_x),w(tT),w(bx),w(IT),m&&t(gYe),m&&t(Id),w(vx),m&&t(hYe),m&&t(Do),w(Fx),w(Mx),w(qT),w(Ex),w(QT),m&&t(uYe),m&&t(jd),w(Cx),m&&t(pYe),m&&t(Oo),w(wx),w(Lx),w(UT),w(yx),w(RM),m&&t(_Ye),m&&t(Od),w(xx),m&&t(bYe),m&&t(Vo),w($x),w(Sx),w(BM),w(Rx),w(AE),m&&t(vYe),m&&t(zd),w(Px),m&&t(FYe),m&&t(Xo),w(Bx),w(Nx),w(yE),w(qx),w(kE),m&&t(TYe),m&&t(Ud),w(jx),m&&t(MYe),m&&t(zo),w(Dx),w(Ox),w(RE),w(Vx),w(qE),m&&t(EYe),m&&t(Kd),w(Xx),m&&t(CYe),m&&t(Qo),w(zx),w(Wx),w(DE),w(Ux),w(r4),m&&t(wYe),m&&t(oc),w(Hx),m&&t(AYe),m&&t(Wo),w(Jx),w(Kx),w(a4),w(Zx),w(l4),m&&t(LYe),m&&t(ac),w(e$),m&&t(yYe),m&&t(Uo),w(o$),w(t$),w(d4),w(a$),w(f4),m&&t(xYe),m&&t(lc),w(n$),m&&t($Ye),m&&t(Ho),w(s$),w(i$),w(h4),w(d$),w(_4),m&&t(kYe),m&&t(cc),w(c$),m&&t(SYe),m&&t(Jo),w(m$),w(g$),w(v4),w(h$),w($4),m&&t(RYe),m&&t(gc),w(u$),m&&t(PYe),m&&t(Yo),w(p$),w(b$),w(S4),w(v$),w(j4),m&&t(BYe),m&&t(pc),w(F$),m&&t(IYe),m&&t(Ko),w(T$),w(E$),w(G4),w(C$),w(Z4),m&&t(NYe),m&&t(vc),w(w$),m&&t(qYe),m&&t(Zo),w(A$),w(y$),w(oC),w(x$),w(nC),m&&t(jYe),m&&t(Mc),w(k$),m&&t(DYe),m&&t(er),w(S$),w(P$),w(lC),w(B$),w(hC),m&&t(GYe),m&&t(wc),w(I$),m&&t(OYe),m&&t(or),w(N$),w(j$),w(pC),w(D$),w(MC),m&&t(VYe),m&&t(yc),w(G$),m&&t(XYe),m&&t(rr),w(O$),w(X$),w(CC),w(z$),w(yC),m&&t(zYe),m&&t(kc),w(W$),m&&t(QYe),m&&t(tr),w(U$),w(J$),w($C),w(Y$),w(RC),m&&t(WYe),m&&t(Pc),w(K$),m&&t(UYe),m&&t(ar),w(Z$),w(ok),w(BC),w(rk),w(OC),m&&t(HYe),m&&t(Nc),w(tk),m&&t(JYe),m&&t(nr),w(ak),w(sk),w(XC),w(lk),w(WC),m&&t(YYe),m&&t(Dc),w(ik),m&&t(KYe),m&&t(sr),w(dk),w(mk),w(HC),w(fk),w(H3),m&&t(ZYe),m&&t(Vc),w(gk),m&&t(eKe),m&&t(lr),w(hk),w(pk),w(Y3),w(_k),w(T5),m&&t(oKe),m&&t(Qc),w(bk),m&&t(rKe),m&&t(ir),w(vk),w(Tk),w(E5),w(Mk),w(q5),m&&t(tKe),m&&t(Hc),w(Ek),m&&t(aKe),m&&t(dr),w(Ck),w(Ak),w(D5),w(Lk),w(H5),m&&t(nKe),m&&t(Kc),w(yk),m&&t(sKe),m&&t(cr),w(xk),w(kk),w(Y5),w(Sk),w(o0),m&&t(lKe),m&&t(rm),w(Rk),m&&t(iKe),m&&t(mr),w(Pk),w(Ik),w(t0),w(Nk),w(C0),m&&t(dKe),m&&t(nm),w(qk),m&&t(cKe),m&&t(fr),w(jk),w(Gk),w(A0),w(Ok),w(N0),m&&t(mKe),m&&t(im),w(Vk),m&&t(fKe),m&&t(gr),w(Xk),w(Qk),w(j0),w(Wk),w(gw),m&&t(gKe),m&&t(mm),w(Uk),m&&t(hKe),m&&t(hr),w(Hk),w(Yk),w(uw),w(Kk),w(Rw),m&&t(uKe),m&&t(hm),w(Zk),m&&t(pKe),m&&t(ur),w(eS),w(rS),w(Bw),w(tS),w(qw),m&&t(_Ke),m&&t(_m),w(nS),m&&t(bKe),m&&t(pr),w(sS),w(iS),w(Dw),w(dS),w(Ow),m&&t(vKe),m&&t(Fm),w(cS),m&&t(FKe),m&&t(_r),w(mS),w(gS),w(Xw),w(hS),w(Qw),m&&t(TKe),m&&t(Em),w(uS),m&&t(MKe),m&&t(br),w(pS),w(bS),w(Uw),w(vS),w(pA),m&&t(EKe),m&&t(Am),w(FS),m&&t(CKe),m&&t(vr),w(TS),w(ES),w(bA),w(CS),w(DA),m&&t(wKe),m&&t(xm),w(wS),m&&t(AKe),m&&t(Fr),w(AS),w(yS),w(OA),w(xS),w(XA),m&&t(LKe),m&&t(Sm),w($S),m&&t(yKe),m&&t(Tr),w(kS),w(RS),w(QA),w(PS),w(UA),m&&t(xKe),m&&t(Bm),w(BS),m&&t($Ke),m&&t(Mr),w(IS),w(qS),w(JA),w(jS),w(C6),m&&t(kKe),m&&t(qm),w(DS),m&&t(SKe),m&&t(Er),w(GS),w(VS),w(A6),w(XS),w(N6),m&&t(RKe),m&&t(Gm),w(zS),m&&t(PKe),m&&t(Cr),w(QS),w(US),w(j6),w(HS),w(Z6),m&&t(BKe),m&&t(Xm),w(JS),m&&t(IKe),m&&t(wr),w(YS),w(ZS),w(o7),w(eR),w(f7),m&&t(NKe),m&&t(Wm),w(oR),m&&t(qKe),m&&t(Ar),w(rR),w(aR),w(h7),w(nR),w(w7),m&&t(jKe),m&&t(Jm),w(sR),m&&t(DKe),m&&t(Lr),w(lR),w(dR),w(L7),w(cR),w(q7),m&&t(GKe),m&&t(Zm),w(mR),m&&t(OKe),m&&t(yr),w(fR),w(hR),w(D7),w(uR),w(Y7),m&&t(VKe),m&&t(rf),w(pR),m&&t(XKe),m&&t(xr),w(_R),w(vR),w(Z7),w(FR),w(iL),m&&t(zKe),m&&t(nf),w(TR),m&&t(QKe),m&&t($r),w(MR),w(CR),w(cL),w(wR),w(vL),m&&t(WKe),m&&t(df),w(AR),m&&t(UKe),m&&t(kr),w(LR),w(xR),w(TL),w($R),w(EL),m&&t(HKe),m&&t(ff),w(kR),m&&t(JKe),m&&t(Sr),w(SR),w(PR),w(wL),w(BR),w(yL),m&&t(YKe),m&&t(uf),w(NR),m&&t(KKe),m&&t(Rr),w(qR),w(DR),w($L),w(GR),w(SL)}}}const Sfa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Rfa($){return Eca(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Dfa extends vca{constructor(g){super();Fca(this,g,Rfa,kfa,Tca,{})}}export{Dfa as default,Sfa as metadata};
