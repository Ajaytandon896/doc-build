import{S as bIt,i as vIt,s as FIt,e as a,k as l,w as F,t as o,M as TIt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as MIt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as NHr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function EIt(L){let g,v,u,f,p,d,h,Eo,vi,wm,at,Fi,Ti,sL,Am,Ge,We,Mi,Sn,lL,Rn,Pn,iL,Ei,Bn,dL,Ci,ym,La;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),vi=a("code"),wm=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Fi=a("code"),Ti=o('"new-model"'),sL=o(")."),Am=l(),Ge=a("p"),We=o("Likewise, if your "),Mi=a("code"),Sn=o("NewModel"),lL=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),iL=o(`, make sure its
`),Ei=a("code"),Bn=o("config_class"),dL=o(` attribute is set to the same class you use when registering the model (here
`),Ci=a("code"),ym=o("NewModelConfig"),La=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var Bk=s(u);f=r(Bk,"NewModelConfig"),Bk.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var wi=s(d);h=r(wi,"PretrainedConfig"),wi.forEach(t),Eo=r(Ae,`, make sure its
`),vi=n(Ae,"CODE",{});var Ik=s(vi);wm=r(Ik,"model_type"),Ik.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Fi=n(Ae,"CODE",{});var Nk=s(Fi);Ti=r(Nk,'"new-model"'),Nk.forEach(t),sL=r(Ae,")."),Ae.forEach(t),Am=i(Qe),Ge=n(Qe,"P",{});var Co=s(Ge);We=r(Co,"Likewise, if your "),Mi=n(Co,"CODE",{});var xa=s(Mi);Sn=r(xa,"NewModel"),xa.forEach(t),lL=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var qk=s(Rn);Pn=r(qk,"PreTrainedModel"),qk.forEach(t),iL=r(Co,`, make sure its
`),Ei=n(Co,"CODE",{});var Lm=s(Ei);Bn=r(Lm,"config_class"),Lm.forEach(t),dL=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ci=n(Co,"CODE",{});var jk=s(Ci);ym=r(jk,"NewModelConfig"),jk.forEach(t),La=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Eo),e(g,vi),e(vi,wm),e(g,at),e(g,Fi),e(Fi,Ti),e(g,sL),b(Qe,Am,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,Mi),e(Mi,Sn),e(Ge,lL),e(Ge,Rn),e(Rn,Pn),e(Ge,iL),e(Ge,Ei),e(Ei,Bn),e(Ge,dL),e(Ge,Ci),e(Ci,ym),e(Ge,La)},d(Qe){Qe&&t(g),Qe&&t(Am),Qe&&t(Ge)}}}function CIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AIt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function yIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LIt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function xIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $It(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZIt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Nt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ENt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ANt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Nt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function INt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ONt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZNt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _qt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tqt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mqt(L){let g,v,u,f,p,d,h,Eo,vi,wm,at,Fi,Ti,sL,Am,Ge,We,Mi,Sn,lL,Rn,Pn,iL,Ei,Bn,dL,Ci,ym,La,Qe,Ae,Bk,wi,Ik,Nk,Co,xa,qk,Lm,jk,$Xe,uDe,Ai,xm,Cre,cL,kXe,wre,SXe,pDe,In,RXe,Are,PXe,BXe,yre,IXe,NXe,_De,mL,bDe,Dk,qXe,vDe,$m,FDe,yi,km,Lre,fL,jXe,xre,DXe,TDe,wo,gL,GXe,hL,OXe,Gk,VXe,XXe,zXe,uL,WXe,$re,QXe,HXe,UXe,wr,pL,JXe,kre,YXe,KXe,Li,ZXe,Sre,eze,oze,Rre,rze,tze,aze,A,Sm,Pre,nze,sze,Ok,lze,ize,dze,Rm,Bre,cze,mze,Vk,fze,gze,hze,Pm,Ire,uze,pze,Xk,_ze,bze,vze,Bm,Nre,Fze,Tze,zk,Mze,Eze,Cze,Im,qre,wze,Aze,Wk,yze,Lze,xze,Nm,jre,$ze,kze,Qk,Sze,Rze,Pze,qm,Dre,Bze,Ize,Hk,Nze,qze,jze,jm,Gre,Dze,Gze,Uk,Oze,Vze,Xze,Dm,Ore,zze,Wze,Jk,Qze,Hze,Uze,Gm,Vre,Jze,Yze,Yk,Kze,Zze,eWe,Om,Xre,oWe,rWe,Kk,tWe,aWe,nWe,Vm,zre,sWe,lWe,Zk,iWe,dWe,cWe,Xm,Wre,mWe,fWe,eS,gWe,hWe,uWe,zm,Qre,pWe,_We,oS,bWe,vWe,FWe,Wm,Hre,TWe,MWe,rS,EWe,CWe,wWe,Qm,Ure,AWe,yWe,tS,LWe,xWe,$We,Hm,Jre,kWe,SWe,aS,RWe,PWe,BWe,Um,Yre,IWe,NWe,nS,qWe,jWe,DWe,Jm,Kre,GWe,OWe,sS,VWe,XWe,zWe,Ym,Zre,WWe,QWe,lS,HWe,UWe,JWe,Km,ete,YWe,KWe,iS,ZWe,eQe,oQe,Zm,ote,rQe,tQe,dS,aQe,nQe,sQe,ef,rte,lQe,iQe,cS,dQe,cQe,mQe,of,tte,fQe,gQe,mS,hQe,uQe,pQe,rf,ate,_Qe,bQe,fS,vQe,FQe,TQe,tf,nte,MQe,EQe,gS,CQe,wQe,AQe,af,ste,yQe,LQe,hS,xQe,$Qe,kQe,nf,lte,SQe,RQe,uS,PQe,BQe,IQe,sf,ite,NQe,qQe,pS,jQe,DQe,GQe,lf,dte,OQe,VQe,_S,XQe,zQe,WQe,df,cte,QQe,HQe,bS,UQe,JQe,YQe,cf,mte,KQe,ZQe,vS,eHe,oHe,rHe,mf,fte,tHe,aHe,FS,nHe,sHe,lHe,ff,gte,iHe,dHe,TS,cHe,mHe,fHe,gf,hte,gHe,hHe,MS,uHe,pHe,_He,hf,ute,bHe,vHe,ES,FHe,THe,MHe,uf,pte,EHe,CHe,CS,wHe,AHe,yHe,pf,_te,LHe,xHe,wS,$He,kHe,SHe,_f,bte,RHe,PHe,AS,BHe,IHe,NHe,bf,vte,qHe,jHe,yS,DHe,GHe,OHe,vf,Fte,VHe,XHe,LS,zHe,WHe,QHe,Ff,Tte,HHe,UHe,xS,JHe,YHe,KHe,Tf,Mte,ZHe,eUe,$S,oUe,rUe,tUe,Mf,Ete,aUe,nUe,kS,sUe,lUe,iUe,Ef,Cte,dUe,cUe,SS,mUe,fUe,gUe,Cf,wte,hUe,uUe,RS,pUe,_Ue,bUe,wf,Ate,vUe,FUe,PS,TUe,MUe,EUe,Af,yte,CUe,wUe,BS,AUe,yUe,LUe,yf,Lte,xUe,$Ue,IS,kUe,SUe,RUe,Lf,xte,PUe,BUe,NS,IUe,NUe,qUe,xf,$te,jUe,DUe,qS,GUe,OUe,VUe,$f,kte,XUe,zUe,jS,WUe,QUe,HUe,kf,Ste,UUe,JUe,DS,YUe,KUe,ZUe,Sf,Rte,eJe,oJe,GS,rJe,tJe,aJe,Rf,Pte,nJe,sJe,OS,lJe,iJe,dJe,Pf,Bte,cJe,mJe,VS,fJe,gJe,hJe,Bf,Ite,uJe,pJe,XS,_Je,bJe,vJe,If,Nte,FJe,TJe,zS,MJe,EJe,CJe,Nf,qte,wJe,AJe,WS,yJe,LJe,xJe,qf,jte,$Je,kJe,QS,SJe,RJe,PJe,jf,Dte,BJe,IJe,HS,NJe,qJe,jJe,Df,Gte,DJe,GJe,US,OJe,VJe,XJe,Gf,Ote,zJe,WJe,JS,QJe,HJe,UJe,Of,Vte,JJe,YJe,YS,KJe,ZJe,eYe,Vf,Xte,oYe,rYe,KS,tYe,aYe,nYe,Xf,zte,sYe,lYe,ZS,iYe,dYe,cYe,zf,Wte,mYe,fYe,eR,gYe,hYe,uYe,Wf,Qte,pYe,_Ye,oR,bYe,vYe,FYe,Qf,Hte,TYe,MYe,rR,EYe,CYe,wYe,Hf,Ute,AYe,yYe,tR,LYe,xYe,$Ye,Uf,Jte,kYe,SYe,aR,RYe,PYe,BYe,Jf,Yte,IYe,NYe,nR,qYe,jYe,DYe,Yf,Kte,GYe,OYe,sR,VYe,XYe,zYe,Kf,Zte,WYe,QYe,lR,HYe,UYe,JYe,Zf,eae,YYe,KYe,iR,ZYe,eKe,oKe,eg,oae,rKe,tKe,dR,aKe,nKe,sKe,og,rae,lKe,iKe,cR,dKe,cKe,mKe,rg,tae,fKe,gKe,mR,hKe,uKe,pKe,tg,aae,_Ke,bKe,fR,vKe,FKe,TKe,ag,nae,MKe,EKe,gR,CKe,wKe,AKe,ng,sae,yKe,LKe,hR,xKe,$Ke,kKe,sg,lae,SKe,RKe,uR,PKe,BKe,IKe,lg,iae,NKe,qKe,pR,jKe,DKe,GKe,ig,dae,OKe,VKe,_R,XKe,zKe,WKe,dg,cae,QKe,HKe,bR,UKe,JKe,YKe,cg,mae,KKe,ZKe,vR,eZe,oZe,rZe,mg,fae,tZe,aZe,FR,nZe,sZe,lZe,fg,gae,iZe,dZe,TR,cZe,mZe,fZe,gg,hae,gZe,hZe,MR,uZe,pZe,_Ze,hg,uae,bZe,vZe,ER,FZe,TZe,MZe,ug,pae,EZe,CZe,CR,wZe,AZe,yZe,pg,_ae,LZe,xZe,wR,$Ze,kZe,SZe,_g,bae,RZe,PZe,AR,BZe,IZe,NZe,bg,vae,qZe,jZe,yR,DZe,GZe,OZe,vg,Fae,VZe,XZe,LR,zZe,WZe,QZe,Fg,Tae,HZe,UZe,xR,JZe,YZe,KZe,Tg,Mae,ZZe,eeo,$R,oeo,reo,teo,Mg,Eae,aeo,neo,kR,seo,leo,ieo,Eg,Cae,deo,ceo,SR,meo,feo,geo,Cg,wae,heo,ueo,RR,peo,_eo,beo,wg,Aae,veo,Feo,PR,Teo,Meo,Eeo,Ag,yae,Ceo,weo,BR,Aeo,yeo,Leo,yg,Lae,xeo,$eo,IR,keo,Seo,Reo,Lg,xae,Peo,Beo,NR,Ieo,Neo,qeo,xg,$ae,jeo,Deo,qR,Geo,Oeo,Veo,$g,kae,Xeo,zeo,jR,Weo,Qeo,Heo,kg,Sae,Ueo,Jeo,DR,Yeo,Keo,Zeo,Sg,Rae,eoo,ooo,GR,roo,too,aoo,Rg,Pae,noo,soo,OR,loo,ioo,doo,Pg,Bae,coo,moo,VR,foo,goo,hoo,Bg,Iae,uoo,poo,XR,_oo,boo,voo,Ig,Nae,Foo,Too,zR,Moo,Eoo,Coo,Ng,woo,qg,_L,Aoo,qae,yoo,MDe,xi,jg,jae,bL,Loo,Dae,xoo,EDe,Ao,vL,$oo,FL,koo,WR,Soo,Roo,Poo,TL,Boo,Gae,Ioo,Noo,qoo,Ar,ML,joo,Oae,Doo,Goo,$a,Ooo,Vae,Voo,Xoo,Xae,zoo,Woo,zae,Qoo,Hoo,Uoo,k,Nn,Wae,Joo,Yoo,QR,Koo,Zoo,HR,ero,oro,rro,qn,Qae,tro,aro,UR,nro,sro,JR,lro,iro,dro,jn,Hae,cro,mro,YR,fro,gro,KR,hro,uro,pro,Dg,Uae,_ro,bro,ZR,vro,Fro,Tro,Dn,Jae,Mro,Ero,eP,Cro,wro,oP,Aro,yro,Lro,Gg,Yae,xro,$ro,rP,kro,Sro,Rro,Og,Kae,Pro,Bro,tP,Iro,Nro,qro,Vg,Zae,jro,Dro,aP,Gro,Oro,Vro,Gn,ene,Xro,zro,nP,Wro,Qro,sP,Hro,Uro,Jro,On,one,Yro,Kro,lP,Zro,eto,iP,oto,rto,tto,Vn,rne,ato,nto,dP,sto,lto,cP,ito,dto,cto,Xg,tne,mto,fto,mP,gto,hto,uto,zg,ane,pto,_to,fP,bto,vto,Fto,Wg,nne,Tto,Mto,gP,Eto,Cto,wto,Xn,sne,Ato,yto,hP,Lto,xto,uP,$to,kto,Sto,Qg,lne,Rto,Pto,pP,Bto,Ito,Nto,zn,ine,qto,jto,_P,Dto,Gto,bP,Oto,Vto,Xto,Wn,dne,zto,Wto,vP,Qto,Hto,FP,Uto,Jto,Yto,Qn,cne,Kto,Zto,TP,eao,oao,MP,rao,tao,aao,Hg,mne,nao,sao,EP,lao,iao,dao,Hn,fne,cao,mao,CP,fao,gao,wP,hao,uao,pao,Un,gne,_ao,bao,AP,vao,Fao,yP,Tao,Mao,Eao,Jn,hne,Cao,wao,LP,Aao,yao,xP,Lao,xao,$ao,Yn,une,kao,Sao,$P,Rao,Pao,kP,Bao,Iao,Nao,Kn,pne,qao,jao,SP,Dao,Gao,RP,Oao,Vao,Xao,Zn,_ne,zao,Wao,PP,Qao,Hao,BP,Uao,Jao,Yao,Ug,bne,Kao,Zao,IP,eno,ono,rno,es,vne,tno,ano,NP,nno,sno,qP,lno,ino,dno,Jg,Fne,cno,mno,jP,fno,gno,hno,os,Tne,uno,pno,DP,_no,bno,GP,vno,Fno,Tno,rs,Mne,Mno,Eno,OP,Cno,wno,VP,Ano,yno,Lno,ts,Ene,xno,$no,XP,kno,Sno,zP,Rno,Pno,Bno,Yg,Cne,Ino,Nno,WP,qno,jno,Dno,as,wne,Gno,Ono,QP,Vno,Xno,HP,zno,Wno,Qno,ns,Ane,Hno,Uno,UP,Jno,Yno,JP,Kno,Zno,eso,Kg,yne,oso,rso,YP,tso,aso,nso,ss,Lne,sso,lso,KP,iso,dso,ZP,cso,mso,fso,ls,xne,gso,hso,eB,uso,pso,oB,_so,bso,vso,is,$ne,Fso,Tso,rB,Mso,Eso,tB,Cso,wso,Aso,ds,kne,yso,Lso,aB,xso,$so,nB,kso,Sso,Rso,cs,Sne,Pso,Bso,sB,Iso,Nso,lB,qso,jso,Dso,ms,Rne,Gso,Oso,iB,Vso,Xso,dB,zso,Wso,Qso,fs,Pne,Hso,Uso,cB,Jso,Yso,mB,Kso,Zso,elo,Zg,Bne,olo,rlo,fB,tlo,alo,nlo,gs,Ine,slo,llo,gB,ilo,dlo,hB,clo,mlo,flo,eh,Nne,glo,hlo,uB,ulo,plo,_lo,oh,qne,blo,vlo,pB,Flo,Tlo,Mlo,hs,jne,Elo,Clo,_B,wlo,Alo,bB,ylo,Llo,xlo,us,Dne,$lo,klo,vB,Slo,Rlo,FB,Plo,Blo,Ilo,ps,Gne,Nlo,qlo,TB,jlo,Dlo,MB,Glo,Olo,Vlo,rh,One,Xlo,zlo,EB,Wlo,Qlo,Hlo,_s,Vne,Ulo,Jlo,CB,Ylo,Klo,wB,Zlo,eio,oio,bs,Xne,rio,tio,AB,aio,nio,yB,sio,lio,iio,vs,zne,dio,cio,LB,mio,fio,xB,gio,hio,uio,Fs,Wne,pio,_io,$B,bio,vio,kB,Fio,Tio,Mio,Ts,Qne,Eio,Cio,SB,wio,Aio,RB,yio,Lio,xio,th,Hne,$io,kio,PB,Sio,Rio,Pio,Ms,Une,Bio,Iio,BB,Nio,qio,IB,jio,Dio,Gio,ah,Jne,Oio,Vio,NB,Xio,zio,Wio,nh,Yne,Qio,Hio,qB,Uio,Jio,Yio,sh,Kne,Kio,Zio,jB,edo,odo,rdo,lh,Zne,tdo,ado,DB,ndo,sdo,ldo,Es,ese,ido,ddo,GB,cdo,mdo,OB,fdo,gdo,hdo,ih,ose,udo,pdo,VB,_do,bdo,vdo,Cs,rse,Fdo,Tdo,XB,Mdo,Edo,zB,Cdo,wdo,Ado,ws,tse,ydo,Ldo,WB,xdo,$do,QB,kdo,Sdo,Rdo,As,ase,Pdo,Bdo,HB,Ido,Ndo,UB,qdo,jdo,Ddo,ys,nse,Gdo,Odo,JB,Vdo,Xdo,YB,zdo,Wdo,Qdo,Ls,sse,Hdo,Udo,KB,Jdo,Ydo,ZB,Kdo,Zdo,eco,xs,lse,oco,rco,eI,tco,aco,oI,nco,sco,lco,dh,ise,ico,dco,rI,cco,mco,fco,ch,dse,gco,hco,tI,uco,pco,_co,$s,cse,bco,vco,aI,Fco,Tco,nI,Mco,Eco,Cco,ks,mse,wco,Aco,sI,yco,Lco,lI,xco,$co,kco,Ss,fse,Sco,Rco,iI,Pco,Bco,dI,Ico,Nco,qco,mh,gse,jco,Dco,cI,Gco,Oco,Vco,fh,hse,Xco,zco,mI,Wco,Qco,Hco,gh,use,Uco,Jco,fI,Yco,Kco,Zco,Rs,pse,emo,omo,gI,rmo,tmo,hI,amo,nmo,smo,Ps,_se,lmo,imo,uI,dmo,cmo,pI,mmo,fmo,gmo,hh,bse,hmo,umo,_I,pmo,_mo,bmo,uh,vse,vmo,Fmo,bI,Tmo,Mmo,Emo,ph,Fse,Cmo,wmo,vI,Amo,ymo,Lmo,Bs,Tse,xmo,$mo,FI,kmo,Smo,TI,Rmo,Pmo,Bmo,_h,Mse,Imo,Nmo,MI,qmo,jmo,Dmo,bh,Ese,Gmo,Omo,EI,Vmo,Xmo,zmo,Is,Cse,Wmo,Qmo,CI,Hmo,Umo,wI,Jmo,Ymo,Kmo,Ns,wse,Zmo,efo,AI,ofo,rfo,yI,tfo,afo,nfo,qs,Ase,sfo,lfo,LI,ifo,dfo,xI,cfo,mfo,ffo,js,yse,gfo,hfo,$I,ufo,pfo,kI,_fo,bfo,vfo,vh,Ffo,Fh,EL,Tfo,Lse,Mfo,CDe,$i,Th,xse,CL,Efo,$se,Cfo,wDe,yo,wL,wfo,AL,Afo,SI,yfo,Lfo,xfo,yL,$fo,kse,kfo,Sfo,Rfo,He,LL,Pfo,Sse,Bfo,Ifo,ka,Nfo,Rse,qfo,jfo,Pse,Dfo,Gfo,Bse,Ofo,Vfo,Xfo,Y,Mh,Ise,zfo,Wfo,RI,Qfo,Hfo,Ufo,Eh,Nse,Jfo,Yfo,PI,Kfo,Zfo,ego,Ch,qse,ogo,rgo,BI,tgo,ago,ngo,wh,jse,sgo,lgo,II,igo,dgo,cgo,Ah,Dse,mgo,fgo,NI,ggo,hgo,ugo,yh,Gse,pgo,_go,qI,bgo,vgo,Fgo,Lh,Ose,Tgo,Mgo,jI,Ego,Cgo,wgo,xh,Vse,Ago,ygo,DI,Lgo,xgo,$go,$h,Xse,kgo,Sgo,GI,Rgo,Pgo,Bgo,kh,zse,Igo,Ngo,OI,qgo,jgo,Dgo,Sh,Wse,Ggo,Ogo,VI,Vgo,Xgo,zgo,Rh,Qse,Wgo,Qgo,XI,Hgo,Ugo,Jgo,Ph,Hse,Ygo,Kgo,zI,Zgo,eho,oho,Bh,Use,rho,tho,WI,aho,nho,sho,Ih,Jse,lho,iho,QI,dho,cho,mho,Nh,Yse,fho,gho,HI,hho,uho,pho,qh,Kse,_ho,bho,UI,vho,Fho,Tho,jh,Zse,Mho,Eho,JI,Cho,who,Aho,Dh,ele,yho,Lho,YI,xho,$ho,kho,Gh,ole,Sho,Rho,KI,Pho,Bho,Iho,Oh,rle,Nho,qho,ZI,jho,Dho,Gho,Vh,tle,Oho,Vho,eN,Xho,zho,Who,Xh,ale,Qho,Hho,oN,Uho,Jho,Yho,zh,nle,Kho,Zho,rN,euo,ouo,ruo,Wh,sle,tuo,auo,tN,nuo,suo,luo,Qh,lle,iuo,duo,aN,cuo,muo,fuo,Hh,ile,guo,huo,nN,uuo,puo,_uo,Uh,dle,buo,vuo,sN,Fuo,Tuo,Muo,Jh,cle,Euo,Cuo,lN,wuo,Auo,yuo,Yh,mle,Luo,xuo,iN,$uo,kuo,Suo,Kh,fle,Ruo,Puo,dN,Buo,Iuo,Nuo,Zh,gle,quo,juo,cN,Duo,Guo,Ouo,eu,Vuo,ou,Xuo,ru,xL,zuo,hle,Wuo,ADe,ki,tu,ule,$L,Quo,ple,Huo,yDe,Lo,kL,Uuo,SL,Juo,mN,Yuo,Kuo,Zuo,RL,epo,_le,opo,rpo,tpo,Ue,PL,apo,ble,npo,spo,Si,lpo,vle,ipo,dpo,Fle,cpo,mpo,fpo,he,au,Tle,gpo,hpo,fN,upo,ppo,_po,nu,Mle,bpo,vpo,Ele,Fpo,Tpo,Mpo,su,Cle,Epo,Cpo,gN,wpo,Apo,ypo,lu,wle,Lpo,xpo,hN,$po,kpo,Spo,iu,Ale,Rpo,Ppo,uN,Bpo,Ipo,Npo,du,yle,qpo,jpo,pN,Dpo,Gpo,Opo,cu,Lle,Vpo,Xpo,_N,zpo,Wpo,Qpo,mu,xle,Hpo,Upo,bN,Jpo,Ypo,Kpo,fu,$le,Zpo,e_o,vN,o_o,r_o,t_o,gu,kle,a_o,n_o,FN,s_o,l_o,i_o,hu,Sle,d_o,c_o,TN,m_o,f_o,g_o,uu,Rle,h_o,u_o,MN,p_o,__o,b_o,pu,Ple,v_o,F_o,EN,T_o,M_o,E_o,_u,Ble,C_o,w_o,CN,A_o,y_o,L_o,bu,Ile,x_o,$_o,wN,k_o,S_o,R_o,vu,Nle,P_o,B_o,AN,I_o,N_o,q_o,Fu,qle,j_o,D_o,yN,G_o,O_o,V_o,Tu,X_o,Mu,z_o,Eu,BL,W_o,jle,Q_o,LDe,Ri,Cu,Dle,IL,H_o,Gle,U_o,xDe,xo,NL,J_o,Pi,Y_o,LN,K_o,Z_o,xN,ebo,obo,rbo,qL,tbo,Ole,abo,nbo,sbo,nt,jL,lbo,Vle,ibo,dbo,Bi,cbo,Xle,mbo,fbo,$N,gbo,hbo,ubo,wu,pbo,Je,DL,_bo,zle,bbo,vbo,Sa,Fbo,Wle,Tbo,Mbo,Qle,Ebo,Cbo,Hle,wbo,Abo,ybo,x,Au,Ule,Lbo,xbo,kN,$bo,kbo,Sbo,yu,Jle,Rbo,Pbo,SN,Bbo,Ibo,Nbo,Lu,Yle,qbo,jbo,RN,Dbo,Gbo,Obo,xu,Kle,Vbo,Xbo,PN,zbo,Wbo,Qbo,$u,Zle,Hbo,Ubo,BN,Jbo,Ybo,Kbo,ku,eie,Zbo,e2o,IN,o2o,r2o,t2o,Su,oie,a2o,n2o,NN,s2o,l2o,i2o,Ru,rie,d2o,c2o,qN,m2o,f2o,g2o,Pu,tie,h2o,u2o,jN,p2o,_2o,b2o,Bu,aie,v2o,F2o,DN,T2o,M2o,E2o,Iu,nie,C2o,w2o,GN,A2o,y2o,L2o,Nu,sie,x2o,$2o,ON,k2o,S2o,R2o,qu,lie,P2o,B2o,VN,I2o,N2o,q2o,ju,iie,j2o,D2o,XN,G2o,O2o,V2o,Du,die,X2o,z2o,zN,W2o,Q2o,H2o,Gu,cie,U2o,J2o,WN,Y2o,K2o,Z2o,Ou,mie,evo,ovo,QN,rvo,tvo,avo,Vu,fie,nvo,svo,HN,lvo,ivo,dvo,Xu,gie,cvo,mvo,UN,fvo,gvo,hvo,zu,hie,uvo,pvo,JN,_vo,bvo,vvo,Wu,uie,Fvo,Tvo,YN,Mvo,Evo,Cvo,Qu,pie,wvo,Avo,KN,yvo,Lvo,xvo,Hu,_ie,$vo,kvo,ZN,Svo,Rvo,Pvo,Uu,bie,Bvo,Ivo,eq,Nvo,qvo,jvo,Ju,vie,Dvo,Gvo,oq,Ovo,Vvo,Xvo,Yu,Fie,zvo,Wvo,rq,Qvo,Hvo,Uvo,Ku,Tie,Jvo,Yvo,tq,Kvo,Zvo,eFo,Zu,Mie,oFo,rFo,aq,tFo,aFo,nFo,ep,Eie,sFo,lFo,nq,iFo,dFo,cFo,op,Cie,mFo,fFo,sq,gFo,hFo,uFo,rp,wie,pFo,_Fo,lq,bFo,vFo,FFo,tp,Aie,TFo,MFo,iq,EFo,CFo,wFo,ap,yie,AFo,yFo,dq,LFo,xFo,$Fo,Ds,Lie,kFo,SFo,cq,RFo,PFo,mq,BFo,IFo,NFo,np,xie,qFo,jFo,fq,DFo,GFo,OFo,sp,$ie,VFo,XFo,gq,zFo,WFo,QFo,lp,kie,HFo,UFo,hq,JFo,YFo,KFo,ip,Sie,ZFo,e1o,uq,o1o,r1o,t1o,dp,Rie,a1o,n1o,pq,s1o,l1o,i1o,cp,Pie,d1o,c1o,_q,m1o,f1o,g1o,mp,Bie,h1o,u1o,bq,p1o,_1o,b1o,fp,Iie,v1o,F1o,vq,T1o,M1o,E1o,gp,Nie,C1o,w1o,Fq,A1o,y1o,L1o,hp,qie,x1o,$1o,Tq,k1o,S1o,R1o,up,jie,P1o,B1o,Mq,I1o,N1o,q1o,pp,Die,j1o,D1o,Eq,G1o,O1o,V1o,_p,Gie,X1o,z1o,Cq,W1o,Q1o,H1o,bp,Oie,U1o,J1o,wq,Y1o,K1o,Z1o,vp,Vie,eTo,oTo,Aq,rTo,tTo,aTo,Fp,Xie,nTo,sTo,yq,lTo,iTo,dTo,Tp,zie,cTo,mTo,Lq,fTo,gTo,hTo,Mp,Wie,uTo,pTo,xq,_To,bTo,vTo,Ep,Qie,FTo,TTo,$q,MTo,ETo,CTo,Cp,Hie,wTo,ATo,kq,yTo,LTo,xTo,wp,Uie,$To,kTo,Sq,STo,RTo,PTo,Ap,Jie,BTo,ITo,Rq,NTo,qTo,jTo,yp,Yie,DTo,GTo,Pq,OTo,VTo,XTo,Lp,Kie,zTo,WTo,Bq,QTo,HTo,UTo,xp,Zie,JTo,YTo,Iq,KTo,ZTo,eMo,$p,ede,oMo,rMo,Nq,tMo,aMo,nMo,kp,ode,sMo,lMo,qq,iMo,dMo,cMo,Sp,rde,mMo,fMo,jq,gMo,hMo,uMo,Rp,tde,pMo,_Mo,Dq,bMo,vMo,FMo,Pp,ade,TMo,MMo,Gq,EMo,CMo,wMo,Bp,nde,AMo,yMo,Oq,LMo,xMo,$Mo,Ip,sde,kMo,SMo,Vq,RMo,PMo,BMo,Np,lde,IMo,NMo,Xq,qMo,jMo,DMo,qp,ide,GMo,OMo,zq,VMo,XMo,zMo,jp,dde,WMo,QMo,Wq,HMo,UMo,JMo,Dp,cde,YMo,KMo,Qq,ZMo,e4o,o4o,Gp,mde,r4o,t4o,Hq,a4o,n4o,s4o,Op,fde,l4o,i4o,Uq,d4o,c4o,m4o,Vp,gde,f4o,g4o,Jq,h4o,u4o,p4o,Xp,hde,_4o,b4o,Yq,v4o,F4o,T4o,zp,ude,M4o,E4o,Kq,C4o,w4o,A4o,Wp,pde,y4o,L4o,Zq,x4o,$4o,k4o,Qp,_de,S4o,R4o,ej,P4o,B4o,I4o,Hp,bde,N4o,q4o,oj,j4o,D4o,G4o,Up,vde,O4o,V4o,rj,X4o,z4o,W4o,Jp,Fde,Q4o,H4o,tj,U4o,J4o,Y4o,Yp,Tde,K4o,Z4o,aj,eEo,oEo,rEo,Kp,Mde,tEo,aEo,nj,nEo,sEo,lEo,Zp,Ede,iEo,dEo,sj,cEo,mEo,fEo,e_,Cde,gEo,hEo,lj,uEo,pEo,_Eo,o_,wde,bEo,vEo,ij,FEo,TEo,MEo,r_,Ade,EEo,CEo,dj,wEo,AEo,yEo,t_,yde,LEo,xEo,cj,$Eo,kEo,SEo,a_,Lde,REo,PEo,mj,BEo,IEo,NEo,n_,xde,qEo,jEo,fj,DEo,GEo,OEo,s_,$de,VEo,XEo,gj,zEo,WEo,QEo,l_,kde,HEo,UEo,hj,JEo,YEo,KEo,i_,Sde,ZEo,eCo,uj,oCo,rCo,tCo,d_,Rde,aCo,nCo,pj,sCo,lCo,iCo,c_,Pde,dCo,cCo,_j,mCo,fCo,gCo,m_,Bde,hCo,uCo,bj,pCo,_Co,bCo,f_,Ide,vCo,FCo,vj,TCo,MCo,ECo,g_,Nde,CCo,wCo,Fj,ACo,yCo,LCo,h_,qde,xCo,$Co,Tj,kCo,SCo,RCo,u_,jde,PCo,BCo,Mj,ICo,NCo,qCo,p_,Dde,jCo,DCo,Ej,GCo,OCo,VCo,__,Gde,XCo,zCo,Cj,WCo,QCo,HCo,b_,Ode,UCo,JCo,wj,YCo,KCo,ZCo,v_,Vde,e5o,o5o,Aj,r5o,t5o,a5o,F_,Xde,n5o,s5o,yj,l5o,i5o,d5o,T_,zde,c5o,m5o,Lj,f5o,g5o,h5o,M_,u5o,Wde,p5o,_5o,Qde,b5o,v5o,E_,$De,Ii,C_,Hde,GL,F5o,Ude,T5o,kDe,$o,OL,M5o,Ni,E5o,xj,C5o,w5o,$j,A5o,y5o,L5o,VL,x5o,Jde,$5o,k5o,S5o,st,XL,R5o,Yde,P5o,B5o,qi,I5o,Kde,N5o,q5o,kj,j5o,D5o,G5o,w_,O5o,Ye,zL,V5o,Zde,X5o,z5o,Ra,W5o,ece,Q5o,H5o,oce,U5o,J5o,rce,Y5o,K5o,Z5o,G,A_,tce,e3o,o3o,Sj,r3o,t3o,a3o,y_,ace,n3o,s3o,Rj,l3o,i3o,d3o,L_,nce,c3o,m3o,Pj,f3o,g3o,h3o,x_,sce,u3o,p3o,Bj,_3o,b3o,v3o,$_,lce,F3o,T3o,Ij,M3o,E3o,C3o,k_,ice,w3o,A3o,Nj,y3o,L3o,x3o,S_,dce,$3o,k3o,qj,S3o,R3o,P3o,R_,cce,B3o,I3o,jj,N3o,q3o,j3o,P_,mce,D3o,G3o,Dj,O3o,V3o,X3o,B_,fce,z3o,W3o,Gj,Q3o,H3o,U3o,I_,gce,J3o,Y3o,Oj,K3o,Z3o,ewo,N_,hce,owo,rwo,Vj,two,awo,nwo,q_,uce,swo,lwo,Xj,iwo,dwo,cwo,j_,pce,mwo,fwo,zj,gwo,hwo,uwo,D_,_ce,pwo,_wo,Wj,bwo,vwo,Fwo,G_,bce,Two,Mwo,Qj,Ewo,Cwo,wwo,O_,vce,Awo,ywo,Hj,Lwo,xwo,$wo,V_,Fce,kwo,Swo,Uj,Rwo,Pwo,Bwo,X_,Tce,Iwo,Nwo,Jj,qwo,jwo,Dwo,z_,Mce,Gwo,Owo,Yj,Vwo,Xwo,zwo,W_,Ece,Wwo,Qwo,Kj,Hwo,Uwo,Jwo,Q_,Cce,Ywo,Kwo,Zj,Zwo,e0o,o0o,H_,wce,r0o,t0o,eD,a0o,n0o,s0o,U_,Ace,l0o,i0o,oD,d0o,c0o,m0o,J_,yce,f0o,g0o,rD,h0o,u0o,p0o,Y_,Lce,_0o,b0o,tD,v0o,F0o,T0o,K_,xce,M0o,E0o,aD,C0o,w0o,A0o,Z_,$ce,y0o,L0o,nD,x0o,$0o,k0o,eb,kce,S0o,R0o,sD,P0o,B0o,I0o,ob,Sce,N0o,q0o,lD,j0o,D0o,G0o,rb,Rce,O0o,V0o,iD,X0o,z0o,W0o,tb,Pce,Q0o,H0o,dD,U0o,J0o,Y0o,ab,Bce,K0o,Z0o,cD,eAo,oAo,rAo,nb,Ice,tAo,aAo,mD,nAo,sAo,lAo,sb,Nce,iAo,dAo,fD,cAo,mAo,fAo,lb,qce,gAo,hAo,gD,uAo,pAo,_Ao,ib,jce,bAo,vAo,hD,FAo,TAo,MAo,db,Dce,EAo,CAo,uD,wAo,AAo,yAo,cb,Gce,LAo,xAo,pD,$Ao,kAo,SAo,mb,Oce,RAo,PAo,_D,BAo,IAo,NAo,fb,Vce,qAo,jAo,bD,DAo,GAo,OAo,gb,Xce,VAo,XAo,vD,zAo,WAo,QAo,hb,zce,HAo,UAo,FD,JAo,YAo,KAo,ub,ZAo,Wce,e6o,o6o,Qce,r6o,t6o,pb,SDe,ji,_b,Hce,WL,a6o,Uce,n6o,RDe,ko,QL,s6o,Di,l6o,TD,i6o,d6o,MD,c6o,m6o,f6o,HL,g6o,Jce,h6o,u6o,p6o,lt,UL,_6o,Yce,b6o,v6o,Gi,F6o,Kce,T6o,M6o,ED,E6o,C6o,w6o,bb,A6o,Ke,JL,y6o,Zce,L6o,x6o,Pa,$6o,eme,k6o,S6o,ome,R6o,P6o,rme,B6o,I6o,N6o,z,vb,tme,q6o,j6o,CD,D6o,G6o,O6o,Fb,ame,V6o,X6o,wD,z6o,W6o,Q6o,Tb,nme,H6o,U6o,AD,J6o,Y6o,K6o,Mb,sme,Z6o,eyo,yD,oyo,ryo,tyo,Eb,lme,ayo,nyo,LD,syo,lyo,iyo,Cb,ime,dyo,cyo,xD,myo,fyo,gyo,wb,dme,hyo,uyo,$D,pyo,_yo,byo,Ab,cme,vyo,Fyo,kD,Tyo,Myo,Eyo,yb,mme,Cyo,wyo,SD,Ayo,yyo,Lyo,Lb,fme,xyo,$yo,RD,kyo,Syo,Ryo,xb,gme,Pyo,Byo,PD,Iyo,Nyo,qyo,$b,hme,jyo,Dyo,BD,Gyo,Oyo,Vyo,kb,ume,Xyo,zyo,ID,Wyo,Qyo,Hyo,Sb,pme,Uyo,Jyo,ND,Yyo,Kyo,Zyo,Rb,_me,eLo,oLo,qD,rLo,tLo,aLo,Pb,bme,nLo,sLo,jD,lLo,iLo,dLo,Bb,vme,cLo,mLo,DD,fLo,gLo,hLo,Ib,Fme,uLo,pLo,GD,_Lo,bLo,vLo,Nb,Tme,FLo,TLo,OD,MLo,ELo,CLo,qb,Mme,wLo,ALo,VD,yLo,LLo,xLo,jb,Eme,$Lo,kLo,XD,SLo,RLo,PLo,Db,Cme,BLo,ILo,zD,NLo,qLo,jLo,Gb,wme,DLo,GLo,WD,OLo,VLo,XLo,Ob,Ame,zLo,WLo,QD,QLo,HLo,ULo,Vb,yme,JLo,YLo,HD,KLo,ZLo,e7o,Xb,Lme,o7o,r7o,UD,t7o,a7o,n7o,zb,xme,s7o,l7o,JD,i7o,d7o,c7o,Wb,$me,m7o,f7o,YD,g7o,h7o,u7o,Qb,kme,p7o,_7o,KD,b7o,v7o,F7o,Hb,Sme,T7o,M7o,ZD,E7o,C7o,w7o,Ub,Rme,A7o,y7o,eG,L7o,x7o,$7o,Jb,Pme,k7o,S7o,oG,R7o,P7o,B7o,Yb,Bme,I7o,N7o,rG,q7o,j7o,D7o,Kb,Ime,G7o,O7o,tG,V7o,X7o,z7o,Zb,Nme,W7o,Q7o,aG,H7o,U7o,J7o,e2,qme,Y7o,K7o,nG,Z7o,e8o,o8o,o2,jme,r8o,t8o,sG,a8o,n8o,s8o,r2,Dme,l8o,i8o,lG,d8o,c8o,m8o,t2,f8o,Gme,g8o,h8o,Ome,u8o,p8o,a2,PDe,Oi,n2,Vme,YL,_8o,Xme,b8o,BDe,So,KL,v8o,Vi,F8o,iG,T8o,M8o,dG,E8o,C8o,w8o,ZL,A8o,zme,y8o,L8o,x8o,it,e7,$8o,Wme,k8o,S8o,Xi,R8o,Qme,P8o,B8o,cG,I8o,N8o,q8o,s2,j8o,Ze,o7,D8o,Hme,G8o,O8o,Ba,V8o,Ume,X8o,z8o,Jme,W8o,Q8o,Yme,H8o,U8o,J8o,Q,l2,Kme,Y8o,K8o,mG,Z8o,e9o,o9o,i2,Zme,r9o,t9o,fG,a9o,n9o,s9o,d2,efe,l9o,i9o,gG,d9o,c9o,m9o,c2,ofe,f9o,g9o,hG,h9o,u9o,p9o,m2,rfe,_9o,b9o,uG,v9o,F9o,T9o,f2,tfe,M9o,E9o,pG,C9o,w9o,A9o,g2,afe,y9o,L9o,_G,x9o,$9o,k9o,h2,nfe,S9o,R9o,bG,P9o,B9o,I9o,u2,sfe,N9o,q9o,vG,j9o,D9o,G9o,p2,lfe,O9o,V9o,FG,X9o,z9o,W9o,_2,ife,Q9o,H9o,TG,U9o,J9o,Y9o,b2,dfe,K9o,Z9o,MG,exo,oxo,rxo,v2,cfe,txo,axo,EG,nxo,sxo,lxo,F2,mfe,ixo,dxo,CG,cxo,mxo,fxo,T2,ffe,gxo,hxo,wG,uxo,pxo,_xo,M2,gfe,bxo,vxo,AG,Fxo,Txo,Mxo,E2,hfe,Exo,Cxo,yG,wxo,Axo,yxo,C2,ufe,Lxo,xxo,LG,$xo,kxo,Sxo,w2,pfe,Rxo,Pxo,xG,Bxo,Ixo,Nxo,A2,_fe,qxo,jxo,$G,Dxo,Gxo,Oxo,y2,bfe,Vxo,Xxo,kG,zxo,Wxo,Qxo,L2,vfe,Hxo,Uxo,SG,Jxo,Yxo,Kxo,x2,Ffe,Zxo,e$o,RG,o$o,r$o,t$o,$2,Tfe,a$o,n$o,PG,s$o,l$o,i$o,k2,Mfe,d$o,c$o,BG,m$o,f$o,g$o,S2,Efe,h$o,u$o,IG,p$o,_$o,b$o,R2,Cfe,v$o,F$o,NG,T$o,M$o,E$o,P2,wfe,C$o,w$o,qG,A$o,y$o,L$o,B2,Afe,x$o,$$o,jG,k$o,S$o,R$o,I2,yfe,P$o,B$o,DG,I$o,N$o,q$o,N2,Lfe,j$o,D$o,GG,G$o,O$o,V$o,q2,xfe,X$o,z$o,$fe,W$o,Q$o,H$o,j2,kfe,U$o,J$o,OG,Y$o,K$o,Z$o,D2,Sfe,eko,oko,VG,rko,tko,ako,G2,Rfe,nko,sko,XG,lko,iko,dko,O2,Pfe,cko,mko,zG,fko,gko,hko,V2,uko,Bfe,pko,_ko,Ife,bko,vko,X2,IDe,zi,z2,Nfe,r7,Fko,qfe,Tko,NDe,Ro,t7,Mko,Wi,Eko,WG,Cko,wko,QG,Ako,yko,Lko,a7,xko,jfe,$ko,kko,Sko,dt,n7,Rko,Dfe,Pko,Bko,Qi,Iko,Gfe,Nko,qko,HG,jko,Dko,Gko,W2,Oko,eo,s7,Vko,Ofe,Xko,zko,Ia,Wko,Vfe,Qko,Hko,Xfe,Uko,Jko,zfe,Yko,Kko,Zko,pe,Q2,Wfe,eSo,oSo,UG,rSo,tSo,aSo,H2,Qfe,nSo,sSo,JG,lSo,iSo,dSo,U2,Hfe,cSo,mSo,YG,fSo,gSo,hSo,J2,Ufe,uSo,pSo,KG,_So,bSo,vSo,Y2,Jfe,FSo,TSo,ZG,MSo,ESo,CSo,K2,Yfe,wSo,ASo,eO,ySo,LSo,xSo,Z2,Kfe,$So,kSo,oO,SSo,RSo,PSo,ev,Zfe,BSo,ISo,rO,NSo,qSo,jSo,ov,ege,DSo,GSo,tO,OSo,VSo,XSo,rv,oge,zSo,WSo,aO,QSo,HSo,USo,tv,rge,JSo,YSo,nO,KSo,ZSo,eRo,av,tge,oRo,rRo,sO,tRo,aRo,nRo,nv,age,sRo,lRo,lO,iRo,dRo,cRo,sv,nge,mRo,fRo,iO,gRo,hRo,uRo,lv,sge,pRo,_Ro,dO,bRo,vRo,FRo,iv,lge,TRo,MRo,cO,ERo,CRo,wRo,dv,ARo,ige,yRo,LRo,dge,xRo,$Ro,cv,qDe,Hi,mv,cge,l7,kRo,mge,SRo,jDe,Po,i7,RRo,Ui,PRo,mO,BRo,IRo,fO,NRo,qRo,jRo,d7,DRo,fge,GRo,ORo,VRo,ct,c7,XRo,gge,zRo,WRo,Ji,QRo,hge,HRo,URo,gO,JRo,YRo,KRo,fv,ZRo,oo,m7,ePo,uge,oPo,rPo,Na,tPo,pge,aPo,nPo,_ge,sPo,lPo,bge,iPo,dPo,cPo,N,gv,vge,mPo,fPo,hO,gPo,hPo,uPo,hv,Fge,pPo,_Po,uO,bPo,vPo,FPo,uv,Tge,TPo,MPo,pO,EPo,CPo,wPo,pv,Mge,APo,yPo,_O,LPo,xPo,$Po,_v,Ege,kPo,SPo,bO,RPo,PPo,BPo,bv,Cge,IPo,NPo,vO,qPo,jPo,DPo,vv,wge,GPo,OPo,FO,VPo,XPo,zPo,Fv,Age,WPo,QPo,TO,HPo,UPo,JPo,Tv,yge,YPo,KPo,MO,ZPo,eBo,oBo,Mv,Lge,rBo,tBo,EO,aBo,nBo,sBo,Ev,xge,lBo,iBo,CO,dBo,cBo,mBo,Cv,$ge,fBo,gBo,wO,hBo,uBo,pBo,wv,kge,_Bo,bBo,AO,vBo,FBo,TBo,Av,Sge,MBo,EBo,yO,CBo,wBo,ABo,yv,Rge,yBo,LBo,LO,xBo,$Bo,kBo,Lv,Pge,SBo,RBo,xO,PBo,BBo,IBo,xv,Bge,NBo,qBo,$O,jBo,DBo,GBo,$v,Ige,OBo,VBo,kO,XBo,zBo,WBo,kv,Nge,QBo,HBo,SO,UBo,JBo,YBo,Sv,qge,KBo,ZBo,RO,eIo,oIo,rIo,Rv,jge,tIo,aIo,PO,nIo,sIo,lIo,Pv,Dge,iIo,dIo,BO,cIo,mIo,fIo,Bv,Gge,gIo,hIo,IO,uIo,pIo,_Io,Iv,Oge,bIo,vIo,NO,FIo,TIo,MIo,Nv,Vge,EIo,CIo,qO,wIo,AIo,yIo,qv,Xge,LIo,xIo,jO,$Io,kIo,SIo,jv,zge,RIo,PIo,DO,BIo,IIo,NIo,Dv,Wge,qIo,jIo,GO,DIo,GIo,OIo,Gv,Qge,VIo,XIo,OO,zIo,WIo,QIo,Ov,Hge,HIo,UIo,VO,JIo,YIo,KIo,Vv,Uge,ZIo,eNo,XO,oNo,rNo,tNo,Xv,Jge,aNo,nNo,zO,sNo,lNo,iNo,zv,Yge,dNo,cNo,WO,mNo,fNo,gNo,Wv,Kge,hNo,uNo,QO,pNo,_No,bNo,Qv,Zge,vNo,FNo,HO,TNo,MNo,ENo,Hv,ehe,CNo,wNo,UO,ANo,yNo,LNo,Uv,ohe,xNo,$No,JO,kNo,SNo,RNo,Jv,rhe,PNo,BNo,YO,INo,NNo,qNo,Yv,the,jNo,DNo,KO,GNo,ONo,VNo,Kv,ahe,XNo,zNo,ZO,WNo,QNo,HNo,Zv,nhe,UNo,JNo,eV,YNo,KNo,ZNo,eF,she,eqo,oqo,oV,rqo,tqo,aqo,oF,lhe,nqo,sqo,rV,lqo,iqo,dqo,rF,ihe,cqo,mqo,tV,fqo,gqo,hqo,tF,dhe,uqo,pqo,aV,_qo,bqo,vqo,aF,che,Fqo,Tqo,nV,Mqo,Eqo,Cqo,nF,mhe,wqo,Aqo,sV,yqo,Lqo,xqo,sF,$qo,fhe,kqo,Sqo,ghe,Rqo,Pqo,lF,DDe,Yi,iF,hhe,f7,Bqo,uhe,Iqo,GDe,Bo,g7,Nqo,Ki,qqo,lV,jqo,Dqo,iV,Gqo,Oqo,Vqo,h7,Xqo,phe,zqo,Wqo,Qqo,mt,u7,Hqo,_he,Uqo,Jqo,Zi,Yqo,bhe,Kqo,Zqo,dV,ejo,ojo,rjo,dF,tjo,ro,p7,ajo,vhe,njo,sjo,qa,ljo,Fhe,ijo,djo,The,cjo,mjo,Mhe,fjo,gjo,hjo,Z,cF,Ehe,ujo,pjo,cV,_jo,bjo,vjo,mF,Che,Fjo,Tjo,mV,Mjo,Ejo,Cjo,fF,whe,wjo,Ajo,fV,yjo,Ljo,xjo,gF,Ahe,$jo,kjo,gV,Sjo,Rjo,Pjo,hF,yhe,Bjo,Ijo,hV,Njo,qjo,jjo,uF,Lhe,Djo,Gjo,uV,Ojo,Vjo,Xjo,pF,xhe,zjo,Wjo,pV,Qjo,Hjo,Ujo,_F,$he,Jjo,Yjo,_V,Kjo,Zjo,eDo,bF,khe,oDo,rDo,bV,tDo,aDo,nDo,vF,She,sDo,lDo,vV,iDo,dDo,cDo,FF,Rhe,mDo,fDo,FV,gDo,hDo,uDo,TF,Phe,pDo,_Do,TV,bDo,vDo,FDo,MF,Bhe,TDo,MDo,MV,EDo,CDo,wDo,EF,Ihe,ADo,yDo,EV,LDo,xDo,$Do,CF,Nhe,kDo,SDo,CV,RDo,PDo,BDo,wF,qhe,IDo,NDo,wV,qDo,jDo,DDo,AF,jhe,GDo,ODo,AV,VDo,XDo,zDo,yF,Dhe,WDo,QDo,yV,HDo,UDo,JDo,LF,Ghe,YDo,KDo,LV,ZDo,eGo,oGo,xF,Ohe,rGo,tGo,xV,aGo,nGo,sGo,$F,Vhe,lGo,iGo,$V,dGo,cGo,mGo,kF,Xhe,fGo,gGo,kV,hGo,uGo,pGo,SF,zhe,_Go,bGo,SV,vGo,FGo,TGo,RF,Whe,MGo,EGo,RV,CGo,wGo,AGo,PF,Qhe,yGo,LGo,PV,xGo,$Go,kGo,BF,Hhe,SGo,RGo,BV,PGo,BGo,IGo,IF,Uhe,NGo,qGo,IV,jGo,DGo,GGo,NF,Jhe,OGo,VGo,NV,XGo,zGo,WGo,qF,Yhe,QGo,HGo,qV,UGo,JGo,YGo,jF,KGo,Khe,ZGo,eOo,Zhe,oOo,rOo,DF,ODe,ed,GF,eue,_7,tOo,oue,aOo,VDe,Io,b7,nOo,od,sOo,jV,lOo,iOo,DV,dOo,cOo,mOo,v7,fOo,rue,gOo,hOo,uOo,ft,F7,pOo,tue,_Oo,bOo,rd,vOo,aue,FOo,TOo,GV,MOo,EOo,COo,OF,wOo,to,T7,AOo,nue,yOo,LOo,ja,xOo,sue,$Oo,kOo,lue,SOo,ROo,iue,POo,BOo,IOo,Zr,VF,due,NOo,qOo,OV,jOo,DOo,GOo,XF,cue,OOo,VOo,VV,XOo,zOo,WOo,zF,mue,QOo,HOo,XV,UOo,JOo,YOo,WF,fue,KOo,ZOo,zV,eVo,oVo,rVo,QF,gue,tVo,aVo,WV,nVo,sVo,lVo,HF,iVo,hue,dVo,cVo,uue,mVo,fVo,UF,XDe,td,JF,pue,M7,gVo,_ue,hVo,zDe,No,E7,uVo,ad,pVo,QV,_Vo,bVo,HV,vVo,FVo,TVo,C7,MVo,bue,EVo,CVo,wVo,gt,w7,AVo,vue,yVo,LVo,nd,xVo,Fue,$Vo,kVo,UV,SVo,RVo,PVo,YF,BVo,ao,A7,IVo,Tue,NVo,qVo,Da,jVo,Mue,DVo,GVo,Eue,OVo,VVo,Cue,XVo,zVo,WVo,U,KF,wue,QVo,HVo,JV,UVo,JVo,YVo,ZF,Aue,KVo,ZVo,YV,eXo,oXo,rXo,e1,yue,tXo,aXo,KV,nXo,sXo,lXo,o1,Lue,iXo,dXo,ZV,cXo,mXo,fXo,r1,xue,gXo,hXo,eX,uXo,pXo,_Xo,t1,$ue,bXo,vXo,oX,FXo,TXo,MXo,a1,kue,EXo,CXo,rX,wXo,AXo,yXo,n1,Sue,LXo,xXo,tX,$Xo,kXo,SXo,s1,Rue,RXo,PXo,aX,BXo,IXo,NXo,l1,Pue,qXo,jXo,nX,DXo,GXo,OXo,i1,Bue,VXo,XXo,sX,zXo,WXo,QXo,d1,Iue,HXo,UXo,lX,JXo,YXo,KXo,c1,Nue,ZXo,ezo,iX,ozo,rzo,tzo,m1,que,azo,nzo,dX,szo,lzo,izo,f1,jue,dzo,czo,cX,mzo,fzo,gzo,g1,Due,hzo,uzo,mX,pzo,_zo,bzo,h1,Gue,vzo,Fzo,fX,Tzo,Mzo,Ezo,u1,Oue,Czo,wzo,gX,Azo,yzo,Lzo,p1,Vue,xzo,$zo,hX,kzo,Szo,Rzo,_1,Xue,Pzo,Bzo,uX,Izo,Nzo,qzo,b1,zue,jzo,Dzo,pX,Gzo,Ozo,Vzo,v1,Wue,Xzo,zzo,_X,Wzo,Qzo,Hzo,F1,Que,Uzo,Jzo,bX,Yzo,Kzo,Zzo,T1,Hue,eWo,oWo,vX,rWo,tWo,aWo,M1,Uue,nWo,sWo,FX,lWo,iWo,dWo,E1,Jue,cWo,mWo,TX,fWo,gWo,hWo,C1,Yue,uWo,pWo,MX,_Wo,bWo,vWo,w1,Kue,FWo,TWo,EX,MWo,EWo,CWo,A1,Zue,wWo,AWo,CX,yWo,LWo,xWo,y1,epe,$Wo,kWo,wX,SWo,RWo,PWo,L1,ope,BWo,IWo,AX,NWo,qWo,jWo,x1,rpe,DWo,GWo,yX,OWo,VWo,XWo,$1,tpe,zWo,WWo,LX,QWo,HWo,UWo,k1,ape,JWo,YWo,xX,KWo,ZWo,eQo,S1,oQo,npe,rQo,tQo,spe,aQo,nQo,R1,WDe,sd,P1,lpe,y7,sQo,ipe,lQo,QDe,qo,L7,iQo,ld,dQo,$X,cQo,mQo,kX,fQo,gQo,hQo,x7,uQo,dpe,pQo,_Qo,bQo,ht,$7,vQo,cpe,FQo,TQo,id,MQo,mpe,EQo,CQo,SX,wQo,AQo,yQo,B1,LQo,no,k7,xQo,fpe,$Qo,kQo,Ga,SQo,gpe,RQo,PQo,hpe,BQo,IQo,upe,NQo,qQo,jQo,V,I1,ppe,DQo,GQo,RX,OQo,VQo,XQo,N1,_pe,zQo,WQo,PX,QQo,HQo,UQo,q1,bpe,JQo,YQo,BX,KQo,ZQo,eHo,j1,vpe,oHo,rHo,IX,tHo,aHo,nHo,D1,Fpe,sHo,lHo,NX,iHo,dHo,cHo,G1,Tpe,mHo,fHo,qX,gHo,hHo,uHo,O1,Mpe,pHo,_Ho,jX,bHo,vHo,FHo,V1,Epe,THo,MHo,DX,EHo,CHo,wHo,X1,Cpe,AHo,yHo,GX,LHo,xHo,$Ho,z1,wpe,kHo,SHo,OX,RHo,PHo,BHo,W1,Ape,IHo,NHo,VX,qHo,jHo,DHo,Q1,ype,GHo,OHo,XX,VHo,XHo,zHo,H1,Lpe,WHo,QHo,zX,HHo,UHo,JHo,U1,xpe,YHo,KHo,WX,ZHo,eUo,oUo,J1,$pe,rUo,tUo,QX,aUo,nUo,sUo,Y1,kpe,lUo,iUo,HX,dUo,cUo,mUo,K1,Spe,fUo,gUo,UX,hUo,uUo,pUo,Z1,Rpe,_Uo,bUo,JX,vUo,FUo,TUo,eT,Ppe,MUo,EUo,YX,CUo,wUo,AUo,oT,Bpe,yUo,LUo,KX,xUo,$Uo,kUo,rT,Ipe,SUo,RUo,ZX,PUo,BUo,IUo,tT,Npe,NUo,qUo,ez,jUo,DUo,GUo,aT,qpe,OUo,VUo,oz,XUo,zUo,WUo,nT,jpe,QUo,HUo,rz,UUo,JUo,YUo,sT,Dpe,KUo,ZUo,tz,eJo,oJo,rJo,lT,Gpe,tJo,aJo,az,nJo,sJo,lJo,iT,Ope,iJo,dJo,nz,cJo,mJo,fJo,dT,Vpe,gJo,hJo,sz,uJo,pJo,_Jo,cT,Xpe,bJo,vJo,lz,FJo,TJo,MJo,mT,zpe,EJo,CJo,iz,wJo,AJo,yJo,fT,Wpe,LJo,xJo,dz,$Jo,kJo,SJo,gT,Qpe,RJo,PJo,cz,BJo,IJo,NJo,hT,Hpe,qJo,jJo,mz,DJo,GJo,OJo,uT,Upe,VJo,XJo,fz,zJo,WJo,QJo,pT,Jpe,HJo,UJo,gz,JJo,YJo,KJo,_T,Ype,ZJo,eYo,hz,oYo,rYo,tYo,bT,Kpe,aYo,nYo,uz,sYo,lYo,iYo,vT,Zpe,dYo,cYo,pz,mYo,fYo,gYo,FT,e_e,hYo,uYo,_z,pYo,_Yo,bYo,TT,o_e,vYo,FYo,bz,TYo,MYo,EYo,MT,CYo,r_e,wYo,AYo,t_e,yYo,LYo,ET,HDe,dd,CT,a_e,S7,xYo,n_e,$Yo,UDe,jo,R7,kYo,cd,SYo,vz,RYo,PYo,Fz,BYo,IYo,NYo,P7,qYo,s_e,jYo,DYo,GYo,ut,B7,OYo,l_e,VYo,XYo,md,zYo,i_e,WYo,QYo,Tz,HYo,UYo,JYo,wT,YYo,so,I7,KYo,d_e,ZYo,eKo,Oa,oKo,c_e,rKo,tKo,m_e,aKo,nKo,f_e,sKo,lKo,iKo,g_e,AT,h_e,dKo,cKo,Mz,mKo,fKo,gKo,yT,hKo,u_e,uKo,pKo,p_e,_Ko,bKo,LT,JDe,fd,xT,__e,N7,vKo,b_e,FKo,YDe,Do,q7,TKo,gd,MKo,Ez,EKo,CKo,Cz,wKo,AKo,yKo,j7,LKo,v_e,xKo,$Ko,kKo,pt,D7,SKo,F_e,RKo,PKo,hd,BKo,T_e,IKo,NKo,wz,qKo,jKo,DKo,$T,GKo,lo,G7,OKo,M_e,VKo,XKo,Va,zKo,E_e,WKo,QKo,C_e,HKo,UKo,w_e,JKo,YKo,KKo,ve,kT,A_e,ZKo,eZo,Az,oZo,rZo,tZo,ST,y_e,aZo,nZo,yz,sZo,lZo,iZo,RT,L_e,dZo,cZo,Lz,mZo,fZo,gZo,PT,x_e,hZo,uZo,xz,pZo,_Zo,bZo,Gs,$_e,vZo,FZo,$z,TZo,MZo,kz,EZo,CZo,wZo,BT,k_e,AZo,yZo,Sz,LZo,xZo,$Zo,Os,S_e,kZo,SZo,Rz,RZo,PZo,Pz,BZo,IZo,NZo,_t,R_e,qZo,jZo,Bz,DZo,GZo,Iz,OZo,VZo,Nz,XZo,zZo,WZo,IT,P_e,QZo,HZo,qz,UZo,JZo,YZo,NT,B_e,KZo,ZZo,jz,eer,oer,rer,qT,I_e,ter,aer,Dz,ner,ser,ler,jT,N_e,ier,der,Gz,cer,mer,fer,DT,q_e,ger,her,Oz,uer,per,_er,GT,j_e,ber,ver,Vz,Fer,Ter,Mer,OT,D_e,Eer,Cer,Xz,wer,Aer,yer,VT,Ler,G_e,xer,$er,O_e,ker,Ser,XT,KDe,ud,zT,V_e,O7,Rer,X_e,Per,ZDe,Go,V7,Ber,pd,Ier,zz,Ner,qer,Wz,jer,Der,Ger,X7,Oer,z_e,Ver,Xer,zer,bt,z7,Wer,W_e,Qer,Her,_d,Uer,Q_e,Jer,Yer,Qz,Ker,Zer,eor,WT,oor,io,W7,ror,H_e,tor,aor,Xa,nor,U_e,sor,lor,J_e,ior,dor,Y_e,cor,mor,gor,K_e,QT,Z_e,hor,uor,Hz,por,_or,bor,HT,vor,ebe,For,Tor,obe,Mor,Eor,UT,eGe,bd,JT,rbe,Q7,Cor,tbe,wor,oGe,Oo,H7,Aor,vd,yor,Uz,Lor,xor,Jz,$or,kor,Sor,U7,Ror,abe,Por,Bor,Ior,vt,J7,Nor,nbe,qor,jor,Fd,Dor,sbe,Gor,Oor,Yz,Vor,Xor,zor,YT,Wor,co,Y7,Qor,lbe,Hor,Uor,za,Jor,ibe,Yor,Kor,dbe,Zor,err,cbe,orr,rrr,trr,mbe,KT,fbe,arr,nrr,Kz,srr,lrr,irr,ZT,drr,gbe,crr,mrr,hbe,frr,grr,eM,rGe,Td,oM,ube,K7,hrr,pbe,urr,tGe,Vo,Z7,prr,Md,_rr,Zz,brr,vrr,eW,Frr,Trr,Mrr,e8,Err,_be,Crr,wrr,Arr,Ft,o8,yrr,bbe,Lrr,xrr,Ed,$rr,vbe,krr,Srr,oW,Rrr,Prr,Brr,rM,Irr,mo,r8,Nrr,Fbe,qrr,jrr,Wa,Drr,Tbe,Grr,Orr,Mbe,Vrr,Xrr,Ebe,zrr,Wrr,Qrr,Re,tM,Cbe,Hrr,Urr,rW,Jrr,Yrr,Krr,aM,wbe,Zrr,etr,tW,otr,rtr,ttr,nM,Abe,atr,ntr,aW,str,ltr,itr,sM,ybe,dtr,ctr,nW,mtr,ftr,gtr,lM,Lbe,htr,utr,sW,ptr,_tr,btr,iM,xbe,vtr,Ftr,lW,Ttr,Mtr,Etr,dM,$be,Ctr,wtr,iW,Atr,ytr,Ltr,cM,kbe,xtr,$tr,dW,ktr,Str,Rtr,mM,Sbe,Ptr,Btr,cW,Itr,Ntr,qtr,fM,jtr,Rbe,Dtr,Gtr,Pbe,Otr,Vtr,gM,aGe,Cd,hM,Bbe,t8,Xtr,Ibe,ztr,nGe,Xo,a8,Wtr,wd,Qtr,mW,Htr,Utr,fW,Jtr,Ytr,Ktr,n8,Ztr,Nbe,ear,oar,rar,Tt,s8,tar,qbe,aar,nar,Ad,sar,jbe,lar,iar,gW,dar,car,mar,uM,far,fo,l8,gar,Dbe,har,uar,Qa,par,Gbe,_ar,bar,Obe,Far,Tar,Vbe,Mar,Ear,Car,et,pM,Xbe,war,Aar,hW,yar,Lar,xar,_M,zbe,$ar,kar,uW,Sar,Rar,Par,bM,Wbe,Bar,Iar,pW,Nar,qar,jar,vM,Qbe,Dar,Gar,_W,Oar,Var,Xar,FM,Hbe,zar,War,bW,Qar,Har,Uar,TM,Jar,Ube,Yar,Kar,Jbe,Zar,enr,MM,sGe,yd,EM,Ybe,i8,onr,Kbe,rnr,lGe,zo,d8,tnr,Ld,anr,vW,nnr,snr,FW,lnr,inr,dnr,c8,cnr,Zbe,mnr,fnr,gnr,Mt,m8,hnr,e2e,unr,pnr,xd,_nr,o2e,bnr,vnr,TW,Fnr,Tnr,Mnr,CM,Enr,go,f8,Cnr,r2e,wnr,Anr,Ha,ynr,t2e,Lnr,xnr,a2e,$nr,knr,n2e,Snr,Rnr,Pnr,ye,wM,s2e,Bnr,Inr,MW,Nnr,qnr,jnr,AM,l2e,Dnr,Gnr,EW,Onr,Vnr,Xnr,yM,i2e,znr,Wnr,CW,Qnr,Hnr,Unr,LM,d2e,Jnr,Ynr,wW,Knr,Znr,esr,xM,c2e,osr,rsr,AW,tsr,asr,nsr,$M,m2e,ssr,lsr,yW,isr,dsr,csr,kM,f2e,msr,fsr,LW,gsr,hsr,usr,SM,g2e,psr,_sr,xW,bsr,vsr,Fsr,RM,h2e,Tsr,Msr,$W,Esr,Csr,wsr,PM,u2e,Asr,ysr,kW,Lsr,xsr,$sr,BM,ksr,p2e,Ssr,Rsr,_2e,Psr,Bsr,IM,iGe,$d,NM,b2e,g8,Isr,v2e,Nsr,dGe,Wo,h8,qsr,kd,jsr,SW,Dsr,Gsr,RW,Osr,Vsr,Xsr,u8,zsr,F2e,Wsr,Qsr,Hsr,Et,p8,Usr,T2e,Jsr,Ysr,Sd,Ksr,M2e,Zsr,elr,PW,olr,rlr,tlr,qM,alr,ho,_8,nlr,E2e,slr,llr,Ua,ilr,C2e,dlr,clr,w2e,mlr,flr,A2e,glr,hlr,ulr,b8,jM,y2e,plr,_lr,BW,blr,vlr,Flr,DM,L2e,Tlr,Mlr,IW,Elr,Clr,wlr,GM,Alr,x2e,ylr,Llr,$2e,xlr,$lr,OM,cGe,Rd,VM,k2e,v8,klr,S2e,Slr,mGe,Qo,F8,Rlr,Pd,Plr,NW,Blr,Ilr,qW,Nlr,qlr,jlr,T8,Dlr,R2e,Glr,Olr,Vlr,Ct,M8,Xlr,P2e,zlr,Wlr,Bd,Qlr,B2e,Hlr,Ulr,jW,Jlr,Ylr,Klr,XM,Zlr,uo,E8,eir,I2e,oir,rir,Ja,tir,N2e,air,nir,q2e,sir,lir,j2e,iir,dir,cir,ot,zM,D2e,mir,fir,DW,gir,hir,uir,WM,G2e,pir,_ir,GW,bir,vir,Fir,QM,O2e,Tir,Mir,OW,Eir,Cir,wir,HM,V2e,Air,yir,VW,Lir,xir,$ir,UM,X2e,kir,Sir,XW,Rir,Pir,Bir,JM,Iir,z2e,Nir,qir,W2e,jir,Dir,YM,fGe,Id,KM,Q2e,C8,Gir,H2e,Oir,gGe,Ho,w8,Vir,Nd,Xir,zW,zir,Wir,WW,Qir,Hir,Uir,A8,Jir,U2e,Yir,Kir,Zir,wt,y8,edr,J2e,odr,rdr,qd,tdr,Y2e,adr,ndr,QW,sdr,ldr,idr,ZM,ddr,po,L8,cdr,K2e,mdr,fdr,Ya,gdr,Z2e,hdr,udr,eve,pdr,_dr,ove,bdr,vdr,Fdr,jd,e4,rve,Tdr,Mdr,HW,Edr,Cdr,wdr,o4,tve,Adr,ydr,UW,Ldr,xdr,$dr,r4,ave,kdr,Sdr,JW,Rdr,Pdr,Bdr,t4,Idr,nve,Ndr,qdr,sve,jdr,Ddr,a4,hGe,Dd,n4,lve,x8,Gdr,ive,Odr,uGe,Uo,$8,Vdr,Gd,Xdr,YW,zdr,Wdr,KW,Qdr,Hdr,Udr,k8,Jdr,dve,Ydr,Kdr,Zdr,At,S8,ecr,cve,ocr,rcr,Od,tcr,mve,acr,ncr,ZW,scr,lcr,icr,s4,dcr,_o,R8,ccr,fve,mcr,fcr,Ka,gcr,gve,hcr,ucr,hve,pcr,_cr,uve,bcr,vcr,Fcr,P8,l4,pve,Tcr,Mcr,eQ,Ecr,Ccr,wcr,i4,_ve,Acr,ycr,oQ,Lcr,xcr,$cr,d4,kcr,bve,Scr,Rcr,vve,Pcr,Bcr,c4,pGe,Vd,m4,Fve,B8,Icr,Tve,Ncr,_Ge,Jo,I8,qcr,Xd,jcr,rQ,Dcr,Gcr,tQ,Ocr,Vcr,Xcr,N8,zcr,Mve,Wcr,Qcr,Hcr,yt,q8,Ucr,Eve,Jcr,Ycr,zd,Kcr,Cve,Zcr,emr,aQ,omr,rmr,tmr,f4,amr,bo,j8,nmr,wve,smr,lmr,Za,imr,Ave,dmr,cmr,yve,mmr,fmr,Lve,gmr,hmr,umr,xve,g4,$ve,pmr,_mr,nQ,bmr,vmr,Fmr,h4,Tmr,kve,Mmr,Emr,Sve,Cmr,wmr,u4,bGe,Wd,p4,Rve,D8,Amr,Pve,ymr,vGe,Yo,G8,Lmr,Qd,xmr,sQ,$mr,kmr,lQ,Smr,Rmr,Pmr,O8,Bmr,Bve,Imr,Nmr,qmr,Lt,V8,jmr,Ive,Dmr,Gmr,Hd,Omr,Nve,Vmr,Xmr,iQ,zmr,Wmr,Qmr,_4,Hmr,vo,X8,Umr,qve,Jmr,Ymr,en,Kmr,jve,Zmr,efr,Dve,ofr,rfr,Gve,tfr,afr,nfr,on,b4,Ove,sfr,lfr,dQ,ifr,dfr,cfr,v4,Vve,mfr,ffr,cQ,gfr,hfr,ufr,F4,Xve,pfr,_fr,mQ,bfr,vfr,Ffr,T4,zve,Tfr,Mfr,fQ,Efr,Cfr,wfr,M4,Afr,Wve,yfr,Lfr,Qve,xfr,$fr,E4,FGe,Ud,C4,Hve,z8,kfr,Uve,Sfr,TGe,Ko,W8,Rfr,Jd,Pfr,gQ,Bfr,Ifr,hQ,Nfr,qfr,jfr,Q8,Dfr,Jve,Gfr,Ofr,Vfr,xt,H8,Xfr,Yve,zfr,Wfr,Yd,Qfr,Kve,Hfr,Ufr,uQ,Jfr,Yfr,Kfr,w4,Zfr,Fo,U8,egr,Zve,ogr,rgr,rn,tgr,eFe,agr,ngr,oFe,sgr,lgr,rFe,igr,dgr,cgr,tFe,A4,aFe,mgr,fgr,pQ,ggr,hgr,ugr,y4,pgr,nFe,_gr,bgr,sFe,vgr,Fgr,L4,MGe,Kd,x4,lFe,J8,Tgr,iFe,Mgr,EGe,Zo,Y8,Egr,Zd,Cgr,_Q,wgr,Agr,bQ,ygr,Lgr,xgr,K8,$gr,dFe,kgr,Sgr,Rgr,$t,Z8,Pgr,cFe,Bgr,Igr,ec,Ngr,mFe,qgr,jgr,vQ,Dgr,Ggr,Ogr,$4,Vgr,yr,e9,Xgr,fFe,zgr,Wgr,tn,Qgr,gFe,Hgr,Ugr,hFe,Jgr,Ygr,uFe,Kgr,Zgr,ehr,q,k4,pFe,ohr,rhr,FQ,thr,ahr,nhr,S4,_Fe,shr,lhr,TQ,ihr,dhr,chr,R4,bFe,mhr,fhr,MQ,ghr,hhr,uhr,P4,vFe,phr,_hr,EQ,bhr,vhr,Fhr,B4,FFe,Thr,Mhr,CQ,Ehr,Chr,whr,I4,TFe,Ahr,yhr,wQ,Lhr,xhr,$hr,N4,MFe,khr,Shr,AQ,Rhr,Phr,Bhr,q4,EFe,Ihr,Nhr,yQ,qhr,jhr,Dhr,j4,CFe,Ghr,Ohr,LQ,Vhr,Xhr,zhr,D4,wFe,Whr,Qhr,xQ,Hhr,Uhr,Jhr,G4,AFe,Yhr,Khr,$Q,Zhr,eur,our,O4,yFe,rur,tur,kQ,aur,nur,sur,V4,LFe,lur,iur,SQ,dur,cur,mur,X4,xFe,fur,gur,RQ,hur,uur,pur,z4,$Fe,_ur,bur,PQ,vur,Fur,Tur,W4,kFe,Mur,Eur,BQ,Cur,wur,Aur,Q4,SFe,yur,Lur,IQ,xur,$ur,kur,Vs,RFe,Sur,Rur,NQ,Pur,Bur,qQ,Iur,Nur,qur,H4,PFe,jur,Dur,jQ,Gur,Our,Vur,U4,BFe,Xur,zur,DQ,Wur,Qur,Hur,J4,IFe,Uur,Jur,GQ,Yur,Kur,Zur,Y4,NFe,epr,opr,OQ,rpr,tpr,apr,K4,qFe,npr,spr,VQ,lpr,ipr,dpr,Z4,jFe,cpr,mpr,XQ,fpr,gpr,hpr,eE,DFe,upr,ppr,zQ,_pr,bpr,vpr,oE,GFe,Fpr,Tpr,WQ,Mpr,Epr,Cpr,rE,OFe,wpr,Apr,QQ,ypr,Lpr,xpr,tE,VFe,$pr,kpr,HQ,Spr,Rpr,Ppr,aE,XFe,Bpr,Ipr,UQ,Npr,qpr,jpr,nE,zFe,Dpr,Gpr,JQ,Opr,Vpr,Xpr,sE,WFe,zpr,Wpr,YQ,Qpr,Hpr,Upr,lE,QFe,Jpr,Ypr,KQ,Kpr,Zpr,e_r,iE,HFe,o_r,r_r,ZQ,t_r,a_r,n_r,dE,UFe,s_r,l_r,eH,i_r,d_r,c_r,cE,JFe,m_r,f_r,oH,g_r,h_r,u_r,mE,YFe,p_r,__r,rH,b_r,v_r,F_r,fE,KFe,T_r,M_r,tH,E_r,C_r,w_r,gE,ZFe,A_r,y_r,aH,L_r,x_r,$_r,hE,e1e,k_r,S_r,nH,R_r,P_r,B_r,uE,o1e,I_r,N_r,sH,q_r,j_r,D_r,pE,r1e,G_r,O_r,lH,V_r,X_r,z_r,_E,t1e,W_r,Q_r,iH,H_r,U_r,J_r,bE,a1e,Y_r,K_r,dH,Z_r,ebr,obr,vE,n1e,rbr,tbr,cH,abr,nbr,sbr,FE,s1e,lbr,ibr,mH,dbr,cbr,mbr,TE,l1e,fbr,gbr,fH,hbr,ubr,pbr,ME,i1e,_br,bbr,gH,vbr,Fbr,Tbr,EE,CGe,oc,CE,d1e,o9,Mbr,c1e,Ebr,wGe,er,r9,Cbr,rc,wbr,hH,Abr,ybr,uH,Lbr,xbr,$br,t9,kbr,m1e,Sbr,Rbr,Pbr,kt,a9,Bbr,f1e,Ibr,Nbr,tc,qbr,g1e,jbr,Dbr,pH,Gbr,Obr,Vbr,wE,Xbr,Lr,n9,zbr,h1e,Wbr,Qbr,an,Hbr,u1e,Ubr,Jbr,p1e,Ybr,Kbr,_1e,Zbr,e2r,o2r,se,AE,b1e,r2r,t2r,_H,a2r,n2r,s2r,yE,v1e,l2r,i2r,bH,d2r,c2r,m2r,LE,F1e,f2r,g2r,vH,h2r,u2r,p2r,xE,T1e,_2r,b2r,FH,v2r,F2r,T2r,$E,M1e,M2r,E2r,TH,C2r,w2r,A2r,kE,E1e,y2r,L2r,MH,x2r,$2r,k2r,SE,C1e,S2r,R2r,EH,P2r,B2r,I2r,RE,w1e,N2r,q2r,CH,j2r,D2r,G2r,PE,A1e,O2r,V2r,wH,X2r,z2r,W2r,BE,y1e,Q2r,H2r,AH,U2r,J2r,Y2r,IE,L1e,K2r,Z2r,yH,evr,ovr,rvr,NE,x1e,tvr,avr,LH,nvr,svr,lvr,qE,$1e,ivr,dvr,xH,cvr,mvr,fvr,jE,k1e,gvr,hvr,$H,uvr,pvr,_vr,DE,S1e,bvr,vvr,kH,Fvr,Tvr,Mvr,GE,R1e,Evr,Cvr,SH,wvr,Avr,yvr,OE,P1e,Lvr,xvr,RH,$vr,kvr,Svr,VE,B1e,Rvr,Pvr,PH,Bvr,Ivr,Nvr,XE,I1e,qvr,jvr,BH,Dvr,Gvr,Ovr,zE,N1e,Vvr,Xvr,IH,zvr,Wvr,Qvr,WE,q1e,Hvr,Uvr,NH,Jvr,Yvr,Kvr,QE,j1e,Zvr,eFr,qH,oFr,rFr,tFr,HE,D1e,aFr,nFr,jH,sFr,lFr,iFr,UE,AGe,ac,JE,G1e,s9,dFr,O1e,cFr,yGe,or,l9,mFr,nc,fFr,DH,gFr,hFr,GH,uFr,pFr,_Fr,i9,bFr,V1e,vFr,FFr,TFr,St,d9,MFr,X1e,EFr,CFr,sc,wFr,z1e,AFr,yFr,OH,LFr,xFr,$Fr,YE,kFr,xr,c9,SFr,W1e,RFr,PFr,nn,BFr,Q1e,IFr,NFr,H1e,qFr,jFr,U1e,DFr,GFr,OFr,Me,KE,J1e,VFr,XFr,VH,zFr,WFr,QFr,ZE,Y1e,HFr,UFr,XH,JFr,YFr,KFr,eC,K1e,ZFr,e1r,zH,o1r,r1r,t1r,oC,Z1e,a1r,n1r,WH,s1r,l1r,i1r,rC,eTe,d1r,c1r,QH,m1r,f1r,g1r,tC,oTe,h1r,u1r,HH,p1r,_1r,b1r,aC,rTe,v1r,F1r,UH,T1r,M1r,E1r,nC,tTe,C1r,w1r,JH,A1r,y1r,L1r,sC,aTe,x1r,$1r,YH,k1r,S1r,R1r,lC,nTe,P1r,B1r,KH,I1r,N1r,q1r,iC,sTe,j1r,D1r,ZH,G1r,O1r,V1r,dC,lTe,X1r,z1r,eU,W1r,Q1r,H1r,cC,iTe,U1r,J1r,oU,Y1r,K1r,Z1r,mC,LGe,lc,fC,dTe,m9,eTr,cTe,oTr,xGe,rr,f9,rTr,ic,tTr,rU,aTr,nTr,tU,sTr,lTr,iTr,g9,dTr,mTe,cTr,mTr,fTr,Rt,h9,gTr,fTe,hTr,uTr,dc,pTr,gTe,_Tr,bTr,aU,vTr,FTr,TTr,gC,MTr,$r,u9,ETr,hTe,CTr,wTr,sn,ATr,uTe,yTr,LTr,pTe,xTr,$Tr,_Te,kTr,STr,RTr,ln,hC,bTe,PTr,BTr,nU,ITr,NTr,qTr,uC,vTe,jTr,DTr,sU,GTr,OTr,VTr,pC,FTe,XTr,zTr,lU,WTr,QTr,HTr,_C,TTe,UTr,JTr,iU,YTr,KTr,ZTr,bC,$Ge,cc,vC,MTe,p9,eMr,ETe,oMr,kGe,tr,_9,rMr,mc,tMr,dU,aMr,nMr,cU,sMr,lMr,iMr,b9,dMr,CTe,cMr,mMr,fMr,Pt,v9,gMr,wTe,hMr,uMr,fc,pMr,ATe,_Mr,bMr,mU,vMr,FMr,TMr,FC,MMr,kr,F9,EMr,yTe,CMr,wMr,dn,AMr,LTe,yMr,LMr,xTe,xMr,$Mr,$Te,kMr,SMr,RMr,ie,TC,kTe,PMr,BMr,fU,IMr,NMr,qMr,MC,STe,jMr,DMr,gU,GMr,OMr,VMr,EC,RTe,XMr,zMr,hU,WMr,QMr,HMr,CC,PTe,UMr,JMr,uU,YMr,KMr,ZMr,wC,BTe,e4r,o4r,pU,r4r,t4r,a4r,AC,ITe,n4r,s4r,_U,l4r,i4r,d4r,yC,NTe,c4r,m4r,bU,f4r,g4r,h4r,LC,qTe,u4r,p4r,vU,_4r,b4r,v4r,xC,jTe,F4r,T4r,FU,M4r,E4r,C4r,$C,DTe,w4r,A4r,TU,y4r,L4r,x4r,kC,GTe,$4r,k4r,MU,S4r,R4r,P4r,SC,OTe,B4r,I4r,EU,N4r,q4r,j4r,RC,VTe,D4r,G4r,CU,O4r,V4r,X4r,PC,XTe,z4r,W4r,wU,Q4r,H4r,U4r,BC,zTe,J4r,Y4r,AU,K4r,Z4r,eEr,IC,WTe,oEr,rEr,yU,tEr,aEr,nEr,NC,QTe,sEr,lEr,LU,iEr,dEr,cEr,qC,HTe,mEr,fEr,xU,gEr,hEr,uEr,jC,UTe,pEr,_Er,$U,bEr,vEr,FEr,DC,JTe,TEr,MEr,kU,EEr,CEr,wEr,GC,SGe,gc,OC,YTe,T9,AEr,KTe,yEr,RGe,ar,M9,LEr,hc,xEr,SU,$Er,kEr,RU,SEr,REr,PEr,E9,BEr,ZTe,IEr,NEr,qEr,Bt,C9,jEr,eMe,DEr,GEr,uc,OEr,oMe,VEr,XEr,PU,zEr,WEr,QEr,VC,HEr,Sr,w9,UEr,rMe,JEr,YEr,cn,KEr,tMe,ZEr,eCr,aMe,oCr,rCr,nMe,tCr,aCr,nCr,Le,XC,sMe,sCr,lCr,BU,iCr,dCr,cCr,zC,lMe,mCr,fCr,IU,gCr,hCr,uCr,WC,iMe,pCr,_Cr,NU,bCr,vCr,FCr,QC,dMe,TCr,MCr,qU,ECr,CCr,wCr,HC,cMe,ACr,yCr,jU,LCr,xCr,$Cr,UC,mMe,kCr,SCr,DU,RCr,PCr,BCr,JC,fMe,ICr,NCr,GU,qCr,jCr,DCr,YC,gMe,GCr,OCr,OU,VCr,XCr,zCr,KC,hMe,WCr,QCr,VU,HCr,UCr,JCr,ZC,uMe,YCr,KCr,XU,ZCr,e5r,o5r,e5,PGe,pc,o5,pMe,A9,r5r,_Me,t5r,BGe,nr,y9,a5r,_c,n5r,zU,s5r,l5r,WU,i5r,d5r,c5r,L9,m5r,bMe,f5r,g5r,h5r,It,x9,u5r,vMe,p5r,_5r,bc,b5r,FMe,v5r,F5r,QU,T5r,M5r,E5r,r5,C5r,Rr,$9,w5r,TMe,A5r,y5r,mn,L5r,MMe,x5r,$5r,EMe,k5r,S5r,CMe,R5r,P5r,B5r,re,t5,wMe,I5r,N5r,HU,q5r,j5r,D5r,a5,AMe,G5r,O5r,UU,V5r,X5r,z5r,n5,yMe,W5r,Q5r,JU,H5r,U5r,J5r,s5,LMe,Y5r,K5r,YU,Z5r,e3r,o3r,l5,xMe,r3r,t3r,KU,a3r,n3r,s3r,i5,$Me,l3r,i3r,ZU,d3r,c3r,m3r,d5,kMe,f3r,g3r,eJ,h3r,u3r,p3r,c5,SMe,_3r,b3r,oJ,v3r,F3r,T3r,m5,RMe,M3r,E3r,rJ,C3r,w3r,A3r,f5,PMe,y3r,L3r,tJ,x3r,$3r,k3r,g5,BMe,S3r,R3r,aJ,P3r,B3r,I3r,h5,IMe,N3r,q3r,nJ,j3r,D3r,G3r,u5,NMe,O3r,V3r,sJ,X3r,z3r,W3r,p5,qMe,Q3r,H3r,lJ,U3r,J3r,Y3r,_5,jMe,K3r,Z3r,iJ,ewr,owr,rwr,b5,DMe,twr,awr,dJ,nwr,swr,lwr,v5,GMe,iwr,dwr,cJ,cwr,mwr,fwr,F5,OMe,gwr,hwr,mJ,uwr,pwr,_wr,T5,VMe,bwr,vwr,fJ,Fwr,Twr,Mwr,M5,XMe,Ewr,Cwr,gJ,wwr,Awr,ywr,E5,zMe,Lwr,xwr,hJ,$wr,kwr,Swr,C5,WMe,Rwr,Pwr,uJ,Bwr,Iwr,Nwr,w5,QMe,qwr,jwr,pJ,Dwr,Gwr,Owr,A5,HMe,Vwr,Xwr,_J,zwr,Wwr,Qwr,y5,UMe,Hwr,Uwr,bJ,Jwr,Ywr,Kwr,L5,JMe,Zwr,e0r,vJ,o0r,r0r,t0r,x5,IGe,vc,$5,YMe,k9,a0r,KMe,n0r,NGe,sr,S9,s0r,Fc,l0r,FJ,i0r,d0r,TJ,c0r,m0r,f0r,R9,g0r,ZMe,h0r,u0r,p0r,Nt,P9,_0r,e4e,b0r,v0r,Tc,F0r,o4e,T0r,M0r,MJ,E0r,C0r,w0r,k5,A0r,Pr,B9,y0r,r4e,L0r,x0r,fn,$0r,t4e,k0r,S0r,a4e,R0r,P0r,n4e,B0r,I0r,N0r,ue,S5,s4e,q0r,j0r,EJ,D0r,G0r,O0r,R5,l4e,V0r,X0r,CJ,z0r,W0r,Q0r,P5,i4e,H0r,U0r,wJ,J0r,Y0r,K0r,B5,d4e,Z0r,eAr,AJ,oAr,rAr,tAr,I5,c4e,aAr,nAr,yJ,sAr,lAr,iAr,N5,m4e,dAr,cAr,LJ,mAr,fAr,gAr,q5,f4e,hAr,uAr,xJ,pAr,_Ar,bAr,j5,g4e,vAr,FAr,$J,TAr,MAr,EAr,D5,h4e,CAr,wAr,kJ,AAr,yAr,LAr,G5,u4e,xAr,$Ar,SJ,kAr,SAr,RAr,O5,p4e,PAr,BAr,RJ,IAr,NAr,qAr,V5,_4e,jAr,DAr,PJ,GAr,OAr,VAr,X5,b4e,XAr,zAr,BJ,WAr,QAr,HAr,z5,v4e,UAr,JAr,IJ,YAr,KAr,ZAr,W5,F4e,e6r,o6r,NJ,r6r,t6r,a6r,Q5,T4e,n6r,s6r,qJ,l6r,i6r,d6r,H5,M4e,c6r,m6r,jJ,f6r,g6r,h6r,U5,qGe,Mc,J5,E4e,I9,u6r,C4e,p6r,jGe,lr,N9,_6r,Ec,b6r,DJ,v6r,F6r,GJ,T6r,M6r,E6r,q9,C6r,w4e,w6r,A6r,y6r,qt,j9,L6r,A4e,x6r,$6r,Cc,k6r,y4e,S6r,R6r,OJ,P6r,B6r,I6r,Y5,N6r,Br,D9,q6r,L4e,j6r,D6r,gn,G6r,x4e,O6r,V6r,$4e,X6r,z6r,k4e,W6r,Q6r,H6r,G9,K5,S4e,U6r,J6r,VJ,Y6r,K6r,Z6r,Z5,R4e,eyr,oyr,XJ,ryr,tyr,ayr,e3,DGe,wc,o3,P4e,O9,nyr,B4e,syr,GGe,ir,V9,lyr,Ac,iyr,zJ,dyr,cyr,WJ,myr,fyr,gyr,X9,hyr,I4e,uyr,pyr,_yr,jt,z9,byr,N4e,vyr,Fyr,yc,Tyr,q4e,Myr,Eyr,QJ,Cyr,wyr,Ayr,r3,yyr,Ir,W9,Lyr,j4e,xyr,$yr,hn,kyr,D4e,Syr,Ryr,G4e,Pyr,Byr,O4e,Iyr,Nyr,qyr,V4e,t3,X4e,jyr,Dyr,HJ,Gyr,Oyr,Vyr,a3,OGe,Lc,n3,z4e,Q9,Xyr,W4e,zyr,VGe,dr,H9,Wyr,xc,Qyr,UJ,Hyr,Uyr,JJ,Jyr,Yyr,Kyr,U9,Zyr,Q4e,eLr,oLr,rLr,Dt,J9,tLr,H4e,aLr,nLr,$c,sLr,U4e,lLr,iLr,YJ,dLr,cLr,mLr,s3,fLr,Nr,Y9,gLr,J4e,hLr,uLr,un,pLr,Y4e,_Lr,bLr,K4e,vLr,FLr,Z4e,TLr,MLr,ELr,de,l3,eEe,CLr,wLr,KJ,ALr,yLr,LLr,i3,oEe,xLr,$Lr,ZJ,kLr,SLr,RLr,d3,rEe,PLr,BLr,eY,ILr,NLr,qLr,c3,tEe,jLr,DLr,oY,GLr,OLr,VLr,m3,aEe,XLr,zLr,rY,WLr,QLr,HLr,f3,nEe,ULr,JLr,tY,YLr,KLr,ZLr,g3,sEe,e7r,o7r,aY,r7r,t7r,a7r,h3,lEe,n7r,s7r,nY,l7r,i7r,d7r,u3,iEe,c7r,m7r,sY,f7r,g7r,h7r,p3,dEe,u7r,p7r,lY,_7r,b7r,v7r,_3,cEe,F7r,T7r,iY,M7r,E7r,C7r,b3,mEe,w7r,A7r,dY,y7r,L7r,x7r,v3,fEe,$7r,k7r,cY,S7r,R7r,P7r,F3,gEe,B7r,I7r,mY,N7r,q7r,j7r,T3,hEe,D7r,G7r,fY,O7r,V7r,X7r,M3,uEe,z7r,W7r,gY,Q7r,H7r,U7r,E3,pEe,J7r,Y7r,hY,K7r,Z7r,e8r,C3,_Ee,o8r,r8r,uY,t8r,a8r,n8r,w3,bEe,s8r,l8r,pY,i8r,d8r,c8r,A3,vEe,m8r,f8r,_Y,g8r,h8r,u8r,y3,XGe,kc,L3,FEe,K9,p8r,TEe,_8r,zGe,cr,Z9,b8r,Sc,v8r,bY,F8r,T8r,vY,M8r,E8r,C8r,ex,w8r,MEe,A8r,y8r,L8r,Gt,ox,x8r,EEe,$8r,k8r,Rc,S8r,CEe,R8r,P8r,FY,B8r,I8r,N8r,x3,q8r,qr,rx,j8r,wEe,D8r,G8r,pn,O8r,AEe,V8r,X8r,yEe,z8r,W8r,LEe,Q8r,H8r,U8r,ce,$3,xEe,J8r,Y8r,TY,K8r,Z8r,e9r,k3,$Ee,o9r,r9r,MY,t9r,a9r,n9r,S3,kEe,s9r,l9r,EY,i9r,d9r,c9r,R3,SEe,m9r,f9r,CY,g9r,h9r,u9r,P3,REe,p9r,_9r,wY,b9r,v9r,F9r,B3,PEe,T9r,M9r,AY,E9r,C9r,w9r,I3,BEe,A9r,y9r,yY,L9r,x9r,$9r,N3,IEe,k9r,S9r,LY,R9r,P9r,B9r,q3,NEe,I9r,N9r,xY,q9r,j9r,D9r,j3,qEe,G9r,O9r,$Y,V9r,X9r,z9r,D3,jEe,W9r,Q9r,kY,H9r,U9r,J9r,G3,DEe,Y9r,K9r,SY,Z9r,exr,oxr,O3,GEe,rxr,txr,RY,axr,nxr,sxr,V3,OEe,lxr,ixr,PY,dxr,cxr,mxr,X3,VEe,fxr,gxr,BY,hxr,uxr,pxr,z3,XEe,_xr,bxr,IY,vxr,Fxr,Txr,W3,zEe,Mxr,Exr,NY,Cxr,wxr,Axr,Q3,WEe,yxr,Lxr,qY,xxr,$xr,kxr,H3,QEe,Sxr,Rxr,jY,Pxr,Bxr,Ixr,U3,HEe,Nxr,qxr,DY,jxr,Dxr,Gxr,J3,WGe,Pc,Y3,UEe,tx,Oxr,JEe,Vxr,QGe,mr,ax,Xxr,Bc,zxr,GY,Wxr,Qxr,OY,Hxr,Uxr,Jxr,nx,Yxr,YEe,Kxr,Zxr,e$r,Ot,sx,o$r,KEe,r$r,t$r,Ic,a$r,ZEe,n$r,s$r,VY,l$r,i$r,d$r,K3,c$r,jr,lx,m$r,eCe,f$r,g$r,_n,h$r,oCe,u$r,p$r,rCe,_$r,b$r,tCe,v$r,F$r,T$r,aCe,Z3,nCe,M$r,E$r,XY,C$r,w$r,A$r,ew,HGe,Nc,ow,sCe,ix,y$r,lCe,L$r,UGe,fr,dx,x$r,qc,$$r,zY,k$r,S$r,WY,R$r,P$r,B$r,cx,I$r,iCe,N$r,q$r,j$r,Vt,mx,D$r,dCe,G$r,O$r,jc,V$r,cCe,X$r,z$r,QY,W$r,Q$r,H$r,rw,U$r,Dr,fx,J$r,mCe,Y$r,K$r,bn,Z$r,fCe,ekr,okr,gCe,rkr,tkr,hCe,akr,nkr,skr,uCe,tw,pCe,lkr,ikr,HY,dkr,ckr,mkr,aw,JGe,Dc,nw,_Ce,gx,fkr,bCe,gkr,YGe,gr,hx,hkr,Gc,ukr,UY,pkr,_kr,JY,bkr,vkr,Fkr,ux,Tkr,vCe,Mkr,Ekr,Ckr,Xt,px,wkr,FCe,Akr,ykr,Oc,Lkr,TCe,xkr,$kr,YY,kkr,Skr,Rkr,sw,Pkr,Gr,_x,Bkr,MCe,Ikr,Nkr,vn,qkr,ECe,jkr,Dkr,CCe,Gkr,Okr,wCe,Vkr,Xkr,zkr,te,lw,ACe,Wkr,Qkr,KY,Hkr,Ukr,Jkr,iw,yCe,Ykr,Kkr,ZY,Zkr,eSr,oSr,dw,LCe,rSr,tSr,eK,aSr,nSr,sSr,cw,xCe,lSr,iSr,oK,dSr,cSr,mSr,mw,$Ce,fSr,gSr,rK,hSr,uSr,pSr,fw,kCe,_Sr,bSr,tK,vSr,FSr,TSr,gw,SCe,MSr,ESr,aK,CSr,wSr,ASr,hw,RCe,ySr,LSr,nK,xSr,$Sr,kSr,uw,PCe,SSr,RSr,sK,PSr,BSr,ISr,pw,BCe,NSr,qSr,lK,jSr,DSr,GSr,_w,ICe,OSr,VSr,iK,XSr,zSr,WSr,bw,NCe,QSr,HSr,dK,USr,JSr,YSr,vw,qCe,KSr,ZSr,cK,eRr,oRr,rRr,Fw,jCe,tRr,aRr,mK,nRr,sRr,lRr,Tw,DCe,iRr,dRr,fK,cRr,mRr,fRr,Mw,GCe,gRr,hRr,gK,uRr,pRr,_Rr,Ew,OCe,bRr,vRr,hK,FRr,TRr,MRr,Cw,VCe,ERr,CRr,uK,wRr,ARr,yRr,ww,XCe,LRr,xRr,pK,$Rr,kRr,SRr,Aw,zCe,RRr,PRr,_K,BRr,IRr,NRr,yw,WCe,qRr,jRr,bK,DRr,GRr,ORr,Lw,QCe,VRr,XRr,vK,zRr,WRr,QRr,xw,HCe,HRr,URr,FK,JRr,YRr,KRr,$w,UCe,ZRr,ePr,TK,oPr,rPr,tPr,kw,JCe,aPr,nPr,MK,sPr,lPr,iPr,Sw,YCe,dPr,cPr,EK,mPr,fPr,gPr,Rw,KGe,Vc,Pw,KCe,bx,hPr,ZCe,uPr,ZGe,hr,vx,pPr,Xc,_Pr,CK,bPr,vPr,wK,FPr,TPr,MPr,Fx,EPr,e5e,CPr,wPr,APr,zt,Tx,yPr,o5e,LPr,xPr,zc,$Pr,r5e,kPr,SPr,AK,RPr,PPr,BPr,Bw,IPr,Or,Mx,NPr,t5e,qPr,jPr,Fn,DPr,a5e,GPr,OPr,n5e,VPr,XPr,s5e,zPr,WPr,QPr,xe,Iw,l5e,HPr,UPr,yK,JPr,YPr,KPr,Nw,i5e,ZPr,eBr,LK,oBr,rBr,tBr,qw,d5e,aBr,nBr,xK,sBr,lBr,iBr,jw,c5e,dBr,cBr,$K,mBr,fBr,gBr,Dw,m5e,hBr,uBr,kK,pBr,_Br,bBr,Gw,f5e,vBr,FBr,SK,TBr,MBr,EBr,Ow,g5e,CBr,wBr,RK,ABr,yBr,LBr,Vw,h5e,xBr,$Br,PK,kBr,SBr,RBr,Xw,u5e,PBr,BBr,BK,IBr,NBr,qBr,zw,p5e,jBr,DBr,IK,GBr,OBr,VBr,Ww,eOe,Wc,Qw,_5e,Ex,XBr,b5e,zBr,oOe,ur,Cx,WBr,Qc,QBr,NK,HBr,UBr,qK,JBr,YBr,KBr,wx,ZBr,v5e,eIr,oIr,rIr,Wt,Ax,tIr,F5e,aIr,nIr,Hc,sIr,T5e,lIr,iIr,jK,dIr,cIr,mIr,Hw,fIr,Vr,yx,gIr,M5e,hIr,uIr,Tn,pIr,E5e,_Ir,bIr,C5e,vIr,FIr,w5e,TIr,MIr,EIr,Ee,Uw,A5e,CIr,wIr,DK,AIr,yIr,LIr,Jw,y5e,xIr,$Ir,GK,kIr,SIr,RIr,Yw,L5e,PIr,BIr,OK,IIr,NIr,qIr,Kw,x5e,jIr,DIr,VK,GIr,OIr,VIr,Zw,$5e,XIr,zIr,XK,WIr,QIr,HIr,e0,k5e,UIr,JIr,zK,YIr,KIr,ZIr,o0,S5e,eNr,oNr,WK,rNr,tNr,aNr,r0,R5e,nNr,sNr,QK,lNr,iNr,dNr,t0,P5e,cNr,mNr,HK,fNr,gNr,hNr,a0,B5e,uNr,pNr,UK,_Nr,bNr,vNr,n0,I5e,FNr,TNr,JK,MNr,ENr,CNr,s0,N5e,wNr,ANr,YK,yNr,LNr,xNr,l0,rOe,Uc,i0,q5e,Lx,$Nr,j5e,kNr,tOe,pr,xx,SNr,Jc,RNr,KK,PNr,BNr,ZK,INr,NNr,qNr,$x,jNr,D5e,DNr,GNr,ONr,Qt,kx,VNr,G5e,XNr,zNr,Yc,WNr,O5e,QNr,HNr,eZ,UNr,JNr,YNr,d0,KNr,Xr,Sx,ZNr,V5e,eqr,oqr,Mn,rqr,X5e,tqr,aqr,z5e,nqr,sqr,W5e,lqr,iqr,dqr,$e,c0,Q5e,cqr,mqr,oZ,fqr,gqr,hqr,m0,H5e,uqr,pqr,rZ,_qr,bqr,vqr,f0,U5e,Fqr,Tqr,tZ,Mqr,Eqr,Cqr,g0,J5e,wqr,Aqr,aZ,yqr,Lqr,xqr,h0,Y5e,$qr,kqr,nZ,Sqr,Rqr,Pqr,u0,K5e,Bqr,Iqr,sZ,Nqr,qqr,jqr,p0,Z5e,Dqr,Gqr,lZ,Oqr,Vqr,Xqr,_0,e3e,zqr,Wqr,iZ,Qqr,Hqr,Uqr,b0,o3e,Jqr,Yqr,dZ,Kqr,Zqr,ejr,v0,r3e,ojr,rjr,cZ,tjr,ajr,njr,F0,aOe,Kc,T0,t3e,Rx,sjr,a3e,ljr,nOe,_r,Px,ijr,Zc,djr,mZ,cjr,mjr,fZ,fjr,gjr,hjr,Bx,ujr,n3e,pjr,_jr,bjr,Ht,Ix,vjr,s3e,Fjr,Tjr,em,Mjr,l3e,Ejr,Cjr,gZ,wjr,Ajr,yjr,M0,Ljr,zr,Nx,xjr,i3e,$jr,kjr,En,Sjr,d3e,Rjr,Pjr,c3e,Bjr,Ijr,m3e,Njr,qjr,jjr,Pe,E0,f3e,Djr,Gjr,hZ,Ojr,Vjr,Xjr,C0,g3e,zjr,Wjr,uZ,Qjr,Hjr,Ujr,w0,h3e,Jjr,Yjr,pZ,Kjr,Zjr,eDr,A0,u3e,oDr,rDr,_Z,tDr,aDr,nDr,y0,p3e,sDr,lDr,bZ,iDr,dDr,cDr,L0,_3e,mDr,fDr,vZ,gDr,hDr,uDr,x0,b3e,pDr,_Dr,FZ,bDr,vDr,FDr,$0,v3e,TDr,MDr,TZ,EDr,CDr,wDr,k0,F3e,ADr,yDr,MZ,LDr,xDr,$Dr,S0,sOe,om,R0,T3e,qx,kDr,M3e,SDr,lOe,br,jx,RDr,rm,PDr,EZ,BDr,IDr,CZ,NDr,qDr,jDr,Dx,DDr,E3e,GDr,ODr,VDr,Ut,Gx,XDr,C3e,zDr,WDr,tm,QDr,w3e,HDr,UDr,wZ,JDr,YDr,KDr,P0,ZDr,Wr,Ox,eGr,A3e,oGr,rGr,Cn,tGr,y3e,aGr,nGr,L3e,sGr,lGr,x3e,iGr,dGr,cGr,ke,B0,$3e,mGr,fGr,AZ,gGr,hGr,uGr,I0,k3e,pGr,_Gr,yZ,bGr,vGr,FGr,N0,S3e,TGr,MGr,LZ,EGr,CGr,wGr,q0,R3e,AGr,yGr,xZ,LGr,xGr,$Gr,j0,P3e,kGr,SGr,$Z,RGr,PGr,BGr,D0,B3e,IGr,NGr,kZ,qGr,jGr,DGr,G0,I3e,GGr,OGr,SZ,VGr,XGr,zGr,O0,N3e,WGr,QGr,RZ,HGr,UGr,JGr,V0,q3e,YGr,KGr,PZ,ZGr,eOr,oOr,X0,j3e,rOr,tOr,BZ,aOr,nOr,sOr,z0,iOe,am,W0,D3e,Vx,lOr,G3e,iOr,dOe,vr,Xx,dOr,nm,cOr,IZ,mOr,fOr,NZ,gOr,hOr,uOr,zx,pOr,O3e,_Or,bOr,vOr,Jt,Wx,FOr,V3e,TOr,MOr,sm,EOr,X3e,COr,wOr,qZ,AOr,yOr,LOr,Q0,xOr,Qr,Qx,$Or,z3e,kOr,SOr,wn,ROr,W3e,POr,BOr,Q3e,IOr,NOr,H3e,qOr,jOr,DOr,Se,H0,U3e,GOr,OOr,jZ,VOr,XOr,zOr,U0,J3e,WOr,QOr,DZ,HOr,UOr,JOr,J0,Y3e,YOr,KOr,GZ,ZOr,eVr,oVr,Y0,K3e,rVr,tVr,OZ,aVr,nVr,sVr,K0,Z3e,lVr,iVr,VZ,dVr,cVr,mVr,Z0,ewe,fVr,gVr,XZ,hVr,uVr,pVr,eA,owe,_Vr,bVr,zZ,vVr,FVr,TVr,oA,rwe,MVr,EVr,WZ,CVr,wVr,AVr,rA,twe,yVr,LVr,QZ,xVr,$Vr,kVr,tA,awe,SVr,RVr,HZ,PVr,BVr,IVr,aA,cOe,lm,nA,nwe,Hx,NVr,swe,qVr,mOe,Fr,Ux,jVr,im,DVr,UZ,GVr,OVr,JZ,VVr,XVr,zVr,Jx,WVr,lwe,QVr,HVr,UVr,Yt,Yx,JVr,iwe,YVr,KVr,dm,ZVr,dwe,eXr,oXr,YZ,rXr,tXr,aXr,sA,nXr,Hr,Kx,sXr,cwe,lXr,iXr,An,dXr,mwe,cXr,mXr,fwe,fXr,gXr,gwe,hXr,uXr,pXr,Oe,lA,hwe,_Xr,bXr,KZ,vXr,FXr,TXr,iA,uwe,MXr,EXr,ZZ,CXr,wXr,AXr,dA,pwe,yXr,LXr,eee,xXr,$Xr,kXr,cA,_we,SXr,RXr,oee,PXr,BXr,IXr,mA,bwe,NXr,qXr,ree,jXr,DXr,GXr,fA,vwe,OXr,VXr,tee,XXr,zXr,WXr,gA,Fwe,QXr,HXr,aee,UXr,JXr,YXr,hA,Twe,KXr,ZXr,nee,ezr,ozr,rzr,uA,fOe,cm,pA,Mwe,Zx,tzr,Ewe,azr,gOe,Tr,e$,nzr,mm,szr,see,lzr,izr,lee,dzr,czr,mzr,o$,fzr,Cwe,gzr,hzr,uzr,Kt,r$,pzr,wwe,_zr,bzr,fm,vzr,Awe,Fzr,Tzr,iee,Mzr,Ezr,Czr,_A,wzr,Ur,t$,Azr,ywe,yzr,Lzr,yn,xzr,Lwe,$zr,kzr,xwe,Szr,Rzr,$we,Pzr,Bzr,Izr,Ve,bA,kwe,Nzr,qzr,dee,jzr,Dzr,Gzr,vA,Swe,Ozr,Vzr,cee,Xzr,zzr,Wzr,FA,Rwe,Qzr,Hzr,mee,Uzr,Jzr,Yzr,TA,Pwe,Kzr,Zzr,fee,eWr,oWr,rWr,MA,Bwe,tWr,aWr,gee,nWr,sWr,lWr,EA,Iwe,iWr,dWr,hee,cWr,mWr,fWr,CA,Nwe,gWr,hWr,uee,uWr,pWr,_Wr,wA,qwe,bWr,vWr,pee,FWr,TWr,MWr,AA,hOe,gm,yA,jwe,a$,EWr,Dwe,CWr,uOe,Mr,n$,wWr,hm,AWr,_ee,yWr,LWr,bee,xWr,$Wr,kWr,s$,SWr,Gwe,RWr,PWr,BWr,Zt,l$,IWr,Owe,NWr,qWr,um,jWr,Vwe,DWr,GWr,vee,OWr,VWr,XWr,LA,zWr,Jr,i$,WWr,Xwe,QWr,HWr,Ln,UWr,zwe,JWr,YWr,Wwe,KWr,ZWr,Qwe,eQr,oQr,rQr,Hwe,xA,Uwe,tQr,aQr,Fee,nQr,sQr,lQr,$A,pOe,pm,kA,Jwe,d$,iQr,Ywe,dQr,_Oe,Er,c$,cQr,_m,mQr,Tee,fQr,gQr,Mee,hQr,uQr,pQr,m$,_Qr,Kwe,bQr,vQr,FQr,ea,f$,TQr,Zwe,MQr,EQr,bm,CQr,e0e,wQr,AQr,Eee,yQr,LQr,xQr,SA,$Qr,Yr,g$,kQr,o0e,SQr,RQr,xn,PQr,r0e,BQr,IQr,t0e,NQr,qQr,a0e,jQr,DQr,GQr,h$,RA,n0e,OQr,VQr,Cee,XQr,zQr,WQr,PA,s0e,QQr,HQr,wee,UQr,JQr,YQr,BA,bOe,vm,IA,l0e,u$,KQr,i0e,ZQr,vOe,Cr,p$,eHr,Fm,oHr,Aee,rHr,tHr,yee,aHr,nHr,sHr,_$,lHr,d0e,iHr,dHr,cHr,oa,b$,mHr,c0e,fHr,gHr,Tm,hHr,m0e,uHr,pHr,Lee,_Hr,bHr,vHr,NA,FHr,Kr,v$,THr,f0e,MHr,EHr,$n,CHr,g0e,wHr,AHr,h0e,yHr,LHr,u0e,xHr,$Hr,kHr,p0e,qA,_0e,SHr,RHr,xee,PHr,BHr,IHr,jA,FOe;return d=new oe({}),La=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),cL=new oe({}),mL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),$m=new NHr({props:{warning:!0,$$slots:{default:[EIt]},$$scope:{ctx:L}}}),fL=new oe({}),gL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L591"}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L614"}}),Ng=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[CIt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L737"}}),bL=new oe({}),vL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L392"}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L406"}}),vh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[wIt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L605"}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),eu=new NHr({props:{$$slots:{default:[AIt]},$$scope:{ctx:L}}}),ou=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[yIt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),$L=new oe({}),kL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),Tu=new NHr({props:{$$slots:{default:[LIt]},$$scope:{ctx:L}}}),Mu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[xIt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),IL=new oe({}),NL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L753"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[$It]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[kIt]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L760"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[SIt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pb=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RIt]},$$scope:{ctx:L}}}),WL=new oe({}),QL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L775"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[PIt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BIt]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L782"}}),e7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[IIt]},$$scope:{ctx:L}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NIt]},$$scope:{ctx:L}}}),r7=new oe({}),t7=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L789"}}),n7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qIt]},$$scope:{ctx:L}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jIt]},$$scope:{ctx:L}}}),l7=new oe({}),i7=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L798"}}),c7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[DIt]},$$scope:{ctx:L}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[GIt]},$$scope:{ctx:L}}}),f7=new oe({}),g7=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),u7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[OIt]},$$scope:{ctx:L}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VIt]},$$scope:{ctx:L}}}),_7=new oe({}),b7=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L850"}}),F7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XIt]},$$scope:{ctx:L}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zIt]},$$scope:{ctx:L}}}),M7=new oe({}),E7=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L836"}}),w7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[WIt]},$$scope:{ctx:L}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[QIt]},$$scope:{ctx:L}}}),y7=new oe({}),L7=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),$7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HIt]},$$scope:{ctx:L}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UIt]},$$scope:{ctx:L}}}),S7=new oe({}),R7=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L814"}}),B7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JIt]},$$scope:{ctx:L}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YIt]},$$scope:{ctx:L}}}),N7=new oe({}),q7=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L859"}}),D7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[KIt]},$$scope:{ctx:L}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZIt]},$$scope:{ctx:L}}}),O7=new oe({}),V7=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L898"}}),z7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eNt]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oNt]},$$scope:{ctx:L}}}),Q7=new oe({}),H7=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),J7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[rNt]},$$scope:{ctx:L}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[tNt]},$$scope:{ctx:L}}}),K7=new oe({}),Z7=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[aNt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nNt]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L928"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sNt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lNt]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L912"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[iNt]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dNt]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L919"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cNt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[mNt]},$$scope:{ctx:L}}}),v8=new oe({}),F8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L937"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[fNt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gNt]},$$scope:{ctx:L}}}),C8=new oe({}),w8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L944"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hNt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[uNt]},$$scope:{ctx:L}}}),x8=new oe({}),$8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[pNt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[_Nt]},$$scope:{ctx:L}}}),B8=new oe({}),I8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L866"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bNt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vNt]},$$scope:{ctx:L}}}),D8=new oe({}),G8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L873"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[FNt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[TNt]},$$scope:{ctx:L}}}),z8=new oe({}),W8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L882"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[MNt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ENt]},$$scope:{ctx:L}}}),J8=new oe({}),Y8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[CNt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wNt]},$$scope:{ctx:L}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),a9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ANt]},$$scope:{ctx:L}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yNt]},$$scope:{ctx:L}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),d9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[LNt]},$$scope:{ctx:L}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xNt]},$$scope:{ctx:L}}}),m9=new oe({}),f9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$Nt]},$$scope:{ctx:L}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kNt]},$$scope:{ctx:L}}}),p9=new oe({}),_9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),v9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[SNt]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RNt]},$$scope:{ctx:L}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PNt]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BNt]},$$scope:{ctx:L}}}),A9=new oe({}),y9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[INt]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NNt]},$$scope:{ctx:L}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qNt]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jNt]},$$scope:{ctx:L}}}),I9=new oe({}),N9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DNt]},$$scope:{ctx:L}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GNt]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ONt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[VNt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),J9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[XNt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zNt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[WNt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QNt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[HNt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UNt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JNt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YNt]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[KNt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ZNt]},$$scope:{ctx:L}}}),bx=new oe({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[eqt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oqt]},$$scope:{ctx:L}}}),Ex=new oe({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[rqt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tqt]},$$scope:{ctx:L}}}),Lx=new oe({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[aqt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nqt]},$$scope:{ctx:L}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sqt]},$$scope:{ctx:L}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lqt]},$$scope:{ctx:L}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iqt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dqt]},$$scope:{ctx:L}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cqt]},$$scope:{ctx:L}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mqt]},$$scope:{ctx:L}}}),Hx=new oe({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[fqt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gqt]},$$scope:{ctx:L}}}),Zx=new oe({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hqt]},$$scope:{ctx:L}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uqt]},$$scope:{ctx:L}}}),a$=new oe({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pqt]},$$scope:{ctx:L}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_qt]},$$scope:{ctx:L}}}),d$=new oe({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[bqt]},$$scope:{ctx:L}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vqt]},$$scope:{ctx:L}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Fqt]},$$scope:{ctx:L}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Tqt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),vi=o("Auto Classes"),wm=l(),at=a("p"),Fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=a("code"),sL=o("from_pretrained()"),Am=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),Mi=o("Instantiating one of "),Sn=a("a"),lL=o("AutoConfig"),Rn=o(", "),Pn=a("a"),iL=o("AutoModel"),Ei=o(`, and
`),Bn=a("a"),dL=o("AutoTokenizer"),Ci=o(" will directly create a class of the relevant architecture. For instance"),ym=l(),F(La.$$.fragment),Qe=l(),Ae=a("p"),Bk=o("will create a model that is an instance of "),wi=a("a"),Ik=o("BertModel"),Nk=o("."),Co=l(),xa=a("p"),qk=o("There is one class of "),Lm=a("code"),jk=o("AutoModel"),$Xe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uDe=l(),Ai=a("h2"),xm=a("a"),Cre=a("span"),F(cL.$$.fragment),kXe=l(),wre=a("span"),SXe=o("Extending the Auto Classes"),pDe=l(),In=a("p"),RXe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Are=a("code"),PXe=o("NewModel"),BXe=o(", make sure you have a "),yre=a("code"),IXe=o("NewModelConfig"),NXe=o(` then you can add those to the auto
classes like this:`),_De=l(),F(mL.$$.fragment),bDe=l(),Dk=a("p"),qXe=o("You will then be able to use the auto classes like you would usually do!"),vDe=l(),F($m.$$.fragment),FDe=l(),yi=a("h2"),km=a("a"),Lre=a("span"),F(fL.$$.fragment),jXe=l(),xre=a("span"),DXe=o("AutoConfig"),TDe=l(),wo=a("div"),F(gL.$$.fragment),GXe=l(),hL=a("p"),OXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Gk=a("a"),VXe=o("from_pretrained()"),XXe=o(" class method."),zXe=l(),uL=a("p"),WXe=o("This class cannot be instantiated directly using "),$re=a("code"),QXe=o("__init__()"),HXe=o(" (throws an error)."),UXe=l(),wr=a("div"),F(pL.$$.fragment),JXe=l(),kre=a("p"),YXe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),KXe=l(),Li=a("p"),ZXe=o("The configuration class to instantiate is selected based on the "),Sre=a("code"),eze=o("model_type"),oze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rre=a("code"),rze=o("pretrained_model_name_or_path"),tze=o(":"),aze=l(),A=a("ul"),Sm=a("li"),Pre=a("strong"),nze=o("albert"),sze=o(" \u2014 "),Ok=a("a"),lze=o("AlbertConfig"),ize=o(" (ALBERT model)"),dze=l(),Rm=a("li"),Bre=a("strong"),cze=o("bart"),mze=o(" \u2014 "),Vk=a("a"),fze=o("BartConfig"),gze=o(" (BART model)"),hze=l(),Pm=a("li"),Ire=a("strong"),uze=o("beit"),pze=o(" \u2014 "),Xk=a("a"),_ze=o("BeitConfig"),bze=o(" (BEiT model)"),vze=l(),Bm=a("li"),Nre=a("strong"),Fze=o("bert"),Tze=o(" \u2014 "),zk=a("a"),Mze=o("BertConfig"),Eze=o(" (BERT model)"),Cze=l(),Im=a("li"),qre=a("strong"),wze=o("bert-generation"),Aze=o(" \u2014 "),Wk=a("a"),yze=o("BertGenerationConfig"),Lze=o(" (Bert Generation model)"),xze=l(),Nm=a("li"),jre=a("strong"),$ze=o("big_bird"),kze=o(" \u2014 "),Qk=a("a"),Sze=o("BigBirdConfig"),Rze=o(" (BigBird model)"),Pze=l(),qm=a("li"),Dre=a("strong"),Bze=o("bigbird_pegasus"),Ize=o(" \u2014 "),Hk=a("a"),Nze=o("BigBirdPegasusConfig"),qze=o(" (BigBird-Pegasus model)"),jze=l(),jm=a("li"),Gre=a("strong"),Dze=o("blenderbot"),Gze=o(" \u2014 "),Uk=a("a"),Oze=o("BlenderbotConfig"),Vze=o(" (Blenderbot model)"),Xze=l(),Dm=a("li"),Ore=a("strong"),zze=o("blenderbot-small"),Wze=o(" \u2014 "),Jk=a("a"),Qze=o("BlenderbotSmallConfig"),Hze=o(" (BlenderbotSmall model)"),Uze=l(),Gm=a("li"),Vre=a("strong"),Jze=o("bloom"),Yze=o(" \u2014 "),Yk=a("a"),Kze=o("BloomConfig"),Zze=o(" (BLOOM model)"),eWe=l(),Om=a("li"),Xre=a("strong"),oWe=o("camembert"),rWe=o(" \u2014 "),Kk=a("a"),tWe=o("CamembertConfig"),aWe=o(" (CamemBERT model)"),nWe=l(),Vm=a("li"),zre=a("strong"),sWe=o("canine"),lWe=o(" \u2014 "),Zk=a("a"),iWe=o("CanineConfig"),dWe=o(" (CANINE model)"),cWe=l(),Xm=a("li"),Wre=a("strong"),mWe=o("clip"),fWe=o(" \u2014 "),eS=a("a"),gWe=o("CLIPConfig"),hWe=o(" (CLIP model)"),uWe=l(),zm=a("li"),Qre=a("strong"),pWe=o("convbert"),_We=o(" \u2014 "),oS=a("a"),bWe=o("ConvBertConfig"),vWe=o(" (ConvBERT model)"),FWe=l(),Wm=a("li"),Hre=a("strong"),TWe=o("convnext"),MWe=o(" \u2014 "),rS=a("a"),EWe=o("ConvNextConfig"),CWe=o(" (ConvNeXT model)"),wWe=l(),Qm=a("li"),Ure=a("strong"),AWe=o("ctrl"),yWe=o(" \u2014 "),tS=a("a"),LWe=o("CTRLConfig"),xWe=o(" (CTRL model)"),$We=l(),Hm=a("li"),Jre=a("strong"),kWe=o("cvt"),SWe=o(" \u2014 "),aS=a("a"),RWe=o("CvtConfig"),PWe=o(" (CvT model)"),BWe=l(),Um=a("li"),Yre=a("strong"),IWe=o("data2vec-audio"),NWe=o(" \u2014 "),nS=a("a"),qWe=o("Data2VecAudioConfig"),jWe=o(" (Data2VecAudio model)"),DWe=l(),Jm=a("li"),Kre=a("strong"),GWe=o("data2vec-text"),OWe=o(" \u2014 "),sS=a("a"),VWe=o("Data2VecTextConfig"),XWe=o(" (Data2VecText model)"),zWe=l(),Ym=a("li"),Zre=a("strong"),WWe=o("data2vec-vision"),QWe=o(" \u2014 "),lS=a("a"),HWe=o("Data2VecVisionConfig"),UWe=o(" (Data2VecVision model)"),JWe=l(),Km=a("li"),ete=a("strong"),YWe=o("deberta"),KWe=o(" \u2014 "),iS=a("a"),ZWe=o("DebertaConfig"),eQe=o(" (DeBERTa model)"),oQe=l(),Zm=a("li"),ote=a("strong"),rQe=o("deberta-v2"),tQe=o(" \u2014 "),dS=a("a"),aQe=o("DebertaV2Config"),nQe=o(" (DeBERTa-v2 model)"),sQe=l(),ef=a("li"),rte=a("strong"),lQe=o("decision_transformer"),iQe=o(" \u2014 "),cS=a("a"),dQe=o("DecisionTransformerConfig"),cQe=o(" (Decision Transformer model)"),mQe=l(),of=a("li"),tte=a("strong"),fQe=o("deit"),gQe=o(" \u2014 "),mS=a("a"),hQe=o("DeiTConfig"),uQe=o(" (DeiT model)"),pQe=l(),rf=a("li"),ate=a("strong"),_Qe=o("detr"),bQe=o(" \u2014 "),fS=a("a"),vQe=o("DetrConfig"),FQe=o(" (DETR model)"),TQe=l(),tf=a("li"),nte=a("strong"),MQe=o("distilbert"),EQe=o(" \u2014 "),gS=a("a"),CQe=o("DistilBertConfig"),wQe=o(" (DistilBERT model)"),AQe=l(),af=a("li"),ste=a("strong"),yQe=o("dpr"),LQe=o(" \u2014 "),hS=a("a"),xQe=o("DPRConfig"),$Qe=o(" (DPR model)"),kQe=l(),nf=a("li"),lte=a("strong"),SQe=o("dpt"),RQe=o(" \u2014 "),uS=a("a"),PQe=o("DPTConfig"),BQe=o(" (DPT model)"),IQe=l(),sf=a("li"),ite=a("strong"),NQe=o("electra"),qQe=o(" \u2014 "),pS=a("a"),jQe=o("ElectraConfig"),DQe=o(" (ELECTRA model)"),GQe=l(),lf=a("li"),dte=a("strong"),OQe=o("encoder-decoder"),VQe=o(" \u2014 "),_S=a("a"),XQe=o("EncoderDecoderConfig"),zQe=o(" (Encoder decoder model)"),WQe=l(),df=a("li"),cte=a("strong"),QQe=o("flaubert"),HQe=o(" \u2014 "),bS=a("a"),UQe=o("FlaubertConfig"),JQe=o(" (FlauBERT model)"),YQe=l(),cf=a("li"),mte=a("strong"),KQe=o("flava"),ZQe=o(" \u2014 "),vS=a("a"),eHe=o("FlavaConfig"),oHe=o(" (FLAVA model)"),rHe=l(),mf=a("li"),fte=a("strong"),tHe=o("fnet"),aHe=o(" \u2014 "),FS=a("a"),nHe=o("FNetConfig"),sHe=o(" (FNet model)"),lHe=l(),ff=a("li"),gte=a("strong"),iHe=o("fsmt"),dHe=o(" \u2014 "),TS=a("a"),cHe=o("FSMTConfig"),mHe=o(" (FairSeq Machine-Translation model)"),fHe=l(),gf=a("li"),hte=a("strong"),gHe=o("funnel"),hHe=o(" \u2014 "),MS=a("a"),uHe=o("FunnelConfig"),pHe=o(" (Funnel Transformer model)"),_He=l(),hf=a("li"),ute=a("strong"),bHe=o("glpn"),vHe=o(" \u2014 "),ES=a("a"),FHe=o("GLPNConfig"),THe=o(" (GLPN model)"),MHe=l(),uf=a("li"),pte=a("strong"),EHe=o("gpt2"),CHe=o(" \u2014 "),CS=a("a"),wHe=o("GPT2Config"),AHe=o(" (OpenAI GPT-2 model)"),yHe=l(),pf=a("li"),_te=a("strong"),LHe=o("gpt_neo"),xHe=o(" \u2014 "),wS=a("a"),$He=o("GPTNeoConfig"),kHe=o(" (GPT Neo model)"),SHe=l(),_f=a("li"),bte=a("strong"),RHe=o("gpt_neox"),PHe=o(" \u2014 "),AS=a("a"),BHe=o("GPTNeoXConfig"),IHe=o(" (GPT NeoX model)"),NHe=l(),bf=a("li"),vte=a("strong"),qHe=o("gptj"),jHe=o(" \u2014 "),yS=a("a"),DHe=o("GPTJConfig"),GHe=o(" (GPT-J model)"),OHe=l(),vf=a("li"),Fte=a("strong"),VHe=o("hubert"),XHe=o(" \u2014 "),LS=a("a"),zHe=o("HubertConfig"),WHe=o(" (Hubert model)"),QHe=l(),Ff=a("li"),Tte=a("strong"),HHe=o("ibert"),UHe=o(" \u2014 "),xS=a("a"),JHe=o("IBertConfig"),YHe=o(" (I-BERT model)"),KHe=l(),Tf=a("li"),Mte=a("strong"),ZHe=o("imagegpt"),eUe=o(" \u2014 "),$S=a("a"),oUe=o("ImageGPTConfig"),rUe=o(" (ImageGPT model)"),tUe=l(),Mf=a("li"),Ete=a("strong"),aUe=o("layoutlm"),nUe=o(" \u2014 "),kS=a("a"),sUe=o("LayoutLMConfig"),lUe=o(" (LayoutLM model)"),iUe=l(),Ef=a("li"),Cte=a("strong"),dUe=o("layoutlmv2"),cUe=o(" \u2014 "),SS=a("a"),mUe=o("LayoutLMv2Config"),fUe=o(" (LayoutLMv2 model)"),gUe=l(),Cf=a("li"),wte=a("strong"),hUe=o("layoutlmv3"),uUe=o(" \u2014 "),RS=a("a"),pUe=o("LayoutLMv3Config"),_Ue=o(" (LayoutLMv3 model)"),bUe=l(),wf=a("li"),Ate=a("strong"),vUe=o("led"),FUe=o(" \u2014 "),PS=a("a"),TUe=o("LEDConfig"),MUe=o(" (LED model)"),EUe=l(),Af=a("li"),yte=a("strong"),CUe=o("levit"),wUe=o(" \u2014 "),BS=a("a"),AUe=o("LevitConfig"),yUe=o(" (LeViT model)"),LUe=l(),yf=a("li"),Lte=a("strong"),xUe=o("longformer"),$Ue=o(" \u2014 "),IS=a("a"),kUe=o("LongformerConfig"),SUe=o(" (Longformer model)"),RUe=l(),Lf=a("li"),xte=a("strong"),PUe=o("luke"),BUe=o(" \u2014 "),NS=a("a"),IUe=o("LukeConfig"),NUe=o(" (LUKE model)"),qUe=l(),xf=a("li"),$te=a("strong"),jUe=o("lxmert"),DUe=o(" \u2014 "),qS=a("a"),GUe=o("LxmertConfig"),OUe=o(" (LXMERT model)"),VUe=l(),$f=a("li"),kte=a("strong"),XUe=o("m2m_100"),zUe=o(" \u2014 "),jS=a("a"),WUe=o("M2M100Config"),QUe=o(" (M2M100 model)"),HUe=l(),kf=a("li"),Ste=a("strong"),UUe=o("marian"),JUe=o(" \u2014 "),DS=a("a"),YUe=o("MarianConfig"),KUe=o(" (Marian model)"),ZUe=l(),Sf=a("li"),Rte=a("strong"),eJe=o("maskformer"),oJe=o(" \u2014 "),GS=a("a"),rJe=o("MaskFormerConfig"),tJe=o(" (MaskFormer model)"),aJe=l(),Rf=a("li"),Pte=a("strong"),nJe=o("mbart"),sJe=o(" \u2014 "),OS=a("a"),lJe=o("MBartConfig"),iJe=o(" (mBART model)"),dJe=l(),Pf=a("li"),Bte=a("strong"),cJe=o("mctct"),mJe=o(" \u2014 "),VS=a("a"),fJe=o("MCTCTConfig"),gJe=o(" (M-CTC-T model)"),hJe=l(),Bf=a("li"),Ite=a("strong"),uJe=o("megatron-bert"),pJe=o(" \u2014 "),XS=a("a"),_Je=o("MegatronBertConfig"),bJe=o(" (Megatron-BERT model)"),vJe=l(),If=a("li"),Nte=a("strong"),FJe=o("mobilebert"),TJe=o(" \u2014 "),zS=a("a"),MJe=o("MobileBertConfig"),EJe=o(" (MobileBERT model)"),CJe=l(),Nf=a("li"),qte=a("strong"),wJe=o("mpnet"),AJe=o(" \u2014 "),WS=a("a"),yJe=o("MPNetConfig"),LJe=o(" (MPNet model)"),xJe=l(),qf=a("li"),jte=a("strong"),$Je=o("mt5"),kJe=o(" \u2014 "),QS=a("a"),SJe=o("MT5Config"),RJe=o(" (MT5 model)"),PJe=l(),jf=a("li"),Dte=a("strong"),BJe=o("nystromformer"),IJe=o(" \u2014 "),HS=a("a"),NJe=o("NystromformerConfig"),qJe=o(" (Nystr\xF6mformer model)"),jJe=l(),Df=a("li"),Gte=a("strong"),DJe=o("openai-gpt"),GJe=o(" \u2014 "),US=a("a"),OJe=o("OpenAIGPTConfig"),VJe=o(" (OpenAI GPT model)"),XJe=l(),Gf=a("li"),Ote=a("strong"),zJe=o("opt"),WJe=o(" \u2014 "),JS=a("a"),QJe=o("OPTConfig"),HJe=o(" (OPT model)"),UJe=l(),Of=a("li"),Vte=a("strong"),JJe=o("pegasus"),YJe=o(" \u2014 "),YS=a("a"),KJe=o("PegasusConfig"),ZJe=o(" (Pegasus model)"),eYe=l(),Vf=a("li"),Xte=a("strong"),oYe=o("perceiver"),rYe=o(" \u2014 "),KS=a("a"),tYe=o("PerceiverConfig"),aYe=o(" (Perceiver model)"),nYe=l(),Xf=a("li"),zte=a("strong"),sYe=o("plbart"),lYe=o(" \u2014 "),ZS=a("a"),iYe=o("PLBartConfig"),dYe=o(" (PLBart model)"),cYe=l(),zf=a("li"),Wte=a("strong"),mYe=o("poolformer"),fYe=o(" \u2014 "),eR=a("a"),gYe=o("PoolFormerConfig"),hYe=o(" (PoolFormer model)"),uYe=l(),Wf=a("li"),Qte=a("strong"),pYe=o("prophetnet"),_Ye=o(" \u2014 "),oR=a("a"),bYe=o("ProphetNetConfig"),vYe=o(" (ProphetNet model)"),FYe=l(),Qf=a("li"),Hte=a("strong"),TYe=o("qdqbert"),MYe=o(" \u2014 "),rR=a("a"),EYe=o("QDQBertConfig"),CYe=o(" (QDQBert model)"),wYe=l(),Hf=a("li"),Ute=a("strong"),AYe=o("rag"),yYe=o(" \u2014 "),tR=a("a"),LYe=o("RagConfig"),xYe=o(" (RAG model)"),$Ye=l(),Uf=a("li"),Jte=a("strong"),kYe=o("realm"),SYe=o(" \u2014 "),aR=a("a"),RYe=o("RealmConfig"),PYe=o(" (REALM model)"),BYe=l(),Jf=a("li"),Yte=a("strong"),IYe=o("reformer"),NYe=o(" \u2014 "),nR=a("a"),qYe=o("ReformerConfig"),jYe=o(" (Reformer model)"),DYe=l(),Yf=a("li"),Kte=a("strong"),GYe=o("regnet"),OYe=o(" \u2014 "),sR=a("a"),VYe=o("RegNetConfig"),XYe=o(" (RegNet model)"),zYe=l(),Kf=a("li"),Zte=a("strong"),WYe=o("rembert"),QYe=o(" \u2014 "),lR=a("a"),HYe=o("RemBertConfig"),UYe=o(" (RemBERT model)"),JYe=l(),Zf=a("li"),eae=a("strong"),YYe=o("resnet"),KYe=o(" \u2014 "),iR=a("a"),ZYe=o("ResNetConfig"),eKe=o(" (ResNet model)"),oKe=l(),eg=a("li"),oae=a("strong"),rKe=o("retribert"),tKe=o(" \u2014 "),dR=a("a"),aKe=o("RetriBertConfig"),nKe=o(" (RetriBERT model)"),sKe=l(),og=a("li"),rae=a("strong"),lKe=o("roberta"),iKe=o(" \u2014 "),cR=a("a"),dKe=o("RobertaConfig"),cKe=o(" (RoBERTa model)"),mKe=l(),rg=a("li"),tae=a("strong"),fKe=o("roformer"),gKe=o(" \u2014 "),mR=a("a"),hKe=o("RoFormerConfig"),uKe=o(" (RoFormer model)"),pKe=l(),tg=a("li"),aae=a("strong"),_Ke=o("segformer"),bKe=o(" \u2014 "),fR=a("a"),vKe=o("SegformerConfig"),FKe=o(" (SegFormer model)"),TKe=l(),ag=a("li"),nae=a("strong"),MKe=o("sew"),EKe=o(" \u2014 "),gR=a("a"),CKe=o("SEWConfig"),wKe=o(" (SEW model)"),AKe=l(),ng=a("li"),sae=a("strong"),yKe=o("sew-d"),LKe=o(" \u2014 "),hR=a("a"),xKe=o("SEWDConfig"),$Ke=o(" (SEW-D model)"),kKe=l(),sg=a("li"),lae=a("strong"),SKe=o("speech-encoder-decoder"),RKe=o(" \u2014 "),uR=a("a"),PKe=o("SpeechEncoderDecoderConfig"),BKe=o(" (Speech Encoder decoder model)"),IKe=l(),lg=a("li"),iae=a("strong"),NKe=o("speech_to_text"),qKe=o(" \u2014 "),pR=a("a"),jKe=o("Speech2TextConfig"),DKe=o(" (Speech2Text model)"),GKe=l(),ig=a("li"),dae=a("strong"),OKe=o("speech_to_text_2"),VKe=o(" \u2014 "),_R=a("a"),XKe=o("Speech2Text2Config"),zKe=o(" (Speech2Text2 model)"),WKe=l(),dg=a("li"),cae=a("strong"),QKe=o("splinter"),HKe=o(" \u2014 "),bR=a("a"),UKe=o("SplinterConfig"),JKe=o(" (Splinter model)"),YKe=l(),cg=a("li"),mae=a("strong"),KKe=o("squeezebert"),ZKe=o(" \u2014 "),vR=a("a"),eZe=o("SqueezeBertConfig"),oZe=o(" (SqueezeBERT model)"),rZe=l(),mg=a("li"),fae=a("strong"),tZe=o("swin"),aZe=o(" \u2014 "),FR=a("a"),nZe=o("SwinConfig"),sZe=o(" (Swin Transformer model)"),lZe=l(),fg=a("li"),gae=a("strong"),iZe=o("t5"),dZe=o(" \u2014 "),TR=a("a"),cZe=o("T5Config"),mZe=o(" (T5 model)"),fZe=l(),gg=a("li"),hae=a("strong"),gZe=o("tapas"),hZe=o(" \u2014 "),MR=a("a"),uZe=o("TapasConfig"),pZe=o(" (TAPAS model)"),_Ze=l(),hg=a("li"),uae=a("strong"),bZe=o("trajectory_transformer"),vZe=o(" \u2014 "),ER=a("a"),FZe=o("TrajectoryTransformerConfig"),TZe=o(" (Trajectory Transformer model)"),MZe=l(),ug=a("li"),pae=a("strong"),EZe=o("transfo-xl"),CZe=o(" \u2014 "),CR=a("a"),wZe=o("TransfoXLConfig"),AZe=o(" (Transformer-XL model)"),yZe=l(),pg=a("li"),_ae=a("strong"),LZe=o("trocr"),xZe=o(" \u2014 "),wR=a("a"),$Ze=o("TrOCRConfig"),kZe=o(" (TrOCR model)"),SZe=l(),_g=a("li"),bae=a("strong"),RZe=o("unispeech"),PZe=o(" \u2014 "),AR=a("a"),BZe=o("UniSpeechConfig"),IZe=o(" (UniSpeech model)"),NZe=l(),bg=a("li"),vae=a("strong"),qZe=o("unispeech-sat"),jZe=o(" \u2014 "),yR=a("a"),DZe=o("UniSpeechSatConfig"),GZe=o(" (UniSpeechSat model)"),OZe=l(),vg=a("li"),Fae=a("strong"),VZe=o("van"),XZe=o(" \u2014 "),LR=a("a"),zZe=o("VanConfig"),WZe=o(" (VAN model)"),QZe=l(),Fg=a("li"),Tae=a("strong"),HZe=o("vilt"),UZe=o(" \u2014 "),xR=a("a"),JZe=o("ViltConfig"),YZe=o(" (ViLT model)"),KZe=l(),Tg=a("li"),Mae=a("strong"),ZZe=o("vision-encoder-decoder"),eeo=o(" \u2014 "),$R=a("a"),oeo=o("VisionEncoderDecoderConfig"),reo=o(" (Vision Encoder decoder model)"),teo=l(),Mg=a("li"),Eae=a("strong"),aeo=o("vision-text-dual-encoder"),neo=o(" \u2014 "),kR=a("a"),seo=o("VisionTextDualEncoderConfig"),leo=o(" (VisionTextDualEncoder model)"),ieo=l(),Eg=a("li"),Cae=a("strong"),deo=o("visual_bert"),ceo=o(" \u2014 "),SR=a("a"),meo=o("VisualBertConfig"),feo=o(" (VisualBERT model)"),geo=l(),Cg=a("li"),wae=a("strong"),heo=o("vit"),ueo=o(" \u2014 "),RR=a("a"),peo=o("ViTConfig"),_eo=o(" (ViT model)"),beo=l(),wg=a("li"),Aae=a("strong"),veo=o("vit_mae"),Feo=o(" \u2014 "),PR=a("a"),Teo=o("ViTMAEConfig"),Meo=o(" (ViTMAE model)"),Eeo=l(),Ag=a("li"),yae=a("strong"),Ceo=o("wav2vec2"),weo=o(" \u2014 "),BR=a("a"),Aeo=o("Wav2Vec2Config"),yeo=o(" (Wav2Vec2 model)"),Leo=l(),yg=a("li"),Lae=a("strong"),xeo=o("wav2vec2-conformer"),$eo=o(" \u2014 "),IR=a("a"),keo=o("Wav2Vec2ConformerConfig"),Seo=o(" (Wav2Vec2-Conformer model)"),Reo=l(),Lg=a("li"),xae=a("strong"),Peo=o("wavlm"),Beo=o(" \u2014 "),NR=a("a"),Ieo=o("WavLMConfig"),Neo=o(" (WavLM model)"),qeo=l(),xg=a("li"),$ae=a("strong"),jeo=o("xglm"),Deo=o(" \u2014 "),qR=a("a"),Geo=o("XGLMConfig"),Oeo=o(" (XGLM model)"),Veo=l(),$g=a("li"),kae=a("strong"),Xeo=o("xlm"),zeo=o(" \u2014 "),jR=a("a"),Weo=o("XLMConfig"),Qeo=o(" (XLM model)"),Heo=l(),kg=a("li"),Sae=a("strong"),Ueo=o("xlm-prophetnet"),Jeo=o(" \u2014 "),DR=a("a"),Yeo=o("XLMProphetNetConfig"),Keo=o(" (XLM-ProphetNet model)"),Zeo=l(),Sg=a("li"),Rae=a("strong"),eoo=o("xlm-roberta"),ooo=o(" \u2014 "),GR=a("a"),roo=o("XLMRobertaConfig"),too=o(" (XLM-RoBERTa model)"),aoo=l(),Rg=a("li"),Pae=a("strong"),noo=o("xlm-roberta-xl"),soo=o(" \u2014 "),OR=a("a"),loo=o("XLMRobertaXLConfig"),ioo=o(" (XLM-RoBERTa-XL model)"),doo=l(),Pg=a("li"),Bae=a("strong"),coo=o("xlnet"),moo=o(" \u2014 "),VR=a("a"),foo=o("XLNetConfig"),goo=o(" (XLNet model)"),hoo=l(),Bg=a("li"),Iae=a("strong"),uoo=o("yolos"),poo=o(" \u2014 "),XR=a("a"),_oo=o("YolosConfig"),boo=o(" (YOLOS model)"),voo=l(),Ig=a("li"),Nae=a("strong"),Foo=o("yoso"),Too=o(" \u2014 "),zR=a("a"),Moo=o("YosoConfig"),Eoo=o(" (YOSO model)"),Coo=l(),F(Ng.$$.fragment),woo=l(),qg=a("div"),F(_L.$$.fragment),Aoo=l(),qae=a("p"),yoo=o("Register a new configuration for this class."),MDe=l(),xi=a("h2"),jg=a("a"),jae=a("span"),F(bL.$$.fragment),Loo=l(),Dae=a("span"),xoo=o("AutoTokenizer"),EDe=l(),Ao=a("div"),F(vL.$$.fragment),$oo=l(),FL=a("p"),koo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WR=a("a"),Soo=o("AutoTokenizer.from_pretrained()"),Roo=o(" class method."),Poo=l(),TL=a("p"),Boo=o("This class cannot be instantiated directly using "),Gae=a("code"),Ioo=o("__init__()"),Noo=o(" (throws an error)."),qoo=l(),Ar=a("div"),F(ML.$$.fragment),joo=l(),Oae=a("p"),Doo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Goo=l(),$a=a("p"),Ooo=o("The tokenizer class to instantiate is selected based on the "),Vae=a("code"),Voo=o("model_type"),Xoo=o(` property of the config object (either
passed as an argument or loaded from `),Xae=a("code"),zoo=o("pretrained_model_name_or_path"),Woo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zae=a("code"),Qoo=o("pretrained_model_name_or_path"),Hoo=o(":"),Uoo=l(),k=a("ul"),Nn=a("li"),Wae=a("strong"),Joo=o("albert"),Yoo=o(" \u2014 "),QR=a("a"),Koo=o("AlbertTokenizer"),Zoo=o(" or "),HR=a("a"),ero=o("AlbertTokenizerFast"),oro=o(" (ALBERT model)"),rro=l(),qn=a("li"),Qae=a("strong"),tro=o("bart"),aro=o(" \u2014 "),UR=a("a"),nro=o("BartTokenizer"),sro=o(" or "),JR=a("a"),lro=o("BartTokenizerFast"),iro=o(" (BART model)"),dro=l(),jn=a("li"),Hae=a("strong"),cro=o("barthez"),mro=o(" \u2014 "),YR=a("a"),fro=o("BarthezTokenizer"),gro=o(" or "),KR=a("a"),hro=o("BarthezTokenizerFast"),uro=o(" (BARThez model)"),pro=l(),Dg=a("li"),Uae=a("strong"),_ro=o("bartpho"),bro=o(" \u2014 "),ZR=a("a"),vro=o("BartphoTokenizer"),Fro=o(" (BARTpho model)"),Tro=l(),Dn=a("li"),Jae=a("strong"),Mro=o("bert"),Ero=o(" \u2014 "),eP=a("a"),Cro=o("BertTokenizer"),wro=o(" or "),oP=a("a"),Aro=o("BertTokenizerFast"),yro=o(" (BERT model)"),Lro=l(),Gg=a("li"),Yae=a("strong"),xro=o("bert-generation"),$ro=o(" \u2014 "),rP=a("a"),kro=o("BertGenerationTokenizer"),Sro=o(" (Bert Generation model)"),Rro=l(),Og=a("li"),Kae=a("strong"),Pro=o("bert-japanese"),Bro=o(" \u2014 "),tP=a("a"),Iro=o("BertJapaneseTokenizer"),Nro=o(" (BertJapanese model)"),qro=l(),Vg=a("li"),Zae=a("strong"),jro=o("bertweet"),Dro=o(" \u2014 "),aP=a("a"),Gro=o("BertweetTokenizer"),Oro=o(" (BERTweet model)"),Vro=l(),Gn=a("li"),ene=a("strong"),Xro=o("big_bird"),zro=o(" \u2014 "),nP=a("a"),Wro=o("BigBirdTokenizer"),Qro=o(" or "),sP=a("a"),Hro=o("BigBirdTokenizerFast"),Uro=o(" (BigBird model)"),Jro=l(),On=a("li"),one=a("strong"),Yro=o("bigbird_pegasus"),Kro=o(" \u2014 "),lP=a("a"),Zro=o("PegasusTokenizer"),eto=o(" or "),iP=a("a"),oto=o("PegasusTokenizerFast"),rto=o(" (BigBird-Pegasus model)"),tto=l(),Vn=a("li"),rne=a("strong"),ato=o("blenderbot"),nto=o(" \u2014 "),dP=a("a"),sto=o("BlenderbotTokenizer"),lto=o(" or "),cP=a("a"),ito=o("BlenderbotTokenizerFast"),dto=o(" (Blenderbot model)"),cto=l(),Xg=a("li"),tne=a("strong"),mto=o("blenderbot-small"),fto=o(" \u2014 "),mP=a("a"),gto=o("BlenderbotSmallTokenizer"),hto=o(" (BlenderbotSmall model)"),uto=l(),zg=a("li"),ane=a("strong"),pto=o("bloom"),_to=o(" \u2014 "),fP=a("a"),bto=o("BloomTokenizerFast"),vto=o(" (BLOOM model)"),Fto=l(),Wg=a("li"),nne=a("strong"),Tto=o("byt5"),Mto=o(" \u2014 "),gP=a("a"),Eto=o("ByT5Tokenizer"),Cto=o(" (ByT5 model)"),wto=l(),Xn=a("li"),sne=a("strong"),Ato=o("camembert"),yto=o(" \u2014 "),hP=a("a"),Lto=o("CamembertTokenizer"),xto=o(" or "),uP=a("a"),$to=o("CamembertTokenizerFast"),kto=o(" (CamemBERT model)"),Sto=l(),Qg=a("li"),lne=a("strong"),Rto=o("canine"),Pto=o(" \u2014 "),pP=a("a"),Bto=o("CanineTokenizer"),Ito=o(" (CANINE model)"),Nto=l(),zn=a("li"),ine=a("strong"),qto=o("clip"),jto=o(" \u2014 "),_P=a("a"),Dto=o("CLIPTokenizer"),Gto=o(" or "),bP=a("a"),Oto=o("CLIPTokenizerFast"),Vto=o(" (CLIP model)"),Xto=l(),Wn=a("li"),dne=a("strong"),zto=o("convbert"),Wto=o(" \u2014 "),vP=a("a"),Qto=o("ConvBertTokenizer"),Hto=o(" or "),FP=a("a"),Uto=o("ConvBertTokenizerFast"),Jto=o(" (ConvBERT model)"),Yto=l(),Qn=a("li"),cne=a("strong"),Kto=o("cpm"),Zto=o(" \u2014 "),TP=a("a"),eao=o("CpmTokenizer"),oao=o(" or "),MP=a("a"),rao=o("CpmTokenizerFast"),tao=o(" (CPM model)"),aao=l(),Hg=a("li"),mne=a("strong"),nao=o("ctrl"),sao=o(" \u2014 "),EP=a("a"),lao=o("CTRLTokenizer"),iao=o(" (CTRL model)"),dao=l(),Hn=a("li"),fne=a("strong"),cao=o("data2vec-text"),mao=o(" \u2014 "),CP=a("a"),fao=o("RobertaTokenizer"),gao=o(" or "),wP=a("a"),hao=o("RobertaTokenizerFast"),uao=o(" (Data2VecText model)"),pao=l(),Un=a("li"),gne=a("strong"),_ao=o("deberta"),bao=o(" \u2014 "),AP=a("a"),vao=o("DebertaTokenizer"),Fao=o(" or "),yP=a("a"),Tao=o("DebertaTokenizerFast"),Mao=o(" (DeBERTa model)"),Eao=l(),Jn=a("li"),hne=a("strong"),Cao=o("deberta-v2"),wao=o(" \u2014 "),LP=a("a"),Aao=o("DebertaV2Tokenizer"),yao=o(" or "),xP=a("a"),Lao=o("DebertaV2TokenizerFast"),xao=o(" (DeBERTa-v2 model)"),$ao=l(),Yn=a("li"),une=a("strong"),kao=o("distilbert"),Sao=o(" \u2014 "),$P=a("a"),Rao=o("DistilBertTokenizer"),Pao=o(" or "),kP=a("a"),Bao=o("DistilBertTokenizerFast"),Iao=o(" (DistilBERT model)"),Nao=l(),Kn=a("li"),pne=a("strong"),qao=o("dpr"),jao=o(" \u2014 "),SP=a("a"),Dao=o("DPRQuestionEncoderTokenizer"),Gao=o(" or "),RP=a("a"),Oao=o("DPRQuestionEncoderTokenizerFast"),Vao=o(" (DPR model)"),Xao=l(),Zn=a("li"),_ne=a("strong"),zao=o("electra"),Wao=o(" \u2014 "),PP=a("a"),Qao=o("ElectraTokenizer"),Hao=o(" or "),BP=a("a"),Uao=o("ElectraTokenizerFast"),Jao=o(" (ELECTRA model)"),Yao=l(),Ug=a("li"),bne=a("strong"),Kao=o("flaubert"),Zao=o(" \u2014 "),IP=a("a"),eno=o("FlaubertTokenizer"),ono=o(" (FlauBERT model)"),rno=l(),es=a("li"),vne=a("strong"),tno=o("fnet"),ano=o(" \u2014 "),NP=a("a"),nno=o("FNetTokenizer"),sno=o(" or "),qP=a("a"),lno=o("FNetTokenizerFast"),ino=o(" (FNet model)"),dno=l(),Jg=a("li"),Fne=a("strong"),cno=o("fsmt"),mno=o(" \u2014 "),jP=a("a"),fno=o("FSMTTokenizer"),gno=o(" (FairSeq Machine-Translation model)"),hno=l(),os=a("li"),Tne=a("strong"),uno=o("funnel"),pno=o(" \u2014 "),DP=a("a"),_no=o("FunnelTokenizer"),bno=o(" or "),GP=a("a"),vno=o("FunnelTokenizerFast"),Fno=o(" (Funnel Transformer model)"),Tno=l(),rs=a("li"),Mne=a("strong"),Mno=o("gpt2"),Eno=o(" \u2014 "),OP=a("a"),Cno=o("GPT2Tokenizer"),wno=o(" or "),VP=a("a"),Ano=o("GPT2TokenizerFast"),yno=o(" (OpenAI GPT-2 model)"),Lno=l(),ts=a("li"),Ene=a("strong"),xno=o("gpt_neo"),$no=o(" \u2014 "),XP=a("a"),kno=o("GPT2Tokenizer"),Sno=o(" or "),zP=a("a"),Rno=o("GPT2TokenizerFast"),Pno=o(" (GPT Neo model)"),Bno=l(),Yg=a("li"),Cne=a("strong"),Ino=o("gpt_neox"),Nno=o(" \u2014 "),WP=a("a"),qno=o("GPTNeoXTokenizerFast"),jno=o(" (GPT NeoX model)"),Dno=l(),as=a("li"),wne=a("strong"),Gno=o("gptj"),Ono=o(" \u2014 "),QP=a("a"),Vno=o("GPT2Tokenizer"),Xno=o(" or "),HP=a("a"),zno=o("GPT2TokenizerFast"),Wno=o(" (GPT-J model)"),Qno=l(),ns=a("li"),Ane=a("strong"),Hno=o("herbert"),Uno=o(" \u2014 "),UP=a("a"),Jno=o("HerbertTokenizer"),Yno=o(" or "),JP=a("a"),Kno=o("HerbertTokenizerFast"),Zno=o(" (HerBERT model)"),eso=l(),Kg=a("li"),yne=a("strong"),oso=o("hubert"),rso=o(" \u2014 "),YP=a("a"),tso=o("Wav2Vec2CTCTokenizer"),aso=o(" (Hubert model)"),nso=l(),ss=a("li"),Lne=a("strong"),sso=o("ibert"),lso=o(" \u2014 "),KP=a("a"),iso=o("RobertaTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("RobertaTokenizerFast"),mso=o(" (I-BERT model)"),fso=l(),ls=a("li"),xne=a("strong"),gso=o("layoutlm"),hso=o(" \u2014 "),eB=a("a"),uso=o("LayoutLMTokenizer"),pso=o(" or "),oB=a("a"),_so=o("LayoutLMTokenizerFast"),bso=o(" (LayoutLM model)"),vso=l(),is=a("li"),$ne=a("strong"),Fso=o("layoutlmv2"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("LayoutLMv2Tokenizer"),Eso=o(" or "),tB=a("a"),Cso=o("LayoutLMv2TokenizerFast"),wso=o(" (LayoutLMv2 model)"),Aso=l(),ds=a("li"),kne=a("strong"),yso=o("layoutlmv3"),Lso=o(" \u2014 "),aB=a("a"),xso=o("LayoutLMv3Tokenizer"),$so=o(" or "),nB=a("a"),kso=o("LayoutLMv3TokenizerFast"),Sso=o(" (LayoutLMv3 model)"),Rso=l(),cs=a("li"),Sne=a("strong"),Pso=o("layoutxlm"),Bso=o(" \u2014 "),sB=a("a"),Iso=o("LayoutXLMTokenizer"),Nso=o(" or "),lB=a("a"),qso=o("LayoutXLMTokenizerFast"),jso=o(" (LayoutXLM model)"),Dso=l(),ms=a("li"),Rne=a("strong"),Gso=o("led"),Oso=o(" \u2014 "),iB=a("a"),Vso=o("LEDTokenizer"),Xso=o(" or "),dB=a("a"),zso=o("LEDTokenizerFast"),Wso=o(" (LED model)"),Qso=l(),fs=a("li"),Pne=a("strong"),Hso=o("longformer"),Uso=o(" \u2014 "),cB=a("a"),Jso=o("LongformerTokenizer"),Yso=o(" or "),mB=a("a"),Kso=o("LongformerTokenizerFast"),Zso=o(" (Longformer model)"),elo=l(),Zg=a("li"),Bne=a("strong"),olo=o("luke"),rlo=o(" \u2014 "),fB=a("a"),tlo=o("LukeTokenizer"),alo=o(" (LUKE model)"),nlo=l(),gs=a("li"),Ine=a("strong"),slo=o("lxmert"),llo=o(" \u2014 "),gB=a("a"),ilo=o("LxmertTokenizer"),dlo=o(" or "),hB=a("a"),clo=o("LxmertTokenizerFast"),mlo=o(" (LXMERT model)"),flo=l(),eh=a("li"),Nne=a("strong"),glo=o("m2m_100"),hlo=o(" \u2014 "),uB=a("a"),ulo=o("M2M100Tokenizer"),plo=o(" (M2M100 model)"),_lo=l(),oh=a("li"),qne=a("strong"),blo=o("marian"),vlo=o(" \u2014 "),pB=a("a"),Flo=o("MarianTokenizer"),Tlo=o(" (Marian model)"),Mlo=l(),hs=a("li"),jne=a("strong"),Elo=o("mbart"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("MBartTokenizer"),Alo=o(" or "),bB=a("a"),ylo=o("MBartTokenizerFast"),Llo=o(" (mBART model)"),xlo=l(),us=a("li"),Dne=a("strong"),$lo=o("mbart50"),klo=o(" \u2014 "),vB=a("a"),Slo=o("MBart50Tokenizer"),Rlo=o(" or "),FB=a("a"),Plo=o("MBart50TokenizerFast"),Blo=o(" (mBART-50 model)"),Ilo=l(),ps=a("li"),Gne=a("strong"),Nlo=o("megatron-bert"),qlo=o(" \u2014 "),TB=a("a"),jlo=o("BertTokenizer"),Dlo=o(" or "),MB=a("a"),Glo=o("BertTokenizerFast"),Olo=o(" (Megatron-BERT model)"),Vlo=l(),rh=a("li"),One=a("strong"),Xlo=o("mluke"),zlo=o(" \u2014 "),EB=a("a"),Wlo=o("MLukeTokenizer"),Qlo=o(" (mLUKE model)"),Hlo=l(),_s=a("li"),Vne=a("strong"),Ulo=o("mobilebert"),Jlo=o(" \u2014 "),CB=a("a"),Ylo=o("MobileBertTokenizer"),Klo=o(" or "),wB=a("a"),Zlo=o("MobileBertTokenizerFast"),eio=o(" (MobileBERT model)"),oio=l(),bs=a("li"),Xne=a("strong"),rio=o("mpnet"),tio=o(" \u2014 "),AB=a("a"),aio=o("MPNetTokenizer"),nio=o(" or "),yB=a("a"),sio=o("MPNetTokenizerFast"),lio=o(" (MPNet model)"),iio=l(),vs=a("li"),zne=a("strong"),dio=o("mt5"),cio=o(" \u2014 "),LB=a("a"),mio=o("MT5Tokenizer"),fio=o(" or "),xB=a("a"),gio=o("MT5TokenizerFast"),hio=o(" (MT5 model)"),uio=l(),Fs=a("li"),Wne=a("strong"),pio=o("nystromformer"),_io=o(" \u2014 "),$B=a("a"),bio=o("AlbertTokenizer"),vio=o(" or "),kB=a("a"),Fio=o("AlbertTokenizerFast"),Tio=o(" (Nystr\xF6mformer model)"),Mio=l(),Ts=a("li"),Qne=a("strong"),Eio=o("openai-gpt"),Cio=o(" \u2014 "),SB=a("a"),wio=o("OpenAIGPTTokenizer"),Aio=o(" or "),RB=a("a"),yio=o("OpenAIGPTTokenizerFast"),Lio=o(" (OpenAI GPT model)"),xio=l(),th=a("li"),Hne=a("strong"),$io=o("opt"),kio=o(" \u2014 "),PB=a("a"),Sio=o("GPT2Tokenizer"),Rio=o(" (OPT model)"),Pio=l(),Ms=a("li"),Une=a("strong"),Bio=o("pegasus"),Iio=o(" \u2014 "),BB=a("a"),Nio=o("PegasusTokenizer"),qio=o(" or "),IB=a("a"),jio=o("PegasusTokenizerFast"),Dio=o(" (Pegasus model)"),Gio=l(),ah=a("li"),Jne=a("strong"),Oio=o("perceiver"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("PerceiverTokenizer"),zio=o(" (Perceiver model)"),Wio=l(),nh=a("li"),Yne=a("strong"),Qio=o("phobert"),Hio=o(" \u2014 "),qB=a("a"),Uio=o("PhobertTokenizer"),Jio=o(" (PhoBERT model)"),Yio=l(),sh=a("li"),Kne=a("strong"),Kio=o("plbart"),Zio=o(" \u2014 "),jB=a("a"),edo=o("PLBartTokenizer"),odo=o(" (PLBart model)"),rdo=l(),lh=a("li"),Zne=a("strong"),tdo=o("prophetnet"),ado=o(" \u2014 "),DB=a("a"),ndo=o("ProphetNetTokenizer"),sdo=o(" (ProphetNet model)"),ldo=l(),Es=a("li"),ese=a("strong"),ido=o("qdqbert"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("BertTokenizer"),mdo=o(" or "),OB=a("a"),fdo=o("BertTokenizerFast"),gdo=o(" (QDQBert model)"),hdo=l(),ih=a("li"),ose=a("strong"),udo=o("rag"),pdo=o(" \u2014 "),VB=a("a"),_do=o("RagTokenizer"),bdo=o(" (RAG model)"),vdo=l(),Cs=a("li"),rse=a("strong"),Fdo=o("realm"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("RealmTokenizer"),Edo=o(" or "),zB=a("a"),Cdo=o("RealmTokenizerFast"),wdo=o(" (REALM model)"),Ado=l(),ws=a("li"),tse=a("strong"),ydo=o("reformer"),Ldo=o(" \u2014 "),WB=a("a"),xdo=o("ReformerTokenizer"),$do=o(" or "),QB=a("a"),kdo=o("ReformerTokenizerFast"),Sdo=o(" (Reformer model)"),Rdo=l(),As=a("li"),ase=a("strong"),Pdo=o("rembert"),Bdo=o(" \u2014 "),HB=a("a"),Ido=o("RemBertTokenizer"),Ndo=o(" or "),UB=a("a"),qdo=o("RemBertTokenizerFast"),jdo=o(" (RemBERT model)"),Ddo=l(),ys=a("li"),nse=a("strong"),Gdo=o("retribert"),Odo=o(" \u2014 "),JB=a("a"),Vdo=o("RetriBertTokenizer"),Xdo=o(" or "),YB=a("a"),zdo=o("RetriBertTokenizerFast"),Wdo=o(" (RetriBERT model)"),Qdo=l(),Ls=a("li"),sse=a("strong"),Hdo=o("roberta"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("RobertaTokenizer"),Ydo=o(" or "),ZB=a("a"),Kdo=o("RobertaTokenizerFast"),Zdo=o(" (RoBERTa model)"),eco=l(),xs=a("li"),lse=a("strong"),oco=o("roformer"),rco=o(" \u2014 "),eI=a("a"),tco=o("RoFormerTokenizer"),aco=o(" or "),oI=a("a"),nco=o("RoFormerTokenizerFast"),sco=o(" (RoFormer model)"),lco=l(),dh=a("li"),ise=a("strong"),ico=o("speech_to_text"),dco=o(" \u2014 "),rI=a("a"),cco=o("Speech2TextTokenizer"),mco=o(" (Speech2Text model)"),fco=l(),ch=a("li"),dse=a("strong"),gco=o("speech_to_text_2"),hco=o(" \u2014 "),tI=a("a"),uco=o("Speech2Text2Tokenizer"),pco=o(" (Speech2Text2 model)"),_co=l(),$s=a("li"),cse=a("strong"),bco=o("splinter"),vco=o(" \u2014 "),aI=a("a"),Fco=o("SplinterTokenizer"),Tco=o(" or "),nI=a("a"),Mco=o("SplinterTokenizerFast"),Eco=o(" (Splinter model)"),Cco=l(),ks=a("li"),mse=a("strong"),wco=o("squeezebert"),Aco=o(" \u2014 "),sI=a("a"),yco=o("SqueezeBertTokenizer"),Lco=o(" or "),lI=a("a"),xco=o("SqueezeBertTokenizerFast"),$co=o(" (SqueezeBERT model)"),kco=l(),Ss=a("li"),fse=a("strong"),Sco=o("t5"),Rco=o(" \u2014 "),iI=a("a"),Pco=o("T5Tokenizer"),Bco=o(" or "),dI=a("a"),Ico=o("T5TokenizerFast"),Nco=o(" (T5 model)"),qco=l(),mh=a("li"),gse=a("strong"),jco=o("tapas"),Dco=o(" \u2014 "),cI=a("a"),Gco=o("TapasTokenizer"),Oco=o(" (TAPAS model)"),Vco=l(),fh=a("li"),hse=a("strong"),Xco=o("tapex"),zco=o(" \u2014 "),mI=a("a"),Wco=o("TapexTokenizer"),Qco=o(" (TAPEX model)"),Hco=l(),gh=a("li"),use=a("strong"),Uco=o("transfo-xl"),Jco=o(" \u2014 "),fI=a("a"),Yco=o("TransfoXLTokenizer"),Kco=o(" (Transformer-XL model)"),Zco=l(),Rs=a("li"),pse=a("strong"),emo=o("vilt"),omo=o(" \u2014 "),gI=a("a"),rmo=o("BertTokenizer"),tmo=o(" or "),hI=a("a"),amo=o("BertTokenizerFast"),nmo=o(" (ViLT model)"),smo=l(),Ps=a("li"),_se=a("strong"),lmo=o("visual_bert"),imo=o(" \u2014 "),uI=a("a"),dmo=o("BertTokenizer"),cmo=o(" or "),pI=a("a"),mmo=o("BertTokenizerFast"),fmo=o(" (VisualBERT model)"),gmo=l(),hh=a("li"),bse=a("strong"),hmo=o("wav2vec2"),umo=o(" \u2014 "),_I=a("a"),pmo=o("Wav2Vec2CTCTokenizer"),_mo=o(" (Wav2Vec2 model)"),bmo=l(),uh=a("li"),vse=a("strong"),vmo=o("wav2vec2-conformer"),Fmo=o(" \u2014 "),bI=a("a"),Tmo=o("Wav2Vec2CTCTokenizer"),Mmo=o(" (Wav2Vec2-Conformer model)"),Emo=l(),ph=a("li"),Fse=a("strong"),Cmo=o("wav2vec2_phoneme"),wmo=o(" \u2014 "),vI=a("a"),Amo=o("Wav2Vec2PhonemeCTCTokenizer"),ymo=o(" (Wav2Vec2Phoneme model)"),Lmo=l(),Bs=a("li"),Tse=a("strong"),xmo=o("xglm"),$mo=o(" \u2014 "),FI=a("a"),kmo=o("XGLMTokenizer"),Smo=o(" or "),TI=a("a"),Rmo=o("XGLMTokenizerFast"),Pmo=o(" (XGLM model)"),Bmo=l(),_h=a("li"),Mse=a("strong"),Imo=o("xlm"),Nmo=o(" \u2014 "),MI=a("a"),qmo=o("XLMTokenizer"),jmo=o(" (XLM model)"),Dmo=l(),bh=a("li"),Ese=a("strong"),Gmo=o("xlm-prophetnet"),Omo=o(" \u2014 "),EI=a("a"),Vmo=o("XLMProphetNetTokenizer"),Xmo=o(" (XLM-ProphetNet model)"),zmo=l(),Is=a("li"),Cse=a("strong"),Wmo=o("xlm-roberta"),Qmo=o(" \u2014 "),CI=a("a"),Hmo=o("XLMRobertaTokenizer"),Umo=o(" or "),wI=a("a"),Jmo=o("XLMRobertaTokenizerFast"),Ymo=o(" (XLM-RoBERTa model)"),Kmo=l(),Ns=a("li"),wse=a("strong"),Zmo=o("xlm-roberta-xl"),efo=o(" \u2014 "),AI=a("a"),ofo=o("RobertaTokenizer"),rfo=o(" or "),yI=a("a"),tfo=o("RobertaTokenizerFast"),afo=o(" (XLM-RoBERTa-XL model)"),nfo=l(),qs=a("li"),Ase=a("strong"),sfo=o("xlnet"),lfo=o(" \u2014 "),LI=a("a"),ifo=o("XLNetTokenizer"),dfo=o(" or "),xI=a("a"),cfo=o("XLNetTokenizerFast"),mfo=o(" (XLNet model)"),ffo=l(),js=a("li"),yse=a("strong"),gfo=o("yoso"),hfo=o(" \u2014 "),$I=a("a"),ufo=o("AlbertTokenizer"),pfo=o(" or "),kI=a("a"),_fo=o("AlbertTokenizerFast"),bfo=o(" (YOSO model)"),vfo=l(),F(vh.$$.fragment),Ffo=l(),Fh=a("div"),F(EL.$$.fragment),Tfo=l(),Lse=a("p"),Mfo=o("Register a new tokenizer in this mapping."),CDe=l(),$i=a("h2"),Th=a("a"),xse=a("span"),F(CL.$$.fragment),Efo=l(),$se=a("span"),Cfo=o("AutoFeatureExtractor"),wDe=l(),yo=a("div"),F(wL.$$.fragment),wfo=l(),AL=a("p"),Afo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SI=a("a"),yfo=o("AutoFeatureExtractor.from_pretrained()"),Lfo=o(" class method."),xfo=l(),yL=a("p"),$fo=o("This class cannot be instantiated directly using "),kse=a("code"),kfo=o("__init__()"),Sfo=o(" (throws an error)."),Rfo=l(),He=a("div"),F(LL.$$.fragment),Pfo=l(),Sse=a("p"),Bfo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ifo=l(),ka=a("p"),Nfo=o("The feature extractor class to instantiate is selected based on the "),Rse=a("code"),qfo=o("model_type"),jfo=o(` property of the config object
(either passed as an argument or loaded from `),Pse=a("code"),Dfo=o("pretrained_model_name_or_path"),Gfo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bse=a("code"),Ofo=o("pretrained_model_name_or_path"),Vfo=o(":"),Xfo=l(),Y=a("ul"),Mh=a("li"),Ise=a("strong"),zfo=o("beit"),Wfo=o(" \u2014 "),RI=a("a"),Qfo=o("BeitFeatureExtractor"),Hfo=o(" (BEiT model)"),Ufo=l(),Eh=a("li"),Nse=a("strong"),Jfo=o("clip"),Yfo=o(" \u2014 "),PI=a("a"),Kfo=o("CLIPFeatureExtractor"),Zfo=o(" (CLIP model)"),ego=l(),Ch=a("li"),qse=a("strong"),ogo=o("convnext"),rgo=o(" \u2014 "),BI=a("a"),tgo=o("ConvNextFeatureExtractor"),ago=o(" (ConvNeXT model)"),ngo=l(),wh=a("li"),jse=a("strong"),sgo=o("cvt"),lgo=o(" \u2014 "),II=a("a"),igo=o("ConvNextFeatureExtractor"),dgo=o(" (CvT model)"),cgo=l(),Ah=a("li"),Dse=a("strong"),mgo=o("data2vec-audio"),fgo=o(" \u2014 "),NI=a("a"),ggo=o("Wav2Vec2FeatureExtractor"),hgo=o(" (Data2VecAudio model)"),ugo=l(),yh=a("li"),Gse=a("strong"),pgo=o("data2vec-vision"),_go=o(" \u2014 "),qI=a("a"),bgo=o("BeitFeatureExtractor"),vgo=o(" (Data2VecVision model)"),Fgo=l(),Lh=a("li"),Ose=a("strong"),Tgo=o("deit"),Mgo=o(" \u2014 "),jI=a("a"),Ego=o("DeiTFeatureExtractor"),Cgo=o(" (DeiT model)"),wgo=l(),xh=a("li"),Vse=a("strong"),Ago=o("detr"),ygo=o(" \u2014 "),DI=a("a"),Lgo=o("DetrFeatureExtractor"),xgo=o(" (DETR model)"),$go=l(),$h=a("li"),Xse=a("strong"),kgo=o("dpt"),Sgo=o(" \u2014 "),GI=a("a"),Rgo=o("DPTFeatureExtractor"),Pgo=o(" (DPT model)"),Bgo=l(),kh=a("li"),zse=a("strong"),Igo=o("flava"),Ngo=o(" \u2014 "),OI=a("a"),qgo=o("FlavaFeatureExtractor"),jgo=o(" (FLAVA model)"),Dgo=l(),Sh=a("li"),Wse=a("strong"),Ggo=o("glpn"),Ogo=o(" \u2014 "),VI=a("a"),Vgo=o("GLPNFeatureExtractor"),Xgo=o(" (GLPN model)"),zgo=l(),Rh=a("li"),Qse=a("strong"),Wgo=o("hubert"),Qgo=o(" \u2014 "),XI=a("a"),Hgo=o("Wav2Vec2FeatureExtractor"),Ugo=o(" (Hubert model)"),Jgo=l(),Ph=a("li"),Hse=a("strong"),Ygo=o("imagegpt"),Kgo=o(" \u2014 "),zI=a("a"),Zgo=o("ImageGPTFeatureExtractor"),eho=o(" (ImageGPT model)"),oho=l(),Bh=a("li"),Use=a("strong"),rho=o("layoutlmv2"),tho=o(" \u2014 "),WI=a("a"),aho=o("LayoutLMv2FeatureExtractor"),nho=o(" (LayoutLMv2 model)"),sho=l(),Ih=a("li"),Jse=a("strong"),lho=o("layoutlmv3"),iho=o(" \u2014 "),QI=a("a"),dho=o("LayoutLMv3FeatureExtractor"),cho=o(" (LayoutLMv3 model)"),mho=l(),Nh=a("li"),Yse=a("strong"),fho=o("levit"),gho=o(" \u2014 "),HI=a("a"),hho=o("LevitFeatureExtractor"),uho=o(" (LeViT model)"),pho=l(),qh=a("li"),Kse=a("strong"),_ho=o("maskformer"),bho=o(" \u2014 "),UI=a("a"),vho=o("MaskFormerFeatureExtractor"),Fho=o(" (MaskFormer model)"),Tho=l(),jh=a("li"),Zse=a("strong"),Mho=o("mctct"),Eho=o(" \u2014 "),JI=a("a"),Cho=o("MCTCTFeatureExtractor"),who=o(" (M-CTC-T model)"),Aho=l(),Dh=a("li"),ele=a("strong"),yho=o("perceiver"),Lho=o(" \u2014 "),YI=a("a"),xho=o("PerceiverFeatureExtractor"),$ho=o(" (Perceiver model)"),kho=l(),Gh=a("li"),ole=a("strong"),Sho=o("poolformer"),Rho=o(" \u2014 "),KI=a("a"),Pho=o("PoolFormerFeatureExtractor"),Bho=o(" (PoolFormer model)"),Iho=l(),Oh=a("li"),rle=a("strong"),Nho=o("regnet"),qho=o(" \u2014 "),ZI=a("a"),jho=o("ConvNextFeatureExtractor"),Dho=o(" (RegNet model)"),Gho=l(),Vh=a("li"),tle=a("strong"),Oho=o("resnet"),Vho=o(" \u2014 "),eN=a("a"),Xho=o("ConvNextFeatureExtractor"),zho=o(" (ResNet model)"),Who=l(),Xh=a("li"),ale=a("strong"),Qho=o("segformer"),Hho=o(" \u2014 "),oN=a("a"),Uho=o("SegformerFeatureExtractor"),Jho=o(" (SegFormer model)"),Yho=l(),zh=a("li"),nle=a("strong"),Kho=o("speech_to_text"),Zho=o(" \u2014 "),rN=a("a"),euo=o("Speech2TextFeatureExtractor"),ouo=o(" (Speech2Text model)"),ruo=l(),Wh=a("li"),sle=a("strong"),tuo=o("swin"),auo=o(" \u2014 "),tN=a("a"),nuo=o("ViTFeatureExtractor"),suo=o(" (Swin Transformer model)"),luo=l(),Qh=a("li"),lle=a("strong"),iuo=o("van"),duo=o(" \u2014 "),aN=a("a"),cuo=o("ConvNextFeatureExtractor"),muo=o(" (VAN model)"),fuo=l(),Hh=a("li"),ile=a("strong"),guo=o("vilt"),huo=o(" \u2014 "),nN=a("a"),uuo=o("ViltFeatureExtractor"),puo=o(" (ViLT model)"),_uo=l(),Uh=a("li"),dle=a("strong"),buo=o("vit"),vuo=o(" \u2014 "),sN=a("a"),Fuo=o("ViTFeatureExtractor"),Tuo=o(" (ViT model)"),Muo=l(),Jh=a("li"),cle=a("strong"),Euo=o("vit_mae"),Cuo=o(" \u2014 "),lN=a("a"),wuo=o("ViTFeatureExtractor"),Auo=o(" (ViTMAE model)"),yuo=l(),Yh=a("li"),mle=a("strong"),Luo=o("wav2vec2"),xuo=o(" \u2014 "),iN=a("a"),$uo=o("Wav2Vec2FeatureExtractor"),kuo=o(" (Wav2Vec2 model)"),Suo=l(),Kh=a("li"),fle=a("strong"),Ruo=o("wav2vec2-conformer"),Puo=o(" \u2014 "),dN=a("a"),Buo=o("Wav2Vec2FeatureExtractor"),Iuo=o(" (Wav2Vec2-Conformer model)"),Nuo=l(),Zh=a("li"),gle=a("strong"),quo=o("yolos"),juo=o(" \u2014 "),cN=a("a"),Duo=o("YolosFeatureExtractor"),Guo=o(" (YOLOS model)"),Ouo=l(),F(eu.$$.fragment),Vuo=l(),F(ou.$$.fragment),Xuo=l(),ru=a("div"),F(xL.$$.fragment),zuo=l(),hle=a("p"),Wuo=o("Register a new feature extractor for this class."),ADe=l(),ki=a("h2"),tu=a("a"),ule=a("span"),F($L.$$.fragment),Quo=l(),ple=a("span"),Huo=o("AutoProcessor"),yDe=l(),Lo=a("div"),F(kL.$$.fragment),Uuo=l(),SL=a("p"),Juo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mN=a("a"),Yuo=o("AutoProcessor.from_pretrained()"),Kuo=o(" class method."),Zuo=l(),RL=a("p"),epo=o("This class cannot be instantiated directly using "),_le=a("code"),opo=o("__init__()"),rpo=o(" (throws an error)."),tpo=l(),Ue=a("div"),F(PL.$$.fragment),apo=l(),ble=a("p"),npo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),spo=l(),Si=a("p"),lpo=o("The processor class to instantiate is selected based on the "),vle=a("code"),ipo=o("model_type"),dpo=o(` property of the config object (either
passed as an argument or loaded from `),Fle=a("code"),cpo=o("pretrained_model_name_or_path"),mpo=o(" if possible):"),fpo=l(),he=a("ul"),au=a("li"),Tle=a("strong"),gpo=o("clip"),hpo=o(" \u2014 "),fN=a("a"),upo=o("CLIPProcessor"),ppo=o(" (CLIP model)"),_po=l(),nu=a("li"),Mle=a("strong"),bpo=o("flava"),vpo=o(" \u2014 "),Ele=a("code"),Fpo=o("FLAVAProcessor"),Tpo=o(" (FLAVA model)"),Mpo=l(),su=a("li"),Cle=a("strong"),Epo=o("layoutlmv2"),Cpo=o(" \u2014 "),gN=a("a"),wpo=o("LayoutLMv2Processor"),Apo=o(" (LayoutLMv2 model)"),ypo=l(),lu=a("li"),wle=a("strong"),Lpo=o("layoutlmv3"),xpo=o(" \u2014 "),hN=a("a"),$po=o("LayoutLMv3Processor"),kpo=o(" (LayoutLMv3 model)"),Spo=l(),iu=a("li"),Ale=a("strong"),Rpo=o("layoutxlm"),Ppo=o(" \u2014 "),uN=a("a"),Bpo=o("LayoutXLMProcessor"),Ipo=o(" (LayoutXLM model)"),Npo=l(),du=a("li"),yle=a("strong"),qpo=o("sew"),jpo=o(" \u2014 "),pN=a("a"),Dpo=o("Wav2Vec2Processor"),Gpo=o(" (SEW model)"),Opo=l(),cu=a("li"),Lle=a("strong"),Vpo=o("sew-d"),Xpo=o(" \u2014 "),_N=a("a"),zpo=o("Wav2Vec2Processor"),Wpo=o(" (SEW-D model)"),Qpo=l(),mu=a("li"),xle=a("strong"),Hpo=o("speech_to_text"),Upo=o(" \u2014 "),bN=a("a"),Jpo=o("Speech2TextProcessor"),Ypo=o(" (Speech2Text model)"),Kpo=l(),fu=a("li"),$le=a("strong"),Zpo=o("speech_to_text_2"),e_o=o(" \u2014 "),vN=a("a"),o_o=o("Speech2Text2Processor"),r_o=o(" (Speech2Text2 model)"),t_o=l(),gu=a("li"),kle=a("strong"),a_o=o("trocr"),n_o=o(" \u2014 "),FN=a("a"),s_o=o("TrOCRProcessor"),l_o=o(" (TrOCR model)"),i_o=l(),hu=a("li"),Sle=a("strong"),d_o=o("unispeech"),c_o=o(" \u2014 "),TN=a("a"),m_o=o("Wav2Vec2Processor"),f_o=o(" (UniSpeech model)"),g_o=l(),uu=a("li"),Rle=a("strong"),h_o=o("unispeech-sat"),u_o=o(" \u2014 "),MN=a("a"),p_o=o("Wav2Vec2Processor"),__o=o(" (UniSpeechSat model)"),b_o=l(),pu=a("li"),Ple=a("strong"),v_o=o("vilt"),F_o=o(" \u2014 "),EN=a("a"),T_o=o("ViltProcessor"),M_o=o(" (ViLT model)"),E_o=l(),_u=a("li"),Ble=a("strong"),C_o=o("vision-text-dual-encoder"),w_o=o(" \u2014 "),CN=a("a"),A_o=o("VisionTextDualEncoderProcessor"),y_o=o(" (VisionTextDualEncoder model)"),L_o=l(),bu=a("li"),Ile=a("strong"),x_o=o("wav2vec2"),$_o=o(" \u2014 "),wN=a("a"),k_o=o("Wav2Vec2Processor"),S_o=o(" (Wav2Vec2 model)"),R_o=l(),vu=a("li"),Nle=a("strong"),P_o=o("wav2vec2-conformer"),B_o=o(" \u2014 "),AN=a("a"),I_o=o("Wav2Vec2Processor"),N_o=o(" (Wav2Vec2-Conformer model)"),q_o=l(),Fu=a("li"),qle=a("strong"),j_o=o("wavlm"),D_o=o(" \u2014 "),yN=a("a"),G_o=o("Wav2Vec2Processor"),O_o=o(" (WavLM model)"),V_o=l(),F(Tu.$$.fragment),X_o=l(),F(Mu.$$.fragment),z_o=l(),Eu=a("div"),F(BL.$$.fragment),W_o=l(),jle=a("p"),Q_o=o("Register a new processor for this class."),LDe=l(),Ri=a("h2"),Cu=a("a"),Dle=a("span"),F(IL.$$.fragment),H_o=l(),Gle=a("span"),U_o=o("AutoModel"),xDe=l(),xo=a("div"),F(NL.$$.fragment),J_o=l(),Pi=a("p"),Y_o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LN=a("a"),K_o=o("from_pretrained()"),Z_o=o(" class method or the "),xN=a("a"),ebo=o("from_config()"),obo=o(` class
method.`),rbo=l(),qL=a("p"),tbo=o("This class cannot be instantiated directly using "),Ole=a("code"),abo=o("__init__()"),nbo=o(" (throws an error)."),sbo=l(),nt=a("div"),F(jL.$$.fragment),lbo=l(),Vle=a("p"),ibo=o("Instantiates one of the base model classes of the library from a configuration."),dbo=l(),Bi=a("p"),cbo=o(`Note:
Loading a model from its configuration file does `),Xle=a("strong"),mbo=o("not"),fbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),gbo=o("from_pretrained()"),hbo=o(" to load the model weights."),ubo=l(),F(wu.$$.fragment),pbo=l(),Je=a("div"),F(DL.$$.fragment),_bo=l(),zle=a("p"),bbo=o("Instantiate one of the base model classes of the library from a pretrained model."),vbo=l(),Sa=a("p"),Fbo=o("The model class to instantiate is selected based on the "),Wle=a("code"),Tbo=o("model_type"),Mbo=o(` property of the config object (either
passed as an argument or loaded from `),Qle=a("code"),Ebo=o("pretrained_model_name_or_path"),Cbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=a("code"),wbo=o("pretrained_model_name_or_path"),Abo=o(":"),ybo=l(),x=a("ul"),Au=a("li"),Ule=a("strong"),Lbo=o("albert"),xbo=o(" \u2014 "),kN=a("a"),$bo=o("AlbertModel"),kbo=o(" (ALBERT model)"),Sbo=l(),yu=a("li"),Jle=a("strong"),Rbo=o("bart"),Pbo=o(" \u2014 "),SN=a("a"),Bbo=o("BartModel"),Ibo=o(" (BART model)"),Nbo=l(),Lu=a("li"),Yle=a("strong"),qbo=o("beit"),jbo=o(" \u2014 "),RN=a("a"),Dbo=o("BeitModel"),Gbo=o(" (BEiT model)"),Obo=l(),xu=a("li"),Kle=a("strong"),Vbo=o("bert"),Xbo=o(" \u2014 "),PN=a("a"),zbo=o("BertModel"),Wbo=o(" (BERT model)"),Qbo=l(),$u=a("li"),Zle=a("strong"),Hbo=o("bert-generation"),Ubo=o(" \u2014 "),BN=a("a"),Jbo=o("BertGenerationEncoder"),Ybo=o(" (Bert Generation model)"),Kbo=l(),ku=a("li"),eie=a("strong"),Zbo=o("big_bird"),e2o=o(" \u2014 "),IN=a("a"),o2o=o("BigBirdModel"),r2o=o(" (BigBird model)"),t2o=l(),Su=a("li"),oie=a("strong"),a2o=o("bigbird_pegasus"),n2o=o(" \u2014 "),NN=a("a"),s2o=o("BigBirdPegasusModel"),l2o=o(" (BigBird-Pegasus model)"),i2o=l(),Ru=a("li"),rie=a("strong"),d2o=o("blenderbot"),c2o=o(" \u2014 "),qN=a("a"),m2o=o("BlenderbotModel"),f2o=o(" (Blenderbot model)"),g2o=l(),Pu=a("li"),tie=a("strong"),h2o=o("blenderbot-small"),u2o=o(" \u2014 "),jN=a("a"),p2o=o("BlenderbotSmallModel"),_2o=o(" (BlenderbotSmall model)"),b2o=l(),Bu=a("li"),aie=a("strong"),v2o=o("bloom"),F2o=o(" \u2014 "),DN=a("a"),T2o=o("BloomModel"),M2o=o(" (BLOOM model)"),E2o=l(),Iu=a("li"),nie=a("strong"),C2o=o("camembert"),w2o=o(" \u2014 "),GN=a("a"),A2o=o("CamembertModel"),y2o=o(" (CamemBERT model)"),L2o=l(),Nu=a("li"),sie=a("strong"),x2o=o("canine"),$2o=o(" \u2014 "),ON=a("a"),k2o=o("CanineModel"),S2o=o(" (CANINE model)"),R2o=l(),qu=a("li"),lie=a("strong"),P2o=o("clip"),B2o=o(" \u2014 "),VN=a("a"),I2o=o("CLIPModel"),N2o=o(" (CLIP model)"),q2o=l(),ju=a("li"),iie=a("strong"),j2o=o("convbert"),D2o=o(" \u2014 "),XN=a("a"),G2o=o("ConvBertModel"),O2o=o(" (ConvBERT model)"),V2o=l(),Du=a("li"),die=a("strong"),X2o=o("convnext"),z2o=o(" \u2014 "),zN=a("a"),W2o=o("ConvNextModel"),Q2o=o(" (ConvNeXT model)"),H2o=l(),Gu=a("li"),cie=a("strong"),U2o=o("ctrl"),J2o=o(" \u2014 "),WN=a("a"),Y2o=o("CTRLModel"),K2o=o(" (CTRL model)"),Z2o=l(),Ou=a("li"),mie=a("strong"),evo=o("cvt"),ovo=o(" \u2014 "),QN=a("a"),rvo=o("CvtModel"),tvo=o(" (CvT model)"),avo=l(),Vu=a("li"),fie=a("strong"),nvo=o("data2vec-audio"),svo=o(" \u2014 "),HN=a("a"),lvo=o("Data2VecAudioModel"),ivo=o(" (Data2VecAudio model)"),dvo=l(),Xu=a("li"),gie=a("strong"),cvo=o("data2vec-text"),mvo=o(" \u2014 "),UN=a("a"),fvo=o("Data2VecTextModel"),gvo=o(" (Data2VecText model)"),hvo=l(),zu=a("li"),hie=a("strong"),uvo=o("data2vec-vision"),pvo=o(" \u2014 "),JN=a("a"),_vo=o("Data2VecVisionModel"),bvo=o(" (Data2VecVision model)"),vvo=l(),Wu=a("li"),uie=a("strong"),Fvo=o("deberta"),Tvo=o(" \u2014 "),YN=a("a"),Mvo=o("DebertaModel"),Evo=o(" (DeBERTa model)"),Cvo=l(),Qu=a("li"),pie=a("strong"),wvo=o("deberta-v2"),Avo=o(" \u2014 "),KN=a("a"),yvo=o("DebertaV2Model"),Lvo=o(" (DeBERTa-v2 model)"),xvo=l(),Hu=a("li"),_ie=a("strong"),$vo=o("decision_transformer"),kvo=o(" \u2014 "),ZN=a("a"),Svo=o("DecisionTransformerModel"),Rvo=o(" (Decision Transformer model)"),Pvo=l(),Uu=a("li"),bie=a("strong"),Bvo=o("deit"),Ivo=o(" \u2014 "),eq=a("a"),Nvo=o("DeiTModel"),qvo=o(" (DeiT model)"),jvo=l(),Ju=a("li"),vie=a("strong"),Dvo=o("detr"),Gvo=o(" \u2014 "),oq=a("a"),Ovo=o("DetrModel"),Vvo=o(" (DETR model)"),Xvo=l(),Yu=a("li"),Fie=a("strong"),zvo=o("distilbert"),Wvo=o(" \u2014 "),rq=a("a"),Qvo=o("DistilBertModel"),Hvo=o(" (DistilBERT model)"),Uvo=l(),Ku=a("li"),Tie=a("strong"),Jvo=o("dpr"),Yvo=o(" \u2014 "),tq=a("a"),Kvo=o("DPRQuestionEncoder"),Zvo=o(" (DPR model)"),eFo=l(),Zu=a("li"),Mie=a("strong"),oFo=o("dpt"),rFo=o(" \u2014 "),aq=a("a"),tFo=o("DPTModel"),aFo=o(" (DPT model)"),nFo=l(),ep=a("li"),Eie=a("strong"),sFo=o("electra"),lFo=o(" \u2014 "),nq=a("a"),iFo=o("ElectraModel"),dFo=o(" (ELECTRA model)"),cFo=l(),op=a("li"),Cie=a("strong"),mFo=o("flaubert"),fFo=o(" \u2014 "),sq=a("a"),gFo=o("FlaubertModel"),hFo=o(" (FlauBERT model)"),uFo=l(),rp=a("li"),wie=a("strong"),pFo=o("flava"),_Fo=o(" \u2014 "),lq=a("a"),bFo=o("FlavaModel"),vFo=o(" (FLAVA model)"),FFo=l(),tp=a("li"),Aie=a("strong"),TFo=o("fnet"),MFo=o(" \u2014 "),iq=a("a"),EFo=o("FNetModel"),CFo=o(" (FNet model)"),wFo=l(),ap=a("li"),yie=a("strong"),AFo=o("fsmt"),yFo=o(" \u2014 "),dq=a("a"),LFo=o("FSMTModel"),xFo=o(" (FairSeq Machine-Translation model)"),$Fo=l(),Ds=a("li"),Lie=a("strong"),kFo=o("funnel"),SFo=o(" \u2014 "),cq=a("a"),RFo=o("FunnelModel"),PFo=o(" or "),mq=a("a"),BFo=o("FunnelBaseModel"),IFo=o(" (Funnel Transformer model)"),NFo=l(),np=a("li"),xie=a("strong"),qFo=o("glpn"),jFo=o(" \u2014 "),fq=a("a"),DFo=o("GLPNModel"),GFo=o(" (GLPN model)"),OFo=l(),sp=a("li"),$ie=a("strong"),VFo=o("gpt2"),XFo=o(" \u2014 "),gq=a("a"),zFo=o("GPT2Model"),WFo=o(" (OpenAI GPT-2 model)"),QFo=l(),lp=a("li"),kie=a("strong"),HFo=o("gpt_neo"),UFo=o(" \u2014 "),hq=a("a"),JFo=o("GPTNeoModel"),YFo=o(" (GPT Neo model)"),KFo=l(),ip=a("li"),Sie=a("strong"),ZFo=o("gpt_neox"),e1o=o(" \u2014 "),uq=a("a"),o1o=o("GPTNeoXModel"),r1o=o(" (GPT NeoX model)"),t1o=l(),dp=a("li"),Rie=a("strong"),a1o=o("gptj"),n1o=o(" \u2014 "),pq=a("a"),s1o=o("GPTJModel"),l1o=o(" (GPT-J model)"),i1o=l(),cp=a("li"),Pie=a("strong"),d1o=o("hubert"),c1o=o(" \u2014 "),_q=a("a"),m1o=o("HubertModel"),f1o=o(" (Hubert model)"),g1o=l(),mp=a("li"),Bie=a("strong"),h1o=o("ibert"),u1o=o(" \u2014 "),bq=a("a"),p1o=o("IBertModel"),_1o=o(" (I-BERT model)"),b1o=l(),fp=a("li"),Iie=a("strong"),v1o=o("imagegpt"),F1o=o(" \u2014 "),vq=a("a"),T1o=o("ImageGPTModel"),M1o=o(" (ImageGPT model)"),E1o=l(),gp=a("li"),Nie=a("strong"),C1o=o("layoutlm"),w1o=o(" \u2014 "),Fq=a("a"),A1o=o("LayoutLMModel"),y1o=o(" (LayoutLM model)"),L1o=l(),hp=a("li"),qie=a("strong"),x1o=o("layoutlmv2"),$1o=o(" \u2014 "),Tq=a("a"),k1o=o("LayoutLMv2Model"),S1o=o(" (LayoutLMv2 model)"),R1o=l(),up=a("li"),jie=a("strong"),P1o=o("layoutlmv3"),B1o=o(" \u2014 "),Mq=a("a"),I1o=o("LayoutLMv3Model"),N1o=o(" (LayoutLMv3 model)"),q1o=l(),pp=a("li"),Die=a("strong"),j1o=o("led"),D1o=o(" \u2014 "),Eq=a("a"),G1o=o("LEDModel"),O1o=o(" (LED model)"),V1o=l(),_p=a("li"),Gie=a("strong"),X1o=o("levit"),z1o=o(" \u2014 "),Cq=a("a"),W1o=o("LevitModel"),Q1o=o(" (LeViT model)"),H1o=l(),bp=a("li"),Oie=a("strong"),U1o=o("longformer"),J1o=o(" \u2014 "),wq=a("a"),Y1o=o("LongformerModel"),K1o=o(" (Longformer model)"),Z1o=l(),vp=a("li"),Vie=a("strong"),eTo=o("luke"),oTo=o(" \u2014 "),Aq=a("a"),rTo=o("LukeModel"),tTo=o(" (LUKE model)"),aTo=l(),Fp=a("li"),Xie=a("strong"),nTo=o("lxmert"),sTo=o(" \u2014 "),yq=a("a"),lTo=o("LxmertModel"),iTo=o(" (LXMERT model)"),dTo=l(),Tp=a("li"),zie=a("strong"),cTo=o("m2m_100"),mTo=o(" \u2014 "),Lq=a("a"),fTo=o("M2M100Model"),gTo=o(" (M2M100 model)"),hTo=l(),Mp=a("li"),Wie=a("strong"),uTo=o("marian"),pTo=o(" \u2014 "),xq=a("a"),_To=o("MarianModel"),bTo=o(" (Marian model)"),vTo=l(),Ep=a("li"),Qie=a("strong"),FTo=o("maskformer"),TTo=o(" \u2014 "),$q=a("a"),MTo=o("MaskFormerModel"),ETo=o(" (MaskFormer model)"),CTo=l(),Cp=a("li"),Hie=a("strong"),wTo=o("mbart"),ATo=o(" \u2014 "),kq=a("a"),yTo=o("MBartModel"),LTo=o(" (mBART model)"),xTo=l(),wp=a("li"),Uie=a("strong"),$To=o("mctct"),kTo=o(" \u2014 "),Sq=a("a"),STo=o("MCTCTModel"),RTo=o(" (M-CTC-T model)"),PTo=l(),Ap=a("li"),Jie=a("strong"),BTo=o("megatron-bert"),ITo=o(" \u2014 "),Rq=a("a"),NTo=o("MegatronBertModel"),qTo=o(" (Megatron-BERT model)"),jTo=l(),yp=a("li"),Yie=a("strong"),DTo=o("mobilebert"),GTo=o(" \u2014 "),Pq=a("a"),OTo=o("MobileBertModel"),VTo=o(" (MobileBERT model)"),XTo=l(),Lp=a("li"),Kie=a("strong"),zTo=o("mpnet"),WTo=o(" \u2014 "),Bq=a("a"),QTo=o("MPNetModel"),HTo=o(" (MPNet model)"),UTo=l(),xp=a("li"),Zie=a("strong"),JTo=o("mt5"),YTo=o(" \u2014 "),Iq=a("a"),KTo=o("MT5Model"),ZTo=o(" (MT5 model)"),eMo=l(),$p=a("li"),ede=a("strong"),oMo=o("nystromformer"),rMo=o(" \u2014 "),Nq=a("a"),tMo=o("NystromformerModel"),aMo=o(" (Nystr\xF6mformer model)"),nMo=l(),kp=a("li"),ode=a("strong"),sMo=o("openai-gpt"),lMo=o(" \u2014 "),qq=a("a"),iMo=o("OpenAIGPTModel"),dMo=o(" (OpenAI GPT model)"),cMo=l(),Sp=a("li"),rde=a("strong"),mMo=o("opt"),fMo=o(" \u2014 "),jq=a("a"),gMo=o("OPTModel"),hMo=o(" (OPT model)"),uMo=l(),Rp=a("li"),tde=a("strong"),pMo=o("pegasus"),_Mo=o(" \u2014 "),Dq=a("a"),bMo=o("PegasusModel"),vMo=o(" (Pegasus model)"),FMo=l(),Pp=a("li"),ade=a("strong"),TMo=o("perceiver"),MMo=o(" \u2014 "),Gq=a("a"),EMo=o("PerceiverModel"),CMo=o(" (Perceiver model)"),wMo=l(),Bp=a("li"),nde=a("strong"),AMo=o("plbart"),yMo=o(" \u2014 "),Oq=a("a"),LMo=o("PLBartModel"),xMo=o(" (PLBart model)"),$Mo=l(),Ip=a("li"),sde=a("strong"),kMo=o("poolformer"),SMo=o(" \u2014 "),Vq=a("a"),RMo=o("PoolFormerModel"),PMo=o(" (PoolFormer model)"),BMo=l(),Np=a("li"),lde=a("strong"),IMo=o("prophetnet"),NMo=o(" \u2014 "),Xq=a("a"),qMo=o("ProphetNetModel"),jMo=o(" (ProphetNet model)"),DMo=l(),qp=a("li"),ide=a("strong"),GMo=o("qdqbert"),OMo=o(" \u2014 "),zq=a("a"),VMo=o("QDQBertModel"),XMo=o(" (QDQBert model)"),zMo=l(),jp=a("li"),dde=a("strong"),WMo=o("reformer"),QMo=o(" \u2014 "),Wq=a("a"),HMo=o("ReformerModel"),UMo=o(" (Reformer model)"),JMo=l(),Dp=a("li"),cde=a("strong"),YMo=o("regnet"),KMo=o(" \u2014 "),Qq=a("a"),ZMo=o("RegNetModel"),e4o=o(" (RegNet model)"),o4o=l(),Gp=a("li"),mde=a("strong"),r4o=o("rembert"),t4o=o(" \u2014 "),Hq=a("a"),a4o=o("RemBertModel"),n4o=o(" (RemBERT model)"),s4o=l(),Op=a("li"),fde=a("strong"),l4o=o("resnet"),i4o=o(" \u2014 "),Uq=a("a"),d4o=o("ResNetModel"),c4o=o(" (ResNet model)"),m4o=l(),Vp=a("li"),gde=a("strong"),f4o=o("retribert"),g4o=o(" \u2014 "),Jq=a("a"),h4o=o("RetriBertModel"),u4o=o(" (RetriBERT model)"),p4o=l(),Xp=a("li"),hde=a("strong"),_4o=o("roberta"),b4o=o(" \u2014 "),Yq=a("a"),v4o=o("RobertaModel"),F4o=o(" (RoBERTa model)"),T4o=l(),zp=a("li"),ude=a("strong"),M4o=o("roformer"),E4o=o(" \u2014 "),Kq=a("a"),C4o=o("RoFormerModel"),w4o=o(" (RoFormer model)"),A4o=l(),Wp=a("li"),pde=a("strong"),y4o=o("segformer"),L4o=o(" \u2014 "),Zq=a("a"),x4o=o("SegformerModel"),$4o=o(" (SegFormer model)"),k4o=l(),Qp=a("li"),_de=a("strong"),S4o=o("sew"),R4o=o(" \u2014 "),ej=a("a"),P4o=o("SEWModel"),B4o=o(" (SEW model)"),I4o=l(),Hp=a("li"),bde=a("strong"),N4o=o("sew-d"),q4o=o(" \u2014 "),oj=a("a"),j4o=o("SEWDModel"),D4o=o(" (SEW-D model)"),G4o=l(),Up=a("li"),vde=a("strong"),O4o=o("speech_to_text"),V4o=o(" \u2014 "),rj=a("a"),X4o=o("Speech2TextModel"),z4o=o(" (Speech2Text model)"),W4o=l(),Jp=a("li"),Fde=a("strong"),Q4o=o("splinter"),H4o=o(" \u2014 "),tj=a("a"),U4o=o("SplinterModel"),J4o=o(" (Splinter model)"),Y4o=l(),Yp=a("li"),Tde=a("strong"),K4o=o("squeezebert"),Z4o=o(" \u2014 "),aj=a("a"),eEo=o("SqueezeBertModel"),oEo=o(" (SqueezeBERT model)"),rEo=l(),Kp=a("li"),Mde=a("strong"),tEo=o("swin"),aEo=o(" \u2014 "),nj=a("a"),nEo=o("SwinModel"),sEo=o(" (Swin Transformer model)"),lEo=l(),Zp=a("li"),Ede=a("strong"),iEo=o("t5"),dEo=o(" \u2014 "),sj=a("a"),cEo=o("T5Model"),mEo=o(" (T5 model)"),fEo=l(),e_=a("li"),Cde=a("strong"),gEo=o("tapas"),hEo=o(" \u2014 "),lj=a("a"),uEo=o("TapasModel"),pEo=o(" (TAPAS model)"),_Eo=l(),o_=a("li"),wde=a("strong"),bEo=o("trajectory_transformer"),vEo=o(" \u2014 "),ij=a("a"),FEo=o("TrajectoryTransformerModel"),TEo=o(" (Trajectory Transformer model)"),MEo=l(),r_=a("li"),Ade=a("strong"),EEo=o("transfo-xl"),CEo=o(" \u2014 "),dj=a("a"),wEo=o("TransfoXLModel"),AEo=o(" (Transformer-XL model)"),yEo=l(),t_=a("li"),yde=a("strong"),LEo=o("unispeech"),xEo=o(" \u2014 "),cj=a("a"),$Eo=o("UniSpeechModel"),kEo=o(" (UniSpeech model)"),SEo=l(),a_=a("li"),Lde=a("strong"),REo=o("unispeech-sat"),PEo=o(" \u2014 "),mj=a("a"),BEo=o("UniSpeechSatModel"),IEo=o(" (UniSpeechSat model)"),NEo=l(),n_=a("li"),xde=a("strong"),qEo=o("van"),jEo=o(" \u2014 "),fj=a("a"),DEo=o("VanModel"),GEo=o(" (VAN model)"),OEo=l(),s_=a("li"),$de=a("strong"),VEo=o("vilt"),XEo=o(" \u2014 "),gj=a("a"),zEo=o("ViltModel"),WEo=o(" (ViLT model)"),QEo=l(),l_=a("li"),kde=a("strong"),HEo=o("vision-text-dual-encoder"),UEo=o(" \u2014 "),hj=a("a"),JEo=o("VisionTextDualEncoderModel"),YEo=o(" (VisionTextDualEncoder model)"),KEo=l(),i_=a("li"),Sde=a("strong"),ZEo=o("visual_bert"),eCo=o(" \u2014 "),uj=a("a"),oCo=o("VisualBertModel"),rCo=o(" (VisualBERT model)"),tCo=l(),d_=a("li"),Rde=a("strong"),aCo=o("vit"),nCo=o(" \u2014 "),pj=a("a"),sCo=o("ViTModel"),lCo=o(" (ViT model)"),iCo=l(),c_=a("li"),Pde=a("strong"),dCo=o("vit_mae"),cCo=o(" \u2014 "),_j=a("a"),mCo=o("ViTMAEModel"),fCo=o(" (ViTMAE model)"),gCo=l(),m_=a("li"),Bde=a("strong"),hCo=o("wav2vec2"),uCo=o(" \u2014 "),bj=a("a"),pCo=o("Wav2Vec2Model"),_Co=o(" (Wav2Vec2 model)"),bCo=l(),f_=a("li"),Ide=a("strong"),vCo=o("wav2vec2-conformer"),FCo=o(" \u2014 "),vj=a("a"),TCo=o("Wav2Vec2ConformerModel"),MCo=o(" (Wav2Vec2-Conformer model)"),ECo=l(),g_=a("li"),Nde=a("strong"),CCo=o("wavlm"),wCo=o(" \u2014 "),Fj=a("a"),ACo=o("WavLMModel"),yCo=o(" (WavLM model)"),LCo=l(),h_=a("li"),qde=a("strong"),xCo=o("xglm"),$Co=o(" \u2014 "),Tj=a("a"),kCo=o("XGLMModel"),SCo=o(" (XGLM model)"),RCo=l(),u_=a("li"),jde=a("strong"),PCo=o("xlm"),BCo=o(" \u2014 "),Mj=a("a"),ICo=o("XLMModel"),NCo=o(" (XLM model)"),qCo=l(),p_=a("li"),Dde=a("strong"),jCo=o("xlm-prophetnet"),DCo=o(" \u2014 "),Ej=a("a"),GCo=o("XLMProphetNetModel"),OCo=o(" (XLM-ProphetNet model)"),VCo=l(),__=a("li"),Gde=a("strong"),XCo=o("xlm-roberta"),zCo=o(" \u2014 "),Cj=a("a"),WCo=o("XLMRobertaModel"),QCo=o(" (XLM-RoBERTa model)"),HCo=l(),b_=a("li"),Ode=a("strong"),UCo=o("xlm-roberta-xl"),JCo=o(" \u2014 "),wj=a("a"),YCo=o("XLMRobertaXLModel"),KCo=o(" (XLM-RoBERTa-XL model)"),ZCo=l(),v_=a("li"),Vde=a("strong"),e5o=o("xlnet"),o5o=o(" \u2014 "),Aj=a("a"),r5o=o("XLNetModel"),t5o=o(" (XLNet model)"),a5o=l(),F_=a("li"),Xde=a("strong"),n5o=o("yolos"),s5o=o(" \u2014 "),yj=a("a"),l5o=o("YolosModel"),i5o=o(" (YOLOS model)"),d5o=l(),T_=a("li"),zde=a("strong"),c5o=o("yoso"),m5o=o(" \u2014 "),Lj=a("a"),f5o=o("YosoModel"),g5o=o(" (YOSO model)"),h5o=l(),M_=a("p"),u5o=o("The model is set in evaluation mode by default using "),Wde=a("code"),p5o=o("model.eval()"),_5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=a("code"),b5o=o("model.train()"),v5o=l(),F(E_.$$.fragment),$De=l(),Ii=a("h2"),C_=a("a"),Hde=a("span"),F(GL.$$.fragment),F5o=l(),Ude=a("span"),T5o=o("AutoModelForPreTraining"),kDe=l(),$o=a("div"),F(OL.$$.fragment),M5o=l(),Ni=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xj=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),$j=a("a"),A5o=o("from_config()"),y5o=o(` class
method.`),L5o=l(),VL=a("p"),x5o=o("This class cannot be instantiated directly using "),Jde=a("code"),$5o=o("__init__()"),k5o=o(" (throws an error)."),S5o=l(),st=a("div"),F(XL.$$.fragment),R5o=l(),Yde=a("p"),P5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B5o=l(),qi=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),N5o=o("not"),q5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),F(w_.$$.fragment),O5o=l(),Ye=a("div"),F(zL.$$.fragment),V5o=l(),Zde=a("p"),X5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z5o=l(),Ra=a("p"),W5o=o("The model class to instantiate is selected based on the "),ece=a("code"),Q5o=o("model_type"),H5o=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),U5o=o("pretrained_model_name_or_path"),J5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(":"),Z5o=l(),G=a("ul"),A_=a("li"),tce=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),Sj=a("a"),r3o=o("AlbertForPreTraining"),t3o=o(" (ALBERT model)"),a3o=l(),y_=a("li"),ace=a("strong"),n3o=o("bart"),s3o=o(" \u2014 "),Rj=a("a"),l3o=o("BartForConditionalGeneration"),i3o=o(" (BART model)"),d3o=l(),L_=a("li"),nce=a("strong"),c3o=o("bert"),m3o=o(" \u2014 "),Pj=a("a"),f3o=o("BertForPreTraining"),g3o=o(" (BERT model)"),h3o=l(),x_=a("li"),sce=a("strong"),u3o=o("big_bird"),p3o=o(" \u2014 "),Bj=a("a"),_3o=o("BigBirdForPreTraining"),b3o=o(" (BigBird model)"),v3o=l(),$_=a("li"),lce=a("strong"),F3o=o("bloom"),T3o=o(" \u2014 "),Ij=a("a"),M3o=o("BloomForCausalLM"),E3o=o(" (BLOOM model)"),C3o=l(),k_=a("li"),ice=a("strong"),w3o=o("camembert"),A3o=o(" \u2014 "),Nj=a("a"),y3o=o("CamembertForMaskedLM"),L3o=o(" (CamemBERT model)"),x3o=l(),S_=a("li"),dce=a("strong"),$3o=o("ctrl"),k3o=o(" \u2014 "),qj=a("a"),S3o=o("CTRLLMHeadModel"),R3o=o(" (CTRL model)"),P3o=l(),R_=a("li"),cce=a("strong"),B3o=o("data2vec-text"),I3o=o(" \u2014 "),jj=a("a"),N3o=o("Data2VecTextForMaskedLM"),q3o=o(" (Data2VecText model)"),j3o=l(),P_=a("li"),mce=a("strong"),D3o=o("deberta"),G3o=o(" \u2014 "),Dj=a("a"),O3o=o("DebertaForMaskedLM"),V3o=o(" (DeBERTa model)"),X3o=l(),B_=a("li"),fce=a("strong"),z3o=o("deberta-v2"),W3o=o(" \u2014 "),Gj=a("a"),Q3o=o("DebertaV2ForMaskedLM"),H3o=o(" (DeBERTa-v2 model)"),U3o=l(),I_=a("li"),gce=a("strong"),J3o=o("distilbert"),Y3o=o(" \u2014 "),Oj=a("a"),K3o=o("DistilBertForMaskedLM"),Z3o=o(" (DistilBERT model)"),ewo=l(),N_=a("li"),hce=a("strong"),owo=o("electra"),rwo=o(" \u2014 "),Vj=a("a"),two=o("ElectraForPreTraining"),awo=o(" (ELECTRA model)"),nwo=l(),q_=a("li"),uce=a("strong"),swo=o("flaubert"),lwo=o(" \u2014 "),Xj=a("a"),iwo=o("FlaubertWithLMHeadModel"),dwo=o(" (FlauBERT model)"),cwo=l(),j_=a("li"),pce=a("strong"),mwo=o("flava"),fwo=o(" \u2014 "),zj=a("a"),gwo=o("FlavaForPreTraining"),hwo=o(" (FLAVA model)"),uwo=l(),D_=a("li"),_ce=a("strong"),pwo=o("fnet"),_wo=o(" \u2014 "),Wj=a("a"),bwo=o("FNetForPreTraining"),vwo=o(" (FNet model)"),Fwo=l(),G_=a("li"),bce=a("strong"),Two=o("fsmt"),Mwo=o(" \u2014 "),Qj=a("a"),Ewo=o("FSMTForConditionalGeneration"),Cwo=o(" (FairSeq Machine-Translation model)"),wwo=l(),O_=a("li"),vce=a("strong"),Awo=o("funnel"),ywo=o(" \u2014 "),Hj=a("a"),Lwo=o("FunnelForPreTraining"),xwo=o(" (Funnel Transformer model)"),$wo=l(),V_=a("li"),Fce=a("strong"),kwo=o("gpt2"),Swo=o(" \u2014 "),Uj=a("a"),Rwo=o("GPT2LMHeadModel"),Pwo=o(" (OpenAI GPT-2 model)"),Bwo=l(),X_=a("li"),Tce=a("strong"),Iwo=o("ibert"),Nwo=o(" \u2014 "),Jj=a("a"),qwo=o("IBertForMaskedLM"),jwo=o(" (I-BERT model)"),Dwo=l(),z_=a("li"),Mce=a("strong"),Gwo=o("layoutlm"),Owo=o(" \u2014 "),Yj=a("a"),Vwo=o("LayoutLMForMaskedLM"),Xwo=o(" (LayoutLM model)"),zwo=l(),W_=a("li"),Ece=a("strong"),Wwo=o("longformer"),Qwo=o(" \u2014 "),Kj=a("a"),Hwo=o("LongformerForMaskedLM"),Uwo=o(" (Longformer model)"),Jwo=l(),Q_=a("li"),Cce=a("strong"),Ywo=o("lxmert"),Kwo=o(" \u2014 "),Zj=a("a"),Zwo=o("LxmertForPreTraining"),e0o=o(" (LXMERT model)"),o0o=l(),H_=a("li"),wce=a("strong"),r0o=o("megatron-bert"),t0o=o(" \u2014 "),eD=a("a"),a0o=o("MegatronBertForPreTraining"),n0o=o(" (Megatron-BERT model)"),s0o=l(),U_=a("li"),Ace=a("strong"),l0o=o("mobilebert"),i0o=o(" \u2014 "),oD=a("a"),d0o=o("MobileBertForPreTraining"),c0o=o(" (MobileBERT model)"),m0o=l(),J_=a("li"),yce=a("strong"),f0o=o("mpnet"),g0o=o(" \u2014 "),rD=a("a"),h0o=o("MPNetForMaskedLM"),u0o=o(" (MPNet model)"),p0o=l(),Y_=a("li"),Lce=a("strong"),_0o=o("openai-gpt"),b0o=o(" \u2014 "),tD=a("a"),v0o=o("OpenAIGPTLMHeadModel"),F0o=o(" (OpenAI GPT model)"),T0o=l(),K_=a("li"),xce=a("strong"),M0o=o("retribert"),E0o=o(" \u2014 "),aD=a("a"),C0o=o("RetriBertModel"),w0o=o(" (RetriBERT model)"),A0o=l(),Z_=a("li"),$ce=a("strong"),y0o=o("roberta"),L0o=o(" \u2014 "),nD=a("a"),x0o=o("RobertaForMaskedLM"),$0o=o(" (RoBERTa model)"),k0o=l(),eb=a("li"),kce=a("strong"),S0o=o("splinter"),R0o=o(" \u2014 "),sD=a("a"),P0o=o("SplinterForPreTraining"),B0o=o(" (Splinter model)"),I0o=l(),ob=a("li"),Sce=a("strong"),N0o=o("squeezebert"),q0o=o(" \u2014 "),lD=a("a"),j0o=o("SqueezeBertForMaskedLM"),D0o=o(" (SqueezeBERT model)"),G0o=l(),rb=a("li"),Rce=a("strong"),O0o=o("t5"),V0o=o(" \u2014 "),iD=a("a"),X0o=o("T5ForConditionalGeneration"),z0o=o(" (T5 model)"),W0o=l(),tb=a("li"),Pce=a("strong"),Q0o=o("tapas"),H0o=o(" \u2014 "),dD=a("a"),U0o=o("TapasForMaskedLM"),J0o=o(" (TAPAS model)"),Y0o=l(),ab=a("li"),Bce=a("strong"),K0o=o("transfo-xl"),Z0o=o(" \u2014 "),cD=a("a"),eAo=o("TransfoXLLMHeadModel"),oAo=o(" (Transformer-XL model)"),rAo=l(),nb=a("li"),Ice=a("strong"),tAo=o("unispeech"),aAo=o(" \u2014 "),mD=a("a"),nAo=o("UniSpeechForPreTraining"),sAo=o(" (UniSpeech model)"),lAo=l(),sb=a("li"),Nce=a("strong"),iAo=o("unispeech-sat"),dAo=o(" \u2014 "),fD=a("a"),cAo=o("UniSpeechSatForPreTraining"),mAo=o(" (UniSpeechSat model)"),fAo=l(),lb=a("li"),qce=a("strong"),gAo=o("visual_bert"),hAo=o(" \u2014 "),gD=a("a"),uAo=o("VisualBertForPreTraining"),pAo=o(" (VisualBERT model)"),_Ao=l(),ib=a("li"),jce=a("strong"),bAo=o("vit_mae"),vAo=o(" \u2014 "),hD=a("a"),FAo=o("ViTMAEForPreTraining"),TAo=o(" (ViTMAE model)"),MAo=l(),db=a("li"),Dce=a("strong"),EAo=o("wav2vec2"),CAo=o(" \u2014 "),uD=a("a"),wAo=o("Wav2Vec2ForPreTraining"),AAo=o(" (Wav2Vec2 model)"),yAo=l(),cb=a("li"),Gce=a("strong"),LAo=o("wav2vec2-conformer"),xAo=o(" \u2014 "),pD=a("a"),$Ao=o("Wav2Vec2ConformerForPreTraining"),kAo=o(" (Wav2Vec2-Conformer model)"),SAo=l(),mb=a("li"),Oce=a("strong"),RAo=o("xlm"),PAo=o(" \u2014 "),_D=a("a"),BAo=o("XLMWithLMHeadModel"),IAo=o(" (XLM model)"),NAo=l(),fb=a("li"),Vce=a("strong"),qAo=o("xlm-roberta"),jAo=o(" \u2014 "),bD=a("a"),DAo=o("XLMRobertaForMaskedLM"),GAo=o(" (XLM-RoBERTa model)"),OAo=l(),gb=a("li"),Xce=a("strong"),VAo=o("xlm-roberta-xl"),XAo=o(" \u2014 "),vD=a("a"),zAo=o("XLMRobertaXLForMaskedLM"),WAo=o(" (XLM-RoBERTa-XL model)"),QAo=l(),hb=a("li"),zce=a("strong"),HAo=o("xlnet"),UAo=o(" \u2014 "),FD=a("a"),JAo=o("XLNetLMHeadModel"),YAo=o(" (XLNet model)"),KAo=l(),ub=a("p"),ZAo=o("The model is set in evaluation mode by default using "),Wce=a("code"),e6o=o("model.eval()"),o6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),r6o=o("model.train()"),t6o=l(),F(pb.$$.fragment),SDe=l(),ji=a("h2"),_b=a("a"),Hce=a("span"),F(WL.$$.fragment),a6o=l(),Uce=a("span"),n6o=o("AutoModelForCausalLM"),RDe=l(),ko=a("div"),F(QL.$$.fragment),s6o=l(),Di=a("p"),l6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TD=a("a"),i6o=o("from_pretrained()"),d6o=o(" class method or the "),MD=a("a"),c6o=o("from_config()"),m6o=o(` class
method.`),f6o=l(),HL=a("p"),g6o=o("This class cannot be instantiated directly using "),Jce=a("code"),h6o=o("__init__()"),u6o=o(" (throws an error)."),p6o=l(),lt=a("div"),F(UL.$$.fragment),_6o=l(),Yce=a("p"),b6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v6o=l(),Gi=a("p"),F6o=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),T6o=o("not"),M6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=a("a"),E6o=o("from_pretrained()"),C6o=o(" to load the model weights."),w6o=l(),F(bb.$$.fragment),A6o=l(),Ke=a("div"),F(JL.$$.fragment),y6o=l(),Zce=a("p"),L6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x6o=l(),Pa=a("p"),$6o=o("The model class to instantiate is selected based on the "),eme=a("code"),k6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),R6o=o("pretrained_model_name_or_path"),P6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),B6o=o("pretrained_model_name_or_path"),I6o=o(":"),N6o=l(),z=a("ul"),vb=a("li"),tme=a("strong"),q6o=o("bart"),j6o=o(" \u2014 "),CD=a("a"),D6o=o("BartForCausalLM"),G6o=o(" (BART model)"),O6o=l(),Fb=a("li"),ame=a("strong"),V6o=o("bert"),X6o=o(" \u2014 "),wD=a("a"),z6o=o("BertLMHeadModel"),W6o=o(" (BERT model)"),Q6o=l(),Tb=a("li"),nme=a("strong"),H6o=o("bert-generation"),U6o=o(" \u2014 "),AD=a("a"),J6o=o("BertGenerationDecoder"),Y6o=o(" (Bert Generation model)"),K6o=l(),Mb=a("li"),sme=a("strong"),Z6o=o("big_bird"),eyo=o(" \u2014 "),yD=a("a"),oyo=o("BigBirdForCausalLM"),ryo=o(" (BigBird model)"),tyo=l(),Eb=a("li"),lme=a("strong"),ayo=o("bigbird_pegasus"),nyo=o(" \u2014 "),LD=a("a"),syo=o("BigBirdPegasusForCausalLM"),lyo=o(" (BigBird-Pegasus model)"),iyo=l(),Cb=a("li"),ime=a("strong"),dyo=o("blenderbot"),cyo=o(" \u2014 "),xD=a("a"),myo=o("BlenderbotForCausalLM"),fyo=o(" (Blenderbot model)"),gyo=l(),wb=a("li"),dme=a("strong"),hyo=o("blenderbot-small"),uyo=o(" \u2014 "),$D=a("a"),pyo=o("BlenderbotSmallForCausalLM"),_yo=o(" (BlenderbotSmall model)"),byo=l(),Ab=a("li"),cme=a("strong"),vyo=o("bloom"),Fyo=o(" \u2014 "),kD=a("a"),Tyo=o("BloomForCausalLM"),Myo=o(" (BLOOM model)"),Eyo=l(),yb=a("li"),mme=a("strong"),Cyo=o("camembert"),wyo=o(" \u2014 "),SD=a("a"),Ayo=o("CamembertForCausalLM"),yyo=o(" (CamemBERT model)"),Lyo=l(),Lb=a("li"),fme=a("strong"),xyo=o("ctrl"),$yo=o(" \u2014 "),RD=a("a"),kyo=o("CTRLLMHeadModel"),Syo=o(" (CTRL model)"),Ryo=l(),xb=a("li"),gme=a("strong"),Pyo=o("data2vec-text"),Byo=o(" \u2014 "),PD=a("a"),Iyo=o("Data2VecTextForCausalLM"),Nyo=o(" (Data2VecText model)"),qyo=l(),$b=a("li"),hme=a("strong"),jyo=o("electra"),Dyo=o(" \u2014 "),BD=a("a"),Gyo=o("ElectraForCausalLM"),Oyo=o(" (ELECTRA model)"),Vyo=l(),kb=a("li"),ume=a("strong"),Xyo=o("gpt2"),zyo=o(" \u2014 "),ID=a("a"),Wyo=o("GPT2LMHeadModel"),Qyo=o(" (OpenAI GPT-2 model)"),Hyo=l(),Sb=a("li"),pme=a("strong"),Uyo=o("gpt_neo"),Jyo=o(" \u2014 "),ND=a("a"),Yyo=o("GPTNeoForCausalLM"),Kyo=o(" (GPT Neo model)"),Zyo=l(),Rb=a("li"),_me=a("strong"),eLo=o("gpt_neox"),oLo=o(" \u2014 "),qD=a("a"),rLo=o("GPTNeoXForCausalLM"),tLo=o(" (GPT NeoX model)"),aLo=l(),Pb=a("li"),bme=a("strong"),nLo=o("gptj"),sLo=o(" \u2014 "),jD=a("a"),lLo=o("GPTJForCausalLM"),iLo=o(" (GPT-J model)"),dLo=l(),Bb=a("li"),vme=a("strong"),cLo=o("marian"),mLo=o(" \u2014 "),DD=a("a"),fLo=o("MarianForCausalLM"),gLo=o(" (Marian model)"),hLo=l(),Ib=a("li"),Fme=a("strong"),uLo=o("mbart"),pLo=o(" \u2014 "),GD=a("a"),_Lo=o("MBartForCausalLM"),bLo=o(" (mBART model)"),vLo=l(),Nb=a("li"),Tme=a("strong"),FLo=o("megatron-bert"),TLo=o(" \u2014 "),OD=a("a"),MLo=o("MegatronBertForCausalLM"),ELo=o(" (Megatron-BERT model)"),CLo=l(),qb=a("li"),Mme=a("strong"),wLo=o("openai-gpt"),ALo=o(" \u2014 "),VD=a("a"),yLo=o("OpenAIGPTLMHeadModel"),LLo=o(" (OpenAI GPT model)"),xLo=l(),jb=a("li"),Eme=a("strong"),$Lo=o("opt"),kLo=o(" \u2014 "),XD=a("a"),SLo=o("OPTForCausalLM"),RLo=o(" (OPT model)"),PLo=l(),Db=a("li"),Cme=a("strong"),BLo=o("pegasus"),ILo=o(" \u2014 "),zD=a("a"),NLo=o("PegasusForCausalLM"),qLo=o(" (Pegasus model)"),jLo=l(),Gb=a("li"),wme=a("strong"),DLo=o("plbart"),GLo=o(" \u2014 "),WD=a("a"),OLo=o("PLBartForCausalLM"),VLo=o(" (PLBart model)"),XLo=l(),Ob=a("li"),Ame=a("strong"),zLo=o("prophetnet"),WLo=o(" \u2014 "),QD=a("a"),QLo=o("ProphetNetForCausalLM"),HLo=o(" (ProphetNet model)"),ULo=l(),Vb=a("li"),yme=a("strong"),JLo=o("qdqbert"),YLo=o(" \u2014 "),HD=a("a"),KLo=o("QDQBertLMHeadModel"),ZLo=o(" (QDQBert model)"),e7o=l(),Xb=a("li"),Lme=a("strong"),o7o=o("reformer"),r7o=o(" \u2014 "),UD=a("a"),t7o=o("ReformerModelWithLMHead"),a7o=o(" (Reformer model)"),n7o=l(),zb=a("li"),xme=a("strong"),s7o=o("rembert"),l7o=o(" \u2014 "),JD=a("a"),i7o=o("RemBertForCausalLM"),d7o=o(" (RemBERT model)"),c7o=l(),Wb=a("li"),$me=a("strong"),m7o=o("roberta"),f7o=o(" \u2014 "),YD=a("a"),g7o=o("RobertaForCausalLM"),h7o=o(" (RoBERTa model)"),u7o=l(),Qb=a("li"),kme=a("strong"),p7o=o("roformer"),_7o=o(" \u2014 "),KD=a("a"),b7o=o("RoFormerForCausalLM"),v7o=o(" (RoFormer model)"),F7o=l(),Hb=a("li"),Sme=a("strong"),T7o=o("speech_to_text_2"),M7o=o(" \u2014 "),ZD=a("a"),E7o=o("Speech2Text2ForCausalLM"),C7o=o(" (Speech2Text2 model)"),w7o=l(),Ub=a("li"),Rme=a("strong"),A7o=o("transfo-xl"),y7o=o(" \u2014 "),eG=a("a"),L7o=o("TransfoXLLMHeadModel"),x7o=o(" (Transformer-XL model)"),$7o=l(),Jb=a("li"),Pme=a("strong"),k7o=o("trocr"),S7o=o(" \u2014 "),oG=a("a"),R7o=o("TrOCRForCausalLM"),P7o=o(" (TrOCR model)"),B7o=l(),Yb=a("li"),Bme=a("strong"),I7o=o("xglm"),N7o=o(" \u2014 "),rG=a("a"),q7o=o("XGLMForCausalLM"),j7o=o(" (XGLM model)"),D7o=l(),Kb=a("li"),Ime=a("strong"),G7o=o("xlm"),O7o=o(" \u2014 "),tG=a("a"),V7o=o("XLMWithLMHeadModel"),X7o=o(" (XLM model)"),z7o=l(),Zb=a("li"),Nme=a("strong"),W7o=o("xlm-prophetnet"),Q7o=o(" \u2014 "),aG=a("a"),H7o=o("XLMProphetNetForCausalLM"),U7o=o(" (XLM-ProphetNet model)"),J7o=l(),e2=a("li"),qme=a("strong"),Y7o=o("xlm-roberta"),K7o=o(" \u2014 "),nG=a("a"),Z7o=o("XLMRobertaForCausalLM"),e8o=o(" (XLM-RoBERTa model)"),o8o=l(),o2=a("li"),jme=a("strong"),r8o=o("xlm-roberta-xl"),t8o=o(" \u2014 "),sG=a("a"),a8o=o("XLMRobertaXLForCausalLM"),n8o=o(" (XLM-RoBERTa-XL model)"),s8o=l(),r2=a("li"),Dme=a("strong"),l8o=o("xlnet"),i8o=o(" \u2014 "),lG=a("a"),d8o=o("XLNetLMHeadModel"),c8o=o(" (XLNet model)"),m8o=l(),t2=a("p"),f8o=o("The model is set in evaluation mode by default using "),Gme=a("code"),g8o=o("model.eval()"),h8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),u8o=o("model.train()"),p8o=l(),F(a2.$$.fragment),PDe=l(),Oi=a("h2"),n2=a("a"),Vme=a("span"),F(YL.$$.fragment),_8o=l(),Xme=a("span"),b8o=o("AutoModelForMaskedLM"),BDe=l(),So=a("div"),F(KL.$$.fragment),v8o=l(),Vi=a("p"),F8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iG=a("a"),T8o=o("from_pretrained()"),M8o=o(" class method or the "),dG=a("a"),E8o=o("from_config()"),C8o=o(` class
method.`),w8o=l(),ZL=a("p"),A8o=o("This class cannot be instantiated directly using "),zme=a("code"),y8o=o("__init__()"),L8o=o(" (throws an error)."),x8o=l(),it=a("div"),F(e7.$$.fragment),$8o=l(),Wme=a("p"),k8o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S8o=l(),Xi=a("p"),R8o=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),P8o=o("not"),B8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),I8o=o("from_pretrained()"),N8o=o(" to load the model weights."),q8o=l(),F(s2.$$.fragment),j8o=l(),Ze=a("div"),F(o7.$$.fragment),D8o=l(),Hme=a("p"),G8o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O8o=l(),Ba=a("p"),V8o=o("The model class to instantiate is selected based on the "),Ume=a("code"),X8o=o("model_type"),z8o=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),W8o=o("pretrained_model_name_or_path"),Q8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),H8o=o("pretrained_model_name_or_path"),U8o=o(":"),J8o=l(),Q=a("ul"),l2=a("li"),Kme=a("strong"),Y8o=o("albert"),K8o=o(" \u2014 "),mG=a("a"),Z8o=o("AlbertForMaskedLM"),e9o=o(" (ALBERT model)"),o9o=l(),i2=a("li"),Zme=a("strong"),r9o=o("bart"),t9o=o(" \u2014 "),fG=a("a"),a9o=o("BartForConditionalGeneration"),n9o=o(" (BART model)"),s9o=l(),d2=a("li"),efe=a("strong"),l9o=o("bert"),i9o=o(" \u2014 "),gG=a("a"),d9o=o("BertForMaskedLM"),c9o=o(" (BERT model)"),m9o=l(),c2=a("li"),ofe=a("strong"),f9o=o("big_bird"),g9o=o(" \u2014 "),hG=a("a"),h9o=o("BigBirdForMaskedLM"),u9o=o(" (BigBird model)"),p9o=l(),m2=a("li"),rfe=a("strong"),_9o=o("camembert"),b9o=o(" \u2014 "),uG=a("a"),v9o=o("CamembertForMaskedLM"),F9o=o(" (CamemBERT model)"),T9o=l(),f2=a("li"),tfe=a("strong"),M9o=o("convbert"),E9o=o(" \u2014 "),pG=a("a"),C9o=o("ConvBertForMaskedLM"),w9o=o(" (ConvBERT model)"),A9o=l(),g2=a("li"),afe=a("strong"),y9o=o("data2vec-text"),L9o=o(" \u2014 "),_G=a("a"),x9o=o("Data2VecTextForMaskedLM"),$9o=o(" (Data2VecText model)"),k9o=l(),h2=a("li"),nfe=a("strong"),S9o=o("deberta"),R9o=o(" \u2014 "),bG=a("a"),P9o=o("DebertaForMaskedLM"),B9o=o(" (DeBERTa model)"),I9o=l(),u2=a("li"),sfe=a("strong"),N9o=o("deberta-v2"),q9o=o(" \u2014 "),vG=a("a"),j9o=o("DebertaV2ForMaskedLM"),D9o=o(" (DeBERTa-v2 model)"),G9o=l(),p2=a("li"),lfe=a("strong"),O9o=o("distilbert"),V9o=o(" \u2014 "),FG=a("a"),X9o=o("DistilBertForMaskedLM"),z9o=o(" (DistilBERT model)"),W9o=l(),_2=a("li"),ife=a("strong"),Q9o=o("electra"),H9o=o(" \u2014 "),TG=a("a"),U9o=o("ElectraForMaskedLM"),J9o=o(" (ELECTRA model)"),Y9o=l(),b2=a("li"),dfe=a("strong"),K9o=o("flaubert"),Z9o=o(" \u2014 "),MG=a("a"),exo=o("FlaubertWithLMHeadModel"),oxo=o(" (FlauBERT model)"),rxo=l(),v2=a("li"),cfe=a("strong"),txo=o("fnet"),axo=o(" \u2014 "),EG=a("a"),nxo=o("FNetForMaskedLM"),sxo=o(" (FNet model)"),lxo=l(),F2=a("li"),mfe=a("strong"),ixo=o("funnel"),dxo=o(" \u2014 "),CG=a("a"),cxo=o("FunnelForMaskedLM"),mxo=o(" (Funnel Transformer model)"),fxo=l(),T2=a("li"),ffe=a("strong"),gxo=o("ibert"),hxo=o(" \u2014 "),wG=a("a"),uxo=o("IBertForMaskedLM"),pxo=o(" (I-BERT model)"),_xo=l(),M2=a("li"),gfe=a("strong"),bxo=o("layoutlm"),vxo=o(" \u2014 "),AG=a("a"),Fxo=o("LayoutLMForMaskedLM"),Txo=o(" (LayoutLM model)"),Mxo=l(),E2=a("li"),hfe=a("strong"),Exo=o("longformer"),Cxo=o(" \u2014 "),yG=a("a"),wxo=o("LongformerForMaskedLM"),Axo=o(" (Longformer model)"),yxo=l(),C2=a("li"),ufe=a("strong"),Lxo=o("luke"),xxo=o(" \u2014 "),LG=a("a"),$xo=o("LukeForMaskedLM"),kxo=o(" (LUKE model)"),Sxo=l(),w2=a("li"),pfe=a("strong"),Rxo=o("mbart"),Pxo=o(" \u2014 "),xG=a("a"),Bxo=o("MBartForConditionalGeneration"),Ixo=o(" (mBART model)"),Nxo=l(),A2=a("li"),_fe=a("strong"),qxo=o("megatron-bert"),jxo=o(" \u2014 "),$G=a("a"),Dxo=o("MegatronBertForMaskedLM"),Gxo=o(" (Megatron-BERT model)"),Oxo=l(),y2=a("li"),bfe=a("strong"),Vxo=o("mobilebert"),Xxo=o(" \u2014 "),kG=a("a"),zxo=o("MobileBertForMaskedLM"),Wxo=o(" (MobileBERT model)"),Qxo=l(),L2=a("li"),vfe=a("strong"),Hxo=o("mpnet"),Uxo=o(" \u2014 "),SG=a("a"),Jxo=o("MPNetForMaskedLM"),Yxo=o(" (MPNet model)"),Kxo=l(),x2=a("li"),Ffe=a("strong"),Zxo=o("nystromformer"),e$o=o(" \u2014 "),RG=a("a"),o$o=o("NystromformerForMaskedLM"),r$o=o(" (Nystr\xF6mformer model)"),t$o=l(),$2=a("li"),Tfe=a("strong"),a$o=o("perceiver"),n$o=o(" \u2014 "),PG=a("a"),s$o=o("PerceiverForMaskedLM"),l$o=o(" (Perceiver model)"),i$o=l(),k2=a("li"),Mfe=a("strong"),d$o=o("qdqbert"),c$o=o(" \u2014 "),BG=a("a"),m$o=o("QDQBertForMaskedLM"),f$o=o(" (QDQBert model)"),g$o=l(),S2=a("li"),Efe=a("strong"),h$o=o("reformer"),u$o=o(" \u2014 "),IG=a("a"),p$o=o("ReformerForMaskedLM"),_$o=o(" (Reformer model)"),b$o=l(),R2=a("li"),Cfe=a("strong"),v$o=o("rembert"),F$o=o(" \u2014 "),NG=a("a"),T$o=o("RemBertForMaskedLM"),M$o=o(" (RemBERT model)"),E$o=l(),P2=a("li"),wfe=a("strong"),C$o=o("roberta"),w$o=o(" \u2014 "),qG=a("a"),A$o=o("RobertaForMaskedLM"),y$o=o(" (RoBERTa model)"),L$o=l(),B2=a("li"),Afe=a("strong"),x$o=o("roformer"),$$o=o(" \u2014 "),jG=a("a"),k$o=o("RoFormerForMaskedLM"),S$o=o(" (RoFormer model)"),R$o=l(),I2=a("li"),yfe=a("strong"),P$o=o("squeezebert"),B$o=o(" \u2014 "),DG=a("a"),I$o=o("SqueezeBertForMaskedLM"),N$o=o(" (SqueezeBERT model)"),q$o=l(),N2=a("li"),Lfe=a("strong"),j$o=o("tapas"),D$o=o(" \u2014 "),GG=a("a"),G$o=o("TapasForMaskedLM"),O$o=o(" (TAPAS model)"),V$o=l(),q2=a("li"),xfe=a("strong"),X$o=o("wav2vec2"),z$o=o(" \u2014 "),$fe=a("code"),W$o=o("Wav2Vec2ForMaskedLM"),Q$o=o(" (Wav2Vec2 model)"),H$o=l(),j2=a("li"),kfe=a("strong"),U$o=o("xlm"),J$o=o(" \u2014 "),OG=a("a"),Y$o=o("XLMWithLMHeadModel"),K$o=o(" (XLM model)"),Z$o=l(),D2=a("li"),Sfe=a("strong"),eko=o("xlm-roberta"),oko=o(" \u2014 "),VG=a("a"),rko=o("XLMRobertaForMaskedLM"),tko=o(" (XLM-RoBERTa model)"),ako=l(),G2=a("li"),Rfe=a("strong"),nko=o("xlm-roberta-xl"),sko=o(" \u2014 "),XG=a("a"),lko=o("XLMRobertaXLForMaskedLM"),iko=o(" (XLM-RoBERTa-XL model)"),dko=l(),O2=a("li"),Pfe=a("strong"),cko=o("yoso"),mko=o(" \u2014 "),zG=a("a"),fko=o("YosoForMaskedLM"),gko=o(" (YOSO model)"),hko=l(),V2=a("p"),uko=o("The model is set in evaluation mode by default using "),Bfe=a("code"),pko=o("model.eval()"),_ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),bko=o("model.train()"),vko=l(),F(X2.$$.fragment),IDe=l(),zi=a("h2"),z2=a("a"),Nfe=a("span"),F(r7.$$.fragment),Fko=l(),qfe=a("span"),Tko=o("AutoModelForSeq2SeqLM"),NDe=l(),Ro=a("div"),F(t7.$$.fragment),Mko=l(),Wi=a("p"),Eko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WG=a("a"),Cko=o("from_pretrained()"),wko=o(" class method or the "),QG=a("a"),Ako=o("from_config()"),yko=o(` class
method.`),Lko=l(),a7=a("p"),xko=o("This class cannot be instantiated directly using "),jfe=a("code"),$ko=o("__init__()"),kko=o(" (throws an error)."),Sko=l(),dt=a("div"),F(n7.$$.fragment),Rko=l(),Dfe=a("p"),Pko=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bko=l(),Qi=a("p"),Iko=o(`Note:
Loading a model from its configuration file does `),Gfe=a("strong"),Nko=o("not"),qko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),jko=o("from_pretrained()"),Dko=o(" to load the model weights."),Gko=l(),F(W2.$$.fragment),Oko=l(),eo=a("div"),F(s7.$$.fragment),Vko=l(),Ofe=a("p"),Xko=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zko=l(),Ia=a("p"),Wko=o("The model class to instantiate is selected based on the "),Vfe=a("code"),Qko=o("model_type"),Hko=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),Uko=o("pretrained_model_name_or_path"),Jko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),Yko=o("pretrained_model_name_or_path"),Kko=o(":"),Zko=l(),pe=a("ul"),Q2=a("li"),Wfe=a("strong"),eSo=o("bart"),oSo=o(" \u2014 "),UG=a("a"),rSo=o("BartForConditionalGeneration"),tSo=o(" (BART model)"),aSo=l(),H2=a("li"),Qfe=a("strong"),nSo=o("bigbird_pegasus"),sSo=o(" \u2014 "),JG=a("a"),lSo=o("BigBirdPegasusForConditionalGeneration"),iSo=o(" (BigBird-Pegasus model)"),dSo=l(),U2=a("li"),Hfe=a("strong"),cSo=o("blenderbot"),mSo=o(" \u2014 "),YG=a("a"),fSo=o("BlenderbotForConditionalGeneration"),gSo=o(" (Blenderbot model)"),hSo=l(),J2=a("li"),Ufe=a("strong"),uSo=o("blenderbot-small"),pSo=o(" \u2014 "),KG=a("a"),_So=o("BlenderbotSmallForConditionalGeneration"),bSo=o(" (BlenderbotSmall model)"),vSo=l(),Y2=a("li"),Jfe=a("strong"),FSo=o("encoder-decoder"),TSo=o(" \u2014 "),ZG=a("a"),MSo=o("EncoderDecoderModel"),ESo=o(" (Encoder decoder model)"),CSo=l(),K2=a("li"),Yfe=a("strong"),wSo=o("fsmt"),ASo=o(" \u2014 "),eO=a("a"),ySo=o("FSMTForConditionalGeneration"),LSo=o(" (FairSeq Machine-Translation model)"),xSo=l(),Z2=a("li"),Kfe=a("strong"),$So=o("led"),kSo=o(" \u2014 "),oO=a("a"),SSo=o("LEDForConditionalGeneration"),RSo=o(" (LED model)"),PSo=l(),ev=a("li"),Zfe=a("strong"),BSo=o("m2m_100"),ISo=o(" \u2014 "),rO=a("a"),NSo=o("M2M100ForConditionalGeneration"),qSo=o(" (M2M100 model)"),jSo=l(),ov=a("li"),ege=a("strong"),DSo=o("marian"),GSo=o(" \u2014 "),tO=a("a"),OSo=o("MarianMTModel"),VSo=o(" (Marian model)"),XSo=l(),rv=a("li"),oge=a("strong"),zSo=o("mbart"),WSo=o(" \u2014 "),aO=a("a"),QSo=o("MBartForConditionalGeneration"),HSo=o(" (mBART model)"),USo=l(),tv=a("li"),rge=a("strong"),JSo=o("mt5"),YSo=o(" \u2014 "),nO=a("a"),KSo=o("MT5ForConditionalGeneration"),ZSo=o(" (MT5 model)"),eRo=l(),av=a("li"),tge=a("strong"),oRo=o("pegasus"),rRo=o(" \u2014 "),sO=a("a"),tRo=o("PegasusForConditionalGeneration"),aRo=o(" (Pegasus model)"),nRo=l(),nv=a("li"),age=a("strong"),sRo=o("plbart"),lRo=o(" \u2014 "),lO=a("a"),iRo=o("PLBartForConditionalGeneration"),dRo=o(" (PLBart model)"),cRo=l(),sv=a("li"),nge=a("strong"),mRo=o("prophetnet"),fRo=o(" \u2014 "),iO=a("a"),gRo=o("ProphetNetForConditionalGeneration"),hRo=o(" (ProphetNet model)"),uRo=l(),lv=a("li"),sge=a("strong"),pRo=o("t5"),_Ro=o(" \u2014 "),dO=a("a"),bRo=o("T5ForConditionalGeneration"),vRo=o(" (T5 model)"),FRo=l(),iv=a("li"),lge=a("strong"),TRo=o("xlm-prophetnet"),MRo=o(" \u2014 "),cO=a("a"),ERo=o("XLMProphetNetForConditionalGeneration"),CRo=o(" (XLM-ProphetNet model)"),wRo=l(),dv=a("p"),ARo=o("The model is set in evaluation mode by default using "),ige=a("code"),yRo=o("model.eval()"),LRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),xRo=o("model.train()"),$Ro=l(),F(cv.$$.fragment),qDe=l(),Hi=a("h2"),mv=a("a"),cge=a("span"),F(l7.$$.fragment),kRo=l(),mge=a("span"),SRo=o("AutoModelForSequenceClassification"),jDe=l(),Po=a("div"),F(i7.$$.fragment),RRo=l(),Ui=a("p"),PRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mO=a("a"),BRo=o("from_pretrained()"),IRo=o(" class method or the "),fO=a("a"),NRo=o("from_config()"),qRo=o(` class
method.`),jRo=l(),d7=a("p"),DRo=o("This class cannot be instantiated directly using "),fge=a("code"),GRo=o("__init__()"),ORo=o(" (throws an error)."),VRo=l(),ct=a("div"),F(c7.$$.fragment),XRo=l(),gge=a("p"),zRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WRo=l(),Ji=a("p"),QRo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),HRo=o("not"),URo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),JRo=o("from_pretrained()"),YRo=o(" to load the model weights."),KRo=l(),F(fv.$$.fragment),ZRo=l(),oo=a("div"),F(m7.$$.fragment),ePo=l(),uge=a("p"),oPo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rPo=l(),Na=a("p"),tPo=o("The model class to instantiate is selected based on the "),pge=a("code"),aPo=o("model_type"),nPo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),sPo=o("pretrained_model_name_or_path"),lPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),iPo=o("pretrained_model_name_or_path"),dPo=o(":"),cPo=l(),N=a("ul"),gv=a("li"),vge=a("strong"),mPo=o("albert"),fPo=o(" \u2014 "),hO=a("a"),gPo=o("AlbertForSequenceClassification"),hPo=o(" (ALBERT model)"),uPo=l(),hv=a("li"),Fge=a("strong"),pPo=o("bart"),_Po=o(" \u2014 "),uO=a("a"),bPo=o("BartForSequenceClassification"),vPo=o(" (BART model)"),FPo=l(),uv=a("li"),Tge=a("strong"),TPo=o("bert"),MPo=o(" \u2014 "),pO=a("a"),EPo=o("BertForSequenceClassification"),CPo=o(" (BERT model)"),wPo=l(),pv=a("li"),Mge=a("strong"),APo=o("big_bird"),yPo=o(" \u2014 "),_O=a("a"),LPo=o("BigBirdForSequenceClassification"),xPo=o(" (BigBird model)"),$Po=l(),_v=a("li"),Ege=a("strong"),kPo=o("bigbird_pegasus"),SPo=o(" \u2014 "),bO=a("a"),RPo=o("BigBirdPegasusForSequenceClassification"),PPo=o(" (BigBird-Pegasus model)"),BPo=l(),bv=a("li"),Cge=a("strong"),IPo=o("camembert"),NPo=o(" \u2014 "),vO=a("a"),qPo=o("CamembertForSequenceClassification"),jPo=o(" (CamemBERT model)"),DPo=l(),vv=a("li"),wge=a("strong"),GPo=o("canine"),OPo=o(" \u2014 "),FO=a("a"),VPo=o("CanineForSequenceClassification"),XPo=o(" (CANINE model)"),zPo=l(),Fv=a("li"),Age=a("strong"),WPo=o("convbert"),QPo=o(" \u2014 "),TO=a("a"),HPo=o("ConvBertForSequenceClassification"),UPo=o(" (ConvBERT model)"),JPo=l(),Tv=a("li"),yge=a("strong"),YPo=o("ctrl"),KPo=o(" \u2014 "),MO=a("a"),ZPo=o("CTRLForSequenceClassification"),eBo=o(" (CTRL model)"),oBo=l(),Mv=a("li"),Lge=a("strong"),rBo=o("data2vec-text"),tBo=o(" \u2014 "),EO=a("a"),aBo=o("Data2VecTextForSequenceClassification"),nBo=o(" (Data2VecText model)"),sBo=l(),Ev=a("li"),xge=a("strong"),lBo=o("deberta"),iBo=o(" \u2014 "),CO=a("a"),dBo=o("DebertaForSequenceClassification"),cBo=o(" (DeBERTa model)"),mBo=l(),Cv=a("li"),$ge=a("strong"),fBo=o("deberta-v2"),gBo=o(" \u2014 "),wO=a("a"),hBo=o("DebertaV2ForSequenceClassification"),uBo=o(" (DeBERTa-v2 model)"),pBo=l(),wv=a("li"),kge=a("strong"),_Bo=o("distilbert"),bBo=o(" \u2014 "),AO=a("a"),vBo=o("DistilBertForSequenceClassification"),FBo=o(" (DistilBERT model)"),TBo=l(),Av=a("li"),Sge=a("strong"),MBo=o("electra"),EBo=o(" \u2014 "),yO=a("a"),CBo=o("ElectraForSequenceClassification"),wBo=o(" (ELECTRA model)"),ABo=l(),yv=a("li"),Rge=a("strong"),yBo=o("flaubert"),LBo=o(" \u2014 "),LO=a("a"),xBo=o("FlaubertForSequenceClassification"),$Bo=o(" (FlauBERT model)"),kBo=l(),Lv=a("li"),Pge=a("strong"),SBo=o("fnet"),RBo=o(" \u2014 "),xO=a("a"),PBo=o("FNetForSequenceClassification"),BBo=o(" (FNet model)"),IBo=l(),xv=a("li"),Bge=a("strong"),NBo=o("funnel"),qBo=o(" \u2014 "),$O=a("a"),jBo=o("FunnelForSequenceClassification"),DBo=o(" (Funnel Transformer model)"),GBo=l(),$v=a("li"),Ige=a("strong"),OBo=o("gpt2"),VBo=o(" \u2014 "),kO=a("a"),XBo=o("GPT2ForSequenceClassification"),zBo=o(" (OpenAI GPT-2 model)"),WBo=l(),kv=a("li"),Nge=a("strong"),QBo=o("gpt_neo"),HBo=o(" \u2014 "),SO=a("a"),UBo=o("GPTNeoForSequenceClassification"),JBo=o(" (GPT Neo model)"),YBo=l(),Sv=a("li"),qge=a("strong"),KBo=o("gptj"),ZBo=o(" \u2014 "),RO=a("a"),eIo=o("GPTJForSequenceClassification"),oIo=o(" (GPT-J model)"),rIo=l(),Rv=a("li"),jge=a("strong"),tIo=o("ibert"),aIo=o(" \u2014 "),PO=a("a"),nIo=o("IBertForSequenceClassification"),sIo=o(" (I-BERT model)"),lIo=l(),Pv=a("li"),Dge=a("strong"),iIo=o("layoutlm"),dIo=o(" \u2014 "),BO=a("a"),cIo=o("LayoutLMForSequenceClassification"),mIo=o(" (LayoutLM model)"),fIo=l(),Bv=a("li"),Gge=a("strong"),gIo=o("layoutlmv2"),hIo=o(" \u2014 "),IO=a("a"),uIo=o("LayoutLMv2ForSequenceClassification"),pIo=o(" (LayoutLMv2 model)"),_Io=l(),Iv=a("li"),Oge=a("strong"),bIo=o("layoutlmv3"),vIo=o(" \u2014 "),NO=a("a"),FIo=o("LayoutLMv3ForSequenceClassification"),TIo=o(" (LayoutLMv3 model)"),MIo=l(),Nv=a("li"),Vge=a("strong"),EIo=o("led"),CIo=o(" \u2014 "),qO=a("a"),wIo=o("LEDForSequenceClassification"),AIo=o(" (LED model)"),yIo=l(),qv=a("li"),Xge=a("strong"),LIo=o("longformer"),xIo=o(" \u2014 "),jO=a("a"),$Io=o("LongformerForSequenceClassification"),kIo=o(" (Longformer model)"),SIo=l(),jv=a("li"),zge=a("strong"),RIo=o("mbart"),PIo=o(" \u2014 "),DO=a("a"),BIo=o("MBartForSequenceClassification"),IIo=o(" (mBART model)"),NIo=l(),Dv=a("li"),Wge=a("strong"),qIo=o("megatron-bert"),jIo=o(" \u2014 "),GO=a("a"),DIo=o("MegatronBertForSequenceClassification"),GIo=o(" (Megatron-BERT model)"),OIo=l(),Gv=a("li"),Qge=a("strong"),VIo=o("mobilebert"),XIo=o(" \u2014 "),OO=a("a"),zIo=o("MobileBertForSequenceClassification"),WIo=o(" (MobileBERT model)"),QIo=l(),Ov=a("li"),Hge=a("strong"),HIo=o("mpnet"),UIo=o(" \u2014 "),VO=a("a"),JIo=o("MPNetForSequenceClassification"),YIo=o(" (MPNet model)"),KIo=l(),Vv=a("li"),Uge=a("strong"),ZIo=o("nystromformer"),eNo=o(" \u2014 "),XO=a("a"),oNo=o("NystromformerForSequenceClassification"),rNo=o(" (Nystr\xF6mformer model)"),tNo=l(),Xv=a("li"),Jge=a("strong"),aNo=o("openai-gpt"),nNo=o(" \u2014 "),zO=a("a"),sNo=o("OpenAIGPTForSequenceClassification"),lNo=o(" (OpenAI GPT model)"),iNo=l(),zv=a("li"),Yge=a("strong"),dNo=o("perceiver"),cNo=o(" \u2014 "),WO=a("a"),mNo=o("PerceiverForSequenceClassification"),fNo=o(" (Perceiver model)"),gNo=l(),Wv=a("li"),Kge=a("strong"),hNo=o("plbart"),uNo=o(" \u2014 "),QO=a("a"),pNo=o("PLBartForSequenceClassification"),_No=o(" (PLBart model)"),bNo=l(),Qv=a("li"),Zge=a("strong"),vNo=o("qdqbert"),FNo=o(" \u2014 "),HO=a("a"),TNo=o("QDQBertForSequenceClassification"),MNo=o(" (QDQBert model)"),ENo=l(),Hv=a("li"),ehe=a("strong"),CNo=o("reformer"),wNo=o(" \u2014 "),UO=a("a"),ANo=o("ReformerForSequenceClassification"),yNo=o(" (Reformer model)"),LNo=l(),Uv=a("li"),ohe=a("strong"),xNo=o("rembert"),$No=o(" \u2014 "),JO=a("a"),kNo=o("RemBertForSequenceClassification"),SNo=o(" (RemBERT model)"),RNo=l(),Jv=a("li"),rhe=a("strong"),PNo=o("roberta"),BNo=o(" \u2014 "),YO=a("a"),INo=o("RobertaForSequenceClassification"),NNo=o(" (RoBERTa model)"),qNo=l(),Yv=a("li"),the=a("strong"),jNo=o("roformer"),DNo=o(" \u2014 "),KO=a("a"),GNo=o("RoFormerForSequenceClassification"),ONo=o(" (RoFormer model)"),VNo=l(),Kv=a("li"),ahe=a("strong"),XNo=o("squeezebert"),zNo=o(" \u2014 "),ZO=a("a"),WNo=o("SqueezeBertForSequenceClassification"),QNo=o(" (SqueezeBERT model)"),HNo=l(),Zv=a("li"),nhe=a("strong"),UNo=o("tapas"),JNo=o(" \u2014 "),eV=a("a"),YNo=o("TapasForSequenceClassification"),KNo=o(" (TAPAS model)"),ZNo=l(),eF=a("li"),she=a("strong"),eqo=o("transfo-xl"),oqo=o(" \u2014 "),oV=a("a"),rqo=o("TransfoXLForSequenceClassification"),tqo=o(" (Transformer-XL model)"),aqo=l(),oF=a("li"),lhe=a("strong"),nqo=o("xlm"),sqo=o(" \u2014 "),rV=a("a"),lqo=o("XLMForSequenceClassification"),iqo=o(" (XLM model)"),dqo=l(),rF=a("li"),ihe=a("strong"),cqo=o("xlm-roberta"),mqo=o(" \u2014 "),tV=a("a"),fqo=o("XLMRobertaForSequenceClassification"),gqo=o(" (XLM-RoBERTa model)"),hqo=l(),tF=a("li"),dhe=a("strong"),uqo=o("xlm-roberta-xl"),pqo=o(" \u2014 "),aV=a("a"),_qo=o("XLMRobertaXLForSequenceClassification"),bqo=o(" (XLM-RoBERTa-XL model)"),vqo=l(),aF=a("li"),che=a("strong"),Fqo=o("xlnet"),Tqo=o(" \u2014 "),nV=a("a"),Mqo=o("XLNetForSequenceClassification"),Eqo=o(" (XLNet model)"),Cqo=l(),nF=a("li"),mhe=a("strong"),wqo=o("yoso"),Aqo=o(" \u2014 "),sV=a("a"),yqo=o("YosoForSequenceClassification"),Lqo=o(" (YOSO model)"),xqo=l(),sF=a("p"),$qo=o("The model is set in evaluation mode by default using "),fhe=a("code"),kqo=o("model.eval()"),Sqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),Rqo=o("model.train()"),Pqo=l(),F(lF.$$.fragment),DDe=l(),Yi=a("h2"),iF=a("a"),hhe=a("span"),F(f7.$$.fragment),Bqo=l(),uhe=a("span"),Iqo=o("AutoModelForMultipleChoice"),GDe=l(),Bo=a("div"),F(g7.$$.fragment),Nqo=l(),Ki=a("p"),qqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lV=a("a"),jqo=o("from_pretrained()"),Dqo=o(" class method or the "),iV=a("a"),Gqo=o("from_config()"),Oqo=o(` class
method.`),Vqo=l(),h7=a("p"),Xqo=o("This class cannot be instantiated directly using "),phe=a("code"),zqo=o("__init__()"),Wqo=o(" (throws an error)."),Qqo=l(),mt=a("div"),F(u7.$$.fragment),Hqo=l(),_he=a("p"),Uqo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jqo=l(),Zi=a("p"),Yqo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),Kqo=o("not"),Zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),ejo=o("from_pretrained()"),ojo=o(" to load the model weights."),rjo=l(),F(dF.$$.fragment),tjo=l(),ro=a("div"),F(p7.$$.fragment),ajo=l(),vhe=a("p"),njo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sjo=l(),qa=a("p"),ljo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),ijo=o("model_type"),djo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),cjo=o("pretrained_model_name_or_path"),mjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),fjo=o("pretrained_model_name_or_path"),gjo=o(":"),hjo=l(),Z=a("ul"),cF=a("li"),Ehe=a("strong"),ujo=o("albert"),pjo=o(" \u2014 "),cV=a("a"),_jo=o("AlbertForMultipleChoice"),bjo=o(" (ALBERT model)"),vjo=l(),mF=a("li"),Che=a("strong"),Fjo=o("bert"),Tjo=o(" \u2014 "),mV=a("a"),Mjo=o("BertForMultipleChoice"),Ejo=o(" (BERT model)"),Cjo=l(),fF=a("li"),whe=a("strong"),wjo=o("big_bird"),Ajo=o(" \u2014 "),fV=a("a"),yjo=o("BigBirdForMultipleChoice"),Ljo=o(" (BigBird model)"),xjo=l(),gF=a("li"),Ahe=a("strong"),$jo=o("camembert"),kjo=o(" \u2014 "),gV=a("a"),Sjo=o("CamembertForMultipleChoice"),Rjo=o(" (CamemBERT model)"),Pjo=l(),hF=a("li"),yhe=a("strong"),Bjo=o("canine"),Ijo=o(" \u2014 "),hV=a("a"),Njo=o("CanineForMultipleChoice"),qjo=o(" (CANINE model)"),jjo=l(),uF=a("li"),Lhe=a("strong"),Djo=o("convbert"),Gjo=o(" \u2014 "),uV=a("a"),Ojo=o("ConvBertForMultipleChoice"),Vjo=o(" (ConvBERT model)"),Xjo=l(),pF=a("li"),xhe=a("strong"),zjo=o("data2vec-text"),Wjo=o(" \u2014 "),pV=a("a"),Qjo=o("Data2VecTextForMultipleChoice"),Hjo=o(" (Data2VecText model)"),Ujo=l(),_F=a("li"),$he=a("strong"),Jjo=o("deberta-v2"),Yjo=o(" \u2014 "),_V=a("a"),Kjo=o("DebertaV2ForMultipleChoice"),Zjo=o(" (DeBERTa-v2 model)"),eDo=l(),bF=a("li"),khe=a("strong"),oDo=o("distilbert"),rDo=o(" \u2014 "),bV=a("a"),tDo=o("DistilBertForMultipleChoice"),aDo=o(" (DistilBERT model)"),nDo=l(),vF=a("li"),She=a("strong"),sDo=o("electra"),lDo=o(" \u2014 "),vV=a("a"),iDo=o("ElectraForMultipleChoice"),dDo=o(" (ELECTRA model)"),cDo=l(),FF=a("li"),Rhe=a("strong"),mDo=o("flaubert"),fDo=o(" \u2014 "),FV=a("a"),gDo=o("FlaubertForMultipleChoice"),hDo=o(" (FlauBERT model)"),uDo=l(),TF=a("li"),Phe=a("strong"),pDo=o("fnet"),_Do=o(" \u2014 "),TV=a("a"),bDo=o("FNetForMultipleChoice"),vDo=o(" (FNet model)"),FDo=l(),MF=a("li"),Bhe=a("strong"),TDo=o("funnel"),MDo=o(" \u2014 "),MV=a("a"),EDo=o("FunnelForMultipleChoice"),CDo=o(" (Funnel Transformer model)"),wDo=l(),EF=a("li"),Ihe=a("strong"),ADo=o("ibert"),yDo=o(" \u2014 "),EV=a("a"),LDo=o("IBertForMultipleChoice"),xDo=o(" (I-BERT model)"),$Do=l(),CF=a("li"),Nhe=a("strong"),kDo=o("longformer"),SDo=o(" \u2014 "),CV=a("a"),RDo=o("LongformerForMultipleChoice"),PDo=o(" (Longformer model)"),BDo=l(),wF=a("li"),qhe=a("strong"),IDo=o("megatron-bert"),NDo=o(" \u2014 "),wV=a("a"),qDo=o("MegatronBertForMultipleChoice"),jDo=o(" (Megatron-BERT model)"),DDo=l(),AF=a("li"),jhe=a("strong"),GDo=o("mobilebert"),ODo=o(" \u2014 "),AV=a("a"),VDo=o("MobileBertForMultipleChoice"),XDo=o(" (MobileBERT model)"),zDo=l(),yF=a("li"),Dhe=a("strong"),WDo=o("mpnet"),QDo=o(" \u2014 "),yV=a("a"),HDo=o("MPNetForMultipleChoice"),UDo=o(" (MPNet model)"),JDo=l(),LF=a("li"),Ghe=a("strong"),YDo=o("nystromformer"),KDo=o(" \u2014 "),LV=a("a"),ZDo=o("NystromformerForMultipleChoice"),eGo=o(" (Nystr\xF6mformer model)"),oGo=l(),xF=a("li"),Ohe=a("strong"),rGo=o("qdqbert"),tGo=o(" \u2014 "),xV=a("a"),aGo=o("QDQBertForMultipleChoice"),nGo=o(" (QDQBert model)"),sGo=l(),$F=a("li"),Vhe=a("strong"),lGo=o("rembert"),iGo=o(" \u2014 "),$V=a("a"),dGo=o("RemBertForMultipleChoice"),cGo=o(" (RemBERT model)"),mGo=l(),kF=a("li"),Xhe=a("strong"),fGo=o("roberta"),gGo=o(" \u2014 "),kV=a("a"),hGo=o("RobertaForMultipleChoice"),uGo=o(" (RoBERTa model)"),pGo=l(),SF=a("li"),zhe=a("strong"),_Go=o("roformer"),bGo=o(" \u2014 "),SV=a("a"),vGo=o("RoFormerForMultipleChoice"),FGo=o(" (RoFormer model)"),TGo=l(),RF=a("li"),Whe=a("strong"),MGo=o("squeezebert"),EGo=o(" \u2014 "),RV=a("a"),CGo=o("SqueezeBertForMultipleChoice"),wGo=o(" (SqueezeBERT model)"),AGo=l(),PF=a("li"),Qhe=a("strong"),yGo=o("xlm"),LGo=o(" \u2014 "),PV=a("a"),xGo=o("XLMForMultipleChoice"),$Go=o(" (XLM model)"),kGo=l(),BF=a("li"),Hhe=a("strong"),SGo=o("xlm-roberta"),RGo=o(" \u2014 "),BV=a("a"),PGo=o("XLMRobertaForMultipleChoice"),BGo=o(" (XLM-RoBERTa model)"),IGo=l(),IF=a("li"),Uhe=a("strong"),NGo=o("xlm-roberta-xl"),qGo=o(" \u2014 "),IV=a("a"),jGo=o("XLMRobertaXLForMultipleChoice"),DGo=o(" (XLM-RoBERTa-XL model)"),GGo=l(),NF=a("li"),Jhe=a("strong"),OGo=o("xlnet"),VGo=o(" \u2014 "),NV=a("a"),XGo=o("XLNetForMultipleChoice"),zGo=o(" (XLNet model)"),WGo=l(),qF=a("li"),Yhe=a("strong"),QGo=o("yoso"),HGo=o(" \u2014 "),qV=a("a"),UGo=o("YosoForMultipleChoice"),JGo=o(" (YOSO model)"),YGo=l(),jF=a("p"),KGo=o("The model is set in evaluation mode by default using "),Khe=a("code"),ZGo=o("model.eval()"),eOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),oOo=o("model.train()"),rOo=l(),F(DF.$$.fragment),ODe=l(),ed=a("h2"),GF=a("a"),eue=a("span"),F(_7.$$.fragment),tOo=l(),oue=a("span"),aOo=o("AutoModelForNextSentencePrediction"),VDe=l(),Io=a("div"),F(b7.$$.fragment),nOo=l(),od=a("p"),sOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jV=a("a"),lOo=o("from_pretrained()"),iOo=o(" class method or the "),DV=a("a"),dOo=o("from_config()"),cOo=o(` class
method.`),mOo=l(),v7=a("p"),fOo=o("This class cannot be instantiated directly using "),rue=a("code"),gOo=o("__init__()"),hOo=o(" (throws an error)."),uOo=l(),ft=a("div"),F(F7.$$.fragment),pOo=l(),tue=a("p"),_Oo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bOo=l(),rd=a("p"),vOo=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),FOo=o("not"),TOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),MOo=o("from_pretrained()"),EOo=o(" to load the model weights."),COo=l(),F(OF.$$.fragment),wOo=l(),to=a("div"),F(T7.$$.fragment),AOo=l(),nue=a("p"),yOo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LOo=l(),ja=a("p"),xOo=o("The model class to instantiate is selected based on the "),sue=a("code"),$Oo=o("model_type"),kOo=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),SOo=o("pretrained_model_name_or_path"),ROo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),POo=o("pretrained_model_name_or_path"),BOo=o(":"),IOo=l(),Zr=a("ul"),VF=a("li"),due=a("strong"),NOo=o("bert"),qOo=o(" \u2014 "),OV=a("a"),jOo=o("BertForNextSentencePrediction"),DOo=o(" (BERT model)"),GOo=l(),XF=a("li"),cue=a("strong"),OOo=o("fnet"),VOo=o(" \u2014 "),VV=a("a"),XOo=o("FNetForNextSentencePrediction"),zOo=o(" (FNet model)"),WOo=l(),zF=a("li"),mue=a("strong"),QOo=o("megatron-bert"),HOo=o(" \u2014 "),XV=a("a"),UOo=o("MegatronBertForNextSentencePrediction"),JOo=o(" (Megatron-BERT model)"),YOo=l(),WF=a("li"),fue=a("strong"),KOo=o("mobilebert"),ZOo=o(" \u2014 "),zV=a("a"),eVo=o("MobileBertForNextSentencePrediction"),oVo=o(" (MobileBERT model)"),rVo=l(),QF=a("li"),gue=a("strong"),tVo=o("qdqbert"),aVo=o(" \u2014 "),WV=a("a"),nVo=o("QDQBertForNextSentencePrediction"),sVo=o(" (QDQBert model)"),lVo=l(),HF=a("p"),iVo=o("The model is set in evaluation mode by default using "),hue=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),mVo=o("model.train()"),fVo=l(),F(UF.$$.fragment),XDe=l(),td=a("h2"),JF=a("a"),pue=a("span"),F(M7.$$.fragment),gVo=l(),_ue=a("span"),hVo=o("AutoModelForTokenClassification"),zDe=l(),No=a("div"),F(E7.$$.fragment),uVo=l(),ad=a("p"),pVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QV=a("a"),_Vo=o("from_pretrained()"),bVo=o(" class method or the "),HV=a("a"),vVo=o("from_config()"),FVo=o(` class
method.`),TVo=l(),C7=a("p"),MVo=o("This class cannot be instantiated directly using "),bue=a("code"),EVo=o("__init__()"),CVo=o(" (throws an error)."),wVo=l(),gt=a("div"),F(w7.$$.fragment),AVo=l(),vue=a("p"),yVo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),LVo=l(),nd=a("p"),xVo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),$Vo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),SVo=o("from_pretrained()"),RVo=o(" to load the model weights."),PVo=l(),F(YF.$$.fragment),BVo=l(),ao=a("div"),F(A7.$$.fragment),IVo=l(),Tue=a("p"),NVo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qVo=l(),Da=a("p"),jVo=o("The model class to instantiate is selected based on the "),Mue=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),WVo=l(),U=a("ul"),KF=a("li"),wue=a("strong"),QVo=o("albert"),HVo=o(" \u2014 "),JV=a("a"),UVo=o("AlbertForTokenClassification"),JVo=o(" (ALBERT model)"),YVo=l(),ZF=a("li"),Aue=a("strong"),KVo=o("bert"),ZVo=o(" \u2014 "),YV=a("a"),eXo=o("BertForTokenClassification"),oXo=o(" (BERT model)"),rXo=l(),e1=a("li"),yue=a("strong"),tXo=o("big_bird"),aXo=o(" \u2014 "),KV=a("a"),nXo=o("BigBirdForTokenClassification"),sXo=o(" (BigBird model)"),lXo=l(),o1=a("li"),Lue=a("strong"),iXo=o("camembert"),dXo=o(" \u2014 "),ZV=a("a"),cXo=o("CamembertForTokenClassification"),mXo=o(" (CamemBERT model)"),fXo=l(),r1=a("li"),xue=a("strong"),gXo=o("canine"),hXo=o(" \u2014 "),eX=a("a"),uXo=o("CanineForTokenClassification"),pXo=o(" (CANINE model)"),_Xo=l(),t1=a("li"),$ue=a("strong"),bXo=o("convbert"),vXo=o(" \u2014 "),oX=a("a"),FXo=o("ConvBertForTokenClassification"),TXo=o(" (ConvBERT model)"),MXo=l(),a1=a("li"),kue=a("strong"),EXo=o("data2vec-text"),CXo=o(" \u2014 "),rX=a("a"),wXo=o("Data2VecTextForTokenClassification"),AXo=o(" (Data2VecText model)"),yXo=l(),n1=a("li"),Sue=a("strong"),LXo=o("deberta"),xXo=o(" \u2014 "),tX=a("a"),$Xo=o("DebertaForTokenClassification"),kXo=o(" (DeBERTa model)"),SXo=l(),s1=a("li"),Rue=a("strong"),RXo=o("deberta-v2"),PXo=o(" \u2014 "),aX=a("a"),BXo=o("DebertaV2ForTokenClassification"),IXo=o(" (DeBERTa-v2 model)"),NXo=l(),l1=a("li"),Pue=a("strong"),qXo=o("distilbert"),jXo=o(" \u2014 "),nX=a("a"),DXo=o("DistilBertForTokenClassification"),GXo=o(" (DistilBERT model)"),OXo=l(),i1=a("li"),Bue=a("strong"),VXo=o("electra"),XXo=o(" \u2014 "),sX=a("a"),zXo=o("ElectraForTokenClassification"),WXo=o(" (ELECTRA model)"),QXo=l(),d1=a("li"),Iue=a("strong"),HXo=o("flaubert"),UXo=o(" \u2014 "),lX=a("a"),JXo=o("FlaubertForTokenClassification"),YXo=o(" (FlauBERT model)"),KXo=l(),c1=a("li"),Nue=a("strong"),ZXo=o("fnet"),ezo=o(" \u2014 "),iX=a("a"),ozo=o("FNetForTokenClassification"),rzo=o(" (FNet model)"),tzo=l(),m1=a("li"),que=a("strong"),azo=o("funnel"),nzo=o(" \u2014 "),dX=a("a"),szo=o("FunnelForTokenClassification"),lzo=o(" (Funnel Transformer model)"),izo=l(),f1=a("li"),jue=a("strong"),dzo=o("gpt2"),czo=o(" \u2014 "),cX=a("a"),mzo=o("GPT2ForTokenClassification"),fzo=o(" (OpenAI GPT-2 model)"),gzo=l(),g1=a("li"),Due=a("strong"),hzo=o("ibert"),uzo=o(" \u2014 "),mX=a("a"),pzo=o("IBertForTokenClassification"),_zo=o(" (I-BERT model)"),bzo=l(),h1=a("li"),Gue=a("strong"),vzo=o("layoutlm"),Fzo=o(" \u2014 "),fX=a("a"),Tzo=o("LayoutLMForTokenClassification"),Mzo=o(" (LayoutLM model)"),Ezo=l(),u1=a("li"),Oue=a("strong"),Czo=o("layoutlmv2"),wzo=o(" \u2014 "),gX=a("a"),Azo=o("LayoutLMv2ForTokenClassification"),yzo=o(" (LayoutLMv2 model)"),Lzo=l(),p1=a("li"),Vue=a("strong"),xzo=o("layoutlmv3"),$zo=o(" \u2014 "),hX=a("a"),kzo=o("LayoutLMv3ForTokenClassification"),Szo=o(" (LayoutLMv3 model)"),Rzo=l(),_1=a("li"),Xue=a("strong"),Pzo=o("longformer"),Bzo=o(" \u2014 "),uX=a("a"),Izo=o("LongformerForTokenClassification"),Nzo=o(" (Longformer model)"),qzo=l(),b1=a("li"),zue=a("strong"),jzo=o("megatron-bert"),Dzo=o(" \u2014 "),pX=a("a"),Gzo=o("MegatronBertForTokenClassification"),Ozo=o(" (Megatron-BERT model)"),Vzo=l(),v1=a("li"),Wue=a("strong"),Xzo=o("mobilebert"),zzo=o(" \u2014 "),_X=a("a"),Wzo=o("MobileBertForTokenClassification"),Qzo=o(" (MobileBERT model)"),Hzo=l(),F1=a("li"),Que=a("strong"),Uzo=o("mpnet"),Jzo=o(" \u2014 "),bX=a("a"),Yzo=o("MPNetForTokenClassification"),Kzo=o(" (MPNet model)"),Zzo=l(),T1=a("li"),Hue=a("strong"),eWo=o("nystromformer"),oWo=o(" \u2014 "),vX=a("a"),rWo=o("NystromformerForTokenClassification"),tWo=o(" (Nystr\xF6mformer model)"),aWo=l(),M1=a("li"),Uue=a("strong"),nWo=o("qdqbert"),sWo=o(" \u2014 "),FX=a("a"),lWo=o("QDQBertForTokenClassification"),iWo=o(" (QDQBert model)"),dWo=l(),E1=a("li"),Jue=a("strong"),cWo=o("rembert"),mWo=o(" \u2014 "),TX=a("a"),fWo=o("RemBertForTokenClassification"),gWo=o(" (RemBERT model)"),hWo=l(),C1=a("li"),Yue=a("strong"),uWo=o("roberta"),pWo=o(" \u2014 "),MX=a("a"),_Wo=o("RobertaForTokenClassification"),bWo=o(" (RoBERTa model)"),vWo=l(),w1=a("li"),Kue=a("strong"),FWo=o("roformer"),TWo=o(" \u2014 "),EX=a("a"),MWo=o("RoFormerForTokenClassification"),EWo=o(" (RoFormer model)"),CWo=l(),A1=a("li"),Zue=a("strong"),wWo=o("squeezebert"),AWo=o(" \u2014 "),CX=a("a"),yWo=o("SqueezeBertForTokenClassification"),LWo=o(" (SqueezeBERT model)"),xWo=l(),y1=a("li"),epe=a("strong"),$Wo=o("xlm"),kWo=o(" \u2014 "),wX=a("a"),SWo=o("XLMForTokenClassification"),RWo=o(" (XLM model)"),PWo=l(),L1=a("li"),ope=a("strong"),BWo=o("xlm-roberta"),IWo=o(" \u2014 "),AX=a("a"),NWo=o("XLMRobertaForTokenClassification"),qWo=o(" (XLM-RoBERTa model)"),jWo=l(),x1=a("li"),rpe=a("strong"),DWo=o("xlm-roberta-xl"),GWo=o(" \u2014 "),yX=a("a"),OWo=o("XLMRobertaXLForTokenClassification"),VWo=o(" (XLM-RoBERTa-XL model)"),XWo=l(),$1=a("li"),tpe=a("strong"),zWo=o("xlnet"),WWo=o(" \u2014 "),LX=a("a"),QWo=o("XLNetForTokenClassification"),HWo=o(" (XLNet model)"),UWo=l(),k1=a("li"),ape=a("strong"),JWo=o("yoso"),YWo=o(" \u2014 "),xX=a("a"),KWo=o("YosoForTokenClassification"),ZWo=o(" (YOSO model)"),eQo=l(),S1=a("p"),oQo=o("The model is set in evaluation mode by default using "),npe=a("code"),rQo=o("model.eval()"),tQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=a("code"),aQo=o("model.train()"),nQo=l(),F(R1.$$.fragment),WDe=l(),sd=a("h2"),P1=a("a"),lpe=a("span"),F(y7.$$.fragment),sQo=l(),ipe=a("span"),lQo=o("AutoModelForQuestionAnswering"),QDe=l(),qo=a("div"),F(L7.$$.fragment),iQo=l(),ld=a("p"),dQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$X=a("a"),cQo=o("from_pretrained()"),mQo=o(" class method or the "),kX=a("a"),fQo=o("from_config()"),gQo=o(` class
method.`),hQo=l(),x7=a("p"),uQo=o("This class cannot be instantiated directly using "),dpe=a("code"),pQo=o("__init__()"),_Qo=o(" (throws an error)."),bQo=l(),ht=a("div"),F($7.$$.fragment),vQo=l(),cpe=a("p"),FQo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TQo=l(),id=a("p"),MQo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),EQo=o("not"),CQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),wQo=o("from_pretrained()"),AQo=o(" to load the model weights."),yQo=l(),F(B1.$$.fragment),LQo=l(),no=a("div"),F(k7.$$.fragment),xQo=l(),fpe=a("p"),$Qo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kQo=l(),Ga=a("p"),SQo=o("The model class to instantiate is selected based on the "),gpe=a("code"),RQo=o("model_type"),PQo=o(` property of the config object (either
passed as an argument or loaded from `),hpe=a("code"),BQo=o("pretrained_model_name_or_path"),IQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),NQo=o("pretrained_model_name_or_path"),qQo=o(":"),jQo=l(),V=a("ul"),I1=a("li"),ppe=a("strong"),DQo=o("albert"),GQo=o(" \u2014 "),RX=a("a"),OQo=o("AlbertForQuestionAnswering"),VQo=o(" (ALBERT model)"),XQo=l(),N1=a("li"),_pe=a("strong"),zQo=o("bart"),WQo=o(" \u2014 "),PX=a("a"),QQo=o("BartForQuestionAnswering"),HQo=o(" (BART model)"),UQo=l(),q1=a("li"),bpe=a("strong"),JQo=o("bert"),YQo=o(" \u2014 "),BX=a("a"),KQo=o("BertForQuestionAnswering"),ZQo=o(" (BERT model)"),eHo=l(),j1=a("li"),vpe=a("strong"),oHo=o("big_bird"),rHo=o(" \u2014 "),IX=a("a"),tHo=o("BigBirdForQuestionAnswering"),aHo=o(" (BigBird model)"),nHo=l(),D1=a("li"),Fpe=a("strong"),sHo=o("bigbird_pegasus"),lHo=o(" \u2014 "),NX=a("a"),iHo=o("BigBirdPegasusForQuestionAnswering"),dHo=o(" (BigBird-Pegasus model)"),cHo=l(),G1=a("li"),Tpe=a("strong"),mHo=o("camembert"),fHo=o(" \u2014 "),qX=a("a"),gHo=o("CamembertForQuestionAnswering"),hHo=o(" (CamemBERT model)"),uHo=l(),O1=a("li"),Mpe=a("strong"),pHo=o("canine"),_Ho=o(" \u2014 "),jX=a("a"),bHo=o("CanineForQuestionAnswering"),vHo=o(" (CANINE model)"),FHo=l(),V1=a("li"),Epe=a("strong"),THo=o("convbert"),MHo=o(" \u2014 "),DX=a("a"),EHo=o("ConvBertForQuestionAnswering"),CHo=o(" (ConvBERT model)"),wHo=l(),X1=a("li"),Cpe=a("strong"),AHo=o("data2vec-text"),yHo=o(" \u2014 "),GX=a("a"),LHo=o("Data2VecTextForQuestionAnswering"),xHo=o(" (Data2VecText model)"),$Ho=l(),z1=a("li"),wpe=a("strong"),kHo=o("deberta"),SHo=o(" \u2014 "),OX=a("a"),RHo=o("DebertaForQuestionAnswering"),PHo=o(" (DeBERTa model)"),BHo=l(),W1=a("li"),Ape=a("strong"),IHo=o("deberta-v2"),NHo=o(" \u2014 "),VX=a("a"),qHo=o("DebertaV2ForQuestionAnswering"),jHo=o(" (DeBERTa-v2 model)"),DHo=l(),Q1=a("li"),ype=a("strong"),GHo=o("distilbert"),OHo=o(" \u2014 "),XX=a("a"),VHo=o("DistilBertForQuestionAnswering"),XHo=o(" (DistilBERT model)"),zHo=l(),H1=a("li"),Lpe=a("strong"),WHo=o("electra"),QHo=o(" \u2014 "),zX=a("a"),HHo=o("ElectraForQuestionAnswering"),UHo=o(" (ELECTRA model)"),JHo=l(),U1=a("li"),xpe=a("strong"),YHo=o("flaubert"),KHo=o(" \u2014 "),WX=a("a"),ZHo=o("FlaubertForQuestionAnsweringSimple"),eUo=o(" (FlauBERT model)"),oUo=l(),J1=a("li"),$pe=a("strong"),rUo=o("fnet"),tUo=o(" \u2014 "),QX=a("a"),aUo=o("FNetForQuestionAnswering"),nUo=o(" (FNet model)"),sUo=l(),Y1=a("li"),kpe=a("strong"),lUo=o("funnel"),iUo=o(" \u2014 "),HX=a("a"),dUo=o("FunnelForQuestionAnswering"),cUo=o(" (Funnel Transformer model)"),mUo=l(),K1=a("li"),Spe=a("strong"),fUo=o("gptj"),gUo=o(" \u2014 "),UX=a("a"),hUo=o("GPTJForQuestionAnswering"),uUo=o(" (GPT-J model)"),pUo=l(),Z1=a("li"),Rpe=a("strong"),_Uo=o("ibert"),bUo=o(" \u2014 "),JX=a("a"),vUo=o("IBertForQuestionAnswering"),FUo=o(" (I-BERT model)"),TUo=l(),eT=a("li"),Ppe=a("strong"),MUo=o("layoutlmv2"),EUo=o(" \u2014 "),YX=a("a"),CUo=o("LayoutLMv2ForQuestionAnswering"),wUo=o(" (LayoutLMv2 model)"),AUo=l(),oT=a("li"),Bpe=a("strong"),yUo=o("layoutlmv3"),LUo=o(" \u2014 "),KX=a("a"),xUo=o("LayoutLMv3ForQuestionAnswering"),$Uo=o(" (LayoutLMv3 model)"),kUo=l(),rT=a("li"),Ipe=a("strong"),SUo=o("led"),RUo=o(" \u2014 "),ZX=a("a"),PUo=o("LEDForQuestionAnswering"),BUo=o(" (LED model)"),IUo=l(),tT=a("li"),Npe=a("strong"),NUo=o("longformer"),qUo=o(" \u2014 "),ez=a("a"),jUo=o("LongformerForQuestionAnswering"),DUo=o(" (Longformer model)"),GUo=l(),aT=a("li"),qpe=a("strong"),OUo=o("lxmert"),VUo=o(" \u2014 "),oz=a("a"),XUo=o("LxmertForQuestionAnswering"),zUo=o(" (LXMERT model)"),WUo=l(),nT=a("li"),jpe=a("strong"),QUo=o("mbart"),HUo=o(" \u2014 "),rz=a("a"),UUo=o("MBartForQuestionAnswering"),JUo=o(" (mBART model)"),YUo=l(),sT=a("li"),Dpe=a("strong"),KUo=o("megatron-bert"),ZUo=o(" \u2014 "),tz=a("a"),eJo=o("MegatronBertForQuestionAnswering"),oJo=o(" (Megatron-BERT model)"),rJo=l(),lT=a("li"),Gpe=a("strong"),tJo=o("mobilebert"),aJo=o(" \u2014 "),az=a("a"),nJo=o("MobileBertForQuestionAnswering"),sJo=o(" (MobileBERT model)"),lJo=l(),iT=a("li"),Ope=a("strong"),iJo=o("mpnet"),dJo=o(" \u2014 "),nz=a("a"),cJo=o("MPNetForQuestionAnswering"),mJo=o(" (MPNet model)"),fJo=l(),dT=a("li"),Vpe=a("strong"),gJo=o("nystromformer"),hJo=o(" \u2014 "),sz=a("a"),uJo=o("NystromformerForQuestionAnswering"),pJo=o(" (Nystr\xF6mformer model)"),_Jo=l(),cT=a("li"),Xpe=a("strong"),bJo=o("qdqbert"),vJo=o(" \u2014 "),lz=a("a"),FJo=o("QDQBertForQuestionAnswering"),TJo=o(" (QDQBert model)"),MJo=l(),mT=a("li"),zpe=a("strong"),EJo=o("reformer"),CJo=o(" \u2014 "),iz=a("a"),wJo=o("ReformerForQuestionAnswering"),AJo=o(" (Reformer model)"),yJo=l(),fT=a("li"),Wpe=a("strong"),LJo=o("rembert"),xJo=o(" \u2014 "),dz=a("a"),$Jo=o("RemBertForQuestionAnswering"),kJo=o(" (RemBERT model)"),SJo=l(),gT=a("li"),Qpe=a("strong"),RJo=o("roberta"),PJo=o(" \u2014 "),cz=a("a"),BJo=o("RobertaForQuestionAnswering"),IJo=o(" (RoBERTa model)"),NJo=l(),hT=a("li"),Hpe=a("strong"),qJo=o("roformer"),jJo=o(" \u2014 "),mz=a("a"),DJo=o("RoFormerForQuestionAnswering"),GJo=o(" (RoFormer model)"),OJo=l(),uT=a("li"),Upe=a("strong"),VJo=o("splinter"),XJo=o(" \u2014 "),fz=a("a"),zJo=o("SplinterForQuestionAnswering"),WJo=o(" (Splinter model)"),QJo=l(),pT=a("li"),Jpe=a("strong"),HJo=o("squeezebert"),UJo=o(" \u2014 "),gz=a("a"),JJo=o("SqueezeBertForQuestionAnswering"),YJo=o(" (SqueezeBERT model)"),KJo=l(),_T=a("li"),Ype=a("strong"),ZJo=o("xlm"),eYo=o(" \u2014 "),hz=a("a"),oYo=o("XLMForQuestionAnsweringSimple"),rYo=o(" (XLM model)"),tYo=l(),bT=a("li"),Kpe=a("strong"),aYo=o("xlm-roberta"),nYo=o(" \u2014 "),uz=a("a"),sYo=o("XLMRobertaForQuestionAnswering"),lYo=o(" (XLM-RoBERTa model)"),iYo=l(),vT=a("li"),Zpe=a("strong"),dYo=o("xlm-roberta-xl"),cYo=o(" \u2014 "),pz=a("a"),mYo=o("XLMRobertaXLForQuestionAnswering"),fYo=o(" (XLM-RoBERTa-XL model)"),gYo=l(),FT=a("li"),e_e=a("strong"),hYo=o("xlnet"),uYo=o(" \u2014 "),_z=a("a"),pYo=o("XLNetForQuestionAnsweringSimple"),_Yo=o(" (XLNet model)"),bYo=l(),TT=a("li"),o_e=a("strong"),vYo=o("yoso"),FYo=o(" \u2014 "),bz=a("a"),TYo=o("YosoForQuestionAnswering"),MYo=o(" (YOSO model)"),EYo=l(),MT=a("p"),CYo=o("The model is set in evaluation mode by default using "),r_e=a("code"),wYo=o("model.eval()"),AYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=a("code"),yYo=o("model.train()"),LYo=l(),F(ET.$$.fragment),HDe=l(),dd=a("h2"),CT=a("a"),a_e=a("span"),F(S7.$$.fragment),xYo=l(),n_e=a("span"),$Yo=o("AutoModelForTableQuestionAnswering"),UDe=l(),jo=a("div"),F(R7.$$.fragment),kYo=l(),cd=a("p"),SYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vz=a("a"),RYo=o("from_pretrained()"),PYo=o(" class method or the "),Fz=a("a"),BYo=o("from_config()"),IYo=o(` class
method.`),NYo=l(),P7=a("p"),qYo=o("This class cannot be instantiated directly using "),s_e=a("code"),jYo=o("__init__()"),DYo=o(" (throws an error)."),GYo=l(),ut=a("div"),F(B7.$$.fragment),OYo=l(),l_e=a("p"),VYo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XYo=l(),md=a("p"),zYo=o(`Note:
Loading a model from its configuration file does `),i_e=a("strong"),WYo=o("not"),QYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),HYo=o("from_pretrained()"),UYo=o(" to load the model weights."),JYo=l(),F(wT.$$.fragment),YYo=l(),so=a("div"),F(I7.$$.fragment),KYo=l(),d_e=a("p"),ZYo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eKo=l(),Oa=a("p"),oKo=o("The model class to instantiate is selected based on the "),c_e=a("code"),rKo=o("model_type"),tKo=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),aKo=o("pretrained_model_name_or_path"),nKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(":"),iKo=l(),g_e=a("ul"),AT=a("li"),h_e=a("strong"),dKo=o("tapas"),cKo=o(" \u2014 "),Mz=a("a"),mKo=o("TapasForQuestionAnswering"),fKo=o(" (TAPAS model)"),gKo=l(),yT=a("p"),hKo=o("The model is set in evaluation mode by default using "),u_e=a("code"),uKo=o("model.eval()"),pKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),_Ko=o("model.train()"),bKo=l(),F(LT.$$.fragment),JDe=l(),fd=a("h2"),xT=a("a"),__e=a("span"),F(N7.$$.fragment),vKo=l(),b_e=a("span"),FKo=o("AutoModelForImageClassification"),YDe=l(),Do=a("div"),F(q7.$$.fragment),TKo=l(),gd=a("p"),MKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ez=a("a"),EKo=o("from_pretrained()"),CKo=o(" class method or the "),Cz=a("a"),wKo=o("from_config()"),AKo=o(` class
method.`),yKo=l(),j7=a("p"),LKo=o("This class cannot be instantiated directly using "),v_e=a("code"),xKo=o("__init__()"),$Ko=o(" (throws an error)."),kKo=l(),pt=a("div"),F(D7.$$.fragment),SKo=l(),F_e=a("p"),RKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PKo=l(),hd=a("p"),BKo=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),IKo=o("not"),NKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),qKo=o("from_pretrained()"),jKo=o(" to load the model weights."),DKo=l(),F($T.$$.fragment),GKo=l(),lo=a("div"),F(G7.$$.fragment),OKo=l(),M_e=a("p"),VKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XKo=l(),Va=a("p"),zKo=o("The model class to instantiate is selected based on the "),E_e=a("code"),WKo=o("model_type"),QKo=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),HKo=o("pretrained_model_name_or_path"),UKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),JKo=o("pretrained_model_name_or_path"),YKo=o(":"),KKo=l(),ve=a("ul"),kT=a("li"),A_e=a("strong"),ZKo=o("beit"),eZo=o(" \u2014 "),Az=a("a"),oZo=o("BeitForImageClassification"),rZo=o(" (BEiT model)"),tZo=l(),ST=a("li"),y_e=a("strong"),aZo=o("convnext"),nZo=o(" \u2014 "),yz=a("a"),sZo=o("ConvNextForImageClassification"),lZo=o(" (ConvNeXT model)"),iZo=l(),RT=a("li"),L_e=a("strong"),dZo=o("cvt"),cZo=o(" \u2014 "),Lz=a("a"),mZo=o("CvtForImageClassification"),fZo=o(" (CvT model)"),gZo=l(),PT=a("li"),x_e=a("strong"),hZo=o("data2vec-vision"),uZo=o(" \u2014 "),xz=a("a"),pZo=o("Data2VecVisionForImageClassification"),_Zo=o(" (Data2VecVision model)"),bZo=l(),Gs=a("li"),$_e=a("strong"),vZo=o("deit"),FZo=o(" \u2014 "),$z=a("a"),TZo=o("DeiTForImageClassification"),MZo=o(" or "),kz=a("a"),EZo=o("DeiTForImageClassificationWithTeacher"),CZo=o(" (DeiT model)"),wZo=l(),BT=a("li"),k_e=a("strong"),AZo=o("imagegpt"),yZo=o(" \u2014 "),Sz=a("a"),LZo=o("ImageGPTForImageClassification"),xZo=o(" (ImageGPT model)"),$Zo=l(),Os=a("li"),S_e=a("strong"),kZo=o("levit"),SZo=o(" \u2014 "),Rz=a("a"),RZo=o("LevitForImageClassification"),PZo=o(" or "),Pz=a("a"),BZo=o("LevitForImageClassificationWithTeacher"),IZo=o(" (LeViT model)"),NZo=l(),_t=a("li"),R_e=a("strong"),qZo=o("perceiver"),jZo=o(" \u2014 "),Bz=a("a"),DZo=o("PerceiverForImageClassificationLearned"),GZo=o(" or "),Iz=a("a"),OZo=o("PerceiverForImageClassificationFourier"),VZo=o(" or "),Nz=a("a"),XZo=o("PerceiverForImageClassificationConvProcessing"),zZo=o(" (Perceiver model)"),WZo=l(),IT=a("li"),P_e=a("strong"),QZo=o("poolformer"),HZo=o(" \u2014 "),qz=a("a"),UZo=o("PoolFormerForImageClassification"),JZo=o(" (PoolFormer model)"),YZo=l(),NT=a("li"),B_e=a("strong"),KZo=o("regnet"),ZZo=o(" \u2014 "),jz=a("a"),eer=o("RegNetForImageClassification"),oer=o(" (RegNet model)"),rer=l(),qT=a("li"),I_e=a("strong"),ter=o("resnet"),aer=o(" \u2014 "),Dz=a("a"),ner=o("ResNetForImageClassification"),ser=o(" (ResNet model)"),ler=l(),jT=a("li"),N_e=a("strong"),ier=o("segformer"),der=o(" \u2014 "),Gz=a("a"),cer=o("SegformerForImageClassification"),mer=o(" (SegFormer model)"),fer=l(),DT=a("li"),q_e=a("strong"),ger=o("swin"),her=o(" \u2014 "),Oz=a("a"),uer=o("SwinForImageClassification"),per=o(" (Swin Transformer model)"),_er=l(),GT=a("li"),j_e=a("strong"),ber=o("van"),ver=o(" \u2014 "),Vz=a("a"),Fer=o("VanForImageClassification"),Ter=o(" (VAN model)"),Mer=l(),OT=a("li"),D_e=a("strong"),Eer=o("vit"),Cer=o(" \u2014 "),Xz=a("a"),wer=o("ViTForImageClassification"),Aer=o(" (ViT model)"),yer=l(),VT=a("p"),Ler=o("The model is set in evaluation mode by default using "),G_e=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=a("code"),ker=o("model.train()"),Ser=l(),F(XT.$$.fragment),KDe=l(),ud=a("h2"),zT=a("a"),V_e=a("span"),F(O7.$$.fragment),Rer=l(),X_e=a("span"),Per=o("AutoModelForVision2Seq"),ZDe=l(),Go=a("div"),F(V7.$$.fragment),Ber=l(),pd=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zz=a("a"),Ner=o("from_pretrained()"),qer=o(" class method or the "),Wz=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),X7=a("p"),Oer=o("This class cannot be instantiated directly using "),z_e=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),bt=a("div"),F(z7.$$.fragment),Wer=l(),W_e=a("p"),Qer=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Her=l(),_d=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),Q_e=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(WT.$$.fragment),oor=l(),io=a("div"),F(W7.$$.fragment),ror=l(),H_e=a("p"),tor=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aor=l(),Xa=a("p"),nor=o("The model class to instantiate is selected based on the "),U_e=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),J_e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),K_e=a("ul"),QT=a("li"),Z_e=a("strong"),hor=o("vision-encoder-decoder"),uor=o(" \u2014 "),Hz=a("a"),por=o("VisionEncoderDecoderModel"),_or=o(" (Vision Encoder decoder model)"),bor=l(),HT=a("p"),vor=o("The model is set in evaluation mode by default using "),ebe=a("code"),For=o("model.eval()"),Tor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),Mor=o("model.train()"),Eor=l(),F(UT.$$.fragment),eGe=l(),bd=a("h2"),JT=a("a"),rbe=a("span"),F(Q7.$$.fragment),Cor=l(),tbe=a("span"),wor=o("AutoModelForVisualQuestionAnswering"),oGe=l(),Oo=a("div"),F(H7.$$.fragment),Aor=l(),vd=a("p"),yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),Uz=a("a"),Lor=o("from_pretrained()"),xor=o(" class method or the "),Jz=a("a"),$or=o("from_config()"),kor=o(` class
method.`),Sor=l(),U7=a("p"),Ror=o("This class cannot be instantiated directly using "),abe=a("code"),Por=o("__init__()"),Bor=o(" (throws an error)."),Ior=l(),vt=a("div"),F(J7.$$.fragment),Nor=l(),nbe=a("p"),qor=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),jor=l(),Fd=a("p"),Dor=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),Gor=o("not"),Oor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),Vor=o("from_pretrained()"),Xor=o(" to load the model weights."),zor=l(),F(YT.$$.fragment),Wor=l(),co=a("div"),F(Y7.$$.fragment),Qor=l(),lbe=a("p"),Hor=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Uor=l(),za=a("p"),Jor=o("The model class to instantiate is selected based on the "),ibe=a("code"),Yor=o("model_type"),Kor=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),orr=o("pretrained_model_name_or_path"),rrr=o(":"),trr=l(),mbe=a("ul"),KT=a("li"),fbe=a("strong"),arr=o("vilt"),nrr=o(" \u2014 "),Kz=a("a"),srr=o("ViltForQuestionAnswering"),lrr=o(" (ViLT model)"),irr=l(),ZT=a("p"),drr=o("The model is set in evaluation mode by default using "),gbe=a("code"),crr=o("model.eval()"),mrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=a("code"),frr=o("model.train()"),grr=l(),F(eM.$$.fragment),rGe=l(),Td=a("h2"),oM=a("a"),ube=a("span"),F(K7.$$.fragment),hrr=l(),pbe=a("span"),urr=o("AutoModelForAudioClassification"),tGe=l(),Vo=a("div"),F(Z7.$$.fragment),prr=l(),Md=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Zz=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),eW=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),e8=a("p"),Err=o("This class cannot be instantiated directly using "),_be=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Ft=a("div"),F(o8.$$.fragment),yrr=l(),bbe=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),xrr=l(),Ed=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),Rrr=o("from_pretrained()"),Prr=o(" to load the model weights."),Brr=l(),F(rM.$$.fragment),Irr=l(),mo=a("div"),F(r8.$$.fragment),Nrr=l(),Fbe=a("p"),qrr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jrr=l(),Wa=a("p"),Drr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),zrr=o("pretrained_model_name_or_path"),Wrr=o(":"),Qrr=l(),Re=a("ul"),tM=a("li"),Cbe=a("strong"),Hrr=o("data2vec-audio"),Urr=o(" \u2014 "),rW=a("a"),Jrr=o("Data2VecAudioForSequenceClassification"),Yrr=o(" (Data2VecAudio model)"),Krr=l(),aM=a("li"),wbe=a("strong"),Zrr=o("hubert"),etr=o(" \u2014 "),tW=a("a"),otr=o("HubertForSequenceClassification"),rtr=o(" (Hubert model)"),ttr=l(),nM=a("li"),Abe=a("strong"),atr=o("sew"),ntr=o(" \u2014 "),aW=a("a"),str=o("SEWForSequenceClassification"),ltr=o(" (SEW model)"),itr=l(),sM=a("li"),ybe=a("strong"),dtr=o("sew-d"),ctr=o(" \u2014 "),nW=a("a"),mtr=o("SEWDForSequenceClassification"),ftr=o(" (SEW-D model)"),gtr=l(),lM=a("li"),Lbe=a("strong"),htr=o("unispeech"),utr=o(" \u2014 "),sW=a("a"),ptr=o("UniSpeechForSequenceClassification"),_tr=o(" (UniSpeech model)"),btr=l(),iM=a("li"),xbe=a("strong"),vtr=o("unispeech-sat"),Ftr=o(" \u2014 "),lW=a("a"),Ttr=o("UniSpeechSatForSequenceClassification"),Mtr=o(" (UniSpeechSat model)"),Etr=l(),dM=a("li"),$be=a("strong"),Ctr=o("wav2vec2"),wtr=o(" \u2014 "),iW=a("a"),Atr=o("Wav2Vec2ForSequenceClassification"),ytr=o(" (Wav2Vec2 model)"),Ltr=l(),cM=a("li"),kbe=a("strong"),xtr=o("wav2vec2-conformer"),$tr=o(" \u2014 "),dW=a("a"),ktr=o("Wav2Vec2ConformerForSequenceClassification"),Str=o(" (Wav2Vec2-Conformer model)"),Rtr=l(),mM=a("li"),Sbe=a("strong"),Ptr=o("wavlm"),Btr=o(" \u2014 "),cW=a("a"),Itr=o("WavLMForSequenceClassification"),Ntr=o(" (WavLM model)"),qtr=l(),fM=a("p"),jtr=o("The model is set in evaluation mode by default using "),Rbe=a("code"),Dtr=o("model.eval()"),Gtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=a("code"),Otr=o("model.train()"),Vtr=l(),F(gM.$$.fragment),aGe=l(),Cd=a("h2"),hM=a("a"),Bbe=a("span"),F(t8.$$.fragment),Xtr=l(),Ibe=a("span"),ztr=o("AutoModelForAudioFrameClassification"),nGe=l(),Xo=a("div"),F(a8.$$.fragment),Wtr=l(),wd=a("p"),Qtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mW=a("a"),Htr=o("from_pretrained()"),Utr=o(" class method or the "),fW=a("a"),Jtr=o("from_config()"),Ytr=o(` class
method.`),Ktr=l(),n8=a("p"),Ztr=o("This class cannot be instantiated directly using "),Nbe=a("code"),ear=o("__init__()"),oar=o(" (throws an error)."),rar=l(),Tt=a("div"),F(s8.$$.fragment),tar=l(),qbe=a("p"),aar=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nar=l(),Ad=a("p"),sar=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),lar=o("not"),iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),dar=o("from_pretrained()"),car=o(" to load the model weights."),mar=l(),F(uM.$$.fragment),far=l(),fo=a("div"),F(l8.$$.fragment),gar=l(),Dbe=a("p"),har=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uar=l(),Qa=a("p"),par=o("The model class to instantiate is selected based on the "),Gbe=a("code"),_ar=o("model_type"),bar=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),Far=o("pretrained_model_name_or_path"),Tar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),Mar=o("pretrained_model_name_or_path"),Ear=o(":"),Car=l(),et=a("ul"),pM=a("li"),Xbe=a("strong"),war=o("data2vec-audio"),Aar=o(" \u2014 "),hW=a("a"),yar=o("Data2VecAudioForAudioFrameClassification"),Lar=o(" (Data2VecAudio model)"),xar=l(),_M=a("li"),zbe=a("strong"),$ar=o("unispeech-sat"),kar=o(" \u2014 "),uW=a("a"),Sar=o("UniSpeechSatForAudioFrameClassification"),Rar=o(" (UniSpeechSat model)"),Par=l(),bM=a("li"),Wbe=a("strong"),Bar=o("wav2vec2"),Iar=o(" \u2014 "),pW=a("a"),Nar=o("Wav2Vec2ForAudioFrameClassification"),qar=o(" (Wav2Vec2 model)"),jar=l(),vM=a("li"),Qbe=a("strong"),Dar=o("wav2vec2-conformer"),Gar=o(" \u2014 "),_W=a("a"),Oar=o("Wav2Vec2ConformerForAudioFrameClassification"),Var=o(" (Wav2Vec2-Conformer model)"),Xar=l(),FM=a("li"),Hbe=a("strong"),zar=o("wavlm"),War=o(" \u2014 "),bW=a("a"),Qar=o("WavLMForAudioFrameClassification"),Har=o(" (WavLM model)"),Uar=l(),TM=a("p"),Jar=o("The model is set in evaluation mode by default using "),Ube=a("code"),Yar=o("model.eval()"),Kar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),Zar=o("model.train()"),enr=l(),F(MM.$$.fragment),sGe=l(),yd=a("h2"),EM=a("a"),Ybe=a("span"),F(i8.$$.fragment),onr=l(),Kbe=a("span"),rnr=o("AutoModelForCTC"),lGe=l(),zo=a("div"),F(d8.$$.fragment),tnr=l(),Ld=a("p"),anr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vW=a("a"),nnr=o("from_pretrained()"),snr=o(" class method or the "),FW=a("a"),lnr=o("from_config()"),inr=o(` class
method.`),dnr=l(),c8=a("p"),cnr=o("This class cannot be instantiated directly using "),Zbe=a("code"),mnr=o("__init__()"),fnr=o(" (throws an error)."),gnr=l(),Mt=a("div"),F(m8.$$.fragment),hnr=l(),e2e=a("p"),unr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pnr=l(),xd=a("p"),_nr=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),bnr=o("not"),vnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" to load the model weights."),Mnr=l(),F(CM.$$.fragment),Enr=l(),go=a("div"),F(f8.$$.fragment),Cnr=l(),r2e=a("p"),wnr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Anr=l(),Ha=a("p"),ynr=o("The model class to instantiate is selected based on the "),t2e=a("code"),Lnr=o("model_type"),xnr=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(":"),Pnr=l(),ye=a("ul"),wM=a("li"),s2e=a("strong"),Bnr=o("data2vec-audio"),Inr=o(" \u2014 "),MW=a("a"),Nnr=o("Data2VecAudioForCTC"),qnr=o(" (Data2VecAudio model)"),jnr=l(),AM=a("li"),l2e=a("strong"),Dnr=o("hubert"),Gnr=o(" \u2014 "),EW=a("a"),Onr=o("HubertForCTC"),Vnr=o(" (Hubert model)"),Xnr=l(),yM=a("li"),i2e=a("strong"),znr=o("mctct"),Wnr=o(" \u2014 "),CW=a("a"),Qnr=o("MCTCTForCTC"),Hnr=o(" (M-CTC-T model)"),Unr=l(),LM=a("li"),d2e=a("strong"),Jnr=o("sew"),Ynr=o(" \u2014 "),wW=a("a"),Knr=o("SEWForCTC"),Znr=o(" (SEW model)"),esr=l(),xM=a("li"),c2e=a("strong"),osr=o("sew-d"),rsr=o(" \u2014 "),AW=a("a"),tsr=o("SEWDForCTC"),asr=o(" (SEW-D model)"),nsr=l(),$M=a("li"),m2e=a("strong"),ssr=o("unispeech"),lsr=o(" \u2014 "),yW=a("a"),isr=o("UniSpeechForCTC"),dsr=o(" (UniSpeech model)"),csr=l(),kM=a("li"),f2e=a("strong"),msr=o("unispeech-sat"),fsr=o(" \u2014 "),LW=a("a"),gsr=o("UniSpeechSatForCTC"),hsr=o(" (UniSpeechSat model)"),usr=l(),SM=a("li"),g2e=a("strong"),psr=o("wav2vec2"),_sr=o(" \u2014 "),xW=a("a"),bsr=o("Wav2Vec2ForCTC"),vsr=o(" (Wav2Vec2 model)"),Fsr=l(),RM=a("li"),h2e=a("strong"),Tsr=o("wav2vec2-conformer"),Msr=o(" \u2014 "),$W=a("a"),Esr=o("Wav2Vec2ConformerForCTC"),Csr=o(" (Wav2Vec2-Conformer model)"),wsr=l(),PM=a("li"),u2e=a("strong"),Asr=o("wavlm"),ysr=o(" \u2014 "),kW=a("a"),Lsr=o("WavLMForCTC"),xsr=o(" (WavLM model)"),$sr=l(),BM=a("p"),ksr=o("The model is set in evaluation mode by default using "),p2e=a("code"),Ssr=o("model.eval()"),Rsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),Psr=o("model.train()"),Bsr=l(),F(IM.$$.fragment),iGe=l(),$d=a("h2"),NM=a("a"),b2e=a("span"),F(g8.$$.fragment),Isr=l(),v2e=a("span"),Nsr=o("AutoModelForSpeechSeq2Seq"),dGe=l(),Wo=a("div"),F(h8.$$.fragment),qsr=l(),kd=a("p"),jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SW=a("a"),Dsr=o("from_pretrained()"),Gsr=o(" class method or the "),RW=a("a"),Osr=o("from_config()"),Vsr=o(` class
method.`),Xsr=l(),u8=a("p"),zsr=o("This class cannot be instantiated directly using "),F2e=a("code"),Wsr=o("__init__()"),Qsr=o(" (throws an error)."),Hsr=l(),Et=a("div"),F(p8.$$.fragment),Usr=l(),T2e=a("p"),Jsr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ysr=l(),Sd=a("p"),Ksr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),Zsr=o("not"),elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),olr=o("from_pretrained()"),rlr=o(" to load the model weights."),tlr=l(),F(qM.$$.fragment),alr=l(),ho=a("div"),F(_8.$$.fragment),nlr=l(),E2e=a("p"),slr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),llr=l(),Ua=a("p"),ilr=o("The model class to instantiate is selected based on the "),C2e=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),mlr=o("pretrained_model_name_or_path"),flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),ulr=l(),b8=a("ul"),jM=a("li"),y2e=a("strong"),plr=o("speech-encoder-decoder"),_lr=o(" \u2014 "),BW=a("a"),blr=o("SpeechEncoderDecoderModel"),vlr=o(" (Speech Encoder decoder model)"),Flr=l(),DM=a("li"),L2e=a("strong"),Tlr=o("speech_to_text"),Mlr=o(" \u2014 "),IW=a("a"),Elr=o("Speech2TextForConditionalGeneration"),Clr=o(" (Speech2Text model)"),wlr=l(),GM=a("p"),Alr=o("The model is set in evaluation mode by default using "),x2e=a("code"),ylr=o("model.eval()"),Llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),xlr=o("model.train()"),$lr=l(),F(OM.$$.fragment),cGe=l(),Rd=a("h2"),VM=a("a"),k2e=a("span"),F(v8.$$.fragment),klr=l(),S2e=a("span"),Slr=o("AutoModelForAudioXVector"),mGe=l(),Qo=a("div"),F(F8.$$.fragment),Rlr=l(),Pd=a("p"),Plr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NW=a("a"),Blr=o("from_pretrained()"),Ilr=o(" class method or the "),qW=a("a"),Nlr=o("from_config()"),qlr=o(` class
method.`),jlr=l(),T8=a("p"),Dlr=o("This class cannot be instantiated directly using "),R2e=a("code"),Glr=o("__init__()"),Olr=o(" (throws an error)."),Vlr=l(),Ct=a("div"),F(M8.$$.fragment),Xlr=l(),P2e=a("p"),zlr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Wlr=l(),Bd=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Hlr=o("not"),Ulr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" to load the model weights."),Klr=l(),F(XM.$$.fragment),Zlr=l(),uo=a("div"),F(E8.$$.fragment),eir=l(),I2e=a("p"),oir=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rir=l(),Ja=a("p"),tir=o("The model class to instantiate is selected based on the "),N2e=a("code"),air=o("model_type"),nir=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),sir=o("pretrained_model_name_or_path"),lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),iir=o("pretrained_model_name_or_path"),dir=o(":"),cir=l(),ot=a("ul"),zM=a("li"),D2e=a("strong"),mir=o("data2vec-audio"),fir=o(" \u2014 "),DW=a("a"),gir=o("Data2VecAudioForXVector"),hir=o(" (Data2VecAudio model)"),uir=l(),WM=a("li"),G2e=a("strong"),pir=o("unispeech-sat"),_ir=o(" \u2014 "),GW=a("a"),bir=o("UniSpeechSatForXVector"),vir=o(" (UniSpeechSat model)"),Fir=l(),QM=a("li"),O2e=a("strong"),Tir=o("wav2vec2"),Mir=o(" \u2014 "),OW=a("a"),Eir=o("Wav2Vec2ForXVector"),Cir=o(" (Wav2Vec2 model)"),wir=l(),HM=a("li"),V2e=a("strong"),Air=o("wav2vec2-conformer"),yir=o(" \u2014 "),VW=a("a"),Lir=o("Wav2Vec2ConformerForXVector"),xir=o(" (Wav2Vec2-Conformer model)"),$ir=l(),UM=a("li"),X2e=a("strong"),kir=o("wavlm"),Sir=o(" \u2014 "),XW=a("a"),Rir=o("WavLMForXVector"),Pir=o(" (WavLM model)"),Bir=l(),JM=a("p"),Iir=o("The model is set in evaluation mode by default using "),z2e=a("code"),Nir=o("model.eval()"),qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=a("code"),jir=o("model.train()"),Dir=l(),F(YM.$$.fragment),fGe=l(),Id=a("h2"),KM=a("a"),Q2e=a("span"),F(C8.$$.fragment),Gir=l(),H2e=a("span"),Oir=o("AutoModelForMaskedImageModeling"),gGe=l(),Ho=a("div"),F(w8.$$.fragment),Vir=l(),Nd=a("p"),Xir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zW=a("a"),zir=o("from_pretrained()"),Wir=o(" class method or the "),WW=a("a"),Qir=o("from_config()"),Hir=o(` class
method.`),Uir=l(),A8=a("p"),Jir=o("This class cannot be instantiated directly using "),U2e=a("code"),Yir=o("__init__()"),Kir=o(" (throws an error)."),Zir=l(),wt=a("div"),F(y8.$$.fragment),edr=l(),J2e=a("p"),odr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rdr=l(),qd=a("p"),tdr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),adr=o("not"),ndr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),sdr=o("from_pretrained()"),ldr=o(" to load the model weights."),idr=l(),F(ZM.$$.fragment),ddr=l(),po=a("div"),F(L8.$$.fragment),cdr=l(),K2e=a("p"),mdr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fdr=l(),Ya=a("p"),gdr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),hdr=o("model_type"),udr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),bdr=o("pretrained_model_name_or_path"),vdr=o(":"),Fdr=l(),jd=a("ul"),e4=a("li"),rve=a("strong"),Tdr=o("deit"),Mdr=o(" \u2014 "),HW=a("a"),Edr=o("DeiTForMaskedImageModeling"),Cdr=o(" (DeiT model)"),wdr=l(),o4=a("li"),tve=a("strong"),Adr=o("swin"),ydr=o(" \u2014 "),UW=a("a"),Ldr=o("SwinForMaskedImageModeling"),xdr=o(" (Swin Transformer model)"),$dr=l(),r4=a("li"),ave=a("strong"),kdr=o("vit"),Sdr=o(" \u2014 "),JW=a("a"),Rdr=o("ViTForMaskedImageModeling"),Pdr=o(" (ViT model)"),Bdr=l(),t4=a("p"),Idr=o("The model is set in evaluation mode by default using "),nve=a("code"),Ndr=o("model.eval()"),qdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sve=a("code"),jdr=o("model.train()"),Ddr=l(),F(a4.$$.fragment),hGe=l(),Dd=a("h2"),n4=a("a"),lve=a("span"),F(x8.$$.fragment),Gdr=l(),ive=a("span"),Odr=o("AutoModelForObjectDetection"),uGe=l(),Uo=a("div"),F($8.$$.fragment),Vdr=l(),Gd=a("p"),Xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YW=a("a"),zdr=o("from_pretrained()"),Wdr=o(" class method or the "),KW=a("a"),Qdr=o("from_config()"),Hdr=o(` class
method.`),Udr=l(),k8=a("p"),Jdr=o("This class cannot be instantiated directly using "),dve=a("code"),Ydr=o("__init__()"),Kdr=o(" (throws an error)."),Zdr=l(),At=a("div"),F(S8.$$.fragment),ecr=l(),cve=a("p"),ocr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rcr=l(),Od=a("p"),tcr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),acr=o("not"),ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),scr=o("from_pretrained()"),lcr=o(" to load the model weights."),icr=l(),F(s4.$$.fragment),dcr=l(),_o=a("div"),F(R8.$$.fragment),ccr=l(),fve=a("p"),mcr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fcr=l(),Ka=a("p"),gcr=o("The model class to instantiate is selected based on the "),gve=a("code"),hcr=o("model_type"),ucr=o(` property of the config object (either
passed as an argument or loaded from `),hve=a("code"),pcr=o("pretrained_model_name_or_path"),_cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(":"),Fcr=l(),P8=a("ul"),l4=a("li"),pve=a("strong"),Tcr=o("detr"),Mcr=o(" \u2014 "),eQ=a("a"),Ecr=o("DetrForObjectDetection"),Ccr=o(" (DETR model)"),wcr=l(),i4=a("li"),_ve=a("strong"),Acr=o("yolos"),ycr=o(" \u2014 "),oQ=a("a"),Lcr=o("YolosForObjectDetection"),xcr=o(" (YOLOS model)"),$cr=l(),d4=a("p"),kcr=o("The model is set in evaluation mode by default using "),bve=a("code"),Scr=o("model.eval()"),Rcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=a("code"),Pcr=o("model.train()"),Bcr=l(),F(c4.$$.fragment),pGe=l(),Vd=a("h2"),m4=a("a"),Fve=a("span"),F(B8.$$.fragment),Icr=l(),Tve=a("span"),Ncr=o("AutoModelForImageSegmentation"),_Ge=l(),Jo=a("div"),F(I8.$$.fragment),qcr=l(),Xd=a("p"),jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rQ=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" class method or the "),tQ=a("a"),Ocr=o("from_config()"),Vcr=o(` class
method.`),Xcr=l(),N8=a("p"),zcr=o("This class cannot be instantiated directly using "),Mve=a("code"),Wcr=o("__init__()"),Qcr=o(" (throws an error)."),Hcr=l(),yt=a("div"),F(q8.$$.fragment),Ucr=l(),Eve=a("p"),Jcr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ycr=l(),zd=a("p"),Kcr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),Zcr=o("not"),emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),omr=o("from_pretrained()"),rmr=o(" to load the model weights."),tmr=l(),F(f4.$$.fragment),amr=l(),bo=a("div"),F(j8.$$.fragment),nmr=l(),wve=a("p"),smr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lmr=l(),Za=a("p"),imr=o("The model class to instantiate is selected based on the "),Ave=a("code"),dmr=o("model_type"),cmr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),mmr=o("pretrained_model_name_or_path"),fmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(":"),umr=l(),xve=a("ul"),g4=a("li"),$ve=a("strong"),pmr=o("detr"),_mr=o(" \u2014 "),nQ=a("a"),bmr=o("DetrForSegmentation"),vmr=o(" (DETR model)"),Fmr=l(),h4=a("p"),Tmr=o("The model is set in evaluation mode by default using "),kve=a("code"),Mmr=o("model.eval()"),Emr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=a("code"),Cmr=o("model.train()"),wmr=l(),F(u4.$$.fragment),bGe=l(),Wd=a("h2"),p4=a("a"),Rve=a("span"),F(D8.$$.fragment),Amr=l(),Pve=a("span"),ymr=o("AutoModelForSemanticSegmentation"),vGe=l(),Yo=a("div"),F(G8.$$.fragment),Lmr=l(),Qd=a("p"),xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sQ=a("a"),$mr=o("from_pretrained()"),kmr=o(" class method or the "),lQ=a("a"),Smr=o("from_config()"),Rmr=o(` class
method.`),Pmr=l(),O8=a("p"),Bmr=o("This class cannot be instantiated directly using "),Bve=a("code"),Imr=o("__init__()"),Nmr=o(" (throws an error)."),qmr=l(),Lt=a("div"),F(V8.$$.fragment),jmr=l(),Ive=a("p"),Dmr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gmr=l(),Hd=a("p"),Omr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),Vmr=o("not"),Xmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),zmr=o("from_pretrained()"),Wmr=o(" to load the model weights."),Qmr=l(),F(_4.$$.fragment),Hmr=l(),vo=a("div"),F(X8.$$.fragment),Umr=l(),qve=a("p"),Jmr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ymr=l(),en=a("p"),Kmr=o("The model class to instantiate is selected based on the "),jve=a("code"),Zmr=o("model_type"),efr=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),ofr=o("pretrained_model_name_or_path"),rfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),tfr=o("pretrained_model_name_or_path"),afr=o(":"),nfr=l(),on=a("ul"),b4=a("li"),Ove=a("strong"),sfr=o("beit"),lfr=o(" \u2014 "),dQ=a("a"),ifr=o("BeitForSemanticSegmentation"),dfr=o(" (BEiT model)"),cfr=l(),v4=a("li"),Vve=a("strong"),mfr=o("data2vec-vision"),ffr=o(" \u2014 "),cQ=a("a"),gfr=o("Data2VecVisionForSemanticSegmentation"),hfr=o(" (Data2VecVision model)"),ufr=l(),F4=a("li"),Xve=a("strong"),pfr=o("dpt"),_fr=o(" \u2014 "),mQ=a("a"),bfr=o("DPTForSemanticSegmentation"),vfr=o(" (DPT model)"),Ffr=l(),T4=a("li"),zve=a("strong"),Tfr=o("segformer"),Mfr=o(" \u2014 "),fQ=a("a"),Efr=o("SegformerForSemanticSegmentation"),Cfr=o(" (SegFormer model)"),wfr=l(),M4=a("p"),Afr=o("The model is set in evaluation mode by default using "),Wve=a("code"),yfr=o("model.eval()"),Lfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=a("code"),xfr=o("model.train()"),$fr=l(),F(E4.$$.fragment),FGe=l(),Ud=a("h2"),C4=a("a"),Hve=a("span"),F(z8.$$.fragment),kfr=l(),Uve=a("span"),Sfr=o("AutoModelForInstanceSegmentation"),TGe=l(),Ko=a("div"),F(W8.$$.fragment),Rfr=l(),Jd=a("p"),Pfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gQ=a("a"),Bfr=o("from_pretrained()"),Ifr=o(" class method or the "),hQ=a("a"),Nfr=o("from_config()"),qfr=o(` class
method.`),jfr=l(),Q8=a("p"),Dfr=o("This class cannot be instantiated directly using "),Jve=a("code"),Gfr=o("__init__()"),Ofr=o(" (throws an error)."),Vfr=l(),xt=a("div"),F(H8.$$.fragment),Xfr=l(),Yve=a("p"),zfr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wfr=l(),Yd=a("p"),Qfr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),Hfr=o("not"),Ufr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Jfr=o("from_pretrained()"),Yfr=o(" to load the model weights."),Kfr=l(),F(w4.$$.fragment),Zfr=l(),Fo=a("div"),F(U8.$$.fragment),egr=l(),Zve=a("p"),ogr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rgr=l(),rn=a("p"),tgr=o("The model class to instantiate is selected based on the "),eFe=a("code"),agr=o("model_type"),ngr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(":"),cgr=l(),tFe=a("ul"),A4=a("li"),aFe=a("strong"),mgr=o("maskformer"),fgr=o(" \u2014 "),pQ=a("a"),ggr=o("MaskFormerForInstanceSegmentation"),hgr=o(" (MaskFormer model)"),ugr=l(),y4=a("p"),pgr=o("The model is set in evaluation mode by default using "),nFe=a("code"),_gr=o("model.eval()"),bgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),vgr=o("model.train()"),Fgr=l(),F(L4.$$.fragment),MGe=l(),Kd=a("h2"),x4=a("a"),lFe=a("span"),F(J8.$$.fragment),Tgr=l(),iFe=a("span"),Mgr=o("TFAutoModel"),EGe=l(),Zo=a("div"),F(Y8.$$.fragment),Egr=l(),Zd=a("p"),Cgr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=a("a"),wgr=o("from_pretrained()"),Agr=o(" class method or the "),bQ=a("a"),ygr=o("from_config()"),Lgr=o(` class
method.`),xgr=l(),K8=a("p"),$gr=o("This class cannot be instantiated directly using "),dFe=a("code"),kgr=o("__init__()"),Sgr=o(" (throws an error)."),Rgr=l(),$t=a("div"),F(Z8.$$.fragment),Pgr=l(),cFe=a("p"),Bgr=o("Instantiates one of the base model classes of the library from a configuration."),Igr=l(),ec=a("p"),Ngr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),qgr=o("not"),jgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" to load the model weights."),Ogr=l(),F($4.$$.fragment),Vgr=l(),yr=a("div"),F(e9.$$.fragment),Xgr=l(),fFe=a("p"),zgr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wgr=l(),tn=a("p"),Qgr=o("The model class to instantiate is selected based on the "),gFe=a("code"),Hgr=o("model_type"),Ugr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),Jgr=o("pretrained_model_name_or_path"),Ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),Kgr=o("pretrained_model_name_or_path"),Zgr=o(":"),ehr=l(),q=a("ul"),k4=a("li"),pFe=a("strong"),ohr=o("albert"),rhr=o(" \u2014 "),FQ=a("a"),thr=o("TFAlbertModel"),ahr=o(" (ALBERT model)"),nhr=l(),S4=a("li"),_Fe=a("strong"),shr=o("bart"),lhr=o(" \u2014 "),TQ=a("a"),ihr=o("TFBartModel"),dhr=o(" (BART model)"),chr=l(),R4=a("li"),bFe=a("strong"),mhr=o("bert"),fhr=o(" \u2014 "),MQ=a("a"),ghr=o("TFBertModel"),hhr=o(" (BERT model)"),uhr=l(),P4=a("li"),vFe=a("strong"),phr=o("blenderbot"),_hr=o(" \u2014 "),EQ=a("a"),bhr=o("TFBlenderbotModel"),vhr=o(" (Blenderbot model)"),Fhr=l(),B4=a("li"),FFe=a("strong"),Thr=o("blenderbot-small"),Mhr=o(" \u2014 "),CQ=a("a"),Ehr=o("TFBlenderbotSmallModel"),Chr=o(" (BlenderbotSmall model)"),whr=l(),I4=a("li"),TFe=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),wQ=a("a"),Lhr=o("TFCamembertModel"),xhr=o(" (CamemBERT model)"),$hr=l(),N4=a("li"),MFe=a("strong"),khr=o("clip"),Shr=o(" \u2014 "),AQ=a("a"),Rhr=o("TFCLIPModel"),Phr=o(" (CLIP model)"),Bhr=l(),q4=a("li"),EFe=a("strong"),Ihr=o("convbert"),Nhr=o(" \u2014 "),yQ=a("a"),qhr=o("TFConvBertModel"),jhr=o(" (ConvBERT model)"),Dhr=l(),j4=a("li"),CFe=a("strong"),Ghr=o("convnext"),Ohr=o(" \u2014 "),LQ=a("a"),Vhr=o("TFConvNextModel"),Xhr=o(" (ConvNeXT model)"),zhr=l(),D4=a("li"),wFe=a("strong"),Whr=o("ctrl"),Qhr=o(" \u2014 "),xQ=a("a"),Hhr=o("TFCTRLModel"),Uhr=o(" (CTRL model)"),Jhr=l(),G4=a("li"),AFe=a("strong"),Yhr=o("data2vec-vision"),Khr=o(" \u2014 "),$Q=a("a"),Zhr=o("TFData2VecVisionModel"),eur=o(" (Data2VecVision model)"),our=l(),O4=a("li"),yFe=a("strong"),rur=o("deberta"),tur=o(" \u2014 "),kQ=a("a"),aur=o("TFDebertaModel"),nur=o(" (DeBERTa model)"),sur=l(),V4=a("li"),LFe=a("strong"),lur=o("deberta-v2"),iur=o(" \u2014 "),SQ=a("a"),dur=o("TFDebertaV2Model"),cur=o(" (DeBERTa-v2 model)"),mur=l(),X4=a("li"),xFe=a("strong"),fur=o("distilbert"),gur=o(" \u2014 "),RQ=a("a"),hur=o("TFDistilBertModel"),uur=o(" (DistilBERT model)"),pur=l(),z4=a("li"),$Fe=a("strong"),_ur=o("dpr"),bur=o(" \u2014 "),PQ=a("a"),vur=o("TFDPRQuestionEncoder"),Fur=o(" (DPR model)"),Tur=l(),W4=a("li"),kFe=a("strong"),Mur=o("electra"),Eur=o(" \u2014 "),BQ=a("a"),Cur=o("TFElectraModel"),wur=o(" (ELECTRA model)"),Aur=l(),Q4=a("li"),SFe=a("strong"),yur=o("flaubert"),Lur=o(" \u2014 "),IQ=a("a"),xur=o("TFFlaubertModel"),$ur=o(" (FlauBERT model)"),kur=l(),Vs=a("li"),RFe=a("strong"),Sur=o("funnel"),Rur=o(" \u2014 "),NQ=a("a"),Pur=o("TFFunnelModel"),Bur=o(" or "),qQ=a("a"),Iur=o("TFFunnelBaseModel"),Nur=o(" (Funnel Transformer model)"),qur=l(),H4=a("li"),PFe=a("strong"),jur=o("gpt2"),Dur=o(" \u2014 "),jQ=a("a"),Gur=o("TFGPT2Model"),Our=o(" (OpenAI GPT-2 model)"),Vur=l(),U4=a("li"),BFe=a("strong"),Xur=o("gptj"),zur=o(" \u2014 "),DQ=a("a"),Wur=o("TFGPTJModel"),Qur=o(" (GPT-J model)"),Hur=l(),J4=a("li"),IFe=a("strong"),Uur=o("hubert"),Jur=o(" \u2014 "),GQ=a("a"),Yur=o("TFHubertModel"),Kur=o(" (Hubert model)"),Zur=l(),Y4=a("li"),NFe=a("strong"),epr=o("layoutlm"),opr=o(" \u2014 "),OQ=a("a"),rpr=o("TFLayoutLMModel"),tpr=o(" (LayoutLM model)"),apr=l(),K4=a("li"),qFe=a("strong"),npr=o("led"),spr=o(" \u2014 "),VQ=a("a"),lpr=o("TFLEDModel"),ipr=o(" (LED model)"),dpr=l(),Z4=a("li"),jFe=a("strong"),cpr=o("longformer"),mpr=o(" \u2014 "),XQ=a("a"),fpr=o("TFLongformerModel"),gpr=o(" (Longformer model)"),hpr=l(),eE=a("li"),DFe=a("strong"),upr=o("lxmert"),ppr=o(" \u2014 "),zQ=a("a"),_pr=o("TFLxmertModel"),bpr=o(" (LXMERT model)"),vpr=l(),oE=a("li"),GFe=a("strong"),Fpr=o("marian"),Tpr=o(" \u2014 "),WQ=a("a"),Mpr=o("TFMarianModel"),Epr=o(" (Marian model)"),Cpr=l(),rE=a("li"),OFe=a("strong"),wpr=o("mbart"),Apr=o(" \u2014 "),QQ=a("a"),ypr=o("TFMBartModel"),Lpr=o(" (mBART model)"),xpr=l(),tE=a("li"),VFe=a("strong"),$pr=o("mobilebert"),kpr=o(" \u2014 "),HQ=a("a"),Spr=o("TFMobileBertModel"),Rpr=o(" (MobileBERT model)"),Ppr=l(),aE=a("li"),XFe=a("strong"),Bpr=o("mpnet"),Ipr=o(" \u2014 "),UQ=a("a"),Npr=o("TFMPNetModel"),qpr=o(" (MPNet model)"),jpr=l(),nE=a("li"),zFe=a("strong"),Dpr=o("mt5"),Gpr=o(" \u2014 "),JQ=a("a"),Opr=o("TFMT5Model"),Vpr=o(" (MT5 model)"),Xpr=l(),sE=a("li"),WFe=a("strong"),zpr=o("openai-gpt"),Wpr=o(" \u2014 "),YQ=a("a"),Qpr=o("TFOpenAIGPTModel"),Hpr=o(" (OpenAI GPT model)"),Upr=l(),lE=a("li"),QFe=a("strong"),Jpr=o("opt"),Ypr=o(" \u2014 "),KQ=a("a"),Kpr=o("TFOPTModel"),Zpr=o(" (OPT model)"),e_r=l(),iE=a("li"),HFe=a("strong"),o_r=o("pegasus"),r_r=o(" \u2014 "),ZQ=a("a"),t_r=o("TFPegasusModel"),a_r=o(" (Pegasus model)"),n_r=l(),dE=a("li"),UFe=a("strong"),s_r=o("rembert"),l_r=o(" \u2014 "),eH=a("a"),i_r=o("TFRemBertModel"),d_r=o(" (RemBERT model)"),c_r=l(),cE=a("li"),JFe=a("strong"),m_r=o("roberta"),f_r=o(" \u2014 "),oH=a("a"),g_r=o("TFRobertaModel"),h_r=o(" (RoBERTa model)"),u_r=l(),mE=a("li"),YFe=a("strong"),p_r=o("roformer"),__r=o(" \u2014 "),rH=a("a"),b_r=o("TFRoFormerModel"),v_r=o(" (RoFormer model)"),F_r=l(),fE=a("li"),KFe=a("strong"),T_r=o("speech_to_text"),M_r=o(" \u2014 "),tH=a("a"),E_r=o("TFSpeech2TextModel"),C_r=o(" (Speech2Text model)"),w_r=l(),gE=a("li"),ZFe=a("strong"),A_r=o("swin"),y_r=o(" \u2014 "),aH=a("a"),L_r=o("TFSwinModel"),x_r=o(" (Swin Transformer model)"),$_r=l(),hE=a("li"),e1e=a("strong"),k_r=o("t5"),S_r=o(" \u2014 "),nH=a("a"),R_r=o("TFT5Model"),P_r=o(" (T5 model)"),B_r=l(),uE=a("li"),o1e=a("strong"),I_r=o("tapas"),N_r=o(" \u2014 "),sH=a("a"),q_r=o("TFTapasModel"),j_r=o(" (TAPAS model)"),D_r=l(),pE=a("li"),r1e=a("strong"),G_r=o("transfo-xl"),O_r=o(" \u2014 "),lH=a("a"),V_r=o("TFTransfoXLModel"),X_r=o(" (Transformer-XL model)"),z_r=l(),_E=a("li"),t1e=a("strong"),W_r=o("vit"),Q_r=o(" \u2014 "),iH=a("a"),H_r=o("TFViTModel"),U_r=o(" (ViT model)"),J_r=l(),bE=a("li"),a1e=a("strong"),Y_r=o("vit_mae"),K_r=o(" \u2014 "),dH=a("a"),Z_r=o("TFViTMAEModel"),ebr=o(" (ViTMAE model)"),obr=l(),vE=a("li"),n1e=a("strong"),rbr=o("wav2vec2"),tbr=o(" \u2014 "),cH=a("a"),abr=o("TFWav2Vec2Model"),nbr=o(" (Wav2Vec2 model)"),sbr=l(),FE=a("li"),s1e=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),mH=a("a"),dbr=o("TFXLMModel"),cbr=o(" (XLM model)"),mbr=l(),TE=a("li"),l1e=a("strong"),fbr=o("xlm-roberta"),gbr=o(" \u2014 "),fH=a("a"),hbr=o("TFXLMRobertaModel"),ubr=o(" (XLM-RoBERTa model)"),pbr=l(),ME=a("li"),i1e=a("strong"),_br=o("xlnet"),bbr=o(" \u2014 "),gH=a("a"),vbr=o("TFXLNetModel"),Fbr=o(" (XLNet model)"),Tbr=l(),F(EE.$$.fragment),CGe=l(),oc=a("h2"),CE=a("a"),d1e=a("span"),F(o9.$$.fragment),Mbr=l(),c1e=a("span"),Ebr=o("TFAutoModelForPreTraining"),wGe=l(),er=a("div"),F(r9.$$.fragment),Cbr=l(),rc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hH=a("a"),Abr=o("from_pretrained()"),ybr=o(" class method or the "),uH=a("a"),Lbr=o("from_config()"),xbr=o(` class
method.`),$br=l(),t9=a("p"),kbr=o("This class cannot be instantiated directly using "),m1e=a("code"),Sbr=o("__init__()"),Rbr=o(" (throws an error)."),Pbr=l(),kt=a("div"),F(a9.$$.fragment),Bbr=l(),f1e=a("p"),Ibr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nbr=l(),tc=a("p"),qbr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),jbr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),Gbr=o("from_pretrained()"),Obr=o(" to load the model weights."),Vbr=l(),F(wE.$$.fragment),Xbr=l(),Lr=a("div"),F(n9.$$.fragment),zbr=l(),h1e=a("p"),Wbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qbr=l(),an=a("p"),Hbr=o("The model class to instantiate is selected based on the "),u1e=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),Zbr=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),se=a("ul"),AE=a("li"),b1e=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),_H=a("a"),a2r=o("TFAlbertForPreTraining"),n2r=o(" (ALBERT model)"),s2r=l(),yE=a("li"),v1e=a("strong"),l2r=o("bart"),i2r=o(" \u2014 "),bH=a("a"),d2r=o("TFBartForConditionalGeneration"),c2r=o(" (BART model)"),m2r=l(),LE=a("li"),F1e=a("strong"),f2r=o("bert"),g2r=o(" \u2014 "),vH=a("a"),h2r=o("TFBertForPreTraining"),u2r=o(" (BERT model)"),p2r=l(),xE=a("li"),T1e=a("strong"),_2r=o("camembert"),b2r=o(" \u2014 "),FH=a("a"),v2r=o("TFCamembertForMaskedLM"),F2r=o(" (CamemBERT model)"),T2r=l(),$E=a("li"),M1e=a("strong"),M2r=o("ctrl"),E2r=o(" \u2014 "),TH=a("a"),C2r=o("TFCTRLLMHeadModel"),w2r=o(" (CTRL model)"),A2r=l(),kE=a("li"),E1e=a("strong"),y2r=o("distilbert"),L2r=o(" \u2014 "),MH=a("a"),x2r=o("TFDistilBertForMaskedLM"),$2r=o(" (DistilBERT model)"),k2r=l(),SE=a("li"),C1e=a("strong"),S2r=o("electra"),R2r=o(" \u2014 "),EH=a("a"),P2r=o("TFElectraForPreTraining"),B2r=o(" (ELECTRA model)"),I2r=l(),RE=a("li"),w1e=a("strong"),N2r=o("flaubert"),q2r=o(" \u2014 "),CH=a("a"),j2r=o("TFFlaubertWithLMHeadModel"),D2r=o(" (FlauBERT model)"),G2r=l(),PE=a("li"),A1e=a("strong"),O2r=o("funnel"),V2r=o(" \u2014 "),wH=a("a"),X2r=o("TFFunnelForPreTraining"),z2r=o(" (Funnel Transformer model)"),W2r=l(),BE=a("li"),y1e=a("strong"),Q2r=o("gpt2"),H2r=o(" \u2014 "),AH=a("a"),U2r=o("TFGPT2LMHeadModel"),J2r=o(" (OpenAI GPT-2 model)"),Y2r=l(),IE=a("li"),L1e=a("strong"),K2r=o("layoutlm"),Z2r=o(" \u2014 "),yH=a("a"),evr=o("TFLayoutLMForMaskedLM"),ovr=o(" (LayoutLM model)"),rvr=l(),NE=a("li"),x1e=a("strong"),tvr=o("lxmert"),avr=o(" \u2014 "),LH=a("a"),nvr=o("TFLxmertForPreTraining"),svr=o(" (LXMERT model)"),lvr=l(),qE=a("li"),$1e=a("strong"),ivr=o("mobilebert"),dvr=o(" \u2014 "),xH=a("a"),cvr=o("TFMobileBertForPreTraining"),mvr=o(" (MobileBERT model)"),fvr=l(),jE=a("li"),k1e=a("strong"),gvr=o("mpnet"),hvr=o(" \u2014 "),$H=a("a"),uvr=o("TFMPNetForMaskedLM"),pvr=o(" (MPNet model)"),_vr=l(),DE=a("li"),S1e=a("strong"),bvr=o("openai-gpt"),vvr=o(" \u2014 "),kH=a("a"),Fvr=o("TFOpenAIGPTLMHeadModel"),Tvr=o(" (OpenAI GPT model)"),Mvr=l(),GE=a("li"),R1e=a("strong"),Evr=o("roberta"),Cvr=o(" \u2014 "),SH=a("a"),wvr=o("TFRobertaForMaskedLM"),Avr=o(" (RoBERTa model)"),yvr=l(),OE=a("li"),P1e=a("strong"),Lvr=o("t5"),xvr=o(" \u2014 "),RH=a("a"),$vr=o("TFT5ForConditionalGeneration"),kvr=o(" (T5 model)"),Svr=l(),VE=a("li"),B1e=a("strong"),Rvr=o("tapas"),Pvr=o(" \u2014 "),PH=a("a"),Bvr=o("TFTapasForMaskedLM"),Ivr=o(" (TAPAS model)"),Nvr=l(),XE=a("li"),I1e=a("strong"),qvr=o("transfo-xl"),jvr=o(" \u2014 "),BH=a("a"),Dvr=o("TFTransfoXLLMHeadModel"),Gvr=o(" (Transformer-XL model)"),Ovr=l(),zE=a("li"),N1e=a("strong"),Vvr=o("vit_mae"),Xvr=o(" \u2014 "),IH=a("a"),zvr=o("TFViTMAEForPreTraining"),Wvr=o(" (ViTMAE model)"),Qvr=l(),WE=a("li"),q1e=a("strong"),Hvr=o("xlm"),Uvr=o(" \u2014 "),NH=a("a"),Jvr=o("TFXLMWithLMHeadModel"),Yvr=o(" (XLM model)"),Kvr=l(),QE=a("li"),j1e=a("strong"),Zvr=o("xlm-roberta"),eFr=o(" \u2014 "),qH=a("a"),oFr=o("TFXLMRobertaForMaskedLM"),rFr=o(" (XLM-RoBERTa model)"),tFr=l(),HE=a("li"),D1e=a("strong"),aFr=o("xlnet"),nFr=o(" \u2014 "),jH=a("a"),sFr=o("TFXLNetLMHeadModel"),lFr=o(" (XLNet model)"),iFr=l(),F(UE.$$.fragment),AGe=l(),ac=a("h2"),JE=a("a"),G1e=a("span"),F(s9.$$.fragment),dFr=l(),O1e=a("span"),cFr=o("TFAutoModelForCausalLM"),yGe=l(),or=a("div"),F(l9.$$.fragment),mFr=l(),nc=a("p"),fFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DH=a("a"),gFr=o("from_pretrained()"),hFr=o(" class method or the "),GH=a("a"),uFr=o("from_config()"),pFr=o(` class
method.`),_Fr=l(),i9=a("p"),bFr=o("This class cannot be instantiated directly using "),V1e=a("code"),vFr=o("__init__()"),FFr=o(" (throws an error)."),TFr=l(),St=a("div"),F(d9.$$.fragment),MFr=l(),X1e=a("p"),EFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),CFr=l(),sc=a("p"),wFr=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),AFr=o("not"),yFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),LFr=o("from_pretrained()"),xFr=o(" to load the model weights."),$Fr=l(),F(YE.$$.fragment),kFr=l(),xr=a("div"),F(c9.$$.fragment),SFr=l(),W1e=a("p"),RFr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),PFr=l(),nn=a("p"),BFr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),IFr=o("model_type"),NFr=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),qFr=o("pretrained_model_name_or_path"),jFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),DFr=o("pretrained_model_name_or_path"),GFr=o(":"),OFr=l(),Me=a("ul"),KE=a("li"),J1e=a("strong"),VFr=o("bert"),XFr=o(" \u2014 "),VH=a("a"),zFr=o("TFBertLMHeadModel"),WFr=o(" (BERT model)"),QFr=l(),ZE=a("li"),Y1e=a("strong"),HFr=o("camembert"),UFr=o(" \u2014 "),XH=a("a"),JFr=o("TFCamembertForCausalLM"),YFr=o(" (CamemBERT model)"),KFr=l(),eC=a("li"),K1e=a("strong"),ZFr=o("ctrl"),e1r=o(" \u2014 "),zH=a("a"),o1r=o("TFCTRLLMHeadModel"),r1r=o(" (CTRL model)"),t1r=l(),oC=a("li"),Z1e=a("strong"),a1r=o("gpt2"),n1r=o(" \u2014 "),WH=a("a"),s1r=o("TFGPT2LMHeadModel"),l1r=o(" (OpenAI GPT-2 model)"),i1r=l(),rC=a("li"),eTe=a("strong"),d1r=o("gptj"),c1r=o(" \u2014 "),QH=a("a"),m1r=o("TFGPTJForCausalLM"),f1r=o(" (GPT-J model)"),g1r=l(),tC=a("li"),oTe=a("strong"),h1r=o("openai-gpt"),u1r=o(" \u2014 "),HH=a("a"),p1r=o("TFOpenAIGPTLMHeadModel"),_1r=o(" (OpenAI GPT model)"),b1r=l(),aC=a("li"),rTe=a("strong"),v1r=o("opt"),F1r=o(" \u2014 "),UH=a("a"),T1r=o("TFOPTForCausalLM"),M1r=o(" (OPT model)"),E1r=l(),nC=a("li"),tTe=a("strong"),C1r=o("rembert"),w1r=o(" \u2014 "),JH=a("a"),A1r=o("TFRemBertForCausalLM"),y1r=o(" (RemBERT model)"),L1r=l(),sC=a("li"),aTe=a("strong"),x1r=o("roberta"),$1r=o(" \u2014 "),YH=a("a"),k1r=o("TFRobertaForCausalLM"),S1r=o(" (RoBERTa model)"),R1r=l(),lC=a("li"),nTe=a("strong"),P1r=o("roformer"),B1r=o(" \u2014 "),KH=a("a"),I1r=o("TFRoFormerForCausalLM"),N1r=o(" (RoFormer model)"),q1r=l(),iC=a("li"),sTe=a("strong"),j1r=o("transfo-xl"),D1r=o(" \u2014 "),ZH=a("a"),G1r=o("TFTransfoXLLMHeadModel"),O1r=o(" (Transformer-XL model)"),V1r=l(),dC=a("li"),lTe=a("strong"),X1r=o("xlm"),z1r=o(" \u2014 "),eU=a("a"),W1r=o("TFXLMWithLMHeadModel"),Q1r=o(" (XLM model)"),H1r=l(),cC=a("li"),iTe=a("strong"),U1r=o("xlnet"),J1r=o(" \u2014 "),oU=a("a"),Y1r=o("TFXLNetLMHeadModel"),K1r=o(" (XLNet model)"),Z1r=l(),F(mC.$$.fragment),LGe=l(),lc=a("h2"),fC=a("a"),dTe=a("span"),F(m9.$$.fragment),eTr=l(),cTe=a("span"),oTr=o("TFAutoModelForImageClassification"),xGe=l(),rr=a("div"),F(f9.$$.fragment),rTr=l(),ic=a("p"),tTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rU=a("a"),aTr=o("from_pretrained()"),nTr=o(" class method or the "),tU=a("a"),sTr=o("from_config()"),lTr=o(` class
method.`),iTr=l(),g9=a("p"),dTr=o("This class cannot be instantiated directly using "),mTe=a("code"),cTr=o("__init__()"),mTr=o(" (throws an error)."),fTr=l(),Rt=a("div"),F(h9.$$.fragment),gTr=l(),fTe=a("p"),hTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uTr=l(),dc=a("p"),pTr=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),_Tr=o("not"),bTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),vTr=o("from_pretrained()"),FTr=o(" to load the model weights."),TTr=l(),F(gC.$$.fragment),MTr=l(),$r=a("div"),F(u9.$$.fragment),ETr=l(),hTe=a("p"),CTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wTr=l(),sn=a("p"),ATr=o("The model class to instantiate is selected based on the "),uTe=a("code"),yTr=o("model_type"),LTr=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),xTr=o("pretrained_model_name_or_path"),$Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),kTr=o("pretrained_model_name_or_path"),STr=o(":"),RTr=l(),ln=a("ul"),hC=a("li"),bTe=a("strong"),PTr=o("convnext"),BTr=o(" \u2014 "),nU=a("a"),ITr=o("TFConvNextForImageClassification"),NTr=o(" (ConvNeXT model)"),qTr=l(),uC=a("li"),vTe=a("strong"),jTr=o("data2vec-vision"),DTr=o(" \u2014 "),sU=a("a"),GTr=o("TFData2VecVisionForImageClassification"),OTr=o(" (Data2VecVision model)"),VTr=l(),pC=a("li"),FTe=a("strong"),XTr=o("swin"),zTr=o(" \u2014 "),lU=a("a"),WTr=o("TFSwinForImageClassification"),QTr=o(" (Swin Transformer model)"),HTr=l(),_C=a("li"),TTe=a("strong"),UTr=o("vit"),JTr=o(" \u2014 "),iU=a("a"),YTr=o("TFViTForImageClassification"),KTr=o(" (ViT model)"),ZTr=l(),F(bC.$$.fragment),$Ge=l(),cc=a("h2"),vC=a("a"),MTe=a("span"),F(p9.$$.fragment),eMr=l(),ETe=a("span"),oMr=o("TFAutoModelForMaskedLM"),kGe=l(),tr=a("div"),F(_9.$$.fragment),rMr=l(),mc=a("p"),tMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dU=a("a"),aMr=o("from_pretrained()"),nMr=o(" class method or the "),cU=a("a"),sMr=o("from_config()"),lMr=o(` class
method.`),iMr=l(),b9=a("p"),dMr=o("This class cannot be instantiated directly using "),CTe=a("code"),cMr=o("__init__()"),mMr=o(" (throws an error)."),fMr=l(),Pt=a("div"),F(v9.$$.fragment),gMr=l(),wTe=a("p"),hMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uMr=l(),fc=a("p"),pMr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),_Mr=o("not"),bMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),vMr=o("from_pretrained()"),FMr=o(" to load the model weights."),TMr=l(),F(FC.$$.fragment),MMr=l(),kr=a("div"),F(F9.$$.fragment),EMr=l(),yTe=a("p"),CMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wMr=l(),dn=a("p"),AMr=o("The model class to instantiate is selected based on the "),LTe=a("code"),yMr=o("model_type"),LMr=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),xMr=o("pretrained_model_name_or_path"),$Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),kMr=o("pretrained_model_name_or_path"),SMr=o(":"),RMr=l(),ie=a("ul"),TC=a("li"),kTe=a("strong"),PMr=o("albert"),BMr=o(" \u2014 "),fU=a("a"),IMr=o("TFAlbertForMaskedLM"),NMr=o(" (ALBERT model)"),qMr=l(),MC=a("li"),STe=a("strong"),jMr=o("bert"),DMr=o(" \u2014 "),gU=a("a"),GMr=o("TFBertForMaskedLM"),OMr=o(" (BERT model)"),VMr=l(),EC=a("li"),RTe=a("strong"),XMr=o("camembert"),zMr=o(" \u2014 "),hU=a("a"),WMr=o("TFCamembertForMaskedLM"),QMr=o(" (CamemBERT model)"),HMr=l(),CC=a("li"),PTe=a("strong"),UMr=o("convbert"),JMr=o(" \u2014 "),uU=a("a"),YMr=o("TFConvBertForMaskedLM"),KMr=o(" (ConvBERT model)"),ZMr=l(),wC=a("li"),BTe=a("strong"),e4r=o("deberta"),o4r=o(" \u2014 "),pU=a("a"),r4r=o("TFDebertaForMaskedLM"),t4r=o(" (DeBERTa model)"),a4r=l(),AC=a("li"),ITe=a("strong"),n4r=o("deberta-v2"),s4r=o(" \u2014 "),_U=a("a"),l4r=o("TFDebertaV2ForMaskedLM"),i4r=o(" (DeBERTa-v2 model)"),d4r=l(),yC=a("li"),NTe=a("strong"),c4r=o("distilbert"),m4r=o(" \u2014 "),bU=a("a"),f4r=o("TFDistilBertForMaskedLM"),g4r=o(" (DistilBERT model)"),h4r=l(),LC=a("li"),qTe=a("strong"),u4r=o("electra"),p4r=o(" \u2014 "),vU=a("a"),_4r=o("TFElectraForMaskedLM"),b4r=o(" (ELECTRA model)"),v4r=l(),xC=a("li"),jTe=a("strong"),F4r=o("flaubert"),T4r=o(" \u2014 "),FU=a("a"),M4r=o("TFFlaubertWithLMHeadModel"),E4r=o(" (FlauBERT model)"),C4r=l(),$C=a("li"),DTe=a("strong"),w4r=o("funnel"),A4r=o(" \u2014 "),TU=a("a"),y4r=o("TFFunnelForMaskedLM"),L4r=o(" (Funnel Transformer model)"),x4r=l(),kC=a("li"),GTe=a("strong"),$4r=o("layoutlm"),k4r=o(" \u2014 "),MU=a("a"),S4r=o("TFLayoutLMForMaskedLM"),R4r=o(" (LayoutLM model)"),P4r=l(),SC=a("li"),OTe=a("strong"),B4r=o("longformer"),I4r=o(" \u2014 "),EU=a("a"),N4r=o("TFLongformerForMaskedLM"),q4r=o(" (Longformer model)"),j4r=l(),RC=a("li"),VTe=a("strong"),D4r=o("mobilebert"),G4r=o(" \u2014 "),CU=a("a"),O4r=o("TFMobileBertForMaskedLM"),V4r=o(" (MobileBERT model)"),X4r=l(),PC=a("li"),XTe=a("strong"),z4r=o("mpnet"),W4r=o(" \u2014 "),wU=a("a"),Q4r=o("TFMPNetForMaskedLM"),H4r=o(" (MPNet model)"),U4r=l(),BC=a("li"),zTe=a("strong"),J4r=o("rembert"),Y4r=o(" \u2014 "),AU=a("a"),K4r=o("TFRemBertForMaskedLM"),Z4r=o(" (RemBERT model)"),eEr=l(),IC=a("li"),WTe=a("strong"),oEr=o("roberta"),rEr=o(" \u2014 "),yU=a("a"),tEr=o("TFRobertaForMaskedLM"),aEr=o(" (RoBERTa model)"),nEr=l(),NC=a("li"),QTe=a("strong"),sEr=o("roformer"),lEr=o(" \u2014 "),LU=a("a"),iEr=o("TFRoFormerForMaskedLM"),dEr=o(" (RoFormer model)"),cEr=l(),qC=a("li"),HTe=a("strong"),mEr=o("tapas"),fEr=o(" \u2014 "),xU=a("a"),gEr=o("TFTapasForMaskedLM"),hEr=o(" (TAPAS model)"),uEr=l(),jC=a("li"),UTe=a("strong"),pEr=o("xlm"),_Er=o(" \u2014 "),$U=a("a"),bEr=o("TFXLMWithLMHeadModel"),vEr=o(" (XLM model)"),FEr=l(),DC=a("li"),JTe=a("strong"),TEr=o("xlm-roberta"),MEr=o(" \u2014 "),kU=a("a"),EEr=o("TFXLMRobertaForMaskedLM"),CEr=o(" (XLM-RoBERTa model)"),wEr=l(),F(GC.$$.fragment),SGe=l(),gc=a("h2"),OC=a("a"),YTe=a("span"),F(T9.$$.fragment),AEr=l(),KTe=a("span"),yEr=o("TFAutoModelForSeq2SeqLM"),RGe=l(),ar=a("div"),F(M9.$$.fragment),LEr=l(),hc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SU=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),RU=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),E9=a("p"),BEr=o("This class cannot be instantiated directly using "),ZTe=a("code"),IEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),Bt=a("div"),F(C9.$$.fragment),jEr=l(),eMe=a("p"),DEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GEr=l(),uc=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),zEr=o("from_pretrained()"),WEr=o(" to load the model weights."),QEr=l(),F(VC.$$.fragment),HEr=l(),Sr=a("div"),F(w9.$$.fragment),UEr=l(),rMe=a("p"),JEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),tMe=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),Le=a("ul"),XC=a("li"),sMe=a("strong"),sCr=o("bart"),lCr=o(" \u2014 "),BU=a("a"),iCr=o("TFBartForConditionalGeneration"),dCr=o(" (BART model)"),cCr=l(),zC=a("li"),lMe=a("strong"),mCr=o("blenderbot"),fCr=o(" \u2014 "),IU=a("a"),gCr=o("TFBlenderbotForConditionalGeneration"),hCr=o(" (Blenderbot model)"),uCr=l(),WC=a("li"),iMe=a("strong"),pCr=o("blenderbot-small"),_Cr=o(" \u2014 "),NU=a("a"),bCr=o("TFBlenderbotSmallForConditionalGeneration"),vCr=o(" (BlenderbotSmall model)"),FCr=l(),QC=a("li"),dMe=a("strong"),TCr=o("encoder-decoder"),MCr=o(" \u2014 "),qU=a("a"),ECr=o("TFEncoderDecoderModel"),CCr=o(" (Encoder decoder model)"),wCr=l(),HC=a("li"),cMe=a("strong"),ACr=o("led"),yCr=o(" \u2014 "),jU=a("a"),LCr=o("TFLEDForConditionalGeneration"),xCr=o(" (LED model)"),$Cr=l(),UC=a("li"),mMe=a("strong"),kCr=o("marian"),SCr=o(" \u2014 "),DU=a("a"),RCr=o("TFMarianMTModel"),PCr=o(" (Marian model)"),BCr=l(),JC=a("li"),fMe=a("strong"),ICr=o("mbart"),NCr=o(" \u2014 "),GU=a("a"),qCr=o("TFMBartForConditionalGeneration"),jCr=o(" (mBART model)"),DCr=l(),YC=a("li"),gMe=a("strong"),GCr=o("mt5"),OCr=o(" \u2014 "),OU=a("a"),VCr=o("TFMT5ForConditionalGeneration"),XCr=o(" (MT5 model)"),zCr=l(),KC=a("li"),hMe=a("strong"),WCr=o("pegasus"),QCr=o(" \u2014 "),VU=a("a"),HCr=o("TFPegasusForConditionalGeneration"),UCr=o(" (Pegasus model)"),JCr=l(),ZC=a("li"),uMe=a("strong"),YCr=o("t5"),KCr=o(" \u2014 "),XU=a("a"),ZCr=o("TFT5ForConditionalGeneration"),e5r=o(" (T5 model)"),o5r=l(),F(e5.$$.fragment),PGe=l(),pc=a("h2"),o5=a("a"),pMe=a("span"),F(A9.$$.fragment),r5r=l(),_Me=a("span"),t5r=o("TFAutoModelForSequenceClassification"),BGe=l(),nr=a("div"),F(y9.$$.fragment),a5r=l(),_c=a("p"),n5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zU=a("a"),s5r=o("from_pretrained()"),l5r=o(" class method or the "),WU=a("a"),i5r=o("from_config()"),d5r=o(` class
method.`),c5r=l(),L9=a("p"),m5r=o("This class cannot be instantiated directly using "),bMe=a("code"),f5r=o("__init__()"),g5r=o(" (throws an error)."),h5r=l(),It=a("div"),F(x9.$$.fragment),u5r=l(),vMe=a("p"),p5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_5r=l(),bc=a("p"),b5r=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),v5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),T5r=o("from_pretrained()"),M5r=o(" to load the model weights."),E5r=l(),F(r5.$$.fragment),C5r=l(),Rr=a("div"),F($9.$$.fragment),w5r=l(),TMe=a("p"),A5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y5r=l(),mn=a("p"),L5r=o("The model class to instantiate is selected based on the "),MMe=a("code"),x5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),R5r=o("pretrained_model_name_or_path"),P5r=o(":"),B5r=l(),re=a("ul"),t5=a("li"),wMe=a("strong"),I5r=o("albert"),N5r=o(" \u2014 "),HU=a("a"),q5r=o("TFAlbertForSequenceClassification"),j5r=o(" (ALBERT model)"),D5r=l(),a5=a("li"),AMe=a("strong"),G5r=o("bert"),O5r=o(" \u2014 "),UU=a("a"),V5r=o("TFBertForSequenceClassification"),X5r=o(" (BERT model)"),z5r=l(),n5=a("li"),yMe=a("strong"),W5r=o("camembert"),Q5r=o(" \u2014 "),JU=a("a"),H5r=o("TFCamembertForSequenceClassification"),U5r=o(" (CamemBERT model)"),J5r=l(),s5=a("li"),LMe=a("strong"),Y5r=o("convbert"),K5r=o(" \u2014 "),YU=a("a"),Z5r=o("TFConvBertForSequenceClassification"),e3r=o(" (ConvBERT model)"),o3r=l(),l5=a("li"),xMe=a("strong"),r3r=o("ctrl"),t3r=o(" \u2014 "),KU=a("a"),a3r=o("TFCTRLForSequenceClassification"),n3r=o(" (CTRL model)"),s3r=l(),i5=a("li"),$Me=a("strong"),l3r=o("deberta"),i3r=o(" \u2014 "),ZU=a("a"),d3r=o("TFDebertaForSequenceClassification"),c3r=o(" (DeBERTa model)"),m3r=l(),d5=a("li"),kMe=a("strong"),f3r=o("deberta-v2"),g3r=o(" \u2014 "),eJ=a("a"),h3r=o("TFDebertaV2ForSequenceClassification"),u3r=o(" (DeBERTa-v2 model)"),p3r=l(),c5=a("li"),SMe=a("strong"),_3r=o("distilbert"),b3r=o(" \u2014 "),oJ=a("a"),v3r=o("TFDistilBertForSequenceClassification"),F3r=o(" (DistilBERT model)"),T3r=l(),m5=a("li"),RMe=a("strong"),M3r=o("electra"),E3r=o(" \u2014 "),rJ=a("a"),C3r=o("TFElectraForSequenceClassification"),w3r=o(" (ELECTRA model)"),A3r=l(),f5=a("li"),PMe=a("strong"),y3r=o("flaubert"),L3r=o(" \u2014 "),tJ=a("a"),x3r=o("TFFlaubertForSequenceClassification"),$3r=o(" (FlauBERT model)"),k3r=l(),g5=a("li"),BMe=a("strong"),S3r=o("funnel"),R3r=o(" \u2014 "),aJ=a("a"),P3r=o("TFFunnelForSequenceClassification"),B3r=o(" (Funnel Transformer model)"),I3r=l(),h5=a("li"),IMe=a("strong"),N3r=o("gpt2"),q3r=o(" \u2014 "),nJ=a("a"),j3r=o("TFGPT2ForSequenceClassification"),D3r=o(" (OpenAI GPT-2 model)"),G3r=l(),u5=a("li"),NMe=a("strong"),O3r=o("gptj"),V3r=o(" \u2014 "),sJ=a("a"),X3r=o("TFGPTJForSequenceClassification"),z3r=o(" (GPT-J model)"),W3r=l(),p5=a("li"),qMe=a("strong"),Q3r=o("layoutlm"),H3r=o(" \u2014 "),lJ=a("a"),U3r=o("TFLayoutLMForSequenceClassification"),J3r=o(" (LayoutLM model)"),Y3r=l(),_5=a("li"),jMe=a("strong"),K3r=o("longformer"),Z3r=o(" \u2014 "),iJ=a("a"),ewr=o("TFLongformerForSequenceClassification"),owr=o(" (Longformer model)"),rwr=l(),b5=a("li"),DMe=a("strong"),twr=o("mobilebert"),awr=o(" \u2014 "),dJ=a("a"),nwr=o("TFMobileBertForSequenceClassification"),swr=o(" (MobileBERT model)"),lwr=l(),v5=a("li"),GMe=a("strong"),iwr=o("mpnet"),dwr=o(" \u2014 "),cJ=a("a"),cwr=o("TFMPNetForSequenceClassification"),mwr=o(" (MPNet model)"),fwr=l(),F5=a("li"),OMe=a("strong"),gwr=o("openai-gpt"),hwr=o(" \u2014 "),mJ=a("a"),uwr=o("TFOpenAIGPTForSequenceClassification"),pwr=o(" (OpenAI GPT model)"),_wr=l(),T5=a("li"),VMe=a("strong"),bwr=o("rembert"),vwr=o(" \u2014 "),fJ=a("a"),Fwr=o("TFRemBertForSequenceClassification"),Twr=o(" (RemBERT model)"),Mwr=l(),M5=a("li"),XMe=a("strong"),Ewr=o("roberta"),Cwr=o(" \u2014 "),gJ=a("a"),wwr=o("TFRobertaForSequenceClassification"),Awr=o(" (RoBERTa model)"),ywr=l(),E5=a("li"),zMe=a("strong"),Lwr=o("roformer"),xwr=o(" \u2014 "),hJ=a("a"),$wr=o("TFRoFormerForSequenceClassification"),kwr=o(" (RoFormer model)"),Swr=l(),C5=a("li"),WMe=a("strong"),Rwr=o("tapas"),Pwr=o(" \u2014 "),uJ=a("a"),Bwr=o("TFTapasForSequenceClassification"),Iwr=o(" (TAPAS model)"),Nwr=l(),w5=a("li"),QMe=a("strong"),qwr=o("transfo-xl"),jwr=o(" \u2014 "),pJ=a("a"),Dwr=o("TFTransfoXLForSequenceClassification"),Gwr=o(" (Transformer-XL model)"),Owr=l(),A5=a("li"),HMe=a("strong"),Vwr=o("xlm"),Xwr=o(" \u2014 "),_J=a("a"),zwr=o("TFXLMForSequenceClassification"),Wwr=o(" (XLM model)"),Qwr=l(),y5=a("li"),UMe=a("strong"),Hwr=o("xlm-roberta"),Uwr=o(" \u2014 "),bJ=a("a"),Jwr=o("TFXLMRobertaForSequenceClassification"),Ywr=o(" (XLM-RoBERTa model)"),Kwr=l(),L5=a("li"),JMe=a("strong"),Zwr=o("xlnet"),e0r=o(" \u2014 "),vJ=a("a"),o0r=o("TFXLNetForSequenceClassification"),r0r=o(" (XLNet model)"),t0r=l(),F(x5.$$.fragment),IGe=l(),vc=a("h2"),$5=a("a"),YMe=a("span"),F(k9.$$.fragment),a0r=l(),KMe=a("span"),n0r=o("TFAutoModelForMultipleChoice"),NGe=l(),sr=a("div"),F(S9.$$.fragment),s0r=l(),Fc=a("p"),l0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FJ=a("a"),i0r=o("from_pretrained()"),d0r=o(" class method or the "),TJ=a("a"),c0r=o("from_config()"),m0r=o(` class
method.`),f0r=l(),R9=a("p"),g0r=o("This class cannot be instantiated directly using "),ZMe=a("code"),h0r=o("__init__()"),u0r=o(" (throws an error)."),p0r=l(),Nt=a("div"),F(P9.$$.fragment),_0r=l(),e4e=a("p"),b0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v0r=l(),Tc=a("p"),F0r=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),T0r=o("not"),M0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),E0r=o("from_pretrained()"),C0r=o(" to load the model weights."),w0r=l(),F(k5.$$.fragment),A0r=l(),Pr=a("div"),F(B9.$$.fragment),y0r=l(),r4e=a("p"),L0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),x0r=l(),fn=a("p"),$0r=o("The model class to instantiate is selected based on the "),t4e=a("code"),k0r=o("model_type"),S0r=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),R0r=o("pretrained_model_name_or_path"),P0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),B0r=o("pretrained_model_name_or_path"),I0r=o(":"),N0r=l(),ue=a("ul"),S5=a("li"),s4e=a("strong"),q0r=o("albert"),j0r=o(" \u2014 "),EJ=a("a"),D0r=o("TFAlbertForMultipleChoice"),G0r=o(" (ALBERT model)"),O0r=l(),R5=a("li"),l4e=a("strong"),V0r=o("bert"),X0r=o(" \u2014 "),CJ=a("a"),z0r=o("TFBertForMultipleChoice"),W0r=o(" (BERT model)"),Q0r=l(),P5=a("li"),i4e=a("strong"),H0r=o("camembert"),U0r=o(" \u2014 "),wJ=a("a"),J0r=o("TFCamembertForMultipleChoice"),Y0r=o(" (CamemBERT model)"),K0r=l(),B5=a("li"),d4e=a("strong"),Z0r=o("convbert"),eAr=o(" \u2014 "),AJ=a("a"),oAr=o("TFConvBertForMultipleChoice"),rAr=o(" (ConvBERT model)"),tAr=l(),I5=a("li"),c4e=a("strong"),aAr=o("distilbert"),nAr=o(" \u2014 "),yJ=a("a"),sAr=o("TFDistilBertForMultipleChoice"),lAr=o(" (DistilBERT model)"),iAr=l(),N5=a("li"),m4e=a("strong"),dAr=o("electra"),cAr=o(" \u2014 "),LJ=a("a"),mAr=o("TFElectraForMultipleChoice"),fAr=o(" (ELECTRA model)"),gAr=l(),q5=a("li"),f4e=a("strong"),hAr=o("flaubert"),uAr=o(" \u2014 "),xJ=a("a"),pAr=o("TFFlaubertForMultipleChoice"),_Ar=o(" (FlauBERT model)"),bAr=l(),j5=a("li"),g4e=a("strong"),vAr=o("funnel"),FAr=o(" \u2014 "),$J=a("a"),TAr=o("TFFunnelForMultipleChoice"),MAr=o(" (Funnel Transformer model)"),EAr=l(),D5=a("li"),h4e=a("strong"),CAr=o("longformer"),wAr=o(" \u2014 "),kJ=a("a"),AAr=o("TFLongformerForMultipleChoice"),yAr=o(" (Longformer model)"),LAr=l(),G5=a("li"),u4e=a("strong"),xAr=o("mobilebert"),$Ar=o(" \u2014 "),SJ=a("a"),kAr=o("TFMobileBertForMultipleChoice"),SAr=o(" (MobileBERT model)"),RAr=l(),O5=a("li"),p4e=a("strong"),PAr=o("mpnet"),BAr=o(" \u2014 "),RJ=a("a"),IAr=o("TFMPNetForMultipleChoice"),NAr=o(" (MPNet model)"),qAr=l(),V5=a("li"),_4e=a("strong"),jAr=o("rembert"),DAr=o(" \u2014 "),PJ=a("a"),GAr=o("TFRemBertForMultipleChoice"),OAr=o(" (RemBERT model)"),VAr=l(),X5=a("li"),b4e=a("strong"),XAr=o("roberta"),zAr=o(" \u2014 "),BJ=a("a"),WAr=o("TFRobertaForMultipleChoice"),QAr=o(" (RoBERTa model)"),HAr=l(),z5=a("li"),v4e=a("strong"),UAr=o("roformer"),JAr=o(" \u2014 "),IJ=a("a"),YAr=o("TFRoFormerForMultipleChoice"),KAr=o(" (RoFormer model)"),ZAr=l(),W5=a("li"),F4e=a("strong"),e6r=o("xlm"),o6r=o(" \u2014 "),NJ=a("a"),r6r=o("TFXLMForMultipleChoice"),t6r=o(" (XLM model)"),a6r=l(),Q5=a("li"),T4e=a("strong"),n6r=o("xlm-roberta"),s6r=o(" \u2014 "),qJ=a("a"),l6r=o("TFXLMRobertaForMultipleChoice"),i6r=o(" (XLM-RoBERTa model)"),d6r=l(),H5=a("li"),M4e=a("strong"),c6r=o("xlnet"),m6r=o(" \u2014 "),jJ=a("a"),f6r=o("TFXLNetForMultipleChoice"),g6r=o(" (XLNet model)"),h6r=l(),F(U5.$$.fragment),qGe=l(),Mc=a("h2"),J5=a("a"),E4e=a("span"),F(I9.$$.fragment),u6r=l(),C4e=a("span"),p6r=o("TFAutoModelForNextSentencePrediction"),jGe=l(),lr=a("div"),F(N9.$$.fragment),_6r=l(),Ec=a("p"),b6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DJ=a("a"),v6r=o("from_pretrained()"),F6r=o(" class method or the "),GJ=a("a"),T6r=o("from_config()"),M6r=o(` class
method.`),E6r=l(),q9=a("p"),C6r=o("This class cannot be instantiated directly using "),w4e=a("code"),w6r=o("__init__()"),A6r=o(" (throws an error)."),y6r=l(),qt=a("div"),F(j9.$$.fragment),L6r=l(),A4e=a("p"),x6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$6r=l(),Cc=a("p"),k6r=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),S6r=o("not"),R6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),P6r=o("from_pretrained()"),B6r=o(" to load the model weights."),I6r=l(),F(Y5.$$.fragment),N6r=l(),Br=a("div"),F(D9.$$.fragment),q6r=l(),L4e=a("p"),j6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),D6r=l(),gn=a("p"),G6r=o("The model class to instantiate is selected based on the "),x4e=a("code"),O6r=o("model_type"),V6r=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),X6r=o("pretrained_model_name_or_path"),z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),W6r=o("pretrained_model_name_or_path"),Q6r=o(":"),H6r=l(),G9=a("ul"),K5=a("li"),S4e=a("strong"),U6r=o("bert"),J6r=o(" \u2014 "),VJ=a("a"),Y6r=o("TFBertForNextSentencePrediction"),K6r=o(" (BERT model)"),Z6r=l(),Z5=a("li"),R4e=a("strong"),eyr=o("mobilebert"),oyr=o(" \u2014 "),XJ=a("a"),ryr=o("TFMobileBertForNextSentencePrediction"),tyr=o(" (MobileBERT model)"),ayr=l(),F(e3.$$.fragment),DGe=l(),wc=a("h2"),o3=a("a"),P4e=a("span"),F(O9.$$.fragment),nyr=l(),B4e=a("span"),syr=o("TFAutoModelForTableQuestionAnswering"),GGe=l(),ir=a("div"),F(V9.$$.fragment),lyr=l(),Ac=a("p"),iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zJ=a("a"),dyr=o("from_pretrained()"),cyr=o(" class method or the "),WJ=a("a"),myr=o("from_config()"),fyr=o(` class
method.`),gyr=l(),X9=a("p"),hyr=o("This class cannot be instantiated directly using "),I4e=a("code"),uyr=o("__init__()"),pyr=o(" (throws an error)."),_yr=l(),jt=a("div"),F(z9.$$.fragment),byr=l(),N4e=a("p"),vyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fyr=l(),yc=a("p"),Tyr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),Myr=o("not"),Eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),Cyr=o("from_pretrained()"),wyr=o(" to load the model weights."),Ayr=l(),F(r3.$$.fragment),yyr=l(),Ir=a("div"),F(W9.$$.fragment),Lyr=l(),j4e=a("p"),xyr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$yr=l(),hn=a("p"),kyr=o("The model class to instantiate is selected based on the "),D4e=a("code"),Syr=o("model_type"),Ryr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(":"),qyr=l(),V4e=a("ul"),t3=a("li"),X4e=a("strong"),jyr=o("tapas"),Dyr=o(" \u2014 "),HJ=a("a"),Gyr=o("TFTapasForQuestionAnswering"),Oyr=o(" (TAPAS model)"),Vyr=l(),F(a3.$$.fragment),OGe=l(),Lc=a("h2"),n3=a("a"),z4e=a("span"),F(Q9.$$.fragment),Xyr=l(),W4e=a("span"),zyr=o("TFAutoModelForTokenClassification"),VGe=l(),dr=a("div"),F(H9.$$.fragment),Wyr=l(),xc=a("p"),Qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UJ=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" class method or the "),JJ=a("a"),Jyr=o("from_config()"),Yyr=o(` class
method.`),Kyr=l(),U9=a("p"),Zyr=o("This class cannot be instantiated directly using "),Q4e=a("code"),eLr=o("__init__()"),oLr=o(" (throws an error)."),rLr=l(),Dt=a("div"),F(J9.$$.fragment),tLr=l(),H4e=a("p"),aLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nLr=l(),$c=a("p"),sLr=o(`Note:
Loading a model from its configuration file does `),U4e=a("strong"),lLr=o("not"),iLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),dLr=o("from_pretrained()"),cLr=o(" to load the model weights."),mLr=l(),F(s3.$$.fragment),fLr=l(),Nr=a("div"),F(Y9.$$.fragment),gLr=l(),J4e=a("p"),hLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uLr=l(),un=a("p"),pLr=o("The model class to instantiate is selected based on the "),Y4e=a("code"),_Lr=o("model_type"),bLr=o(` property of the config object (either
passed as an argument or loaded from `),K4e=a("code"),vLr=o("pretrained_model_name_or_path"),FLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=a("code"),TLr=o("pretrained_model_name_or_path"),MLr=o(":"),ELr=l(),de=a("ul"),l3=a("li"),eEe=a("strong"),CLr=o("albert"),wLr=o(" \u2014 "),KJ=a("a"),ALr=o("TFAlbertForTokenClassification"),yLr=o(" (ALBERT model)"),LLr=l(),i3=a("li"),oEe=a("strong"),xLr=o("bert"),$Lr=o(" \u2014 "),ZJ=a("a"),kLr=o("TFBertForTokenClassification"),SLr=o(" (BERT model)"),RLr=l(),d3=a("li"),rEe=a("strong"),PLr=o("camembert"),BLr=o(" \u2014 "),eY=a("a"),ILr=o("TFCamembertForTokenClassification"),NLr=o(" (CamemBERT model)"),qLr=l(),c3=a("li"),tEe=a("strong"),jLr=o("convbert"),DLr=o(" \u2014 "),oY=a("a"),GLr=o("TFConvBertForTokenClassification"),OLr=o(" (ConvBERT model)"),VLr=l(),m3=a("li"),aEe=a("strong"),XLr=o("deberta"),zLr=o(" \u2014 "),rY=a("a"),WLr=o("TFDebertaForTokenClassification"),QLr=o(" (DeBERTa model)"),HLr=l(),f3=a("li"),nEe=a("strong"),ULr=o("deberta-v2"),JLr=o(" \u2014 "),tY=a("a"),YLr=o("TFDebertaV2ForTokenClassification"),KLr=o(" (DeBERTa-v2 model)"),ZLr=l(),g3=a("li"),sEe=a("strong"),e7r=o("distilbert"),o7r=o(" \u2014 "),aY=a("a"),r7r=o("TFDistilBertForTokenClassification"),t7r=o(" (DistilBERT model)"),a7r=l(),h3=a("li"),lEe=a("strong"),n7r=o("electra"),s7r=o(" \u2014 "),nY=a("a"),l7r=o("TFElectraForTokenClassification"),i7r=o(" (ELECTRA model)"),d7r=l(),u3=a("li"),iEe=a("strong"),c7r=o("flaubert"),m7r=o(" \u2014 "),sY=a("a"),f7r=o("TFFlaubertForTokenClassification"),g7r=o(" (FlauBERT model)"),h7r=l(),p3=a("li"),dEe=a("strong"),u7r=o("funnel"),p7r=o(" \u2014 "),lY=a("a"),_7r=o("TFFunnelForTokenClassification"),b7r=o(" (Funnel Transformer model)"),v7r=l(),_3=a("li"),cEe=a("strong"),F7r=o("layoutlm"),T7r=o(" \u2014 "),iY=a("a"),M7r=o("TFLayoutLMForTokenClassification"),E7r=o(" (LayoutLM model)"),C7r=l(),b3=a("li"),mEe=a("strong"),w7r=o("longformer"),A7r=o(" \u2014 "),dY=a("a"),y7r=o("TFLongformerForTokenClassification"),L7r=o(" (Longformer model)"),x7r=l(),v3=a("li"),fEe=a("strong"),$7r=o("mobilebert"),k7r=o(" \u2014 "),cY=a("a"),S7r=o("TFMobileBertForTokenClassification"),R7r=o(" (MobileBERT model)"),P7r=l(),F3=a("li"),gEe=a("strong"),B7r=o("mpnet"),I7r=o(" \u2014 "),mY=a("a"),N7r=o("TFMPNetForTokenClassification"),q7r=o(" (MPNet model)"),j7r=l(),T3=a("li"),hEe=a("strong"),D7r=o("rembert"),G7r=o(" \u2014 "),fY=a("a"),O7r=o("TFRemBertForTokenClassification"),V7r=o(" (RemBERT model)"),X7r=l(),M3=a("li"),uEe=a("strong"),z7r=o("roberta"),W7r=o(" \u2014 "),gY=a("a"),Q7r=o("TFRobertaForTokenClassification"),H7r=o(" (RoBERTa model)"),U7r=l(),E3=a("li"),pEe=a("strong"),J7r=o("roformer"),Y7r=o(" \u2014 "),hY=a("a"),K7r=o("TFRoFormerForTokenClassification"),Z7r=o(" (RoFormer model)"),e8r=l(),C3=a("li"),_Ee=a("strong"),o8r=o("xlm"),r8r=o(" \u2014 "),uY=a("a"),t8r=o("TFXLMForTokenClassification"),a8r=o(" (XLM model)"),n8r=l(),w3=a("li"),bEe=a("strong"),s8r=o("xlm-roberta"),l8r=o(" \u2014 "),pY=a("a"),i8r=o("TFXLMRobertaForTokenClassification"),d8r=o(" (XLM-RoBERTa model)"),c8r=l(),A3=a("li"),vEe=a("strong"),m8r=o("xlnet"),f8r=o(" \u2014 "),_Y=a("a"),g8r=o("TFXLNetForTokenClassification"),h8r=o(" (XLNet model)"),u8r=l(),F(y3.$$.fragment),XGe=l(),kc=a("h2"),L3=a("a"),FEe=a("span"),F(K9.$$.fragment),p8r=l(),TEe=a("span"),_8r=o("TFAutoModelForQuestionAnswering"),zGe=l(),cr=a("div"),F(Z9.$$.fragment),b8r=l(),Sc=a("p"),v8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bY=a("a"),F8r=o("from_pretrained()"),T8r=o(" class method or the "),vY=a("a"),M8r=o("from_config()"),E8r=o(` class
method.`),C8r=l(),ex=a("p"),w8r=o("This class cannot be instantiated directly using "),MEe=a("code"),A8r=o("__init__()"),y8r=o(" (throws an error)."),L8r=l(),Gt=a("div"),F(ox.$$.fragment),x8r=l(),EEe=a("p"),$8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k8r=l(),Rc=a("p"),S8r=o(`Note:
Loading a model from its configuration file does `),CEe=a("strong"),R8r=o("not"),P8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),B8r=o("from_pretrained()"),I8r=o(" to load the model weights."),N8r=l(),F(x3.$$.fragment),q8r=l(),qr=a("div"),F(rx.$$.fragment),j8r=l(),wEe=a("p"),D8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G8r=l(),pn=a("p"),O8r=o("The model class to instantiate is selected based on the "),AEe=a("code"),V8r=o("model_type"),X8r=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),z8r=o("pretrained_model_name_or_path"),W8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),Q8r=o("pretrained_model_name_or_path"),H8r=o(":"),U8r=l(),ce=a("ul"),$3=a("li"),xEe=a("strong"),J8r=o("albert"),Y8r=o(" \u2014 "),TY=a("a"),K8r=o("TFAlbertForQuestionAnswering"),Z8r=o(" (ALBERT model)"),e9r=l(),k3=a("li"),$Ee=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),MY=a("a"),t9r=o("TFBertForQuestionAnswering"),a9r=o(" (BERT model)"),n9r=l(),S3=a("li"),kEe=a("strong"),s9r=o("camembert"),l9r=o(" \u2014 "),EY=a("a"),i9r=o("TFCamembertForQuestionAnswering"),d9r=o(" (CamemBERT model)"),c9r=l(),R3=a("li"),SEe=a("strong"),m9r=o("convbert"),f9r=o(" \u2014 "),CY=a("a"),g9r=o("TFConvBertForQuestionAnswering"),h9r=o(" (ConvBERT model)"),u9r=l(),P3=a("li"),REe=a("strong"),p9r=o("deberta"),_9r=o(" \u2014 "),wY=a("a"),b9r=o("TFDebertaForQuestionAnswering"),v9r=o(" (DeBERTa model)"),F9r=l(),B3=a("li"),PEe=a("strong"),T9r=o("deberta-v2"),M9r=o(" \u2014 "),AY=a("a"),E9r=o("TFDebertaV2ForQuestionAnswering"),C9r=o(" (DeBERTa-v2 model)"),w9r=l(),I3=a("li"),BEe=a("strong"),A9r=o("distilbert"),y9r=o(" \u2014 "),yY=a("a"),L9r=o("TFDistilBertForQuestionAnswering"),x9r=o(" (DistilBERT model)"),$9r=l(),N3=a("li"),IEe=a("strong"),k9r=o("electra"),S9r=o(" \u2014 "),LY=a("a"),R9r=o("TFElectraForQuestionAnswering"),P9r=o(" (ELECTRA model)"),B9r=l(),q3=a("li"),NEe=a("strong"),I9r=o("flaubert"),N9r=o(" \u2014 "),xY=a("a"),q9r=o("TFFlaubertForQuestionAnsweringSimple"),j9r=o(" (FlauBERT model)"),D9r=l(),j3=a("li"),qEe=a("strong"),G9r=o("funnel"),O9r=o(" \u2014 "),$Y=a("a"),V9r=o("TFFunnelForQuestionAnswering"),X9r=o(" (Funnel Transformer model)"),z9r=l(),D3=a("li"),jEe=a("strong"),W9r=o("gptj"),Q9r=o(" \u2014 "),kY=a("a"),H9r=o("TFGPTJForQuestionAnswering"),U9r=o(" (GPT-J model)"),J9r=l(),G3=a("li"),DEe=a("strong"),Y9r=o("longformer"),K9r=o(" \u2014 "),SY=a("a"),Z9r=o("TFLongformerForQuestionAnswering"),exr=o(" (Longformer model)"),oxr=l(),O3=a("li"),GEe=a("strong"),rxr=o("mobilebert"),txr=o(" \u2014 "),RY=a("a"),axr=o("TFMobileBertForQuestionAnswering"),nxr=o(" (MobileBERT model)"),sxr=l(),V3=a("li"),OEe=a("strong"),lxr=o("mpnet"),ixr=o(" \u2014 "),PY=a("a"),dxr=o("TFMPNetForQuestionAnswering"),cxr=o(" (MPNet model)"),mxr=l(),X3=a("li"),VEe=a("strong"),fxr=o("rembert"),gxr=o(" \u2014 "),BY=a("a"),hxr=o("TFRemBertForQuestionAnswering"),uxr=o(" (RemBERT model)"),pxr=l(),z3=a("li"),XEe=a("strong"),_xr=o("roberta"),bxr=o(" \u2014 "),IY=a("a"),vxr=o("TFRobertaForQuestionAnswering"),Fxr=o(" (RoBERTa model)"),Txr=l(),W3=a("li"),zEe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),NY=a("a"),Cxr=o("TFRoFormerForQuestionAnswering"),wxr=o(" (RoFormer model)"),Axr=l(),Q3=a("li"),WEe=a("strong"),yxr=o("xlm"),Lxr=o(" \u2014 "),qY=a("a"),xxr=o("TFXLMForQuestionAnsweringSimple"),$xr=o(" (XLM model)"),kxr=l(),H3=a("li"),QEe=a("strong"),Sxr=o("xlm-roberta"),Rxr=o(" \u2014 "),jY=a("a"),Pxr=o("TFXLMRobertaForQuestionAnswering"),Bxr=o(" (XLM-RoBERTa model)"),Ixr=l(),U3=a("li"),HEe=a("strong"),Nxr=o("xlnet"),qxr=o(" \u2014 "),DY=a("a"),jxr=o("TFXLNetForQuestionAnsweringSimple"),Dxr=o(" (XLNet model)"),Gxr=l(),F(J3.$$.fragment),WGe=l(),Pc=a("h2"),Y3=a("a"),UEe=a("span"),F(tx.$$.fragment),Oxr=l(),JEe=a("span"),Vxr=o("TFAutoModelForVision2Seq"),QGe=l(),mr=a("div"),F(ax.$$.fragment),Xxr=l(),Bc=a("p"),zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GY=a("a"),Wxr=o("from_pretrained()"),Qxr=o(" class method or the "),OY=a("a"),Hxr=o("from_config()"),Uxr=o(` class
method.`),Jxr=l(),nx=a("p"),Yxr=o("This class cannot be instantiated directly using "),YEe=a("code"),Kxr=o("__init__()"),Zxr=o(" (throws an error)."),e$r=l(),Ot=a("div"),F(sx.$$.fragment),o$r=l(),KEe=a("p"),r$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),t$r=l(),Ic=a("p"),a$r=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),n$r=o("not"),s$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=a("a"),l$r=o("from_pretrained()"),i$r=o(" to load the model weights."),d$r=l(),F(K3.$$.fragment),c$r=l(),jr=a("div"),F(lx.$$.fragment),m$r=l(),eCe=a("p"),f$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g$r=l(),_n=a("p"),h$r=o("The model class to instantiate is selected based on the "),oCe=a("code"),u$r=o("model_type"),p$r=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),_$r=o("pretrained_model_name_or_path"),b$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),v$r=o("pretrained_model_name_or_path"),F$r=o(":"),T$r=l(),aCe=a("ul"),Z3=a("li"),nCe=a("strong"),M$r=o("vision-encoder-decoder"),E$r=o(" \u2014 "),XY=a("a"),C$r=o("TFVisionEncoderDecoderModel"),w$r=o(" (Vision Encoder decoder model)"),A$r=l(),F(ew.$$.fragment),HGe=l(),Nc=a("h2"),ow=a("a"),sCe=a("span"),F(ix.$$.fragment),y$r=l(),lCe=a("span"),L$r=o("TFAutoModelForSpeechSeq2Seq"),UGe=l(),fr=a("div"),F(dx.$$.fragment),x$r=l(),qc=a("p"),$$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zY=a("a"),k$r=o("from_pretrained()"),S$r=o(" class method or the "),WY=a("a"),R$r=o("from_config()"),P$r=o(` class
method.`),B$r=l(),cx=a("p"),I$r=o("This class cannot be instantiated directly using "),iCe=a("code"),N$r=o("__init__()"),q$r=o(" (throws an error)."),j$r=l(),Vt=a("div"),F(mx.$$.fragment),D$r=l(),dCe=a("p"),G$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O$r=l(),jc=a("p"),V$r=o(`Note:
Loading a model from its configuration file does `),cCe=a("strong"),X$r=o("not"),z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),W$r=o("from_pretrained()"),Q$r=o(" to load the model weights."),H$r=l(),F(rw.$$.fragment),U$r=l(),Dr=a("div"),F(fx.$$.fragment),J$r=l(),mCe=a("p"),Y$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),K$r=l(),bn=a("p"),Z$r=o("The model class to instantiate is selected based on the "),fCe=a("code"),ekr=o("model_type"),okr=o(` property of the config object (either
passed as an argument or loaded from `),gCe=a("code"),rkr=o("pretrained_model_name_or_path"),tkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(":"),skr=l(),uCe=a("ul"),tw=a("li"),pCe=a("strong"),lkr=o("speech_to_text"),ikr=o(" \u2014 "),HY=a("a"),dkr=o("TFSpeech2TextForConditionalGeneration"),ckr=o(" (Speech2Text model)"),mkr=l(),F(aw.$$.fragment),JGe=l(),Dc=a("h2"),nw=a("a"),_Ce=a("span"),F(gx.$$.fragment),fkr=l(),bCe=a("span"),gkr=o("FlaxAutoModel"),YGe=l(),gr=a("div"),F(hx.$$.fragment),hkr=l(),Gc=a("p"),ukr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UY=a("a"),pkr=o("from_pretrained()"),_kr=o(" class method or the "),JY=a("a"),bkr=o("from_config()"),vkr=o(` class
method.`),Fkr=l(),ux=a("p"),Tkr=o("This class cannot be instantiated directly using "),vCe=a("code"),Mkr=o("__init__()"),Ekr=o(" (throws an error)."),Ckr=l(),Xt=a("div"),F(px.$$.fragment),wkr=l(),FCe=a("p"),Akr=o("Instantiates one of the base model classes of the library from a configuration."),ykr=l(),Oc=a("p"),Lkr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),xkr=o("not"),$kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),kkr=o("from_pretrained()"),Skr=o(" to load the model weights."),Rkr=l(),F(sw.$$.fragment),Pkr=l(),Gr=a("div"),F(_x.$$.fragment),Bkr=l(),MCe=a("p"),Ikr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nkr=l(),vn=a("p"),qkr=o("The model class to instantiate is selected based on the "),ECe=a("code"),jkr=o("model_type"),Dkr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),Gkr=o("pretrained_model_name_or_path"),Okr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(":"),zkr=l(),te=a("ul"),lw=a("li"),ACe=a("strong"),Wkr=o("albert"),Qkr=o(" \u2014 "),KY=a("a"),Hkr=o("FlaxAlbertModel"),Ukr=o(" (ALBERT model)"),Jkr=l(),iw=a("li"),yCe=a("strong"),Ykr=o("bart"),Kkr=o(" \u2014 "),ZY=a("a"),Zkr=o("FlaxBartModel"),eSr=o(" (BART model)"),oSr=l(),dw=a("li"),LCe=a("strong"),rSr=o("beit"),tSr=o(" \u2014 "),eK=a("a"),aSr=o("FlaxBeitModel"),nSr=o(" (BEiT model)"),sSr=l(),cw=a("li"),xCe=a("strong"),lSr=o("bert"),iSr=o(" \u2014 "),oK=a("a"),dSr=o("FlaxBertModel"),cSr=o(" (BERT model)"),mSr=l(),mw=a("li"),$Ce=a("strong"),fSr=o("big_bird"),gSr=o(" \u2014 "),rK=a("a"),hSr=o("FlaxBigBirdModel"),uSr=o(" (BigBird model)"),pSr=l(),fw=a("li"),kCe=a("strong"),_Sr=o("blenderbot"),bSr=o(" \u2014 "),tK=a("a"),vSr=o("FlaxBlenderbotModel"),FSr=o(" (Blenderbot model)"),TSr=l(),gw=a("li"),SCe=a("strong"),MSr=o("blenderbot-small"),ESr=o(" \u2014 "),aK=a("a"),CSr=o("FlaxBlenderbotSmallModel"),wSr=o(" (BlenderbotSmall model)"),ASr=l(),hw=a("li"),RCe=a("strong"),ySr=o("clip"),LSr=o(" \u2014 "),nK=a("a"),xSr=o("FlaxCLIPModel"),$Sr=o(" (CLIP model)"),kSr=l(),uw=a("li"),PCe=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),sK=a("a"),PSr=o("FlaxDistilBertModel"),BSr=o(" (DistilBERT model)"),ISr=l(),pw=a("li"),BCe=a("strong"),NSr=o("electra"),qSr=o(" \u2014 "),lK=a("a"),jSr=o("FlaxElectraModel"),DSr=o(" (ELECTRA model)"),GSr=l(),_w=a("li"),ICe=a("strong"),OSr=o("gpt2"),VSr=o(" \u2014 "),iK=a("a"),XSr=o("FlaxGPT2Model"),zSr=o(" (OpenAI GPT-2 model)"),WSr=l(),bw=a("li"),NCe=a("strong"),QSr=o("gpt_neo"),HSr=o(" \u2014 "),dK=a("a"),USr=o("FlaxGPTNeoModel"),JSr=o(" (GPT Neo model)"),YSr=l(),vw=a("li"),qCe=a("strong"),KSr=o("gptj"),ZSr=o(" \u2014 "),cK=a("a"),eRr=o("FlaxGPTJModel"),oRr=o(" (GPT-J model)"),rRr=l(),Fw=a("li"),jCe=a("strong"),tRr=o("marian"),aRr=o(" \u2014 "),mK=a("a"),nRr=o("FlaxMarianModel"),sRr=o(" (Marian model)"),lRr=l(),Tw=a("li"),DCe=a("strong"),iRr=o("mbart"),dRr=o(" \u2014 "),fK=a("a"),cRr=o("FlaxMBartModel"),mRr=o(" (mBART model)"),fRr=l(),Mw=a("li"),GCe=a("strong"),gRr=o("mt5"),hRr=o(" \u2014 "),gK=a("a"),uRr=o("FlaxMT5Model"),pRr=o(" (MT5 model)"),_Rr=l(),Ew=a("li"),OCe=a("strong"),bRr=o("opt"),vRr=o(" \u2014 "),hK=a("a"),FRr=o("FlaxOPTModel"),TRr=o(" (OPT model)"),MRr=l(),Cw=a("li"),VCe=a("strong"),ERr=o("pegasus"),CRr=o(" \u2014 "),uK=a("a"),wRr=o("FlaxPegasusModel"),ARr=o(" (Pegasus model)"),yRr=l(),ww=a("li"),XCe=a("strong"),LRr=o("roberta"),xRr=o(" \u2014 "),pK=a("a"),$Rr=o("FlaxRobertaModel"),kRr=o(" (RoBERTa model)"),SRr=l(),Aw=a("li"),zCe=a("strong"),RRr=o("roformer"),PRr=o(" \u2014 "),_K=a("a"),BRr=o("FlaxRoFormerModel"),IRr=o(" (RoFormer model)"),NRr=l(),yw=a("li"),WCe=a("strong"),qRr=o("t5"),jRr=o(" \u2014 "),bK=a("a"),DRr=o("FlaxT5Model"),GRr=o(" (T5 model)"),ORr=l(),Lw=a("li"),QCe=a("strong"),VRr=o("vision-text-dual-encoder"),XRr=o(" \u2014 "),vK=a("a"),zRr=o("FlaxVisionTextDualEncoderModel"),WRr=o(" (VisionTextDualEncoder model)"),QRr=l(),xw=a("li"),HCe=a("strong"),HRr=o("vit"),URr=o(" \u2014 "),FK=a("a"),JRr=o("FlaxViTModel"),YRr=o(" (ViT model)"),KRr=l(),$w=a("li"),UCe=a("strong"),ZRr=o("wav2vec2"),ePr=o(" \u2014 "),TK=a("a"),oPr=o("FlaxWav2Vec2Model"),rPr=o(" (Wav2Vec2 model)"),tPr=l(),kw=a("li"),JCe=a("strong"),aPr=o("xglm"),nPr=o(" \u2014 "),MK=a("a"),sPr=o("FlaxXGLMModel"),lPr=o(" (XGLM model)"),iPr=l(),Sw=a("li"),YCe=a("strong"),dPr=o("xlm-roberta"),cPr=o(" \u2014 "),EK=a("a"),mPr=o("FlaxXLMRobertaModel"),fPr=o(" (XLM-RoBERTa model)"),gPr=l(),F(Rw.$$.fragment),KGe=l(),Vc=a("h2"),Pw=a("a"),KCe=a("span"),F(bx.$$.fragment),hPr=l(),ZCe=a("span"),uPr=o("FlaxAutoModelForCausalLM"),ZGe=l(),hr=a("div"),F(vx.$$.fragment),pPr=l(),Xc=a("p"),_Pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CK=a("a"),bPr=o("from_pretrained()"),vPr=o(" class method or the "),wK=a("a"),FPr=o("from_config()"),TPr=o(` class
method.`),MPr=l(),Fx=a("p"),EPr=o("This class cannot be instantiated directly using "),e5e=a("code"),CPr=o("__init__()"),wPr=o(" (throws an error)."),APr=l(),zt=a("div"),F(Tx.$$.fragment),yPr=l(),o5e=a("p"),LPr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xPr=l(),zc=a("p"),$Pr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),kPr=o("not"),SPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),RPr=o("from_pretrained()"),PPr=o(" to load the model weights."),BPr=l(),F(Bw.$$.fragment),IPr=l(),Or=a("div"),F(Mx.$$.fragment),NPr=l(),t5e=a("p"),qPr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jPr=l(),Fn=a("p"),DPr=o("The model class to instantiate is selected based on the "),a5e=a("code"),GPr=o("model_type"),OPr=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),VPr=o("pretrained_model_name_or_path"),XPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),zPr=o("pretrained_model_name_or_path"),WPr=o(":"),QPr=l(),xe=a("ul"),Iw=a("li"),l5e=a("strong"),HPr=o("bart"),UPr=o(" \u2014 "),yK=a("a"),JPr=o("FlaxBartForCausalLM"),YPr=o(" (BART model)"),KPr=l(),Nw=a("li"),i5e=a("strong"),ZPr=o("bert"),eBr=o(" \u2014 "),LK=a("a"),oBr=o("FlaxBertForCausalLM"),rBr=o(" (BERT model)"),tBr=l(),qw=a("li"),d5e=a("strong"),aBr=o("big_bird"),nBr=o(" \u2014 "),xK=a("a"),sBr=o("FlaxBigBirdForCausalLM"),lBr=o(" (BigBird model)"),iBr=l(),jw=a("li"),c5e=a("strong"),dBr=o("electra"),cBr=o(" \u2014 "),$K=a("a"),mBr=o("FlaxElectraForCausalLM"),fBr=o(" (ELECTRA model)"),gBr=l(),Dw=a("li"),m5e=a("strong"),hBr=o("gpt2"),uBr=o(" \u2014 "),kK=a("a"),pBr=o("FlaxGPT2LMHeadModel"),_Br=o(" (OpenAI GPT-2 model)"),bBr=l(),Gw=a("li"),f5e=a("strong"),vBr=o("gpt_neo"),FBr=o(" \u2014 "),SK=a("a"),TBr=o("FlaxGPTNeoForCausalLM"),MBr=o(" (GPT Neo model)"),EBr=l(),Ow=a("li"),g5e=a("strong"),CBr=o("gptj"),wBr=o(" \u2014 "),RK=a("a"),ABr=o("FlaxGPTJForCausalLM"),yBr=o(" (GPT-J model)"),LBr=l(),Vw=a("li"),h5e=a("strong"),xBr=o("opt"),$Br=o(" \u2014 "),PK=a("a"),kBr=o("FlaxOPTForCausalLM"),SBr=o(" (OPT model)"),RBr=l(),Xw=a("li"),u5e=a("strong"),PBr=o("roberta"),BBr=o(" \u2014 "),BK=a("a"),IBr=o("FlaxRobertaForCausalLM"),NBr=o(" (RoBERTa model)"),qBr=l(),zw=a("li"),p5e=a("strong"),jBr=o("xglm"),DBr=o(" \u2014 "),IK=a("a"),GBr=o("FlaxXGLMForCausalLM"),OBr=o(" (XGLM model)"),VBr=l(),F(Ww.$$.fragment),eOe=l(),Wc=a("h2"),Qw=a("a"),_5e=a("span"),F(Ex.$$.fragment),XBr=l(),b5e=a("span"),zBr=o("FlaxAutoModelForPreTraining"),oOe=l(),ur=a("div"),F(Cx.$$.fragment),WBr=l(),Qc=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NK=a("a"),HBr=o("from_pretrained()"),UBr=o(" class method or the "),qK=a("a"),JBr=o("from_config()"),YBr=o(` class
method.`),KBr=l(),wx=a("p"),ZBr=o("This class cannot be instantiated directly using "),v5e=a("code"),eIr=o("__init__()"),oIr=o(" (throws an error)."),rIr=l(),Wt=a("div"),F(Ax.$$.fragment),tIr=l(),F5e=a("p"),aIr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nIr=l(),Hc=a("p"),sIr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),lIr=o("not"),iIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),dIr=o("from_pretrained()"),cIr=o(" to load the model weights."),mIr=l(),F(Hw.$$.fragment),fIr=l(),Vr=a("div"),F(yx.$$.fragment),gIr=l(),M5e=a("p"),hIr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uIr=l(),Tn=a("p"),pIr=o("The model class to instantiate is selected based on the "),E5e=a("code"),_Ir=o("model_type"),bIr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),TIr=o("pretrained_model_name_or_path"),MIr=o(":"),EIr=l(),Ee=a("ul"),Uw=a("li"),A5e=a("strong"),CIr=o("albert"),wIr=o(" \u2014 "),DK=a("a"),AIr=o("FlaxAlbertForPreTraining"),yIr=o(" (ALBERT model)"),LIr=l(),Jw=a("li"),y5e=a("strong"),xIr=o("bart"),$Ir=o(" \u2014 "),GK=a("a"),kIr=o("FlaxBartForConditionalGeneration"),SIr=o(" (BART model)"),RIr=l(),Yw=a("li"),L5e=a("strong"),PIr=o("bert"),BIr=o(" \u2014 "),OK=a("a"),IIr=o("FlaxBertForPreTraining"),NIr=o(" (BERT model)"),qIr=l(),Kw=a("li"),x5e=a("strong"),jIr=o("big_bird"),DIr=o(" \u2014 "),VK=a("a"),GIr=o("FlaxBigBirdForPreTraining"),OIr=o(" (BigBird model)"),VIr=l(),Zw=a("li"),$5e=a("strong"),XIr=o("electra"),zIr=o(" \u2014 "),XK=a("a"),WIr=o("FlaxElectraForPreTraining"),QIr=o(" (ELECTRA model)"),HIr=l(),e0=a("li"),k5e=a("strong"),UIr=o("mbart"),JIr=o(" \u2014 "),zK=a("a"),YIr=o("FlaxMBartForConditionalGeneration"),KIr=o(" (mBART model)"),ZIr=l(),o0=a("li"),S5e=a("strong"),eNr=o("mt5"),oNr=o(" \u2014 "),WK=a("a"),rNr=o("FlaxMT5ForConditionalGeneration"),tNr=o(" (MT5 model)"),aNr=l(),r0=a("li"),R5e=a("strong"),nNr=o("roberta"),sNr=o(" \u2014 "),QK=a("a"),lNr=o("FlaxRobertaForMaskedLM"),iNr=o(" (RoBERTa model)"),dNr=l(),t0=a("li"),P5e=a("strong"),cNr=o("roformer"),mNr=o(" \u2014 "),HK=a("a"),fNr=o("FlaxRoFormerForMaskedLM"),gNr=o(" (RoFormer model)"),hNr=l(),a0=a("li"),B5e=a("strong"),uNr=o("t5"),pNr=o(" \u2014 "),UK=a("a"),_Nr=o("FlaxT5ForConditionalGeneration"),bNr=o(" (T5 model)"),vNr=l(),n0=a("li"),I5e=a("strong"),FNr=o("wav2vec2"),TNr=o(" \u2014 "),JK=a("a"),MNr=o("FlaxWav2Vec2ForPreTraining"),ENr=o(" (Wav2Vec2 model)"),CNr=l(),s0=a("li"),N5e=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),YK=a("a"),yNr=o("FlaxXLMRobertaForMaskedLM"),LNr=o(" (XLM-RoBERTa model)"),xNr=l(),F(l0.$$.fragment),rOe=l(),Uc=a("h2"),i0=a("a"),q5e=a("span"),F(Lx.$$.fragment),$Nr=l(),j5e=a("span"),kNr=o("FlaxAutoModelForMaskedLM"),tOe=l(),pr=a("div"),F(xx.$$.fragment),SNr=l(),Jc=a("p"),RNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KK=a("a"),PNr=o("from_pretrained()"),BNr=o(" class method or the "),ZK=a("a"),INr=o("from_config()"),NNr=o(` class
method.`),qNr=l(),$x=a("p"),jNr=o("This class cannot be instantiated directly using "),D5e=a("code"),DNr=o("__init__()"),GNr=o(" (throws an error)."),ONr=l(),Qt=a("div"),F(kx.$$.fragment),VNr=l(),G5e=a("p"),XNr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zNr=l(),Yc=a("p"),WNr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),QNr=o("not"),HNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),UNr=o("from_pretrained()"),JNr=o(" to load the model weights."),YNr=l(),F(d0.$$.fragment),KNr=l(),Xr=a("div"),F(Sx.$$.fragment),ZNr=l(),V5e=a("p"),eqr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oqr=l(),Mn=a("p"),rqr=o("The model class to instantiate is selected based on the "),X5e=a("code"),tqr=o("model_type"),aqr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),nqr=o("pretrained_model_name_or_path"),sqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),lqr=o("pretrained_model_name_or_path"),iqr=o(":"),dqr=l(),$e=a("ul"),c0=a("li"),Q5e=a("strong"),cqr=o("albert"),mqr=o(" \u2014 "),oZ=a("a"),fqr=o("FlaxAlbertForMaskedLM"),gqr=o(" (ALBERT model)"),hqr=l(),m0=a("li"),H5e=a("strong"),uqr=o("bart"),pqr=o(" \u2014 "),rZ=a("a"),_qr=o("FlaxBartForConditionalGeneration"),bqr=o(" (BART model)"),vqr=l(),f0=a("li"),U5e=a("strong"),Fqr=o("bert"),Tqr=o(" \u2014 "),tZ=a("a"),Mqr=o("FlaxBertForMaskedLM"),Eqr=o(" (BERT model)"),Cqr=l(),g0=a("li"),J5e=a("strong"),wqr=o("big_bird"),Aqr=o(" \u2014 "),aZ=a("a"),yqr=o("FlaxBigBirdForMaskedLM"),Lqr=o(" (BigBird model)"),xqr=l(),h0=a("li"),Y5e=a("strong"),$qr=o("distilbert"),kqr=o(" \u2014 "),nZ=a("a"),Sqr=o("FlaxDistilBertForMaskedLM"),Rqr=o(" (DistilBERT model)"),Pqr=l(),u0=a("li"),K5e=a("strong"),Bqr=o("electra"),Iqr=o(" \u2014 "),sZ=a("a"),Nqr=o("FlaxElectraForMaskedLM"),qqr=o(" (ELECTRA model)"),jqr=l(),p0=a("li"),Z5e=a("strong"),Dqr=o("mbart"),Gqr=o(" \u2014 "),lZ=a("a"),Oqr=o("FlaxMBartForConditionalGeneration"),Vqr=o(" (mBART model)"),Xqr=l(),_0=a("li"),e3e=a("strong"),zqr=o("roberta"),Wqr=o(" \u2014 "),iZ=a("a"),Qqr=o("FlaxRobertaForMaskedLM"),Hqr=o(" (RoBERTa model)"),Uqr=l(),b0=a("li"),o3e=a("strong"),Jqr=o("roformer"),Yqr=o(" \u2014 "),dZ=a("a"),Kqr=o("FlaxRoFormerForMaskedLM"),Zqr=o(" (RoFormer model)"),ejr=l(),v0=a("li"),r3e=a("strong"),ojr=o("xlm-roberta"),rjr=o(" \u2014 "),cZ=a("a"),tjr=o("FlaxXLMRobertaForMaskedLM"),ajr=o(" (XLM-RoBERTa model)"),njr=l(),F(F0.$$.fragment),aOe=l(),Kc=a("h2"),T0=a("a"),t3e=a("span"),F(Rx.$$.fragment),sjr=l(),a3e=a("span"),ljr=o("FlaxAutoModelForSeq2SeqLM"),nOe=l(),_r=a("div"),F(Px.$$.fragment),ijr=l(),Zc=a("p"),djr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mZ=a("a"),cjr=o("from_pretrained()"),mjr=o(" class method or the "),fZ=a("a"),fjr=o("from_config()"),gjr=o(` class
method.`),hjr=l(),Bx=a("p"),ujr=o("This class cannot be instantiated directly using "),n3e=a("code"),pjr=o("__init__()"),_jr=o(" (throws an error)."),bjr=l(),Ht=a("div"),F(Ix.$$.fragment),vjr=l(),s3e=a("p"),Fjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Tjr=l(),em=a("p"),Mjr=o(`Note:
Loading a model from its configuration file does `),l3e=a("strong"),Ejr=o("not"),Cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),wjr=o("from_pretrained()"),Ajr=o(" to load the model weights."),yjr=l(),F(M0.$$.fragment),Ljr=l(),zr=a("div"),F(Nx.$$.fragment),xjr=l(),i3e=a("p"),$jr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kjr=l(),En=a("p"),Sjr=o("The model class to instantiate is selected based on the "),d3e=a("code"),Rjr=o("model_type"),Pjr=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),Bjr=o("pretrained_model_name_or_path"),Ijr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=a("code"),Njr=o("pretrained_model_name_or_path"),qjr=o(":"),jjr=l(),Pe=a("ul"),E0=a("li"),f3e=a("strong"),Djr=o("bart"),Gjr=o(" \u2014 "),hZ=a("a"),Ojr=o("FlaxBartForConditionalGeneration"),Vjr=o(" (BART model)"),Xjr=l(),C0=a("li"),g3e=a("strong"),zjr=o("blenderbot"),Wjr=o(" \u2014 "),uZ=a("a"),Qjr=o("FlaxBlenderbotForConditionalGeneration"),Hjr=o(" (Blenderbot model)"),Ujr=l(),w0=a("li"),h3e=a("strong"),Jjr=o("blenderbot-small"),Yjr=o(" \u2014 "),pZ=a("a"),Kjr=o("FlaxBlenderbotSmallForConditionalGeneration"),Zjr=o(" (BlenderbotSmall model)"),eDr=l(),A0=a("li"),u3e=a("strong"),oDr=o("encoder-decoder"),rDr=o(" \u2014 "),_Z=a("a"),tDr=o("FlaxEncoderDecoderModel"),aDr=o(" (Encoder decoder model)"),nDr=l(),y0=a("li"),p3e=a("strong"),sDr=o("marian"),lDr=o(" \u2014 "),bZ=a("a"),iDr=o("FlaxMarianMTModel"),dDr=o(" (Marian model)"),cDr=l(),L0=a("li"),_3e=a("strong"),mDr=o("mbart"),fDr=o(" \u2014 "),vZ=a("a"),gDr=o("FlaxMBartForConditionalGeneration"),hDr=o(" (mBART model)"),uDr=l(),x0=a("li"),b3e=a("strong"),pDr=o("mt5"),_Dr=o(" \u2014 "),FZ=a("a"),bDr=o("FlaxMT5ForConditionalGeneration"),vDr=o(" (MT5 model)"),FDr=l(),$0=a("li"),v3e=a("strong"),TDr=o("pegasus"),MDr=o(" \u2014 "),TZ=a("a"),EDr=o("FlaxPegasusForConditionalGeneration"),CDr=o(" (Pegasus model)"),wDr=l(),k0=a("li"),F3e=a("strong"),ADr=o("t5"),yDr=o(" \u2014 "),MZ=a("a"),LDr=o("FlaxT5ForConditionalGeneration"),xDr=o(" (T5 model)"),$Dr=l(),F(S0.$$.fragment),sOe=l(),om=a("h2"),R0=a("a"),T3e=a("span"),F(qx.$$.fragment),kDr=l(),M3e=a("span"),SDr=o("FlaxAutoModelForSequenceClassification"),lOe=l(),br=a("div"),F(jx.$$.fragment),RDr=l(),rm=a("p"),PDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EZ=a("a"),BDr=o("from_pretrained()"),IDr=o(" class method or the "),CZ=a("a"),NDr=o("from_config()"),qDr=o(` class
method.`),jDr=l(),Dx=a("p"),DDr=o("This class cannot be instantiated directly using "),E3e=a("code"),GDr=o("__init__()"),ODr=o(" (throws an error)."),VDr=l(),Ut=a("div"),F(Gx.$$.fragment),XDr=l(),C3e=a("p"),zDr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WDr=l(),tm=a("p"),QDr=o(`Note:
Loading a model from its configuration file does `),w3e=a("strong"),HDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" to load the model weights."),KDr=l(),F(P0.$$.fragment),ZDr=l(),Wr=a("div"),F(Ox.$$.fragment),eGr=l(),A3e=a("p"),oGr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rGr=l(),Cn=a("p"),tGr=o("The model class to instantiate is selected based on the "),y3e=a("code"),aGr=o("model_type"),nGr=o(` property of the config object (either
passed as an argument or loaded from `),L3e=a("code"),sGr=o("pretrained_model_name_or_path"),lGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(":"),cGr=l(),ke=a("ul"),B0=a("li"),$3e=a("strong"),mGr=o("albert"),fGr=o(" \u2014 "),AZ=a("a"),gGr=o("FlaxAlbertForSequenceClassification"),hGr=o(" (ALBERT model)"),uGr=l(),I0=a("li"),k3e=a("strong"),pGr=o("bart"),_Gr=o(" \u2014 "),yZ=a("a"),bGr=o("FlaxBartForSequenceClassification"),vGr=o(" (BART model)"),FGr=l(),N0=a("li"),S3e=a("strong"),TGr=o("bert"),MGr=o(" \u2014 "),LZ=a("a"),EGr=o("FlaxBertForSequenceClassification"),CGr=o(" (BERT model)"),wGr=l(),q0=a("li"),R3e=a("strong"),AGr=o("big_bird"),yGr=o(" \u2014 "),xZ=a("a"),LGr=o("FlaxBigBirdForSequenceClassification"),xGr=o(" (BigBird model)"),$Gr=l(),j0=a("li"),P3e=a("strong"),kGr=o("distilbert"),SGr=o(" \u2014 "),$Z=a("a"),RGr=o("FlaxDistilBertForSequenceClassification"),PGr=o(" (DistilBERT model)"),BGr=l(),D0=a("li"),B3e=a("strong"),IGr=o("electra"),NGr=o(" \u2014 "),kZ=a("a"),qGr=o("FlaxElectraForSequenceClassification"),jGr=o(" (ELECTRA model)"),DGr=l(),G0=a("li"),I3e=a("strong"),GGr=o("mbart"),OGr=o(" \u2014 "),SZ=a("a"),VGr=o("FlaxMBartForSequenceClassification"),XGr=o(" (mBART model)"),zGr=l(),O0=a("li"),N3e=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),RZ=a("a"),HGr=o("FlaxRobertaForSequenceClassification"),UGr=o(" (RoBERTa model)"),JGr=l(),V0=a("li"),q3e=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),PZ=a("a"),ZGr=o("FlaxRoFormerForSequenceClassification"),eOr=o(" (RoFormer model)"),oOr=l(),X0=a("li"),j3e=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),BZ=a("a"),aOr=o("FlaxXLMRobertaForSequenceClassification"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(z0.$$.fragment),iOe=l(),am=a("h2"),W0=a("a"),D3e=a("span"),F(Vx.$$.fragment),lOr=l(),G3e=a("span"),iOr=o("FlaxAutoModelForQuestionAnswering"),dOe=l(),vr=a("div"),F(Xx.$$.fragment),dOr=l(),nm=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IZ=a("a"),mOr=o("from_pretrained()"),fOr=o(" class method or the "),NZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),uOr=l(),zx=a("p"),pOr=o("This class cannot be instantiated directly using "),O3e=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Wx.$$.fragment),FOr=l(),V3e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MOr=l(),sm=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),X3e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(Q0.$$.fragment),xOr=l(),Qr=a("div"),F(Qx.$$.fragment),$Or=l(),z3e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SOr=l(),wn=a("p"),ROr=o("The model class to instantiate is selected based on the "),W3e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),Se=a("ul"),H0=a("li"),U3e=a("strong"),GOr=o("albert"),OOr=o(" \u2014 "),jZ=a("a"),VOr=o("FlaxAlbertForQuestionAnswering"),XOr=o(" (ALBERT model)"),zOr=l(),U0=a("li"),J3e=a("strong"),WOr=o("bart"),QOr=o(" \u2014 "),DZ=a("a"),HOr=o("FlaxBartForQuestionAnswering"),UOr=o(" (BART model)"),JOr=l(),J0=a("li"),Y3e=a("strong"),YOr=o("bert"),KOr=o(" \u2014 "),GZ=a("a"),ZOr=o("FlaxBertForQuestionAnswering"),eVr=o(" (BERT model)"),oVr=l(),Y0=a("li"),K3e=a("strong"),rVr=o("big_bird"),tVr=o(" \u2014 "),OZ=a("a"),aVr=o("FlaxBigBirdForQuestionAnswering"),nVr=o(" (BigBird model)"),sVr=l(),K0=a("li"),Z3e=a("strong"),lVr=o("distilbert"),iVr=o(" \u2014 "),VZ=a("a"),dVr=o("FlaxDistilBertForQuestionAnswering"),cVr=o(" (DistilBERT model)"),mVr=l(),Z0=a("li"),ewe=a("strong"),fVr=o("electra"),gVr=o(" \u2014 "),XZ=a("a"),hVr=o("FlaxElectraForQuestionAnswering"),uVr=o(" (ELECTRA model)"),pVr=l(),eA=a("li"),owe=a("strong"),_Vr=o("mbart"),bVr=o(" \u2014 "),zZ=a("a"),vVr=o("FlaxMBartForQuestionAnswering"),FVr=o(" (mBART model)"),TVr=l(),oA=a("li"),rwe=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),WZ=a("a"),CVr=o("FlaxRobertaForQuestionAnswering"),wVr=o(" (RoBERTa model)"),AVr=l(),rA=a("li"),twe=a("strong"),yVr=o("roformer"),LVr=o(" \u2014 "),QZ=a("a"),xVr=o("FlaxRoFormerForQuestionAnswering"),$Vr=o(" (RoFormer model)"),kVr=l(),tA=a("li"),awe=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),HZ=a("a"),PVr=o("FlaxXLMRobertaForQuestionAnswering"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(aA.$$.fragment),cOe=l(),lm=a("h2"),nA=a("a"),nwe=a("span"),F(Hx.$$.fragment),NVr=l(),swe=a("span"),qVr=o("FlaxAutoModelForTokenClassification"),mOe=l(),Fr=a("div"),F(Ux.$$.fragment),jVr=l(),im=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UZ=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),JZ=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),Jx=a("p"),WVr=o("This class cannot be instantiated directly using "),lwe=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Yt=a("div"),F(Yx.$$.fragment),JVr=l(),iwe=a("p"),YVr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KVr=l(),dm=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),dwe=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(sA.$$.fragment),nXr=l(),Hr=a("div"),F(Kx.$$.fragment),sXr=l(),cwe=a("p"),lXr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iXr=l(),An=a("p"),dXr=o("The model class to instantiate is selected based on the "),mwe=a("code"),cXr=o("model_type"),mXr=o(` property of the config object (either
passed as an argument or loaded from `),fwe=a("code"),fXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=a("code"),hXr=o("pretrained_model_name_or_path"),uXr=o(":"),pXr=l(),Oe=a("ul"),lA=a("li"),hwe=a("strong"),_Xr=o("albert"),bXr=o(" \u2014 "),KZ=a("a"),vXr=o("FlaxAlbertForTokenClassification"),FXr=o(" (ALBERT model)"),TXr=l(),iA=a("li"),uwe=a("strong"),MXr=o("bert"),EXr=o(" \u2014 "),ZZ=a("a"),CXr=o("FlaxBertForTokenClassification"),wXr=o(" (BERT model)"),AXr=l(),dA=a("li"),pwe=a("strong"),yXr=o("big_bird"),LXr=o(" \u2014 "),eee=a("a"),xXr=o("FlaxBigBirdForTokenClassification"),$Xr=o(" (BigBird model)"),kXr=l(),cA=a("li"),_we=a("strong"),SXr=o("distilbert"),RXr=o(" \u2014 "),oee=a("a"),PXr=o("FlaxDistilBertForTokenClassification"),BXr=o(" (DistilBERT model)"),IXr=l(),mA=a("li"),bwe=a("strong"),NXr=o("electra"),qXr=o(" \u2014 "),ree=a("a"),jXr=o("FlaxElectraForTokenClassification"),DXr=o(" (ELECTRA model)"),GXr=l(),fA=a("li"),vwe=a("strong"),OXr=o("roberta"),VXr=o(" \u2014 "),tee=a("a"),XXr=o("FlaxRobertaForTokenClassification"),zXr=o(" (RoBERTa model)"),WXr=l(),gA=a("li"),Fwe=a("strong"),QXr=o("roformer"),HXr=o(" \u2014 "),aee=a("a"),UXr=o("FlaxRoFormerForTokenClassification"),JXr=o(" (RoFormer model)"),YXr=l(),hA=a("li"),Twe=a("strong"),KXr=o("xlm-roberta"),ZXr=o(" \u2014 "),nee=a("a"),ezr=o("FlaxXLMRobertaForTokenClassification"),ozr=o(" (XLM-RoBERTa model)"),rzr=l(),F(uA.$$.fragment),fOe=l(),cm=a("h2"),pA=a("a"),Mwe=a("span"),F(Zx.$$.fragment),tzr=l(),Ewe=a("span"),azr=o("FlaxAutoModelForMultipleChoice"),gOe=l(),Tr=a("div"),F(e$.$$.fragment),nzr=l(),mm=a("p"),szr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),see=a("a"),lzr=o("from_pretrained()"),izr=o(" class method or the "),lee=a("a"),dzr=o("from_config()"),czr=o(` class
method.`),mzr=l(),o$=a("p"),fzr=o("This class cannot be instantiated directly using "),Cwe=a("code"),gzr=o("__init__()"),hzr=o(" (throws an error)."),uzr=l(),Kt=a("div"),F(r$.$$.fragment),pzr=l(),wwe=a("p"),_zr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bzr=l(),fm=a("p"),vzr=o(`Note:
Loading a model from its configuration file does `),Awe=a("strong"),Fzr=o("not"),Tzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),Mzr=o("from_pretrained()"),Ezr=o(" to load the model weights."),Czr=l(),F(_A.$$.fragment),wzr=l(),Ur=a("div"),F(t$.$$.fragment),Azr=l(),ywe=a("p"),yzr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lzr=l(),yn=a("p"),xzr=o("The model class to instantiate is selected based on the "),Lwe=a("code"),$zr=o("model_type"),kzr=o(` property of the config object (either
passed as an argument or loaded from `),xwe=a("code"),Szr=o("pretrained_model_name_or_path"),Rzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=a("code"),Pzr=o("pretrained_model_name_or_path"),Bzr=o(":"),Izr=l(),Ve=a("ul"),bA=a("li"),kwe=a("strong"),Nzr=o("albert"),qzr=o(" \u2014 "),dee=a("a"),jzr=o("FlaxAlbertForMultipleChoice"),Dzr=o(" (ALBERT model)"),Gzr=l(),vA=a("li"),Swe=a("strong"),Ozr=o("bert"),Vzr=o(" \u2014 "),cee=a("a"),Xzr=o("FlaxBertForMultipleChoice"),zzr=o(" (BERT model)"),Wzr=l(),FA=a("li"),Rwe=a("strong"),Qzr=o("big_bird"),Hzr=o(" \u2014 "),mee=a("a"),Uzr=o("FlaxBigBirdForMultipleChoice"),Jzr=o(" (BigBird model)"),Yzr=l(),TA=a("li"),Pwe=a("strong"),Kzr=o("distilbert"),Zzr=o(" \u2014 "),fee=a("a"),eWr=o("FlaxDistilBertForMultipleChoice"),oWr=o(" (DistilBERT model)"),rWr=l(),MA=a("li"),Bwe=a("strong"),tWr=o("electra"),aWr=o(" \u2014 "),gee=a("a"),nWr=o("FlaxElectraForMultipleChoice"),sWr=o(" (ELECTRA model)"),lWr=l(),EA=a("li"),Iwe=a("strong"),iWr=o("roberta"),dWr=o(" \u2014 "),hee=a("a"),cWr=o("FlaxRobertaForMultipleChoice"),mWr=o(" (RoBERTa model)"),fWr=l(),CA=a("li"),Nwe=a("strong"),gWr=o("roformer"),hWr=o(" \u2014 "),uee=a("a"),uWr=o("FlaxRoFormerForMultipleChoice"),pWr=o(" (RoFormer model)"),_Wr=l(),wA=a("li"),qwe=a("strong"),bWr=o("xlm-roberta"),vWr=o(" \u2014 "),pee=a("a"),FWr=o("FlaxXLMRobertaForMultipleChoice"),TWr=o(" (XLM-RoBERTa model)"),MWr=l(),F(AA.$$.fragment),hOe=l(),gm=a("h2"),yA=a("a"),jwe=a("span"),F(a$.$$.fragment),EWr=l(),Dwe=a("span"),CWr=o("FlaxAutoModelForNextSentencePrediction"),uOe=l(),Mr=a("div"),F(n$.$$.fragment),wWr=l(),hm=a("p"),AWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_ee=a("a"),yWr=o("from_pretrained()"),LWr=o(" class method or the "),bee=a("a"),xWr=o("from_config()"),$Wr=o(` class
method.`),kWr=l(),s$=a("p"),SWr=o("This class cannot be instantiated directly using "),Gwe=a("code"),RWr=o("__init__()"),PWr=o(" (throws an error)."),BWr=l(),Zt=a("div"),F(l$.$$.fragment),IWr=l(),Owe=a("p"),NWr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qWr=l(),um=a("p"),jWr=o(`Note:
Loading a model from its configuration file does `),Vwe=a("strong"),DWr=o("not"),GWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=a("a"),OWr=o("from_pretrained()"),VWr=o(" to load the model weights."),XWr=l(),F(LA.$$.fragment),zWr=l(),Jr=a("div"),F(i$.$$.fragment),WWr=l(),Xwe=a("p"),QWr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HWr=l(),Ln=a("p"),UWr=o("The model class to instantiate is selected based on the "),zwe=a("code"),JWr=o("model_type"),YWr=o(` property of the config object (either
passed as an argument or loaded from `),Wwe=a("code"),KWr=o("pretrained_model_name_or_path"),ZWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qwe=a("code"),eQr=o("pretrained_model_name_or_path"),oQr=o(":"),rQr=l(),Hwe=a("ul"),xA=a("li"),Uwe=a("strong"),tQr=o("bert"),aQr=o(" \u2014 "),Fee=a("a"),nQr=o("FlaxBertForNextSentencePrediction"),sQr=o(" (BERT model)"),lQr=l(),F($A.$$.fragment),pOe=l(),pm=a("h2"),kA=a("a"),Jwe=a("span"),F(d$.$$.fragment),iQr=l(),Ywe=a("span"),dQr=o("FlaxAutoModelForImageClassification"),_Oe=l(),Er=a("div"),F(c$.$$.fragment),cQr=l(),_m=a("p"),mQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tee=a("a"),fQr=o("from_pretrained()"),gQr=o(" class method or the "),Mee=a("a"),hQr=o("from_config()"),uQr=o(` class
method.`),pQr=l(),m$=a("p"),_Qr=o("This class cannot be instantiated directly using "),Kwe=a("code"),bQr=o("__init__()"),vQr=o(" (throws an error)."),FQr=l(),ea=a("div"),F(f$.$$.fragment),TQr=l(),Zwe=a("p"),MQr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EQr=l(),bm=a("p"),CQr=o(`Note:
Loading a model from its configuration file does `),e0e=a("strong"),wQr=o("not"),AQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("a"),yQr=o("from_pretrained()"),LQr=o(" to load the model weights."),xQr=l(),F(SA.$$.fragment),$Qr=l(),Yr=a("div"),F(g$.$$.fragment),kQr=l(),o0e=a("p"),SQr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RQr=l(),xn=a("p"),PQr=o("The model class to instantiate is selected based on the "),r0e=a("code"),BQr=o("model_type"),IQr=o(` property of the config object (either
passed as an argument or loaded from `),t0e=a("code"),NQr=o("pretrained_model_name_or_path"),qQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=a("code"),jQr=o("pretrained_model_name_or_path"),DQr=o(":"),GQr=l(),h$=a("ul"),RA=a("li"),n0e=a("strong"),OQr=o("beit"),VQr=o(" \u2014 "),Cee=a("a"),XQr=o("FlaxBeitForImageClassification"),zQr=o(" (BEiT model)"),WQr=l(),PA=a("li"),s0e=a("strong"),QQr=o("vit"),HQr=o(" \u2014 "),wee=a("a"),UQr=o("FlaxViTForImageClassification"),JQr=o(" (ViT model)"),YQr=l(),F(BA.$$.fragment),bOe=l(),vm=a("h2"),IA=a("a"),l0e=a("span"),F(u$.$$.fragment),KQr=l(),i0e=a("span"),ZQr=o("FlaxAutoModelForVision2Seq"),vOe=l(),Cr=a("div"),F(p$.$$.fragment),eHr=l(),Fm=a("p"),oHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aee=a("a"),rHr=o("from_pretrained()"),tHr=o(" class method or the "),yee=a("a"),aHr=o("from_config()"),nHr=o(` class
method.`),sHr=l(),_$=a("p"),lHr=o("This class cannot be instantiated directly using "),d0e=a("code"),iHr=o("__init__()"),dHr=o(" (throws an error)."),cHr=l(),oa=a("div"),F(b$.$$.fragment),mHr=l(),c0e=a("p"),fHr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gHr=l(),Tm=a("p"),hHr=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),uHr=o("not"),pHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=a("a"),_Hr=o("from_pretrained()"),bHr=o(" to load the model weights."),vHr=l(),F(NA.$$.fragment),FHr=l(),Kr=a("div"),F(v$.$$.fragment),THr=l(),f0e=a("p"),MHr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EHr=l(),$n=a("p"),CHr=o("The model class to instantiate is selected based on the "),g0e=a("code"),wHr=o("model_type"),AHr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),yHr=o("pretrained_model_name_or_path"),LHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),xHr=o("pretrained_model_name_or_path"),$Hr=o(":"),kHr=l(),p0e=a("ul"),qA=a("li"),_0e=a("strong"),SHr=o("vision-encoder-decoder"),RHr=o(" \u2014 "),xee=a("a"),PHr=o("FlaxVisionEncoderDecoderModel"),BHr=o(" (Vision Encoder decoder model)"),IHr=l(),F(jA.$$.fragment),this.h()},l(m){const _=TIt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var F$=s(u);f=n(F$,"A",{id:!0,class:!0,href:!0});var b0e=s(f);p=n(b0e,"SPAN",{});var v0e=s(p);T(d.$$.fragment,v0e),v0e.forEach(t),b0e.forEach(t),h=i(F$),Eo=n(F$,"SPAN",{});var F0e=s(Eo);vi=r(F0e,"Auto Classes"),F0e.forEach(t),F$.forEach(t),wm=i(m),at=n(m,"P",{});var T$=s(at);Fi=r(T$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ti=n(T$,"CODE",{});var T0e=s(Ti);sL=r(T0e,"from_pretrained()"),T0e.forEach(t),Am=r(T$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),T$.forEach(t),Ge=i(m),We=n(m,"P",{});var kn=s(We);Mi=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var M0e=s(Sn);lL=r(M0e,"AutoConfig"),M0e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var E0e=s(Pn);iL=r(E0e,"AutoModel"),E0e.forEach(t),Ei=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var C0e=s(Bn);dL=r(C0e,"AutoTokenizer"),C0e.forEach(t),Ci=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),ym=i(m),T(La.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var M$=s(Ae);Bk=r(M$,"will create a model that is an instance of "),wi=n(M$,"A",{href:!0});var w0e=s(wi);Ik=r(w0e,"BertModel"),w0e.forEach(t),Nk=r(M$,"."),M$.forEach(t),Co=i(m),xa=n(m,"P",{});var E$=s(xa);qk=r(E$,"There is one class of "),Lm=n(E$,"CODE",{});var A0e=s(Lm);jk=r(A0e,"AutoModel"),A0e.forEach(t),$Xe=r(E$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),E$.forEach(t),uDe=i(m),Ai=n(m,"H2",{class:!0});var C$=s(Ai);xm=n(C$,"A",{id:!0,class:!0,href:!0});var y0e=s(xm);Cre=n(y0e,"SPAN",{});var L0e=s(Cre);T(cL.$$.fragment,L0e),L0e.forEach(t),y0e.forEach(t),kXe=i(C$),wre=n(C$,"SPAN",{});var x0e=s(wre);SXe=r(x0e,"Extending the Auto Classes"),x0e.forEach(t),C$.forEach(t),pDe=i(m),In=n(m,"P",{});var Mm=s(In);RXe=r(Mm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Are=n(Mm,"CODE",{});var $0e=s(Are);PXe=r($0e,"NewModel"),$0e.forEach(t),BXe=r(Mm,", make sure you have a "),yre=n(Mm,"CODE",{});var k0e=s(yre);IXe=r(k0e,"NewModelConfig"),k0e.forEach(t),NXe=r(Mm,` then you can add those to the auto
classes like this:`),Mm.forEach(t),_De=i(m),T(mL.$$.fragment,m),bDe=i(m),Dk=n(m,"P",{});var S0e=s(Dk);qXe=r(S0e,"You will then be able to use the auto classes like you would usually do!"),S0e.forEach(t),vDe=i(m),T($m.$$.fragment,m),FDe=i(m),yi=n(m,"H2",{class:!0});var w$=s(yi);km=n(w$,"A",{id:!0,class:!0,href:!0});var R0e=s(km);Lre=n(R0e,"SPAN",{});var P0e=s(Lre);T(fL.$$.fragment,P0e),P0e.forEach(t),R0e.forEach(t),jXe=i(w$),xre=n(w$,"SPAN",{});var B0e=s(xre);DXe=r(B0e,"AutoConfig"),B0e.forEach(t),w$.forEach(t),TDe=i(m),wo=n(m,"DIV",{class:!0});var rt=s(wo);T(gL.$$.fragment,rt),GXe=i(rt),hL=n(rt,"P",{});var A$=s(hL);OXe=r(A$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Gk=n(A$,"A",{href:!0});var I0e=s(Gk);VXe=r(I0e,"from_pretrained()"),I0e.forEach(t),XXe=r(A$," class method."),A$.forEach(t),zXe=i(rt),uL=n(rt,"P",{});var y$=s(uL);WXe=r(y$,"This class cannot be instantiated directly using "),$re=n(y$,"CODE",{});var N0e=s($re);QXe=r(N0e,"__init__()"),N0e.forEach(t),HXe=r(y$," (throws an error)."),y$.forEach(t),UXe=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(pL.$$.fragment,tt),JXe=i(tt),kre=n(tt,"P",{});var q0e=s(kre);YXe=r(q0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),q0e.forEach(t),KXe=i(tt),Li=n(tt,"P",{});var Em=s(Li);ZXe=r(Em,"The configuration class to instantiate is selected based on the "),Sre=n(Em,"CODE",{});var j0e=s(Sre);eze=r(j0e,"model_type"),j0e.forEach(t),oze=r(Em,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Rre=n(Em,"CODE",{});var D0e=s(Rre);rze=r(D0e,"pretrained_model_name_or_path"),D0e.forEach(t),tze=r(Em,":"),Em.forEach(t),aze=i(tt),A=n(tt,"UL",{});var y=s(A);Sm=n(y,"LI",{});var DA=s(Sm);Pre=n(DA,"STRONG",{});var G0e=s(Pre);nze=r(G0e,"albert"),G0e.forEach(t),sze=r(DA," \u2014 "),Ok=n(DA,"A",{href:!0});var O0e=s(Ok);lze=r(O0e,"AlbertConfig"),O0e.forEach(t),ize=r(DA," (ALBERT model)"),DA.forEach(t),dze=i(y),Rm=n(y,"LI",{});var GA=s(Rm);Bre=n(GA,"STRONG",{});var V0e=s(Bre);cze=r(V0e,"bart"),V0e.forEach(t),mze=r(GA," \u2014 "),Vk=n(GA,"A",{href:!0});var X0e=s(Vk);fze=r(X0e,"BartConfig"),X0e.forEach(t),gze=r(GA," (BART model)"),GA.forEach(t),hze=i(y),Pm=n(y,"LI",{});var OA=s(Pm);Ire=n(OA,"STRONG",{});var z0e=s(Ire);uze=r(z0e,"beit"),z0e.forEach(t),pze=r(OA," \u2014 "),Xk=n(OA,"A",{href:!0});var W0e=s(Xk);_ze=r(W0e,"BeitConfig"),W0e.forEach(t),bze=r(OA," (BEiT model)"),OA.forEach(t),vze=i(y),Bm=n(y,"LI",{});var VA=s(Bm);Nre=n(VA,"STRONG",{});var Q0e=s(Nre);Fze=r(Q0e,"bert"),Q0e.forEach(t),Tze=r(VA," \u2014 "),zk=n(VA,"A",{href:!0});var H0e=s(zk);Mze=r(H0e,"BertConfig"),H0e.forEach(t),Eze=r(VA," (BERT model)"),VA.forEach(t),Cze=i(y),Im=n(y,"LI",{});var XA=s(Im);qre=n(XA,"STRONG",{});var U0e=s(qre);wze=r(U0e,"bert-generation"),U0e.forEach(t),Aze=r(XA," \u2014 "),Wk=n(XA,"A",{href:!0});var J0e=s(Wk);yze=r(J0e,"BertGenerationConfig"),J0e.forEach(t),Lze=r(XA," (Bert Generation model)"),XA.forEach(t),xze=i(y),Nm=n(y,"LI",{});var zA=s(Nm);jre=n(zA,"STRONG",{});var Y0e=s(jre);$ze=r(Y0e,"big_bird"),Y0e.forEach(t),kze=r(zA," \u2014 "),Qk=n(zA,"A",{href:!0});var K0e=s(Qk);Sze=r(K0e,"BigBirdConfig"),K0e.forEach(t),Rze=r(zA," (BigBird model)"),zA.forEach(t),Pze=i(y),qm=n(y,"LI",{});var WA=s(qm);Dre=n(WA,"STRONG",{});var Z0e=s(Dre);Bze=r(Z0e,"bigbird_pegasus"),Z0e.forEach(t),Ize=r(WA," \u2014 "),Hk=n(WA,"A",{href:!0});var eAe=s(Hk);Nze=r(eAe,"BigBirdPegasusConfig"),eAe.forEach(t),qze=r(WA," (BigBird-Pegasus model)"),WA.forEach(t),jze=i(y),jm=n(y,"LI",{});var QA=s(jm);Gre=n(QA,"STRONG",{});var oAe=s(Gre);Dze=r(oAe,"blenderbot"),oAe.forEach(t),Gze=r(QA," \u2014 "),Uk=n(QA,"A",{href:!0});var rAe=s(Uk);Oze=r(rAe,"BlenderbotConfig"),rAe.forEach(t),Vze=r(QA," (Blenderbot model)"),QA.forEach(t),Xze=i(y),Dm=n(y,"LI",{});var HA=s(Dm);Ore=n(HA,"STRONG",{});var tAe=s(Ore);zze=r(tAe,"blenderbot-small"),tAe.forEach(t),Wze=r(HA," \u2014 "),Jk=n(HA,"A",{href:!0});var aAe=s(Jk);Qze=r(aAe,"BlenderbotSmallConfig"),aAe.forEach(t),Hze=r(HA," (BlenderbotSmall model)"),HA.forEach(t),Uze=i(y),Gm=n(y,"LI",{});var UA=s(Gm);Vre=n(UA,"STRONG",{});var nAe=s(Vre);Jze=r(nAe,"bloom"),nAe.forEach(t),Yze=r(UA," \u2014 "),Yk=n(UA,"A",{href:!0});var sAe=s(Yk);Kze=r(sAe,"BloomConfig"),sAe.forEach(t),Zze=r(UA," (BLOOM model)"),UA.forEach(t),eWe=i(y),Om=n(y,"LI",{});var JA=s(Om);Xre=n(JA,"STRONG",{});var lAe=s(Xre);oWe=r(lAe,"camembert"),lAe.forEach(t),rWe=r(JA," \u2014 "),Kk=n(JA,"A",{href:!0});var iAe=s(Kk);tWe=r(iAe,"CamembertConfig"),iAe.forEach(t),aWe=r(JA," (CamemBERT model)"),JA.forEach(t),nWe=i(y),Vm=n(y,"LI",{});var YA=s(Vm);zre=n(YA,"STRONG",{});var dAe=s(zre);sWe=r(dAe,"canine"),dAe.forEach(t),lWe=r(YA," \u2014 "),Zk=n(YA,"A",{href:!0});var cAe=s(Zk);iWe=r(cAe,"CanineConfig"),cAe.forEach(t),dWe=r(YA," (CANINE model)"),YA.forEach(t),cWe=i(y),Xm=n(y,"LI",{});var KA=s(Xm);Wre=n(KA,"STRONG",{});var mAe=s(Wre);mWe=r(mAe,"clip"),mAe.forEach(t),fWe=r(KA," \u2014 "),eS=n(KA,"A",{href:!0});var fAe=s(eS);gWe=r(fAe,"CLIPConfig"),fAe.forEach(t),hWe=r(KA," (CLIP model)"),KA.forEach(t),uWe=i(y),zm=n(y,"LI",{});var ZA=s(zm);Qre=n(ZA,"STRONG",{});var gAe=s(Qre);pWe=r(gAe,"convbert"),gAe.forEach(t),_We=r(ZA," \u2014 "),oS=n(ZA,"A",{href:!0});var hAe=s(oS);bWe=r(hAe,"ConvBertConfig"),hAe.forEach(t),vWe=r(ZA," (ConvBERT model)"),ZA.forEach(t),FWe=i(y),Wm=n(y,"LI",{});var e6=s(Wm);Hre=n(e6,"STRONG",{});var uAe=s(Hre);TWe=r(uAe,"convnext"),uAe.forEach(t),MWe=r(e6," \u2014 "),rS=n(e6,"A",{href:!0});var pAe=s(rS);EWe=r(pAe,"ConvNextConfig"),pAe.forEach(t),CWe=r(e6," (ConvNeXT model)"),e6.forEach(t),wWe=i(y),Qm=n(y,"LI",{});var o6=s(Qm);Ure=n(o6,"STRONG",{});var _Ae=s(Ure);AWe=r(_Ae,"ctrl"),_Ae.forEach(t),yWe=r(o6," \u2014 "),tS=n(o6,"A",{href:!0});var bAe=s(tS);LWe=r(bAe,"CTRLConfig"),bAe.forEach(t),xWe=r(o6," (CTRL model)"),o6.forEach(t),$We=i(y),Hm=n(y,"LI",{});var r6=s(Hm);Jre=n(r6,"STRONG",{});var vAe=s(Jre);kWe=r(vAe,"cvt"),vAe.forEach(t),SWe=r(r6," \u2014 "),aS=n(r6,"A",{href:!0});var FAe=s(aS);RWe=r(FAe,"CvtConfig"),FAe.forEach(t),PWe=r(r6," (CvT model)"),r6.forEach(t),BWe=i(y),Um=n(y,"LI",{});var t6=s(Um);Yre=n(t6,"STRONG",{});var TAe=s(Yre);IWe=r(TAe,"data2vec-audio"),TAe.forEach(t),NWe=r(t6," \u2014 "),nS=n(t6,"A",{href:!0});var MAe=s(nS);qWe=r(MAe,"Data2VecAudioConfig"),MAe.forEach(t),jWe=r(t6," (Data2VecAudio model)"),t6.forEach(t),DWe=i(y),Jm=n(y,"LI",{});var a6=s(Jm);Kre=n(a6,"STRONG",{});var EAe=s(Kre);GWe=r(EAe,"data2vec-text"),EAe.forEach(t),OWe=r(a6," \u2014 "),sS=n(a6,"A",{href:!0});var CAe=s(sS);VWe=r(CAe,"Data2VecTextConfig"),CAe.forEach(t),XWe=r(a6," (Data2VecText model)"),a6.forEach(t),zWe=i(y),Ym=n(y,"LI",{});var n6=s(Ym);Zre=n(n6,"STRONG",{});var wAe=s(Zre);WWe=r(wAe,"data2vec-vision"),wAe.forEach(t),QWe=r(n6," \u2014 "),lS=n(n6,"A",{href:!0});var AAe=s(lS);HWe=r(AAe,"Data2VecVisionConfig"),AAe.forEach(t),UWe=r(n6," (Data2VecVision model)"),n6.forEach(t),JWe=i(y),Km=n(y,"LI",{});var s6=s(Km);ete=n(s6,"STRONG",{});var yAe=s(ete);YWe=r(yAe,"deberta"),yAe.forEach(t),KWe=r(s6," \u2014 "),iS=n(s6,"A",{href:!0});var LAe=s(iS);ZWe=r(LAe,"DebertaConfig"),LAe.forEach(t),eQe=r(s6," (DeBERTa model)"),s6.forEach(t),oQe=i(y),Zm=n(y,"LI",{});var l6=s(Zm);ote=n(l6,"STRONG",{});var xAe=s(ote);rQe=r(xAe,"deberta-v2"),xAe.forEach(t),tQe=r(l6," \u2014 "),dS=n(l6,"A",{href:!0});var $Ae=s(dS);aQe=r($Ae,"DebertaV2Config"),$Ae.forEach(t),nQe=r(l6," (DeBERTa-v2 model)"),l6.forEach(t),sQe=i(y),ef=n(y,"LI",{});var i6=s(ef);rte=n(i6,"STRONG",{});var kAe=s(rte);lQe=r(kAe,"decision_transformer"),kAe.forEach(t),iQe=r(i6," \u2014 "),cS=n(i6,"A",{href:!0});var SAe=s(cS);dQe=r(SAe,"DecisionTransformerConfig"),SAe.forEach(t),cQe=r(i6," (Decision Transformer model)"),i6.forEach(t),mQe=i(y),of=n(y,"LI",{});var d6=s(of);tte=n(d6,"STRONG",{});var qHr=s(tte);fQe=r(qHr,"deit"),qHr.forEach(t),gQe=r(d6," \u2014 "),mS=n(d6,"A",{href:!0});var jHr=s(mS);hQe=r(jHr,"DeiTConfig"),jHr.forEach(t),uQe=r(d6," (DeiT model)"),d6.forEach(t),pQe=i(y),rf=n(y,"LI",{});var RAe=s(rf);ate=n(RAe,"STRONG",{});var DHr=s(ate);_Qe=r(DHr,"detr"),DHr.forEach(t),bQe=r(RAe," \u2014 "),fS=n(RAe,"A",{href:!0});var GHr=s(fS);vQe=r(GHr,"DetrConfig"),GHr.forEach(t),FQe=r(RAe," (DETR model)"),RAe.forEach(t),TQe=i(y),tf=n(y,"LI",{});var PAe=s(tf);nte=n(PAe,"STRONG",{});var OHr=s(nte);MQe=r(OHr,"distilbert"),OHr.forEach(t),EQe=r(PAe," \u2014 "),gS=n(PAe,"A",{href:!0});var VHr=s(gS);CQe=r(VHr,"DistilBertConfig"),VHr.forEach(t),wQe=r(PAe," (DistilBERT model)"),PAe.forEach(t),AQe=i(y),af=n(y,"LI",{});var BAe=s(af);ste=n(BAe,"STRONG",{});var XHr=s(ste);yQe=r(XHr,"dpr"),XHr.forEach(t),LQe=r(BAe," \u2014 "),hS=n(BAe,"A",{href:!0});var zHr=s(hS);xQe=r(zHr,"DPRConfig"),zHr.forEach(t),$Qe=r(BAe," (DPR model)"),BAe.forEach(t),kQe=i(y),nf=n(y,"LI",{});var IAe=s(nf);lte=n(IAe,"STRONG",{});var WHr=s(lte);SQe=r(WHr,"dpt"),WHr.forEach(t),RQe=r(IAe," \u2014 "),uS=n(IAe,"A",{href:!0});var QHr=s(uS);PQe=r(QHr,"DPTConfig"),QHr.forEach(t),BQe=r(IAe," (DPT model)"),IAe.forEach(t),IQe=i(y),sf=n(y,"LI",{});var NAe=s(sf);ite=n(NAe,"STRONG",{});var HHr=s(ite);NQe=r(HHr,"electra"),HHr.forEach(t),qQe=r(NAe," \u2014 "),pS=n(NAe,"A",{href:!0});var UHr=s(pS);jQe=r(UHr,"ElectraConfig"),UHr.forEach(t),DQe=r(NAe," (ELECTRA model)"),NAe.forEach(t),GQe=i(y),lf=n(y,"LI",{});var qAe=s(lf);dte=n(qAe,"STRONG",{});var JHr=s(dte);OQe=r(JHr,"encoder-decoder"),JHr.forEach(t),VQe=r(qAe," \u2014 "),_S=n(qAe,"A",{href:!0});var YHr=s(_S);XQe=r(YHr,"EncoderDecoderConfig"),YHr.forEach(t),zQe=r(qAe," (Encoder decoder model)"),qAe.forEach(t),WQe=i(y),df=n(y,"LI",{});var jAe=s(df);cte=n(jAe,"STRONG",{});var KHr=s(cte);QQe=r(KHr,"flaubert"),KHr.forEach(t),HQe=r(jAe," \u2014 "),bS=n(jAe,"A",{href:!0});var ZHr=s(bS);UQe=r(ZHr,"FlaubertConfig"),ZHr.forEach(t),JQe=r(jAe," (FlauBERT model)"),jAe.forEach(t),YQe=i(y),cf=n(y,"LI",{});var DAe=s(cf);mte=n(DAe,"STRONG",{});var eUr=s(mte);KQe=r(eUr,"flava"),eUr.forEach(t),ZQe=r(DAe," \u2014 "),vS=n(DAe,"A",{href:!0});var oUr=s(vS);eHe=r(oUr,"FlavaConfig"),oUr.forEach(t),oHe=r(DAe," (FLAVA model)"),DAe.forEach(t),rHe=i(y),mf=n(y,"LI",{});var GAe=s(mf);fte=n(GAe,"STRONG",{});var rUr=s(fte);tHe=r(rUr,"fnet"),rUr.forEach(t),aHe=r(GAe," \u2014 "),FS=n(GAe,"A",{href:!0});var tUr=s(FS);nHe=r(tUr,"FNetConfig"),tUr.forEach(t),sHe=r(GAe," (FNet model)"),GAe.forEach(t),lHe=i(y),ff=n(y,"LI",{});var OAe=s(ff);gte=n(OAe,"STRONG",{});var aUr=s(gte);iHe=r(aUr,"fsmt"),aUr.forEach(t),dHe=r(OAe," \u2014 "),TS=n(OAe,"A",{href:!0});var nUr=s(TS);cHe=r(nUr,"FSMTConfig"),nUr.forEach(t),mHe=r(OAe," (FairSeq Machine-Translation model)"),OAe.forEach(t),fHe=i(y),gf=n(y,"LI",{});var VAe=s(gf);hte=n(VAe,"STRONG",{});var sUr=s(hte);gHe=r(sUr,"funnel"),sUr.forEach(t),hHe=r(VAe," \u2014 "),MS=n(VAe,"A",{href:!0});var lUr=s(MS);uHe=r(lUr,"FunnelConfig"),lUr.forEach(t),pHe=r(VAe," (Funnel Transformer model)"),VAe.forEach(t),_He=i(y),hf=n(y,"LI",{});var XAe=s(hf);ute=n(XAe,"STRONG",{});var iUr=s(ute);bHe=r(iUr,"glpn"),iUr.forEach(t),vHe=r(XAe," \u2014 "),ES=n(XAe,"A",{href:!0});var dUr=s(ES);FHe=r(dUr,"GLPNConfig"),dUr.forEach(t),THe=r(XAe," (GLPN model)"),XAe.forEach(t),MHe=i(y),uf=n(y,"LI",{});var zAe=s(uf);pte=n(zAe,"STRONG",{});var cUr=s(pte);EHe=r(cUr,"gpt2"),cUr.forEach(t),CHe=r(zAe," \u2014 "),CS=n(zAe,"A",{href:!0});var mUr=s(CS);wHe=r(mUr,"GPT2Config"),mUr.forEach(t),AHe=r(zAe," (OpenAI GPT-2 model)"),zAe.forEach(t),yHe=i(y),pf=n(y,"LI",{});var WAe=s(pf);_te=n(WAe,"STRONG",{});var fUr=s(_te);LHe=r(fUr,"gpt_neo"),fUr.forEach(t),xHe=r(WAe," \u2014 "),wS=n(WAe,"A",{href:!0});var gUr=s(wS);$He=r(gUr,"GPTNeoConfig"),gUr.forEach(t),kHe=r(WAe," (GPT Neo model)"),WAe.forEach(t),SHe=i(y),_f=n(y,"LI",{});var QAe=s(_f);bte=n(QAe,"STRONG",{});var hUr=s(bte);RHe=r(hUr,"gpt_neox"),hUr.forEach(t),PHe=r(QAe," \u2014 "),AS=n(QAe,"A",{href:!0});var uUr=s(AS);BHe=r(uUr,"GPTNeoXConfig"),uUr.forEach(t),IHe=r(QAe," (GPT NeoX model)"),QAe.forEach(t),NHe=i(y),bf=n(y,"LI",{});var HAe=s(bf);vte=n(HAe,"STRONG",{});var pUr=s(vte);qHe=r(pUr,"gptj"),pUr.forEach(t),jHe=r(HAe," \u2014 "),yS=n(HAe,"A",{href:!0});var _Ur=s(yS);DHe=r(_Ur,"GPTJConfig"),_Ur.forEach(t),GHe=r(HAe," (GPT-J model)"),HAe.forEach(t),OHe=i(y),vf=n(y,"LI",{});var UAe=s(vf);Fte=n(UAe,"STRONG",{});var bUr=s(Fte);VHe=r(bUr,"hubert"),bUr.forEach(t),XHe=r(UAe," \u2014 "),LS=n(UAe,"A",{href:!0});var vUr=s(LS);zHe=r(vUr,"HubertConfig"),vUr.forEach(t),WHe=r(UAe," (Hubert model)"),UAe.forEach(t),QHe=i(y),Ff=n(y,"LI",{});var JAe=s(Ff);Tte=n(JAe,"STRONG",{});var FUr=s(Tte);HHe=r(FUr,"ibert"),FUr.forEach(t),UHe=r(JAe," \u2014 "),xS=n(JAe,"A",{href:!0});var TUr=s(xS);JHe=r(TUr,"IBertConfig"),TUr.forEach(t),YHe=r(JAe," (I-BERT model)"),JAe.forEach(t),KHe=i(y),Tf=n(y,"LI",{});var YAe=s(Tf);Mte=n(YAe,"STRONG",{});var MUr=s(Mte);ZHe=r(MUr,"imagegpt"),MUr.forEach(t),eUe=r(YAe," \u2014 "),$S=n(YAe,"A",{href:!0});var EUr=s($S);oUe=r(EUr,"ImageGPTConfig"),EUr.forEach(t),rUe=r(YAe," (ImageGPT model)"),YAe.forEach(t),tUe=i(y),Mf=n(y,"LI",{});var KAe=s(Mf);Ete=n(KAe,"STRONG",{});var CUr=s(Ete);aUe=r(CUr,"layoutlm"),CUr.forEach(t),nUe=r(KAe," \u2014 "),kS=n(KAe,"A",{href:!0});var wUr=s(kS);sUe=r(wUr,"LayoutLMConfig"),wUr.forEach(t),lUe=r(KAe," (LayoutLM model)"),KAe.forEach(t),iUe=i(y),Ef=n(y,"LI",{});var ZAe=s(Ef);Cte=n(ZAe,"STRONG",{});var AUr=s(Cte);dUe=r(AUr,"layoutlmv2"),AUr.forEach(t),cUe=r(ZAe," \u2014 "),SS=n(ZAe,"A",{href:!0});var yUr=s(SS);mUe=r(yUr,"LayoutLMv2Config"),yUr.forEach(t),fUe=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),gUe=i(y),Cf=n(y,"LI",{});var e6e=s(Cf);wte=n(e6e,"STRONG",{});var LUr=s(wte);hUe=r(LUr,"layoutlmv3"),LUr.forEach(t),uUe=r(e6e," \u2014 "),RS=n(e6e,"A",{href:!0});var xUr=s(RS);pUe=r(xUr,"LayoutLMv3Config"),xUr.forEach(t),_Ue=r(e6e," (LayoutLMv3 model)"),e6e.forEach(t),bUe=i(y),wf=n(y,"LI",{});var o6e=s(wf);Ate=n(o6e,"STRONG",{});var $Ur=s(Ate);vUe=r($Ur,"led"),$Ur.forEach(t),FUe=r(o6e," \u2014 "),PS=n(o6e,"A",{href:!0});var kUr=s(PS);TUe=r(kUr,"LEDConfig"),kUr.forEach(t),MUe=r(o6e," (LED model)"),o6e.forEach(t),EUe=i(y),Af=n(y,"LI",{});var r6e=s(Af);yte=n(r6e,"STRONG",{});var SUr=s(yte);CUe=r(SUr,"levit"),SUr.forEach(t),wUe=r(r6e," \u2014 "),BS=n(r6e,"A",{href:!0});var RUr=s(BS);AUe=r(RUr,"LevitConfig"),RUr.forEach(t),yUe=r(r6e," (LeViT model)"),r6e.forEach(t),LUe=i(y),yf=n(y,"LI",{});var t6e=s(yf);Lte=n(t6e,"STRONG",{});var PUr=s(Lte);xUe=r(PUr,"longformer"),PUr.forEach(t),$Ue=r(t6e," \u2014 "),IS=n(t6e,"A",{href:!0});var BUr=s(IS);kUe=r(BUr,"LongformerConfig"),BUr.forEach(t),SUe=r(t6e," (Longformer model)"),t6e.forEach(t),RUe=i(y),Lf=n(y,"LI",{});var a6e=s(Lf);xte=n(a6e,"STRONG",{});var IUr=s(xte);PUe=r(IUr,"luke"),IUr.forEach(t),BUe=r(a6e," \u2014 "),NS=n(a6e,"A",{href:!0});var NUr=s(NS);IUe=r(NUr,"LukeConfig"),NUr.forEach(t),NUe=r(a6e," (LUKE model)"),a6e.forEach(t),qUe=i(y),xf=n(y,"LI",{});var n6e=s(xf);$te=n(n6e,"STRONG",{});var qUr=s($te);jUe=r(qUr,"lxmert"),qUr.forEach(t),DUe=r(n6e," \u2014 "),qS=n(n6e,"A",{href:!0});var jUr=s(qS);GUe=r(jUr,"LxmertConfig"),jUr.forEach(t),OUe=r(n6e," (LXMERT model)"),n6e.forEach(t),VUe=i(y),$f=n(y,"LI",{});var s6e=s($f);kte=n(s6e,"STRONG",{});var DUr=s(kte);XUe=r(DUr,"m2m_100"),DUr.forEach(t),zUe=r(s6e," \u2014 "),jS=n(s6e,"A",{href:!0});var GUr=s(jS);WUe=r(GUr,"M2M100Config"),GUr.forEach(t),QUe=r(s6e," (M2M100 model)"),s6e.forEach(t),HUe=i(y),kf=n(y,"LI",{});var l6e=s(kf);Ste=n(l6e,"STRONG",{});var OUr=s(Ste);UUe=r(OUr,"marian"),OUr.forEach(t),JUe=r(l6e," \u2014 "),DS=n(l6e,"A",{href:!0});var VUr=s(DS);YUe=r(VUr,"MarianConfig"),VUr.forEach(t),KUe=r(l6e," (Marian model)"),l6e.forEach(t),ZUe=i(y),Sf=n(y,"LI",{});var i6e=s(Sf);Rte=n(i6e,"STRONG",{});var XUr=s(Rte);eJe=r(XUr,"maskformer"),XUr.forEach(t),oJe=r(i6e," \u2014 "),GS=n(i6e,"A",{href:!0});var zUr=s(GS);rJe=r(zUr,"MaskFormerConfig"),zUr.forEach(t),tJe=r(i6e," (MaskFormer model)"),i6e.forEach(t),aJe=i(y),Rf=n(y,"LI",{});var d6e=s(Rf);Pte=n(d6e,"STRONG",{});var WUr=s(Pte);nJe=r(WUr,"mbart"),WUr.forEach(t),sJe=r(d6e," \u2014 "),OS=n(d6e,"A",{href:!0});var QUr=s(OS);lJe=r(QUr,"MBartConfig"),QUr.forEach(t),iJe=r(d6e," (mBART model)"),d6e.forEach(t),dJe=i(y),Pf=n(y,"LI",{});var c6e=s(Pf);Bte=n(c6e,"STRONG",{});var HUr=s(Bte);cJe=r(HUr,"mctct"),HUr.forEach(t),mJe=r(c6e," \u2014 "),VS=n(c6e,"A",{href:!0});var UUr=s(VS);fJe=r(UUr,"MCTCTConfig"),UUr.forEach(t),gJe=r(c6e," (M-CTC-T model)"),c6e.forEach(t),hJe=i(y),Bf=n(y,"LI",{});var m6e=s(Bf);Ite=n(m6e,"STRONG",{});var JUr=s(Ite);uJe=r(JUr,"megatron-bert"),JUr.forEach(t),pJe=r(m6e," \u2014 "),XS=n(m6e,"A",{href:!0});var YUr=s(XS);_Je=r(YUr,"MegatronBertConfig"),YUr.forEach(t),bJe=r(m6e," (Megatron-BERT model)"),m6e.forEach(t),vJe=i(y),If=n(y,"LI",{});var f6e=s(If);Nte=n(f6e,"STRONG",{});var KUr=s(Nte);FJe=r(KUr,"mobilebert"),KUr.forEach(t),TJe=r(f6e," \u2014 "),zS=n(f6e,"A",{href:!0});var ZUr=s(zS);MJe=r(ZUr,"MobileBertConfig"),ZUr.forEach(t),EJe=r(f6e," (MobileBERT model)"),f6e.forEach(t),CJe=i(y),Nf=n(y,"LI",{});var g6e=s(Nf);qte=n(g6e,"STRONG",{});var eJr=s(qte);wJe=r(eJr,"mpnet"),eJr.forEach(t),AJe=r(g6e," \u2014 "),WS=n(g6e,"A",{href:!0});var oJr=s(WS);yJe=r(oJr,"MPNetConfig"),oJr.forEach(t),LJe=r(g6e," (MPNet model)"),g6e.forEach(t),xJe=i(y),qf=n(y,"LI",{});var h6e=s(qf);jte=n(h6e,"STRONG",{});var rJr=s(jte);$Je=r(rJr,"mt5"),rJr.forEach(t),kJe=r(h6e," \u2014 "),QS=n(h6e,"A",{href:!0});var tJr=s(QS);SJe=r(tJr,"MT5Config"),tJr.forEach(t),RJe=r(h6e," (MT5 model)"),h6e.forEach(t),PJe=i(y),jf=n(y,"LI",{});var u6e=s(jf);Dte=n(u6e,"STRONG",{});var aJr=s(Dte);BJe=r(aJr,"nystromformer"),aJr.forEach(t),IJe=r(u6e," \u2014 "),HS=n(u6e,"A",{href:!0});var nJr=s(HS);NJe=r(nJr,"NystromformerConfig"),nJr.forEach(t),qJe=r(u6e," (Nystr\xF6mformer model)"),u6e.forEach(t),jJe=i(y),Df=n(y,"LI",{});var p6e=s(Df);Gte=n(p6e,"STRONG",{});var sJr=s(Gte);DJe=r(sJr,"openai-gpt"),sJr.forEach(t),GJe=r(p6e," \u2014 "),US=n(p6e,"A",{href:!0});var lJr=s(US);OJe=r(lJr,"OpenAIGPTConfig"),lJr.forEach(t),VJe=r(p6e," (OpenAI GPT model)"),p6e.forEach(t),XJe=i(y),Gf=n(y,"LI",{});var _6e=s(Gf);Ote=n(_6e,"STRONG",{});var iJr=s(Ote);zJe=r(iJr,"opt"),iJr.forEach(t),WJe=r(_6e," \u2014 "),JS=n(_6e,"A",{href:!0});var dJr=s(JS);QJe=r(dJr,"OPTConfig"),dJr.forEach(t),HJe=r(_6e," (OPT model)"),_6e.forEach(t),UJe=i(y),Of=n(y,"LI",{});var b6e=s(Of);Vte=n(b6e,"STRONG",{});var cJr=s(Vte);JJe=r(cJr,"pegasus"),cJr.forEach(t),YJe=r(b6e," \u2014 "),YS=n(b6e,"A",{href:!0});var mJr=s(YS);KJe=r(mJr,"PegasusConfig"),mJr.forEach(t),ZJe=r(b6e," (Pegasus model)"),b6e.forEach(t),eYe=i(y),Vf=n(y,"LI",{});var v6e=s(Vf);Xte=n(v6e,"STRONG",{});var fJr=s(Xte);oYe=r(fJr,"perceiver"),fJr.forEach(t),rYe=r(v6e," \u2014 "),KS=n(v6e,"A",{href:!0});var gJr=s(KS);tYe=r(gJr,"PerceiverConfig"),gJr.forEach(t),aYe=r(v6e," (Perceiver model)"),v6e.forEach(t),nYe=i(y),Xf=n(y,"LI",{});var F6e=s(Xf);zte=n(F6e,"STRONG",{});var hJr=s(zte);sYe=r(hJr,"plbart"),hJr.forEach(t),lYe=r(F6e," \u2014 "),ZS=n(F6e,"A",{href:!0});var uJr=s(ZS);iYe=r(uJr,"PLBartConfig"),uJr.forEach(t),dYe=r(F6e," (PLBart model)"),F6e.forEach(t),cYe=i(y),zf=n(y,"LI",{});var T6e=s(zf);Wte=n(T6e,"STRONG",{});var pJr=s(Wte);mYe=r(pJr,"poolformer"),pJr.forEach(t),fYe=r(T6e," \u2014 "),eR=n(T6e,"A",{href:!0});var _Jr=s(eR);gYe=r(_Jr,"PoolFormerConfig"),_Jr.forEach(t),hYe=r(T6e," (PoolFormer model)"),T6e.forEach(t),uYe=i(y),Wf=n(y,"LI",{});var M6e=s(Wf);Qte=n(M6e,"STRONG",{});var bJr=s(Qte);pYe=r(bJr,"prophetnet"),bJr.forEach(t),_Ye=r(M6e," \u2014 "),oR=n(M6e,"A",{href:!0});var vJr=s(oR);bYe=r(vJr,"ProphetNetConfig"),vJr.forEach(t),vYe=r(M6e," (ProphetNet model)"),M6e.forEach(t),FYe=i(y),Qf=n(y,"LI",{});var E6e=s(Qf);Hte=n(E6e,"STRONG",{});var FJr=s(Hte);TYe=r(FJr,"qdqbert"),FJr.forEach(t),MYe=r(E6e," \u2014 "),rR=n(E6e,"A",{href:!0});var TJr=s(rR);EYe=r(TJr,"QDQBertConfig"),TJr.forEach(t),CYe=r(E6e," (QDQBert model)"),E6e.forEach(t),wYe=i(y),Hf=n(y,"LI",{});var C6e=s(Hf);Ute=n(C6e,"STRONG",{});var MJr=s(Ute);AYe=r(MJr,"rag"),MJr.forEach(t),yYe=r(C6e," \u2014 "),tR=n(C6e,"A",{href:!0});var EJr=s(tR);LYe=r(EJr,"RagConfig"),EJr.forEach(t),xYe=r(C6e," (RAG model)"),C6e.forEach(t),$Ye=i(y),Uf=n(y,"LI",{});var w6e=s(Uf);Jte=n(w6e,"STRONG",{});var CJr=s(Jte);kYe=r(CJr,"realm"),CJr.forEach(t),SYe=r(w6e," \u2014 "),aR=n(w6e,"A",{href:!0});var wJr=s(aR);RYe=r(wJr,"RealmConfig"),wJr.forEach(t),PYe=r(w6e," (REALM model)"),w6e.forEach(t),BYe=i(y),Jf=n(y,"LI",{});var A6e=s(Jf);Yte=n(A6e,"STRONG",{});var AJr=s(Yte);IYe=r(AJr,"reformer"),AJr.forEach(t),NYe=r(A6e," \u2014 "),nR=n(A6e,"A",{href:!0});var yJr=s(nR);qYe=r(yJr,"ReformerConfig"),yJr.forEach(t),jYe=r(A6e," (Reformer model)"),A6e.forEach(t),DYe=i(y),Yf=n(y,"LI",{});var y6e=s(Yf);Kte=n(y6e,"STRONG",{});var LJr=s(Kte);GYe=r(LJr,"regnet"),LJr.forEach(t),OYe=r(y6e," \u2014 "),sR=n(y6e,"A",{href:!0});var xJr=s(sR);VYe=r(xJr,"RegNetConfig"),xJr.forEach(t),XYe=r(y6e," (RegNet model)"),y6e.forEach(t),zYe=i(y),Kf=n(y,"LI",{});var L6e=s(Kf);Zte=n(L6e,"STRONG",{});var $Jr=s(Zte);WYe=r($Jr,"rembert"),$Jr.forEach(t),QYe=r(L6e," \u2014 "),lR=n(L6e,"A",{href:!0});var kJr=s(lR);HYe=r(kJr,"RemBertConfig"),kJr.forEach(t),UYe=r(L6e," (RemBERT model)"),L6e.forEach(t),JYe=i(y),Zf=n(y,"LI",{});var x6e=s(Zf);eae=n(x6e,"STRONG",{});var SJr=s(eae);YYe=r(SJr,"resnet"),SJr.forEach(t),KYe=r(x6e," \u2014 "),iR=n(x6e,"A",{href:!0});var RJr=s(iR);ZYe=r(RJr,"ResNetConfig"),RJr.forEach(t),eKe=r(x6e," (ResNet model)"),x6e.forEach(t),oKe=i(y),eg=n(y,"LI",{});var $6e=s(eg);oae=n($6e,"STRONG",{});var PJr=s(oae);rKe=r(PJr,"retribert"),PJr.forEach(t),tKe=r($6e," \u2014 "),dR=n($6e,"A",{href:!0});var BJr=s(dR);aKe=r(BJr,"RetriBertConfig"),BJr.forEach(t),nKe=r($6e," (RetriBERT model)"),$6e.forEach(t),sKe=i(y),og=n(y,"LI",{});var k6e=s(og);rae=n(k6e,"STRONG",{});var IJr=s(rae);lKe=r(IJr,"roberta"),IJr.forEach(t),iKe=r(k6e," \u2014 "),cR=n(k6e,"A",{href:!0});var NJr=s(cR);dKe=r(NJr,"RobertaConfig"),NJr.forEach(t),cKe=r(k6e," (RoBERTa model)"),k6e.forEach(t),mKe=i(y),rg=n(y,"LI",{});var S6e=s(rg);tae=n(S6e,"STRONG",{});var qJr=s(tae);fKe=r(qJr,"roformer"),qJr.forEach(t),gKe=r(S6e," \u2014 "),mR=n(S6e,"A",{href:!0});var jJr=s(mR);hKe=r(jJr,"RoFormerConfig"),jJr.forEach(t),uKe=r(S6e," (RoFormer model)"),S6e.forEach(t),pKe=i(y),tg=n(y,"LI",{});var R6e=s(tg);aae=n(R6e,"STRONG",{});var DJr=s(aae);_Ke=r(DJr,"segformer"),DJr.forEach(t),bKe=r(R6e," \u2014 "),fR=n(R6e,"A",{href:!0});var GJr=s(fR);vKe=r(GJr,"SegformerConfig"),GJr.forEach(t),FKe=r(R6e," (SegFormer model)"),R6e.forEach(t),TKe=i(y),ag=n(y,"LI",{});var P6e=s(ag);nae=n(P6e,"STRONG",{});var OJr=s(nae);MKe=r(OJr,"sew"),OJr.forEach(t),EKe=r(P6e," \u2014 "),gR=n(P6e,"A",{href:!0});var VJr=s(gR);CKe=r(VJr,"SEWConfig"),VJr.forEach(t),wKe=r(P6e," (SEW model)"),P6e.forEach(t),AKe=i(y),ng=n(y,"LI",{});var B6e=s(ng);sae=n(B6e,"STRONG",{});var XJr=s(sae);yKe=r(XJr,"sew-d"),XJr.forEach(t),LKe=r(B6e," \u2014 "),hR=n(B6e,"A",{href:!0});var zJr=s(hR);xKe=r(zJr,"SEWDConfig"),zJr.forEach(t),$Ke=r(B6e," (SEW-D model)"),B6e.forEach(t),kKe=i(y),sg=n(y,"LI",{});var I6e=s(sg);lae=n(I6e,"STRONG",{});var WJr=s(lae);SKe=r(WJr,"speech-encoder-decoder"),WJr.forEach(t),RKe=r(I6e," \u2014 "),uR=n(I6e,"A",{href:!0});var QJr=s(uR);PKe=r(QJr,"SpeechEncoderDecoderConfig"),QJr.forEach(t),BKe=r(I6e," (Speech Encoder decoder model)"),I6e.forEach(t),IKe=i(y),lg=n(y,"LI",{});var N6e=s(lg);iae=n(N6e,"STRONG",{});var HJr=s(iae);NKe=r(HJr,"speech_to_text"),HJr.forEach(t),qKe=r(N6e," \u2014 "),pR=n(N6e,"A",{href:!0});var UJr=s(pR);jKe=r(UJr,"Speech2TextConfig"),UJr.forEach(t),DKe=r(N6e," (Speech2Text model)"),N6e.forEach(t),GKe=i(y),ig=n(y,"LI",{});var q6e=s(ig);dae=n(q6e,"STRONG",{});var JJr=s(dae);OKe=r(JJr,"speech_to_text_2"),JJr.forEach(t),VKe=r(q6e," \u2014 "),_R=n(q6e,"A",{href:!0});var YJr=s(_R);XKe=r(YJr,"Speech2Text2Config"),YJr.forEach(t),zKe=r(q6e," (Speech2Text2 model)"),q6e.forEach(t),WKe=i(y),dg=n(y,"LI",{});var j6e=s(dg);cae=n(j6e,"STRONG",{});var KJr=s(cae);QKe=r(KJr,"splinter"),KJr.forEach(t),HKe=r(j6e," \u2014 "),bR=n(j6e,"A",{href:!0});var ZJr=s(bR);UKe=r(ZJr,"SplinterConfig"),ZJr.forEach(t),JKe=r(j6e," (Splinter model)"),j6e.forEach(t),YKe=i(y),cg=n(y,"LI",{});var D6e=s(cg);mae=n(D6e,"STRONG",{});var eYr=s(mae);KKe=r(eYr,"squeezebert"),eYr.forEach(t),ZKe=r(D6e," \u2014 "),vR=n(D6e,"A",{href:!0});var oYr=s(vR);eZe=r(oYr,"SqueezeBertConfig"),oYr.forEach(t),oZe=r(D6e," (SqueezeBERT model)"),D6e.forEach(t),rZe=i(y),mg=n(y,"LI",{});var G6e=s(mg);fae=n(G6e,"STRONG",{});var rYr=s(fae);tZe=r(rYr,"swin"),rYr.forEach(t),aZe=r(G6e," \u2014 "),FR=n(G6e,"A",{href:!0});var tYr=s(FR);nZe=r(tYr,"SwinConfig"),tYr.forEach(t),sZe=r(G6e," (Swin Transformer model)"),G6e.forEach(t),lZe=i(y),fg=n(y,"LI",{});var O6e=s(fg);gae=n(O6e,"STRONG",{});var aYr=s(gae);iZe=r(aYr,"t5"),aYr.forEach(t),dZe=r(O6e," \u2014 "),TR=n(O6e,"A",{href:!0});var nYr=s(TR);cZe=r(nYr,"T5Config"),nYr.forEach(t),mZe=r(O6e," (T5 model)"),O6e.forEach(t),fZe=i(y),gg=n(y,"LI",{});var V6e=s(gg);hae=n(V6e,"STRONG",{});var sYr=s(hae);gZe=r(sYr,"tapas"),sYr.forEach(t),hZe=r(V6e," \u2014 "),MR=n(V6e,"A",{href:!0});var lYr=s(MR);uZe=r(lYr,"TapasConfig"),lYr.forEach(t),pZe=r(V6e," (TAPAS model)"),V6e.forEach(t),_Ze=i(y),hg=n(y,"LI",{});var X6e=s(hg);uae=n(X6e,"STRONG",{});var iYr=s(uae);bZe=r(iYr,"trajectory_transformer"),iYr.forEach(t),vZe=r(X6e," \u2014 "),ER=n(X6e,"A",{href:!0});var dYr=s(ER);FZe=r(dYr,"TrajectoryTransformerConfig"),dYr.forEach(t),TZe=r(X6e," (Trajectory Transformer model)"),X6e.forEach(t),MZe=i(y),ug=n(y,"LI",{});var z6e=s(ug);pae=n(z6e,"STRONG",{});var cYr=s(pae);EZe=r(cYr,"transfo-xl"),cYr.forEach(t),CZe=r(z6e," \u2014 "),CR=n(z6e,"A",{href:!0});var mYr=s(CR);wZe=r(mYr,"TransfoXLConfig"),mYr.forEach(t),AZe=r(z6e," (Transformer-XL model)"),z6e.forEach(t),yZe=i(y),pg=n(y,"LI",{});var W6e=s(pg);_ae=n(W6e,"STRONG",{});var fYr=s(_ae);LZe=r(fYr,"trocr"),fYr.forEach(t),xZe=r(W6e," \u2014 "),wR=n(W6e,"A",{href:!0});var gYr=s(wR);$Ze=r(gYr,"TrOCRConfig"),gYr.forEach(t),kZe=r(W6e," (TrOCR model)"),W6e.forEach(t),SZe=i(y),_g=n(y,"LI",{});var Q6e=s(_g);bae=n(Q6e,"STRONG",{});var hYr=s(bae);RZe=r(hYr,"unispeech"),hYr.forEach(t),PZe=r(Q6e," \u2014 "),AR=n(Q6e,"A",{href:!0});var uYr=s(AR);BZe=r(uYr,"UniSpeechConfig"),uYr.forEach(t),IZe=r(Q6e," (UniSpeech model)"),Q6e.forEach(t),NZe=i(y),bg=n(y,"LI",{});var H6e=s(bg);vae=n(H6e,"STRONG",{});var pYr=s(vae);qZe=r(pYr,"unispeech-sat"),pYr.forEach(t),jZe=r(H6e," \u2014 "),yR=n(H6e,"A",{href:!0});var _Yr=s(yR);DZe=r(_Yr,"UniSpeechSatConfig"),_Yr.forEach(t),GZe=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),OZe=i(y),vg=n(y,"LI",{});var U6e=s(vg);Fae=n(U6e,"STRONG",{});var bYr=s(Fae);VZe=r(bYr,"van"),bYr.forEach(t),XZe=r(U6e," \u2014 "),LR=n(U6e,"A",{href:!0});var vYr=s(LR);zZe=r(vYr,"VanConfig"),vYr.forEach(t),WZe=r(U6e," (VAN model)"),U6e.forEach(t),QZe=i(y),Fg=n(y,"LI",{});var J6e=s(Fg);Tae=n(J6e,"STRONG",{});var FYr=s(Tae);HZe=r(FYr,"vilt"),FYr.forEach(t),UZe=r(J6e," \u2014 "),xR=n(J6e,"A",{href:!0});var TYr=s(xR);JZe=r(TYr,"ViltConfig"),TYr.forEach(t),YZe=r(J6e," (ViLT model)"),J6e.forEach(t),KZe=i(y),Tg=n(y,"LI",{});var Y6e=s(Tg);Mae=n(Y6e,"STRONG",{});var MYr=s(Mae);ZZe=r(MYr,"vision-encoder-decoder"),MYr.forEach(t),eeo=r(Y6e," \u2014 "),$R=n(Y6e,"A",{href:!0});var EYr=s($R);oeo=r(EYr,"VisionEncoderDecoderConfig"),EYr.forEach(t),reo=r(Y6e," (Vision Encoder decoder model)"),Y6e.forEach(t),teo=i(y),Mg=n(y,"LI",{});var K6e=s(Mg);Eae=n(K6e,"STRONG",{});var CYr=s(Eae);aeo=r(CYr,"vision-text-dual-encoder"),CYr.forEach(t),neo=r(K6e," \u2014 "),kR=n(K6e,"A",{href:!0});var wYr=s(kR);seo=r(wYr,"VisionTextDualEncoderConfig"),wYr.forEach(t),leo=r(K6e," (VisionTextDualEncoder model)"),K6e.forEach(t),ieo=i(y),Eg=n(y,"LI",{});var Z6e=s(Eg);Cae=n(Z6e,"STRONG",{});var AYr=s(Cae);deo=r(AYr,"visual_bert"),AYr.forEach(t),ceo=r(Z6e," \u2014 "),SR=n(Z6e,"A",{href:!0});var yYr=s(SR);meo=r(yYr,"VisualBertConfig"),yYr.forEach(t),feo=r(Z6e," (VisualBERT model)"),Z6e.forEach(t),geo=i(y),Cg=n(y,"LI",{});var eye=s(Cg);wae=n(eye,"STRONG",{});var LYr=s(wae);heo=r(LYr,"vit"),LYr.forEach(t),ueo=r(eye," \u2014 "),RR=n(eye,"A",{href:!0});var xYr=s(RR);peo=r(xYr,"ViTConfig"),xYr.forEach(t),_eo=r(eye," (ViT model)"),eye.forEach(t),beo=i(y),wg=n(y,"LI",{});var oye=s(wg);Aae=n(oye,"STRONG",{});var $Yr=s(Aae);veo=r($Yr,"vit_mae"),$Yr.forEach(t),Feo=r(oye," \u2014 "),PR=n(oye,"A",{href:!0});var kYr=s(PR);Teo=r(kYr,"ViTMAEConfig"),kYr.forEach(t),Meo=r(oye," (ViTMAE model)"),oye.forEach(t),Eeo=i(y),Ag=n(y,"LI",{});var rye=s(Ag);yae=n(rye,"STRONG",{});var SYr=s(yae);Ceo=r(SYr,"wav2vec2"),SYr.forEach(t),weo=r(rye," \u2014 "),BR=n(rye,"A",{href:!0});var RYr=s(BR);Aeo=r(RYr,"Wav2Vec2Config"),RYr.forEach(t),yeo=r(rye," (Wav2Vec2 model)"),rye.forEach(t),Leo=i(y),yg=n(y,"LI",{});var tye=s(yg);Lae=n(tye,"STRONG",{});var PYr=s(Lae);xeo=r(PYr,"wav2vec2-conformer"),PYr.forEach(t),$eo=r(tye," \u2014 "),IR=n(tye,"A",{href:!0});var BYr=s(IR);keo=r(BYr,"Wav2Vec2ConformerConfig"),BYr.forEach(t),Seo=r(tye," (Wav2Vec2-Conformer model)"),tye.forEach(t),Reo=i(y),Lg=n(y,"LI",{});var aye=s(Lg);xae=n(aye,"STRONG",{});var IYr=s(xae);Peo=r(IYr,"wavlm"),IYr.forEach(t),Beo=r(aye," \u2014 "),NR=n(aye,"A",{href:!0});var NYr=s(NR);Ieo=r(NYr,"WavLMConfig"),NYr.forEach(t),Neo=r(aye," (WavLM model)"),aye.forEach(t),qeo=i(y),xg=n(y,"LI",{});var nye=s(xg);$ae=n(nye,"STRONG",{});var qYr=s($ae);jeo=r(qYr,"xglm"),qYr.forEach(t),Deo=r(nye," \u2014 "),qR=n(nye,"A",{href:!0});var jYr=s(qR);Geo=r(jYr,"XGLMConfig"),jYr.forEach(t),Oeo=r(nye," (XGLM model)"),nye.forEach(t),Veo=i(y),$g=n(y,"LI",{});var sye=s($g);kae=n(sye,"STRONG",{});var DYr=s(kae);Xeo=r(DYr,"xlm"),DYr.forEach(t),zeo=r(sye," \u2014 "),jR=n(sye,"A",{href:!0});var GYr=s(jR);Weo=r(GYr,"XLMConfig"),GYr.forEach(t),Qeo=r(sye," (XLM model)"),sye.forEach(t),Heo=i(y),kg=n(y,"LI",{});var lye=s(kg);Sae=n(lye,"STRONG",{});var OYr=s(Sae);Ueo=r(OYr,"xlm-prophetnet"),OYr.forEach(t),Jeo=r(lye," \u2014 "),DR=n(lye,"A",{href:!0});var VYr=s(DR);Yeo=r(VYr,"XLMProphetNetConfig"),VYr.forEach(t),Keo=r(lye," (XLM-ProphetNet model)"),lye.forEach(t),Zeo=i(y),Sg=n(y,"LI",{});var iye=s(Sg);Rae=n(iye,"STRONG",{});var XYr=s(Rae);eoo=r(XYr,"xlm-roberta"),XYr.forEach(t),ooo=r(iye," \u2014 "),GR=n(iye,"A",{href:!0});var zYr=s(GR);roo=r(zYr,"XLMRobertaConfig"),zYr.forEach(t),too=r(iye," (XLM-RoBERTa model)"),iye.forEach(t),aoo=i(y),Rg=n(y,"LI",{});var dye=s(Rg);Pae=n(dye,"STRONG",{});var WYr=s(Pae);noo=r(WYr,"xlm-roberta-xl"),WYr.forEach(t),soo=r(dye," \u2014 "),OR=n(dye,"A",{href:!0});var QYr=s(OR);loo=r(QYr,"XLMRobertaXLConfig"),QYr.forEach(t),ioo=r(dye," (XLM-RoBERTa-XL model)"),dye.forEach(t),doo=i(y),Pg=n(y,"LI",{});var cye=s(Pg);Bae=n(cye,"STRONG",{});var HYr=s(Bae);coo=r(HYr,"xlnet"),HYr.forEach(t),moo=r(cye," \u2014 "),VR=n(cye,"A",{href:!0});var UYr=s(VR);foo=r(UYr,"XLNetConfig"),UYr.forEach(t),goo=r(cye," (XLNet model)"),cye.forEach(t),hoo=i(y),Bg=n(y,"LI",{});var mye=s(Bg);Iae=n(mye,"STRONG",{});var JYr=s(Iae);uoo=r(JYr,"yolos"),JYr.forEach(t),poo=r(mye," \u2014 "),XR=n(mye,"A",{href:!0});var YYr=s(XR);_oo=r(YYr,"YolosConfig"),YYr.forEach(t),boo=r(mye," (YOLOS model)"),mye.forEach(t),voo=i(y),Ig=n(y,"LI",{});var fye=s(Ig);Nae=n(fye,"STRONG",{});var KYr=s(Nae);Foo=r(KYr,"yoso"),KYr.forEach(t),Too=r(fye," \u2014 "),zR=n(fye,"A",{href:!0});var ZYr=s(zR);Moo=r(ZYr,"YosoConfig"),ZYr.forEach(t),Eoo=r(fye," (YOSO model)"),fye.forEach(t),y.forEach(t),Coo=i(tt),T(Ng.$$.fragment,tt),tt.forEach(t),woo=i(rt),qg=n(rt,"DIV",{class:!0});var TOe=s(qg);T(_L.$$.fragment,TOe),Aoo=i(TOe),qae=n(TOe,"P",{});var eKr=s(qae);yoo=r(eKr,"Register a new configuration for this class."),eKr.forEach(t),TOe.forEach(t),rt.forEach(t),MDe=i(m),xi=n(m,"H2",{class:!0});var MOe=s(xi);jg=n(MOe,"A",{id:!0,class:!0,href:!0});var oKr=s(jg);jae=n(oKr,"SPAN",{});var rKr=s(jae);T(bL.$$.fragment,rKr),rKr.forEach(t),oKr.forEach(t),Loo=i(MOe),Dae=n(MOe,"SPAN",{});var tKr=s(Dae);xoo=r(tKr,"AutoTokenizer"),tKr.forEach(t),MOe.forEach(t),EDe=i(m),Ao=n(m,"DIV",{class:!0});var Xs=s(Ao);T(vL.$$.fragment,Xs),$oo=i(Xs),FL=n(Xs,"P",{});var EOe=s(FL);koo=r(EOe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WR=n(EOe,"A",{href:!0});var aKr=s(WR);Soo=r(aKr,"AutoTokenizer.from_pretrained()"),aKr.forEach(t),Roo=r(EOe," class method."),EOe.forEach(t),Poo=i(Xs),TL=n(Xs,"P",{});var COe=s(TL);Boo=r(COe,"This class cannot be instantiated directly using "),Gae=n(COe,"CODE",{});var nKr=s(Gae);Ioo=r(nKr,"__init__()"),nKr.forEach(t),Noo=r(COe," (throws an error)."),COe.forEach(t),qoo=i(Xs),Ar=n(Xs,"DIV",{class:!0});var zs=s(Ar);T(ML.$$.fragment,zs),joo=i(zs),Oae=n(zs,"P",{});var sKr=s(Oae);Doo=r(sKr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sKr.forEach(t),Goo=i(zs),$a=n(zs,"P",{});var c6=s($a);Ooo=r(c6,"The tokenizer class to instantiate is selected based on the "),Vae=n(c6,"CODE",{});var lKr=s(Vae);Voo=r(lKr,"model_type"),lKr.forEach(t),Xoo=r(c6,` property of the config object (either
passed as an argument or loaded from `),Xae=n(c6,"CODE",{});var iKr=s(Xae);zoo=r(iKr,"pretrained_model_name_or_path"),iKr.forEach(t),Woo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zae=n(c6,"CODE",{});var dKr=s(zae);Qoo=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),Hoo=r(c6,":"),c6.forEach(t),Uoo=i(zs),k=n(zs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var L$=s(Nn);Wae=n(L$,"STRONG",{});var cKr=s(Wae);Joo=r(cKr,"albert"),cKr.forEach(t),Yoo=r(L$," \u2014 "),QR=n(L$,"A",{href:!0});var mKr=s(QR);Koo=r(mKr,"AlbertTokenizer"),mKr.forEach(t),Zoo=r(L$," or "),HR=n(L$,"A",{href:!0});var fKr=s(HR);ero=r(fKr,"AlbertTokenizerFast"),fKr.forEach(t),oro=r(L$," (ALBERT model)"),L$.forEach(t),rro=i(S),qn=n(S,"LI",{});var x$=s(qn);Qae=n(x$,"STRONG",{});var gKr=s(Qae);tro=r(gKr,"bart"),gKr.forEach(t),aro=r(x$," \u2014 "),UR=n(x$,"A",{href:!0});var hKr=s(UR);nro=r(hKr,"BartTokenizer"),hKr.forEach(t),sro=r(x$," or "),JR=n(x$,"A",{href:!0});var uKr=s(JR);lro=r(uKr,"BartTokenizerFast"),uKr.forEach(t),iro=r(x$," (BART model)"),x$.forEach(t),dro=i(S),jn=n(S,"LI",{});var $$=s(jn);Hae=n($$,"STRONG",{});var pKr=s(Hae);cro=r(pKr,"barthez"),pKr.forEach(t),mro=r($$," \u2014 "),YR=n($$,"A",{href:!0});var _Kr=s(YR);fro=r(_Kr,"BarthezTokenizer"),_Kr.forEach(t),gro=r($$," or "),KR=n($$,"A",{href:!0});var bKr=s(KR);hro=r(bKr,"BarthezTokenizerFast"),bKr.forEach(t),uro=r($$," (BARThez model)"),$$.forEach(t),pro=i(S),Dg=n(S,"LI",{});var gye=s(Dg);Uae=n(gye,"STRONG",{});var vKr=s(Uae);_ro=r(vKr,"bartpho"),vKr.forEach(t),bro=r(gye," \u2014 "),ZR=n(gye,"A",{href:!0});var FKr=s(ZR);vro=r(FKr,"BartphoTokenizer"),FKr.forEach(t),Fro=r(gye," (BARTpho model)"),gye.forEach(t),Tro=i(S),Dn=n(S,"LI",{});var k$=s(Dn);Jae=n(k$,"STRONG",{});var TKr=s(Jae);Mro=r(TKr,"bert"),TKr.forEach(t),Ero=r(k$," \u2014 "),eP=n(k$,"A",{href:!0});var MKr=s(eP);Cro=r(MKr,"BertTokenizer"),MKr.forEach(t),wro=r(k$," or "),oP=n(k$,"A",{href:!0});var EKr=s(oP);Aro=r(EKr,"BertTokenizerFast"),EKr.forEach(t),yro=r(k$," (BERT model)"),k$.forEach(t),Lro=i(S),Gg=n(S,"LI",{});var hye=s(Gg);Yae=n(hye,"STRONG",{});var CKr=s(Yae);xro=r(CKr,"bert-generation"),CKr.forEach(t),$ro=r(hye," \u2014 "),rP=n(hye,"A",{href:!0});var wKr=s(rP);kro=r(wKr,"BertGenerationTokenizer"),wKr.forEach(t),Sro=r(hye," (Bert Generation model)"),hye.forEach(t),Rro=i(S),Og=n(S,"LI",{});var uye=s(Og);Kae=n(uye,"STRONG",{});var AKr=s(Kae);Pro=r(AKr,"bert-japanese"),AKr.forEach(t),Bro=r(uye," \u2014 "),tP=n(uye,"A",{href:!0});var yKr=s(tP);Iro=r(yKr,"BertJapaneseTokenizer"),yKr.forEach(t),Nro=r(uye," (BertJapanese model)"),uye.forEach(t),qro=i(S),Vg=n(S,"LI",{});var pye=s(Vg);Zae=n(pye,"STRONG",{});var LKr=s(Zae);jro=r(LKr,"bertweet"),LKr.forEach(t),Dro=r(pye," \u2014 "),aP=n(pye,"A",{href:!0});var xKr=s(aP);Gro=r(xKr,"BertweetTokenizer"),xKr.forEach(t),Oro=r(pye," (BERTweet model)"),pye.forEach(t),Vro=i(S),Gn=n(S,"LI",{});var S$=s(Gn);ene=n(S$,"STRONG",{});var $Kr=s(ene);Xro=r($Kr,"big_bird"),$Kr.forEach(t),zro=r(S$," \u2014 "),nP=n(S$,"A",{href:!0});var kKr=s(nP);Wro=r(kKr,"BigBirdTokenizer"),kKr.forEach(t),Qro=r(S$," or "),sP=n(S$,"A",{href:!0});var SKr=s(sP);Hro=r(SKr,"BigBirdTokenizerFast"),SKr.forEach(t),Uro=r(S$," (BigBird model)"),S$.forEach(t),Jro=i(S),On=n(S,"LI",{});var R$=s(On);one=n(R$,"STRONG",{});var RKr=s(one);Yro=r(RKr,"bigbird_pegasus"),RKr.forEach(t),Kro=r(R$," \u2014 "),lP=n(R$,"A",{href:!0});var PKr=s(lP);Zro=r(PKr,"PegasusTokenizer"),PKr.forEach(t),eto=r(R$," or "),iP=n(R$,"A",{href:!0});var BKr=s(iP);oto=r(BKr,"PegasusTokenizerFast"),BKr.forEach(t),rto=r(R$," (BigBird-Pegasus model)"),R$.forEach(t),tto=i(S),Vn=n(S,"LI",{});var P$=s(Vn);rne=n(P$,"STRONG",{});var IKr=s(rne);ato=r(IKr,"blenderbot"),IKr.forEach(t),nto=r(P$," \u2014 "),dP=n(P$,"A",{href:!0});var NKr=s(dP);sto=r(NKr,"BlenderbotTokenizer"),NKr.forEach(t),lto=r(P$," or "),cP=n(P$,"A",{href:!0});var qKr=s(cP);ito=r(qKr,"BlenderbotTokenizerFast"),qKr.forEach(t),dto=r(P$," (Blenderbot model)"),P$.forEach(t),cto=i(S),Xg=n(S,"LI",{});var _ye=s(Xg);tne=n(_ye,"STRONG",{});var jKr=s(tne);mto=r(jKr,"blenderbot-small"),jKr.forEach(t),fto=r(_ye," \u2014 "),mP=n(_ye,"A",{href:!0});var DKr=s(mP);gto=r(DKr,"BlenderbotSmallTokenizer"),DKr.forEach(t),hto=r(_ye," (BlenderbotSmall model)"),_ye.forEach(t),uto=i(S),zg=n(S,"LI",{});var bye=s(zg);ane=n(bye,"STRONG",{});var GKr=s(ane);pto=r(GKr,"bloom"),GKr.forEach(t),_to=r(bye," \u2014 "),fP=n(bye,"A",{href:!0});var OKr=s(fP);bto=r(OKr,"BloomTokenizerFast"),OKr.forEach(t),vto=r(bye," (BLOOM model)"),bye.forEach(t),Fto=i(S),Wg=n(S,"LI",{});var vye=s(Wg);nne=n(vye,"STRONG",{});var VKr=s(nne);Tto=r(VKr,"byt5"),VKr.forEach(t),Mto=r(vye," \u2014 "),gP=n(vye,"A",{href:!0});var XKr=s(gP);Eto=r(XKr,"ByT5Tokenizer"),XKr.forEach(t),Cto=r(vye," (ByT5 model)"),vye.forEach(t),wto=i(S),Xn=n(S,"LI",{});var B$=s(Xn);sne=n(B$,"STRONG",{});var zKr=s(sne);Ato=r(zKr,"camembert"),zKr.forEach(t),yto=r(B$," \u2014 "),hP=n(B$,"A",{href:!0});var WKr=s(hP);Lto=r(WKr,"CamembertTokenizer"),WKr.forEach(t),xto=r(B$," or "),uP=n(B$,"A",{href:!0});var QKr=s(uP);$to=r(QKr,"CamembertTokenizerFast"),QKr.forEach(t),kto=r(B$," (CamemBERT model)"),B$.forEach(t),Sto=i(S),Qg=n(S,"LI",{});var Fye=s(Qg);lne=n(Fye,"STRONG",{});var HKr=s(lne);Rto=r(HKr,"canine"),HKr.forEach(t),Pto=r(Fye," \u2014 "),pP=n(Fye,"A",{href:!0});var UKr=s(pP);Bto=r(UKr,"CanineTokenizer"),UKr.forEach(t),Ito=r(Fye," (CANINE model)"),Fye.forEach(t),Nto=i(S),zn=n(S,"LI",{});var I$=s(zn);ine=n(I$,"STRONG",{});var JKr=s(ine);qto=r(JKr,"clip"),JKr.forEach(t),jto=r(I$," \u2014 "),_P=n(I$,"A",{href:!0});var YKr=s(_P);Dto=r(YKr,"CLIPTokenizer"),YKr.forEach(t),Gto=r(I$," or "),bP=n(I$,"A",{href:!0});var KKr=s(bP);Oto=r(KKr,"CLIPTokenizerFast"),KKr.forEach(t),Vto=r(I$," (CLIP model)"),I$.forEach(t),Xto=i(S),Wn=n(S,"LI",{});var N$=s(Wn);dne=n(N$,"STRONG",{});var ZKr=s(dne);zto=r(ZKr,"convbert"),ZKr.forEach(t),Wto=r(N$," \u2014 "),vP=n(N$,"A",{href:!0});var eZr=s(vP);Qto=r(eZr,"ConvBertTokenizer"),eZr.forEach(t),Hto=r(N$," or "),FP=n(N$,"A",{href:!0});var oZr=s(FP);Uto=r(oZr,"ConvBertTokenizerFast"),oZr.forEach(t),Jto=r(N$," (ConvBERT model)"),N$.forEach(t),Yto=i(S),Qn=n(S,"LI",{});var q$=s(Qn);cne=n(q$,"STRONG",{});var rZr=s(cne);Kto=r(rZr,"cpm"),rZr.forEach(t),Zto=r(q$," \u2014 "),TP=n(q$,"A",{href:!0});var tZr=s(TP);eao=r(tZr,"CpmTokenizer"),tZr.forEach(t),oao=r(q$," or "),MP=n(q$,"A",{href:!0});var aZr=s(MP);rao=r(aZr,"CpmTokenizerFast"),aZr.forEach(t),tao=r(q$," (CPM model)"),q$.forEach(t),aao=i(S),Hg=n(S,"LI",{});var Tye=s(Hg);mne=n(Tye,"STRONG",{});var nZr=s(mne);nao=r(nZr,"ctrl"),nZr.forEach(t),sao=r(Tye," \u2014 "),EP=n(Tye,"A",{href:!0});var sZr=s(EP);lao=r(sZr,"CTRLTokenizer"),sZr.forEach(t),iao=r(Tye," (CTRL model)"),Tye.forEach(t),dao=i(S),Hn=n(S,"LI",{});var j$=s(Hn);fne=n(j$,"STRONG",{});var lZr=s(fne);cao=r(lZr,"data2vec-text"),lZr.forEach(t),mao=r(j$," \u2014 "),CP=n(j$,"A",{href:!0});var iZr=s(CP);fao=r(iZr,"RobertaTokenizer"),iZr.forEach(t),gao=r(j$," or "),wP=n(j$,"A",{href:!0});var dZr=s(wP);hao=r(dZr,"RobertaTokenizerFast"),dZr.forEach(t),uao=r(j$," (Data2VecText model)"),j$.forEach(t),pao=i(S),Un=n(S,"LI",{});var D$=s(Un);gne=n(D$,"STRONG",{});var cZr=s(gne);_ao=r(cZr,"deberta"),cZr.forEach(t),bao=r(D$," \u2014 "),AP=n(D$,"A",{href:!0});var mZr=s(AP);vao=r(mZr,"DebertaTokenizer"),mZr.forEach(t),Fao=r(D$," or "),yP=n(D$,"A",{href:!0});var fZr=s(yP);Tao=r(fZr,"DebertaTokenizerFast"),fZr.forEach(t),Mao=r(D$," (DeBERTa model)"),D$.forEach(t),Eao=i(S),Jn=n(S,"LI",{});var G$=s(Jn);hne=n(G$,"STRONG",{});var gZr=s(hne);Cao=r(gZr,"deberta-v2"),gZr.forEach(t),wao=r(G$," \u2014 "),LP=n(G$,"A",{href:!0});var hZr=s(LP);Aao=r(hZr,"DebertaV2Tokenizer"),hZr.forEach(t),yao=r(G$," or "),xP=n(G$,"A",{href:!0});var uZr=s(xP);Lao=r(uZr,"DebertaV2TokenizerFast"),uZr.forEach(t),xao=r(G$," (DeBERTa-v2 model)"),G$.forEach(t),$ao=i(S),Yn=n(S,"LI",{});var O$=s(Yn);une=n(O$,"STRONG",{});var pZr=s(une);kao=r(pZr,"distilbert"),pZr.forEach(t),Sao=r(O$," \u2014 "),$P=n(O$,"A",{href:!0});var _Zr=s($P);Rao=r(_Zr,"DistilBertTokenizer"),_Zr.forEach(t),Pao=r(O$," or "),kP=n(O$,"A",{href:!0});var bZr=s(kP);Bao=r(bZr,"DistilBertTokenizerFast"),bZr.forEach(t),Iao=r(O$," (DistilBERT model)"),O$.forEach(t),Nao=i(S),Kn=n(S,"LI",{});var V$=s(Kn);pne=n(V$,"STRONG",{});var vZr=s(pne);qao=r(vZr,"dpr"),vZr.forEach(t),jao=r(V$," \u2014 "),SP=n(V$,"A",{href:!0});var FZr=s(SP);Dao=r(FZr,"DPRQuestionEncoderTokenizer"),FZr.forEach(t),Gao=r(V$," or "),RP=n(V$,"A",{href:!0});var TZr=s(RP);Oao=r(TZr,"DPRQuestionEncoderTokenizerFast"),TZr.forEach(t),Vao=r(V$," (DPR model)"),V$.forEach(t),Xao=i(S),Zn=n(S,"LI",{});var X$=s(Zn);_ne=n(X$,"STRONG",{});var MZr=s(_ne);zao=r(MZr,"electra"),MZr.forEach(t),Wao=r(X$," \u2014 "),PP=n(X$,"A",{href:!0});var EZr=s(PP);Qao=r(EZr,"ElectraTokenizer"),EZr.forEach(t),Hao=r(X$," or "),BP=n(X$,"A",{href:!0});var CZr=s(BP);Uao=r(CZr,"ElectraTokenizerFast"),CZr.forEach(t),Jao=r(X$," (ELECTRA model)"),X$.forEach(t),Yao=i(S),Ug=n(S,"LI",{});var Mye=s(Ug);bne=n(Mye,"STRONG",{});var wZr=s(bne);Kao=r(wZr,"flaubert"),wZr.forEach(t),Zao=r(Mye," \u2014 "),IP=n(Mye,"A",{href:!0});var AZr=s(IP);eno=r(AZr,"FlaubertTokenizer"),AZr.forEach(t),ono=r(Mye," (FlauBERT model)"),Mye.forEach(t),rno=i(S),es=n(S,"LI",{});var z$=s(es);vne=n(z$,"STRONG",{});var yZr=s(vne);tno=r(yZr,"fnet"),yZr.forEach(t),ano=r(z$," \u2014 "),NP=n(z$,"A",{href:!0});var LZr=s(NP);nno=r(LZr,"FNetTokenizer"),LZr.forEach(t),sno=r(z$," or "),qP=n(z$,"A",{href:!0});var xZr=s(qP);lno=r(xZr,"FNetTokenizerFast"),xZr.forEach(t),ino=r(z$," (FNet model)"),z$.forEach(t),dno=i(S),Jg=n(S,"LI",{});var Eye=s(Jg);Fne=n(Eye,"STRONG",{});var $Zr=s(Fne);cno=r($Zr,"fsmt"),$Zr.forEach(t),mno=r(Eye," \u2014 "),jP=n(Eye,"A",{href:!0});var kZr=s(jP);fno=r(kZr,"FSMTTokenizer"),kZr.forEach(t),gno=r(Eye," (FairSeq Machine-Translation model)"),Eye.forEach(t),hno=i(S),os=n(S,"LI",{});var W$=s(os);Tne=n(W$,"STRONG",{});var SZr=s(Tne);uno=r(SZr,"funnel"),SZr.forEach(t),pno=r(W$," \u2014 "),DP=n(W$,"A",{href:!0});var RZr=s(DP);_no=r(RZr,"FunnelTokenizer"),RZr.forEach(t),bno=r(W$," or "),GP=n(W$,"A",{href:!0});var PZr=s(GP);vno=r(PZr,"FunnelTokenizerFast"),PZr.forEach(t),Fno=r(W$," (Funnel Transformer model)"),W$.forEach(t),Tno=i(S),rs=n(S,"LI",{});var Q$=s(rs);Mne=n(Q$,"STRONG",{});var BZr=s(Mne);Mno=r(BZr,"gpt2"),BZr.forEach(t),Eno=r(Q$," \u2014 "),OP=n(Q$,"A",{href:!0});var IZr=s(OP);Cno=r(IZr,"GPT2Tokenizer"),IZr.forEach(t),wno=r(Q$," or "),VP=n(Q$,"A",{href:!0});var NZr=s(VP);Ano=r(NZr,"GPT2TokenizerFast"),NZr.forEach(t),yno=r(Q$," (OpenAI GPT-2 model)"),Q$.forEach(t),Lno=i(S),ts=n(S,"LI",{});var H$=s(ts);Ene=n(H$,"STRONG",{});var qZr=s(Ene);xno=r(qZr,"gpt_neo"),qZr.forEach(t),$no=r(H$," \u2014 "),XP=n(H$,"A",{href:!0});var jZr=s(XP);kno=r(jZr,"GPT2Tokenizer"),jZr.forEach(t),Sno=r(H$," or "),zP=n(H$,"A",{href:!0});var DZr=s(zP);Rno=r(DZr,"GPT2TokenizerFast"),DZr.forEach(t),Pno=r(H$," (GPT Neo model)"),H$.forEach(t),Bno=i(S),Yg=n(S,"LI",{});var Cye=s(Yg);Cne=n(Cye,"STRONG",{});var GZr=s(Cne);Ino=r(GZr,"gpt_neox"),GZr.forEach(t),Nno=r(Cye," \u2014 "),WP=n(Cye,"A",{href:!0});var OZr=s(WP);qno=r(OZr,"GPTNeoXTokenizerFast"),OZr.forEach(t),jno=r(Cye," (GPT NeoX model)"),Cye.forEach(t),Dno=i(S),as=n(S,"LI",{});var U$=s(as);wne=n(U$,"STRONG",{});var VZr=s(wne);Gno=r(VZr,"gptj"),VZr.forEach(t),Ono=r(U$," \u2014 "),QP=n(U$,"A",{href:!0});var XZr=s(QP);Vno=r(XZr,"GPT2Tokenizer"),XZr.forEach(t),Xno=r(U$," or "),HP=n(U$,"A",{href:!0});var zZr=s(HP);zno=r(zZr,"GPT2TokenizerFast"),zZr.forEach(t),Wno=r(U$," (GPT-J model)"),U$.forEach(t),Qno=i(S),ns=n(S,"LI",{});var J$=s(ns);Ane=n(J$,"STRONG",{});var WZr=s(Ane);Hno=r(WZr,"herbert"),WZr.forEach(t),Uno=r(J$," \u2014 "),UP=n(J$,"A",{href:!0});var QZr=s(UP);Jno=r(QZr,"HerbertTokenizer"),QZr.forEach(t),Yno=r(J$," or "),JP=n(J$,"A",{href:!0});var HZr=s(JP);Kno=r(HZr,"HerbertTokenizerFast"),HZr.forEach(t),Zno=r(J$," (HerBERT model)"),J$.forEach(t),eso=i(S),Kg=n(S,"LI",{});var wye=s(Kg);yne=n(wye,"STRONG",{});var UZr=s(yne);oso=r(UZr,"hubert"),UZr.forEach(t),rso=r(wye," \u2014 "),YP=n(wye,"A",{href:!0});var JZr=s(YP);tso=r(JZr,"Wav2Vec2CTCTokenizer"),JZr.forEach(t),aso=r(wye," (Hubert model)"),wye.forEach(t),nso=i(S),ss=n(S,"LI",{});var Y$=s(ss);Lne=n(Y$,"STRONG",{});var YZr=s(Lne);sso=r(YZr,"ibert"),YZr.forEach(t),lso=r(Y$," \u2014 "),KP=n(Y$,"A",{href:!0});var KZr=s(KP);iso=r(KZr,"RobertaTokenizer"),KZr.forEach(t),dso=r(Y$," or "),ZP=n(Y$,"A",{href:!0});var ZZr=s(ZP);cso=r(ZZr,"RobertaTokenizerFast"),ZZr.forEach(t),mso=r(Y$," (I-BERT model)"),Y$.forEach(t),fso=i(S),ls=n(S,"LI",{});var K$=s(ls);xne=n(K$,"STRONG",{});var eet=s(xne);gso=r(eet,"layoutlm"),eet.forEach(t),hso=r(K$," \u2014 "),eB=n(K$,"A",{href:!0});var oet=s(eB);uso=r(oet,"LayoutLMTokenizer"),oet.forEach(t),pso=r(K$," or "),oB=n(K$,"A",{href:!0});var ret=s(oB);_so=r(ret,"LayoutLMTokenizerFast"),ret.forEach(t),bso=r(K$," (LayoutLM model)"),K$.forEach(t),vso=i(S),is=n(S,"LI",{});var Z$=s(is);$ne=n(Z$,"STRONG",{});var tet=s($ne);Fso=r(tet,"layoutlmv2"),tet.forEach(t),Tso=r(Z$," \u2014 "),rB=n(Z$,"A",{href:!0});var aet=s(rB);Mso=r(aet,"LayoutLMv2Tokenizer"),aet.forEach(t),Eso=r(Z$," or "),tB=n(Z$,"A",{href:!0});var net=s(tB);Cso=r(net,"LayoutLMv2TokenizerFast"),net.forEach(t),wso=r(Z$," (LayoutLMv2 model)"),Z$.forEach(t),Aso=i(S),ds=n(S,"LI",{});var ek=s(ds);kne=n(ek,"STRONG",{});var set=s(kne);yso=r(set,"layoutlmv3"),set.forEach(t),Lso=r(ek," \u2014 "),aB=n(ek,"A",{href:!0});var iet=s(aB);xso=r(iet,"LayoutLMv3Tokenizer"),iet.forEach(t),$so=r(ek," or "),nB=n(ek,"A",{href:!0});var det=s(nB);kso=r(det,"LayoutLMv3TokenizerFast"),det.forEach(t),Sso=r(ek," (LayoutLMv3 model)"),ek.forEach(t),Rso=i(S),cs=n(S,"LI",{});var ok=s(cs);Sne=n(ok,"STRONG",{});var cet=s(Sne);Pso=r(cet,"layoutxlm"),cet.forEach(t),Bso=r(ok," \u2014 "),sB=n(ok,"A",{href:!0});var met=s(sB);Iso=r(met,"LayoutXLMTokenizer"),met.forEach(t),Nso=r(ok," or "),lB=n(ok,"A",{href:!0});var fet=s(lB);qso=r(fet,"LayoutXLMTokenizerFast"),fet.forEach(t),jso=r(ok," (LayoutXLM model)"),ok.forEach(t),Dso=i(S),ms=n(S,"LI",{});var rk=s(ms);Rne=n(rk,"STRONG",{});var get=s(Rne);Gso=r(get,"led"),get.forEach(t),Oso=r(rk," \u2014 "),iB=n(rk,"A",{href:!0});var het=s(iB);Vso=r(het,"LEDTokenizer"),het.forEach(t),Xso=r(rk," or "),dB=n(rk,"A",{href:!0});var uet=s(dB);zso=r(uet,"LEDTokenizerFast"),uet.forEach(t),Wso=r(rk," (LED model)"),rk.forEach(t),Qso=i(S),fs=n(S,"LI",{});var tk=s(fs);Pne=n(tk,"STRONG",{});var pet=s(Pne);Hso=r(pet,"longformer"),pet.forEach(t),Uso=r(tk," \u2014 "),cB=n(tk,"A",{href:!0});var _et=s(cB);Jso=r(_et,"LongformerTokenizer"),_et.forEach(t),Yso=r(tk," or "),mB=n(tk,"A",{href:!0});var bet=s(mB);Kso=r(bet,"LongformerTokenizerFast"),bet.forEach(t),Zso=r(tk," (Longformer model)"),tk.forEach(t),elo=i(S),Zg=n(S,"LI",{});var Aye=s(Zg);Bne=n(Aye,"STRONG",{});var vet=s(Bne);olo=r(vet,"luke"),vet.forEach(t),rlo=r(Aye," \u2014 "),fB=n(Aye,"A",{href:!0});var Fet=s(fB);tlo=r(Fet,"LukeTokenizer"),Fet.forEach(t),alo=r(Aye," (LUKE model)"),Aye.forEach(t),nlo=i(S),gs=n(S,"LI",{});var ak=s(gs);Ine=n(ak,"STRONG",{});var Tet=s(Ine);slo=r(Tet,"lxmert"),Tet.forEach(t),llo=r(ak," \u2014 "),gB=n(ak,"A",{href:!0});var Met=s(gB);ilo=r(Met,"LxmertTokenizer"),Met.forEach(t),dlo=r(ak," or "),hB=n(ak,"A",{href:!0});var Eet=s(hB);clo=r(Eet,"LxmertTokenizerFast"),Eet.forEach(t),mlo=r(ak," (LXMERT model)"),ak.forEach(t),flo=i(S),eh=n(S,"LI",{});var yye=s(eh);Nne=n(yye,"STRONG",{});var Cet=s(Nne);glo=r(Cet,"m2m_100"),Cet.forEach(t),hlo=r(yye," \u2014 "),uB=n(yye,"A",{href:!0});var wet=s(uB);ulo=r(wet,"M2M100Tokenizer"),wet.forEach(t),plo=r(yye," (M2M100 model)"),yye.forEach(t),_lo=i(S),oh=n(S,"LI",{});var Lye=s(oh);qne=n(Lye,"STRONG",{});var Aet=s(qne);blo=r(Aet,"marian"),Aet.forEach(t),vlo=r(Lye," \u2014 "),pB=n(Lye,"A",{href:!0});var yet=s(pB);Flo=r(yet,"MarianTokenizer"),yet.forEach(t),Tlo=r(Lye," (Marian model)"),Lye.forEach(t),Mlo=i(S),hs=n(S,"LI",{});var nk=s(hs);jne=n(nk,"STRONG",{});var Let=s(jne);Elo=r(Let,"mbart"),Let.forEach(t),Clo=r(nk," \u2014 "),_B=n(nk,"A",{href:!0});var xet=s(_B);wlo=r(xet,"MBartTokenizer"),xet.forEach(t),Alo=r(nk," or "),bB=n(nk,"A",{href:!0});var $et=s(bB);ylo=r($et,"MBartTokenizerFast"),$et.forEach(t),Llo=r(nk," (mBART model)"),nk.forEach(t),xlo=i(S),us=n(S,"LI",{});var sk=s(us);Dne=n(sk,"STRONG",{});var ket=s(Dne);$lo=r(ket,"mbart50"),ket.forEach(t),klo=r(sk," \u2014 "),vB=n(sk,"A",{href:!0});var Set=s(vB);Slo=r(Set,"MBart50Tokenizer"),Set.forEach(t),Rlo=r(sk," or "),FB=n(sk,"A",{href:!0});var Ret=s(FB);Plo=r(Ret,"MBart50TokenizerFast"),Ret.forEach(t),Blo=r(sk," (mBART-50 model)"),sk.forEach(t),Ilo=i(S),ps=n(S,"LI",{});var lk=s(ps);Gne=n(lk,"STRONG",{});var Pet=s(Gne);Nlo=r(Pet,"megatron-bert"),Pet.forEach(t),qlo=r(lk," \u2014 "),TB=n(lk,"A",{href:!0});var Bet=s(TB);jlo=r(Bet,"BertTokenizer"),Bet.forEach(t),Dlo=r(lk," or "),MB=n(lk,"A",{href:!0});var Iet=s(MB);Glo=r(Iet,"BertTokenizerFast"),Iet.forEach(t),Olo=r(lk," (Megatron-BERT model)"),lk.forEach(t),Vlo=i(S),rh=n(S,"LI",{});var xye=s(rh);One=n(xye,"STRONG",{});var Net=s(One);Xlo=r(Net,"mluke"),Net.forEach(t),zlo=r(xye," \u2014 "),EB=n(xye,"A",{href:!0});var qet=s(EB);Wlo=r(qet,"MLukeTokenizer"),qet.forEach(t),Qlo=r(xye," (mLUKE model)"),xye.forEach(t),Hlo=i(S),_s=n(S,"LI",{});var ik=s(_s);Vne=n(ik,"STRONG",{});var jet=s(Vne);Ulo=r(jet,"mobilebert"),jet.forEach(t),Jlo=r(ik," \u2014 "),CB=n(ik,"A",{href:!0});var Det=s(CB);Ylo=r(Det,"MobileBertTokenizer"),Det.forEach(t),Klo=r(ik," or "),wB=n(ik,"A",{href:!0});var Get=s(wB);Zlo=r(Get,"MobileBertTokenizerFast"),Get.forEach(t),eio=r(ik," (MobileBERT model)"),ik.forEach(t),oio=i(S),bs=n(S,"LI",{});var dk=s(bs);Xne=n(dk,"STRONG",{});var Oet=s(Xne);rio=r(Oet,"mpnet"),Oet.forEach(t),tio=r(dk," \u2014 "),AB=n(dk,"A",{href:!0});var Vet=s(AB);aio=r(Vet,"MPNetTokenizer"),Vet.forEach(t),nio=r(dk," or "),yB=n(dk,"A",{href:!0});var Xet=s(yB);sio=r(Xet,"MPNetTokenizerFast"),Xet.forEach(t),lio=r(dk," (MPNet model)"),dk.forEach(t),iio=i(S),vs=n(S,"LI",{});var ck=s(vs);zne=n(ck,"STRONG",{});var zet=s(zne);dio=r(zet,"mt5"),zet.forEach(t),cio=r(ck," \u2014 "),LB=n(ck,"A",{href:!0});var Wet=s(LB);mio=r(Wet,"MT5Tokenizer"),Wet.forEach(t),fio=r(ck," or "),xB=n(ck,"A",{href:!0});var Qet=s(xB);gio=r(Qet,"MT5TokenizerFast"),Qet.forEach(t),hio=r(ck," (MT5 model)"),ck.forEach(t),uio=i(S),Fs=n(S,"LI",{});var mk=s(Fs);Wne=n(mk,"STRONG",{});var Het=s(Wne);pio=r(Het,"nystromformer"),Het.forEach(t),_io=r(mk," \u2014 "),$B=n(mk,"A",{href:!0});var Uet=s($B);bio=r(Uet,"AlbertTokenizer"),Uet.forEach(t),vio=r(mk," or "),kB=n(mk,"A",{href:!0});var Jet=s(kB);Fio=r(Jet,"AlbertTokenizerFast"),Jet.forEach(t),Tio=r(mk," (Nystr\xF6mformer model)"),mk.forEach(t),Mio=i(S),Ts=n(S,"LI",{});var fk=s(Ts);Qne=n(fk,"STRONG",{});var Yet=s(Qne);Eio=r(Yet,"openai-gpt"),Yet.forEach(t),Cio=r(fk," \u2014 "),SB=n(fk,"A",{href:!0});var Ket=s(SB);wio=r(Ket,"OpenAIGPTTokenizer"),Ket.forEach(t),Aio=r(fk," or "),RB=n(fk,"A",{href:!0});var Zet=s(RB);yio=r(Zet,"OpenAIGPTTokenizerFast"),Zet.forEach(t),Lio=r(fk," (OpenAI GPT model)"),fk.forEach(t),xio=i(S),th=n(S,"LI",{});var $ye=s(th);Hne=n($ye,"STRONG",{});var eot=s(Hne);$io=r(eot,"opt"),eot.forEach(t),kio=r($ye," \u2014 "),PB=n($ye,"A",{href:!0});var oot=s(PB);Sio=r(oot,"GPT2Tokenizer"),oot.forEach(t),Rio=r($ye," (OPT model)"),$ye.forEach(t),Pio=i(S),Ms=n(S,"LI",{});var gk=s(Ms);Une=n(gk,"STRONG",{});var rot=s(Une);Bio=r(rot,"pegasus"),rot.forEach(t),Iio=r(gk," \u2014 "),BB=n(gk,"A",{href:!0});var tot=s(BB);Nio=r(tot,"PegasusTokenizer"),tot.forEach(t),qio=r(gk," or "),IB=n(gk,"A",{href:!0});var aot=s(IB);jio=r(aot,"PegasusTokenizerFast"),aot.forEach(t),Dio=r(gk," (Pegasus model)"),gk.forEach(t),Gio=i(S),ah=n(S,"LI",{});var kye=s(ah);Jne=n(kye,"STRONG",{});var not=s(Jne);Oio=r(not,"perceiver"),not.forEach(t),Vio=r(kye," \u2014 "),NB=n(kye,"A",{href:!0});var sot=s(NB);Xio=r(sot,"PerceiverTokenizer"),sot.forEach(t),zio=r(kye," (Perceiver model)"),kye.forEach(t),Wio=i(S),nh=n(S,"LI",{});var Sye=s(nh);Yne=n(Sye,"STRONG",{});var lot=s(Yne);Qio=r(lot,"phobert"),lot.forEach(t),Hio=r(Sye," \u2014 "),qB=n(Sye,"A",{href:!0});var iot=s(qB);Uio=r(iot,"PhobertTokenizer"),iot.forEach(t),Jio=r(Sye," (PhoBERT model)"),Sye.forEach(t),Yio=i(S),sh=n(S,"LI",{});var Rye=s(sh);Kne=n(Rye,"STRONG",{});var dot=s(Kne);Kio=r(dot,"plbart"),dot.forEach(t),Zio=r(Rye," \u2014 "),jB=n(Rye,"A",{href:!0});var cot=s(jB);edo=r(cot,"PLBartTokenizer"),cot.forEach(t),odo=r(Rye," (PLBart model)"),Rye.forEach(t),rdo=i(S),lh=n(S,"LI",{});var Pye=s(lh);Zne=n(Pye,"STRONG",{});var mot=s(Zne);tdo=r(mot,"prophetnet"),mot.forEach(t),ado=r(Pye," \u2014 "),DB=n(Pye,"A",{href:!0});var fot=s(DB);ndo=r(fot,"ProphetNetTokenizer"),fot.forEach(t),sdo=r(Pye," (ProphetNet model)"),Pye.forEach(t),ldo=i(S),Es=n(S,"LI",{});var hk=s(Es);ese=n(hk,"STRONG",{});var got=s(ese);ido=r(got,"qdqbert"),got.forEach(t),ddo=r(hk," \u2014 "),GB=n(hk,"A",{href:!0});var hot=s(GB);cdo=r(hot,"BertTokenizer"),hot.forEach(t),mdo=r(hk," or "),OB=n(hk,"A",{href:!0});var uot=s(OB);fdo=r(uot,"BertTokenizerFast"),uot.forEach(t),gdo=r(hk," (QDQBert model)"),hk.forEach(t),hdo=i(S),ih=n(S,"LI",{});var Bye=s(ih);ose=n(Bye,"STRONG",{});var pot=s(ose);udo=r(pot,"rag"),pot.forEach(t),pdo=r(Bye," \u2014 "),VB=n(Bye,"A",{href:!0});var _ot=s(VB);_do=r(_ot,"RagTokenizer"),_ot.forEach(t),bdo=r(Bye," (RAG model)"),Bye.forEach(t),vdo=i(S),Cs=n(S,"LI",{});var uk=s(Cs);rse=n(uk,"STRONG",{});var bot=s(rse);Fdo=r(bot,"realm"),bot.forEach(t),Tdo=r(uk," \u2014 "),XB=n(uk,"A",{href:!0});var vot=s(XB);Mdo=r(vot,"RealmTokenizer"),vot.forEach(t),Edo=r(uk," or "),zB=n(uk,"A",{href:!0});var Fot=s(zB);Cdo=r(Fot,"RealmTokenizerFast"),Fot.forEach(t),wdo=r(uk," (REALM model)"),uk.forEach(t),Ado=i(S),ws=n(S,"LI",{});var pk=s(ws);tse=n(pk,"STRONG",{});var Tot=s(tse);ydo=r(Tot,"reformer"),Tot.forEach(t),Ldo=r(pk," \u2014 "),WB=n(pk,"A",{href:!0});var Mot=s(WB);xdo=r(Mot,"ReformerTokenizer"),Mot.forEach(t),$do=r(pk," or "),QB=n(pk,"A",{href:!0});var Eot=s(QB);kdo=r(Eot,"ReformerTokenizerFast"),Eot.forEach(t),Sdo=r(pk," (Reformer model)"),pk.forEach(t),Rdo=i(S),As=n(S,"LI",{});var _k=s(As);ase=n(_k,"STRONG",{});var Cot=s(ase);Pdo=r(Cot,"rembert"),Cot.forEach(t),Bdo=r(_k," \u2014 "),HB=n(_k,"A",{href:!0});var wot=s(HB);Ido=r(wot,"RemBertTokenizer"),wot.forEach(t),Ndo=r(_k," or "),UB=n(_k,"A",{href:!0});var Aot=s(UB);qdo=r(Aot,"RemBertTokenizerFast"),Aot.forEach(t),jdo=r(_k," (RemBERT model)"),_k.forEach(t),Ddo=i(S),ys=n(S,"LI",{});var bk=s(ys);nse=n(bk,"STRONG",{});var yot=s(nse);Gdo=r(yot,"retribert"),yot.forEach(t),Odo=r(bk," \u2014 "),JB=n(bk,"A",{href:!0});var Lot=s(JB);Vdo=r(Lot,"RetriBertTokenizer"),Lot.forEach(t),Xdo=r(bk," or "),YB=n(bk,"A",{href:!0});var xot=s(YB);zdo=r(xot,"RetriBertTokenizerFast"),xot.forEach(t),Wdo=r(bk," (RetriBERT model)"),bk.forEach(t),Qdo=i(S),Ls=n(S,"LI",{});var vk=s(Ls);sse=n(vk,"STRONG",{});var $ot=s(sse);Hdo=r($ot,"roberta"),$ot.forEach(t),Udo=r(vk," \u2014 "),KB=n(vk,"A",{href:!0});var kot=s(KB);Jdo=r(kot,"RobertaTokenizer"),kot.forEach(t),Ydo=r(vk," or "),ZB=n(vk,"A",{href:!0});var Sot=s(ZB);Kdo=r(Sot,"RobertaTokenizerFast"),Sot.forEach(t),Zdo=r(vk," (RoBERTa model)"),vk.forEach(t),eco=i(S),xs=n(S,"LI",{});var Fk=s(xs);lse=n(Fk,"STRONG",{});var Rot=s(lse);oco=r(Rot,"roformer"),Rot.forEach(t),rco=r(Fk," \u2014 "),eI=n(Fk,"A",{href:!0});var Pot=s(eI);tco=r(Pot,"RoFormerTokenizer"),Pot.forEach(t),aco=r(Fk," or "),oI=n(Fk,"A",{href:!0});var Bot=s(oI);nco=r(Bot,"RoFormerTokenizerFast"),Bot.forEach(t),sco=r(Fk," (RoFormer model)"),Fk.forEach(t),lco=i(S),dh=n(S,"LI",{});var Iye=s(dh);ise=n(Iye,"STRONG",{});var Iot=s(ise);ico=r(Iot,"speech_to_text"),Iot.forEach(t),dco=r(Iye," \u2014 "),rI=n(Iye,"A",{href:!0});var Not=s(rI);cco=r(Not,"Speech2TextTokenizer"),Not.forEach(t),mco=r(Iye," (Speech2Text model)"),Iye.forEach(t),fco=i(S),ch=n(S,"LI",{});var Nye=s(ch);dse=n(Nye,"STRONG",{});var qot=s(dse);gco=r(qot,"speech_to_text_2"),qot.forEach(t),hco=r(Nye," \u2014 "),tI=n(Nye,"A",{href:!0});var jot=s(tI);uco=r(jot,"Speech2Text2Tokenizer"),jot.forEach(t),pco=r(Nye," (Speech2Text2 model)"),Nye.forEach(t),_co=i(S),$s=n(S,"LI",{});var Tk=s($s);cse=n(Tk,"STRONG",{});var Dot=s(cse);bco=r(Dot,"splinter"),Dot.forEach(t),vco=r(Tk," \u2014 "),aI=n(Tk,"A",{href:!0});var Got=s(aI);Fco=r(Got,"SplinterTokenizer"),Got.forEach(t),Tco=r(Tk," or "),nI=n(Tk,"A",{href:!0});var Oot=s(nI);Mco=r(Oot,"SplinterTokenizerFast"),Oot.forEach(t),Eco=r(Tk," (Splinter model)"),Tk.forEach(t),Cco=i(S),ks=n(S,"LI",{});var Mk=s(ks);mse=n(Mk,"STRONG",{});var Vot=s(mse);wco=r(Vot,"squeezebert"),Vot.forEach(t),Aco=r(Mk," \u2014 "),sI=n(Mk,"A",{href:!0});var Xot=s(sI);yco=r(Xot,"SqueezeBertTokenizer"),Xot.forEach(t),Lco=r(Mk," or "),lI=n(Mk,"A",{href:!0});var zot=s(lI);xco=r(zot,"SqueezeBertTokenizerFast"),zot.forEach(t),$co=r(Mk," (SqueezeBERT model)"),Mk.forEach(t),kco=i(S),Ss=n(S,"LI",{});var Ek=s(Ss);fse=n(Ek,"STRONG",{});var Wot=s(fse);Sco=r(Wot,"t5"),Wot.forEach(t),Rco=r(Ek," \u2014 "),iI=n(Ek,"A",{href:!0});var Qot=s(iI);Pco=r(Qot,"T5Tokenizer"),Qot.forEach(t),Bco=r(Ek," or "),dI=n(Ek,"A",{href:!0});var Hot=s(dI);Ico=r(Hot,"T5TokenizerFast"),Hot.forEach(t),Nco=r(Ek," (T5 model)"),Ek.forEach(t),qco=i(S),mh=n(S,"LI",{});var qye=s(mh);gse=n(qye,"STRONG",{});var Uot=s(gse);jco=r(Uot,"tapas"),Uot.forEach(t),Dco=r(qye," \u2014 "),cI=n(qye,"A",{href:!0});var Jot=s(cI);Gco=r(Jot,"TapasTokenizer"),Jot.forEach(t),Oco=r(qye," (TAPAS model)"),qye.forEach(t),Vco=i(S),fh=n(S,"LI",{});var jye=s(fh);hse=n(jye,"STRONG",{});var Yot=s(hse);Xco=r(Yot,"tapex"),Yot.forEach(t),zco=r(jye," \u2014 "),mI=n(jye,"A",{href:!0});var Kot=s(mI);Wco=r(Kot,"TapexTokenizer"),Kot.forEach(t),Qco=r(jye," (TAPEX model)"),jye.forEach(t),Hco=i(S),gh=n(S,"LI",{});var Dye=s(gh);use=n(Dye,"STRONG",{});var Zot=s(use);Uco=r(Zot,"transfo-xl"),Zot.forEach(t),Jco=r(Dye," \u2014 "),fI=n(Dye,"A",{href:!0});var ert=s(fI);Yco=r(ert,"TransfoXLTokenizer"),ert.forEach(t),Kco=r(Dye," (Transformer-XL model)"),Dye.forEach(t),Zco=i(S),Rs=n(S,"LI",{});var Ck=s(Rs);pse=n(Ck,"STRONG",{});var ort=s(pse);emo=r(ort,"vilt"),ort.forEach(t),omo=r(Ck," \u2014 "),gI=n(Ck,"A",{href:!0});var rrt=s(gI);rmo=r(rrt,"BertTokenizer"),rrt.forEach(t),tmo=r(Ck," or "),hI=n(Ck,"A",{href:!0});var trt=s(hI);amo=r(trt,"BertTokenizerFast"),trt.forEach(t),nmo=r(Ck," (ViLT model)"),Ck.forEach(t),smo=i(S),Ps=n(S,"LI",{});var wk=s(Ps);_se=n(wk,"STRONG",{});var art=s(_se);lmo=r(art,"visual_bert"),art.forEach(t),imo=r(wk," \u2014 "),uI=n(wk,"A",{href:!0});var nrt=s(uI);dmo=r(nrt,"BertTokenizer"),nrt.forEach(t),cmo=r(wk," or "),pI=n(wk,"A",{href:!0});var srt=s(pI);mmo=r(srt,"BertTokenizerFast"),srt.forEach(t),fmo=r(wk," (VisualBERT model)"),wk.forEach(t),gmo=i(S),hh=n(S,"LI",{});var Gye=s(hh);bse=n(Gye,"STRONG",{});var lrt=s(bse);hmo=r(lrt,"wav2vec2"),lrt.forEach(t),umo=r(Gye," \u2014 "),_I=n(Gye,"A",{href:!0});var irt=s(_I);pmo=r(irt,"Wav2Vec2CTCTokenizer"),irt.forEach(t),_mo=r(Gye," (Wav2Vec2 model)"),Gye.forEach(t),bmo=i(S),uh=n(S,"LI",{});var Oye=s(uh);vse=n(Oye,"STRONG",{});var drt=s(vse);vmo=r(drt,"wav2vec2-conformer"),drt.forEach(t),Fmo=r(Oye," \u2014 "),bI=n(Oye,"A",{href:!0});var crt=s(bI);Tmo=r(crt,"Wav2Vec2CTCTokenizer"),crt.forEach(t),Mmo=r(Oye," (Wav2Vec2-Conformer model)"),Oye.forEach(t),Emo=i(S),ph=n(S,"LI",{});var Vye=s(ph);Fse=n(Vye,"STRONG",{});var mrt=s(Fse);Cmo=r(mrt,"wav2vec2_phoneme"),mrt.forEach(t),wmo=r(Vye," \u2014 "),vI=n(Vye,"A",{href:!0});var frt=s(vI);Amo=r(frt,"Wav2Vec2PhonemeCTCTokenizer"),frt.forEach(t),ymo=r(Vye," (Wav2Vec2Phoneme model)"),Vye.forEach(t),Lmo=i(S),Bs=n(S,"LI",{});var Ak=s(Bs);Tse=n(Ak,"STRONG",{});var grt=s(Tse);xmo=r(grt,"xglm"),grt.forEach(t),$mo=r(Ak," \u2014 "),FI=n(Ak,"A",{href:!0});var hrt=s(FI);kmo=r(hrt,"XGLMTokenizer"),hrt.forEach(t),Smo=r(Ak," or "),TI=n(Ak,"A",{href:!0});var urt=s(TI);Rmo=r(urt,"XGLMTokenizerFast"),urt.forEach(t),Pmo=r(Ak," (XGLM model)"),Ak.forEach(t),Bmo=i(S),_h=n(S,"LI",{});var Xye=s(_h);Mse=n(Xye,"STRONG",{});var prt=s(Mse);Imo=r(prt,"xlm"),prt.forEach(t),Nmo=r(Xye," \u2014 "),MI=n(Xye,"A",{href:!0});var _rt=s(MI);qmo=r(_rt,"XLMTokenizer"),_rt.forEach(t),jmo=r(Xye," (XLM model)"),Xye.forEach(t),Dmo=i(S),bh=n(S,"LI",{});var zye=s(bh);Ese=n(zye,"STRONG",{});var brt=s(Ese);Gmo=r(brt,"xlm-prophetnet"),brt.forEach(t),Omo=r(zye," \u2014 "),EI=n(zye,"A",{href:!0});var vrt=s(EI);Vmo=r(vrt,"XLMProphetNetTokenizer"),vrt.forEach(t),Xmo=r(zye," (XLM-ProphetNet model)"),zye.forEach(t),zmo=i(S),Is=n(S,"LI",{});var yk=s(Is);Cse=n(yk,"STRONG",{});var Frt=s(Cse);Wmo=r(Frt,"xlm-roberta"),Frt.forEach(t),Qmo=r(yk," \u2014 "),CI=n(yk,"A",{href:!0});var Trt=s(CI);Hmo=r(Trt,"XLMRobertaTokenizer"),Trt.forEach(t),Umo=r(yk," or "),wI=n(yk,"A",{href:!0});var Mrt=s(wI);Jmo=r(Mrt,"XLMRobertaTokenizerFast"),Mrt.forEach(t),Ymo=r(yk," (XLM-RoBERTa model)"),yk.forEach(t),Kmo=i(S),Ns=n(S,"LI",{});var Lk=s(Ns);wse=n(Lk,"STRONG",{});var Ert=s(wse);Zmo=r(Ert,"xlm-roberta-xl"),Ert.forEach(t),efo=r(Lk," \u2014 "),AI=n(Lk,"A",{href:!0});var Crt=s(AI);ofo=r(Crt,"RobertaTokenizer"),Crt.forEach(t),rfo=r(Lk," or "),yI=n(Lk,"A",{href:!0});var wrt=s(yI);tfo=r(wrt,"RobertaTokenizerFast"),wrt.forEach(t),afo=r(Lk," (XLM-RoBERTa-XL model)"),Lk.forEach(t),nfo=i(S),qs=n(S,"LI",{});var xk=s(qs);Ase=n(xk,"STRONG",{});var Art=s(Ase);sfo=r(Art,"xlnet"),Art.forEach(t),lfo=r(xk," \u2014 "),LI=n(xk,"A",{href:!0});var yrt=s(LI);ifo=r(yrt,"XLNetTokenizer"),yrt.forEach(t),dfo=r(xk," or "),xI=n(xk,"A",{href:!0});var Lrt=s(xI);cfo=r(Lrt,"XLNetTokenizerFast"),Lrt.forEach(t),mfo=r(xk," (XLNet model)"),xk.forEach(t),ffo=i(S),js=n(S,"LI",{});var $k=s(js);yse=n($k,"STRONG",{});var xrt=s(yse);gfo=r(xrt,"yoso"),xrt.forEach(t),hfo=r($k," \u2014 "),$I=n($k,"A",{href:!0});var $rt=s($I);ufo=r($rt,"AlbertTokenizer"),$rt.forEach(t),pfo=r($k," or "),kI=n($k,"A",{href:!0});var krt=s(kI);_fo=r(krt,"AlbertTokenizerFast"),krt.forEach(t),bfo=r($k," (YOSO model)"),$k.forEach(t),S.forEach(t),vfo=i(zs),T(vh.$$.fragment,zs),zs.forEach(t),Ffo=i(Xs),Fh=n(Xs,"DIV",{class:!0});var wOe=s(Fh);T(EL.$$.fragment,wOe),Tfo=i(wOe),Lse=n(wOe,"P",{});var Srt=s(Lse);Mfo=r(Srt,"Register a new tokenizer in this mapping."),Srt.forEach(t),wOe.forEach(t),Xs.forEach(t),CDe=i(m),$i=n(m,"H2",{class:!0});var AOe=s($i);Th=n(AOe,"A",{id:!0,class:!0,href:!0});var Rrt=s(Th);xse=n(Rrt,"SPAN",{});var Prt=s(xse);T(CL.$$.fragment,Prt),Prt.forEach(t),Rrt.forEach(t),Efo=i(AOe),$se=n(AOe,"SPAN",{});var Brt=s($se);Cfo=r(Brt,"AutoFeatureExtractor"),Brt.forEach(t),AOe.forEach(t),wDe=i(m),yo=n(m,"DIV",{class:!0});var Ws=s(yo);T(wL.$$.fragment,Ws),wfo=i(Ws),AL=n(Ws,"P",{});var yOe=s(AL);Afo=r(yOe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),SI=n(yOe,"A",{href:!0});var Irt=s(SI);yfo=r(Irt,"AutoFeatureExtractor.from_pretrained()"),Irt.forEach(t),Lfo=r(yOe," class method."),yOe.forEach(t),xfo=i(Ws),yL=n(Ws,"P",{});var LOe=s(yL);$fo=r(LOe,"This class cannot be instantiated directly using "),kse=n(LOe,"CODE",{});var Nrt=s(kse);kfo=r(Nrt,"__init__()"),Nrt.forEach(t),Sfo=r(LOe," (throws an error)."),LOe.forEach(t),Rfo=i(Ws),He=n(Ws,"DIV",{class:!0});var ra=s(He);T(LL.$$.fragment,ra),Pfo=i(ra),Sse=n(ra,"P",{});var qrt=s(Sse);Bfo=r(qrt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qrt.forEach(t),Ifo=i(ra),ka=n(ra,"P",{});var m6=s(ka);Nfo=r(m6,"The feature extractor class to instantiate is selected based on the "),Rse=n(m6,"CODE",{});var jrt=s(Rse);qfo=r(jrt,"model_type"),jrt.forEach(t),jfo=r(m6,` property of the config object
(either passed as an argument or loaded from `),Pse=n(m6,"CODE",{});var Drt=s(Pse);Dfo=r(Drt,"pretrained_model_name_or_path"),Drt.forEach(t),Gfo=r(m6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bse=n(m6,"CODE",{});var Grt=s(Bse);Ofo=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),Vfo=r(m6,":"),m6.forEach(t),Xfo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Mh=n(K,"LI",{});var Wye=s(Mh);Ise=n(Wye,"STRONG",{});var Ort=s(Ise);zfo=r(Ort,"beit"),Ort.forEach(t),Wfo=r(Wye," \u2014 "),RI=n(Wye,"A",{href:!0});var Vrt=s(RI);Qfo=r(Vrt,"BeitFeatureExtractor"),Vrt.forEach(t),Hfo=r(Wye," (BEiT model)"),Wye.forEach(t),Ufo=i(K),Eh=n(K,"LI",{});var Qye=s(Eh);Nse=n(Qye,"STRONG",{});var Xrt=s(Nse);Jfo=r(Xrt,"clip"),Xrt.forEach(t),Yfo=r(Qye," \u2014 "),PI=n(Qye,"A",{href:!0});var zrt=s(PI);Kfo=r(zrt,"CLIPFeatureExtractor"),zrt.forEach(t),Zfo=r(Qye," (CLIP model)"),Qye.forEach(t),ego=i(K),Ch=n(K,"LI",{});var Hye=s(Ch);qse=n(Hye,"STRONG",{});var Wrt=s(qse);ogo=r(Wrt,"convnext"),Wrt.forEach(t),rgo=r(Hye," \u2014 "),BI=n(Hye,"A",{href:!0});var Qrt=s(BI);tgo=r(Qrt,"ConvNextFeatureExtractor"),Qrt.forEach(t),ago=r(Hye," (ConvNeXT model)"),Hye.forEach(t),ngo=i(K),wh=n(K,"LI",{});var Uye=s(wh);jse=n(Uye,"STRONG",{});var Hrt=s(jse);sgo=r(Hrt,"cvt"),Hrt.forEach(t),lgo=r(Uye," \u2014 "),II=n(Uye,"A",{href:!0});var Urt=s(II);igo=r(Urt,"ConvNextFeatureExtractor"),Urt.forEach(t),dgo=r(Uye," (CvT model)"),Uye.forEach(t),cgo=i(K),Ah=n(K,"LI",{});var Jye=s(Ah);Dse=n(Jye,"STRONG",{});var Jrt=s(Dse);mgo=r(Jrt,"data2vec-audio"),Jrt.forEach(t),fgo=r(Jye," \u2014 "),NI=n(Jye,"A",{href:!0});var Yrt=s(NI);ggo=r(Yrt,"Wav2Vec2FeatureExtractor"),Yrt.forEach(t),hgo=r(Jye," (Data2VecAudio model)"),Jye.forEach(t),ugo=i(K),yh=n(K,"LI",{});var Yye=s(yh);Gse=n(Yye,"STRONG",{});var Krt=s(Gse);pgo=r(Krt,"data2vec-vision"),Krt.forEach(t),_go=r(Yye," \u2014 "),qI=n(Yye,"A",{href:!0});var Zrt=s(qI);bgo=r(Zrt,"BeitFeatureExtractor"),Zrt.forEach(t),vgo=r(Yye," (Data2VecVision model)"),Yye.forEach(t),Fgo=i(K),Lh=n(K,"LI",{});var Kye=s(Lh);Ose=n(Kye,"STRONG",{});var ett=s(Ose);Tgo=r(ett,"deit"),ett.forEach(t),Mgo=r(Kye," \u2014 "),jI=n(Kye,"A",{href:!0});var ott=s(jI);Ego=r(ott,"DeiTFeatureExtractor"),ott.forEach(t),Cgo=r(Kye," (DeiT model)"),Kye.forEach(t),wgo=i(K),xh=n(K,"LI",{});var Zye=s(xh);Vse=n(Zye,"STRONG",{});var rtt=s(Vse);Ago=r(rtt,"detr"),rtt.forEach(t),ygo=r(Zye," \u2014 "),DI=n(Zye,"A",{href:!0});var ttt=s(DI);Lgo=r(ttt,"DetrFeatureExtractor"),ttt.forEach(t),xgo=r(Zye," (DETR model)"),Zye.forEach(t),$go=i(K),$h=n(K,"LI",{});var eLe=s($h);Xse=n(eLe,"STRONG",{});var att=s(Xse);kgo=r(att,"dpt"),att.forEach(t),Sgo=r(eLe," \u2014 "),GI=n(eLe,"A",{href:!0});var ntt=s(GI);Rgo=r(ntt,"DPTFeatureExtractor"),ntt.forEach(t),Pgo=r(eLe," (DPT model)"),eLe.forEach(t),Bgo=i(K),kh=n(K,"LI",{});var oLe=s(kh);zse=n(oLe,"STRONG",{});var stt=s(zse);Igo=r(stt,"flava"),stt.forEach(t),Ngo=r(oLe," \u2014 "),OI=n(oLe,"A",{href:!0});var ltt=s(OI);qgo=r(ltt,"FlavaFeatureExtractor"),ltt.forEach(t),jgo=r(oLe," (FLAVA model)"),oLe.forEach(t),Dgo=i(K),Sh=n(K,"LI",{});var rLe=s(Sh);Wse=n(rLe,"STRONG",{});var itt=s(Wse);Ggo=r(itt,"glpn"),itt.forEach(t),Ogo=r(rLe," \u2014 "),VI=n(rLe,"A",{href:!0});var dtt=s(VI);Vgo=r(dtt,"GLPNFeatureExtractor"),dtt.forEach(t),Xgo=r(rLe," (GLPN model)"),rLe.forEach(t),zgo=i(K),Rh=n(K,"LI",{});var tLe=s(Rh);Qse=n(tLe,"STRONG",{});var ctt=s(Qse);Wgo=r(ctt,"hubert"),ctt.forEach(t),Qgo=r(tLe," \u2014 "),XI=n(tLe,"A",{href:!0});var mtt=s(XI);Hgo=r(mtt,"Wav2Vec2FeatureExtractor"),mtt.forEach(t),Ugo=r(tLe," (Hubert model)"),tLe.forEach(t),Jgo=i(K),Ph=n(K,"LI",{});var aLe=s(Ph);Hse=n(aLe,"STRONG",{});var ftt=s(Hse);Ygo=r(ftt,"imagegpt"),ftt.forEach(t),Kgo=r(aLe," \u2014 "),zI=n(aLe,"A",{href:!0});var gtt=s(zI);Zgo=r(gtt,"ImageGPTFeatureExtractor"),gtt.forEach(t),eho=r(aLe," (ImageGPT model)"),aLe.forEach(t),oho=i(K),Bh=n(K,"LI",{});var nLe=s(Bh);Use=n(nLe,"STRONG",{});var htt=s(Use);rho=r(htt,"layoutlmv2"),htt.forEach(t),tho=r(nLe," \u2014 "),WI=n(nLe,"A",{href:!0});var utt=s(WI);aho=r(utt,"LayoutLMv2FeatureExtractor"),utt.forEach(t),nho=r(nLe," (LayoutLMv2 model)"),nLe.forEach(t),sho=i(K),Ih=n(K,"LI",{});var sLe=s(Ih);Jse=n(sLe,"STRONG",{});var ptt=s(Jse);lho=r(ptt,"layoutlmv3"),ptt.forEach(t),iho=r(sLe," \u2014 "),QI=n(sLe,"A",{href:!0});var _tt=s(QI);dho=r(_tt,"LayoutLMv3FeatureExtractor"),_tt.forEach(t),cho=r(sLe," (LayoutLMv3 model)"),sLe.forEach(t),mho=i(K),Nh=n(K,"LI",{});var lLe=s(Nh);Yse=n(lLe,"STRONG",{});var btt=s(Yse);fho=r(btt,"levit"),btt.forEach(t),gho=r(lLe," \u2014 "),HI=n(lLe,"A",{href:!0});var vtt=s(HI);hho=r(vtt,"LevitFeatureExtractor"),vtt.forEach(t),uho=r(lLe," (LeViT model)"),lLe.forEach(t),pho=i(K),qh=n(K,"LI",{});var iLe=s(qh);Kse=n(iLe,"STRONG",{});var Ftt=s(Kse);_ho=r(Ftt,"maskformer"),Ftt.forEach(t),bho=r(iLe," \u2014 "),UI=n(iLe,"A",{href:!0});var Ttt=s(UI);vho=r(Ttt,"MaskFormerFeatureExtractor"),Ttt.forEach(t),Fho=r(iLe," (MaskFormer model)"),iLe.forEach(t),Tho=i(K),jh=n(K,"LI",{});var dLe=s(jh);Zse=n(dLe,"STRONG",{});var Mtt=s(Zse);Mho=r(Mtt,"mctct"),Mtt.forEach(t),Eho=r(dLe," \u2014 "),JI=n(dLe,"A",{href:!0});var Ett=s(JI);Cho=r(Ett,"MCTCTFeatureExtractor"),Ett.forEach(t),who=r(dLe," (M-CTC-T model)"),dLe.forEach(t),Aho=i(K),Dh=n(K,"LI",{});var cLe=s(Dh);ele=n(cLe,"STRONG",{});var Ctt=s(ele);yho=r(Ctt,"perceiver"),Ctt.forEach(t),Lho=r(cLe," \u2014 "),YI=n(cLe,"A",{href:!0});var wtt=s(YI);xho=r(wtt,"PerceiverFeatureExtractor"),wtt.forEach(t),$ho=r(cLe," (Perceiver model)"),cLe.forEach(t),kho=i(K),Gh=n(K,"LI",{});var mLe=s(Gh);ole=n(mLe,"STRONG",{});var Att=s(ole);Sho=r(Att,"poolformer"),Att.forEach(t),Rho=r(mLe," \u2014 "),KI=n(mLe,"A",{href:!0});var ytt=s(KI);Pho=r(ytt,"PoolFormerFeatureExtractor"),ytt.forEach(t),Bho=r(mLe," (PoolFormer model)"),mLe.forEach(t),Iho=i(K),Oh=n(K,"LI",{});var fLe=s(Oh);rle=n(fLe,"STRONG",{});var Ltt=s(rle);Nho=r(Ltt,"regnet"),Ltt.forEach(t),qho=r(fLe," \u2014 "),ZI=n(fLe,"A",{href:!0});var xtt=s(ZI);jho=r(xtt,"ConvNextFeatureExtractor"),xtt.forEach(t),Dho=r(fLe," (RegNet model)"),fLe.forEach(t),Gho=i(K),Vh=n(K,"LI",{});var gLe=s(Vh);tle=n(gLe,"STRONG",{});var $tt=s(tle);Oho=r($tt,"resnet"),$tt.forEach(t),Vho=r(gLe," \u2014 "),eN=n(gLe,"A",{href:!0});var ktt=s(eN);Xho=r(ktt,"ConvNextFeatureExtractor"),ktt.forEach(t),zho=r(gLe," (ResNet model)"),gLe.forEach(t),Who=i(K),Xh=n(K,"LI",{});var hLe=s(Xh);ale=n(hLe,"STRONG",{});var Stt=s(ale);Qho=r(Stt,"segformer"),Stt.forEach(t),Hho=r(hLe," \u2014 "),oN=n(hLe,"A",{href:!0});var Rtt=s(oN);Uho=r(Rtt,"SegformerFeatureExtractor"),Rtt.forEach(t),Jho=r(hLe," (SegFormer model)"),hLe.forEach(t),Yho=i(K),zh=n(K,"LI",{});var uLe=s(zh);nle=n(uLe,"STRONG",{});var Ptt=s(nle);Kho=r(Ptt,"speech_to_text"),Ptt.forEach(t),Zho=r(uLe," \u2014 "),rN=n(uLe,"A",{href:!0});var Btt=s(rN);euo=r(Btt,"Speech2TextFeatureExtractor"),Btt.forEach(t),ouo=r(uLe," (Speech2Text model)"),uLe.forEach(t),ruo=i(K),Wh=n(K,"LI",{});var pLe=s(Wh);sle=n(pLe,"STRONG",{});var Itt=s(sle);tuo=r(Itt,"swin"),Itt.forEach(t),auo=r(pLe," \u2014 "),tN=n(pLe,"A",{href:!0});var Ntt=s(tN);nuo=r(Ntt,"ViTFeatureExtractor"),Ntt.forEach(t),suo=r(pLe," (Swin Transformer model)"),pLe.forEach(t),luo=i(K),Qh=n(K,"LI",{});var _Le=s(Qh);lle=n(_Le,"STRONG",{});var qtt=s(lle);iuo=r(qtt,"van"),qtt.forEach(t),duo=r(_Le," \u2014 "),aN=n(_Le,"A",{href:!0});var jtt=s(aN);cuo=r(jtt,"ConvNextFeatureExtractor"),jtt.forEach(t),muo=r(_Le," (VAN model)"),_Le.forEach(t),fuo=i(K),Hh=n(K,"LI",{});var bLe=s(Hh);ile=n(bLe,"STRONG",{});var Dtt=s(ile);guo=r(Dtt,"vilt"),Dtt.forEach(t),huo=r(bLe," \u2014 "),nN=n(bLe,"A",{href:!0});var Gtt=s(nN);uuo=r(Gtt,"ViltFeatureExtractor"),Gtt.forEach(t),puo=r(bLe," (ViLT model)"),bLe.forEach(t),_uo=i(K),Uh=n(K,"LI",{});var vLe=s(Uh);dle=n(vLe,"STRONG",{});var Ott=s(dle);buo=r(Ott,"vit"),Ott.forEach(t),vuo=r(vLe," \u2014 "),sN=n(vLe,"A",{href:!0});var Vtt=s(sN);Fuo=r(Vtt,"ViTFeatureExtractor"),Vtt.forEach(t),Tuo=r(vLe," (ViT model)"),vLe.forEach(t),Muo=i(K),Jh=n(K,"LI",{});var FLe=s(Jh);cle=n(FLe,"STRONG",{});var Xtt=s(cle);Euo=r(Xtt,"vit_mae"),Xtt.forEach(t),Cuo=r(FLe," \u2014 "),lN=n(FLe,"A",{href:!0});var ztt=s(lN);wuo=r(ztt,"ViTFeatureExtractor"),ztt.forEach(t),Auo=r(FLe," (ViTMAE model)"),FLe.forEach(t),yuo=i(K),Yh=n(K,"LI",{});var TLe=s(Yh);mle=n(TLe,"STRONG",{});var Wtt=s(mle);Luo=r(Wtt,"wav2vec2"),Wtt.forEach(t),xuo=r(TLe," \u2014 "),iN=n(TLe,"A",{href:!0});var Qtt=s(iN);$uo=r(Qtt,"Wav2Vec2FeatureExtractor"),Qtt.forEach(t),kuo=r(TLe," (Wav2Vec2 model)"),TLe.forEach(t),Suo=i(K),Kh=n(K,"LI",{});var MLe=s(Kh);fle=n(MLe,"STRONG",{});var Htt=s(fle);Ruo=r(Htt,"wav2vec2-conformer"),Htt.forEach(t),Puo=r(MLe," \u2014 "),dN=n(MLe,"A",{href:!0});var Utt=s(dN);Buo=r(Utt,"Wav2Vec2FeatureExtractor"),Utt.forEach(t),Iuo=r(MLe," (Wav2Vec2-Conformer model)"),MLe.forEach(t),Nuo=i(K),Zh=n(K,"LI",{});var ELe=s(Zh);gle=n(ELe,"STRONG",{});var Jtt=s(gle);quo=r(Jtt,"yolos"),Jtt.forEach(t),juo=r(ELe," \u2014 "),cN=n(ELe,"A",{href:!0});var Ytt=s(cN);Duo=r(Ytt,"YolosFeatureExtractor"),Ytt.forEach(t),Guo=r(ELe," (YOLOS model)"),ELe.forEach(t),K.forEach(t),Ouo=i(ra),T(eu.$$.fragment,ra),Vuo=i(ra),T(ou.$$.fragment,ra),ra.forEach(t),Xuo=i(Ws),ru=n(Ws,"DIV",{class:!0});var xOe=s(ru);T(xL.$$.fragment,xOe),zuo=i(xOe),hle=n(xOe,"P",{});var Ktt=s(hle);Wuo=r(Ktt,"Register a new feature extractor for this class."),Ktt.forEach(t),xOe.forEach(t),Ws.forEach(t),ADe=i(m),ki=n(m,"H2",{class:!0});var $Oe=s(ki);tu=n($Oe,"A",{id:!0,class:!0,href:!0});var Ztt=s(tu);ule=n(Ztt,"SPAN",{});var eat=s(ule);T($L.$$.fragment,eat),eat.forEach(t),Ztt.forEach(t),Quo=i($Oe),ple=n($Oe,"SPAN",{});var oat=s(ple);Huo=r(oat,"AutoProcessor"),oat.forEach(t),$Oe.forEach(t),yDe=i(m),Lo=n(m,"DIV",{class:!0});var Qs=s(Lo);T(kL.$$.fragment,Qs),Uuo=i(Qs),SL=n(Qs,"P",{});var kOe=s(SL);Juo=r(kOe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mN=n(kOe,"A",{href:!0});var rat=s(mN);Yuo=r(rat,"AutoProcessor.from_pretrained()"),rat.forEach(t),Kuo=r(kOe," class method."),kOe.forEach(t),Zuo=i(Qs),RL=n(Qs,"P",{});var SOe=s(RL);epo=r(SOe,"This class cannot be instantiated directly using "),_le=n(SOe,"CODE",{});var tat=s(_le);opo=r(tat,"__init__()"),tat.forEach(t),rpo=r(SOe," (throws an error)."),SOe.forEach(t),tpo=i(Qs),Ue=n(Qs,"DIV",{class:!0});var ta=s(Ue);T(PL.$$.fragment,ta),apo=i(ta),ble=n(ta,"P",{});var aat=s(ble);npo=r(aat,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aat.forEach(t),spo=i(ta),Si=n(ta,"P",{});var $ee=s(Si);lpo=r($ee,"The processor class to instantiate is selected based on the "),vle=n($ee,"CODE",{});var nat=s(vle);ipo=r(nat,"model_type"),nat.forEach(t),dpo=r($ee,` property of the config object (either
passed as an argument or loaded from `),Fle=n($ee,"CODE",{});var sat=s(Fle);cpo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),mpo=r($ee," if possible):"),$ee.forEach(t),fpo=i(ta),he=n(ta,"UL",{});var _e=s(he);au=n(_e,"LI",{});var CLe=s(au);Tle=n(CLe,"STRONG",{});var lat=s(Tle);gpo=r(lat,"clip"),lat.forEach(t),hpo=r(CLe," \u2014 "),fN=n(CLe,"A",{href:!0});var iat=s(fN);upo=r(iat,"CLIPProcessor"),iat.forEach(t),ppo=r(CLe," (CLIP model)"),CLe.forEach(t),_po=i(_e),nu=n(_e,"LI",{});var wLe=s(nu);Mle=n(wLe,"STRONG",{});var dat=s(Mle);bpo=r(dat,"flava"),dat.forEach(t),vpo=r(wLe," \u2014 "),Ele=n(wLe,"CODE",{});var cat=s(Ele);Fpo=r(cat,"FLAVAProcessor"),cat.forEach(t),Tpo=r(wLe," (FLAVA model)"),wLe.forEach(t),Mpo=i(_e),su=n(_e,"LI",{});var ALe=s(su);Cle=n(ALe,"STRONG",{});var mat=s(Cle);Epo=r(mat,"layoutlmv2"),mat.forEach(t),Cpo=r(ALe," \u2014 "),gN=n(ALe,"A",{href:!0});var fat=s(gN);wpo=r(fat,"LayoutLMv2Processor"),fat.forEach(t),Apo=r(ALe," (LayoutLMv2 model)"),ALe.forEach(t),ypo=i(_e),lu=n(_e,"LI",{});var yLe=s(lu);wle=n(yLe,"STRONG",{});var gat=s(wle);Lpo=r(gat,"layoutlmv3"),gat.forEach(t),xpo=r(yLe," \u2014 "),hN=n(yLe,"A",{href:!0});var hat=s(hN);$po=r(hat,"LayoutLMv3Processor"),hat.forEach(t),kpo=r(yLe," (LayoutLMv3 model)"),yLe.forEach(t),Spo=i(_e),iu=n(_e,"LI",{});var LLe=s(iu);Ale=n(LLe,"STRONG",{});var uat=s(Ale);Rpo=r(uat,"layoutxlm"),uat.forEach(t),Ppo=r(LLe," \u2014 "),uN=n(LLe,"A",{href:!0});var pat=s(uN);Bpo=r(pat,"LayoutXLMProcessor"),pat.forEach(t),Ipo=r(LLe," (LayoutXLM model)"),LLe.forEach(t),Npo=i(_e),du=n(_e,"LI",{});var xLe=s(du);yle=n(xLe,"STRONG",{});var _at=s(yle);qpo=r(_at,"sew"),_at.forEach(t),jpo=r(xLe," \u2014 "),pN=n(xLe,"A",{href:!0});var bat=s(pN);Dpo=r(bat,"Wav2Vec2Processor"),bat.forEach(t),Gpo=r(xLe," (SEW model)"),xLe.forEach(t),Opo=i(_e),cu=n(_e,"LI",{});var $Le=s(cu);Lle=n($Le,"STRONG",{});var vat=s(Lle);Vpo=r(vat,"sew-d"),vat.forEach(t),Xpo=r($Le," \u2014 "),_N=n($Le,"A",{href:!0});var Fat=s(_N);zpo=r(Fat,"Wav2Vec2Processor"),Fat.forEach(t),Wpo=r($Le," (SEW-D model)"),$Le.forEach(t),Qpo=i(_e),mu=n(_e,"LI",{});var kLe=s(mu);xle=n(kLe,"STRONG",{});var Tat=s(xle);Hpo=r(Tat,"speech_to_text"),Tat.forEach(t),Upo=r(kLe," \u2014 "),bN=n(kLe,"A",{href:!0});var Mat=s(bN);Jpo=r(Mat,"Speech2TextProcessor"),Mat.forEach(t),Ypo=r(kLe," (Speech2Text model)"),kLe.forEach(t),Kpo=i(_e),fu=n(_e,"LI",{});var SLe=s(fu);$le=n(SLe,"STRONG",{});var Eat=s($le);Zpo=r(Eat,"speech_to_text_2"),Eat.forEach(t),e_o=r(SLe," \u2014 "),vN=n(SLe,"A",{href:!0});var Cat=s(vN);o_o=r(Cat,"Speech2Text2Processor"),Cat.forEach(t),r_o=r(SLe," (Speech2Text2 model)"),SLe.forEach(t),t_o=i(_e),gu=n(_e,"LI",{});var RLe=s(gu);kle=n(RLe,"STRONG",{});var wat=s(kle);a_o=r(wat,"trocr"),wat.forEach(t),n_o=r(RLe," \u2014 "),FN=n(RLe,"A",{href:!0});var Aat=s(FN);s_o=r(Aat,"TrOCRProcessor"),Aat.forEach(t),l_o=r(RLe," (TrOCR model)"),RLe.forEach(t),i_o=i(_e),hu=n(_e,"LI",{});var PLe=s(hu);Sle=n(PLe,"STRONG",{});var yat=s(Sle);d_o=r(yat,"unispeech"),yat.forEach(t),c_o=r(PLe," \u2014 "),TN=n(PLe,"A",{href:!0});var Lat=s(TN);m_o=r(Lat,"Wav2Vec2Processor"),Lat.forEach(t),f_o=r(PLe," (UniSpeech model)"),PLe.forEach(t),g_o=i(_e),uu=n(_e,"LI",{});var BLe=s(uu);Rle=n(BLe,"STRONG",{});var xat=s(Rle);h_o=r(xat,"unispeech-sat"),xat.forEach(t),u_o=r(BLe," \u2014 "),MN=n(BLe,"A",{href:!0});var $at=s(MN);p_o=r($at,"Wav2Vec2Processor"),$at.forEach(t),__o=r(BLe," (UniSpeechSat model)"),BLe.forEach(t),b_o=i(_e),pu=n(_e,"LI",{});var ILe=s(pu);Ple=n(ILe,"STRONG",{});var kat=s(Ple);v_o=r(kat,"vilt"),kat.forEach(t),F_o=r(ILe," \u2014 "),EN=n(ILe,"A",{href:!0});var Sat=s(EN);T_o=r(Sat,"ViltProcessor"),Sat.forEach(t),M_o=r(ILe," (ViLT model)"),ILe.forEach(t),E_o=i(_e),_u=n(_e,"LI",{});var NLe=s(_u);Ble=n(NLe,"STRONG",{});var Rat=s(Ble);C_o=r(Rat,"vision-text-dual-encoder"),Rat.forEach(t),w_o=r(NLe," \u2014 "),CN=n(NLe,"A",{href:!0});var Pat=s(CN);A_o=r(Pat,"VisionTextDualEncoderProcessor"),Pat.forEach(t),y_o=r(NLe," (VisionTextDualEncoder model)"),NLe.forEach(t),L_o=i(_e),bu=n(_e,"LI",{});var qLe=s(bu);Ile=n(qLe,"STRONG",{});var Bat=s(Ile);x_o=r(Bat,"wav2vec2"),Bat.forEach(t),$_o=r(qLe," \u2014 "),wN=n(qLe,"A",{href:!0});var Iat=s(wN);k_o=r(Iat,"Wav2Vec2Processor"),Iat.forEach(t),S_o=r(qLe," (Wav2Vec2 model)"),qLe.forEach(t),R_o=i(_e),vu=n(_e,"LI",{});var jLe=s(vu);Nle=n(jLe,"STRONG",{});var Nat=s(Nle);P_o=r(Nat,"wav2vec2-conformer"),Nat.forEach(t),B_o=r(jLe," \u2014 "),AN=n(jLe,"A",{href:!0});var qat=s(AN);I_o=r(qat,"Wav2Vec2Processor"),qat.forEach(t),N_o=r(jLe," (Wav2Vec2-Conformer model)"),jLe.forEach(t),q_o=i(_e),Fu=n(_e,"LI",{});var DLe=s(Fu);qle=n(DLe,"STRONG",{});var jat=s(qle);j_o=r(jat,"wavlm"),jat.forEach(t),D_o=r(DLe," \u2014 "),yN=n(DLe,"A",{href:!0});var Dat=s(yN);G_o=r(Dat,"Wav2Vec2Processor"),Dat.forEach(t),O_o=r(DLe," (WavLM model)"),DLe.forEach(t),_e.forEach(t),V_o=i(ta),T(Tu.$$.fragment,ta),X_o=i(ta),T(Mu.$$.fragment,ta),ta.forEach(t),z_o=i(Qs),Eu=n(Qs,"DIV",{class:!0});var ROe=s(Eu);T(BL.$$.fragment,ROe),W_o=i(ROe),jle=n(ROe,"P",{});var Gat=s(jle);Q_o=r(Gat,"Register a new processor for this class."),Gat.forEach(t),ROe.forEach(t),Qs.forEach(t),LDe=i(m),Ri=n(m,"H2",{class:!0});var POe=s(Ri);Cu=n(POe,"A",{id:!0,class:!0,href:!0});var Oat=s(Cu);Dle=n(Oat,"SPAN",{});var Vat=s(Dle);T(IL.$$.fragment,Vat),Vat.forEach(t),Oat.forEach(t),H_o=i(POe),Gle=n(POe,"SPAN",{});var Xat=s(Gle);U_o=r(Xat,"AutoModel"),Xat.forEach(t),POe.forEach(t),xDe=i(m),xo=n(m,"DIV",{class:!0});var Hs=s(xo);T(NL.$$.fragment,Hs),J_o=i(Hs),Pi=n(Hs,"P",{});var kee=s(Pi);Y_o=r(kee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),LN=n(kee,"A",{href:!0});var zat=s(LN);K_o=r(zat,"from_pretrained()"),zat.forEach(t),Z_o=r(kee," class method or the "),xN=n(kee,"A",{href:!0});var Wat=s(xN);ebo=r(Wat,"from_config()"),Wat.forEach(t),obo=r(kee,` class
method.`),kee.forEach(t),rbo=i(Hs),qL=n(Hs,"P",{});var BOe=s(qL);tbo=r(BOe,"This class cannot be instantiated directly using "),Ole=n(BOe,"CODE",{});var Qat=s(Ole);abo=r(Qat,"__init__()"),Qat.forEach(t),nbo=r(BOe," (throws an error)."),BOe.forEach(t),sbo=i(Hs),nt=n(Hs,"DIV",{class:!0});var f6=s(nt);T(jL.$$.fragment,f6),lbo=i(f6),Vle=n(f6,"P",{});var Hat=s(Vle);ibo=r(Hat,"Instantiates one of the base model classes of the library from a configuration."),Hat.forEach(t),dbo=i(f6),Bi=n(f6,"P",{});var See=s(Bi);cbo=r(See,`Note:
Loading a model from its configuration file does `),Xle=n(See,"STRONG",{});var Uat=s(Xle);mbo=r(Uat,"not"),Uat.forEach(t),fbo=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(See,"A",{href:!0});var Jat=s($N);gbo=r(Jat,"from_pretrained()"),Jat.forEach(t),hbo=r(See," to load the model weights."),See.forEach(t),ubo=i(f6),T(wu.$$.fragment,f6),f6.forEach(t),pbo=i(Hs),Je=n(Hs,"DIV",{class:!0});var aa=s(Je);T(DL.$$.fragment,aa),_bo=i(aa),zle=n(aa,"P",{});var Yat=s(zle);bbo=r(Yat,"Instantiate one of the base model classes of the library from a pretrained model."),Yat.forEach(t),vbo=i(aa),Sa=n(aa,"P",{});var g6=s(Sa);Fbo=r(g6,"The model class to instantiate is selected based on the "),Wle=n(g6,"CODE",{});var Kat=s(Wle);Tbo=r(Kat,"model_type"),Kat.forEach(t),Mbo=r(g6,` property of the config object (either
passed as an argument or loaded from `),Qle=n(g6,"CODE",{});var Zat=s(Qle);Ebo=r(Zat,"pretrained_model_name_or_path"),Zat.forEach(t),Cbo=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hle=n(g6,"CODE",{});var ent=s(Hle);wbo=r(ent,"pretrained_model_name_or_path"),ent.forEach(t),Abo=r(g6,":"),g6.forEach(t),ybo=i(aa),x=n(aa,"UL",{});var $=s(x);Au=n($,"LI",{});var GLe=s(Au);Ule=n(GLe,"STRONG",{});var ont=s(Ule);Lbo=r(ont,"albert"),ont.forEach(t),xbo=r(GLe," \u2014 "),kN=n(GLe,"A",{href:!0});var rnt=s(kN);$bo=r(rnt,"AlbertModel"),rnt.forEach(t),kbo=r(GLe," (ALBERT model)"),GLe.forEach(t),Sbo=i($),yu=n($,"LI",{});var OLe=s(yu);Jle=n(OLe,"STRONG",{});var tnt=s(Jle);Rbo=r(tnt,"bart"),tnt.forEach(t),Pbo=r(OLe," \u2014 "),SN=n(OLe,"A",{href:!0});var ant=s(SN);Bbo=r(ant,"BartModel"),ant.forEach(t),Ibo=r(OLe," (BART model)"),OLe.forEach(t),Nbo=i($),Lu=n($,"LI",{});var VLe=s(Lu);Yle=n(VLe,"STRONG",{});var nnt=s(Yle);qbo=r(nnt,"beit"),nnt.forEach(t),jbo=r(VLe," \u2014 "),RN=n(VLe,"A",{href:!0});var snt=s(RN);Dbo=r(snt,"BeitModel"),snt.forEach(t),Gbo=r(VLe," (BEiT model)"),VLe.forEach(t),Obo=i($),xu=n($,"LI",{});var XLe=s(xu);Kle=n(XLe,"STRONG",{});var lnt=s(Kle);Vbo=r(lnt,"bert"),lnt.forEach(t),Xbo=r(XLe," \u2014 "),PN=n(XLe,"A",{href:!0});var int=s(PN);zbo=r(int,"BertModel"),int.forEach(t),Wbo=r(XLe," (BERT model)"),XLe.forEach(t),Qbo=i($),$u=n($,"LI",{});var zLe=s($u);Zle=n(zLe,"STRONG",{});var dnt=s(Zle);Hbo=r(dnt,"bert-generation"),dnt.forEach(t),Ubo=r(zLe," \u2014 "),BN=n(zLe,"A",{href:!0});var cnt=s(BN);Jbo=r(cnt,"BertGenerationEncoder"),cnt.forEach(t),Ybo=r(zLe," (Bert Generation model)"),zLe.forEach(t),Kbo=i($),ku=n($,"LI",{});var WLe=s(ku);eie=n(WLe,"STRONG",{});var mnt=s(eie);Zbo=r(mnt,"big_bird"),mnt.forEach(t),e2o=r(WLe," \u2014 "),IN=n(WLe,"A",{href:!0});var fnt=s(IN);o2o=r(fnt,"BigBirdModel"),fnt.forEach(t),r2o=r(WLe," (BigBird model)"),WLe.forEach(t),t2o=i($),Su=n($,"LI",{});var QLe=s(Su);oie=n(QLe,"STRONG",{});var gnt=s(oie);a2o=r(gnt,"bigbird_pegasus"),gnt.forEach(t),n2o=r(QLe," \u2014 "),NN=n(QLe,"A",{href:!0});var hnt=s(NN);s2o=r(hnt,"BigBirdPegasusModel"),hnt.forEach(t),l2o=r(QLe," (BigBird-Pegasus model)"),QLe.forEach(t),i2o=i($),Ru=n($,"LI",{});var HLe=s(Ru);rie=n(HLe,"STRONG",{});var unt=s(rie);d2o=r(unt,"blenderbot"),unt.forEach(t),c2o=r(HLe," \u2014 "),qN=n(HLe,"A",{href:!0});var pnt=s(qN);m2o=r(pnt,"BlenderbotModel"),pnt.forEach(t),f2o=r(HLe," (Blenderbot model)"),HLe.forEach(t),g2o=i($),Pu=n($,"LI",{});var ULe=s(Pu);tie=n(ULe,"STRONG",{});var _nt=s(tie);h2o=r(_nt,"blenderbot-small"),_nt.forEach(t),u2o=r(ULe," \u2014 "),jN=n(ULe,"A",{href:!0});var bnt=s(jN);p2o=r(bnt,"BlenderbotSmallModel"),bnt.forEach(t),_2o=r(ULe," (BlenderbotSmall model)"),ULe.forEach(t),b2o=i($),Bu=n($,"LI",{});var JLe=s(Bu);aie=n(JLe,"STRONG",{});var vnt=s(aie);v2o=r(vnt,"bloom"),vnt.forEach(t),F2o=r(JLe," \u2014 "),DN=n(JLe,"A",{href:!0});var Fnt=s(DN);T2o=r(Fnt,"BloomModel"),Fnt.forEach(t),M2o=r(JLe," (BLOOM model)"),JLe.forEach(t),E2o=i($),Iu=n($,"LI",{});var YLe=s(Iu);nie=n(YLe,"STRONG",{});var Tnt=s(nie);C2o=r(Tnt,"camembert"),Tnt.forEach(t),w2o=r(YLe," \u2014 "),GN=n(YLe,"A",{href:!0});var Mnt=s(GN);A2o=r(Mnt,"CamembertModel"),Mnt.forEach(t),y2o=r(YLe," (CamemBERT model)"),YLe.forEach(t),L2o=i($),Nu=n($,"LI",{});var KLe=s(Nu);sie=n(KLe,"STRONG",{});var Ent=s(sie);x2o=r(Ent,"canine"),Ent.forEach(t),$2o=r(KLe," \u2014 "),ON=n(KLe,"A",{href:!0});var Cnt=s(ON);k2o=r(Cnt,"CanineModel"),Cnt.forEach(t),S2o=r(KLe," (CANINE model)"),KLe.forEach(t),R2o=i($),qu=n($,"LI",{});var ZLe=s(qu);lie=n(ZLe,"STRONG",{});var wnt=s(lie);P2o=r(wnt,"clip"),wnt.forEach(t),B2o=r(ZLe," \u2014 "),VN=n(ZLe,"A",{href:!0});var Ant=s(VN);I2o=r(Ant,"CLIPModel"),Ant.forEach(t),N2o=r(ZLe," (CLIP model)"),ZLe.forEach(t),q2o=i($),ju=n($,"LI",{});var e7e=s(ju);iie=n(e7e,"STRONG",{});var ynt=s(iie);j2o=r(ynt,"convbert"),ynt.forEach(t),D2o=r(e7e," \u2014 "),XN=n(e7e,"A",{href:!0});var Lnt=s(XN);G2o=r(Lnt,"ConvBertModel"),Lnt.forEach(t),O2o=r(e7e," (ConvBERT model)"),e7e.forEach(t),V2o=i($),Du=n($,"LI",{});var o7e=s(Du);die=n(o7e,"STRONG",{});var xnt=s(die);X2o=r(xnt,"convnext"),xnt.forEach(t),z2o=r(o7e," \u2014 "),zN=n(o7e,"A",{href:!0});var $nt=s(zN);W2o=r($nt,"ConvNextModel"),$nt.forEach(t),Q2o=r(o7e," (ConvNeXT model)"),o7e.forEach(t),H2o=i($),Gu=n($,"LI",{});var r7e=s(Gu);cie=n(r7e,"STRONG",{});var knt=s(cie);U2o=r(knt,"ctrl"),knt.forEach(t),J2o=r(r7e," \u2014 "),WN=n(r7e,"A",{href:!0});var Snt=s(WN);Y2o=r(Snt,"CTRLModel"),Snt.forEach(t),K2o=r(r7e," (CTRL model)"),r7e.forEach(t),Z2o=i($),Ou=n($,"LI",{});var t7e=s(Ou);mie=n(t7e,"STRONG",{});var Rnt=s(mie);evo=r(Rnt,"cvt"),Rnt.forEach(t),ovo=r(t7e," \u2014 "),QN=n(t7e,"A",{href:!0});var Pnt=s(QN);rvo=r(Pnt,"CvtModel"),Pnt.forEach(t),tvo=r(t7e," (CvT model)"),t7e.forEach(t),avo=i($),Vu=n($,"LI",{});var a7e=s(Vu);fie=n(a7e,"STRONG",{});var Bnt=s(fie);nvo=r(Bnt,"data2vec-audio"),Bnt.forEach(t),svo=r(a7e," \u2014 "),HN=n(a7e,"A",{href:!0});var Int=s(HN);lvo=r(Int,"Data2VecAudioModel"),Int.forEach(t),ivo=r(a7e," (Data2VecAudio model)"),a7e.forEach(t),dvo=i($),Xu=n($,"LI",{});var n7e=s(Xu);gie=n(n7e,"STRONG",{});var Nnt=s(gie);cvo=r(Nnt,"data2vec-text"),Nnt.forEach(t),mvo=r(n7e," \u2014 "),UN=n(n7e,"A",{href:!0});var qnt=s(UN);fvo=r(qnt,"Data2VecTextModel"),qnt.forEach(t),gvo=r(n7e," (Data2VecText model)"),n7e.forEach(t),hvo=i($),zu=n($,"LI",{});var s7e=s(zu);hie=n(s7e,"STRONG",{});var jnt=s(hie);uvo=r(jnt,"data2vec-vision"),jnt.forEach(t),pvo=r(s7e," \u2014 "),JN=n(s7e,"A",{href:!0});var Dnt=s(JN);_vo=r(Dnt,"Data2VecVisionModel"),Dnt.forEach(t),bvo=r(s7e," (Data2VecVision model)"),s7e.forEach(t),vvo=i($),Wu=n($,"LI",{});var l7e=s(Wu);uie=n(l7e,"STRONG",{});var Gnt=s(uie);Fvo=r(Gnt,"deberta"),Gnt.forEach(t),Tvo=r(l7e," \u2014 "),YN=n(l7e,"A",{href:!0});var Ont=s(YN);Mvo=r(Ont,"DebertaModel"),Ont.forEach(t),Evo=r(l7e," (DeBERTa model)"),l7e.forEach(t),Cvo=i($),Qu=n($,"LI",{});var i7e=s(Qu);pie=n(i7e,"STRONG",{});var Vnt=s(pie);wvo=r(Vnt,"deberta-v2"),Vnt.forEach(t),Avo=r(i7e," \u2014 "),KN=n(i7e,"A",{href:!0});var Xnt=s(KN);yvo=r(Xnt,"DebertaV2Model"),Xnt.forEach(t),Lvo=r(i7e," (DeBERTa-v2 model)"),i7e.forEach(t),xvo=i($),Hu=n($,"LI",{});var d7e=s(Hu);_ie=n(d7e,"STRONG",{});var znt=s(_ie);$vo=r(znt,"decision_transformer"),znt.forEach(t),kvo=r(d7e," \u2014 "),ZN=n(d7e,"A",{href:!0});var Wnt=s(ZN);Svo=r(Wnt,"DecisionTransformerModel"),Wnt.forEach(t),Rvo=r(d7e," (Decision Transformer model)"),d7e.forEach(t),Pvo=i($),Uu=n($,"LI",{});var c7e=s(Uu);bie=n(c7e,"STRONG",{});var Qnt=s(bie);Bvo=r(Qnt,"deit"),Qnt.forEach(t),Ivo=r(c7e," \u2014 "),eq=n(c7e,"A",{href:!0});var Hnt=s(eq);Nvo=r(Hnt,"DeiTModel"),Hnt.forEach(t),qvo=r(c7e," (DeiT model)"),c7e.forEach(t),jvo=i($),Ju=n($,"LI",{});var m7e=s(Ju);vie=n(m7e,"STRONG",{});var Unt=s(vie);Dvo=r(Unt,"detr"),Unt.forEach(t),Gvo=r(m7e," \u2014 "),oq=n(m7e,"A",{href:!0});var Jnt=s(oq);Ovo=r(Jnt,"DetrModel"),Jnt.forEach(t),Vvo=r(m7e," (DETR model)"),m7e.forEach(t),Xvo=i($),Yu=n($,"LI",{});var f7e=s(Yu);Fie=n(f7e,"STRONG",{});var Ynt=s(Fie);zvo=r(Ynt,"distilbert"),Ynt.forEach(t),Wvo=r(f7e," \u2014 "),rq=n(f7e,"A",{href:!0});var Knt=s(rq);Qvo=r(Knt,"DistilBertModel"),Knt.forEach(t),Hvo=r(f7e," (DistilBERT model)"),f7e.forEach(t),Uvo=i($),Ku=n($,"LI",{});var g7e=s(Ku);Tie=n(g7e,"STRONG",{});var Znt=s(Tie);Jvo=r(Znt,"dpr"),Znt.forEach(t),Yvo=r(g7e," \u2014 "),tq=n(g7e,"A",{href:!0});var est=s(tq);Kvo=r(est,"DPRQuestionEncoder"),est.forEach(t),Zvo=r(g7e," (DPR model)"),g7e.forEach(t),eFo=i($),Zu=n($,"LI",{});var h7e=s(Zu);Mie=n(h7e,"STRONG",{});var ost=s(Mie);oFo=r(ost,"dpt"),ost.forEach(t),rFo=r(h7e," \u2014 "),aq=n(h7e,"A",{href:!0});var rst=s(aq);tFo=r(rst,"DPTModel"),rst.forEach(t),aFo=r(h7e," (DPT model)"),h7e.forEach(t),nFo=i($),ep=n($,"LI",{});var u7e=s(ep);Eie=n(u7e,"STRONG",{});var tst=s(Eie);sFo=r(tst,"electra"),tst.forEach(t),lFo=r(u7e," \u2014 "),nq=n(u7e,"A",{href:!0});var ast=s(nq);iFo=r(ast,"ElectraModel"),ast.forEach(t),dFo=r(u7e," (ELECTRA model)"),u7e.forEach(t),cFo=i($),op=n($,"LI",{});var p7e=s(op);Cie=n(p7e,"STRONG",{});var nst=s(Cie);mFo=r(nst,"flaubert"),nst.forEach(t),fFo=r(p7e," \u2014 "),sq=n(p7e,"A",{href:!0});var sst=s(sq);gFo=r(sst,"FlaubertModel"),sst.forEach(t),hFo=r(p7e," (FlauBERT model)"),p7e.forEach(t),uFo=i($),rp=n($,"LI",{});var _7e=s(rp);wie=n(_7e,"STRONG",{});var lst=s(wie);pFo=r(lst,"flava"),lst.forEach(t),_Fo=r(_7e," \u2014 "),lq=n(_7e,"A",{href:!0});var ist=s(lq);bFo=r(ist,"FlavaModel"),ist.forEach(t),vFo=r(_7e," (FLAVA model)"),_7e.forEach(t),FFo=i($),tp=n($,"LI",{});var b7e=s(tp);Aie=n(b7e,"STRONG",{});var dst=s(Aie);TFo=r(dst,"fnet"),dst.forEach(t),MFo=r(b7e," \u2014 "),iq=n(b7e,"A",{href:!0});var cst=s(iq);EFo=r(cst,"FNetModel"),cst.forEach(t),CFo=r(b7e," (FNet model)"),b7e.forEach(t),wFo=i($),ap=n($,"LI",{});var v7e=s(ap);yie=n(v7e,"STRONG",{});var mst=s(yie);AFo=r(mst,"fsmt"),mst.forEach(t),yFo=r(v7e," \u2014 "),dq=n(v7e,"A",{href:!0});var fst=s(dq);LFo=r(fst,"FSMTModel"),fst.forEach(t),xFo=r(v7e," (FairSeq Machine-Translation model)"),v7e.forEach(t),$Fo=i($),Ds=n($,"LI",{});var kk=s(Ds);Lie=n(kk,"STRONG",{});var gst=s(Lie);kFo=r(gst,"funnel"),gst.forEach(t),SFo=r(kk," \u2014 "),cq=n(kk,"A",{href:!0});var hst=s(cq);RFo=r(hst,"FunnelModel"),hst.forEach(t),PFo=r(kk," or "),mq=n(kk,"A",{href:!0});var ust=s(mq);BFo=r(ust,"FunnelBaseModel"),ust.forEach(t),IFo=r(kk," (Funnel Transformer model)"),kk.forEach(t),NFo=i($),np=n($,"LI",{});var F7e=s(np);xie=n(F7e,"STRONG",{});var pst=s(xie);qFo=r(pst,"glpn"),pst.forEach(t),jFo=r(F7e," \u2014 "),fq=n(F7e,"A",{href:!0});var _st=s(fq);DFo=r(_st,"GLPNModel"),_st.forEach(t),GFo=r(F7e," (GLPN model)"),F7e.forEach(t),OFo=i($),sp=n($,"LI",{});var T7e=s(sp);$ie=n(T7e,"STRONG",{});var bst=s($ie);VFo=r(bst,"gpt2"),bst.forEach(t),XFo=r(T7e," \u2014 "),gq=n(T7e,"A",{href:!0});var vst=s(gq);zFo=r(vst,"GPT2Model"),vst.forEach(t),WFo=r(T7e," (OpenAI GPT-2 model)"),T7e.forEach(t),QFo=i($),lp=n($,"LI",{});var M7e=s(lp);kie=n(M7e,"STRONG",{});var Fst=s(kie);HFo=r(Fst,"gpt_neo"),Fst.forEach(t),UFo=r(M7e," \u2014 "),hq=n(M7e,"A",{href:!0});var Tst=s(hq);JFo=r(Tst,"GPTNeoModel"),Tst.forEach(t),YFo=r(M7e," (GPT Neo model)"),M7e.forEach(t),KFo=i($),ip=n($,"LI",{});var E7e=s(ip);Sie=n(E7e,"STRONG",{});var Mst=s(Sie);ZFo=r(Mst,"gpt_neox"),Mst.forEach(t),e1o=r(E7e," \u2014 "),uq=n(E7e,"A",{href:!0});var Est=s(uq);o1o=r(Est,"GPTNeoXModel"),Est.forEach(t),r1o=r(E7e," (GPT NeoX model)"),E7e.forEach(t),t1o=i($),dp=n($,"LI",{});var C7e=s(dp);Rie=n(C7e,"STRONG",{});var Cst=s(Rie);a1o=r(Cst,"gptj"),Cst.forEach(t),n1o=r(C7e," \u2014 "),pq=n(C7e,"A",{href:!0});var wst=s(pq);s1o=r(wst,"GPTJModel"),wst.forEach(t),l1o=r(C7e," (GPT-J model)"),C7e.forEach(t),i1o=i($),cp=n($,"LI",{});var w7e=s(cp);Pie=n(w7e,"STRONG",{});var Ast=s(Pie);d1o=r(Ast,"hubert"),Ast.forEach(t),c1o=r(w7e," \u2014 "),_q=n(w7e,"A",{href:!0});var yst=s(_q);m1o=r(yst,"HubertModel"),yst.forEach(t),f1o=r(w7e," (Hubert model)"),w7e.forEach(t),g1o=i($),mp=n($,"LI",{});var A7e=s(mp);Bie=n(A7e,"STRONG",{});var Lst=s(Bie);h1o=r(Lst,"ibert"),Lst.forEach(t),u1o=r(A7e," \u2014 "),bq=n(A7e,"A",{href:!0});var xst=s(bq);p1o=r(xst,"IBertModel"),xst.forEach(t),_1o=r(A7e," (I-BERT model)"),A7e.forEach(t),b1o=i($),fp=n($,"LI",{});var y7e=s(fp);Iie=n(y7e,"STRONG",{});var $st=s(Iie);v1o=r($st,"imagegpt"),$st.forEach(t),F1o=r(y7e," \u2014 "),vq=n(y7e,"A",{href:!0});var kst=s(vq);T1o=r(kst,"ImageGPTModel"),kst.forEach(t),M1o=r(y7e," (ImageGPT model)"),y7e.forEach(t),E1o=i($),gp=n($,"LI",{});var L7e=s(gp);Nie=n(L7e,"STRONG",{});var Sst=s(Nie);C1o=r(Sst,"layoutlm"),Sst.forEach(t),w1o=r(L7e," \u2014 "),Fq=n(L7e,"A",{href:!0});var Rst=s(Fq);A1o=r(Rst,"LayoutLMModel"),Rst.forEach(t),y1o=r(L7e," (LayoutLM model)"),L7e.forEach(t),L1o=i($),hp=n($,"LI",{});var x7e=s(hp);qie=n(x7e,"STRONG",{});var Pst=s(qie);x1o=r(Pst,"layoutlmv2"),Pst.forEach(t),$1o=r(x7e," \u2014 "),Tq=n(x7e,"A",{href:!0});var Bst=s(Tq);k1o=r(Bst,"LayoutLMv2Model"),Bst.forEach(t),S1o=r(x7e," (LayoutLMv2 model)"),x7e.forEach(t),R1o=i($),up=n($,"LI",{});var $7e=s(up);jie=n($7e,"STRONG",{});var Ist=s(jie);P1o=r(Ist,"layoutlmv3"),Ist.forEach(t),B1o=r($7e," \u2014 "),Mq=n($7e,"A",{href:!0});var Nst=s(Mq);I1o=r(Nst,"LayoutLMv3Model"),Nst.forEach(t),N1o=r($7e," (LayoutLMv3 model)"),$7e.forEach(t),q1o=i($),pp=n($,"LI",{});var k7e=s(pp);Die=n(k7e,"STRONG",{});var qst=s(Die);j1o=r(qst,"led"),qst.forEach(t),D1o=r(k7e," \u2014 "),Eq=n(k7e,"A",{href:!0});var jst=s(Eq);G1o=r(jst,"LEDModel"),jst.forEach(t),O1o=r(k7e," (LED model)"),k7e.forEach(t),V1o=i($),_p=n($,"LI",{});var S7e=s(_p);Gie=n(S7e,"STRONG",{});var Dst=s(Gie);X1o=r(Dst,"levit"),Dst.forEach(t),z1o=r(S7e," \u2014 "),Cq=n(S7e,"A",{href:!0});var Gst=s(Cq);W1o=r(Gst,"LevitModel"),Gst.forEach(t),Q1o=r(S7e," (LeViT model)"),S7e.forEach(t),H1o=i($),bp=n($,"LI",{});var R7e=s(bp);Oie=n(R7e,"STRONG",{});var Ost=s(Oie);U1o=r(Ost,"longformer"),Ost.forEach(t),J1o=r(R7e," \u2014 "),wq=n(R7e,"A",{href:!0});var Vst=s(wq);Y1o=r(Vst,"LongformerModel"),Vst.forEach(t),K1o=r(R7e," (Longformer model)"),R7e.forEach(t),Z1o=i($),vp=n($,"LI",{});var P7e=s(vp);Vie=n(P7e,"STRONG",{});var Xst=s(Vie);eTo=r(Xst,"luke"),Xst.forEach(t),oTo=r(P7e," \u2014 "),Aq=n(P7e,"A",{href:!0});var zst=s(Aq);rTo=r(zst,"LukeModel"),zst.forEach(t),tTo=r(P7e," (LUKE model)"),P7e.forEach(t),aTo=i($),Fp=n($,"LI",{});var B7e=s(Fp);Xie=n(B7e,"STRONG",{});var Wst=s(Xie);nTo=r(Wst,"lxmert"),Wst.forEach(t),sTo=r(B7e," \u2014 "),yq=n(B7e,"A",{href:!0});var Qst=s(yq);lTo=r(Qst,"LxmertModel"),Qst.forEach(t),iTo=r(B7e," (LXMERT model)"),B7e.forEach(t),dTo=i($),Tp=n($,"LI",{});var I7e=s(Tp);zie=n(I7e,"STRONG",{});var Hst=s(zie);cTo=r(Hst,"m2m_100"),Hst.forEach(t),mTo=r(I7e," \u2014 "),Lq=n(I7e,"A",{href:!0});var Ust=s(Lq);fTo=r(Ust,"M2M100Model"),Ust.forEach(t),gTo=r(I7e," (M2M100 model)"),I7e.forEach(t),hTo=i($),Mp=n($,"LI",{});var N7e=s(Mp);Wie=n(N7e,"STRONG",{});var Jst=s(Wie);uTo=r(Jst,"marian"),Jst.forEach(t),pTo=r(N7e," \u2014 "),xq=n(N7e,"A",{href:!0});var Yst=s(xq);_To=r(Yst,"MarianModel"),Yst.forEach(t),bTo=r(N7e," (Marian model)"),N7e.forEach(t),vTo=i($),Ep=n($,"LI",{});var q7e=s(Ep);Qie=n(q7e,"STRONG",{});var Kst=s(Qie);FTo=r(Kst,"maskformer"),Kst.forEach(t),TTo=r(q7e," \u2014 "),$q=n(q7e,"A",{href:!0});var Zst=s($q);MTo=r(Zst,"MaskFormerModel"),Zst.forEach(t),ETo=r(q7e," (MaskFormer model)"),q7e.forEach(t),CTo=i($),Cp=n($,"LI",{});var j7e=s(Cp);Hie=n(j7e,"STRONG",{});var elt=s(Hie);wTo=r(elt,"mbart"),elt.forEach(t),ATo=r(j7e," \u2014 "),kq=n(j7e,"A",{href:!0});var olt=s(kq);yTo=r(olt,"MBartModel"),olt.forEach(t),LTo=r(j7e," (mBART model)"),j7e.forEach(t),xTo=i($),wp=n($,"LI",{});var D7e=s(wp);Uie=n(D7e,"STRONG",{});var rlt=s(Uie);$To=r(rlt,"mctct"),rlt.forEach(t),kTo=r(D7e," \u2014 "),Sq=n(D7e,"A",{href:!0});var tlt=s(Sq);STo=r(tlt,"MCTCTModel"),tlt.forEach(t),RTo=r(D7e," (M-CTC-T model)"),D7e.forEach(t),PTo=i($),Ap=n($,"LI",{});var G7e=s(Ap);Jie=n(G7e,"STRONG",{});var alt=s(Jie);BTo=r(alt,"megatron-bert"),alt.forEach(t),ITo=r(G7e," \u2014 "),Rq=n(G7e,"A",{href:!0});var nlt=s(Rq);NTo=r(nlt,"MegatronBertModel"),nlt.forEach(t),qTo=r(G7e," (Megatron-BERT model)"),G7e.forEach(t),jTo=i($),yp=n($,"LI",{});var O7e=s(yp);Yie=n(O7e,"STRONG",{});var slt=s(Yie);DTo=r(slt,"mobilebert"),slt.forEach(t),GTo=r(O7e," \u2014 "),Pq=n(O7e,"A",{href:!0});var llt=s(Pq);OTo=r(llt,"MobileBertModel"),llt.forEach(t),VTo=r(O7e," (MobileBERT model)"),O7e.forEach(t),XTo=i($),Lp=n($,"LI",{});var V7e=s(Lp);Kie=n(V7e,"STRONG",{});var ilt=s(Kie);zTo=r(ilt,"mpnet"),ilt.forEach(t),WTo=r(V7e," \u2014 "),Bq=n(V7e,"A",{href:!0});var dlt=s(Bq);QTo=r(dlt,"MPNetModel"),dlt.forEach(t),HTo=r(V7e," (MPNet model)"),V7e.forEach(t),UTo=i($),xp=n($,"LI",{});var X7e=s(xp);Zie=n(X7e,"STRONG",{});var clt=s(Zie);JTo=r(clt,"mt5"),clt.forEach(t),YTo=r(X7e," \u2014 "),Iq=n(X7e,"A",{href:!0});var mlt=s(Iq);KTo=r(mlt,"MT5Model"),mlt.forEach(t),ZTo=r(X7e," (MT5 model)"),X7e.forEach(t),eMo=i($),$p=n($,"LI",{});var z7e=s($p);ede=n(z7e,"STRONG",{});var flt=s(ede);oMo=r(flt,"nystromformer"),flt.forEach(t),rMo=r(z7e," \u2014 "),Nq=n(z7e,"A",{href:!0});var glt=s(Nq);tMo=r(glt,"NystromformerModel"),glt.forEach(t),aMo=r(z7e," (Nystr\xF6mformer model)"),z7e.forEach(t),nMo=i($),kp=n($,"LI",{});var W7e=s(kp);ode=n(W7e,"STRONG",{});var hlt=s(ode);sMo=r(hlt,"openai-gpt"),hlt.forEach(t),lMo=r(W7e," \u2014 "),qq=n(W7e,"A",{href:!0});var ult=s(qq);iMo=r(ult,"OpenAIGPTModel"),ult.forEach(t),dMo=r(W7e," (OpenAI GPT model)"),W7e.forEach(t),cMo=i($),Sp=n($,"LI",{});var Q7e=s(Sp);rde=n(Q7e,"STRONG",{});var plt=s(rde);mMo=r(plt,"opt"),plt.forEach(t),fMo=r(Q7e," \u2014 "),jq=n(Q7e,"A",{href:!0});var _lt=s(jq);gMo=r(_lt,"OPTModel"),_lt.forEach(t),hMo=r(Q7e," (OPT model)"),Q7e.forEach(t),uMo=i($),Rp=n($,"LI",{});var H7e=s(Rp);tde=n(H7e,"STRONG",{});var blt=s(tde);pMo=r(blt,"pegasus"),blt.forEach(t),_Mo=r(H7e," \u2014 "),Dq=n(H7e,"A",{href:!0});var vlt=s(Dq);bMo=r(vlt,"PegasusModel"),vlt.forEach(t),vMo=r(H7e," (Pegasus model)"),H7e.forEach(t),FMo=i($),Pp=n($,"LI",{});var U7e=s(Pp);ade=n(U7e,"STRONG",{});var Flt=s(ade);TMo=r(Flt,"perceiver"),Flt.forEach(t),MMo=r(U7e," \u2014 "),Gq=n(U7e,"A",{href:!0});var Tlt=s(Gq);EMo=r(Tlt,"PerceiverModel"),Tlt.forEach(t),CMo=r(U7e," (Perceiver model)"),U7e.forEach(t),wMo=i($),Bp=n($,"LI",{});var J7e=s(Bp);nde=n(J7e,"STRONG",{});var Mlt=s(nde);AMo=r(Mlt,"plbart"),Mlt.forEach(t),yMo=r(J7e," \u2014 "),Oq=n(J7e,"A",{href:!0});var Elt=s(Oq);LMo=r(Elt,"PLBartModel"),Elt.forEach(t),xMo=r(J7e," (PLBart model)"),J7e.forEach(t),$Mo=i($),Ip=n($,"LI",{});var Y7e=s(Ip);sde=n(Y7e,"STRONG",{});var Clt=s(sde);kMo=r(Clt,"poolformer"),Clt.forEach(t),SMo=r(Y7e," \u2014 "),Vq=n(Y7e,"A",{href:!0});var wlt=s(Vq);RMo=r(wlt,"PoolFormerModel"),wlt.forEach(t),PMo=r(Y7e," (PoolFormer model)"),Y7e.forEach(t),BMo=i($),Np=n($,"LI",{});var K7e=s(Np);lde=n(K7e,"STRONG",{});var Alt=s(lde);IMo=r(Alt,"prophetnet"),Alt.forEach(t),NMo=r(K7e," \u2014 "),Xq=n(K7e,"A",{href:!0});var ylt=s(Xq);qMo=r(ylt,"ProphetNetModel"),ylt.forEach(t),jMo=r(K7e," (ProphetNet model)"),K7e.forEach(t),DMo=i($),qp=n($,"LI",{});var Z7e=s(qp);ide=n(Z7e,"STRONG",{});var Llt=s(ide);GMo=r(Llt,"qdqbert"),Llt.forEach(t),OMo=r(Z7e," \u2014 "),zq=n(Z7e,"A",{href:!0});var xlt=s(zq);VMo=r(xlt,"QDQBertModel"),xlt.forEach(t),XMo=r(Z7e," (QDQBert model)"),Z7e.forEach(t),zMo=i($),jp=n($,"LI",{});var e8e=s(jp);dde=n(e8e,"STRONG",{});var $lt=s(dde);WMo=r($lt,"reformer"),$lt.forEach(t),QMo=r(e8e," \u2014 "),Wq=n(e8e,"A",{href:!0});var klt=s(Wq);HMo=r(klt,"ReformerModel"),klt.forEach(t),UMo=r(e8e," (Reformer model)"),e8e.forEach(t),JMo=i($),Dp=n($,"LI",{});var o8e=s(Dp);cde=n(o8e,"STRONG",{});var Slt=s(cde);YMo=r(Slt,"regnet"),Slt.forEach(t),KMo=r(o8e," \u2014 "),Qq=n(o8e,"A",{href:!0});var Rlt=s(Qq);ZMo=r(Rlt,"RegNetModel"),Rlt.forEach(t),e4o=r(o8e," (RegNet model)"),o8e.forEach(t),o4o=i($),Gp=n($,"LI",{});var r8e=s(Gp);mde=n(r8e,"STRONG",{});var Plt=s(mde);r4o=r(Plt,"rembert"),Plt.forEach(t),t4o=r(r8e," \u2014 "),Hq=n(r8e,"A",{href:!0});var Blt=s(Hq);a4o=r(Blt,"RemBertModel"),Blt.forEach(t),n4o=r(r8e," (RemBERT model)"),r8e.forEach(t),s4o=i($),Op=n($,"LI",{});var t8e=s(Op);fde=n(t8e,"STRONG",{});var Ilt=s(fde);l4o=r(Ilt,"resnet"),Ilt.forEach(t),i4o=r(t8e," \u2014 "),Uq=n(t8e,"A",{href:!0});var Nlt=s(Uq);d4o=r(Nlt,"ResNetModel"),Nlt.forEach(t),c4o=r(t8e," (ResNet model)"),t8e.forEach(t),m4o=i($),Vp=n($,"LI",{});var a8e=s(Vp);gde=n(a8e,"STRONG",{});var qlt=s(gde);f4o=r(qlt,"retribert"),qlt.forEach(t),g4o=r(a8e," \u2014 "),Jq=n(a8e,"A",{href:!0});var jlt=s(Jq);h4o=r(jlt,"RetriBertModel"),jlt.forEach(t),u4o=r(a8e," (RetriBERT model)"),a8e.forEach(t),p4o=i($),Xp=n($,"LI",{});var n8e=s(Xp);hde=n(n8e,"STRONG",{});var Dlt=s(hde);_4o=r(Dlt,"roberta"),Dlt.forEach(t),b4o=r(n8e," \u2014 "),Yq=n(n8e,"A",{href:!0});var Glt=s(Yq);v4o=r(Glt,"RobertaModel"),Glt.forEach(t),F4o=r(n8e," (RoBERTa model)"),n8e.forEach(t),T4o=i($),zp=n($,"LI",{});var s8e=s(zp);ude=n(s8e,"STRONG",{});var Olt=s(ude);M4o=r(Olt,"roformer"),Olt.forEach(t),E4o=r(s8e," \u2014 "),Kq=n(s8e,"A",{href:!0});var Vlt=s(Kq);C4o=r(Vlt,"RoFormerModel"),Vlt.forEach(t),w4o=r(s8e," (RoFormer model)"),s8e.forEach(t),A4o=i($),Wp=n($,"LI",{});var l8e=s(Wp);pde=n(l8e,"STRONG",{});var Xlt=s(pde);y4o=r(Xlt,"segformer"),Xlt.forEach(t),L4o=r(l8e," \u2014 "),Zq=n(l8e,"A",{href:!0});var zlt=s(Zq);x4o=r(zlt,"SegformerModel"),zlt.forEach(t),$4o=r(l8e," (SegFormer model)"),l8e.forEach(t),k4o=i($),Qp=n($,"LI",{});var i8e=s(Qp);_de=n(i8e,"STRONG",{});var Wlt=s(_de);S4o=r(Wlt,"sew"),Wlt.forEach(t),R4o=r(i8e," \u2014 "),ej=n(i8e,"A",{href:!0});var Qlt=s(ej);P4o=r(Qlt,"SEWModel"),Qlt.forEach(t),B4o=r(i8e," (SEW model)"),i8e.forEach(t),I4o=i($),Hp=n($,"LI",{});var d8e=s(Hp);bde=n(d8e,"STRONG",{});var Hlt=s(bde);N4o=r(Hlt,"sew-d"),Hlt.forEach(t),q4o=r(d8e," \u2014 "),oj=n(d8e,"A",{href:!0});var Ult=s(oj);j4o=r(Ult,"SEWDModel"),Ult.forEach(t),D4o=r(d8e," (SEW-D model)"),d8e.forEach(t),G4o=i($),Up=n($,"LI",{});var c8e=s(Up);vde=n(c8e,"STRONG",{});var Jlt=s(vde);O4o=r(Jlt,"speech_to_text"),Jlt.forEach(t),V4o=r(c8e," \u2014 "),rj=n(c8e,"A",{href:!0});var Ylt=s(rj);X4o=r(Ylt,"Speech2TextModel"),Ylt.forEach(t),z4o=r(c8e," (Speech2Text model)"),c8e.forEach(t),W4o=i($),Jp=n($,"LI",{});var m8e=s(Jp);Fde=n(m8e,"STRONG",{});var Klt=s(Fde);Q4o=r(Klt,"splinter"),Klt.forEach(t),H4o=r(m8e," \u2014 "),tj=n(m8e,"A",{href:!0});var Zlt=s(tj);U4o=r(Zlt,"SplinterModel"),Zlt.forEach(t),J4o=r(m8e," (Splinter model)"),m8e.forEach(t),Y4o=i($),Yp=n($,"LI",{});var f8e=s(Yp);Tde=n(f8e,"STRONG",{});var eit=s(Tde);K4o=r(eit,"squeezebert"),eit.forEach(t),Z4o=r(f8e," \u2014 "),aj=n(f8e,"A",{href:!0});var oit=s(aj);eEo=r(oit,"SqueezeBertModel"),oit.forEach(t),oEo=r(f8e," (SqueezeBERT model)"),f8e.forEach(t),rEo=i($),Kp=n($,"LI",{});var g8e=s(Kp);Mde=n(g8e,"STRONG",{});var rit=s(Mde);tEo=r(rit,"swin"),rit.forEach(t),aEo=r(g8e," \u2014 "),nj=n(g8e,"A",{href:!0});var tit=s(nj);nEo=r(tit,"SwinModel"),tit.forEach(t),sEo=r(g8e," (Swin Transformer model)"),g8e.forEach(t),lEo=i($),Zp=n($,"LI",{});var h8e=s(Zp);Ede=n(h8e,"STRONG",{});var ait=s(Ede);iEo=r(ait,"t5"),ait.forEach(t),dEo=r(h8e," \u2014 "),sj=n(h8e,"A",{href:!0});var nit=s(sj);cEo=r(nit,"T5Model"),nit.forEach(t),mEo=r(h8e," (T5 model)"),h8e.forEach(t),fEo=i($),e_=n($,"LI",{});var u8e=s(e_);Cde=n(u8e,"STRONG",{});var sit=s(Cde);gEo=r(sit,"tapas"),sit.forEach(t),hEo=r(u8e," \u2014 "),lj=n(u8e,"A",{href:!0});var lit=s(lj);uEo=r(lit,"TapasModel"),lit.forEach(t),pEo=r(u8e," (TAPAS model)"),u8e.forEach(t),_Eo=i($),o_=n($,"LI",{});var p8e=s(o_);wde=n(p8e,"STRONG",{});var iit=s(wde);bEo=r(iit,"trajectory_transformer"),iit.forEach(t),vEo=r(p8e," \u2014 "),ij=n(p8e,"A",{href:!0});var dit=s(ij);FEo=r(dit,"TrajectoryTransformerModel"),dit.forEach(t),TEo=r(p8e," (Trajectory Transformer model)"),p8e.forEach(t),MEo=i($),r_=n($,"LI",{});var _8e=s(r_);Ade=n(_8e,"STRONG",{});var cit=s(Ade);EEo=r(cit,"transfo-xl"),cit.forEach(t),CEo=r(_8e," \u2014 "),dj=n(_8e,"A",{href:!0});var mit=s(dj);wEo=r(mit,"TransfoXLModel"),mit.forEach(t),AEo=r(_8e," (Transformer-XL model)"),_8e.forEach(t),yEo=i($),t_=n($,"LI",{});var b8e=s(t_);yde=n(b8e,"STRONG",{});var fit=s(yde);LEo=r(fit,"unispeech"),fit.forEach(t),xEo=r(b8e," \u2014 "),cj=n(b8e,"A",{href:!0});var git=s(cj);$Eo=r(git,"UniSpeechModel"),git.forEach(t),kEo=r(b8e," (UniSpeech model)"),b8e.forEach(t),SEo=i($),a_=n($,"LI",{});var v8e=s(a_);Lde=n(v8e,"STRONG",{});var hit=s(Lde);REo=r(hit,"unispeech-sat"),hit.forEach(t),PEo=r(v8e," \u2014 "),mj=n(v8e,"A",{href:!0});var uit=s(mj);BEo=r(uit,"UniSpeechSatModel"),uit.forEach(t),IEo=r(v8e," (UniSpeechSat model)"),v8e.forEach(t),NEo=i($),n_=n($,"LI",{});var F8e=s(n_);xde=n(F8e,"STRONG",{});var pit=s(xde);qEo=r(pit,"van"),pit.forEach(t),jEo=r(F8e," \u2014 "),fj=n(F8e,"A",{href:!0});var _it=s(fj);DEo=r(_it,"VanModel"),_it.forEach(t),GEo=r(F8e," (VAN model)"),F8e.forEach(t),OEo=i($),s_=n($,"LI",{});var T8e=s(s_);$de=n(T8e,"STRONG",{});var bit=s($de);VEo=r(bit,"vilt"),bit.forEach(t),XEo=r(T8e," \u2014 "),gj=n(T8e,"A",{href:!0});var vit=s(gj);zEo=r(vit,"ViltModel"),vit.forEach(t),WEo=r(T8e," (ViLT model)"),T8e.forEach(t),QEo=i($),l_=n($,"LI",{});var M8e=s(l_);kde=n(M8e,"STRONG",{});var Fit=s(kde);HEo=r(Fit,"vision-text-dual-encoder"),Fit.forEach(t),UEo=r(M8e," \u2014 "),hj=n(M8e,"A",{href:!0});var Tit=s(hj);JEo=r(Tit,"VisionTextDualEncoderModel"),Tit.forEach(t),YEo=r(M8e," (VisionTextDualEncoder model)"),M8e.forEach(t),KEo=i($),i_=n($,"LI",{});var E8e=s(i_);Sde=n(E8e,"STRONG",{});var Mit=s(Sde);ZEo=r(Mit,"visual_bert"),Mit.forEach(t),eCo=r(E8e," \u2014 "),uj=n(E8e,"A",{href:!0});var Eit=s(uj);oCo=r(Eit,"VisualBertModel"),Eit.forEach(t),rCo=r(E8e," (VisualBERT model)"),E8e.forEach(t),tCo=i($),d_=n($,"LI",{});var C8e=s(d_);Rde=n(C8e,"STRONG",{});var Cit=s(Rde);aCo=r(Cit,"vit"),Cit.forEach(t),nCo=r(C8e," \u2014 "),pj=n(C8e,"A",{href:!0});var wit=s(pj);sCo=r(wit,"ViTModel"),wit.forEach(t),lCo=r(C8e," (ViT model)"),C8e.forEach(t),iCo=i($),c_=n($,"LI",{});var w8e=s(c_);Pde=n(w8e,"STRONG",{});var Ait=s(Pde);dCo=r(Ait,"vit_mae"),Ait.forEach(t),cCo=r(w8e," \u2014 "),_j=n(w8e,"A",{href:!0});var yit=s(_j);mCo=r(yit,"ViTMAEModel"),yit.forEach(t),fCo=r(w8e," (ViTMAE model)"),w8e.forEach(t),gCo=i($),m_=n($,"LI",{});var A8e=s(m_);Bde=n(A8e,"STRONG",{});var Lit=s(Bde);hCo=r(Lit,"wav2vec2"),Lit.forEach(t),uCo=r(A8e," \u2014 "),bj=n(A8e,"A",{href:!0});var xit=s(bj);pCo=r(xit,"Wav2Vec2Model"),xit.forEach(t),_Co=r(A8e," (Wav2Vec2 model)"),A8e.forEach(t),bCo=i($),f_=n($,"LI",{});var y8e=s(f_);Ide=n(y8e,"STRONG",{});var $it=s(Ide);vCo=r($it,"wav2vec2-conformer"),$it.forEach(t),FCo=r(y8e," \u2014 "),vj=n(y8e,"A",{href:!0});var kit=s(vj);TCo=r(kit,"Wav2Vec2ConformerModel"),kit.forEach(t),MCo=r(y8e," (Wav2Vec2-Conformer model)"),y8e.forEach(t),ECo=i($),g_=n($,"LI",{});var L8e=s(g_);Nde=n(L8e,"STRONG",{});var Sit=s(Nde);CCo=r(Sit,"wavlm"),Sit.forEach(t),wCo=r(L8e," \u2014 "),Fj=n(L8e,"A",{href:!0});var Rit=s(Fj);ACo=r(Rit,"WavLMModel"),Rit.forEach(t),yCo=r(L8e," (WavLM model)"),L8e.forEach(t),LCo=i($),h_=n($,"LI",{});var x8e=s(h_);qde=n(x8e,"STRONG",{});var Pit=s(qde);xCo=r(Pit,"xglm"),Pit.forEach(t),$Co=r(x8e," \u2014 "),Tj=n(x8e,"A",{href:!0});var Bit=s(Tj);kCo=r(Bit,"XGLMModel"),Bit.forEach(t),SCo=r(x8e," (XGLM model)"),x8e.forEach(t),RCo=i($),u_=n($,"LI",{});var $8e=s(u_);jde=n($8e,"STRONG",{});var Iit=s(jde);PCo=r(Iit,"xlm"),Iit.forEach(t),BCo=r($8e," \u2014 "),Mj=n($8e,"A",{href:!0});var Nit=s(Mj);ICo=r(Nit,"XLMModel"),Nit.forEach(t),NCo=r($8e," (XLM model)"),$8e.forEach(t),qCo=i($),p_=n($,"LI",{});var k8e=s(p_);Dde=n(k8e,"STRONG",{});var qit=s(Dde);jCo=r(qit,"xlm-prophetnet"),qit.forEach(t),DCo=r(k8e," \u2014 "),Ej=n(k8e,"A",{href:!0});var jit=s(Ej);GCo=r(jit,"XLMProphetNetModel"),jit.forEach(t),OCo=r(k8e," (XLM-ProphetNet model)"),k8e.forEach(t),VCo=i($),__=n($,"LI",{});var S8e=s(__);Gde=n(S8e,"STRONG",{});var Dit=s(Gde);XCo=r(Dit,"xlm-roberta"),Dit.forEach(t),zCo=r(S8e," \u2014 "),Cj=n(S8e,"A",{href:!0});var Git=s(Cj);WCo=r(Git,"XLMRobertaModel"),Git.forEach(t),QCo=r(S8e," (XLM-RoBERTa model)"),S8e.forEach(t),HCo=i($),b_=n($,"LI",{});var R8e=s(b_);Ode=n(R8e,"STRONG",{});var Oit=s(Ode);UCo=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),JCo=r(R8e," \u2014 "),wj=n(R8e,"A",{href:!0});var Vit=s(wj);YCo=r(Vit,"XLMRobertaXLModel"),Vit.forEach(t),KCo=r(R8e," (XLM-RoBERTa-XL model)"),R8e.forEach(t),ZCo=i($),v_=n($,"LI",{});var P8e=s(v_);Vde=n(P8e,"STRONG",{});var Xit=s(Vde);e5o=r(Xit,"xlnet"),Xit.forEach(t),o5o=r(P8e," \u2014 "),Aj=n(P8e,"A",{href:!0});var zit=s(Aj);r5o=r(zit,"XLNetModel"),zit.forEach(t),t5o=r(P8e," (XLNet model)"),P8e.forEach(t),a5o=i($),F_=n($,"LI",{});var B8e=s(F_);Xde=n(B8e,"STRONG",{});var Wit=s(Xde);n5o=r(Wit,"yolos"),Wit.forEach(t),s5o=r(B8e," \u2014 "),yj=n(B8e,"A",{href:!0});var Qit=s(yj);l5o=r(Qit,"YolosModel"),Qit.forEach(t),i5o=r(B8e," (YOLOS model)"),B8e.forEach(t),d5o=i($),T_=n($,"LI",{});var I8e=s(T_);zde=n(I8e,"STRONG",{});var Hit=s(zde);c5o=r(Hit,"yoso"),Hit.forEach(t),m5o=r(I8e," \u2014 "),Lj=n(I8e,"A",{href:!0});var Uit=s(Lj);f5o=r(Uit,"YosoModel"),Uit.forEach(t),g5o=r(I8e," (YOSO model)"),I8e.forEach(t),$.forEach(t),h5o=i(aa),M_=n(aa,"P",{});var N8e=s(M_);u5o=r(N8e,"The model is set in evaluation mode by default using "),Wde=n(N8e,"CODE",{});var Jit=s(Wde);p5o=r(Jit,"model.eval()"),Jit.forEach(t),_5o=r(N8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=n(N8e,"CODE",{});var Yit=s(Qde);b5o=r(Yit,"model.train()"),Yit.forEach(t),N8e.forEach(t),v5o=i(aa),T(E_.$$.fragment,aa),aa.forEach(t),Hs.forEach(t),$De=i(m),Ii=n(m,"H2",{class:!0});var IOe=s(Ii);C_=n(IOe,"A",{id:!0,class:!0,href:!0});var Kit=s(C_);Hde=n(Kit,"SPAN",{});var Zit=s(Hde);T(GL.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),F5o=i(IOe),Ude=n(IOe,"SPAN",{});var edt=s(Ude);T5o=r(edt,"AutoModelForPreTraining"),edt.forEach(t),IOe.forEach(t),kDe=i(m),$o=n(m,"DIV",{class:!0});var Us=s($o);T(OL.$$.fragment,Us),M5o=i(Us),Ni=n(Us,"P",{});var Ree=s(Ni);E5o=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xj=n(Ree,"A",{href:!0});var odt=s(xj);C5o=r(odt,"from_pretrained()"),odt.forEach(t),w5o=r(Ree," class method or the "),$j=n(Ree,"A",{href:!0});var rdt=s($j);A5o=r(rdt,"from_config()"),rdt.forEach(t),y5o=r(Ree,` class
method.`),Ree.forEach(t),L5o=i(Us),VL=n(Us,"P",{});var NOe=s(VL);x5o=r(NOe,"This class cannot be instantiated directly using "),Jde=n(NOe,"CODE",{});var tdt=s(Jde);$5o=r(tdt,"__init__()"),tdt.forEach(t),k5o=r(NOe," (throws an error)."),NOe.forEach(t),S5o=i(Us),st=n(Us,"DIV",{class:!0});var h6=s(st);T(XL.$$.fragment,h6),R5o=i(h6),Yde=n(h6,"P",{});var adt=s(Yde);P5o=r(adt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),adt.forEach(t),B5o=i(h6),qi=n(h6,"P",{});var Pee=s(qi);I5o=r(Pee,`Note:
Loading a model from its configuration file does `),Kde=n(Pee,"STRONG",{});var ndt=s(Kde);N5o=r(ndt,"not"),ndt.forEach(t),q5o=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(Pee,"A",{href:!0});var sdt=s(kj);j5o=r(sdt,"from_pretrained()"),sdt.forEach(t),D5o=r(Pee," to load the model weights."),Pee.forEach(t),G5o=i(h6),T(w_.$$.fragment,h6),h6.forEach(t),O5o=i(Us),Ye=n(Us,"DIV",{class:!0});var na=s(Ye);T(zL.$$.fragment,na),V5o=i(na),Zde=n(na,"P",{});var ldt=s(Zde);X5o=r(ldt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ldt.forEach(t),z5o=i(na),Ra=n(na,"P",{});var u6=s(Ra);W5o=r(u6,"The model class to instantiate is selected based on the "),ece=n(u6,"CODE",{});var idt=s(ece);Q5o=r(idt,"model_type"),idt.forEach(t),H5o=r(u6,` property of the config object (either
passed as an argument or loaded from `),oce=n(u6,"CODE",{});var ddt=s(oce);U5o=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),J5o=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(u6,"CODE",{});var cdt=s(rce);Y5o=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),K5o=r(u6,":"),u6.forEach(t),Z5o=i(na),G=n(na,"UL",{});var O=s(G);A_=n(O,"LI",{});var q8e=s(A_);tce=n(q8e,"STRONG",{});var mdt=s(tce);e3o=r(mdt,"albert"),mdt.forEach(t),o3o=r(q8e," \u2014 "),Sj=n(q8e,"A",{href:!0});var fdt=s(Sj);r3o=r(fdt,"AlbertForPreTraining"),fdt.forEach(t),t3o=r(q8e," (ALBERT model)"),q8e.forEach(t),a3o=i(O),y_=n(O,"LI",{});var j8e=s(y_);ace=n(j8e,"STRONG",{});var gdt=s(ace);n3o=r(gdt,"bart"),gdt.forEach(t),s3o=r(j8e," \u2014 "),Rj=n(j8e,"A",{href:!0});var hdt=s(Rj);l3o=r(hdt,"BartForConditionalGeneration"),hdt.forEach(t),i3o=r(j8e," (BART model)"),j8e.forEach(t),d3o=i(O),L_=n(O,"LI",{});var D8e=s(L_);nce=n(D8e,"STRONG",{});var udt=s(nce);c3o=r(udt,"bert"),udt.forEach(t),m3o=r(D8e," \u2014 "),Pj=n(D8e,"A",{href:!0});var pdt=s(Pj);f3o=r(pdt,"BertForPreTraining"),pdt.forEach(t),g3o=r(D8e," (BERT model)"),D8e.forEach(t),h3o=i(O),x_=n(O,"LI",{});var G8e=s(x_);sce=n(G8e,"STRONG",{});var _dt=s(sce);u3o=r(_dt,"big_bird"),_dt.forEach(t),p3o=r(G8e," \u2014 "),Bj=n(G8e,"A",{href:!0});var bdt=s(Bj);_3o=r(bdt,"BigBirdForPreTraining"),bdt.forEach(t),b3o=r(G8e," (BigBird model)"),G8e.forEach(t),v3o=i(O),$_=n(O,"LI",{});var O8e=s($_);lce=n(O8e,"STRONG",{});var vdt=s(lce);F3o=r(vdt,"bloom"),vdt.forEach(t),T3o=r(O8e," \u2014 "),Ij=n(O8e,"A",{href:!0});var Fdt=s(Ij);M3o=r(Fdt,"BloomForCausalLM"),Fdt.forEach(t),E3o=r(O8e," (BLOOM model)"),O8e.forEach(t),C3o=i(O),k_=n(O,"LI",{});var V8e=s(k_);ice=n(V8e,"STRONG",{});var Tdt=s(ice);w3o=r(Tdt,"camembert"),Tdt.forEach(t),A3o=r(V8e," \u2014 "),Nj=n(V8e,"A",{href:!0});var Mdt=s(Nj);y3o=r(Mdt,"CamembertForMaskedLM"),Mdt.forEach(t),L3o=r(V8e," (CamemBERT model)"),V8e.forEach(t),x3o=i(O),S_=n(O,"LI",{});var X8e=s(S_);dce=n(X8e,"STRONG",{});var Edt=s(dce);$3o=r(Edt,"ctrl"),Edt.forEach(t),k3o=r(X8e," \u2014 "),qj=n(X8e,"A",{href:!0});var Cdt=s(qj);S3o=r(Cdt,"CTRLLMHeadModel"),Cdt.forEach(t),R3o=r(X8e," (CTRL model)"),X8e.forEach(t),P3o=i(O),R_=n(O,"LI",{});var z8e=s(R_);cce=n(z8e,"STRONG",{});var wdt=s(cce);B3o=r(wdt,"data2vec-text"),wdt.forEach(t),I3o=r(z8e," \u2014 "),jj=n(z8e,"A",{href:!0});var Adt=s(jj);N3o=r(Adt,"Data2VecTextForMaskedLM"),Adt.forEach(t),q3o=r(z8e," (Data2VecText model)"),z8e.forEach(t),j3o=i(O),P_=n(O,"LI",{});var W8e=s(P_);mce=n(W8e,"STRONG",{});var ydt=s(mce);D3o=r(ydt,"deberta"),ydt.forEach(t),G3o=r(W8e," \u2014 "),Dj=n(W8e,"A",{href:!0});var Ldt=s(Dj);O3o=r(Ldt,"DebertaForMaskedLM"),Ldt.forEach(t),V3o=r(W8e," (DeBERTa model)"),W8e.forEach(t),X3o=i(O),B_=n(O,"LI",{});var Q8e=s(B_);fce=n(Q8e,"STRONG",{});var xdt=s(fce);z3o=r(xdt,"deberta-v2"),xdt.forEach(t),W3o=r(Q8e," \u2014 "),Gj=n(Q8e,"A",{href:!0});var $dt=s(Gj);Q3o=r($dt,"DebertaV2ForMaskedLM"),$dt.forEach(t),H3o=r(Q8e," (DeBERTa-v2 model)"),Q8e.forEach(t),U3o=i(O),I_=n(O,"LI",{});var H8e=s(I_);gce=n(H8e,"STRONG",{});var kdt=s(gce);J3o=r(kdt,"distilbert"),kdt.forEach(t),Y3o=r(H8e," \u2014 "),Oj=n(H8e,"A",{href:!0});var Sdt=s(Oj);K3o=r(Sdt,"DistilBertForMaskedLM"),Sdt.forEach(t),Z3o=r(H8e," (DistilBERT model)"),H8e.forEach(t),ewo=i(O),N_=n(O,"LI",{});var U8e=s(N_);hce=n(U8e,"STRONG",{});var Rdt=s(hce);owo=r(Rdt,"electra"),Rdt.forEach(t),rwo=r(U8e," \u2014 "),Vj=n(U8e,"A",{href:!0});var Pdt=s(Vj);two=r(Pdt,"ElectraForPreTraining"),Pdt.forEach(t),awo=r(U8e," (ELECTRA model)"),U8e.forEach(t),nwo=i(O),q_=n(O,"LI",{});var J8e=s(q_);uce=n(J8e,"STRONG",{});var Bdt=s(uce);swo=r(Bdt,"flaubert"),Bdt.forEach(t),lwo=r(J8e," \u2014 "),Xj=n(J8e,"A",{href:!0});var Idt=s(Xj);iwo=r(Idt,"FlaubertWithLMHeadModel"),Idt.forEach(t),dwo=r(J8e," (FlauBERT model)"),J8e.forEach(t),cwo=i(O),j_=n(O,"LI",{});var Y8e=s(j_);pce=n(Y8e,"STRONG",{});var Ndt=s(pce);mwo=r(Ndt,"flava"),Ndt.forEach(t),fwo=r(Y8e," \u2014 "),zj=n(Y8e,"A",{href:!0});var qdt=s(zj);gwo=r(qdt,"FlavaForPreTraining"),qdt.forEach(t),hwo=r(Y8e," (FLAVA model)"),Y8e.forEach(t),uwo=i(O),D_=n(O,"LI",{});var K8e=s(D_);_ce=n(K8e,"STRONG",{});var jdt=s(_ce);pwo=r(jdt,"fnet"),jdt.forEach(t),_wo=r(K8e," \u2014 "),Wj=n(K8e,"A",{href:!0});var Ddt=s(Wj);bwo=r(Ddt,"FNetForPreTraining"),Ddt.forEach(t),vwo=r(K8e," (FNet model)"),K8e.forEach(t),Fwo=i(O),G_=n(O,"LI",{});var Z8e=s(G_);bce=n(Z8e,"STRONG",{});var Gdt=s(bce);Two=r(Gdt,"fsmt"),Gdt.forEach(t),Mwo=r(Z8e," \u2014 "),Qj=n(Z8e,"A",{href:!0});var Odt=s(Qj);Ewo=r(Odt,"FSMTForConditionalGeneration"),Odt.forEach(t),Cwo=r(Z8e," (FairSeq Machine-Translation model)"),Z8e.forEach(t),wwo=i(O),O_=n(O,"LI",{});var e9e=s(O_);vce=n(e9e,"STRONG",{});var Vdt=s(vce);Awo=r(Vdt,"funnel"),Vdt.forEach(t),ywo=r(e9e," \u2014 "),Hj=n(e9e,"A",{href:!0});var Xdt=s(Hj);Lwo=r(Xdt,"FunnelForPreTraining"),Xdt.forEach(t),xwo=r(e9e," (Funnel Transformer model)"),e9e.forEach(t),$wo=i(O),V_=n(O,"LI",{});var o9e=s(V_);Fce=n(o9e,"STRONG",{});var zdt=s(Fce);kwo=r(zdt,"gpt2"),zdt.forEach(t),Swo=r(o9e," \u2014 "),Uj=n(o9e,"A",{href:!0});var Wdt=s(Uj);Rwo=r(Wdt,"GPT2LMHeadModel"),Wdt.forEach(t),Pwo=r(o9e," (OpenAI GPT-2 model)"),o9e.forEach(t),Bwo=i(O),X_=n(O,"LI",{});var r9e=s(X_);Tce=n(r9e,"STRONG",{});var Qdt=s(Tce);Iwo=r(Qdt,"ibert"),Qdt.forEach(t),Nwo=r(r9e," \u2014 "),Jj=n(r9e,"A",{href:!0});var Hdt=s(Jj);qwo=r(Hdt,"IBertForMaskedLM"),Hdt.forEach(t),jwo=r(r9e," (I-BERT model)"),r9e.forEach(t),Dwo=i(O),z_=n(O,"LI",{});var t9e=s(z_);Mce=n(t9e,"STRONG",{});var Udt=s(Mce);Gwo=r(Udt,"layoutlm"),Udt.forEach(t),Owo=r(t9e," \u2014 "),Yj=n(t9e,"A",{href:!0});var Jdt=s(Yj);Vwo=r(Jdt,"LayoutLMForMaskedLM"),Jdt.forEach(t),Xwo=r(t9e," (LayoutLM model)"),t9e.forEach(t),zwo=i(O),W_=n(O,"LI",{});var a9e=s(W_);Ece=n(a9e,"STRONG",{});var Ydt=s(Ece);Wwo=r(Ydt,"longformer"),Ydt.forEach(t),Qwo=r(a9e," \u2014 "),Kj=n(a9e,"A",{href:!0});var Kdt=s(Kj);Hwo=r(Kdt,"LongformerForMaskedLM"),Kdt.forEach(t),Uwo=r(a9e," (Longformer model)"),a9e.forEach(t),Jwo=i(O),Q_=n(O,"LI",{});var n9e=s(Q_);Cce=n(n9e,"STRONG",{});var Zdt=s(Cce);Ywo=r(Zdt,"lxmert"),Zdt.forEach(t),Kwo=r(n9e," \u2014 "),Zj=n(n9e,"A",{href:!0});var ect=s(Zj);Zwo=r(ect,"LxmertForPreTraining"),ect.forEach(t),e0o=r(n9e," (LXMERT model)"),n9e.forEach(t),o0o=i(O),H_=n(O,"LI",{});var s9e=s(H_);wce=n(s9e,"STRONG",{});var oct=s(wce);r0o=r(oct,"megatron-bert"),oct.forEach(t),t0o=r(s9e," \u2014 "),eD=n(s9e,"A",{href:!0});var rct=s(eD);a0o=r(rct,"MegatronBertForPreTraining"),rct.forEach(t),n0o=r(s9e," (Megatron-BERT model)"),s9e.forEach(t),s0o=i(O),U_=n(O,"LI",{});var l9e=s(U_);Ace=n(l9e,"STRONG",{});var tct=s(Ace);l0o=r(tct,"mobilebert"),tct.forEach(t),i0o=r(l9e," \u2014 "),oD=n(l9e,"A",{href:!0});var act=s(oD);d0o=r(act,"MobileBertForPreTraining"),act.forEach(t),c0o=r(l9e," (MobileBERT model)"),l9e.forEach(t),m0o=i(O),J_=n(O,"LI",{});var i9e=s(J_);yce=n(i9e,"STRONG",{});var nct=s(yce);f0o=r(nct,"mpnet"),nct.forEach(t),g0o=r(i9e," \u2014 "),rD=n(i9e,"A",{href:!0});var sct=s(rD);h0o=r(sct,"MPNetForMaskedLM"),sct.forEach(t),u0o=r(i9e," (MPNet model)"),i9e.forEach(t),p0o=i(O),Y_=n(O,"LI",{});var d9e=s(Y_);Lce=n(d9e,"STRONG",{});var lct=s(Lce);_0o=r(lct,"openai-gpt"),lct.forEach(t),b0o=r(d9e," \u2014 "),tD=n(d9e,"A",{href:!0});var ict=s(tD);v0o=r(ict,"OpenAIGPTLMHeadModel"),ict.forEach(t),F0o=r(d9e," (OpenAI GPT model)"),d9e.forEach(t),T0o=i(O),K_=n(O,"LI",{});var c9e=s(K_);xce=n(c9e,"STRONG",{});var dct=s(xce);M0o=r(dct,"retribert"),dct.forEach(t),E0o=r(c9e," \u2014 "),aD=n(c9e,"A",{href:!0});var cct=s(aD);C0o=r(cct,"RetriBertModel"),cct.forEach(t),w0o=r(c9e," (RetriBERT model)"),c9e.forEach(t),A0o=i(O),Z_=n(O,"LI",{});var m9e=s(Z_);$ce=n(m9e,"STRONG",{});var mct=s($ce);y0o=r(mct,"roberta"),mct.forEach(t),L0o=r(m9e," \u2014 "),nD=n(m9e,"A",{href:!0});var fct=s(nD);x0o=r(fct,"RobertaForMaskedLM"),fct.forEach(t),$0o=r(m9e," (RoBERTa model)"),m9e.forEach(t),k0o=i(O),eb=n(O,"LI",{});var f9e=s(eb);kce=n(f9e,"STRONG",{});var gct=s(kce);S0o=r(gct,"splinter"),gct.forEach(t),R0o=r(f9e," \u2014 "),sD=n(f9e,"A",{href:!0});var hct=s(sD);P0o=r(hct,"SplinterForPreTraining"),hct.forEach(t),B0o=r(f9e," (Splinter model)"),f9e.forEach(t),I0o=i(O),ob=n(O,"LI",{});var g9e=s(ob);Sce=n(g9e,"STRONG",{});var uct=s(Sce);N0o=r(uct,"squeezebert"),uct.forEach(t),q0o=r(g9e," \u2014 "),lD=n(g9e,"A",{href:!0});var pct=s(lD);j0o=r(pct,"SqueezeBertForMaskedLM"),pct.forEach(t),D0o=r(g9e," (SqueezeBERT model)"),g9e.forEach(t),G0o=i(O),rb=n(O,"LI",{});var h9e=s(rb);Rce=n(h9e,"STRONG",{});var _ct=s(Rce);O0o=r(_ct,"t5"),_ct.forEach(t),V0o=r(h9e," \u2014 "),iD=n(h9e,"A",{href:!0});var bct=s(iD);X0o=r(bct,"T5ForConditionalGeneration"),bct.forEach(t),z0o=r(h9e," (T5 model)"),h9e.forEach(t),W0o=i(O),tb=n(O,"LI",{});var u9e=s(tb);Pce=n(u9e,"STRONG",{});var vct=s(Pce);Q0o=r(vct,"tapas"),vct.forEach(t),H0o=r(u9e," \u2014 "),dD=n(u9e,"A",{href:!0});var Fct=s(dD);U0o=r(Fct,"TapasForMaskedLM"),Fct.forEach(t),J0o=r(u9e," (TAPAS model)"),u9e.forEach(t),Y0o=i(O),ab=n(O,"LI",{});var p9e=s(ab);Bce=n(p9e,"STRONG",{});var Tct=s(Bce);K0o=r(Tct,"transfo-xl"),Tct.forEach(t),Z0o=r(p9e," \u2014 "),cD=n(p9e,"A",{href:!0});var Mct=s(cD);eAo=r(Mct,"TransfoXLLMHeadModel"),Mct.forEach(t),oAo=r(p9e," (Transformer-XL model)"),p9e.forEach(t),rAo=i(O),nb=n(O,"LI",{});var _9e=s(nb);Ice=n(_9e,"STRONG",{});var Ect=s(Ice);tAo=r(Ect,"unispeech"),Ect.forEach(t),aAo=r(_9e," \u2014 "),mD=n(_9e,"A",{href:!0});var Cct=s(mD);nAo=r(Cct,"UniSpeechForPreTraining"),Cct.forEach(t),sAo=r(_9e," (UniSpeech model)"),_9e.forEach(t),lAo=i(O),sb=n(O,"LI",{});var b9e=s(sb);Nce=n(b9e,"STRONG",{});var wct=s(Nce);iAo=r(wct,"unispeech-sat"),wct.forEach(t),dAo=r(b9e," \u2014 "),fD=n(b9e,"A",{href:!0});var Act=s(fD);cAo=r(Act,"UniSpeechSatForPreTraining"),Act.forEach(t),mAo=r(b9e," (UniSpeechSat model)"),b9e.forEach(t),fAo=i(O),lb=n(O,"LI",{});var v9e=s(lb);qce=n(v9e,"STRONG",{});var yct=s(qce);gAo=r(yct,"visual_bert"),yct.forEach(t),hAo=r(v9e," \u2014 "),gD=n(v9e,"A",{href:!0});var Lct=s(gD);uAo=r(Lct,"VisualBertForPreTraining"),Lct.forEach(t),pAo=r(v9e," (VisualBERT model)"),v9e.forEach(t),_Ao=i(O),ib=n(O,"LI",{});var F9e=s(ib);jce=n(F9e,"STRONG",{});var xct=s(jce);bAo=r(xct,"vit_mae"),xct.forEach(t),vAo=r(F9e," \u2014 "),hD=n(F9e,"A",{href:!0});var $ct=s(hD);FAo=r($ct,"ViTMAEForPreTraining"),$ct.forEach(t),TAo=r(F9e," (ViTMAE model)"),F9e.forEach(t),MAo=i(O),db=n(O,"LI",{});var T9e=s(db);Dce=n(T9e,"STRONG",{});var kct=s(Dce);EAo=r(kct,"wav2vec2"),kct.forEach(t),CAo=r(T9e," \u2014 "),uD=n(T9e,"A",{href:!0});var Sct=s(uD);wAo=r(Sct,"Wav2Vec2ForPreTraining"),Sct.forEach(t),AAo=r(T9e," (Wav2Vec2 model)"),T9e.forEach(t),yAo=i(O),cb=n(O,"LI",{});var M9e=s(cb);Gce=n(M9e,"STRONG",{});var Rct=s(Gce);LAo=r(Rct,"wav2vec2-conformer"),Rct.forEach(t),xAo=r(M9e," \u2014 "),pD=n(M9e,"A",{href:!0});var Pct=s(pD);$Ao=r(Pct,"Wav2Vec2ConformerForPreTraining"),Pct.forEach(t),kAo=r(M9e," (Wav2Vec2-Conformer model)"),M9e.forEach(t),SAo=i(O),mb=n(O,"LI",{});var E9e=s(mb);Oce=n(E9e,"STRONG",{});var Bct=s(Oce);RAo=r(Bct,"xlm"),Bct.forEach(t),PAo=r(E9e," \u2014 "),_D=n(E9e,"A",{href:!0});var Ict=s(_D);BAo=r(Ict,"XLMWithLMHeadModel"),Ict.forEach(t),IAo=r(E9e," (XLM model)"),E9e.forEach(t),NAo=i(O),fb=n(O,"LI",{});var C9e=s(fb);Vce=n(C9e,"STRONG",{});var Nct=s(Vce);qAo=r(Nct,"xlm-roberta"),Nct.forEach(t),jAo=r(C9e," \u2014 "),bD=n(C9e,"A",{href:!0});var qct=s(bD);DAo=r(qct,"XLMRobertaForMaskedLM"),qct.forEach(t),GAo=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),OAo=i(O),gb=n(O,"LI",{});var w9e=s(gb);Xce=n(w9e,"STRONG",{});var jct=s(Xce);VAo=r(jct,"xlm-roberta-xl"),jct.forEach(t),XAo=r(w9e," \u2014 "),vD=n(w9e,"A",{href:!0});var Dct=s(vD);zAo=r(Dct,"XLMRobertaXLForMaskedLM"),Dct.forEach(t),WAo=r(w9e," (XLM-RoBERTa-XL model)"),w9e.forEach(t),QAo=i(O),hb=n(O,"LI",{});var A9e=s(hb);zce=n(A9e,"STRONG",{});var Gct=s(zce);HAo=r(Gct,"xlnet"),Gct.forEach(t),UAo=r(A9e," \u2014 "),FD=n(A9e,"A",{href:!0});var Oct=s(FD);JAo=r(Oct,"XLNetLMHeadModel"),Oct.forEach(t),YAo=r(A9e," (XLNet model)"),A9e.forEach(t),O.forEach(t),KAo=i(na),ub=n(na,"P",{});var y9e=s(ub);ZAo=r(y9e,"The model is set in evaluation mode by default using "),Wce=n(y9e,"CODE",{});var Vct=s(Wce);e6o=r(Vct,"model.eval()"),Vct.forEach(t),o6o=r(y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(y9e,"CODE",{});var Xct=s(Qce);r6o=r(Xct,"model.train()"),Xct.forEach(t),y9e.forEach(t),t6o=i(na),T(pb.$$.fragment,na),na.forEach(t),Us.forEach(t),SDe=i(m),ji=n(m,"H2",{class:!0});var qOe=s(ji);_b=n(qOe,"A",{id:!0,class:!0,href:!0});var zct=s(_b);Hce=n(zct,"SPAN",{});var Wct=s(Hce);T(WL.$$.fragment,Wct),Wct.forEach(t),zct.forEach(t),a6o=i(qOe),Uce=n(qOe,"SPAN",{});var Qct=s(Uce);n6o=r(Qct,"AutoModelForCausalLM"),Qct.forEach(t),qOe.forEach(t),RDe=i(m),ko=n(m,"DIV",{class:!0});var Js=s(ko);T(QL.$$.fragment,Js),s6o=i(Js),Di=n(Js,"P",{});var Bee=s(Di);l6o=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TD=n(Bee,"A",{href:!0});var Hct=s(TD);i6o=r(Hct,"from_pretrained()"),Hct.forEach(t),d6o=r(Bee," class method or the "),MD=n(Bee,"A",{href:!0});var Uct=s(MD);c6o=r(Uct,"from_config()"),Uct.forEach(t),m6o=r(Bee,` class
method.`),Bee.forEach(t),f6o=i(Js),HL=n(Js,"P",{});var jOe=s(HL);g6o=r(jOe,"This class cannot be instantiated directly using "),Jce=n(jOe,"CODE",{});var Jct=s(Jce);h6o=r(Jct,"__init__()"),Jct.forEach(t),u6o=r(jOe," (throws an error)."),jOe.forEach(t),p6o=i(Js),lt=n(Js,"DIV",{class:!0});var p6=s(lt);T(UL.$$.fragment,p6),_6o=i(p6),Yce=n(p6,"P",{});var Yct=s(Yce);b6o=r(Yct,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Yct.forEach(t),v6o=i(p6),Gi=n(p6,"P",{});var Iee=s(Gi);F6o=r(Iee,`Note:
Loading a model from its configuration file does `),Kce=n(Iee,"STRONG",{});var Kct=s(Kce);T6o=r(Kct,"not"),Kct.forEach(t),M6o=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ED=n(Iee,"A",{href:!0});var Zct=s(ED);E6o=r(Zct,"from_pretrained()"),Zct.forEach(t),C6o=r(Iee," to load the model weights."),Iee.forEach(t),w6o=i(p6),T(bb.$$.fragment,p6),p6.forEach(t),A6o=i(Js),Ke=n(Js,"DIV",{class:!0});var sa=s(Ke);T(JL.$$.fragment,sa),y6o=i(sa),Zce=n(sa,"P",{});var emt=s(Zce);L6o=r(emt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),emt.forEach(t),x6o=i(sa),Pa=n(sa,"P",{});var _6=s(Pa);$6o=r(_6,"The model class to instantiate is selected based on the "),eme=n(_6,"CODE",{});var omt=s(eme);k6o=r(omt,"model_type"),omt.forEach(t),S6o=r(_6,` property of the config object (either
passed as an argument or loaded from `),ome=n(_6,"CODE",{});var rmt=s(ome);R6o=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),P6o=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n(_6,"CODE",{});var tmt=s(rme);B6o=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),I6o=r(_6,":"),_6.forEach(t),N6o=i(sa),z=n(sa,"UL",{});var W=s(z);vb=n(W,"LI",{});var L9e=s(vb);tme=n(L9e,"STRONG",{});var amt=s(tme);q6o=r(amt,"bart"),amt.forEach(t),j6o=r(L9e," \u2014 "),CD=n(L9e,"A",{href:!0});var nmt=s(CD);D6o=r(nmt,"BartForCausalLM"),nmt.forEach(t),G6o=r(L9e," (BART model)"),L9e.forEach(t),O6o=i(W),Fb=n(W,"LI",{});var x9e=s(Fb);ame=n(x9e,"STRONG",{});var smt=s(ame);V6o=r(smt,"bert"),smt.forEach(t),X6o=r(x9e," \u2014 "),wD=n(x9e,"A",{href:!0});var lmt=s(wD);z6o=r(lmt,"BertLMHeadModel"),lmt.forEach(t),W6o=r(x9e," (BERT model)"),x9e.forEach(t),Q6o=i(W),Tb=n(W,"LI",{});var $9e=s(Tb);nme=n($9e,"STRONG",{});var imt=s(nme);H6o=r(imt,"bert-generation"),imt.forEach(t),U6o=r($9e," \u2014 "),AD=n($9e,"A",{href:!0});var dmt=s(AD);J6o=r(dmt,"BertGenerationDecoder"),dmt.forEach(t),Y6o=r($9e," (Bert Generation model)"),$9e.forEach(t),K6o=i(W),Mb=n(W,"LI",{});var k9e=s(Mb);sme=n(k9e,"STRONG",{});var cmt=s(sme);Z6o=r(cmt,"big_bird"),cmt.forEach(t),eyo=r(k9e," \u2014 "),yD=n(k9e,"A",{href:!0});var mmt=s(yD);oyo=r(mmt,"BigBirdForCausalLM"),mmt.forEach(t),ryo=r(k9e," (BigBird model)"),k9e.forEach(t),tyo=i(W),Eb=n(W,"LI",{});var S9e=s(Eb);lme=n(S9e,"STRONG",{});var fmt=s(lme);ayo=r(fmt,"bigbird_pegasus"),fmt.forEach(t),nyo=r(S9e," \u2014 "),LD=n(S9e,"A",{href:!0});var gmt=s(LD);syo=r(gmt,"BigBirdPegasusForCausalLM"),gmt.forEach(t),lyo=r(S9e," (BigBird-Pegasus model)"),S9e.forEach(t),iyo=i(W),Cb=n(W,"LI",{});var R9e=s(Cb);ime=n(R9e,"STRONG",{});var hmt=s(ime);dyo=r(hmt,"blenderbot"),hmt.forEach(t),cyo=r(R9e," \u2014 "),xD=n(R9e,"A",{href:!0});var umt=s(xD);myo=r(umt,"BlenderbotForCausalLM"),umt.forEach(t),fyo=r(R9e," (Blenderbot model)"),R9e.forEach(t),gyo=i(W),wb=n(W,"LI",{});var P9e=s(wb);dme=n(P9e,"STRONG",{});var pmt=s(dme);hyo=r(pmt,"blenderbot-small"),pmt.forEach(t),uyo=r(P9e," \u2014 "),$D=n(P9e,"A",{href:!0});var _mt=s($D);pyo=r(_mt,"BlenderbotSmallForCausalLM"),_mt.forEach(t),_yo=r(P9e," (BlenderbotSmall model)"),P9e.forEach(t),byo=i(W),Ab=n(W,"LI",{});var B9e=s(Ab);cme=n(B9e,"STRONG",{});var bmt=s(cme);vyo=r(bmt,"bloom"),bmt.forEach(t),Fyo=r(B9e," \u2014 "),kD=n(B9e,"A",{href:!0});var vmt=s(kD);Tyo=r(vmt,"BloomForCausalLM"),vmt.forEach(t),Myo=r(B9e," (BLOOM model)"),B9e.forEach(t),Eyo=i(W),yb=n(W,"LI",{});var I9e=s(yb);mme=n(I9e,"STRONG",{});var Fmt=s(mme);Cyo=r(Fmt,"camembert"),Fmt.forEach(t),wyo=r(I9e," \u2014 "),SD=n(I9e,"A",{href:!0});var Tmt=s(SD);Ayo=r(Tmt,"CamembertForCausalLM"),Tmt.forEach(t),yyo=r(I9e," (CamemBERT model)"),I9e.forEach(t),Lyo=i(W),Lb=n(W,"LI",{});var N9e=s(Lb);fme=n(N9e,"STRONG",{});var Mmt=s(fme);xyo=r(Mmt,"ctrl"),Mmt.forEach(t),$yo=r(N9e," \u2014 "),RD=n(N9e,"A",{href:!0});var Emt=s(RD);kyo=r(Emt,"CTRLLMHeadModel"),Emt.forEach(t),Syo=r(N9e," (CTRL model)"),N9e.forEach(t),Ryo=i(W),xb=n(W,"LI",{});var q9e=s(xb);gme=n(q9e,"STRONG",{});var Cmt=s(gme);Pyo=r(Cmt,"data2vec-text"),Cmt.forEach(t),Byo=r(q9e," \u2014 "),PD=n(q9e,"A",{href:!0});var wmt=s(PD);Iyo=r(wmt,"Data2VecTextForCausalLM"),wmt.forEach(t),Nyo=r(q9e," (Data2VecText model)"),q9e.forEach(t),qyo=i(W),$b=n(W,"LI",{});var j9e=s($b);hme=n(j9e,"STRONG",{});var Amt=s(hme);jyo=r(Amt,"electra"),Amt.forEach(t),Dyo=r(j9e," \u2014 "),BD=n(j9e,"A",{href:!0});var ymt=s(BD);Gyo=r(ymt,"ElectraForCausalLM"),ymt.forEach(t),Oyo=r(j9e," (ELECTRA model)"),j9e.forEach(t),Vyo=i(W),kb=n(W,"LI",{});var D9e=s(kb);ume=n(D9e,"STRONG",{});var Lmt=s(ume);Xyo=r(Lmt,"gpt2"),Lmt.forEach(t),zyo=r(D9e," \u2014 "),ID=n(D9e,"A",{href:!0});var xmt=s(ID);Wyo=r(xmt,"GPT2LMHeadModel"),xmt.forEach(t),Qyo=r(D9e," (OpenAI GPT-2 model)"),D9e.forEach(t),Hyo=i(W),Sb=n(W,"LI",{});var G9e=s(Sb);pme=n(G9e,"STRONG",{});var $mt=s(pme);Uyo=r($mt,"gpt_neo"),$mt.forEach(t),Jyo=r(G9e," \u2014 "),ND=n(G9e,"A",{href:!0});var kmt=s(ND);Yyo=r(kmt,"GPTNeoForCausalLM"),kmt.forEach(t),Kyo=r(G9e," (GPT Neo model)"),G9e.forEach(t),Zyo=i(W),Rb=n(W,"LI",{});var O9e=s(Rb);_me=n(O9e,"STRONG",{});var Smt=s(_me);eLo=r(Smt,"gpt_neox"),Smt.forEach(t),oLo=r(O9e," \u2014 "),qD=n(O9e,"A",{href:!0});var Rmt=s(qD);rLo=r(Rmt,"GPTNeoXForCausalLM"),Rmt.forEach(t),tLo=r(O9e," (GPT NeoX model)"),O9e.forEach(t),aLo=i(W),Pb=n(W,"LI",{});var V9e=s(Pb);bme=n(V9e,"STRONG",{});var Pmt=s(bme);nLo=r(Pmt,"gptj"),Pmt.forEach(t),sLo=r(V9e," \u2014 "),jD=n(V9e,"A",{href:!0});var Bmt=s(jD);lLo=r(Bmt,"GPTJForCausalLM"),Bmt.forEach(t),iLo=r(V9e," (GPT-J model)"),V9e.forEach(t),dLo=i(W),Bb=n(W,"LI",{});var X9e=s(Bb);vme=n(X9e,"STRONG",{});var Imt=s(vme);cLo=r(Imt,"marian"),Imt.forEach(t),mLo=r(X9e," \u2014 "),DD=n(X9e,"A",{href:!0});var Nmt=s(DD);fLo=r(Nmt,"MarianForCausalLM"),Nmt.forEach(t),gLo=r(X9e," (Marian model)"),X9e.forEach(t),hLo=i(W),Ib=n(W,"LI",{});var z9e=s(Ib);Fme=n(z9e,"STRONG",{});var qmt=s(Fme);uLo=r(qmt,"mbart"),qmt.forEach(t),pLo=r(z9e," \u2014 "),GD=n(z9e,"A",{href:!0});var jmt=s(GD);_Lo=r(jmt,"MBartForCausalLM"),jmt.forEach(t),bLo=r(z9e," (mBART model)"),z9e.forEach(t),vLo=i(W),Nb=n(W,"LI",{});var W9e=s(Nb);Tme=n(W9e,"STRONG",{});var Dmt=s(Tme);FLo=r(Dmt,"megatron-bert"),Dmt.forEach(t),TLo=r(W9e," \u2014 "),OD=n(W9e,"A",{href:!0});var Gmt=s(OD);MLo=r(Gmt,"MegatronBertForCausalLM"),Gmt.forEach(t),ELo=r(W9e," (Megatron-BERT model)"),W9e.forEach(t),CLo=i(W),qb=n(W,"LI",{});var Q9e=s(qb);Mme=n(Q9e,"STRONG",{});var Omt=s(Mme);wLo=r(Omt,"openai-gpt"),Omt.forEach(t),ALo=r(Q9e," \u2014 "),VD=n(Q9e,"A",{href:!0});var Vmt=s(VD);yLo=r(Vmt,"OpenAIGPTLMHeadModel"),Vmt.forEach(t),LLo=r(Q9e," (OpenAI GPT model)"),Q9e.forEach(t),xLo=i(W),jb=n(W,"LI",{});var H9e=s(jb);Eme=n(H9e,"STRONG",{});var Xmt=s(Eme);$Lo=r(Xmt,"opt"),Xmt.forEach(t),kLo=r(H9e," \u2014 "),XD=n(H9e,"A",{href:!0});var zmt=s(XD);SLo=r(zmt,"OPTForCausalLM"),zmt.forEach(t),RLo=r(H9e," (OPT model)"),H9e.forEach(t),PLo=i(W),Db=n(W,"LI",{});var U9e=s(Db);Cme=n(U9e,"STRONG",{});var Wmt=s(Cme);BLo=r(Wmt,"pegasus"),Wmt.forEach(t),ILo=r(U9e," \u2014 "),zD=n(U9e,"A",{href:!0});var Qmt=s(zD);NLo=r(Qmt,"PegasusForCausalLM"),Qmt.forEach(t),qLo=r(U9e," (Pegasus model)"),U9e.forEach(t),jLo=i(W),Gb=n(W,"LI",{});var J9e=s(Gb);wme=n(J9e,"STRONG",{});var Hmt=s(wme);DLo=r(Hmt,"plbart"),Hmt.forEach(t),GLo=r(J9e," \u2014 "),WD=n(J9e,"A",{href:!0});var Umt=s(WD);OLo=r(Umt,"PLBartForCausalLM"),Umt.forEach(t),VLo=r(J9e," (PLBart model)"),J9e.forEach(t),XLo=i(W),Ob=n(W,"LI",{});var Y9e=s(Ob);Ame=n(Y9e,"STRONG",{});var Jmt=s(Ame);zLo=r(Jmt,"prophetnet"),Jmt.forEach(t),WLo=r(Y9e," \u2014 "),QD=n(Y9e,"A",{href:!0});var Ymt=s(QD);QLo=r(Ymt,"ProphetNetForCausalLM"),Ymt.forEach(t),HLo=r(Y9e," (ProphetNet model)"),Y9e.forEach(t),ULo=i(W),Vb=n(W,"LI",{});var K9e=s(Vb);yme=n(K9e,"STRONG",{});var Kmt=s(yme);JLo=r(Kmt,"qdqbert"),Kmt.forEach(t),YLo=r(K9e," \u2014 "),HD=n(K9e,"A",{href:!0});var Zmt=s(HD);KLo=r(Zmt,"QDQBertLMHeadModel"),Zmt.forEach(t),ZLo=r(K9e," (QDQBert model)"),K9e.forEach(t),e7o=i(W),Xb=n(W,"LI",{});var Z9e=s(Xb);Lme=n(Z9e,"STRONG",{});var eft=s(Lme);o7o=r(eft,"reformer"),eft.forEach(t),r7o=r(Z9e," \u2014 "),UD=n(Z9e,"A",{href:!0});var oft=s(UD);t7o=r(oft,"ReformerModelWithLMHead"),oft.forEach(t),a7o=r(Z9e," (Reformer model)"),Z9e.forEach(t),n7o=i(W),zb=n(W,"LI",{});var exe=s(zb);xme=n(exe,"STRONG",{});var rft=s(xme);s7o=r(rft,"rembert"),rft.forEach(t),l7o=r(exe," \u2014 "),JD=n(exe,"A",{href:!0});var tft=s(JD);i7o=r(tft,"RemBertForCausalLM"),tft.forEach(t),d7o=r(exe," (RemBERT model)"),exe.forEach(t),c7o=i(W),Wb=n(W,"LI",{});var oxe=s(Wb);$me=n(oxe,"STRONG",{});var aft=s($me);m7o=r(aft,"roberta"),aft.forEach(t),f7o=r(oxe," \u2014 "),YD=n(oxe,"A",{href:!0});var nft=s(YD);g7o=r(nft,"RobertaForCausalLM"),nft.forEach(t),h7o=r(oxe," (RoBERTa model)"),oxe.forEach(t),u7o=i(W),Qb=n(W,"LI",{});var rxe=s(Qb);kme=n(rxe,"STRONG",{});var sft=s(kme);p7o=r(sft,"roformer"),sft.forEach(t),_7o=r(rxe," \u2014 "),KD=n(rxe,"A",{href:!0});var lft=s(KD);b7o=r(lft,"RoFormerForCausalLM"),lft.forEach(t),v7o=r(rxe," (RoFormer model)"),rxe.forEach(t),F7o=i(W),Hb=n(W,"LI",{});var txe=s(Hb);Sme=n(txe,"STRONG",{});var ift=s(Sme);T7o=r(ift,"speech_to_text_2"),ift.forEach(t),M7o=r(txe," \u2014 "),ZD=n(txe,"A",{href:!0});var dft=s(ZD);E7o=r(dft,"Speech2Text2ForCausalLM"),dft.forEach(t),C7o=r(txe," (Speech2Text2 model)"),txe.forEach(t),w7o=i(W),Ub=n(W,"LI",{});var axe=s(Ub);Rme=n(axe,"STRONG",{});var cft=s(Rme);A7o=r(cft,"transfo-xl"),cft.forEach(t),y7o=r(axe," \u2014 "),eG=n(axe,"A",{href:!0});var mft=s(eG);L7o=r(mft,"TransfoXLLMHeadModel"),mft.forEach(t),x7o=r(axe," (Transformer-XL model)"),axe.forEach(t),$7o=i(W),Jb=n(W,"LI",{});var nxe=s(Jb);Pme=n(nxe,"STRONG",{});var fft=s(Pme);k7o=r(fft,"trocr"),fft.forEach(t),S7o=r(nxe," \u2014 "),oG=n(nxe,"A",{href:!0});var gft=s(oG);R7o=r(gft,"TrOCRForCausalLM"),gft.forEach(t),P7o=r(nxe," (TrOCR model)"),nxe.forEach(t),B7o=i(W),Yb=n(W,"LI",{});var sxe=s(Yb);Bme=n(sxe,"STRONG",{});var hft=s(Bme);I7o=r(hft,"xglm"),hft.forEach(t),N7o=r(sxe," \u2014 "),rG=n(sxe,"A",{href:!0});var uft=s(rG);q7o=r(uft,"XGLMForCausalLM"),uft.forEach(t),j7o=r(sxe," (XGLM model)"),sxe.forEach(t),D7o=i(W),Kb=n(W,"LI",{});var lxe=s(Kb);Ime=n(lxe,"STRONG",{});var pft=s(Ime);G7o=r(pft,"xlm"),pft.forEach(t),O7o=r(lxe," \u2014 "),tG=n(lxe,"A",{href:!0});var _ft=s(tG);V7o=r(_ft,"XLMWithLMHeadModel"),_ft.forEach(t),X7o=r(lxe," (XLM model)"),lxe.forEach(t),z7o=i(W),Zb=n(W,"LI",{});var ixe=s(Zb);Nme=n(ixe,"STRONG",{});var bft=s(Nme);W7o=r(bft,"xlm-prophetnet"),bft.forEach(t),Q7o=r(ixe," \u2014 "),aG=n(ixe,"A",{href:!0});var vft=s(aG);H7o=r(vft,"XLMProphetNetForCausalLM"),vft.forEach(t),U7o=r(ixe," (XLM-ProphetNet model)"),ixe.forEach(t),J7o=i(W),e2=n(W,"LI",{});var dxe=s(e2);qme=n(dxe,"STRONG",{});var Fft=s(qme);Y7o=r(Fft,"xlm-roberta"),Fft.forEach(t),K7o=r(dxe," \u2014 "),nG=n(dxe,"A",{href:!0});var Tft=s(nG);Z7o=r(Tft,"XLMRobertaForCausalLM"),Tft.forEach(t),e8o=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),o8o=i(W),o2=n(W,"LI",{});var cxe=s(o2);jme=n(cxe,"STRONG",{});var Mft=s(jme);r8o=r(Mft,"xlm-roberta-xl"),Mft.forEach(t),t8o=r(cxe," \u2014 "),sG=n(cxe,"A",{href:!0});var Eft=s(sG);a8o=r(Eft,"XLMRobertaXLForCausalLM"),Eft.forEach(t),n8o=r(cxe," (XLM-RoBERTa-XL model)"),cxe.forEach(t),s8o=i(W),r2=n(W,"LI",{});var mxe=s(r2);Dme=n(mxe,"STRONG",{});var Cft=s(Dme);l8o=r(Cft,"xlnet"),Cft.forEach(t),i8o=r(mxe," \u2014 "),lG=n(mxe,"A",{href:!0});var wft=s(lG);d8o=r(wft,"XLNetLMHeadModel"),wft.forEach(t),c8o=r(mxe," (XLNet model)"),mxe.forEach(t),W.forEach(t),m8o=i(sa),t2=n(sa,"P",{});var fxe=s(t2);f8o=r(fxe,"The model is set in evaluation mode by default using "),Gme=n(fxe,"CODE",{});var Aft=s(Gme);g8o=r(Aft,"model.eval()"),Aft.forEach(t),h8o=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(fxe,"CODE",{});var yft=s(Ome);u8o=r(yft,"model.train()"),yft.forEach(t),fxe.forEach(t),p8o=i(sa),T(a2.$$.fragment,sa),sa.forEach(t),Js.forEach(t),PDe=i(m),Oi=n(m,"H2",{class:!0});var DOe=s(Oi);n2=n(DOe,"A",{id:!0,class:!0,href:!0});var Lft=s(n2);Vme=n(Lft,"SPAN",{});var xft=s(Vme);T(YL.$$.fragment,xft),xft.forEach(t),Lft.forEach(t),_8o=i(DOe),Xme=n(DOe,"SPAN",{});var $ft=s(Xme);b8o=r($ft,"AutoModelForMaskedLM"),$ft.forEach(t),DOe.forEach(t),BDe=i(m),So=n(m,"DIV",{class:!0});var Ys=s(So);T(KL.$$.fragment,Ys),v8o=i(Ys),Vi=n(Ys,"P",{});var Nee=s(Vi);F8o=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iG=n(Nee,"A",{href:!0});var kft=s(iG);T8o=r(kft,"from_pretrained()"),kft.forEach(t),M8o=r(Nee," class method or the "),dG=n(Nee,"A",{href:!0});var Sft=s(dG);E8o=r(Sft,"from_config()"),Sft.forEach(t),C8o=r(Nee,` class
method.`),Nee.forEach(t),w8o=i(Ys),ZL=n(Ys,"P",{});var GOe=s(ZL);A8o=r(GOe,"This class cannot be instantiated directly using "),zme=n(GOe,"CODE",{});var Rft=s(zme);y8o=r(Rft,"__init__()"),Rft.forEach(t),L8o=r(GOe," (throws an error)."),GOe.forEach(t),x8o=i(Ys),it=n(Ys,"DIV",{class:!0});var b6=s(it);T(e7.$$.fragment,b6),$8o=i(b6),Wme=n(b6,"P",{});var Pft=s(Wme);k8o=r(Pft,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pft.forEach(t),S8o=i(b6),Xi=n(b6,"P",{});var qee=s(Xi);R8o=r(qee,`Note:
Loading a model from its configuration file does `),Qme=n(qee,"STRONG",{});var Bft=s(Qme);P8o=r(Bft,"not"),Bft.forEach(t),B8o=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n(qee,"A",{href:!0});var Ift=s(cG);I8o=r(Ift,"from_pretrained()"),Ift.forEach(t),N8o=r(qee," to load the model weights."),qee.forEach(t),q8o=i(b6),T(s2.$$.fragment,b6),b6.forEach(t),j8o=i(Ys),Ze=n(Ys,"DIV",{class:!0});var la=s(Ze);T(o7.$$.fragment,la),D8o=i(la),Hme=n(la,"P",{});var Nft=s(Hme);G8o=r(Nft,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Nft.forEach(t),O8o=i(la),Ba=n(la,"P",{});var v6=s(Ba);V8o=r(v6,"The model class to instantiate is selected based on the "),Ume=n(v6,"CODE",{});var qft=s(Ume);X8o=r(qft,"model_type"),qft.forEach(t),z8o=r(v6,` property of the config object (either
passed as an argument or loaded from `),Jme=n(v6,"CODE",{});var jft=s(Jme);W8o=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),Q8o=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(v6,"CODE",{});var Dft=s(Yme);H8o=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),U8o=r(v6,":"),v6.forEach(t),J8o=i(la),Q=n(la,"UL",{});var H=s(Q);l2=n(H,"LI",{});var gxe=s(l2);Kme=n(gxe,"STRONG",{});var Gft=s(Kme);Y8o=r(Gft,"albert"),Gft.forEach(t),K8o=r(gxe," \u2014 "),mG=n(gxe,"A",{href:!0});var Oft=s(mG);Z8o=r(Oft,"AlbertForMaskedLM"),Oft.forEach(t),e9o=r(gxe," (ALBERT model)"),gxe.forEach(t),o9o=i(H),i2=n(H,"LI",{});var hxe=s(i2);Zme=n(hxe,"STRONG",{});var Vft=s(Zme);r9o=r(Vft,"bart"),Vft.forEach(t),t9o=r(hxe," \u2014 "),fG=n(hxe,"A",{href:!0});var Xft=s(fG);a9o=r(Xft,"BartForConditionalGeneration"),Xft.forEach(t),n9o=r(hxe," (BART model)"),hxe.forEach(t),s9o=i(H),d2=n(H,"LI",{});var uxe=s(d2);efe=n(uxe,"STRONG",{});var zft=s(efe);l9o=r(zft,"bert"),zft.forEach(t),i9o=r(uxe," \u2014 "),gG=n(uxe,"A",{href:!0});var Wft=s(gG);d9o=r(Wft,"BertForMaskedLM"),Wft.forEach(t),c9o=r(uxe," (BERT model)"),uxe.forEach(t),m9o=i(H),c2=n(H,"LI",{});var pxe=s(c2);ofe=n(pxe,"STRONG",{});var Qft=s(ofe);f9o=r(Qft,"big_bird"),Qft.forEach(t),g9o=r(pxe," \u2014 "),hG=n(pxe,"A",{href:!0});var Hft=s(hG);h9o=r(Hft,"BigBirdForMaskedLM"),Hft.forEach(t),u9o=r(pxe," (BigBird model)"),pxe.forEach(t),p9o=i(H),m2=n(H,"LI",{});var _xe=s(m2);rfe=n(_xe,"STRONG",{});var Uft=s(rfe);_9o=r(Uft,"camembert"),Uft.forEach(t),b9o=r(_xe," \u2014 "),uG=n(_xe,"A",{href:!0});var Jft=s(uG);v9o=r(Jft,"CamembertForMaskedLM"),Jft.forEach(t),F9o=r(_xe," (CamemBERT model)"),_xe.forEach(t),T9o=i(H),f2=n(H,"LI",{});var bxe=s(f2);tfe=n(bxe,"STRONG",{});var Yft=s(tfe);M9o=r(Yft,"convbert"),Yft.forEach(t),E9o=r(bxe," \u2014 "),pG=n(bxe,"A",{href:!0});var Kft=s(pG);C9o=r(Kft,"ConvBertForMaskedLM"),Kft.forEach(t),w9o=r(bxe," (ConvBERT model)"),bxe.forEach(t),A9o=i(H),g2=n(H,"LI",{});var vxe=s(g2);afe=n(vxe,"STRONG",{});var Zft=s(afe);y9o=r(Zft,"data2vec-text"),Zft.forEach(t),L9o=r(vxe," \u2014 "),_G=n(vxe,"A",{href:!0});var egt=s(_G);x9o=r(egt,"Data2VecTextForMaskedLM"),egt.forEach(t),$9o=r(vxe," (Data2VecText model)"),vxe.forEach(t),k9o=i(H),h2=n(H,"LI",{});var Fxe=s(h2);nfe=n(Fxe,"STRONG",{});var ogt=s(nfe);S9o=r(ogt,"deberta"),ogt.forEach(t),R9o=r(Fxe," \u2014 "),bG=n(Fxe,"A",{href:!0});var rgt=s(bG);P9o=r(rgt,"DebertaForMaskedLM"),rgt.forEach(t),B9o=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),I9o=i(H),u2=n(H,"LI",{});var Txe=s(u2);sfe=n(Txe,"STRONG",{});var tgt=s(sfe);N9o=r(tgt,"deberta-v2"),tgt.forEach(t),q9o=r(Txe," \u2014 "),vG=n(Txe,"A",{href:!0});var agt=s(vG);j9o=r(agt,"DebertaV2ForMaskedLM"),agt.forEach(t),D9o=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),G9o=i(H),p2=n(H,"LI",{});var Mxe=s(p2);lfe=n(Mxe,"STRONG",{});var ngt=s(lfe);O9o=r(ngt,"distilbert"),ngt.forEach(t),V9o=r(Mxe," \u2014 "),FG=n(Mxe,"A",{href:!0});var sgt=s(FG);X9o=r(sgt,"DistilBertForMaskedLM"),sgt.forEach(t),z9o=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),W9o=i(H),_2=n(H,"LI",{});var Exe=s(_2);ife=n(Exe,"STRONG",{});var lgt=s(ife);Q9o=r(lgt,"electra"),lgt.forEach(t),H9o=r(Exe," \u2014 "),TG=n(Exe,"A",{href:!0});var igt=s(TG);U9o=r(igt,"ElectraForMaskedLM"),igt.forEach(t),J9o=r(Exe," (ELECTRA model)"),Exe.forEach(t),Y9o=i(H),b2=n(H,"LI",{});var Cxe=s(b2);dfe=n(Cxe,"STRONG",{});var dgt=s(dfe);K9o=r(dgt,"flaubert"),dgt.forEach(t),Z9o=r(Cxe," \u2014 "),MG=n(Cxe,"A",{href:!0});var cgt=s(MG);exo=r(cgt,"FlaubertWithLMHeadModel"),cgt.forEach(t),oxo=r(Cxe," (FlauBERT model)"),Cxe.forEach(t),rxo=i(H),v2=n(H,"LI",{});var wxe=s(v2);cfe=n(wxe,"STRONG",{});var mgt=s(cfe);txo=r(mgt,"fnet"),mgt.forEach(t),axo=r(wxe," \u2014 "),EG=n(wxe,"A",{href:!0});var fgt=s(EG);nxo=r(fgt,"FNetForMaskedLM"),fgt.forEach(t),sxo=r(wxe," (FNet model)"),wxe.forEach(t),lxo=i(H),F2=n(H,"LI",{});var Axe=s(F2);mfe=n(Axe,"STRONG",{});var ggt=s(mfe);ixo=r(ggt,"funnel"),ggt.forEach(t),dxo=r(Axe," \u2014 "),CG=n(Axe,"A",{href:!0});var hgt=s(CG);cxo=r(hgt,"FunnelForMaskedLM"),hgt.forEach(t),mxo=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),fxo=i(H),T2=n(H,"LI",{});var yxe=s(T2);ffe=n(yxe,"STRONG",{});var ugt=s(ffe);gxo=r(ugt,"ibert"),ugt.forEach(t),hxo=r(yxe," \u2014 "),wG=n(yxe,"A",{href:!0});var pgt=s(wG);uxo=r(pgt,"IBertForMaskedLM"),pgt.forEach(t),pxo=r(yxe," (I-BERT model)"),yxe.forEach(t),_xo=i(H),M2=n(H,"LI",{});var Lxe=s(M2);gfe=n(Lxe,"STRONG",{});var _gt=s(gfe);bxo=r(_gt,"layoutlm"),_gt.forEach(t),vxo=r(Lxe," \u2014 "),AG=n(Lxe,"A",{href:!0});var bgt=s(AG);Fxo=r(bgt,"LayoutLMForMaskedLM"),bgt.forEach(t),Txo=r(Lxe," (LayoutLM model)"),Lxe.forEach(t),Mxo=i(H),E2=n(H,"LI",{});var xxe=s(E2);hfe=n(xxe,"STRONG",{});var vgt=s(hfe);Exo=r(vgt,"longformer"),vgt.forEach(t),Cxo=r(xxe," \u2014 "),yG=n(xxe,"A",{href:!0});var Fgt=s(yG);wxo=r(Fgt,"LongformerForMaskedLM"),Fgt.forEach(t),Axo=r(xxe," (Longformer model)"),xxe.forEach(t),yxo=i(H),C2=n(H,"LI",{});var $xe=s(C2);ufe=n($xe,"STRONG",{});var Tgt=s(ufe);Lxo=r(Tgt,"luke"),Tgt.forEach(t),xxo=r($xe," \u2014 "),LG=n($xe,"A",{href:!0});var Mgt=s(LG);$xo=r(Mgt,"LukeForMaskedLM"),Mgt.forEach(t),kxo=r($xe," (LUKE model)"),$xe.forEach(t),Sxo=i(H),w2=n(H,"LI",{});var kxe=s(w2);pfe=n(kxe,"STRONG",{});var Egt=s(pfe);Rxo=r(Egt,"mbart"),Egt.forEach(t),Pxo=r(kxe," \u2014 "),xG=n(kxe,"A",{href:!0});var Cgt=s(xG);Bxo=r(Cgt,"MBartForConditionalGeneration"),Cgt.forEach(t),Ixo=r(kxe," (mBART model)"),kxe.forEach(t),Nxo=i(H),A2=n(H,"LI",{});var Sxe=s(A2);_fe=n(Sxe,"STRONG",{});var wgt=s(_fe);qxo=r(wgt,"megatron-bert"),wgt.forEach(t),jxo=r(Sxe," \u2014 "),$G=n(Sxe,"A",{href:!0});var Agt=s($G);Dxo=r(Agt,"MegatronBertForMaskedLM"),Agt.forEach(t),Gxo=r(Sxe," (Megatron-BERT model)"),Sxe.forEach(t),Oxo=i(H),y2=n(H,"LI",{});var Rxe=s(y2);bfe=n(Rxe,"STRONG",{});var ygt=s(bfe);Vxo=r(ygt,"mobilebert"),ygt.forEach(t),Xxo=r(Rxe," \u2014 "),kG=n(Rxe,"A",{href:!0});var Lgt=s(kG);zxo=r(Lgt,"MobileBertForMaskedLM"),Lgt.forEach(t),Wxo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),Qxo=i(H),L2=n(H,"LI",{});var Pxe=s(L2);vfe=n(Pxe,"STRONG",{});var xgt=s(vfe);Hxo=r(xgt,"mpnet"),xgt.forEach(t),Uxo=r(Pxe," \u2014 "),SG=n(Pxe,"A",{href:!0});var $gt=s(SG);Jxo=r($gt,"MPNetForMaskedLM"),$gt.forEach(t),Yxo=r(Pxe," (MPNet model)"),Pxe.forEach(t),Kxo=i(H),x2=n(H,"LI",{});var Bxe=s(x2);Ffe=n(Bxe,"STRONG",{});var kgt=s(Ffe);Zxo=r(kgt,"nystromformer"),kgt.forEach(t),e$o=r(Bxe," \u2014 "),RG=n(Bxe,"A",{href:!0});var Sgt=s(RG);o$o=r(Sgt,"NystromformerForMaskedLM"),Sgt.forEach(t),r$o=r(Bxe," (Nystr\xF6mformer model)"),Bxe.forEach(t),t$o=i(H),$2=n(H,"LI",{});var Ixe=s($2);Tfe=n(Ixe,"STRONG",{});var Rgt=s(Tfe);a$o=r(Rgt,"perceiver"),Rgt.forEach(t),n$o=r(Ixe," \u2014 "),PG=n(Ixe,"A",{href:!0});var Pgt=s(PG);s$o=r(Pgt,"PerceiverForMaskedLM"),Pgt.forEach(t),l$o=r(Ixe," (Perceiver model)"),Ixe.forEach(t),i$o=i(H),k2=n(H,"LI",{});var Nxe=s(k2);Mfe=n(Nxe,"STRONG",{});var Bgt=s(Mfe);d$o=r(Bgt,"qdqbert"),Bgt.forEach(t),c$o=r(Nxe," \u2014 "),BG=n(Nxe,"A",{href:!0});var Igt=s(BG);m$o=r(Igt,"QDQBertForMaskedLM"),Igt.forEach(t),f$o=r(Nxe," (QDQBert model)"),Nxe.forEach(t),g$o=i(H),S2=n(H,"LI",{});var qxe=s(S2);Efe=n(qxe,"STRONG",{});var Ngt=s(Efe);h$o=r(Ngt,"reformer"),Ngt.forEach(t),u$o=r(qxe," \u2014 "),IG=n(qxe,"A",{href:!0});var qgt=s(IG);p$o=r(qgt,"ReformerForMaskedLM"),qgt.forEach(t),_$o=r(qxe," (Reformer model)"),qxe.forEach(t),b$o=i(H),R2=n(H,"LI",{});var jxe=s(R2);Cfe=n(jxe,"STRONG",{});var jgt=s(Cfe);v$o=r(jgt,"rembert"),jgt.forEach(t),F$o=r(jxe," \u2014 "),NG=n(jxe,"A",{href:!0});var Dgt=s(NG);T$o=r(Dgt,"RemBertForMaskedLM"),Dgt.forEach(t),M$o=r(jxe," (RemBERT model)"),jxe.forEach(t),E$o=i(H),P2=n(H,"LI",{});var Dxe=s(P2);wfe=n(Dxe,"STRONG",{});var Ggt=s(wfe);C$o=r(Ggt,"roberta"),Ggt.forEach(t),w$o=r(Dxe," \u2014 "),qG=n(Dxe,"A",{href:!0});var Ogt=s(qG);A$o=r(Ogt,"RobertaForMaskedLM"),Ogt.forEach(t),y$o=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),L$o=i(H),B2=n(H,"LI",{});var Gxe=s(B2);Afe=n(Gxe,"STRONG",{});var Vgt=s(Afe);x$o=r(Vgt,"roformer"),Vgt.forEach(t),$$o=r(Gxe," \u2014 "),jG=n(Gxe,"A",{href:!0});var Xgt=s(jG);k$o=r(Xgt,"RoFormerForMaskedLM"),Xgt.forEach(t),S$o=r(Gxe," (RoFormer model)"),Gxe.forEach(t),R$o=i(H),I2=n(H,"LI",{});var Oxe=s(I2);yfe=n(Oxe,"STRONG",{});var zgt=s(yfe);P$o=r(zgt,"squeezebert"),zgt.forEach(t),B$o=r(Oxe," \u2014 "),DG=n(Oxe,"A",{href:!0});var Wgt=s(DG);I$o=r(Wgt,"SqueezeBertForMaskedLM"),Wgt.forEach(t),N$o=r(Oxe," (SqueezeBERT model)"),Oxe.forEach(t),q$o=i(H),N2=n(H,"LI",{});var Vxe=s(N2);Lfe=n(Vxe,"STRONG",{});var Qgt=s(Lfe);j$o=r(Qgt,"tapas"),Qgt.forEach(t),D$o=r(Vxe," \u2014 "),GG=n(Vxe,"A",{href:!0});var Hgt=s(GG);G$o=r(Hgt,"TapasForMaskedLM"),Hgt.forEach(t),O$o=r(Vxe," (TAPAS model)"),Vxe.forEach(t),V$o=i(H),q2=n(H,"LI",{});var Xxe=s(q2);xfe=n(Xxe,"STRONG",{});var Ugt=s(xfe);X$o=r(Ugt,"wav2vec2"),Ugt.forEach(t),z$o=r(Xxe," \u2014 "),$fe=n(Xxe,"CODE",{});var Jgt=s($fe);W$o=r(Jgt,"Wav2Vec2ForMaskedLM"),Jgt.forEach(t),Q$o=r(Xxe," (Wav2Vec2 model)"),Xxe.forEach(t),H$o=i(H),j2=n(H,"LI",{});var zxe=s(j2);kfe=n(zxe,"STRONG",{});var Ygt=s(kfe);U$o=r(Ygt,"xlm"),Ygt.forEach(t),J$o=r(zxe," \u2014 "),OG=n(zxe,"A",{href:!0});var Kgt=s(OG);Y$o=r(Kgt,"XLMWithLMHeadModel"),Kgt.forEach(t),K$o=r(zxe," (XLM model)"),zxe.forEach(t),Z$o=i(H),D2=n(H,"LI",{});var Wxe=s(D2);Sfe=n(Wxe,"STRONG",{});var Zgt=s(Sfe);eko=r(Zgt,"xlm-roberta"),Zgt.forEach(t),oko=r(Wxe," \u2014 "),VG=n(Wxe,"A",{href:!0});var eht=s(VG);rko=r(eht,"XLMRobertaForMaskedLM"),eht.forEach(t),tko=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),ako=i(H),G2=n(H,"LI",{});var Qxe=s(G2);Rfe=n(Qxe,"STRONG",{});var oht=s(Rfe);nko=r(oht,"xlm-roberta-xl"),oht.forEach(t),sko=r(Qxe," \u2014 "),XG=n(Qxe,"A",{href:!0});var rht=s(XG);lko=r(rht,"XLMRobertaXLForMaskedLM"),rht.forEach(t),iko=r(Qxe," (XLM-RoBERTa-XL model)"),Qxe.forEach(t),dko=i(H),O2=n(H,"LI",{});var Hxe=s(O2);Pfe=n(Hxe,"STRONG",{});var tht=s(Pfe);cko=r(tht,"yoso"),tht.forEach(t),mko=r(Hxe," \u2014 "),zG=n(Hxe,"A",{href:!0});var aht=s(zG);fko=r(aht,"YosoForMaskedLM"),aht.forEach(t),gko=r(Hxe," (YOSO model)"),Hxe.forEach(t),H.forEach(t),hko=i(la),V2=n(la,"P",{});var Uxe=s(V2);uko=r(Uxe,"The model is set in evaluation mode by default using "),Bfe=n(Uxe,"CODE",{});var nht=s(Bfe);pko=r(nht,"model.eval()"),nht.forEach(t),_ko=r(Uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(Uxe,"CODE",{});var sht=s(Ife);bko=r(sht,"model.train()"),sht.forEach(t),Uxe.forEach(t),vko=i(la),T(X2.$$.fragment,la),la.forEach(t),Ys.forEach(t),IDe=i(m),zi=n(m,"H2",{class:!0});var OOe=s(zi);z2=n(OOe,"A",{id:!0,class:!0,href:!0});var lht=s(z2);Nfe=n(lht,"SPAN",{});var iht=s(Nfe);T(r7.$$.fragment,iht),iht.forEach(t),lht.forEach(t),Fko=i(OOe),qfe=n(OOe,"SPAN",{});var dht=s(qfe);Tko=r(dht,"AutoModelForSeq2SeqLM"),dht.forEach(t),OOe.forEach(t),NDe=i(m),Ro=n(m,"DIV",{class:!0});var Ks=s(Ro);T(t7.$$.fragment,Ks),Mko=i(Ks),Wi=n(Ks,"P",{});var jee=s(Wi);Eko=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WG=n(jee,"A",{href:!0});var cht=s(WG);Cko=r(cht,"from_pretrained()"),cht.forEach(t),wko=r(jee," class method or the "),QG=n(jee,"A",{href:!0});var mht=s(QG);Ako=r(mht,"from_config()"),mht.forEach(t),yko=r(jee,` class
method.`),jee.forEach(t),Lko=i(Ks),a7=n(Ks,"P",{});var VOe=s(a7);xko=r(VOe,"This class cannot be instantiated directly using "),jfe=n(VOe,"CODE",{});var fht=s(jfe);$ko=r(fht,"__init__()"),fht.forEach(t),kko=r(VOe," (throws an error)."),VOe.forEach(t),Sko=i(Ks),dt=n(Ks,"DIV",{class:!0});var F6=s(dt);T(n7.$$.fragment,F6),Rko=i(F6),Dfe=n(F6,"P",{});var ght=s(Dfe);Pko=r(ght,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ght.forEach(t),Bko=i(F6),Qi=n(F6,"P",{});var Dee=s(Qi);Iko=r(Dee,`Note:
Loading a model from its configuration file does `),Gfe=n(Dee,"STRONG",{});var hht=s(Gfe);Nko=r(hht,"not"),hht.forEach(t),qko=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(Dee,"A",{href:!0});var uht=s(HG);jko=r(uht,"from_pretrained()"),uht.forEach(t),Dko=r(Dee," to load the model weights."),Dee.forEach(t),Gko=i(F6),T(W2.$$.fragment,F6),F6.forEach(t),Oko=i(Ks),eo=n(Ks,"DIV",{class:!0});var ia=s(eo);T(s7.$$.fragment,ia),Vko=i(ia),Ofe=n(ia,"P",{});var pht=s(Ofe);Xko=r(pht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pht.forEach(t),zko=i(ia),Ia=n(ia,"P",{});var T6=s(Ia);Wko=r(T6,"The model class to instantiate is selected based on the "),Vfe=n(T6,"CODE",{});var _ht=s(Vfe);Qko=r(_ht,"model_type"),_ht.forEach(t),Hko=r(T6,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(T6,"CODE",{});var bht=s(Xfe);Uko=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),Jko=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(T6,"CODE",{});var vht=s(zfe);Yko=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),Kko=r(T6,":"),T6.forEach(t),Zko=i(ia),pe=n(ia,"UL",{});var Fe=s(pe);Q2=n(Fe,"LI",{});var Jxe=s(Q2);Wfe=n(Jxe,"STRONG",{});var Fht=s(Wfe);eSo=r(Fht,"bart"),Fht.forEach(t),oSo=r(Jxe," \u2014 "),UG=n(Jxe,"A",{href:!0});var Tht=s(UG);rSo=r(Tht,"BartForConditionalGeneration"),Tht.forEach(t),tSo=r(Jxe," (BART model)"),Jxe.forEach(t),aSo=i(Fe),H2=n(Fe,"LI",{});var Yxe=s(H2);Qfe=n(Yxe,"STRONG",{});var Mht=s(Qfe);nSo=r(Mht,"bigbird_pegasus"),Mht.forEach(t),sSo=r(Yxe," \u2014 "),JG=n(Yxe,"A",{href:!0});var Eht=s(JG);lSo=r(Eht,"BigBirdPegasusForConditionalGeneration"),Eht.forEach(t),iSo=r(Yxe," (BigBird-Pegasus model)"),Yxe.forEach(t),dSo=i(Fe),U2=n(Fe,"LI",{});var Kxe=s(U2);Hfe=n(Kxe,"STRONG",{});var Cht=s(Hfe);cSo=r(Cht,"blenderbot"),Cht.forEach(t),mSo=r(Kxe," \u2014 "),YG=n(Kxe,"A",{href:!0});var wht=s(YG);fSo=r(wht,"BlenderbotForConditionalGeneration"),wht.forEach(t),gSo=r(Kxe," (Blenderbot model)"),Kxe.forEach(t),hSo=i(Fe),J2=n(Fe,"LI",{});var Zxe=s(J2);Ufe=n(Zxe,"STRONG",{});var Aht=s(Ufe);uSo=r(Aht,"blenderbot-small"),Aht.forEach(t),pSo=r(Zxe," \u2014 "),KG=n(Zxe,"A",{href:!0});var yht=s(KG);_So=r(yht,"BlenderbotSmallForConditionalGeneration"),yht.forEach(t),bSo=r(Zxe," (BlenderbotSmall model)"),Zxe.forEach(t),vSo=i(Fe),Y2=n(Fe,"LI",{});var e$e=s(Y2);Jfe=n(e$e,"STRONG",{});var Lht=s(Jfe);FSo=r(Lht,"encoder-decoder"),Lht.forEach(t),TSo=r(e$e," \u2014 "),ZG=n(e$e,"A",{href:!0});var xht=s(ZG);MSo=r(xht,"EncoderDecoderModel"),xht.forEach(t),ESo=r(e$e," (Encoder decoder model)"),e$e.forEach(t),CSo=i(Fe),K2=n(Fe,"LI",{});var o$e=s(K2);Yfe=n(o$e,"STRONG",{});var $ht=s(Yfe);wSo=r($ht,"fsmt"),$ht.forEach(t),ASo=r(o$e," \u2014 "),eO=n(o$e,"A",{href:!0});var kht=s(eO);ySo=r(kht,"FSMTForConditionalGeneration"),kht.forEach(t),LSo=r(o$e," (FairSeq Machine-Translation model)"),o$e.forEach(t),xSo=i(Fe),Z2=n(Fe,"LI",{});var r$e=s(Z2);Kfe=n(r$e,"STRONG",{});var Sht=s(Kfe);$So=r(Sht,"led"),Sht.forEach(t),kSo=r(r$e," \u2014 "),oO=n(r$e,"A",{href:!0});var Rht=s(oO);SSo=r(Rht,"LEDForConditionalGeneration"),Rht.forEach(t),RSo=r(r$e," (LED model)"),r$e.forEach(t),PSo=i(Fe),ev=n(Fe,"LI",{});var t$e=s(ev);Zfe=n(t$e,"STRONG",{});var Pht=s(Zfe);BSo=r(Pht,"m2m_100"),Pht.forEach(t),ISo=r(t$e," \u2014 "),rO=n(t$e,"A",{href:!0});var Bht=s(rO);NSo=r(Bht,"M2M100ForConditionalGeneration"),Bht.forEach(t),qSo=r(t$e," (M2M100 model)"),t$e.forEach(t),jSo=i(Fe),ov=n(Fe,"LI",{});var a$e=s(ov);ege=n(a$e,"STRONG",{});var Iht=s(ege);DSo=r(Iht,"marian"),Iht.forEach(t),GSo=r(a$e," \u2014 "),tO=n(a$e,"A",{href:!0});var Nht=s(tO);OSo=r(Nht,"MarianMTModel"),Nht.forEach(t),VSo=r(a$e," (Marian model)"),a$e.forEach(t),XSo=i(Fe),rv=n(Fe,"LI",{});var n$e=s(rv);oge=n(n$e,"STRONG",{});var qht=s(oge);zSo=r(qht,"mbart"),qht.forEach(t),WSo=r(n$e," \u2014 "),aO=n(n$e,"A",{href:!0});var jht=s(aO);QSo=r(jht,"MBartForConditionalGeneration"),jht.forEach(t),HSo=r(n$e," (mBART model)"),n$e.forEach(t),USo=i(Fe),tv=n(Fe,"LI",{});var s$e=s(tv);rge=n(s$e,"STRONG",{});var Dht=s(rge);JSo=r(Dht,"mt5"),Dht.forEach(t),YSo=r(s$e," \u2014 "),nO=n(s$e,"A",{href:!0});var Ght=s(nO);KSo=r(Ght,"MT5ForConditionalGeneration"),Ght.forEach(t),ZSo=r(s$e," (MT5 model)"),s$e.forEach(t),eRo=i(Fe),av=n(Fe,"LI",{});var l$e=s(av);tge=n(l$e,"STRONG",{});var Oht=s(tge);oRo=r(Oht,"pegasus"),Oht.forEach(t),rRo=r(l$e," \u2014 "),sO=n(l$e,"A",{href:!0});var Vht=s(sO);tRo=r(Vht,"PegasusForConditionalGeneration"),Vht.forEach(t),aRo=r(l$e," (Pegasus model)"),l$e.forEach(t),nRo=i(Fe),nv=n(Fe,"LI",{});var i$e=s(nv);age=n(i$e,"STRONG",{});var Xht=s(age);sRo=r(Xht,"plbart"),Xht.forEach(t),lRo=r(i$e," \u2014 "),lO=n(i$e,"A",{href:!0});var zht=s(lO);iRo=r(zht,"PLBartForConditionalGeneration"),zht.forEach(t),dRo=r(i$e," (PLBart model)"),i$e.forEach(t),cRo=i(Fe),sv=n(Fe,"LI",{});var d$e=s(sv);nge=n(d$e,"STRONG",{});var Wht=s(nge);mRo=r(Wht,"prophetnet"),Wht.forEach(t),fRo=r(d$e," \u2014 "),iO=n(d$e,"A",{href:!0});var Qht=s(iO);gRo=r(Qht,"ProphetNetForConditionalGeneration"),Qht.forEach(t),hRo=r(d$e," (ProphetNet model)"),d$e.forEach(t),uRo=i(Fe),lv=n(Fe,"LI",{});var c$e=s(lv);sge=n(c$e,"STRONG",{});var Hht=s(sge);pRo=r(Hht,"t5"),Hht.forEach(t),_Ro=r(c$e," \u2014 "),dO=n(c$e,"A",{href:!0});var Uht=s(dO);bRo=r(Uht,"T5ForConditionalGeneration"),Uht.forEach(t),vRo=r(c$e," (T5 model)"),c$e.forEach(t),FRo=i(Fe),iv=n(Fe,"LI",{});var m$e=s(iv);lge=n(m$e,"STRONG",{});var Jht=s(lge);TRo=r(Jht,"xlm-prophetnet"),Jht.forEach(t),MRo=r(m$e," \u2014 "),cO=n(m$e,"A",{href:!0});var Yht=s(cO);ERo=r(Yht,"XLMProphetNetForConditionalGeneration"),Yht.forEach(t),CRo=r(m$e," (XLM-ProphetNet model)"),m$e.forEach(t),Fe.forEach(t),wRo=i(ia),dv=n(ia,"P",{});var f$e=s(dv);ARo=r(f$e,"The model is set in evaluation mode by default using "),ige=n(f$e,"CODE",{});var Kht=s(ige);yRo=r(Kht,"model.eval()"),Kht.forEach(t),LRo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(f$e,"CODE",{});var Zht=s(dge);xRo=r(Zht,"model.train()"),Zht.forEach(t),f$e.forEach(t),$Ro=i(ia),T(cv.$$.fragment,ia),ia.forEach(t),Ks.forEach(t),qDe=i(m),Hi=n(m,"H2",{class:!0});var XOe=s(Hi);mv=n(XOe,"A",{id:!0,class:!0,href:!0});var eut=s(mv);cge=n(eut,"SPAN",{});var out=s(cge);T(l7.$$.fragment,out),out.forEach(t),eut.forEach(t),kRo=i(XOe),mge=n(XOe,"SPAN",{});var rut=s(mge);SRo=r(rut,"AutoModelForSequenceClassification"),rut.forEach(t),XOe.forEach(t),jDe=i(m),Po=n(m,"DIV",{class:!0});var Zs=s(Po);T(i7.$$.fragment,Zs),RRo=i(Zs),Ui=n(Zs,"P",{});var Gee=s(Ui);PRo=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mO=n(Gee,"A",{href:!0});var tut=s(mO);BRo=r(tut,"from_pretrained()"),tut.forEach(t),IRo=r(Gee," class method or the "),fO=n(Gee,"A",{href:!0});var aut=s(fO);NRo=r(aut,"from_config()"),aut.forEach(t),qRo=r(Gee,` class
method.`),Gee.forEach(t),jRo=i(Zs),d7=n(Zs,"P",{});var zOe=s(d7);DRo=r(zOe,"This class cannot be instantiated directly using "),fge=n(zOe,"CODE",{});var nut=s(fge);GRo=r(nut,"__init__()"),nut.forEach(t),ORo=r(zOe," (throws an error)."),zOe.forEach(t),VRo=i(Zs),ct=n(Zs,"DIV",{class:!0});var M6=s(ct);T(c7.$$.fragment,M6),XRo=i(M6),gge=n(M6,"P",{});var sut=s(gge);zRo=r(sut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sut.forEach(t),WRo=i(M6),Ji=n(M6,"P",{});var Oee=s(Ji);QRo=r(Oee,`Note:
Loading a model from its configuration file does `),hge=n(Oee,"STRONG",{});var lut=s(hge);HRo=r(lut,"not"),lut.forEach(t),URo=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(Oee,"A",{href:!0});var iut=s(gO);JRo=r(iut,"from_pretrained()"),iut.forEach(t),YRo=r(Oee," to load the model weights."),Oee.forEach(t),KRo=i(M6),T(fv.$$.fragment,M6),M6.forEach(t),ZRo=i(Zs),oo=n(Zs,"DIV",{class:!0});var da=s(oo);T(m7.$$.fragment,da),ePo=i(da),uge=n(da,"P",{});var dut=s(uge);oPo=r(dut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dut.forEach(t),rPo=i(da),Na=n(da,"P",{});var E6=s(Na);tPo=r(E6,"The model class to instantiate is selected based on the "),pge=n(E6,"CODE",{});var cut=s(pge);aPo=r(cut,"model_type"),cut.forEach(t),nPo=r(E6,` property of the config object (either
passed as an argument or loaded from `),_ge=n(E6,"CODE",{});var mut=s(_ge);sPo=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),lPo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(E6,"CODE",{});var fut=s(bge);iPo=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),dPo=r(E6,":"),E6.forEach(t),cPo=i(da),N=n(da,"UL",{});var j=s(N);gv=n(j,"LI",{});var g$e=s(gv);vge=n(g$e,"STRONG",{});var gut=s(vge);mPo=r(gut,"albert"),gut.forEach(t),fPo=r(g$e," \u2014 "),hO=n(g$e,"A",{href:!0});var hut=s(hO);gPo=r(hut,"AlbertForSequenceClassification"),hut.forEach(t),hPo=r(g$e," (ALBERT model)"),g$e.forEach(t),uPo=i(j),hv=n(j,"LI",{});var h$e=s(hv);Fge=n(h$e,"STRONG",{});var uut=s(Fge);pPo=r(uut,"bart"),uut.forEach(t),_Po=r(h$e," \u2014 "),uO=n(h$e,"A",{href:!0});var put=s(uO);bPo=r(put,"BartForSequenceClassification"),put.forEach(t),vPo=r(h$e," (BART model)"),h$e.forEach(t),FPo=i(j),uv=n(j,"LI",{});var u$e=s(uv);Tge=n(u$e,"STRONG",{});var _ut=s(Tge);TPo=r(_ut,"bert"),_ut.forEach(t),MPo=r(u$e," \u2014 "),pO=n(u$e,"A",{href:!0});var but=s(pO);EPo=r(but,"BertForSequenceClassification"),but.forEach(t),CPo=r(u$e," (BERT model)"),u$e.forEach(t),wPo=i(j),pv=n(j,"LI",{});var p$e=s(pv);Mge=n(p$e,"STRONG",{});var vut=s(Mge);APo=r(vut,"big_bird"),vut.forEach(t),yPo=r(p$e," \u2014 "),_O=n(p$e,"A",{href:!0});var Fut=s(_O);LPo=r(Fut,"BigBirdForSequenceClassification"),Fut.forEach(t),xPo=r(p$e," (BigBird model)"),p$e.forEach(t),$Po=i(j),_v=n(j,"LI",{});var _$e=s(_v);Ege=n(_$e,"STRONG",{});var Tut=s(Ege);kPo=r(Tut,"bigbird_pegasus"),Tut.forEach(t),SPo=r(_$e," \u2014 "),bO=n(_$e,"A",{href:!0});var Mut=s(bO);RPo=r(Mut,"BigBirdPegasusForSequenceClassification"),Mut.forEach(t),PPo=r(_$e," (BigBird-Pegasus model)"),_$e.forEach(t),BPo=i(j),bv=n(j,"LI",{});var b$e=s(bv);Cge=n(b$e,"STRONG",{});var Eut=s(Cge);IPo=r(Eut,"camembert"),Eut.forEach(t),NPo=r(b$e," \u2014 "),vO=n(b$e,"A",{href:!0});var Cut=s(vO);qPo=r(Cut,"CamembertForSequenceClassification"),Cut.forEach(t),jPo=r(b$e," (CamemBERT model)"),b$e.forEach(t),DPo=i(j),vv=n(j,"LI",{});var v$e=s(vv);wge=n(v$e,"STRONG",{});var wut=s(wge);GPo=r(wut,"canine"),wut.forEach(t),OPo=r(v$e," \u2014 "),FO=n(v$e,"A",{href:!0});var Aut=s(FO);VPo=r(Aut,"CanineForSequenceClassification"),Aut.forEach(t),XPo=r(v$e," (CANINE model)"),v$e.forEach(t),zPo=i(j),Fv=n(j,"LI",{});var F$e=s(Fv);Age=n(F$e,"STRONG",{});var yut=s(Age);WPo=r(yut,"convbert"),yut.forEach(t),QPo=r(F$e," \u2014 "),TO=n(F$e,"A",{href:!0});var Lut=s(TO);HPo=r(Lut,"ConvBertForSequenceClassification"),Lut.forEach(t),UPo=r(F$e," (ConvBERT model)"),F$e.forEach(t),JPo=i(j),Tv=n(j,"LI",{});var T$e=s(Tv);yge=n(T$e,"STRONG",{});var xut=s(yge);YPo=r(xut,"ctrl"),xut.forEach(t),KPo=r(T$e," \u2014 "),MO=n(T$e,"A",{href:!0});var $ut=s(MO);ZPo=r($ut,"CTRLForSequenceClassification"),$ut.forEach(t),eBo=r(T$e," (CTRL model)"),T$e.forEach(t),oBo=i(j),Mv=n(j,"LI",{});var M$e=s(Mv);Lge=n(M$e,"STRONG",{});var kut=s(Lge);rBo=r(kut,"data2vec-text"),kut.forEach(t),tBo=r(M$e," \u2014 "),EO=n(M$e,"A",{href:!0});var Sut=s(EO);aBo=r(Sut,"Data2VecTextForSequenceClassification"),Sut.forEach(t),nBo=r(M$e," (Data2VecText model)"),M$e.forEach(t),sBo=i(j),Ev=n(j,"LI",{});var E$e=s(Ev);xge=n(E$e,"STRONG",{});var Rut=s(xge);lBo=r(Rut,"deberta"),Rut.forEach(t),iBo=r(E$e," \u2014 "),CO=n(E$e,"A",{href:!0});var Put=s(CO);dBo=r(Put,"DebertaForSequenceClassification"),Put.forEach(t),cBo=r(E$e," (DeBERTa model)"),E$e.forEach(t),mBo=i(j),Cv=n(j,"LI",{});var C$e=s(Cv);$ge=n(C$e,"STRONG",{});var But=s($ge);fBo=r(But,"deberta-v2"),But.forEach(t),gBo=r(C$e," \u2014 "),wO=n(C$e,"A",{href:!0});var Iut=s(wO);hBo=r(Iut,"DebertaV2ForSequenceClassification"),Iut.forEach(t),uBo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),pBo=i(j),wv=n(j,"LI",{});var w$e=s(wv);kge=n(w$e,"STRONG",{});var Nut=s(kge);_Bo=r(Nut,"distilbert"),Nut.forEach(t),bBo=r(w$e," \u2014 "),AO=n(w$e,"A",{href:!0});var qut=s(AO);vBo=r(qut,"DistilBertForSequenceClassification"),qut.forEach(t),FBo=r(w$e," (DistilBERT model)"),w$e.forEach(t),TBo=i(j),Av=n(j,"LI",{});var A$e=s(Av);Sge=n(A$e,"STRONG",{});var jut=s(Sge);MBo=r(jut,"electra"),jut.forEach(t),EBo=r(A$e," \u2014 "),yO=n(A$e,"A",{href:!0});var Dut=s(yO);CBo=r(Dut,"ElectraForSequenceClassification"),Dut.forEach(t),wBo=r(A$e," (ELECTRA model)"),A$e.forEach(t),ABo=i(j),yv=n(j,"LI",{});var y$e=s(yv);Rge=n(y$e,"STRONG",{});var Gut=s(Rge);yBo=r(Gut,"flaubert"),Gut.forEach(t),LBo=r(y$e," \u2014 "),LO=n(y$e,"A",{href:!0});var Out=s(LO);xBo=r(Out,"FlaubertForSequenceClassification"),Out.forEach(t),$Bo=r(y$e," (FlauBERT model)"),y$e.forEach(t),kBo=i(j),Lv=n(j,"LI",{});var L$e=s(Lv);Pge=n(L$e,"STRONG",{});var Vut=s(Pge);SBo=r(Vut,"fnet"),Vut.forEach(t),RBo=r(L$e," \u2014 "),xO=n(L$e,"A",{href:!0});var Xut=s(xO);PBo=r(Xut,"FNetForSequenceClassification"),Xut.forEach(t),BBo=r(L$e," (FNet model)"),L$e.forEach(t),IBo=i(j),xv=n(j,"LI",{});var x$e=s(xv);Bge=n(x$e,"STRONG",{});var zut=s(Bge);NBo=r(zut,"funnel"),zut.forEach(t),qBo=r(x$e," \u2014 "),$O=n(x$e,"A",{href:!0});var Wut=s($O);jBo=r(Wut,"FunnelForSequenceClassification"),Wut.forEach(t),DBo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),GBo=i(j),$v=n(j,"LI",{});var $$e=s($v);Ige=n($$e,"STRONG",{});var Qut=s(Ige);OBo=r(Qut,"gpt2"),Qut.forEach(t),VBo=r($$e," \u2014 "),kO=n($$e,"A",{href:!0});var Hut=s(kO);XBo=r(Hut,"GPT2ForSequenceClassification"),Hut.forEach(t),zBo=r($$e," (OpenAI GPT-2 model)"),$$e.forEach(t),WBo=i(j),kv=n(j,"LI",{});var k$e=s(kv);Nge=n(k$e,"STRONG",{});var Uut=s(Nge);QBo=r(Uut,"gpt_neo"),Uut.forEach(t),HBo=r(k$e," \u2014 "),SO=n(k$e,"A",{href:!0});var Jut=s(SO);UBo=r(Jut,"GPTNeoForSequenceClassification"),Jut.forEach(t),JBo=r(k$e," (GPT Neo model)"),k$e.forEach(t),YBo=i(j),Sv=n(j,"LI",{});var S$e=s(Sv);qge=n(S$e,"STRONG",{});var Yut=s(qge);KBo=r(Yut,"gptj"),Yut.forEach(t),ZBo=r(S$e," \u2014 "),RO=n(S$e,"A",{href:!0});var Kut=s(RO);eIo=r(Kut,"GPTJForSequenceClassification"),Kut.forEach(t),oIo=r(S$e," (GPT-J model)"),S$e.forEach(t),rIo=i(j),Rv=n(j,"LI",{});var R$e=s(Rv);jge=n(R$e,"STRONG",{});var Zut=s(jge);tIo=r(Zut,"ibert"),Zut.forEach(t),aIo=r(R$e," \u2014 "),PO=n(R$e,"A",{href:!0});var ept=s(PO);nIo=r(ept,"IBertForSequenceClassification"),ept.forEach(t),sIo=r(R$e," (I-BERT model)"),R$e.forEach(t),lIo=i(j),Pv=n(j,"LI",{});var P$e=s(Pv);Dge=n(P$e,"STRONG",{});var opt=s(Dge);iIo=r(opt,"layoutlm"),opt.forEach(t),dIo=r(P$e," \u2014 "),BO=n(P$e,"A",{href:!0});var rpt=s(BO);cIo=r(rpt,"LayoutLMForSequenceClassification"),rpt.forEach(t),mIo=r(P$e," (LayoutLM model)"),P$e.forEach(t),fIo=i(j),Bv=n(j,"LI",{});var B$e=s(Bv);Gge=n(B$e,"STRONG",{});var tpt=s(Gge);gIo=r(tpt,"layoutlmv2"),tpt.forEach(t),hIo=r(B$e," \u2014 "),IO=n(B$e,"A",{href:!0});var apt=s(IO);uIo=r(apt,"LayoutLMv2ForSequenceClassification"),apt.forEach(t),pIo=r(B$e," (LayoutLMv2 model)"),B$e.forEach(t),_Io=i(j),Iv=n(j,"LI",{});var I$e=s(Iv);Oge=n(I$e,"STRONG",{});var npt=s(Oge);bIo=r(npt,"layoutlmv3"),npt.forEach(t),vIo=r(I$e," \u2014 "),NO=n(I$e,"A",{href:!0});var spt=s(NO);FIo=r(spt,"LayoutLMv3ForSequenceClassification"),spt.forEach(t),TIo=r(I$e," (LayoutLMv3 model)"),I$e.forEach(t),MIo=i(j),Nv=n(j,"LI",{});var N$e=s(Nv);Vge=n(N$e,"STRONG",{});var lpt=s(Vge);EIo=r(lpt,"led"),lpt.forEach(t),CIo=r(N$e," \u2014 "),qO=n(N$e,"A",{href:!0});var ipt=s(qO);wIo=r(ipt,"LEDForSequenceClassification"),ipt.forEach(t),AIo=r(N$e," (LED model)"),N$e.forEach(t),yIo=i(j),qv=n(j,"LI",{});var q$e=s(qv);Xge=n(q$e,"STRONG",{});var dpt=s(Xge);LIo=r(dpt,"longformer"),dpt.forEach(t),xIo=r(q$e," \u2014 "),jO=n(q$e,"A",{href:!0});var cpt=s(jO);$Io=r(cpt,"LongformerForSequenceClassification"),cpt.forEach(t),kIo=r(q$e," (Longformer model)"),q$e.forEach(t),SIo=i(j),jv=n(j,"LI",{});var j$e=s(jv);zge=n(j$e,"STRONG",{});var mpt=s(zge);RIo=r(mpt,"mbart"),mpt.forEach(t),PIo=r(j$e," \u2014 "),DO=n(j$e,"A",{href:!0});var fpt=s(DO);BIo=r(fpt,"MBartForSequenceClassification"),fpt.forEach(t),IIo=r(j$e," (mBART model)"),j$e.forEach(t),NIo=i(j),Dv=n(j,"LI",{});var D$e=s(Dv);Wge=n(D$e,"STRONG",{});var gpt=s(Wge);qIo=r(gpt,"megatron-bert"),gpt.forEach(t),jIo=r(D$e," \u2014 "),GO=n(D$e,"A",{href:!0});var hpt=s(GO);DIo=r(hpt,"MegatronBertForSequenceClassification"),hpt.forEach(t),GIo=r(D$e," (Megatron-BERT model)"),D$e.forEach(t),OIo=i(j),Gv=n(j,"LI",{});var G$e=s(Gv);Qge=n(G$e,"STRONG",{});var upt=s(Qge);VIo=r(upt,"mobilebert"),upt.forEach(t),XIo=r(G$e," \u2014 "),OO=n(G$e,"A",{href:!0});var ppt=s(OO);zIo=r(ppt,"MobileBertForSequenceClassification"),ppt.forEach(t),WIo=r(G$e," (MobileBERT model)"),G$e.forEach(t),QIo=i(j),Ov=n(j,"LI",{});var O$e=s(Ov);Hge=n(O$e,"STRONG",{});var _pt=s(Hge);HIo=r(_pt,"mpnet"),_pt.forEach(t),UIo=r(O$e," \u2014 "),VO=n(O$e,"A",{href:!0});var bpt=s(VO);JIo=r(bpt,"MPNetForSequenceClassification"),bpt.forEach(t),YIo=r(O$e," (MPNet model)"),O$e.forEach(t),KIo=i(j),Vv=n(j,"LI",{});var V$e=s(Vv);Uge=n(V$e,"STRONG",{});var vpt=s(Uge);ZIo=r(vpt,"nystromformer"),vpt.forEach(t),eNo=r(V$e," \u2014 "),XO=n(V$e,"A",{href:!0});var Fpt=s(XO);oNo=r(Fpt,"NystromformerForSequenceClassification"),Fpt.forEach(t),rNo=r(V$e," (Nystr\xF6mformer model)"),V$e.forEach(t),tNo=i(j),Xv=n(j,"LI",{});var X$e=s(Xv);Jge=n(X$e,"STRONG",{});var Tpt=s(Jge);aNo=r(Tpt,"openai-gpt"),Tpt.forEach(t),nNo=r(X$e," \u2014 "),zO=n(X$e,"A",{href:!0});var Mpt=s(zO);sNo=r(Mpt,"OpenAIGPTForSequenceClassification"),Mpt.forEach(t),lNo=r(X$e," (OpenAI GPT model)"),X$e.forEach(t),iNo=i(j),zv=n(j,"LI",{});var z$e=s(zv);Yge=n(z$e,"STRONG",{});var Ept=s(Yge);dNo=r(Ept,"perceiver"),Ept.forEach(t),cNo=r(z$e," \u2014 "),WO=n(z$e,"A",{href:!0});var Cpt=s(WO);mNo=r(Cpt,"PerceiverForSequenceClassification"),Cpt.forEach(t),fNo=r(z$e," (Perceiver model)"),z$e.forEach(t),gNo=i(j),Wv=n(j,"LI",{});var W$e=s(Wv);Kge=n(W$e,"STRONG",{});var wpt=s(Kge);hNo=r(wpt,"plbart"),wpt.forEach(t),uNo=r(W$e," \u2014 "),QO=n(W$e,"A",{href:!0});var Apt=s(QO);pNo=r(Apt,"PLBartForSequenceClassification"),Apt.forEach(t),_No=r(W$e," (PLBart model)"),W$e.forEach(t),bNo=i(j),Qv=n(j,"LI",{});var Q$e=s(Qv);Zge=n(Q$e,"STRONG",{});var ypt=s(Zge);vNo=r(ypt,"qdqbert"),ypt.forEach(t),FNo=r(Q$e," \u2014 "),HO=n(Q$e,"A",{href:!0});var Lpt=s(HO);TNo=r(Lpt,"QDQBertForSequenceClassification"),Lpt.forEach(t),MNo=r(Q$e," (QDQBert model)"),Q$e.forEach(t),ENo=i(j),Hv=n(j,"LI",{});var H$e=s(Hv);ehe=n(H$e,"STRONG",{});var xpt=s(ehe);CNo=r(xpt,"reformer"),xpt.forEach(t),wNo=r(H$e," \u2014 "),UO=n(H$e,"A",{href:!0});var $pt=s(UO);ANo=r($pt,"ReformerForSequenceClassification"),$pt.forEach(t),yNo=r(H$e," (Reformer model)"),H$e.forEach(t),LNo=i(j),Uv=n(j,"LI",{});var U$e=s(Uv);ohe=n(U$e,"STRONG",{});var kpt=s(ohe);xNo=r(kpt,"rembert"),kpt.forEach(t),$No=r(U$e," \u2014 "),JO=n(U$e,"A",{href:!0});var Spt=s(JO);kNo=r(Spt,"RemBertForSequenceClassification"),Spt.forEach(t),SNo=r(U$e," (RemBERT model)"),U$e.forEach(t),RNo=i(j),Jv=n(j,"LI",{});var J$e=s(Jv);rhe=n(J$e,"STRONG",{});var Rpt=s(rhe);PNo=r(Rpt,"roberta"),Rpt.forEach(t),BNo=r(J$e," \u2014 "),YO=n(J$e,"A",{href:!0});var Ppt=s(YO);INo=r(Ppt,"RobertaForSequenceClassification"),Ppt.forEach(t),NNo=r(J$e," (RoBERTa model)"),J$e.forEach(t),qNo=i(j),Yv=n(j,"LI",{});var Y$e=s(Yv);the=n(Y$e,"STRONG",{});var Bpt=s(the);jNo=r(Bpt,"roformer"),Bpt.forEach(t),DNo=r(Y$e," \u2014 "),KO=n(Y$e,"A",{href:!0});var Ipt=s(KO);GNo=r(Ipt,"RoFormerForSequenceClassification"),Ipt.forEach(t),ONo=r(Y$e," (RoFormer model)"),Y$e.forEach(t),VNo=i(j),Kv=n(j,"LI",{});var K$e=s(Kv);ahe=n(K$e,"STRONG",{});var Npt=s(ahe);XNo=r(Npt,"squeezebert"),Npt.forEach(t),zNo=r(K$e," \u2014 "),ZO=n(K$e,"A",{href:!0});var qpt=s(ZO);WNo=r(qpt,"SqueezeBertForSequenceClassification"),qpt.forEach(t),QNo=r(K$e," (SqueezeBERT model)"),K$e.forEach(t),HNo=i(j),Zv=n(j,"LI",{});var Z$e=s(Zv);nhe=n(Z$e,"STRONG",{});var jpt=s(nhe);UNo=r(jpt,"tapas"),jpt.forEach(t),JNo=r(Z$e," \u2014 "),eV=n(Z$e,"A",{href:!0});var Dpt=s(eV);YNo=r(Dpt,"TapasForSequenceClassification"),Dpt.forEach(t),KNo=r(Z$e," (TAPAS model)"),Z$e.forEach(t),ZNo=i(j),eF=n(j,"LI",{});var eke=s(eF);she=n(eke,"STRONG",{});var Gpt=s(she);eqo=r(Gpt,"transfo-xl"),Gpt.forEach(t),oqo=r(eke," \u2014 "),oV=n(eke,"A",{href:!0});var Opt=s(oV);rqo=r(Opt,"TransfoXLForSequenceClassification"),Opt.forEach(t),tqo=r(eke," (Transformer-XL model)"),eke.forEach(t),aqo=i(j),oF=n(j,"LI",{});var oke=s(oF);lhe=n(oke,"STRONG",{});var Vpt=s(lhe);nqo=r(Vpt,"xlm"),Vpt.forEach(t),sqo=r(oke," \u2014 "),rV=n(oke,"A",{href:!0});var Xpt=s(rV);lqo=r(Xpt,"XLMForSequenceClassification"),Xpt.forEach(t),iqo=r(oke," (XLM model)"),oke.forEach(t),dqo=i(j),rF=n(j,"LI",{});var rke=s(rF);ihe=n(rke,"STRONG",{});var zpt=s(ihe);cqo=r(zpt,"xlm-roberta"),zpt.forEach(t),mqo=r(rke," \u2014 "),tV=n(rke,"A",{href:!0});var Wpt=s(tV);fqo=r(Wpt,"XLMRobertaForSequenceClassification"),Wpt.forEach(t),gqo=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),hqo=i(j),tF=n(j,"LI",{});var tke=s(tF);dhe=n(tke,"STRONG",{});var Qpt=s(dhe);uqo=r(Qpt,"xlm-roberta-xl"),Qpt.forEach(t),pqo=r(tke," \u2014 "),aV=n(tke,"A",{href:!0});var Hpt=s(aV);_qo=r(Hpt,"XLMRobertaXLForSequenceClassification"),Hpt.forEach(t),bqo=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),vqo=i(j),aF=n(j,"LI",{});var ake=s(aF);che=n(ake,"STRONG",{});var Upt=s(che);Fqo=r(Upt,"xlnet"),Upt.forEach(t),Tqo=r(ake," \u2014 "),nV=n(ake,"A",{href:!0});var Jpt=s(nV);Mqo=r(Jpt,"XLNetForSequenceClassification"),Jpt.forEach(t),Eqo=r(ake," (XLNet model)"),ake.forEach(t),Cqo=i(j),nF=n(j,"LI",{});var nke=s(nF);mhe=n(nke,"STRONG",{});var Ypt=s(mhe);wqo=r(Ypt,"yoso"),Ypt.forEach(t),Aqo=r(nke," \u2014 "),sV=n(nke,"A",{href:!0});var Kpt=s(sV);yqo=r(Kpt,"YosoForSequenceClassification"),Kpt.forEach(t),Lqo=r(nke," (YOSO model)"),nke.forEach(t),j.forEach(t),xqo=i(da),sF=n(da,"P",{});var ske=s(sF);$qo=r(ske,"The model is set in evaluation mode by default using "),fhe=n(ske,"CODE",{});var Zpt=s(fhe);kqo=r(Zpt,"model.eval()"),Zpt.forEach(t),Sqo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(ske,"CODE",{});var e_t=s(ghe);Rqo=r(e_t,"model.train()"),e_t.forEach(t),ske.forEach(t),Pqo=i(da),T(lF.$$.fragment,da),da.forEach(t),Zs.forEach(t),DDe=i(m),Yi=n(m,"H2",{class:!0});var WOe=s(Yi);iF=n(WOe,"A",{id:!0,class:!0,href:!0});var o_t=s(iF);hhe=n(o_t,"SPAN",{});var r_t=s(hhe);T(f7.$$.fragment,r_t),r_t.forEach(t),o_t.forEach(t),Bqo=i(WOe),uhe=n(WOe,"SPAN",{});var t_t=s(uhe);Iqo=r(t_t,"AutoModelForMultipleChoice"),t_t.forEach(t),WOe.forEach(t),GDe=i(m),Bo=n(m,"DIV",{class:!0});var el=s(Bo);T(g7.$$.fragment,el),Nqo=i(el),Ki=n(el,"P",{});var Vee=s(Ki);qqo=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lV=n(Vee,"A",{href:!0});var a_t=s(lV);jqo=r(a_t,"from_pretrained()"),a_t.forEach(t),Dqo=r(Vee," class method or the "),iV=n(Vee,"A",{href:!0});var n_t=s(iV);Gqo=r(n_t,"from_config()"),n_t.forEach(t),Oqo=r(Vee,` class
method.`),Vee.forEach(t),Vqo=i(el),h7=n(el,"P",{});var QOe=s(h7);Xqo=r(QOe,"This class cannot be instantiated directly using "),phe=n(QOe,"CODE",{});var s_t=s(phe);zqo=r(s_t,"__init__()"),s_t.forEach(t),Wqo=r(QOe," (throws an error)."),QOe.forEach(t),Qqo=i(el),mt=n(el,"DIV",{class:!0});var C6=s(mt);T(u7.$$.fragment,C6),Hqo=i(C6),_he=n(C6,"P",{});var l_t=s(_he);Uqo=r(l_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),l_t.forEach(t),Jqo=i(C6),Zi=n(C6,"P",{});var Xee=s(Zi);Yqo=r(Xee,`Note:
Loading a model from its configuration file does `),bhe=n(Xee,"STRONG",{});var i_t=s(bhe);Kqo=r(i_t,"not"),i_t.forEach(t),Zqo=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(Xee,"A",{href:!0});var d_t=s(dV);ejo=r(d_t,"from_pretrained()"),d_t.forEach(t),ojo=r(Xee," to load the model weights."),Xee.forEach(t),rjo=i(C6),T(dF.$$.fragment,C6),C6.forEach(t),tjo=i(el),ro=n(el,"DIV",{class:!0});var ca=s(ro);T(p7.$$.fragment,ca),ajo=i(ca),vhe=n(ca,"P",{});var c_t=s(vhe);njo=r(c_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),c_t.forEach(t),sjo=i(ca),qa=n(ca,"P",{});var w6=s(qa);ljo=r(w6,"The model class to instantiate is selected based on the "),Fhe=n(w6,"CODE",{});var m_t=s(Fhe);ijo=r(m_t,"model_type"),m_t.forEach(t),djo=r(w6,` property of the config object (either
passed as an argument or loaded from `),The=n(w6,"CODE",{});var f_t=s(The);cjo=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),mjo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(w6,"CODE",{});var g_t=s(Mhe);fjo=r(g_t,"pretrained_model_name_or_path"),g_t.forEach(t),gjo=r(w6,":"),w6.forEach(t),hjo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);cF=n(ee,"LI",{});var lke=s(cF);Ehe=n(lke,"STRONG",{});var h_t=s(Ehe);ujo=r(h_t,"albert"),h_t.forEach(t),pjo=r(lke," \u2014 "),cV=n(lke,"A",{href:!0});var u_t=s(cV);_jo=r(u_t,"AlbertForMultipleChoice"),u_t.forEach(t),bjo=r(lke," (ALBERT model)"),lke.forEach(t),vjo=i(ee),mF=n(ee,"LI",{});var ike=s(mF);Che=n(ike,"STRONG",{});var p_t=s(Che);Fjo=r(p_t,"bert"),p_t.forEach(t),Tjo=r(ike," \u2014 "),mV=n(ike,"A",{href:!0});var __t=s(mV);Mjo=r(__t,"BertForMultipleChoice"),__t.forEach(t),Ejo=r(ike," (BERT model)"),ike.forEach(t),Cjo=i(ee),fF=n(ee,"LI",{});var dke=s(fF);whe=n(dke,"STRONG",{});var b_t=s(whe);wjo=r(b_t,"big_bird"),b_t.forEach(t),Ajo=r(dke," \u2014 "),fV=n(dke,"A",{href:!0});var v_t=s(fV);yjo=r(v_t,"BigBirdForMultipleChoice"),v_t.forEach(t),Ljo=r(dke," (BigBird model)"),dke.forEach(t),xjo=i(ee),gF=n(ee,"LI",{});var cke=s(gF);Ahe=n(cke,"STRONG",{});var F_t=s(Ahe);$jo=r(F_t,"camembert"),F_t.forEach(t),kjo=r(cke," \u2014 "),gV=n(cke,"A",{href:!0});var T_t=s(gV);Sjo=r(T_t,"CamembertForMultipleChoice"),T_t.forEach(t),Rjo=r(cke," (CamemBERT model)"),cke.forEach(t),Pjo=i(ee),hF=n(ee,"LI",{});var mke=s(hF);yhe=n(mke,"STRONG",{});var M_t=s(yhe);Bjo=r(M_t,"canine"),M_t.forEach(t),Ijo=r(mke," \u2014 "),hV=n(mke,"A",{href:!0});var E_t=s(hV);Njo=r(E_t,"CanineForMultipleChoice"),E_t.forEach(t),qjo=r(mke," (CANINE model)"),mke.forEach(t),jjo=i(ee),uF=n(ee,"LI",{});var fke=s(uF);Lhe=n(fke,"STRONG",{});var C_t=s(Lhe);Djo=r(C_t,"convbert"),C_t.forEach(t),Gjo=r(fke," \u2014 "),uV=n(fke,"A",{href:!0});var w_t=s(uV);Ojo=r(w_t,"ConvBertForMultipleChoice"),w_t.forEach(t),Vjo=r(fke," (ConvBERT model)"),fke.forEach(t),Xjo=i(ee),pF=n(ee,"LI",{});var gke=s(pF);xhe=n(gke,"STRONG",{});var A_t=s(xhe);zjo=r(A_t,"data2vec-text"),A_t.forEach(t),Wjo=r(gke," \u2014 "),pV=n(gke,"A",{href:!0});var y_t=s(pV);Qjo=r(y_t,"Data2VecTextForMultipleChoice"),y_t.forEach(t),Hjo=r(gke," (Data2VecText model)"),gke.forEach(t),Ujo=i(ee),_F=n(ee,"LI",{});var hke=s(_F);$he=n(hke,"STRONG",{});var L_t=s($he);Jjo=r(L_t,"deberta-v2"),L_t.forEach(t),Yjo=r(hke," \u2014 "),_V=n(hke,"A",{href:!0});var x_t=s(_V);Kjo=r(x_t,"DebertaV2ForMultipleChoice"),x_t.forEach(t),Zjo=r(hke," (DeBERTa-v2 model)"),hke.forEach(t),eDo=i(ee),bF=n(ee,"LI",{});var uke=s(bF);khe=n(uke,"STRONG",{});var $_t=s(khe);oDo=r($_t,"distilbert"),$_t.forEach(t),rDo=r(uke," \u2014 "),bV=n(uke,"A",{href:!0});var k_t=s(bV);tDo=r(k_t,"DistilBertForMultipleChoice"),k_t.forEach(t),aDo=r(uke," (DistilBERT model)"),uke.forEach(t),nDo=i(ee),vF=n(ee,"LI",{});var pke=s(vF);She=n(pke,"STRONG",{});var S_t=s(She);sDo=r(S_t,"electra"),S_t.forEach(t),lDo=r(pke," \u2014 "),vV=n(pke,"A",{href:!0});var R_t=s(vV);iDo=r(R_t,"ElectraForMultipleChoice"),R_t.forEach(t),dDo=r(pke," (ELECTRA model)"),pke.forEach(t),cDo=i(ee),FF=n(ee,"LI",{});var _ke=s(FF);Rhe=n(_ke,"STRONG",{});var P_t=s(Rhe);mDo=r(P_t,"flaubert"),P_t.forEach(t),fDo=r(_ke," \u2014 "),FV=n(_ke,"A",{href:!0});var B_t=s(FV);gDo=r(B_t,"FlaubertForMultipleChoice"),B_t.forEach(t),hDo=r(_ke," (FlauBERT model)"),_ke.forEach(t),uDo=i(ee),TF=n(ee,"LI",{});var bke=s(TF);Phe=n(bke,"STRONG",{});var I_t=s(Phe);pDo=r(I_t,"fnet"),I_t.forEach(t),_Do=r(bke," \u2014 "),TV=n(bke,"A",{href:!0});var N_t=s(TV);bDo=r(N_t,"FNetForMultipleChoice"),N_t.forEach(t),vDo=r(bke," (FNet model)"),bke.forEach(t),FDo=i(ee),MF=n(ee,"LI",{});var vke=s(MF);Bhe=n(vke,"STRONG",{});var q_t=s(Bhe);TDo=r(q_t,"funnel"),q_t.forEach(t),MDo=r(vke," \u2014 "),MV=n(vke,"A",{href:!0});var j_t=s(MV);EDo=r(j_t,"FunnelForMultipleChoice"),j_t.forEach(t),CDo=r(vke," (Funnel Transformer model)"),vke.forEach(t),wDo=i(ee),EF=n(ee,"LI",{});var Fke=s(EF);Ihe=n(Fke,"STRONG",{});var D_t=s(Ihe);ADo=r(D_t,"ibert"),D_t.forEach(t),yDo=r(Fke," \u2014 "),EV=n(Fke,"A",{href:!0});var G_t=s(EV);LDo=r(G_t,"IBertForMultipleChoice"),G_t.forEach(t),xDo=r(Fke," (I-BERT model)"),Fke.forEach(t),$Do=i(ee),CF=n(ee,"LI",{});var Tke=s(CF);Nhe=n(Tke,"STRONG",{});var O_t=s(Nhe);kDo=r(O_t,"longformer"),O_t.forEach(t),SDo=r(Tke," \u2014 "),CV=n(Tke,"A",{href:!0});var V_t=s(CV);RDo=r(V_t,"LongformerForMultipleChoice"),V_t.forEach(t),PDo=r(Tke," (Longformer model)"),Tke.forEach(t),BDo=i(ee),wF=n(ee,"LI",{});var Mke=s(wF);qhe=n(Mke,"STRONG",{});var X_t=s(qhe);IDo=r(X_t,"megatron-bert"),X_t.forEach(t),NDo=r(Mke," \u2014 "),wV=n(Mke,"A",{href:!0});var z_t=s(wV);qDo=r(z_t,"MegatronBertForMultipleChoice"),z_t.forEach(t),jDo=r(Mke," (Megatron-BERT model)"),Mke.forEach(t),DDo=i(ee),AF=n(ee,"LI",{});var Eke=s(AF);jhe=n(Eke,"STRONG",{});var W_t=s(jhe);GDo=r(W_t,"mobilebert"),W_t.forEach(t),ODo=r(Eke," \u2014 "),AV=n(Eke,"A",{href:!0});var Q_t=s(AV);VDo=r(Q_t,"MobileBertForMultipleChoice"),Q_t.forEach(t),XDo=r(Eke," (MobileBERT model)"),Eke.forEach(t),zDo=i(ee),yF=n(ee,"LI",{});var Cke=s(yF);Dhe=n(Cke,"STRONG",{});var H_t=s(Dhe);WDo=r(H_t,"mpnet"),H_t.forEach(t),QDo=r(Cke," \u2014 "),yV=n(Cke,"A",{href:!0});var U_t=s(yV);HDo=r(U_t,"MPNetForMultipleChoice"),U_t.forEach(t),UDo=r(Cke," (MPNet model)"),Cke.forEach(t),JDo=i(ee),LF=n(ee,"LI",{});var wke=s(LF);Ghe=n(wke,"STRONG",{});var J_t=s(Ghe);YDo=r(J_t,"nystromformer"),J_t.forEach(t),KDo=r(wke," \u2014 "),LV=n(wke,"A",{href:!0});var Y_t=s(LV);ZDo=r(Y_t,"NystromformerForMultipleChoice"),Y_t.forEach(t),eGo=r(wke," (Nystr\xF6mformer model)"),wke.forEach(t),oGo=i(ee),xF=n(ee,"LI",{});var Ake=s(xF);Ohe=n(Ake,"STRONG",{});var K_t=s(Ohe);rGo=r(K_t,"qdqbert"),K_t.forEach(t),tGo=r(Ake," \u2014 "),xV=n(Ake,"A",{href:!0});var Z_t=s(xV);aGo=r(Z_t,"QDQBertForMultipleChoice"),Z_t.forEach(t),nGo=r(Ake," (QDQBert model)"),Ake.forEach(t),sGo=i(ee),$F=n(ee,"LI",{});var yke=s($F);Vhe=n(yke,"STRONG",{});var ebt=s(Vhe);lGo=r(ebt,"rembert"),ebt.forEach(t),iGo=r(yke," \u2014 "),$V=n(yke,"A",{href:!0});var obt=s($V);dGo=r(obt,"RemBertForMultipleChoice"),obt.forEach(t),cGo=r(yke," (RemBERT model)"),yke.forEach(t),mGo=i(ee),kF=n(ee,"LI",{});var Lke=s(kF);Xhe=n(Lke,"STRONG",{});var rbt=s(Xhe);fGo=r(rbt,"roberta"),rbt.forEach(t),gGo=r(Lke," \u2014 "),kV=n(Lke,"A",{href:!0});var tbt=s(kV);hGo=r(tbt,"RobertaForMultipleChoice"),tbt.forEach(t),uGo=r(Lke," (RoBERTa model)"),Lke.forEach(t),pGo=i(ee),SF=n(ee,"LI",{});var xke=s(SF);zhe=n(xke,"STRONG",{});var abt=s(zhe);_Go=r(abt,"roformer"),abt.forEach(t),bGo=r(xke," \u2014 "),SV=n(xke,"A",{href:!0});var nbt=s(SV);vGo=r(nbt,"RoFormerForMultipleChoice"),nbt.forEach(t),FGo=r(xke," (RoFormer model)"),xke.forEach(t),TGo=i(ee),RF=n(ee,"LI",{});var $ke=s(RF);Whe=n($ke,"STRONG",{});var sbt=s(Whe);MGo=r(sbt,"squeezebert"),sbt.forEach(t),EGo=r($ke," \u2014 "),RV=n($ke,"A",{href:!0});var lbt=s(RV);CGo=r(lbt,"SqueezeBertForMultipleChoice"),lbt.forEach(t),wGo=r($ke," (SqueezeBERT model)"),$ke.forEach(t),AGo=i(ee),PF=n(ee,"LI",{});var kke=s(PF);Qhe=n(kke,"STRONG",{});var ibt=s(Qhe);yGo=r(ibt,"xlm"),ibt.forEach(t),LGo=r(kke," \u2014 "),PV=n(kke,"A",{href:!0});var dbt=s(PV);xGo=r(dbt,"XLMForMultipleChoice"),dbt.forEach(t),$Go=r(kke," (XLM model)"),kke.forEach(t),kGo=i(ee),BF=n(ee,"LI",{});var Ske=s(BF);Hhe=n(Ske,"STRONG",{});var cbt=s(Hhe);SGo=r(cbt,"xlm-roberta"),cbt.forEach(t),RGo=r(Ske," \u2014 "),BV=n(Ske,"A",{href:!0});var mbt=s(BV);PGo=r(mbt,"XLMRobertaForMultipleChoice"),mbt.forEach(t),BGo=r(Ske," (XLM-RoBERTa model)"),Ske.forEach(t),IGo=i(ee),IF=n(ee,"LI",{});var Rke=s(IF);Uhe=n(Rke,"STRONG",{});var fbt=s(Uhe);NGo=r(fbt,"xlm-roberta-xl"),fbt.forEach(t),qGo=r(Rke," \u2014 "),IV=n(Rke,"A",{href:!0});var gbt=s(IV);jGo=r(gbt,"XLMRobertaXLForMultipleChoice"),gbt.forEach(t),DGo=r(Rke," (XLM-RoBERTa-XL model)"),Rke.forEach(t),GGo=i(ee),NF=n(ee,"LI",{});var Pke=s(NF);Jhe=n(Pke,"STRONG",{});var hbt=s(Jhe);OGo=r(hbt,"xlnet"),hbt.forEach(t),VGo=r(Pke," \u2014 "),NV=n(Pke,"A",{href:!0});var ubt=s(NV);XGo=r(ubt,"XLNetForMultipleChoice"),ubt.forEach(t),zGo=r(Pke," (XLNet model)"),Pke.forEach(t),WGo=i(ee),qF=n(ee,"LI",{});var Bke=s(qF);Yhe=n(Bke,"STRONG",{});var pbt=s(Yhe);QGo=r(pbt,"yoso"),pbt.forEach(t),HGo=r(Bke," \u2014 "),qV=n(Bke,"A",{href:!0});var _bt=s(qV);UGo=r(_bt,"YosoForMultipleChoice"),_bt.forEach(t),JGo=r(Bke," (YOSO model)"),Bke.forEach(t),ee.forEach(t),YGo=i(ca),jF=n(ca,"P",{});var Ike=s(jF);KGo=r(Ike,"The model is set in evaluation mode by default using "),Khe=n(Ike,"CODE",{});var bbt=s(Khe);ZGo=r(bbt,"model.eval()"),bbt.forEach(t),eOo=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(Ike,"CODE",{});var vbt=s(Zhe);oOo=r(vbt,"model.train()"),vbt.forEach(t),Ike.forEach(t),rOo=i(ca),T(DF.$$.fragment,ca),ca.forEach(t),el.forEach(t),ODe=i(m),ed=n(m,"H2",{class:!0});var HOe=s(ed);GF=n(HOe,"A",{id:!0,class:!0,href:!0});var Fbt=s(GF);eue=n(Fbt,"SPAN",{});var Tbt=s(eue);T(_7.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),tOo=i(HOe),oue=n(HOe,"SPAN",{});var Mbt=s(oue);aOo=r(Mbt,"AutoModelForNextSentencePrediction"),Mbt.forEach(t),HOe.forEach(t),VDe=i(m),Io=n(m,"DIV",{class:!0});var ol=s(Io);T(b7.$$.fragment,ol),nOo=i(ol),od=n(ol,"P",{});var zee=s(od);sOo=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jV=n(zee,"A",{href:!0});var Ebt=s(jV);lOo=r(Ebt,"from_pretrained()"),Ebt.forEach(t),iOo=r(zee," class method or the "),DV=n(zee,"A",{href:!0});var Cbt=s(DV);dOo=r(Cbt,"from_config()"),Cbt.forEach(t),cOo=r(zee,` class
method.`),zee.forEach(t),mOo=i(ol),v7=n(ol,"P",{});var UOe=s(v7);fOo=r(UOe,"This class cannot be instantiated directly using "),rue=n(UOe,"CODE",{});var wbt=s(rue);gOo=r(wbt,"__init__()"),wbt.forEach(t),hOo=r(UOe," (throws an error)."),UOe.forEach(t),uOo=i(ol),ft=n(ol,"DIV",{class:!0});var A6=s(ft);T(F7.$$.fragment,A6),pOo=i(A6),tue=n(A6,"P",{});var Abt=s(tue);_Oo=r(Abt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Abt.forEach(t),bOo=i(A6),rd=n(A6,"P",{});var Wee=s(rd);vOo=r(Wee,`Note:
Loading a model from its configuration file does `),aue=n(Wee,"STRONG",{});var ybt=s(aue);FOo=r(ybt,"not"),ybt.forEach(t),TOo=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(Wee,"A",{href:!0});var Lbt=s(GV);MOo=r(Lbt,"from_pretrained()"),Lbt.forEach(t),EOo=r(Wee," to load the model weights."),Wee.forEach(t),COo=i(A6),T(OF.$$.fragment,A6),A6.forEach(t),wOo=i(ol),to=n(ol,"DIV",{class:!0});var ma=s(to);T(T7.$$.fragment,ma),AOo=i(ma),nue=n(ma,"P",{});var xbt=s(nue);yOo=r(xbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xbt.forEach(t),LOo=i(ma),ja=n(ma,"P",{});var y6=s(ja);xOo=r(y6,"The model class to instantiate is selected based on the "),sue=n(y6,"CODE",{});var $bt=s(sue);$Oo=r($bt,"model_type"),$bt.forEach(t),kOo=r(y6,` property of the config object (either
passed as an argument or loaded from `),lue=n(y6,"CODE",{});var kbt=s(lue);SOo=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),ROo=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(y6,"CODE",{});var Sbt=s(iue);POo=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),BOo=r(y6,":"),y6.forEach(t),IOo=i(ma),Zr=n(ma,"UL",{});var rl=s(Zr);VF=n(rl,"LI",{});var Nke=s(VF);due=n(Nke,"STRONG",{});var Rbt=s(due);NOo=r(Rbt,"bert"),Rbt.forEach(t),qOo=r(Nke," \u2014 "),OV=n(Nke,"A",{href:!0});var Pbt=s(OV);jOo=r(Pbt,"BertForNextSentencePrediction"),Pbt.forEach(t),DOo=r(Nke," (BERT model)"),Nke.forEach(t),GOo=i(rl),XF=n(rl,"LI",{});var qke=s(XF);cue=n(qke,"STRONG",{});var Bbt=s(cue);OOo=r(Bbt,"fnet"),Bbt.forEach(t),VOo=r(qke," \u2014 "),VV=n(qke,"A",{href:!0});var Ibt=s(VV);XOo=r(Ibt,"FNetForNextSentencePrediction"),Ibt.forEach(t),zOo=r(qke," (FNet model)"),qke.forEach(t),WOo=i(rl),zF=n(rl,"LI",{});var jke=s(zF);mue=n(jke,"STRONG",{});var Nbt=s(mue);QOo=r(Nbt,"megatron-bert"),Nbt.forEach(t),HOo=r(jke," \u2014 "),XV=n(jke,"A",{href:!0});var qbt=s(XV);UOo=r(qbt,"MegatronBertForNextSentencePrediction"),qbt.forEach(t),JOo=r(jke," (Megatron-BERT model)"),jke.forEach(t),YOo=i(rl),WF=n(rl,"LI",{});var Dke=s(WF);fue=n(Dke,"STRONG",{});var jbt=s(fue);KOo=r(jbt,"mobilebert"),jbt.forEach(t),ZOo=r(Dke," \u2014 "),zV=n(Dke,"A",{href:!0});var Dbt=s(zV);eVo=r(Dbt,"MobileBertForNextSentencePrediction"),Dbt.forEach(t),oVo=r(Dke," (MobileBERT model)"),Dke.forEach(t),rVo=i(rl),QF=n(rl,"LI",{});var Gke=s(QF);gue=n(Gke,"STRONG",{});var Gbt=s(gue);tVo=r(Gbt,"qdqbert"),Gbt.forEach(t),aVo=r(Gke," \u2014 "),WV=n(Gke,"A",{href:!0});var Obt=s(WV);nVo=r(Obt,"QDQBertForNextSentencePrediction"),Obt.forEach(t),sVo=r(Gke," (QDQBert model)"),Gke.forEach(t),rl.forEach(t),lVo=i(ma),HF=n(ma,"P",{});var Oke=s(HF);iVo=r(Oke,"The model is set in evaluation mode by default using "),hue=n(Oke,"CODE",{});var Vbt=s(hue);dVo=r(Vbt,"model.eval()"),Vbt.forEach(t),cVo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(Oke,"CODE",{});var Xbt=s(uue);mVo=r(Xbt,"model.train()"),Xbt.forEach(t),Oke.forEach(t),fVo=i(ma),T(UF.$$.fragment,ma),ma.forEach(t),ol.forEach(t),XDe=i(m),td=n(m,"H2",{class:!0});var JOe=s(td);JF=n(JOe,"A",{id:!0,class:!0,href:!0});var zbt=s(JF);pue=n(zbt,"SPAN",{});var Wbt=s(pue);T(M7.$$.fragment,Wbt),Wbt.forEach(t),zbt.forEach(t),gVo=i(JOe),_ue=n(JOe,"SPAN",{});var Qbt=s(_ue);hVo=r(Qbt,"AutoModelForTokenClassification"),Qbt.forEach(t),JOe.forEach(t),zDe=i(m),No=n(m,"DIV",{class:!0});var tl=s(No);T(E7.$$.fragment,tl),uVo=i(tl),ad=n(tl,"P",{});var Qee=s(ad);pVo=r(Qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QV=n(Qee,"A",{href:!0});var Hbt=s(QV);_Vo=r(Hbt,"from_pretrained()"),Hbt.forEach(t),bVo=r(Qee," class method or the "),HV=n(Qee,"A",{href:!0});var Ubt=s(HV);vVo=r(Ubt,"from_config()"),Ubt.forEach(t),FVo=r(Qee,` class
method.`),Qee.forEach(t),TVo=i(tl),C7=n(tl,"P",{});var YOe=s(C7);MVo=r(YOe,"This class cannot be instantiated directly using "),bue=n(YOe,"CODE",{});var Jbt=s(bue);EVo=r(Jbt,"__init__()"),Jbt.forEach(t),CVo=r(YOe," (throws an error)."),YOe.forEach(t),wVo=i(tl),gt=n(tl,"DIV",{class:!0});var L6=s(gt);T(w7.$$.fragment,L6),AVo=i(L6),vue=n(L6,"P",{});var Ybt=s(vue);yVo=r(Ybt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ybt.forEach(t),LVo=i(L6),nd=n(L6,"P",{});var Hee=s(nd);xVo=r(Hee,`Note:
Loading a model from its configuration file does `),Fue=n(Hee,"STRONG",{});var Kbt=s(Fue);$Vo=r(Kbt,"not"),Kbt.forEach(t),kVo=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(Hee,"A",{href:!0});var Zbt=s(UV);SVo=r(Zbt,"from_pretrained()"),Zbt.forEach(t),RVo=r(Hee," to load the model weights."),Hee.forEach(t),PVo=i(L6),T(YF.$$.fragment,L6),L6.forEach(t),BVo=i(tl),ao=n(tl,"DIV",{class:!0});var fa=s(ao);T(A7.$$.fragment,fa),IVo=i(fa),Tue=n(fa,"P",{});var e2t=s(Tue);NVo=r(e2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e2t.forEach(t),qVo=i(fa),Da=n(fa,"P",{});var x6=s(Da);jVo=r(x6,"The model class to instantiate is selected based on the "),Mue=n(x6,"CODE",{});var o2t=s(Mue);DVo=r(o2t,"model_type"),o2t.forEach(t),GVo=r(x6,` property of the config object (either
passed as an argument or loaded from `),Eue=n(x6,"CODE",{});var r2t=s(Eue);OVo=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),VVo=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(x6,"CODE",{});var t2t=s(Cue);XVo=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),zVo=r(x6,":"),x6.forEach(t),WVo=i(fa),U=n(fa,"UL",{});var J=s(U);KF=n(J,"LI",{});var Vke=s(KF);wue=n(Vke,"STRONG",{});var a2t=s(wue);QVo=r(a2t,"albert"),a2t.forEach(t),HVo=r(Vke," \u2014 "),JV=n(Vke,"A",{href:!0});var n2t=s(JV);UVo=r(n2t,"AlbertForTokenClassification"),n2t.forEach(t),JVo=r(Vke," (ALBERT model)"),Vke.forEach(t),YVo=i(J),ZF=n(J,"LI",{});var Xke=s(ZF);Aue=n(Xke,"STRONG",{});var s2t=s(Aue);KVo=r(s2t,"bert"),s2t.forEach(t),ZVo=r(Xke," \u2014 "),YV=n(Xke,"A",{href:!0});var l2t=s(YV);eXo=r(l2t,"BertForTokenClassification"),l2t.forEach(t),oXo=r(Xke," (BERT model)"),Xke.forEach(t),rXo=i(J),e1=n(J,"LI",{});var zke=s(e1);yue=n(zke,"STRONG",{});var i2t=s(yue);tXo=r(i2t,"big_bird"),i2t.forEach(t),aXo=r(zke," \u2014 "),KV=n(zke,"A",{href:!0});var d2t=s(KV);nXo=r(d2t,"BigBirdForTokenClassification"),d2t.forEach(t),sXo=r(zke," (BigBird model)"),zke.forEach(t),lXo=i(J),o1=n(J,"LI",{});var Wke=s(o1);Lue=n(Wke,"STRONG",{});var c2t=s(Lue);iXo=r(c2t,"camembert"),c2t.forEach(t),dXo=r(Wke," \u2014 "),ZV=n(Wke,"A",{href:!0});var m2t=s(ZV);cXo=r(m2t,"CamembertForTokenClassification"),m2t.forEach(t),mXo=r(Wke," (CamemBERT model)"),Wke.forEach(t),fXo=i(J),r1=n(J,"LI",{});var Qke=s(r1);xue=n(Qke,"STRONG",{});var f2t=s(xue);gXo=r(f2t,"canine"),f2t.forEach(t),hXo=r(Qke," \u2014 "),eX=n(Qke,"A",{href:!0});var g2t=s(eX);uXo=r(g2t,"CanineForTokenClassification"),g2t.forEach(t),pXo=r(Qke," (CANINE model)"),Qke.forEach(t),_Xo=i(J),t1=n(J,"LI",{});var Hke=s(t1);$ue=n(Hke,"STRONG",{});var h2t=s($ue);bXo=r(h2t,"convbert"),h2t.forEach(t),vXo=r(Hke," \u2014 "),oX=n(Hke,"A",{href:!0});var u2t=s(oX);FXo=r(u2t,"ConvBertForTokenClassification"),u2t.forEach(t),TXo=r(Hke," (ConvBERT model)"),Hke.forEach(t),MXo=i(J),a1=n(J,"LI",{});var Uke=s(a1);kue=n(Uke,"STRONG",{});var p2t=s(kue);EXo=r(p2t,"data2vec-text"),p2t.forEach(t),CXo=r(Uke," \u2014 "),rX=n(Uke,"A",{href:!0});var _2t=s(rX);wXo=r(_2t,"Data2VecTextForTokenClassification"),_2t.forEach(t),AXo=r(Uke," (Data2VecText model)"),Uke.forEach(t),yXo=i(J),n1=n(J,"LI",{});var Jke=s(n1);Sue=n(Jke,"STRONG",{});var b2t=s(Sue);LXo=r(b2t,"deberta"),b2t.forEach(t),xXo=r(Jke," \u2014 "),tX=n(Jke,"A",{href:!0});var v2t=s(tX);$Xo=r(v2t,"DebertaForTokenClassification"),v2t.forEach(t),kXo=r(Jke," (DeBERTa model)"),Jke.forEach(t),SXo=i(J),s1=n(J,"LI",{});var Yke=s(s1);Rue=n(Yke,"STRONG",{});var F2t=s(Rue);RXo=r(F2t,"deberta-v2"),F2t.forEach(t),PXo=r(Yke," \u2014 "),aX=n(Yke,"A",{href:!0});var T2t=s(aX);BXo=r(T2t,"DebertaV2ForTokenClassification"),T2t.forEach(t),IXo=r(Yke," (DeBERTa-v2 model)"),Yke.forEach(t),NXo=i(J),l1=n(J,"LI",{});var Kke=s(l1);Pue=n(Kke,"STRONG",{});var M2t=s(Pue);qXo=r(M2t,"distilbert"),M2t.forEach(t),jXo=r(Kke," \u2014 "),nX=n(Kke,"A",{href:!0});var E2t=s(nX);DXo=r(E2t,"DistilBertForTokenClassification"),E2t.forEach(t),GXo=r(Kke," (DistilBERT model)"),Kke.forEach(t),OXo=i(J),i1=n(J,"LI",{});var Zke=s(i1);Bue=n(Zke,"STRONG",{});var C2t=s(Bue);VXo=r(C2t,"electra"),C2t.forEach(t),XXo=r(Zke," \u2014 "),sX=n(Zke,"A",{href:!0});var w2t=s(sX);zXo=r(w2t,"ElectraForTokenClassification"),w2t.forEach(t),WXo=r(Zke," (ELECTRA model)"),Zke.forEach(t),QXo=i(J),d1=n(J,"LI",{});var eSe=s(d1);Iue=n(eSe,"STRONG",{});var A2t=s(Iue);HXo=r(A2t,"flaubert"),A2t.forEach(t),UXo=r(eSe," \u2014 "),lX=n(eSe,"A",{href:!0});var y2t=s(lX);JXo=r(y2t,"FlaubertForTokenClassification"),y2t.forEach(t),YXo=r(eSe," (FlauBERT model)"),eSe.forEach(t),KXo=i(J),c1=n(J,"LI",{});var oSe=s(c1);Nue=n(oSe,"STRONG",{});var L2t=s(Nue);ZXo=r(L2t,"fnet"),L2t.forEach(t),ezo=r(oSe," \u2014 "),iX=n(oSe,"A",{href:!0});var x2t=s(iX);ozo=r(x2t,"FNetForTokenClassification"),x2t.forEach(t),rzo=r(oSe," (FNet model)"),oSe.forEach(t),tzo=i(J),m1=n(J,"LI",{});var rSe=s(m1);que=n(rSe,"STRONG",{});var $2t=s(que);azo=r($2t,"funnel"),$2t.forEach(t),nzo=r(rSe," \u2014 "),dX=n(rSe,"A",{href:!0});var k2t=s(dX);szo=r(k2t,"FunnelForTokenClassification"),k2t.forEach(t),lzo=r(rSe," (Funnel Transformer model)"),rSe.forEach(t),izo=i(J),f1=n(J,"LI",{});var tSe=s(f1);jue=n(tSe,"STRONG",{});var S2t=s(jue);dzo=r(S2t,"gpt2"),S2t.forEach(t),czo=r(tSe," \u2014 "),cX=n(tSe,"A",{href:!0});var R2t=s(cX);mzo=r(R2t,"GPT2ForTokenClassification"),R2t.forEach(t),fzo=r(tSe," (OpenAI GPT-2 model)"),tSe.forEach(t),gzo=i(J),g1=n(J,"LI",{});var aSe=s(g1);Due=n(aSe,"STRONG",{});var P2t=s(Due);hzo=r(P2t,"ibert"),P2t.forEach(t),uzo=r(aSe," \u2014 "),mX=n(aSe,"A",{href:!0});var B2t=s(mX);pzo=r(B2t,"IBertForTokenClassification"),B2t.forEach(t),_zo=r(aSe," (I-BERT model)"),aSe.forEach(t),bzo=i(J),h1=n(J,"LI",{});var nSe=s(h1);Gue=n(nSe,"STRONG",{});var I2t=s(Gue);vzo=r(I2t,"layoutlm"),I2t.forEach(t),Fzo=r(nSe," \u2014 "),fX=n(nSe,"A",{href:!0});var N2t=s(fX);Tzo=r(N2t,"LayoutLMForTokenClassification"),N2t.forEach(t),Mzo=r(nSe," (LayoutLM model)"),nSe.forEach(t),Ezo=i(J),u1=n(J,"LI",{});var sSe=s(u1);Oue=n(sSe,"STRONG",{});var q2t=s(Oue);Czo=r(q2t,"layoutlmv2"),q2t.forEach(t),wzo=r(sSe," \u2014 "),gX=n(sSe,"A",{href:!0});var j2t=s(gX);Azo=r(j2t,"LayoutLMv2ForTokenClassification"),j2t.forEach(t),yzo=r(sSe," (LayoutLMv2 model)"),sSe.forEach(t),Lzo=i(J),p1=n(J,"LI",{});var lSe=s(p1);Vue=n(lSe,"STRONG",{});var D2t=s(Vue);xzo=r(D2t,"layoutlmv3"),D2t.forEach(t),$zo=r(lSe," \u2014 "),hX=n(lSe,"A",{href:!0});var G2t=s(hX);kzo=r(G2t,"LayoutLMv3ForTokenClassification"),G2t.forEach(t),Szo=r(lSe," (LayoutLMv3 model)"),lSe.forEach(t),Rzo=i(J),_1=n(J,"LI",{});var iSe=s(_1);Xue=n(iSe,"STRONG",{});var O2t=s(Xue);Pzo=r(O2t,"longformer"),O2t.forEach(t),Bzo=r(iSe," \u2014 "),uX=n(iSe,"A",{href:!0});var V2t=s(uX);Izo=r(V2t,"LongformerForTokenClassification"),V2t.forEach(t),Nzo=r(iSe," (Longformer model)"),iSe.forEach(t),qzo=i(J),b1=n(J,"LI",{});var dSe=s(b1);zue=n(dSe,"STRONG",{});var X2t=s(zue);jzo=r(X2t,"megatron-bert"),X2t.forEach(t),Dzo=r(dSe," \u2014 "),pX=n(dSe,"A",{href:!0});var z2t=s(pX);Gzo=r(z2t,"MegatronBertForTokenClassification"),z2t.forEach(t),Ozo=r(dSe," (Megatron-BERT model)"),dSe.forEach(t),Vzo=i(J),v1=n(J,"LI",{});var cSe=s(v1);Wue=n(cSe,"STRONG",{});var W2t=s(Wue);Xzo=r(W2t,"mobilebert"),W2t.forEach(t),zzo=r(cSe," \u2014 "),_X=n(cSe,"A",{href:!0});var Q2t=s(_X);Wzo=r(Q2t,"MobileBertForTokenClassification"),Q2t.forEach(t),Qzo=r(cSe," (MobileBERT model)"),cSe.forEach(t),Hzo=i(J),F1=n(J,"LI",{});var mSe=s(F1);Que=n(mSe,"STRONG",{});var H2t=s(Que);Uzo=r(H2t,"mpnet"),H2t.forEach(t),Jzo=r(mSe," \u2014 "),bX=n(mSe,"A",{href:!0});var U2t=s(bX);Yzo=r(U2t,"MPNetForTokenClassification"),U2t.forEach(t),Kzo=r(mSe," (MPNet model)"),mSe.forEach(t),Zzo=i(J),T1=n(J,"LI",{});var fSe=s(T1);Hue=n(fSe,"STRONG",{});var J2t=s(Hue);eWo=r(J2t,"nystromformer"),J2t.forEach(t),oWo=r(fSe," \u2014 "),vX=n(fSe,"A",{href:!0});var Y2t=s(vX);rWo=r(Y2t,"NystromformerForTokenClassification"),Y2t.forEach(t),tWo=r(fSe," (Nystr\xF6mformer model)"),fSe.forEach(t),aWo=i(J),M1=n(J,"LI",{});var gSe=s(M1);Uue=n(gSe,"STRONG",{});var K2t=s(Uue);nWo=r(K2t,"qdqbert"),K2t.forEach(t),sWo=r(gSe," \u2014 "),FX=n(gSe,"A",{href:!0});var Z2t=s(FX);lWo=r(Z2t,"QDQBertForTokenClassification"),Z2t.forEach(t),iWo=r(gSe," (QDQBert model)"),gSe.forEach(t),dWo=i(J),E1=n(J,"LI",{});var hSe=s(E1);Jue=n(hSe,"STRONG",{});var evt=s(Jue);cWo=r(evt,"rembert"),evt.forEach(t),mWo=r(hSe," \u2014 "),TX=n(hSe,"A",{href:!0});var ovt=s(TX);fWo=r(ovt,"RemBertForTokenClassification"),ovt.forEach(t),gWo=r(hSe," (RemBERT model)"),hSe.forEach(t),hWo=i(J),C1=n(J,"LI",{});var uSe=s(C1);Yue=n(uSe,"STRONG",{});var rvt=s(Yue);uWo=r(rvt,"roberta"),rvt.forEach(t),pWo=r(uSe," \u2014 "),MX=n(uSe,"A",{href:!0});var tvt=s(MX);_Wo=r(tvt,"RobertaForTokenClassification"),tvt.forEach(t),bWo=r(uSe," (RoBERTa model)"),uSe.forEach(t),vWo=i(J),w1=n(J,"LI",{});var pSe=s(w1);Kue=n(pSe,"STRONG",{});var avt=s(Kue);FWo=r(avt,"roformer"),avt.forEach(t),TWo=r(pSe," \u2014 "),EX=n(pSe,"A",{href:!0});var nvt=s(EX);MWo=r(nvt,"RoFormerForTokenClassification"),nvt.forEach(t),EWo=r(pSe," (RoFormer model)"),pSe.forEach(t),CWo=i(J),A1=n(J,"LI",{});var _Se=s(A1);Zue=n(_Se,"STRONG",{});var svt=s(Zue);wWo=r(svt,"squeezebert"),svt.forEach(t),AWo=r(_Se," \u2014 "),CX=n(_Se,"A",{href:!0});var lvt=s(CX);yWo=r(lvt,"SqueezeBertForTokenClassification"),lvt.forEach(t),LWo=r(_Se," (SqueezeBERT model)"),_Se.forEach(t),xWo=i(J),y1=n(J,"LI",{});var bSe=s(y1);epe=n(bSe,"STRONG",{});var ivt=s(epe);$Wo=r(ivt,"xlm"),ivt.forEach(t),kWo=r(bSe," \u2014 "),wX=n(bSe,"A",{href:!0});var dvt=s(wX);SWo=r(dvt,"XLMForTokenClassification"),dvt.forEach(t),RWo=r(bSe," (XLM model)"),bSe.forEach(t),PWo=i(J),L1=n(J,"LI",{});var vSe=s(L1);ope=n(vSe,"STRONG",{});var cvt=s(ope);BWo=r(cvt,"xlm-roberta"),cvt.forEach(t),IWo=r(vSe," \u2014 "),AX=n(vSe,"A",{href:!0});var mvt=s(AX);NWo=r(mvt,"XLMRobertaForTokenClassification"),mvt.forEach(t),qWo=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),jWo=i(J),x1=n(J,"LI",{});var FSe=s(x1);rpe=n(FSe,"STRONG",{});var fvt=s(rpe);DWo=r(fvt,"xlm-roberta-xl"),fvt.forEach(t),GWo=r(FSe," \u2014 "),yX=n(FSe,"A",{href:!0});var gvt=s(yX);OWo=r(gvt,"XLMRobertaXLForTokenClassification"),gvt.forEach(t),VWo=r(FSe," (XLM-RoBERTa-XL model)"),FSe.forEach(t),XWo=i(J),$1=n(J,"LI",{});var TSe=s($1);tpe=n(TSe,"STRONG",{});var hvt=s(tpe);zWo=r(hvt,"xlnet"),hvt.forEach(t),WWo=r(TSe," \u2014 "),LX=n(TSe,"A",{href:!0});var uvt=s(LX);QWo=r(uvt,"XLNetForTokenClassification"),uvt.forEach(t),HWo=r(TSe," (XLNet model)"),TSe.forEach(t),UWo=i(J),k1=n(J,"LI",{});var MSe=s(k1);ape=n(MSe,"STRONG",{});var pvt=s(ape);JWo=r(pvt,"yoso"),pvt.forEach(t),YWo=r(MSe," \u2014 "),xX=n(MSe,"A",{href:!0});var _vt=s(xX);KWo=r(_vt,"YosoForTokenClassification"),_vt.forEach(t),ZWo=r(MSe," (YOSO model)"),MSe.forEach(t),J.forEach(t),eQo=i(fa),S1=n(fa,"P",{});var ESe=s(S1);oQo=r(ESe,"The model is set in evaluation mode by default using "),npe=n(ESe,"CODE",{});var bvt=s(npe);rQo=r(bvt,"model.eval()"),bvt.forEach(t),tQo=r(ESe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),spe=n(ESe,"CODE",{});var vvt=s(spe);aQo=r(vvt,"model.train()"),vvt.forEach(t),ESe.forEach(t),nQo=i(fa),T(R1.$$.fragment,fa),fa.forEach(t),tl.forEach(t),WDe=i(m),sd=n(m,"H2",{class:!0});var KOe=s(sd);P1=n(KOe,"A",{id:!0,class:!0,href:!0});var Fvt=s(P1);lpe=n(Fvt,"SPAN",{});var Tvt=s(lpe);T(y7.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),sQo=i(KOe),ipe=n(KOe,"SPAN",{});var Mvt=s(ipe);lQo=r(Mvt,"AutoModelForQuestionAnswering"),Mvt.forEach(t),KOe.forEach(t),QDe=i(m),qo=n(m,"DIV",{class:!0});var al=s(qo);T(L7.$$.fragment,al),iQo=i(al),ld=n(al,"P",{});var Uee=s(ld);dQo=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$X=n(Uee,"A",{href:!0});var Evt=s($X);cQo=r(Evt,"from_pretrained()"),Evt.forEach(t),mQo=r(Uee," class method or the "),kX=n(Uee,"A",{href:!0});var Cvt=s(kX);fQo=r(Cvt,"from_config()"),Cvt.forEach(t),gQo=r(Uee,` class
method.`),Uee.forEach(t),hQo=i(al),x7=n(al,"P",{});var ZOe=s(x7);uQo=r(ZOe,"This class cannot be instantiated directly using "),dpe=n(ZOe,"CODE",{});var wvt=s(dpe);pQo=r(wvt,"__init__()"),wvt.forEach(t),_Qo=r(ZOe," (throws an error)."),ZOe.forEach(t),bQo=i(al),ht=n(al,"DIV",{class:!0});var $6=s(ht);T($7.$$.fragment,$6),vQo=i($6),cpe=n($6,"P",{});var Avt=s(cpe);FQo=r(Avt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Avt.forEach(t),TQo=i($6),id=n($6,"P",{});var Jee=s(id);MQo=r(Jee,`Note:
Loading a model from its configuration file does `),mpe=n(Jee,"STRONG",{});var yvt=s(mpe);EQo=r(yvt,"not"),yvt.forEach(t),CQo=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Jee,"A",{href:!0});var Lvt=s(SX);wQo=r(Lvt,"from_pretrained()"),Lvt.forEach(t),AQo=r(Jee," to load the model weights."),Jee.forEach(t),yQo=i($6),T(B1.$$.fragment,$6),$6.forEach(t),LQo=i(al),no=n(al,"DIV",{class:!0});var ga=s(no);T(k7.$$.fragment,ga),xQo=i(ga),fpe=n(ga,"P",{});var xvt=s(fpe);$Qo=r(xvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xvt.forEach(t),kQo=i(ga),Ga=n(ga,"P",{});var k6=s(Ga);SQo=r(k6,"The model class to instantiate is selected based on the "),gpe=n(k6,"CODE",{});var $vt=s(gpe);RQo=r($vt,"model_type"),$vt.forEach(t),PQo=r(k6,` property of the config object (either
passed as an argument or loaded from `),hpe=n(k6,"CODE",{});var kvt=s(hpe);BQo=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),IQo=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(k6,"CODE",{});var Svt=s(upe);NQo=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),qQo=r(k6,":"),k6.forEach(t),jQo=i(ga),V=n(ga,"UL",{});var X=s(V);I1=n(X,"LI",{});var CSe=s(I1);ppe=n(CSe,"STRONG",{});var Rvt=s(ppe);DQo=r(Rvt,"albert"),Rvt.forEach(t),GQo=r(CSe," \u2014 "),RX=n(CSe,"A",{href:!0});var Pvt=s(RX);OQo=r(Pvt,"AlbertForQuestionAnswering"),Pvt.forEach(t),VQo=r(CSe," (ALBERT model)"),CSe.forEach(t),XQo=i(X),N1=n(X,"LI",{});var wSe=s(N1);_pe=n(wSe,"STRONG",{});var Bvt=s(_pe);zQo=r(Bvt,"bart"),Bvt.forEach(t),WQo=r(wSe," \u2014 "),PX=n(wSe,"A",{href:!0});var Ivt=s(PX);QQo=r(Ivt,"BartForQuestionAnswering"),Ivt.forEach(t),HQo=r(wSe," (BART model)"),wSe.forEach(t),UQo=i(X),q1=n(X,"LI",{});var ASe=s(q1);bpe=n(ASe,"STRONG",{});var Nvt=s(bpe);JQo=r(Nvt,"bert"),Nvt.forEach(t),YQo=r(ASe," \u2014 "),BX=n(ASe,"A",{href:!0});var qvt=s(BX);KQo=r(qvt,"BertForQuestionAnswering"),qvt.forEach(t),ZQo=r(ASe," (BERT model)"),ASe.forEach(t),eHo=i(X),j1=n(X,"LI",{});var ySe=s(j1);vpe=n(ySe,"STRONG",{});var jvt=s(vpe);oHo=r(jvt,"big_bird"),jvt.forEach(t),rHo=r(ySe," \u2014 "),IX=n(ySe,"A",{href:!0});var Dvt=s(IX);tHo=r(Dvt,"BigBirdForQuestionAnswering"),Dvt.forEach(t),aHo=r(ySe," (BigBird model)"),ySe.forEach(t),nHo=i(X),D1=n(X,"LI",{});var LSe=s(D1);Fpe=n(LSe,"STRONG",{});var Gvt=s(Fpe);sHo=r(Gvt,"bigbird_pegasus"),Gvt.forEach(t),lHo=r(LSe," \u2014 "),NX=n(LSe,"A",{href:!0});var Ovt=s(NX);iHo=r(Ovt,"BigBirdPegasusForQuestionAnswering"),Ovt.forEach(t),dHo=r(LSe," (BigBird-Pegasus model)"),LSe.forEach(t),cHo=i(X),G1=n(X,"LI",{});var xSe=s(G1);Tpe=n(xSe,"STRONG",{});var Vvt=s(Tpe);mHo=r(Vvt,"camembert"),Vvt.forEach(t),fHo=r(xSe," \u2014 "),qX=n(xSe,"A",{href:!0});var Xvt=s(qX);gHo=r(Xvt,"CamembertForQuestionAnswering"),Xvt.forEach(t),hHo=r(xSe," (CamemBERT model)"),xSe.forEach(t),uHo=i(X),O1=n(X,"LI",{});var $Se=s(O1);Mpe=n($Se,"STRONG",{});var zvt=s(Mpe);pHo=r(zvt,"canine"),zvt.forEach(t),_Ho=r($Se," \u2014 "),jX=n($Se,"A",{href:!0});var Wvt=s(jX);bHo=r(Wvt,"CanineForQuestionAnswering"),Wvt.forEach(t),vHo=r($Se," (CANINE model)"),$Se.forEach(t),FHo=i(X),V1=n(X,"LI",{});var kSe=s(V1);Epe=n(kSe,"STRONG",{});var Qvt=s(Epe);THo=r(Qvt,"convbert"),Qvt.forEach(t),MHo=r(kSe," \u2014 "),DX=n(kSe,"A",{href:!0});var Hvt=s(DX);EHo=r(Hvt,"ConvBertForQuestionAnswering"),Hvt.forEach(t),CHo=r(kSe," (ConvBERT model)"),kSe.forEach(t),wHo=i(X),X1=n(X,"LI",{});var SSe=s(X1);Cpe=n(SSe,"STRONG",{});var Uvt=s(Cpe);AHo=r(Uvt,"data2vec-text"),Uvt.forEach(t),yHo=r(SSe," \u2014 "),GX=n(SSe,"A",{href:!0});var Jvt=s(GX);LHo=r(Jvt,"Data2VecTextForQuestionAnswering"),Jvt.forEach(t),xHo=r(SSe," (Data2VecText model)"),SSe.forEach(t),$Ho=i(X),z1=n(X,"LI",{});var RSe=s(z1);wpe=n(RSe,"STRONG",{});var Yvt=s(wpe);kHo=r(Yvt,"deberta"),Yvt.forEach(t),SHo=r(RSe," \u2014 "),OX=n(RSe,"A",{href:!0});var Kvt=s(OX);RHo=r(Kvt,"DebertaForQuestionAnswering"),Kvt.forEach(t),PHo=r(RSe," (DeBERTa model)"),RSe.forEach(t),BHo=i(X),W1=n(X,"LI",{});var PSe=s(W1);Ape=n(PSe,"STRONG",{});var Zvt=s(Ape);IHo=r(Zvt,"deberta-v2"),Zvt.forEach(t),NHo=r(PSe," \u2014 "),VX=n(PSe,"A",{href:!0});var eFt=s(VX);qHo=r(eFt,"DebertaV2ForQuestionAnswering"),eFt.forEach(t),jHo=r(PSe," (DeBERTa-v2 model)"),PSe.forEach(t),DHo=i(X),Q1=n(X,"LI",{});var BSe=s(Q1);ype=n(BSe,"STRONG",{});var oFt=s(ype);GHo=r(oFt,"distilbert"),oFt.forEach(t),OHo=r(BSe," \u2014 "),XX=n(BSe,"A",{href:!0});var rFt=s(XX);VHo=r(rFt,"DistilBertForQuestionAnswering"),rFt.forEach(t),XHo=r(BSe," (DistilBERT model)"),BSe.forEach(t),zHo=i(X),H1=n(X,"LI",{});var ISe=s(H1);Lpe=n(ISe,"STRONG",{});var tFt=s(Lpe);WHo=r(tFt,"electra"),tFt.forEach(t),QHo=r(ISe," \u2014 "),zX=n(ISe,"A",{href:!0});var aFt=s(zX);HHo=r(aFt,"ElectraForQuestionAnswering"),aFt.forEach(t),UHo=r(ISe," (ELECTRA model)"),ISe.forEach(t),JHo=i(X),U1=n(X,"LI",{});var NSe=s(U1);xpe=n(NSe,"STRONG",{});var nFt=s(xpe);YHo=r(nFt,"flaubert"),nFt.forEach(t),KHo=r(NSe," \u2014 "),WX=n(NSe,"A",{href:!0});var sFt=s(WX);ZHo=r(sFt,"FlaubertForQuestionAnsweringSimple"),sFt.forEach(t),eUo=r(NSe," (FlauBERT model)"),NSe.forEach(t),oUo=i(X),J1=n(X,"LI",{});var qSe=s(J1);$pe=n(qSe,"STRONG",{});var lFt=s($pe);rUo=r(lFt,"fnet"),lFt.forEach(t),tUo=r(qSe," \u2014 "),QX=n(qSe,"A",{href:!0});var iFt=s(QX);aUo=r(iFt,"FNetForQuestionAnswering"),iFt.forEach(t),nUo=r(qSe," (FNet model)"),qSe.forEach(t),sUo=i(X),Y1=n(X,"LI",{});var jSe=s(Y1);kpe=n(jSe,"STRONG",{});var dFt=s(kpe);lUo=r(dFt,"funnel"),dFt.forEach(t),iUo=r(jSe," \u2014 "),HX=n(jSe,"A",{href:!0});var cFt=s(HX);dUo=r(cFt,"FunnelForQuestionAnswering"),cFt.forEach(t),cUo=r(jSe," (Funnel Transformer model)"),jSe.forEach(t),mUo=i(X),K1=n(X,"LI",{});var DSe=s(K1);Spe=n(DSe,"STRONG",{});var mFt=s(Spe);fUo=r(mFt,"gptj"),mFt.forEach(t),gUo=r(DSe," \u2014 "),UX=n(DSe,"A",{href:!0});var fFt=s(UX);hUo=r(fFt,"GPTJForQuestionAnswering"),fFt.forEach(t),uUo=r(DSe," (GPT-J model)"),DSe.forEach(t),pUo=i(X),Z1=n(X,"LI",{});var GSe=s(Z1);Rpe=n(GSe,"STRONG",{});var gFt=s(Rpe);_Uo=r(gFt,"ibert"),gFt.forEach(t),bUo=r(GSe," \u2014 "),JX=n(GSe,"A",{href:!0});var hFt=s(JX);vUo=r(hFt,"IBertForQuestionAnswering"),hFt.forEach(t),FUo=r(GSe," (I-BERT model)"),GSe.forEach(t),TUo=i(X),eT=n(X,"LI",{});var OSe=s(eT);Ppe=n(OSe,"STRONG",{});var uFt=s(Ppe);MUo=r(uFt,"layoutlmv2"),uFt.forEach(t),EUo=r(OSe," \u2014 "),YX=n(OSe,"A",{href:!0});var pFt=s(YX);CUo=r(pFt,"LayoutLMv2ForQuestionAnswering"),pFt.forEach(t),wUo=r(OSe," (LayoutLMv2 model)"),OSe.forEach(t),AUo=i(X),oT=n(X,"LI",{});var VSe=s(oT);Bpe=n(VSe,"STRONG",{});var _Ft=s(Bpe);yUo=r(_Ft,"layoutlmv3"),_Ft.forEach(t),LUo=r(VSe," \u2014 "),KX=n(VSe,"A",{href:!0});var bFt=s(KX);xUo=r(bFt,"LayoutLMv3ForQuestionAnswering"),bFt.forEach(t),$Uo=r(VSe," (LayoutLMv3 model)"),VSe.forEach(t),kUo=i(X),rT=n(X,"LI",{});var XSe=s(rT);Ipe=n(XSe,"STRONG",{});var vFt=s(Ipe);SUo=r(vFt,"led"),vFt.forEach(t),RUo=r(XSe," \u2014 "),ZX=n(XSe,"A",{href:!0});var FFt=s(ZX);PUo=r(FFt,"LEDForQuestionAnswering"),FFt.forEach(t),BUo=r(XSe," (LED model)"),XSe.forEach(t),IUo=i(X),tT=n(X,"LI",{});var zSe=s(tT);Npe=n(zSe,"STRONG",{});var TFt=s(Npe);NUo=r(TFt,"longformer"),TFt.forEach(t),qUo=r(zSe," \u2014 "),ez=n(zSe,"A",{href:!0});var MFt=s(ez);jUo=r(MFt,"LongformerForQuestionAnswering"),MFt.forEach(t),DUo=r(zSe," (Longformer model)"),zSe.forEach(t),GUo=i(X),aT=n(X,"LI",{});var WSe=s(aT);qpe=n(WSe,"STRONG",{});var EFt=s(qpe);OUo=r(EFt,"lxmert"),EFt.forEach(t),VUo=r(WSe," \u2014 "),oz=n(WSe,"A",{href:!0});var CFt=s(oz);XUo=r(CFt,"LxmertForQuestionAnswering"),CFt.forEach(t),zUo=r(WSe," (LXMERT model)"),WSe.forEach(t),WUo=i(X),nT=n(X,"LI",{});var QSe=s(nT);jpe=n(QSe,"STRONG",{});var wFt=s(jpe);QUo=r(wFt,"mbart"),wFt.forEach(t),HUo=r(QSe," \u2014 "),rz=n(QSe,"A",{href:!0});var AFt=s(rz);UUo=r(AFt,"MBartForQuestionAnswering"),AFt.forEach(t),JUo=r(QSe," (mBART model)"),QSe.forEach(t),YUo=i(X),sT=n(X,"LI",{});var HSe=s(sT);Dpe=n(HSe,"STRONG",{});var yFt=s(Dpe);KUo=r(yFt,"megatron-bert"),yFt.forEach(t),ZUo=r(HSe," \u2014 "),tz=n(HSe,"A",{href:!0});var LFt=s(tz);eJo=r(LFt,"MegatronBertForQuestionAnswering"),LFt.forEach(t),oJo=r(HSe," (Megatron-BERT model)"),HSe.forEach(t),rJo=i(X),lT=n(X,"LI",{});var USe=s(lT);Gpe=n(USe,"STRONG",{});var xFt=s(Gpe);tJo=r(xFt,"mobilebert"),xFt.forEach(t),aJo=r(USe," \u2014 "),az=n(USe,"A",{href:!0});var $Ft=s(az);nJo=r($Ft,"MobileBertForQuestionAnswering"),$Ft.forEach(t),sJo=r(USe," (MobileBERT model)"),USe.forEach(t),lJo=i(X),iT=n(X,"LI",{});var JSe=s(iT);Ope=n(JSe,"STRONG",{});var kFt=s(Ope);iJo=r(kFt,"mpnet"),kFt.forEach(t),dJo=r(JSe," \u2014 "),nz=n(JSe,"A",{href:!0});var SFt=s(nz);cJo=r(SFt,"MPNetForQuestionAnswering"),SFt.forEach(t),mJo=r(JSe," (MPNet model)"),JSe.forEach(t),fJo=i(X),dT=n(X,"LI",{});var YSe=s(dT);Vpe=n(YSe,"STRONG",{});var RFt=s(Vpe);gJo=r(RFt,"nystromformer"),RFt.forEach(t),hJo=r(YSe," \u2014 "),sz=n(YSe,"A",{href:!0});var PFt=s(sz);uJo=r(PFt,"NystromformerForQuestionAnswering"),PFt.forEach(t),pJo=r(YSe," (Nystr\xF6mformer model)"),YSe.forEach(t),_Jo=i(X),cT=n(X,"LI",{});var KSe=s(cT);Xpe=n(KSe,"STRONG",{});var BFt=s(Xpe);bJo=r(BFt,"qdqbert"),BFt.forEach(t),vJo=r(KSe," \u2014 "),lz=n(KSe,"A",{href:!0});var IFt=s(lz);FJo=r(IFt,"QDQBertForQuestionAnswering"),IFt.forEach(t),TJo=r(KSe," (QDQBert model)"),KSe.forEach(t),MJo=i(X),mT=n(X,"LI",{});var ZSe=s(mT);zpe=n(ZSe,"STRONG",{});var NFt=s(zpe);EJo=r(NFt,"reformer"),NFt.forEach(t),CJo=r(ZSe," \u2014 "),iz=n(ZSe,"A",{href:!0});var qFt=s(iz);wJo=r(qFt,"ReformerForQuestionAnswering"),qFt.forEach(t),AJo=r(ZSe," (Reformer model)"),ZSe.forEach(t),yJo=i(X),fT=n(X,"LI",{});var eRe=s(fT);Wpe=n(eRe,"STRONG",{});var jFt=s(Wpe);LJo=r(jFt,"rembert"),jFt.forEach(t),xJo=r(eRe," \u2014 "),dz=n(eRe,"A",{href:!0});var DFt=s(dz);$Jo=r(DFt,"RemBertForQuestionAnswering"),DFt.forEach(t),kJo=r(eRe," (RemBERT model)"),eRe.forEach(t),SJo=i(X),gT=n(X,"LI",{});var oRe=s(gT);Qpe=n(oRe,"STRONG",{});var GFt=s(Qpe);RJo=r(GFt,"roberta"),GFt.forEach(t),PJo=r(oRe," \u2014 "),cz=n(oRe,"A",{href:!0});var OFt=s(cz);BJo=r(OFt,"RobertaForQuestionAnswering"),OFt.forEach(t),IJo=r(oRe," (RoBERTa model)"),oRe.forEach(t),NJo=i(X),hT=n(X,"LI",{});var rRe=s(hT);Hpe=n(rRe,"STRONG",{});var VFt=s(Hpe);qJo=r(VFt,"roformer"),VFt.forEach(t),jJo=r(rRe," \u2014 "),mz=n(rRe,"A",{href:!0});var XFt=s(mz);DJo=r(XFt,"RoFormerForQuestionAnswering"),XFt.forEach(t),GJo=r(rRe," (RoFormer model)"),rRe.forEach(t),OJo=i(X),uT=n(X,"LI",{});var tRe=s(uT);Upe=n(tRe,"STRONG",{});var zFt=s(Upe);VJo=r(zFt,"splinter"),zFt.forEach(t),XJo=r(tRe," \u2014 "),fz=n(tRe,"A",{href:!0});var WFt=s(fz);zJo=r(WFt,"SplinterForQuestionAnswering"),WFt.forEach(t),WJo=r(tRe," (Splinter model)"),tRe.forEach(t),QJo=i(X),pT=n(X,"LI",{});var aRe=s(pT);Jpe=n(aRe,"STRONG",{});var QFt=s(Jpe);HJo=r(QFt,"squeezebert"),QFt.forEach(t),UJo=r(aRe," \u2014 "),gz=n(aRe,"A",{href:!0});var HFt=s(gz);JJo=r(HFt,"SqueezeBertForQuestionAnswering"),HFt.forEach(t),YJo=r(aRe," (SqueezeBERT model)"),aRe.forEach(t),KJo=i(X),_T=n(X,"LI",{});var nRe=s(_T);Ype=n(nRe,"STRONG",{});var UFt=s(Ype);ZJo=r(UFt,"xlm"),UFt.forEach(t),eYo=r(nRe," \u2014 "),hz=n(nRe,"A",{href:!0});var JFt=s(hz);oYo=r(JFt,"XLMForQuestionAnsweringSimple"),JFt.forEach(t),rYo=r(nRe," (XLM model)"),nRe.forEach(t),tYo=i(X),bT=n(X,"LI",{});var sRe=s(bT);Kpe=n(sRe,"STRONG",{});var YFt=s(Kpe);aYo=r(YFt,"xlm-roberta"),YFt.forEach(t),nYo=r(sRe," \u2014 "),uz=n(sRe,"A",{href:!0});var KFt=s(uz);sYo=r(KFt,"XLMRobertaForQuestionAnswering"),KFt.forEach(t),lYo=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),iYo=i(X),vT=n(X,"LI",{});var lRe=s(vT);Zpe=n(lRe,"STRONG",{});var ZFt=s(Zpe);dYo=r(ZFt,"xlm-roberta-xl"),ZFt.forEach(t),cYo=r(lRe," \u2014 "),pz=n(lRe,"A",{href:!0});var e1t=s(pz);mYo=r(e1t,"XLMRobertaXLForQuestionAnswering"),e1t.forEach(t),fYo=r(lRe," (XLM-RoBERTa-XL model)"),lRe.forEach(t),gYo=i(X),FT=n(X,"LI",{});var iRe=s(FT);e_e=n(iRe,"STRONG",{});var o1t=s(e_e);hYo=r(o1t,"xlnet"),o1t.forEach(t),uYo=r(iRe," \u2014 "),_z=n(iRe,"A",{href:!0});var r1t=s(_z);pYo=r(r1t,"XLNetForQuestionAnsweringSimple"),r1t.forEach(t),_Yo=r(iRe," (XLNet model)"),iRe.forEach(t),bYo=i(X),TT=n(X,"LI",{});var dRe=s(TT);o_e=n(dRe,"STRONG",{});var t1t=s(o_e);vYo=r(t1t,"yoso"),t1t.forEach(t),FYo=r(dRe," \u2014 "),bz=n(dRe,"A",{href:!0});var a1t=s(bz);TYo=r(a1t,"YosoForQuestionAnswering"),a1t.forEach(t),MYo=r(dRe," (YOSO model)"),dRe.forEach(t),X.forEach(t),EYo=i(ga),MT=n(ga,"P",{});var cRe=s(MT);CYo=r(cRe,"The model is set in evaluation mode by default using "),r_e=n(cRe,"CODE",{});var n1t=s(r_e);wYo=r(n1t,"model.eval()"),n1t.forEach(t),AYo=r(cRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t_e=n(cRe,"CODE",{});var s1t=s(t_e);yYo=r(s1t,"model.train()"),s1t.forEach(t),cRe.forEach(t),LYo=i(ga),T(ET.$$.fragment,ga),ga.forEach(t),al.forEach(t),HDe=i(m),dd=n(m,"H2",{class:!0});var eVe=s(dd);CT=n(eVe,"A",{id:!0,class:!0,href:!0});var l1t=s(CT);a_e=n(l1t,"SPAN",{});var i1t=s(a_e);T(S7.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),xYo=i(eVe),n_e=n(eVe,"SPAN",{});var d1t=s(n_e);$Yo=r(d1t,"AutoModelForTableQuestionAnswering"),d1t.forEach(t),eVe.forEach(t),UDe=i(m),jo=n(m,"DIV",{class:!0});var nl=s(jo);T(R7.$$.fragment,nl),kYo=i(nl),cd=n(nl,"P",{});var Yee=s(cd);SYo=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vz=n(Yee,"A",{href:!0});var c1t=s(vz);RYo=r(c1t,"from_pretrained()"),c1t.forEach(t),PYo=r(Yee," class method or the "),Fz=n(Yee,"A",{href:!0});var m1t=s(Fz);BYo=r(m1t,"from_config()"),m1t.forEach(t),IYo=r(Yee,` class
method.`),Yee.forEach(t),NYo=i(nl),P7=n(nl,"P",{});var oVe=s(P7);qYo=r(oVe,"This class cannot be instantiated directly using "),s_e=n(oVe,"CODE",{});var f1t=s(s_e);jYo=r(f1t,"__init__()"),f1t.forEach(t),DYo=r(oVe," (throws an error)."),oVe.forEach(t),GYo=i(nl),ut=n(nl,"DIV",{class:!0});var S6=s(ut);T(B7.$$.fragment,S6),OYo=i(S6),l_e=n(S6,"P",{});var g1t=s(l_e);VYo=r(g1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),g1t.forEach(t),XYo=i(S6),md=n(S6,"P",{});var Kee=s(md);zYo=r(Kee,`Note:
Loading a model from its configuration file does `),i_e=n(Kee,"STRONG",{});var h1t=s(i_e);WYo=r(h1t,"not"),h1t.forEach(t),QYo=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(Kee,"A",{href:!0});var u1t=s(Tz);HYo=r(u1t,"from_pretrained()"),u1t.forEach(t),UYo=r(Kee," to load the model weights."),Kee.forEach(t),JYo=i(S6),T(wT.$$.fragment,S6),S6.forEach(t),YYo=i(nl),so=n(nl,"DIV",{class:!0});var ha=s(so);T(I7.$$.fragment,ha),KYo=i(ha),d_e=n(ha,"P",{});var p1t=s(d_e);ZYo=r(p1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),p1t.forEach(t),eKo=i(ha),Oa=n(ha,"P",{});var R6=s(Oa);oKo=r(R6,"The model class to instantiate is selected based on the "),c_e=n(R6,"CODE",{});var _1t=s(c_e);rKo=r(_1t,"model_type"),_1t.forEach(t),tKo=r(R6,` property of the config object (either
passed as an argument or loaded from `),m_e=n(R6,"CODE",{});var b1t=s(m_e);aKo=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),nKo=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=n(R6,"CODE",{});var v1t=s(f_e);sKo=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),lKo=r(R6,":"),R6.forEach(t),iKo=i(ha),g_e=n(ha,"UL",{});var F1t=s(g_e);AT=n(F1t,"LI",{});var mRe=s(AT);h_e=n(mRe,"STRONG",{});var T1t=s(h_e);dKo=r(T1t,"tapas"),T1t.forEach(t),cKo=r(mRe," \u2014 "),Mz=n(mRe,"A",{href:!0});var M1t=s(Mz);mKo=r(M1t,"TapasForQuestionAnswering"),M1t.forEach(t),fKo=r(mRe," (TAPAS model)"),mRe.forEach(t),F1t.forEach(t),gKo=i(ha),yT=n(ha,"P",{});var fRe=s(yT);hKo=r(fRe,"The model is set in evaluation mode by default using "),u_e=n(fRe,"CODE",{});var E1t=s(u_e);uKo=r(E1t,"model.eval()"),E1t.forEach(t),pKo=r(fRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(fRe,"CODE",{});var C1t=s(p_e);_Ko=r(C1t,"model.train()"),C1t.forEach(t),fRe.forEach(t),bKo=i(ha),T(LT.$$.fragment,ha),ha.forEach(t),nl.forEach(t),JDe=i(m),fd=n(m,"H2",{class:!0});var rVe=s(fd);xT=n(rVe,"A",{id:!0,class:!0,href:!0});var w1t=s(xT);__e=n(w1t,"SPAN",{});var A1t=s(__e);T(N7.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),vKo=i(rVe),b_e=n(rVe,"SPAN",{});var y1t=s(b_e);FKo=r(y1t,"AutoModelForImageClassification"),y1t.forEach(t),rVe.forEach(t),YDe=i(m),Do=n(m,"DIV",{class:!0});var sl=s(Do);T(q7.$$.fragment,sl),TKo=i(sl),gd=n(sl,"P",{});var Zee=s(gd);MKo=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Ez=n(Zee,"A",{href:!0});var L1t=s(Ez);EKo=r(L1t,"from_pretrained()"),L1t.forEach(t),CKo=r(Zee," class method or the "),Cz=n(Zee,"A",{href:!0});var x1t=s(Cz);wKo=r(x1t,"from_config()"),x1t.forEach(t),AKo=r(Zee,` class
method.`),Zee.forEach(t),yKo=i(sl),j7=n(sl,"P",{});var tVe=s(j7);LKo=r(tVe,"This class cannot be instantiated directly using "),v_e=n(tVe,"CODE",{});var $1t=s(v_e);xKo=r($1t,"__init__()"),$1t.forEach(t),$Ko=r(tVe," (throws an error)."),tVe.forEach(t),kKo=i(sl),pt=n(sl,"DIV",{class:!0});var P6=s(pt);T(D7.$$.fragment,P6),SKo=i(P6),F_e=n(P6,"P",{});var k1t=s(F_e);RKo=r(k1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),k1t.forEach(t),PKo=i(P6),hd=n(P6,"P",{});var eoe=s(hd);BKo=r(eoe,`Note:
Loading a model from its configuration file does `),T_e=n(eoe,"STRONG",{});var S1t=s(T_e);IKo=r(S1t,"not"),S1t.forEach(t),NKo=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(eoe,"A",{href:!0});var R1t=s(wz);qKo=r(R1t,"from_pretrained()"),R1t.forEach(t),jKo=r(eoe," to load the model weights."),eoe.forEach(t),DKo=i(P6),T($T.$$.fragment,P6),P6.forEach(t),GKo=i(sl),lo=n(sl,"DIV",{class:!0});var ua=s(lo);T(G7.$$.fragment,ua),OKo=i(ua),M_e=n(ua,"P",{});var P1t=s(M_e);VKo=r(P1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P1t.forEach(t),XKo=i(ua),Va=n(ua,"P",{});var B6=s(Va);zKo=r(B6,"The model class to instantiate is selected based on the "),E_e=n(B6,"CODE",{});var B1t=s(E_e);WKo=r(B1t,"model_type"),B1t.forEach(t),QKo=r(B6,` property of the config object (either
passed as an argument or loaded from `),C_e=n(B6,"CODE",{});var I1t=s(C_e);HKo=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),UKo=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(B6,"CODE",{});var N1t=s(w_e);JKo=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),YKo=r(B6,":"),B6.forEach(t),KKo=i(ua),ve=n(ua,"UL",{});var Te=s(ve);kT=n(Te,"LI",{});var gRe=s(kT);A_e=n(gRe,"STRONG",{});var q1t=s(A_e);ZKo=r(q1t,"beit"),q1t.forEach(t),eZo=r(gRe," \u2014 "),Az=n(gRe,"A",{href:!0});var j1t=s(Az);oZo=r(j1t,"BeitForImageClassification"),j1t.forEach(t),rZo=r(gRe," (BEiT model)"),gRe.forEach(t),tZo=i(Te),ST=n(Te,"LI",{});var hRe=s(ST);y_e=n(hRe,"STRONG",{});var D1t=s(y_e);aZo=r(D1t,"convnext"),D1t.forEach(t),nZo=r(hRe," \u2014 "),yz=n(hRe,"A",{href:!0});var G1t=s(yz);sZo=r(G1t,"ConvNextForImageClassification"),G1t.forEach(t),lZo=r(hRe," (ConvNeXT model)"),hRe.forEach(t),iZo=i(Te),RT=n(Te,"LI",{});var uRe=s(RT);L_e=n(uRe,"STRONG",{});var O1t=s(L_e);dZo=r(O1t,"cvt"),O1t.forEach(t),cZo=r(uRe," \u2014 "),Lz=n(uRe,"A",{href:!0});var V1t=s(Lz);mZo=r(V1t,"CvtForImageClassification"),V1t.forEach(t),fZo=r(uRe," (CvT model)"),uRe.forEach(t),gZo=i(Te),PT=n(Te,"LI",{});var pRe=s(PT);x_e=n(pRe,"STRONG",{});var X1t=s(x_e);hZo=r(X1t,"data2vec-vision"),X1t.forEach(t),uZo=r(pRe," \u2014 "),xz=n(pRe,"A",{href:!0});var z1t=s(xz);pZo=r(z1t,"Data2VecVisionForImageClassification"),z1t.forEach(t),_Zo=r(pRe," (Data2VecVision model)"),pRe.forEach(t),bZo=i(Te),Gs=n(Te,"LI",{});var Sk=s(Gs);$_e=n(Sk,"STRONG",{});var W1t=s($_e);vZo=r(W1t,"deit"),W1t.forEach(t),FZo=r(Sk," \u2014 "),$z=n(Sk,"A",{href:!0});var Q1t=s($z);TZo=r(Q1t,"DeiTForImageClassification"),Q1t.forEach(t),MZo=r(Sk," or "),kz=n(Sk,"A",{href:!0});var H1t=s(kz);EZo=r(H1t,"DeiTForImageClassificationWithTeacher"),H1t.forEach(t),CZo=r(Sk," (DeiT model)"),Sk.forEach(t),wZo=i(Te),BT=n(Te,"LI",{});var _Re=s(BT);k_e=n(_Re,"STRONG",{});var U1t=s(k_e);AZo=r(U1t,"imagegpt"),U1t.forEach(t),yZo=r(_Re," \u2014 "),Sz=n(_Re,"A",{href:!0});var J1t=s(Sz);LZo=r(J1t,"ImageGPTForImageClassification"),J1t.forEach(t),xZo=r(_Re," (ImageGPT model)"),_Re.forEach(t),$Zo=i(Te),Os=n(Te,"LI",{});var Rk=s(Os);S_e=n(Rk,"STRONG",{});var Y1t=s(S_e);kZo=r(Y1t,"levit"),Y1t.forEach(t),SZo=r(Rk," \u2014 "),Rz=n(Rk,"A",{href:!0});var K1t=s(Rz);RZo=r(K1t,"LevitForImageClassification"),K1t.forEach(t),PZo=r(Rk," or "),Pz=n(Rk,"A",{href:!0});var Z1t=s(Pz);BZo=r(Z1t,"LevitForImageClassificationWithTeacher"),Z1t.forEach(t),IZo=r(Rk," (LeViT model)"),Rk.forEach(t),NZo=i(Te),_t=n(Te,"LI",{});var Cm=s(_t);R_e=n(Cm,"STRONG",{});var eTt=s(R_e);qZo=r(eTt,"perceiver"),eTt.forEach(t),jZo=r(Cm," \u2014 "),Bz=n(Cm,"A",{href:!0});var oTt=s(Bz);DZo=r(oTt,"PerceiverForImageClassificationLearned"),oTt.forEach(t),GZo=r(Cm," or "),Iz=n(Cm,"A",{href:!0});var rTt=s(Iz);OZo=r(rTt,"PerceiverForImageClassificationFourier"),rTt.forEach(t),VZo=r(Cm," or "),Nz=n(Cm,"A",{href:!0});var tTt=s(Nz);XZo=r(tTt,"PerceiverForImageClassificationConvProcessing"),tTt.forEach(t),zZo=r(Cm," (Perceiver model)"),Cm.forEach(t),WZo=i(Te),IT=n(Te,"LI",{});var bRe=s(IT);P_e=n(bRe,"STRONG",{});var aTt=s(P_e);QZo=r(aTt,"poolformer"),aTt.forEach(t),HZo=r(bRe," \u2014 "),qz=n(bRe,"A",{href:!0});var nTt=s(qz);UZo=r(nTt,"PoolFormerForImageClassification"),nTt.forEach(t),JZo=r(bRe," (PoolFormer model)"),bRe.forEach(t),YZo=i(Te),NT=n(Te,"LI",{});var vRe=s(NT);B_e=n(vRe,"STRONG",{});var sTt=s(B_e);KZo=r(sTt,"regnet"),sTt.forEach(t),ZZo=r(vRe," \u2014 "),jz=n(vRe,"A",{href:!0});var lTt=s(jz);eer=r(lTt,"RegNetForImageClassification"),lTt.forEach(t),oer=r(vRe," (RegNet model)"),vRe.forEach(t),rer=i(Te),qT=n(Te,"LI",{});var FRe=s(qT);I_e=n(FRe,"STRONG",{});var iTt=s(I_e);ter=r(iTt,"resnet"),iTt.forEach(t),aer=r(FRe," \u2014 "),Dz=n(FRe,"A",{href:!0});var dTt=s(Dz);ner=r(dTt,"ResNetForImageClassification"),dTt.forEach(t),ser=r(FRe," (ResNet model)"),FRe.forEach(t),ler=i(Te),jT=n(Te,"LI",{});var TRe=s(jT);N_e=n(TRe,"STRONG",{});var cTt=s(N_e);ier=r(cTt,"segformer"),cTt.forEach(t),der=r(TRe," \u2014 "),Gz=n(TRe,"A",{href:!0});var mTt=s(Gz);cer=r(mTt,"SegformerForImageClassification"),mTt.forEach(t),mer=r(TRe," (SegFormer model)"),TRe.forEach(t),fer=i(Te),DT=n(Te,"LI",{});var MRe=s(DT);q_e=n(MRe,"STRONG",{});var fTt=s(q_e);ger=r(fTt,"swin"),fTt.forEach(t),her=r(MRe," \u2014 "),Oz=n(MRe,"A",{href:!0});var gTt=s(Oz);uer=r(gTt,"SwinForImageClassification"),gTt.forEach(t),per=r(MRe," (Swin Transformer model)"),MRe.forEach(t),_er=i(Te),GT=n(Te,"LI",{});var ERe=s(GT);j_e=n(ERe,"STRONG",{});var hTt=s(j_e);ber=r(hTt,"van"),hTt.forEach(t),ver=r(ERe," \u2014 "),Vz=n(ERe,"A",{href:!0});var uTt=s(Vz);Fer=r(uTt,"VanForImageClassification"),uTt.forEach(t),Ter=r(ERe," (VAN model)"),ERe.forEach(t),Mer=i(Te),OT=n(Te,"LI",{});var CRe=s(OT);D_e=n(CRe,"STRONG",{});var pTt=s(D_e);Eer=r(pTt,"vit"),pTt.forEach(t),Cer=r(CRe," \u2014 "),Xz=n(CRe,"A",{href:!0});var _Tt=s(Xz);wer=r(_Tt,"ViTForImageClassification"),_Tt.forEach(t),Aer=r(CRe," (ViT model)"),CRe.forEach(t),Te.forEach(t),yer=i(ua),VT=n(ua,"P",{});var wRe=s(VT);Ler=r(wRe,"The model is set in evaluation mode by default using "),G_e=n(wRe,"CODE",{});var bTt=s(G_e);xer=r(bTt,"model.eval()"),bTt.forEach(t),$er=r(wRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O_e=n(wRe,"CODE",{});var vTt=s(O_e);ker=r(vTt,"model.train()"),vTt.forEach(t),wRe.forEach(t),Ser=i(ua),T(XT.$$.fragment,ua),ua.forEach(t),sl.forEach(t),KDe=i(m),ud=n(m,"H2",{class:!0});var aVe=s(ud);zT=n(aVe,"A",{id:!0,class:!0,href:!0});var FTt=s(zT);V_e=n(FTt,"SPAN",{});var TTt=s(V_e);T(O7.$$.fragment,TTt),TTt.forEach(t),FTt.forEach(t),Rer=i(aVe),X_e=n(aVe,"SPAN",{});var MTt=s(X_e);Per=r(MTt,"AutoModelForVision2Seq"),MTt.forEach(t),aVe.forEach(t),ZDe=i(m),Go=n(m,"DIV",{class:!0});var ll=s(Go);T(V7.$$.fragment,ll),Ber=i(ll),pd=n(ll,"P",{});var ooe=s(pd);Ier=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zz=n(ooe,"A",{href:!0});var ETt=s(zz);Ner=r(ETt,"from_pretrained()"),ETt.forEach(t),qer=r(ooe," class method or the "),Wz=n(ooe,"A",{href:!0});var CTt=s(Wz);jer=r(CTt,"from_config()"),CTt.forEach(t),Der=r(ooe,` class
method.`),ooe.forEach(t),Ger=i(ll),X7=n(ll,"P",{});var nVe=s(X7);Oer=r(nVe,"This class cannot be instantiated directly using "),z_e=n(nVe,"CODE",{});var wTt=s(z_e);Ver=r(wTt,"__init__()"),wTt.forEach(t),Xer=r(nVe," (throws an error)."),nVe.forEach(t),zer=i(ll),bt=n(ll,"DIV",{class:!0});var I6=s(bt);T(z7.$$.fragment,I6),Wer=i(I6),W_e=n(I6,"P",{});var ATt=s(W_e);Qer=r(ATt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ATt.forEach(t),Her=i(I6),_d=n(I6,"P",{});var roe=s(_d);Uer=r(roe,`Note:
Loading a model from its configuration file does `),Q_e=n(roe,"STRONG",{});var yTt=s(Q_e);Jer=r(yTt,"not"),yTt.forEach(t),Yer=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(roe,"A",{href:!0});var LTt=s(Qz);Ker=r(LTt,"from_pretrained()"),LTt.forEach(t),Zer=r(roe," to load the model weights."),roe.forEach(t),eor=i(I6),T(WT.$$.fragment,I6),I6.forEach(t),oor=i(ll),io=n(ll,"DIV",{class:!0});var pa=s(io);T(W7.$$.fragment,pa),ror=i(pa),H_e=n(pa,"P",{});var xTt=s(H_e);tor=r(xTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xTt.forEach(t),aor=i(pa),Xa=n(pa,"P",{});var N6=s(Xa);nor=r(N6,"The model class to instantiate is selected based on the "),U_e=n(N6,"CODE",{});var $Tt=s(U_e);sor=r($Tt,"model_type"),$Tt.forEach(t),lor=r(N6,` property of the config object (either
passed as an argument or loaded from `),J_e=n(N6,"CODE",{});var kTt=s(J_e);ior=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),dor=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y_e=n(N6,"CODE",{});var STt=s(Y_e);cor=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),mor=r(N6,":"),N6.forEach(t),gor=i(pa),K_e=n(pa,"UL",{});var RTt=s(K_e);QT=n(RTt,"LI",{});var ARe=s(QT);Z_e=n(ARe,"STRONG",{});var PTt=s(Z_e);hor=r(PTt,"vision-encoder-decoder"),PTt.forEach(t),uor=r(ARe," \u2014 "),Hz=n(ARe,"A",{href:!0});var BTt=s(Hz);por=r(BTt,"VisionEncoderDecoderModel"),BTt.forEach(t),_or=r(ARe," (Vision Encoder decoder model)"),ARe.forEach(t),RTt.forEach(t),bor=i(pa),HT=n(pa,"P",{});var yRe=s(HT);vor=r(yRe,"The model is set in evaluation mode by default using "),ebe=n(yRe,"CODE",{});var ITt=s(ebe);For=r(ITt,"model.eval()"),ITt.forEach(t),Tor=r(yRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(yRe,"CODE",{});var NTt=s(obe);Mor=r(NTt,"model.train()"),NTt.forEach(t),yRe.forEach(t),Eor=i(pa),T(UT.$$.fragment,pa),pa.forEach(t),ll.forEach(t),eGe=i(m),bd=n(m,"H2",{class:!0});var sVe=s(bd);JT=n(sVe,"A",{id:!0,class:!0,href:!0});var qTt=s(JT);rbe=n(qTt,"SPAN",{});var jTt=s(rbe);T(Q7.$$.fragment,jTt),jTt.forEach(t),qTt.forEach(t),Cor=i(sVe),tbe=n(sVe,"SPAN",{});var DTt=s(tbe);wor=r(DTt,"AutoModelForVisualQuestionAnswering"),DTt.forEach(t),sVe.forEach(t),oGe=i(m),Oo=n(m,"DIV",{class:!0});var il=s(Oo);T(H7.$$.fragment,il),Aor=i(il),vd=n(il,"P",{});var toe=s(vd);yor=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),Uz=n(toe,"A",{href:!0});var GTt=s(Uz);Lor=r(GTt,"from_pretrained()"),GTt.forEach(t),xor=r(toe," class method or the "),Jz=n(toe,"A",{href:!0});var OTt=s(Jz);$or=r(OTt,"from_config()"),OTt.forEach(t),kor=r(toe,` class
method.`),toe.forEach(t),Sor=i(il),U7=n(il,"P",{});var lVe=s(U7);Ror=r(lVe,"This class cannot be instantiated directly using "),abe=n(lVe,"CODE",{});var VTt=s(abe);Por=r(VTt,"__init__()"),VTt.forEach(t),Bor=r(lVe," (throws an error)."),lVe.forEach(t),Ior=i(il),vt=n(il,"DIV",{class:!0});var q6=s(vt);T(J7.$$.fragment,q6),Nor=i(q6),nbe=n(q6,"P",{});var XTt=s(nbe);qor=r(XTt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),XTt.forEach(t),jor=i(q6),Fd=n(q6,"P",{});var aoe=s(Fd);Dor=r(aoe,`Note:
Loading a model from its configuration file does `),sbe=n(aoe,"STRONG",{});var zTt=s(sbe);Gor=r(zTt,"not"),zTt.forEach(t),Oor=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(aoe,"A",{href:!0});var WTt=s(Yz);Vor=r(WTt,"from_pretrained()"),WTt.forEach(t),Xor=r(aoe," to load the model weights."),aoe.forEach(t),zor=i(q6),T(YT.$$.fragment,q6),q6.forEach(t),Wor=i(il),co=n(il,"DIV",{class:!0});var _a=s(co);T(Y7.$$.fragment,_a),Qor=i(_a),lbe=n(_a,"P",{});var QTt=s(lbe);Hor=r(QTt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),QTt.forEach(t),Uor=i(_a),za=n(_a,"P",{});var j6=s(za);Jor=r(j6,"The model class to instantiate is selected based on the "),ibe=n(j6,"CODE",{});var HTt=s(ibe);Yor=r(HTt,"model_type"),HTt.forEach(t),Kor=r(j6,` property of the config object (either
passed as an argument or loaded from `),dbe=n(j6,"CODE",{});var UTt=s(dbe);Zor=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),err=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(j6,"CODE",{});var JTt=s(cbe);orr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),rrr=r(j6,":"),j6.forEach(t),trr=i(_a),mbe=n(_a,"UL",{});var YTt=s(mbe);KT=n(YTt,"LI",{});var LRe=s(KT);fbe=n(LRe,"STRONG",{});var KTt=s(fbe);arr=r(KTt,"vilt"),KTt.forEach(t),nrr=r(LRe," \u2014 "),Kz=n(LRe,"A",{href:!0});var ZTt=s(Kz);srr=r(ZTt,"ViltForQuestionAnswering"),ZTt.forEach(t),lrr=r(LRe," (ViLT model)"),LRe.forEach(t),YTt.forEach(t),irr=i(_a),ZT=n(_a,"P",{});var xRe=s(ZT);drr=r(xRe,"The model is set in evaluation mode by default using "),gbe=n(xRe,"CODE",{});var eMt=s(gbe);crr=r(eMt,"model.eval()"),eMt.forEach(t),mrr=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hbe=n(xRe,"CODE",{});var oMt=s(hbe);frr=r(oMt,"model.train()"),oMt.forEach(t),xRe.forEach(t),grr=i(_a),T(eM.$$.fragment,_a),_a.forEach(t),il.forEach(t),rGe=i(m),Td=n(m,"H2",{class:!0});var iVe=s(Td);oM=n(iVe,"A",{id:!0,class:!0,href:!0});var rMt=s(oM);ube=n(rMt,"SPAN",{});var tMt=s(ube);T(K7.$$.fragment,tMt),tMt.forEach(t),rMt.forEach(t),hrr=i(iVe),pbe=n(iVe,"SPAN",{});var aMt=s(pbe);urr=r(aMt,"AutoModelForAudioClassification"),aMt.forEach(t),iVe.forEach(t),tGe=i(m),Vo=n(m,"DIV",{class:!0});var dl=s(Vo);T(Z7.$$.fragment,dl),prr=i(dl),Md=n(dl,"P",{});var noe=s(Md);_rr=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Zz=n(noe,"A",{href:!0});var nMt=s(Zz);brr=r(nMt,"from_pretrained()"),nMt.forEach(t),vrr=r(noe," class method or the "),eW=n(noe,"A",{href:!0});var sMt=s(eW);Frr=r(sMt,"from_config()"),sMt.forEach(t),Trr=r(noe,` class
method.`),noe.forEach(t),Mrr=i(dl),e8=n(dl,"P",{});var dVe=s(e8);Err=r(dVe,"This class cannot be instantiated directly using "),_be=n(dVe,"CODE",{});var lMt=s(_be);Crr=r(lMt,"__init__()"),lMt.forEach(t),wrr=r(dVe," (throws an error)."),dVe.forEach(t),Arr=i(dl),Ft=n(dl,"DIV",{class:!0});var D6=s(Ft);T(o8.$$.fragment,D6),yrr=i(D6),bbe=n(D6,"P",{});var iMt=s(bbe);Lrr=r(iMt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),iMt.forEach(t),xrr=i(D6),Ed=n(D6,"P",{});var soe=s(Ed);$rr=r(soe,`Note:
Loading a model from its configuration file does `),vbe=n(soe,"STRONG",{});var dMt=s(vbe);krr=r(dMt,"not"),dMt.forEach(t),Srr=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(soe,"A",{href:!0});var cMt=s(oW);Rrr=r(cMt,"from_pretrained()"),cMt.forEach(t),Prr=r(soe," to load the model weights."),soe.forEach(t),Brr=i(D6),T(rM.$$.fragment,D6),D6.forEach(t),Irr=i(dl),mo=n(dl,"DIV",{class:!0});var ba=s(mo);T(r8.$$.fragment,ba),Nrr=i(ba),Fbe=n(ba,"P",{});var mMt=s(Fbe);qrr=r(mMt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mMt.forEach(t),jrr=i(ba),Wa=n(ba,"P",{});var G6=s(Wa);Drr=r(G6,"The model class to instantiate is selected based on the "),Tbe=n(G6,"CODE",{});var fMt=s(Tbe);Grr=r(fMt,"model_type"),fMt.forEach(t),Orr=r(G6,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(G6,"CODE",{});var gMt=s(Mbe);Vrr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),Xrr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(G6,"CODE",{});var hMt=s(Ebe);zrr=r(hMt,"pretrained_model_name_or_path"),hMt.forEach(t),Wrr=r(G6,":"),G6.forEach(t),Qrr=i(ba),Re=n(ba,"UL",{});var Xe=s(Re);tM=n(Xe,"LI",{});var $Re=s(tM);Cbe=n($Re,"STRONG",{});var uMt=s(Cbe);Hrr=r(uMt,"data2vec-audio"),uMt.forEach(t),Urr=r($Re," \u2014 "),rW=n($Re,"A",{href:!0});var pMt=s(rW);Jrr=r(pMt,"Data2VecAudioForSequenceClassification"),pMt.forEach(t),Yrr=r($Re," (Data2VecAudio model)"),$Re.forEach(t),Krr=i(Xe),aM=n(Xe,"LI",{});var kRe=s(aM);wbe=n(kRe,"STRONG",{});var _Mt=s(wbe);Zrr=r(_Mt,"hubert"),_Mt.forEach(t),etr=r(kRe," \u2014 "),tW=n(kRe,"A",{href:!0});var bMt=s(tW);otr=r(bMt,"HubertForSequenceClassification"),bMt.forEach(t),rtr=r(kRe," (Hubert model)"),kRe.forEach(t),ttr=i(Xe),nM=n(Xe,"LI",{});var SRe=s(nM);Abe=n(SRe,"STRONG",{});var vMt=s(Abe);atr=r(vMt,"sew"),vMt.forEach(t),ntr=r(SRe," \u2014 "),aW=n(SRe,"A",{href:!0});var FMt=s(aW);str=r(FMt,"SEWForSequenceClassification"),FMt.forEach(t),ltr=r(SRe," (SEW model)"),SRe.forEach(t),itr=i(Xe),sM=n(Xe,"LI",{});var RRe=s(sM);ybe=n(RRe,"STRONG",{});var TMt=s(ybe);dtr=r(TMt,"sew-d"),TMt.forEach(t),ctr=r(RRe," \u2014 "),nW=n(RRe,"A",{href:!0});var MMt=s(nW);mtr=r(MMt,"SEWDForSequenceClassification"),MMt.forEach(t),ftr=r(RRe," (SEW-D model)"),RRe.forEach(t),gtr=i(Xe),lM=n(Xe,"LI",{});var PRe=s(lM);Lbe=n(PRe,"STRONG",{});var EMt=s(Lbe);htr=r(EMt,"unispeech"),EMt.forEach(t),utr=r(PRe," \u2014 "),sW=n(PRe,"A",{href:!0});var CMt=s(sW);ptr=r(CMt,"UniSpeechForSequenceClassification"),CMt.forEach(t),_tr=r(PRe," (UniSpeech model)"),PRe.forEach(t),btr=i(Xe),iM=n(Xe,"LI",{});var BRe=s(iM);xbe=n(BRe,"STRONG",{});var wMt=s(xbe);vtr=r(wMt,"unispeech-sat"),wMt.forEach(t),Ftr=r(BRe," \u2014 "),lW=n(BRe,"A",{href:!0});var AMt=s(lW);Ttr=r(AMt,"UniSpeechSatForSequenceClassification"),AMt.forEach(t),Mtr=r(BRe," (UniSpeechSat model)"),BRe.forEach(t),Etr=i(Xe),dM=n(Xe,"LI",{});var IRe=s(dM);$be=n(IRe,"STRONG",{});var yMt=s($be);Ctr=r(yMt,"wav2vec2"),yMt.forEach(t),wtr=r(IRe," \u2014 "),iW=n(IRe,"A",{href:!0});var LMt=s(iW);Atr=r(LMt,"Wav2Vec2ForSequenceClassification"),LMt.forEach(t),ytr=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),Ltr=i(Xe),cM=n(Xe,"LI",{});var NRe=s(cM);kbe=n(NRe,"STRONG",{});var xMt=s(kbe);xtr=r(xMt,"wav2vec2-conformer"),xMt.forEach(t),$tr=r(NRe," \u2014 "),dW=n(NRe,"A",{href:!0});var $Mt=s(dW);ktr=r($Mt,"Wav2Vec2ConformerForSequenceClassification"),$Mt.forEach(t),Str=r(NRe," (Wav2Vec2-Conformer model)"),NRe.forEach(t),Rtr=i(Xe),mM=n(Xe,"LI",{});var qRe=s(mM);Sbe=n(qRe,"STRONG",{});var kMt=s(Sbe);Ptr=r(kMt,"wavlm"),kMt.forEach(t),Btr=r(qRe," \u2014 "),cW=n(qRe,"A",{href:!0});var SMt=s(cW);Itr=r(SMt,"WavLMForSequenceClassification"),SMt.forEach(t),Ntr=r(qRe," (WavLM model)"),qRe.forEach(t),Xe.forEach(t),qtr=i(ba),fM=n(ba,"P",{});var jRe=s(fM);jtr=r(jRe,"The model is set in evaluation mode by default using "),Rbe=n(jRe,"CODE",{});var RMt=s(Rbe);Dtr=r(RMt,"model.eval()"),RMt.forEach(t),Gtr=r(jRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=n(jRe,"CODE",{});var PMt=s(Pbe);Otr=r(PMt,"model.train()"),PMt.forEach(t),jRe.forEach(t),Vtr=i(ba),T(gM.$$.fragment,ba),ba.forEach(t),dl.forEach(t),aGe=i(m),Cd=n(m,"H2",{class:!0});var cVe=s(Cd);hM=n(cVe,"A",{id:!0,class:!0,href:!0});var BMt=s(hM);Bbe=n(BMt,"SPAN",{});var IMt=s(Bbe);T(t8.$$.fragment,IMt),IMt.forEach(t),BMt.forEach(t),Xtr=i(cVe),Ibe=n(cVe,"SPAN",{});var NMt=s(Ibe);ztr=r(NMt,"AutoModelForAudioFrameClassification"),NMt.forEach(t),cVe.forEach(t),nGe=i(m),Xo=n(m,"DIV",{class:!0});var cl=s(Xo);T(a8.$$.fragment,cl),Wtr=i(cl),wd=n(cl,"P",{});var loe=s(wd);Qtr=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),mW=n(loe,"A",{href:!0});var qMt=s(mW);Htr=r(qMt,"from_pretrained()"),qMt.forEach(t),Utr=r(loe," class method or the "),fW=n(loe,"A",{href:!0});var jMt=s(fW);Jtr=r(jMt,"from_config()"),jMt.forEach(t),Ytr=r(loe,` class
method.`),loe.forEach(t),Ktr=i(cl),n8=n(cl,"P",{});var mVe=s(n8);Ztr=r(mVe,"This class cannot be instantiated directly using "),Nbe=n(mVe,"CODE",{});var DMt=s(Nbe);ear=r(DMt,"__init__()"),DMt.forEach(t),oar=r(mVe," (throws an error)."),mVe.forEach(t),rar=i(cl),Tt=n(cl,"DIV",{class:!0});var O6=s(Tt);T(s8.$$.fragment,O6),tar=i(O6),qbe=n(O6,"P",{});var GMt=s(qbe);aar=r(GMt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),GMt.forEach(t),nar=i(O6),Ad=n(O6,"P",{});var ioe=s(Ad);sar=r(ioe,`Note:
Loading a model from its configuration file does `),jbe=n(ioe,"STRONG",{});var OMt=s(jbe);lar=r(OMt,"not"),OMt.forEach(t),iar=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(ioe,"A",{href:!0});var VMt=s(gW);dar=r(VMt,"from_pretrained()"),VMt.forEach(t),car=r(ioe," to load the model weights."),ioe.forEach(t),mar=i(O6),T(uM.$$.fragment,O6),O6.forEach(t),far=i(cl),fo=n(cl,"DIV",{class:!0});var va=s(fo);T(l8.$$.fragment,va),gar=i(va),Dbe=n(va,"P",{});var XMt=s(Dbe);har=r(XMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),XMt.forEach(t),uar=i(va),Qa=n(va,"P",{});var V6=s(Qa);par=r(V6,"The model class to instantiate is selected based on the "),Gbe=n(V6,"CODE",{});var zMt=s(Gbe);_ar=r(zMt,"model_type"),zMt.forEach(t),bar=r(V6,` property of the config object (either
passed as an argument or loaded from `),Obe=n(V6,"CODE",{});var WMt=s(Obe);Far=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),Tar=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(V6,"CODE",{});var QMt=s(Vbe);Mar=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),Ear=r(V6,":"),V6.forEach(t),Car=i(va),et=n(va,"UL",{});var ml=s(et);pM=n(ml,"LI",{});var DRe=s(pM);Xbe=n(DRe,"STRONG",{});var HMt=s(Xbe);war=r(HMt,"data2vec-audio"),HMt.forEach(t),Aar=r(DRe," \u2014 "),hW=n(DRe,"A",{href:!0});var UMt=s(hW);yar=r(UMt,"Data2VecAudioForAudioFrameClassification"),UMt.forEach(t),Lar=r(DRe," (Data2VecAudio model)"),DRe.forEach(t),xar=i(ml),_M=n(ml,"LI",{});var GRe=s(_M);zbe=n(GRe,"STRONG",{});var JMt=s(zbe);$ar=r(JMt,"unispeech-sat"),JMt.forEach(t),kar=r(GRe," \u2014 "),uW=n(GRe,"A",{href:!0});var YMt=s(uW);Sar=r(YMt,"UniSpeechSatForAudioFrameClassification"),YMt.forEach(t),Rar=r(GRe," (UniSpeechSat model)"),GRe.forEach(t),Par=i(ml),bM=n(ml,"LI",{});var ORe=s(bM);Wbe=n(ORe,"STRONG",{});var KMt=s(Wbe);Bar=r(KMt,"wav2vec2"),KMt.forEach(t),Iar=r(ORe," \u2014 "),pW=n(ORe,"A",{href:!0});var ZMt=s(pW);Nar=r(ZMt,"Wav2Vec2ForAudioFrameClassification"),ZMt.forEach(t),qar=r(ORe," (Wav2Vec2 model)"),ORe.forEach(t),jar=i(ml),vM=n(ml,"LI",{});var VRe=s(vM);Qbe=n(VRe,"STRONG",{});var e4t=s(Qbe);Dar=r(e4t,"wav2vec2-conformer"),e4t.forEach(t),Gar=r(VRe," \u2014 "),_W=n(VRe,"A",{href:!0});var o4t=s(_W);Oar=r(o4t,"Wav2Vec2ConformerForAudioFrameClassification"),o4t.forEach(t),Var=r(VRe," (Wav2Vec2-Conformer model)"),VRe.forEach(t),Xar=i(ml),FM=n(ml,"LI",{});var XRe=s(FM);Hbe=n(XRe,"STRONG",{});var r4t=s(Hbe);zar=r(r4t,"wavlm"),r4t.forEach(t),War=r(XRe," \u2014 "),bW=n(XRe,"A",{href:!0});var t4t=s(bW);Qar=r(t4t,"WavLMForAudioFrameClassification"),t4t.forEach(t),Har=r(XRe," (WavLM model)"),XRe.forEach(t),ml.forEach(t),Uar=i(va),TM=n(va,"P",{});var zRe=s(TM);Jar=r(zRe,"The model is set in evaluation mode by default using "),Ube=n(zRe,"CODE",{});var a4t=s(Ube);Yar=r(a4t,"model.eval()"),a4t.forEach(t),Kar=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(zRe,"CODE",{});var n4t=s(Jbe);Zar=r(n4t,"model.train()"),n4t.forEach(t),zRe.forEach(t),enr=i(va),T(MM.$$.fragment,va),va.forEach(t),cl.forEach(t),sGe=i(m),yd=n(m,"H2",{class:!0});var fVe=s(yd);EM=n(fVe,"A",{id:!0,class:!0,href:!0});var s4t=s(EM);Ybe=n(s4t,"SPAN",{});var l4t=s(Ybe);T(i8.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),onr=i(fVe),Kbe=n(fVe,"SPAN",{});var i4t=s(Kbe);rnr=r(i4t,"AutoModelForCTC"),i4t.forEach(t),fVe.forEach(t),lGe=i(m),zo=n(m,"DIV",{class:!0});var fl=s(zo);T(d8.$$.fragment,fl),tnr=i(fl),Ld=n(fl,"P",{});var doe=s(Ld);anr=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vW=n(doe,"A",{href:!0});var d4t=s(vW);nnr=r(d4t,"from_pretrained()"),d4t.forEach(t),snr=r(doe," class method or the "),FW=n(doe,"A",{href:!0});var c4t=s(FW);lnr=r(c4t,"from_config()"),c4t.forEach(t),inr=r(doe,` class
method.`),doe.forEach(t),dnr=i(fl),c8=n(fl,"P",{});var gVe=s(c8);cnr=r(gVe,"This class cannot be instantiated directly using "),Zbe=n(gVe,"CODE",{});var m4t=s(Zbe);mnr=r(m4t,"__init__()"),m4t.forEach(t),fnr=r(gVe," (throws an error)."),gVe.forEach(t),gnr=i(fl),Mt=n(fl,"DIV",{class:!0});var X6=s(Mt);T(m8.$$.fragment,X6),hnr=i(X6),e2e=n(X6,"P",{});var f4t=s(e2e);unr=r(f4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),f4t.forEach(t),pnr=i(X6),xd=n(X6,"P",{});var coe=s(xd);_nr=r(coe,`Note:
Loading a model from its configuration file does `),o2e=n(coe,"STRONG",{});var g4t=s(o2e);bnr=r(g4t,"not"),g4t.forEach(t),vnr=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(coe,"A",{href:!0});var h4t=s(TW);Fnr=r(h4t,"from_pretrained()"),h4t.forEach(t),Tnr=r(coe," to load the model weights."),coe.forEach(t),Mnr=i(X6),T(CM.$$.fragment,X6),X6.forEach(t),Enr=i(fl),go=n(fl,"DIV",{class:!0});var Fa=s(go);T(f8.$$.fragment,Fa),Cnr=i(Fa),r2e=n(Fa,"P",{});var u4t=s(r2e);wnr=r(u4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),u4t.forEach(t),Anr=i(Fa),Ha=n(Fa,"P",{});var z6=s(Ha);ynr=r(z6,"The model class to instantiate is selected based on the "),t2e=n(z6,"CODE",{});var p4t=s(t2e);Lnr=r(p4t,"model_type"),p4t.forEach(t),xnr=r(z6,` property of the config object (either
passed as an argument or loaded from `),a2e=n(z6,"CODE",{});var _4t=s(a2e);$nr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),knr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(z6,"CODE",{});var b4t=s(n2e);Snr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),Rnr=r(z6,":"),z6.forEach(t),Pnr=i(Fa),ye=n(Fa,"UL",{});var Be=s(ye);wM=n(Be,"LI",{});var WRe=s(wM);s2e=n(WRe,"STRONG",{});var v4t=s(s2e);Bnr=r(v4t,"data2vec-audio"),v4t.forEach(t),Inr=r(WRe," \u2014 "),MW=n(WRe,"A",{href:!0});var F4t=s(MW);Nnr=r(F4t,"Data2VecAudioForCTC"),F4t.forEach(t),qnr=r(WRe," (Data2VecAudio model)"),WRe.forEach(t),jnr=i(Be),AM=n(Be,"LI",{});var QRe=s(AM);l2e=n(QRe,"STRONG",{});var T4t=s(l2e);Dnr=r(T4t,"hubert"),T4t.forEach(t),Gnr=r(QRe," \u2014 "),EW=n(QRe,"A",{href:!0});var M4t=s(EW);Onr=r(M4t,"HubertForCTC"),M4t.forEach(t),Vnr=r(QRe," (Hubert model)"),QRe.forEach(t),Xnr=i(Be),yM=n(Be,"LI",{});var HRe=s(yM);i2e=n(HRe,"STRONG",{});var E4t=s(i2e);znr=r(E4t,"mctct"),E4t.forEach(t),Wnr=r(HRe," \u2014 "),CW=n(HRe,"A",{href:!0});var C4t=s(CW);Qnr=r(C4t,"MCTCTForCTC"),C4t.forEach(t),Hnr=r(HRe," (M-CTC-T model)"),HRe.forEach(t),Unr=i(Be),LM=n(Be,"LI",{});var URe=s(LM);d2e=n(URe,"STRONG",{});var w4t=s(d2e);Jnr=r(w4t,"sew"),w4t.forEach(t),Ynr=r(URe," \u2014 "),wW=n(URe,"A",{href:!0});var A4t=s(wW);Knr=r(A4t,"SEWForCTC"),A4t.forEach(t),Znr=r(URe," (SEW model)"),URe.forEach(t),esr=i(Be),xM=n(Be,"LI",{});var JRe=s(xM);c2e=n(JRe,"STRONG",{});var y4t=s(c2e);osr=r(y4t,"sew-d"),y4t.forEach(t),rsr=r(JRe," \u2014 "),AW=n(JRe,"A",{href:!0});var L4t=s(AW);tsr=r(L4t,"SEWDForCTC"),L4t.forEach(t),asr=r(JRe," (SEW-D model)"),JRe.forEach(t),nsr=i(Be),$M=n(Be,"LI",{});var YRe=s($M);m2e=n(YRe,"STRONG",{});var x4t=s(m2e);ssr=r(x4t,"unispeech"),x4t.forEach(t),lsr=r(YRe," \u2014 "),yW=n(YRe,"A",{href:!0});var $4t=s(yW);isr=r($4t,"UniSpeechForCTC"),$4t.forEach(t),dsr=r(YRe," (UniSpeech model)"),YRe.forEach(t),csr=i(Be),kM=n(Be,"LI",{});var KRe=s(kM);f2e=n(KRe,"STRONG",{});var k4t=s(f2e);msr=r(k4t,"unispeech-sat"),k4t.forEach(t),fsr=r(KRe," \u2014 "),LW=n(KRe,"A",{href:!0});var S4t=s(LW);gsr=r(S4t,"UniSpeechSatForCTC"),S4t.forEach(t),hsr=r(KRe," (UniSpeechSat model)"),KRe.forEach(t),usr=i(Be),SM=n(Be,"LI",{});var ZRe=s(SM);g2e=n(ZRe,"STRONG",{});var R4t=s(g2e);psr=r(R4t,"wav2vec2"),R4t.forEach(t),_sr=r(ZRe," \u2014 "),xW=n(ZRe,"A",{href:!0});var P4t=s(xW);bsr=r(P4t,"Wav2Vec2ForCTC"),P4t.forEach(t),vsr=r(ZRe," (Wav2Vec2 model)"),ZRe.forEach(t),Fsr=i(Be),RM=n(Be,"LI",{});var ePe=s(RM);h2e=n(ePe,"STRONG",{});var B4t=s(h2e);Tsr=r(B4t,"wav2vec2-conformer"),B4t.forEach(t),Msr=r(ePe," \u2014 "),$W=n(ePe,"A",{href:!0});var I4t=s($W);Esr=r(I4t,"Wav2Vec2ConformerForCTC"),I4t.forEach(t),Csr=r(ePe," (Wav2Vec2-Conformer model)"),ePe.forEach(t),wsr=i(Be),PM=n(Be,"LI",{});var oPe=s(PM);u2e=n(oPe,"STRONG",{});var N4t=s(u2e);Asr=r(N4t,"wavlm"),N4t.forEach(t),ysr=r(oPe," \u2014 "),kW=n(oPe,"A",{href:!0});var q4t=s(kW);Lsr=r(q4t,"WavLMForCTC"),q4t.forEach(t),xsr=r(oPe," (WavLM model)"),oPe.forEach(t),Be.forEach(t),$sr=i(Fa),BM=n(Fa,"P",{});var rPe=s(BM);ksr=r(rPe,"The model is set in evaluation mode by default using "),p2e=n(rPe,"CODE",{});var j4t=s(p2e);Ssr=r(j4t,"model.eval()"),j4t.forEach(t),Rsr=r(rPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(rPe,"CODE",{});var D4t=s(_2e);Psr=r(D4t,"model.train()"),D4t.forEach(t),rPe.forEach(t),Bsr=i(Fa),T(IM.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),iGe=i(m),$d=n(m,"H2",{class:!0});var hVe=s($d);NM=n(hVe,"A",{id:!0,class:!0,href:!0});var G4t=s(NM);b2e=n(G4t,"SPAN",{});var O4t=s(b2e);T(g8.$$.fragment,O4t),O4t.forEach(t),G4t.forEach(t),Isr=i(hVe),v2e=n(hVe,"SPAN",{});var V4t=s(v2e);Nsr=r(V4t,"AutoModelForSpeechSeq2Seq"),V4t.forEach(t),hVe.forEach(t),dGe=i(m),Wo=n(m,"DIV",{class:!0});var gl=s(Wo);T(h8.$$.fragment,gl),qsr=i(gl),kd=n(gl,"P",{});var moe=s(kd);jsr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),SW=n(moe,"A",{href:!0});var X4t=s(SW);Dsr=r(X4t,"from_pretrained()"),X4t.forEach(t),Gsr=r(moe," class method or the "),RW=n(moe,"A",{href:!0});var z4t=s(RW);Osr=r(z4t,"from_config()"),z4t.forEach(t),Vsr=r(moe,` class
method.`),moe.forEach(t),Xsr=i(gl),u8=n(gl,"P",{});var uVe=s(u8);zsr=r(uVe,"This class cannot be instantiated directly using "),F2e=n(uVe,"CODE",{});var W4t=s(F2e);Wsr=r(W4t,"__init__()"),W4t.forEach(t),Qsr=r(uVe," (throws an error)."),uVe.forEach(t),Hsr=i(gl),Et=n(gl,"DIV",{class:!0});var W6=s(Et);T(p8.$$.fragment,W6),Usr=i(W6),T2e=n(W6,"P",{});var Q4t=s(T2e);Jsr=r(Q4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Q4t.forEach(t),Ysr=i(W6),Sd=n(W6,"P",{});var foe=s(Sd);Ksr=r(foe,`Note:
Loading a model from its configuration file does `),M2e=n(foe,"STRONG",{});var H4t=s(M2e);Zsr=r(H4t,"not"),H4t.forEach(t),elr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(foe,"A",{href:!0});var U4t=s(PW);olr=r(U4t,"from_pretrained()"),U4t.forEach(t),rlr=r(foe," to load the model weights."),foe.forEach(t),tlr=i(W6),T(qM.$$.fragment,W6),W6.forEach(t),alr=i(gl),ho=n(gl,"DIV",{class:!0});var Ta=s(ho);T(_8.$$.fragment,Ta),nlr=i(Ta),E2e=n(Ta,"P",{});var J4t=s(E2e);slr=r(J4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),J4t.forEach(t),llr=i(Ta),Ua=n(Ta,"P",{});var Q6=s(Ua);ilr=r(Q6,"The model class to instantiate is selected based on the "),C2e=n(Q6,"CODE",{});var Y4t=s(C2e);dlr=r(Y4t,"model_type"),Y4t.forEach(t),clr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),w2e=n(Q6,"CODE",{});var K4t=s(w2e);mlr=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),flr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(Q6,"CODE",{});var Z4t=s(A2e);glr=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),hlr=r(Q6,":"),Q6.forEach(t),ulr=i(Ta),b8=n(Ta,"UL",{});var pVe=s(b8);jM=n(pVe,"LI",{});var tPe=s(jM);y2e=n(tPe,"STRONG",{});var eEt=s(y2e);plr=r(eEt,"speech-encoder-decoder"),eEt.forEach(t),_lr=r(tPe," \u2014 "),BW=n(tPe,"A",{href:!0});var oEt=s(BW);blr=r(oEt,"SpeechEncoderDecoderModel"),oEt.forEach(t),vlr=r(tPe," (Speech Encoder decoder model)"),tPe.forEach(t),Flr=i(pVe),DM=n(pVe,"LI",{});var aPe=s(DM);L2e=n(aPe,"STRONG",{});var rEt=s(L2e);Tlr=r(rEt,"speech_to_text"),rEt.forEach(t),Mlr=r(aPe," \u2014 "),IW=n(aPe,"A",{href:!0});var tEt=s(IW);Elr=r(tEt,"Speech2TextForConditionalGeneration"),tEt.forEach(t),Clr=r(aPe," (Speech2Text model)"),aPe.forEach(t),pVe.forEach(t),wlr=i(Ta),GM=n(Ta,"P",{});var nPe=s(GM);Alr=r(nPe,"The model is set in evaluation mode by default using "),x2e=n(nPe,"CODE",{});var aEt=s(x2e);ylr=r(aEt,"model.eval()"),aEt.forEach(t),Llr=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(nPe,"CODE",{});var nEt=s($2e);xlr=r(nEt,"model.train()"),nEt.forEach(t),nPe.forEach(t),$lr=i(Ta),T(OM.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),cGe=i(m),Rd=n(m,"H2",{class:!0});var _Ve=s(Rd);VM=n(_Ve,"A",{id:!0,class:!0,href:!0});var sEt=s(VM);k2e=n(sEt,"SPAN",{});var lEt=s(k2e);T(v8.$$.fragment,lEt),lEt.forEach(t),sEt.forEach(t),klr=i(_Ve),S2e=n(_Ve,"SPAN",{});var iEt=s(S2e);Slr=r(iEt,"AutoModelForAudioXVector"),iEt.forEach(t),_Ve.forEach(t),mGe=i(m),Qo=n(m,"DIV",{class:!0});var hl=s(Qo);T(F8.$$.fragment,hl),Rlr=i(hl),Pd=n(hl,"P",{});var goe=s(Pd);Plr=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),NW=n(goe,"A",{href:!0});var dEt=s(NW);Blr=r(dEt,"from_pretrained()"),dEt.forEach(t),Ilr=r(goe," class method or the "),qW=n(goe,"A",{href:!0});var cEt=s(qW);Nlr=r(cEt,"from_config()"),cEt.forEach(t),qlr=r(goe,` class
method.`),goe.forEach(t),jlr=i(hl),T8=n(hl,"P",{});var bVe=s(T8);Dlr=r(bVe,"This class cannot be instantiated directly using "),R2e=n(bVe,"CODE",{});var mEt=s(R2e);Glr=r(mEt,"__init__()"),mEt.forEach(t),Olr=r(bVe," (throws an error)."),bVe.forEach(t),Vlr=i(hl),Ct=n(hl,"DIV",{class:!0});var H6=s(Ct);T(M8.$$.fragment,H6),Xlr=i(H6),P2e=n(H6,"P",{});var fEt=s(P2e);zlr=r(fEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fEt.forEach(t),Wlr=i(H6),Bd=n(H6,"P",{});var hoe=s(Bd);Qlr=r(hoe,`Note:
Loading a model from its configuration file does `),B2e=n(hoe,"STRONG",{});var gEt=s(B2e);Hlr=r(gEt,"not"),gEt.forEach(t),Ulr=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(hoe,"A",{href:!0});var hEt=s(jW);Jlr=r(hEt,"from_pretrained()"),hEt.forEach(t),Ylr=r(hoe," to load the model weights."),hoe.forEach(t),Klr=i(H6),T(XM.$$.fragment,H6),H6.forEach(t),Zlr=i(hl),uo=n(hl,"DIV",{class:!0});var Ma=s(uo);T(E8.$$.fragment,Ma),eir=i(Ma),I2e=n(Ma,"P",{});var uEt=s(I2e);oir=r(uEt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uEt.forEach(t),rir=i(Ma),Ja=n(Ma,"P",{});var U6=s(Ja);tir=r(U6,"The model class to instantiate is selected based on the "),N2e=n(U6,"CODE",{});var pEt=s(N2e);air=r(pEt,"model_type"),pEt.forEach(t),nir=r(U6,` property of the config object (either
passed as an argument or loaded from `),q2e=n(U6,"CODE",{});var _Et=s(q2e);sir=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),lir=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(U6,"CODE",{});var bEt=s(j2e);iir=r(bEt,"pretrained_model_name_or_path"),bEt.forEach(t),dir=r(U6,":"),U6.forEach(t),cir=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);zM=n(ul,"LI",{});var sPe=s(zM);D2e=n(sPe,"STRONG",{});var vEt=s(D2e);mir=r(vEt,"data2vec-audio"),vEt.forEach(t),fir=r(sPe," \u2014 "),DW=n(sPe,"A",{href:!0});var FEt=s(DW);gir=r(FEt,"Data2VecAudioForXVector"),FEt.forEach(t),hir=r(sPe," (Data2VecAudio model)"),sPe.forEach(t),uir=i(ul),WM=n(ul,"LI",{});var lPe=s(WM);G2e=n(lPe,"STRONG",{});var TEt=s(G2e);pir=r(TEt,"unispeech-sat"),TEt.forEach(t),_ir=r(lPe," \u2014 "),GW=n(lPe,"A",{href:!0});var MEt=s(GW);bir=r(MEt,"UniSpeechSatForXVector"),MEt.forEach(t),vir=r(lPe," (UniSpeechSat model)"),lPe.forEach(t),Fir=i(ul),QM=n(ul,"LI",{});var iPe=s(QM);O2e=n(iPe,"STRONG",{});var EEt=s(O2e);Tir=r(EEt,"wav2vec2"),EEt.forEach(t),Mir=r(iPe," \u2014 "),OW=n(iPe,"A",{href:!0});var CEt=s(OW);Eir=r(CEt,"Wav2Vec2ForXVector"),CEt.forEach(t),Cir=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),wir=i(ul),HM=n(ul,"LI",{});var dPe=s(HM);V2e=n(dPe,"STRONG",{});var wEt=s(V2e);Air=r(wEt,"wav2vec2-conformer"),wEt.forEach(t),yir=r(dPe," \u2014 "),VW=n(dPe,"A",{href:!0});var AEt=s(VW);Lir=r(AEt,"Wav2Vec2ConformerForXVector"),AEt.forEach(t),xir=r(dPe," (Wav2Vec2-Conformer model)"),dPe.forEach(t),$ir=i(ul),UM=n(ul,"LI",{});var cPe=s(UM);X2e=n(cPe,"STRONG",{});var yEt=s(X2e);kir=r(yEt,"wavlm"),yEt.forEach(t),Sir=r(cPe," \u2014 "),XW=n(cPe,"A",{href:!0});var LEt=s(XW);Rir=r(LEt,"WavLMForXVector"),LEt.forEach(t),Pir=r(cPe," (WavLM model)"),cPe.forEach(t),ul.forEach(t),Bir=i(Ma),JM=n(Ma,"P",{});var mPe=s(JM);Iir=r(mPe,"The model is set in evaluation mode by default using "),z2e=n(mPe,"CODE",{});var xEt=s(z2e);Nir=r(xEt,"model.eval()"),xEt.forEach(t),qir=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W2e=n(mPe,"CODE",{});var $Et=s(W2e);jir=r($Et,"model.train()"),$Et.forEach(t),mPe.forEach(t),Dir=i(Ma),T(YM.$$.fragment,Ma),Ma.forEach(t),hl.forEach(t),fGe=i(m),Id=n(m,"H2",{class:!0});var vVe=s(Id);KM=n(vVe,"A",{id:!0,class:!0,href:!0});var kEt=s(KM);Q2e=n(kEt,"SPAN",{});var SEt=s(Q2e);T(C8.$$.fragment,SEt),SEt.forEach(t),kEt.forEach(t),Gir=i(vVe),H2e=n(vVe,"SPAN",{});var REt=s(H2e);Oir=r(REt,"AutoModelForMaskedImageModeling"),REt.forEach(t),vVe.forEach(t),gGe=i(m),Ho=n(m,"DIV",{class:!0});var pl=s(Ho);T(w8.$$.fragment,pl),Vir=i(pl),Nd=n(pl,"P",{});var uoe=s(Nd);Xir=r(uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),zW=n(uoe,"A",{href:!0});var PEt=s(zW);zir=r(PEt,"from_pretrained()"),PEt.forEach(t),Wir=r(uoe," class method or the "),WW=n(uoe,"A",{href:!0});var BEt=s(WW);Qir=r(BEt,"from_config()"),BEt.forEach(t),Hir=r(uoe,` class
method.`),uoe.forEach(t),Uir=i(pl),A8=n(pl,"P",{});var FVe=s(A8);Jir=r(FVe,"This class cannot be instantiated directly using "),U2e=n(FVe,"CODE",{});var IEt=s(U2e);Yir=r(IEt,"__init__()"),IEt.forEach(t),Kir=r(FVe," (throws an error)."),FVe.forEach(t),Zir=i(pl),wt=n(pl,"DIV",{class:!0});var J6=s(wt);T(y8.$$.fragment,J6),edr=i(J6),J2e=n(J6,"P",{});var NEt=s(J2e);odr=r(NEt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NEt.forEach(t),rdr=i(J6),qd=n(J6,"P",{});var poe=s(qd);tdr=r(poe,`Note:
Loading a model from its configuration file does `),Y2e=n(poe,"STRONG",{});var qEt=s(Y2e);adr=r(qEt,"not"),qEt.forEach(t),ndr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(poe,"A",{href:!0});var jEt=s(QW);sdr=r(jEt,"from_pretrained()"),jEt.forEach(t),ldr=r(poe," to load the model weights."),poe.forEach(t),idr=i(J6),T(ZM.$$.fragment,J6),J6.forEach(t),ddr=i(pl),po=n(pl,"DIV",{class:!0});var Ea=s(po);T(L8.$$.fragment,Ea),cdr=i(Ea),K2e=n(Ea,"P",{});var DEt=s(K2e);mdr=r(DEt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),DEt.forEach(t),fdr=i(Ea),Ya=n(Ea,"P",{});var Y6=s(Ya);gdr=r(Y6,"The model class to instantiate is selected based on the "),Z2e=n(Y6,"CODE",{});var GEt=s(Z2e);hdr=r(GEt,"model_type"),GEt.forEach(t),udr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),eve=n(Y6,"CODE",{});var OEt=s(eve);pdr=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),_dr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(Y6,"CODE",{});var VEt=s(ove);bdr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),vdr=r(Y6,":"),Y6.forEach(t),Fdr=i(Ea),jd=n(Ea,"UL",{});var _oe=s(jd);e4=n(_oe,"LI",{});var fPe=s(e4);rve=n(fPe,"STRONG",{});var XEt=s(rve);Tdr=r(XEt,"deit"),XEt.forEach(t),Mdr=r(fPe," \u2014 "),HW=n(fPe,"A",{href:!0});var zEt=s(HW);Edr=r(zEt,"DeiTForMaskedImageModeling"),zEt.forEach(t),Cdr=r(fPe," (DeiT model)"),fPe.forEach(t),wdr=i(_oe),o4=n(_oe,"LI",{});var gPe=s(o4);tve=n(gPe,"STRONG",{});var WEt=s(tve);Adr=r(WEt,"swin"),WEt.forEach(t),ydr=r(gPe," \u2014 "),UW=n(gPe,"A",{href:!0});var QEt=s(UW);Ldr=r(QEt,"SwinForMaskedImageModeling"),QEt.forEach(t),xdr=r(gPe," (Swin Transformer model)"),gPe.forEach(t),$dr=i(_oe),r4=n(_oe,"LI",{});var hPe=s(r4);ave=n(hPe,"STRONG",{});var HEt=s(ave);kdr=r(HEt,"vit"),HEt.forEach(t),Sdr=r(hPe," \u2014 "),JW=n(hPe,"A",{href:!0});var UEt=s(JW);Rdr=r(UEt,"ViTForMaskedImageModeling"),UEt.forEach(t),Pdr=r(hPe," (ViT model)"),hPe.forEach(t),_oe.forEach(t),Bdr=i(Ea),t4=n(Ea,"P",{});var uPe=s(t4);Idr=r(uPe,"The model is set in evaluation mode by default using "),nve=n(uPe,"CODE",{});var JEt=s(nve);Ndr=r(JEt,"model.eval()"),JEt.forEach(t),qdr=r(uPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sve=n(uPe,"CODE",{});var YEt=s(sve);jdr=r(YEt,"model.train()"),YEt.forEach(t),uPe.forEach(t),Ddr=i(Ea),T(a4.$$.fragment,Ea),Ea.forEach(t),pl.forEach(t),hGe=i(m),Dd=n(m,"H2",{class:!0});var TVe=s(Dd);n4=n(TVe,"A",{id:!0,class:!0,href:!0});var KEt=s(n4);lve=n(KEt,"SPAN",{});var ZEt=s(lve);T(x8.$$.fragment,ZEt),ZEt.forEach(t),KEt.forEach(t),Gdr=i(TVe),ive=n(TVe,"SPAN",{});var eCt=s(ive);Odr=r(eCt,"AutoModelForObjectDetection"),eCt.forEach(t),TVe.forEach(t),uGe=i(m),Uo=n(m,"DIV",{class:!0});var _l=s(Uo);T($8.$$.fragment,_l),Vdr=i(_l),Gd=n(_l,"P",{});var boe=s(Gd);Xdr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),YW=n(boe,"A",{href:!0});var oCt=s(YW);zdr=r(oCt,"from_pretrained()"),oCt.forEach(t),Wdr=r(boe," class method or the "),KW=n(boe,"A",{href:!0});var rCt=s(KW);Qdr=r(rCt,"from_config()"),rCt.forEach(t),Hdr=r(boe,` class
method.`),boe.forEach(t),Udr=i(_l),k8=n(_l,"P",{});var MVe=s(k8);Jdr=r(MVe,"This class cannot be instantiated directly using "),dve=n(MVe,"CODE",{});var tCt=s(dve);Ydr=r(tCt,"__init__()"),tCt.forEach(t),Kdr=r(MVe," (throws an error)."),MVe.forEach(t),Zdr=i(_l),At=n(_l,"DIV",{class:!0});var K6=s(At);T(S8.$$.fragment,K6),ecr=i(K6),cve=n(K6,"P",{});var aCt=s(cve);ocr=r(aCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aCt.forEach(t),rcr=i(K6),Od=n(K6,"P",{});var voe=s(Od);tcr=r(voe,`Note:
Loading a model from its configuration file does `),mve=n(voe,"STRONG",{});var nCt=s(mve);acr=r(nCt,"not"),nCt.forEach(t),ncr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(voe,"A",{href:!0});var sCt=s(ZW);scr=r(sCt,"from_pretrained()"),sCt.forEach(t),lcr=r(voe," to load the model weights."),voe.forEach(t),icr=i(K6),T(s4.$$.fragment,K6),K6.forEach(t),dcr=i(_l),_o=n(_l,"DIV",{class:!0});var Ca=s(_o);T(R8.$$.fragment,Ca),ccr=i(Ca),fve=n(Ca,"P",{});var lCt=s(fve);mcr=r(lCt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lCt.forEach(t),fcr=i(Ca),Ka=n(Ca,"P",{});var Z6=s(Ka);gcr=r(Z6,"The model class to instantiate is selected based on the "),gve=n(Z6,"CODE",{});var iCt=s(gve);hcr=r(iCt,"model_type"),iCt.forEach(t),ucr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),hve=n(Z6,"CODE",{});var dCt=s(hve);pcr=r(dCt,"pretrained_model_name_or_path"),dCt.forEach(t),_cr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(Z6,"CODE",{});var cCt=s(uve);bcr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),vcr=r(Z6,":"),Z6.forEach(t),Fcr=i(Ca),P8=n(Ca,"UL",{});var EVe=s(P8);l4=n(EVe,"LI",{});var pPe=s(l4);pve=n(pPe,"STRONG",{});var mCt=s(pve);Tcr=r(mCt,"detr"),mCt.forEach(t),Mcr=r(pPe," \u2014 "),eQ=n(pPe,"A",{href:!0});var fCt=s(eQ);Ecr=r(fCt,"DetrForObjectDetection"),fCt.forEach(t),Ccr=r(pPe," (DETR model)"),pPe.forEach(t),wcr=i(EVe),i4=n(EVe,"LI",{});var _Pe=s(i4);_ve=n(_Pe,"STRONG",{});var gCt=s(_ve);Acr=r(gCt,"yolos"),gCt.forEach(t),ycr=r(_Pe," \u2014 "),oQ=n(_Pe,"A",{href:!0});var hCt=s(oQ);Lcr=r(hCt,"YolosForObjectDetection"),hCt.forEach(t),xcr=r(_Pe," (YOLOS model)"),_Pe.forEach(t),EVe.forEach(t),$cr=i(Ca),d4=n(Ca,"P",{});var bPe=s(d4);kcr=r(bPe,"The model is set in evaluation mode by default using "),bve=n(bPe,"CODE",{});var uCt=s(bve);Scr=r(uCt,"model.eval()"),uCt.forEach(t),Rcr=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=n(bPe,"CODE",{});var pCt=s(vve);Pcr=r(pCt,"model.train()"),pCt.forEach(t),bPe.forEach(t),Bcr=i(Ca),T(c4.$$.fragment,Ca),Ca.forEach(t),_l.forEach(t),pGe=i(m),Vd=n(m,"H2",{class:!0});var CVe=s(Vd);m4=n(CVe,"A",{id:!0,class:!0,href:!0});var _Ct=s(m4);Fve=n(_Ct,"SPAN",{});var bCt=s(Fve);T(B8.$$.fragment,bCt),bCt.forEach(t),_Ct.forEach(t),Icr=i(CVe),Tve=n(CVe,"SPAN",{});var vCt=s(Tve);Ncr=r(vCt,"AutoModelForImageSegmentation"),vCt.forEach(t),CVe.forEach(t),_Ge=i(m),Jo=n(m,"DIV",{class:!0});var bl=s(Jo);T(I8.$$.fragment,bl),qcr=i(bl),Xd=n(bl,"P",{});var Foe=s(Xd);jcr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rQ=n(Foe,"A",{href:!0});var FCt=s(rQ);Dcr=r(FCt,"from_pretrained()"),FCt.forEach(t),Gcr=r(Foe," class method or the "),tQ=n(Foe,"A",{href:!0});var TCt=s(tQ);Ocr=r(TCt,"from_config()"),TCt.forEach(t),Vcr=r(Foe,` class
method.`),Foe.forEach(t),Xcr=i(bl),N8=n(bl,"P",{});var wVe=s(N8);zcr=r(wVe,"This class cannot be instantiated directly using "),Mve=n(wVe,"CODE",{});var MCt=s(Mve);Wcr=r(MCt,"__init__()"),MCt.forEach(t),Qcr=r(wVe," (throws an error)."),wVe.forEach(t),Hcr=i(bl),yt=n(bl,"DIV",{class:!0});var ey=s(yt);T(q8.$$.fragment,ey),Ucr=i(ey),Eve=n(ey,"P",{});var ECt=s(Eve);Jcr=r(ECt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ECt.forEach(t),Ycr=i(ey),zd=n(ey,"P",{});var Toe=s(zd);Kcr=r(Toe,`Note:
Loading a model from its configuration file does `),Cve=n(Toe,"STRONG",{});var CCt=s(Cve);Zcr=r(CCt,"not"),CCt.forEach(t),emr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(Toe,"A",{href:!0});var wCt=s(aQ);omr=r(wCt,"from_pretrained()"),wCt.forEach(t),rmr=r(Toe," to load the model weights."),Toe.forEach(t),tmr=i(ey),T(f4.$$.fragment,ey),ey.forEach(t),amr=i(bl),bo=n(bl,"DIV",{class:!0});var wa=s(bo);T(j8.$$.fragment,wa),nmr=i(wa),wve=n(wa,"P",{});var ACt=s(wve);smr=r(ACt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ACt.forEach(t),lmr=i(wa),Za=n(wa,"P",{});var oy=s(Za);imr=r(oy,"The model class to instantiate is selected based on the "),Ave=n(oy,"CODE",{});var yCt=s(Ave);dmr=r(yCt,"model_type"),yCt.forEach(t),cmr=r(oy,` property of the config object (either
passed as an argument or loaded from `),yve=n(oy,"CODE",{});var LCt=s(yve);mmr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),fmr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(oy,"CODE",{});var xCt=s(Lve);gmr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),hmr=r(oy,":"),oy.forEach(t),umr=i(wa),xve=n(wa,"UL",{});var $Ct=s(xve);g4=n($Ct,"LI",{});var vPe=s(g4);$ve=n(vPe,"STRONG",{});var kCt=s($ve);pmr=r(kCt,"detr"),kCt.forEach(t),_mr=r(vPe," \u2014 "),nQ=n(vPe,"A",{href:!0});var SCt=s(nQ);bmr=r(SCt,"DetrForSegmentation"),SCt.forEach(t),vmr=r(vPe," (DETR model)"),vPe.forEach(t),$Ct.forEach(t),Fmr=i(wa),h4=n(wa,"P",{});var FPe=s(h4);Tmr=r(FPe,"The model is set in evaluation mode by default using "),kve=n(FPe,"CODE",{});var RCt=s(kve);Mmr=r(RCt,"model.eval()"),RCt.forEach(t),Emr=r(FPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sve=n(FPe,"CODE",{});var PCt=s(Sve);Cmr=r(PCt,"model.train()"),PCt.forEach(t),FPe.forEach(t),wmr=i(wa),T(u4.$$.fragment,wa),wa.forEach(t),bl.forEach(t),bGe=i(m),Wd=n(m,"H2",{class:!0});var AVe=s(Wd);p4=n(AVe,"A",{id:!0,class:!0,href:!0});var BCt=s(p4);Rve=n(BCt,"SPAN",{});var ICt=s(Rve);T(D8.$$.fragment,ICt),ICt.forEach(t),BCt.forEach(t),Amr=i(AVe),Pve=n(AVe,"SPAN",{});var NCt=s(Pve);ymr=r(NCt,"AutoModelForSemanticSegmentation"),NCt.forEach(t),AVe.forEach(t),vGe=i(m),Yo=n(m,"DIV",{class:!0});var vl=s(Yo);T(G8.$$.fragment,vl),Lmr=i(vl),Qd=n(vl,"P",{});var Moe=s(Qd);xmr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sQ=n(Moe,"A",{href:!0});var qCt=s(sQ);$mr=r(qCt,"from_pretrained()"),qCt.forEach(t),kmr=r(Moe," class method or the "),lQ=n(Moe,"A",{href:!0});var jCt=s(lQ);Smr=r(jCt,"from_config()"),jCt.forEach(t),Rmr=r(Moe,` class
method.`),Moe.forEach(t),Pmr=i(vl),O8=n(vl,"P",{});var yVe=s(O8);Bmr=r(yVe,"This class cannot be instantiated directly using "),Bve=n(yVe,"CODE",{});var DCt=s(Bve);Imr=r(DCt,"__init__()"),DCt.forEach(t),Nmr=r(yVe," (throws an error)."),yVe.forEach(t),qmr=i(vl),Lt=n(vl,"DIV",{class:!0});var ry=s(Lt);T(V8.$$.fragment,ry),jmr=i(ry),Ive=n(ry,"P",{});var GCt=s(Ive);Dmr=r(GCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GCt.forEach(t),Gmr=i(ry),Hd=n(ry,"P",{});var Eoe=s(Hd);Omr=r(Eoe,`Note:
Loading a model from its configuration file does `),Nve=n(Eoe,"STRONG",{});var OCt=s(Nve);Vmr=r(OCt,"not"),OCt.forEach(t),Xmr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(Eoe,"A",{href:!0});var VCt=s(iQ);zmr=r(VCt,"from_pretrained()"),VCt.forEach(t),Wmr=r(Eoe," to load the model weights."),Eoe.forEach(t),Qmr=i(ry),T(_4.$$.fragment,ry),ry.forEach(t),Hmr=i(vl),vo=n(vl,"DIV",{class:!0});var Aa=s(vo);T(X8.$$.fragment,Aa),Umr=i(Aa),qve=n(Aa,"P",{});var XCt=s(qve);Jmr=r(XCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XCt.forEach(t),Ymr=i(Aa),en=n(Aa,"P",{});var ty=s(en);Kmr=r(ty,"The model class to instantiate is selected based on the "),jve=n(ty,"CODE",{});var zCt=s(jve);Zmr=r(zCt,"model_type"),zCt.forEach(t),efr=r(ty,` property of the config object (either
passed as an argument or loaded from `),Dve=n(ty,"CODE",{});var WCt=s(Dve);ofr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),rfr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(ty,"CODE",{});var QCt=s(Gve);tfr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),afr=r(ty,":"),ty.forEach(t),nfr=i(Aa),on=n(Aa,"UL",{});var ay=s(on);b4=n(ay,"LI",{});var TPe=s(b4);Ove=n(TPe,"STRONG",{});var HCt=s(Ove);sfr=r(HCt,"beit"),HCt.forEach(t),lfr=r(TPe," \u2014 "),dQ=n(TPe,"A",{href:!0});var UCt=s(dQ);ifr=r(UCt,"BeitForSemanticSegmentation"),UCt.forEach(t),dfr=r(TPe," (BEiT model)"),TPe.forEach(t),cfr=i(ay),v4=n(ay,"LI",{});var MPe=s(v4);Vve=n(MPe,"STRONG",{});var JCt=s(Vve);mfr=r(JCt,"data2vec-vision"),JCt.forEach(t),ffr=r(MPe," \u2014 "),cQ=n(MPe,"A",{href:!0});var YCt=s(cQ);gfr=r(YCt,"Data2VecVisionForSemanticSegmentation"),YCt.forEach(t),hfr=r(MPe," (Data2VecVision model)"),MPe.forEach(t),ufr=i(ay),F4=n(ay,"LI",{});var EPe=s(F4);Xve=n(EPe,"STRONG",{});var KCt=s(Xve);pfr=r(KCt,"dpt"),KCt.forEach(t),_fr=r(EPe," \u2014 "),mQ=n(EPe,"A",{href:!0});var ZCt=s(mQ);bfr=r(ZCt,"DPTForSemanticSegmentation"),ZCt.forEach(t),vfr=r(EPe," (DPT model)"),EPe.forEach(t),Ffr=i(ay),T4=n(ay,"LI",{});var CPe=s(T4);zve=n(CPe,"STRONG",{});var e5t=s(zve);Tfr=r(e5t,"segformer"),e5t.forEach(t),Mfr=r(CPe," \u2014 "),fQ=n(CPe,"A",{href:!0});var o5t=s(fQ);Efr=r(o5t,"SegformerForSemanticSegmentation"),o5t.forEach(t),Cfr=r(CPe," (SegFormer model)"),CPe.forEach(t),ay.forEach(t),wfr=i(Aa),M4=n(Aa,"P",{});var wPe=s(M4);Afr=r(wPe,"The model is set in evaluation mode by default using "),Wve=n(wPe,"CODE",{});var r5t=s(Wve);yfr=r(r5t,"model.eval()"),r5t.forEach(t),Lfr=r(wPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qve=n(wPe,"CODE",{});var t5t=s(Qve);xfr=r(t5t,"model.train()"),t5t.forEach(t),wPe.forEach(t),$fr=i(Aa),T(E4.$$.fragment,Aa),Aa.forEach(t),vl.forEach(t),FGe=i(m),Ud=n(m,"H2",{class:!0});var LVe=s(Ud);C4=n(LVe,"A",{id:!0,class:!0,href:!0});var a5t=s(C4);Hve=n(a5t,"SPAN",{});var n5t=s(Hve);T(z8.$$.fragment,n5t),n5t.forEach(t),a5t.forEach(t),kfr=i(LVe),Uve=n(LVe,"SPAN",{});var s5t=s(Uve);Sfr=r(s5t,"AutoModelForInstanceSegmentation"),s5t.forEach(t),LVe.forEach(t),TGe=i(m),Ko=n(m,"DIV",{class:!0});var Fl=s(Ko);T(W8.$$.fragment,Fl),Rfr=i(Fl),Jd=n(Fl,"P",{});var Coe=s(Jd);Pfr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gQ=n(Coe,"A",{href:!0});var l5t=s(gQ);Bfr=r(l5t,"from_pretrained()"),l5t.forEach(t),Ifr=r(Coe," class method or the "),hQ=n(Coe,"A",{href:!0});var i5t=s(hQ);Nfr=r(i5t,"from_config()"),i5t.forEach(t),qfr=r(Coe,` class
method.`),Coe.forEach(t),jfr=i(Fl),Q8=n(Fl,"P",{});var xVe=s(Q8);Dfr=r(xVe,"This class cannot be instantiated directly using "),Jve=n(xVe,"CODE",{});var d5t=s(Jve);Gfr=r(d5t,"__init__()"),d5t.forEach(t),Ofr=r(xVe," (throws an error)."),xVe.forEach(t),Vfr=i(Fl),xt=n(Fl,"DIV",{class:!0});var ny=s(xt);T(H8.$$.fragment,ny),Xfr=i(ny),Yve=n(ny,"P",{});var c5t=s(Yve);zfr=r(c5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),c5t.forEach(t),Wfr=i(ny),Yd=n(ny,"P",{});var woe=s(Yd);Qfr=r(woe,`Note:
Loading a model from its configuration file does `),Kve=n(woe,"STRONG",{});var m5t=s(Kve);Hfr=r(m5t,"not"),m5t.forEach(t),Ufr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(woe,"A",{href:!0});var f5t=s(uQ);Jfr=r(f5t,"from_pretrained()"),f5t.forEach(t),Yfr=r(woe," to load the model weights."),woe.forEach(t),Kfr=i(ny),T(w4.$$.fragment,ny),ny.forEach(t),Zfr=i(Fl),Fo=n(Fl,"DIV",{class:!0});var ya=s(Fo);T(U8.$$.fragment,ya),egr=i(ya),Zve=n(ya,"P",{});var g5t=s(Zve);ogr=r(g5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),g5t.forEach(t),rgr=i(ya),rn=n(ya,"P",{});var sy=s(rn);tgr=r(sy,"The model class to instantiate is selected based on the "),eFe=n(sy,"CODE",{});var h5t=s(eFe);agr=r(h5t,"model_type"),h5t.forEach(t),ngr=r(sy,` property of the config object (either
passed as an argument or loaded from `),oFe=n(sy,"CODE",{});var u5t=s(oFe);sgr=r(u5t,"pretrained_model_name_or_path"),u5t.forEach(t),lgr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(sy,"CODE",{});var p5t=s(rFe);igr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),dgr=r(sy,":"),sy.forEach(t),cgr=i(ya),tFe=n(ya,"UL",{});var _5t=s(tFe);A4=n(_5t,"LI",{});var APe=s(A4);aFe=n(APe,"STRONG",{});var b5t=s(aFe);mgr=r(b5t,"maskformer"),b5t.forEach(t),fgr=r(APe," \u2014 "),pQ=n(APe,"A",{href:!0});var v5t=s(pQ);ggr=r(v5t,"MaskFormerForInstanceSegmentation"),v5t.forEach(t),hgr=r(APe," (MaskFormer model)"),APe.forEach(t),_5t.forEach(t),ugr=i(ya),y4=n(ya,"P",{});var yPe=s(y4);pgr=r(yPe,"The model is set in evaluation mode by default using "),nFe=n(yPe,"CODE",{});var F5t=s(nFe);_gr=r(F5t,"model.eval()"),F5t.forEach(t),bgr=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(yPe,"CODE",{});var T5t=s(sFe);vgr=r(T5t,"model.train()"),T5t.forEach(t),yPe.forEach(t),Fgr=i(ya),T(L4.$$.fragment,ya),ya.forEach(t),Fl.forEach(t),MGe=i(m),Kd=n(m,"H2",{class:!0});var $Ve=s(Kd);x4=n($Ve,"A",{id:!0,class:!0,href:!0});var M5t=s(x4);lFe=n(M5t,"SPAN",{});var E5t=s(lFe);T(J8.$$.fragment,E5t),E5t.forEach(t),M5t.forEach(t),Tgr=i($Ve),iFe=n($Ve,"SPAN",{});var C5t=s(iFe);Mgr=r(C5t,"TFAutoModel"),C5t.forEach(t),$Ve.forEach(t),EGe=i(m),Zo=n(m,"DIV",{class:!0});var Tl=s(Zo);T(Y8.$$.fragment,Tl),Egr=i(Tl),Zd=n(Tl,"P",{});var Aoe=s(Zd);Cgr=r(Aoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Q=n(Aoe,"A",{href:!0});var w5t=s(_Q);wgr=r(w5t,"from_pretrained()"),w5t.forEach(t),Agr=r(Aoe," class method or the "),bQ=n(Aoe,"A",{href:!0});var A5t=s(bQ);ygr=r(A5t,"from_config()"),A5t.forEach(t),Lgr=r(Aoe,` class
method.`),Aoe.forEach(t),xgr=i(Tl),K8=n(Tl,"P",{});var kVe=s(K8);$gr=r(kVe,"This class cannot be instantiated directly using "),dFe=n(kVe,"CODE",{});var y5t=s(dFe);kgr=r(y5t,"__init__()"),y5t.forEach(t),Sgr=r(kVe," (throws an error)."),kVe.forEach(t),Rgr=i(Tl),$t=n(Tl,"DIV",{class:!0});var ly=s($t);T(Z8.$$.fragment,ly),Pgr=i(ly),cFe=n(ly,"P",{});var L5t=s(cFe);Bgr=r(L5t,"Instantiates one of the base model classes of the library from a configuration."),L5t.forEach(t),Igr=i(ly),ec=n(ly,"P",{});var yoe=s(ec);Ngr=r(yoe,`Note:
Loading a model from its configuration file does `),mFe=n(yoe,"STRONG",{});var x5t=s(mFe);qgr=r(x5t,"not"),x5t.forEach(t),jgr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(yoe,"A",{href:!0});var $5t=s(vQ);Dgr=r($5t,"from_pretrained()"),$5t.forEach(t),Ggr=r(yoe," to load the model weights."),yoe.forEach(t),Ogr=i(ly),T($4.$$.fragment,ly),ly.forEach(t),Vgr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(e9.$$.fragment,Ml),Xgr=i(Ml),fFe=n(Ml,"P",{});var k5t=s(fFe);zgr=r(k5t,"Instantiate one of the base model classes of the library from a pretrained model."),k5t.forEach(t),Wgr=i(Ml),tn=n(Ml,"P",{});var iy=s(tn);Qgr=r(iy,"The model class to instantiate is selected based on the "),gFe=n(iy,"CODE",{});var S5t=s(gFe);Hgr=r(S5t,"model_type"),S5t.forEach(t),Ugr=r(iy,` property of the config object (either
passed as an argument or loaded from `),hFe=n(iy,"CODE",{});var R5t=s(hFe);Jgr=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),Ygr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(iy,"CODE",{});var P5t=s(uFe);Kgr=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),Zgr=r(iy,":"),iy.forEach(t),ehr=i(Ml),q=n(Ml,"UL",{});var D=s(q);k4=n(D,"LI",{});var LPe=s(k4);pFe=n(LPe,"STRONG",{});var B5t=s(pFe);ohr=r(B5t,"albert"),B5t.forEach(t),rhr=r(LPe," \u2014 "),FQ=n(LPe,"A",{href:!0});var I5t=s(FQ);thr=r(I5t,"TFAlbertModel"),I5t.forEach(t),ahr=r(LPe," (ALBERT model)"),LPe.forEach(t),nhr=i(D),S4=n(D,"LI",{});var xPe=s(S4);_Fe=n(xPe,"STRONG",{});var N5t=s(_Fe);shr=r(N5t,"bart"),N5t.forEach(t),lhr=r(xPe," \u2014 "),TQ=n(xPe,"A",{href:!0});var q5t=s(TQ);ihr=r(q5t,"TFBartModel"),q5t.forEach(t),dhr=r(xPe," (BART model)"),xPe.forEach(t),chr=i(D),R4=n(D,"LI",{});var $Pe=s(R4);bFe=n($Pe,"STRONG",{});var j5t=s(bFe);mhr=r(j5t,"bert"),j5t.forEach(t),fhr=r($Pe," \u2014 "),MQ=n($Pe,"A",{href:!0});var D5t=s(MQ);ghr=r(D5t,"TFBertModel"),D5t.forEach(t),hhr=r($Pe," (BERT model)"),$Pe.forEach(t),uhr=i(D),P4=n(D,"LI",{});var kPe=s(P4);vFe=n(kPe,"STRONG",{});var G5t=s(vFe);phr=r(G5t,"blenderbot"),G5t.forEach(t),_hr=r(kPe," \u2014 "),EQ=n(kPe,"A",{href:!0});var O5t=s(EQ);bhr=r(O5t,"TFBlenderbotModel"),O5t.forEach(t),vhr=r(kPe," (Blenderbot model)"),kPe.forEach(t),Fhr=i(D),B4=n(D,"LI",{});var SPe=s(B4);FFe=n(SPe,"STRONG",{});var V5t=s(FFe);Thr=r(V5t,"blenderbot-small"),V5t.forEach(t),Mhr=r(SPe," \u2014 "),CQ=n(SPe,"A",{href:!0});var X5t=s(CQ);Ehr=r(X5t,"TFBlenderbotSmallModel"),X5t.forEach(t),Chr=r(SPe," (BlenderbotSmall model)"),SPe.forEach(t),whr=i(D),I4=n(D,"LI",{});var RPe=s(I4);TFe=n(RPe,"STRONG",{});var z5t=s(TFe);Ahr=r(z5t,"camembert"),z5t.forEach(t),yhr=r(RPe," \u2014 "),wQ=n(RPe,"A",{href:!0});var W5t=s(wQ);Lhr=r(W5t,"TFCamembertModel"),W5t.forEach(t),xhr=r(RPe," (CamemBERT model)"),RPe.forEach(t),$hr=i(D),N4=n(D,"LI",{});var PPe=s(N4);MFe=n(PPe,"STRONG",{});var Q5t=s(MFe);khr=r(Q5t,"clip"),Q5t.forEach(t),Shr=r(PPe," \u2014 "),AQ=n(PPe,"A",{href:!0});var H5t=s(AQ);Rhr=r(H5t,"TFCLIPModel"),H5t.forEach(t),Phr=r(PPe," (CLIP model)"),PPe.forEach(t),Bhr=i(D),q4=n(D,"LI",{});var BPe=s(q4);EFe=n(BPe,"STRONG",{});var U5t=s(EFe);Ihr=r(U5t,"convbert"),U5t.forEach(t),Nhr=r(BPe," \u2014 "),yQ=n(BPe,"A",{href:!0});var J5t=s(yQ);qhr=r(J5t,"TFConvBertModel"),J5t.forEach(t),jhr=r(BPe," (ConvBERT model)"),BPe.forEach(t),Dhr=i(D),j4=n(D,"LI",{});var IPe=s(j4);CFe=n(IPe,"STRONG",{});var Y5t=s(CFe);Ghr=r(Y5t,"convnext"),Y5t.forEach(t),Ohr=r(IPe," \u2014 "),LQ=n(IPe,"A",{href:!0});var K5t=s(LQ);Vhr=r(K5t,"TFConvNextModel"),K5t.forEach(t),Xhr=r(IPe," (ConvNeXT model)"),IPe.forEach(t),zhr=i(D),D4=n(D,"LI",{});var NPe=s(D4);wFe=n(NPe,"STRONG",{});var Z5t=s(wFe);Whr=r(Z5t,"ctrl"),Z5t.forEach(t),Qhr=r(NPe," \u2014 "),xQ=n(NPe,"A",{href:!0});var e3t=s(xQ);Hhr=r(e3t,"TFCTRLModel"),e3t.forEach(t),Uhr=r(NPe," (CTRL model)"),NPe.forEach(t),Jhr=i(D),G4=n(D,"LI",{});var qPe=s(G4);AFe=n(qPe,"STRONG",{});var o3t=s(AFe);Yhr=r(o3t,"data2vec-vision"),o3t.forEach(t),Khr=r(qPe," \u2014 "),$Q=n(qPe,"A",{href:!0});var r3t=s($Q);Zhr=r(r3t,"TFData2VecVisionModel"),r3t.forEach(t),eur=r(qPe," (Data2VecVision model)"),qPe.forEach(t),our=i(D),O4=n(D,"LI",{});var jPe=s(O4);yFe=n(jPe,"STRONG",{});var t3t=s(yFe);rur=r(t3t,"deberta"),t3t.forEach(t),tur=r(jPe," \u2014 "),kQ=n(jPe,"A",{href:!0});var a3t=s(kQ);aur=r(a3t,"TFDebertaModel"),a3t.forEach(t),nur=r(jPe," (DeBERTa model)"),jPe.forEach(t),sur=i(D),V4=n(D,"LI",{});var DPe=s(V4);LFe=n(DPe,"STRONG",{});var n3t=s(LFe);lur=r(n3t,"deberta-v2"),n3t.forEach(t),iur=r(DPe," \u2014 "),SQ=n(DPe,"A",{href:!0});var s3t=s(SQ);dur=r(s3t,"TFDebertaV2Model"),s3t.forEach(t),cur=r(DPe," (DeBERTa-v2 model)"),DPe.forEach(t),mur=i(D),X4=n(D,"LI",{});var GPe=s(X4);xFe=n(GPe,"STRONG",{});var l3t=s(xFe);fur=r(l3t,"distilbert"),l3t.forEach(t),gur=r(GPe," \u2014 "),RQ=n(GPe,"A",{href:!0});var i3t=s(RQ);hur=r(i3t,"TFDistilBertModel"),i3t.forEach(t),uur=r(GPe," (DistilBERT model)"),GPe.forEach(t),pur=i(D),z4=n(D,"LI",{});var OPe=s(z4);$Fe=n(OPe,"STRONG",{});var d3t=s($Fe);_ur=r(d3t,"dpr"),d3t.forEach(t),bur=r(OPe," \u2014 "),PQ=n(OPe,"A",{href:!0});var c3t=s(PQ);vur=r(c3t,"TFDPRQuestionEncoder"),c3t.forEach(t),Fur=r(OPe," (DPR model)"),OPe.forEach(t),Tur=i(D),W4=n(D,"LI",{});var VPe=s(W4);kFe=n(VPe,"STRONG",{});var m3t=s(kFe);Mur=r(m3t,"electra"),m3t.forEach(t),Eur=r(VPe," \u2014 "),BQ=n(VPe,"A",{href:!0});var f3t=s(BQ);Cur=r(f3t,"TFElectraModel"),f3t.forEach(t),wur=r(VPe," (ELECTRA model)"),VPe.forEach(t),Aur=i(D),Q4=n(D,"LI",{});var XPe=s(Q4);SFe=n(XPe,"STRONG",{});var g3t=s(SFe);yur=r(g3t,"flaubert"),g3t.forEach(t),Lur=r(XPe," \u2014 "),IQ=n(XPe,"A",{href:!0});var h3t=s(IQ);xur=r(h3t,"TFFlaubertModel"),h3t.forEach(t),$ur=r(XPe," (FlauBERT model)"),XPe.forEach(t),kur=i(D),Vs=n(D,"LI",{});var Pk=s(Vs);RFe=n(Pk,"STRONG",{});var u3t=s(RFe);Sur=r(u3t,"funnel"),u3t.forEach(t),Rur=r(Pk," \u2014 "),NQ=n(Pk,"A",{href:!0});var p3t=s(NQ);Pur=r(p3t,"TFFunnelModel"),p3t.forEach(t),Bur=r(Pk," or "),qQ=n(Pk,"A",{href:!0});var _3t=s(qQ);Iur=r(_3t,"TFFunnelBaseModel"),_3t.forEach(t),Nur=r(Pk," (Funnel Transformer model)"),Pk.forEach(t),qur=i(D),H4=n(D,"LI",{});var zPe=s(H4);PFe=n(zPe,"STRONG",{});var b3t=s(PFe);jur=r(b3t,"gpt2"),b3t.forEach(t),Dur=r(zPe," \u2014 "),jQ=n(zPe,"A",{href:!0});var v3t=s(jQ);Gur=r(v3t,"TFGPT2Model"),v3t.forEach(t),Our=r(zPe," (OpenAI GPT-2 model)"),zPe.forEach(t),Vur=i(D),U4=n(D,"LI",{});var WPe=s(U4);BFe=n(WPe,"STRONG",{});var F3t=s(BFe);Xur=r(F3t,"gptj"),F3t.forEach(t),zur=r(WPe," \u2014 "),DQ=n(WPe,"A",{href:!0});var T3t=s(DQ);Wur=r(T3t,"TFGPTJModel"),T3t.forEach(t),Qur=r(WPe," (GPT-J model)"),WPe.forEach(t),Hur=i(D),J4=n(D,"LI",{});var QPe=s(J4);IFe=n(QPe,"STRONG",{});var M3t=s(IFe);Uur=r(M3t,"hubert"),M3t.forEach(t),Jur=r(QPe," \u2014 "),GQ=n(QPe,"A",{href:!0});var E3t=s(GQ);Yur=r(E3t,"TFHubertModel"),E3t.forEach(t),Kur=r(QPe," (Hubert model)"),QPe.forEach(t),Zur=i(D),Y4=n(D,"LI",{});var HPe=s(Y4);NFe=n(HPe,"STRONG",{});var C3t=s(NFe);epr=r(C3t,"layoutlm"),C3t.forEach(t),opr=r(HPe," \u2014 "),OQ=n(HPe,"A",{href:!0});var w3t=s(OQ);rpr=r(w3t,"TFLayoutLMModel"),w3t.forEach(t),tpr=r(HPe," (LayoutLM model)"),HPe.forEach(t),apr=i(D),K4=n(D,"LI",{});var UPe=s(K4);qFe=n(UPe,"STRONG",{});var A3t=s(qFe);npr=r(A3t,"led"),A3t.forEach(t),spr=r(UPe," \u2014 "),VQ=n(UPe,"A",{href:!0});var y3t=s(VQ);lpr=r(y3t,"TFLEDModel"),y3t.forEach(t),ipr=r(UPe," (LED model)"),UPe.forEach(t),dpr=i(D),Z4=n(D,"LI",{});var JPe=s(Z4);jFe=n(JPe,"STRONG",{});var L3t=s(jFe);cpr=r(L3t,"longformer"),L3t.forEach(t),mpr=r(JPe," \u2014 "),XQ=n(JPe,"A",{href:!0});var x3t=s(XQ);fpr=r(x3t,"TFLongformerModel"),x3t.forEach(t),gpr=r(JPe," (Longformer model)"),JPe.forEach(t),hpr=i(D),eE=n(D,"LI",{});var YPe=s(eE);DFe=n(YPe,"STRONG",{});var $3t=s(DFe);upr=r($3t,"lxmert"),$3t.forEach(t),ppr=r(YPe," \u2014 "),zQ=n(YPe,"A",{href:!0});var k3t=s(zQ);_pr=r(k3t,"TFLxmertModel"),k3t.forEach(t),bpr=r(YPe," (LXMERT model)"),YPe.forEach(t),vpr=i(D),oE=n(D,"LI",{});var KPe=s(oE);GFe=n(KPe,"STRONG",{});var S3t=s(GFe);Fpr=r(S3t,"marian"),S3t.forEach(t),Tpr=r(KPe," \u2014 "),WQ=n(KPe,"A",{href:!0});var R3t=s(WQ);Mpr=r(R3t,"TFMarianModel"),R3t.forEach(t),Epr=r(KPe," (Marian model)"),KPe.forEach(t),Cpr=i(D),rE=n(D,"LI",{});var ZPe=s(rE);OFe=n(ZPe,"STRONG",{});var P3t=s(OFe);wpr=r(P3t,"mbart"),P3t.forEach(t),Apr=r(ZPe," \u2014 "),QQ=n(ZPe,"A",{href:!0});var B3t=s(QQ);ypr=r(B3t,"TFMBartModel"),B3t.forEach(t),Lpr=r(ZPe," (mBART model)"),ZPe.forEach(t),xpr=i(D),tE=n(D,"LI",{});var eBe=s(tE);VFe=n(eBe,"STRONG",{});var I3t=s(VFe);$pr=r(I3t,"mobilebert"),I3t.forEach(t),kpr=r(eBe," \u2014 "),HQ=n(eBe,"A",{href:!0});var N3t=s(HQ);Spr=r(N3t,"TFMobileBertModel"),N3t.forEach(t),Rpr=r(eBe," (MobileBERT model)"),eBe.forEach(t),Ppr=i(D),aE=n(D,"LI",{});var oBe=s(aE);XFe=n(oBe,"STRONG",{});var q3t=s(XFe);Bpr=r(q3t,"mpnet"),q3t.forEach(t),Ipr=r(oBe," \u2014 "),UQ=n(oBe,"A",{href:!0});var j3t=s(UQ);Npr=r(j3t,"TFMPNetModel"),j3t.forEach(t),qpr=r(oBe," (MPNet model)"),oBe.forEach(t),jpr=i(D),nE=n(D,"LI",{});var rBe=s(nE);zFe=n(rBe,"STRONG",{});var D3t=s(zFe);Dpr=r(D3t,"mt5"),D3t.forEach(t),Gpr=r(rBe," \u2014 "),JQ=n(rBe,"A",{href:!0});var G3t=s(JQ);Opr=r(G3t,"TFMT5Model"),G3t.forEach(t),Vpr=r(rBe," (MT5 model)"),rBe.forEach(t),Xpr=i(D),sE=n(D,"LI",{});var tBe=s(sE);WFe=n(tBe,"STRONG",{});var O3t=s(WFe);zpr=r(O3t,"openai-gpt"),O3t.forEach(t),Wpr=r(tBe," \u2014 "),YQ=n(tBe,"A",{href:!0});var V3t=s(YQ);Qpr=r(V3t,"TFOpenAIGPTModel"),V3t.forEach(t),Hpr=r(tBe," (OpenAI GPT model)"),tBe.forEach(t),Upr=i(D),lE=n(D,"LI",{});var aBe=s(lE);QFe=n(aBe,"STRONG",{});var X3t=s(QFe);Jpr=r(X3t,"opt"),X3t.forEach(t),Ypr=r(aBe," \u2014 "),KQ=n(aBe,"A",{href:!0});var z3t=s(KQ);Kpr=r(z3t,"TFOPTModel"),z3t.forEach(t),Zpr=r(aBe," (OPT model)"),aBe.forEach(t),e_r=i(D),iE=n(D,"LI",{});var nBe=s(iE);HFe=n(nBe,"STRONG",{});var W3t=s(HFe);o_r=r(W3t,"pegasus"),W3t.forEach(t),r_r=r(nBe," \u2014 "),ZQ=n(nBe,"A",{href:!0});var Q3t=s(ZQ);t_r=r(Q3t,"TFPegasusModel"),Q3t.forEach(t),a_r=r(nBe," (Pegasus model)"),nBe.forEach(t),n_r=i(D),dE=n(D,"LI",{});var sBe=s(dE);UFe=n(sBe,"STRONG",{});var H3t=s(UFe);s_r=r(H3t,"rembert"),H3t.forEach(t),l_r=r(sBe," \u2014 "),eH=n(sBe,"A",{href:!0});var U3t=s(eH);i_r=r(U3t,"TFRemBertModel"),U3t.forEach(t),d_r=r(sBe," (RemBERT model)"),sBe.forEach(t),c_r=i(D),cE=n(D,"LI",{});var lBe=s(cE);JFe=n(lBe,"STRONG",{});var J3t=s(JFe);m_r=r(J3t,"roberta"),J3t.forEach(t),f_r=r(lBe," \u2014 "),oH=n(lBe,"A",{href:!0});var Y3t=s(oH);g_r=r(Y3t,"TFRobertaModel"),Y3t.forEach(t),h_r=r(lBe," (RoBERTa model)"),lBe.forEach(t),u_r=i(D),mE=n(D,"LI",{});var iBe=s(mE);YFe=n(iBe,"STRONG",{});var K3t=s(YFe);p_r=r(K3t,"roformer"),K3t.forEach(t),__r=r(iBe," \u2014 "),rH=n(iBe,"A",{href:!0});var Z3t=s(rH);b_r=r(Z3t,"TFRoFormerModel"),Z3t.forEach(t),v_r=r(iBe," (RoFormer model)"),iBe.forEach(t),F_r=i(D),fE=n(D,"LI",{});var dBe=s(fE);KFe=n(dBe,"STRONG",{});var ewt=s(KFe);T_r=r(ewt,"speech_to_text"),ewt.forEach(t),M_r=r(dBe," \u2014 "),tH=n(dBe,"A",{href:!0});var owt=s(tH);E_r=r(owt,"TFSpeech2TextModel"),owt.forEach(t),C_r=r(dBe," (Speech2Text model)"),dBe.forEach(t),w_r=i(D),gE=n(D,"LI",{});var cBe=s(gE);ZFe=n(cBe,"STRONG",{});var rwt=s(ZFe);A_r=r(rwt,"swin"),rwt.forEach(t),y_r=r(cBe," \u2014 "),aH=n(cBe,"A",{href:!0});var twt=s(aH);L_r=r(twt,"TFSwinModel"),twt.forEach(t),x_r=r(cBe," (Swin Transformer model)"),cBe.forEach(t),$_r=i(D),hE=n(D,"LI",{});var mBe=s(hE);e1e=n(mBe,"STRONG",{});var awt=s(e1e);k_r=r(awt,"t5"),awt.forEach(t),S_r=r(mBe," \u2014 "),nH=n(mBe,"A",{href:!0});var nwt=s(nH);R_r=r(nwt,"TFT5Model"),nwt.forEach(t),P_r=r(mBe," (T5 model)"),mBe.forEach(t),B_r=i(D),uE=n(D,"LI",{});var fBe=s(uE);o1e=n(fBe,"STRONG",{});var swt=s(o1e);I_r=r(swt,"tapas"),swt.forEach(t),N_r=r(fBe," \u2014 "),sH=n(fBe,"A",{href:!0});var lwt=s(sH);q_r=r(lwt,"TFTapasModel"),lwt.forEach(t),j_r=r(fBe," (TAPAS model)"),fBe.forEach(t),D_r=i(D),pE=n(D,"LI",{});var gBe=s(pE);r1e=n(gBe,"STRONG",{});var iwt=s(r1e);G_r=r(iwt,"transfo-xl"),iwt.forEach(t),O_r=r(gBe," \u2014 "),lH=n(gBe,"A",{href:!0});var dwt=s(lH);V_r=r(dwt,"TFTransfoXLModel"),dwt.forEach(t),X_r=r(gBe," (Transformer-XL model)"),gBe.forEach(t),z_r=i(D),_E=n(D,"LI",{});var hBe=s(_E);t1e=n(hBe,"STRONG",{});var cwt=s(t1e);W_r=r(cwt,"vit"),cwt.forEach(t),Q_r=r(hBe," \u2014 "),iH=n(hBe,"A",{href:!0});var mwt=s(iH);H_r=r(mwt,"TFViTModel"),mwt.forEach(t),U_r=r(hBe," (ViT model)"),hBe.forEach(t),J_r=i(D),bE=n(D,"LI",{});var uBe=s(bE);a1e=n(uBe,"STRONG",{});var fwt=s(a1e);Y_r=r(fwt,"vit_mae"),fwt.forEach(t),K_r=r(uBe," \u2014 "),dH=n(uBe,"A",{href:!0});var gwt=s(dH);Z_r=r(gwt,"TFViTMAEModel"),gwt.forEach(t),ebr=r(uBe," (ViTMAE model)"),uBe.forEach(t),obr=i(D),vE=n(D,"LI",{});var pBe=s(vE);n1e=n(pBe,"STRONG",{});var hwt=s(n1e);rbr=r(hwt,"wav2vec2"),hwt.forEach(t),tbr=r(pBe," \u2014 "),cH=n(pBe,"A",{href:!0});var uwt=s(cH);abr=r(uwt,"TFWav2Vec2Model"),uwt.forEach(t),nbr=r(pBe," (Wav2Vec2 model)"),pBe.forEach(t),sbr=i(D),FE=n(D,"LI",{});var _Be=s(FE);s1e=n(_Be,"STRONG",{});var pwt=s(s1e);lbr=r(pwt,"xlm"),pwt.forEach(t),ibr=r(_Be," \u2014 "),mH=n(_Be,"A",{href:!0});var _wt=s(mH);dbr=r(_wt,"TFXLMModel"),_wt.forEach(t),cbr=r(_Be," (XLM model)"),_Be.forEach(t),mbr=i(D),TE=n(D,"LI",{});var bBe=s(TE);l1e=n(bBe,"STRONG",{});var bwt=s(l1e);fbr=r(bwt,"xlm-roberta"),bwt.forEach(t),gbr=r(bBe," \u2014 "),fH=n(bBe,"A",{href:!0});var vwt=s(fH);hbr=r(vwt,"TFXLMRobertaModel"),vwt.forEach(t),ubr=r(bBe," (XLM-RoBERTa model)"),bBe.forEach(t),pbr=i(D),ME=n(D,"LI",{});var vBe=s(ME);i1e=n(vBe,"STRONG",{});var Fwt=s(i1e);_br=r(Fwt,"xlnet"),Fwt.forEach(t),bbr=r(vBe," \u2014 "),gH=n(vBe,"A",{href:!0});var Twt=s(gH);vbr=r(Twt,"TFXLNetModel"),Twt.forEach(t),Fbr=r(vBe," (XLNet model)"),vBe.forEach(t),D.forEach(t),Tbr=i(Ml),T(EE.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),CGe=i(m),oc=n(m,"H2",{class:!0});var SVe=s(oc);CE=n(SVe,"A",{id:!0,class:!0,href:!0});var Mwt=s(CE);d1e=n(Mwt,"SPAN",{});var Ewt=s(d1e);T(o9.$$.fragment,Ewt),Ewt.forEach(t),Mwt.forEach(t),Mbr=i(SVe),c1e=n(SVe,"SPAN",{});var Cwt=s(c1e);Ebr=r(Cwt,"TFAutoModelForPreTraining"),Cwt.forEach(t),SVe.forEach(t),wGe=i(m),er=n(m,"DIV",{class:!0});var El=s(er);T(r9.$$.fragment,El),Cbr=i(El),rc=n(El,"P",{});var Loe=s(rc);wbr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hH=n(Loe,"A",{href:!0});var wwt=s(hH);Abr=r(wwt,"from_pretrained()"),wwt.forEach(t),ybr=r(Loe," class method or the "),uH=n(Loe,"A",{href:!0});var Awt=s(uH);Lbr=r(Awt,"from_config()"),Awt.forEach(t),xbr=r(Loe,` class
method.`),Loe.forEach(t),$br=i(El),t9=n(El,"P",{});var RVe=s(t9);kbr=r(RVe,"This class cannot be instantiated directly using "),m1e=n(RVe,"CODE",{});var ywt=s(m1e);Sbr=r(ywt,"__init__()"),ywt.forEach(t),Rbr=r(RVe," (throws an error)."),RVe.forEach(t),Pbr=i(El),kt=n(El,"DIV",{class:!0});var dy=s(kt);T(a9.$$.fragment,dy),Bbr=i(dy),f1e=n(dy,"P",{});var Lwt=s(f1e);Ibr=r(Lwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lwt.forEach(t),Nbr=i(dy),tc=n(dy,"P",{});var xoe=s(tc);qbr=r(xoe,`Note:
Loading a model from its configuration file does `),g1e=n(xoe,"STRONG",{});var xwt=s(g1e);jbr=r(xwt,"not"),xwt.forEach(t),Dbr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(xoe,"A",{href:!0});var $wt=s(pH);Gbr=r($wt,"from_pretrained()"),$wt.forEach(t),Obr=r(xoe," to load the model weights."),xoe.forEach(t),Vbr=i(dy),T(wE.$$.fragment,dy),dy.forEach(t),Xbr=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(n9.$$.fragment,Cl),zbr=i(Cl),h1e=n(Cl,"P",{});var kwt=s(h1e);Wbr=r(kwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kwt.forEach(t),Qbr=i(Cl),an=n(Cl,"P",{});var cy=s(an);Hbr=r(cy,"The model class to instantiate is selected based on the "),u1e=n(cy,"CODE",{});var Swt=s(u1e);Ubr=r(Swt,"model_type"),Swt.forEach(t),Jbr=r(cy,` property of the config object (either
passed as an argument or loaded from `),p1e=n(cy,"CODE",{});var Rwt=s(p1e);Ybr=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),Kbr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(cy,"CODE",{});var Pwt=s(_1e);Zbr=r(Pwt,"pretrained_model_name_or_path"),Pwt.forEach(t),e2r=r(cy,":"),cy.forEach(t),o2r=i(Cl),se=n(Cl,"UL",{});var le=s(se);AE=n(le,"LI",{});var FBe=s(AE);b1e=n(FBe,"STRONG",{});var Bwt=s(b1e);r2r=r(Bwt,"albert"),Bwt.forEach(t),t2r=r(FBe," \u2014 "),_H=n(FBe,"A",{href:!0});var Iwt=s(_H);a2r=r(Iwt,"TFAlbertForPreTraining"),Iwt.forEach(t),n2r=r(FBe," (ALBERT model)"),FBe.forEach(t),s2r=i(le),yE=n(le,"LI",{});var TBe=s(yE);v1e=n(TBe,"STRONG",{});var Nwt=s(v1e);l2r=r(Nwt,"bart"),Nwt.forEach(t),i2r=r(TBe," \u2014 "),bH=n(TBe,"A",{href:!0});var qwt=s(bH);d2r=r(qwt,"TFBartForConditionalGeneration"),qwt.forEach(t),c2r=r(TBe," (BART model)"),TBe.forEach(t),m2r=i(le),LE=n(le,"LI",{});var MBe=s(LE);F1e=n(MBe,"STRONG",{});var jwt=s(F1e);f2r=r(jwt,"bert"),jwt.forEach(t),g2r=r(MBe," \u2014 "),vH=n(MBe,"A",{href:!0});var Dwt=s(vH);h2r=r(Dwt,"TFBertForPreTraining"),Dwt.forEach(t),u2r=r(MBe," (BERT model)"),MBe.forEach(t),p2r=i(le),xE=n(le,"LI",{});var EBe=s(xE);T1e=n(EBe,"STRONG",{});var Gwt=s(T1e);_2r=r(Gwt,"camembert"),Gwt.forEach(t),b2r=r(EBe," \u2014 "),FH=n(EBe,"A",{href:!0});var Owt=s(FH);v2r=r(Owt,"TFCamembertForMaskedLM"),Owt.forEach(t),F2r=r(EBe," (CamemBERT model)"),EBe.forEach(t),T2r=i(le),$E=n(le,"LI",{});var CBe=s($E);M1e=n(CBe,"STRONG",{});var Vwt=s(M1e);M2r=r(Vwt,"ctrl"),Vwt.forEach(t),E2r=r(CBe," \u2014 "),TH=n(CBe,"A",{href:!0});var Xwt=s(TH);C2r=r(Xwt,"TFCTRLLMHeadModel"),Xwt.forEach(t),w2r=r(CBe," (CTRL model)"),CBe.forEach(t),A2r=i(le),kE=n(le,"LI",{});var wBe=s(kE);E1e=n(wBe,"STRONG",{});var zwt=s(E1e);y2r=r(zwt,"distilbert"),zwt.forEach(t),L2r=r(wBe," \u2014 "),MH=n(wBe,"A",{href:!0});var Wwt=s(MH);x2r=r(Wwt,"TFDistilBertForMaskedLM"),Wwt.forEach(t),$2r=r(wBe," (DistilBERT model)"),wBe.forEach(t),k2r=i(le),SE=n(le,"LI",{});var ABe=s(SE);C1e=n(ABe,"STRONG",{});var Qwt=s(C1e);S2r=r(Qwt,"electra"),Qwt.forEach(t),R2r=r(ABe," \u2014 "),EH=n(ABe,"A",{href:!0});var Hwt=s(EH);P2r=r(Hwt,"TFElectraForPreTraining"),Hwt.forEach(t),B2r=r(ABe," (ELECTRA model)"),ABe.forEach(t),I2r=i(le),RE=n(le,"LI",{});var yBe=s(RE);w1e=n(yBe,"STRONG",{});var Uwt=s(w1e);N2r=r(Uwt,"flaubert"),Uwt.forEach(t),q2r=r(yBe," \u2014 "),CH=n(yBe,"A",{href:!0});var Jwt=s(CH);j2r=r(Jwt,"TFFlaubertWithLMHeadModel"),Jwt.forEach(t),D2r=r(yBe," (FlauBERT model)"),yBe.forEach(t),G2r=i(le),PE=n(le,"LI",{});var LBe=s(PE);A1e=n(LBe,"STRONG",{});var Ywt=s(A1e);O2r=r(Ywt,"funnel"),Ywt.forEach(t),V2r=r(LBe," \u2014 "),wH=n(LBe,"A",{href:!0});var Kwt=s(wH);X2r=r(Kwt,"TFFunnelForPreTraining"),Kwt.forEach(t),z2r=r(LBe," (Funnel Transformer model)"),LBe.forEach(t),W2r=i(le),BE=n(le,"LI",{});var xBe=s(BE);y1e=n(xBe,"STRONG",{});var Zwt=s(y1e);Q2r=r(Zwt,"gpt2"),Zwt.forEach(t),H2r=r(xBe," \u2014 "),AH=n(xBe,"A",{href:!0});var e0t=s(AH);U2r=r(e0t,"TFGPT2LMHeadModel"),e0t.forEach(t),J2r=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),Y2r=i(le),IE=n(le,"LI",{});var $Be=s(IE);L1e=n($Be,"STRONG",{});var o0t=s(L1e);K2r=r(o0t,"layoutlm"),o0t.forEach(t),Z2r=r($Be," \u2014 "),yH=n($Be,"A",{href:!0});var r0t=s(yH);evr=r(r0t,"TFLayoutLMForMaskedLM"),r0t.forEach(t),ovr=r($Be," (LayoutLM model)"),$Be.forEach(t),rvr=i(le),NE=n(le,"LI",{});var kBe=s(NE);x1e=n(kBe,"STRONG",{});var t0t=s(x1e);tvr=r(t0t,"lxmert"),t0t.forEach(t),avr=r(kBe," \u2014 "),LH=n(kBe,"A",{href:!0});var a0t=s(LH);nvr=r(a0t,"TFLxmertForPreTraining"),a0t.forEach(t),svr=r(kBe," (LXMERT model)"),kBe.forEach(t),lvr=i(le),qE=n(le,"LI",{});var SBe=s(qE);$1e=n(SBe,"STRONG",{});var n0t=s($1e);ivr=r(n0t,"mobilebert"),n0t.forEach(t),dvr=r(SBe," \u2014 "),xH=n(SBe,"A",{href:!0});var s0t=s(xH);cvr=r(s0t,"TFMobileBertForPreTraining"),s0t.forEach(t),mvr=r(SBe," (MobileBERT model)"),SBe.forEach(t),fvr=i(le),jE=n(le,"LI",{});var RBe=s(jE);k1e=n(RBe,"STRONG",{});var l0t=s(k1e);gvr=r(l0t,"mpnet"),l0t.forEach(t),hvr=r(RBe," \u2014 "),$H=n(RBe,"A",{href:!0});var i0t=s($H);uvr=r(i0t,"TFMPNetForMaskedLM"),i0t.forEach(t),pvr=r(RBe," (MPNet model)"),RBe.forEach(t),_vr=i(le),DE=n(le,"LI",{});var PBe=s(DE);S1e=n(PBe,"STRONG",{});var d0t=s(S1e);bvr=r(d0t,"openai-gpt"),d0t.forEach(t),vvr=r(PBe," \u2014 "),kH=n(PBe,"A",{href:!0});var c0t=s(kH);Fvr=r(c0t,"TFOpenAIGPTLMHeadModel"),c0t.forEach(t),Tvr=r(PBe," (OpenAI GPT model)"),PBe.forEach(t),Mvr=i(le),GE=n(le,"LI",{});var BBe=s(GE);R1e=n(BBe,"STRONG",{});var m0t=s(R1e);Evr=r(m0t,"roberta"),m0t.forEach(t),Cvr=r(BBe," \u2014 "),SH=n(BBe,"A",{href:!0});var f0t=s(SH);wvr=r(f0t,"TFRobertaForMaskedLM"),f0t.forEach(t),Avr=r(BBe," (RoBERTa model)"),BBe.forEach(t),yvr=i(le),OE=n(le,"LI",{});var IBe=s(OE);P1e=n(IBe,"STRONG",{});var g0t=s(P1e);Lvr=r(g0t,"t5"),g0t.forEach(t),xvr=r(IBe," \u2014 "),RH=n(IBe,"A",{href:!0});var h0t=s(RH);$vr=r(h0t,"TFT5ForConditionalGeneration"),h0t.forEach(t),kvr=r(IBe," (T5 model)"),IBe.forEach(t),Svr=i(le),VE=n(le,"LI",{});var NBe=s(VE);B1e=n(NBe,"STRONG",{});var u0t=s(B1e);Rvr=r(u0t,"tapas"),u0t.forEach(t),Pvr=r(NBe," \u2014 "),PH=n(NBe,"A",{href:!0});var p0t=s(PH);Bvr=r(p0t,"TFTapasForMaskedLM"),p0t.forEach(t),Ivr=r(NBe," (TAPAS model)"),NBe.forEach(t),Nvr=i(le),XE=n(le,"LI",{});var qBe=s(XE);I1e=n(qBe,"STRONG",{});var _0t=s(I1e);qvr=r(_0t,"transfo-xl"),_0t.forEach(t),jvr=r(qBe," \u2014 "),BH=n(qBe,"A",{href:!0});var b0t=s(BH);Dvr=r(b0t,"TFTransfoXLLMHeadModel"),b0t.forEach(t),Gvr=r(qBe," (Transformer-XL model)"),qBe.forEach(t),Ovr=i(le),zE=n(le,"LI",{});var jBe=s(zE);N1e=n(jBe,"STRONG",{});var v0t=s(N1e);Vvr=r(v0t,"vit_mae"),v0t.forEach(t),Xvr=r(jBe," \u2014 "),IH=n(jBe,"A",{href:!0});var F0t=s(IH);zvr=r(F0t,"TFViTMAEForPreTraining"),F0t.forEach(t),Wvr=r(jBe," (ViTMAE model)"),jBe.forEach(t),Qvr=i(le),WE=n(le,"LI",{});var DBe=s(WE);q1e=n(DBe,"STRONG",{});var T0t=s(q1e);Hvr=r(T0t,"xlm"),T0t.forEach(t),Uvr=r(DBe," \u2014 "),NH=n(DBe,"A",{href:!0});var M0t=s(NH);Jvr=r(M0t,"TFXLMWithLMHeadModel"),M0t.forEach(t),Yvr=r(DBe," (XLM model)"),DBe.forEach(t),Kvr=i(le),QE=n(le,"LI",{});var GBe=s(QE);j1e=n(GBe,"STRONG",{});var E0t=s(j1e);Zvr=r(E0t,"xlm-roberta"),E0t.forEach(t),eFr=r(GBe," \u2014 "),qH=n(GBe,"A",{href:!0});var C0t=s(qH);oFr=r(C0t,"TFXLMRobertaForMaskedLM"),C0t.forEach(t),rFr=r(GBe," (XLM-RoBERTa model)"),GBe.forEach(t),tFr=i(le),HE=n(le,"LI",{});var OBe=s(HE);D1e=n(OBe,"STRONG",{});var w0t=s(D1e);aFr=r(w0t,"xlnet"),w0t.forEach(t),nFr=r(OBe," \u2014 "),jH=n(OBe,"A",{href:!0});var A0t=s(jH);sFr=r(A0t,"TFXLNetLMHeadModel"),A0t.forEach(t),lFr=r(OBe," (XLNet model)"),OBe.forEach(t),le.forEach(t),iFr=i(Cl),T(UE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),AGe=i(m),ac=n(m,"H2",{class:!0});var PVe=s(ac);JE=n(PVe,"A",{id:!0,class:!0,href:!0});var y0t=s(JE);G1e=n(y0t,"SPAN",{});var L0t=s(G1e);T(s9.$$.fragment,L0t),L0t.forEach(t),y0t.forEach(t),dFr=i(PVe),O1e=n(PVe,"SPAN",{});var x0t=s(O1e);cFr=r(x0t,"TFAutoModelForCausalLM"),x0t.forEach(t),PVe.forEach(t),yGe=i(m),or=n(m,"DIV",{class:!0});var wl=s(or);T(l9.$$.fragment,wl),mFr=i(wl),nc=n(wl,"P",{});var $oe=s(nc);fFr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DH=n($oe,"A",{href:!0});var $0t=s(DH);gFr=r($0t,"from_pretrained()"),$0t.forEach(t),hFr=r($oe," class method or the "),GH=n($oe,"A",{href:!0});var k0t=s(GH);uFr=r(k0t,"from_config()"),k0t.forEach(t),pFr=r($oe,` class
method.`),$oe.forEach(t),_Fr=i(wl),i9=n(wl,"P",{});var BVe=s(i9);bFr=r(BVe,"This class cannot be instantiated directly using "),V1e=n(BVe,"CODE",{});var S0t=s(V1e);vFr=r(S0t,"__init__()"),S0t.forEach(t),FFr=r(BVe," (throws an error)."),BVe.forEach(t),TFr=i(wl),St=n(wl,"DIV",{class:!0});var my=s(St);T(d9.$$.fragment,my),MFr=i(my),X1e=n(my,"P",{});var R0t=s(X1e);EFr=r(R0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R0t.forEach(t),CFr=i(my),sc=n(my,"P",{});var koe=s(sc);wFr=r(koe,`Note:
Loading a model from its configuration file does `),z1e=n(koe,"STRONG",{});var P0t=s(z1e);AFr=r(P0t,"not"),P0t.forEach(t),yFr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(koe,"A",{href:!0});var B0t=s(OH);LFr=r(B0t,"from_pretrained()"),B0t.forEach(t),xFr=r(koe," to load the model weights."),koe.forEach(t),$Fr=i(my),T(YE.$$.fragment,my),my.forEach(t),kFr=i(wl),xr=n(wl,"DIV",{class:!0});var Al=s(xr);T(c9.$$.fragment,Al),SFr=i(Al),W1e=n(Al,"P",{});var I0t=s(W1e);RFr=r(I0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I0t.forEach(t),PFr=i(Al),nn=n(Al,"P",{});var fy=s(nn);BFr=r(fy,"The model class to instantiate is selected based on the "),Q1e=n(fy,"CODE",{});var N0t=s(Q1e);IFr=r(N0t,"model_type"),N0t.forEach(t),NFr=r(fy,` property of the config object (either
passed as an argument or loaded from `),H1e=n(fy,"CODE",{});var q0t=s(H1e);qFr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),jFr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(fy,"CODE",{});var j0t=s(U1e);DFr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),GFr=r(fy,":"),fy.forEach(t),OFr=i(Al),Me=n(Al,"UL",{});var Ce=s(Me);KE=n(Ce,"LI",{});var VBe=s(KE);J1e=n(VBe,"STRONG",{});var D0t=s(J1e);VFr=r(D0t,"bert"),D0t.forEach(t),XFr=r(VBe," \u2014 "),VH=n(VBe,"A",{href:!0});var G0t=s(VH);zFr=r(G0t,"TFBertLMHeadModel"),G0t.forEach(t),WFr=r(VBe," (BERT model)"),VBe.forEach(t),QFr=i(Ce),ZE=n(Ce,"LI",{});var XBe=s(ZE);Y1e=n(XBe,"STRONG",{});var O0t=s(Y1e);HFr=r(O0t,"camembert"),O0t.forEach(t),UFr=r(XBe," \u2014 "),XH=n(XBe,"A",{href:!0});var V0t=s(XH);JFr=r(V0t,"TFCamembertForCausalLM"),V0t.forEach(t),YFr=r(XBe," (CamemBERT model)"),XBe.forEach(t),KFr=i(Ce),eC=n(Ce,"LI",{});var zBe=s(eC);K1e=n(zBe,"STRONG",{});var X0t=s(K1e);ZFr=r(X0t,"ctrl"),X0t.forEach(t),e1r=r(zBe," \u2014 "),zH=n(zBe,"A",{href:!0});var z0t=s(zH);o1r=r(z0t,"TFCTRLLMHeadModel"),z0t.forEach(t),r1r=r(zBe," (CTRL model)"),zBe.forEach(t),t1r=i(Ce),oC=n(Ce,"LI",{});var WBe=s(oC);Z1e=n(WBe,"STRONG",{});var W0t=s(Z1e);a1r=r(W0t,"gpt2"),W0t.forEach(t),n1r=r(WBe," \u2014 "),WH=n(WBe,"A",{href:!0});var Q0t=s(WH);s1r=r(Q0t,"TFGPT2LMHeadModel"),Q0t.forEach(t),l1r=r(WBe," (OpenAI GPT-2 model)"),WBe.forEach(t),i1r=i(Ce),rC=n(Ce,"LI",{});var QBe=s(rC);eTe=n(QBe,"STRONG",{});var H0t=s(eTe);d1r=r(H0t,"gptj"),H0t.forEach(t),c1r=r(QBe," \u2014 "),QH=n(QBe,"A",{href:!0});var U0t=s(QH);m1r=r(U0t,"TFGPTJForCausalLM"),U0t.forEach(t),f1r=r(QBe," (GPT-J model)"),QBe.forEach(t),g1r=i(Ce),tC=n(Ce,"LI",{});var HBe=s(tC);oTe=n(HBe,"STRONG",{});var J0t=s(oTe);h1r=r(J0t,"openai-gpt"),J0t.forEach(t),u1r=r(HBe," \u2014 "),HH=n(HBe,"A",{href:!0});var Y0t=s(HH);p1r=r(Y0t,"TFOpenAIGPTLMHeadModel"),Y0t.forEach(t),_1r=r(HBe," (OpenAI GPT model)"),HBe.forEach(t),b1r=i(Ce),aC=n(Ce,"LI",{});var UBe=s(aC);rTe=n(UBe,"STRONG",{});var K0t=s(rTe);v1r=r(K0t,"opt"),K0t.forEach(t),F1r=r(UBe," \u2014 "),UH=n(UBe,"A",{href:!0});var Z0t=s(UH);T1r=r(Z0t,"TFOPTForCausalLM"),Z0t.forEach(t),M1r=r(UBe," (OPT model)"),UBe.forEach(t),E1r=i(Ce),nC=n(Ce,"LI",{});var JBe=s(nC);tTe=n(JBe,"STRONG",{});var eAt=s(tTe);C1r=r(eAt,"rembert"),eAt.forEach(t),w1r=r(JBe," \u2014 "),JH=n(JBe,"A",{href:!0});var oAt=s(JH);A1r=r(oAt,"TFRemBertForCausalLM"),oAt.forEach(t),y1r=r(JBe," (RemBERT model)"),JBe.forEach(t),L1r=i(Ce),sC=n(Ce,"LI",{});var YBe=s(sC);aTe=n(YBe,"STRONG",{});var rAt=s(aTe);x1r=r(rAt,"roberta"),rAt.forEach(t),$1r=r(YBe," \u2014 "),YH=n(YBe,"A",{href:!0});var tAt=s(YH);k1r=r(tAt,"TFRobertaForCausalLM"),tAt.forEach(t),S1r=r(YBe," (RoBERTa model)"),YBe.forEach(t),R1r=i(Ce),lC=n(Ce,"LI",{});var KBe=s(lC);nTe=n(KBe,"STRONG",{});var aAt=s(nTe);P1r=r(aAt,"roformer"),aAt.forEach(t),B1r=r(KBe," \u2014 "),KH=n(KBe,"A",{href:!0});var nAt=s(KH);I1r=r(nAt,"TFRoFormerForCausalLM"),nAt.forEach(t),N1r=r(KBe," (RoFormer model)"),KBe.forEach(t),q1r=i(Ce),iC=n(Ce,"LI",{});var ZBe=s(iC);sTe=n(ZBe,"STRONG",{});var sAt=s(sTe);j1r=r(sAt,"transfo-xl"),sAt.forEach(t),D1r=r(ZBe," \u2014 "),ZH=n(ZBe,"A",{href:!0});var lAt=s(ZH);G1r=r(lAt,"TFTransfoXLLMHeadModel"),lAt.forEach(t),O1r=r(ZBe," (Transformer-XL model)"),ZBe.forEach(t),V1r=i(Ce),dC=n(Ce,"LI",{});var eIe=s(dC);lTe=n(eIe,"STRONG",{});var iAt=s(lTe);X1r=r(iAt,"xlm"),iAt.forEach(t),z1r=r(eIe," \u2014 "),eU=n(eIe,"A",{href:!0});var dAt=s(eU);W1r=r(dAt,"TFXLMWithLMHeadModel"),dAt.forEach(t),Q1r=r(eIe," (XLM model)"),eIe.forEach(t),H1r=i(Ce),cC=n(Ce,"LI",{});var oIe=s(cC);iTe=n(oIe,"STRONG",{});var cAt=s(iTe);U1r=r(cAt,"xlnet"),cAt.forEach(t),J1r=r(oIe," \u2014 "),oU=n(oIe,"A",{href:!0});var mAt=s(oU);Y1r=r(mAt,"TFXLNetLMHeadModel"),mAt.forEach(t),K1r=r(oIe," (XLNet model)"),oIe.forEach(t),Ce.forEach(t),Z1r=i(Al),T(mC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),LGe=i(m),lc=n(m,"H2",{class:!0});var IVe=s(lc);fC=n(IVe,"A",{id:!0,class:!0,href:!0});var fAt=s(fC);dTe=n(fAt,"SPAN",{});var gAt=s(dTe);T(m9.$$.fragment,gAt),gAt.forEach(t),fAt.forEach(t),eTr=i(IVe),cTe=n(IVe,"SPAN",{});var hAt=s(cTe);oTr=r(hAt,"TFAutoModelForImageClassification"),hAt.forEach(t),IVe.forEach(t),xGe=i(m),rr=n(m,"DIV",{class:!0});var yl=s(rr);T(f9.$$.fragment,yl),rTr=i(yl),ic=n(yl,"P",{});var Soe=s(ic);tTr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rU=n(Soe,"A",{href:!0});var uAt=s(rU);aTr=r(uAt,"from_pretrained()"),uAt.forEach(t),nTr=r(Soe," class method or the "),tU=n(Soe,"A",{href:!0});var pAt=s(tU);sTr=r(pAt,"from_config()"),pAt.forEach(t),lTr=r(Soe,` class
method.`),Soe.forEach(t),iTr=i(yl),g9=n(yl,"P",{});var NVe=s(g9);dTr=r(NVe,"This class cannot be instantiated directly using "),mTe=n(NVe,"CODE",{});var _At=s(mTe);cTr=r(_At,"__init__()"),_At.forEach(t),mTr=r(NVe," (throws an error)."),NVe.forEach(t),fTr=i(yl),Rt=n(yl,"DIV",{class:!0});var gy=s(Rt);T(h9.$$.fragment,gy),gTr=i(gy),fTe=n(gy,"P",{});var bAt=s(fTe);hTr=r(bAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bAt.forEach(t),uTr=i(gy),dc=n(gy,"P",{});var Roe=s(dc);pTr=r(Roe,`Note:
Loading a model from its configuration file does `),gTe=n(Roe,"STRONG",{});var vAt=s(gTe);_Tr=r(vAt,"not"),vAt.forEach(t),bTr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Roe,"A",{href:!0});var FAt=s(aU);vTr=r(FAt,"from_pretrained()"),FAt.forEach(t),FTr=r(Roe," to load the model weights."),Roe.forEach(t),TTr=i(gy),T(gC.$$.fragment,gy),gy.forEach(t),MTr=i(yl),$r=n(yl,"DIV",{class:!0});var Ll=s($r);T(u9.$$.fragment,Ll),ETr=i(Ll),hTe=n(Ll,"P",{});var TAt=s(hTe);CTr=r(TAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TAt.forEach(t),wTr=i(Ll),sn=n(Ll,"P",{});var hy=s(sn);ATr=r(hy,"The model class to instantiate is selected based on the "),uTe=n(hy,"CODE",{});var MAt=s(uTe);yTr=r(MAt,"model_type"),MAt.forEach(t),LTr=r(hy,` property of the config object (either
passed as an argument or loaded from `),pTe=n(hy,"CODE",{});var EAt=s(pTe);xTr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),$Tr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(hy,"CODE",{});var CAt=s(_Te);kTr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),STr=r(hy,":"),hy.forEach(t),RTr=i(Ll),ln=n(Ll,"UL",{});var uy=s(ln);hC=n(uy,"LI",{});var rIe=s(hC);bTe=n(rIe,"STRONG",{});var wAt=s(bTe);PTr=r(wAt,"convnext"),wAt.forEach(t),BTr=r(rIe," \u2014 "),nU=n(rIe,"A",{href:!0});var AAt=s(nU);ITr=r(AAt,"TFConvNextForImageClassification"),AAt.forEach(t),NTr=r(rIe," (ConvNeXT model)"),rIe.forEach(t),qTr=i(uy),uC=n(uy,"LI",{});var tIe=s(uC);vTe=n(tIe,"STRONG",{});var yAt=s(vTe);jTr=r(yAt,"data2vec-vision"),yAt.forEach(t),DTr=r(tIe," \u2014 "),sU=n(tIe,"A",{href:!0});var LAt=s(sU);GTr=r(LAt,"TFData2VecVisionForImageClassification"),LAt.forEach(t),OTr=r(tIe," (Data2VecVision model)"),tIe.forEach(t),VTr=i(uy),pC=n(uy,"LI",{});var aIe=s(pC);FTe=n(aIe,"STRONG",{});var xAt=s(FTe);XTr=r(xAt,"swin"),xAt.forEach(t),zTr=r(aIe," \u2014 "),lU=n(aIe,"A",{href:!0});var $At=s(lU);WTr=r($At,"TFSwinForImageClassification"),$At.forEach(t),QTr=r(aIe," (Swin Transformer model)"),aIe.forEach(t),HTr=i(uy),_C=n(uy,"LI",{});var nIe=s(_C);TTe=n(nIe,"STRONG",{});var kAt=s(TTe);UTr=r(kAt,"vit"),kAt.forEach(t),JTr=r(nIe," \u2014 "),iU=n(nIe,"A",{href:!0});var SAt=s(iU);YTr=r(SAt,"TFViTForImageClassification"),SAt.forEach(t),KTr=r(nIe," (ViT model)"),nIe.forEach(t),uy.forEach(t),ZTr=i(Ll),T(bC.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),$Ge=i(m),cc=n(m,"H2",{class:!0});var qVe=s(cc);vC=n(qVe,"A",{id:!0,class:!0,href:!0});var RAt=s(vC);MTe=n(RAt,"SPAN",{});var PAt=s(MTe);T(p9.$$.fragment,PAt),PAt.forEach(t),RAt.forEach(t),eMr=i(qVe),ETe=n(qVe,"SPAN",{});var BAt=s(ETe);oMr=r(BAt,"TFAutoModelForMaskedLM"),BAt.forEach(t),qVe.forEach(t),kGe=i(m),tr=n(m,"DIV",{class:!0});var xl=s(tr);T(_9.$$.fragment,xl),rMr=i(xl),mc=n(xl,"P",{});var Poe=s(mc);tMr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dU=n(Poe,"A",{href:!0});var IAt=s(dU);aMr=r(IAt,"from_pretrained()"),IAt.forEach(t),nMr=r(Poe," class method or the "),cU=n(Poe,"A",{href:!0});var NAt=s(cU);sMr=r(NAt,"from_config()"),NAt.forEach(t),lMr=r(Poe,` class
method.`),Poe.forEach(t),iMr=i(xl),b9=n(xl,"P",{});var jVe=s(b9);dMr=r(jVe,"This class cannot be instantiated directly using "),CTe=n(jVe,"CODE",{});var qAt=s(CTe);cMr=r(qAt,"__init__()"),qAt.forEach(t),mMr=r(jVe," (throws an error)."),jVe.forEach(t),fMr=i(xl),Pt=n(xl,"DIV",{class:!0});var py=s(Pt);T(v9.$$.fragment,py),gMr=i(py),wTe=n(py,"P",{});var jAt=s(wTe);hMr=r(jAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jAt.forEach(t),uMr=i(py),fc=n(py,"P",{});var Boe=s(fc);pMr=r(Boe,`Note:
Loading a model from its configuration file does `),ATe=n(Boe,"STRONG",{});var DAt=s(ATe);_Mr=r(DAt,"not"),DAt.forEach(t),bMr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(Boe,"A",{href:!0});var GAt=s(mU);vMr=r(GAt,"from_pretrained()"),GAt.forEach(t),FMr=r(Boe," to load the model weights."),Boe.forEach(t),TMr=i(py),T(FC.$$.fragment,py),py.forEach(t),MMr=i(xl),kr=n(xl,"DIV",{class:!0});var $l=s(kr);T(F9.$$.fragment,$l),EMr=i($l),yTe=n($l,"P",{});var OAt=s(yTe);CMr=r(OAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),OAt.forEach(t),wMr=i($l),dn=n($l,"P",{});var _y=s(dn);AMr=r(_y,"The model class to instantiate is selected based on the "),LTe=n(_y,"CODE",{});var VAt=s(LTe);yMr=r(VAt,"model_type"),VAt.forEach(t),LMr=r(_y,` property of the config object (either
passed as an argument or loaded from `),xTe=n(_y,"CODE",{});var XAt=s(xTe);xMr=r(XAt,"pretrained_model_name_or_path"),XAt.forEach(t),$Mr=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(_y,"CODE",{});var zAt=s($Te);kMr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),SMr=r(_y,":"),_y.forEach(t),RMr=i($l),ie=n($l,"UL",{});var me=s(ie);TC=n(me,"LI",{});var sIe=s(TC);kTe=n(sIe,"STRONG",{});var WAt=s(kTe);PMr=r(WAt,"albert"),WAt.forEach(t),BMr=r(sIe," \u2014 "),fU=n(sIe,"A",{href:!0});var QAt=s(fU);IMr=r(QAt,"TFAlbertForMaskedLM"),QAt.forEach(t),NMr=r(sIe," (ALBERT model)"),sIe.forEach(t),qMr=i(me),MC=n(me,"LI",{});var lIe=s(MC);STe=n(lIe,"STRONG",{});var HAt=s(STe);jMr=r(HAt,"bert"),HAt.forEach(t),DMr=r(lIe," \u2014 "),gU=n(lIe,"A",{href:!0});var UAt=s(gU);GMr=r(UAt,"TFBertForMaskedLM"),UAt.forEach(t),OMr=r(lIe," (BERT model)"),lIe.forEach(t),VMr=i(me),EC=n(me,"LI",{});var iIe=s(EC);RTe=n(iIe,"STRONG",{});var JAt=s(RTe);XMr=r(JAt,"camembert"),JAt.forEach(t),zMr=r(iIe," \u2014 "),hU=n(iIe,"A",{href:!0});var YAt=s(hU);WMr=r(YAt,"TFCamembertForMaskedLM"),YAt.forEach(t),QMr=r(iIe," (CamemBERT model)"),iIe.forEach(t),HMr=i(me),CC=n(me,"LI",{});var dIe=s(CC);PTe=n(dIe,"STRONG",{});var KAt=s(PTe);UMr=r(KAt,"convbert"),KAt.forEach(t),JMr=r(dIe," \u2014 "),uU=n(dIe,"A",{href:!0});var ZAt=s(uU);YMr=r(ZAt,"TFConvBertForMaskedLM"),ZAt.forEach(t),KMr=r(dIe," (ConvBERT model)"),dIe.forEach(t),ZMr=i(me),wC=n(me,"LI",{});var cIe=s(wC);BTe=n(cIe,"STRONG",{});var e6t=s(BTe);e4r=r(e6t,"deberta"),e6t.forEach(t),o4r=r(cIe," \u2014 "),pU=n(cIe,"A",{href:!0});var o6t=s(pU);r4r=r(o6t,"TFDebertaForMaskedLM"),o6t.forEach(t),t4r=r(cIe," (DeBERTa model)"),cIe.forEach(t),a4r=i(me),AC=n(me,"LI",{});var mIe=s(AC);ITe=n(mIe,"STRONG",{});var r6t=s(ITe);n4r=r(r6t,"deberta-v2"),r6t.forEach(t),s4r=r(mIe," \u2014 "),_U=n(mIe,"A",{href:!0});var t6t=s(_U);l4r=r(t6t,"TFDebertaV2ForMaskedLM"),t6t.forEach(t),i4r=r(mIe," (DeBERTa-v2 model)"),mIe.forEach(t),d4r=i(me),yC=n(me,"LI",{});var fIe=s(yC);NTe=n(fIe,"STRONG",{});var a6t=s(NTe);c4r=r(a6t,"distilbert"),a6t.forEach(t),m4r=r(fIe," \u2014 "),bU=n(fIe,"A",{href:!0});var n6t=s(bU);f4r=r(n6t,"TFDistilBertForMaskedLM"),n6t.forEach(t),g4r=r(fIe," (DistilBERT model)"),fIe.forEach(t),h4r=i(me),LC=n(me,"LI",{});var gIe=s(LC);qTe=n(gIe,"STRONG",{});var s6t=s(qTe);u4r=r(s6t,"electra"),s6t.forEach(t),p4r=r(gIe," \u2014 "),vU=n(gIe,"A",{href:!0});var l6t=s(vU);_4r=r(l6t,"TFElectraForMaskedLM"),l6t.forEach(t),b4r=r(gIe," (ELECTRA model)"),gIe.forEach(t),v4r=i(me),xC=n(me,"LI",{});var hIe=s(xC);jTe=n(hIe,"STRONG",{});var i6t=s(jTe);F4r=r(i6t,"flaubert"),i6t.forEach(t),T4r=r(hIe," \u2014 "),FU=n(hIe,"A",{href:!0});var d6t=s(FU);M4r=r(d6t,"TFFlaubertWithLMHeadModel"),d6t.forEach(t),E4r=r(hIe," (FlauBERT model)"),hIe.forEach(t),C4r=i(me),$C=n(me,"LI",{});var uIe=s($C);DTe=n(uIe,"STRONG",{});var c6t=s(DTe);w4r=r(c6t,"funnel"),c6t.forEach(t),A4r=r(uIe," \u2014 "),TU=n(uIe,"A",{href:!0});var m6t=s(TU);y4r=r(m6t,"TFFunnelForMaskedLM"),m6t.forEach(t),L4r=r(uIe," (Funnel Transformer model)"),uIe.forEach(t),x4r=i(me),kC=n(me,"LI",{});var pIe=s(kC);GTe=n(pIe,"STRONG",{});var f6t=s(GTe);$4r=r(f6t,"layoutlm"),f6t.forEach(t),k4r=r(pIe," \u2014 "),MU=n(pIe,"A",{href:!0});var g6t=s(MU);S4r=r(g6t,"TFLayoutLMForMaskedLM"),g6t.forEach(t),R4r=r(pIe," (LayoutLM model)"),pIe.forEach(t),P4r=i(me),SC=n(me,"LI",{});var _Ie=s(SC);OTe=n(_Ie,"STRONG",{});var h6t=s(OTe);B4r=r(h6t,"longformer"),h6t.forEach(t),I4r=r(_Ie," \u2014 "),EU=n(_Ie,"A",{href:!0});var u6t=s(EU);N4r=r(u6t,"TFLongformerForMaskedLM"),u6t.forEach(t),q4r=r(_Ie," (Longformer model)"),_Ie.forEach(t),j4r=i(me),RC=n(me,"LI",{});var bIe=s(RC);VTe=n(bIe,"STRONG",{});var p6t=s(VTe);D4r=r(p6t,"mobilebert"),p6t.forEach(t),G4r=r(bIe," \u2014 "),CU=n(bIe,"A",{href:!0});var _6t=s(CU);O4r=r(_6t,"TFMobileBertForMaskedLM"),_6t.forEach(t),V4r=r(bIe," (MobileBERT model)"),bIe.forEach(t),X4r=i(me),PC=n(me,"LI",{});var vIe=s(PC);XTe=n(vIe,"STRONG",{});var b6t=s(XTe);z4r=r(b6t,"mpnet"),b6t.forEach(t),W4r=r(vIe," \u2014 "),wU=n(vIe,"A",{href:!0});var v6t=s(wU);Q4r=r(v6t,"TFMPNetForMaskedLM"),v6t.forEach(t),H4r=r(vIe," (MPNet model)"),vIe.forEach(t),U4r=i(me),BC=n(me,"LI",{});var FIe=s(BC);zTe=n(FIe,"STRONG",{});var F6t=s(zTe);J4r=r(F6t,"rembert"),F6t.forEach(t),Y4r=r(FIe," \u2014 "),AU=n(FIe,"A",{href:!0});var T6t=s(AU);K4r=r(T6t,"TFRemBertForMaskedLM"),T6t.forEach(t),Z4r=r(FIe," (RemBERT model)"),FIe.forEach(t),eEr=i(me),IC=n(me,"LI",{});var TIe=s(IC);WTe=n(TIe,"STRONG",{});var M6t=s(WTe);oEr=r(M6t,"roberta"),M6t.forEach(t),rEr=r(TIe," \u2014 "),yU=n(TIe,"A",{href:!0});var E6t=s(yU);tEr=r(E6t,"TFRobertaForMaskedLM"),E6t.forEach(t),aEr=r(TIe," (RoBERTa model)"),TIe.forEach(t),nEr=i(me),NC=n(me,"LI",{});var MIe=s(NC);QTe=n(MIe,"STRONG",{});var C6t=s(QTe);sEr=r(C6t,"roformer"),C6t.forEach(t),lEr=r(MIe," \u2014 "),LU=n(MIe,"A",{href:!0});var w6t=s(LU);iEr=r(w6t,"TFRoFormerForMaskedLM"),w6t.forEach(t),dEr=r(MIe," (RoFormer model)"),MIe.forEach(t),cEr=i(me),qC=n(me,"LI",{});var EIe=s(qC);HTe=n(EIe,"STRONG",{});var A6t=s(HTe);mEr=r(A6t,"tapas"),A6t.forEach(t),fEr=r(EIe," \u2014 "),xU=n(EIe,"A",{href:!0});var y6t=s(xU);gEr=r(y6t,"TFTapasForMaskedLM"),y6t.forEach(t),hEr=r(EIe," (TAPAS model)"),EIe.forEach(t),uEr=i(me),jC=n(me,"LI",{});var CIe=s(jC);UTe=n(CIe,"STRONG",{});var L6t=s(UTe);pEr=r(L6t,"xlm"),L6t.forEach(t),_Er=r(CIe," \u2014 "),$U=n(CIe,"A",{href:!0});var x6t=s($U);bEr=r(x6t,"TFXLMWithLMHeadModel"),x6t.forEach(t),vEr=r(CIe," (XLM model)"),CIe.forEach(t),FEr=i(me),DC=n(me,"LI",{});var wIe=s(DC);JTe=n(wIe,"STRONG",{});var $6t=s(JTe);TEr=r($6t,"xlm-roberta"),$6t.forEach(t),MEr=r(wIe," \u2014 "),kU=n(wIe,"A",{href:!0});var k6t=s(kU);EEr=r(k6t,"TFXLMRobertaForMaskedLM"),k6t.forEach(t),CEr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),me.forEach(t),wEr=i($l),T(GC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),SGe=i(m),gc=n(m,"H2",{class:!0});var DVe=s(gc);OC=n(DVe,"A",{id:!0,class:!0,href:!0});var S6t=s(OC);YTe=n(S6t,"SPAN",{});var R6t=s(YTe);T(T9.$$.fragment,R6t),R6t.forEach(t),S6t.forEach(t),AEr=i(DVe),KTe=n(DVe,"SPAN",{});var P6t=s(KTe);yEr=r(P6t,"TFAutoModelForSeq2SeqLM"),P6t.forEach(t),DVe.forEach(t),RGe=i(m),ar=n(m,"DIV",{class:!0});var kl=s(ar);T(M9.$$.fragment,kl),LEr=i(kl),hc=n(kl,"P",{});var Ioe=s(hc);xEr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SU=n(Ioe,"A",{href:!0});var B6t=s(SU);$Er=r(B6t,"from_pretrained()"),B6t.forEach(t),kEr=r(Ioe," class method or the "),RU=n(Ioe,"A",{href:!0});var I6t=s(RU);SEr=r(I6t,"from_config()"),I6t.forEach(t),REr=r(Ioe,` class
method.`),Ioe.forEach(t),PEr=i(kl),E9=n(kl,"P",{});var GVe=s(E9);BEr=r(GVe,"This class cannot be instantiated directly using "),ZTe=n(GVe,"CODE",{});var N6t=s(ZTe);IEr=r(N6t,"__init__()"),N6t.forEach(t),NEr=r(GVe," (throws an error)."),GVe.forEach(t),qEr=i(kl),Bt=n(kl,"DIV",{class:!0});var by=s(Bt);T(C9.$$.fragment,by),jEr=i(by),eMe=n(by,"P",{});var q6t=s(eMe);DEr=r(q6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q6t.forEach(t),GEr=i(by),uc=n(by,"P",{});var Noe=s(uc);OEr=r(Noe,`Note:
Loading a model from its configuration file does `),oMe=n(Noe,"STRONG",{});var j6t=s(oMe);VEr=r(j6t,"not"),j6t.forEach(t),XEr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(Noe,"A",{href:!0});var D6t=s(PU);zEr=r(D6t,"from_pretrained()"),D6t.forEach(t),WEr=r(Noe," to load the model weights."),Noe.forEach(t),QEr=i(by),T(VC.$$.fragment,by),by.forEach(t),HEr=i(kl),Sr=n(kl,"DIV",{class:!0});var Sl=s(Sr);T(w9.$$.fragment,Sl),UEr=i(Sl),rMe=n(Sl,"P",{});var G6t=s(rMe);JEr=r(G6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),G6t.forEach(t),YEr=i(Sl),cn=n(Sl,"P",{});var vy=s(cn);KEr=r(vy,"The model class to instantiate is selected based on the "),tMe=n(vy,"CODE",{});var O6t=s(tMe);ZEr=r(O6t,"model_type"),O6t.forEach(t),eCr=r(vy,` property of the config object (either
passed as an argument or loaded from `),aMe=n(vy,"CODE",{});var V6t=s(aMe);oCr=r(V6t,"pretrained_model_name_or_path"),V6t.forEach(t),rCr=r(vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(vy,"CODE",{});var X6t=s(nMe);tCr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),aCr=r(vy,":"),vy.forEach(t),nCr=i(Sl),Le=n(Sl,"UL",{});var Ie=s(Le);XC=n(Ie,"LI",{});var AIe=s(XC);sMe=n(AIe,"STRONG",{});var z6t=s(sMe);sCr=r(z6t,"bart"),z6t.forEach(t),lCr=r(AIe," \u2014 "),BU=n(AIe,"A",{href:!0});var W6t=s(BU);iCr=r(W6t,"TFBartForConditionalGeneration"),W6t.forEach(t),dCr=r(AIe," (BART model)"),AIe.forEach(t),cCr=i(Ie),zC=n(Ie,"LI",{});var yIe=s(zC);lMe=n(yIe,"STRONG",{});var Q6t=s(lMe);mCr=r(Q6t,"blenderbot"),Q6t.forEach(t),fCr=r(yIe," \u2014 "),IU=n(yIe,"A",{href:!0});var H6t=s(IU);gCr=r(H6t,"TFBlenderbotForConditionalGeneration"),H6t.forEach(t),hCr=r(yIe," (Blenderbot model)"),yIe.forEach(t),uCr=i(Ie),WC=n(Ie,"LI",{});var LIe=s(WC);iMe=n(LIe,"STRONG",{});var U6t=s(iMe);pCr=r(U6t,"blenderbot-small"),U6t.forEach(t),_Cr=r(LIe," \u2014 "),NU=n(LIe,"A",{href:!0});var J6t=s(NU);bCr=r(J6t,"TFBlenderbotSmallForConditionalGeneration"),J6t.forEach(t),vCr=r(LIe," (BlenderbotSmall model)"),LIe.forEach(t),FCr=i(Ie),QC=n(Ie,"LI",{});var xIe=s(QC);dMe=n(xIe,"STRONG",{});var Y6t=s(dMe);TCr=r(Y6t,"encoder-decoder"),Y6t.forEach(t),MCr=r(xIe," \u2014 "),qU=n(xIe,"A",{href:!0});var K6t=s(qU);ECr=r(K6t,"TFEncoderDecoderModel"),K6t.forEach(t),CCr=r(xIe," (Encoder decoder model)"),xIe.forEach(t),wCr=i(Ie),HC=n(Ie,"LI",{});var $Ie=s(HC);cMe=n($Ie,"STRONG",{});var Z6t=s(cMe);ACr=r(Z6t,"led"),Z6t.forEach(t),yCr=r($Ie," \u2014 "),jU=n($Ie,"A",{href:!0});var eyt=s(jU);LCr=r(eyt,"TFLEDForConditionalGeneration"),eyt.forEach(t),xCr=r($Ie," (LED model)"),$Ie.forEach(t),$Cr=i(Ie),UC=n(Ie,"LI",{});var kIe=s(UC);mMe=n(kIe,"STRONG",{});var oyt=s(mMe);kCr=r(oyt,"marian"),oyt.forEach(t),SCr=r(kIe," \u2014 "),DU=n(kIe,"A",{href:!0});var ryt=s(DU);RCr=r(ryt,"TFMarianMTModel"),ryt.forEach(t),PCr=r(kIe," (Marian model)"),kIe.forEach(t),BCr=i(Ie),JC=n(Ie,"LI",{});var SIe=s(JC);fMe=n(SIe,"STRONG",{});var tyt=s(fMe);ICr=r(tyt,"mbart"),tyt.forEach(t),NCr=r(SIe," \u2014 "),GU=n(SIe,"A",{href:!0});var ayt=s(GU);qCr=r(ayt,"TFMBartForConditionalGeneration"),ayt.forEach(t),jCr=r(SIe," (mBART model)"),SIe.forEach(t),DCr=i(Ie),YC=n(Ie,"LI",{});var RIe=s(YC);gMe=n(RIe,"STRONG",{});var nyt=s(gMe);GCr=r(nyt,"mt5"),nyt.forEach(t),OCr=r(RIe," \u2014 "),OU=n(RIe,"A",{href:!0});var syt=s(OU);VCr=r(syt,"TFMT5ForConditionalGeneration"),syt.forEach(t),XCr=r(RIe," (MT5 model)"),RIe.forEach(t),zCr=i(Ie),KC=n(Ie,"LI",{});var PIe=s(KC);hMe=n(PIe,"STRONG",{});var lyt=s(hMe);WCr=r(lyt,"pegasus"),lyt.forEach(t),QCr=r(PIe," \u2014 "),VU=n(PIe,"A",{href:!0});var iyt=s(VU);HCr=r(iyt,"TFPegasusForConditionalGeneration"),iyt.forEach(t),UCr=r(PIe," (Pegasus model)"),PIe.forEach(t),JCr=i(Ie),ZC=n(Ie,"LI",{});var BIe=s(ZC);uMe=n(BIe,"STRONG",{});var dyt=s(uMe);YCr=r(dyt,"t5"),dyt.forEach(t),KCr=r(BIe," \u2014 "),XU=n(BIe,"A",{href:!0});var cyt=s(XU);ZCr=r(cyt,"TFT5ForConditionalGeneration"),cyt.forEach(t),e5r=r(BIe," (T5 model)"),BIe.forEach(t),Ie.forEach(t),o5r=i(Sl),T(e5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),PGe=i(m),pc=n(m,"H2",{class:!0});var OVe=s(pc);o5=n(OVe,"A",{id:!0,class:!0,href:!0});var myt=s(o5);pMe=n(myt,"SPAN",{});var fyt=s(pMe);T(A9.$$.fragment,fyt),fyt.forEach(t),myt.forEach(t),r5r=i(OVe),_Me=n(OVe,"SPAN",{});var gyt=s(_Me);t5r=r(gyt,"TFAutoModelForSequenceClassification"),gyt.forEach(t),OVe.forEach(t),BGe=i(m),nr=n(m,"DIV",{class:!0});var Rl=s(nr);T(y9.$$.fragment,Rl),a5r=i(Rl),_c=n(Rl,"P",{});var qoe=s(_c);n5r=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zU=n(qoe,"A",{href:!0});var hyt=s(zU);s5r=r(hyt,"from_pretrained()"),hyt.forEach(t),l5r=r(qoe," class method or the "),WU=n(qoe,"A",{href:!0});var uyt=s(WU);i5r=r(uyt,"from_config()"),uyt.forEach(t),d5r=r(qoe,` class
method.`),qoe.forEach(t),c5r=i(Rl),L9=n(Rl,"P",{});var VVe=s(L9);m5r=r(VVe,"This class cannot be instantiated directly using "),bMe=n(VVe,"CODE",{});var pyt=s(bMe);f5r=r(pyt,"__init__()"),pyt.forEach(t),g5r=r(VVe," (throws an error)."),VVe.forEach(t),h5r=i(Rl),It=n(Rl,"DIV",{class:!0});var Fy=s(It);T(x9.$$.fragment,Fy),u5r=i(Fy),vMe=n(Fy,"P",{});var _yt=s(vMe);p5r=r(_yt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_yt.forEach(t),_5r=i(Fy),bc=n(Fy,"P",{});var joe=s(bc);b5r=r(joe,`Note:
Loading a model from its configuration file does `),FMe=n(joe,"STRONG",{});var byt=s(FMe);v5r=r(byt,"not"),byt.forEach(t),F5r=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(joe,"A",{href:!0});var vyt=s(QU);T5r=r(vyt,"from_pretrained()"),vyt.forEach(t),M5r=r(joe," to load the model weights."),joe.forEach(t),E5r=i(Fy),T(r5.$$.fragment,Fy),Fy.forEach(t),C5r=i(Rl),Rr=n(Rl,"DIV",{class:!0});var Pl=s(Rr);T($9.$$.fragment,Pl),w5r=i(Pl),TMe=n(Pl,"P",{});var Fyt=s(TMe);A5r=r(Fyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fyt.forEach(t),y5r=i(Pl),mn=n(Pl,"P",{});var Ty=s(mn);L5r=r(Ty,"The model class to instantiate is selected based on the "),MMe=n(Ty,"CODE",{});var Tyt=s(MMe);x5r=r(Tyt,"model_type"),Tyt.forEach(t),$5r=r(Ty,` property of the config object (either
passed as an argument or loaded from `),EMe=n(Ty,"CODE",{});var Myt=s(EMe);k5r=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),S5r=r(Ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(Ty,"CODE",{});var Eyt=s(CMe);R5r=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),P5r=r(Ty,":"),Ty.forEach(t),B5r=i(Pl),re=n(Pl,"UL",{});var ae=s(re);t5=n(ae,"LI",{});var IIe=s(t5);wMe=n(IIe,"STRONG",{});var Cyt=s(wMe);I5r=r(Cyt,"albert"),Cyt.forEach(t),N5r=r(IIe," \u2014 "),HU=n(IIe,"A",{href:!0});var wyt=s(HU);q5r=r(wyt,"TFAlbertForSequenceClassification"),wyt.forEach(t),j5r=r(IIe," (ALBERT model)"),IIe.forEach(t),D5r=i(ae),a5=n(ae,"LI",{});var NIe=s(a5);AMe=n(NIe,"STRONG",{});var Ayt=s(AMe);G5r=r(Ayt,"bert"),Ayt.forEach(t),O5r=r(NIe," \u2014 "),UU=n(NIe,"A",{href:!0});var yyt=s(UU);V5r=r(yyt,"TFBertForSequenceClassification"),yyt.forEach(t),X5r=r(NIe," (BERT model)"),NIe.forEach(t),z5r=i(ae),n5=n(ae,"LI",{});var qIe=s(n5);yMe=n(qIe,"STRONG",{});var Lyt=s(yMe);W5r=r(Lyt,"camembert"),Lyt.forEach(t),Q5r=r(qIe," \u2014 "),JU=n(qIe,"A",{href:!0});var xyt=s(JU);H5r=r(xyt,"TFCamembertForSequenceClassification"),xyt.forEach(t),U5r=r(qIe," (CamemBERT model)"),qIe.forEach(t),J5r=i(ae),s5=n(ae,"LI",{});var jIe=s(s5);LMe=n(jIe,"STRONG",{});var $yt=s(LMe);Y5r=r($yt,"convbert"),$yt.forEach(t),K5r=r(jIe," \u2014 "),YU=n(jIe,"A",{href:!0});var kyt=s(YU);Z5r=r(kyt,"TFConvBertForSequenceClassification"),kyt.forEach(t),e3r=r(jIe," (ConvBERT model)"),jIe.forEach(t),o3r=i(ae),l5=n(ae,"LI",{});var DIe=s(l5);xMe=n(DIe,"STRONG",{});var Syt=s(xMe);r3r=r(Syt,"ctrl"),Syt.forEach(t),t3r=r(DIe," \u2014 "),KU=n(DIe,"A",{href:!0});var Ryt=s(KU);a3r=r(Ryt,"TFCTRLForSequenceClassification"),Ryt.forEach(t),n3r=r(DIe," (CTRL model)"),DIe.forEach(t),s3r=i(ae),i5=n(ae,"LI",{});var GIe=s(i5);$Me=n(GIe,"STRONG",{});var Pyt=s($Me);l3r=r(Pyt,"deberta"),Pyt.forEach(t),i3r=r(GIe," \u2014 "),ZU=n(GIe,"A",{href:!0});var Byt=s(ZU);d3r=r(Byt,"TFDebertaForSequenceClassification"),Byt.forEach(t),c3r=r(GIe," (DeBERTa model)"),GIe.forEach(t),m3r=i(ae),d5=n(ae,"LI",{});var OIe=s(d5);kMe=n(OIe,"STRONG",{});var Iyt=s(kMe);f3r=r(Iyt,"deberta-v2"),Iyt.forEach(t),g3r=r(OIe," \u2014 "),eJ=n(OIe,"A",{href:!0});var Nyt=s(eJ);h3r=r(Nyt,"TFDebertaV2ForSequenceClassification"),Nyt.forEach(t),u3r=r(OIe," (DeBERTa-v2 model)"),OIe.forEach(t),p3r=i(ae),c5=n(ae,"LI",{});var VIe=s(c5);SMe=n(VIe,"STRONG",{});var qyt=s(SMe);_3r=r(qyt,"distilbert"),qyt.forEach(t),b3r=r(VIe," \u2014 "),oJ=n(VIe,"A",{href:!0});var jyt=s(oJ);v3r=r(jyt,"TFDistilBertForSequenceClassification"),jyt.forEach(t),F3r=r(VIe," (DistilBERT model)"),VIe.forEach(t),T3r=i(ae),m5=n(ae,"LI",{});var XIe=s(m5);RMe=n(XIe,"STRONG",{});var Dyt=s(RMe);M3r=r(Dyt,"electra"),Dyt.forEach(t),E3r=r(XIe," \u2014 "),rJ=n(XIe,"A",{href:!0});var Gyt=s(rJ);C3r=r(Gyt,"TFElectraForSequenceClassification"),Gyt.forEach(t),w3r=r(XIe," (ELECTRA model)"),XIe.forEach(t),A3r=i(ae),f5=n(ae,"LI",{});var zIe=s(f5);PMe=n(zIe,"STRONG",{});var Oyt=s(PMe);y3r=r(Oyt,"flaubert"),Oyt.forEach(t),L3r=r(zIe," \u2014 "),tJ=n(zIe,"A",{href:!0});var Vyt=s(tJ);x3r=r(Vyt,"TFFlaubertForSequenceClassification"),Vyt.forEach(t),$3r=r(zIe," (FlauBERT model)"),zIe.forEach(t),k3r=i(ae),g5=n(ae,"LI",{});var WIe=s(g5);BMe=n(WIe,"STRONG",{});var Xyt=s(BMe);S3r=r(Xyt,"funnel"),Xyt.forEach(t),R3r=r(WIe," \u2014 "),aJ=n(WIe,"A",{href:!0});var zyt=s(aJ);P3r=r(zyt,"TFFunnelForSequenceClassification"),zyt.forEach(t),B3r=r(WIe," (Funnel Transformer model)"),WIe.forEach(t),I3r=i(ae),h5=n(ae,"LI",{});var QIe=s(h5);IMe=n(QIe,"STRONG",{});var Wyt=s(IMe);N3r=r(Wyt,"gpt2"),Wyt.forEach(t),q3r=r(QIe," \u2014 "),nJ=n(QIe,"A",{href:!0});var Qyt=s(nJ);j3r=r(Qyt,"TFGPT2ForSequenceClassification"),Qyt.forEach(t),D3r=r(QIe," (OpenAI GPT-2 model)"),QIe.forEach(t),G3r=i(ae),u5=n(ae,"LI",{});var HIe=s(u5);NMe=n(HIe,"STRONG",{});var Hyt=s(NMe);O3r=r(Hyt,"gptj"),Hyt.forEach(t),V3r=r(HIe," \u2014 "),sJ=n(HIe,"A",{href:!0});var Uyt=s(sJ);X3r=r(Uyt,"TFGPTJForSequenceClassification"),Uyt.forEach(t),z3r=r(HIe," (GPT-J model)"),HIe.forEach(t),W3r=i(ae),p5=n(ae,"LI",{});var UIe=s(p5);qMe=n(UIe,"STRONG",{});var Jyt=s(qMe);Q3r=r(Jyt,"layoutlm"),Jyt.forEach(t),H3r=r(UIe," \u2014 "),lJ=n(UIe,"A",{href:!0});var Yyt=s(lJ);U3r=r(Yyt,"TFLayoutLMForSequenceClassification"),Yyt.forEach(t),J3r=r(UIe," (LayoutLM model)"),UIe.forEach(t),Y3r=i(ae),_5=n(ae,"LI",{});var JIe=s(_5);jMe=n(JIe,"STRONG",{});var Kyt=s(jMe);K3r=r(Kyt,"longformer"),Kyt.forEach(t),Z3r=r(JIe," \u2014 "),iJ=n(JIe,"A",{href:!0});var Zyt=s(iJ);ewr=r(Zyt,"TFLongformerForSequenceClassification"),Zyt.forEach(t),owr=r(JIe," (Longformer model)"),JIe.forEach(t),rwr=i(ae),b5=n(ae,"LI",{});var YIe=s(b5);DMe=n(YIe,"STRONG",{});var eLt=s(DMe);twr=r(eLt,"mobilebert"),eLt.forEach(t),awr=r(YIe," \u2014 "),dJ=n(YIe,"A",{href:!0});var oLt=s(dJ);nwr=r(oLt,"TFMobileBertForSequenceClassification"),oLt.forEach(t),swr=r(YIe," (MobileBERT model)"),YIe.forEach(t),lwr=i(ae),v5=n(ae,"LI",{});var KIe=s(v5);GMe=n(KIe,"STRONG",{});var rLt=s(GMe);iwr=r(rLt,"mpnet"),rLt.forEach(t),dwr=r(KIe," \u2014 "),cJ=n(KIe,"A",{href:!0});var tLt=s(cJ);cwr=r(tLt,"TFMPNetForSequenceClassification"),tLt.forEach(t),mwr=r(KIe," (MPNet model)"),KIe.forEach(t),fwr=i(ae),F5=n(ae,"LI",{});var ZIe=s(F5);OMe=n(ZIe,"STRONG",{});var aLt=s(OMe);gwr=r(aLt,"openai-gpt"),aLt.forEach(t),hwr=r(ZIe," \u2014 "),mJ=n(ZIe,"A",{href:!0});var nLt=s(mJ);uwr=r(nLt,"TFOpenAIGPTForSequenceClassification"),nLt.forEach(t),pwr=r(ZIe," (OpenAI GPT model)"),ZIe.forEach(t),_wr=i(ae),T5=n(ae,"LI",{});var eNe=s(T5);VMe=n(eNe,"STRONG",{});var sLt=s(VMe);bwr=r(sLt,"rembert"),sLt.forEach(t),vwr=r(eNe," \u2014 "),fJ=n(eNe,"A",{href:!0});var lLt=s(fJ);Fwr=r(lLt,"TFRemBertForSequenceClassification"),lLt.forEach(t),Twr=r(eNe," (RemBERT model)"),eNe.forEach(t),Mwr=i(ae),M5=n(ae,"LI",{});var oNe=s(M5);XMe=n(oNe,"STRONG",{});var iLt=s(XMe);Ewr=r(iLt,"roberta"),iLt.forEach(t),Cwr=r(oNe," \u2014 "),gJ=n(oNe,"A",{href:!0});var dLt=s(gJ);wwr=r(dLt,"TFRobertaForSequenceClassification"),dLt.forEach(t),Awr=r(oNe," (RoBERTa model)"),oNe.forEach(t),ywr=i(ae),E5=n(ae,"LI",{});var rNe=s(E5);zMe=n(rNe,"STRONG",{});var cLt=s(zMe);Lwr=r(cLt,"roformer"),cLt.forEach(t),xwr=r(rNe," \u2014 "),hJ=n(rNe,"A",{href:!0});var mLt=s(hJ);$wr=r(mLt,"TFRoFormerForSequenceClassification"),mLt.forEach(t),kwr=r(rNe," (RoFormer model)"),rNe.forEach(t),Swr=i(ae),C5=n(ae,"LI",{});var tNe=s(C5);WMe=n(tNe,"STRONG",{});var fLt=s(WMe);Rwr=r(fLt,"tapas"),fLt.forEach(t),Pwr=r(tNe," \u2014 "),uJ=n(tNe,"A",{href:!0});var gLt=s(uJ);Bwr=r(gLt,"TFTapasForSequenceClassification"),gLt.forEach(t),Iwr=r(tNe," (TAPAS model)"),tNe.forEach(t),Nwr=i(ae),w5=n(ae,"LI",{});var aNe=s(w5);QMe=n(aNe,"STRONG",{});var hLt=s(QMe);qwr=r(hLt,"transfo-xl"),hLt.forEach(t),jwr=r(aNe," \u2014 "),pJ=n(aNe,"A",{href:!0});var uLt=s(pJ);Dwr=r(uLt,"TFTransfoXLForSequenceClassification"),uLt.forEach(t),Gwr=r(aNe," (Transformer-XL model)"),aNe.forEach(t),Owr=i(ae),A5=n(ae,"LI",{});var nNe=s(A5);HMe=n(nNe,"STRONG",{});var pLt=s(HMe);Vwr=r(pLt,"xlm"),pLt.forEach(t),Xwr=r(nNe," \u2014 "),_J=n(nNe,"A",{href:!0});var _Lt=s(_J);zwr=r(_Lt,"TFXLMForSequenceClassification"),_Lt.forEach(t),Wwr=r(nNe," (XLM model)"),nNe.forEach(t),Qwr=i(ae),y5=n(ae,"LI",{});var sNe=s(y5);UMe=n(sNe,"STRONG",{});var bLt=s(UMe);Hwr=r(bLt,"xlm-roberta"),bLt.forEach(t),Uwr=r(sNe," \u2014 "),bJ=n(sNe,"A",{href:!0});var vLt=s(bJ);Jwr=r(vLt,"TFXLMRobertaForSequenceClassification"),vLt.forEach(t),Ywr=r(sNe," (XLM-RoBERTa model)"),sNe.forEach(t),Kwr=i(ae),L5=n(ae,"LI",{});var lNe=s(L5);JMe=n(lNe,"STRONG",{});var FLt=s(JMe);Zwr=r(FLt,"xlnet"),FLt.forEach(t),e0r=r(lNe," \u2014 "),vJ=n(lNe,"A",{href:!0});var TLt=s(vJ);o0r=r(TLt,"TFXLNetForSequenceClassification"),TLt.forEach(t),r0r=r(lNe," (XLNet model)"),lNe.forEach(t),ae.forEach(t),t0r=i(Pl),T(x5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),IGe=i(m),vc=n(m,"H2",{class:!0});var XVe=s(vc);$5=n(XVe,"A",{id:!0,class:!0,href:!0});var MLt=s($5);YMe=n(MLt,"SPAN",{});var ELt=s(YMe);T(k9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),a0r=i(XVe),KMe=n(XVe,"SPAN",{});var CLt=s(KMe);n0r=r(CLt,"TFAutoModelForMultipleChoice"),CLt.forEach(t),XVe.forEach(t),NGe=i(m),sr=n(m,"DIV",{class:!0});var Bl=s(sr);T(S9.$$.fragment,Bl),s0r=i(Bl),Fc=n(Bl,"P",{});var Doe=s(Fc);l0r=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FJ=n(Doe,"A",{href:!0});var wLt=s(FJ);i0r=r(wLt,"from_pretrained()"),wLt.forEach(t),d0r=r(Doe," class method or the "),TJ=n(Doe,"A",{href:!0});var ALt=s(TJ);c0r=r(ALt,"from_config()"),ALt.forEach(t),m0r=r(Doe,` class
method.`),Doe.forEach(t),f0r=i(Bl),R9=n(Bl,"P",{});var zVe=s(R9);g0r=r(zVe,"This class cannot be instantiated directly using "),ZMe=n(zVe,"CODE",{});var yLt=s(ZMe);h0r=r(yLt,"__init__()"),yLt.forEach(t),u0r=r(zVe," (throws an error)."),zVe.forEach(t),p0r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var My=s(Nt);T(P9.$$.fragment,My),_0r=i(My),e4e=n(My,"P",{});var LLt=s(e4e);b0r=r(LLt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LLt.forEach(t),v0r=i(My),Tc=n(My,"P",{});var Goe=s(Tc);F0r=r(Goe,`Note:
Loading a model from its configuration file does `),o4e=n(Goe,"STRONG",{});var xLt=s(o4e);T0r=r(xLt,"not"),xLt.forEach(t),M0r=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Goe,"A",{href:!0});var $Lt=s(MJ);E0r=r($Lt,"from_pretrained()"),$Lt.forEach(t),C0r=r(Goe," to load the model weights."),Goe.forEach(t),w0r=i(My),T(k5.$$.fragment,My),My.forEach(t),A0r=i(Bl),Pr=n(Bl,"DIV",{class:!0});var Il=s(Pr);T(B9.$$.fragment,Il),y0r=i(Il),r4e=n(Il,"P",{});var kLt=s(r4e);L0r=r(kLt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kLt.forEach(t),x0r=i(Il),fn=n(Il,"P",{});var Ey=s(fn);$0r=r(Ey,"The model class to instantiate is selected based on the "),t4e=n(Ey,"CODE",{});var SLt=s(t4e);k0r=r(SLt,"model_type"),SLt.forEach(t),S0r=r(Ey,` property of the config object (either
passed as an argument or loaded from `),a4e=n(Ey,"CODE",{});var RLt=s(a4e);R0r=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),P0r=r(Ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(Ey,"CODE",{});var PLt=s(n4e);B0r=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),I0r=r(Ey,":"),Ey.forEach(t),N0r=i(Il),ue=n(Il,"UL",{});var be=s(ue);S5=n(be,"LI",{});var iNe=s(S5);s4e=n(iNe,"STRONG",{});var BLt=s(s4e);q0r=r(BLt,"albert"),BLt.forEach(t),j0r=r(iNe," \u2014 "),EJ=n(iNe,"A",{href:!0});var ILt=s(EJ);D0r=r(ILt,"TFAlbertForMultipleChoice"),ILt.forEach(t),G0r=r(iNe," (ALBERT model)"),iNe.forEach(t),O0r=i(be),R5=n(be,"LI",{});var dNe=s(R5);l4e=n(dNe,"STRONG",{});var NLt=s(l4e);V0r=r(NLt,"bert"),NLt.forEach(t),X0r=r(dNe," \u2014 "),CJ=n(dNe,"A",{href:!0});var qLt=s(CJ);z0r=r(qLt,"TFBertForMultipleChoice"),qLt.forEach(t),W0r=r(dNe," (BERT model)"),dNe.forEach(t),Q0r=i(be),P5=n(be,"LI",{});var cNe=s(P5);i4e=n(cNe,"STRONG",{});var jLt=s(i4e);H0r=r(jLt,"camembert"),jLt.forEach(t),U0r=r(cNe," \u2014 "),wJ=n(cNe,"A",{href:!0});var DLt=s(wJ);J0r=r(DLt,"TFCamembertForMultipleChoice"),DLt.forEach(t),Y0r=r(cNe," (CamemBERT model)"),cNe.forEach(t),K0r=i(be),B5=n(be,"LI",{});var mNe=s(B5);d4e=n(mNe,"STRONG",{});var GLt=s(d4e);Z0r=r(GLt,"convbert"),GLt.forEach(t),eAr=r(mNe," \u2014 "),AJ=n(mNe,"A",{href:!0});var OLt=s(AJ);oAr=r(OLt,"TFConvBertForMultipleChoice"),OLt.forEach(t),rAr=r(mNe," (ConvBERT model)"),mNe.forEach(t),tAr=i(be),I5=n(be,"LI",{});var fNe=s(I5);c4e=n(fNe,"STRONG",{});var VLt=s(c4e);aAr=r(VLt,"distilbert"),VLt.forEach(t),nAr=r(fNe," \u2014 "),yJ=n(fNe,"A",{href:!0});var XLt=s(yJ);sAr=r(XLt,"TFDistilBertForMultipleChoice"),XLt.forEach(t),lAr=r(fNe," (DistilBERT model)"),fNe.forEach(t),iAr=i(be),N5=n(be,"LI",{});var gNe=s(N5);m4e=n(gNe,"STRONG",{});var zLt=s(m4e);dAr=r(zLt,"electra"),zLt.forEach(t),cAr=r(gNe," \u2014 "),LJ=n(gNe,"A",{href:!0});var WLt=s(LJ);mAr=r(WLt,"TFElectraForMultipleChoice"),WLt.forEach(t),fAr=r(gNe," (ELECTRA model)"),gNe.forEach(t),gAr=i(be),q5=n(be,"LI",{});var hNe=s(q5);f4e=n(hNe,"STRONG",{});var QLt=s(f4e);hAr=r(QLt,"flaubert"),QLt.forEach(t),uAr=r(hNe," \u2014 "),xJ=n(hNe,"A",{href:!0});var HLt=s(xJ);pAr=r(HLt,"TFFlaubertForMultipleChoice"),HLt.forEach(t),_Ar=r(hNe," (FlauBERT model)"),hNe.forEach(t),bAr=i(be),j5=n(be,"LI",{});var uNe=s(j5);g4e=n(uNe,"STRONG",{});var ULt=s(g4e);vAr=r(ULt,"funnel"),ULt.forEach(t),FAr=r(uNe," \u2014 "),$J=n(uNe,"A",{href:!0});var JLt=s($J);TAr=r(JLt,"TFFunnelForMultipleChoice"),JLt.forEach(t),MAr=r(uNe," (Funnel Transformer model)"),uNe.forEach(t),EAr=i(be),D5=n(be,"LI",{});var pNe=s(D5);h4e=n(pNe,"STRONG",{});var YLt=s(h4e);CAr=r(YLt,"longformer"),YLt.forEach(t),wAr=r(pNe," \u2014 "),kJ=n(pNe,"A",{href:!0});var KLt=s(kJ);AAr=r(KLt,"TFLongformerForMultipleChoice"),KLt.forEach(t),yAr=r(pNe," (Longformer model)"),pNe.forEach(t),LAr=i(be),G5=n(be,"LI",{});var _Ne=s(G5);u4e=n(_Ne,"STRONG",{});var ZLt=s(u4e);xAr=r(ZLt,"mobilebert"),ZLt.forEach(t),$Ar=r(_Ne," \u2014 "),SJ=n(_Ne,"A",{href:!0});var e7t=s(SJ);kAr=r(e7t,"TFMobileBertForMultipleChoice"),e7t.forEach(t),SAr=r(_Ne," (MobileBERT model)"),_Ne.forEach(t),RAr=i(be),O5=n(be,"LI",{});var bNe=s(O5);p4e=n(bNe,"STRONG",{});var o7t=s(p4e);PAr=r(o7t,"mpnet"),o7t.forEach(t),BAr=r(bNe," \u2014 "),RJ=n(bNe,"A",{href:!0});var r7t=s(RJ);IAr=r(r7t,"TFMPNetForMultipleChoice"),r7t.forEach(t),NAr=r(bNe," (MPNet model)"),bNe.forEach(t),qAr=i(be),V5=n(be,"LI",{});var vNe=s(V5);_4e=n(vNe,"STRONG",{});var t7t=s(_4e);jAr=r(t7t,"rembert"),t7t.forEach(t),DAr=r(vNe," \u2014 "),PJ=n(vNe,"A",{href:!0});var a7t=s(PJ);GAr=r(a7t,"TFRemBertForMultipleChoice"),a7t.forEach(t),OAr=r(vNe," (RemBERT model)"),vNe.forEach(t),VAr=i(be),X5=n(be,"LI",{});var FNe=s(X5);b4e=n(FNe,"STRONG",{});var n7t=s(b4e);XAr=r(n7t,"roberta"),n7t.forEach(t),zAr=r(FNe," \u2014 "),BJ=n(FNe,"A",{href:!0});var s7t=s(BJ);WAr=r(s7t,"TFRobertaForMultipleChoice"),s7t.forEach(t),QAr=r(FNe," (RoBERTa model)"),FNe.forEach(t),HAr=i(be),z5=n(be,"LI",{});var TNe=s(z5);v4e=n(TNe,"STRONG",{});var l7t=s(v4e);UAr=r(l7t,"roformer"),l7t.forEach(t),JAr=r(TNe," \u2014 "),IJ=n(TNe,"A",{href:!0});var i7t=s(IJ);YAr=r(i7t,"TFRoFormerForMultipleChoice"),i7t.forEach(t),KAr=r(TNe," (RoFormer model)"),TNe.forEach(t),ZAr=i(be),W5=n(be,"LI",{});var MNe=s(W5);F4e=n(MNe,"STRONG",{});var d7t=s(F4e);e6r=r(d7t,"xlm"),d7t.forEach(t),o6r=r(MNe," \u2014 "),NJ=n(MNe,"A",{href:!0});var c7t=s(NJ);r6r=r(c7t,"TFXLMForMultipleChoice"),c7t.forEach(t),t6r=r(MNe," (XLM model)"),MNe.forEach(t),a6r=i(be),Q5=n(be,"LI",{});var ENe=s(Q5);T4e=n(ENe,"STRONG",{});var m7t=s(T4e);n6r=r(m7t,"xlm-roberta"),m7t.forEach(t),s6r=r(ENe," \u2014 "),qJ=n(ENe,"A",{href:!0});var f7t=s(qJ);l6r=r(f7t,"TFXLMRobertaForMultipleChoice"),f7t.forEach(t),i6r=r(ENe," (XLM-RoBERTa model)"),ENe.forEach(t),d6r=i(be),H5=n(be,"LI",{});var CNe=s(H5);M4e=n(CNe,"STRONG",{});var g7t=s(M4e);c6r=r(g7t,"xlnet"),g7t.forEach(t),m6r=r(CNe," \u2014 "),jJ=n(CNe,"A",{href:!0});var h7t=s(jJ);f6r=r(h7t,"TFXLNetForMultipleChoice"),h7t.forEach(t),g6r=r(CNe," (XLNet model)"),CNe.forEach(t),be.forEach(t),h6r=i(Il),T(U5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),qGe=i(m),Mc=n(m,"H2",{class:!0});var WVe=s(Mc);J5=n(WVe,"A",{id:!0,class:!0,href:!0});var u7t=s(J5);E4e=n(u7t,"SPAN",{});var p7t=s(E4e);T(I9.$$.fragment,p7t),p7t.forEach(t),u7t.forEach(t),u6r=i(WVe),C4e=n(WVe,"SPAN",{});var _7t=s(C4e);p6r=r(_7t,"TFAutoModelForNextSentencePrediction"),_7t.forEach(t),WVe.forEach(t),jGe=i(m),lr=n(m,"DIV",{class:!0});var Nl=s(lr);T(N9.$$.fragment,Nl),_6r=i(Nl),Ec=n(Nl,"P",{});var Ooe=s(Ec);b6r=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DJ=n(Ooe,"A",{href:!0});var b7t=s(DJ);v6r=r(b7t,"from_pretrained()"),b7t.forEach(t),F6r=r(Ooe," class method or the "),GJ=n(Ooe,"A",{href:!0});var v7t=s(GJ);T6r=r(v7t,"from_config()"),v7t.forEach(t),M6r=r(Ooe,` class
method.`),Ooe.forEach(t),E6r=i(Nl),q9=n(Nl,"P",{});var QVe=s(q9);C6r=r(QVe,"This class cannot be instantiated directly using "),w4e=n(QVe,"CODE",{});var F7t=s(w4e);w6r=r(F7t,"__init__()"),F7t.forEach(t),A6r=r(QVe," (throws an error)."),QVe.forEach(t),y6r=i(Nl),qt=n(Nl,"DIV",{class:!0});var Cy=s(qt);T(j9.$$.fragment,Cy),L6r=i(Cy),A4e=n(Cy,"P",{});var T7t=s(A4e);x6r=r(T7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T7t.forEach(t),$6r=i(Cy),Cc=n(Cy,"P",{});var Voe=s(Cc);k6r=r(Voe,`Note:
Loading a model from its configuration file does `),y4e=n(Voe,"STRONG",{});var M7t=s(y4e);S6r=r(M7t,"not"),M7t.forEach(t),R6r=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(Voe,"A",{href:!0});var E7t=s(OJ);P6r=r(E7t,"from_pretrained()"),E7t.forEach(t),B6r=r(Voe," to load the model weights."),Voe.forEach(t),I6r=i(Cy),T(Y5.$$.fragment,Cy),Cy.forEach(t),N6r=i(Nl),Br=n(Nl,"DIV",{class:!0});var ql=s(Br);T(D9.$$.fragment,ql),q6r=i(ql),L4e=n(ql,"P",{});var C7t=s(L4e);j6r=r(C7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),C7t.forEach(t),D6r=i(ql),gn=n(ql,"P",{});var wy=s(gn);G6r=r(wy,"The model class to instantiate is selected based on the "),x4e=n(wy,"CODE",{});var w7t=s(x4e);O6r=r(w7t,"model_type"),w7t.forEach(t),V6r=r(wy,` property of the config object (either
passed as an argument or loaded from `),$4e=n(wy,"CODE",{});var A7t=s($4e);X6r=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),z6r=r(wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(wy,"CODE",{});var y7t=s(k4e);W6r=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),Q6r=r(wy,":"),wy.forEach(t),H6r=i(ql),G9=n(ql,"UL",{});var HVe=s(G9);K5=n(HVe,"LI",{});var wNe=s(K5);S4e=n(wNe,"STRONG",{});var L7t=s(S4e);U6r=r(L7t,"bert"),L7t.forEach(t),J6r=r(wNe," \u2014 "),VJ=n(wNe,"A",{href:!0});var x7t=s(VJ);Y6r=r(x7t,"TFBertForNextSentencePrediction"),x7t.forEach(t),K6r=r(wNe," (BERT model)"),wNe.forEach(t),Z6r=i(HVe),Z5=n(HVe,"LI",{});var ANe=s(Z5);R4e=n(ANe,"STRONG",{});var $7t=s(R4e);eyr=r($7t,"mobilebert"),$7t.forEach(t),oyr=r(ANe," \u2014 "),XJ=n(ANe,"A",{href:!0});var k7t=s(XJ);ryr=r(k7t,"TFMobileBertForNextSentencePrediction"),k7t.forEach(t),tyr=r(ANe," (MobileBERT model)"),ANe.forEach(t),HVe.forEach(t),ayr=i(ql),T(e3.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),DGe=i(m),wc=n(m,"H2",{class:!0});var UVe=s(wc);o3=n(UVe,"A",{id:!0,class:!0,href:!0});var S7t=s(o3);P4e=n(S7t,"SPAN",{});var R7t=s(P4e);T(O9.$$.fragment,R7t),R7t.forEach(t),S7t.forEach(t),nyr=i(UVe),B4e=n(UVe,"SPAN",{});var P7t=s(B4e);syr=r(P7t,"TFAutoModelForTableQuestionAnswering"),P7t.forEach(t),UVe.forEach(t),GGe=i(m),ir=n(m,"DIV",{class:!0});var jl=s(ir);T(V9.$$.fragment,jl),lyr=i(jl),Ac=n(jl,"P",{});var Xoe=s(Ac);iyr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zJ=n(Xoe,"A",{href:!0});var B7t=s(zJ);dyr=r(B7t,"from_pretrained()"),B7t.forEach(t),cyr=r(Xoe," class method or the "),WJ=n(Xoe,"A",{href:!0});var I7t=s(WJ);myr=r(I7t,"from_config()"),I7t.forEach(t),fyr=r(Xoe,` class
method.`),Xoe.forEach(t),gyr=i(jl),X9=n(jl,"P",{});var JVe=s(X9);hyr=r(JVe,"This class cannot be instantiated directly using "),I4e=n(JVe,"CODE",{});var N7t=s(I4e);uyr=r(N7t,"__init__()"),N7t.forEach(t),pyr=r(JVe," (throws an error)."),JVe.forEach(t),_yr=i(jl),jt=n(jl,"DIV",{class:!0});var Ay=s(jt);T(z9.$$.fragment,Ay),byr=i(Ay),N4e=n(Ay,"P",{});var q7t=s(N4e);vyr=r(q7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),q7t.forEach(t),Fyr=i(Ay),yc=n(Ay,"P",{});var zoe=s(yc);Tyr=r(zoe,`Note:
Loading a model from its configuration file does `),q4e=n(zoe,"STRONG",{});var j7t=s(q4e);Myr=r(j7t,"not"),j7t.forEach(t),Eyr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(zoe,"A",{href:!0});var D7t=s(QJ);Cyr=r(D7t,"from_pretrained()"),D7t.forEach(t),wyr=r(zoe," to load the model weights."),zoe.forEach(t),Ayr=i(Ay),T(r3.$$.fragment,Ay),Ay.forEach(t),yyr=i(jl),Ir=n(jl,"DIV",{class:!0});var Dl=s(Ir);T(W9.$$.fragment,Dl),Lyr=i(Dl),j4e=n(Dl,"P",{});var G7t=s(j4e);xyr=r(G7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),G7t.forEach(t),$yr=i(Dl),hn=n(Dl,"P",{});var yy=s(hn);kyr=r(yy,"The model class to instantiate is selected based on the "),D4e=n(yy,"CODE",{});var O7t=s(D4e);Syr=r(O7t,"model_type"),O7t.forEach(t),Ryr=r(yy,` property of the config object (either
passed as an argument or loaded from `),G4e=n(yy,"CODE",{});var V7t=s(G4e);Pyr=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),Byr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(yy,"CODE",{});var X7t=s(O4e);Iyr=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),Nyr=r(yy,":"),yy.forEach(t),qyr=i(Dl),V4e=n(Dl,"UL",{});var z7t=s(V4e);t3=n(z7t,"LI",{});var yNe=s(t3);X4e=n(yNe,"STRONG",{});var W7t=s(X4e);jyr=r(W7t,"tapas"),W7t.forEach(t),Dyr=r(yNe," \u2014 "),HJ=n(yNe,"A",{href:!0});var Q7t=s(HJ);Gyr=r(Q7t,"TFTapasForQuestionAnswering"),Q7t.forEach(t),Oyr=r(yNe," (TAPAS model)"),yNe.forEach(t),z7t.forEach(t),Vyr=i(Dl),T(a3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),OGe=i(m),Lc=n(m,"H2",{class:!0});var YVe=s(Lc);n3=n(YVe,"A",{id:!0,class:!0,href:!0});var H7t=s(n3);z4e=n(H7t,"SPAN",{});var U7t=s(z4e);T(Q9.$$.fragment,U7t),U7t.forEach(t),H7t.forEach(t),Xyr=i(YVe),W4e=n(YVe,"SPAN",{});var J7t=s(W4e);zyr=r(J7t,"TFAutoModelForTokenClassification"),J7t.forEach(t),YVe.forEach(t),VGe=i(m),dr=n(m,"DIV",{class:!0});var Gl=s(dr);T(H9.$$.fragment,Gl),Wyr=i(Gl),xc=n(Gl,"P",{});var Woe=s(xc);Qyr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UJ=n(Woe,"A",{href:!0});var Y7t=s(UJ);Hyr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),Uyr=r(Woe," class method or the "),JJ=n(Woe,"A",{href:!0});var K7t=s(JJ);Jyr=r(K7t,"from_config()"),K7t.forEach(t),Yyr=r(Woe,` class
method.`),Woe.forEach(t),Kyr=i(Gl),U9=n(Gl,"P",{});var KVe=s(U9);Zyr=r(KVe,"This class cannot be instantiated directly using "),Q4e=n(KVe,"CODE",{});var Z7t=s(Q4e);eLr=r(Z7t,"__init__()"),Z7t.forEach(t),oLr=r(KVe," (throws an error)."),KVe.forEach(t),rLr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Ly=s(Dt);T(J9.$$.fragment,Ly),tLr=i(Ly),H4e=n(Ly,"P",{});var e8t=s(H4e);aLr=r(e8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),e8t.forEach(t),nLr=i(Ly),$c=n(Ly,"P",{});var Qoe=s($c);sLr=r(Qoe,`Note:
Loading a model from its configuration file does `),U4e=n(Qoe,"STRONG",{});var o8t=s(U4e);lLr=r(o8t,"not"),o8t.forEach(t),iLr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Qoe,"A",{href:!0});var r8t=s(YJ);dLr=r(r8t,"from_pretrained()"),r8t.forEach(t),cLr=r(Qoe," to load the model weights."),Qoe.forEach(t),mLr=i(Ly),T(s3.$$.fragment,Ly),Ly.forEach(t),fLr=i(Gl),Nr=n(Gl,"DIV",{class:!0});var Ol=s(Nr);T(Y9.$$.fragment,Ol),gLr=i(Ol),J4e=n(Ol,"P",{});var t8t=s(J4e);hLr=r(t8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t8t.forEach(t),uLr=i(Ol),un=n(Ol,"P",{});var xy=s(un);pLr=r(xy,"The model class to instantiate is selected based on the "),Y4e=n(xy,"CODE",{});var a8t=s(Y4e);_Lr=r(a8t,"model_type"),a8t.forEach(t),bLr=r(xy,` property of the config object (either
passed as an argument or loaded from `),K4e=n(xy,"CODE",{});var n8t=s(K4e);vLr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),FLr=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z4e=n(xy,"CODE",{});var s8t=s(Z4e);TLr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),MLr=r(xy,":"),xy.forEach(t),ELr=i(Ol),de=n(Ol,"UL",{});var fe=s(de);l3=n(fe,"LI",{});var LNe=s(l3);eEe=n(LNe,"STRONG",{});var l8t=s(eEe);CLr=r(l8t,"albert"),l8t.forEach(t),wLr=r(LNe," \u2014 "),KJ=n(LNe,"A",{href:!0});var i8t=s(KJ);ALr=r(i8t,"TFAlbertForTokenClassification"),i8t.forEach(t),yLr=r(LNe," (ALBERT model)"),LNe.forEach(t),LLr=i(fe),i3=n(fe,"LI",{});var xNe=s(i3);oEe=n(xNe,"STRONG",{});var d8t=s(oEe);xLr=r(d8t,"bert"),d8t.forEach(t),$Lr=r(xNe," \u2014 "),ZJ=n(xNe,"A",{href:!0});var c8t=s(ZJ);kLr=r(c8t,"TFBertForTokenClassification"),c8t.forEach(t),SLr=r(xNe," (BERT model)"),xNe.forEach(t),RLr=i(fe),d3=n(fe,"LI",{});var $Ne=s(d3);rEe=n($Ne,"STRONG",{});var m8t=s(rEe);PLr=r(m8t,"camembert"),m8t.forEach(t),BLr=r($Ne," \u2014 "),eY=n($Ne,"A",{href:!0});var f8t=s(eY);ILr=r(f8t,"TFCamembertForTokenClassification"),f8t.forEach(t),NLr=r($Ne," (CamemBERT model)"),$Ne.forEach(t),qLr=i(fe),c3=n(fe,"LI",{});var kNe=s(c3);tEe=n(kNe,"STRONG",{});var g8t=s(tEe);jLr=r(g8t,"convbert"),g8t.forEach(t),DLr=r(kNe," \u2014 "),oY=n(kNe,"A",{href:!0});var h8t=s(oY);GLr=r(h8t,"TFConvBertForTokenClassification"),h8t.forEach(t),OLr=r(kNe," (ConvBERT model)"),kNe.forEach(t),VLr=i(fe),m3=n(fe,"LI",{});var SNe=s(m3);aEe=n(SNe,"STRONG",{});var u8t=s(aEe);XLr=r(u8t,"deberta"),u8t.forEach(t),zLr=r(SNe," \u2014 "),rY=n(SNe,"A",{href:!0});var p8t=s(rY);WLr=r(p8t,"TFDebertaForTokenClassification"),p8t.forEach(t),QLr=r(SNe," (DeBERTa model)"),SNe.forEach(t),HLr=i(fe),f3=n(fe,"LI",{});var RNe=s(f3);nEe=n(RNe,"STRONG",{});var _8t=s(nEe);ULr=r(_8t,"deberta-v2"),_8t.forEach(t),JLr=r(RNe," \u2014 "),tY=n(RNe,"A",{href:!0});var b8t=s(tY);YLr=r(b8t,"TFDebertaV2ForTokenClassification"),b8t.forEach(t),KLr=r(RNe," (DeBERTa-v2 model)"),RNe.forEach(t),ZLr=i(fe),g3=n(fe,"LI",{});var PNe=s(g3);sEe=n(PNe,"STRONG",{});var v8t=s(sEe);e7r=r(v8t,"distilbert"),v8t.forEach(t),o7r=r(PNe," \u2014 "),aY=n(PNe,"A",{href:!0});var F8t=s(aY);r7r=r(F8t,"TFDistilBertForTokenClassification"),F8t.forEach(t),t7r=r(PNe," (DistilBERT model)"),PNe.forEach(t),a7r=i(fe),h3=n(fe,"LI",{});var BNe=s(h3);lEe=n(BNe,"STRONG",{});var T8t=s(lEe);n7r=r(T8t,"electra"),T8t.forEach(t),s7r=r(BNe," \u2014 "),nY=n(BNe,"A",{href:!0});var M8t=s(nY);l7r=r(M8t,"TFElectraForTokenClassification"),M8t.forEach(t),i7r=r(BNe," (ELECTRA model)"),BNe.forEach(t),d7r=i(fe),u3=n(fe,"LI",{});var INe=s(u3);iEe=n(INe,"STRONG",{});var E8t=s(iEe);c7r=r(E8t,"flaubert"),E8t.forEach(t),m7r=r(INe," \u2014 "),sY=n(INe,"A",{href:!0});var C8t=s(sY);f7r=r(C8t,"TFFlaubertForTokenClassification"),C8t.forEach(t),g7r=r(INe," (FlauBERT model)"),INe.forEach(t),h7r=i(fe),p3=n(fe,"LI",{});var NNe=s(p3);dEe=n(NNe,"STRONG",{});var w8t=s(dEe);u7r=r(w8t,"funnel"),w8t.forEach(t),p7r=r(NNe," \u2014 "),lY=n(NNe,"A",{href:!0});var A8t=s(lY);_7r=r(A8t,"TFFunnelForTokenClassification"),A8t.forEach(t),b7r=r(NNe," (Funnel Transformer model)"),NNe.forEach(t),v7r=i(fe),_3=n(fe,"LI",{});var qNe=s(_3);cEe=n(qNe,"STRONG",{});var y8t=s(cEe);F7r=r(y8t,"layoutlm"),y8t.forEach(t),T7r=r(qNe," \u2014 "),iY=n(qNe,"A",{href:!0});var L8t=s(iY);M7r=r(L8t,"TFLayoutLMForTokenClassification"),L8t.forEach(t),E7r=r(qNe," (LayoutLM model)"),qNe.forEach(t),C7r=i(fe),b3=n(fe,"LI",{});var jNe=s(b3);mEe=n(jNe,"STRONG",{});var x8t=s(mEe);w7r=r(x8t,"longformer"),x8t.forEach(t),A7r=r(jNe," \u2014 "),dY=n(jNe,"A",{href:!0});var $8t=s(dY);y7r=r($8t,"TFLongformerForTokenClassification"),$8t.forEach(t),L7r=r(jNe," (Longformer model)"),jNe.forEach(t),x7r=i(fe),v3=n(fe,"LI",{});var DNe=s(v3);fEe=n(DNe,"STRONG",{});var k8t=s(fEe);$7r=r(k8t,"mobilebert"),k8t.forEach(t),k7r=r(DNe," \u2014 "),cY=n(DNe,"A",{href:!0});var S8t=s(cY);S7r=r(S8t,"TFMobileBertForTokenClassification"),S8t.forEach(t),R7r=r(DNe," (MobileBERT model)"),DNe.forEach(t),P7r=i(fe),F3=n(fe,"LI",{});var GNe=s(F3);gEe=n(GNe,"STRONG",{});var R8t=s(gEe);B7r=r(R8t,"mpnet"),R8t.forEach(t),I7r=r(GNe," \u2014 "),mY=n(GNe,"A",{href:!0});var P8t=s(mY);N7r=r(P8t,"TFMPNetForTokenClassification"),P8t.forEach(t),q7r=r(GNe," (MPNet model)"),GNe.forEach(t),j7r=i(fe),T3=n(fe,"LI",{});var ONe=s(T3);hEe=n(ONe,"STRONG",{});var B8t=s(hEe);D7r=r(B8t,"rembert"),B8t.forEach(t),G7r=r(ONe," \u2014 "),fY=n(ONe,"A",{href:!0});var I8t=s(fY);O7r=r(I8t,"TFRemBertForTokenClassification"),I8t.forEach(t),V7r=r(ONe," (RemBERT model)"),ONe.forEach(t),X7r=i(fe),M3=n(fe,"LI",{});var VNe=s(M3);uEe=n(VNe,"STRONG",{});var N8t=s(uEe);z7r=r(N8t,"roberta"),N8t.forEach(t),W7r=r(VNe," \u2014 "),gY=n(VNe,"A",{href:!0});var q8t=s(gY);Q7r=r(q8t,"TFRobertaForTokenClassification"),q8t.forEach(t),H7r=r(VNe," (RoBERTa model)"),VNe.forEach(t),U7r=i(fe),E3=n(fe,"LI",{});var XNe=s(E3);pEe=n(XNe,"STRONG",{});var j8t=s(pEe);J7r=r(j8t,"roformer"),j8t.forEach(t),Y7r=r(XNe," \u2014 "),hY=n(XNe,"A",{href:!0});var D8t=s(hY);K7r=r(D8t,"TFRoFormerForTokenClassification"),D8t.forEach(t),Z7r=r(XNe," (RoFormer model)"),XNe.forEach(t),e8r=i(fe),C3=n(fe,"LI",{});var zNe=s(C3);_Ee=n(zNe,"STRONG",{});var G8t=s(_Ee);o8r=r(G8t,"xlm"),G8t.forEach(t),r8r=r(zNe," \u2014 "),uY=n(zNe,"A",{href:!0});var O8t=s(uY);t8r=r(O8t,"TFXLMForTokenClassification"),O8t.forEach(t),a8r=r(zNe," (XLM model)"),zNe.forEach(t),n8r=i(fe),w3=n(fe,"LI",{});var WNe=s(w3);bEe=n(WNe,"STRONG",{});var V8t=s(bEe);s8r=r(V8t,"xlm-roberta"),V8t.forEach(t),l8r=r(WNe," \u2014 "),pY=n(WNe,"A",{href:!0});var X8t=s(pY);i8r=r(X8t,"TFXLMRobertaForTokenClassification"),X8t.forEach(t),d8r=r(WNe," (XLM-RoBERTa model)"),WNe.forEach(t),c8r=i(fe),A3=n(fe,"LI",{});var QNe=s(A3);vEe=n(QNe,"STRONG",{});var z8t=s(vEe);m8r=r(z8t,"xlnet"),z8t.forEach(t),f8r=r(QNe," \u2014 "),_Y=n(QNe,"A",{href:!0});var W8t=s(_Y);g8r=r(W8t,"TFXLNetForTokenClassification"),W8t.forEach(t),h8r=r(QNe," (XLNet model)"),QNe.forEach(t),fe.forEach(t),u8r=i(Ol),T(y3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),XGe=i(m),kc=n(m,"H2",{class:!0});var ZVe=s(kc);L3=n(ZVe,"A",{id:!0,class:!0,href:!0});var Q8t=s(L3);FEe=n(Q8t,"SPAN",{});var H8t=s(FEe);T(K9.$$.fragment,H8t),H8t.forEach(t),Q8t.forEach(t),p8r=i(ZVe),TEe=n(ZVe,"SPAN",{});var U8t=s(TEe);_8r=r(U8t,"TFAutoModelForQuestionAnswering"),U8t.forEach(t),ZVe.forEach(t),zGe=i(m),cr=n(m,"DIV",{class:!0});var Vl=s(cr);T(Z9.$$.fragment,Vl),b8r=i(Vl),Sc=n(Vl,"P",{});var Hoe=s(Sc);v8r=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bY=n(Hoe,"A",{href:!0});var J8t=s(bY);F8r=r(J8t,"from_pretrained()"),J8t.forEach(t),T8r=r(Hoe," class method or the "),vY=n(Hoe,"A",{href:!0});var Y8t=s(vY);M8r=r(Y8t,"from_config()"),Y8t.forEach(t),E8r=r(Hoe,` class
method.`),Hoe.forEach(t),C8r=i(Vl),ex=n(Vl,"P",{});var eXe=s(ex);w8r=r(eXe,"This class cannot be instantiated directly using "),MEe=n(eXe,"CODE",{});var K8t=s(MEe);A8r=r(K8t,"__init__()"),K8t.forEach(t),y8r=r(eXe," (throws an error)."),eXe.forEach(t),L8r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var $y=s(Gt);T(ox.$$.fragment,$y),x8r=i($y),EEe=n($y,"P",{});var Z8t=s(EEe);$8r=r(Z8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z8t.forEach(t),k8r=i($y),Rc=n($y,"P",{});var Uoe=s(Rc);S8r=r(Uoe,`Note:
Loading a model from its configuration file does `),CEe=n(Uoe,"STRONG",{});var e9t=s(CEe);R8r=r(e9t,"not"),e9t.forEach(t),P8r=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Uoe,"A",{href:!0});var o9t=s(FY);B8r=r(o9t,"from_pretrained()"),o9t.forEach(t),I8r=r(Uoe," to load the model weights."),Uoe.forEach(t),N8r=i($y),T(x3.$$.fragment,$y),$y.forEach(t),q8r=i(Vl),qr=n(Vl,"DIV",{class:!0});var Xl=s(qr);T(rx.$$.fragment,Xl),j8r=i(Xl),wEe=n(Xl,"P",{});var r9t=s(wEe);D8r=r(r9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r9t.forEach(t),G8r=i(Xl),pn=n(Xl,"P",{});var ky=s(pn);O8r=r(ky,"The model class to instantiate is selected based on the "),AEe=n(ky,"CODE",{});var t9t=s(AEe);V8r=r(t9t,"model_type"),t9t.forEach(t),X8r=r(ky,` property of the config object (either
passed as an argument or loaded from `),yEe=n(ky,"CODE",{});var a9t=s(yEe);z8r=r(a9t,"pretrained_model_name_or_path"),a9t.forEach(t),W8r=r(ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(ky,"CODE",{});var n9t=s(LEe);Q8r=r(n9t,"pretrained_model_name_or_path"),n9t.forEach(t),H8r=r(ky,":"),ky.forEach(t),U8r=i(Xl),ce=n(Xl,"UL",{});var ge=s(ce);$3=n(ge,"LI",{});var HNe=s($3);xEe=n(HNe,"STRONG",{});var s9t=s(xEe);J8r=r(s9t,"albert"),s9t.forEach(t),Y8r=r(HNe," \u2014 "),TY=n(HNe,"A",{href:!0});var l9t=s(TY);K8r=r(l9t,"TFAlbertForQuestionAnswering"),l9t.forEach(t),Z8r=r(HNe," (ALBERT model)"),HNe.forEach(t),e9r=i(ge),k3=n(ge,"LI",{});var UNe=s(k3);$Ee=n(UNe,"STRONG",{});var i9t=s($Ee);o9r=r(i9t,"bert"),i9t.forEach(t),r9r=r(UNe," \u2014 "),MY=n(UNe,"A",{href:!0});var d9t=s(MY);t9r=r(d9t,"TFBertForQuestionAnswering"),d9t.forEach(t),a9r=r(UNe," (BERT model)"),UNe.forEach(t),n9r=i(ge),S3=n(ge,"LI",{});var JNe=s(S3);kEe=n(JNe,"STRONG",{});var c9t=s(kEe);s9r=r(c9t,"camembert"),c9t.forEach(t),l9r=r(JNe," \u2014 "),EY=n(JNe,"A",{href:!0});var m9t=s(EY);i9r=r(m9t,"TFCamembertForQuestionAnswering"),m9t.forEach(t),d9r=r(JNe," (CamemBERT model)"),JNe.forEach(t),c9r=i(ge),R3=n(ge,"LI",{});var YNe=s(R3);SEe=n(YNe,"STRONG",{});var f9t=s(SEe);m9r=r(f9t,"convbert"),f9t.forEach(t),f9r=r(YNe," \u2014 "),CY=n(YNe,"A",{href:!0});var g9t=s(CY);g9r=r(g9t,"TFConvBertForQuestionAnswering"),g9t.forEach(t),h9r=r(YNe," (ConvBERT model)"),YNe.forEach(t),u9r=i(ge),P3=n(ge,"LI",{});var KNe=s(P3);REe=n(KNe,"STRONG",{});var h9t=s(REe);p9r=r(h9t,"deberta"),h9t.forEach(t),_9r=r(KNe," \u2014 "),wY=n(KNe,"A",{href:!0});var u9t=s(wY);b9r=r(u9t,"TFDebertaForQuestionAnswering"),u9t.forEach(t),v9r=r(KNe," (DeBERTa model)"),KNe.forEach(t),F9r=i(ge),B3=n(ge,"LI",{});var ZNe=s(B3);PEe=n(ZNe,"STRONG",{});var p9t=s(PEe);T9r=r(p9t,"deberta-v2"),p9t.forEach(t),M9r=r(ZNe," \u2014 "),AY=n(ZNe,"A",{href:!0});var _9t=s(AY);E9r=r(_9t,"TFDebertaV2ForQuestionAnswering"),_9t.forEach(t),C9r=r(ZNe," (DeBERTa-v2 model)"),ZNe.forEach(t),w9r=i(ge),I3=n(ge,"LI",{});var eqe=s(I3);BEe=n(eqe,"STRONG",{});var b9t=s(BEe);A9r=r(b9t,"distilbert"),b9t.forEach(t),y9r=r(eqe," \u2014 "),yY=n(eqe,"A",{href:!0});var v9t=s(yY);L9r=r(v9t,"TFDistilBertForQuestionAnswering"),v9t.forEach(t),x9r=r(eqe," (DistilBERT model)"),eqe.forEach(t),$9r=i(ge),N3=n(ge,"LI",{});var oqe=s(N3);IEe=n(oqe,"STRONG",{});var F9t=s(IEe);k9r=r(F9t,"electra"),F9t.forEach(t),S9r=r(oqe," \u2014 "),LY=n(oqe,"A",{href:!0});var T9t=s(LY);R9r=r(T9t,"TFElectraForQuestionAnswering"),T9t.forEach(t),P9r=r(oqe," (ELECTRA model)"),oqe.forEach(t),B9r=i(ge),q3=n(ge,"LI",{});var rqe=s(q3);NEe=n(rqe,"STRONG",{});var M9t=s(NEe);I9r=r(M9t,"flaubert"),M9t.forEach(t),N9r=r(rqe," \u2014 "),xY=n(rqe,"A",{href:!0});var E9t=s(xY);q9r=r(E9t,"TFFlaubertForQuestionAnsweringSimple"),E9t.forEach(t),j9r=r(rqe," (FlauBERT model)"),rqe.forEach(t),D9r=i(ge),j3=n(ge,"LI",{});var tqe=s(j3);qEe=n(tqe,"STRONG",{});var C9t=s(qEe);G9r=r(C9t,"funnel"),C9t.forEach(t),O9r=r(tqe," \u2014 "),$Y=n(tqe,"A",{href:!0});var w9t=s($Y);V9r=r(w9t,"TFFunnelForQuestionAnswering"),w9t.forEach(t),X9r=r(tqe," (Funnel Transformer model)"),tqe.forEach(t),z9r=i(ge),D3=n(ge,"LI",{});var aqe=s(D3);jEe=n(aqe,"STRONG",{});var A9t=s(jEe);W9r=r(A9t,"gptj"),A9t.forEach(t),Q9r=r(aqe," \u2014 "),kY=n(aqe,"A",{href:!0});var y9t=s(kY);H9r=r(y9t,"TFGPTJForQuestionAnswering"),y9t.forEach(t),U9r=r(aqe," (GPT-J model)"),aqe.forEach(t),J9r=i(ge),G3=n(ge,"LI",{});var nqe=s(G3);DEe=n(nqe,"STRONG",{});var L9t=s(DEe);Y9r=r(L9t,"longformer"),L9t.forEach(t),K9r=r(nqe," \u2014 "),SY=n(nqe,"A",{href:!0});var x9t=s(SY);Z9r=r(x9t,"TFLongformerForQuestionAnswering"),x9t.forEach(t),exr=r(nqe," (Longformer model)"),nqe.forEach(t),oxr=i(ge),O3=n(ge,"LI",{});var sqe=s(O3);GEe=n(sqe,"STRONG",{});var $9t=s(GEe);rxr=r($9t,"mobilebert"),$9t.forEach(t),txr=r(sqe," \u2014 "),RY=n(sqe,"A",{href:!0});var k9t=s(RY);axr=r(k9t,"TFMobileBertForQuestionAnswering"),k9t.forEach(t),nxr=r(sqe," (MobileBERT model)"),sqe.forEach(t),sxr=i(ge),V3=n(ge,"LI",{});var lqe=s(V3);OEe=n(lqe,"STRONG",{});var S9t=s(OEe);lxr=r(S9t,"mpnet"),S9t.forEach(t),ixr=r(lqe," \u2014 "),PY=n(lqe,"A",{href:!0});var R9t=s(PY);dxr=r(R9t,"TFMPNetForQuestionAnswering"),R9t.forEach(t),cxr=r(lqe," (MPNet model)"),lqe.forEach(t),mxr=i(ge),X3=n(ge,"LI",{});var iqe=s(X3);VEe=n(iqe,"STRONG",{});var P9t=s(VEe);fxr=r(P9t,"rembert"),P9t.forEach(t),gxr=r(iqe," \u2014 "),BY=n(iqe,"A",{href:!0});var B9t=s(BY);hxr=r(B9t,"TFRemBertForQuestionAnswering"),B9t.forEach(t),uxr=r(iqe," (RemBERT model)"),iqe.forEach(t),pxr=i(ge),z3=n(ge,"LI",{});var dqe=s(z3);XEe=n(dqe,"STRONG",{});var I9t=s(XEe);_xr=r(I9t,"roberta"),I9t.forEach(t),bxr=r(dqe," \u2014 "),IY=n(dqe,"A",{href:!0});var N9t=s(IY);vxr=r(N9t,"TFRobertaForQuestionAnswering"),N9t.forEach(t),Fxr=r(dqe," (RoBERTa model)"),dqe.forEach(t),Txr=i(ge),W3=n(ge,"LI",{});var cqe=s(W3);zEe=n(cqe,"STRONG",{});var q9t=s(zEe);Mxr=r(q9t,"roformer"),q9t.forEach(t),Exr=r(cqe," \u2014 "),NY=n(cqe,"A",{href:!0});var j9t=s(NY);Cxr=r(j9t,"TFRoFormerForQuestionAnswering"),j9t.forEach(t),wxr=r(cqe," (RoFormer model)"),cqe.forEach(t),Axr=i(ge),Q3=n(ge,"LI",{});var mqe=s(Q3);WEe=n(mqe,"STRONG",{});var D9t=s(WEe);yxr=r(D9t,"xlm"),D9t.forEach(t),Lxr=r(mqe," \u2014 "),qY=n(mqe,"A",{href:!0});var G9t=s(qY);xxr=r(G9t,"TFXLMForQuestionAnsweringSimple"),G9t.forEach(t),$xr=r(mqe," (XLM model)"),mqe.forEach(t),kxr=i(ge),H3=n(ge,"LI",{});var fqe=s(H3);QEe=n(fqe,"STRONG",{});var O9t=s(QEe);Sxr=r(O9t,"xlm-roberta"),O9t.forEach(t),Rxr=r(fqe," \u2014 "),jY=n(fqe,"A",{href:!0});var V9t=s(jY);Pxr=r(V9t,"TFXLMRobertaForQuestionAnswering"),V9t.forEach(t),Bxr=r(fqe," (XLM-RoBERTa model)"),fqe.forEach(t),Ixr=i(ge),U3=n(ge,"LI",{});var gqe=s(U3);HEe=n(gqe,"STRONG",{});var X9t=s(HEe);Nxr=r(X9t,"xlnet"),X9t.forEach(t),qxr=r(gqe," \u2014 "),DY=n(gqe,"A",{href:!0});var z9t=s(DY);jxr=r(z9t,"TFXLNetForQuestionAnsweringSimple"),z9t.forEach(t),Dxr=r(gqe," (XLNet model)"),gqe.forEach(t),ge.forEach(t),Gxr=i(Xl),T(J3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),WGe=i(m),Pc=n(m,"H2",{class:!0});var oXe=s(Pc);Y3=n(oXe,"A",{id:!0,class:!0,href:!0});var W9t=s(Y3);UEe=n(W9t,"SPAN",{});var Q9t=s(UEe);T(tx.$$.fragment,Q9t),Q9t.forEach(t),W9t.forEach(t),Oxr=i(oXe),JEe=n(oXe,"SPAN",{});var H9t=s(JEe);Vxr=r(H9t,"TFAutoModelForVision2Seq"),H9t.forEach(t),oXe.forEach(t),QGe=i(m),mr=n(m,"DIV",{class:!0});var zl=s(mr);T(ax.$$.fragment,zl),Xxr=i(zl),Bc=n(zl,"P",{});var Joe=s(Bc);zxr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GY=n(Joe,"A",{href:!0});var U9t=s(GY);Wxr=r(U9t,"from_pretrained()"),U9t.forEach(t),Qxr=r(Joe," class method or the "),OY=n(Joe,"A",{href:!0});var J9t=s(OY);Hxr=r(J9t,"from_config()"),J9t.forEach(t),Uxr=r(Joe,` class
method.`),Joe.forEach(t),Jxr=i(zl),nx=n(zl,"P",{});var rXe=s(nx);Yxr=r(rXe,"This class cannot be instantiated directly using "),YEe=n(rXe,"CODE",{});var Y9t=s(YEe);Kxr=r(Y9t,"__init__()"),Y9t.forEach(t),Zxr=r(rXe," (throws an error)."),rXe.forEach(t),e$r=i(zl),Ot=n(zl,"DIV",{class:!0});var Sy=s(Ot);T(sx.$$.fragment,Sy),o$r=i(Sy),KEe=n(Sy,"P",{});var K9t=s(KEe);r$r=r(K9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K9t.forEach(t),t$r=i(Sy),Ic=n(Sy,"P",{});var Yoe=s(Ic);a$r=r(Yoe,`Note:
Loading a model from its configuration file does `),ZEe=n(Yoe,"STRONG",{});var Z9t=s(ZEe);n$r=r(Z9t,"not"),Z9t.forEach(t),s$r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VY=n(Yoe,"A",{href:!0});var ext=s(VY);l$r=r(ext,"from_pretrained()"),ext.forEach(t),i$r=r(Yoe," to load the model weights."),Yoe.forEach(t),d$r=i(Sy),T(K3.$$.fragment,Sy),Sy.forEach(t),c$r=i(zl),jr=n(zl,"DIV",{class:!0});var Wl=s(jr);T(lx.$$.fragment,Wl),m$r=i(Wl),eCe=n(Wl,"P",{});var oxt=s(eCe);f$r=r(oxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oxt.forEach(t),g$r=i(Wl),_n=n(Wl,"P",{});var Ry=s(_n);h$r=r(Ry,"The model class to instantiate is selected based on the "),oCe=n(Ry,"CODE",{});var rxt=s(oCe);u$r=r(rxt,"model_type"),rxt.forEach(t),p$r=r(Ry,` property of the config object (either
passed as an argument or loaded from `),rCe=n(Ry,"CODE",{});var txt=s(rCe);_$r=r(txt,"pretrained_model_name_or_path"),txt.forEach(t),b$r=r(Ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(Ry,"CODE",{});var axt=s(tCe);v$r=r(axt,"pretrained_model_name_or_path"),axt.forEach(t),F$r=r(Ry,":"),Ry.forEach(t),T$r=i(Wl),aCe=n(Wl,"UL",{});var nxt=s(aCe);Z3=n(nxt,"LI",{});var hqe=s(Z3);nCe=n(hqe,"STRONG",{});var sxt=s(nCe);M$r=r(sxt,"vision-encoder-decoder"),sxt.forEach(t),E$r=r(hqe," \u2014 "),XY=n(hqe,"A",{href:!0});var lxt=s(XY);C$r=r(lxt,"TFVisionEncoderDecoderModel"),lxt.forEach(t),w$r=r(hqe," (Vision Encoder decoder model)"),hqe.forEach(t),nxt.forEach(t),A$r=i(Wl),T(ew.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),HGe=i(m),Nc=n(m,"H2",{class:!0});var tXe=s(Nc);ow=n(tXe,"A",{id:!0,class:!0,href:!0});var ixt=s(ow);sCe=n(ixt,"SPAN",{});var dxt=s(sCe);T(ix.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),y$r=i(tXe),lCe=n(tXe,"SPAN",{});var cxt=s(lCe);L$r=r(cxt,"TFAutoModelForSpeechSeq2Seq"),cxt.forEach(t),tXe.forEach(t),UGe=i(m),fr=n(m,"DIV",{class:!0});var Ql=s(fr);T(dx.$$.fragment,Ql),x$r=i(Ql),qc=n(Ql,"P",{});var Koe=s(qc);$$r=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zY=n(Koe,"A",{href:!0});var mxt=s(zY);k$r=r(mxt,"from_pretrained()"),mxt.forEach(t),S$r=r(Koe," class method or the "),WY=n(Koe,"A",{href:!0});var fxt=s(WY);R$r=r(fxt,"from_config()"),fxt.forEach(t),P$r=r(Koe,` class
method.`),Koe.forEach(t),B$r=i(Ql),cx=n(Ql,"P",{});var aXe=s(cx);I$r=r(aXe,"This class cannot be instantiated directly using "),iCe=n(aXe,"CODE",{});var gxt=s(iCe);N$r=r(gxt,"__init__()"),gxt.forEach(t),q$r=r(aXe," (throws an error)."),aXe.forEach(t),j$r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Py=s(Vt);T(mx.$$.fragment,Py),D$r=i(Py),dCe=n(Py,"P",{});var hxt=s(dCe);G$r=r(hxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hxt.forEach(t),O$r=i(Py),jc=n(Py,"P",{});var Zoe=s(jc);V$r=r(Zoe,`Note:
Loading a model from its configuration file does `),cCe=n(Zoe,"STRONG",{});var uxt=s(cCe);X$r=r(uxt,"not"),uxt.forEach(t),z$r=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(Zoe,"A",{href:!0});var pxt=s(QY);W$r=r(pxt,"from_pretrained()"),pxt.forEach(t),Q$r=r(Zoe," to load the model weights."),Zoe.forEach(t),H$r=i(Py),T(rw.$$.fragment,Py),Py.forEach(t),U$r=i(Ql),Dr=n(Ql,"DIV",{class:!0});var Hl=s(Dr);T(fx.$$.fragment,Hl),J$r=i(Hl),mCe=n(Hl,"P",{});var _xt=s(mCe);Y$r=r(_xt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_xt.forEach(t),K$r=i(Hl),bn=n(Hl,"P",{});var By=s(bn);Z$r=r(By,"The model class to instantiate is selected based on the "),fCe=n(By,"CODE",{});var bxt=s(fCe);ekr=r(bxt,"model_type"),bxt.forEach(t),okr=r(By,` property of the config object (either
passed as an argument or loaded from `),gCe=n(By,"CODE",{});var vxt=s(gCe);rkr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),tkr=r(By,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hCe=n(By,"CODE",{});var Fxt=s(hCe);akr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),nkr=r(By,":"),By.forEach(t),skr=i(Hl),uCe=n(Hl,"UL",{});var Txt=s(uCe);tw=n(Txt,"LI",{});var uqe=s(tw);pCe=n(uqe,"STRONG",{});var Mxt=s(pCe);lkr=r(Mxt,"speech_to_text"),Mxt.forEach(t),ikr=r(uqe," \u2014 "),HY=n(uqe,"A",{href:!0});var Ext=s(HY);dkr=r(Ext,"TFSpeech2TextForConditionalGeneration"),Ext.forEach(t),ckr=r(uqe," (Speech2Text model)"),uqe.forEach(t),Txt.forEach(t),mkr=i(Hl),T(aw.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),JGe=i(m),Dc=n(m,"H2",{class:!0});var nXe=s(Dc);nw=n(nXe,"A",{id:!0,class:!0,href:!0});var Cxt=s(nw);_Ce=n(Cxt,"SPAN",{});var wxt=s(_Ce);T(gx.$$.fragment,wxt),wxt.forEach(t),Cxt.forEach(t),fkr=i(nXe),bCe=n(nXe,"SPAN",{});var Axt=s(bCe);gkr=r(Axt,"FlaxAutoModel"),Axt.forEach(t),nXe.forEach(t),YGe=i(m),gr=n(m,"DIV",{class:!0});var Ul=s(gr);T(hx.$$.fragment,Ul),hkr=i(Ul),Gc=n(Ul,"P",{});var ere=s(Gc);ukr=r(ere,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UY=n(ere,"A",{href:!0});var yxt=s(UY);pkr=r(yxt,"from_pretrained()"),yxt.forEach(t),_kr=r(ere," class method or the "),JY=n(ere,"A",{href:!0});var Lxt=s(JY);bkr=r(Lxt,"from_config()"),Lxt.forEach(t),vkr=r(ere,` class
method.`),ere.forEach(t),Fkr=i(Ul),ux=n(Ul,"P",{});var sXe=s(ux);Tkr=r(sXe,"This class cannot be instantiated directly using "),vCe=n(sXe,"CODE",{});var xxt=s(vCe);Mkr=r(xxt,"__init__()"),xxt.forEach(t),Ekr=r(sXe," (throws an error)."),sXe.forEach(t),Ckr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var Iy=s(Xt);T(px.$$.fragment,Iy),wkr=i(Iy),FCe=n(Iy,"P",{});var $xt=s(FCe);Akr=r($xt,"Instantiates one of the base model classes of the library from a configuration."),$xt.forEach(t),ykr=i(Iy),Oc=n(Iy,"P",{});var ore=s(Oc);Lkr=r(ore,`Note:
Loading a model from its configuration file does `),TCe=n(ore,"STRONG",{});var kxt=s(TCe);xkr=r(kxt,"not"),kxt.forEach(t),$kr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(ore,"A",{href:!0});var Sxt=s(YY);kkr=r(Sxt,"from_pretrained()"),Sxt.forEach(t),Skr=r(ore," to load the model weights."),ore.forEach(t),Rkr=i(Iy),T(sw.$$.fragment,Iy),Iy.forEach(t),Pkr=i(Ul),Gr=n(Ul,"DIV",{class:!0});var Jl=s(Gr);T(_x.$$.fragment,Jl),Bkr=i(Jl),MCe=n(Jl,"P",{});var Rxt=s(MCe);Ikr=r(Rxt,"Instantiate one of the base model classes of the library from a pretrained model."),Rxt.forEach(t),Nkr=i(Jl),vn=n(Jl,"P",{});var Ny=s(vn);qkr=r(Ny,"The model class to instantiate is selected based on the "),ECe=n(Ny,"CODE",{});var Pxt=s(ECe);jkr=r(Pxt,"model_type"),Pxt.forEach(t),Dkr=r(Ny,` property of the config object (either
passed as an argument or loaded from `),CCe=n(Ny,"CODE",{});var Bxt=s(CCe);Gkr=r(Bxt,"pretrained_model_name_or_path"),Bxt.forEach(t),Okr=r(Ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(Ny,"CODE",{});var Ixt=s(wCe);Vkr=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),Xkr=r(Ny,":"),Ny.forEach(t),zkr=i(Jl),te=n(Jl,"UL",{});var ne=s(te);lw=n(ne,"LI",{});var pqe=s(lw);ACe=n(pqe,"STRONG",{});var Nxt=s(ACe);Wkr=r(Nxt,"albert"),Nxt.forEach(t),Qkr=r(pqe," \u2014 "),KY=n(pqe,"A",{href:!0});var qxt=s(KY);Hkr=r(qxt,"FlaxAlbertModel"),qxt.forEach(t),Ukr=r(pqe," (ALBERT model)"),pqe.forEach(t),Jkr=i(ne),iw=n(ne,"LI",{});var _qe=s(iw);yCe=n(_qe,"STRONG",{});var jxt=s(yCe);Ykr=r(jxt,"bart"),jxt.forEach(t),Kkr=r(_qe," \u2014 "),ZY=n(_qe,"A",{href:!0});var Dxt=s(ZY);Zkr=r(Dxt,"FlaxBartModel"),Dxt.forEach(t),eSr=r(_qe," (BART model)"),_qe.forEach(t),oSr=i(ne),dw=n(ne,"LI",{});var bqe=s(dw);LCe=n(bqe,"STRONG",{});var Gxt=s(LCe);rSr=r(Gxt,"beit"),Gxt.forEach(t),tSr=r(bqe," \u2014 "),eK=n(bqe,"A",{href:!0});var Oxt=s(eK);aSr=r(Oxt,"FlaxBeitModel"),Oxt.forEach(t),nSr=r(bqe," (BEiT model)"),bqe.forEach(t),sSr=i(ne),cw=n(ne,"LI",{});var vqe=s(cw);xCe=n(vqe,"STRONG",{});var Vxt=s(xCe);lSr=r(Vxt,"bert"),Vxt.forEach(t),iSr=r(vqe," \u2014 "),oK=n(vqe,"A",{href:!0});var Xxt=s(oK);dSr=r(Xxt,"FlaxBertModel"),Xxt.forEach(t),cSr=r(vqe," (BERT model)"),vqe.forEach(t),mSr=i(ne),mw=n(ne,"LI",{});var Fqe=s(mw);$Ce=n(Fqe,"STRONG",{});var zxt=s($Ce);fSr=r(zxt,"big_bird"),zxt.forEach(t),gSr=r(Fqe," \u2014 "),rK=n(Fqe,"A",{href:!0});var Wxt=s(rK);hSr=r(Wxt,"FlaxBigBirdModel"),Wxt.forEach(t),uSr=r(Fqe," (BigBird model)"),Fqe.forEach(t),pSr=i(ne),fw=n(ne,"LI",{});var Tqe=s(fw);kCe=n(Tqe,"STRONG",{});var Qxt=s(kCe);_Sr=r(Qxt,"blenderbot"),Qxt.forEach(t),bSr=r(Tqe," \u2014 "),tK=n(Tqe,"A",{href:!0});var Hxt=s(tK);vSr=r(Hxt,"FlaxBlenderbotModel"),Hxt.forEach(t),FSr=r(Tqe," (Blenderbot model)"),Tqe.forEach(t),TSr=i(ne),gw=n(ne,"LI",{});var Mqe=s(gw);SCe=n(Mqe,"STRONG",{});var Uxt=s(SCe);MSr=r(Uxt,"blenderbot-small"),Uxt.forEach(t),ESr=r(Mqe," \u2014 "),aK=n(Mqe,"A",{href:!0});var Jxt=s(aK);CSr=r(Jxt,"FlaxBlenderbotSmallModel"),Jxt.forEach(t),wSr=r(Mqe," (BlenderbotSmall model)"),Mqe.forEach(t),ASr=i(ne),hw=n(ne,"LI",{});var Eqe=s(hw);RCe=n(Eqe,"STRONG",{});var Yxt=s(RCe);ySr=r(Yxt,"clip"),Yxt.forEach(t),LSr=r(Eqe," \u2014 "),nK=n(Eqe,"A",{href:!0});var Kxt=s(nK);xSr=r(Kxt,"FlaxCLIPModel"),Kxt.forEach(t),$Sr=r(Eqe," (CLIP model)"),Eqe.forEach(t),kSr=i(ne),uw=n(ne,"LI",{});var Cqe=s(uw);PCe=n(Cqe,"STRONG",{});var Zxt=s(PCe);SSr=r(Zxt,"distilbert"),Zxt.forEach(t),RSr=r(Cqe," \u2014 "),sK=n(Cqe,"A",{href:!0});var e$t=s(sK);PSr=r(e$t,"FlaxDistilBertModel"),e$t.forEach(t),BSr=r(Cqe," (DistilBERT model)"),Cqe.forEach(t),ISr=i(ne),pw=n(ne,"LI",{});var wqe=s(pw);BCe=n(wqe,"STRONG",{});var o$t=s(BCe);NSr=r(o$t,"electra"),o$t.forEach(t),qSr=r(wqe," \u2014 "),lK=n(wqe,"A",{href:!0});var r$t=s(lK);jSr=r(r$t,"FlaxElectraModel"),r$t.forEach(t),DSr=r(wqe," (ELECTRA model)"),wqe.forEach(t),GSr=i(ne),_w=n(ne,"LI",{});var Aqe=s(_w);ICe=n(Aqe,"STRONG",{});var t$t=s(ICe);OSr=r(t$t,"gpt2"),t$t.forEach(t),VSr=r(Aqe," \u2014 "),iK=n(Aqe,"A",{href:!0});var a$t=s(iK);XSr=r(a$t,"FlaxGPT2Model"),a$t.forEach(t),zSr=r(Aqe," (OpenAI GPT-2 model)"),Aqe.forEach(t),WSr=i(ne),bw=n(ne,"LI",{});var yqe=s(bw);NCe=n(yqe,"STRONG",{});var n$t=s(NCe);QSr=r(n$t,"gpt_neo"),n$t.forEach(t),HSr=r(yqe," \u2014 "),dK=n(yqe,"A",{href:!0});var s$t=s(dK);USr=r(s$t,"FlaxGPTNeoModel"),s$t.forEach(t),JSr=r(yqe," (GPT Neo model)"),yqe.forEach(t),YSr=i(ne),vw=n(ne,"LI",{});var Lqe=s(vw);qCe=n(Lqe,"STRONG",{});var l$t=s(qCe);KSr=r(l$t,"gptj"),l$t.forEach(t),ZSr=r(Lqe," \u2014 "),cK=n(Lqe,"A",{href:!0});var i$t=s(cK);eRr=r(i$t,"FlaxGPTJModel"),i$t.forEach(t),oRr=r(Lqe," (GPT-J model)"),Lqe.forEach(t),rRr=i(ne),Fw=n(ne,"LI",{});var xqe=s(Fw);jCe=n(xqe,"STRONG",{});var d$t=s(jCe);tRr=r(d$t,"marian"),d$t.forEach(t),aRr=r(xqe," \u2014 "),mK=n(xqe,"A",{href:!0});var c$t=s(mK);nRr=r(c$t,"FlaxMarianModel"),c$t.forEach(t),sRr=r(xqe," (Marian model)"),xqe.forEach(t),lRr=i(ne),Tw=n(ne,"LI",{});var $qe=s(Tw);DCe=n($qe,"STRONG",{});var m$t=s(DCe);iRr=r(m$t,"mbart"),m$t.forEach(t),dRr=r($qe," \u2014 "),fK=n($qe,"A",{href:!0});var f$t=s(fK);cRr=r(f$t,"FlaxMBartModel"),f$t.forEach(t),mRr=r($qe," (mBART model)"),$qe.forEach(t),fRr=i(ne),Mw=n(ne,"LI",{});var kqe=s(Mw);GCe=n(kqe,"STRONG",{});var g$t=s(GCe);gRr=r(g$t,"mt5"),g$t.forEach(t),hRr=r(kqe," \u2014 "),gK=n(kqe,"A",{href:!0});var h$t=s(gK);uRr=r(h$t,"FlaxMT5Model"),h$t.forEach(t),pRr=r(kqe," (MT5 model)"),kqe.forEach(t),_Rr=i(ne),Ew=n(ne,"LI",{});var Sqe=s(Ew);OCe=n(Sqe,"STRONG",{});var u$t=s(OCe);bRr=r(u$t,"opt"),u$t.forEach(t),vRr=r(Sqe," \u2014 "),hK=n(Sqe,"A",{href:!0});var p$t=s(hK);FRr=r(p$t,"FlaxOPTModel"),p$t.forEach(t),TRr=r(Sqe," (OPT model)"),Sqe.forEach(t),MRr=i(ne),Cw=n(ne,"LI",{});var Rqe=s(Cw);VCe=n(Rqe,"STRONG",{});var _$t=s(VCe);ERr=r(_$t,"pegasus"),_$t.forEach(t),CRr=r(Rqe," \u2014 "),uK=n(Rqe,"A",{href:!0});var b$t=s(uK);wRr=r(b$t,"FlaxPegasusModel"),b$t.forEach(t),ARr=r(Rqe," (Pegasus model)"),Rqe.forEach(t),yRr=i(ne),ww=n(ne,"LI",{});var Pqe=s(ww);XCe=n(Pqe,"STRONG",{});var v$t=s(XCe);LRr=r(v$t,"roberta"),v$t.forEach(t),xRr=r(Pqe," \u2014 "),pK=n(Pqe,"A",{href:!0});var F$t=s(pK);$Rr=r(F$t,"FlaxRobertaModel"),F$t.forEach(t),kRr=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),SRr=i(ne),Aw=n(ne,"LI",{});var Bqe=s(Aw);zCe=n(Bqe,"STRONG",{});var T$t=s(zCe);RRr=r(T$t,"roformer"),T$t.forEach(t),PRr=r(Bqe," \u2014 "),_K=n(Bqe,"A",{href:!0});var M$t=s(_K);BRr=r(M$t,"FlaxRoFormerModel"),M$t.forEach(t),IRr=r(Bqe," (RoFormer model)"),Bqe.forEach(t),NRr=i(ne),yw=n(ne,"LI",{});var Iqe=s(yw);WCe=n(Iqe,"STRONG",{});var E$t=s(WCe);qRr=r(E$t,"t5"),E$t.forEach(t),jRr=r(Iqe," \u2014 "),bK=n(Iqe,"A",{href:!0});var C$t=s(bK);DRr=r(C$t,"FlaxT5Model"),C$t.forEach(t),GRr=r(Iqe," (T5 model)"),Iqe.forEach(t),ORr=i(ne),Lw=n(ne,"LI",{});var Nqe=s(Lw);QCe=n(Nqe,"STRONG",{});var w$t=s(QCe);VRr=r(w$t,"vision-text-dual-encoder"),w$t.forEach(t),XRr=r(Nqe," \u2014 "),vK=n(Nqe,"A",{href:!0});var A$t=s(vK);zRr=r(A$t,"FlaxVisionTextDualEncoderModel"),A$t.forEach(t),WRr=r(Nqe," (VisionTextDualEncoder model)"),Nqe.forEach(t),QRr=i(ne),xw=n(ne,"LI",{});var qqe=s(xw);HCe=n(qqe,"STRONG",{});var y$t=s(HCe);HRr=r(y$t,"vit"),y$t.forEach(t),URr=r(qqe," \u2014 "),FK=n(qqe,"A",{href:!0});var L$t=s(FK);JRr=r(L$t,"FlaxViTModel"),L$t.forEach(t),YRr=r(qqe," (ViT model)"),qqe.forEach(t),KRr=i(ne),$w=n(ne,"LI",{});var jqe=s($w);UCe=n(jqe,"STRONG",{});var x$t=s(UCe);ZRr=r(x$t,"wav2vec2"),x$t.forEach(t),ePr=r(jqe," \u2014 "),TK=n(jqe,"A",{href:!0});var $$t=s(TK);oPr=r($$t,"FlaxWav2Vec2Model"),$$t.forEach(t),rPr=r(jqe," (Wav2Vec2 model)"),jqe.forEach(t),tPr=i(ne),kw=n(ne,"LI",{});var Dqe=s(kw);JCe=n(Dqe,"STRONG",{});var k$t=s(JCe);aPr=r(k$t,"xglm"),k$t.forEach(t),nPr=r(Dqe," \u2014 "),MK=n(Dqe,"A",{href:!0});var S$t=s(MK);sPr=r(S$t,"FlaxXGLMModel"),S$t.forEach(t),lPr=r(Dqe," (XGLM model)"),Dqe.forEach(t),iPr=i(ne),Sw=n(ne,"LI",{});var Gqe=s(Sw);YCe=n(Gqe,"STRONG",{});var R$t=s(YCe);dPr=r(R$t,"xlm-roberta"),R$t.forEach(t),cPr=r(Gqe," \u2014 "),EK=n(Gqe,"A",{href:!0});var P$t=s(EK);mPr=r(P$t,"FlaxXLMRobertaModel"),P$t.forEach(t),fPr=r(Gqe," (XLM-RoBERTa model)"),Gqe.forEach(t),ne.forEach(t),gPr=i(Jl),T(Rw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),KGe=i(m),Vc=n(m,"H2",{class:!0});var lXe=s(Vc);Pw=n(lXe,"A",{id:!0,class:!0,href:!0});var B$t=s(Pw);KCe=n(B$t,"SPAN",{});var I$t=s(KCe);T(bx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),hPr=i(lXe),ZCe=n(lXe,"SPAN",{});var N$t=s(ZCe);uPr=r(N$t,"FlaxAutoModelForCausalLM"),N$t.forEach(t),lXe.forEach(t),ZGe=i(m),hr=n(m,"DIV",{class:!0});var Yl=s(hr);T(vx.$$.fragment,Yl),pPr=i(Yl),Xc=n(Yl,"P",{});var rre=s(Xc);_Pr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),CK=n(rre,"A",{href:!0});var q$t=s(CK);bPr=r(q$t,"from_pretrained()"),q$t.forEach(t),vPr=r(rre," class method or the "),wK=n(rre,"A",{href:!0});var j$t=s(wK);FPr=r(j$t,"from_config()"),j$t.forEach(t),TPr=r(rre,` class
method.`),rre.forEach(t),MPr=i(Yl),Fx=n(Yl,"P",{});var iXe=s(Fx);EPr=r(iXe,"This class cannot be instantiated directly using "),e5e=n(iXe,"CODE",{});var D$t=s(e5e);CPr=r(D$t,"__init__()"),D$t.forEach(t),wPr=r(iXe," (throws an error)."),iXe.forEach(t),APr=i(Yl),zt=n(Yl,"DIV",{class:!0});var qy=s(zt);T(Tx.$$.fragment,qy),yPr=i(qy),o5e=n(qy,"P",{});var G$t=s(o5e);LPr=r(G$t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G$t.forEach(t),xPr=i(qy),zc=n(qy,"P",{});var tre=s(zc);$Pr=r(tre,`Note:
Loading a model from its configuration file does `),r5e=n(tre,"STRONG",{});var O$t=s(r5e);kPr=r(O$t,"not"),O$t.forEach(t),SPr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(tre,"A",{href:!0});var V$t=s(AK);RPr=r(V$t,"from_pretrained()"),V$t.forEach(t),PPr=r(tre," to load the model weights."),tre.forEach(t),BPr=i(qy),T(Bw.$$.fragment,qy),qy.forEach(t),IPr=i(Yl),Or=n(Yl,"DIV",{class:!0});var Kl=s(Or);T(Mx.$$.fragment,Kl),NPr=i(Kl),t5e=n(Kl,"P",{});var X$t=s(t5e);qPr=r(X$t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X$t.forEach(t),jPr=i(Kl),Fn=n(Kl,"P",{});var jy=s(Fn);DPr=r(jy,"The model class to instantiate is selected based on the "),a5e=n(jy,"CODE",{});var z$t=s(a5e);GPr=r(z$t,"model_type"),z$t.forEach(t),OPr=r(jy,` property of the config object (either
passed as an argument or loaded from `),n5e=n(jy,"CODE",{});var W$t=s(n5e);VPr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),XPr=r(jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(jy,"CODE",{});var Q$t=s(s5e);zPr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),WPr=r(jy,":"),jy.forEach(t),QPr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);Iw=n(Ne,"LI",{});var Oqe=s(Iw);l5e=n(Oqe,"STRONG",{});var H$t=s(l5e);HPr=r(H$t,"bart"),H$t.forEach(t),UPr=r(Oqe," \u2014 "),yK=n(Oqe,"A",{href:!0});var U$t=s(yK);JPr=r(U$t,"FlaxBartForCausalLM"),U$t.forEach(t),YPr=r(Oqe," (BART model)"),Oqe.forEach(t),KPr=i(Ne),Nw=n(Ne,"LI",{});var Vqe=s(Nw);i5e=n(Vqe,"STRONG",{});var J$t=s(i5e);ZPr=r(J$t,"bert"),J$t.forEach(t),eBr=r(Vqe," \u2014 "),LK=n(Vqe,"A",{href:!0});var Y$t=s(LK);oBr=r(Y$t,"FlaxBertForCausalLM"),Y$t.forEach(t),rBr=r(Vqe," (BERT model)"),Vqe.forEach(t),tBr=i(Ne),qw=n(Ne,"LI",{});var Xqe=s(qw);d5e=n(Xqe,"STRONG",{});var K$t=s(d5e);aBr=r(K$t,"big_bird"),K$t.forEach(t),nBr=r(Xqe," \u2014 "),xK=n(Xqe,"A",{href:!0});var Z$t=s(xK);sBr=r(Z$t,"FlaxBigBirdForCausalLM"),Z$t.forEach(t),lBr=r(Xqe," (BigBird model)"),Xqe.forEach(t),iBr=i(Ne),jw=n(Ne,"LI",{});var zqe=s(jw);c5e=n(zqe,"STRONG",{});var ekt=s(c5e);dBr=r(ekt,"electra"),ekt.forEach(t),cBr=r(zqe," \u2014 "),$K=n(zqe,"A",{href:!0});var okt=s($K);mBr=r(okt,"FlaxElectraForCausalLM"),okt.forEach(t),fBr=r(zqe," (ELECTRA model)"),zqe.forEach(t),gBr=i(Ne),Dw=n(Ne,"LI",{});var Wqe=s(Dw);m5e=n(Wqe,"STRONG",{});var rkt=s(m5e);hBr=r(rkt,"gpt2"),rkt.forEach(t),uBr=r(Wqe," \u2014 "),kK=n(Wqe,"A",{href:!0});var tkt=s(kK);pBr=r(tkt,"FlaxGPT2LMHeadModel"),tkt.forEach(t),_Br=r(Wqe," (OpenAI GPT-2 model)"),Wqe.forEach(t),bBr=i(Ne),Gw=n(Ne,"LI",{});var Qqe=s(Gw);f5e=n(Qqe,"STRONG",{});var akt=s(f5e);vBr=r(akt,"gpt_neo"),akt.forEach(t),FBr=r(Qqe," \u2014 "),SK=n(Qqe,"A",{href:!0});var nkt=s(SK);TBr=r(nkt,"FlaxGPTNeoForCausalLM"),nkt.forEach(t),MBr=r(Qqe," (GPT Neo model)"),Qqe.forEach(t),EBr=i(Ne),Ow=n(Ne,"LI",{});var Hqe=s(Ow);g5e=n(Hqe,"STRONG",{});var skt=s(g5e);CBr=r(skt,"gptj"),skt.forEach(t),wBr=r(Hqe," \u2014 "),RK=n(Hqe,"A",{href:!0});var lkt=s(RK);ABr=r(lkt,"FlaxGPTJForCausalLM"),lkt.forEach(t),yBr=r(Hqe," (GPT-J model)"),Hqe.forEach(t),LBr=i(Ne),Vw=n(Ne,"LI",{});var Uqe=s(Vw);h5e=n(Uqe,"STRONG",{});var ikt=s(h5e);xBr=r(ikt,"opt"),ikt.forEach(t),$Br=r(Uqe," \u2014 "),PK=n(Uqe,"A",{href:!0});var dkt=s(PK);kBr=r(dkt,"FlaxOPTForCausalLM"),dkt.forEach(t),SBr=r(Uqe," (OPT model)"),Uqe.forEach(t),RBr=i(Ne),Xw=n(Ne,"LI",{});var Jqe=s(Xw);u5e=n(Jqe,"STRONG",{});var ckt=s(u5e);PBr=r(ckt,"roberta"),ckt.forEach(t),BBr=r(Jqe," \u2014 "),BK=n(Jqe,"A",{href:!0});var mkt=s(BK);IBr=r(mkt,"FlaxRobertaForCausalLM"),mkt.forEach(t),NBr=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),qBr=i(Ne),zw=n(Ne,"LI",{});var Yqe=s(zw);p5e=n(Yqe,"STRONG",{});var fkt=s(p5e);jBr=r(fkt,"xglm"),fkt.forEach(t),DBr=r(Yqe," \u2014 "),IK=n(Yqe,"A",{href:!0});var gkt=s(IK);GBr=r(gkt,"FlaxXGLMForCausalLM"),gkt.forEach(t),OBr=r(Yqe," (XGLM model)"),Yqe.forEach(t),Ne.forEach(t),VBr=i(Kl),T(Ww.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),eOe=i(m),Wc=n(m,"H2",{class:!0});var dXe=s(Wc);Qw=n(dXe,"A",{id:!0,class:!0,href:!0});var hkt=s(Qw);_5e=n(hkt,"SPAN",{});var ukt=s(_5e);T(Ex.$$.fragment,ukt),ukt.forEach(t),hkt.forEach(t),XBr=i(dXe),b5e=n(dXe,"SPAN",{});var pkt=s(b5e);zBr=r(pkt,"FlaxAutoModelForPreTraining"),pkt.forEach(t),dXe.forEach(t),oOe=i(m),ur=n(m,"DIV",{class:!0});var Zl=s(ur);T(Cx.$$.fragment,Zl),WBr=i(Zl),Qc=n(Zl,"P",{});var are=s(Qc);QBr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NK=n(are,"A",{href:!0});var _kt=s(NK);HBr=r(_kt,"from_pretrained()"),_kt.forEach(t),UBr=r(are," class method or the "),qK=n(are,"A",{href:!0});var bkt=s(qK);JBr=r(bkt,"from_config()"),bkt.forEach(t),YBr=r(are,` class
method.`),are.forEach(t),KBr=i(Zl),wx=n(Zl,"P",{});var cXe=s(wx);ZBr=r(cXe,"This class cannot be instantiated directly using "),v5e=n(cXe,"CODE",{});var vkt=s(v5e);eIr=r(vkt,"__init__()"),vkt.forEach(t),oIr=r(cXe," (throws an error)."),cXe.forEach(t),rIr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Dy=s(Wt);T(Ax.$$.fragment,Dy),tIr=i(Dy),F5e=n(Dy,"P",{});var Fkt=s(F5e);aIr=r(Fkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fkt.forEach(t),nIr=i(Dy),Hc=n(Dy,"P",{});var nre=s(Hc);sIr=r(nre,`Note:
Loading a model from its configuration file does `),T5e=n(nre,"STRONG",{});var Tkt=s(T5e);lIr=r(Tkt,"not"),Tkt.forEach(t),iIr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(nre,"A",{href:!0});var Mkt=s(jK);dIr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),cIr=r(nre," to load the model weights."),nre.forEach(t),mIr=i(Dy),T(Hw.$$.fragment,Dy),Dy.forEach(t),fIr=i(Zl),Vr=n(Zl,"DIV",{class:!0});var ei=s(Vr);T(yx.$$.fragment,ei),gIr=i(ei),M5e=n(ei,"P",{});var Ekt=s(M5e);hIr=r(Ekt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ekt.forEach(t),uIr=i(ei),Tn=n(ei,"P",{});var Gy=s(Tn);pIr=r(Gy,"The model class to instantiate is selected based on the "),E5e=n(Gy,"CODE",{});var Ckt=s(E5e);_Ir=r(Ckt,"model_type"),Ckt.forEach(t),bIr=r(Gy,` property of the config object (either
passed as an argument or loaded from `),C5e=n(Gy,"CODE",{});var wkt=s(C5e);vIr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),FIr=r(Gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(Gy,"CODE",{});var Akt=s(w5e);TIr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),MIr=r(Gy,":"),Gy.forEach(t),EIr=i(ei),Ee=n(ei,"UL",{});var we=s(Ee);Uw=n(we,"LI",{});var Kqe=s(Uw);A5e=n(Kqe,"STRONG",{});var ykt=s(A5e);CIr=r(ykt,"albert"),ykt.forEach(t),wIr=r(Kqe," \u2014 "),DK=n(Kqe,"A",{href:!0});var Lkt=s(DK);AIr=r(Lkt,"FlaxAlbertForPreTraining"),Lkt.forEach(t),yIr=r(Kqe," (ALBERT model)"),Kqe.forEach(t),LIr=i(we),Jw=n(we,"LI",{});var Zqe=s(Jw);y5e=n(Zqe,"STRONG",{});var xkt=s(y5e);xIr=r(xkt,"bart"),xkt.forEach(t),$Ir=r(Zqe," \u2014 "),GK=n(Zqe,"A",{href:!0});var $kt=s(GK);kIr=r($kt,"FlaxBartForConditionalGeneration"),$kt.forEach(t),SIr=r(Zqe," (BART model)"),Zqe.forEach(t),RIr=i(we),Yw=n(we,"LI",{});var eje=s(Yw);L5e=n(eje,"STRONG",{});var kkt=s(L5e);PIr=r(kkt,"bert"),kkt.forEach(t),BIr=r(eje," \u2014 "),OK=n(eje,"A",{href:!0});var Skt=s(OK);IIr=r(Skt,"FlaxBertForPreTraining"),Skt.forEach(t),NIr=r(eje," (BERT model)"),eje.forEach(t),qIr=i(we),Kw=n(we,"LI",{});var oje=s(Kw);x5e=n(oje,"STRONG",{});var Rkt=s(x5e);jIr=r(Rkt,"big_bird"),Rkt.forEach(t),DIr=r(oje," \u2014 "),VK=n(oje,"A",{href:!0});var Pkt=s(VK);GIr=r(Pkt,"FlaxBigBirdForPreTraining"),Pkt.forEach(t),OIr=r(oje," (BigBird model)"),oje.forEach(t),VIr=i(we),Zw=n(we,"LI",{});var rje=s(Zw);$5e=n(rje,"STRONG",{});var Bkt=s($5e);XIr=r(Bkt,"electra"),Bkt.forEach(t),zIr=r(rje," \u2014 "),XK=n(rje,"A",{href:!0});var Ikt=s(XK);WIr=r(Ikt,"FlaxElectraForPreTraining"),Ikt.forEach(t),QIr=r(rje," (ELECTRA model)"),rje.forEach(t),HIr=i(we),e0=n(we,"LI",{});var tje=s(e0);k5e=n(tje,"STRONG",{});var Nkt=s(k5e);UIr=r(Nkt,"mbart"),Nkt.forEach(t),JIr=r(tje," \u2014 "),zK=n(tje,"A",{href:!0});var qkt=s(zK);YIr=r(qkt,"FlaxMBartForConditionalGeneration"),qkt.forEach(t),KIr=r(tje," (mBART model)"),tje.forEach(t),ZIr=i(we),o0=n(we,"LI",{});var aje=s(o0);S5e=n(aje,"STRONG",{});var jkt=s(S5e);eNr=r(jkt,"mt5"),jkt.forEach(t),oNr=r(aje," \u2014 "),WK=n(aje,"A",{href:!0});var Dkt=s(WK);rNr=r(Dkt,"FlaxMT5ForConditionalGeneration"),Dkt.forEach(t),tNr=r(aje," (MT5 model)"),aje.forEach(t),aNr=i(we),r0=n(we,"LI",{});var nje=s(r0);R5e=n(nje,"STRONG",{});var Gkt=s(R5e);nNr=r(Gkt,"roberta"),Gkt.forEach(t),sNr=r(nje," \u2014 "),QK=n(nje,"A",{href:!0});var Okt=s(QK);lNr=r(Okt,"FlaxRobertaForMaskedLM"),Okt.forEach(t),iNr=r(nje," (RoBERTa model)"),nje.forEach(t),dNr=i(we),t0=n(we,"LI",{});var sje=s(t0);P5e=n(sje,"STRONG",{});var Vkt=s(P5e);cNr=r(Vkt,"roformer"),Vkt.forEach(t),mNr=r(sje," \u2014 "),HK=n(sje,"A",{href:!0});var Xkt=s(HK);fNr=r(Xkt,"FlaxRoFormerForMaskedLM"),Xkt.forEach(t),gNr=r(sje," (RoFormer model)"),sje.forEach(t),hNr=i(we),a0=n(we,"LI",{});var lje=s(a0);B5e=n(lje,"STRONG",{});var zkt=s(B5e);uNr=r(zkt,"t5"),zkt.forEach(t),pNr=r(lje," \u2014 "),UK=n(lje,"A",{href:!0});var Wkt=s(UK);_Nr=r(Wkt,"FlaxT5ForConditionalGeneration"),Wkt.forEach(t),bNr=r(lje," (T5 model)"),lje.forEach(t),vNr=i(we),n0=n(we,"LI",{});var ije=s(n0);I5e=n(ije,"STRONG",{});var Qkt=s(I5e);FNr=r(Qkt,"wav2vec2"),Qkt.forEach(t),TNr=r(ije," \u2014 "),JK=n(ije,"A",{href:!0});var Hkt=s(JK);MNr=r(Hkt,"FlaxWav2Vec2ForPreTraining"),Hkt.forEach(t),ENr=r(ije," (Wav2Vec2 model)"),ije.forEach(t),CNr=i(we),s0=n(we,"LI",{});var dje=s(s0);N5e=n(dje,"STRONG",{});var Ukt=s(N5e);wNr=r(Ukt,"xlm-roberta"),Ukt.forEach(t),ANr=r(dje," \u2014 "),YK=n(dje,"A",{href:!0});var Jkt=s(YK);yNr=r(Jkt,"FlaxXLMRobertaForMaskedLM"),Jkt.forEach(t),LNr=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),we.forEach(t),xNr=i(ei),T(l0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),rOe=i(m),Uc=n(m,"H2",{class:!0});var mXe=s(Uc);i0=n(mXe,"A",{id:!0,class:!0,href:!0});var Ykt=s(i0);q5e=n(Ykt,"SPAN",{});var Kkt=s(q5e);T(Lx.$$.fragment,Kkt),Kkt.forEach(t),Ykt.forEach(t),$Nr=i(mXe),j5e=n(mXe,"SPAN",{});var Zkt=s(j5e);kNr=r(Zkt,"FlaxAutoModelForMaskedLM"),Zkt.forEach(t),mXe.forEach(t),tOe=i(m),pr=n(m,"DIV",{class:!0});var oi=s(pr);T(xx.$$.fragment,oi),SNr=i(oi),Jc=n(oi,"P",{});var sre=s(Jc);RNr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KK=n(sre,"A",{href:!0});var eSt=s(KK);PNr=r(eSt,"from_pretrained()"),eSt.forEach(t),BNr=r(sre," class method or the "),ZK=n(sre,"A",{href:!0});var oSt=s(ZK);INr=r(oSt,"from_config()"),oSt.forEach(t),NNr=r(sre,` class
method.`),sre.forEach(t),qNr=i(oi),$x=n(oi,"P",{});var fXe=s($x);jNr=r(fXe,"This class cannot be instantiated directly using "),D5e=n(fXe,"CODE",{});var rSt=s(D5e);DNr=r(rSt,"__init__()"),rSt.forEach(t),GNr=r(fXe," (throws an error)."),fXe.forEach(t),ONr=i(oi),Qt=n(oi,"DIV",{class:!0});var Oy=s(Qt);T(kx.$$.fragment,Oy),VNr=i(Oy),G5e=n(Oy,"P",{});var tSt=s(G5e);XNr=r(tSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tSt.forEach(t),zNr=i(Oy),Yc=n(Oy,"P",{});var lre=s(Yc);WNr=r(lre,`Note:
Loading a model from its configuration file does `),O5e=n(lre,"STRONG",{});var aSt=s(O5e);QNr=r(aSt,"not"),aSt.forEach(t),HNr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(lre,"A",{href:!0});var nSt=s(eZ);UNr=r(nSt,"from_pretrained()"),nSt.forEach(t),JNr=r(lre," to load the model weights."),lre.forEach(t),YNr=i(Oy),T(d0.$$.fragment,Oy),Oy.forEach(t),KNr=i(oi),Xr=n(oi,"DIV",{class:!0});var ri=s(Xr);T(Sx.$$.fragment,ri),ZNr=i(ri),V5e=n(ri,"P",{});var sSt=s(V5e);eqr=r(sSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sSt.forEach(t),oqr=i(ri),Mn=n(ri,"P",{});var Vy=s(Mn);rqr=r(Vy,"The model class to instantiate is selected based on the "),X5e=n(Vy,"CODE",{});var lSt=s(X5e);tqr=r(lSt,"model_type"),lSt.forEach(t),aqr=r(Vy,` property of the config object (either
passed as an argument or loaded from `),z5e=n(Vy,"CODE",{});var iSt=s(z5e);nqr=r(iSt,"pretrained_model_name_or_path"),iSt.forEach(t),sqr=r(Vy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(Vy,"CODE",{});var dSt=s(W5e);lqr=r(dSt,"pretrained_model_name_or_path"),dSt.forEach(t),iqr=r(Vy,":"),Vy.forEach(t),dqr=i(ri),$e=n(ri,"UL",{});var qe=s($e);c0=n(qe,"LI",{});var cje=s(c0);Q5e=n(cje,"STRONG",{});var cSt=s(Q5e);cqr=r(cSt,"albert"),cSt.forEach(t),mqr=r(cje," \u2014 "),oZ=n(cje,"A",{href:!0});var mSt=s(oZ);fqr=r(mSt,"FlaxAlbertForMaskedLM"),mSt.forEach(t),gqr=r(cje," (ALBERT model)"),cje.forEach(t),hqr=i(qe),m0=n(qe,"LI",{});var mje=s(m0);H5e=n(mje,"STRONG",{});var fSt=s(H5e);uqr=r(fSt,"bart"),fSt.forEach(t),pqr=r(mje," \u2014 "),rZ=n(mje,"A",{href:!0});var gSt=s(rZ);_qr=r(gSt,"FlaxBartForConditionalGeneration"),gSt.forEach(t),bqr=r(mje," (BART model)"),mje.forEach(t),vqr=i(qe),f0=n(qe,"LI",{});var fje=s(f0);U5e=n(fje,"STRONG",{});var hSt=s(U5e);Fqr=r(hSt,"bert"),hSt.forEach(t),Tqr=r(fje," \u2014 "),tZ=n(fje,"A",{href:!0});var uSt=s(tZ);Mqr=r(uSt,"FlaxBertForMaskedLM"),uSt.forEach(t),Eqr=r(fje," (BERT model)"),fje.forEach(t),Cqr=i(qe),g0=n(qe,"LI",{});var gje=s(g0);J5e=n(gje,"STRONG",{});var pSt=s(J5e);wqr=r(pSt,"big_bird"),pSt.forEach(t),Aqr=r(gje," \u2014 "),aZ=n(gje,"A",{href:!0});var _St=s(aZ);yqr=r(_St,"FlaxBigBirdForMaskedLM"),_St.forEach(t),Lqr=r(gje," (BigBird model)"),gje.forEach(t),xqr=i(qe),h0=n(qe,"LI",{});var hje=s(h0);Y5e=n(hje,"STRONG",{});var bSt=s(Y5e);$qr=r(bSt,"distilbert"),bSt.forEach(t),kqr=r(hje," \u2014 "),nZ=n(hje,"A",{href:!0});var vSt=s(nZ);Sqr=r(vSt,"FlaxDistilBertForMaskedLM"),vSt.forEach(t),Rqr=r(hje," (DistilBERT model)"),hje.forEach(t),Pqr=i(qe),u0=n(qe,"LI",{});var uje=s(u0);K5e=n(uje,"STRONG",{});var FSt=s(K5e);Bqr=r(FSt,"electra"),FSt.forEach(t),Iqr=r(uje," \u2014 "),sZ=n(uje,"A",{href:!0});var TSt=s(sZ);Nqr=r(TSt,"FlaxElectraForMaskedLM"),TSt.forEach(t),qqr=r(uje," (ELECTRA model)"),uje.forEach(t),jqr=i(qe),p0=n(qe,"LI",{});var pje=s(p0);Z5e=n(pje,"STRONG",{});var MSt=s(Z5e);Dqr=r(MSt,"mbart"),MSt.forEach(t),Gqr=r(pje," \u2014 "),lZ=n(pje,"A",{href:!0});var ESt=s(lZ);Oqr=r(ESt,"FlaxMBartForConditionalGeneration"),ESt.forEach(t),Vqr=r(pje," (mBART model)"),pje.forEach(t),Xqr=i(qe),_0=n(qe,"LI",{});var _je=s(_0);e3e=n(_je,"STRONG",{});var CSt=s(e3e);zqr=r(CSt,"roberta"),CSt.forEach(t),Wqr=r(_je," \u2014 "),iZ=n(_je,"A",{href:!0});var wSt=s(iZ);Qqr=r(wSt,"FlaxRobertaForMaskedLM"),wSt.forEach(t),Hqr=r(_je," (RoBERTa model)"),_je.forEach(t),Uqr=i(qe),b0=n(qe,"LI",{});var bje=s(b0);o3e=n(bje,"STRONG",{});var ASt=s(o3e);Jqr=r(ASt,"roformer"),ASt.forEach(t),Yqr=r(bje," \u2014 "),dZ=n(bje,"A",{href:!0});var ySt=s(dZ);Kqr=r(ySt,"FlaxRoFormerForMaskedLM"),ySt.forEach(t),Zqr=r(bje," (RoFormer model)"),bje.forEach(t),ejr=i(qe),v0=n(qe,"LI",{});var vje=s(v0);r3e=n(vje,"STRONG",{});var LSt=s(r3e);ojr=r(LSt,"xlm-roberta"),LSt.forEach(t),rjr=r(vje," \u2014 "),cZ=n(vje,"A",{href:!0});var xSt=s(cZ);tjr=r(xSt,"FlaxXLMRobertaForMaskedLM"),xSt.forEach(t),ajr=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),qe.forEach(t),njr=i(ri),T(F0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),aOe=i(m),Kc=n(m,"H2",{class:!0});var gXe=s(Kc);T0=n(gXe,"A",{id:!0,class:!0,href:!0});var $St=s(T0);t3e=n($St,"SPAN",{});var kSt=s(t3e);T(Rx.$$.fragment,kSt),kSt.forEach(t),$St.forEach(t),sjr=i(gXe),a3e=n(gXe,"SPAN",{});var SSt=s(a3e);ljr=r(SSt,"FlaxAutoModelForSeq2SeqLM"),SSt.forEach(t),gXe.forEach(t),nOe=i(m),_r=n(m,"DIV",{class:!0});var ti=s(_r);T(Px.$$.fragment,ti),ijr=i(ti),Zc=n(ti,"P",{});var ire=s(Zc);djr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mZ=n(ire,"A",{href:!0});var RSt=s(mZ);cjr=r(RSt,"from_pretrained()"),RSt.forEach(t),mjr=r(ire," class method or the "),fZ=n(ire,"A",{href:!0});var PSt=s(fZ);fjr=r(PSt,"from_config()"),PSt.forEach(t),gjr=r(ire,` class
method.`),ire.forEach(t),hjr=i(ti),Bx=n(ti,"P",{});var hXe=s(Bx);ujr=r(hXe,"This class cannot be instantiated directly using "),n3e=n(hXe,"CODE",{});var BSt=s(n3e);pjr=r(BSt,"__init__()"),BSt.forEach(t),_jr=r(hXe," (throws an error)."),hXe.forEach(t),bjr=i(ti),Ht=n(ti,"DIV",{class:!0});var Xy=s(Ht);T(Ix.$$.fragment,Xy),vjr=i(Xy),s3e=n(Xy,"P",{});var ISt=s(s3e);Fjr=r(ISt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ISt.forEach(t),Tjr=i(Xy),em=n(Xy,"P",{});var dre=s(em);Mjr=r(dre,`Note:
Loading a model from its configuration file does `),l3e=n(dre,"STRONG",{});var NSt=s(l3e);Ejr=r(NSt,"not"),NSt.forEach(t),Cjr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(dre,"A",{href:!0});var qSt=s(gZ);wjr=r(qSt,"from_pretrained()"),qSt.forEach(t),Ajr=r(dre," to load the model weights."),dre.forEach(t),yjr=i(Xy),T(M0.$$.fragment,Xy),Xy.forEach(t),Ljr=i(ti),zr=n(ti,"DIV",{class:!0});var ai=s(zr);T(Nx.$$.fragment,ai),xjr=i(ai),i3e=n(ai,"P",{});var jSt=s(i3e);$jr=r(jSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jSt.forEach(t),kjr=i(ai),En=n(ai,"P",{});var zy=s(En);Sjr=r(zy,"The model class to instantiate is selected based on the "),d3e=n(zy,"CODE",{});var DSt=s(d3e);Rjr=r(DSt,"model_type"),DSt.forEach(t),Pjr=r(zy,` property of the config object (either
passed as an argument or loaded from `),c3e=n(zy,"CODE",{});var GSt=s(c3e);Bjr=r(GSt,"pretrained_model_name_or_path"),GSt.forEach(t),Ijr=r(zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m3e=n(zy,"CODE",{});var OSt=s(m3e);Njr=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),qjr=r(zy,":"),zy.forEach(t),jjr=i(ai),Pe=n(ai,"UL",{});var ze=s(Pe);E0=n(ze,"LI",{});var Fje=s(E0);f3e=n(Fje,"STRONG",{});var VSt=s(f3e);Djr=r(VSt,"bart"),VSt.forEach(t),Gjr=r(Fje," \u2014 "),hZ=n(Fje,"A",{href:!0});var XSt=s(hZ);Ojr=r(XSt,"FlaxBartForConditionalGeneration"),XSt.forEach(t),Vjr=r(Fje," (BART model)"),Fje.forEach(t),Xjr=i(ze),C0=n(ze,"LI",{});var Tje=s(C0);g3e=n(Tje,"STRONG",{});var zSt=s(g3e);zjr=r(zSt,"blenderbot"),zSt.forEach(t),Wjr=r(Tje," \u2014 "),uZ=n(Tje,"A",{href:!0});var WSt=s(uZ);Qjr=r(WSt,"FlaxBlenderbotForConditionalGeneration"),WSt.forEach(t),Hjr=r(Tje," (Blenderbot model)"),Tje.forEach(t),Ujr=i(ze),w0=n(ze,"LI",{});var Mje=s(w0);h3e=n(Mje,"STRONG",{});var QSt=s(h3e);Jjr=r(QSt,"blenderbot-small"),QSt.forEach(t),Yjr=r(Mje," \u2014 "),pZ=n(Mje,"A",{href:!0});var HSt=s(pZ);Kjr=r(HSt,"FlaxBlenderbotSmallForConditionalGeneration"),HSt.forEach(t),Zjr=r(Mje," (BlenderbotSmall model)"),Mje.forEach(t),eDr=i(ze),A0=n(ze,"LI",{});var Eje=s(A0);u3e=n(Eje,"STRONG",{});var USt=s(u3e);oDr=r(USt,"encoder-decoder"),USt.forEach(t),rDr=r(Eje," \u2014 "),_Z=n(Eje,"A",{href:!0});var JSt=s(_Z);tDr=r(JSt,"FlaxEncoderDecoderModel"),JSt.forEach(t),aDr=r(Eje," (Encoder decoder model)"),Eje.forEach(t),nDr=i(ze),y0=n(ze,"LI",{});var Cje=s(y0);p3e=n(Cje,"STRONG",{});var YSt=s(p3e);sDr=r(YSt,"marian"),YSt.forEach(t),lDr=r(Cje," \u2014 "),bZ=n(Cje,"A",{href:!0});var KSt=s(bZ);iDr=r(KSt,"FlaxMarianMTModel"),KSt.forEach(t),dDr=r(Cje," (Marian model)"),Cje.forEach(t),cDr=i(ze),L0=n(ze,"LI",{});var wje=s(L0);_3e=n(wje,"STRONG",{});var ZSt=s(_3e);mDr=r(ZSt,"mbart"),ZSt.forEach(t),fDr=r(wje," \u2014 "),vZ=n(wje,"A",{href:!0});var eRt=s(vZ);gDr=r(eRt,"FlaxMBartForConditionalGeneration"),eRt.forEach(t),hDr=r(wje," (mBART model)"),wje.forEach(t),uDr=i(ze),x0=n(ze,"LI",{});var Aje=s(x0);b3e=n(Aje,"STRONG",{});var oRt=s(b3e);pDr=r(oRt,"mt5"),oRt.forEach(t),_Dr=r(Aje," \u2014 "),FZ=n(Aje,"A",{href:!0});var rRt=s(FZ);bDr=r(rRt,"FlaxMT5ForConditionalGeneration"),rRt.forEach(t),vDr=r(Aje," (MT5 model)"),Aje.forEach(t),FDr=i(ze),$0=n(ze,"LI",{});var yje=s($0);v3e=n(yje,"STRONG",{});var tRt=s(v3e);TDr=r(tRt,"pegasus"),tRt.forEach(t),MDr=r(yje," \u2014 "),TZ=n(yje,"A",{href:!0});var aRt=s(TZ);EDr=r(aRt,"FlaxPegasusForConditionalGeneration"),aRt.forEach(t),CDr=r(yje," (Pegasus model)"),yje.forEach(t),wDr=i(ze),k0=n(ze,"LI",{});var Lje=s(k0);F3e=n(Lje,"STRONG",{});var nRt=s(F3e);ADr=r(nRt,"t5"),nRt.forEach(t),yDr=r(Lje," \u2014 "),MZ=n(Lje,"A",{href:!0});var sRt=s(MZ);LDr=r(sRt,"FlaxT5ForConditionalGeneration"),sRt.forEach(t),xDr=r(Lje," (T5 model)"),Lje.forEach(t),ze.forEach(t),$Dr=i(ai),T(S0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),sOe=i(m),om=n(m,"H2",{class:!0});var uXe=s(om);R0=n(uXe,"A",{id:!0,class:!0,href:!0});var lRt=s(R0);T3e=n(lRt,"SPAN",{});var iRt=s(T3e);T(qx.$$.fragment,iRt),iRt.forEach(t),lRt.forEach(t),kDr=i(uXe),M3e=n(uXe,"SPAN",{});var dRt=s(M3e);SDr=r(dRt,"FlaxAutoModelForSequenceClassification"),dRt.forEach(t),uXe.forEach(t),lOe=i(m),br=n(m,"DIV",{class:!0});var ni=s(br);T(jx.$$.fragment,ni),RDr=i(ni),rm=n(ni,"P",{});var cre=s(rm);PDr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EZ=n(cre,"A",{href:!0});var cRt=s(EZ);BDr=r(cRt,"from_pretrained()"),cRt.forEach(t),IDr=r(cre," class method or the "),CZ=n(cre,"A",{href:!0});var mRt=s(CZ);NDr=r(mRt,"from_config()"),mRt.forEach(t),qDr=r(cre,` class
method.`),cre.forEach(t),jDr=i(ni),Dx=n(ni,"P",{});var pXe=s(Dx);DDr=r(pXe,"This class cannot be instantiated directly using "),E3e=n(pXe,"CODE",{});var fRt=s(E3e);GDr=r(fRt,"__init__()"),fRt.forEach(t),ODr=r(pXe," (throws an error)."),pXe.forEach(t),VDr=i(ni),Ut=n(ni,"DIV",{class:!0});var Wy=s(Ut);T(Gx.$$.fragment,Wy),XDr=i(Wy),C3e=n(Wy,"P",{});var gRt=s(C3e);zDr=r(gRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gRt.forEach(t),WDr=i(Wy),tm=n(Wy,"P",{});var mre=s(tm);QDr=r(mre,`Note:
Loading a model from its configuration file does `),w3e=n(mre,"STRONG",{});var hRt=s(w3e);HDr=r(hRt,"not"),hRt.forEach(t),UDr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),wZ=n(mre,"A",{href:!0});var uRt=s(wZ);JDr=r(uRt,"from_pretrained()"),uRt.forEach(t),YDr=r(mre," to load the model weights."),mre.forEach(t),KDr=i(Wy),T(P0.$$.fragment,Wy),Wy.forEach(t),ZDr=i(ni),Wr=n(ni,"DIV",{class:!0});var si=s(Wr);T(Ox.$$.fragment,si),eGr=i(si),A3e=n(si,"P",{});var pRt=s(A3e);oGr=r(pRt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pRt.forEach(t),rGr=i(si),Cn=n(si,"P",{});var Qy=s(Cn);tGr=r(Qy,"The model class to instantiate is selected based on the "),y3e=n(Qy,"CODE",{});var _Rt=s(y3e);aGr=r(_Rt,"model_type"),_Rt.forEach(t),nGr=r(Qy,` property of the config object (either
passed as an argument or loaded from `),L3e=n(Qy,"CODE",{});var bRt=s(L3e);sGr=r(bRt,"pretrained_model_name_or_path"),bRt.forEach(t),lGr=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x3e=n(Qy,"CODE",{});var vRt=s(x3e);iGr=r(vRt,"pretrained_model_name_or_path"),vRt.forEach(t),dGr=r(Qy,":"),Qy.forEach(t),cGr=i(si),ke=n(si,"UL",{});var je=s(ke);B0=n(je,"LI",{});var xje=s(B0);$3e=n(xje,"STRONG",{});var FRt=s($3e);mGr=r(FRt,"albert"),FRt.forEach(t),fGr=r(xje," \u2014 "),AZ=n(xje,"A",{href:!0});var TRt=s(AZ);gGr=r(TRt,"FlaxAlbertForSequenceClassification"),TRt.forEach(t),hGr=r(xje," (ALBERT model)"),xje.forEach(t),uGr=i(je),I0=n(je,"LI",{});var $je=s(I0);k3e=n($je,"STRONG",{});var MRt=s(k3e);pGr=r(MRt,"bart"),MRt.forEach(t),_Gr=r($je," \u2014 "),yZ=n($je,"A",{href:!0});var ERt=s(yZ);bGr=r(ERt,"FlaxBartForSequenceClassification"),ERt.forEach(t),vGr=r($je," (BART model)"),$je.forEach(t),FGr=i(je),N0=n(je,"LI",{});var kje=s(N0);S3e=n(kje,"STRONG",{});var CRt=s(S3e);TGr=r(CRt,"bert"),CRt.forEach(t),MGr=r(kje," \u2014 "),LZ=n(kje,"A",{href:!0});var wRt=s(LZ);EGr=r(wRt,"FlaxBertForSequenceClassification"),wRt.forEach(t),CGr=r(kje," (BERT model)"),kje.forEach(t),wGr=i(je),q0=n(je,"LI",{});var Sje=s(q0);R3e=n(Sje,"STRONG",{});var ARt=s(R3e);AGr=r(ARt,"big_bird"),ARt.forEach(t),yGr=r(Sje," \u2014 "),xZ=n(Sje,"A",{href:!0});var yRt=s(xZ);LGr=r(yRt,"FlaxBigBirdForSequenceClassification"),yRt.forEach(t),xGr=r(Sje," (BigBird model)"),Sje.forEach(t),$Gr=i(je),j0=n(je,"LI",{});var Rje=s(j0);P3e=n(Rje,"STRONG",{});var LRt=s(P3e);kGr=r(LRt,"distilbert"),LRt.forEach(t),SGr=r(Rje," \u2014 "),$Z=n(Rje,"A",{href:!0});var xRt=s($Z);RGr=r(xRt,"FlaxDistilBertForSequenceClassification"),xRt.forEach(t),PGr=r(Rje," (DistilBERT model)"),Rje.forEach(t),BGr=i(je),D0=n(je,"LI",{});var Pje=s(D0);B3e=n(Pje,"STRONG",{});var $Rt=s(B3e);IGr=r($Rt,"electra"),$Rt.forEach(t),NGr=r(Pje," \u2014 "),kZ=n(Pje,"A",{href:!0});var kRt=s(kZ);qGr=r(kRt,"FlaxElectraForSequenceClassification"),kRt.forEach(t),jGr=r(Pje," (ELECTRA model)"),Pje.forEach(t),DGr=i(je),G0=n(je,"LI",{});var Bje=s(G0);I3e=n(Bje,"STRONG",{});var SRt=s(I3e);GGr=r(SRt,"mbart"),SRt.forEach(t),OGr=r(Bje," \u2014 "),SZ=n(Bje,"A",{href:!0});var RRt=s(SZ);VGr=r(RRt,"FlaxMBartForSequenceClassification"),RRt.forEach(t),XGr=r(Bje," (mBART model)"),Bje.forEach(t),zGr=i(je),O0=n(je,"LI",{});var Ije=s(O0);N3e=n(Ije,"STRONG",{});var PRt=s(N3e);WGr=r(PRt,"roberta"),PRt.forEach(t),QGr=r(Ije," \u2014 "),RZ=n(Ije,"A",{href:!0});var BRt=s(RZ);HGr=r(BRt,"FlaxRobertaForSequenceClassification"),BRt.forEach(t),UGr=r(Ije," (RoBERTa model)"),Ije.forEach(t),JGr=i(je),V0=n(je,"LI",{});var Nje=s(V0);q3e=n(Nje,"STRONG",{});var IRt=s(q3e);YGr=r(IRt,"roformer"),IRt.forEach(t),KGr=r(Nje," \u2014 "),PZ=n(Nje,"A",{href:!0});var NRt=s(PZ);ZGr=r(NRt,"FlaxRoFormerForSequenceClassification"),NRt.forEach(t),eOr=r(Nje," (RoFormer model)"),Nje.forEach(t),oOr=i(je),X0=n(je,"LI",{});var qje=s(X0);j3e=n(qje,"STRONG",{});var qRt=s(j3e);rOr=r(qRt,"xlm-roberta"),qRt.forEach(t),tOr=r(qje," \u2014 "),BZ=n(qje,"A",{href:!0});var jRt=s(BZ);aOr=r(jRt,"FlaxXLMRobertaForSequenceClassification"),jRt.forEach(t),nOr=r(qje," (XLM-RoBERTa model)"),qje.forEach(t),je.forEach(t),sOr=i(si),T(z0.$$.fragment,si),si.forEach(t),ni.forEach(t),iOe=i(m),am=n(m,"H2",{class:!0});var _Xe=s(am);W0=n(_Xe,"A",{id:!0,class:!0,href:!0});var DRt=s(W0);D3e=n(DRt,"SPAN",{});var GRt=s(D3e);T(Vx.$$.fragment,GRt),GRt.forEach(t),DRt.forEach(t),lOr=i(_Xe),G3e=n(_Xe,"SPAN",{});var ORt=s(G3e);iOr=r(ORt,"FlaxAutoModelForQuestionAnswering"),ORt.forEach(t),_Xe.forEach(t),dOe=i(m),vr=n(m,"DIV",{class:!0});var li=s(vr);T(Xx.$$.fragment,li),dOr=i(li),nm=n(li,"P",{});var fre=s(nm);cOr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IZ=n(fre,"A",{href:!0});var VRt=s(IZ);mOr=r(VRt,"from_pretrained()"),VRt.forEach(t),fOr=r(fre," class method or the "),NZ=n(fre,"A",{href:!0});var XRt=s(NZ);gOr=r(XRt,"from_config()"),XRt.forEach(t),hOr=r(fre,` class
method.`),fre.forEach(t),uOr=i(li),zx=n(li,"P",{});var bXe=s(zx);pOr=r(bXe,"This class cannot be instantiated directly using "),O3e=n(bXe,"CODE",{});var zRt=s(O3e);_Or=r(zRt,"__init__()"),zRt.forEach(t),bOr=r(bXe," (throws an error)."),bXe.forEach(t),vOr=i(li),Jt=n(li,"DIV",{class:!0});var Hy=s(Jt);T(Wx.$$.fragment,Hy),FOr=i(Hy),V3e=n(Hy,"P",{});var WRt=s(V3e);TOr=r(WRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),WRt.forEach(t),MOr=i(Hy),sm=n(Hy,"P",{});var gre=s(sm);EOr=r(gre,`Note:
Loading a model from its configuration file does `),X3e=n(gre,"STRONG",{});var QRt=s(X3e);COr=r(QRt,"not"),QRt.forEach(t),wOr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(gre,"A",{href:!0});var HRt=s(qZ);AOr=r(HRt,"from_pretrained()"),HRt.forEach(t),yOr=r(gre," to load the model weights."),gre.forEach(t),LOr=i(Hy),T(Q0.$$.fragment,Hy),Hy.forEach(t),xOr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(Qx.$$.fragment,ii),$Or=i(ii),z3e=n(ii,"P",{});var URt=s(z3e);kOr=r(URt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),URt.forEach(t),SOr=i(ii),wn=n(ii,"P",{});var Uy=s(wn);ROr=r(Uy,"The model class to instantiate is selected based on the "),W3e=n(Uy,"CODE",{});var JRt=s(W3e);POr=r(JRt,"model_type"),JRt.forEach(t),BOr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(Uy,"CODE",{});var YRt=s(Q3e);IOr=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),NOr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(Uy,"CODE",{});var KRt=s(H3e);qOr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),jOr=r(Uy,":"),Uy.forEach(t),DOr=i(ii),Se=n(ii,"UL",{});var De=s(Se);H0=n(De,"LI",{});var jje=s(H0);U3e=n(jje,"STRONG",{});var ZRt=s(U3e);GOr=r(ZRt,"albert"),ZRt.forEach(t),OOr=r(jje," \u2014 "),jZ=n(jje,"A",{href:!0});var ePt=s(jZ);VOr=r(ePt,"FlaxAlbertForQuestionAnswering"),ePt.forEach(t),XOr=r(jje," (ALBERT model)"),jje.forEach(t),zOr=i(De),U0=n(De,"LI",{});var Dje=s(U0);J3e=n(Dje,"STRONG",{});var oPt=s(J3e);WOr=r(oPt,"bart"),oPt.forEach(t),QOr=r(Dje," \u2014 "),DZ=n(Dje,"A",{href:!0});var rPt=s(DZ);HOr=r(rPt,"FlaxBartForQuestionAnswering"),rPt.forEach(t),UOr=r(Dje," (BART model)"),Dje.forEach(t),JOr=i(De),J0=n(De,"LI",{});var Gje=s(J0);Y3e=n(Gje,"STRONG",{});var tPt=s(Y3e);YOr=r(tPt,"bert"),tPt.forEach(t),KOr=r(Gje," \u2014 "),GZ=n(Gje,"A",{href:!0});var aPt=s(GZ);ZOr=r(aPt,"FlaxBertForQuestionAnswering"),aPt.forEach(t),eVr=r(Gje," (BERT model)"),Gje.forEach(t),oVr=i(De),Y0=n(De,"LI",{});var Oje=s(Y0);K3e=n(Oje,"STRONG",{});var nPt=s(K3e);rVr=r(nPt,"big_bird"),nPt.forEach(t),tVr=r(Oje," \u2014 "),OZ=n(Oje,"A",{href:!0});var sPt=s(OZ);aVr=r(sPt,"FlaxBigBirdForQuestionAnswering"),sPt.forEach(t),nVr=r(Oje," (BigBird model)"),Oje.forEach(t),sVr=i(De),K0=n(De,"LI",{});var Vje=s(K0);Z3e=n(Vje,"STRONG",{});var lPt=s(Z3e);lVr=r(lPt,"distilbert"),lPt.forEach(t),iVr=r(Vje," \u2014 "),VZ=n(Vje,"A",{href:!0});var iPt=s(VZ);dVr=r(iPt,"FlaxDistilBertForQuestionAnswering"),iPt.forEach(t),cVr=r(Vje," (DistilBERT model)"),Vje.forEach(t),mVr=i(De),Z0=n(De,"LI",{});var Xje=s(Z0);ewe=n(Xje,"STRONG",{});var dPt=s(ewe);fVr=r(dPt,"electra"),dPt.forEach(t),gVr=r(Xje," \u2014 "),XZ=n(Xje,"A",{href:!0});var cPt=s(XZ);hVr=r(cPt,"FlaxElectraForQuestionAnswering"),cPt.forEach(t),uVr=r(Xje," (ELECTRA model)"),Xje.forEach(t),pVr=i(De),eA=n(De,"LI",{});var zje=s(eA);owe=n(zje,"STRONG",{});var mPt=s(owe);_Vr=r(mPt,"mbart"),mPt.forEach(t),bVr=r(zje," \u2014 "),zZ=n(zje,"A",{href:!0});var fPt=s(zZ);vVr=r(fPt,"FlaxMBartForQuestionAnswering"),fPt.forEach(t),FVr=r(zje," (mBART model)"),zje.forEach(t),TVr=i(De),oA=n(De,"LI",{});var Wje=s(oA);rwe=n(Wje,"STRONG",{});var gPt=s(rwe);MVr=r(gPt,"roberta"),gPt.forEach(t),EVr=r(Wje," \u2014 "),WZ=n(Wje,"A",{href:!0});var hPt=s(WZ);CVr=r(hPt,"FlaxRobertaForQuestionAnswering"),hPt.forEach(t),wVr=r(Wje," (RoBERTa model)"),Wje.forEach(t),AVr=i(De),rA=n(De,"LI",{});var Qje=s(rA);twe=n(Qje,"STRONG",{});var uPt=s(twe);yVr=r(uPt,"roformer"),uPt.forEach(t),LVr=r(Qje," \u2014 "),QZ=n(Qje,"A",{href:!0});var pPt=s(QZ);xVr=r(pPt,"FlaxRoFormerForQuestionAnswering"),pPt.forEach(t),$Vr=r(Qje," (RoFormer model)"),Qje.forEach(t),kVr=i(De),tA=n(De,"LI",{});var Hje=s(tA);awe=n(Hje,"STRONG",{});var _Pt=s(awe);SVr=r(_Pt,"xlm-roberta"),_Pt.forEach(t),RVr=r(Hje," \u2014 "),HZ=n(Hje,"A",{href:!0});var bPt=s(HZ);PVr=r(bPt,"FlaxXLMRobertaForQuestionAnswering"),bPt.forEach(t),BVr=r(Hje," (XLM-RoBERTa model)"),Hje.forEach(t),De.forEach(t),IVr=i(ii),T(aA.$$.fragment,ii),ii.forEach(t),li.forEach(t),cOe=i(m),lm=n(m,"H2",{class:!0});var vXe=s(lm);nA=n(vXe,"A",{id:!0,class:!0,href:!0});var vPt=s(nA);nwe=n(vPt,"SPAN",{});var FPt=s(nwe);T(Hx.$$.fragment,FPt),FPt.forEach(t),vPt.forEach(t),NVr=i(vXe),swe=n(vXe,"SPAN",{});var TPt=s(swe);qVr=r(TPt,"FlaxAutoModelForTokenClassification"),TPt.forEach(t),vXe.forEach(t),mOe=i(m),Fr=n(m,"DIV",{class:!0});var di=s(Fr);T(Ux.$$.fragment,di),jVr=i(di),im=n(di,"P",{});var hre=s(im);DVr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UZ=n(hre,"A",{href:!0});var MPt=s(UZ);GVr=r(MPt,"from_pretrained()"),MPt.forEach(t),OVr=r(hre," class method or the "),JZ=n(hre,"A",{href:!0});var EPt=s(JZ);VVr=r(EPt,"from_config()"),EPt.forEach(t),XVr=r(hre,` class
method.`),hre.forEach(t),zVr=i(di),Jx=n(di,"P",{});var FXe=s(Jx);WVr=r(FXe,"This class cannot be instantiated directly using "),lwe=n(FXe,"CODE",{});var CPt=s(lwe);QVr=r(CPt,"__init__()"),CPt.forEach(t),HVr=r(FXe," (throws an error)."),FXe.forEach(t),UVr=i(di),Yt=n(di,"DIV",{class:!0});var Jy=s(Yt);T(Yx.$$.fragment,Jy),JVr=i(Jy),iwe=n(Jy,"P",{});var wPt=s(iwe);YVr=r(wPt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wPt.forEach(t),KVr=i(Jy),dm=n(Jy,"P",{});var ure=s(dm);ZVr=r(ure,`Note:
Loading a model from its configuration file does `),dwe=n(ure,"STRONG",{});var APt=s(dwe);eXr=r(APt,"not"),APt.forEach(t),oXr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(ure,"A",{href:!0});var yPt=s(YZ);rXr=r(yPt,"from_pretrained()"),yPt.forEach(t),tXr=r(ure," to load the model weights."),ure.forEach(t),aXr=i(Jy),T(sA.$$.fragment,Jy),Jy.forEach(t),nXr=i(di),Hr=n(di,"DIV",{class:!0});var ci=s(Hr);T(Kx.$$.fragment,ci),sXr=i(ci),cwe=n(ci,"P",{});var LPt=s(cwe);lXr=r(LPt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LPt.forEach(t),iXr=i(ci),An=n(ci,"P",{});var Yy=s(An);dXr=r(Yy,"The model class to instantiate is selected based on the "),mwe=n(Yy,"CODE",{});var xPt=s(mwe);cXr=r(xPt,"model_type"),xPt.forEach(t),mXr=r(Yy,` property of the config object (either
passed as an argument or loaded from `),fwe=n(Yy,"CODE",{});var $Pt=s(fwe);fXr=r($Pt,"pretrained_model_name_or_path"),$Pt.forEach(t),gXr=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=n(Yy,"CODE",{});var kPt=s(gwe);hXr=r(kPt,"pretrained_model_name_or_path"),kPt.forEach(t),uXr=r(Yy,":"),Yy.forEach(t),pXr=i(ci),Oe=n(ci,"UL",{});var To=s(Oe);lA=n(To,"LI",{});var Uje=s(lA);hwe=n(Uje,"STRONG",{});var SPt=s(hwe);_Xr=r(SPt,"albert"),SPt.forEach(t),bXr=r(Uje," \u2014 "),KZ=n(Uje,"A",{href:!0});var RPt=s(KZ);vXr=r(RPt,"FlaxAlbertForTokenClassification"),RPt.forEach(t),FXr=r(Uje," (ALBERT model)"),Uje.forEach(t),TXr=i(To),iA=n(To,"LI",{});var Jje=s(iA);uwe=n(Jje,"STRONG",{});var PPt=s(uwe);MXr=r(PPt,"bert"),PPt.forEach(t),EXr=r(Jje," \u2014 "),ZZ=n(Jje,"A",{href:!0});var BPt=s(ZZ);CXr=r(BPt,"FlaxBertForTokenClassification"),BPt.forEach(t),wXr=r(Jje," (BERT model)"),Jje.forEach(t),AXr=i(To),dA=n(To,"LI",{});var Yje=s(dA);pwe=n(Yje,"STRONG",{});var IPt=s(pwe);yXr=r(IPt,"big_bird"),IPt.forEach(t),LXr=r(Yje," \u2014 "),eee=n(Yje,"A",{href:!0});var NPt=s(eee);xXr=r(NPt,"FlaxBigBirdForTokenClassification"),NPt.forEach(t),$Xr=r(Yje," (BigBird model)"),Yje.forEach(t),kXr=i(To),cA=n(To,"LI",{});var Kje=s(cA);_we=n(Kje,"STRONG",{});var qPt=s(_we);SXr=r(qPt,"distilbert"),qPt.forEach(t),RXr=r(Kje," \u2014 "),oee=n(Kje,"A",{href:!0});var jPt=s(oee);PXr=r(jPt,"FlaxDistilBertForTokenClassification"),jPt.forEach(t),BXr=r(Kje," (DistilBERT model)"),Kje.forEach(t),IXr=i(To),mA=n(To,"LI",{});var Zje=s(mA);bwe=n(Zje,"STRONG",{});var DPt=s(bwe);NXr=r(DPt,"electra"),DPt.forEach(t),qXr=r(Zje," \u2014 "),ree=n(Zje,"A",{href:!0});var GPt=s(ree);jXr=r(GPt,"FlaxElectraForTokenClassification"),GPt.forEach(t),DXr=r(Zje," (ELECTRA model)"),Zje.forEach(t),GXr=i(To),fA=n(To,"LI",{});var eDe=s(fA);vwe=n(eDe,"STRONG",{});var OPt=s(vwe);OXr=r(OPt,"roberta"),OPt.forEach(t),VXr=r(eDe," \u2014 "),tee=n(eDe,"A",{href:!0});var VPt=s(tee);XXr=r(VPt,"FlaxRobertaForTokenClassification"),VPt.forEach(t),zXr=r(eDe," (RoBERTa model)"),eDe.forEach(t),WXr=i(To),gA=n(To,"LI",{});var oDe=s(gA);Fwe=n(oDe,"STRONG",{});var XPt=s(Fwe);QXr=r(XPt,"roformer"),XPt.forEach(t),HXr=r(oDe," \u2014 "),aee=n(oDe,"A",{href:!0});var zPt=s(aee);UXr=r(zPt,"FlaxRoFormerForTokenClassification"),zPt.forEach(t),JXr=r(oDe," (RoFormer model)"),oDe.forEach(t),YXr=i(To),hA=n(To,"LI",{});var rDe=s(hA);Twe=n(rDe,"STRONG",{});var WPt=s(Twe);KXr=r(WPt,"xlm-roberta"),WPt.forEach(t),ZXr=r(rDe," \u2014 "),nee=n(rDe,"A",{href:!0});var QPt=s(nee);ezr=r(QPt,"FlaxXLMRobertaForTokenClassification"),QPt.forEach(t),ozr=r(rDe," (XLM-RoBERTa model)"),rDe.forEach(t),To.forEach(t),rzr=i(ci),T(uA.$$.fragment,ci),ci.forEach(t),di.forEach(t),fOe=i(m),cm=n(m,"H2",{class:!0});var TXe=s(cm);pA=n(TXe,"A",{id:!0,class:!0,href:!0});var HPt=s(pA);Mwe=n(HPt,"SPAN",{});var UPt=s(Mwe);T(Zx.$$.fragment,UPt),UPt.forEach(t),HPt.forEach(t),tzr=i(TXe),Ewe=n(TXe,"SPAN",{});var JPt=s(Ewe);azr=r(JPt,"FlaxAutoModelForMultipleChoice"),JPt.forEach(t),TXe.forEach(t),gOe=i(m),Tr=n(m,"DIV",{class:!0});var mi=s(Tr);T(e$.$$.fragment,mi),nzr=i(mi),mm=n(mi,"P",{});var pre=s(mm);szr=r(pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),see=n(pre,"A",{href:!0});var YPt=s(see);lzr=r(YPt,"from_pretrained()"),YPt.forEach(t),izr=r(pre," class method or the "),lee=n(pre,"A",{href:!0});var KPt=s(lee);dzr=r(KPt,"from_config()"),KPt.forEach(t),czr=r(pre,` class
method.`),pre.forEach(t),mzr=i(mi),o$=n(mi,"P",{});var MXe=s(o$);fzr=r(MXe,"This class cannot be instantiated directly using "),Cwe=n(MXe,"CODE",{});var ZPt=s(Cwe);gzr=r(ZPt,"__init__()"),ZPt.forEach(t),hzr=r(MXe," (throws an error)."),MXe.forEach(t),uzr=i(mi),Kt=n(mi,"DIV",{class:!0});var Ky=s(Kt);T(r$.$$.fragment,Ky),pzr=i(Ky),wwe=n(Ky,"P",{});var eBt=s(wwe);_zr=r(eBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eBt.forEach(t),bzr=i(Ky),fm=n(Ky,"P",{});var _re=s(fm);vzr=r(_re,`Note:
Loading a model from its configuration file does `),Awe=n(_re,"STRONG",{});var oBt=s(Awe);Fzr=r(oBt,"not"),oBt.forEach(t),Tzr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(_re,"A",{href:!0});var rBt=s(iee);Mzr=r(rBt,"from_pretrained()"),rBt.forEach(t),Ezr=r(_re," to load the model weights."),_re.forEach(t),Czr=i(Ky),T(_A.$$.fragment,Ky),Ky.forEach(t),wzr=i(mi),Ur=n(mi,"DIV",{class:!0});var fi=s(Ur);T(t$.$$.fragment,fi),Azr=i(fi),ywe=n(fi,"P",{});var tBt=s(ywe);yzr=r(tBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tBt.forEach(t),Lzr=i(fi),yn=n(fi,"P",{});var Zy=s(yn);xzr=r(Zy,"The model class to instantiate is selected based on the "),Lwe=n(Zy,"CODE",{});var aBt=s(Lwe);$zr=r(aBt,"model_type"),aBt.forEach(t),kzr=r(Zy,` property of the config object (either
passed as an argument or loaded from `),xwe=n(Zy,"CODE",{});var nBt=s(xwe);Szr=r(nBt,"pretrained_model_name_or_path"),nBt.forEach(t),Rzr=r(Zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$we=n(Zy,"CODE",{});var sBt=s($we);Pzr=r(sBt,"pretrained_model_name_or_path"),sBt.forEach(t),Bzr=r(Zy,":"),Zy.forEach(t),Izr=i(fi),Ve=n(fi,"UL",{});var Mo=s(Ve);bA=n(Mo,"LI",{});var tDe=s(bA);kwe=n(tDe,"STRONG",{});var lBt=s(kwe);Nzr=r(lBt,"albert"),lBt.forEach(t),qzr=r(tDe," \u2014 "),dee=n(tDe,"A",{href:!0});var iBt=s(dee);jzr=r(iBt,"FlaxAlbertForMultipleChoice"),iBt.forEach(t),Dzr=r(tDe," (ALBERT model)"),tDe.forEach(t),Gzr=i(Mo),vA=n(Mo,"LI",{});var aDe=s(vA);Swe=n(aDe,"STRONG",{});var dBt=s(Swe);Ozr=r(dBt,"bert"),dBt.forEach(t),Vzr=r(aDe," \u2014 "),cee=n(aDe,"A",{href:!0});var cBt=s(cee);Xzr=r(cBt,"FlaxBertForMultipleChoice"),cBt.forEach(t),zzr=r(aDe," (BERT model)"),aDe.forEach(t),Wzr=i(Mo),FA=n(Mo,"LI",{});var nDe=s(FA);Rwe=n(nDe,"STRONG",{});var mBt=s(Rwe);Qzr=r(mBt,"big_bird"),mBt.forEach(t),Hzr=r(nDe," \u2014 "),mee=n(nDe,"A",{href:!0});var fBt=s(mee);Uzr=r(fBt,"FlaxBigBirdForMultipleChoice"),fBt.forEach(t),Jzr=r(nDe," (BigBird model)"),nDe.forEach(t),Yzr=i(Mo),TA=n(Mo,"LI",{});var sDe=s(TA);Pwe=n(sDe,"STRONG",{});var gBt=s(Pwe);Kzr=r(gBt,"distilbert"),gBt.forEach(t),Zzr=r(sDe," \u2014 "),fee=n(sDe,"A",{href:!0});var hBt=s(fee);eWr=r(hBt,"FlaxDistilBertForMultipleChoice"),hBt.forEach(t),oWr=r(sDe," (DistilBERT model)"),sDe.forEach(t),rWr=i(Mo),MA=n(Mo,"LI",{});var lDe=s(MA);Bwe=n(lDe,"STRONG",{});var uBt=s(Bwe);tWr=r(uBt,"electra"),uBt.forEach(t),aWr=r(lDe," \u2014 "),gee=n(lDe,"A",{href:!0});var pBt=s(gee);nWr=r(pBt,"FlaxElectraForMultipleChoice"),pBt.forEach(t),sWr=r(lDe," (ELECTRA model)"),lDe.forEach(t),lWr=i(Mo),EA=n(Mo,"LI",{});var iDe=s(EA);Iwe=n(iDe,"STRONG",{});var _Bt=s(Iwe);iWr=r(_Bt,"roberta"),_Bt.forEach(t),dWr=r(iDe," \u2014 "),hee=n(iDe,"A",{href:!0});var bBt=s(hee);cWr=r(bBt,"FlaxRobertaForMultipleChoice"),bBt.forEach(t),mWr=r(iDe," (RoBERTa model)"),iDe.forEach(t),fWr=i(Mo),CA=n(Mo,"LI",{});var dDe=s(CA);Nwe=n(dDe,"STRONG",{});var vBt=s(Nwe);gWr=r(vBt,"roformer"),vBt.forEach(t),hWr=r(dDe," \u2014 "),uee=n(dDe,"A",{href:!0});var FBt=s(uee);uWr=r(FBt,"FlaxRoFormerForMultipleChoice"),FBt.forEach(t),pWr=r(dDe," (RoFormer model)"),dDe.forEach(t),_Wr=i(Mo),wA=n(Mo,"LI",{});var cDe=s(wA);qwe=n(cDe,"STRONG",{});var TBt=s(qwe);bWr=r(TBt,"xlm-roberta"),TBt.forEach(t),vWr=r(cDe," \u2014 "),pee=n(cDe,"A",{href:!0});var MBt=s(pee);FWr=r(MBt,"FlaxXLMRobertaForMultipleChoice"),MBt.forEach(t),TWr=r(cDe," (XLM-RoBERTa model)"),cDe.forEach(t),Mo.forEach(t),MWr=i(fi),T(AA.$$.fragment,fi),fi.forEach(t),mi.forEach(t),hOe=i(m),gm=n(m,"H2",{class:!0});var EXe=s(gm);yA=n(EXe,"A",{id:!0,class:!0,href:!0});var EBt=s(yA);jwe=n(EBt,"SPAN",{});var CBt=s(jwe);T(a$.$$.fragment,CBt),CBt.forEach(t),EBt.forEach(t),EWr=i(EXe),Dwe=n(EXe,"SPAN",{});var wBt=s(Dwe);CWr=r(wBt,"FlaxAutoModelForNextSentencePrediction"),wBt.forEach(t),EXe.forEach(t),uOe=i(m),Mr=n(m,"DIV",{class:!0});var gi=s(Mr);T(n$.$$.fragment,gi),wWr=i(gi),hm=n(gi,"P",{});var bre=s(hm);AWr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_ee=n(bre,"A",{href:!0});var ABt=s(_ee);yWr=r(ABt,"from_pretrained()"),ABt.forEach(t),LWr=r(bre," class method or the "),bee=n(bre,"A",{href:!0});var yBt=s(bee);xWr=r(yBt,"from_config()"),yBt.forEach(t),$Wr=r(bre,` class
method.`),bre.forEach(t),kWr=i(gi),s$=n(gi,"P",{});var CXe=s(s$);SWr=r(CXe,"This class cannot be instantiated directly using "),Gwe=n(CXe,"CODE",{});var LBt=s(Gwe);RWr=r(LBt,"__init__()"),LBt.forEach(t),PWr=r(CXe," (throws an error)."),CXe.forEach(t),BWr=i(gi),Zt=n(gi,"DIV",{class:!0});var eL=s(Zt);T(l$.$$.fragment,eL),IWr=i(eL),Owe=n(eL,"P",{});var xBt=s(Owe);NWr=r(xBt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xBt.forEach(t),qWr=i(eL),um=n(eL,"P",{});var vre=s(um);jWr=r(vre,`Note:
Loading a model from its configuration file does `),Vwe=n(vre,"STRONG",{});var $Bt=s(Vwe);DWr=r($Bt,"not"),$Bt.forEach(t),GWr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vee=n(vre,"A",{href:!0});var kBt=s(vee);OWr=r(kBt,"from_pretrained()"),kBt.forEach(t),VWr=r(vre," to load the model weights."),vre.forEach(t),XWr=i(eL),T(LA.$$.fragment,eL),eL.forEach(t),zWr=i(gi),Jr=n(gi,"DIV",{class:!0});var hi=s(Jr);T(i$.$$.fragment,hi),WWr=i(hi),Xwe=n(hi,"P",{});var SBt=s(Xwe);QWr=r(SBt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SBt.forEach(t),HWr=i(hi),Ln=n(hi,"P",{});var oL=s(Ln);UWr=r(oL,"The model class to instantiate is selected based on the "),zwe=n(oL,"CODE",{});var RBt=s(zwe);JWr=r(RBt,"model_type"),RBt.forEach(t),YWr=r(oL,` property of the config object (either
passed as an argument or loaded from `),Wwe=n(oL,"CODE",{});var PBt=s(Wwe);KWr=r(PBt,"pretrained_model_name_or_path"),PBt.forEach(t),ZWr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qwe=n(oL,"CODE",{});var BBt=s(Qwe);eQr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),oQr=r(oL,":"),oL.forEach(t),rQr=i(hi),Hwe=n(hi,"UL",{});var IBt=s(Hwe);xA=n(IBt,"LI",{});var mDe=s(xA);Uwe=n(mDe,"STRONG",{});var NBt=s(Uwe);tQr=r(NBt,"bert"),NBt.forEach(t),aQr=r(mDe," \u2014 "),Fee=n(mDe,"A",{href:!0});var qBt=s(Fee);nQr=r(qBt,"FlaxBertForNextSentencePrediction"),qBt.forEach(t),sQr=r(mDe," (BERT model)"),mDe.forEach(t),IBt.forEach(t),lQr=i(hi),T($A.$$.fragment,hi),hi.forEach(t),gi.forEach(t),pOe=i(m),pm=n(m,"H2",{class:!0});var wXe=s(pm);kA=n(wXe,"A",{id:!0,class:!0,href:!0});var jBt=s(kA);Jwe=n(jBt,"SPAN",{});var DBt=s(Jwe);T(d$.$$.fragment,DBt),DBt.forEach(t),jBt.forEach(t),iQr=i(wXe),Ywe=n(wXe,"SPAN",{});var GBt=s(Ywe);dQr=r(GBt,"FlaxAutoModelForImageClassification"),GBt.forEach(t),wXe.forEach(t),_Oe=i(m),Er=n(m,"DIV",{class:!0});var ui=s(Er);T(c$.$$.fragment,ui),cQr=i(ui),_m=n(ui,"P",{});var Fre=s(_m);mQr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Tee=n(Fre,"A",{href:!0});var OBt=s(Tee);fQr=r(OBt,"from_pretrained()"),OBt.forEach(t),gQr=r(Fre," class method or the "),Mee=n(Fre,"A",{href:!0});var VBt=s(Mee);hQr=r(VBt,"from_config()"),VBt.forEach(t),uQr=r(Fre,` class
method.`),Fre.forEach(t),pQr=i(ui),m$=n(ui,"P",{});var AXe=s(m$);_Qr=r(AXe,"This class cannot be instantiated directly using "),Kwe=n(AXe,"CODE",{});var XBt=s(Kwe);bQr=r(XBt,"__init__()"),XBt.forEach(t),vQr=r(AXe," (throws an error)."),AXe.forEach(t),FQr=i(ui),ea=n(ui,"DIV",{class:!0});var rL=s(ea);T(f$.$$.fragment,rL),TQr=i(rL),Zwe=n(rL,"P",{});var zBt=s(Zwe);MQr=r(zBt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zBt.forEach(t),EQr=i(rL),bm=n(rL,"P",{});var Tre=s(bm);CQr=r(Tre,`Note:
Loading a model from its configuration file does `),e0e=n(Tre,"STRONG",{});var WBt=s(e0e);wQr=r(WBt,"not"),WBt.forEach(t),AQr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(Tre,"A",{href:!0});var QBt=s(Eee);yQr=r(QBt,"from_pretrained()"),QBt.forEach(t),LQr=r(Tre," to load the model weights."),Tre.forEach(t),xQr=i(rL),T(SA.$$.fragment,rL),rL.forEach(t),$Qr=i(ui),Yr=n(ui,"DIV",{class:!0});var pi=s(Yr);T(g$.$$.fragment,pi),kQr=i(pi),o0e=n(pi,"P",{});var HBt=s(o0e);SQr=r(HBt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HBt.forEach(t),RQr=i(pi),xn=n(pi,"P",{});var tL=s(xn);PQr=r(tL,"The model class to instantiate is selected based on the "),r0e=n(tL,"CODE",{});var UBt=s(r0e);BQr=r(UBt,"model_type"),UBt.forEach(t),IQr=r(tL,` property of the config object (either
passed as an argument or loaded from `),t0e=n(tL,"CODE",{});var JBt=s(t0e);NQr=r(JBt,"pretrained_model_name_or_path"),JBt.forEach(t),qQr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a0e=n(tL,"CODE",{});var YBt=s(a0e);jQr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),DQr=r(tL,":"),tL.forEach(t),GQr=i(pi),h$=n(pi,"UL",{});var yXe=s(h$);RA=n(yXe,"LI",{});var fDe=s(RA);n0e=n(fDe,"STRONG",{});var KBt=s(n0e);OQr=r(KBt,"beit"),KBt.forEach(t),VQr=r(fDe," \u2014 "),Cee=n(fDe,"A",{href:!0});var ZBt=s(Cee);XQr=r(ZBt,"FlaxBeitForImageClassification"),ZBt.forEach(t),zQr=r(fDe," (BEiT model)"),fDe.forEach(t),WQr=i(yXe),PA=n(yXe,"LI",{});var gDe=s(PA);s0e=n(gDe,"STRONG",{});var eIt=s(s0e);QQr=r(eIt,"vit"),eIt.forEach(t),HQr=r(gDe," \u2014 "),wee=n(gDe,"A",{href:!0});var oIt=s(wee);UQr=r(oIt,"FlaxViTForImageClassification"),oIt.forEach(t),JQr=r(gDe," (ViT model)"),gDe.forEach(t),yXe.forEach(t),YQr=i(pi),T(BA.$$.fragment,pi),pi.forEach(t),ui.forEach(t),bOe=i(m),vm=n(m,"H2",{class:!0});var LXe=s(vm);IA=n(LXe,"A",{id:!0,class:!0,href:!0});var rIt=s(IA);l0e=n(rIt,"SPAN",{});var tIt=s(l0e);T(u$.$$.fragment,tIt),tIt.forEach(t),rIt.forEach(t),KQr=i(LXe),i0e=n(LXe,"SPAN",{});var aIt=s(i0e);ZQr=r(aIt,"FlaxAutoModelForVision2Seq"),aIt.forEach(t),LXe.forEach(t),vOe=i(m),Cr=n(m,"DIV",{class:!0});var _i=s(Cr);T(p$.$$.fragment,_i),eHr=i(_i),Fm=n(_i,"P",{});var Mre=s(Fm);oHr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Aee=n(Mre,"A",{href:!0});var nIt=s(Aee);rHr=r(nIt,"from_pretrained()"),nIt.forEach(t),tHr=r(Mre," class method or the "),yee=n(Mre,"A",{href:!0});var sIt=s(yee);aHr=r(sIt,"from_config()"),sIt.forEach(t),nHr=r(Mre,` class
method.`),Mre.forEach(t),sHr=i(_i),_$=n(_i,"P",{});var xXe=s(_$);lHr=r(xXe,"This class cannot be instantiated directly using "),d0e=n(xXe,"CODE",{});var lIt=s(d0e);iHr=r(lIt,"__init__()"),lIt.forEach(t),dHr=r(xXe," (throws an error)."),xXe.forEach(t),cHr=i(_i),oa=n(_i,"DIV",{class:!0});var aL=s(oa);T(b$.$$.fragment,aL),mHr=i(aL),c0e=n(aL,"P",{});var iIt=s(c0e);fHr=r(iIt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iIt.forEach(t),gHr=i(aL),Tm=n(aL,"P",{});var Ere=s(Tm);hHr=r(Ere,`Note:
Loading a model from its configuration file does `),m0e=n(Ere,"STRONG",{});var dIt=s(m0e);uHr=r(dIt,"not"),dIt.forEach(t),pHr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lee=n(Ere,"A",{href:!0});var cIt=s(Lee);_Hr=r(cIt,"from_pretrained()"),cIt.forEach(t),bHr=r(Ere," to load the model weights."),Ere.forEach(t),vHr=i(aL),T(NA.$$.fragment,aL),aL.forEach(t),FHr=i(_i),Kr=n(_i,"DIV",{class:!0});var bi=s(Kr);T(v$.$$.fragment,bi),THr=i(bi),f0e=n(bi,"P",{});var mIt=s(f0e);MHr=r(mIt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mIt.forEach(t),EHr=i(bi),$n=n(bi,"P",{});var nL=s($n);CHr=r(nL,"The model class to instantiate is selected based on the "),g0e=n(nL,"CODE",{});var fIt=s(g0e);wHr=r(fIt,"model_type"),fIt.forEach(t),AHr=r(nL,` property of the config object (either
passed as an argument or loaded from `),h0e=n(nL,"CODE",{});var gIt=s(h0e);yHr=r(gIt,"pretrained_model_name_or_path"),gIt.forEach(t),LHr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(nL,"CODE",{});var hIt=s(u0e);xHr=r(hIt,"pretrained_model_name_or_path"),hIt.forEach(t),$Hr=r(nL,":"),nL.forEach(t),kHr=i(bi),p0e=n(bi,"UL",{});var uIt=s(p0e);qA=n(uIt,"LI",{});var hDe=s(qA);_0e=n(hDe,"STRONG",{});var pIt=s(_0e);SHr=r(pIt,"vision-encoder-decoder"),pIt.forEach(t),RHr=r(hDe," \u2014 "),xee=n(hDe,"A",{href:!0});var _It=s(xee);PHr=r(_It,"FlaxVisionEncoderDecoderModel"),_It.forEach(t),BHr=r(hDe," (Vision Encoder decoder model)"),hDe.forEach(t),uIt.forEach(t),IHr=i(bi),T(jA.$$.fragment,bi),bi.forEach(t),_i.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Eqt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Sn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(wi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(xm,"id","extending-the-auto-classes"),c(xm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xm,"href","#extending-the-auto-classes"),c(Ai,"class","relative group"),c(km,"id","transformers.AutoConfig"),c(km,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(km,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Gk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Ok,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(cS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(wS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c($S,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(RS,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(PS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(DS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(HS,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(US,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(bR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(MR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c($R,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(IR,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"id","transformers.AutoTokenizer"),c(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jg,"href","#transformers.AutoTokenizer"),c(xi,"class","relative group"),c(WR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(QR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(UR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(YR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(tP,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(sP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(lP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(iP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(cP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(mP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(gP,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(pP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(MP,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(EP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(PP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WP,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(QP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(YP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(VB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(WB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(JB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(rI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(tI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(nI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(sI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(lI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(iI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(dI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(cI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(mI,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(gI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(uI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(_I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(FI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(MI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(CI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(AI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(xI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c($I,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"id","transformers.AutoFeatureExtractor"),c(Th,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Th,"href","#transformers.AutoFeatureExtractor"),c($i,"class","relative group"),c(SI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(RI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(PI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(BI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(II,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(jI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(DI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(GI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(OI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(VI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(XI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(WI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(QI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(HI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(UI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(JI,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(YI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(KI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ZI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(sN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"id","transformers.AutoProcessor"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoProcessor"),c(ki,"class","relative group"),c(mN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(fN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(gN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(hN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(uN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(pN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_N,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(vN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(FN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(TN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(CN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(wN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cu,"id","transformers.AutoModel"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModel"),c(Ri,"class","relative group"),c(LN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($N,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(SN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(RN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(PN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(BN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(IN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(NN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(qN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(jN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(DN,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(GN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(ON,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(VN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(XN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(zN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(WN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(QN,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(HN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(KN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(oq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(rq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(tq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(nq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(sq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(lq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(iq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(dq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(cq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(mq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(fq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(gq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(hq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(uq,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(pq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(_q,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(vq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Mq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Eq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(wq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(yq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(xq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c($q,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(kq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Nq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(qq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(ej,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(oj,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(rj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(aj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nj,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(sj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(lj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(ij,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(dj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(mj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(fj,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(gj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(hj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(uj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(pj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(_j,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(wj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(yj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C_,"id","transformers.AutoModelForPreTraining"),c(C_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C_,"href","#transformers.AutoModelForPreTraining"),c(Ii,"class","relative group"),c(xj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($j,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Rj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Bj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Ij,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(qj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Xj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Wj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Qj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Uj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(nD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(lD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(cD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(gD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(hD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(uD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(_D,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(vD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_b,"id","transformers.AutoModelForCausalLM"),c(_b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_b,"href","#transformers.AutoModelForCausalLM"),c(ji,"class","relative group"),c(TD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ED,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(wD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(AD,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(yD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(LD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(xD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($D,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(kD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(SD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(RD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(PD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(BD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(ID,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ND,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(DD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(GD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(OD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(zD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(WD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(QD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(UD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n2,"id","transformers.AutoModelForMaskedLM"),c(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n2,"href","#transformers.AutoModelForMaskedLM"),c(Oi,"class","relative group"),c(iG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(hG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(_G,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(xG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($G,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(SG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(RG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(PG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(BG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(IG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(NG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(qG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(jG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(DG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(GG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(OG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(VG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(XG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(zG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z2,"id","transformers.AutoModelForSeq2SeqLM"),c(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z2,"href","#transformers.AutoModelForSeq2SeqLM"),c(zi,"class","relative group"),c(WG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(JG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(YG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(KG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ZG,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(eO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(oO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(rO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(tO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(aO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(sO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(lO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(iO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(dO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForSequenceClassification"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForSequenceClassification"),c(Hi,"class","relative group"),c(mO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c($O,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(zO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(WO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(HO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(UO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForMultipleChoice"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForMultipleChoice"),c(Yi,"class","relative group"),c(lV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(mV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(fV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(gV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(hV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(uV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(pV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(_V,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(bV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(vV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(FV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(TV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(MV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(EV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(CV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(wV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(AV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(yV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(LV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(xV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c($V,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(kV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(SV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(RV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(PV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(BV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(IV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(NV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(qV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForNextSentencePrediction"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ed,"class","relative group"),c(jV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(VV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(XV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(zV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForTokenClassification"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForTokenClassification"),c(td,"class","relative group"),c(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P1,"id","transformers.AutoModelForQuestionAnswering"),c(P1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P1,"href","#transformers.AutoModelForQuestionAnswering"),c(sd,"class","relative group"),c($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(PX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(BX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(IX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(NX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(qX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(jX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(DX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(GX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(OX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(VX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(XX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(zX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(WX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(HX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(JX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(YX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(KX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(ZX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ez,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(oz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(rz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(tz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(az,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(nz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(sz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(lz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(iz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(dz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(cz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(mz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(fz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(gz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(hz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(uz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(pz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(bz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForTableQuestionAnswering"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(dd,"class","relative group"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForImageClassification"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForImageClassification"),c(fd,"class","relative group"),c(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(yz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Lz,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(xz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($z,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Sz,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Rz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(Pz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Bz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Iz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Nz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(qz,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(jz,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(Gz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Oz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForVision2Seq"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(bd,"class","relative group"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.AutoModelForAudioClassification"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.AutoModelForAudioClassification"),c(Td,"class","relative group"),c(Zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hM,"id","transformers.AutoModelForAudioFrameClassification"),c(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hM,"href","#transformers.AutoModelForAudioFrameClassification"),c(Cd,"class","relative group"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.AutoModelForCTC"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(EW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(CW,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(wW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(AW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($W,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(kW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c($d,"class","relative group"),c(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(IW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.AutoModelForAudioXVector"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.AutoModelForAudioXVector"),c(Rd,"class","relative group"),c(NW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(OW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(XW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.AutoModelForMaskedImageModeling"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.AutoModelForMaskedImageModeling"),c(Id,"class","relative group"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(UW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(JW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.AutoModelForObjectDetection"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.AutoModelForObjectDetection"),c(Dd,"class","relative group"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eQ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(oQ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m4,"id","transformers.AutoModelForImageSegmentation"),c(m4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m4,"href","#transformers.AutoModelForImageSegmentation"),c(Vd,"class","relative group"),c(rQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.AutoModelForSemanticSegmentation"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.AutoModelForSemanticSegmentation"),c(Wd,"class","relative group"),c(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(cQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(mQ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(fQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.AutoModelForInstanceSegmentation"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ud,"class","relative group"),c(gQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.TFAutoModel"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.TFAutoModel"),c(Kd,"class","relative group"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(MQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(yQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(xQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c($Q,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(SQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(RQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(BQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(IQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(NQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(jQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(DQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(OQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(VQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(XQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(zQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(QQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(HQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(UQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(JQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(YQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(KQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(ZQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(eH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(oH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(rH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(tH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(aH,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(nH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(sH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(lH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(iH,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(dH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(cH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(fH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(gH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForPreTraining"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForPreTraining"),c(oc,"class","relative group"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(bH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(FH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(MH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(CH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(AH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(LH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(xH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c($H,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(kH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(SH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(RH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(PH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(BH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(IH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(jH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForCausalLM"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForCausalLM"),c(ac,"class","relative group"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(XH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(zH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(WH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(QH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(HH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(UH,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(JH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForImageClassification"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForImageClassification"),c(lc,"class","relative group"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForMaskedLM"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForMaskedLM"),c(cc,"class","relative group"),c(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(gU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(hU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_U,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(bU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(CU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($U,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(gc,"class","relative group"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(NU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(qU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(GU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(OU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(VU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(XU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.TFAutoModelForSequenceClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.TFAutoModelForSequenceClassification"),c(pc,"class","relative group"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.TFAutoModelForMultipleChoice"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.TFAutoModelForMultipleChoice"),c(vc,"class","relative group"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c($J,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(NJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(qJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Mc,"class","relative group"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(XJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(wc,"class","relative group"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.TFAutoModelForTokenClassification"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.TFAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.TFAutoModelForQuestionAnswering"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(kc,"class","relative group"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($Y,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(BY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(NY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(qY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.TFAutoModelForVision2Seq"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.TFAutoModelForVision2Seq"),c(Pc,"class","relative group"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Nc,"class","relative group"),c(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModel"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModel"),c(Dc,"class","relative group"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(eK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(oK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(rK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nK,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(iK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dK,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mK,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(fK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hK,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(uK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(pK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(_K,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(bK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(vK,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(FK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(TK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(MK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(EK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForCausalLM"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Vc,"class","relative group"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(LK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(xK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c($K,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(kK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(SK,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(RK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(PK,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(BK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForPreTraining"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(QK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(HK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(UK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(JK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(YK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.FlaxAutoModelForMaskedLM"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Uc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(rZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(aZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(nZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(sZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(lZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(T0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(pZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(_Z,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(bZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(vZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(MZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(om,"class","relative group"),c(EZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(yZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(LZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(xZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c($Z,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(kZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(SZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(RZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(PZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(BZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(am,"class","relative group"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(DZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(GZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(OZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(VZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(XZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(zZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(WZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(QZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(HZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForTokenClassification"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(lm,"class","relative group"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ZZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(eee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(oee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(ree,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(tee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(aee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(nee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(pA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(cm,"class","relative group"),c(see,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(cee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(mee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(fee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(gee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(hee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(uee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(pee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(gm,"class","relative group"),c(_ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kA,"id","transformers.FlaxAutoModelForImageClassification"),c(kA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kA,"href","#transformers.FlaxAutoModelForImageClassification"),c(pm,"class","relative group"),c(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IA,"id","transformers.FlaxAutoModelForVision2Seq"),c(IA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(vm,"class","relative group"),c(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Eo),e(Eo,vi),b(m,wm,_),b(m,at,_),e(at,Fi),e(at,Ti),e(Ti,sL),e(at,Am),b(m,Ge,_),b(m,We,_),e(We,Mi),e(We,Sn),e(Sn,lL),e(We,Rn),e(We,Pn),e(Pn,iL),e(We,Ei),e(We,Bn),e(Bn,dL),e(We,Ci),b(m,ym,_),M(La,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,Bk),e(Ae,wi),e(wi,Ik),e(Ae,Nk),b(m,Co,_),b(m,xa,_),e(xa,qk),e(xa,Lm),e(Lm,jk),e(xa,$Xe),b(m,uDe,_),b(m,Ai,_),e(Ai,xm),e(xm,Cre),M(cL,Cre,null),e(Ai,kXe),e(Ai,wre),e(wre,SXe),b(m,pDe,_),b(m,In,_),e(In,RXe),e(In,Are),e(Are,PXe),e(In,BXe),e(In,yre),e(yre,IXe),e(In,NXe),b(m,_De,_),M(mL,m,_),b(m,bDe,_),b(m,Dk,_),e(Dk,qXe),b(m,vDe,_),M($m,m,_),b(m,FDe,_),b(m,yi,_),e(yi,km),e(km,Lre),M(fL,Lre,null),e(yi,jXe),e(yi,xre),e(xre,DXe),b(m,TDe,_),b(m,wo,_),M(gL,wo,null),e(wo,GXe),e(wo,hL),e(hL,OXe),e(hL,Gk),e(Gk,VXe),e(hL,XXe),e(wo,zXe),e(wo,uL),e(uL,WXe),e(uL,$re),e($re,QXe),e(uL,HXe),e(wo,UXe),e(wo,wr),M(pL,wr,null),e(wr,JXe),e(wr,kre),e(kre,YXe),e(wr,KXe),e(wr,Li),e(Li,ZXe),e(Li,Sre),e(Sre,eze),e(Li,oze),e(Li,Rre),e(Rre,rze),e(Li,tze),e(wr,aze),e(wr,A),e(A,Sm),e(Sm,Pre),e(Pre,nze),e(Sm,sze),e(Sm,Ok),e(Ok,lze),e(Sm,ize),e(A,dze),e(A,Rm),e(Rm,Bre),e(Bre,cze),e(Rm,mze),e(Rm,Vk),e(Vk,fze),e(Rm,gze),e(A,hze),e(A,Pm),e(Pm,Ire),e(Ire,uze),e(Pm,pze),e(Pm,Xk),e(Xk,_ze),e(Pm,bze),e(A,vze),e(A,Bm),e(Bm,Nre),e(Nre,Fze),e(Bm,Tze),e(Bm,zk),e(zk,Mze),e(Bm,Eze),e(A,Cze),e(A,Im),e(Im,qre),e(qre,wze),e(Im,Aze),e(Im,Wk),e(Wk,yze),e(Im,Lze),e(A,xze),e(A,Nm),e(Nm,jre),e(jre,$ze),e(Nm,kze),e(Nm,Qk),e(Qk,Sze),e(Nm,Rze),e(A,Pze),e(A,qm),e(qm,Dre),e(Dre,Bze),e(qm,Ize),e(qm,Hk),e(Hk,Nze),e(qm,qze),e(A,jze),e(A,jm),e(jm,Gre),e(Gre,Dze),e(jm,Gze),e(jm,Uk),e(Uk,Oze),e(jm,Vze),e(A,Xze),e(A,Dm),e(Dm,Ore),e(Ore,zze),e(Dm,Wze),e(Dm,Jk),e(Jk,Qze),e(Dm,Hze),e(A,Uze),e(A,Gm),e(Gm,Vre),e(Vre,Jze),e(Gm,Yze),e(Gm,Yk),e(Yk,Kze),e(Gm,Zze),e(A,eWe),e(A,Om),e(Om,Xre),e(Xre,oWe),e(Om,rWe),e(Om,Kk),e(Kk,tWe),e(Om,aWe),e(A,nWe),e(A,Vm),e(Vm,zre),e(zre,sWe),e(Vm,lWe),e(Vm,Zk),e(Zk,iWe),e(Vm,dWe),e(A,cWe),e(A,Xm),e(Xm,Wre),e(Wre,mWe),e(Xm,fWe),e(Xm,eS),e(eS,gWe),e(Xm,hWe),e(A,uWe),e(A,zm),e(zm,Qre),e(Qre,pWe),e(zm,_We),e(zm,oS),e(oS,bWe),e(zm,vWe),e(A,FWe),e(A,Wm),e(Wm,Hre),e(Hre,TWe),e(Wm,MWe),e(Wm,rS),e(rS,EWe),e(Wm,CWe),e(A,wWe),e(A,Qm),e(Qm,Ure),e(Ure,AWe),e(Qm,yWe),e(Qm,tS),e(tS,LWe),e(Qm,xWe),e(A,$We),e(A,Hm),e(Hm,Jre),e(Jre,kWe),e(Hm,SWe),e(Hm,aS),e(aS,RWe),e(Hm,PWe),e(A,BWe),e(A,Um),e(Um,Yre),e(Yre,IWe),e(Um,NWe),e(Um,nS),e(nS,qWe),e(Um,jWe),e(A,DWe),e(A,Jm),e(Jm,Kre),e(Kre,GWe),e(Jm,OWe),e(Jm,sS),e(sS,VWe),e(Jm,XWe),e(A,zWe),e(A,Ym),e(Ym,Zre),e(Zre,WWe),e(Ym,QWe),e(Ym,lS),e(lS,HWe),e(Ym,UWe),e(A,JWe),e(A,Km),e(Km,ete),e(ete,YWe),e(Km,KWe),e(Km,iS),e(iS,ZWe),e(Km,eQe),e(A,oQe),e(A,Zm),e(Zm,ote),e(ote,rQe),e(Zm,tQe),e(Zm,dS),e(dS,aQe),e(Zm,nQe),e(A,sQe),e(A,ef),e(ef,rte),e(rte,lQe),e(ef,iQe),e(ef,cS),e(cS,dQe),e(ef,cQe),e(A,mQe),e(A,of),e(of,tte),e(tte,fQe),e(of,gQe),e(of,mS),e(mS,hQe),e(of,uQe),e(A,pQe),e(A,rf),e(rf,ate),e(ate,_Qe),e(rf,bQe),e(rf,fS),e(fS,vQe),e(rf,FQe),e(A,TQe),e(A,tf),e(tf,nte),e(nte,MQe),e(tf,EQe),e(tf,gS),e(gS,CQe),e(tf,wQe),e(A,AQe),e(A,af),e(af,ste),e(ste,yQe),e(af,LQe),e(af,hS),e(hS,xQe),e(af,$Qe),e(A,kQe),e(A,nf),e(nf,lte),e(lte,SQe),e(nf,RQe),e(nf,uS),e(uS,PQe),e(nf,BQe),e(A,IQe),e(A,sf),e(sf,ite),e(ite,NQe),e(sf,qQe),e(sf,pS),e(pS,jQe),e(sf,DQe),e(A,GQe),e(A,lf),e(lf,dte),e(dte,OQe),e(lf,VQe),e(lf,_S),e(_S,XQe),e(lf,zQe),e(A,WQe),e(A,df),e(df,cte),e(cte,QQe),e(df,HQe),e(df,bS),e(bS,UQe),e(df,JQe),e(A,YQe),e(A,cf),e(cf,mte),e(mte,KQe),e(cf,ZQe),e(cf,vS),e(vS,eHe),e(cf,oHe),e(A,rHe),e(A,mf),e(mf,fte),e(fte,tHe),e(mf,aHe),e(mf,FS),e(FS,nHe),e(mf,sHe),e(A,lHe),e(A,ff),e(ff,gte),e(gte,iHe),e(ff,dHe),e(ff,TS),e(TS,cHe),e(ff,mHe),e(A,fHe),e(A,gf),e(gf,hte),e(hte,gHe),e(gf,hHe),e(gf,MS),e(MS,uHe),e(gf,pHe),e(A,_He),e(A,hf),e(hf,ute),e(ute,bHe),e(hf,vHe),e(hf,ES),e(ES,FHe),e(hf,THe),e(A,MHe),e(A,uf),e(uf,pte),e(pte,EHe),e(uf,CHe),e(uf,CS),e(CS,wHe),e(uf,AHe),e(A,yHe),e(A,pf),e(pf,_te),e(_te,LHe),e(pf,xHe),e(pf,wS),e(wS,$He),e(pf,kHe),e(A,SHe),e(A,_f),e(_f,bte),e(bte,RHe),e(_f,PHe),e(_f,AS),e(AS,BHe),e(_f,IHe),e(A,NHe),e(A,bf),e(bf,vte),e(vte,qHe),e(bf,jHe),e(bf,yS),e(yS,DHe),e(bf,GHe),e(A,OHe),e(A,vf),e(vf,Fte),e(Fte,VHe),e(vf,XHe),e(vf,LS),e(LS,zHe),e(vf,WHe),e(A,QHe),e(A,Ff),e(Ff,Tte),e(Tte,HHe),e(Ff,UHe),e(Ff,xS),e(xS,JHe),e(Ff,YHe),e(A,KHe),e(A,Tf),e(Tf,Mte),e(Mte,ZHe),e(Tf,eUe),e(Tf,$S),e($S,oUe),e(Tf,rUe),e(A,tUe),e(A,Mf),e(Mf,Ete),e(Ete,aUe),e(Mf,nUe),e(Mf,kS),e(kS,sUe),e(Mf,lUe),e(A,iUe),e(A,Ef),e(Ef,Cte),e(Cte,dUe),e(Ef,cUe),e(Ef,SS),e(SS,mUe),e(Ef,fUe),e(A,gUe),e(A,Cf),e(Cf,wte),e(wte,hUe),e(Cf,uUe),e(Cf,RS),e(RS,pUe),e(Cf,_Ue),e(A,bUe),e(A,wf),e(wf,Ate),e(Ate,vUe),e(wf,FUe),e(wf,PS),e(PS,TUe),e(wf,MUe),e(A,EUe),e(A,Af),e(Af,yte),e(yte,CUe),e(Af,wUe),e(Af,BS),e(BS,AUe),e(Af,yUe),e(A,LUe),e(A,yf),e(yf,Lte),e(Lte,xUe),e(yf,$Ue),e(yf,IS),e(IS,kUe),e(yf,SUe),e(A,RUe),e(A,Lf),e(Lf,xte),e(xte,PUe),e(Lf,BUe),e(Lf,NS),e(NS,IUe),e(Lf,NUe),e(A,qUe),e(A,xf),e(xf,$te),e($te,jUe),e(xf,DUe),e(xf,qS),e(qS,GUe),e(xf,OUe),e(A,VUe),e(A,$f),e($f,kte),e(kte,XUe),e($f,zUe),e($f,jS),e(jS,WUe),e($f,QUe),e(A,HUe),e(A,kf),e(kf,Ste),e(Ste,UUe),e(kf,JUe),e(kf,DS),e(DS,YUe),e(kf,KUe),e(A,ZUe),e(A,Sf),e(Sf,Rte),e(Rte,eJe),e(Sf,oJe),e(Sf,GS),e(GS,rJe),e(Sf,tJe),e(A,aJe),e(A,Rf),e(Rf,Pte),e(Pte,nJe),e(Rf,sJe),e(Rf,OS),e(OS,lJe),e(Rf,iJe),e(A,dJe),e(A,Pf),e(Pf,Bte),e(Bte,cJe),e(Pf,mJe),e(Pf,VS),e(VS,fJe),e(Pf,gJe),e(A,hJe),e(A,Bf),e(Bf,Ite),e(Ite,uJe),e(Bf,pJe),e(Bf,XS),e(XS,_Je),e(Bf,bJe),e(A,vJe),e(A,If),e(If,Nte),e(Nte,FJe),e(If,TJe),e(If,zS),e(zS,MJe),e(If,EJe),e(A,CJe),e(A,Nf),e(Nf,qte),e(qte,wJe),e(Nf,AJe),e(Nf,WS),e(WS,yJe),e(Nf,LJe),e(A,xJe),e(A,qf),e(qf,jte),e(jte,$Je),e(qf,kJe),e(qf,QS),e(QS,SJe),e(qf,RJe),e(A,PJe),e(A,jf),e(jf,Dte),e(Dte,BJe),e(jf,IJe),e(jf,HS),e(HS,NJe),e(jf,qJe),e(A,jJe),e(A,Df),e(Df,Gte),e(Gte,DJe),e(Df,GJe),e(Df,US),e(US,OJe),e(Df,VJe),e(A,XJe),e(A,Gf),e(Gf,Ote),e(Ote,zJe),e(Gf,WJe),e(Gf,JS),e(JS,QJe),e(Gf,HJe),e(A,UJe),e(A,Of),e(Of,Vte),e(Vte,JJe),e(Of,YJe),e(Of,YS),e(YS,KJe),e(Of,ZJe),e(A,eYe),e(A,Vf),e(Vf,Xte),e(Xte,oYe),e(Vf,rYe),e(Vf,KS),e(KS,tYe),e(Vf,aYe),e(A,nYe),e(A,Xf),e(Xf,zte),e(zte,sYe),e(Xf,lYe),e(Xf,ZS),e(ZS,iYe),e(Xf,dYe),e(A,cYe),e(A,zf),e(zf,Wte),e(Wte,mYe),e(zf,fYe),e(zf,eR),e(eR,gYe),e(zf,hYe),e(A,uYe),e(A,Wf),e(Wf,Qte),e(Qte,pYe),e(Wf,_Ye),e(Wf,oR),e(oR,bYe),e(Wf,vYe),e(A,FYe),e(A,Qf),e(Qf,Hte),e(Hte,TYe),e(Qf,MYe),e(Qf,rR),e(rR,EYe),e(Qf,CYe),e(A,wYe),e(A,Hf),e(Hf,Ute),e(Ute,AYe),e(Hf,yYe),e(Hf,tR),e(tR,LYe),e(Hf,xYe),e(A,$Ye),e(A,Uf),e(Uf,Jte),e(Jte,kYe),e(Uf,SYe),e(Uf,aR),e(aR,RYe),e(Uf,PYe),e(A,BYe),e(A,Jf),e(Jf,Yte),e(Yte,IYe),e(Jf,NYe),e(Jf,nR),e(nR,qYe),e(Jf,jYe),e(A,DYe),e(A,Yf),e(Yf,Kte),e(Kte,GYe),e(Yf,OYe),e(Yf,sR),e(sR,VYe),e(Yf,XYe),e(A,zYe),e(A,Kf),e(Kf,Zte),e(Zte,WYe),e(Kf,QYe),e(Kf,lR),e(lR,HYe),e(Kf,UYe),e(A,JYe),e(A,Zf),e(Zf,eae),e(eae,YYe),e(Zf,KYe),e(Zf,iR),e(iR,ZYe),e(Zf,eKe),e(A,oKe),e(A,eg),e(eg,oae),e(oae,rKe),e(eg,tKe),e(eg,dR),e(dR,aKe),e(eg,nKe),e(A,sKe),e(A,og),e(og,rae),e(rae,lKe),e(og,iKe),e(og,cR),e(cR,dKe),e(og,cKe),e(A,mKe),e(A,rg),e(rg,tae),e(tae,fKe),e(rg,gKe),e(rg,mR),e(mR,hKe),e(rg,uKe),e(A,pKe),e(A,tg),e(tg,aae),e(aae,_Ke),e(tg,bKe),e(tg,fR),e(fR,vKe),e(tg,FKe),e(A,TKe),e(A,ag),e(ag,nae),e(nae,MKe),e(ag,EKe),e(ag,gR),e(gR,CKe),e(ag,wKe),e(A,AKe),e(A,ng),e(ng,sae),e(sae,yKe),e(ng,LKe),e(ng,hR),e(hR,xKe),e(ng,$Ke),e(A,kKe),e(A,sg),e(sg,lae),e(lae,SKe),e(sg,RKe),e(sg,uR),e(uR,PKe),e(sg,BKe),e(A,IKe),e(A,lg),e(lg,iae),e(iae,NKe),e(lg,qKe),e(lg,pR),e(pR,jKe),e(lg,DKe),e(A,GKe),e(A,ig),e(ig,dae),e(dae,OKe),e(ig,VKe),e(ig,_R),e(_R,XKe),e(ig,zKe),e(A,WKe),e(A,dg),e(dg,cae),e(cae,QKe),e(dg,HKe),e(dg,bR),e(bR,UKe),e(dg,JKe),e(A,YKe),e(A,cg),e(cg,mae),e(mae,KKe),e(cg,ZKe),e(cg,vR),e(vR,eZe),e(cg,oZe),e(A,rZe),e(A,mg),e(mg,fae),e(fae,tZe),e(mg,aZe),e(mg,FR),e(FR,nZe),e(mg,sZe),e(A,lZe),e(A,fg),e(fg,gae),e(gae,iZe),e(fg,dZe),e(fg,TR),e(TR,cZe),e(fg,mZe),e(A,fZe),e(A,gg),e(gg,hae),e(hae,gZe),e(gg,hZe),e(gg,MR),e(MR,uZe),e(gg,pZe),e(A,_Ze),e(A,hg),e(hg,uae),e(uae,bZe),e(hg,vZe),e(hg,ER),e(ER,FZe),e(hg,TZe),e(A,MZe),e(A,ug),e(ug,pae),e(pae,EZe),e(ug,CZe),e(ug,CR),e(CR,wZe),e(ug,AZe),e(A,yZe),e(A,pg),e(pg,_ae),e(_ae,LZe),e(pg,xZe),e(pg,wR),e(wR,$Ze),e(pg,kZe),e(A,SZe),e(A,_g),e(_g,bae),e(bae,RZe),e(_g,PZe),e(_g,AR),e(AR,BZe),e(_g,IZe),e(A,NZe),e(A,bg),e(bg,vae),e(vae,qZe),e(bg,jZe),e(bg,yR),e(yR,DZe),e(bg,GZe),e(A,OZe),e(A,vg),e(vg,Fae),e(Fae,VZe),e(vg,XZe),e(vg,LR),e(LR,zZe),e(vg,WZe),e(A,QZe),e(A,Fg),e(Fg,Tae),e(Tae,HZe),e(Fg,UZe),e(Fg,xR),e(xR,JZe),e(Fg,YZe),e(A,KZe),e(A,Tg),e(Tg,Mae),e(Mae,ZZe),e(Tg,eeo),e(Tg,$R),e($R,oeo),e(Tg,reo),e(A,teo),e(A,Mg),e(Mg,Eae),e(Eae,aeo),e(Mg,neo),e(Mg,kR),e(kR,seo),e(Mg,leo),e(A,ieo),e(A,Eg),e(Eg,Cae),e(Cae,deo),e(Eg,ceo),e(Eg,SR),e(SR,meo),e(Eg,feo),e(A,geo),e(A,Cg),e(Cg,wae),e(wae,heo),e(Cg,ueo),e(Cg,RR),e(RR,peo),e(Cg,_eo),e(A,beo),e(A,wg),e(wg,Aae),e(Aae,veo),e(wg,Feo),e(wg,PR),e(PR,Teo),e(wg,Meo),e(A,Eeo),e(A,Ag),e(Ag,yae),e(yae,Ceo),e(Ag,weo),e(Ag,BR),e(BR,Aeo),e(Ag,yeo),e(A,Leo),e(A,yg),e(yg,Lae),e(Lae,xeo),e(yg,$eo),e(yg,IR),e(IR,keo),e(yg,Seo),e(A,Reo),e(A,Lg),e(Lg,xae),e(xae,Peo),e(Lg,Beo),e(Lg,NR),e(NR,Ieo),e(Lg,Neo),e(A,qeo),e(A,xg),e(xg,$ae),e($ae,jeo),e(xg,Deo),e(xg,qR),e(qR,Geo),e(xg,Oeo),e(A,Veo),e(A,$g),e($g,kae),e(kae,Xeo),e($g,zeo),e($g,jR),e(jR,Weo),e($g,Qeo),e(A,Heo),e(A,kg),e(kg,Sae),e(Sae,Ueo),e(kg,Jeo),e(kg,DR),e(DR,Yeo),e(kg,Keo),e(A,Zeo),e(A,Sg),e(Sg,Rae),e(Rae,eoo),e(Sg,ooo),e(Sg,GR),e(GR,roo),e(Sg,too),e(A,aoo),e(A,Rg),e(Rg,Pae),e(Pae,noo),e(Rg,soo),e(Rg,OR),e(OR,loo),e(Rg,ioo),e(A,doo),e(A,Pg),e(Pg,Bae),e(Bae,coo),e(Pg,moo),e(Pg,VR),e(VR,foo),e(Pg,goo),e(A,hoo),e(A,Bg),e(Bg,Iae),e(Iae,uoo),e(Bg,poo),e(Bg,XR),e(XR,_oo),e(Bg,boo),e(A,voo),e(A,Ig),e(Ig,Nae),e(Nae,Foo),e(Ig,Too),e(Ig,zR),e(zR,Moo),e(Ig,Eoo),e(wr,Coo),M(Ng,wr,null),e(wo,woo),e(wo,qg),M(_L,qg,null),e(qg,Aoo),e(qg,qae),e(qae,yoo),b(m,MDe,_),b(m,xi,_),e(xi,jg),e(jg,jae),M(bL,jae,null),e(xi,Loo),e(xi,Dae),e(Dae,xoo),b(m,EDe,_),b(m,Ao,_),M(vL,Ao,null),e(Ao,$oo),e(Ao,FL),e(FL,koo),e(FL,WR),e(WR,Soo),e(FL,Roo),e(Ao,Poo),e(Ao,TL),e(TL,Boo),e(TL,Gae),e(Gae,Ioo),e(TL,Noo),e(Ao,qoo),e(Ao,Ar),M(ML,Ar,null),e(Ar,joo),e(Ar,Oae),e(Oae,Doo),e(Ar,Goo),e(Ar,$a),e($a,Ooo),e($a,Vae),e(Vae,Voo),e($a,Xoo),e($a,Xae),e(Xae,zoo),e($a,Woo),e($a,zae),e(zae,Qoo),e($a,Hoo),e(Ar,Uoo),e(Ar,k),e(k,Nn),e(Nn,Wae),e(Wae,Joo),e(Nn,Yoo),e(Nn,QR),e(QR,Koo),e(Nn,Zoo),e(Nn,HR),e(HR,ero),e(Nn,oro),e(k,rro),e(k,qn),e(qn,Qae),e(Qae,tro),e(qn,aro),e(qn,UR),e(UR,nro),e(qn,sro),e(qn,JR),e(JR,lro),e(qn,iro),e(k,dro),e(k,jn),e(jn,Hae),e(Hae,cro),e(jn,mro),e(jn,YR),e(YR,fro),e(jn,gro),e(jn,KR),e(KR,hro),e(jn,uro),e(k,pro),e(k,Dg),e(Dg,Uae),e(Uae,_ro),e(Dg,bro),e(Dg,ZR),e(ZR,vro),e(Dg,Fro),e(k,Tro),e(k,Dn),e(Dn,Jae),e(Jae,Mro),e(Dn,Ero),e(Dn,eP),e(eP,Cro),e(Dn,wro),e(Dn,oP),e(oP,Aro),e(Dn,yro),e(k,Lro),e(k,Gg),e(Gg,Yae),e(Yae,xro),e(Gg,$ro),e(Gg,rP),e(rP,kro),e(Gg,Sro),e(k,Rro),e(k,Og),e(Og,Kae),e(Kae,Pro),e(Og,Bro),e(Og,tP),e(tP,Iro),e(Og,Nro),e(k,qro),e(k,Vg),e(Vg,Zae),e(Zae,jro),e(Vg,Dro),e(Vg,aP),e(aP,Gro),e(Vg,Oro),e(k,Vro),e(k,Gn),e(Gn,ene),e(ene,Xro),e(Gn,zro),e(Gn,nP),e(nP,Wro),e(Gn,Qro),e(Gn,sP),e(sP,Hro),e(Gn,Uro),e(k,Jro),e(k,On),e(On,one),e(one,Yro),e(On,Kro),e(On,lP),e(lP,Zro),e(On,eto),e(On,iP),e(iP,oto),e(On,rto),e(k,tto),e(k,Vn),e(Vn,rne),e(rne,ato),e(Vn,nto),e(Vn,dP),e(dP,sto),e(Vn,lto),e(Vn,cP),e(cP,ito),e(Vn,dto),e(k,cto),e(k,Xg),e(Xg,tne),e(tne,mto),e(Xg,fto),e(Xg,mP),e(mP,gto),e(Xg,hto),e(k,uto),e(k,zg),e(zg,ane),e(ane,pto),e(zg,_to),e(zg,fP),e(fP,bto),e(zg,vto),e(k,Fto),e(k,Wg),e(Wg,nne),e(nne,Tto),e(Wg,Mto),e(Wg,gP),e(gP,Eto),e(Wg,Cto),e(k,wto),e(k,Xn),e(Xn,sne),e(sne,Ato),e(Xn,yto),e(Xn,hP),e(hP,Lto),e(Xn,xto),e(Xn,uP),e(uP,$to),e(Xn,kto),e(k,Sto),e(k,Qg),e(Qg,lne),e(lne,Rto),e(Qg,Pto),e(Qg,pP),e(pP,Bto),e(Qg,Ito),e(k,Nto),e(k,zn),e(zn,ine),e(ine,qto),e(zn,jto),e(zn,_P),e(_P,Dto),e(zn,Gto),e(zn,bP),e(bP,Oto),e(zn,Vto),e(k,Xto),e(k,Wn),e(Wn,dne),e(dne,zto),e(Wn,Wto),e(Wn,vP),e(vP,Qto),e(Wn,Hto),e(Wn,FP),e(FP,Uto),e(Wn,Jto),e(k,Yto),e(k,Qn),e(Qn,cne),e(cne,Kto),e(Qn,Zto),e(Qn,TP),e(TP,eao),e(Qn,oao),e(Qn,MP),e(MP,rao),e(Qn,tao),e(k,aao),e(k,Hg),e(Hg,mne),e(mne,nao),e(Hg,sao),e(Hg,EP),e(EP,lao),e(Hg,iao),e(k,dao),e(k,Hn),e(Hn,fne),e(fne,cao),e(Hn,mao),e(Hn,CP),e(CP,fao),e(Hn,gao),e(Hn,wP),e(wP,hao),e(Hn,uao),e(k,pao),e(k,Un),e(Un,gne),e(gne,_ao),e(Un,bao),e(Un,AP),e(AP,vao),e(Un,Fao),e(Un,yP),e(yP,Tao),e(Un,Mao),e(k,Eao),e(k,Jn),e(Jn,hne),e(hne,Cao),e(Jn,wao),e(Jn,LP),e(LP,Aao),e(Jn,yao),e(Jn,xP),e(xP,Lao),e(Jn,xao),e(k,$ao),e(k,Yn),e(Yn,une),e(une,kao),e(Yn,Sao),e(Yn,$P),e($P,Rao),e(Yn,Pao),e(Yn,kP),e(kP,Bao),e(Yn,Iao),e(k,Nao),e(k,Kn),e(Kn,pne),e(pne,qao),e(Kn,jao),e(Kn,SP),e(SP,Dao),e(Kn,Gao),e(Kn,RP),e(RP,Oao),e(Kn,Vao),e(k,Xao),e(k,Zn),e(Zn,_ne),e(_ne,zao),e(Zn,Wao),e(Zn,PP),e(PP,Qao),e(Zn,Hao),e(Zn,BP),e(BP,Uao),e(Zn,Jao),e(k,Yao),e(k,Ug),e(Ug,bne),e(bne,Kao),e(Ug,Zao),e(Ug,IP),e(IP,eno),e(Ug,ono),e(k,rno),e(k,es),e(es,vne),e(vne,tno),e(es,ano),e(es,NP),e(NP,nno),e(es,sno),e(es,qP),e(qP,lno),e(es,ino),e(k,dno),e(k,Jg),e(Jg,Fne),e(Fne,cno),e(Jg,mno),e(Jg,jP),e(jP,fno),e(Jg,gno),e(k,hno),e(k,os),e(os,Tne),e(Tne,uno),e(os,pno),e(os,DP),e(DP,_no),e(os,bno),e(os,GP),e(GP,vno),e(os,Fno),e(k,Tno),e(k,rs),e(rs,Mne),e(Mne,Mno),e(rs,Eno),e(rs,OP),e(OP,Cno),e(rs,wno),e(rs,VP),e(VP,Ano),e(rs,yno),e(k,Lno),e(k,ts),e(ts,Ene),e(Ene,xno),e(ts,$no),e(ts,XP),e(XP,kno),e(ts,Sno),e(ts,zP),e(zP,Rno),e(ts,Pno),e(k,Bno),e(k,Yg),e(Yg,Cne),e(Cne,Ino),e(Yg,Nno),e(Yg,WP),e(WP,qno),e(Yg,jno),e(k,Dno),e(k,as),e(as,wne),e(wne,Gno),e(as,Ono),e(as,QP),e(QP,Vno),e(as,Xno),e(as,HP),e(HP,zno),e(as,Wno),e(k,Qno),e(k,ns),e(ns,Ane),e(Ane,Hno),e(ns,Uno),e(ns,UP),e(UP,Jno),e(ns,Yno),e(ns,JP),e(JP,Kno),e(ns,Zno),e(k,eso),e(k,Kg),e(Kg,yne),e(yne,oso),e(Kg,rso),e(Kg,YP),e(YP,tso),e(Kg,aso),e(k,nso),e(k,ss),e(ss,Lne),e(Lne,sso),e(ss,lso),e(ss,KP),e(KP,iso),e(ss,dso),e(ss,ZP),e(ZP,cso),e(ss,mso),e(k,fso),e(k,ls),e(ls,xne),e(xne,gso),e(ls,hso),e(ls,eB),e(eB,uso),e(ls,pso),e(ls,oB),e(oB,_so),e(ls,bso),e(k,vso),e(k,is),e(is,$ne),e($ne,Fso),e(is,Tso),e(is,rB),e(rB,Mso),e(is,Eso),e(is,tB),e(tB,Cso),e(is,wso),e(k,Aso),e(k,ds),e(ds,kne),e(kne,yso),e(ds,Lso),e(ds,aB),e(aB,xso),e(ds,$so),e(ds,nB),e(nB,kso),e(ds,Sso),e(k,Rso),e(k,cs),e(cs,Sne),e(Sne,Pso),e(cs,Bso),e(cs,sB),e(sB,Iso),e(cs,Nso),e(cs,lB),e(lB,qso),e(cs,jso),e(k,Dso),e(k,ms),e(ms,Rne),e(Rne,Gso),e(ms,Oso),e(ms,iB),e(iB,Vso),e(ms,Xso),e(ms,dB),e(dB,zso),e(ms,Wso),e(k,Qso),e(k,fs),e(fs,Pne),e(Pne,Hso),e(fs,Uso),e(fs,cB),e(cB,Jso),e(fs,Yso),e(fs,mB),e(mB,Kso),e(fs,Zso),e(k,elo),e(k,Zg),e(Zg,Bne),e(Bne,olo),e(Zg,rlo),e(Zg,fB),e(fB,tlo),e(Zg,alo),e(k,nlo),e(k,gs),e(gs,Ine),e(Ine,slo),e(gs,llo),e(gs,gB),e(gB,ilo),e(gs,dlo),e(gs,hB),e(hB,clo),e(gs,mlo),e(k,flo),e(k,eh),e(eh,Nne),e(Nne,glo),e(eh,hlo),e(eh,uB),e(uB,ulo),e(eh,plo),e(k,_lo),e(k,oh),e(oh,qne),e(qne,blo),e(oh,vlo),e(oh,pB),e(pB,Flo),e(oh,Tlo),e(k,Mlo),e(k,hs),e(hs,jne),e(jne,Elo),e(hs,Clo),e(hs,_B),e(_B,wlo),e(hs,Alo),e(hs,bB),e(bB,ylo),e(hs,Llo),e(k,xlo),e(k,us),e(us,Dne),e(Dne,$lo),e(us,klo),e(us,vB),e(vB,Slo),e(us,Rlo),e(us,FB),e(FB,Plo),e(us,Blo),e(k,Ilo),e(k,ps),e(ps,Gne),e(Gne,Nlo),e(ps,qlo),e(ps,TB),e(TB,jlo),e(ps,Dlo),e(ps,MB),e(MB,Glo),e(ps,Olo),e(k,Vlo),e(k,rh),e(rh,One),e(One,Xlo),e(rh,zlo),e(rh,EB),e(EB,Wlo),e(rh,Qlo),e(k,Hlo),e(k,_s),e(_s,Vne),e(Vne,Ulo),e(_s,Jlo),e(_s,CB),e(CB,Ylo),e(_s,Klo),e(_s,wB),e(wB,Zlo),e(_s,eio),e(k,oio),e(k,bs),e(bs,Xne),e(Xne,rio),e(bs,tio),e(bs,AB),e(AB,aio),e(bs,nio),e(bs,yB),e(yB,sio),e(bs,lio),e(k,iio),e(k,vs),e(vs,zne),e(zne,dio),e(vs,cio),e(vs,LB),e(LB,mio),e(vs,fio),e(vs,xB),e(xB,gio),e(vs,hio),e(k,uio),e(k,Fs),e(Fs,Wne),e(Wne,pio),e(Fs,_io),e(Fs,$B),e($B,bio),e(Fs,vio),e(Fs,kB),e(kB,Fio),e(Fs,Tio),e(k,Mio),e(k,Ts),e(Ts,Qne),e(Qne,Eio),e(Ts,Cio),e(Ts,SB),e(SB,wio),e(Ts,Aio),e(Ts,RB),e(RB,yio),e(Ts,Lio),e(k,xio),e(k,th),e(th,Hne),e(Hne,$io),e(th,kio),e(th,PB),e(PB,Sio),e(th,Rio),e(k,Pio),e(k,Ms),e(Ms,Une),e(Une,Bio),e(Ms,Iio),e(Ms,BB),e(BB,Nio),e(Ms,qio),e(Ms,IB),e(IB,jio),e(Ms,Dio),e(k,Gio),e(k,ah),e(ah,Jne),e(Jne,Oio),e(ah,Vio),e(ah,NB),e(NB,Xio),e(ah,zio),e(k,Wio),e(k,nh),e(nh,Yne),e(Yne,Qio),e(nh,Hio),e(nh,qB),e(qB,Uio),e(nh,Jio),e(k,Yio),e(k,sh),e(sh,Kne),e(Kne,Kio),e(sh,Zio),e(sh,jB),e(jB,edo),e(sh,odo),e(k,rdo),e(k,lh),e(lh,Zne),e(Zne,tdo),e(lh,ado),e(lh,DB),e(DB,ndo),e(lh,sdo),e(k,ldo),e(k,Es),e(Es,ese),e(ese,ido),e(Es,ddo),e(Es,GB),e(GB,cdo),e(Es,mdo),e(Es,OB),e(OB,fdo),e(Es,gdo),e(k,hdo),e(k,ih),e(ih,ose),e(ose,udo),e(ih,pdo),e(ih,VB),e(VB,_do),e(ih,bdo),e(k,vdo),e(k,Cs),e(Cs,rse),e(rse,Fdo),e(Cs,Tdo),e(Cs,XB),e(XB,Mdo),e(Cs,Edo),e(Cs,zB),e(zB,Cdo),e(Cs,wdo),e(k,Ado),e(k,ws),e(ws,tse),e(tse,ydo),e(ws,Ldo),e(ws,WB),e(WB,xdo),e(ws,$do),e(ws,QB),e(QB,kdo),e(ws,Sdo),e(k,Rdo),e(k,As),e(As,ase),e(ase,Pdo),e(As,Bdo),e(As,HB),e(HB,Ido),e(As,Ndo),e(As,UB),e(UB,qdo),e(As,jdo),e(k,Ddo),e(k,ys),e(ys,nse),e(nse,Gdo),e(ys,Odo),e(ys,JB),e(JB,Vdo),e(ys,Xdo),e(ys,YB),e(YB,zdo),e(ys,Wdo),e(k,Qdo),e(k,Ls),e(Ls,sse),e(sse,Hdo),e(Ls,Udo),e(Ls,KB),e(KB,Jdo),e(Ls,Ydo),e(Ls,ZB),e(ZB,Kdo),e(Ls,Zdo),e(k,eco),e(k,xs),e(xs,lse),e(lse,oco),e(xs,rco),e(xs,eI),e(eI,tco),e(xs,aco),e(xs,oI),e(oI,nco),e(xs,sco),e(k,lco),e(k,dh),e(dh,ise),e(ise,ico),e(dh,dco),e(dh,rI),e(rI,cco),e(dh,mco),e(k,fco),e(k,ch),e(ch,dse),e(dse,gco),e(ch,hco),e(ch,tI),e(tI,uco),e(ch,pco),e(k,_co),e(k,$s),e($s,cse),e(cse,bco),e($s,vco),e($s,aI),e(aI,Fco),e($s,Tco),e($s,nI),e(nI,Mco),e($s,Eco),e(k,Cco),e(k,ks),e(ks,mse),e(mse,wco),e(ks,Aco),e(ks,sI),e(sI,yco),e(ks,Lco),e(ks,lI),e(lI,xco),e(ks,$co),e(k,kco),e(k,Ss),e(Ss,fse),e(fse,Sco),e(Ss,Rco),e(Ss,iI),e(iI,Pco),e(Ss,Bco),e(Ss,dI),e(dI,Ico),e(Ss,Nco),e(k,qco),e(k,mh),e(mh,gse),e(gse,jco),e(mh,Dco),e(mh,cI),e(cI,Gco),e(mh,Oco),e(k,Vco),e(k,fh),e(fh,hse),e(hse,Xco),e(fh,zco),e(fh,mI),e(mI,Wco),e(fh,Qco),e(k,Hco),e(k,gh),e(gh,use),e(use,Uco),e(gh,Jco),e(gh,fI),e(fI,Yco),e(gh,Kco),e(k,Zco),e(k,Rs),e(Rs,pse),e(pse,emo),e(Rs,omo),e(Rs,gI),e(gI,rmo),e(Rs,tmo),e(Rs,hI),e(hI,amo),e(Rs,nmo),e(k,smo),e(k,Ps),e(Ps,_se),e(_se,lmo),e(Ps,imo),e(Ps,uI),e(uI,dmo),e(Ps,cmo),e(Ps,pI),e(pI,mmo),e(Ps,fmo),e(k,gmo),e(k,hh),e(hh,bse),e(bse,hmo),e(hh,umo),e(hh,_I),e(_I,pmo),e(hh,_mo),e(k,bmo),e(k,uh),e(uh,vse),e(vse,vmo),e(uh,Fmo),e(uh,bI),e(bI,Tmo),e(uh,Mmo),e(k,Emo),e(k,ph),e(ph,Fse),e(Fse,Cmo),e(ph,wmo),e(ph,vI),e(vI,Amo),e(ph,ymo),e(k,Lmo),e(k,Bs),e(Bs,Tse),e(Tse,xmo),e(Bs,$mo),e(Bs,FI),e(FI,kmo),e(Bs,Smo),e(Bs,TI),e(TI,Rmo),e(Bs,Pmo),e(k,Bmo),e(k,_h),e(_h,Mse),e(Mse,Imo),e(_h,Nmo),e(_h,MI),e(MI,qmo),e(_h,jmo),e(k,Dmo),e(k,bh),e(bh,Ese),e(Ese,Gmo),e(bh,Omo),e(bh,EI),e(EI,Vmo),e(bh,Xmo),e(k,zmo),e(k,Is),e(Is,Cse),e(Cse,Wmo),e(Is,Qmo),e(Is,CI),e(CI,Hmo),e(Is,Umo),e(Is,wI),e(wI,Jmo),e(Is,Ymo),e(k,Kmo),e(k,Ns),e(Ns,wse),e(wse,Zmo),e(Ns,efo),e(Ns,AI),e(AI,ofo),e(Ns,rfo),e(Ns,yI),e(yI,tfo),e(Ns,afo),e(k,nfo),e(k,qs),e(qs,Ase),e(Ase,sfo),e(qs,lfo),e(qs,LI),e(LI,ifo),e(qs,dfo),e(qs,xI),e(xI,cfo),e(qs,mfo),e(k,ffo),e(k,js),e(js,yse),e(yse,gfo),e(js,hfo),e(js,$I),e($I,ufo),e(js,pfo),e(js,kI),e(kI,_fo),e(js,bfo),e(Ar,vfo),M(vh,Ar,null),e(Ao,Ffo),e(Ao,Fh),M(EL,Fh,null),e(Fh,Tfo),e(Fh,Lse),e(Lse,Mfo),b(m,CDe,_),b(m,$i,_),e($i,Th),e(Th,xse),M(CL,xse,null),e($i,Efo),e($i,$se),e($se,Cfo),b(m,wDe,_),b(m,yo,_),M(wL,yo,null),e(yo,wfo),e(yo,AL),e(AL,Afo),e(AL,SI),e(SI,yfo),e(AL,Lfo),e(yo,xfo),e(yo,yL),e(yL,$fo),e(yL,kse),e(kse,kfo),e(yL,Sfo),e(yo,Rfo),e(yo,He),M(LL,He,null),e(He,Pfo),e(He,Sse),e(Sse,Bfo),e(He,Ifo),e(He,ka),e(ka,Nfo),e(ka,Rse),e(Rse,qfo),e(ka,jfo),e(ka,Pse),e(Pse,Dfo),e(ka,Gfo),e(ka,Bse),e(Bse,Ofo),e(ka,Vfo),e(He,Xfo),e(He,Y),e(Y,Mh),e(Mh,Ise),e(Ise,zfo),e(Mh,Wfo),e(Mh,RI),e(RI,Qfo),e(Mh,Hfo),e(Y,Ufo),e(Y,Eh),e(Eh,Nse),e(Nse,Jfo),e(Eh,Yfo),e(Eh,PI),e(PI,Kfo),e(Eh,Zfo),e(Y,ego),e(Y,Ch),e(Ch,qse),e(qse,ogo),e(Ch,rgo),e(Ch,BI),e(BI,tgo),e(Ch,ago),e(Y,ngo),e(Y,wh),e(wh,jse),e(jse,sgo),e(wh,lgo),e(wh,II),e(II,igo),e(wh,dgo),e(Y,cgo),e(Y,Ah),e(Ah,Dse),e(Dse,mgo),e(Ah,fgo),e(Ah,NI),e(NI,ggo),e(Ah,hgo),e(Y,ugo),e(Y,yh),e(yh,Gse),e(Gse,pgo),e(yh,_go),e(yh,qI),e(qI,bgo),e(yh,vgo),e(Y,Fgo),e(Y,Lh),e(Lh,Ose),e(Ose,Tgo),e(Lh,Mgo),e(Lh,jI),e(jI,Ego),e(Lh,Cgo),e(Y,wgo),e(Y,xh),e(xh,Vse),e(Vse,Ago),e(xh,ygo),e(xh,DI),e(DI,Lgo),e(xh,xgo),e(Y,$go),e(Y,$h),e($h,Xse),e(Xse,kgo),e($h,Sgo),e($h,GI),e(GI,Rgo),e($h,Pgo),e(Y,Bgo),e(Y,kh),e(kh,zse),e(zse,Igo),e(kh,Ngo),e(kh,OI),e(OI,qgo),e(kh,jgo),e(Y,Dgo),e(Y,Sh),e(Sh,Wse),e(Wse,Ggo),e(Sh,Ogo),e(Sh,VI),e(VI,Vgo),e(Sh,Xgo),e(Y,zgo),e(Y,Rh),e(Rh,Qse),e(Qse,Wgo),e(Rh,Qgo),e(Rh,XI),e(XI,Hgo),e(Rh,Ugo),e(Y,Jgo),e(Y,Ph),e(Ph,Hse),e(Hse,Ygo),e(Ph,Kgo),e(Ph,zI),e(zI,Zgo),e(Ph,eho),e(Y,oho),e(Y,Bh),e(Bh,Use),e(Use,rho),e(Bh,tho),e(Bh,WI),e(WI,aho),e(Bh,nho),e(Y,sho),e(Y,Ih),e(Ih,Jse),e(Jse,lho),e(Ih,iho),e(Ih,QI),e(QI,dho),e(Ih,cho),e(Y,mho),e(Y,Nh),e(Nh,Yse),e(Yse,fho),e(Nh,gho),e(Nh,HI),e(HI,hho),e(Nh,uho),e(Y,pho),e(Y,qh),e(qh,Kse),e(Kse,_ho),e(qh,bho),e(qh,UI),e(UI,vho),e(qh,Fho),e(Y,Tho),e(Y,jh),e(jh,Zse),e(Zse,Mho),e(jh,Eho),e(jh,JI),e(JI,Cho),e(jh,who),e(Y,Aho),e(Y,Dh),e(Dh,ele),e(ele,yho),e(Dh,Lho),e(Dh,YI),e(YI,xho),e(Dh,$ho),e(Y,kho),e(Y,Gh),e(Gh,ole),e(ole,Sho),e(Gh,Rho),e(Gh,KI),e(KI,Pho),e(Gh,Bho),e(Y,Iho),e(Y,Oh),e(Oh,rle),e(rle,Nho),e(Oh,qho),e(Oh,ZI),e(ZI,jho),e(Oh,Dho),e(Y,Gho),e(Y,Vh),e(Vh,tle),e(tle,Oho),e(Vh,Vho),e(Vh,eN),e(eN,Xho),e(Vh,zho),e(Y,Who),e(Y,Xh),e(Xh,ale),e(ale,Qho),e(Xh,Hho),e(Xh,oN),e(oN,Uho),e(Xh,Jho),e(Y,Yho),e(Y,zh),e(zh,nle),e(nle,Kho),e(zh,Zho),e(zh,rN),e(rN,euo),e(zh,ouo),e(Y,ruo),e(Y,Wh),e(Wh,sle),e(sle,tuo),e(Wh,auo),e(Wh,tN),e(tN,nuo),e(Wh,suo),e(Y,luo),e(Y,Qh),e(Qh,lle),e(lle,iuo),e(Qh,duo),e(Qh,aN),e(aN,cuo),e(Qh,muo),e(Y,fuo),e(Y,Hh),e(Hh,ile),e(ile,guo),e(Hh,huo),e(Hh,nN),e(nN,uuo),e(Hh,puo),e(Y,_uo),e(Y,Uh),e(Uh,dle),e(dle,buo),e(Uh,vuo),e(Uh,sN),e(sN,Fuo),e(Uh,Tuo),e(Y,Muo),e(Y,Jh),e(Jh,cle),e(cle,Euo),e(Jh,Cuo),e(Jh,lN),e(lN,wuo),e(Jh,Auo),e(Y,yuo),e(Y,Yh),e(Yh,mle),e(mle,Luo),e(Yh,xuo),e(Yh,iN),e(iN,$uo),e(Yh,kuo),e(Y,Suo),e(Y,Kh),e(Kh,fle),e(fle,Ruo),e(Kh,Puo),e(Kh,dN),e(dN,Buo),e(Kh,Iuo),e(Y,Nuo),e(Y,Zh),e(Zh,gle),e(gle,quo),e(Zh,juo),e(Zh,cN),e(cN,Duo),e(Zh,Guo),e(He,Ouo),M(eu,He,null),e(He,Vuo),M(ou,He,null),e(yo,Xuo),e(yo,ru),M(xL,ru,null),e(ru,zuo),e(ru,hle),e(hle,Wuo),b(m,ADe,_),b(m,ki,_),e(ki,tu),e(tu,ule),M($L,ule,null),e(ki,Quo),e(ki,ple),e(ple,Huo),b(m,yDe,_),b(m,Lo,_),M(kL,Lo,null),e(Lo,Uuo),e(Lo,SL),e(SL,Juo),e(SL,mN),e(mN,Yuo),e(SL,Kuo),e(Lo,Zuo),e(Lo,RL),e(RL,epo),e(RL,_le),e(_le,opo),e(RL,rpo),e(Lo,tpo),e(Lo,Ue),M(PL,Ue,null),e(Ue,apo),e(Ue,ble),e(ble,npo),e(Ue,spo),e(Ue,Si),e(Si,lpo),e(Si,vle),e(vle,ipo),e(Si,dpo),e(Si,Fle),e(Fle,cpo),e(Si,mpo),e(Ue,fpo),e(Ue,he),e(he,au),e(au,Tle),e(Tle,gpo),e(au,hpo),e(au,fN),e(fN,upo),e(au,ppo),e(he,_po),e(he,nu),e(nu,Mle),e(Mle,bpo),e(nu,vpo),e(nu,Ele),e(Ele,Fpo),e(nu,Tpo),e(he,Mpo),e(he,su),e(su,Cle),e(Cle,Epo),e(su,Cpo),e(su,gN),e(gN,wpo),e(su,Apo),e(he,ypo),e(he,lu),e(lu,wle),e(wle,Lpo),e(lu,xpo),e(lu,hN),e(hN,$po),e(lu,kpo),e(he,Spo),e(he,iu),e(iu,Ale),e(Ale,Rpo),e(iu,Ppo),e(iu,uN),e(uN,Bpo),e(iu,Ipo),e(he,Npo),e(he,du),e(du,yle),e(yle,qpo),e(du,jpo),e(du,pN),e(pN,Dpo),e(du,Gpo),e(he,Opo),e(he,cu),e(cu,Lle),e(Lle,Vpo),e(cu,Xpo),e(cu,_N),e(_N,zpo),e(cu,Wpo),e(he,Qpo),e(he,mu),e(mu,xle),e(xle,Hpo),e(mu,Upo),e(mu,bN),e(bN,Jpo),e(mu,Ypo),e(he,Kpo),e(he,fu),e(fu,$le),e($le,Zpo),e(fu,e_o),e(fu,vN),e(vN,o_o),e(fu,r_o),e(he,t_o),e(he,gu),e(gu,kle),e(kle,a_o),e(gu,n_o),e(gu,FN),e(FN,s_o),e(gu,l_o),e(he,i_o),e(he,hu),e(hu,Sle),e(Sle,d_o),e(hu,c_o),e(hu,TN),e(TN,m_o),e(hu,f_o),e(he,g_o),e(he,uu),e(uu,Rle),e(Rle,h_o),e(uu,u_o),e(uu,MN),e(MN,p_o),e(uu,__o),e(he,b_o),e(he,pu),e(pu,Ple),e(Ple,v_o),e(pu,F_o),e(pu,EN),e(EN,T_o),e(pu,M_o),e(he,E_o),e(he,_u),e(_u,Ble),e(Ble,C_o),e(_u,w_o),e(_u,CN),e(CN,A_o),e(_u,y_o),e(he,L_o),e(he,bu),e(bu,Ile),e(Ile,x_o),e(bu,$_o),e(bu,wN),e(wN,k_o),e(bu,S_o),e(he,R_o),e(he,vu),e(vu,Nle),e(Nle,P_o),e(vu,B_o),e(vu,AN),e(AN,I_o),e(vu,N_o),e(he,q_o),e(he,Fu),e(Fu,qle),e(qle,j_o),e(Fu,D_o),e(Fu,yN),e(yN,G_o),e(Fu,O_o),e(Ue,V_o),M(Tu,Ue,null),e(Ue,X_o),M(Mu,Ue,null),e(Lo,z_o),e(Lo,Eu),M(BL,Eu,null),e(Eu,W_o),e(Eu,jle),e(jle,Q_o),b(m,LDe,_),b(m,Ri,_),e(Ri,Cu),e(Cu,Dle),M(IL,Dle,null),e(Ri,H_o),e(Ri,Gle),e(Gle,U_o),b(m,xDe,_),b(m,xo,_),M(NL,xo,null),e(xo,J_o),e(xo,Pi),e(Pi,Y_o),e(Pi,LN),e(LN,K_o),e(Pi,Z_o),e(Pi,xN),e(xN,ebo),e(Pi,obo),e(xo,rbo),e(xo,qL),e(qL,tbo),e(qL,Ole),e(Ole,abo),e(qL,nbo),e(xo,sbo),e(xo,nt),M(jL,nt,null),e(nt,lbo),e(nt,Vle),e(Vle,ibo),e(nt,dbo),e(nt,Bi),e(Bi,cbo),e(Bi,Xle),e(Xle,mbo),e(Bi,fbo),e(Bi,$N),e($N,gbo),e(Bi,hbo),e(nt,ubo),M(wu,nt,null),e(xo,pbo),e(xo,Je),M(DL,Je,null),e(Je,_bo),e(Je,zle),e(zle,bbo),e(Je,vbo),e(Je,Sa),e(Sa,Fbo),e(Sa,Wle),e(Wle,Tbo),e(Sa,Mbo),e(Sa,Qle),e(Qle,Ebo),e(Sa,Cbo),e(Sa,Hle),e(Hle,wbo),e(Sa,Abo),e(Je,ybo),e(Je,x),e(x,Au),e(Au,Ule),e(Ule,Lbo),e(Au,xbo),e(Au,kN),e(kN,$bo),e(Au,kbo),e(x,Sbo),e(x,yu),e(yu,Jle),e(Jle,Rbo),e(yu,Pbo),e(yu,SN),e(SN,Bbo),e(yu,Ibo),e(x,Nbo),e(x,Lu),e(Lu,Yle),e(Yle,qbo),e(Lu,jbo),e(Lu,RN),e(RN,Dbo),e(Lu,Gbo),e(x,Obo),e(x,xu),e(xu,Kle),e(Kle,Vbo),e(xu,Xbo),e(xu,PN),e(PN,zbo),e(xu,Wbo),e(x,Qbo),e(x,$u),e($u,Zle),e(Zle,Hbo),e($u,Ubo),e($u,BN),e(BN,Jbo),e($u,Ybo),e(x,Kbo),e(x,ku),e(ku,eie),e(eie,Zbo),e(ku,e2o),e(ku,IN),e(IN,o2o),e(ku,r2o),e(x,t2o),e(x,Su),e(Su,oie),e(oie,a2o),e(Su,n2o),e(Su,NN),e(NN,s2o),e(Su,l2o),e(x,i2o),e(x,Ru),e(Ru,rie),e(rie,d2o),e(Ru,c2o),e(Ru,qN),e(qN,m2o),e(Ru,f2o),e(x,g2o),e(x,Pu),e(Pu,tie),e(tie,h2o),e(Pu,u2o),e(Pu,jN),e(jN,p2o),e(Pu,_2o),e(x,b2o),e(x,Bu),e(Bu,aie),e(aie,v2o),e(Bu,F2o),e(Bu,DN),e(DN,T2o),e(Bu,M2o),e(x,E2o),e(x,Iu),e(Iu,nie),e(nie,C2o),e(Iu,w2o),e(Iu,GN),e(GN,A2o),e(Iu,y2o),e(x,L2o),e(x,Nu),e(Nu,sie),e(sie,x2o),e(Nu,$2o),e(Nu,ON),e(ON,k2o),e(Nu,S2o),e(x,R2o),e(x,qu),e(qu,lie),e(lie,P2o),e(qu,B2o),e(qu,VN),e(VN,I2o),e(qu,N2o),e(x,q2o),e(x,ju),e(ju,iie),e(iie,j2o),e(ju,D2o),e(ju,XN),e(XN,G2o),e(ju,O2o),e(x,V2o),e(x,Du),e(Du,die),e(die,X2o),e(Du,z2o),e(Du,zN),e(zN,W2o),e(Du,Q2o),e(x,H2o),e(x,Gu),e(Gu,cie),e(cie,U2o),e(Gu,J2o),e(Gu,WN),e(WN,Y2o),e(Gu,K2o),e(x,Z2o),e(x,Ou),e(Ou,mie),e(mie,evo),e(Ou,ovo),e(Ou,QN),e(QN,rvo),e(Ou,tvo),e(x,avo),e(x,Vu),e(Vu,fie),e(fie,nvo),e(Vu,svo),e(Vu,HN),e(HN,lvo),e(Vu,ivo),e(x,dvo),e(x,Xu),e(Xu,gie),e(gie,cvo),e(Xu,mvo),e(Xu,UN),e(UN,fvo),e(Xu,gvo),e(x,hvo),e(x,zu),e(zu,hie),e(hie,uvo),e(zu,pvo),e(zu,JN),e(JN,_vo),e(zu,bvo),e(x,vvo),e(x,Wu),e(Wu,uie),e(uie,Fvo),e(Wu,Tvo),e(Wu,YN),e(YN,Mvo),e(Wu,Evo),e(x,Cvo),e(x,Qu),e(Qu,pie),e(pie,wvo),e(Qu,Avo),e(Qu,KN),e(KN,yvo),e(Qu,Lvo),e(x,xvo),e(x,Hu),e(Hu,_ie),e(_ie,$vo),e(Hu,kvo),e(Hu,ZN),e(ZN,Svo),e(Hu,Rvo),e(x,Pvo),e(x,Uu),e(Uu,bie),e(bie,Bvo),e(Uu,Ivo),e(Uu,eq),e(eq,Nvo),e(Uu,qvo),e(x,jvo),e(x,Ju),e(Ju,vie),e(vie,Dvo),e(Ju,Gvo),e(Ju,oq),e(oq,Ovo),e(Ju,Vvo),e(x,Xvo),e(x,Yu),e(Yu,Fie),e(Fie,zvo),e(Yu,Wvo),e(Yu,rq),e(rq,Qvo),e(Yu,Hvo),e(x,Uvo),e(x,Ku),e(Ku,Tie),e(Tie,Jvo),e(Ku,Yvo),e(Ku,tq),e(tq,Kvo),e(Ku,Zvo),e(x,eFo),e(x,Zu),e(Zu,Mie),e(Mie,oFo),e(Zu,rFo),e(Zu,aq),e(aq,tFo),e(Zu,aFo),e(x,nFo),e(x,ep),e(ep,Eie),e(Eie,sFo),e(ep,lFo),e(ep,nq),e(nq,iFo),e(ep,dFo),e(x,cFo),e(x,op),e(op,Cie),e(Cie,mFo),e(op,fFo),e(op,sq),e(sq,gFo),e(op,hFo),e(x,uFo),e(x,rp),e(rp,wie),e(wie,pFo),e(rp,_Fo),e(rp,lq),e(lq,bFo),e(rp,vFo),e(x,FFo),e(x,tp),e(tp,Aie),e(Aie,TFo),e(tp,MFo),e(tp,iq),e(iq,EFo),e(tp,CFo),e(x,wFo),e(x,ap),e(ap,yie),e(yie,AFo),e(ap,yFo),e(ap,dq),e(dq,LFo),e(ap,xFo),e(x,$Fo),e(x,Ds),e(Ds,Lie),e(Lie,kFo),e(Ds,SFo),e(Ds,cq),e(cq,RFo),e(Ds,PFo),e(Ds,mq),e(mq,BFo),e(Ds,IFo),e(x,NFo),e(x,np),e(np,xie),e(xie,qFo),e(np,jFo),e(np,fq),e(fq,DFo),e(np,GFo),e(x,OFo),e(x,sp),e(sp,$ie),e($ie,VFo),e(sp,XFo),e(sp,gq),e(gq,zFo),e(sp,WFo),e(x,QFo),e(x,lp),e(lp,kie),e(kie,HFo),e(lp,UFo),e(lp,hq),e(hq,JFo),e(lp,YFo),e(x,KFo),e(x,ip),e(ip,Sie),e(Sie,ZFo),e(ip,e1o),e(ip,uq),e(uq,o1o),e(ip,r1o),e(x,t1o),e(x,dp),e(dp,Rie),e(Rie,a1o),e(dp,n1o),e(dp,pq),e(pq,s1o),e(dp,l1o),e(x,i1o),e(x,cp),e(cp,Pie),e(Pie,d1o),e(cp,c1o),e(cp,_q),e(_q,m1o),e(cp,f1o),e(x,g1o),e(x,mp),e(mp,Bie),e(Bie,h1o),e(mp,u1o),e(mp,bq),e(bq,p1o),e(mp,_1o),e(x,b1o),e(x,fp),e(fp,Iie),e(Iie,v1o),e(fp,F1o),e(fp,vq),e(vq,T1o),e(fp,M1o),e(x,E1o),e(x,gp),e(gp,Nie),e(Nie,C1o),e(gp,w1o),e(gp,Fq),e(Fq,A1o),e(gp,y1o),e(x,L1o),e(x,hp),e(hp,qie),e(qie,x1o),e(hp,$1o),e(hp,Tq),e(Tq,k1o),e(hp,S1o),e(x,R1o),e(x,up),e(up,jie),e(jie,P1o),e(up,B1o),e(up,Mq),e(Mq,I1o),e(up,N1o),e(x,q1o),e(x,pp),e(pp,Die),e(Die,j1o),e(pp,D1o),e(pp,Eq),e(Eq,G1o),e(pp,O1o),e(x,V1o),e(x,_p),e(_p,Gie),e(Gie,X1o),e(_p,z1o),e(_p,Cq),e(Cq,W1o),e(_p,Q1o),e(x,H1o),e(x,bp),e(bp,Oie),e(Oie,U1o),e(bp,J1o),e(bp,wq),e(wq,Y1o),e(bp,K1o),e(x,Z1o),e(x,vp),e(vp,Vie),e(Vie,eTo),e(vp,oTo),e(vp,Aq),e(Aq,rTo),e(vp,tTo),e(x,aTo),e(x,Fp),e(Fp,Xie),e(Xie,nTo),e(Fp,sTo),e(Fp,yq),e(yq,lTo),e(Fp,iTo),e(x,dTo),e(x,Tp),e(Tp,zie),e(zie,cTo),e(Tp,mTo),e(Tp,Lq),e(Lq,fTo),e(Tp,gTo),e(x,hTo),e(x,Mp),e(Mp,Wie),e(Wie,uTo),e(Mp,pTo),e(Mp,xq),e(xq,_To),e(Mp,bTo),e(x,vTo),e(x,Ep),e(Ep,Qie),e(Qie,FTo),e(Ep,TTo),e(Ep,$q),e($q,MTo),e(Ep,ETo),e(x,CTo),e(x,Cp),e(Cp,Hie),e(Hie,wTo),e(Cp,ATo),e(Cp,kq),e(kq,yTo),e(Cp,LTo),e(x,xTo),e(x,wp),e(wp,Uie),e(Uie,$To),e(wp,kTo),e(wp,Sq),e(Sq,STo),e(wp,RTo),e(x,PTo),e(x,Ap),e(Ap,Jie),e(Jie,BTo),e(Ap,ITo),e(Ap,Rq),e(Rq,NTo),e(Ap,qTo),e(x,jTo),e(x,yp),e(yp,Yie),e(Yie,DTo),e(yp,GTo),e(yp,Pq),e(Pq,OTo),e(yp,VTo),e(x,XTo),e(x,Lp),e(Lp,Kie),e(Kie,zTo),e(Lp,WTo),e(Lp,Bq),e(Bq,QTo),e(Lp,HTo),e(x,UTo),e(x,xp),e(xp,Zie),e(Zie,JTo),e(xp,YTo),e(xp,Iq),e(Iq,KTo),e(xp,ZTo),e(x,eMo),e(x,$p),e($p,ede),e(ede,oMo),e($p,rMo),e($p,Nq),e(Nq,tMo),e($p,aMo),e(x,nMo),e(x,kp),e(kp,ode),e(ode,sMo),e(kp,lMo),e(kp,qq),e(qq,iMo),e(kp,dMo),e(x,cMo),e(x,Sp),e(Sp,rde),e(rde,mMo),e(Sp,fMo),e(Sp,jq),e(jq,gMo),e(Sp,hMo),e(x,uMo),e(x,Rp),e(Rp,tde),e(tde,pMo),e(Rp,_Mo),e(Rp,Dq),e(Dq,bMo),e(Rp,vMo),e(x,FMo),e(x,Pp),e(Pp,ade),e(ade,TMo),e(Pp,MMo),e(Pp,Gq),e(Gq,EMo),e(Pp,CMo),e(x,wMo),e(x,Bp),e(Bp,nde),e(nde,AMo),e(Bp,yMo),e(Bp,Oq),e(Oq,LMo),e(Bp,xMo),e(x,$Mo),e(x,Ip),e(Ip,sde),e(sde,kMo),e(Ip,SMo),e(Ip,Vq),e(Vq,RMo),e(Ip,PMo),e(x,BMo),e(x,Np),e(Np,lde),e(lde,IMo),e(Np,NMo),e(Np,Xq),e(Xq,qMo),e(Np,jMo),e(x,DMo),e(x,qp),e(qp,ide),e(ide,GMo),e(qp,OMo),e(qp,zq),e(zq,VMo),e(qp,XMo),e(x,zMo),e(x,jp),e(jp,dde),e(dde,WMo),e(jp,QMo),e(jp,Wq),e(Wq,HMo),e(jp,UMo),e(x,JMo),e(x,Dp),e(Dp,cde),e(cde,YMo),e(Dp,KMo),e(Dp,Qq),e(Qq,ZMo),e(Dp,e4o),e(x,o4o),e(x,Gp),e(Gp,mde),e(mde,r4o),e(Gp,t4o),e(Gp,Hq),e(Hq,a4o),e(Gp,n4o),e(x,s4o),e(x,Op),e(Op,fde),e(fde,l4o),e(Op,i4o),e(Op,Uq),e(Uq,d4o),e(Op,c4o),e(x,m4o),e(x,Vp),e(Vp,gde),e(gde,f4o),e(Vp,g4o),e(Vp,Jq),e(Jq,h4o),e(Vp,u4o),e(x,p4o),e(x,Xp),e(Xp,hde),e(hde,_4o),e(Xp,b4o),e(Xp,Yq),e(Yq,v4o),e(Xp,F4o),e(x,T4o),e(x,zp),e(zp,ude),e(ude,M4o),e(zp,E4o),e(zp,Kq),e(Kq,C4o),e(zp,w4o),e(x,A4o),e(x,Wp),e(Wp,pde),e(pde,y4o),e(Wp,L4o),e(Wp,Zq),e(Zq,x4o),e(Wp,$4o),e(x,k4o),e(x,Qp),e(Qp,_de),e(_de,S4o),e(Qp,R4o),e(Qp,ej),e(ej,P4o),e(Qp,B4o),e(x,I4o),e(x,Hp),e(Hp,bde),e(bde,N4o),e(Hp,q4o),e(Hp,oj),e(oj,j4o),e(Hp,D4o),e(x,G4o),e(x,Up),e(Up,vde),e(vde,O4o),e(Up,V4o),e(Up,rj),e(rj,X4o),e(Up,z4o),e(x,W4o),e(x,Jp),e(Jp,Fde),e(Fde,Q4o),e(Jp,H4o),e(Jp,tj),e(tj,U4o),e(Jp,J4o),e(x,Y4o),e(x,Yp),e(Yp,Tde),e(Tde,K4o),e(Yp,Z4o),e(Yp,aj),e(aj,eEo),e(Yp,oEo),e(x,rEo),e(x,Kp),e(Kp,Mde),e(Mde,tEo),e(Kp,aEo),e(Kp,nj),e(nj,nEo),e(Kp,sEo),e(x,lEo),e(x,Zp),e(Zp,Ede),e(Ede,iEo),e(Zp,dEo),e(Zp,sj),e(sj,cEo),e(Zp,mEo),e(x,fEo),e(x,e_),e(e_,Cde),e(Cde,gEo),e(e_,hEo),e(e_,lj),e(lj,uEo),e(e_,pEo),e(x,_Eo),e(x,o_),e(o_,wde),e(wde,bEo),e(o_,vEo),e(o_,ij),e(ij,FEo),e(o_,TEo),e(x,MEo),e(x,r_),e(r_,Ade),e(Ade,EEo),e(r_,CEo),e(r_,dj),e(dj,wEo),e(r_,AEo),e(x,yEo),e(x,t_),e(t_,yde),e(yde,LEo),e(t_,xEo),e(t_,cj),e(cj,$Eo),e(t_,kEo),e(x,SEo),e(x,a_),e(a_,Lde),e(Lde,REo),e(a_,PEo),e(a_,mj),e(mj,BEo),e(a_,IEo),e(x,NEo),e(x,n_),e(n_,xde),e(xde,qEo),e(n_,jEo),e(n_,fj),e(fj,DEo),e(n_,GEo),e(x,OEo),e(x,s_),e(s_,$de),e($de,VEo),e(s_,XEo),e(s_,gj),e(gj,zEo),e(s_,WEo),e(x,QEo),e(x,l_),e(l_,kde),e(kde,HEo),e(l_,UEo),e(l_,hj),e(hj,JEo),e(l_,YEo),e(x,KEo),e(x,i_),e(i_,Sde),e(Sde,ZEo),e(i_,eCo),e(i_,uj),e(uj,oCo),e(i_,rCo),e(x,tCo),e(x,d_),e(d_,Rde),e(Rde,aCo),e(d_,nCo),e(d_,pj),e(pj,sCo),e(d_,lCo),e(x,iCo),e(x,c_),e(c_,Pde),e(Pde,dCo),e(c_,cCo),e(c_,_j),e(_j,mCo),e(c_,fCo),e(x,gCo),e(x,m_),e(m_,Bde),e(Bde,hCo),e(m_,uCo),e(m_,bj),e(bj,pCo),e(m_,_Co),e(x,bCo),e(x,f_),e(f_,Ide),e(Ide,vCo),e(f_,FCo),e(f_,vj),e(vj,TCo),e(f_,MCo),e(x,ECo),e(x,g_),e(g_,Nde),e(Nde,CCo),e(g_,wCo),e(g_,Fj),e(Fj,ACo),e(g_,yCo),e(x,LCo),e(x,h_),e(h_,qde),e(qde,xCo),e(h_,$Co),e(h_,Tj),e(Tj,kCo),e(h_,SCo),e(x,RCo),e(x,u_),e(u_,jde),e(jde,PCo),e(u_,BCo),e(u_,Mj),e(Mj,ICo),e(u_,NCo),e(x,qCo),e(x,p_),e(p_,Dde),e(Dde,jCo),e(p_,DCo),e(p_,Ej),e(Ej,GCo),e(p_,OCo),e(x,VCo),e(x,__),e(__,Gde),e(Gde,XCo),e(__,zCo),e(__,Cj),e(Cj,WCo),e(__,QCo),e(x,HCo),e(x,b_),e(b_,Ode),e(Ode,UCo),e(b_,JCo),e(b_,wj),e(wj,YCo),e(b_,KCo),e(x,ZCo),e(x,v_),e(v_,Vde),e(Vde,e5o),e(v_,o5o),e(v_,Aj),e(Aj,r5o),e(v_,t5o),e(x,a5o),e(x,F_),e(F_,Xde),e(Xde,n5o),e(F_,s5o),e(F_,yj),e(yj,l5o),e(F_,i5o),e(x,d5o),e(x,T_),e(T_,zde),e(zde,c5o),e(T_,m5o),e(T_,Lj),e(Lj,f5o),e(T_,g5o),e(Je,h5o),e(Je,M_),e(M_,u5o),e(M_,Wde),e(Wde,p5o),e(M_,_5o),e(M_,Qde),e(Qde,b5o),e(Je,v5o),M(E_,Je,null),b(m,$De,_),b(m,Ii,_),e(Ii,C_),e(C_,Hde),M(GL,Hde,null),e(Ii,F5o),e(Ii,Ude),e(Ude,T5o),b(m,kDe,_),b(m,$o,_),M(OL,$o,null),e($o,M5o),e($o,Ni),e(Ni,E5o),e(Ni,xj),e(xj,C5o),e(Ni,w5o),e(Ni,$j),e($j,A5o),e(Ni,y5o),e($o,L5o),e($o,VL),e(VL,x5o),e(VL,Jde),e(Jde,$5o),e(VL,k5o),e($o,S5o),e($o,st),M(XL,st,null),e(st,R5o),e(st,Yde),e(Yde,P5o),e(st,B5o),e(st,qi),e(qi,I5o),e(qi,Kde),e(Kde,N5o),e(qi,q5o),e(qi,kj),e(kj,j5o),e(qi,D5o),e(st,G5o),M(w_,st,null),e($o,O5o),e($o,Ye),M(zL,Ye,null),e(Ye,V5o),e(Ye,Zde),e(Zde,X5o),e(Ye,z5o),e(Ye,Ra),e(Ra,W5o),e(Ra,ece),e(ece,Q5o),e(Ra,H5o),e(Ra,oce),e(oce,U5o),e(Ra,J5o),e(Ra,rce),e(rce,Y5o),e(Ra,K5o),e(Ye,Z5o),e(Ye,G),e(G,A_),e(A_,tce),e(tce,e3o),e(A_,o3o),e(A_,Sj),e(Sj,r3o),e(A_,t3o),e(G,a3o),e(G,y_),e(y_,ace),e(ace,n3o),e(y_,s3o),e(y_,Rj),e(Rj,l3o),e(y_,i3o),e(G,d3o),e(G,L_),e(L_,nce),e(nce,c3o),e(L_,m3o),e(L_,Pj),e(Pj,f3o),e(L_,g3o),e(G,h3o),e(G,x_),e(x_,sce),e(sce,u3o),e(x_,p3o),e(x_,Bj),e(Bj,_3o),e(x_,b3o),e(G,v3o),e(G,$_),e($_,lce),e(lce,F3o),e($_,T3o),e($_,Ij),e(Ij,M3o),e($_,E3o),e(G,C3o),e(G,k_),e(k_,ice),e(ice,w3o),e(k_,A3o),e(k_,Nj),e(Nj,y3o),e(k_,L3o),e(G,x3o),e(G,S_),e(S_,dce),e(dce,$3o),e(S_,k3o),e(S_,qj),e(qj,S3o),e(S_,R3o),e(G,P3o),e(G,R_),e(R_,cce),e(cce,B3o),e(R_,I3o),e(R_,jj),e(jj,N3o),e(R_,q3o),e(G,j3o),e(G,P_),e(P_,mce),e(mce,D3o),e(P_,G3o),e(P_,Dj),e(Dj,O3o),e(P_,V3o),e(G,X3o),e(G,B_),e(B_,fce),e(fce,z3o),e(B_,W3o),e(B_,Gj),e(Gj,Q3o),e(B_,H3o),e(G,U3o),e(G,I_),e(I_,gce),e(gce,J3o),e(I_,Y3o),e(I_,Oj),e(Oj,K3o),e(I_,Z3o),e(G,ewo),e(G,N_),e(N_,hce),e(hce,owo),e(N_,rwo),e(N_,Vj),e(Vj,two),e(N_,awo),e(G,nwo),e(G,q_),e(q_,uce),e(uce,swo),e(q_,lwo),e(q_,Xj),e(Xj,iwo),e(q_,dwo),e(G,cwo),e(G,j_),e(j_,pce),e(pce,mwo),e(j_,fwo),e(j_,zj),e(zj,gwo),e(j_,hwo),e(G,uwo),e(G,D_),e(D_,_ce),e(_ce,pwo),e(D_,_wo),e(D_,Wj),e(Wj,bwo),e(D_,vwo),e(G,Fwo),e(G,G_),e(G_,bce),e(bce,Two),e(G_,Mwo),e(G_,Qj),e(Qj,Ewo),e(G_,Cwo),e(G,wwo),e(G,O_),e(O_,vce),e(vce,Awo),e(O_,ywo),e(O_,Hj),e(Hj,Lwo),e(O_,xwo),e(G,$wo),e(G,V_),e(V_,Fce),e(Fce,kwo),e(V_,Swo),e(V_,Uj),e(Uj,Rwo),e(V_,Pwo),e(G,Bwo),e(G,X_),e(X_,Tce),e(Tce,Iwo),e(X_,Nwo),e(X_,Jj),e(Jj,qwo),e(X_,jwo),e(G,Dwo),e(G,z_),e(z_,Mce),e(Mce,Gwo),e(z_,Owo),e(z_,Yj),e(Yj,Vwo),e(z_,Xwo),e(G,zwo),e(G,W_),e(W_,Ece),e(Ece,Wwo),e(W_,Qwo),e(W_,Kj),e(Kj,Hwo),e(W_,Uwo),e(G,Jwo),e(G,Q_),e(Q_,Cce),e(Cce,Ywo),e(Q_,Kwo),e(Q_,Zj),e(Zj,Zwo),e(Q_,e0o),e(G,o0o),e(G,H_),e(H_,wce),e(wce,r0o),e(H_,t0o),e(H_,eD),e(eD,a0o),e(H_,n0o),e(G,s0o),e(G,U_),e(U_,Ace),e(Ace,l0o),e(U_,i0o),e(U_,oD),e(oD,d0o),e(U_,c0o),e(G,m0o),e(G,J_),e(J_,yce),e(yce,f0o),e(J_,g0o),e(J_,rD),e(rD,h0o),e(J_,u0o),e(G,p0o),e(G,Y_),e(Y_,Lce),e(Lce,_0o),e(Y_,b0o),e(Y_,tD),e(tD,v0o),e(Y_,F0o),e(G,T0o),e(G,K_),e(K_,xce),e(xce,M0o),e(K_,E0o),e(K_,aD),e(aD,C0o),e(K_,w0o),e(G,A0o),e(G,Z_),e(Z_,$ce),e($ce,y0o),e(Z_,L0o),e(Z_,nD),e(nD,x0o),e(Z_,$0o),e(G,k0o),e(G,eb),e(eb,kce),e(kce,S0o),e(eb,R0o),e(eb,sD),e(sD,P0o),e(eb,B0o),e(G,I0o),e(G,ob),e(ob,Sce),e(Sce,N0o),e(ob,q0o),e(ob,lD),e(lD,j0o),e(ob,D0o),e(G,G0o),e(G,rb),e(rb,Rce),e(Rce,O0o),e(rb,V0o),e(rb,iD),e(iD,X0o),e(rb,z0o),e(G,W0o),e(G,tb),e(tb,Pce),e(Pce,Q0o),e(tb,H0o),e(tb,dD),e(dD,U0o),e(tb,J0o),e(G,Y0o),e(G,ab),e(ab,Bce),e(Bce,K0o),e(ab,Z0o),e(ab,cD),e(cD,eAo),e(ab,oAo),e(G,rAo),e(G,nb),e(nb,Ice),e(Ice,tAo),e(nb,aAo),e(nb,mD),e(mD,nAo),e(nb,sAo),e(G,lAo),e(G,sb),e(sb,Nce),e(Nce,iAo),e(sb,dAo),e(sb,fD),e(fD,cAo),e(sb,mAo),e(G,fAo),e(G,lb),e(lb,qce),e(qce,gAo),e(lb,hAo),e(lb,gD),e(gD,uAo),e(lb,pAo),e(G,_Ao),e(G,ib),e(ib,jce),e(jce,bAo),e(ib,vAo),e(ib,hD),e(hD,FAo),e(ib,TAo),e(G,MAo),e(G,db),e(db,Dce),e(Dce,EAo),e(db,CAo),e(db,uD),e(uD,wAo),e(db,AAo),e(G,yAo),e(G,cb),e(cb,Gce),e(Gce,LAo),e(cb,xAo),e(cb,pD),e(pD,$Ao),e(cb,kAo),e(G,SAo),e(G,mb),e(mb,Oce),e(Oce,RAo),e(mb,PAo),e(mb,_D),e(_D,BAo),e(mb,IAo),e(G,NAo),e(G,fb),e(fb,Vce),e(Vce,qAo),e(fb,jAo),e(fb,bD),e(bD,DAo),e(fb,GAo),e(G,OAo),e(G,gb),e(gb,Xce),e(Xce,VAo),e(gb,XAo),e(gb,vD),e(vD,zAo),e(gb,WAo),e(G,QAo),e(G,hb),e(hb,zce),e(zce,HAo),e(hb,UAo),e(hb,FD),e(FD,JAo),e(hb,YAo),e(Ye,KAo),e(Ye,ub),e(ub,ZAo),e(ub,Wce),e(Wce,e6o),e(ub,o6o),e(ub,Qce),e(Qce,r6o),e(Ye,t6o),M(pb,Ye,null),b(m,SDe,_),b(m,ji,_),e(ji,_b),e(_b,Hce),M(WL,Hce,null),e(ji,a6o),e(ji,Uce),e(Uce,n6o),b(m,RDe,_),b(m,ko,_),M(QL,ko,null),e(ko,s6o),e(ko,Di),e(Di,l6o),e(Di,TD),e(TD,i6o),e(Di,d6o),e(Di,MD),e(MD,c6o),e(Di,m6o),e(ko,f6o),e(ko,HL),e(HL,g6o),e(HL,Jce),e(Jce,h6o),e(HL,u6o),e(ko,p6o),e(ko,lt),M(UL,lt,null),e(lt,_6o),e(lt,Yce),e(Yce,b6o),e(lt,v6o),e(lt,Gi),e(Gi,F6o),e(Gi,Kce),e(Kce,T6o),e(Gi,M6o),e(Gi,ED),e(ED,E6o),e(Gi,C6o),e(lt,w6o),M(bb,lt,null),e(ko,A6o),e(ko,Ke),M(JL,Ke,null),e(Ke,y6o),e(Ke,Zce),e(Zce,L6o),e(Ke,x6o),e(Ke,Pa),e(Pa,$6o),e(Pa,eme),e(eme,k6o),e(Pa,S6o),e(Pa,ome),e(ome,R6o),e(Pa,P6o),e(Pa,rme),e(rme,B6o),e(Pa,I6o),e(Ke,N6o),e(Ke,z),e(z,vb),e(vb,tme),e(tme,q6o),e(vb,j6o),e(vb,CD),e(CD,D6o),e(vb,G6o),e(z,O6o),e(z,Fb),e(Fb,ame),e(ame,V6o),e(Fb,X6o),e(Fb,wD),e(wD,z6o),e(Fb,W6o),e(z,Q6o),e(z,Tb),e(Tb,nme),e(nme,H6o),e(Tb,U6o),e(Tb,AD),e(AD,J6o),e(Tb,Y6o),e(z,K6o),e(z,Mb),e(Mb,sme),e(sme,Z6o),e(Mb,eyo),e(Mb,yD),e(yD,oyo),e(Mb,ryo),e(z,tyo),e(z,Eb),e(Eb,lme),e(lme,ayo),e(Eb,nyo),e(Eb,LD),e(LD,syo),e(Eb,lyo),e(z,iyo),e(z,Cb),e(Cb,ime),e(ime,dyo),e(Cb,cyo),e(Cb,xD),e(xD,myo),e(Cb,fyo),e(z,gyo),e(z,wb),e(wb,dme),e(dme,hyo),e(wb,uyo),e(wb,$D),e($D,pyo),e(wb,_yo),e(z,byo),e(z,Ab),e(Ab,cme),e(cme,vyo),e(Ab,Fyo),e(Ab,kD),e(kD,Tyo),e(Ab,Myo),e(z,Eyo),e(z,yb),e(yb,mme),e(mme,Cyo),e(yb,wyo),e(yb,SD),e(SD,Ayo),e(yb,yyo),e(z,Lyo),e(z,Lb),e(Lb,fme),e(fme,xyo),e(Lb,$yo),e(Lb,RD),e(RD,kyo),e(Lb,Syo),e(z,Ryo),e(z,xb),e(xb,gme),e(gme,Pyo),e(xb,Byo),e(xb,PD),e(PD,Iyo),e(xb,Nyo),e(z,qyo),e(z,$b),e($b,hme),e(hme,jyo),e($b,Dyo),e($b,BD),e(BD,Gyo),e($b,Oyo),e(z,Vyo),e(z,kb),e(kb,ume),e(ume,Xyo),e(kb,zyo),e(kb,ID),e(ID,Wyo),e(kb,Qyo),e(z,Hyo),e(z,Sb),e(Sb,pme),e(pme,Uyo),e(Sb,Jyo),e(Sb,ND),e(ND,Yyo),e(Sb,Kyo),e(z,Zyo),e(z,Rb),e(Rb,_me),e(_me,eLo),e(Rb,oLo),e(Rb,qD),e(qD,rLo),e(Rb,tLo),e(z,aLo),e(z,Pb),e(Pb,bme),e(bme,nLo),e(Pb,sLo),e(Pb,jD),e(jD,lLo),e(Pb,iLo),e(z,dLo),e(z,Bb),e(Bb,vme),e(vme,cLo),e(Bb,mLo),e(Bb,DD),e(DD,fLo),e(Bb,gLo),e(z,hLo),e(z,Ib),e(Ib,Fme),e(Fme,uLo),e(Ib,pLo),e(Ib,GD),e(GD,_Lo),e(Ib,bLo),e(z,vLo),e(z,Nb),e(Nb,Tme),e(Tme,FLo),e(Nb,TLo),e(Nb,OD),e(OD,MLo),e(Nb,ELo),e(z,CLo),e(z,qb),e(qb,Mme),e(Mme,wLo),e(qb,ALo),e(qb,VD),e(VD,yLo),e(qb,LLo),e(z,xLo),e(z,jb),e(jb,Eme),e(Eme,$Lo),e(jb,kLo),e(jb,XD),e(XD,SLo),e(jb,RLo),e(z,PLo),e(z,Db),e(Db,Cme),e(Cme,BLo),e(Db,ILo),e(Db,zD),e(zD,NLo),e(Db,qLo),e(z,jLo),e(z,Gb),e(Gb,wme),e(wme,DLo),e(Gb,GLo),e(Gb,WD),e(WD,OLo),e(Gb,VLo),e(z,XLo),e(z,Ob),e(Ob,Ame),e(Ame,zLo),e(Ob,WLo),e(Ob,QD),e(QD,QLo),e(Ob,HLo),e(z,ULo),e(z,Vb),e(Vb,yme),e(yme,JLo),e(Vb,YLo),e(Vb,HD),e(HD,KLo),e(Vb,ZLo),e(z,e7o),e(z,Xb),e(Xb,Lme),e(Lme,o7o),e(Xb,r7o),e(Xb,UD),e(UD,t7o),e(Xb,a7o),e(z,n7o),e(z,zb),e(zb,xme),e(xme,s7o),e(zb,l7o),e(zb,JD),e(JD,i7o),e(zb,d7o),e(z,c7o),e(z,Wb),e(Wb,$me),e($me,m7o),e(Wb,f7o),e(Wb,YD),e(YD,g7o),e(Wb,h7o),e(z,u7o),e(z,Qb),e(Qb,kme),e(kme,p7o),e(Qb,_7o),e(Qb,KD),e(KD,b7o),e(Qb,v7o),e(z,F7o),e(z,Hb),e(Hb,Sme),e(Sme,T7o),e(Hb,M7o),e(Hb,ZD),e(ZD,E7o),e(Hb,C7o),e(z,w7o),e(z,Ub),e(Ub,Rme),e(Rme,A7o),e(Ub,y7o),e(Ub,eG),e(eG,L7o),e(Ub,x7o),e(z,$7o),e(z,Jb),e(Jb,Pme),e(Pme,k7o),e(Jb,S7o),e(Jb,oG),e(oG,R7o),e(Jb,P7o),e(z,B7o),e(z,Yb),e(Yb,Bme),e(Bme,I7o),e(Yb,N7o),e(Yb,rG),e(rG,q7o),e(Yb,j7o),e(z,D7o),e(z,Kb),e(Kb,Ime),e(Ime,G7o),e(Kb,O7o),e(Kb,tG),e(tG,V7o),e(Kb,X7o),e(z,z7o),e(z,Zb),e(Zb,Nme),e(Nme,W7o),e(Zb,Q7o),e(Zb,aG),e(aG,H7o),e(Zb,U7o),e(z,J7o),e(z,e2),e(e2,qme),e(qme,Y7o),e(e2,K7o),e(e2,nG),e(nG,Z7o),e(e2,e8o),e(z,o8o),e(z,o2),e(o2,jme),e(jme,r8o),e(o2,t8o),e(o2,sG),e(sG,a8o),e(o2,n8o),e(z,s8o),e(z,r2),e(r2,Dme),e(Dme,l8o),e(r2,i8o),e(r2,lG),e(lG,d8o),e(r2,c8o),e(Ke,m8o),e(Ke,t2),e(t2,f8o),e(t2,Gme),e(Gme,g8o),e(t2,h8o),e(t2,Ome),e(Ome,u8o),e(Ke,p8o),M(a2,Ke,null),b(m,PDe,_),b(m,Oi,_),e(Oi,n2),e(n2,Vme),M(YL,Vme,null),e(Oi,_8o),e(Oi,Xme),e(Xme,b8o),b(m,BDe,_),b(m,So,_),M(KL,So,null),e(So,v8o),e(So,Vi),e(Vi,F8o),e(Vi,iG),e(iG,T8o),e(Vi,M8o),e(Vi,dG),e(dG,E8o),e(Vi,C8o),e(So,w8o),e(So,ZL),e(ZL,A8o),e(ZL,zme),e(zme,y8o),e(ZL,L8o),e(So,x8o),e(So,it),M(e7,it,null),e(it,$8o),e(it,Wme),e(Wme,k8o),e(it,S8o),e(it,Xi),e(Xi,R8o),e(Xi,Qme),e(Qme,P8o),e(Xi,B8o),e(Xi,cG),e(cG,I8o),e(Xi,N8o),e(it,q8o),M(s2,it,null),e(So,j8o),e(So,Ze),M(o7,Ze,null),e(Ze,D8o),e(Ze,Hme),e(Hme,G8o),e(Ze,O8o),e(Ze,Ba),e(Ba,V8o),e(Ba,Ume),e(Ume,X8o),e(Ba,z8o),e(Ba,Jme),e(Jme,W8o),e(Ba,Q8o),e(Ba,Yme),e(Yme,H8o),e(Ba,U8o),e(Ze,J8o),e(Ze,Q),e(Q,l2),e(l2,Kme),e(Kme,Y8o),e(l2,K8o),e(l2,mG),e(mG,Z8o),e(l2,e9o),e(Q,o9o),e(Q,i2),e(i2,Zme),e(Zme,r9o),e(i2,t9o),e(i2,fG),e(fG,a9o),e(i2,n9o),e(Q,s9o),e(Q,d2),e(d2,efe),e(efe,l9o),e(d2,i9o),e(d2,gG),e(gG,d9o),e(d2,c9o),e(Q,m9o),e(Q,c2),e(c2,ofe),e(ofe,f9o),e(c2,g9o),e(c2,hG),e(hG,h9o),e(c2,u9o),e(Q,p9o),e(Q,m2),e(m2,rfe),e(rfe,_9o),e(m2,b9o),e(m2,uG),e(uG,v9o),e(m2,F9o),e(Q,T9o),e(Q,f2),e(f2,tfe),e(tfe,M9o),e(f2,E9o),e(f2,pG),e(pG,C9o),e(f2,w9o),e(Q,A9o),e(Q,g2),e(g2,afe),e(afe,y9o),e(g2,L9o),e(g2,_G),e(_G,x9o),e(g2,$9o),e(Q,k9o),e(Q,h2),e(h2,nfe),e(nfe,S9o),e(h2,R9o),e(h2,bG),e(bG,P9o),e(h2,B9o),e(Q,I9o),e(Q,u2),e(u2,sfe),e(sfe,N9o),e(u2,q9o),e(u2,vG),e(vG,j9o),e(u2,D9o),e(Q,G9o),e(Q,p2),e(p2,lfe),e(lfe,O9o),e(p2,V9o),e(p2,FG),e(FG,X9o),e(p2,z9o),e(Q,W9o),e(Q,_2),e(_2,ife),e(ife,Q9o),e(_2,H9o),e(_2,TG),e(TG,U9o),e(_2,J9o),e(Q,Y9o),e(Q,b2),e(b2,dfe),e(dfe,K9o),e(b2,Z9o),e(b2,MG),e(MG,exo),e(b2,oxo),e(Q,rxo),e(Q,v2),e(v2,cfe),e(cfe,txo),e(v2,axo),e(v2,EG),e(EG,nxo),e(v2,sxo),e(Q,lxo),e(Q,F2),e(F2,mfe),e(mfe,ixo),e(F2,dxo),e(F2,CG),e(CG,cxo),e(F2,mxo),e(Q,fxo),e(Q,T2),e(T2,ffe),e(ffe,gxo),e(T2,hxo),e(T2,wG),e(wG,uxo),e(T2,pxo),e(Q,_xo),e(Q,M2),e(M2,gfe),e(gfe,bxo),e(M2,vxo),e(M2,AG),e(AG,Fxo),e(M2,Txo),e(Q,Mxo),e(Q,E2),e(E2,hfe),e(hfe,Exo),e(E2,Cxo),e(E2,yG),e(yG,wxo),e(E2,Axo),e(Q,yxo),e(Q,C2),e(C2,ufe),e(ufe,Lxo),e(C2,xxo),e(C2,LG),e(LG,$xo),e(C2,kxo),e(Q,Sxo),e(Q,w2),e(w2,pfe),e(pfe,Rxo),e(w2,Pxo),e(w2,xG),e(xG,Bxo),e(w2,Ixo),e(Q,Nxo),e(Q,A2),e(A2,_fe),e(_fe,qxo),e(A2,jxo),e(A2,$G),e($G,Dxo),e(A2,Gxo),e(Q,Oxo),e(Q,y2),e(y2,bfe),e(bfe,Vxo),e(y2,Xxo),e(y2,kG),e(kG,zxo),e(y2,Wxo),e(Q,Qxo),e(Q,L2),e(L2,vfe),e(vfe,Hxo),e(L2,Uxo),e(L2,SG),e(SG,Jxo),e(L2,Yxo),e(Q,Kxo),e(Q,x2),e(x2,Ffe),e(Ffe,Zxo),e(x2,e$o),e(x2,RG),e(RG,o$o),e(x2,r$o),e(Q,t$o),e(Q,$2),e($2,Tfe),e(Tfe,a$o),e($2,n$o),e($2,PG),e(PG,s$o),e($2,l$o),e(Q,i$o),e(Q,k2),e(k2,Mfe),e(Mfe,d$o),e(k2,c$o),e(k2,BG),e(BG,m$o),e(k2,f$o),e(Q,g$o),e(Q,S2),e(S2,Efe),e(Efe,h$o),e(S2,u$o),e(S2,IG),e(IG,p$o),e(S2,_$o),e(Q,b$o),e(Q,R2),e(R2,Cfe),e(Cfe,v$o),e(R2,F$o),e(R2,NG),e(NG,T$o),e(R2,M$o),e(Q,E$o),e(Q,P2),e(P2,wfe),e(wfe,C$o),e(P2,w$o),e(P2,qG),e(qG,A$o),e(P2,y$o),e(Q,L$o),e(Q,B2),e(B2,Afe),e(Afe,x$o),e(B2,$$o),e(B2,jG),e(jG,k$o),e(B2,S$o),e(Q,R$o),e(Q,I2),e(I2,yfe),e(yfe,P$o),e(I2,B$o),e(I2,DG),e(DG,I$o),e(I2,N$o),e(Q,q$o),e(Q,N2),e(N2,Lfe),e(Lfe,j$o),e(N2,D$o),e(N2,GG),e(GG,G$o),e(N2,O$o),e(Q,V$o),e(Q,q2),e(q2,xfe),e(xfe,X$o),e(q2,z$o),e(q2,$fe),e($fe,W$o),e(q2,Q$o),e(Q,H$o),e(Q,j2),e(j2,kfe),e(kfe,U$o),e(j2,J$o),e(j2,OG),e(OG,Y$o),e(j2,K$o),e(Q,Z$o),e(Q,D2),e(D2,Sfe),e(Sfe,eko),e(D2,oko),e(D2,VG),e(VG,rko),e(D2,tko),e(Q,ako),e(Q,G2),e(G2,Rfe),e(Rfe,nko),e(G2,sko),e(G2,XG),e(XG,lko),e(G2,iko),e(Q,dko),e(Q,O2),e(O2,Pfe),e(Pfe,cko),e(O2,mko),e(O2,zG),e(zG,fko),e(O2,gko),e(Ze,hko),e(Ze,V2),e(V2,uko),e(V2,Bfe),e(Bfe,pko),e(V2,_ko),e(V2,Ife),e(Ife,bko),e(Ze,vko),M(X2,Ze,null),b(m,IDe,_),b(m,zi,_),e(zi,z2),e(z2,Nfe),M(r7,Nfe,null),e(zi,Fko),e(zi,qfe),e(qfe,Tko),b(m,NDe,_),b(m,Ro,_),M(t7,Ro,null),e(Ro,Mko),e(Ro,Wi),e(Wi,Eko),e(Wi,WG),e(WG,Cko),e(Wi,wko),e(Wi,QG),e(QG,Ako),e(Wi,yko),e(Ro,Lko),e(Ro,a7),e(a7,xko),e(a7,jfe),e(jfe,$ko),e(a7,kko),e(Ro,Sko),e(Ro,dt),M(n7,dt,null),e(dt,Rko),e(dt,Dfe),e(Dfe,Pko),e(dt,Bko),e(dt,Qi),e(Qi,Iko),e(Qi,Gfe),e(Gfe,Nko),e(Qi,qko),e(Qi,HG),e(HG,jko),e(Qi,Dko),e(dt,Gko),M(W2,dt,null),e(Ro,Oko),e(Ro,eo),M(s7,eo,null),e(eo,Vko),e(eo,Ofe),e(Ofe,Xko),e(eo,zko),e(eo,Ia),e(Ia,Wko),e(Ia,Vfe),e(Vfe,Qko),e(Ia,Hko),e(Ia,Xfe),e(Xfe,Uko),e(Ia,Jko),e(Ia,zfe),e(zfe,Yko),e(Ia,Kko),e(eo,Zko),e(eo,pe),e(pe,Q2),e(Q2,Wfe),e(Wfe,eSo),e(Q2,oSo),e(Q2,UG),e(UG,rSo),e(Q2,tSo),e(pe,aSo),e(pe,H2),e(H2,Qfe),e(Qfe,nSo),e(H2,sSo),e(H2,JG),e(JG,lSo),e(H2,iSo),e(pe,dSo),e(pe,U2),e(U2,Hfe),e(Hfe,cSo),e(U2,mSo),e(U2,YG),e(YG,fSo),e(U2,gSo),e(pe,hSo),e(pe,J2),e(J2,Ufe),e(Ufe,uSo),e(J2,pSo),e(J2,KG),e(KG,_So),e(J2,bSo),e(pe,vSo),e(pe,Y2),e(Y2,Jfe),e(Jfe,FSo),e(Y2,TSo),e(Y2,ZG),e(ZG,MSo),e(Y2,ESo),e(pe,CSo),e(pe,K2),e(K2,Yfe),e(Yfe,wSo),e(K2,ASo),e(K2,eO),e(eO,ySo),e(K2,LSo),e(pe,xSo),e(pe,Z2),e(Z2,Kfe),e(Kfe,$So),e(Z2,kSo),e(Z2,oO),e(oO,SSo),e(Z2,RSo),e(pe,PSo),e(pe,ev),e(ev,Zfe),e(Zfe,BSo),e(ev,ISo),e(ev,rO),e(rO,NSo),e(ev,qSo),e(pe,jSo),e(pe,ov),e(ov,ege),e(ege,DSo),e(ov,GSo),e(ov,tO),e(tO,OSo),e(ov,VSo),e(pe,XSo),e(pe,rv),e(rv,oge),e(oge,zSo),e(rv,WSo),e(rv,aO),e(aO,QSo),e(rv,HSo),e(pe,USo),e(pe,tv),e(tv,rge),e(rge,JSo),e(tv,YSo),e(tv,nO),e(nO,KSo),e(tv,ZSo),e(pe,eRo),e(pe,av),e(av,tge),e(tge,oRo),e(av,rRo),e(av,sO),e(sO,tRo),e(av,aRo),e(pe,nRo),e(pe,nv),e(nv,age),e(age,sRo),e(nv,lRo),e(nv,lO),e(lO,iRo),e(nv,dRo),e(pe,cRo),e(pe,sv),e(sv,nge),e(nge,mRo),e(sv,fRo),e(sv,iO),e(iO,gRo),e(sv,hRo),e(pe,uRo),e(pe,lv),e(lv,sge),e(sge,pRo),e(lv,_Ro),e(lv,dO),e(dO,bRo),e(lv,vRo),e(pe,FRo),e(pe,iv),e(iv,lge),e(lge,TRo),e(iv,MRo),e(iv,cO),e(cO,ERo),e(iv,CRo),e(eo,wRo),e(eo,dv),e(dv,ARo),e(dv,ige),e(ige,yRo),e(dv,LRo),e(dv,dge),e(dge,xRo),e(eo,$Ro),M(cv,eo,null),b(m,qDe,_),b(m,Hi,_),e(Hi,mv),e(mv,cge),M(l7,cge,null),e(Hi,kRo),e(Hi,mge),e(mge,SRo),b(m,jDe,_),b(m,Po,_),M(i7,Po,null),e(Po,RRo),e(Po,Ui),e(Ui,PRo),e(Ui,mO),e(mO,BRo),e(Ui,IRo),e(Ui,fO),e(fO,NRo),e(Ui,qRo),e(Po,jRo),e(Po,d7),e(d7,DRo),e(d7,fge),e(fge,GRo),e(d7,ORo),e(Po,VRo),e(Po,ct),M(c7,ct,null),e(ct,XRo),e(ct,gge),e(gge,zRo),e(ct,WRo),e(ct,Ji),e(Ji,QRo),e(Ji,hge),e(hge,HRo),e(Ji,URo),e(Ji,gO),e(gO,JRo),e(Ji,YRo),e(ct,KRo),M(fv,ct,null),e(Po,ZRo),e(Po,oo),M(m7,oo,null),e(oo,ePo),e(oo,uge),e(uge,oPo),e(oo,rPo),e(oo,Na),e(Na,tPo),e(Na,pge),e(pge,aPo),e(Na,nPo),e(Na,_ge),e(_ge,sPo),e(Na,lPo),e(Na,bge),e(bge,iPo),e(Na,dPo),e(oo,cPo),e(oo,N),e(N,gv),e(gv,vge),e(vge,mPo),e(gv,fPo),e(gv,hO),e(hO,gPo),e(gv,hPo),e(N,uPo),e(N,hv),e(hv,Fge),e(Fge,pPo),e(hv,_Po),e(hv,uO),e(uO,bPo),e(hv,vPo),e(N,FPo),e(N,uv),e(uv,Tge),e(Tge,TPo),e(uv,MPo),e(uv,pO),e(pO,EPo),e(uv,CPo),e(N,wPo),e(N,pv),e(pv,Mge),e(Mge,APo),e(pv,yPo),e(pv,_O),e(_O,LPo),e(pv,xPo),e(N,$Po),e(N,_v),e(_v,Ege),e(Ege,kPo),e(_v,SPo),e(_v,bO),e(bO,RPo),e(_v,PPo),e(N,BPo),e(N,bv),e(bv,Cge),e(Cge,IPo),e(bv,NPo),e(bv,vO),e(vO,qPo),e(bv,jPo),e(N,DPo),e(N,vv),e(vv,wge),e(wge,GPo),e(vv,OPo),e(vv,FO),e(FO,VPo),e(vv,XPo),e(N,zPo),e(N,Fv),e(Fv,Age),e(Age,WPo),e(Fv,QPo),e(Fv,TO),e(TO,HPo),e(Fv,UPo),e(N,JPo),e(N,Tv),e(Tv,yge),e(yge,YPo),e(Tv,KPo),e(Tv,MO),e(MO,ZPo),e(Tv,eBo),e(N,oBo),e(N,Mv),e(Mv,Lge),e(Lge,rBo),e(Mv,tBo),e(Mv,EO),e(EO,aBo),e(Mv,nBo),e(N,sBo),e(N,Ev),e(Ev,xge),e(xge,lBo),e(Ev,iBo),e(Ev,CO),e(CO,dBo),e(Ev,cBo),e(N,mBo),e(N,Cv),e(Cv,$ge),e($ge,fBo),e(Cv,gBo),e(Cv,wO),e(wO,hBo),e(Cv,uBo),e(N,pBo),e(N,wv),e(wv,kge),e(kge,_Bo),e(wv,bBo),e(wv,AO),e(AO,vBo),e(wv,FBo),e(N,TBo),e(N,Av),e(Av,Sge),e(Sge,MBo),e(Av,EBo),e(Av,yO),e(yO,CBo),e(Av,wBo),e(N,ABo),e(N,yv),e(yv,Rge),e(Rge,yBo),e(yv,LBo),e(yv,LO),e(LO,xBo),e(yv,$Bo),e(N,kBo),e(N,Lv),e(Lv,Pge),e(Pge,SBo),e(Lv,RBo),e(Lv,xO),e(xO,PBo),e(Lv,BBo),e(N,IBo),e(N,xv),e(xv,Bge),e(Bge,NBo),e(xv,qBo),e(xv,$O),e($O,jBo),e(xv,DBo),e(N,GBo),e(N,$v),e($v,Ige),e(Ige,OBo),e($v,VBo),e($v,kO),e(kO,XBo),e($v,zBo),e(N,WBo),e(N,kv),e(kv,Nge),e(Nge,QBo),e(kv,HBo),e(kv,SO),e(SO,UBo),e(kv,JBo),e(N,YBo),e(N,Sv),e(Sv,qge),e(qge,KBo),e(Sv,ZBo),e(Sv,RO),e(RO,eIo),e(Sv,oIo),e(N,rIo),e(N,Rv),e(Rv,jge),e(jge,tIo),e(Rv,aIo),e(Rv,PO),e(PO,nIo),e(Rv,sIo),e(N,lIo),e(N,Pv),e(Pv,Dge),e(Dge,iIo),e(Pv,dIo),e(Pv,BO),e(BO,cIo),e(Pv,mIo),e(N,fIo),e(N,Bv),e(Bv,Gge),e(Gge,gIo),e(Bv,hIo),e(Bv,IO),e(IO,uIo),e(Bv,pIo),e(N,_Io),e(N,Iv),e(Iv,Oge),e(Oge,bIo),e(Iv,vIo),e(Iv,NO),e(NO,FIo),e(Iv,TIo),e(N,MIo),e(N,Nv),e(Nv,Vge),e(Vge,EIo),e(Nv,CIo),e(Nv,qO),e(qO,wIo),e(Nv,AIo),e(N,yIo),e(N,qv),e(qv,Xge),e(Xge,LIo),e(qv,xIo),e(qv,jO),e(jO,$Io),e(qv,kIo),e(N,SIo),e(N,jv),e(jv,zge),e(zge,RIo),e(jv,PIo),e(jv,DO),e(DO,BIo),e(jv,IIo),e(N,NIo),e(N,Dv),e(Dv,Wge),e(Wge,qIo),e(Dv,jIo),e(Dv,GO),e(GO,DIo),e(Dv,GIo),e(N,OIo),e(N,Gv),e(Gv,Qge),e(Qge,VIo),e(Gv,XIo),e(Gv,OO),e(OO,zIo),e(Gv,WIo),e(N,QIo),e(N,Ov),e(Ov,Hge),e(Hge,HIo),e(Ov,UIo),e(Ov,VO),e(VO,JIo),e(Ov,YIo),e(N,KIo),e(N,Vv),e(Vv,Uge),e(Uge,ZIo),e(Vv,eNo),e(Vv,XO),e(XO,oNo),e(Vv,rNo),e(N,tNo),e(N,Xv),e(Xv,Jge),e(Jge,aNo),e(Xv,nNo),e(Xv,zO),e(zO,sNo),e(Xv,lNo),e(N,iNo),e(N,zv),e(zv,Yge),e(Yge,dNo),e(zv,cNo),e(zv,WO),e(WO,mNo),e(zv,fNo),e(N,gNo),e(N,Wv),e(Wv,Kge),e(Kge,hNo),e(Wv,uNo),e(Wv,QO),e(QO,pNo),e(Wv,_No),e(N,bNo),e(N,Qv),e(Qv,Zge),e(Zge,vNo),e(Qv,FNo),e(Qv,HO),e(HO,TNo),e(Qv,MNo),e(N,ENo),e(N,Hv),e(Hv,ehe),e(ehe,CNo),e(Hv,wNo),e(Hv,UO),e(UO,ANo),e(Hv,yNo),e(N,LNo),e(N,Uv),e(Uv,ohe),e(ohe,xNo),e(Uv,$No),e(Uv,JO),e(JO,kNo),e(Uv,SNo),e(N,RNo),e(N,Jv),e(Jv,rhe),e(rhe,PNo),e(Jv,BNo),e(Jv,YO),e(YO,INo),e(Jv,NNo),e(N,qNo),e(N,Yv),e(Yv,the),e(the,jNo),e(Yv,DNo),e(Yv,KO),e(KO,GNo),e(Yv,ONo),e(N,VNo),e(N,Kv),e(Kv,ahe),e(ahe,XNo),e(Kv,zNo),e(Kv,ZO),e(ZO,WNo),e(Kv,QNo),e(N,HNo),e(N,Zv),e(Zv,nhe),e(nhe,UNo),e(Zv,JNo),e(Zv,eV),e(eV,YNo),e(Zv,KNo),e(N,ZNo),e(N,eF),e(eF,she),e(she,eqo),e(eF,oqo),e(eF,oV),e(oV,rqo),e(eF,tqo),e(N,aqo),e(N,oF),e(oF,lhe),e(lhe,nqo),e(oF,sqo),e(oF,rV),e(rV,lqo),e(oF,iqo),e(N,dqo),e(N,rF),e(rF,ihe),e(ihe,cqo),e(rF,mqo),e(rF,tV),e(tV,fqo),e(rF,gqo),e(N,hqo),e(N,tF),e(tF,dhe),e(dhe,uqo),e(tF,pqo),e(tF,aV),e(aV,_qo),e(tF,bqo),e(N,vqo),e(N,aF),e(aF,che),e(che,Fqo),e(aF,Tqo),e(aF,nV),e(nV,Mqo),e(aF,Eqo),e(N,Cqo),e(N,nF),e(nF,mhe),e(mhe,wqo),e(nF,Aqo),e(nF,sV),e(sV,yqo),e(nF,Lqo),e(oo,xqo),e(oo,sF),e(sF,$qo),e(sF,fhe),e(fhe,kqo),e(sF,Sqo),e(sF,ghe),e(ghe,Rqo),e(oo,Pqo),M(lF,oo,null),b(m,DDe,_),b(m,Yi,_),e(Yi,iF),e(iF,hhe),M(f7,hhe,null),e(Yi,Bqo),e(Yi,uhe),e(uhe,Iqo),b(m,GDe,_),b(m,Bo,_),M(g7,Bo,null),e(Bo,Nqo),e(Bo,Ki),e(Ki,qqo),e(Ki,lV),e(lV,jqo),e(Ki,Dqo),e(Ki,iV),e(iV,Gqo),e(Ki,Oqo),e(Bo,Vqo),e(Bo,h7),e(h7,Xqo),e(h7,phe),e(phe,zqo),e(h7,Wqo),e(Bo,Qqo),e(Bo,mt),M(u7,mt,null),e(mt,Hqo),e(mt,_he),e(_he,Uqo),e(mt,Jqo),e(mt,Zi),e(Zi,Yqo),e(Zi,bhe),e(bhe,Kqo),e(Zi,Zqo),e(Zi,dV),e(dV,ejo),e(Zi,ojo),e(mt,rjo),M(dF,mt,null),e(Bo,tjo),e(Bo,ro),M(p7,ro,null),e(ro,ajo),e(ro,vhe),e(vhe,njo),e(ro,sjo),e(ro,qa),e(qa,ljo),e(qa,Fhe),e(Fhe,ijo),e(qa,djo),e(qa,The),e(The,cjo),e(qa,mjo),e(qa,Mhe),e(Mhe,fjo),e(qa,gjo),e(ro,hjo),e(ro,Z),e(Z,cF),e(cF,Ehe),e(Ehe,ujo),e(cF,pjo),e(cF,cV),e(cV,_jo),e(cF,bjo),e(Z,vjo),e(Z,mF),e(mF,Che),e(Che,Fjo),e(mF,Tjo),e(mF,mV),e(mV,Mjo),e(mF,Ejo),e(Z,Cjo),e(Z,fF),e(fF,whe),e(whe,wjo),e(fF,Ajo),e(fF,fV),e(fV,yjo),e(fF,Ljo),e(Z,xjo),e(Z,gF),e(gF,Ahe),e(Ahe,$jo),e(gF,kjo),e(gF,gV),e(gV,Sjo),e(gF,Rjo),e(Z,Pjo),e(Z,hF),e(hF,yhe),e(yhe,Bjo),e(hF,Ijo),e(hF,hV),e(hV,Njo),e(hF,qjo),e(Z,jjo),e(Z,uF),e(uF,Lhe),e(Lhe,Djo),e(uF,Gjo),e(uF,uV),e(uV,Ojo),e(uF,Vjo),e(Z,Xjo),e(Z,pF),e(pF,xhe),e(xhe,zjo),e(pF,Wjo),e(pF,pV),e(pV,Qjo),e(pF,Hjo),e(Z,Ujo),e(Z,_F),e(_F,$he),e($he,Jjo),e(_F,Yjo),e(_F,_V),e(_V,Kjo),e(_F,Zjo),e(Z,eDo),e(Z,bF),e(bF,khe),e(khe,oDo),e(bF,rDo),e(bF,bV),e(bV,tDo),e(bF,aDo),e(Z,nDo),e(Z,vF),e(vF,She),e(She,sDo),e(vF,lDo),e(vF,vV),e(vV,iDo),e(vF,dDo),e(Z,cDo),e(Z,FF),e(FF,Rhe),e(Rhe,mDo),e(FF,fDo),e(FF,FV),e(FV,gDo),e(FF,hDo),e(Z,uDo),e(Z,TF),e(TF,Phe),e(Phe,pDo),e(TF,_Do),e(TF,TV),e(TV,bDo),e(TF,vDo),e(Z,FDo),e(Z,MF),e(MF,Bhe),e(Bhe,TDo),e(MF,MDo),e(MF,MV),e(MV,EDo),e(MF,CDo),e(Z,wDo),e(Z,EF),e(EF,Ihe),e(Ihe,ADo),e(EF,yDo),e(EF,EV),e(EV,LDo),e(EF,xDo),e(Z,$Do),e(Z,CF),e(CF,Nhe),e(Nhe,kDo),e(CF,SDo),e(CF,CV),e(CV,RDo),e(CF,PDo),e(Z,BDo),e(Z,wF),e(wF,qhe),e(qhe,IDo),e(wF,NDo),e(wF,wV),e(wV,qDo),e(wF,jDo),e(Z,DDo),e(Z,AF),e(AF,jhe),e(jhe,GDo),e(AF,ODo),e(AF,AV),e(AV,VDo),e(AF,XDo),e(Z,zDo),e(Z,yF),e(yF,Dhe),e(Dhe,WDo),e(yF,QDo),e(yF,yV),e(yV,HDo),e(yF,UDo),e(Z,JDo),e(Z,LF),e(LF,Ghe),e(Ghe,YDo),e(LF,KDo),e(LF,LV),e(LV,ZDo),e(LF,eGo),e(Z,oGo),e(Z,xF),e(xF,Ohe),e(Ohe,rGo),e(xF,tGo),e(xF,xV),e(xV,aGo),e(xF,nGo),e(Z,sGo),e(Z,$F),e($F,Vhe),e(Vhe,lGo),e($F,iGo),e($F,$V),e($V,dGo),e($F,cGo),e(Z,mGo),e(Z,kF),e(kF,Xhe),e(Xhe,fGo),e(kF,gGo),e(kF,kV),e(kV,hGo),e(kF,uGo),e(Z,pGo),e(Z,SF),e(SF,zhe),e(zhe,_Go),e(SF,bGo),e(SF,SV),e(SV,vGo),e(SF,FGo),e(Z,TGo),e(Z,RF),e(RF,Whe),e(Whe,MGo),e(RF,EGo),e(RF,RV),e(RV,CGo),e(RF,wGo),e(Z,AGo),e(Z,PF),e(PF,Qhe),e(Qhe,yGo),e(PF,LGo),e(PF,PV),e(PV,xGo),e(PF,$Go),e(Z,kGo),e(Z,BF),e(BF,Hhe),e(Hhe,SGo),e(BF,RGo),e(BF,BV),e(BV,PGo),e(BF,BGo),e(Z,IGo),e(Z,IF),e(IF,Uhe),e(Uhe,NGo),e(IF,qGo),e(IF,IV),e(IV,jGo),e(IF,DGo),e(Z,GGo),e(Z,NF),e(NF,Jhe),e(Jhe,OGo),e(NF,VGo),e(NF,NV),e(NV,XGo),e(NF,zGo),e(Z,WGo),e(Z,qF),e(qF,Yhe),e(Yhe,QGo),e(qF,HGo),e(qF,qV),e(qV,UGo),e(qF,JGo),e(ro,YGo),e(ro,jF),e(jF,KGo),e(jF,Khe),e(Khe,ZGo),e(jF,eOo),e(jF,Zhe),e(Zhe,oOo),e(ro,rOo),M(DF,ro,null),b(m,ODe,_),b(m,ed,_),e(ed,GF),e(GF,eue),M(_7,eue,null),e(ed,tOo),e(ed,oue),e(oue,aOo),b(m,VDe,_),b(m,Io,_),M(b7,Io,null),e(Io,nOo),e(Io,od),e(od,sOo),e(od,jV),e(jV,lOo),e(od,iOo),e(od,DV),e(DV,dOo),e(od,cOo),e(Io,mOo),e(Io,v7),e(v7,fOo),e(v7,rue),e(rue,gOo),e(v7,hOo),e(Io,uOo),e(Io,ft),M(F7,ft,null),e(ft,pOo),e(ft,tue),e(tue,_Oo),e(ft,bOo),e(ft,rd),e(rd,vOo),e(rd,aue),e(aue,FOo),e(rd,TOo),e(rd,GV),e(GV,MOo),e(rd,EOo),e(ft,COo),M(OF,ft,null),e(Io,wOo),e(Io,to),M(T7,to,null),e(to,AOo),e(to,nue),e(nue,yOo),e(to,LOo),e(to,ja),e(ja,xOo),e(ja,sue),e(sue,$Oo),e(ja,kOo),e(ja,lue),e(lue,SOo),e(ja,ROo),e(ja,iue),e(iue,POo),e(ja,BOo),e(to,IOo),e(to,Zr),e(Zr,VF),e(VF,due),e(due,NOo),e(VF,qOo),e(VF,OV),e(OV,jOo),e(VF,DOo),e(Zr,GOo),e(Zr,XF),e(XF,cue),e(cue,OOo),e(XF,VOo),e(XF,VV),e(VV,XOo),e(XF,zOo),e(Zr,WOo),e(Zr,zF),e(zF,mue),e(mue,QOo),e(zF,HOo),e(zF,XV),e(XV,UOo),e(zF,JOo),e(Zr,YOo),e(Zr,WF),e(WF,fue),e(fue,KOo),e(WF,ZOo),e(WF,zV),e(zV,eVo),e(WF,oVo),e(Zr,rVo),e(Zr,QF),e(QF,gue),e(gue,tVo),e(QF,aVo),e(QF,WV),e(WV,nVo),e(QF,sVo),e(to,lVo),e(to,HF),e(HF,iVo),e(HF,hue),e(hue,dVo),e(HF,cVo),e(HF,uue),e(uue,mVo),e(to,fVo),M(UF,to,null),b(m,XDe,_),b(m,td,_),e(td,JF),e(JF,pue),M(M7,pue,null),e(td,gVo),e(td,_ue),e(_ue,hVo),b(m,zDe,_),b(m,No,_),M(E7,No,null),e(No,uVo),e(No,ad),e(ad,pVo),e(ad,QV),e(QV,_Vo),e(ad,bVo),e(ad,HV),e(HV,vVo),e(ad,FVo),e(No,TVo),e(No,C7),e(C7,MVo),e(C7,bue),e(bue,EVo),e(C7,CVo),e(No,wVo),e(No,gt),M(w7,gt,null),e(gt,AVo),e(gt,vue),e(vue,yVo),e(gt,LVo),e(gt,nd),e(nd,xVo),e(nd,Fue),e(Fue,$Vo),e(nd,kVo),e(nd,UV),e(UV,SVo),e(nd,RVo),e(gt,PVo),M(YF,gt,null),e(No,BVo),e(No,ao),M(A7,ao,null),e(ao,IVo),e(ao,Tue),e(Tue,NVo),e(ao,qVo),e(ao,Da),e(Da,jVo),e(Da,Mue),e(Mue,DVo),e(Da,GVo),e(Da,Eue),e(Eue,OVo),e(Da,VVo),e(Da,Cue),e(Cue,XVo),e(Da,zVo),e(ao,WVo),e(ao,U),e(U,KF),e(KF,wue),e(wue,QVo),e(KF,HVo),e(KF,JV),e(JV,UVo),e(KF,JVo),e(U,YVo),e(U,ZF),e(ZF,Aue),e(Aue,KVo),e(ZF,ZVo),e(ZF,YV),e(YV,eXo),e(ZF,oXo),e(U,rXo),e(U,e1),e(e1,yue),e(yue,tXo),e(e1,aXo),e(e1,KV),e(KV,nXo),e(e1,sXo),e(U,lXo),e(U,o1),e(o1,Lue),e(Lue,iXo),e(o1,dXo),e(o1,ZV),e(ZV,cXo),e(o1,mXo),e(U,fXo),e(U,r1),e(r1,xue),e(xue,gXo),e(r1,hXo),e(r1,eX),e(eX,uXo),e(r1,pXo),e(U,_Xo),e(U,t1),e(t1,$ue),e($ue,bXo),e(t1,vXo),e(t1,oX),e(oX,FXo),e(t1,TXo),e(U,MXo),e(U,a1),e(a1,kue),e(kue,EXo),e(a1,CXo),e(a1,rX),e(rX,wXo),e(a1,AXo),e(U,yXo),e(U,n1),e(n1,Sue),e(Sue,LXo),e(n1,xXo),e(n1,tX),e(tX,$Xo),e(n1,kXo),e(U,SXo),e(U,s1),e(s1,Rue),e(Rue,RXo),e(s1,PXo),e(s1,aX),e(aX,BXo),e(s1,IXo),e(U,NXo),e(U,l1),e(l1,Pue),e(Pue,qXo),e(l1,jXo),e(l1,nX),e(nX,DXo),e(l1,GXo),e(U,OXo),e(U,i1),e(i1,Bue),e(Bue,VXo),e(i1,XXo),e(i1,sX),e(sX,zXo),e(i1,WXo),e(U,QXo),e(U,d1),e(d1,Iue),e(Iue,HXo),e(d1,UXo),e(d1,lX),e(lX,JXo),e(d1,YXo),e(U,KXo),e(U,c1),e(c1,Nue),e(Nue,ZXo),e(c1,ezo),e(c1,iX),e(iX,ozo),e(c1,rzo),e(U,tzo),e(U,m1),e(m1,que),e(que,azo),e(m1,nzo),e(m1,dX),e(dX,szo),e(m1,lzo),e(U,izo),e(U,f1),e(f1,jue),e(jue,dzo),e(f1,czo),e(f1,cX),e(cX,mzo),e(f1,fzo),e(U,gzo),e(U,g1),e(g1,Due),e(Due,hzo),e(g1,uzo),e(g1,mX),e(mX,pzo),e(g1,_zo),e(U,bzo),e(U,h1),e(h1,Gue),e(Gue,vzo),e(h1,Fzo),e(h1,fX),e(fX,Tzo),e(h1,Mzo),e(U,Ezo),e(U,u1),e(u1,Oue),e(Oue,Czo),e(u1,wzo),e(u1,gX),e(gX,Azo),e(u1,yzo),e(U,Lzo),e(U,p1),e(p1,Vue),e(Vue,xzo),e(p1,$zo),e(p1,hX),e(hX,kzo),e(p1,Szo),e(U,Rzo),e(U,_1),e(_1,Xue),e(Xue,Pzo),e(_1,Bzo),e(_1,uX),e(uX,Izo),e(_1,Nzo),e(U,qzo),e(U,b1),e(b1,zue),e(zue,jzo),e(b1,Dzo),e(b1,pX),e(pX,Gzo),e(b1,Ozo),e(U,Vzo),e(U,v1),e(v1,Wue),e(Wue,Xzo),e(v1,zzo),e(v1,_X),e(_X,Wzo),e(v1,Qzo),e(U,Hzo),e(U,F1),e(F1,Que),e(Que,Uzo),e(F1,Jzo),e(F1,bX),e(bX,Yzo),e(F1,Kzo),e(U,Zzo),e(U,T1),e(T1,Hue),e(Hue,eWo),e(T1,oWo),e(T1,vX),e(vX,rWo),e(T1,tWo),e(U,aWo),e(U,M1),e(M1,Uue),e(Uue,nWo),e(M1,sWo),e(M1,FX),e(FX,lWo),e(M1,iWo),e(U,dWo),e(U,E1),e(E1,Jue),e(Jue,cWo),e(E1,mWo),e(E1,TX),e(TX,fWo),e(E1,gWo),e(U,hWo),e(U,C1),e(C1,Yue),e(Yue,uWo),e(C1,pWo),e(C1,MX),e(MX,_Wo),e(C1,bWo),e(U,vWo),e(U,w1),e(w1,Kue),e(Kue,FWo),e(w1,TWo),e(w1,EX),e(EX,MWo),e(w1,EWo),e(U,CWo),e(U,A1),e(A1,Zue),e(Zue,wWo),e(A1,AWo),e(A1,CX),e(CX,yWo),e(A1,LWo),e(U,xWo),e(U,y1),e(y1,epe),e(epe,$Wo),e(y1,kWo),e(y1,wX),e(wX,SWo),e(y1,RWo),e(U,PWo),e(U,L1),e(L1,ope),e(ope,BWo),e(L1,IWo),e(L1,AX),e(AX,NWo),e(L1,qWo),e(U,jWo),e(U,x1),e(x1,rpe),e(rpe,DWo),e(x1,GWo),e(x1,yX),e(yX,OWo),e(x1,VWo),e(U,XWo),e(U,$1),e($1,tpe),e(tpe,zWo),e($1,WWo),e($1,LX),e(LX,QWo),e($1,HWo),e(U,UWo),e(U,k1),e(k1,ape),e(ape,JWo),e(k1,YWo),e(k1,xX),e(xX,KWo),e(k1,ZWo),e(ao,eQo),e(ao,S1),e(S1,oQo),e(S1,npe),e(npe,rQo),e(S1,tQo),e(S1,spe),e(spe,aQo),e(ao,nQo),M(R1,ao,null),b(m,WDe,_),b(m,sd,_),e(sd,P1),e(P1,lpe),M(y7,lpe,null),e(sd,sQo),e(sd,ipe),e(ipe,lQo),b(m,QDe,_),b(m,qo,_),M(L7,qo,null),e(qo,iQo),e(qo,ld),e(ld,dQo),e(ld,$X),e($X,cQo),e(ld,mQo),e(ld,kX),e(kX,fQo),e(ld,gQo),e(qo,hQo),e(qo,x7),e(x7,uQo),e(x7,dpe),e(dpe,pQo),e(x7,_Qo),e(qo,bQo),e(qo,ht),M($7,ht,null),e(ht,vQo),e(ht,cpe),e(cpe,FQo),e(ht,TQo),e(ht,id),e(id,MQo),e(id,mpe),e(mpe,EQo),e(id,CQo),e(id,SX),e(SX,wQo),e(id,AQo),e(ht,yQo),M(B1,ht,null),e(qo,LQo),e(qo,no),M(k7,no,null),e(no,xQo),e(no,fpe),e(fpe,$Qo),e(no,kQo),e(no,Ga),e(Ga,SQo),e(Ga,gpe),e(gpe,RQo),e(Ga,PQo),e(Ga,hpe),e(hpe,BQo),e(Ga,IQo),e(Ga,upe),e(upe,NQo),e(Ga,qQo),e(no,jQo),e(no,V),e(V,I1),e(I1,ppe),e(ppe,DQo),e(I1,GQo),e(I1,RX),e(RX,OQo),e(I1,VQo),e(V,XQo),e(V,N1),e(N1,_pe),e(_pe,zQo),e(N1,WQo),e(N1,PX),e(PX,QQo),e(N1,HQo),e(V,UQo),e(V,q1),e(q1,bpe),e(bpe,JQo),e(q1,YQo),e(q1,BX),e(BX,KQo),e(q1,ZQo),e(V,eHo),e(V,j1),e(j1,vpe),e(vpe,oHo),e(j1,rHo),e(j1,IX),e(IX,tHo),e(j1,aHo),e(V,nHo),e(V,D1),e(D1,Fpe),e(Fpe,sHo),e(D1,lHo),e(D1,NX),e(NX,iHo),e(D1,dHo),e(V,cHo),e(V,G1),e(G1,Tpe),e(Tpe,mHo),e(G1,fHo),e(G1,qX),e(qX,gHo),e(G1,hHo),e(V,uHo),e(V,O1),e(O1,Mpe),e(Mpe,pHo),e(O1,_Ho),e(O1,jX),e(jX,bHo),e(O1,vHo),e(V,FHo),e(V,V1),e(V1,Epe),e(Epe,THo),e(V1,MHo),e(V1,DX),e(DX,EHo),e(V1,CHo),e(V,wHo),e(V,X1),e(X1,Cpe),e(Cpe,AHo),e(X1,yHo),e(X1,GX),e(GX,LHo),e(X1,xHo),e(V,$Ho),e(V,z1),e(z1,wpe),e(wpe,kHo),e(z1,SHo),e(z1,OX),e(OX,RHo),e(z1,PHo),e(V,BHo),e(V,W1),e(W1,Ape),e(Ape,IHo),e(W1,NHo),e(W1,VX),e(VX,qHo),e(W1,jHo),e(V,DHo),e(V,Q1),e(Q1,ype),e(ype,GHo),e(Q1,OHo),e(Q1,XX),e(XX,VHo),e(Q1,XHo),e(V,zHo),e(V,H1),e(H1,Lpe),e(Lpe,WHo),e(H1,QHo),e(H1,zX),e(zX,HHo),e(H1,UHo),e(V,JHo),e(V,U1),e(U1,xpe),e(xpe,YHo),e(U1,KHo),e(U1,WX),e(WX,ZHo),e(U1,eUo),e(V,oUo),e(V,J1),e(J1,$pe),e($pe,rUo),e(J1,tUo),e(J1,QX),e(QX,aUo),e(J1,nUo),e(V,sUo),e(V,Y1),e(Y1,kpe),e(kpe,lUo),e(Y1,iUo),e(Y1,HX),e(HX,dUo),e(Y1,cUo),e(V,mUo),e(V,K1),e(K1,Spe),e(Spe,fUo),e(K1,gUo),e(K1,UX),e(UX,hUo),e(K1,uUo),e(V,pUo),e(V,Z1),e(Z1,Rpe),e(Rpe,_Uo),e(Z1,bUo),e(Z1,JX),e(JX,vUo),e(Z1,FUo),e(V,TUo),e(V,eT),e(eT,Ppe),e(Ppe,MUo),e(eT,EUo),e(eT,YX),e(YX,CUo),e(eT,wUo),e(V,AUo),e(V,oT),e(oT,Bpe),e(Bpe,yUo),e(oT,LUo),e(oT,KX),e(KX,xUo),e(oT,$Uo),e(V,kUo),e(V,rT),e(rT,Ipe),e(Ipe,SUo),e(rT,RUo),e(rT,ZX),e(ZX,PUo),e(rT,BUo),e(V,IUo),e(V,tT),e(tT,Npe),e(Npe,NUo),e(tT,qUo),e(tT,ez),e(ez,jUo),e(tT,DUo),e(V,GUo),e(V,aT),e(aT,qpe),e(qpe,OUo),e(aT,VUo),e(aT,oz),e(oz,XUo),e(aT,zUo),e(V,WUo),e(V,nT),e(nT,jpe),e(jpe,QUo),e(nT,HUo),e(nT,rz),e(rz,UUo),e(nT,JUo),e(V,YUo),e(V,sT),e(sT,Dpe),e(Dpe,KUo),e(sT,ZUo),e(sT,tz),e(tz,eJo),e(sT,oJo),e(V,rJo),e(V,lT),e(lT,Gpe),e(Gpe,tJo),e(lT,aJo),e(lT,az),e(az,nJo),e(lT,sJo),e(V,lJo),e(V,iT),e(iT,Ope),e(Ope,iJo),e(iT,dJo),e(iT,nz),e(nz,cJo),e(iT,mJo),e(V,fJo),e(V,dT),e(dT,Vpe),e(Vpe,gJo),e(dT,hJo),e(dT,sz),e(sz,uJo),e(dT,pJo),e(V,_Jo),e(V,cT),e(cT,Xpe),e(Xpe,bJo),e(cT,vJo),e(cT,lz),e(lz,FJo),e(cT,TJo),e(V,MJo),e(V,mT),e(mT,zpe),e(zpe,EJo),e(mT,CJo),e(mT,iz),e(iz,wJo),e(mT,AJo),e(V,yJo),e(V,fT),e(fT,Wpe),e(Wpe,LJo),e(fT,xJo),e(fT,dz),e(dz,$Jo),e(fT,kJo),e(V,SJo),e(V,gT),e(gT,Qpe),e(Qpe,RJo),e(gT,PJo),e(gT,cz),e(cz,BJo),e(gT,IJo),e(V,NJo),e(V,hT),e(hT,Hpe),e(Hpe,qJo),e(hT,jJo),e(hT,mz),e(mz,DJo),e(hT,GJo),e(V,OJo),e(V,uT),e(uT,Upe),e(Upe,VJo),e(uT,XJo),e(uT,fz),e(fz,zJo),e(uT,WJo),e(V,QJo),e(V,pT),e(pT,Jpe),e(Jpe,HJo),e(pT,UJo),e(pT,gz),e(gz,JJo),e(pT,YJo),e(V,KJo),e(V,_T),e(_T,Ype),e(Ype,ZJo),e(_T,eYo),e(_T,hz),e(hz,oYo),e(_T,rYo),e(V,tYo),e(V,bT),e(bT,Kpe),e(Kpe,aYo),e(bT,nYo),e(bT,uz),e(uz,sYo),e(bT,lYo),e(V,iYo),e(V,vT),e(vT,Zpe),e(Zpe,dYo),e(vT,cYo),e(vT,pz),e(pz,mYo),e(vT,fYo),e(V,gYo),e(V,FT),e(FT,e_e),e(e_e,hYo),e(FT,uYo),e(FT,_z),e(_z,pYo),e(FT,_Yo),e(V,bYo),e(V,TT),e(TT,o_e),e(o_e,vYo),e(TT,FYo),e(TT,bz),e(bz,TYo),e(TT,MYo),e(no,EYo),e(no,MT),e(MT,CYo),e(MT,r_e),e(r_e,wYo),e(MT,AYo),e(MT,t_e),e(t_e,yYo),e(no,LYo),M(ET,no,null),b(m,HDe,_),b(m,dd,_),e(dd,CT),e(CT,a_e),M(S7,a_e,null),e(dd,xYo),e(dd,n_e),e(n_e,$Yo),b(m,UDe,_),b(m,jo,_),M(R7,jo,null),e(jo,kYo),e(jo,cd),e(cd,SYo),e(cd,vz),e(vz,RYo),e(cd,PYo),e(cd,Fz),e(Fz,BYo),e(cd,IYo),e(jo,NYo),e(jo,P7),e(P7,qYo),e(P7,s_e),e(s_e,jYo),e(P7,DYo),e(jo,GYo),e(jo,ut),M(B7,ut,null),e(ut,OYo),e(ut,l_e),e(l_e,VYo),e(ut,XYo),e(ut,md),e(md,zYo),e(md,i_e),e(i_e,WYo),e(md,QYo),e(md,Tz),e(Tz,HYo),e(md,UYo),e(ut,JYo),M(wT,ut,null),e(jo,YYo),e(jo,so),M(I7,so,null),e(so,KYo),e(so,d_e),e(d_e,ZYo),e(so,eKo),e(so,Oa),e(Oa,oKo),e(Oa,c_e),e(c_e,rKo),e(Oa,tKo),e(Oa,m_e),e(m_e,aKo),e(Oa,nKo),e(Oa,f_e),e(f_e,sKo),e(Oa,lKo),e(so,iKo),e(so,g_e),e(g_e,AT),e(AT,h_e),e(h_e,dKo),e(AT,cKo),e(AT,Mz),e(Mz,mKo),e(AT,fKo),e(so,gKo),e(so,yT),e(yT,hKo),e(yT,u_e),e(u_e,uKo),e(yT,pKo),e(yT,p_e),e(p_e,_Ko),e(so,bKo),M(LT,so,null),b(m,JDe,_),b(m,fd,_),e(fd,xT),e(xT,__e),M(N7,__e,null),e(fd,vKo),e(fd,b_e),e(b_e,FKo),b(m,YDe,_),b(m,Do,_),M(q7,Do,null),e(Do,TKo),e(Do,gd),e(gd,MKo),e(gd,Ez),e(Ez,EKo),e(gd,CKo),e(gd,Cz),e(Cz,wKo),e(gd,AKo),e(Do,yKo),e(Do,j7),e(j7,LKo),e(j7,v_e),e(v_e,xKo),e(j7,$Ko),e(Do,kKo),e(Do,pt),M(D7,pt,null),e(pt,SKo),e(pt,F_e),e(F_e,RKo),e(pt,PKo),e(pt,hd),e(hd,BKo),e(hd,T_e),e(T_e,IKo),e(hd,NKo),e(hd,wz),e(wz,qKo),e(hd,jKo),e(pt,DKo),M($T,pt,null),e(Do,GKo),e(Do,lo),M(G7,lo,null),e(lo,OKo),e(lo,M_e),e(M_e,VKo),e(lo,XKo),e(lo,Va),e(Va,zKo),e(Va,E_e),e(E_e,WKo),e(Va,QKo),e(Va,C_e),e(C_e,HKo),e(Va,UKo),e(Va,w_e),e(w_e,JKo),e(Va,YKo),e(lo,KKo),e(lo,ve),e(ve,kT),e(kT,A_e),e(A_e,ZKo),e(kT,eZo),e(kT,Az),e(Az,oZo),e(kT,rZo),e(ve,tZo),e(ve,ST),e(ST,y_e),e(y_e,aZo),e(ST,nZo),e(ST,yz),e(yz,sZo),e(ST,lZo),e(ve,iZo),e(ve,RT),e(RT,L_e),e(L_e,dZo),e(RT,cZo),e(RT,Lz),e(Lz,mZo),e(RT,fZo),e(ve,gZo),e(ve,PT),e(PT,x_e),e(x_e,hZo),e(PT,uZo),e(PT,xz),e(xz,pZo),e(PT,_Zo),e(ve,bZo),e(ve,Gs),e(Gs,$_e),e($_e,vZo),e(Gs,FZo),e(Gs,$z),e($z,TZo),e(Gs,MZo),e(Gs,kz),e(kz,EZo),e(Gs,CZo),e(ve,wZo),e(ve,BT),e(BT,k_e),e(k_e,AZo),e(BT,yZo),e(BT,Sz),e(Sz,LZo),e(BT,xZo),e(ve,$Zo),e(ve,Os),e(Os,S_e),e(S_e,kZo),e(Os,SZo),e(Os,Rz),e(Rz,RZo),e(Os,PZo),e(Os,Pz),e(Pz,BZo),e(Os,IZo),e(ve,NZo),e(ve,_t),e(_t,R_e),e(R_e,qZo),e(_t,jZo),e(_t,Bz),e(Bz,DZo),e(_t,GZo),e(_t,Iz),e(Iz,OZo),e(_t,VZo),e(_t,Nz),e(Nz,XZo),e(_t,zZo),e(ve,WZo),e(ve,IT),e(IT,P_e),e(P_e,QZo),e(IT,HZo),e(IT,qz),e(qz,UZo),e(IT,JZo),e(ve,YZo),e(ve,NT),e(NT,B_e),e(B_e,KZo),e(NT,ZZo),e(NT,jz),e(jz,eer),e(NT,oer),e(ve,rer),e(ve,qT),e(qT,I_e),e(I_e,ter),e(qT,aer),e(qT,Dz),e(Dz,ner),e(qT,ser),e(ve,ler),e(ve,jT),e(jT,N_e),e(N_e,ier),e(jT,der),e(jT,Gz),e(Gz,cer),e(jT,mer),e(ve,fer),e(ve,DT),e(DT,q_e),e(q_e,ger),e(DT,her),e(DT,Oz),e(Oz,uer),e(DT,per),e(ve,_er),e(ve,GT),e(GT,j_e),e(j_e,ber),e(GT,ver),e(GT,Vz),e(Vz,Fer),e(GT,Ter),e(ve,Mer),e(ve,OT),e(OT,D_e),e(D_e,Eer),e(OT,Cer),e(OT,Xz),e(Xz,wer),e(OT,Aer),e(lo,yer),e(lo,VT),e(VT,Ler),e(VT,G_e),e(G_e,xer),e(VT,$er),e(VT,O_e),e(O_e,ker),e(lo,Ser),M(XT,lo,null),b(m,KDe,_),b(m,ud,_),e(ud,zT),e(zT,V_e),M(O7,V_e,null),e(ud,Rer),e(ud,X_e),e(X_e,Per),b(m,ZDe,_),b(m,Go,_),M(V7,Go,null),e(Go,Ber),e(Go,pd),e(pd,Ier),e(pd,zz),e(zz,Ner),e(pd,qer),e(pd,Wz),e(Wz,jer),e(pd,Der),e(Go,Ger),e(Go,X7),e(X7,Oer),e(X7,z_e),e(z_e,Ver),e(X7,Xer),e(Go,zer),e(Go,bt),M(z7,bt,null),e(bt,Wer),e(bt,W_e),e(W_e,Qer),e(bt,Her),e(bt,_d),e(_d,Uer),e(_d,Q_e),e(Q_e,Jer),e(_d,Yer),e(_d,Qz),e(Qz,Ker),e(_d,Zer),e(bt,eor),M(WT,bt,null),e(Go,oor),e(Go,io),M(W7,io,null),e(io,ror),e(io,H_e),e(H_e,tor),e(io,aor),e(io,Xa),e(Xa,nor),e(Xa,U_e),e(U_e,sor),e(Xa,lor),e(Xa,J_e),e(J_e,ior),e(Xa,dor),e(Xa,Y_e),e(Y_e,cor),e(Xa,mor),e(io,gor),e(io,K_e),e(K_e,QT),e(QT,Z_e),e(Z_e,hor),e(QT,uor),e(QT,Hz),e(Hz,por),e(QT,_or),e(io,bor),e(io,HT),e(HT,vor),e(HT,ebe),e(ebe,For),e(HT,Tor),e(HT,obe),e(obe,Mor),e(io,Eor),M(UT,io,null),b(m,eGe,_),b(m,bd,_),e(bd,JT),e(JT,rbe),M(Q7,rbe,null),e(bd,Cor),e(bd,tbe),e(tbe,wor),b(m,oGe,_),b(m,Oo,_),M(H7,Oo,null),e(Oo,Aor),e(Oo,vd),e(vd,yor),e(vd,Uz),e(Uz,Lor),e(vd,xor),e(vd,Jz),e(Jz,$or),e(vd,kor),e(Oo,Sor),e(Oo,U7),e(U7,Ror),e(U7,abe),e(abe,Por),e(U7,Bor),e(Oo,Ior),e(Oo,vt),M(J7,vt,null),e(vt,Nor),e(vt,nbe),e(nbe,qor),e(vt,jor),e(vt,Fd),e(Fd,Dor),e(Fd,sbe),e(sbe,Gor),e(Fd,Oor),e(Fd,Yz),e(Yz,Vor),e(Fd,Xor),e(vt,zor),M(YT,vt,null),e(Oo,Wor),e(Oo,co),M(Y7,co,null),e(co,Qor),e(co,lbe),e(lbe,Hor),e(co,Uor),e(co,za),e(za,Jor),e(za,ibe),e(ibe,Yor),e(za,Kor),e(za,dbe),e(dbe,Zor),e(za,err),e(za,cbe),e(cbe,orr),e(za,rrr),e(co,trr),e(co,mbe),e(mbe,KT),e(KT,fbe),e(fbe,arr),e(KT,nrr),e(KT,Kz),e(Kz,srr),e(KT,lrr),e(co,irr),e(co,ZT),e(ZT,drr),e(ZT,gbe),e(gbe,crr),e(ZT,mrr),e(ZT,hbe),e(hbe,frr),e(co,grr),M(eM,co,null),b(m,rGe,_),b(m,Td,_),e(Td,oM),e(oM,ube),M(K7,ube,null),e(Td,hrr),e(Td,pbe),e(pbe,urr),b(m,tGe,_),b(m,Vo,_),M(Z7,Vo,null),e(Vo,prr),e(Vo,Md),e(Md,_rr),e(Md,Zz),e(Zz,brr),e(Md,vrr),e(Md,eW),e(eW,Frr),e(Md,Trr),e(Vo,Mrr),e(Vo,e8),e(e8,Err),e(e8,_be),e(_be,Crr),e(e8,wrr),e(Vo,Arr),e(Vo,Ft),M(o8,Ft,null),e(Ft,yrr),e(Ft,bbe),e(bbe,Lrr),e(Ft,xrr),e(Ft,Ed),e(Ed,$rr),e(Ed,vbe),e(vbe,krr),e(Ed,Srr),e(Ed,oW),e(oW,Rrr),e(Ed,Prr),e(Ft,Brr),M(rM,Ft,null),e(Vo,Irr),e(Vo,mo),M(r8,mo,null),e(mo,Nrr),e(mo,Fbe),e(Fbe,qrr),e(mo,jrr),e(mo,Wa),e(Wa,Drr),e(Wa,Tbe),e(Tbe,Grr),e(Wa,Orr),e(Wa,Mbe),e(Mbe,Vrr),e(Wa,Xrr),e(Wa,Ebe),e(Ebe,zrr),e(Wa,Wrr),e(mo,Qrr),e(mo,Re),e(Re,tM),e(tM,Cbe),e(Cbe,Hrr),e(tM,Urr),e(tM,rW),e(rW,Jrr),e(tM,Yrr),e(Re,Krr),e(Re,aM),e(aM,wbe),e(wbe,Zrr),e(aM,etr),e(aM,tW),e(tW,otr),e(aM,rtr),e(Re,ttr),e(Re,nM),e(nM,Abe),e(Abe,atr),e(nM,ntr),e(nM,aW),e(aW,str),e(nM,ltr),e(Re,itr),e(Re,sM),e(sM,ybe),e(ybe,dtr),e(sM,ctr),e(sM,nW),e(nW,mtr),e(sM,ftr),e(Re,gtr),e(Re,lM),e(lM,Lbe),e(Lbe,htr),e(lM,utr),e(lM,sW),e(sW,ptr),e(lM,_tr),e(Re,btr),e(Re,iM),e(iM,xbe),e(xbe,vtr),e(iM,Ftr),e(iM,lW),e(lW,Ttr),e(iM,Mtr),e(Re,Etr),e(Re,dM),e(dM,$be),e($be,Ctr),e(dM,wtr),e(dM,iW),e(iW,Atr),e(dM,ytr),e(Re,Ltr),e(Re,cM),e(cM,kbe),e(kbe,xtr),e(cM,$tr),e(cM,dW),e(dW,ktr),e(cM,Str),e(Re,Rtr),e(Re,mM),e(mM,Sbe),e(Sbe,Ptr),e(mM,Btr),e(mM,cW),e(cW,Itr),e(mM,Ntr),e(mo,qtr),e(mo,fM),e(fM,jtr),e(fM,Rbe),e(Rbe,Dtr),e(fM,Gtr),e(fM,Pbe),e(Pbe,Otr),e(mo,Vtr),M(gM,mo,null),b(m,aGe,_),b(m,Cd,_),e(Cd,hM),e(hM,Bbe),M(t8,Bbe,null),e(Cd,Xtr),e(Cd,Ibe),e(Ibe,ztr),b(m,nGe,_),b(m,Xo,_),M(a8,Xo,null),e(Xo,Wtr),e(Xo,wd),e(wd,Qtr),e(wd,mW),e(mW,Htr),e(wd,Utr),e(wd,fW),e(fW,Jtr),e(wd,Ytr),e(Xo,Ktr),e(Xo,n8),e(n8,Ztr),e(n8,Nbe),e(Nbe,ear),e(n8,oar),e(Xo,rar),e(Xo,Tt),M(s8,Tt,null),e(Tt,tar),e(Tt,qbe),e(qbe,aar),e(Tt,nar),e(Tt,Ad),e(Ad,sar),e(Ad,jbe),e(jbe,lar),e(Ad,iar),e(Ad,gW),e(gW,dar),e(Ad,car),e(Tt,mar),M(uM,Tt,null),e(Xo,far),e(Xo,fo),M(l8,fo,null),e(fo,gar),e(fo,Dbe),e(Dbe,har),e(fo,uar),e(fo,Qa),e(Qa,par),e(Qa,Gbe),e(Gbe,_ar),e(Qa,bar),e(Qa,Obe),e(Obe,Far),e(Qa,Tar),e(Qa,Vbe),e(Vbe,Mar),e(Qa,Ear),e(fo,Car),e(fo,et),e(et,pM),e(pM,Xbe),e(Xbe,war),e(pM,Aar),e(pM,hW),e(hW,yar),e(pM,Lar),e(et,xar),e(et,_M),e(_M,zbe),e(zbe,$ar),e(_M,kar),e(_M,uW),e(uW,Sar),e(_M,Rar),e(et,Par),e(et,bM),e(bM,Wbe),e(Wbe,Bar),e(bM,Iar),e(bM,pW),e(pW,Nar),e(bM,qar),e(et,jar),e(et,vM),e(vM,Qbe),e(Qbe,Dar),e(vM,Gar),e(vM,_W),e(_W,Oar),e(vM,Var),e(et,Xar),e(et,FM),e(FM,Hbe),e(Hbe,zar),e(FM,War),e(FM,bW),e(bW,Qar),e(FM,Har),e(fo,Uar),e(fo,TM),e(TM,Jar),e(TM,Ube),e(Ube,Yar),e(TM,Kar),e(TM,Jbe),e(Jbe,Zar),e(fo,enr),M(MM,fo,null),b(m,sGe,_),b(m,yd,_),e(yd,EM),e(EM,Ybe),M(i8,Ybe,null),e(yd,onr),e(yd,Kbe),e(Kbe,rnr),b(m,lGe,_),b(m,zo,_),M(d8,zo,null),e(zo,tnr),e(zo,Ld),e(Ld,anr),e(Ld,vW),e(vW,nnr),e(Ld,snr),e(Ld,FW),e(FW,lnr),e(Ld,inr),e(zo,dnr),e(zo,c8),e(c8,cnr),e(c8,Zbe),e(Zbe,mnr),e(c8,fnr),e(zo,gnr),e(zo,Mt),M(m8,Mt,null),e(Mt,hnr),e(Mt,e2e),e(e2e,unr),e(Mt,pnr),e(Mt,xd),e(xd,_nr),e(xd,o2e),e(o2e,bnr),e(xd,vnr),e(xd,TW),e(TW,Fnr),e(xd,Tnr),e(Mt,Mnr),M(CM,Mt,null),e(zo,Enr),e(zo,go),M(f8,go,null),e(go,Cnr),e(go,r2e),e(r2e,wnr),e(go,Anr),e(go,Ha),e(Ha,ynr),e(Ha,t2e),e(t2e,Lnr),e(Ha,xnr),e(Ha,a2e),e(a2e,$nr),e(Ha,knr),e(Ha,n2e),e(n2e,Snr),e(Ha,Rnr),e(go,Pnr),e(go,ye),e(ye,wM),e(wM,s2e),e(s2e,Bnr),e(wM,Inr),e(wM,MW),e(MW,Nnr),e(wM,qnr),e(ye,jnr),e(ye,AM),e(AM,l2e),e(l2e,Dnr),e(AM,Gnr),e(AM,EW),e(EW,Onr),e(AM,Vnr),e(ye,Xnr),e(ye,yM),e(yM,i2e),e(i2e,znr),e(yM,Wnr),e(yM,CW),e(CW,Qnr),e(yM,Hnr),e(ye,Unr),e(ye,LM),e(LM,d2e),e(d2e,Jnr),e(LM,Ynr),e(LM,wW),e(wW,Knr),e(LM,Znr),e(ye,esr),e(ye,xM),e(xM,c2e),e(c2e,osr),e(xM,rsr),e(xM,AW),e(AW,tsr),e(xM,asr),e(ye,nsr),e(ye,$M),e($M,m2e),e(m2e,ssr),e($M,lsr),e($M,yW),e(yW,isr),e($M,dsr),e(ye,csr),e(ye,kM),e(kM,f2e),e(f2e,msr),e(kM,fsr),e(kM,LW),e(LW,gsr),e(kM,hsr),e(ye,usr),e(ye,SM),e(SM,g2e),e(g2e,psr),e(SM,_sr),e(SM,xW),e(xW,bsr),e(SM,vsr),e(ye,Fsr),e(ye,RM),e(RM,h2e),e(h2e,Tsr),e(RM,Msr),e(RM,$W),e($W,Esr),e(RM,Csr),e(ye,wsr),e(ye,PM),e(PM,u2e),e(u2e,Asr),e(PM,ysr),e(PM,kW),e(kW,Lsr),e(PM,xsr),e(go,$sr),e(go,BM),e(BM,ksr),e(BM,p2e),e(p2e,Ssr),e(BM,Rsr),e(BM,_2e),e(_2e,Psr),e(go,Bsr),M(IM,go,null),b(m,iGe,_),b(m,$d,_),e($d,NM),e(NM,b2e),M(g8,b2e,null),e($d,Isr),e($d,v2e),e(v2e,Nsr),b(m,dGe,_),b(m,Wo,_),M(h8,Wo,null),e(Wo,qsr),e(Wo,kd),e(kd,jsr),e(kd,SW),e(SW,Dsr),e(kd,Gsr),e(kd,RW),e(RW,Osr),e(kd,Vsr),e(Wo,Xsr),e(Wo,u8),e(u8,zsr),e(u8,F2e),e(F2e,Wsr),e(u8,Qsr),e(Wo,Hsr),e(Wo,Et),M(p8,Et,null),e(Et,Usr),e(Et,T2e),e(T2e,Jsr),e(Et,Ysr),e(Et,Sd),e(Sd,Ksr),e(Sd,M2e),e(M2e,Zsr),e(Sd,elr),e(Sd,PW),e(PW,olr),e(Sd,rlr),e(Et,tlr),M(qM,Et,null),e(Wo,alr),e(Wo,ho),M(_8,ho,null),e(ho,nlr),e(ho,E2e),e(E2e,slr),e(ho,llr),e(ho,Ua),e(Ua,ilr),e(Ua,C2e),e(C2e,dlr),e(Ua,clr),e(Ua,w2e),e(w2e,mlr),e(Ua,flr),e(Ua,A2e),e(A2e,glr),e(Ua,hlr),e(ho,ulr),e(ho,b8),e(b8,jM),e(jM,y2e),e(y2e,plr),e(jM,_lr),e(jM,BW),e(BW,blr),e(jM,vlr),e(b8,Flr),e(b8,DM),e(DM,L2e),e(L2e,Tlr),e(DM,Mlr),e(DM,IW),e(IW,Elr),e(DM,Clr),e(ho,wlr),e(ho,GM),e(GM,Alr),e(GM,x2e),e(x2e,ylr),e(GM,Llr),e(GM,$2e),e($2e,xlr),e(ho,$lr),M(OM,ho,null),b(m,cGe,_),b(m,Rd,_),e(Rd,VM),e(VM,k2e),M(v8,k2e,null),e(Rd,klr),e(Rd,S2e),e(S2e,Slr),b(m,mGe,_),b(m,Qo,_),M(F8,Qo,null),e(Qo,Rlr),e(Qo,Pd),e(Pd,Plr),e(Pd,NW),e(NW,Blr),e(Pd,Ilr),e(Pd,qW),e(qW,Nlr),e(Pd,qlr),e(Qo,jlr),e(Qo,T8),e(T8,Dlr),e(T8,R2e),e(R2e,Glr),e(T8,Olr),e(Qo,Vlr),e(Qo,Ct),M(M8,Ct,null),e(Ct,Xlr),e(Ct,P2e),e(P2e,zlr),e(Ct,Wlr),e(Ct,Bd),e(Bd,Qlr),e(Bd,B2e),e(B2e,Hlr),e(Bd,Ulr),e(Bd,jW),e(jW,Jlr),e(Bd,Ylr),e(Ct,Klr),M(XM,Ct,null),e(Qo,Zlr),e(Qo,uo),M(E8,uo,null),e(uo,eir),e(uo,I2e),e(I2e,oir),e(uo,rir),e(uo,Ja),e(Ja,tir),e(Ja,N2e),e(N2e,air),e(Ja,nir),e(Ja,q2e),e(q2e,sir),e(Ja,lir),e(Ja,j2e),e(j2e,iir),e(Ja,dir),e(uo,cir),e(uo,ot),e(ot,zM),e(zM,D2e),e(D2e,mir),e(zM,fir),e(zM,DW),e(DW,gir),e(zM,hir),e(ot,uir),e(ot,WM),e(WM,G2e),e(G2e,pir),e(WM,_ir),e(WM,GW),e(GW,bir),e(WM,vir),e(ot,Fir),e(ot,QM),e(QM,O2e),e(O2e,Tir),e(QM,Mir),e(QM,OW),e(OW,Eir),e(QM,Cir),e(ot,wir),e(ot,HM),e(HM,V2e),e(V2e,Air),e(HM,yir),e(HM,VW),e(VW,Lir),e(HM,xir),e(ot,$ir),e(ot,UM),e(UM,X2e),e(X2e,kir),e(UM,Sir),e(UM,XW),e(XW,Rir),e(UM,Pir),e(uo,Bir),e(uo,JM),e(JM,Iir),e(JM,z2e),e(z2e,Nir),e(JM,qir),e(JM,W2e),e(W2e,jir),e(uo,Dir),M(YM,uo,null),b(m,fGe,_),b(m,Id,_),e(Id,KM),e(KM,Q2e),M(C8,Q2e,null),e(Id,Gir),e(Id,H2e),e(H2e,Oir),b(m,gGe,_),b(m,Ho,_),M(w8,Ho,null),e(Ho,Vir),e(Ho,Nd),e(Nd,Xir),e(Nd,zW),e(zW,zir),e(Nd,Wir),e(Nd,WW),e(WW,Qir),e(Nd,Hir),e(Ho,Uir),e(Ho,A8),e(A8,Jir),e(A8,U2e),e(U2e,Yir),e(A8,Kir),e(Ho,Zir),e(Ho,wt),M(y8,wt,null),e(wt,edr),e(wt,J2e),e(J2e,odr),e(wt,rdr),e(wt,qd),e(qd,tdr),e(qd,Y2e),e(Y2e,adr),e(qd,ndr),e(qd,QW),e(QW,sdr),e(qd,ldr),e(wt,idr),M(ZM,wt,null),e(Ho,ddr),e(Ho,po),M(L8,po,null),e(po,cdr),e(po,K2e),e(K2e,mdr),e(po,fdr),e(po,Ya),e(Ya,gdr),e(Ya,Z2e),e(Z2e,hdr),e(Ya,udr),e(Ya,eve),e(eve,pdr),e(Ya,_dr),e(Ya,ove),e(ove,bdr),e(Ya,vdr),e(po,Fdr),e(po,jd),e(jd,e4),e(e4,rve),e(rve,Tdr),e(e4,Mdr),e(e4,HW),e(HW,Edr),e(e4,Cdr),e(jd,wdr),e(jd,o4),e(o4,tve),e(tve,Adr),e(o4,ydr),e(o4,UW),e(UW,Ldr),e(o4,xdr),e(jd,$dr),e(jd,r4),e(r4,ave),e(ave,kdr),e(r4,Sdr),e(r4,JW),e(JW,Rdr),e(r4,Pdr),e(po,Bdr),e(po,t4),e(t4,Idr),e(t4,nve),e(nve,Ndr),e(t4,qdr),e(t4,sve),e(sve,jdr),e(po,Ddr),M(a4,po,null),b(m,hGe,_),b(m,Dd,_),e(Dd,n4),e(n4,lve),M(x8,lve,null),e(Dd,Gdr),e(Dd,ive),e(ive,Odr),b(m,uGe,_),b(m,Uo,_),M($8,Uo,null),e(Uo,Vdr),e(Uo,Gd),e(Gd,Xdr),e(Gd,YW),e(YW,zdr),e(Gd,Wdr),e(Gd,KW),e(KW,Qdr),e(Gd,Hdr),e(Uo,Udr),e(Uo,k8),e(k8,Jdr),e(k8,dve),e(dve,Ydr),e(k8,Kdr),e(Uo,Zdr),e(Uo,At),M(S8,At,null),e(At,ecr),e(At,cve),e(cve,ocr),e(At,rcr),e(At,Od),e(Od,tcr),e(Od,mve),e(mve,acr),e(Od,ncr),e(Od,ZW),e(ZW,scr),e(Od,lcr),e(At,icr),M(s4,At,null),e(Uo,dcr),e(Uo,_o),M(R8,_o,null),e(_o,ccr),e(_o,fve),e(fve,mcr),e(_o,fcr),e(_o,Ka),e(Ka,gcr),e(Ka,gve),e(gve,hcr),e(Ka,ucr),e(Ka,hve),e(hve,pcr),e(Ka,_cr),e(Ka,uve),e(uve,bcr),e(Ka,vcr),e(_o,Fcr),e(_o,P8),e(P8,l4),e(l4,pve),e(pve,Tcr),e(l4,Mcr),e(l4,eQ),e(eQ,Ecr),e(l4,Ccr),e(P8,wcr),e(P8,i4),e(i4,_ve),e(_ve,Acr),e(i4,ycr),e(i4,oQ),e(oQ,Lcr),e(i4,xcr),e(_o,$cr),e(_o,d4),e(d4,kcr),e(d4,bve),e(bve,Scr),e(d4,Rcr),e(d4,vve),e(vve,Pcr),e(_o,Bcr),M(c4,_o,null),b(m,pGe,_),b(m,Vd,_),e(Vd,m4),e(m4,Fve),M(B8,Fve,null),e(Vd,Icr),e(Vd,Tve),e(Tve,Ncr),b(m,_Ge,_),b(m,Jo,_),M(I8,Jo,null),e(Jo,qcr),e(Jo,Xd),e(Xd,jcr),e(Xd,rQ),e(rQ,Dcr),e(Xd,Gcr),e(Xd,tQ),e(tQ,Ocr),e(Xd,Vcr),e(Jo,Xcr),e(Jo,N8),e(N8,zcr),e(N8,Mve),e(Mve,Wcr),e(N8,Qcr),e(Jo,Hcr),e(Jo,yt),M(q8,yt,null),e(yt,Ucr),e(yt,Eve),e(Eve,Jcr),e(yt,Ycr),e(yt,zd),e(zd,Kcr),e(zd,Cve),e(Cve,Zcr),e(zd,emr),e(zd,aQ),e(aQ,omr),e(zd,rmr),e(yt,tmr),M(f4,yt,null),e(Jo,amr),e(Jo,bo),M(j8,bo,null),e(bo,nmr),e(bo,wve),e(wve,smr),e(bo,lmr),e(bo,Za),e(Za,imr),e(Za,Ave),e(Ave,dmr),e(Za,cmr),e(Za,yve),e(yve,mmr),e(Za,fmr),e(Za,Lve),e(Lve,gmr),e(Za,hmr),e(bo,umr),e(bo,xve),e(xve,g4),e(g4,$ve),e($ve,pmr),e(g4,_mr),e(g4,nQ),e(nQ,bmr),e(g4,vmr),e(bo,Fmr),e(bo,h4),e(h4,Tmr),e(h4,kve),e(kve,Mmr),e(h4,Emr),e(h4,Sve),e(Sve,Cmr),e(bo,wmr),M(u4,bo,null),b(m,bGe,_),b(m,Wd,_),e(Wd,p4),e(p4,Rve),M(D8,Rve,null),e(Wd,Amr),e(Wd,Pve),e(Pve,ymr),b(m,vGe,_),b(m,Yo,_),M(G8,Yo,null),e(Yo,Lmr),e(Yo,Qd),e(Qd,xmr),e(Qd,sQ),e(sQ,$mr),e(Qd,kmr),e(Qd,lQ),e(lQ,Smr),e(Qd,Rmr),e(Yo,Pmr),e(Yo,O8),e(O8,Bmr),e(O8,Bve),e(Bve,Imr),e(O8,Nmr),e(Yo,qmr),e(Yo,Lt),M(V8,Lt,null),e(Lt,jmr),e(Lt,Ive),e(Ive,Dmr),e(Lt,Gmr),e(Lt,Hd),e(Hd,Omr),e(Hd,Nve),e(Nve,Vmr),e(Hd,Xmr),e(Hd,iQ),e(iQ,zmr),e(Hd,Wmr),e(Lt,Qmr),M(_4,Lt,null),e(Yo,Hmr),e(Yo,vo),M(X8,vo,null),e(vo,Umr),e(vo,qve),e(qve,Jmr),e(vo,Ymr),e(vo,en),e(en,Kmr),e(en,jve),e(jve,Zmr),e(en,efr),e(en,Dve),e(Dve,ofr),e(en,rfr),e(en,Gve),e(Gve,tfr),e(en,afr),e(vo,nfr),e(vo,on),e(on,b4),e(b4,Ove),e(Ove,sfr),e(b4,lfr),e(b4,dQ),e(dQ,ifr),e(b4,dfr),e(on,cfr),e(on,v4),e(v4,Vve),e(Vve,mfr),e(v4,ffr),e(v4,cQ),e(cQ,gfr),e(v4,hfr),e(on,ufr),e(on,F4),e(F4,Xve),e(Xve,pfr),e(F4,_fr),e(F4,mQ),e(mQ,bfr),e(F4,vfr),e(on,Ffr),e(on,T4),e(T4,zve),e(zve,Tfr),e(T4,Mfr),e(T4,fQ),e(fQ,Efr),e(T4,Cfr),e(vo,wfr),e(vo,M4),e(M4,Afr),e(M4,Wve),e(Wve,yfr),e(M4,Lfr),e(M4,Qve),e(Qve,xfr),e(vo,$fr),M(E4,vo,null),b(m,FGe,_),b(m,Ud,_),e(Ud,C4),e(C4,Hve),M(z8,Hve,null),e(Ud,kfr),e(Ud,Uve),e(Uve,Sfr),b(m,TGe,_),b(m,Ko,_),M(W8,Ko,null),e(Ko,Rfr),e(Ko,Jd),e(Jd,Pfr),e(Jd,gQ),e(gQ,Bfr),e(Jd,Ifr),e(Jd,hQ),e(hQ,Nfr),e(Jd,qfr),e(Ko,jfr),e(Ko,Q8),e(Q8,Dfr),e(Q8,Jve),e(Jve,Gfr),e(Q8,Ofr),e(Ko,Vfr),e(Ko,xt),M(H8,xt,null),e(xt,Xfr),e(xt,Yve),e(Yve,zfr),e(xt,Wfr),e(xt,Yd),e(Yd,Qfr),e(Yd,Kve),e(Kve,Hfr),e(Yd,Ufr),e(Yd,uQ),e(uQ,Jfr),e(Yd,Yfr),e(xt,Kfr),M(w4,xt,null),e(Ko,Zfr),e(Ko,Fo),M(U8,Fo,null),e(Fo,egr),e(Fo,Zve),e(Zve,ogr),e(Fo,rgr),e(Fo,rn),e(rn,tgr),e(rn,eFe),e(eFe,agr),e(rn,ngr),e(rn,oFe),e(oFe,sgr),e(rn,lgr),e(rn,rFe),e(rFe,igr),e(rn,dgr),e(Fo,cgr),e(Fo,tFe),e(tFe,A4),e(A4,aFe),e(aFe,mgr),e(A4,fgr),e(A4,pQ),e(pQ,ggr),e(A4,hgr),e(Fo,ugr),e(Fo,y4),e(y4,pgr),e(y4,nFe),e(nFe,_gr),e(y4,bgr),e(y4,sFe),e(sFe,vgr),e(Fo,Fgr),M(L4,Fo,null),b(m,MGe,_),b(m,Kd,_),e(Kd,x4),e(x4,lFe),M(J8,lFe,null),e(Kd,Tgr),e(Kd,iFe),e(iFe,Mgr),b(m,EGe,_),b(m,Zo,_),M(Y8,Zo,null),e(Zo,Egr),e(Zo,Zd),e(Zd,Cgr),e(Zd,_Q),e(_Q,wgr),e(Zd,Agr),e(Zd,bQ),e(bQ,ygr),e(Zd,Lgr),e(Zo,xgr),e(Zo,K8),e(K8,$gr),e(K8,dFe),e(dFe,kgr),e(K8,Sgr),e(Zo,Rgr),e(Zo,$t),M(Z8,$t,null),e($t,Pgr),e($t,cFe),e(cFe,Bgr),e($t,Igr),e($t,ec),e(ec,Ngr),e(ec,mFe),e(mFe,qgr),e(ec,jgr),e(ec,vQ),e(vQ,Dgr),e(ec,Ggr),e($t,Ogr),M($4,$t,null),e(Zo,Vgr),e(Zo,yr),M(e9,yr,null),e(yr,Xgr),e(yr,fFe),e(fFe,zgr),e(yr,Wgr),e(yr,tn),e(tn,Qgr),e(tn,gFe),e(gFe,Hgr),e(tn,Ugr),e(tn,hFe),e(hFe,Jgr),e(tn,Ygr),e(tn,uFe),e(uFe,Kgr),e(tn,Zgr),e(yr,ehr),e(yr,q),e(q,k4),e(k4,pFe),e(pFe,ohr),e(k4,rhr),e(k4,FQ),e(FQ,thr),e(k4,ahr),e(q,nhr),e(q,S4),e(S4,_Fe),e(_Fe,shr),e(S4,lhr),e(S4,TQ),e(TQ,ihr),e(S4,dhr),e(q,chr),e(q,R4),e(R4,bFe),e(bFe,mhr),e(R4,fhr),e(R4,MQ),e(MQ,ghr),e(R4,hhr),e(q,uhr),e(q,P4),e(P4,vFe),e(vFe,phr),e(P4,_hr),e(P4,EQ),e(EQ,bhr),e(P4,vhr),e(q,Fhr),e(q,B4),e(B4,FFe),e(FFe,Thr),e(B4,Mhr),e(B4,CQ),e(CQ,Ehr),e(B4,Chr),e(q,whr),e(q,I4),e(I4,TFe),e(TFe,Ahr),e(I4,yhr),e(I4,wQ),e(wQ,Lhr),e(I4,xhr),e(q,$hr),e(q,N4),e(N4,MFe),e(MFe,khr),e(N4,Shr),e(N4,AQ),e(AQ,Rhr),e(N4,Phr),e(q,Bhr),e(q,q4),e(q4,EFe),e(EFe,Ihr),e(q4,Nhr),e(q4,yQ),e(yQ,qhr),e(q4,jhr),e(q,Dhr),e(q,j4),e(j4,CFe),e(CFe,Ghr),e(j4,Ohr),e(j4,LQ),e(LQ,Vhr),e(j4,Xhr),e(q,zhr),e(q,D4),e(D4,wFe),e(wFe,Whr),e(D4,Qhr),e(D4,xQ),e(xQ,Hhr),e(D4,Uhr),e(q,Jhr),e(q,G4),e(G4,AFe),e(AFe,Yhr),e(G4,Khr),e(G4,$Q),e($Q,Zhr),e(G4,eur),e(q,our),e(q,O4),e(O4,yFe),e(yFe,rur),e(O4,tur),e(O4,kQ),e(kQ,aur),e(O4,nur),e(q,sur),e(q,V4),e(V4,LFe),e(LFe,lur),e(V4,iur),e(V4,SQ),e(SQ,dur),e(V4,cur),e(q,mur),e(q,X4),e(X4,xFe),e(xFe,fur),e(X4,gur),e(X4,RQ),e(RQ,hur),e(X4,uur),e(q,pur),e(q,z4),e(z4,$Fe),e($Fe,_ur),e(z4,bur),e(z4,PQ),e(PQ,vur),e(z4,Fur),e(q,Tur),e(q,W4),e(W4,kFe),e(kFe,Mur),e(W4,Eur),e(W4,BQ),e(BQ,Cur),e(W4,wur),e(q,Aur),e(q,Q4),e(Q4,SFe),e(SFe,yur),e(Q4,Lur),e(Q4,IQ),e(IQ,xur),e(Q4,$ur),e(q,kur),e(q,Vs),e(Vs,RFe),e(RFe,Sur),e(Vs,Rur),e(Vs,NQ),e(NQ,Pur),e(Vs,Bur),e(Vs,qQ),e(qQ,Iur),e(Vs,Nur),e(q,qur),e(q,H4),e(H4,PFe),e(PFe,jur),e(H4,Dur),e(H4,jQ),e(jQ,Gur),e(H4,Our),e(q,Vur),e(q,U4),e(U4,BFe),e(BFe,Xur),e(U4,zur),e(U4,DQ),e(DQ,Wur),e(U4,Qur),e(q,Hur),e(q,J4),e(J4,IFe),e(IFe,Uur),e(J4,Jur),e(J4,GQ),e(GQ,Yur),e(J4,Kur),e(q,Zur),e(q,Y4),e(Y4,NFe),e(NFe,epr),e(Y4,opr),e(Y4,OQ),e(OQ,rpr),e(Y4,tpr),e(q,apr),e(q,K4),e(K4,qFe),e(qFe,npr),e(K4,spr),e(K4,VQ),e(VQ,lpr),e(K4,ipr),e(q,dpr),e(q,Z4),e(Z4,jFe),e(jFe,cpr),e(Z4,mpr),e(Z4,XQ),e(XQ,fpr),e(Z4,gpr),e(q,hpr),e(q,eE),e(eE,DFe),e(DFe,upr),e(eE,ppr),e(eE,zQ),e(zQ,_pr),e(eE,bpr),e(q,vpr),e(q,oE),e(oE,GFe),e(GFe,Fpr),e(oE,Tpr),e(oE,WQ),e(WQ,Mpr),e(oE,Epr),e(q,Cpr),e(q,rE),e(rE,OFe),e(OFe,wpr),e(rE,Apr),e(rE,QQ),e(QQ,ypr),e(rE,Lpr),e(q,xpr),e(q,tE),e(tE,VFe),e(VFe,$pr),e(tE,kpr),e(tE,HQ),e(HQ,Spr),e(tE,Rpr),e(q,Ppr),e(q,aE),e(aE,XFe),e(XFe,Bpr),e(aE,Ipr),e(aE,UQ),e(UQ,Npr),e(aE,qpr),e(q,jpr),e(q,nE),e(nE,zFe),e(zFe,Dpr),e(nE,Gpr),e(nE,JQ),e(JQ,Opr),e(nE,Vpr),e(q,Xpr),e(q,sE),e(sE,WFe),e(WFe,zpr),e(sE,Wpr),e(sE,YQ),e(YQ,Qpr),e(sE,Hpr),e(q,Upr),e(q,lE),e(lE,QFe),e(QFe,Jpr),e(lE,Ypr),e(lE,KQ),e(KQ,Kpr),e(lE,Zpr),e(q,e_r),e(q,iE),e(iE,HFe),e(HFe,o_r),e(iE,r_r),e(iE,ZQ),e(ZQ,t_r),e(iE,a_r),e(q,n_r),e(q,dE),e(dE,UFe),e(UFe,s_r),e(dE,l_r),e(dE,eH),e(eH,i_r),e(dE,d_r),e(q,c_r),e(q,cE),e(cE,JFe),e(JFe,m_r),e(cE,f_r),e(cE,oH),e(oH,g_r),e(cE,h_r),e(q,u_r),e(q,mE),e(mE,YFe),e(YFe,p_r),e(mE,__r),e(mE,rH),e(rH,b_r),e(mE,v_r),e(q,F_r),e(q,fE),e(fE,KFe),e(KFe,T_r),e(fE,M_r),e(fE,tH),e(tH,E_r),e(fE,C_r),e(q,w_r),e(q,gE),e(gE,ZFe),e(ZFe,A_r),e(gE,y_r),e(gE,aH),e(aH,L_r),e(gE,x_r),e(q,$_r),e(q,hE),e(hE,e1e),e(e1e,k_r),e(hE,S_r),e(hE,nH),e(nH,R_r),e(hE,P_r),e(q,B_r),e(q,uE),e(uE,o1e),e(o1e,I_r),e(uE,N_r),e(uE,sH),e(sH,q_r),e(uE,j_r),e(q,D_r),e(q,pE),e(pE,r1e),e(r1e,G_r),e(pE,O_r),e(pE,lH),e(lH,V_r),e(pE,X_r),e(q,z_r),e(q,_E),e(_E,t1e),e(t1e,W_r),e(_E,Q_r),e(_E,iH),e(iH,H_r),e(_E,U_r),e(q,J_r),e(q,bE),e(bE,a1e),e(a1e,Y_r),e(bE,K_r),e(bE,dH),e(dH,Z_r),e(bE,ebr),e(q,obr),e(q,vE),e(vE,n1e),e(n1e,rbr),e(vE,tbr),e(vE,cH),e(cH,abr),e(vE,nbr),e(q,sbr),e(q,FE),e(FE,s1e),e(s1e,lbr),e(FE,ibr),e(FE,mH),e(mH,dbr),e(FE,cbr),e(q,mbr),e(q,TE),e(TE,l1e),e(l1e,fbr),e(TE,gbr),e(TE,fH),e(fH,hbr),e(TE,ubr),e(q,pbr),e(q,ME),e(ME,i1e),e(i1e,_br),e(ME,bbr),e(ME,gH),e(gH,vbr),e(ME,Fbr),e(yr,Tbr),M(EE,yr,null),b(m,CGe,_),b(m,oc,_),e(oc,CE),e(CE,d1e),M(o9,d1e,null),e(oc,Mbr),e(oc,c1e),e(c1e,Ebr),b(m,wGe,_),b(m,er,_),M(r9,er,null),e(er,Cbr),e(er,rc),e(rc,wbr),e(rc,hH),e(hH,Abr),e(rc,ybr),e(rc,uH),e(uH,Lbr),e(rc,xbr),e(er,$br),e(er,t9),e(t9,kbr),e(t9,m1e),e(m1e,Sbr),e(t9,Rbr),e(er,Pbr),e(er,kt),M(a9,kt,null),e(kt,Bbr),e(kt,f1e),e(f1e,Ibr),e(kt,Nbr),e(kt,tc),e(tc,qbr),e(tc,g1e),e(g1e,jbr),e(tc,Dbr),e(tc,pH),e(pH,Gbr),e(tc,Obr),e(kt,Vbr),M(wE,kt,null),e(er,Xbr),e(er,Lr),M(n9,Lr,null),e(Lr,zbr),e(Lr,h1e),e(h1e,Wbr),e(Lr,Qbr),e(Lr,an),e(an,Hbr),e(an,u1e),e(u1e,Ubr),e(an,Jbr),e(an,p1e),e(p1e,Ybr),e(an,Kbr),e(an,_1e),e(_1e,Zbr),e(an,e2r),e(Lr,o2r),e(Lr,se),e(se,AE),e(AE,b1e),e(b1e,r2r),e(AE,t2r),e(AE,_H),e(_H,a2r),e(AE,n2r),e(se,s2r),e(se,yE),e(yE,v1e),e(v1e,l2r),e(yE,i2r),e(yE,bH),e(bH,d2r),e(yE,c2r),e(se,m2r),e(se,LE),e(LE,F1e),e(F1e,f2r),e(LE,g2r),e(LE,vH),e(vH,h2r),e(LE,u2r),e(se,p2r),e(se,xE),e(xE,T1e),e(T1e,_2r),e(xE,b2r),e(xE,FH),e(FH,v2r),e(xE,F2r),e(se,T2r),e(se,$E),e($E,M1e),e(M1e,M2r),e($E,E2r),e($E,TH),e(TH,C2r),e($E,w2r),e(se,A2r),e(se,kE),e(kE,E1e),e(E1e,y2r),e(kE,L2r),e(kE,MH),e(MH,x2r),e(kE,$2r),e(se,k2r),e(se,SE),e(SE,C1e),e(C1e,S2r),e(SE,R2r),e(SE,EH),e(EH,P2r),e(SE,B2r),e(se,I2r),e(se,RE),e(RE,w1e),e(w1e,N2r),e(RE,q2r),e(RE,CH),e(CH,j2r),e(RE,D2r),e(se,G2r),e(se,PE),e(PE,A1e),e(A1e,O2r),e(PE,V2r),e(PE,wH),e(wH,X2r),e(PE,z2r),e(se,W2r),e(se,BE),e(BE,y1e),e(y1e,Q2r),e(BE,H2r),e(BE,AH),e(AH,U2r),e(BE,J2r),e(se,Y2r),e(se,IE),e(IE,L1e),e(L1e,K2r),e(IE,Z2r),e(IE,yH),e(yH,evr),e(IE,ovr),e(se,rvr),e(se,NE),e(NE,x1e),e(x1e,tvr),e(NE,avr),e(NE,LH),e(LH,nvr),e(NE,svr),e(se,lvr),e(se,qE),e(qE,$1e),e($1e,ivr),e(qE,dvr),e(qE,xH),e(xH,cvr),e(qE,mvr),e(se,fvr),e(se,jE),e(jE,k1e),e(k1e,gvr),e(jE,hvr),e(jE,$H),e($H,uvr),e(jE,pvr),e(se,_vr),e(se,DE),e(DE,S1e),e(S1e,bvr),e(DE,vvr),e(DE,kH),e(kH,Fvr),e(DE,Tvr),e(se,Mvr),e(se,GE),e(GE,R1e),e(R1e,Evr),e(GE,Cvr),e(GE,SH),e(SH,wvr),e(GE,Avr),e(se,yvr),e(se,OE),e(OE,P1e),e(P1e,Lvr),e(OE,xvr),e(OE,RH),e(RH,$vr),e(OE,kvr),e(se,Svr),e(se,VE),e(VE,B1e),e(B1e,Rvr),e(VE,Pvr),e(VE,PH),e(PH,Bvr),e(VE,Ivr),e(se,Nvr),e(se,XE),e(XE,I1e),e(I1e,qvr),e(XE,jvr),e(XE,BH),e(BH,Dvr),e(XE,Gvr),e(se,Ovr),e(se,zE),e(zE,N1e),e(N1e,Vvr),e(zE,Xvr),e(zE,IH),e(IH,zvr),e(zE,Wvr),e(se,Qvr),e(se,WE),e(WE,q1e),e(q1e,Hvr),e(WE,Uvr),e(WE,NH),e(NH,Jvr),e(WE,Yvr),e(se,Kvr),e(se,QE),e(QE,j1e),e(j1e,Zvr),e(QE,eFr),e(QE,qH),e(qH,oFr),e(QE,rFr),e(se,tFr),e(se,HE),e(HE,D1e),e(D1e,aFr),e(HE,nFr),e(HE,jH),e(jH,sFr),e(HE,lFr),e(Lr,iFr),M(UE,Lr,null),b(m,AGe,_),b(m,ac,_),e(ac,JE),e(JE,G1e),M(s9,G1e,null),e(ac,dFr),e(ac,O1e),e(O1e,cFr),b(m,yGe,_),b(m,or,_),M(l9,or,null),e(or,mFr),e(or,nc),e(nc,fFr),e(nc,DH),e(DH,gFr),e(nc,hFr),e(nc,GH),e(GH,uFr),e(nc,pFr),e(or,_Fr),e(or,i9),e(i9,bFr),e(i9,V1e),e(V1e,vFr),e(i9,FFr),e(or,TFr),e(or,St),M(d9,St,null),e(St,MFr),e(St,X1e),e(X1e,EFr),e(St,CFr),e(St,sc),e(sc,wFr),e(sc,z1e),e(z1e,AFr),e(sc,yFr),e(sc,OH),e(OH,LFr),e(sc,xFr),e(St,$Fr),M(YE,St,null),e(or,kFr),e(or,xr),M(c9,xr,null),e(xr,SFr),e(xr,W1e),e(W1e,RFr),e(xr,PFr),e(xr,nn),e(nn,BFr),e(nn,Q1e),e(Q1e,IFr),e(nn,NFr),e(nn,H1e),e(H1e,qFr),e(nn,jFr),e(nn,U1e),e(U1e,DFr),e(nn,GFr),e(xr,OFr),e(xr,Me),e(Me,KE),e(KE,J1e),e(J1e,VFr),e(KE,XFr),e(KE,VH),e(VH,zFr),e(KE,WFr),e(Me,QFr),e(Me,ZE),e(ZE,Y1e),e(Y1e,HFr),e(ZE,UFr),e(ZE,XH),e(XH,JFr),e(ZE,YFr),e(Me,KFr),e(Me,eC),e(eC,K1e),e(K1e,ZFr),e(eC,e1r),e(eC,zH),e(zH,o1r),e(eC,r1r),e(Me,t1r),e(Me,oC),e(oC,Z1e),e(Z1e,a1r),e(oC,n1r),e(oC,WH),e(WH,s1r),e(oC,l1r),e(Me,i1r),e(Me,rC),e(rC,eTe),e(eTe,d1r),e(rC,c1r),e(rC,QH),e(QH,m1r),e(rC,f1r),e(Me,g1r),e(Me,tC),e(tC,oTe),e(oTe,h1r),e(tC,u1r),e(tC,HH),e(HH,p1r),e(tC,_1r),e(Me,b1r),e(Me,aC),e(aC,rTe),e(rTe,v1r),e(aC,F1r),e(aC,UH),e(UH,T1r),e(aC,M1r),e(Me,E1r),e(Me,nC),e(nC,tTe),e(tTe,C1r),e(nC,w1r),e(nC,JH),e(JH,A1r),e(nC,y1r),e(Me,L1r),e(Me,sC),e(sC,aTe),e(aTe,x1r),e(sC,$1r),e(sC,YH),e(YH,k1r),e(sC,S1r),e(Me,R1r),e(Me,lC),e(lC,nTe),e(nTe,P1r),e(lC,B1r),e(lC,KH),e(KH,I1r),e(lC,N1r),e(Me,q1r),e(Me,iC),e(iC,sTe),e(sTe,j1r),e(iC,D1r),e(iC,ZH),e(ZH,G1r),e(iC,O1r),e(Me,V1r),e(Me,dC),e(dC,lTe),e(lTe,X1r),e(dC,z1r),e(dC,eU),e(eU,W1r),e(dC,Q1r),e(Me,H1r),e(Me,cC),e(cC,iTe),e(iTe,U1r),e(cC,J1r),e(cC,oU),e(oU,Y1r),e(cC,K1r),e(xr,Z1r),M(mC,xr,null),b(m,LGe,_),b(m,lc,_),e(lc,fC),e(fC,dTe),M(m9,dTe,null),e(lc,eTr),e(lc,cTe),e(cTe,oTr),b(m,xGe,_),b(m,rr,_),M(f9,rr,null),e(rr,rTr),e(rr,ic),e(ic,tTr),e(ic,rU),e(rU,aTr),e(ic,nTr),e(ic,tU),e(tU,sTr),e(ic,lTr),e(rr,iTr),e(rr,g9),e(g9,dTr),e(g9,mTe),e(mTe,cTr),e(g9,mTr),e(rr,fTr),e(rr,Rt),M(h9,Rt,null),e(Rt,gTr),e(Rt,fTe),e(fTe,hTr),e(Rt,uTr),e(Rt,dc),e(dc,pTr),e(dc,gTe),e(gTe,_Tr),e(dc,bTr),e(dc,aU),e(aU,vTr),e(dc,FTr),e(Rt,TTr),M(gC,Rt,null),e(rr,MTr),e(rr,$r),M(u9,$r,null),e($r,ETr),e($r,hTe),e(hTe,CTr),e($r,wTr),e($r,sn),e(sn,ATr),e(sn,uTe),e(uTe,yTr),e(sn,LTr),e(sn,pTe),e(pTe,xTr),e(sn,$Tr),e(sn,_Te),e(_Te,kTr),e(sn,STr),e($r,RTr),e($r,ln),e(ln,hC),e(hC,bTe),e(bTe,PTr),e(hC,BTr),e(hC,nU),e(nU,ITr),e(hC,NTr),e(ln,qTr),e(ln,uC),e(uC,vTe),e(vTe,jTr),e(uC,DTr),e(uC,sU),e(sU,GTr),e(uC,OTr),e(ln,VTr),e(ln,pC),e(pC,FTe),e(FTe,XTr),e(pC,zTr),e(pC,lU),e(lU,WTr),e(pC,QTr),e(ln,HTr),e(ln,_C),e(_C,TTe),e(TTe,UTr),e(_C,JTr),e(_C,iU),e(iU,YTr),e(_C,KTr),e($r,ZTr),M(bC,$r,null),b(m,$Ge,_),b(m,cc,_),e(cc,vC),e(vC,MTe),M(p9,MTe,null),e(cc,eMr),e(cc,ETe),e(ETe,oMr),b(m,kGe,_),b(m,tr,_),M(_9,tr,null),e(tr,rMr),e(tr,mc),e(mc,tMr),e(mc,dU),e(dU,aMr),e(mc,nMr),e(mc,cU),e(cU,sMr),e(mc,lMr),e(tr,iMr),e(tr,b9),e(b9,dMr),e(b9,CTe),e(CTe,cMr),e(b9,mMr),e(tr,fMr),e(tr,Pt),M(v9,Pt,null),e(Pt,gMr),e(Pt,wTe),e(wTe,hMr),e(Pt,uMr),e(Pt,fc),e(fc,pMr),e(fc,ATe),e(ATe,_Mr),e(fc,bMr),e(fc,mU),e(mU,vMr),e(fc,FMr),e(Pt,TMr),M(FC,Pt,null),e(tr,MMr),e(tr,kr),M(F9,kr,null),e(kr,EMr),e(kr,yTe),e(yTe,CMr),e(kr,wMr),e(kr,dn),e(dn,AMr),e(dn,LTe),e(LTe,yMr),e(dn,LMr),e(dn,xTe),e(xTe,xMr),e(dn,$Mr),e(dn,$Te),e($Te,kMr),e(dn,SMr),e(kr,RMr),e(kr,ie),e(ie,TC),e(TC,kTe),e(kTe,PMr),e(TC,BMr),e(TC,fU),e(fU,IMr),e(TC,NMr),e(ie,qMr),e(ie,MC),e(MC,STe),e(STe,jMr),e(MC,DMr),e(MC,gU),e(gU,GMr),e(MC,OMr),e(ie,VMr),e(ie,EC),e(EC,RTe),e(RTe,XMr),e(EC,zMr),e(EC,hU),e(hU,WMr),e(EC,QMr),e(ie,HMr),e(ie,CC),e(CC,PTe),e(PTe,UMr),e(CC,JMr),e(CC,uU),e(uU,YMr),e(CC,KMr),e(ie,ZMr),e(ie,wC),e(wC,BTe),e(BTe,e4r),e(wC,o4r),e(wC,pU),e(pU,r4r),e(wC,t4r),e(ie,a4r),e(ie,AC),e(AC,ITe),e(ITe,n4r),e(AC,s4r),e(AC,_U),e(_U,l4r),e(AC,i4r),e(ie,d4r),e(ie,yC),e(yC,NTe),e(NTe,c4r),e(yC,m4r),e(yC,bU),e(bU,f4r),e(yC,g4r),e(ie,h4r),e(ie,LC),e(LC,qTe),e(qTe,u4r),e(LC,p4r),e(LC,vU),e(vU,_4r),e(LC,b4r),e(ie,v4r),e(ie,xC),e(xC,jTe),e(jTe,F4r),e(xC,T4r),e(xC,FU),e(FU,M4r),e(xC,E4r),e(ie,C4r),e(ie,$C),e($C,DTe),e(DTe,w4r),e($C,A4r),e($C,TU),e(TU,y4r),e($C,L4r),e(ie,x4r),e(ie,kC),e(kC,GTe),e(GTe,$4r),e(kC,k4r),e(kC,MU),e(MU,S4r),e(kC,R4r),e(ie,P4r),e(ie,SC),e(SC,OTe),e(OTe,B4r),e(SC,I4r),e(SC,EU),e(EU,N4r),e(SC,q4r),e(ie,j4r),e(ie,RC),e(RC,VTe),e(VTe,D4r),e(RC,G4r),e(RC,CU),e(CU,O4r),e(RC,V4r),e(ie,X4r),e(ie,PC),e(PC,XTe),e(XTe,z4r),e(PC,W4r),e(PC,wU),e(wU,Q4r),e(PC,H4r),e(ie,U4r),e(ie,BC),e(BC,zTe),e(zTe,J4r),e(BC,Y4r),e(BC,AU),e(AU,K4r),e(BC,Z4r),e(ie,eEr),e(ie,IC),e(IC,WTe),e(WTe,oEr),e(IC,rEr),e(IC,yU),e(yU,tEr),e(IC,aEr),e(ie,nEr),e(ie,NC),e(NC,QTe),e(QTe,sEr),e(NC,lEr),e(NC,LU),e(LU,iEr),e(NC,dEr),e(ie,cEr),e(ie,qC),e(qC,HTe),e(HTe,mEr),e(qC,fEr),e(qC,xU),e(xU,gEr),e(qC,hEr),e(ie,uEr),e(ie,jC),e(jC,UTe),e(UTe,pEr),e(jC,_Er),e(jC,$U),e($U,bEr),e(jC,vEr),e(ie,FEr),e(ie,DC),e(DC,JTe),e(JTe,TEr),e(DC,MEr),e(DC,kU),e(kU,EEr),e(DC,CEr),e(kr,wEr),M(GC,kr,null),b(m,SGe,_),b(m,gc,_),e(gc,OC),e(OC,YTe),M(T9,YTe,null),e(gc,AEr),e(gc,KTe),e(KTe,yEr),b(m,RGe,_),b(m,ar,_),M(M9,ar,null),e(ar,LEr),e(ar,hc),e(hc,xEr),e(hc,SU),e(SU,$Er),e(hc,kEr),e(hc,RU),e(RU,SEr),e(hc,REr),e(ar,PEr),e(ar,E9),e(E9,BEr),e(E9,ZTe),e(ZTe,IEr),e(E9,NEr),e(ar,qEr),e(ar,Bt),M(C9,Bt,null),e(Bt,jEr),e(Bt,eMe),e(eMe,DEr),e(Bt,GEr),e(Bt,uc),e(uc,OEr),e(uc,oMe),e(oMe,VEr),e(uc,XEr),e(uc,PU),e(PU,zEr),e(uc,WEr),e(Bt,QEr),M(VC,Bt,null),e(ar,HEr),e(ar,Sr),M(w9,Sr,null),e(Sr,UEr),e(Sr,rMe),e(rMe,JEr),e(Sr,YEr),e(Sr,cn),e(cn,KEr),e(cn,tMe),e(tMe,ZEr),e(cn,eCr),e(cn,aMe),e(aMe,oCr),e(cn,rCr),e(cn,nMe),e(nMe,tCr),e(cn,aCr),e(Sr,nCr),e(Sr,Le),e(Le,XC),e(XC,sMe),e(sMe,sCr),e(XC,lCr),e(XC,BU),e(BU,iCr),e(XC,dCr),e(Le,cCr),e(Le,zC),e(zC,lMe),e(lMe,mCr),e(zC,fCr),e(zC,IU),e(IU,gCr),e(zC,hCr),e(Le,uCr),e(Le,WC),e(WC,iMe),e(iMe,pCr),e(WC,_Cr),e(WC,NU),e(NU,bCr),e(WC,vCr),e(Le,FCr),e(Le,QC),e(QC,dMe),e(dMe,TCr),e(QC,MCr),e(QC,qU),e(qU,ECr),e(QC,CCr),e(Le,wCr),e(Le,HC),e(HC,cMe),e(cMe,ACr),e(HC,yCr),e(HC,jU),e(jU,LCr),e(HC,xCr),e(Le,$Cr),e(Le,UC),e(UC,mMe),e(mMe,kCr),e(UC,SCr),e(UC,DU),e(DU,RCr),e(UC,PCr),e(Le,BCr),e(Le,JC),e(JC,fMe),e(fMe,ICr),e(JC,NCr),e(JC,GU),e(GU,qCr),e(JC,jCr),e(Le,DCr),e(Le,YC),e(YC,gMe),e(gMe,GCr),e(YC,OCr),e(YC,OU),e(OU,VCr),e(YC,XCr),e(Le,zCr),e(Le,KC),e(KC,hMe),e(hMe,WCr),e(KC,QCr),e(KC,VU),e(VU,HCr),e(KC,UCr),e(Le,JCr),e(Le,ZC),e(ZC,uMe),e(uMe,YCr),e(ZC,KCr),e(ZC,XU),e(XU,ZCr),e(ZC,e5r),e(Sr,o5r),M(e5,Sr,null),b(m,PGe,_),b(m,pc,_),e(pc,o5),e(o5,pMe),M(A9,pMe,null),e(pc,r5r),e(pc,_Me),e(_Me,t5r),b(m,BGe,_),b(m,nr,_),M(y9,nr,null),e(nr,a5r),e(nr,_c),e(_c,n5r),e(_c,zU),e(zU,s5r),e(_c,l5r),e(_c,WU),e(WU,i5r),e(_c,d5r),e(nr,c5r),e(nr,L9),e(L9,m5r),e(L9,bMe),e(bMe,f5r),e(L9,g5r),e(nr,h5r),e(nr,It),M(x9,It,null),e(It,u5r),e(It,vMe),e(vMe,p5r),e(It,_5r),e(It,bc),e(bc,b5r),e(bc,FMe),e(FMe,v5r),e(bc,F5r),e(bc,QU),e(QU,T5r),e(bc,M5r),e(It,E5r),M(r5,It,null),e(nr,C5r),e(nr,Rr),M($9,Rr,null),e(Rr,w5r),e(Rr,TMe),e(TMe,A5r),e(Rr,y5r),e(Rr,mn),e(mn,L5r),e(mn,MMe),e(MMe,x5r),e(mn,$5r),e(mn,EMe),e(EMe,k5r),e(mn,S5r),e(mn,CMe),e(CMe,R5r),e(mn,P5r),e(Rr,B5r),e(Rr,re),e(re,t5),e(t5,wMe),e(wMe,I5r),e(t5,N5r),e(t5,HU),e(HU,q5r),e(t5,j5r),e(re,D5r),e(re,a5),e(a5,AMe),e(AMe,G5r),e(a5,O5r),e(a5,UU),e(UU,V5r),e(a5,X5r),e(re,z5r),e(re,n5),e(n5,yMe),e(yMe,W5r),e(n5,Q5r),e(n5,JU),e(JU,H5r),e(n5,U5r),e(re,J5r),e(re,s5),e(s5,LMe),e(LMe,Y5r),e(s5,K5r),e(s5,YU),e(YU,Z5r),e(s5,e3r),e(re,o3r),e(re,l5),e(l5,xMe),e(xMe,r3r),e(l5,t3r),e(l5,KU),e(KU,a3r),e(l5,n3r),e(re,s3r),e(re,i5),e(i5,$Me),e($Me,l3r),e(i5,i3r),e(i5,ZU),e(ZU,d3r),e(i5,c3r),e(re,m3r),e(re,d5),e(d5,kMe),e(kMe,f3r),e(d5,g3r),e(d5,eJ),e(eJ,h3r),e(d5,u3r),e(re,p3r),e(re,c5),e(c5,SMe),e(SMe,_3r),e(c5,b3r),e(c5,oJ),e(oJ,v3r),e(c5,F3r),e(re,T3r),e(re,m5),e(m5,RMe),e(RMe,M3r),e(m5,E3r),e(m5,rJ),e(rJ,C3r),e(m5,w3r),e(re,A3r),e(re,f5),e(f5,PMe),e(PMe,y3r),e(f5,L3r),e(f5,tJ),e(tJ,x3r),e(f5,$3r),e(re,k3r),e(re,g5),e(g5,BMe),e(BMe,S3r),e(g5,R3r),e(g5,aJ),e(aJ,P3r),e(g5,B3r),e(re,I3r),e(re,h5),e(h5,IMe),e(IMe,N3r),e(h5,q3r),e(h5,nJ),e(nJ,j3r),e(h5,D3r),e(re,G3r),e(re,u5),e(u5,NMe),e(NMe,O3r),e(u5,V3r),e(u5,sJ),e(sJ,X3r),e(u5,z3r),e(re,W3r),e(re,p5),e(p5,qMe),e(qMe,Q3r),e(p5,H3r),e(p5,lJ),e(lJ,U3r),e(p5,J3r),e(re,Y3r),e(re,_5),e(_5,jMe),e(jMe,K3r),e(_5,Z3r),e(_5,iJ),e(iJ,ewr),e(_5,owr),e(re,rwr),e(re,b5),e(b5,DMe),e(DMe,twr),e(b5,awr),e(b5,dJ),e(dJ,nwr),e(b5,swr),e(re,lwr),e(re,v5),e(v5,GMe),e(GMe,iwr),e(v5,dwr),e(v5,cJ),e(cJ,cwr),e(v5,mwr),e(re,fwr),e(re,F5),e(F5,OMe),e(OMe,gwr),e(F5,hwr),e(F5,mJ),e(mJ,uwr),e(F5,pwr),e(re,_wr),e(re,T5),e(T5,VMe),e(VMe,bwr),e(T5,vwr),e(T5,fJ),e(fJ,Fwr),e(T5,Twr),e(re,Mwr),e(re,M5),e(M5,XMe),e(XMe,Ewr),e(M5,Cwr),e(M5,gJ),e(gJ,wwr),e(M5,Awr),e(re,ywr),e(re,E5),e(E5,zMe),e(zMe,Lwr),e(E5,xwr),e(E5,hJ),e(hJ,$wr),e(E5,kwr),e(re,Swr),e(re,C5),e(C5,WMe),e(WMe,Rwr),e(C5,Pwr),e(C5,uJ),e(uJ,Bwr),e(C5,Iwr),e(re,Nwr),e(re,w5),e(w5,QMe),e(QMe,qwr),e(w5,jwr),e(w5,pJ),e(pJ,Dwr),e(w5,Gwr),e(re,Owr),e(re,A5),e(A5,HMe),e(HMe,Vwr),e(A5,Xwr),e(A5,_J),e(_J,zwr),e(A5,Wwr),e(re,Qwr),e(re,y5),e(y5,UMe),e(UMe,Hwr),e(y5,Uwr),e(y5,bJ),e(bJ,Jwr),e(y5,Ywr),e(re,Kwr),e(re,L5),e(L5,JMe),e(JMe,Zwr),e(L5,e0r),e(L5,vJ),e(vJ,o0r),e(L5,r0r),e(Rr,t0r),M(x5,Rr,null),b(m,IGe,_),b(m,vc,_),e(vc,$5),e($5,YMe),M(k9,YMe,null),e(vc,a0r),e(vc,KMe),e(KMe,n0r),b(m,NGe,_),b(m,sr,_),M(S9,sr,null),e(sr,s0r),e(sr,Fc),e(Fc,l0r),e(Fc,FJ),e(FJ,i0r),e(Fc,d0r),e(Fc,TJ),e(TJ,c0r),e(Fc,m0r),e(sr,f0r),e(sr,R9),e(R9,g0r),e(R9,ZMe),e(ZMe,h0r),e(R9,u0r),e(sr,p0r),e(sr,Nt),M(P9,Nt,null),e(Nt,_0r),e(Nt,e4e),e(e4e,b0r),e(Nt,v0r),e(Nt,Tc),e(Tc,F0r),e(Tc,o4e),e(o4e,T0r),e(Tc,M0r),e(Tc,MJ),e(MJ,E0r),e(Tc,C0r),e(Nt,w0r),M(k5,Nt,null),e(sr,A0r),e(sr,Pr),M(B9,Pr,null),e(Pr,y0r),e(Pr,r4e),e(r4e,L0r),e(Pr,x0r),e(Pr,fn),e(fn,$0r),e(fn,t4e),e(t4e,k0r),e(fn,S0r),e(fn,a4e),e(a4e,R0r),e(fn,P0r),e(fn,n4e),e(n4e,B0r),e(fn,I0r),e(Pr,N0r),e(Pr,ue),e(ue,S5),e(S5,s4e),e(s4e,q0r),e(S5,j0r),e(S5,EJ),e(EJ,D0r),e(S5,G0r),e(ue,O0r),e(ue,R5),e(R5,l4e),e(l4e,V0r),e(R5,X0r),e(R5,CJ),e(CJ,z0r),e(R5,W0r),e(ue,Q0r),e(ue,P5),e(P5,i4e),e(i4e,H0r),e(P5,U0r),e(P5,wJ),e(wJ,J0r),e(P5,Y0r),e(ue,K0r),e(ue,B5),e(B5,d4e),e(d4e,Z0r),e(B5,eAr),e(B5,AJ),e(AJ,oAr),e(B5,rAr),e(ue,tAr),e(ue,I5),e(I5,c4e),e(c4e,aAr),e(I5,nAr),e(I5,yJ),e(yJ,sAr),e(I5,lAr),e(ue,iAr),e(ue,N5),e(N5,m4e),e(m4e,dAr),e(N5,cAr),e(N5,LJ),e(LJ,mAr),e(N5,fAr),e(ue,gAr),e(ue,q5),e(q5,f4e),e(f4e,hAr),e(q5,uAr),e(q5,xJ),e(xJ,pAr),e(q5,_Ar),e(ue,bAr),e(ue,j5),e(j5,g4e),e(g4e,vAr),e(j5,FAr),e(j5,$J),e($J,TAr),e(j5,MAr),e(ue,EAr),e(ue,D5),e(D5,h4e),e(h4e,CAr),e(D5,wAr),e(D5,kJ),e(kJ,AAr),e(D5,yAr),e(ue,LAr),e(ue,G5),e(G5,u4e),e(u4e,xAr),e(G5,$Ar),e(G5,SJ),e(SJ,kAr),e(G5,SAr),e(ue,RAr),e(ue,O5),e(O5,p4e),e(p4e,PAr),e(O5,BAr),e(O5,RJ),e(RJ,IAr),e(O5,NAr),e(ue,qAr),e(ue,V5),e(V5,_4e),e(_4e,jAr),e(V5,DAr),e(V5,PJ),e(PJ,GAr),e(V5,OAr),e(ue,VAr),e(ue,X5),e(X5,b4e),e(b4e,XAr),e(X5,zAr),e(X5,BJ),e(BJ,WAr),e(X5,QAr),e(ue,HAr),e(ue,z5),e(z5,v4e),e(v4e,UAr),e(z5,JAr),e(z5,IJ),e(IJ,YAr),e(z5,KAr),e(ue,ZAr),e(ue,W5),e(W5,F4e),e(F4e,e6r),e(W5,o6r),e(W5,NJ),e(NJ,r6r),e(W5,t6r),e(ue,a6r),e(ue,Q5),e(Q5,T4e),e(T4e,n6r),e(Q5,s6r),e(Q5,qJ),e(qJ,l6r),e(Q5,i6r),e(ue,d6r),e(ue,H5),e(H5,M4e),e(M4e,c6r),e(H5,m6r),e(H5,jJ),e(jJ,f6r),e(H5,g6r),e(Pr,h6r),M(U5,Pr,null),b(m,qGe,_),b(m,Mc,_),e(Mc,J5),e(J5,E4e),M(I9,E4e,null),e(Mc,u6r),e(Mc,C4e),e(C4e,p6r),b(m,jGe,_),b(m,lr,_),M(N9,lr,null),e(lr,_6r),e(lr,Ec),e(Ec,b6r),e(Ec,DJ),e(DJ,v6r),e(Ec,F6r),e(Ec,GJ),e(GJ,T6r),e(Ec,M6r),e(lr,E6r),e(lr,q9),e(q9,C6r),e(q9,w4e),e(w4e,w6r),e(q9,A6r),e(lr,y6r),e(lr,qt),M(j9,qt,null),e(qt,L6r),e(qt,A4e),e(A4e,x6r),e(qt,$6r),e(qt,Cc),e(Cc,k6r),e(Cc,y4e),e(y4e,S6r),e(Cc,R6r),e(Cc,OJ),e(OJ,P6r),e(Cc,B6r),e(qt,I6r),M(Y5,qt,null),e(lr,N6r),e(lr,Br),M(D9,Br,null),e(Br,q6r),e(Br,L4e),e(L4e,j6r),e(Br,D6r),e(Br,gn),e(gn,G6r),e(gn,x4e),e(x4e,O6r),e(gn,V6r),e(gn,$4e),e($4e,X6r),e(gn,z6r),e(gn,k4e),e(k4e,W6r),e(gn,Q6r),e(Br,H6r),e(Br,G9),e(G9,K5),e(K5,S4e),e(S4e,U6r),e(K5,J6r),e(K5,VJ),e(VJ,Y6r),e(K5,K6r),e(G9,Z6r),e(G9,Z5),e(Z5,R4e),e(R4e,eyr),e(Z5,oyr),e(Z5,XJ),e(XJ,ryr),e(Z5,tyr),e(Br,ayr),M(e3,Br,null),b(m,DGe,_),b(m,wc,_),e(wc,o3),e(o3,P4e),M(O9,P4e,null),e(wc,nyr),e(wc,B4e),e(B4e,syr),b(m,GGe,_),b(m,ir,_),M(V9,ir,null),e(ir,lyr),e(ir,Ac),e(Ac,iyr),e(Ac,zJ),e(zJ,dyr),e(Ac,cyr),e(Ac,WJ),e(WJ,myr),e(Ac,fyr),e(ir,gyr),e(ir,X9),e(X9,hyr),e(X9,I4e),e(I4e,uyr),e(X9,pyr),e(ir,_yr),e(ir,jt),M(z9,jt,null),e(jt,byr),e(jt,N4e),e(N4e,vyr),e(jt,Fyr),e(jt,yc),e(yc,Tyr),e(yc,q4e),e(q4e,Myr),e(yc,Eyr),e(yc,QJ),e(QJ,Cyr),e(yc,wyr),e(jt,Ayr),M(r3,jt,null),e(ir,yyr),e(ir,Ir),M(W9,Ir,null),e(Ir,Lyr),e(Ir,j4e),e(j4e,xyr),e(Ir,$yr),e(Ir,hn),e(hn,kyr),e(hn,D4e),e(D4e,Syr),e(hn,Ryr),e(hn,G4e),e(G4e,Pyr),e(hn,Byr),e(hn,O4e),e(O4e,Iyr),e(hn,Nyr),e(Ir,qyr),e(Ir,V4e),e(V4e,t3),e(t3,X4e),e(X4e,jyr),e(t3,Dyr),e(t3,HJ),e(HJ,Gyr),e(t3,Oyr),e(Ir,Vyr),M(a3,Ir,null),b(m,OGe,_),b(m,Lc,_),e(Lc,n3),e(n3,z4e),M(Q9,z4e,null),e(Lc,Xyr),e(Lc,W4e),e(W4e,zyr),b(m,VGe,_),b(m,dr,_),M(H9,dr,null),e(dr,Wyr),e(dr,xc),e(xc,Qyr),e(xc,UJ),e(UJ,Hyr),e(xc,Uyr),e(xc,JJ),e(JJ,Jyr),e(xc,Yyr),e(dr,Kyr),e(dr,U9),e(U9,Zyr),e(U9,Q4e),e(Q4e,eLr),e(U9,oLr),e(dr,rLr),e(dr,Dt),M(J9,Dt,null),e(Dt,tLr),e(Dt,H4e),e(H4e,aLr),e(Dt,nLr),e(Dt,$c),e($c,sLr),e($c,U4e),e(U4e,lLr),e($c,iLr),e($c,YJ),e(YJ,dLr),e($c,cLr),e(Dt,mLr),M(s3,Dt,null),e(dr,fLr),e(dr,Nr),M(Y9,Nr,null),e(Nr,gLr),e(Nr,J4e),e(J4e,hLr),e(Nr,uLr),e(Nr,un),e(un,pLr),e(un,Y4e),e(Y4e,_Lr),e(un,bLr),e(un,K4e),e(K4e,vLr),e(un,FLr),e(un,Z4e),e(Z4e,TLr),e(un,MLr),e(Nr,ELr),e(Nr,de),e(de,l3),e(l3,eEe),e(eEe,CLr),e(l3,wLr),e(l3,KJ),e(KJ,ALr),e(l3,yLr),e(de,LLr),e(de,i3),e(i3,oEe),e(oEe,xLr),e(i3,$Lr),e(i3,ZJ),e(ZJ,kLr),e(i3,SLr),e(de,RLr),e(de,d3),e(d3,rEe),e(rEe,PLr),e(d3,BLr),e(d3,eY),e(eY,ILr),e(d3,NLr),e(de,qLr),e(de,c3),e(c3,tEe),e(tEe,jLr),e(c3,DLr),e(c3,oY),e(oY,GLr),e(c3,OLr),e(de,VLr),e(de,m3),e(m3,aEe),e(aEe,XLr),e(m3,zLr),e(m3,rY),e(rY,WLr),e(m3,QLr),e(de,HLr),e(de,f3),e(f3,nEe),e(nEe,ULr),e(f3,JLr),e(f3,tY),e(tY,YLr),e(f3,KLr),e(de,ZLr),e(de,g3),e(g3,sEe),e(sEe,e7r),e(g3,o7r),e(g3,aY),e(aY,r7r),e(g3,t7r),e(de,a7r),e(de,h3),e(h3,lEe),e(lEe,n7r),e(h3,s7r),e(h3,nY),e(nY,l7r),e(h3,i7r),e(de,d7r),e(de,u3),e(u3,iEe),e(iEe,c7r),e(u3,m7r),e(u3,sY),e(sY,f7r),e(u3,g7r),e(de,h7r),e(de,p3),e(p3,dEe),e(dEe,u7r),e(p3,p7r),e(p3,lY),e(lY,_7r),e(p3,b7r),e(de,v7r),e(de,_3),e(_3,cEe),e(cEe,F7r),e(_3,T7r),e(_3,iY),e(iY,M7r),e(_3,E7r),e(de,C7r),e(de,b3),e(b3,mEe),e(mEe,w7r),e(b3,A7r),e(b3,dY),e(dY,y7r),e(b3,L7r),e(de,x7r),e(de,v3),e(v3,fEe),e(fEe,$7r),e(v3,k7r),e(v3,cY),e(cY,S7r),e(v3,R7r),e(de,P7r),e(de,F3),e(F3,gEe),e(gEe,B7r),e(F3,I7r),e(F3,mY),e(mY,N7r),e(F3,q7r),e(de,j7r),e(de,T3),e(T3,hEe),e(hEe,D7r),e(T3,G7r),e(T3,fY),e(fY,O7r),e(T3,V7r),e(de,X7r),e(de,M3),e(M3,uEe),e(uEe,z7r),e(M3,W7r),e(M3,gY),e(gY,Q7r),e(M3,H7r),e(de,U7r),e(de,E3),e(E3,pEe),e(pEe,J7r),e(E3,Y7r),e(E3,hY),e(hY,K7r),e(E3,Z7r),e(de,e8r),e(de,C3),e(C3,_Ee),e(_Ee,o8r),e(C3,r8r),e(C3,uY),e(uY,t8r),e(C3,a8r),e(de,n8r),e(de,w3),e(w3,bEe),e(bEe,s8r),e(w3,l8r),e(w3,pY),e(pY,i8r),e(w3,d8r),e(de,c8r),e(de,A3),e(A3,vEe),e(vEe,m8r),e(A3,f8r),e(A3,_Y),e(_Y,g8r),e(A3,h8r),e(Nr,u8r),M(y3,Nr,null),b(m,XGe,_),b(m,kc,_),e(kc,L3),e(L3,FEe),M(K9,FEe,null),e(kc,p8r),e(kc,TEe),e(TEe,_8r),b(m,zGe,_),b(m,cr,_),M(Z9,cr,null),e(cr,b8r),e(cr,Sc),e(Sc,v8r),e(Sc,bY),e(bY,F8r),e(Sc,T8r),e(Sc,vY),e(vY,M8r),e(Sc,E8r),e(cr,C8r),e(cr,ex),e(ex,w8r),e(ex,MEe),e(MEe,A8r),e(ex,y8r),e(cr,L8r),e(cr,Gt),M(ox,Gt,null),e(Gt,x8r),e(Gt,EEe),e(EEe,$8r),e(Gt,k8r),e(Gt,Rc),e(Rc,S8r),e(Rc,CEe),e(CEe,R8r),e(Rc,P8r),e(Rc,FY),e(FY,B8r),e(Rc,I8r),e(Gt,N8r),M(x3,Gt,null),e(cr,q8r),e(cr,qr),M(rx,qr,null),e(qr,j8r),e(qr,wEe),e(wEe,D8r),e(qr,G8r),e(qr,pn),e(pn,O8r),e(pn,AEe),e(AEe,V8r),e(pn,X8r),e(pn,yEe),e(yEe,z8r),e(pn,W8r),e(pn,LEe),e(LEe,Q8r),e(pn,H8r),e(qr,U8r),e(qr,ce),e(ce,$3),e($3,xEe),e(xEe,J8r),e($3,Y8r),e($3,TY),e(TY,K8r),e($3,Z8r),e(ce,e9r),e(ce,k3),e(k3,$Ee),e($Ee,o9r),e(k3,r9r),e(k3,MY),e(MY,t9r),e(k3,a9r),e(ce,n9r),e(ce,S3),e(S3,kEe),e(kEe,s9r),e(S3,l9r),e(S3,EY),e(EY,i9r),e(S3,d9r),e(ce,c9r),e(ce,R3),e(R3,SEe),e(SEe,m9r),e(R3,f9r),e(R3,CY),e(CY,g9r),e(R3,h9r),e(ce,u9r),e(ce,P3),e(P3,REe),e(REe,p9r),e(P3,_9r),e(P3,wY),e(wY,b9r),e(P3,v9r),e(ce,F9r),e(ce,B3),e(B3,PEe),e(PEe,T9r),e(B3,M9r),e(B3,AY),e(AY,E9r),e(B3,C9r),e(ce,w9r),e(ce,I3),e(I3,BEe),e(BEe,A9r),e(I3,y9r),e(I3,yY),e(yY,L9r),e(I3,x9r),e(ce,$9r),e(ce,N3),e(N3,IEe),e(IEe,k9r),e(N3,S9r),e(N3,LY),e(LY,R9r),e(N3,P9r),e(ce,B9r),e(ce,q3),e(q3,NEe),e(NEe,I9r),e(q3,N9r),e(q3,xY),e(xY,q9r),e(q3,j9r),e(ce,D9r),e(ce,j3),e(j3,qEe),e(qEe,G9r),e(j3,O9r),e(j3,$Y),e($Y,V9r),e(j3,X9r),e(ce,z9r),e(ce,D3),e(D3,jEe),e(jEe,W9r),e(D3,Q9r),e(D3,kY),e(kY,H9r),e(D3,U9r),e(ce,J9r),e(ce,G3),e(G3,DEe),e(DEe,Y9r),e(G3,K9r),e(G3,SY),e(SY,Z9r),e(G3,exr),e(ce,oxr),e(ce,O3),e(O3,GEe),e(GEe,rxr),e(O3,txr),e(O3,RY),e(RY,axr),e(O3,nxr),e(ce,sxr),e(ce,V3),e(V3,OEe),e(OEe,lxr),e(V3,ixr),e(V3,PY),e(PY,dxr),e(V3,cxr),e(ce,mxr),e(ce,X3),e(X3,VEe),e(VEe,fxr),e(X3,gxr),e(X3,BY),e(BY,hxr),e(X3,uxr),e(ce,pxr),e(ce,z3),e(z3,XEe),e(XEe,_xr),e(z3,bxr),e(z3,IY),e(IY,vxr),e(z3,Fxr),e(ce,Txr),e(ce,W3),e(W3,zEe),e(zEe,Mxr),e(W3,Exr),e(W3,NY),e(NY,Cxr),e(W3,wxr),e(ce,Axr),e(ce,Q3),e(Q3,WEe),e(WEe,yxr),e(Q3,Lxr),e(Q3,qY),e(qY,xxr),e(Q3,$xr),e(ce,kxr),e(ce,H3),e(H3,QEe),e(QEe,Sxr),e(H3,Rxr),e(H3,jY),e(jY,Pxr),e(H3,Bxr),e(ce,Ixr),e(ce,U3),e(U3,HEe),e(HEe,Nxr),e(U3,qxr),e(U3,DY),e(DY,jxr),e(U3,Dxr),e(qr,Gxr),M(J3,qr,null),b(m,WGe,_),b(m,Pc,_),e(Pc,Y3),e(Y3,UEe),M(tx,UEe,null),e(Pc,Oxr),e(Pc,JEe),e(JEe,Vxr),b(m,QGe,_),b(m,mr,_),M(ax,mr,null),e(mr,Xxr),e(mr,Bc),e(Bc,zxr),e(Bc,GY),e(GY,Wxr),e(Bc,Qxr),e(Bc,OY),e(OY,Hxr),e(Bc,Uxr),e(mr,Jxr),e(mr,nx),e(nx,Yxr),e(nx,YEe),e(YEe,Kxr),e(nx,Zxr),e(mr,e$r),e(mr,Ot),M(sx,Ot,null),e(Ot,o$r),e(Ot,KEe),e(KEe,r$r),e(Ot,t$r),e(Ot,Ic),e(Ic,a$r),e(Ic,ZEe),e(ZEe,n$r),e(Ic,s$r),e(Ic,VY),e(VY,l$r),e(Ic,i$r),e(Ot,d$r),M(K3,Ot,null),e(mr,c$r),e(mr,jr),M(lx,jr,null),e(jr,m$r),e(jr,eCe),e(eCe,f$r),e(jr,g$r),e(jr,_n),e(_n,h$r),e(_n,oCe),e(oCe,u$r),e(_n,p$r),e(_n,rCe),e(rCe,_$r),e(_n,b$r),e(_n,tCe),e(tCe,v$r),e(_n,F$r),e(jr,T$r),e(jr,aCe),e(aCe,Z3),e(Z3,nCe),e(nCe,M$r),e(Z3,E$r),e(Z3,XY),e(XY,C$r),e(Z3,w$r),e(jr,A$r),M(ew,jr,null),b(m,HGe,_),b(m,Nc,_),e(Nc,ow),e(ow,sCe),M(ix,sCe,null),e(Nc,y$r),e(Nc,lCe),e(lCe,L$r),b(m,UGe,_),b(m,fr,_),M(dx,fr,null),e(fr,x$r),e(fr,qc),e(qc,$$r),e(qc,zY),e(zY,k$r),e(qc,S$r),e(qc,WY),e(WY,R$r),e(qc,P$r),e(fr,B$r),e(fr,cx),e(cx,I$r),e(cx,iCe),e(iCe,N$r),e(cx,q$r),e(fr,j$r),e(fr,Vt),M(mx,Vt,null),e(Vt,D$r),e(Vt,dCe),e(dCe,G$r),e(Vt,O$r),e(Vt,jc),e(jc,V$r),e(jc,cCe),e(cCe,X$r),e(jc,z$r),e(jc,QY),e(QY,W$r),e(jc,Q$r),e(Vt,H$r),M(rw,Vt,null),e(fr,U$r),e(fr,Dr),M(fx,Dr,null),e(Dr,J$r),e(Dr,mCe),e(mCe,Y$r),e(Dr,K$r),e(Dr,bn),e(bn,Z$r),e(bn,fCe),e(fCe,ekr),e(bn,okr),e(bn,gCe),e(gCe,rkr),e(bn,tkr),e(bn,hCe),e(hCe,akr),e(bn,nkr),e(Dr,skr),e(Dr,uCe),e(uCe,tw),e(tw,pCe),e(pCe,lkr),e(tw,ikr),e(tw,HY),e(HY,dkr),e(tw,ckr),e(Dr,mkr),M(aw,Dr,null),b(m,JGe,_),b(m,Dc,_),e(Dc,nw),e(nw,_Ce),M(gx,_Ce,null),e(Dc,fkr),e(Dc,bCe),e(bCe,gkr),b(m,YGe,_),b(m,gr,_),M(hx,gr,null),e(gr,hkr),e(gr,Gc),e(Gc,ukr),e(Gc,UY),e(UY,pkr),e(Gc,_kr),e(Gc,JY),e(JY,bkr),e(Gc,vkr),e(gr,Fkr),e(gr,ux),e(ux,Tkr),e(ux,vCe),e(vCe,Mkr),e(ux,Ekr),e(gr,Ckr),e(gr,Xt),M(px,Xt,null),e(Xt,wkr),e(Xt,FCe),e(FCe,Akr),e(Xt,ykr),e(Xt,Oc),e(Oc,Lkr),e(Oc,TCe),e(TCe,xkr),e(Oc,$kr),e(Oc,YY),e(YY,kkr),e(Oc,Skr),e(Xt,Rkr),M(sw,Xt,null),e(gr,Pkr),e(gr,Gr),M(_x,Gr,null),e(Gr,Bkr),e(Gr,MCe),e(MCe,Ikr),e(Gr,Nkr),e(Gr,vn),e(vn,qkr),e(vn,ECe),e(ECe,jkr),e(vn,Dkr),e(vn,CCe),e(CCe,Gkr),e(vn,Okr),e(vn,wCe),e(wCe,Vkr),e(vn,Xkr),e(Gr,zkr),e(Gr,te),e(te,lw),e(lw,ACe),e(ACe,Wkr),e(lw,Qkr),e(lw,KY),e(KY,Hkr),e(lw,Ukr),e(te,Jkr),e(te,iw),e(iw,yCe),e(yCe,Ykr),e(iw,Kkr),e(iw,ZY),e(ZY,Zkr),e(iw,eSr),e(te,oSr),e(te,dw),e(dw,LCe),e(LCe,rSr),e(dw,tSr),e(dw,eK),e(eK,aSr),e(dw,nSr),e(te,sSr),e(te,cw),e(cw,xCe),e(xCe,lSr),e(cw,iSr),e(cw,oK),e(oK,dSr),e(cw,cSr),e(te,mSr),e(te,mw),e(mw,$Ce),e($Ce,fSr),e(mw,gSr),e(mw,rK),e(rK,hSr),e(mw,uSr),e(te,pSr),e(te,fw),e(fw,kCe),e(kCe,_Sr),e(fw,bSr),e(fw,tK),e(tK,vSr),e(fw,FSr),e(te,TSr),e(te,gw),e(gw,SCe),e(SCe,MSr),e(gw,ESr),e(gw,aK),e(aK,CSr),e(gw,wSr),e(te,ASr),e(te,hw),e(hw,RCe),e(RCe,ySr),e(hw,LSr),e(hw,nK),e(nK,xSr),e(hw,$Sr),e(te,kSr),e(te,uw),e(uw,PCe),e(PCe,SSr),e(uw,RSr),e(uw,sK),e(sK,PSr),e(uw,BSr),e(te,ISr),e(te,pw),e(pw,BCe),e(BCe,NSr),e(pw,qSr),e(pw,lK),e(lK,jSr),e(pw,DSr),e(te,GSr),e(te,_w),e(_w,ICe),e(ICe,OSr),e(_w,VSr),e(_w,iK),e(iK,XSr),e(_w,zSr),e(te,WSr),e(te,bw),e(bw,NCe),e(NCe,QSr),e(bw,HSr),e(bw,dK),e(dK,USr),e(bw,JSr),e(te,YSr),e(te,vw),e(vw,qCe),e(qCe,KSr),e(vw,ZSr),e(vw,cK),e(cK,eRr),e(vw,oRr),e(te,rRr),e(te,Fw),e(Fw,jCe),e(jCe,tRr),e(Fw,aRr),e(Fw,mK),e(mK,nRr),e(Fw,sRr),e(te,lRr),e(te,Tw),e(Tw,DCe),e(DCe,iRr),e(Tw,dRr),e(Tw,fK),e(fK,cRr),e(Tw,mRr),e(te,fRr),e(te,Mw),e(Mw,GCe),e(GCe,gRr),e(Mw,hRr),e(Mw,gK),e(gK,uRr),e(Mw,pRr),e(te,_Rr),e(te,Ew),e(Ew,OCe),e(OCe,bRr),e(Ew,vRr),e(Ew,hK),e(hK,FRr),e(Ew,TRr),e(te,MRr),e(te,Cw),e(Cw,VCe),e(VCe,ERr),e(Cw,CRr),e(Cw,uK),e(uK,wRr),e(Cw,ARr),e(te,yRr),e(te,ww),e(ww,XCe),e(XCe,LRr),e(ww,xRr),e(ww,pK),e(pK,$Rr),e(ww,kRr),e(te,SRr),e(te,Aw),e(Aw,zCe),e(zCe,RRr),e(Aw,PRr),e(Aw,_K),e(_K,BRr),e(Aw,IRr),e(te,NRr),e(te,yw),e(yw,WCe),e(WCe,qRr),e(yw,jRr),e(yw,bK),e(bK,DRr),e(yw,GRr),e(te,ORr),e(te,Lw),e(Lw,QCe),e(QCe,VRr),e(Lw,XRr),e(Lw,vK),e(vK,zRr),e(Lw,WRr),e(te,QRr),e(te,xw),e(xw,HCe),e(HCe,HRr),e(xw,URr),e(xw,FK),e(FK,JRr),e(xw,YRr),e(te,KRr),e(te,$w),e($w,UCe),e(UCe,ZRr),e($w,ePr),e($w,TK),e(TK,oPr),e($w,rPr),e(te,tPr),e(te,kw),e(kw,JCe),e(JCe,aPr),e(kw,nPr),e(kw,MK),e(MK,sPr),e(kw,lPr),e(te,iPr),e(te,Sw),e(Sw,YCe),e(YCe,dPr),e(Sw,cPr),e(Sw,EK),e(EK,mPr),e(Sw,fPr),e(Gr,gPr),M(Rw,Gr,null),b(m,KGe,_),b(m,Vc,_),e(Vc,Pw),e(Pw,KCe),M(bx,KCe,null),e(Vc,hPr),e(Vc,ZCe),e(ZCe,uPr),b(m,ZGe,_),b(m,hr,_),M(vx,hr,null),e(hr,pPr),e(hr,Xc),e(Xc,_Pr),e(Xc,CK),e(CK,bPr),e(Xc,vPr),e(Xc,wK),e(wK,FPr),e(Xc,TPr),e(hr,MPr),e(hr,Fx),e(Fx,EPr),e(Fx,e5e),e(e5e,CPr),e(Fx,wPr),e(hr,APr),e(hr,zt),M(Tx,zt,null),e(zt,yPr),e(zt,o5e),e(o5e,LPr),e(zt,xPr),e(zt,zc),e(zc,$Pr),e(zc,r5e),e(r5e,kPr),e(zc,SPr),e(zc,AK),e(AK,RPr),e(zc,PPr),e(zt,BPr),M(Bw,zt,null),e(hr,IPr),e(hr,Or),M(Mx,Or,null),e(Or,NPr),e(Or,t5e),e(t5e,qPr),e(Or,jPr),e(Or,Fn),e(Fn,DPr),e(Fn,a5e),e(a5e,GPr),e(Fn,OPr),e(Fn,n5e),e(n5e,VPr),e(Fn,XPr),e(Fn,s5e),e(s5e,zPr),e(Fn,WPr),e(Or,QPr),e(Or,xe),e(xe,Iw),e(Iw,l5e),e(l5e,HPr),e(Iw,UPr),e(Iw,yK),e(yK,JPr),e(Iw,YPr),e(xe,KPr),e(xe,Nw),e(Nw,i5e),e(i5e,ZPr),e(Nw,eBr),e(Nw,LK),e(LK,oBr),e(Nw,rBr),e(xe,tBr),e(xe,qw),e(qw,d5e),e(d5e,aBr),e(qw,nBr),e(qw,xK),e(xK,sBr),e(qw,lBr),e(xe,iBr),e(xe,jw),e(jw,c5e),e(c5e,dBr),e(jw,cBr),e(jw,$K),e($K,mBr),e(jw,fBr),e(xe,gBr),e(xe,Dw),e(Dw,m5e),e(m5e,hBr),e(Dw,uBr),e(Dw,kK),e(kK,pBr),e(Dw,_Br),e(xe,bBr),e(xe,Gw),e(Gw,f5e),e(f5e,vBr),e(Gw,FBr),e(Gw,SK),e(SK,TBr),e(Gw,MBr),e(xe,EBr),e(xe,Ow),e(Ow,g5e),e(g5e,CBr),e(Ow,wBr),e(Ow,RK),e(RK,ABr),e(Ow,yBr),e(xe,LBr),e(xe,Vw),e(Vw,h5e),e(h5e,xBr),e(Vw,$Br),e(Vw,PK),e(PK,kBr),e(Vw,SBr),e(xe,RBr),e(xe,Xw),e(Xw,u5e),e(u5e,PBr),e(Xw,BBr),e(Xw,BK),e(BK,IBr),e(Xw,NBr),e(xe,qBr),e(xe,zw),e(zw,p5e),e(p5e,jBr),e(zw,DBr),e(zw,IK),e(IK,GBr),e(zw,OBr),e(Or,VBr),M(Ww,Or,null),b(m,eOe,_),b(m,Wc,_),e(Wc,Qw),e(Qw,_5e),M(Ex,_5e,null),e(Wc,XBr),e(Wc,b5e),e(b5e,zBr),b(m,oOe,_),b(m,ur,_),M(Cx,ur,null),e(ur,WBr),e(ur,Qc),e(Qc,QBr),e(Qc,NK),e(NK,HBr),e(Qc,UBr),e(Qc,qK),e(qK,JBr),e(Qc,YBr),e(ur,KBr),e(ur,wx),e(wx,ZBr),e(wx,v5e),e(v5e,eIr),e(wx,oIr),e(ur,rIr),e(ur,Wt),M(Ax,Wt,null),e(Wt,tIr),e(Wt,F5e),e(F5e,aIr),e(Wt,nIr),e(Wt,Hc),e(Hc,sIr),e(Hc,T5e),e(T5e,lIr),e(Hc,iIr),e(Hc,jK),e(jK,dIr),e(Hc,cIr),e(Wt,mIr),M(Hw,Wt,null),e(ur,fIr),e(ur,Vr),M(yx,Vr,null),e(Vr,gIr),e(Vr,M5e),e(M5e,hIr),e(Vr,uIr),e(Vr,Tn),e(Tn,pIr),e(Tn,E5e),e(E5e,_Ir),e(Tn,bIr),e(Tn,C5e),e(C5e,vIr),e(Tn,FIr),e(Tn,w5e),e(w5e,TIr),e(Tn,MIr),e(Vr,EIr),e(Vr,Ee),e(Ee,Uw),e(Uw,A5e),e(A5e,CIr),e(Uw,wIr),e(Uw,DK),e(DK,AIr),e(Uw,yIr),e(Ee,LIr),e(Ee,Jw),e(Jw,y5e),e(y5e,xIr),e(Jw,$Ir),e(Jw,GK),e(GK,kIr),e(Jw,SIr),e(Ee,RIr),e(Ee,Yw),e(Yw,L5e),e(L5e,PIr),e(Yw,BIr),e(Yw,OK),e(OK,IIr),e(Yw,NIr),e(Ee,qIr),e(Ee,Kw),e(Kw,x5e),e(x5e,jIr),e(Kw,DIr),e(Kw,VK),e(VK,GIr),e(Kw,OIr),e(Ee,VIr),e(Ee,Zw),e(Zw,$5e),e($5e,XIr),e(Zw,zIr),e(Zw,XK),e(XK,WIr),e(Zw,QIr),e(Ee,HIr),e(Ee,e0),e(e0,k5e),e(k5e,UIr),e(e0,JIr),e(e0,zK),e(zK,YIr),e(e0,KIr),e(Ee,ZIr),e(Ee,o0),e(o0,S5e),e(S5e,eNr),e(o0,oNr),e(o0,WK),e(WK,rNr),e(o0,tNr),e(Ee,aNr),e(Ee,r0),e(r0,R5e),e(R5e,nNr),e(r0,sNr),e(r0,QK),e(QK,lNr),e(r0,iNr),e(Ee,dNr),e(Ee,t0),e(t0,P5e),e(P5e,cNr),e(t0,mNr),e(t0,HK),e(HK,fNr),e(t0,gNr),e(Ee,hNr),e(Ee,a0),e(a0,B5e),e(B5e,uNr),e(a0,pNr),e(a0,UK),e(UK,_Nr),e(a0,bNr),e(Ee,vNr),e(Ee,n0),e(n0,I5e),e(I5e,FNr),e(n0,TNr),e(n0,JK),e(JK,MNr),e(n0,ENr),e(Ee,CNr),e(Ee,s0),e(s0,N5e),e(N5e,wNr),e(s0,ANr),e(s0,YK),e(YK,yNr),e(s0,LNr),e(Vr,xNr),M(l0,Vr,null),b(m,rOe,_),b(m,Uc,_),e(Uc,i0),e(i0,q5e),M(Lx,q5e,null),e(Uc,$Nr),e(Uc,j5e),e(j5e,kNr),b(m,tOe,_),b(m,pr,_),M(xx,pr,null),e(pr,SNr),e(pr,Jc),e(Jc,RNr),e(Jc,KK),e(KK,PNr),e(Jc,BNr),e(Jc,ZK),e(ZK,INr),e(Jc,NNr),e(pr,qNr),e(pr,$x),e($x,jNr),e($x,D5e),e(D5e,DNr),e($x,GNr),e(pr,ONr),e(pr,Qt),M(kx,Qt,null),e(Qt,VNr),e(Qt,G5e),e(G5e,XNr),e(Qt,zNr),e(Qt,Yc),e(Yc,WNr),e(Yc,O5e),e(O5e,QNr),e(Yc,HNr),e(Yc,eZ),e(eZ,UNr),e(Yc,JNr),e(Qt,YNr),M(d0,Qt,null),e(pr,KNr),e(pr,Xr),M(Sx,Xr,null),e(Xr,ZNr),e(Xr,V5e),e(V5e,eqr),e(Xr,oqr),e(Xr,Mn),e(Mn,rqr),e(Mn,X5e),e(X5e,tqr),e(Mn,aqr),e(Mn,z5e),e(z5e,nqr),e(Mn,sqr),e(Mn,W5e),e(W5e,lqr),e(Mn,iqr),e(Xr,dqr),e(Xr,$e),e($e,c0),e(c0,Q5e),e(Q5e,cqr),e(c0,mqr),e(c0,oZ),e(oZ,fqr),e(c0,gqr),e($e,hqr),e($e,m0),e(m0,H5e),e(H5e,uqr),e(m0,pqr),e(m0,rZ),e(rZ,_qr),e(m0,bqr),e($e,vqr),e($e,f0),e(f0,U5e),e(U5e,Fqr),e(f0,Tqr),e(f0,tZ),e(tZ,Mqr),e(f0,Eqr),e($e,Cqr),e($e,g0),e(g0,J5e),e(J5e,wqr),e(g0,Aqr),e(g0,aZ),e(aZ,yqr),e(g0,Lqr),e($e,xqr),e($e,h0),e(h0,Y5e),e(Y5e,$qr),e(h0,kqr),e(h0,nZ),e(nZ,Sqr),e(h0,Rqr),e($e,Pqr),e($e,u0),e(u0,K5e),e(K5e,Bqr),e(u0,Iqr),e(u0,sZ),e(sZ,Nqr),e(u0,qqr),e($e,jqr),e($e,p0),e(p0,Z5e),e(Z5e,Dqr),e(p0,Gqr),e(p0,lZ),e(lZ,Oqr),e(p0,Vqr),e($e,Xqr),e($e,_0),e(_0,e3e),e(e3e,zqr),e(_0,Wqr),e(_0,iZ),e(iZ,Qqr),e(_0,Hqr),e($e,Uqr),e($e,b0),e(b0,o3e),e(o3e,Jqr),e(b0,Yqr),e(b0,dZ),e(dZ,Kqr),e(b0,Zqr),e($e,ejr),e($e,v0),e(v0,r3e),e(r3e,ojr),e(v0,rjr),e(v0,cZ),e(cZ,tjr),e(v0,ajr),e(Xr,njr),M(F0,Xr,null),b(m,aOe,_),b(m,Kc,_),e(Kc,T0),e(T0,t3e),M(Rx,t3e,null),e(Kc,sjr),e(Kc,a3e),e(a3e,ljr),b(m,nOe,_),b(m,_r,_),M(Px,_r,null),e(_r,ijr),e(_r,Zc),e(Zc,djr),e(Zc,mZ),e(mZ,cjr),e(Zc,mjr),e(Zc,fZ),e(fZ,fjr),e(Zc,gjr),e(_r,hjr),e(_r,Bx),e(Bx,ujr),e(Bx,n3e),e(n3e,pjr),e(Bx,_jr),e(_r,bjr),e(_r,Ht),M(Ix,Ht,null),e(Ht,vjr),e(Ht,s3e),e(s3e,Fjr),e(Ht,Tjr),e(Ht,em),e(em,Mjr),e(em,l3e),e(l3e,Ejr),e(em,Cjr),e(em,gZ),e(gZ,wjr),e(em,Ajr),e(Ht,yjr),M(M0,Ht,null),e(_r,Ljr),e(_r,zr),M(Nx,zr,null),e(zr,xjr),e(zr,i3e),e(i3e,$jr),e(zr,kjr),e(zr,En),e(En,Sjr),e(En,d3e),e(d3e,Rjr),e(En,Pjr),e(En,c3e),e(c3e,Bjr),e(En,Ijr),e(En,m3e),e(m3e,Njr),e(En,qjr),e(zr,jjr),e(zr,Pe),e(Pe,E0),e(E0,f3e),e(f3e,Djr),e(E0,Gjr),e(E0,hZ),e(hZ,Ojr),e(E0,Vjr),e(Pe,Xjr),e(Pe,C0),e(C0,g3e),e(g3e,zjr),e(C0,Wjr),e(C0,uZ),e(uZ,Qjr),e(C0,Hjr),e(Pe,Ujr),e(Pe,w0),e(w0,h3e),e(h3e,Jjr),e(w0,Yjr),e(w0,pZ),e(pZ,Kjr),e(w0,Zjr),e(Pe,eDr),e(Pe,A0),e(A0,u3e),e(u3e,oDr),e(A0,rDr),e(A0,_Z),e(_Z,tDr),e(A0,aDr),e(Pe,nDr),e(Pe,y0),e(y0,p3e),e(p3e,sDr),e(y0,lDr),e(y0,bZ),e(bZ,iDr),e(y0,dDr),e(Pe,cDr),e(Pe,L0),e(L0,_3e),e(_3e,mDr),e(L0,fDr),e(L0,vZ),e(vZ,gDr),e(L0,hDr),e(Pe,uDr),e(Pe,x0),e(x0,b3e),e(b3e,pDr),e(x0,_Dr),e(x0,FZ),e(FZ,bDr),e(x0,vDr),e(Pe,FDr),e(Pe,$0),e($0,v3e),e(v3e,TDr),e($0,MDr),e($0,TZ),e(TZ,EDr),e($0,CDr),e(Pe,wDr),e(Pe,k0),e(k0,F3e),e(F3e,ADr),e(k0,yDr),e(k0,MZ),e(MZ,LDr),e(k0,xDr),e(zr,$Dr),M(S0,zr,null),b(m,sOe,_),b(m,om,_),e(om,R0),e(R0,T3e),M(qx,T3e,null),e(om,kDr),e(om,M3e),e(M3e,SDr),b(m,lOe,_),b(m,br,_),M(jx,br,null),e(br,RDr),e(br,rm),e(rm,PDr),e(rm,EZ),e(EZ,BDr),e(rm,IDr),e(rm,CZ),e(CZ,NDr),e(rm,qDr),e(br,jDr),e(br,Dx),e(Dx,DDr),e(Dx,E3e),e(E3e,GDr),e(Dx,ODr),e(br,VDr),e(br,Ut),M(Gx,Ut,null),e(Ut,XDr),e(Ut,C3e),e(C3e,zDr),e(Ut,WDr),e(Ut,tm),e(tm,QDr),e(tm,w3e),e(w3e,HDr),e(tm,UDr),e(tm,wZ),e(wZ,JDr),e(tm,YDr),e(Ut,KDr),M(P0,Ut,null),e(br,ZDr),e(br,Wr),M(Ox,Wr,null),e(Wr,eGr),e(Wr,A3e),e(A3e,oGr),e(Wr,rGr),e(Wr,Cn),e(Cn,tGr),e(Cn,y3e),e(y3e,aGr),e(Cn,nGr),e(Cn,L3e),e(L3e,sGr),e(Cn,lGr),e(Cn,x3e),e(x3e,iGr),e(Cn,dGr),e(Wr,cGr),e(Wr,ke),e(ke,B0),e(B0,$3e),e($3e,mGr),e(B0,fGr),e(B0,AZ),e(AZ,gGr),e(B0,hGr),e(ke,uGr),e(ke,I0),e(I0,k3e),e(k3e,pGr),e(I0,_Gr),e(I0,yZ),e(yZ,bGr),e(I0,vGr),e(ke,FGr),e(ke,N0),e(N0,S3e),e(S3e,TGr),e(N0,MGr),e(N0,LZ),e(LZ,EGr),e(N0,CGr),e(ke,wGr),e(ke,q0),e(q0,R3e),e(R3e,AGr),e(q0,yGr),e(q0,xZ),e(xZ,LGr),e(q0,xGr),e(ke,$Gr),e(ke,j0),e(j0,P3e),e(P3e,kGr),e(j0,SGr),e(j0,$Z),e($Z,RGr),e(j0,PGr),e(ke,BGr),e(ke,D0),e(D0,B3e),e(B3e,IGr),e(D0,NGr),e(D0,kZ),e(kZ,qGr),e(D0,jGr),e(ke,DGr),e(ke,G0),e(G0,I3e),e(I3e,GGr),e(G0,OGr),e(G0,SZ),e(SZ,VGr),e(G0,XGr),e(ke,zGr),e(ke,O0),e(O0,N3e),e(N3e,WGr),e(O0,QGr),e(O0,RZ),e(RZ,HGr),e(O0,UGr),e(ke,JGr),e(ke,V0),e(V0,q3e),e(q3e,YGr),e(V0,KGr),e(V0,PZ),e(PZ,ZGr),e(V0,eOr),e(ke,oOr),e(ke,X0),e(X0,j3e),e(j3e,rOr),e(X0,tOr),e(X0,BZ),e(BZ,aOr),e(X0,nOr),e(Wr,sOr),M(z0,Wr,null),b(m,iOe,_),b(m,am,_),e(am,W0),e(W0,D3e),M(Vx,D3e,null),e(am,lOr),e(am,G3e),e(G3e,iOr),b(m,dOe,_),b(m,vr,_),M(Xx,vr,null),e(vr,dOr),e(vr,nm),e(nm,cOr),e(nm,IZ),e(IZ,mOr),e(nm,fOr),e(nm,NZ),e(NZ,gOr),e(nm,hOr),e(vr,uOr),e(vr,zx),e(zx,pOr),e(zx,O3e),e(O3e,_Or),e(zx,bOr),e(vr,vOr),e(vr,Jt),M(Wx,Jt,null),e(Jt,FOr),e(Jt,V3e),e(V3e,TOr),e(Jt,MOr),e(Jt,sm),e(sm,EOr),e(sm,X3e),e(X3e,COr),e(sm,wOr),e(sm,qZ),e(qZ,AOr),e(sm,yOr),e(Jt,LOr),M(Q0,Jt,null),e(vr,xOr),e(vr,Qr),M(Qx,Qr,null),e(Qr,$Or),e(Qr,z3e),e(z3e,kOr),e(Qr,SOr),e(Qr,wn),e(wn,ROr),e(wn,W3e),e(W3e,POr),e(wn,BOr),e(wn,Q3e),e(Q3e,IOr),e(wn,NOr),e(wn,H3e),e(H3e,qOr),e(wn,jOr),e(Qr,DOr),e(Qr,Se),e(Se,H0),e(H0,U3e),e(U3e,GOr),e(H0,OOr),e(H0,jZ),e(jZ,VOr),e(H0,XOr),e(Se,zOr),e(Se,U0),e(U0,J3e),e(J3e,WOr),e(U0,QOr),e(U0,DZ),e(DZ,HOr),e(U0,UOr),e(Se,JOr),e(Se,J0),e(J0,Y3e),e(Y3e,YOr),e(J0,KOr),e(J0,GZ),e(GZ,ZOr),e(J0,eVr),e(Se,oVr),e(Se,Y0),e(Y0,K3e),e(K3e,rVr),e(Y0,tVr),e(Y0,OZ),e(OZ,aVr),e(Y0,nVr),e(Se,sVr),e(Se,K0),e(K0,Z3e),e(Z3e,lVr),e(K0,iVr),e(K0,VZ),e(VZ,dVr),e(K0,cVr),e(Se,mVr),e(Se,Z0),e(Z0,ewe),e(ewe,fVr),e(Z0,gVr),e(Z0,XZ),e(XZ,hVr),e(Z0,uVr),e(Se,pVr),e(Se,eA),e(eA,owe),e(owe,_Vr),e(eA,bVr),e(eA,zZ),e(zZ,vVr),e(eA,FVr),e(Se,TVr),e(Se,oA),e(oA,rwe),e(rwe,MVr),e(oA,EVr),e(oA,WZ),e(WZ,CVr),e(oA,wVr),e(Se,AVr),e(Se,rA),e(rA,twe),e(twe,yVr),e(rA,LVr),e(rA,QZ),e(QZ,xVr),e(rA,$Vr),e(Se,kVr),e(Se,tA),e(tA,awe),e(awe,SVr),e(tA,RVr),e(tA,HZ),e(HZ,PVr),e(tA,BVr),e(Qr,IVr),M(aA,Qr,null),b(m,cOe,_),b(m,lm,_),e(lm,nA),e(nA,nwe),M(Hx,nwe,null),e(lm,NVr),e(lm,swe),e(swe,qVr),b(m,mOe,_),b(m,Fr,_),M(Ux,Fr,null),e(Fr,jVr),e(Fr,im),e(im,DVr),e(im,UZ),e(UZ,GVr),e(im,OVr),e(im,JZ),e(JZ,VVr),e(im,XVr),e(Fr,zVr),e(Fr,Jx),e(Jx,WVr),e(Jx,lwe),e(lwe,QVr),e(Jx,HVr),e(Fr,UVr),e(Fr,Yt),M(Yx,Yt,null),e(Yt,JVr),e(Yt,iwe),e(iwe,YVr),e(Yt,KVr),e(Yt,dm),e(dm,ZVr),e(dm,dwe),e(dwe,eXr),e(dm,oXr),e(dm,YZ),e(YZ,rXr),e(dm,tXr),e(Yt,aXr),M(sA,Yt,null),e(Fr,nXr),e(Fr,Hr),M(Kx,Hr,null),e(Hr,sXr),e(Hr,cwe),e(cwe,lXr),e(Hr,iXr),e(Hr,An),e(An,dXr),e(An,mwe),e(mwe,cXr),e(An,mXr),e(An,fwe),e(fwe,fXr),e(An,gXr),e(An,gwe),e(gwe,hXr),e(An,uXr),e(Hr,pXr),e(Hr,Oe),e(Oe,lA),e(lA,hwe),e(hwe,_Xr),e(lA,bXr),e(lA,KZ),e(KZ,vXr),e(lA,FXr),e(Oe,TXr),e(Oe,iA),e(iA,uwe),e(uwe,MXr),e(iA,EXr),e(iA,ZZ),e(ZZ,CXr),e(iA,wXr),e(Oe,AXr),e(Oe,dA),e(dA,pwe),e(pwe,yXr),e(dA,LXr),e(dA,eee),e(eee,xXr),e(dA,$Xr),e(Oe,kXr),e(Oe,cA),e(cA,_we),e(_we,SXr),e(cA,RXr),e(cA,oee),e(oee,PXr),e(cA,BXr),e(Oe,IXr),e(Oe,mA),e(mA,bwe),e(bwe,NXr),e(mA,qXr),e(mA,ree),e(ree,jXr),e(mA,DXr),e(Oe,GXr),e(Oe,fA),e(fA,vwe),e(vwe,OXr),e(fA,VXr),e(fA,tee),e(tee,XXr),e(fA,zXr),e(Oe,WXr),e(Oe,gA),e(gA,Fwe),e(Fwe,QXr),e(gA,HXr),e(gA,aee),e(aee,UXr),e(gA,JXr),e(Oe,YXr),e(Oe,hA),e(hA,Twe),e(Twe,KXr),e(hA,ZXr),e(hA,nee),e(nee,ezr),e(hA,ozr),e(Hr,rzr),M(uA,Hr,null),b(m,fOe,_),b(m,cm,_),e(cm,pA),e(pA,Mwe),M(Zx,Mwe,null),e(cm,tzr),e(cm,Ewe),e(Ewe,azr),b(m,gOe,_),b(m,Tr,_),M(e$,Tr,null),e(Tr,nzr),e(Tr,mm),e(mm,szr),e(mm,see),e(see,lzr),e(mm,izr),e(mm,lee),e(lee,dzr),e(mm,czr),e(Tr,mzr),e(Tr,o$),e(o$,fzr),e(o$,Cwe),e(Cwe,gzr),e(o$,hzr),e(Tr,uzr),e(Tr,Kt),M(r$,Kt,null),e(Kt,pzr),e(Kt,wwe),e(wwe,_zr),e(Kt,bzr),e(Kt,fm),e(fm,vzr),e(fm,Awe),e(Awe,Fzr),e(fm,Tzr),e(fm,iee),e(iee,Mzr),e(fm,Ezr),e(Kt,Czr),M(_A,Kt,null),e(Tr,wzr),e(Tr,Ur),M(t$,Ur,null),e(Ur,Azr),e(Ur,ywe),e(ywe,yzr),e(Ur,Lzr),e(Ur,yn),e(yn,xzr),e(yn,Lwe),e(Lwe,$zr),e(yn,kzr),e(yn,xwe),e(xwe,Szr),e(yn,Rzr),e(yn,$we),e($we,Pzr),e(yn,Bzr),e(Ur,Izr),e(Ur,Ve),e(Ve,bA),e(bA,kwe),e(kwe,Nzr),e(bA,qzr),e(bA,dee),e(dee,jzr),e(bA,Dzr),e(Ve,Gzr),e(Ve,vA),e(vA,Swe),e(Swe,Ozr),e(vA,Vzr),e(vA,cee),e(cee,Xzr),e(vA,zzr),e(Ve,Wzr),e(Ve,FA),e(FA,Rwe),e(Rwe,Qzr),e(FA,Hzr),e(FA,mee),e(mee,Uzr),e(FA,Jzr),e(Ve,Yzr),e(Ve,TA),e(TA,Pwe),e(Pwe,Kzr),e(TA,Zzr),e(TA,fee),e(fee,eWr),e(TA,oWr),e(Ve,rWr),e(Ve,MA),e(MA,Bwe),e(Bwe,tWr),e(MA,aWr),e(MA,gee),e(gee,nWr),e(MA,sWr),e(Ve,lWr),e(Ve,EA),e(EA,Iwe),e(Iwe,iWr),e(EA,dWr),e(EA,hee),e(hee,cWr),e(EA,mWr),e(Ve,fWr),e(Ve,CA),e(CA,Nwe),e(Nwe,gWr),e(CA,hWr),e(CA,uee),e(uee,uWr),e(CA,pWr),e(Ve,_Wr),e(Ve,wA),e(wA,qwe),e(qwe,bWr),e(wA,vWr),e(wA,pee),e(pee,FWr),e(wA,TWr),e(Ur,MWr),M(AA,Ur,null),b(m,hOe,_),b(m,gm,_),e(gm,yA),e(yA,jwe),M(a$,jwe,null),e(gm,EWr),e(gm,Dwe),e(Dwe,CWr),b(m,uOe,_),b(m,Mr,_),M(n$,Mr,null),e(Mr,wWr),e(Mr,hm),e(hm,AWr),e(hm,_ee),e(_ee,yWr),e(hm,LWr),e(hm,bee),e(bee,xWr),e(hm,$Wr),e(Mr,kWr),e(Mr,s$),e(s$,SWr),e(s$,Gwe),e(Gwe,RWr),e(s$,PWr),e(Mr,BWr),e(Mr,Zt),M(l$,Zt,null),e(Zt,IWr),e(Zt,Owe),e(Owe,NWr),e(Zt,qWr),e(Zt,um),e(um,jWr),e(um,Vwe),e(Vwe,DWr),e(um,GWr),e(um,vee),e(vee,OWr),e(um,VWr),e(Zt,XWr),M(LA,Zt,null),e(Mr,zWr),e(Mr,Jr),M(i$,Jr,null),e(Jr,WWr),e(Jr,Xwe),e(Xwe,QWr),e(Jr,HWr),e(Jr,Ln),e(Ln,UWr),e(Ln,zwe),e(zwe,JWr),e(Ln,YWr),e(Ln,Wwe),e(Wwe,KWr),e(Ln,ZWr),e(Ln,Qwe),e(Qwe,eQr),e(Ln,oQr),e(Jr,rQr),e(Jr,Hwe),e(Hwe,xA),e(xA,Uwe),e(Uwe,tQr),e(xA,aQr),e(xA,Fee),e(Fee,nQr),e(xA,sQr),e(Jr,lQr),M($A,Jr,null),b(m,pOe,_),b(m,pm,_),e(pm,kA),e(kA,Jwe),M(d$,Jwe,null),e(pm,iQr),e(pm,Ywe),e(Ywe,dQr),b(m,_Oe,_),b(m,Er,_),M(c$,Er,null),e(Er,cQr),e(Er,_m),e(_m,mQr),e(_m,Tee),e(Tee,fQr),e(_m,gQr),e(_m,Mee),e(Mee,hQr),e(_m,uQr),e(Er,pQr),e(Er,m$),e(m$,_Qr),e(m$,Kwe),e(Kwe,bQr),e(m$,vQr),e(Er,FQr),e(Er,ea),M(f$,ea,null),e(ea,TQr),e(ea,Zwe),e(Zwe,MQr),e(ea,EQr),e(ea,bm),e(bm,CQr),e(bm,e0e),e(e0e,wQr),e(bm,AQr),e(bm,Eee),e(Eee,yQr),e(bm,LQr),e(ea,xQr),M(SA,ea,null),e(Er,$Qr),e(Er,Yr),M(g$,Yr,null),e(Yr,kQr),e(Yr,o0e),e(o0e,SQr),e(Yr,RQr),e(Yr,xn),e(xn,PQr),e(xn,r0e),e(r0e,BQr),e(xn,IQr),e(xn,t0e),e(t0e,NQr),e(xn,qQr),e(xn,a0e),e(a0e,jQr),e(xn,DQr),e(Yr,GQr),e(Yr,h$),e(h$,RA),e(RA,n0e),e(n0e,OQr),e(RA,VQr),e(RA,Cee),e(Cee,XQr),e(RA,zQr),e(h$,WQr),e(h$,PA),e(PA,s0e),e(s0e,QQr),e(PA,HQr),e(PA,wee),e(wee,UQr),e(PA,JQr),e(Yr,YQr),M(BA,Yr,null),b(m,bOe,_),b(m,vm,_),e(vm,IA),e(IA,l0e),M(u$,l0e,null),e(vm,KQr),e(vm,i0e),e(i0e,ZQr),b(m,vOe,_),b(m,Cr,_),M(p$,Cr,null),e(Cr,eHr),e(Cr,Fm),e(Fm,oHr),e(Fm,Aee),e(Aee,rHr),e(Fm,tHr),e(Fm,yee),e(yee,aHr),e(Fm,nHr),e(Cr,sHr),e(Cr,_$),e(_$,lHr),e(_$,d0e),e(d0e,iHr),e(_$,dHr),e(Cr,cHr),e(Cr,oa),M(b$,oa,null),e(oa,mHr),e(oa,c0e),e(c0e,fHr),e(oa,gHr),e(oa,Tm),e(Tm,hHr),e(Tm,m0e),e(m0e,uHr),e(Tm,pHr),e(Tm,Lee),e(Lee,_Hr),e(Tm,bHr),e(oa,vHr),M(NA,oa,null),e(Cr,FHr),e(Cr,Kr),M(v$,Kr,null),e(Kr,THr),e(Kr,f0e),e(f0e,MHr),e(Kr,EHr),e(Kr,$n),e($n,CHr),e($n,g0e),e(g0e,wHr),e($n,AHr),e($n,h0e),e(h0e,yHr),e($n,LHr),e($n,u0e),e(u0e,xHr),e($n,$Hr),e(Kr,kHr),e(Kr,p0e),e(p0e,qA),e(qA,_0e),e(_0e,SHr),e(qA,RHr),e(qA,xee),e(xee,PHr),e(qA,BHr),e(Kr,IHr),M(jA,Kr,null),FOe=!0},p(m,[_]){const F$={};_&2&&(F$.$$scope={dirty:_,ctx:m}),$m.$set(F$);const b0e={};_&2&&(b0e.$$scope={dirty:_,ctx:m}),Ng.$set(b0e);const v0e={};_&2&&(v0e.$$scope={dirty:_,ctx:m}),vh.$set(v0e);const F0e={};_&2&&(F0e.$$scope={dirty:_,ctx:m}),eu.$set(F0e);const T$={};_&2&&(T$.$$scope={dirty:_,ctx:m}),ou.$set(T$);const T0e={};_&2&&(T0e.$$scope={dirty:_,ctx:m}),Tu.$set(T0e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:m}),Mu.$set(kn);const M0e={};_&2&&(M0e.$$scope={dirty:_,ctx:m}),wu.$set(M0e);const E0e={};_&2&&(E0e.$$scope={dirty:_,ctx:m}),E_.$set(E0e);const C0e={};_&2&&(C0e.$$scope={dirty:_,ctx:m}),w_.$set(C0e);const M$={};_&2&&(M$.$$scope={dirty:_,ctx:m}),pb.$set(M$);const w0e={};_&2&&(w0e.$$scope={dirty:_,ctx:m}),bb.$set(w0e);const E$={};_&2&&(E$.$$scope={dirty:_,ctx:m}),a2.$set(E$);const A0e={};_&2&&(A0e.$$scope={dirty:_,ctx:m}),s2.$set(A0e);const C$={};_&2&&(C$.$$scope={dirty:_,ctx:m}),X2.$set(C$);const y0e={};_&2&&(y0e.$$scope={dirty:_,ctx:m}),W2.$set(y0e);const L0e={};_&2&&(L0e.$$scope={dirty:_,ctx:m}),cv.$set(L0e);const x0e={};_&2&&(x0e.$$scope={dirty:_,ctx:m}),fv.$set(x0e);const Mm={};_&2&&(Mm.$$scope={dirty:_,ctx:m}),lF.$set(Mm);const $0e={};_&2&&($0e.$$scope={dirty:_,ctx:m}),dF.$set($0e);const k0e={};_&2&&(k0e.$$scope={dirty:_,ctx:m}),DF.$set(k0e);const S0e={};_&2&&(S0e.$$scope={dirty:_,ctx:m}),OF.$set(S0e);const w$={};_&2&&(w$.$$scope={dirty:_,ctx:m}),UF.$set(w$);const R0e={};_&2&&(R0e.$$scope={dirty:_,ctx:m}),YF.$set(R0e);const P0e={};_&2&&(P0e.$$scope={dirty:_,ctx:m}),R1.$set(P0e);const B0e={};_&2&&(B0e.$$scope={dirty:_,ctx:m}),B1.$set(B0e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:m}),ET.$set(rt);const A$={};_&2&&(A$.$$scope={dirty:_,ctx:m}),wT.$set(A$);const I0e={};_&2&&(I0e.$$scope={dirty:_,ctx:m}),LT.$set(I0e);const y$={};_&2&&(y$.$$scope={dirty:_,ctx:m}),$T.$set(y$);const N0e={};_&2&&(N0e.$$scope={dirty:_,ctx:m}),XT.$set(N0e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:m}),WT.$set(tt);const q0e={};_&2&&(q0e.$$scope={dirty:_,ctx:m}),UT.$set(q0e);const Em={};_&2&&(Em.$$scope={dirty:_,ctx:m}),YT.$set(Em);const j0e={};_&2&&(j0e.$$scope={dirty:_,ctx:m}),eM.$set(j0e);const D0e={};_&2&&(D0e.$$scope={dirty:_,ctx:m}),rM.$set(D0e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),gM.$set(y);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),uM.$set(DA);const G0e={};_&2&&(G0e.$$scope={dirty:_,ctx:m}),MM.$set(G0e);const O0e={};_&2&&(O0e.$$scope={dirty:_,ctx:m}),CM.$set(O0e);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),IM.$set(GA);const V0e={};_&2&&(V0e.$$scope={dirty:_,ctx:m}),qM.$set(V0e);const X0e={};_&2&&(X0e.$$scope={dirty:_,ctx:m}),OM.$set(X0e);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),XM.$set(OA);const z0e={};_&2&&(z0e.$$scope={dirty:_,ctx:m}),YM.$set(z0e);const W0e={};_&2&&(W0e.$$scope={dirty:_,ctx:m}),ZM.$set(W0e);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),a4.$set(VA);const Q0e={};_&2&&(Q0e.$$scope={dirty:_,ctx:m}),s4.$set(Q0e);const H0e={};_&2&&(H0e.$$scope={dirty:_,ctx:m}),c4.$set(H0e);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),f4.$set(XA);const U0e={};_&2&&(U0e.$$scope={dirty:_,ctx:m}),u4.$set(U0e);const J0e={};_&2&&(J0e.$$scope={dirty:_,ctx:m}),_4.$set(J0e);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),E4.$set(zA);const Y0e={};_&2&&(Y0e.$$scope={dirty:_,ctx:m}),w4.$set(Y0e);const K0e={};_&2&&(K0e.$$scope={dirty:_,ctx:m}),L4.$set(K0e);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),$4.$set(WA);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:m}),EE.$set(Z0e);const eAe={};_&2&&(eAe.$$scope={dirty:_,ctx:m}),wE.$set(eAe);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),UE.$set(QA);const oAe={};_&2&&(oAe.$$scope={dirty:_,ctx:m}),YE.$set(oAe);const rAe={};_&2&&(rAe.$$scope={dirty:_,ctx:m}),mC.$set(rAe);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),gC.$set(HA);const tAe={};_&2&&(tAe.$$scope={dirty:_,ctx:m}),bC.$set(tAe);const aAe={};_&2&&(aAe.$$scope={dirty:_,ctx:m}),FC.$set(aAe);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),GC.$set(UA);const nAe={};_&2&&(nAe.$$scope={dirty:_,ctx:m}),VC.$set(nAe);const sAe={};_&2&&(sAe.$$scope={dirty:_,ctx:m}),e5.$set(sAe);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),r5.$set(JA);const lAe={};_&2&&(lAe.$$scope={dirty:_,ctx:m}),x5.$set(lAe);const iAe={};_&2&&(iAe.$$scope={dirty:_,ctx:m}),k5.$set(iAe);const YA={};_&2&&(YA.$$scope={dirty:_,ctx:m}),U5.$set(YA);const dAe={};_&2&&(dAe.$$scope={dirty:_,ctx:m}),Y5.$set(dAe);const cAe={};_&2&&(cAe.$$scope={dirty:_,ctx:m}),e3.$set(cAe);const KA={};_&2&&(KA.$$scope={dirty:_,ctx:m}),r3.$set(KA);const mAe={};_&2&&(mAe.$$scope={dirty:_,ctx:m}),a3.$set(mAe);const fAe={};_&2&&(fAe.$$scope={dirty:_,ctx:m}),s3.$set(fAe);const ZA={};_&2&&(ZA.$$scope={dirty:_,ctx:m}),y3.$set(ZA);const gAe={};_&2&&(gAe.$$scope={dirty:_,ctx:m}),x3.$set(gAe);const hAe={};_&2&&(hAe.$$scope={dirty:_,ctx:m}),J3.$set(hAe);const e6={};_&2&&(e6.$$scope={dirty:_,ctx:m}),K3.$set(e6);const uAe={};_&2&&(uAe.$$scope={dirty:_,ctx:m}),ew.$set(uAe);const pAe={};_&2&&(pAe.$$scope={dirty:_,ctx:m}),rw.$set(pAe);const o6={};_&2&&(o6.$$scope={dirty:_,ctx:m}),aw.$set(o6);const _Ae={};_&2&&(_Ae.$$scope={dirty:_,ctx:m}),sw.$set(_Ae);const bAe={};_&2&&(bAe.$$scope={dirty:_,ctx:m}),Rw.$set(bAe);const r6={};_&2&&(r6.$$scope={dirty:_,ctx:m}),Bw.$set(r6);const vAe={};_&2&&(vAe.$$scope={dirty:_,ctx:m}),Ww.$set(vAe);const FAe={};_&2&&(FAe.$$scope={dirty:_,ctx:m}),Hw.$set(FAe);const t6={};_&2&&(t6.$$scope={dirty:_,ctx:m}),l0.$set(t6);const TAe={};_&2&&(TAe.$$scope={dirty:_,ctx:m}),d0.$set(TAe);const MAe={};_&2&&(MAe.$$scope={dirty:_,ctx:m}),F0.$set(MAe);const a6={};_&2&&(a6.$$scope={dirty:_,ctx:m}),M0.$set(a6);const EAe={};_&2&&(EAe.$$scope={dirty:_,ctx:m}),S0.$set(EAe);const CAe={};_&2&&(CAe.$$scope={dirty:_,ctx:m}),P0.$set(CAe);const n6={};_&2&&(n6.$$scope={dirty:_,ctx:m}),z0.$set(n6);const wAe={};_&2&&(wAe.$$scope={dirty:_,ctx:m}),Q0.$set(wAe);const AAe={};_&2&&(AAe.$$scope={dirty:_,ctx:m}),aA.$set(AAe);const s6={};_&2&&(s6.$$scope={dirty:_,ctx:m}),sA.$set(s6);const yAe={};_&2&&(yAe.$$scope={dirty:_,ctx:m}),uA.$set(yAe);const LAe={};_&2&&(LAe.$$scope={dirty:_,ctx:m}),_A.$set(LAe);const l6={};_&2&&(l6.$$scope={dirty:_,ctx:m}),AA.$set(l6);const xAe={};_&2&&(xAe.$$scope={dirty:_,ctx:m}),LA.$set(xAe);const $Ae={};_&2&&($Ae.$$scope={dirty:_,ctx:m}),$A.$set($Ae);const i6={};_&2&&(i6.$$scope={dirty:_,ctx:m}),SA.$set(i6);const kAe={};_&2&&(kAe.$$scope={dirty:_,ctx:m}),BA.$set(kAe);const SAe={};_&2&&(SAe.$$scope={dirty:_,ctx:m}),NA.$set(SAe);const d6={};_&2&&(d6.$$scope={dirty:_,ctx:m}),jA.$set(d6)},i(m){FOe||(E(d.$$.fragment,m),E(La.$$.fragment,m),E(cL.$$.fragment,m),E(mL.$$.fragment,m),E($m.$$.fragment,m),E(fL.$$.fragment,m),E(gL.$$.fragment,m),E(pL.$$.fragment,m),E(Ng.$$.fragment,m),E(_L.$$.fragment,m),E(bL.$$.fragment,m),E(vL.$$.fragment,m),E(ML.$$.fragment,m),E(vh.$$.fragment,m),E(EL.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(LL.$$.fragment,m),E(eu.$$.fragment,m),E(ou.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(kL.$$.fragment,m),E(PL.$$.fragment,m),E(Tu.$$.fragment,m),E(Mu.$$.fragment,m),E(BL.$$.fragment,m),E(IL.$$.fragment,m),E(NL.$$.fragment,m),E(jL.$$.fragment,m),E(wu.$$.fragment,m),E(DL.$$.fragment,m),E(E_.$$.fragment,m),E(GL.$$.fragment,m),E(OL.$$.fragment,m),E(XL.$$.fragment,m),E(w_.$$.fragment,m),E(zL.$$.fragment,m),E(pb.$$.fragment,m),E(WL.$$.fragment,m),E(QL.$$.fragment,m),E(UL.$$.fragment,m),E(bb.$$.fragment,m),E(JL.$$.fragment,m),E(a2.$$.fragment,m),E(YL.$$.fragment,m),E(KL.$$.fragment,m),E(e7.$$.fragment,m),E(s2.$$.fragment,m),E(o7.$$.fragment,m),E(X2.$$.fragment,m),E(r7.$$.fragment,m),E(t7.$$.fragment,m),E(n7.$$.fragment,m),E(W2.$$.fragment,m),E(s7.$$.fragment,m),E(cv.$$.fragment,m),E(l7.$$.fragment,m),E(i7.$$.fragment,m),E(c7.$$.fragment,m),E(fv.$$.fragment,m),E(m7.$$.fragment,m),E(lF.$$.fragment,m),E(f7.$$.fragment,m),E(g7.$$.fragment,m),E(u7.$$.fragment,m),E(dF.$$.fragment,m),E(p7.$$.fragment,m),E(DF.$$.fragment,m),E(_7.$$.fragment,m),E(b7.$$.fragment,m),E(F7.$$.fragment,m),E(OF.$$.fragment,m),E(T7.$$.fragment,m),E(UF.$$.fragment,m),E(M7.$$.fragment,m),E(E7.$$.fragment,m),E(w7.$$.fragment,m),E(YF.$$.fragment,m),E(A7.$$.fragment,m),E(R1.$$.fragment,m),E(y7.$$.fragment,m),E(L7.$$.fragment,m),E($7.$$.fragment,m),E(B1.$$.fragment,m),E(k7.$$.fragment,m),E(ET.$$.fragment,m),E(S7.$$.fragment,m),E(R7.$$.fragment,m),E(B7.$$.fragment,m),E(wT.$$.fragment,m),E(I7.$$.fragment,m),E(LT.$$.fragment,m),E(N7.$$.fragment,m),E(q7.$$.fragment,m),E(D7.$$.fragment,m),E($T.$$.fragment,m),E(G7.$$.fragment,m),E(XT.$$.fragment,m),E(O7.$$.fragment,m),E(V7.$$.fragment,m),E(z7.$$.fragment,m),E(WT.$$.fragment,m),E(W7.$$.fragment,m),E(UT.$$.fragment,m),E(Q7.$$.fragment,m),E(H7.$$.fragment,m),E(J7.$$.fragment,m),E(YT.$$.fragment,m),E(Y7.$$.fragment,m),E(eM.$$.fragment,m),E(K7.$$.fragment,m),E(Z7.$$.fragment,m),E(o8.$$.fragment,m),E(rM.$$.fragment,m),E(r8.$$.fragment,m),E(gM.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(uM.$$.fragment,m),E(l8.$$.fragment,m),E(MM.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(CM.$$.fragment,m),E(f8.$$.fragment,m),E(IM.$$.fragment,m),E(g8.$$.fragment,m),E(h8.$$.fragment,m),E(p8.$$.fragment,m),E(qM.$$.fragment,m),E(_8.$$.fragment,m),E(OM.$$.fragment,m),E(v8.$$.fragment,m),E(F8.$$.fragment,m),E(M8.$$.fragment,m),E(XM.$$.fragment,m),E(E8.$$.fragment,m),E(YM.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(y8.$$.fragment,m),E(ZM.$$.fragment,m),E(L8.$$.fragment,m),E(a4.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(S8.$$.fragment,m),E(s4.$$.fragment,m),E(R8.$$.fragment,m),E(c4.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(q8.$$.fragment,m),E(f4.$$.fragment,m),E(j8.$$.fragment,m),E(u4.$$.fragment,m),E(D8.$$.fragment,m),E(G8.$$.fragment,m),E(V8.$$.fragment,m),E(_4.$$.fragment,m),E(X8.$$.fragment,m),E(E4.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(w4.$$.fragment,m),E(U8.$$.fragment,m),E(L4.$$.fragment,m),E(J8.$$.fragment,m),E(Y8.$$.fragment,m),E(Z8.$$.fragment,m),E($4.$$.fragment,m),E(e9.$$.fragment,m),E(EE.$$.fragment,m),E(o9.$$.fragment,m),E(r9.$$.fragment,m),E(a9.$$.fragment,m),E(wE.$$.fragment,m),E(n9.$$.fragment,m),E(UE.$$.fragment,m),E(s9.$$.fragment,m),E(l9.$$.fragment,m),E(d9.$$.fragment,m),E(YE.$$.fragment,m),E(c9.$$.fragment,m),E(mC.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E(gC.$$.fragment,m),E(u9.$$.fragment,m),E(bC.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(FC.$$.fragment,m),E(F9.$$.fragment,m),E(GC.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(VC.$$.fragment,m),E(w9.$$.fragment,m),E(e5.$$.fragment,m),E(A9.$$.fragment,m),E(y9.$$.fragment,m),E(x9.$$.fragment,m),E(r5.$$.fragment,m),E($9.$$.fragment,m),E(x5.$$.fragment,m),E(k9.$$.fragment,m),E(S9.$$.fragment,m),E(P9.$$.fragment,m),E(k5.$$.fragment,m),E(B9.$$.fragment,m),E(U5.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(j9.$$.fragment,m),E(Y5.$$.fragment,m),E(D9.$$.fragment,m),E(e3.$$.fragment,m),E(O9.$$.fragment,m),E(V9.$$.fragment,m),E(z9.$$.fragment,m),E(r3.$$.fragment,m),E(W9.$$.fragment,m),E(a3.$$.fragment,m),E(Q9.$$.fragment,m),E(H9.$$.fragment,m),E(J9.$$.fragment,m),E(s3.$$.fragment,m),E(Y9.$$.fragment,m),E(y3.$$.fragment,m),E(K9.$$.fragment,m),E(Z9.$$.fragment,m),E(ox.$$.fragment,m),E(x3.$$.fragment,m),E(rx.$$.fragment,m),E(J3.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(sx.$$.fragment,m),E(K3.$$.fragment,m),E(lx.$$.fragment,m),E(ew.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(mx.$$.fragment,m),E(rw.$$.fragment,m),E(fx.$$.fragment,m),E(aw.$$.fragment,m),E(gx.$$.fragment,m),E(hx.$$.fragment,m),E(px.$$.fragment,m),E(sw.$$.fragment,m),E(_x.$$.fragment,m),E(Rw.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E(Bw.$$.fragment,m),E(Mx.$$.fragment,m),E(Ww.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(Hw.$$.fragment,m),E(yx.$$.fragment,m),E(l0.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(d0.$$.fragment,m),E(Sx.$$.fragment,m),E(F0.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(M0.$$.fragment,m),E(Nx.$$.fragment,m),E(S0.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(Gx.$$.fragment,m),E(P0.$$.fragment,m),E(Ox.$$.fragment,m),E(z0.$$.fragment,m),E(Vx.$$.fragment,m),E(Xx.$$.fragment,m),E(Wx.$$.fragment,m),E(Q0.$$.fragment,m),E(Qx.$$.fragment,m),E(aA.$$.fragment,m),E(Hx.$$.fragment,m),E(Ux.$$.fragment,m),E(Yx.$$.fragment,m),E(sA.$$.fragment,m),E(Kx.$$.fragment,m),E(uA.$$.fragment,m),E(Zx.$$.fragment,m),E(e$.$$.fragment,m),E(r$.$$.fragment,m),E(_A.$$.fragment,m),E(t$.$$.fragment,m),E(AA.$$.fragment,m),E(a$.$$.fragment,m),E(n$.$$.fragment,m),E(l$.$$.fragment,m),E(LA.$$.fragment,m),E(i$.$$.fragment,m),E($A.$$.fragment,m),E(d$.$$.fragment,m),E(c$.$$.fragment,m),E(f$.$$.fragment,m),E(SA.$$.fragment,m),E(g$.$$.fragment,m),E(BA.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(NA.$$.fragment,m),E(v$.$$.fragment,m),E(jA.$$.fragment,m),FOe=!0)},o(m){C(d.$$.fragment,m),C(La.$$.fragment,m),C(cL.$$.fragment,m),C(mL.$$.fragment,m),C($m.$$.fragment,m),C(fL.$$.fragment,m),C(gL.$$.fragment,m),C(pL.$$.fragment,m),C(Ng.$$.fragment,m),C(_L.$$.fragment,m),C(bL.$$.fragment,m),C(vL.$$.fragment,m),C(ML.$$.fragment,m),C(vh.$$.fragment,m),C(EL.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(LL.$$.fragment,m),C(eu.$$.fragment,m),C(ou.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(kL.$$.fragment,m),C(PL.$$.fragment,m),C(Tu.$$.fragment,m),C(Mu.$$.fragment,m),C(BL.$$.fragment,m),C(IL.$$.fragment,m),C(NL.$$.fragment,m),C(jL.$$.fragment,m),C(wu.$$.fragment,m),C(DL.$$.fragment,m),C(E_.$$.fragment,m),C(GL.$$.fragment,m),C(OL.$$.fragment,m),C(XL.$$.fragment,m),C(w_.$$.fragment,m),C(zL.$$.fragment,m),C(pb.$$.fragment,m),C(WL.$$.fragment,m),C(QL.$$.fragment,m),C(UL.$$.fragment,m),C(bb.$$.fragment,m),C(JL.$$.fragment,m),C(a2.$$.fragment,m),C(YL.$$.fragment,m),C(KL.$$.fragment,m),C(e7.$$.fragment,m),C(s2.$$.fragment,m),C(o7.$$.fragment,m),C(X2.$$.fragment,m),C(r7.$$.fragment,m),C(t7.$$.fragment,m),C(n7.$$.fragment,m),C(W2.$$.fragment,m),C(s7.$$.fragment,m),C(cv.$$.fragment,m),C(l7.$$.fragment,m),C(i7.$$.fragment,m),C(c7.$$.fragment,m),C(fv.$$.fragment,m),C(m7.$$.fragment,m),C(lF.$$.fragment,m),C(f7.$$.fragment,m),C(g7.$$.fragment,m),C(u7.$$.fragment,m),C(dF.$$.fragment,m),C(p7.$$.fragment,m),C(DF.$$.fragment,m),C(_7.$$.fragment,m),C(b7.$$.fragment,m),C(F7.$$.fragment,m),C(OF.$$.fragment,m),C(T7.$$.fragment,m),C(UF.$$.fragment,m),C(M7.$$.fragment,m),C(E7.$$.fragment,m),C(w7.$$.fragment,m),C(YF.$$.fragment,m),C(A7.$$.fragment,m),C(R1.$$.fragment,m),C(y7.$$.fragment,m),C(L7.$$.fragment,m),C($7.$$.fragment,m),C(B1.$$.fragment,m),C(k7.$$.fragment,m),C(ET.$$.fragment,m),C(S7.$$.fragment,m),C(R7.$$.fragment,m),C(B7.$$.fragment,m),C(wT.$$.fragment,m),C(I7.$$.fragment,m),C(LT.$$.fragment,m),C(N7.$$.fragment,m),C(q7.$$.fragment,m),C(D7.$$.fragment,m),C($T.$$.fragment,m),C(G7.$$.fragment,m),C(XT.$$.fragment,m),C(O7.$$.fragment,m),C(V7.$$.fragment,m),C(z7.$$.fragment,m),C(WT.$$.fragment,m),C(W7.$$.fragment,m),C(UT.$$.fragment,m),C(Q7.$$.fragment,m),C(H7.$$.fragment,m),C(J7.$$.fragment,m),C(YT.$$.fragment,m),C(Y7.$$.fragment,m),C(eM.$$.fragment,m),C(K7.$$.fragment,m),C(Z7.$$.fragment,m),C(o8.$$.fragment,m),C(rM.$$.fragment,m),C(r8.$$.fragment,m),C(gM.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(uM.$$.fragment,m),C(l8.$$.fragment,m),C(MM.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(CM.$$.fragment,m),C(f8.$$.fragment,m),C(IM.$$.fragment,m),C(g8.$$.fragment,m),C(h8.$$.fragment,m),C(p8.$$.fragment,m),C(qM.$$.fragment,m),C(_8.$$.fragment,m),C(OM.$$.fragment,m),C(v8.$$.fragment,m),C(F8.$$.fragment,m),C(M8.$$.fragment,m),C(XM.$$.fragment,m),C(E8.$$.fragment,m),C(YM.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(y8.$$.fragment,m),C(ZM.$$.fragment,m),C(L8.$$.fragment,m),C(a4.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(S8.$$.fragment,m),C(s4.$$.fragment,m),C(R8.$$.fragment,m),C(c4.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(q8.$$.fragment,m),C(f4.$$.fragment,m),C(j8.$$.fragment,m),C(u4.$$.fragment,m),C(D8.$$.fragment,m),C(G8.$$.fragment,m),C(V8.$$.fragment,m),C(_4.$$.fragment,m),C(X8.$$.fragment,m),C(E4.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(w4.$$.fragment,m),C(U8.$$.fragment,m),C(L4.$$.fragment,m),C(J8.$$.fragment,m),C(Y8.$$.fragment,m),C(Z8.$$.fragment,m),C($4.$$.fragment,m),C(e9.$$.fragment,m),C(EE.$$.fragment,m),C(o9.$$.fragment,m),C(r9.$$.fragment,m),C(a9.$$.fragment,m),C(wE.$$.fragment,m),C(n9.$$.fragment,m),C(UE.$$.fragment,m),C(s9.$$.fragment,m),C(l9.$$.fragment,m),C(d9.$$.fragment,m),C(YE.$$.fragment,m),C(c9.$$.fragment,m),C(mC.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C(gC.$$.fragment,m),C(u9.$$.fragment,m),C(bC.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(FC.$$.fragment,m),C(F9.$$.fragment,m),C(GC.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(VC.$$.fragment,m),C(w9.$$.fragment,m),C(e5.$$.fragment,m),C(A9.$$.fragment,m),C(y9.$$.fragment,m),C(x9.$$.fragment,m),C(r5.$$.fragment,m),C($9.$$.fragment,m),C(x5.$$.fragment,m),C(k9.$$.fragment,m),C(S9.$$.fragment,m),C(P9.$$.fragment,m),C(k5.$$.fragment,m),C(B9.$$.fragment,m),C(U5.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(j9.$$.fragment,m),C(Y5.$$.fragment,m),C(D9.$$.fragment,m),C(e3.$$.fragment,m),C(O9.$$.fragment,m),C(V9.$$.fragment,m),C(z9.$$.fragment,m),C(r3.$$.fragment,m),C(W9.$$.fragment,m),C(a3.$$.fragment,m),C(Q9.$$.fragment,m),C(H9.$$.fragment,m),C(J9.$$.fragment,m),C(s3.$$.fragment,m),C(Y9.$$.fragment,m),C(y3.$$.fragment,m),C(K9.$$.fragment,m),C(Z9.$$.fragment,m),C(ox.$$.fragment,m),C(x3.$$.fragment,m),C(rx.$$.fragment,m),C(J3.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(sx.$$.fragment,m),C(K3.$$.fragment,m),C(lx.$$.fragment,m),C(ew.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(mx.$$.fragment,m),C(rw.$$.fragment,m),C(fx.$$.fragment,m),C(aw.$$.fragment,m),C(gx.$$.fragment,m),C(hx.$$.fragment,m),C(px.$$.fragment,m),C(sw.$$.fragment,m),C(_x.$$.fragment,m),C(Rw.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C(Bw.$$.fragment,m),C(Mx.$$.fragment,m),C(Ww.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(Hw.$$.fragment,m),C(yx.$$.fragment,m),C(l0.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(d0.$$.fragment,m),C(Sx.$$.fragment,m),C(F0.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(M0.$$.fragment,m),C(Nx.$$.fragment,m),C(S0.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(Gx.$$.fragment,m),C(P0.$$.fragment,m),C(Ox.$$.fragment,m),C(z0.$$.fragment,m),C(Vx.$$.fragment,m),C(Xx.$$.fragment,m),C(Wx.$$.fragment,m),C(Q0.$$.fragment,m),C(Qx.$$.fragment,m),C(aA.$$.fragment,m),C(Hx.$$.fragment,m),C(Ux.$$.fragment,m),C(Yx.$$.fragment,m),C(sA.$$.fragment,m),C(Kx.$$.fragment,m),C(uA.$$.fragment,m),C(Zx.$$.fragment,m),C(e$.$$.fragment,m),C(r$.$$.fragment,m),C(_A.$$.fragment,m),C(t$.$$.fragment,m),C(AA.$$.fragment,m),C(a$.$$.fragment,m),C(n$.$$.fragment,m),C(l$.$$.fragment,m),C(LA.$$.fragment,m),C(i$.$$.fragment,m),C($A.$$.fragment,m),C(d$.$$.fragment,m),C(c$.$$.fragment,m),C(f$.$$.fragment,m),C(SA.$$.fragment,m),C(g$.$$.fragment,m),C(BA.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(NA.$$.fragment,m),C(v$.$$.fragment,m),C(jA.$$.fragment,m),FOe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(wm),m&&t(at),m&&t(Ge),m&&t(We),m&&t(ym),w(La,m),m&&t(Qe),m&&t(Ae),m&&t(Co),m&&t(xa),m&&t(uDe),m&&t(Ai),w(cL),m&&t(pDe),m&&t(In),m&&t(_De),w(mL,m),m&&t(bDe),m&&t(Dk),m&&t(vDe),w($m,m),m&&t(FDe),m&&t(yi),w(fL),m&&t(TDe),m&&t(wo),w(gL),w(pL),w(Ng),w(_L),m&&t(MDe),m&&t(xi),w(bL),m&&t(EDe),m&&t(Ao),w(vL),w(ML),w(vh),w(EL),m&&t(CDe),m&&t($i),w(CL),m&&t(wDe),m&&t(yo),w(wL),w(LL),w(eu),w(ou),w(xL),m&&t(ADe),m&&t(ki),w($L),m&&t(yDe),m&&t(Lo),w(kL),w(PL),w(Tu),w(Mu),w(BL),m&&t(LDe),m&&t(Ri),w(IL),m&&t(xDe),m&&t(xo),w(NL),w(jL),w(wu),w(DL),w(E_),m&&t($De),m&&t(Ii),w(GL),m&&t(kDe),m&&t($o),w(OL),w(XL),w(w_),w(zL),w(pb),m&&t(SDe),m&&t(ji),w(WL),m&&t(RDe),m&&t(ko),w(QL),w(UL),w(bb),w(JL),w(a2),m&&t(PDe),m&&t(Oi),w(YL),m&&t(BDe),m&&t(So),w(KL),w(e7),w(s2),w(o7),w(X2),m&&t(IDe),m&&t(zi),w(r7),m&&t(NDe),m&&t(Ro),w(t7),w(n7),w(W2),w(s7),w(cv),m&&t(qDe),m&&t(Hi),w(l7),m&&t(jDe),m&&t(Po),w(i7),w(c7),w(fv),w(m7),w(lF),m&&t(DDe),m&&t(Yi),w(f7),m&&t(GDe),m&&t(Bo),w(g7),w(u7),w(dF),w(p7),w(DF),m&&t(ODe),m&&t(ed),w(_7),m&&t(VDe),m&&t(Io),w(b7),w(F7),w(OF),w(T7),w(UF),m&&t(XDe),m&&t(td),w(M7),m&&t(zDe),m&&t(No),w(E7),w(w7),w(YF),w(A7),w(R1),m&&t(WDe),m&&t(sd),w(y7),m&&t(QDe),m&&t(qo),w(L7),w($7),w(B1),w(k7),w(ET),m&&t(HDe),m&&t(dd),w(S7),m&&t(UDe),m&&t(jo),w(R7),w(B7),w(wT),w(I7),w(LT),m&&t(JDe),m&&t(fd),w(N7),m&&t(YDe),m&&t(Do),w(q7),w(D7),w($T),w(G7),w(XT),m&&t(KDe),m&&t(ud),w(O7),m&&t(ZDe),m&&t(Go),w(V7),w(z7),w(WT),w(W7),w(UT),m&&t(eGe),m&&t(bd),w(Q7),m&&t(oGe),m&&t(Oo),w(H7),w(J7),w(YT),w(Y7),w(eM),m&&t(rGe),m&&t(Td),w(K7),m&&t(tGe),m&&t(Vo),w(Z7),w(o8),w(rM),w(r8),w(gM),m&&t(aGe),m&&t(Cd),w(t8),m&&t(nGe),m&&t(Xo),w(a8),w(s8),w(uM),w(l8),w(MM),m&&t(sGe),m&&t(yd),w(i8),m&&t(lGe),m&&t(zo),w(d8),w(m8),w(CM),w(f8),w(IM),m&&t(iGe),m&&t($d),w(g8),m&&t(dGe),m&&t(Wo),w(h8),w(p8),w(qM),w(_8),w(OM),m&&t(cGe),m&&t(Rd),w(v8),m&&t(mGe),m&&t(Qo),w(F8),w(M8),w(XM),w(E8),w(YM),m&&t(fGe),m&&t(Id),w(C8),m&&t(gGe),m&&t(Ho),w(w8),w(y8),w(ZM),w(L8),w(a4),m&&t(hGe),m&&t(Dd),w(x8),m&&t(uGe),m&&t(Uo),w($8),w(S8),w(s4),w(R8),w(c4),m&&t(pGe),m&&t(Vd),w(B8),m&&t(_Ge),m&&t(Jo),w(I8),w(q8),w(f4),w(j8),w(u4),m&&t(bGe),m&&t(Wd),w(D8),m&&t(vGe),m&&t(Yo),w(G8),w(V8),w(_4),w(X8),w(E4),m&&t(FGe),m&&t(Ud),w(z8),m&&t(TGe),m&&t(Ko),w(W8),w(H8),w(w4),w(U8),w(L4),m&&t(MGe),m&&t(Kd),w(J8),m&&t(EGe),m&&t(Zo),w(Y8),w(Z8),w($4),w(e9),w(EE),m&&t(CGe),m&&t(oc),w(o9),m&&t(wGe),m&&t(er),w(r9),w(a9),w(wE),w(n9),w(UE),m&&t(AGe),m&&t(ac),w(s9),m&&t(yGe),m&&t(or),w(l9),w(d9),w(YE),w(c9),w(mC),m&&t(LGe),m&&t(lc),w(m9),m&&t(xGe),m&&t(rr),w(f9),w(h9),w(gC),w(u9),w(bC),m&&t($Ge),m&&t(cc),w(p9),m&&t(kGe),m&&t(tr),w(_9),w(v9),w(FC),w(F9),w(GC),m&&t(SGe),m&&t(gc),w(T9),m&&t(RGe),m&&t(ar),w(M9),w(C9),w(VC),w(w9),w(e5),m&&t(PGe),m&&t(pc),w(A9),m&&t(BGe),m&&t(nr),w(y9),w(x9),w(r5),w($9),w(x5),m&&t(IGe),m&&t(vc),w(k9),m&&t(NGe),m&&t(sr),w(S9),w(P9),w(k5),w(B9),w(U5),m&&t(qGe),m&&t(Mc),w(I9),m&&t(jGe),m&&t(lr),w(N9),w(j9),w(Y5),w(D9),w(e3),m&&t(DGe),m&&t(wc),w(O9),m&&t(GGe),m&&t(ir),w(V9),w(z9),w(r3),w(W9),w(a3),m&&t(OGe),m&&t(Lc),w(Q9),m&&t(VGe),m&&t(dr),w(H9),w(J9),w(s3),w(Y9),w(y3),m&&t(XGe),m&&t(kc),w(K9),m&&t(zGe),m&&t(cr),w(Z9),w(ox),w(x3),w(rx),w(J3),m&&t(WGe),m&&t(Pc),w(tx),m&&t(QGe),m&&t(mr),w(ax),w(sx),w(K3),w(lx),w(ew),m&&t(HGe),m&&t(Nc),w(ix),m&&t(UGe),m&&t(fr),w(dx),w(mx),w(rw),w(fx),w(aw),m&&t(JGe),m&&t(Dc),w(gx),m&&t(YGe),m&&t(gr),w(hx),w(px),w(sw),w(_x),w(Rw),m&&t(KGe),m&&t(Vc),w(bx),m&&t(ZGe),m&&t(hr),w(vx),w(Tx),w(Bw),w(Mx),w(Ww),m&&t(eOe),m&&t(Wc),w(Ex),m&&t(oOe),m&&t(ur),w(Cx),w(Ax),w(Hw),w(yx),w(l0),m&&t(rOe),m&&t(Uc),w(Lx),m&&t(tOe),m&&t(pr),w(xx),w(kx),w(d0),w(Sx),w(F0),m&&t(aOe),m&&t(Kc),w(Rx),m&&t(nOe),m&&t(_r),w(Px),w(Ix),w(M0),w(Nx),w(S0),m&&t(sOe),m&&t(om),w(qx),m&&t(lOe),m&&t(br),w(jx),w(Gx),w(P0),w(Ox),w(z0),m&&t(iOe),m&&t(am),w(Vx),m&&t(dOe),m&&t(vr),w(Xx),w(Wx),w(Q0),w(Qx),w(aA),m&&t(cOe),m&&t(lm),w(Hx),m&&t(mOe),m&&t(Fr),w(Ux),w(Yx),w(sA),w(Kx),w(uA),m&&t(fOe),m&&t(cm),w(Zx),m&&t(gOe),m&&t(Tr),w(e$),w(r$),w(_A),w(t$),w(AA),m&&t(hOe),m&&t(gm),w(a$),m&&t(uOe),m&&t(Mr),w(n$),w(l$),w(LA),w(i$),w($A),m&&t(pOe),m&&t(pm),w(d$),m&&t(_Oe),m&&t(Er),w(c$),w(f$),w(SA),w(g$),w(BA),m&&t(bOe),m&&t(vm),w(u$),m&&t(vOe),m&&t(Cr),w(p$),w(b$),w(NA),w(v$),w(jA)}}}const Eqt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Cqt(L){return MIt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kqt extends bIt{constructor(g){super();vIt(this,g,Cqt,Mqt,FIt,{})}}export{kqt as default,Eqt as metadata};
