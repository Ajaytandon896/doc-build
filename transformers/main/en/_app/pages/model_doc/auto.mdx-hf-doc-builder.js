import{S as sua,i as lua,s as iua,e as a,k as l,w as F,t as o,M as dua,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as cua,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Dvt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function mua($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,R9,Cf,Ve,He,sd,es,P9,os,rs,B9,ld,ts,I9,id,wf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),td=a("code"),Ef=o("model_type"),pt=o(" attribute is set to the same key you use when registering the config (here "),ad=a("code"),nd=o('"new-model"'),R9=o(")."),Cf=l(),Ve=a("p"),He=o("Likewise, if your "),sd=a("code"),es=o("NewModel"),P9=o(" is a subclass of "),os=a("a"),rs=o("PreTrainedModel"),B9=o(`, make sure its
`),ld=a("code"),ts=o("config_class"),I9=o(` attribute is set to the same class you use when registering the model (here
`),id=a("code"),wf=o("NewModelConfig"),Qa=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var NB=s(u);f=r(NB,"NewModelConfig"),NB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var dd=s(d);h=r(dd,"PretrainedConfig"),dd.forEach(t),yo=r(Ae,`, make sure its
`),td=n(Ae,"CODE",{});var qB=s(td);Ef=r(qB,"model_type"),qB.forEach(t),pt=r(Ae," attribute is set to the same key you use when registering the config (here "),ad=n(Ae,"CODE",{});var jB=s(ad);nd=r(jB,'"new-model"'),jB.forEach(t),R9=r(Ae,")."),Ae.forEach(t),Cf=i(Je),Ve=n(Je,"P",{});var xo=s(Ve);He=r(xo,"Likewise, if your "),sd=n(xo,"CODE",{});var Wa=s(sd);es=r(Wa,"NewModel"),Wa.forEach(t),P9=r(xo," is a subclass of "),os=n(xo,"A",{href:!0});var DB=s(os);rs=r(DB,"PreTrainedModel"),DB.forEach(t),B9=r(xo,`, make sure its
`),ld=n(xo,"CODE",{});var Af=s(ld);ts=r(Af,"config_class"),Af.forEach(t),I9=r(xo,` attribute is set to the same class you use when registering the model (here
`),id=n(xo,"CODE",{});var GB=s(id);wf=r(GB,"NewModelConfig"),GB.forEach(t),Qa=r(xo,")."),xo.forEach(t),this.h()},h(){c(os,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,td),e(td,Ef),e(g,pt),e(g,ad),e(ad,nd),e(g,R9),b(Je,Cf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,sd),e(sd,es),e(Ve,P9),e(Ve,os),e(os,rs),e(Ve,B9),e(Ve,ld),e(ld,ts),e(Ve,I9),e(Ve,id),e(id,wf),e(Ve,Qa)},d(Je){Je&&t(g),Je&&t(Cf),Je&&t(Ve)}}}function fua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hua($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function uua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pua($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function _ua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zua($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function epa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function opa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function apa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function npa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function spa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ipa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function upa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _pa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Epa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Apa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ypa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $pa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Spa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ppa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ipa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Npa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Opa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Upa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ypa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zpa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p_a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function __a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b_a($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,R9,Cf,Ve,He,sd,es,P9,os,rs,B9,ld,ts,I9,id,wf,Qa,Je,Ae,NB,dd,qB,jB,xo,Wa,DB,Af,GB,rto,AKe,cd,Lf,Fde,N9,tto,Tde,ato,LKe,as,nto,Mde,sto,lto,Ede,ito,dto,yKe,q9,xKe,OB,cto,$Ke,yf,kKe,md,xf,Cde,j9,mto,wde,fto,SKe,$o,D9,gto,G9,hto,VB,uto,pto,_to,O9,bto,Ade,vto,Fto,Tto,Pr,V9,Mto,Lde,Eto,Cto,fd,wto,yde,Ato,Lto,xde,yto,xto,$to,A,$f,$de,kto,Sto,XB,Rto,Pto,Bto,kf,kde,Ito,Nto,zB,qto,jto,Dto,Sf,Sde,Gto,Oto,QB,Vto,Xto,zto,Rf,Rde,Qto,Wto,WB,Uto,Hto,Jto,Pf,Pde,Yto,Kto,UB,Zto,eao,oao,Bf,Bde,rao,tao,HB,aao,nao,sao,If,Ide,lao,iao,JB,dao,cao,mao,Nf,Nde,fao,gao,YB,hao,uao,pao,qf,qde,_ao,bao,KB,vao,Fao,Tao,jf,jde,Mao,Eao,ZB,Cao,wao,Aao,Df,Dde,Lao,yao,eI,xao,$ao,kao,Gf,Gde,Sao,Rao,oI,Pao,Bao,Iao,Of,Ode,Nao,qao,rI,jao,Dao,Gao,Vf,Vde,Oao,Vao,tI,Xao,zao,Qao,Xf,Xde,Wao,Uao,aI,Hao,Jao,Yao,zf,zde,Kao,Zao,nI,eno,ono,rno,Qf,Qde,tno,ano,sI,nno,sno,lno,Wf,Wde,ino,dno,lI,cno,mno,fno,Uf,Ude,gno,hno,iI,uno,pno,_no,Hf,Hde,bno,vno,dI,Fno,Tno,Mno,Jf,Jde,Eno,Cno,cI,wno,Ano,Lno,Yf,Yde,yno,xno,mI,$no,kno,Sno,Kf,Kde,Rno,Pno,fI,Bno,Ino,Nno,Zf,Zde,qno,jno,gI,Dno,Gno,Ono,eg,ece,Vno,Xno,hI,zno,Qno,Wno,og,oce,Uno,Hno,uI,Jno,Yno,Kno,rg,rce,Zno,eso,pI,oso,rso,tso,tg,tce,aso,nso,_I,sso,lso,iso,ag,ace,dso,cso,bI,mso,fso,gso,ng,nce,hso,uso,vI,pso,_so,bso,sg,sce,vso,Fso,FI,Tso,Mso,Eso,lg,lce,Cso,wso,TI,Aso,Lso,yso,ig,ice,xso,$so,MI,kso,Sso,Rso,dg,dce,Pso,Bso,EI,Iso,Nso,qso,cg,cce,jso,Dso,CI,Gso,Oso,Vso,mg,mce,Xso,zso,wI,Qso,Wso,Uso,fg,fce,Hso,Jso,AI,Yso,Kso,Zso,gg,gce,elo,olo,LI,rlo,tlo,alo,hg,hce,nlo,slo,yI,llo,ilo,dlo,ug,uce,clo,mlo,xI,flo,glo,hlo,pg,pce,ulo,plo,$I,_lo,blo,vlo,_g,_ce,Flo,Tlo,kI,Mlo,Elo,Clo,bg,bce,wlo,Alo,SI,Llo,ylo,xlo,vg,vce,$lo,klo,RI,Slo,Rlo,Plo,Fg,Fce,Blo,Ilo,PI,Nlo,qlo,jlo,Tg,Tce,Dlo,Glo,BI,Olo,Vlo,Xlo,Mg,Mce,zlo,Qlo,II,Wlo,Ulo,Hlo,Eg,Ece,Jlo,Ylo,NI,Klo,Zlo,eio,Cg,Cce,oio,rio,qI,tio,aio,nio,wg,wce,sio,lio,jI,iio,dio,cio,Ag,Ace,mio,fio,DI,gio,hio,uio,Lg,Lce,pio,_io,GI,bio,vio,Fio,yg,yce,Tio,Mio,OI,Eio,Cio,wio,xg,xce,Aio,Lio,VI,yio,xio,$io,$g,$ce,kio,Sio,XI,Rio,Pio,Bio,kg,kce,Iio,Nio,zI,qio,jio,Dio,Sg,Sce,Gio,Oio,QI,Vio,Xio,zio,Rg,Rce,Qio,Wio,WI,Uio,Hio,Jio,Pg,Pce,Yio,Kio,UI,Zio,edo,odo,Bg,Bce,rdo,tdo,HI,ado,ndo,sdo,Ig,Ice,ldo,ido,JI,ddo,cdo,mdo,Ng,Nce,fdo,gdo,YI,hdo,udo,pdo,qg,qce,_do,bdo,KI,vdo,Fdo,Tdo,jg,jce,Mdo,Edo,ZI,Cdo,wdo,Ado,Dg,Dce,Ldo,ydo,eN,xdo,$do,kdo,Gg,Gce,Sdo,Rdo,oN,Pdo,Bdo,Ido,Og,Oce,Ndo,qdo,rN,jdo,Ddo,Gdo,Vg,Vce,Odo,Vdo,tN,Xdo,zdo,Qdo,Xg,Xce,Wdo,Udo,aN,Hdo,Jdo,Ydo,zg,zce,Kdo,Zdo,nN,eco,oco,rco,Qg,Qce,tco,aco,sN,nco,sco,lco,Wg,Wce,ico,dco,lN,cco,mco,fco,Ug,Uce,gco,hco,iN,uco,pco,_co,Hg,Hce,bco,vco,dN,Fco,Tco,Mco,Jg,Jce,Eco,Cco,cN,wco,Aco,Lco,Yg,Yce,yco,xco,mN,$co,kco,Sco,Kg,Kce,Rco,Pco,fN,Bco,Ico,Nco,Zg,Zce,qco,jco,gN,Dco,Gco,Oco,eh,eme,Vco,Xco,hN,zco,Qco,Wco,oh,ome,Uco,Hco,uN,Jco,Yco,Kco,rh,rme,Zco,emo,pN,omo,rmo,tmo,th,tme,amo,nmo,_N,smo,lmo,imo,ah,ame,dmo,cmo,bN,mmo,fmo,gmo,nh,nme,hmo,umo,vN,pmo,_mo,bmo,sh,sme,vmo,Fmo,FN,Tmo,Mmo,Emo,lh,lme,Cmo,wmo,TN,Amo,Lmo,ymo,ih,ime,xmo,$mo,MN,kmo,Smo,Rmo,dh,dme,Pmo,Bmo,EN,Imo,Nmo,qmo,ch,cme,jmo,Dmo,CN,Gmo,Omo,Vmo,mh,mme,Xmo,zmo,wN,Qmo,Wmo,Umo,fh,fme,Hmo,Jmo,AN,Ymo,Kmo,Zmo,gh,gme,efo,ofo,LN,rfo,tfo,afo,hh,hme,nfo,sfo,yN,lfo,ifo,dfo,uh,ume,cfo,mfo,xN,ffo,gfo,hfo,ph,pme,ufo,pfo,$N,_fo,bfo,vfo,_h,_me,Ffo,Tfo,kN,Mfo,Efo,Cfo,bh,bme,wfo,Afo,SN,Lfo,yfo,xfo,vh,vme,$fo,kfo,RN,Sfo,Rfo,Pfo,Fh,Fme,Bfo,Ifo,PN,Nfo,qfo,jfo,Th,Tme,Dfo,Gfo,BN,Ofo,Vfo,Xfo,Mh,Mme,zfo,Qfo,IN,Wfo,Ufo,Hfo,Eh,Eme,Jfo,Yfo,NN,Kfo,Zfo,ego,Ch,Cme,ogo,rgo,qN,tgo,ago,ngo,wh,wme,sgo,lgo,jN,igo,dgo,cgo,Ah,Ame,mgo,fgo,DN,ggo,hgo,ugo,Lh,Lme,pgo,_go,GN,bgo,vgo,Fgo,yh,yme,Tgo,Mgo,ON,Ego,Cgo,wgo,xh,xme,Ago,Lgo,VN,ygo,xgo,$go,$h,$me,kgo,Sgo,XN,Rgo,Pgo,Bgo,kh,kme,Igo,Ngo,zN,qgo,jgo,Dgo,Sh,Sme,Ggo,Ogo,QN,Vgo,Xgo,zgo,Rh,Rme,Qgo,Wgo,WN,Ugo,Hgo,Jgo,Ph,Pme,Ygo,Kgo,UN,Zgo,eho,oho,Bh,Bme,rho,tho,HN,aho,nho,sho,Ih,Ime,lho,iho,JN,dho,cho,mho,Nh,Nme,fho,gho,YN,hho,uho,pho,qh,qme,_ho,bho,KN,vho,Fho,Tho,jh,jme,Mho,Eho,ZN,Cho,who,Aho,Dh,Dme,Lho,yho,eq,xho,$ho,kho,Gh,Gme,Sho,Rho,oq,Pho,Bho,Iho,Oh,Ome,Nho,qho,rq,jho,Dho,Gho,Vh,Vme,Oho,Vho,tq,Xho,zho,Qho,Xh,Xme,Who,Uho,aq,Hho,Jho,Yho,zh,zme,Kho,Zho,nq,euo,ouo,ruo,Qh,Qme,tuo,auo,sq,nuo,suo,luo,Wh,Wme,iuo,duo,lq,cuo,muo,fuo,Uh,Ume,guo,huo,iq,uuo,puo,_uo,Hh,Hme,buo,vuo,dq,Fuo,Tuo,Muo,Jh,Euo,Yh,X9,Cuo,Jme,wuo,RKe,gd,Kh,Yme,z9,Auo,Kme,Luo,PKe,ko,Q9,yuo,W9,xuo,cq,$uo,kuo,Suo,U9,Ruo,Zme,Puo,Buo,Iuo,Br,H9,Nuo,efe,quo,juo,Ua,Duo,ofe,Guo,Ouo,rfe,Vuo,Xuo,tfe,zuo,Quo,Wuo,k,ns,afe,Uuo,Huo,mq,Juo,Yuo,fq,Kuo,Zuo,epo,ss,nfe,opo,rpo,gq,tpo,apo,hq,npo,spo,lpo,ls,sfe,ipo,dpo,uq,cpo,mpo,pq,fpo,gpo,hpo,Zh,lfe,upo,ppo,_q,_po,bpo,vpo,is,ife,Fpo,Tpo,bq,Mpo,Epo,vq,Cpo,wpo,Apo,eu,dfe,Lpo,ypo,Fq,xpo,$po,kpo,ou,cfe,Spo,Rpo,Tq,Ppo,Bpo,Ipo,ru,mfe,Npo,qpo,Mq,jpo,Dpo,Gpo,ds,ffe,Opo,Vpo,Eq,Xpo,zpo,Cq,Qpo,Wpo,Upo,cs,gfe,Hpo,Jpo,wq,Ypo,Kpo,Aq,Zpo,e_o,o_o,ms,hfe,r_o,t_o,Lq,a_o,n_o,yq,s_o,l_o,i_o,tu,ufe,d_o,c_o,xq,m_o,f_o,g_o,au,pfe,h_o,u_o,$q,p_o,__o,b_o,nu,_fe,v_o,F_o,kq,T_o,M_o,E_o,fs,bfe,C_o,w_o,Sq,A_o,L_o,Rq,y_o,x_o,$_o,su,vfe,k_o,S_o,Pq,R_o,P_o,B_o,gs,Ffe,I_o,N_o,Bq,q_o,j_o,Iq,D_o,G_o,O_o,hs,Tfe,V_o,X_o,Nq,z_o,Q_o,qq,W_o,U_o,H_o,us,Mfe,J_o,Y_o,jq,K_o,Z_o,Dq,ebo,obo,rbo,ps,Efe,tbo,abo,Gq,nbo,sbo,Oq,lbo,ibo,dbo,lu,Cfe,cbo,mbo,Vq,fbo,gbo,hbo,_s,wfe,ubo,pbo,Xq,_bo,bbo,zq,vbo,Fbo,Tbo,bs,Afe,Mbo,Ebo,Qq,Cbo,wbo,Wq,Abo,Lbo,ybo,vs,Lfe,xbo,$bo,Uq,kbo,Sbo,Hq,Rbo,Pbo,Bbo,Fs,yfe,Ibo,Nbo,Jq,qbo,jbo,Yq,Dbo,Gbo,Obo,Ts,xfe,Vbo,Xbo,Kq,zbo,Qbo,Zq,Wbo,Ubo,Hbo,Ms,$fe,Jbo,Ybo,ej,Kbo,Zbo,oj,e2o,o2o,r2o,Es,kfe,t2o,a2o,rj,n2o,s2o,tj,l2o,i2o,d2o,iu,Sfe,c2o,m2o,aj,f2o,g2o,h2o,Cs,Rfe,u2o,p2o,nj,_2o,b2o,sj,v2o,F2o,T2o,du,Pfe,M2o,E2o,lj,C2o,w2o,A2o,ws,Bfe,L2o,y2o,ij,x2o,$2o,dj,k2o,S2o,R2o,As,Ife,P2o,B2o,cj,I2o,N2o,mj,q2o,j2o,D2o,Ls,Nfe,G2o,O2o,fj,V2o,X2o,gj,z2o,Q2o,W2o,cu,qfe,U2o,H2o,hj,J2o,Y2o,K2o,mu,jfe,Z2o,e1o,uj,o1o,r1o,t1o,ys,Dfe,a1o,n1o,pj,s1o,l1o,_j,i1o,d1o,c1o,xs,Gfe,m1o,f1o,bj,g1o,h1o,vj,u1o,p1o,_1o,$s,Ofe,b1o,v1o,Fj,F1o,T1o,Tj,M1o,E1o,C1o,fu,Vfe,w1o,A1o,Mj,L1o,y1o,x1o,ks,Xfe,$1o,k1o,Ej,S1o,R1o,Cj,P1o,B1o,I1o,Ss,zfe,N1o,q1o,wj,j1o,D1o,Aj,G1o,O1o,V1o,Rs,Qfe,X1o,z1o,Lj,Q1o,W1o,yj,U1o,H1o,J1o,Ps,Wfe,Y1o,K1o,xj,Z1o,evo,$j,ovo,rvo,tvo,Bs,Ufe,avo,nvo,kj,svo,lvo,Sj,ivo,dvo,cvo,Is,Hfe,mvo,fvo,Rj,gvo,hvo,Pj,uvo,pvo,_vo,Ns,Jfe,bvo,vvo,Bj,Fvo,Tvo,Ij,Mvo,Evo,Cvo,qs,Yfe,wvo,Avo,Nj,Lvo,yvo,qj,xvo,$vo,kvo,gu,Kfe,Svo,Rvo,jj,Pvo,Bvo,Ivo,js,Zfe,Nvo,qvo,Dj,jvo,Dvo,Gj,Gvo,Ovo,Vvo,hu,ege,Xvo,zvo,Oj,Qvo,Wvo,Uvo,uu,oge,Hvo,Jvo,Vj,Yvo,Kvo,Zvo,Ds,rge,eFo,oFo,Xj,rFo,tFo,zj,aFo,nFo,sFo,Gs,tge,lFo,iFo,Qj,dFo,cFo,Wj,mFo,fFo,gFo,Os,age,hFo,uFo,Uj,pFo,_Fo,Hj,bFo,vFo,FFo,pu,nge,TFo,MFo,Jj,EFo,CFo,wFo,Vs,sge,AFo,LFo,Yj,yFo,xFo,Kj,$Fo,kFo,SFo,Xs,lge,RFo,PFo,Zj,BFo,IFo,eD,NFo,qFo,jFo,zs,ige,DFo,GFo,oD,OFo,VFo,rD,XFo,zFo,QFo,Qs,dge,WFo,UFo,tD,HFo,JFo,aD,YFo,KFo,ZFo,Ws,cge,eTo,oTo,nD,rTo,tTo,sD,aTo,nTo,sTo,Us,mge,lTo,iTo,lD,dTo,cTo,iD,mTo,fTo,gTo,Hs,fge,hTo,uTo,dD,pTo,_To,cD,bTo,vTo,FTo,Js,gge,TTo,MTo,mD,ETo,CTo,fD,wTo,ATo,LTo,_u,hge,yTo,xTo,gD,$To,kTo,STo,Ys,uge,RTo,PTo,hD,BTo,ITo,uD,NTo,qTo,jTo,Ks,pge,DTo,GTo,pD,OTo,VTo,_D,XTo,zTo,QTo,bu,_ge,WTo,UTo,bD,HTo,JTo,YTo,vu,bge,KTo,ZTo,vD,eMo,oMo,rMo,Fu,vge,tMo,aMo,FD,nMo,sMo,lMo,Tu,Fge,iMo,dMo,TD,cMo,mMo,fMo,Zs,Tge,gMo,hMo,MD,uMo,pMo,ED,_Mo,bMo,vMo,Mu,Mge,FMo,TMo,CD,MMo,EMo,CMo,el,Ege,wMo,AMo,wD,LMo,yMo,AD,xMo,$Mo,kMo,ol,Cge,SMo,RMo,LD,PMo,BMo,yD,IMo,NMo,qMo,rl,wge,jMo,DMo,xD,GMo,OMo,$D,VMo,XMo,zMo,tl,Age,QMo,WMo,kD,UMo,HMo,SD,JMo,YMo,KMo,al,Lge,ZMo,eEo,RD,oEo,rEo,PD,tEo,aEo,nEo,nl,yge,sEo,lEo,BD,iEo,dEo,ID,cEo,mEo,fEo,Eu,xge,gEo,hEo,ND,uEo,pEo,_Eo,Cu,$ge,bEo,vEo,qD,FEo,TEo,MEo,sl,kge,EEo,CEo,jD,wEo,AEo,DD,LEo,yEo,xEo,ll,Sge,$Eo,kEo,GD,SEo,REo,OD,PEo,BEo,IEo,il,Rge,NEo,qEo,VD,jEo,DEo,XD,GEo,OEo,VEo,wu,Pge,XEo,zEo,zD,QEo,WEo,UEo,Au,Bge,HEo,JEo,QD,YEo,KEo,ZEo,Lu,Ige,e4o,o4o,WD,r4o,t4o,a4o,dl,Nge,n4o,s4o,UD,l4o,i4o,HD,d4o,c4o,m4o,cl,qge,f4o,g4o,JD,h4o,u4o,YD,p4o,_4o,b4o,yu,jge,v4o,F4o,KD,T4o,M4o,E4o,xu,Dge,C4o,w4o,ZD,A4o,L4o,y4o,$u,Gge,x4o,$4o,eG,k4o,S4o,R4o,ml,Oge,P4o,B4o,oG,I4o,N4o,rG,q4o,j4o,D4o,fl,Vge,G4o,O4o,tG,V4o,X4o,aG,z4o,Q4o,W4o,ku,Xge,U4o,H4o,nG,J4o,Y4o,K4o,Su,zge,Z4o,eCo,sG,oCo,rCo,tCo,gl,Qge,aCo,nCo,lG,sCo,lCo,iG,iCo,dCo,cCo,hl,Wge,mCo,fCo,dG,gCo,hCo,cG,uCo,pCo,_Co,ul,Uge,bCo,vCo,mG,FCo,TCo,fG,MCo,ECo,CCo,pl,Hge,wCo,ACo,gG,LCo,yCo,hG,xCo,$Co,kCo,Ru,SCo,Pu,J9,RCo,Jge,PCo,BKe,hd,Bu,Yge,Y9,BCo,Kge,ICo,IKe,So,K9,NCo,Z9,qCo,uG,jCo,DCo,GCo,ex,OCo,Zge,VCo,XCo,zCo,Ye,ox,QCo,ehe,WCo,UCo,Ha,HCo,ohe,JCo,YCo,rhe,KCo,ZCo,the,e3o,o3o,r3o,Q,Iu,ahe,t3o,a3o,pG,n3o,s3o,l3o,Nu,nhe,i3o,d3o,_G,c3o,m3o,f3o,qu,she,g3o,h3o,bG,u3o,p3o,_3o,ju,lhe,b3o,v3o,vG,F3o,T3o,M3o,Du,ihe,E3o,C3o,FG,w3o,A3o,L3o,Gu,dhe,y3o,x3o,TG,$3o,k3o,S3o,Ou,che,R3o,P3o,MG,B3o,I3o,N3o,Vu,mhe,q3o,j3o,EG,D3o,G3o,O3o,Xu,fhe,V3o,X3o,CG,z3o,Q3o,W3o,zu,ghe,U3o,H3o,wG,J3o,Y3o,K3o,Qu,hhe,Z3o,e5o,AG,o5o,r5o,t5o,Wu,uhe,a5o,n5o,LG,s5o,l5o,i5o,Uu,phe,d5o,c5o,yG,m5o,f5o,g5o,Hu,_he,h5o,u5o,xG,p5o,_5o,b5o,Ju,bhe,v5o,F5o,$G,T5o,M5o,E5o,Yu,vhe,C5o,w5o,kG,A5o,L5o,y5o,Ku,Fhe,x5o,$5o,SG,k5o,S5o,R5o,Zu,The,P5o,B5o,RG,I5o,N5o,q5o,ep,Mhe,j5o,D5o,PG,G5o,O5o,V5o,op,Ehe,X5o,z5o,BG,Q5o,W5o,U5o,rp,Che,H5o,J5o,IG,Y5o,K5o,Z5o,tp,whe,e0o,o0o,NG,r0o,t0o,a0o,ap,Ahe,n0o,s0o,qG,l0o,i0o,d0o,np,Lhe,c0o,m0o,jG,f0o,g0o,h0o,sp,yhe,u0o,p0o,DG,_0o,b0o,v0o,lp,xhe,F0o,T0o,GG,M0o,E0o,C0o,ip,$he,w0o,A0o,OG,L0o,y0o,x0o,dp,khe,$0o,k0o,VG,S0o,R0o,P0o,cp,She,B0o,I0o,XG,N0o,q0o,j0o,mp,Rhe,D0o,G0o,zG,O0o,V0o,X0o,fp,Phe,z0o,Q0o,QG,W0o,U0o,H0o,gp,Bhe,J0o,Y0o,WG,K0o,Z0o,ewo,hp,Ihe,owo,rwo,UG,two,awo,nwo,up,Nhe,swo,lwo,HG,iwo,dwo,cwo,pp,qhe,mwo,fwo,JG,gwo,hwo,uwo,_p,jhe,pwo,_wo,YG,bwo,vwo,Fwo,bp,Dhe,Two,Mwo,KG,Ewo,Cwo,wwo,vp,Ghe,Awo,Lwo,ZG,ywo,xwo,$wo,Fp,Ohe,kwo,Swo,eO,Rwo,Pwo,Bwo,Tp,Vhe,Iwo,Nwo,oO,qwo,jwo,Dwo,Mp,Xhe,Gwo,Owo,rO,Vwo,Xwo,zwo,Ep,Qwo,Cp,Wwo,wp,rx,Uwo,zhe,Hwo,NKe,ud,Ap,Qhe,tx,Jwo,Whe,Ywo,qKe,Ro,ax,Kwo,nx,Zwo,tO,eAo,oAo,rAo,sx,tAo,Uhe,aAo,nAo,sAo,Ke,lx,lAo,Hhe,iAo,dAo,pd,cAo,Jhe,mAo,fAo,Yhe,gAo,hAo,uAo,ie,Lp,Khe,pAo,_Ao,aO,bAo,vAo,FAo,yp,Zhe,TAo,MAo,nO,EAo,CAo,wAo,xp,eue,AAo,LAo,sO,yAo,xAo,$Ao,$p,oue,kAo,SAo,lO,RAo,PAo,BAo,kp,rue,IAo,NAo,iO,qAo,jAo,DAo,Sp,tue,GAo,OAo,dO,VAo,XAo,zAo,Rp,aue,QAo,WAo,cO,UAo,HAo,JAo,Pp,nue,YAo,KAo,mO,ZAo,e6o,o6o,Bp,sue,r6o,t6o,fO,a6o,n6o,s6o,Ip,lue,l6o,i6o,gO,d6o,c6o,m6o,Np,iue,f6o,g6o,hO,h6o,u6o,p6o,qp,due,_6o,b6o,uO,v6o,F6o,T6o,jp,cue,M6o,E6o,pO,C6o,w6o,A6o,Dp,mue,L6o,y6o,_O,x6o,$6o,k6o,Gp,fue,S6o,R6o,bO,P6o,B6o,I6o,Op,gue,N6o,q6o,vO,j6o,D6o,G6o,Vp,hue,O6o,V6o,FO,X6o,z6o,Q6o,Xp,uue,W6o,U6o,TO,H6o,J6o,Y6o,zp,pue,K6o,Z6o,MO,e7o,o7o,r7o,Qp,_ue,t7o,a7o,EO,n7o,s7o,l7o,Wp,bue,i7o,d7o,CO,c7o,m7o,f7o,Up,g7o,Hp,h7o,Jp,ix,u7o,vue,p7o,jKe,_d,Yp,Fue,dx,_7o,Tue,b7o,DKe,Po,cx,v7o,bd,F7o,wO,T7o,M7o,AO,E7o,C7o,w7o,mx,A7o,Mue,L7o,y7o,x7o,_t,fx,$7o,Eue,k7o,S7o,vd,R7o,Cue,P7o,B7o,LO,I7o,N7o,q7o,Kp,j7o,Ze,gx,D7o,wue,G7o,O7o,Ja,V7o,Aue,X7o,z7o,Lue,Q7o,W7o,yue,U7o,H7o,J7o,y,Zp,xue,Y7o,K7o,yO,Z7o,eLo,oLo,e_,$ue,rLo,tLo,xO,aLo,nLo,sLo,o_,kue,lLo,iLo,$O,dLo,cLo,mLo,r_,Sue,fLo,gLo,kO,hLo,uLo,pLo,t_,Rue,_Lo,bLo,SO,vLo,FLo,TLo,a_,Pue,MLo,ELo,RO,CLo,wLo,ALo,n_,Bue,LLo,yLo,PO,xLo,$Lo,kLo,s_,Iue,SLo,RLo,BO,PLo,BLo,ILo,l_,Nue,NLo,qLo,IO,jLo,DLo,GLo,i_,que,OLo,VLo,NO,XLo,zLo,QLo,d_,jue,WLo,ULo,qO,HLo,JLo,YLo,c_,Due,KLo,ZLo,jO,eyo,oyo,ryo,m_,Gue,tyo,ayo,DO,nyo,syo,lyo,f_,Oue,iyo,dyo,GO,cyo,myo,fyo,g_,Vue,gyo,hyo,OO,uyo,pyo,_yo,h_,Xue,byo,vyo,VO,Fyo,Tyo,Myo,u_,zue,Eyo,Cyo,XO,wyo,Ayo,Lyo,p_,Que,yyo,xyo,zO,$yo,kyo,Syo,__,Wue,Ryo,Pyo,QO,Byo,Iyo,Nyo,b_,Uue,qyo,jyo,WO,Dyo,Gyo,Oyo,v_,Hue,Vyo,Xyo,UO,zyo,Qyo,Wyo,F_,Jue,Uyo,Hyo,HO,Jyo,Yyo,Kyo,T_,Yue,Zyo,e8o,JO,o8o,r8o,t8o,M_,Kue,a8o,n8o,YO,s8o,l8o,i8o,E_,Zue,d8o,c8o,KO,m8o,f8o,g8o,C_,epe,h8o,u8o,ZO,p8o,_8o,b8o,w_,ope,v8o,F8o,eV,T8o,M8o,E8o,A_,rpe,C8o,w8o,oV,A8o,L8o,y8o,L_,tpe,x8o,$8o,rV,k8o,S8o,R8o,y_,ape,P8o,B8o,tV,I8o,N8o,q8o,x_,npe,j8o,D8o,aV,G8o,O8o,V8o,$_,spe,X8o,z8o,nV,Q8o,W8o,U8o,k_,lpe,H8o,J8o,sV,Y8o,K8o,Z8o,S_,ipe,e9o,o9o,lV,r9o,t9o,a9o,R_,dpe,n9o,s9o,iV,l9o,i9o,d9o,P_,cpe,c9o,m9o,dV,f9o,g9o,h9o,B_,mpe,u9o,p9o,cV,_9o,b9o,v9o,I_,fpe,F9o,T9o,mV,M9o,E9o,C9o,_l,gpe,w9o,A9o,fV,L9o,y9o,gV,x9o,$9o,k9o,N_,hpe,S9o,R9o,hV,P9o,B9o,I9o,q_,upe,N9o,q9o,uV,j9o,D9o,G9o,j_,ppe,O9o,V9o,pV,X9o,z9o,Q9o,D_,_pe,W9o,U9o,_V,H9o,J9o,Y9o,G_,bpe,K9o,Z9o,bV,exo,oxo,rxo,O_,vpe,txo,axo,vV,nxo,sxo,lxo,V_,Fpe,ixo,dxo,FV,cxo,mxo,fxo,X_,Tpe,gxo,hxo,TV,uxo,pxo,_xo,z_,Mpe,bxo,vxo,MV,Fxo,Txo,Mxo,Q_,Epe,Exo,Cxo,EV,wxo,Axo,Lxo,W_,Cpe,yxo,xxo,CV,$xo,kxo,Sxo,U_,wpe,Rxo,Pxo,wV,Bxo,Ixo,Nxo,H_,Ape,qxo,jxo,AV,Dxo,Gxo,Oxo,J_,Lpe,Vxo,Xxo,LV,zxo,Qxo,Wxo,Y_,ype,Uxo,Hxo,yV,Jxo,Yxo,Kxo,K_,xpe,Zxo,e$o,xV,o$o,r$o,t$o,Z_,$pe,a$o,n$o,$V,s$o,l$o,i$o,eb,kpe,d$o,c$o,kV,m$o,f$o,g$o,ob,Spe,h$o,u$o,SV,p$o,_$o,b$o,rb,Rpe,v$o,F$o,RV,T$o,M$o,E$o,tb,Ppe,C$o,w$o,PV,A$o,L$o,y$o,ab,Bpe,x$o,$$o,BV,k$o,S$o,R$o,nb,Ipe,P$o,B$o,IV,I$o,N$o,q$o,sb,Npe,j$o,D$o,NV,G$o,O$o,V$o,lb,qpe,X$o,z$o,qV,Q$o,W$o,U$o,ib,jpe,H$o,J$o,jV,Y$o,K$o,Z$o,db,Dpe,eko,oko,DV,rko,tko,ako,cb,Gpe,nko,sko,GV,lko,iko,dko,mb,Ope,cko,mko,OV,fko,gko,hko,fb,Vpe,uko,pko,VV,_ko,bko,vko,gb,Xpe,Fko,Tko,XV,Mko,Eko,Cko,hb,zpe,wko,Ako,zV,Lko,yko,xko,ub,Qpe,$ko,kko,QV,Sko,Rko,Pko,pb,Wpe,Bko,Iko,WV,Nko,qko,jko,_b,Upe,Dko,Gko,UV,Oko,Vko,Xko,bb,Hpe,zko,Qko,HV,Wko,Uko,Hko,vb,Jpe,Jko,Yko,JV,Kko,Zko,eSo,Fb,Ype,oSo,rSo,YV,tSo,aSo,nSo,Tb,Kpe,sSo,lSo,KV,iSo,dSo,cSo,Mb,Zpe,mSo,fSo,ZV,gSo,hSo,uSo,Eb,e_e,pSo,_So,eX,bSo,vSo,FSo,Cb,o_e,TSo,MSo,oX,ESo,CSo,wSo,wb,r_e,ASo,LSo,rX,ySo,xSo,$So,Ab,t_e,kSo,SSo,tX,RSo,PSo,BSo,Lb,a_e,ISo,NSo,aX,qSo,jSo,DSo,yb,n_e,GSo,OSo,nX,VSo,XSo,zSo,xb,s_e,QSo,WSo,sX,USo,HSo,JSo,$b,l_e,YSo,KSo,lX,ZSo,eRo,oRo,kb,i_e,rRo,tRo,iX,aRo,nRo,sRo,Sb,d_e,lRo,iRo,dX,dRo,cRo,mRo,Rb,c_e,fRo,gRo,cX,hRo,uRo,pRo,Pb,m_e,_Ro,bRo,mX,vRo,FRo,TRo,Bb,f_e,MRo,ERo,fX,CRo,wRo,ARo,Ib,g_e,LRo,yRo,gX,xRo,$Ro,kRo,Nb,h_e,SRo,RRo,hX,PRo,BRo,IRo,qb,u_e,NRo,qRo,uX,jRo,DRo,GRo,jb,p_e,ORo,VRo,pX,XRo,zRo,QRo,Db,__e,WRo,URo,_X,HRo,JRo,YRo,Gb,b_e,KRo,ZRo,bX,ePo,oPo,rPo,Ob,v_e,tPo,aPo,vX,nPo,sPo,lPo,Vb,F_e,iPo,dPo,FX,cPo,mPo,fPo,Xb,T_e,gPo,hPo,TX,uPo,pPo,_Po,zb,M_e,bPo,vPo,MX,FPo,TPo,MPo,Qb,E_e,EPo,CPo,EX,wPo,APo,LPo,Wb,C_e,yPo,xPo,CX,$Po,kPo,SPo,Ub,w_e,RPo,PPo,wX,BPo,IPo,NPo,Hb,A_e,qPo,jPo,AX,DPo,GPo,OPo,Jb,L_e,VPo,XPo,LX,zPo,QPo,WPo,Yb,y_e,UPo,HPo,yX,JPo,YPo,KPo,Kb,x_e,ZPo,eBo,xX,oBo,rBo,tBo,Zb,$_e,aBo,nBo,$X,sBo,lBo,iBo,e2,k_e,dBo,cBo,kX,mBo,fBo,gBo,o2,S_e,hBo,uBo,SX,pBo,_Bo,bBo,r2,R_e,vBo,FBo,RX,TBo,MBo,EBo,t2,P_e,CBo,wBo,PX,ABo,LBo,yBo,a2,B_e,xBo,$Bo,BX,kBo,SBo,RBo,n2,I_e,PBo,BBo,IX,IBo,NBo,qBo,s2,N_e,jBo,DBo,NX,GBo,OBo,VBo,l2,q_e,XBo,zBo,qX,QBo,WBo,UBo,i2,j_e,HBo,JBo,jX,YBo,KBo,ZBo,d2,D_e,eIo,oIo,DX,rIo,tIo,aIo,c2,G_e,nIo,sIo,GX,lIo,iIo,dIo,m2,O_e,cIo,mIo,OX,fIo,gIo,hIo,f2,uIo,V_e,pIo,_Io,X_e,bIo,vIo,g2,GKe,Fd,h2,z_e,hx,FIo,Q_e,TIo,OKe,Bo,ux,MIo,Td,EIo,VX,CIo,wIo,XX,AIo,LIo,yIo,px,xIo,W_e,$Io,kIo,SIo,bt,_x,RIo,U_e,PIo,BIo,Md,IIo,H_e,NIo,qIo,zX,jIo,DIo,GIo,u2,OIo,eo,bx,VIo,J_e,XIo,zIo,Ya,QIo,Y_e,WIo,UIo,K_e,HIo,JIo,Z_e,YIo,KIo,ZIo,G,p2,ebe,eNo,oNo,QX,rNo,tNo,aNo,_2,obe,nNo,sNo,WX,lNo,iNo,dNo,b2,rbe,cNo,mNo,UX,fNo,gNo,hNo,v2,tbe,uNo,pNo,HX,_No,bNo,vNo,F2,abe,FNo,TNo,JX,MNo,ENo,CNo,T2,nbe,wNo,ANo,YX,LNo,yNo,xNo,M2,sbe,$No,kNo,KX,SNo,RNo,PNo,E2,lbe,BNo,INo,ZX,NNo,qNo,jNo,C2,ibe,DNo,GNo,ez,ONo,VNo,XNo,w2,dbe,zNo,QNo,oz,WNo,UNo,HNo,A2,cbe,JNo,YNo,rz,KNo,ZNo,eqo,L2,mbe,oqo,rqo,tz,tqo,aqo,nqo,y2,fbe,sqo,lqo,az,iqo,dqo,cqo,x2,gbe,mqo,fqo,nz,gqo,hqo,uqo,$2,hbe,pqo,_qo,sz,bqo,vqo,Fqo,k2,ube,Tqo,Mqo,lz,Eqo,Cqo,wqo,S2,pbe,Aqo,Lqo,iz,yqo,xqo,$qo,R2,_be,kqo,Sqo,dz,Rqo,Pqo,Bqo,P2,bbe,Iqo,Nqo,cz,qqo,jqo,Dqo,B2,vbe,Gqo,Oqo,mz,Vqo,Xqo,zqo,I2,Fbe,Qqo,Wqo,fz,Uqo,Hqo,Jqo,N2,Tbe,Yqo,Kqo,gz,Zqo,ejo,ojo,q2,Mbe,rjo,tjo,hz,ajo,njo,sjo,j2,Ebe,ljo,ijo,uz,djo,cjo,mjo,D2,Cbe,fjo,gjo,pz,hjo,ujo,pjo,G2,wbe,_jo,bjo,_z,vjo,Fjo,Tjo,O2,Abe,Mjo,Ejo,bz,Cjo,wjo,Ajo,V2,Lbe,Ljo,yjo,vz,xjo,$jo,kjo,X2,ybe,Sjo,Rjo,Fz,Pjo,Bjo,Ijo,z2,xbe,Njo,qjo,Tz,jjo,Djo,Gjo,Q2,$be,Ojo,Vjo,Mz,Xjo,zjo,Qjo,W2,kbe,Wjo,Ujo,Ez,Hjo,Jjo,Yjo,U2,Sbe,Kjo,Zjo,Cz,eDo,oDo,rDo,H2,Rbe,tDo,aDo,wz,nDo,sDo,lDo,J2,Pbe,iDo,dDo,Az,cDo,mDo,fDo,Y2,Bbe,gDo,hDo,Lz,uDo,pDo,_Do,K2,Ibe,bDo,vDo,yz,FDo,TDo,MDo,Z2,Nbe,EDo,CDo,xz,wDo,ADo,LDo,e1,qbe,yDo,xDo,$z,$Do,kDo,SDo,o1,jbe,RDo,PDo,kz,BDo,IDo,NDo,r1,Dbe,qDo,jDo,Sz,DDo,GDo,ODo,t1,Gbe,VDo,XDo,Rz,zDo,QDo,WDo,a1,Obe,UDo,HDo,Pz,JDo,YDo,KDo,n1,Vbe,ZDo,eGo,Bz,oGo,rGo,tGo,s1,Xbe,aGo,nGo,Iz,sGo,lGo,iGo,l1,zbe,dGo,cGo,Nz,mGo,fGo,gGo,i1,Qbe,hGo,uGo,qz,pGo,_Go,bGo,d1,Wbe,vGo,FGo,jz,TGo,MGo,EGo,c1,CGo,Ube,wGo,AGo,Hbe,LGo,yGo,m1,VKe,Ed,f1,Jbe,vx,xGo,Ybe,$Go,XKe,Io,Fx,kGo,Cd,SGo,Dz,RGo,PGo,Gz,BGo,IGo,NGo,Tx,qGo,Kbe,jGo,DGo,GGo,vt,Mx,OGo,Zbe,VGo,XGo,wd,zGo,e2e,QGo,WGo,Oz,UGo,HGo,JGo,g1,YGo,oo,Ex,KGo,o2e,ZGo,eOo,Ka,oOo,r2e,rOo,tOo,t2e,aOo,nOo,a2e,sOo,lOo,iOo,z,h1,n2e,dOo,cOo,Vz,mOo,fOo,gOo,u1,s2e,hOo,uOo,Xz,pOo,_Oo,bOo,p1,l2e,vOo,FOo,zz,TOo,MOo,EOo,_1,i2e,COo,wOo,Qz,AOo,LOo,yOo,b1,d2e,xOo,$Oo,Wz,kOo,SOo,ROo,v1,c2e,POo,BOo,Uz,IOo,NOo,qOo,F1,m2e,jOo,DOo,Hz,GOo,OOo,VOo,T1,f2e,XOo,zOo,Jz,QOo,WOo,UOo,M1,g2e,HOo,JOo,Yz,YOo,KOo,ZOo,E1,h2e,eVo,oVo,Kz,rVo,tVo,aVo,C1,u2e,nVo,sVo,Zz,lVo,iVo,dVo,w1,p2e,cVo,mVo,eQ,fVo,gVo,hVo,A1,_2e,uVo,pVo,oQ,_Vo,bVo,vVo,L1,b2e,FVo,TVo,rQ,MVo,EVo,CVo,y1,v2e,wVo,AVo,tQ,LVo,yVo,xVo,x1,F2e,$Vo,kVo,aQ,SVo,RVo,PVo,$1,T2e,BVo,IVo,nQ,NVo,qVo,jVo,k1,M2e,DVo,GVo,sQ,OVo,VVo,XVo,S1,E2e,zVo,QVo,lQ,WVo,UVo,HVo,R1,C2e,JVo,YVo,iQ,KVo,ZVo,eXo,P1,w2e,oXo,rXo,dQ,tXo,aXo,nXo,B1,A2e,sXo,lXo,cQ,iXo,dXo,cXo,I1,L2e,mXo,fXo,mQ,gXo,hXo,uXo,N1,y2e,pXo,_Xo,fQ,bXo,vXo,FXo,q1,x2e,TXo,MXo,gQ,EXo,CXo,wXo,j1,$2e,AXo,LXo,hQ,yXo,xXo,$Xo,D1,k2e,kXo,SXo,uQ,RXo,PXo,BXo,G1,S2e,IXo,NXo,pQ,qXo,jXo,DXo,O1,R2e,GXo,OXo,_Q,VXo,XXo,zXo,V1,P2e,QXo,WXo,bQ,UXo,HXo,JXo,X1,B2e,YXo,KXo,vQ,ZXo,ezo,ozo,z1,I2e,rzo,tzo,FQ,azo,nzo,szo,Q1,N2e,lzo,izo,TQ,dzo,czo,mzo,W1,q2e,fzo,gzo,MQ,hzo,uzo,pzo,U1,j2e,_zo,bzo,EQ,vzo,Fzo,Tzo,H1,D2e,Mzo,Ezo,CQ,Czo,wzo,Azo,J1,G2e,Lzo,yzo,wQ,xzo,$zo,kzo,Y1,O2e,Szo,Rzo,AQ,Pzo,Bzo,Izo,K1,V2e,Nzo,qzo,LQ,jzo,Dzo,Gzo,Z1,X2e,Ozo,Vzo,yQ,Xzo,zzo,Qzo,ev,z2e,Wzo,Uzo,xQ,Hzo,Jzo,Yzo,ov,Q2e,Kzo,Zzo,$Q,eQo,oQo,rQo,rv,tQo,W2e,aQo,nQo,U2e,sQo,lQo,tv,zKe,Ad,av,H2e,Cx,iQo,J2e,dQo,QKe,No,wx,cQo,Ld,mQo,kQ,fQo,gQo,SQ,hQo,uQo,pQo,Ax,_Qo,Y2e,bQo,vQo,FQo,Ft,Lx,TQo,K2e,MQo,EQo,yd,CQo,Z2e,wQo,AQo,RQ,LQo,yQo,xQo,nv,$Qo,ro,yx,kQo,e1e,SQo,RQo,Za,PQo,o1e,BQo,IQo,r1e,NQo,qQo,t1e,jQo,DQo,GQo,H,sv,a1e,OQo,VQo,PQ,XQo,zQo,QQo,lv,n1e,WQo,UQo,BQ,HQo,JQo,YQo,iv,s1e,KQo,ZQo,IQ,eWo,oWo,rWo,dv,l1e,tWo,aWo,NQ,nWo,sWo,lWo,cv,i1e,iWo,dWo,qQ,cWo,mWo,fWo,mv,d1e,gWo,hWo,jQ,uWo,pWo,_Wo,fv,c1e,bWo,vWo,DQ,FWo,TWo,MWo,gv,m1e,EWo,CWo,GQ,wWo,AWo,LWo,hv,f1e,yWo,xWo,OQ,$Wo,kWo,SWo,uv,g1e,RWo,PWo,VQ,BWo,IWo,NWo,pv,h1e,qWo,jWo,XQ,DWo,GWo,OWo,_v,u1e,VWo,XWo,zQ,zWo,QWo,WWo,bv,p1e,UWo,HWo,QQ,JWo,YWo,KWo,vv,_1e,ZWo,eUo,WQ,oUo,rUo,tUo,Fv,b1e,aUo,nUo,UQ,sUo,lUo,iUo,Tv,v1e,dUo,cUo,HQ,mUo,fUo,gUo,Mv,F1e,hUo,uUo,JQ,pUo,_Uo,bUo,Ev,T1e,vUo,FUo,YQ,TUo,MUo,EUo,Cv,M1e,CUo,wUo,KQ,AUo,LUo,yUo,wv,E1e,xUo,$Uo,ZQ,kUo,SUo,RUo,Av,C1e,PUo,BUo,eW,IUo,NUo,qUo,Lv,w1e,jUo,DUo,oW,GUo,OUo,VUo,yv,A1e,XUo,zUo,rW,QUo,WUo,UUo,xv,L1e,HUo,JUo,tW,YUo,KUo,ZUo,$v,y1e,eHo,oHo,aW,rHo,tHo,aHo,kv,x1e,nHo,sHo,nW,lHo,iHo,dHo,Sv,$1e,cHo,mHo,sW,fHo,gHo,hHo,Rv,k1e,uHo,pHo,lW,_Ho,bHo,vHo,Pv,S1e,FHo,THo,iW,MHo,EHo,CHo,Bv,R1e,wHo,AHo,dW,LHo,yHo,xHo,Iv,P1e,$Ho,kHo,cW,SHo,RHo,PHo,Nv,B1e,BHo,IHo,mW,NHo,qHo,jHo,qv,I1e,DHo,GHo,fW,OHo,VHo,XHo,jv,N1e,zHo,QHo,gW,WHo,UHo,HHo,Dv,q1e,JHo,YHo,j1e,KHo,ZHo,eJo,Gv,D1e,oJo,rJo,hW,tJo,aJo,nJo,Ov,G1e,sJo,lJo,uW,iJo,dJo,cJo,Vv,O1e,mJo,fJo,pW,gJo,hJo,uJo,Xv,V1e,pJo,_Jo,_W,bJo,vJo,FJo,zv,TJo,X1e,MJo,EJo,z1e,CJo,wJo,Qv,WKe,xd,Wv,Q1e,xx,AJo,W1e,LJo,UKe,qo,$x,yJo,$d,xJo,bW,$Jo,kJo,vW,SJo,RJo,PJo,kx,BJo,U1e,IJo,NJo,qJo,Tt,Sx,jJo,H1e,DJo,GJo,kd,OJo,J1e,VJo,XJo,FW,zJo,QJo,WJo,Uv,UJo,to,Rx,HJo,Y1e,JJo,YJo,en,KJo,K1e,ZJo,eYo,Z1e,oYo,rYo,eve,tYo,aYo,nYo,me,Hv,ove,sYo,lYo,TW,iYo,dYo,cYo,Jv,rve,mYo,fYo,MW,gYo,hYo,uYo,Yv,tve,pYo,_Yo,EW,bYo,vYo,FYo,Kv,ave,TYo,MYo,CW,EYo,CYo,wYo,Zv,nve,AYo,LYo,wW,yYo,xYo,$Yo,eF,sve,kYo,SYo,AW,RYo,PYo,BYo,oF,lve,IYo,NYo,LW,qYo,jYo,DYo,rF,ive,GYo,OYo,yW,VYo,XYo,zYo,tF,dve,QYo,WYo,xW,UYo,HYo,JYo,aF,cve,YYo,KYo,$W,ZYo,eKo,oKo,nF,mve,rKo,tKo,kW,aKo,nKo,sKo,sF,fve,lKo,iKo,SW,dKo,cKo,mKo,lF,gve,fKo,gKo,RW,hKo,uKo,pKo,iF,hve,_Ko,bKo,PW,vKo,FKo,TKo,dF,uve,MKo,EKo,BW,CKo,wKo,AKo,cF,pve,LKo,yKo,IW,xKo,$Ko,kKo,mF,_ve,SKo,RKo,NW,PKo,BKo,IKo,fF,bve,NKo,qKo,qW,jKo,DKo,GKo,gF,vve,OKo,VKo,jW,XKo,zKo,QKo,hF,Fve,WKo,UKo,DW,HKo,JKo,YKo,uF,KKo,Tve,ZKo,eZo,Mve,oZo,rZo,pF,HKe,Sd,_F,Eve,Px,tZo,Cve,aZo,JKe,jo,Bx,nZo,Rd,sZo,GW,lZo,iZo,OW,dZo,cZo,mZo,Ix,fZo,wve,gZo,hZo,uZo,Mt,Nx,pZo,Ave,_Zo,bZo,Pd,vZo,Lve,FZo,TZo,VW,MZo,EZo,CZo,bF,wZo,ao,qx,AZo,yve,LZo,yZo,on,xZo,xve,$Zo,kZo,$ve,SZo,RZo,kve,PZo,BZo,IZo,q,vF,Sve,NZo,qZo,XW,jZo,DZo,GZo,FF,Rve,OZo,VZo,zW,XZo,zZo,QZo,TF,Pve,WZo,UZo,QW,HZo,JZo,YZo,MF,Bve,KZo,ZZo,WW,eer,oer,rer,EF,Ive,ter,aer,UW,ner,ser,ler,CF,Nve,ier,der,HW,cer,mer,fer,wF,qve,ger,her,JW,uer,per,_er,AF,jve,ber,ver,YW,Fer,Ter,Mer,LF,Dve,Eer,Cer,KW,wer,Aer,Ler,yF,Gve,yer,xer,ZW,$er,ker,Ser,xF,Ove,Rer,Per,eU,Ber,Ier,Ner,$F,Vve,qer,jer,oU,Der,Ger,Oer,kF,Xve,Ver,Xer,rU,zer,Qer,Wer,SF,zve,Uer,Her,tU,Jer,Yer,Ker,RF,Qve,Zer,eor,aU,oor,ror,tor,PF,Wve,aor,nor,nU,sor,lor,ior,BF,Uve,dor,cor,sU,mor,gor,hor,IF,Hve,uor,por,lU,_or,bor,vor,NF,Jve,For,Tor,iU,Mor,Eor,Cor,qF,Yve,wor,Aor,dU,Lor,yor,xor,jF,Kve,$or,kor,cU,Sor,Ror,Por,DF,Zve,Bor,Ior,mU,Nor,qor,jor,GF,eFe,Dor,Gor,fU,Oor,Vor,Xor,OF,oFe,zor,Qor,gU,Wor,Uor,Hor,VF,rFe,Jor,Yor,hU,Kor,Zor,err,XF,tFe,orr,rrr,uU,trr,arr,nrr,zF,aFe,srr,lrr,pU,irr,drr,crr,QF,nFe,mrr,frr,_U,grr,hrr,urr,WF,sFe,prr,_rr,bU,brr,vrr,Frr,UF,lFe,Trr,Mrr,vU,Err,Crr,wrr,HF,iFe,Arr,Lrr,FU,yrr,xrr,$rr,JF,dFe,krr,Srr,TU,Rrr,Prr,Brr,YF,cFe,Irr,Nrr,MU,qrr,jrr,Drr,KF,mFe,Grr,Orr,EU,Vrr,Xrr,zrr,ZF,fFe,Qrr,Wrr,CU,Urr,Hrr,Jrr,eT,gFe,Yrr,Krr,wU,Zrr,etr,otr,oT,hFe,rtr,ttr,AU,atr,ntr,str,rT,uFe,ltr,itr,LU,dtr,ctr,mtr,tT,pFe,ftr,gtr,yU,htr,utr,ptr,aT,_Fe,_tr,btr,xU,vtr,Ftr,Ttr,nT,bFe,Mtr,Etr,$U,Ctr,wtr,Atr,sT,vFe,Ltr,ytr,kU,xtr,$tr,ktr,lT,FFe,Str,Rtr,SU,Ptr,Btr,Itr,iT,TFe,Ntr,qtr,RU,jtr,Dtr,Gtr,dT,MFe,Otr,Vtr,PU,Xtr,ztr,Qtr,cT,EFe,Wtr,Utr,BU,Htr,Jtr,Ytr,mT,CFe,Ktr,Ztr,IU,ear,oar,rar,fT,wFe,tar,aar,NU,nar,sar,lar,gT,AFe,iar,dar,qU,car,mar,far,hT,LFe,gar,har,jU,uar,par,_ar,uT,yFe,bar,Far,DU,Tar,Mar,Ear,pT,xFe,Car,war,GU,Aar,Lar,yar,_T,$Fe,xar,$ar,OU,kar,Sar,Rar,bT,Par,kFe,Bar,Iar,SFe,Nar,qar,vT,YKe,Bd,FT,RFe,jx,jar,PFe,Dar,KKe,Do,Dx,Gar,Id,Oar,VU,Var,Xar,XU,zar,Qar,War,Gx,Uar,BFe,Har,Jar,Yar,Et,Ox,Kar,IFe,Zar,enr,Nd,onr,NFe,rnr,tnr,zU,anr,nnr,snr,TT,lnr,no,Vx,inr,qFe,dnr,cnr,rn,mnr,jFe,fnr,gnr,DFe,hnr,unr,GFe,pnr,_nr,bnr,Z,MT,OFe,vnr,Fnr,QU,Tnr,Mnr,Enr,ET,VFe,Cnr,wnr,WU,Anr,Lnr,ynr,CT,XFe,xnr,$nr,UU,knr,Snr,Rnr,wT,zFe,Pnr,Bnr,HU,Inr,Nnr,qnr,AT,QFe,jnr,Dnr,JU,Gnr,Onr,Vnr,LT,WFe,Xnr,znr,YU,Qnr,Wnr,Unr,yT,UFe,Hnr,Jnr,KU,Ynr,Knr,Znr,xT,HFe,esr,osr,ZU,rsr,tsr,asr,$T,JFe,nsr,ssr,eH,lsr,isr,dsr,kT,YFe,csr,msr,oH,fsr,gsr,hsr,ST,KFe,usr,psr,rH,_sr,bsr,vsr,RT,ZFe,Fsr,Tsr,tH,Msr,Esr,Csr,PT,eTe,wsr,Asr,aH,Lsr,ysr,xsr,BT,oTe,$sr,ksr,nH,Ssr,Rsr,Psr,IT,rTe,Bsr,Isr,sH,Nsr,qsr,jsr,NT,tTe,Dsr,Gsr,lH,Osr,Vsr,Xsr,qT,aTe,zsr,Qsr,iH,Wsr,Usr,Hsr,jT,nTe,Jsr,Ysr,dH,Ksr,Zsr,elr,DT,sTe,olr,rlr,cH,tlr,alr,nlr,GT,lTe,slr,llr,mH,ilr,dlr,clr,OT,iTe,mlr,flr,fH,glr,hlr,ulr,VT,dTe,plr,_lr,gH,blr,vlr,Flr,XT,cTe,Tlr,Mlr,hH,Elr,Clr,wlr,zT,mTe,Alr,Llr,uH,ylr,xlr,$lr,QT,fTe,klr,Slr,pH,Rlr,Plr,Blr,WT,gTe,Ilr,Nlr,_H,qlr,jlr,Dlr,UT,hTe,Glr,Olr,bH,Vlr,Xlr,zlr,HT,uTe,Qlr,Wlr,vH,Ulr,Hlr,Jlr,JT,pTe,Ylr,Klr,FH,Zlr,eir,oir,YT,_Te,rir,tir,TH,air,nir,sir,KT,bTe,lir,iir,MH,dir,cir,mir,ZT,vTe,fir,gir,EH,hir,uir,pir,eM,_ir,FTe,bir,vir,TTe,Fir,Tir,oM,ZKe,qd,rM,MTe,Xx,Mir,ETe,Eir,eZe,Go,zx,Cir,jd,wir,CH,Air,Lir,wH,yir,xir,$ir,Qx,kir,CTe,Sir,Rir,Pir,Ct,Wx,Bir,wTe,Iir,Nir,Dd,qir,ATe,jir,Dir,AH,Gir,Oir,Vir,tM,Xir,so,Ux,zir,LTe,Qir,Wir,tn,Uir,yTe,Hir,Jir,xTe,Yir,Kir,$Te,Zir,edr,odr,Ue,aM,kTe,rdr,tdr,LH,adr,ndr,sdr,nM,STe,ldr,idr,yH,ddr,cdr,mdr,sM,RTe,fdr,gdr,xH,hdr,udr,pdr,lM,PTe,_dr,bdr,$H,vdr,Fdr,Tdr,iM,BTe,Mdr,Edr,kH,Cdr,wdr,Adr,dM,ITe,Ldr,ydr,SH,xdr,$dr,kdr,cM,NTe,Sdr,Rdr,RH,Pdr,Bdr,Idr,mM,Ndr,qTe,qdr,jdr,jTe,Ddr,Gdr,fM,oZe,Gd,gM,DTe,Hx,Odr,GTe,Vdr,rZe,Oo,Jx,Xdr,Od,zdr,PH,Qdr,Wdr,BH,Udr,Hdr,Jdr,Yx,Ydr,OTe,Kdr,Zdr,ecr,wt,Kx,ocr,VTe,rcr,tcr,Vd,acr,XTe,ncr,scr,IH,lcr,icr,dcr,hM,ccr,lo,Zx,mcr,zTe,fcr,gcr,an,hcr,QTe,ucr,pcr,WTe,_cr,bcr,UTe,vcr,Fcr,Tcr,J,uM,HTe,Mcr,Ecr,NH,Ccr,wcr,Acr,pM,JTe,Lcr,ycr,qH,xcr,$cr,kcr,_M,YTe,Scr,Rcr,jH,Pcr,Bcr,Icr,bM,KTe,Ncr,qcr,DH,jcr,Dcr,Gcr,vM,ZTe,Ocr,Vcr,GH,Xcr,zcr,Qcr,FM,eMe,Wcr,Ucr,OH,Hcr,Jcr,Ycr,TM,oMe,Kcr,Zcr,VH,emr,omr,rmr,MM,rMe,tmr,amr,XH,nmr,smr,lmr,EM,tMe,imr,dmr,zH,cmr,mmr,fmr,CM,aMe,gmr,hmr,QH,umr,pmr,_mr,wM,nMe,bmr,vmr,WH,Fmr,Tmr,Mmr,AM,sMe,Emr,Cmr,UH,wmr,Amr,Lmr,LM,lMe,ymr,xmr,HH,$mr,kmr,Smr,yM,iMe,Rmr,Pmr,JH,Bmr,Imr,Nmr,xM,dMe,qmr,jmr,YH,Dmr,Gmr,Omr,$M,cMe,Vmr,Xmr,KH,zmr,Qmr,Wmr,kM,mMe,Umr,Hmr,ZH,Jmr,Ymr,Kmr,SM,fMe,Zmr,efr,eJ,ofr,rfr,tfr,RM,gMe,afr,nfr,oJ,sfr,lfr,ifr,PM,hMe,dfr,cfr,rJ,mfr,ffr,gfr,BM,uMe,hfr,ufr,tJ,pfr,_fr,bfr,IM,pMe,vfr,Ffr,aJ,Tfr,Mfr,Efr,NM,_Me,Cfr,wfr,nJ,Afr,Lfr,yfr,qM,bMe,xfr,$fr,sJ,kfr,Sfr,Rfr,jM,vMe,Pfr,Bfr,lJ,Ifr,Nfr,qfr,DM,FMe,jfr,Dfr,iJ,Gfr,Ofr,Vfr,GM,TMe,Xfr,zfr,dJ,Qfr,Wfr,Ufr,OM,MMe,Hfr,Jfr,cJ,Yfr,Kfr,Zfr,VM,EMe,egr,ogr,mJ,rgr,tgr,agr,XM,CMe,ngr,sgr,fJ,lgr,igr,dgr,zM,wMe,cgr,mgr,gJ,fgr,ggr,hgr,QM,AMe,ugr,pgr,hJ,_gr,bgr,vgr,WM,LMe,Fgr,Tgr,uJ,Mgr,Egr,Cgr,UM,yMe,wgr,Agr,pJ,Lgr,ygr,xgr,HM,xMe,$gr,kgr,_J,Sgr,Rgr,Pgr,JM,$Me,Bgr,Igr,bJ,Ngr,qgr,jgr,YM,kMe,Dgr,Ggr,vJ,Ogr,Vgr,Xgr,KM,SMe,zgr,Qgr,FJ,Wgr,Ugr,Hgr,ZM,Jgr,RMe,Ygr,Kgr,PMe,Zgr,ehr,eE,tZe,Xd,oE,BMe,e$,ohr,IMe,rhr,aZe,Vo,o$,thr,zd,ahr,TJ,nhr,shr,MJ,lhr,ihr,dhr,r$,chr,NMe,mhr,fhr,ghr,At,t$,hhr,qMe,uhr,phr,Qd,_hr,jMe,bhr,vhr,EJ,Fhr,Thr,Mhr,rE,Ehr,io,a$,Chr,DMe,whr,Ahr,nn,Lhr,GMe,yhr,xhr,OMe,$hr,khr,VMe,Shr,Rhr,Phr,V,tE,XMe,Bhr,Ihr,CJ,Nhr,qhr,jhr,aE,zMe,Dhr,Ghr,wJ,Ohr,Vhr,Xhr,nE,QMe,zhr,Qhr,AJ,Whr,Uhr,Hhr,sE,WMe,Jhr,Yhr,LJ,Khr,Zhr,eur,lE,UMe,our,rur,yJ,tur,aur,nur,iE,HMe,sur,lur,xJ,iur,dur,cur,dE,JMe,mur,fur,$J,gur,hur,uur,cE,YMe,pur,_ur,kJ,bur,vur,Fur,mE,KMe,Tur,Mur,SJ,Eur,Cur,wur,fE,ZMe,Aur,Lur,RJ,yur,xur,$ur,gE,eEe,kur,Sur,PJ,Rur,Pur,Bur,hE,oEe,Iur,Nur,BJ,qur,jur,Dur,uE,rEe,Gur,Our,IJ,Vur,Xur,zur,pE,tEe,Qur,Wur,NJ,Uur,Hur,Jur,_E,aEe,Yur,Kur,qJ,Zur,epr,opr,bE,nEe,rpr,tpr,jJ,apr,npr,spr,vE,sEe,lpr,ipr,DJ,dpr,cpr,mpr,FE,lEe,fpr,gpr,GJ,hpr,upr,ppr,TE,iEe,_pr,bpr,OJ,vpr,Fpr,Tpr,ME,dEe,Mpr,Epr,VJ,Cpr,wpr,Apr,EE,cEe,Lpr,ypr,XJ,xpr,$pr,kpr,CE,mEe,Spr,Rpr,zJ,Ppr,Bpr,Ipr,wE,fEe,Npr,qpr,QJ,jpr,Dpr,Gpr,AE,gEe,Opr,Vpr,WJ,Xpr,zpr,Qpr,LE,hEe,Wpr,Upr,UJ,Hpr,Jpr,Ypr,yE,uEe,Kpr,Zpr,HJ,e_r,o_r,r_r,xE,pEe,t_r,a_r,JJ,n_r,s_r,l_r,$E,_Ee,i_r,d_r,YJ,c_r,m_r,f_r,kE,bEe,g_r,h_r,KJ,u_r,p_r,__r,SE,vEe,b_r,v_r,ZJ,F_r,T_r,M_r,RE,FEe,E_r,C_r,eY,w_r,A_r,L_r,PE,TEe,y_r,x_r,oY,$_r,k_r,S_r,BE,MEe,R_r,P_r,rY,B_r,I_r,N_r,IE,EEe,q_r,j_r,tY,D_r,G_r,O_r,NE,CEe,V_r,X_r,aY,z_r,Q_r,W_r,qE,wEe,U_r,H_r,nY,J_r,Y_r,K_r,jE,AEe,Z_r,ebr,sY,obr,rbr,tbr,DE,LEe,abr,nbr,lY,sbr,lbr,ibr,GE,yEe,dbr,cbr,iY,mbr,fbr,gbr,OE,xEe,hbr,ubr,dY,pbr,_br,bbr,VE,$Ee,vbr,Fbr,cY,Tbr,Mbr,Ebr,XE,kEe,Cbr,wbr,mY,Abr,Lbr,ybr,zE,SEe,xbr,$br,fY,kbr,Sbr,Rbr,QE,REe,Pbr,Bbr,gY,Ibr,Nbr,qbr,WE,jbr,PEe,Dbr,Gbr,BEe,Obr,Vbr,UE,nZe,Wd,HE,IEe,n$,Xbr,NEe,zbr,sZe,Xo,s$,Qbr,Ud,Wbr,hY,Ubr,Hbr,uY,Jbr,Ybr,Kbr,l$,Zbr,qEe,e2r,o2r,r2r,Lt,i$,t2r,jEe,a2r,n2r,Hd,s2r,DEe,l2r,i2r,pY,d2r,c2r,m2r,JE,f2r,co,d$,g2r,GEe,h2r,u2r,sn,p2r,OEe,_2r,b2r,VEe,v2r,F2r,XEe,T2r,M2r,E2r,zEe,YE,QEe,C2r,w2r,_Y,A2r,L2r,y2r,KE,x2r,WEe,$2r,k2r,UEe,S2r,R2r,ZE,lZe,Jd,e4,HEe,c$,P2r,JEe,B2r,iZe,zo,m$,I2r,Yd,N2r,bY,q2r,j2r,vY,D2r,G2r,O2r,f$,V2r,YEe,X2r,z2r,Q2r,yt,g$,W2r,KEe,U2r,H2r,Kd,J2r,ZEe,Y2r,K2r,FY,Z2r,e1r,o1r,o4,r1r,mo,h$,t1r,e4e,a1r,n1r,ln,s1r,o4e,l1r,i1r,r4e,d1r,c1r,t4e,m1r,f1r,g1r,Zd,r4,a4e,h1r,u1r,TY,p1r,_1r,b1r,t4,n4e,v1r,F1r,MY,T1r,M1r,E1r,a4,s4e,C1r,w1r,EY,A1r,L1r,y1r,n4,x1r,l4e,$1r,k1r,i4e,S1r,R1r,s4,dZe,ec,l4,d4e,u$,P1r,c4e,B1r,cZe,Qo,p$,I1r,oc,N1r,CY,q1r,j1r,wY,D1r,G1r,O1r,_$,V1r,m4e,X1r,z1r,Q1r,xt,b$,W1r,f4e,U1r,H1r,rc,J1r,g4e,Y1r,K1r,AY,Z1r,evr,ovr,i4,rvr,fo,v$,tvr,h4e,avr,nvr,dn,svr,u4e,lvr,ivr,p4e,dvr,cvr,_4e,mvr,fvr,gvr,be,d4,b4e,hvr,uvr,LY,pvr,_vr,bvr,c4,v4e,vvr,Fvr,yY,Tvr,Mvr,Evr,m4,F4e,Cvr,wvr,xY,Avr,Lvr,yvr,f4,T4e,xvr,$vr,$Y,kvr,Svr,Rvr,bl,M4e,Pvr,Bvr,kY,Ivr,Nvr,SY,qvr,jvr,Dvr,g4,E4e,Gvr,Ovr,RY,Vvr,Xvr,zvr,vl,C4e,Qvr,Wvr,PY,Uvr,Hvr,BY,Jvr,Yvr,Kvr,h4,w4e,Zvr,eFr,IY,oFr,rFr,tFr,$t,A4e,aFr,nFr,NY,sFr,lFr,qY,iFr,dFr,jY,cFr,mFr,fFr,u4,L4e,gFr,hFr,DY,uFr,pFr,_Fr,p4,y4e,bFr,vFr,GY,FFr,TFr,MFr,_4,x4e,EFr,CFr,OY,wFr,AFr,LFr,b4,$4e,yFr,xFr,VY,$Fr,kFr,SFr,v4,k4e,RFr,PFr,XY,BFr,IFr,NFr,F4,S4e,qFr,jFr,zY,DFr,GFr,OFr,T4,R4e,VFr,XFr,QY,zFr,QFr,WFr,M4,P4e,UFr,HFr,WY,JFr,YFr,KFr,E4,ZFr,B4e,eTr,oTr,I4e,rTr,tTr,C4,mZe,tc,w4,N4e,F$,aTr,q4e,nTr,fZe,Wo,T$,sTr,ac,lTr,UY,iTr,dTr,HY,cTr,mTr,fTr,M$,gTr,j4e,hTr,uTr,pTr,kt,E$,_Tr,D4e,bTr,vTr,nc,FTr,G4e,TTr,MTr,JY,ETr,CTr,wTr,A4,ATr,go,C$,LTr,O4e,yTr,xTr,cn,$Tr,V4e,kTr,STr,X4e,RTr,PTr,z4e,BTr,ITr,NTr,Q4e,L4,W4e,qTr,jTr,YY,DTr,GTr,OTr,y4,VTr,U4e,XTr,zTr,H4e,QTr,WTr,x4,gZe,sc,$4,J4e,w$,UTr,Y4e,HTr,hZe,Uo,A$,JTr,lc,YTr,KY,KTr,ZTr,ZY,eMr,oMr,rMr,L$,tMr,K4e,aMr,nMr,sMr,St,y$,lMr,Z4e,iMr,dMr,ic,cMr,eCe,mMr,fMr,eK,gMr,hMr,uMr,k4,pMr,ho,x$,_Mr,oCe,bMr,vMr,mn,FMr,rCe,TMr,MMr,tCe,EMr,CMr,aCe,wMr,AMr,LMr,nCe,S4,sCe,yMr,xMr,oK,$Mr,kMr,SMr,R4,RMr,lCe,PMr,BMr,iCe,IMr,NMr,P4,uZe,dc,B4,dCe,$$,qMr,cCe,jMr,pZe,Ho,k$,DMr,cc,GMr,rK,OMr,VMr,tK,XMr,zMr,QMr,S$,WMr,mCe,UMr,HMr,JMr,Rt,R$,YMr,fCe,KMr,ZMr,mc,eEr,gCe,oEr,rEr,aK,tEr,aEr,nEr,I4,sEr,uo,P$,lEr,hCe,iEr,dEr,fn,cEr,uCe,mEr,fEr,pCe,gEr,hEr,_Ce,uEr,pEr,_Er,bCe,N4,vCe,bEr,vEr,nK,FEr,TEr,MEr,q4,EEr,FCe,CEr,wEr,TCe,AEr,LEr,j4,_Ze,fc,D4,MCe,B$,yEr,ECe,xEr,bZe,Jo,I$,$Er,gc,kEr,sK,SEr,REr,lK,PEr,BEr,IEr,N$,NEr,CCe,qEr,jEr,DEr,Pt,q$,GEr,wCe,OEr,VEr,hc,XEr,ACe,zEr,QEr,iK,WEr,UEr,HEr,G4,JEr,po,j$,YEr,LCe,KEr,ZEr,gn,e4r,yCe,o4r,r4r,xCe,t4r,a4r,$Ce,n4r,s4r,l4r,Pe,O4,kCe,i4r,d4r,dK,c4r,m4r,f4r,V4,SCe,g4r,h4r,cK,u4r,p4r,_4r,X4,RCe,b4r,v4r,mK,F4r,T4r,M4r,z4,PCe,E4r,C4r,fK,w4r,A4r,L4r,Q4,BCe,y4r,x4r,gK,$4r,k4r,S4r,W4,ICe,R4r,P4r,hK,B4r,I4r,N4r,U4,NCe,q4r,j4r,uK,D4r,G4r,O4r,H4,qCe,V4r,X4r,pK,z4r,Q4r,W4r,J4,jCe,U4r,H4r,_K,J4r,Y4r,K4r,Y4,Z4r,DCe,eCr,oCr,GCe,rCr,tCr,K4,vZe,uc,Z4,OCe,D$,aCr,VCe,nCr,FZe,Yo,G$,sCr,pc,lCr,bK,iCr,dCr,vK,cCr,mCr,fCr,O$,gCr,XCe,hCr,uCr,pCr,Bt,V$,_Cr,zCe,bCr,vCr,_c,FCr,QCe,TCr,MCr,FK,ECr,CCr,wCr,eC,ACr,_o,X$,LCr,WCe,yCr,xCr,hn,$Cr,UCe,kCr,SCr,HCe,RCr,PCr,JCe,BCr,ICr,NCr,mt,oC,YCe,qCr,jCr,TK,DCr,GCr,OCr,rC,KCe,VCr,XCr,MK,zCr,QCr,WCr,tC,ZCe,UCr,HCr,EK,JCr,YCr,KCr,aC,e3e,ZCr,e3r,CK,o3r,r3r,t3r,nC,o3e,a3r,n3r,wK,s3r,l3r,i3r,sC,d3r,r3e,c3r,m3r,t3e,f3r,g3r,lC,TZe,bc,iC,a3e,z$,h3r,n3e,u3r,MZe,Ko,Q$,p3r,vc,_3r,AK,b3r,v3r,LK,F3r,T3r,M3r,W$,E3r,s3e,C3r,w3r,A3r,It,U$,L3r,l3e,y3r,x3r,Fc,$3r,i3e,k3r,S3r,yK,R3r,P3r,B3r,dC,I3r,bo,H$,N3r,d3e,q3r,j3r,un,D3r,c3e,G3r,O3r,m3e,V3r,X3r,f3e,z3r,Q3r,W3r,Le,cC,g3e,U3r,H3r,xK,J3r,Y3r,K3r,mC,h3e,Z3r,e5r,$K,o5r,r5r,t5r,fC,u3e,a5r,n5r,kK,s5r,l5r,i5r,gC,p3e,d5r,c5r,SK,m5r,f5r,g5r,hC,_3e,h5r,u5r,RK,p5r,_5r,b5r,uC,b3e,v5r,F5r,PK,T5r,M5r,E5r,pC,v3e,C5r,w5r,BK,A5r,L5r,y5r,_C,F3e,x5r,$5r,IK,k5r,S5r,R5r,bC,T3e,P5r,B5r,NK,I5r,N5r,q5r,vC,M3e,j5r,D5r,qK,G5r,O5r,V5r,FC,X5r,E3e,z5r,Q5r,C3e,W5r,U5r,TC,EZe,Tc,MC,w3e,J$,H5r,A3e,J5r,CZe,Zo,Y$,Y5r,Mc,K5r,jK,Z5r,e0r,DK,o0r,r0r,t0r,K$,a0r,L3e,n0r,s0r,l0r,Nt,Z$,i0r,y3e,d0r,c0r,Ec,m0r,x3e,f0r,g0r,GK,h0r,u0r,p0r,EC,_0r,vo,ek,b0r,$3e,v0r,F0r,pn,T0r,k3e,M0r,E0r,S3e,C0r,w0r,R3e,A0r,L0r,y0r,ok,CC,P3e,x0r,$0r,OK,k0r,S0r,R0r,wC,B3e,P0r,B0r,VK,I0r,N0r,q0r,AC,j0r,I3e,D0r,G0r,N3e,O0r,V0r,LC,wZe,Cc,yC,q3e,rk,X0r,j3e,z0r,AZe,er,tk,Q0r,wc,W0r,XK,U0r,H0r,zK,J0r,Y0r,K0r,ak,Z0r,D3e,ewr,owr,rwr,qt,nk,twr,G3e,awr,nwr,Ac,swr,O3e,lwr,iwr,QK,dwr,cwr,mwr,xC,fwr,Fo,sk,gwr,V3e,hwr,uwr,_n,pwr,X3e,_wr,bwr,z3e,vwr,Fwr,Q3e,Twr,Mwr,Ewr,ft,$C,W3e,Cwr,wwr,WK,Awr,Lwr,ywr,kC,U3e,xwr,$wr,UK,kwr,Swr,Rwr,SC,H3e,Pwr,Bwr,HK,Iwr,Nwr,qwr,RC,J3e,jwr,Dwr,JK,Gwr,Owr,Vwr,PC,Y3e,Xwr,zwr,YK,Qwr,Wwr,Uwr,BC,Hwr,K3e,Jwr,Ywr,Z3e,Kwr,Zwr,IC,LZe,Lc,NC,e5e,lk,eAr,o5e,oAr,yZe,or,ik,rAr,yc,tAr,KK,aAr,nAr,ZK,sAr,lAr,iAr,dk,dAr,r5e,cAr,mAr,fAr,jt,ck,gAr,t5e,hAr,uAr,xc,pAr,a5e,_Ar,bAr,eZ,vAr,FAr,TAr,qC,MAr,To,mk,EAr,n5e,CAr,wAr,bn,AAr,s5e,LAr,yAr,l5e,xAr,$Ar,i5e,kAr,SAr,RAr,vn,jC,d5e,PAr,BAr,oZ,IAr,NAr,qAr,DC,c5e,jAr,DAr,rZ,GAr,OAr,VAr,GC,m5e,XAr,zAr,tZ,QAr,WAr,UAr,OC,f5e,HAr,JAr,aZ,YAr,KAr,ZAr,VC,e6r,g5e,o6r,r6r,h5e,t6r,a6r,XC,xZe,$c,zC,u5e,fk,n6r,p5e,s6r,$Ze,rr,gk,l6r,kc,i6r,nZ,d6r,c6r,sZ,m6r,f6r,g6r,hk,h6r,_5e,u6r,p6r,_6r,Dt,uk,b6r,b5e,v6r,F6r,Sc,T6r,v5e,M6r,E6r,lZ,C6r,w6r,A6r,QC,L6r,Mo,pk,y6r,F5e,x6r,$6r,Fn,k6r,T5e,S6r,R6r,M5e,P6r,B6r,E5e,I6r,N6r,q6r,Tn,WC,C5e,j6r,D6r,iZ,G6r,O6r,V6r,UC,w5e,X6r,z6r,dZ,Q6r,W6r,U6r,HC,A5e,H6r,J6r,cZ,Y6r,K6r,Z6r,JC,L5e,e7r,o7r,mZ,r7r,t7r,a7r,YC,n7r,y5e,s7r,l7r,x5e,i7r,d7r,KC,kZe,Rc,ZC,$5e,_k,c7r,k5e,m7r,SZe,tr,bk,f7r,Pc,g7r,fZ,h7r,u7r,gZ,p7r,_7r,b7r,vk,v7r,S5e,F7r,T7r,M7r,Gt,Fk,E7r,R5e,C7r,w7r,Bc,A7r,P5e,L7r,y7r,hZ,x7r,$7r,k7r,e3,S7r,Eo,Tk,R7r,B5e,P7r,B7r,Mn,I7r,I5e,N7r,q7r,N5e,j7r,D7r,q5e,G7r,O7r,V7r,j5e,o3,D5e,X7r,z7r,uZ,Q7r,W7r,U7r,r3,H7r,G5e,J7r,Y7r,O5e,K7r,Z7r,t3,RZe,Ic,a3,V5e,Mk,eLr,X5e,oLr,PZe,ar,Ek,rLr,Nc,tLr,pZ,aLr,nLr,_Z,sLr,lLr,iLr,Ck,dLr,z5e,cLr,mLr,fLr,Ot,wk,gLr,Q5e,hLr,uLr,qc,pLr,W5e,_Lr,bLr,bZ,vLr,FLr,TLr,n3,MLr,Co,Ak,ELr,U5e,CLr,wLr,En,ALr,H5e,LLr,yLr,J5e,xLr,$Lr,Y5e,kLr,SLr,RLr,gt,s3,K5e,PLr,BLr,vZ,ILr,NLr,qLr,l3,Z5e,jLr,DLr,FZ,GLr,OLr,VLr,i3,e0e,XLr,zLr,TZ,QLr,WLr,ULr,d3,o0e,HLr,JLr,MZ,YLr,KLr,ZLr,c3,r0e,eyr,oyr,EZ,ryr,tyr,ayr,m3,nyr,t0e,syr,lyr,a0e,iyr,dyr,f3,BZe,jc,g3,n0e,Lk,cyr,s0e,myr,IZe,nr,yk,fyr,Dc,gyr,CZ,hyr,uyr,wZ,pyr,_yr,byr,xk,vyr,l0e,Fyr,Tyr,Myr,Vt,$k,Eyr,i0e,Cyr,wyr,Gc,Ayr,d0e,Lyr,yyr,AZ,xyr,$yr,kyr,h3,Syr,wo,kk,Ryr,c0e,Pyr,Byr,Cn,Iyr,m0e,Nyr,qyr,f0e,jyr,Dyr,g0e,Gyr,Oyr,Vyr,h0e,u3,u0e,Xyr,zyr,LZ,Qyr,Wyr,Uyr,p3,Hyr,p0e,Jyr,Yyr,_0e,Kyr,Zyr,_3,NZe,Oc,b3,b0e,Sk,e8r,v0e,o8r,qZe,sr,Rk,r8r,Vc,t8r,yZ,a8r,n8r,xZ,s8r,l8r,i8r,Pk,d8r,F0e,c8r,m8r,f8r,Xt,Bk,g8r,T0e,h8r,u8r,Xc,p8r,M0e,_8r,b8r,$Z,v8r,F8r,T8r,v3,M8r,Ir,Ik,E8r,E0e,C8r,w8r,wn,A8r,C0e,L8r,y8r,w0e,x8r,$8r,A0e,k8r,S8r,R8r,N,F3,L0e,P8r,B8r,kZ,I8r,N8r,q8r,T3,y0e,j8r,D8r,SZ,G8r,O8r,V8r,M3,x0e,X8r,z8r,RZ,Q8r,W8r,U8r,E3,$0e,H8r,J8r,PZ,Y8r,K8r,Z8r,C3,k0e,e9r,o9r,BZ,r9r,t9r,a9r,w3,S0e,n9r,s9r,IZ,l9r,i9r,d9r,A3,R0e,c9r,m9r,NZ,f9r,g9r,h9r,L3,P0e,u9r,p9r,qZ,_9r,b9r,v9r,y3,B0e,F9r,T9r,jZ,M9r,E9r,C9r,x3,I0e,w9r,A9r,DZ,L9r,y9r,x9r,$3,N0e,$9r,k9r,GZ,S9r,R9r,P9r,k3,q0e,B9r,I9r,OZ,N9r,q9r,j9r,S3,j0e,D9r,G9r,VZ,O9r,V9r,X9r,R3,D0e,z9r,Q9r,XZ,W9r,U9r,H9r,P3,G0e,J9r,Y9r,zZ,K9r,Z9r,exr,B3,O0e,oxr,rxr,QZ,txr,axr,nxr,I3,V0e,sxr,lxr,WZ,ixr,dxr,cxr,N3,X0e,mxr,fxr,UZ,gxr,hxr,uxr,Fl,z0e,pxr,_xr,HZ,bxr,vxr,JZ,Fxr,Txr,Mxr,q3,Q0e,Exr,Cxr,YZ,wxr,Axr,Lxr,j3,W0e,yxr,xxr,KZ,$xr,kxr,Sxr,D3,U0e,Rxr,Pxr,ZZ,Bxr,Ixr,Nxr,G3,H0e,qxr,jxr,eee,Dxr,Gxr,Oxr,O3,J0e,Vxr,Xxr,oee,zxr,Qxr,Wxr,V3,Y0e,Uxr,Hxr,ree,Jxr,Yxr,Kxr,X3,K0e,Zxr,e$r,tee,o$r,r$r,t$r,z3,Z0e,a$r,n$r,aee,s$r,l$r,i$r,Q3,ewe,d$r,c$r,nee,m$r,f$r,g$r,W3,owe,h$r,u$r,see,p$r,_$r,b$r,U3,rwe,v$r,F$r,lee,T$r,M$r,E$r,H3,twe,C$r,w$r,iee,A$r,L$r,y$r,J3,awe,x$r,$$r,dee,k$r,S$r,R$r,Y3,nwe,P$r,B$r,cee,I$r,N$r,q$r,K3,swe,j$r,D$r,mee,G$r,O$r,V$r,Z3,lwe,X$r,z$r,fee,Q$r,W$r,U$r,e5,iwe,H$r,J$r,gee,Y$r,K$r,Z$r,o5,dwe,ekr,okr,hee,rkr,tkr,akr,r5,cwe,nkr,skr,uee,lkr,ikr,dkr,t5,mwe,ckr,mkr,pee,fkr,gkr,hkr,a5,fwe,ukr,pkr,_ee,_kr,bkr,vkr,n5,gwe,Fkr,Tkr,bee,Mkr,Ekr,Ckr,s5,hwe,wkr,Akr,vee,Lkr,ykr,xkr,l5,uwe,$kr,kkr,Fee,Skr,Rkr,Pkr,i5,pwe,Bkr,Ikr,Tee,Nkr,qkr,jkr,d5,_we,Dkr,Gkr,Mee,Okr,Vkr,Xkr,c5,bwe,zkr,Qkr,Eee,Wkr,Ukr,Hkr,m5,vwe,Jkr,Ykr,Cee,Kkr,Zkr,eSr,f5,Fwe,oSr,rSr,wee,tSr,aSr,nSr,g5,Twe,sSr,lSr,Aee,iSr,dSr,cSr,h5,Mwe,mSr,fSr,Lee,gSr,hSr,uSr,u5,Ewe,pSr,_Sr,yee,bSr,vSr,FSr,p5,Cwe,TSr,MSr,xee,ESr,CSr,wSr,_5,wwe,ASr,LSr,$ee,ySr,xSr,$Sr,b5,Awe,kSr,SSr,kee,RSr,PSr,BSr,v5,jZe,zc,F5,Lwe,Nk,ISr,ywe,NSr,DZe,lr,qk,qSr,Qc,jSr,See,DSr,GSr,Ree,OSr,VSr,XSr,jk,zSr,xwe,QSr,WSr,USr,zt,Dk,HSr,$we,JSr,YSr,Wc,KSr,kwe,ZSr,eRr,Pee,oRr,rRr,tRr,T5,aRr,Nr,Gk,nRr,Swe,sRr,lRr,An,iRr,Rwe,dRr,cRr,Pwe,mRr,fRr,Bwe,gRr,hRr,uRr,se,M5,Iwe,pRr,_Rr,Bee,bRr,vRr,FRr,E5,Nwe,TRr,MRr,Iee,ERr,CRr,wRr,C5,qwe,ARr,LRr,Nee,yRr,xRr,$Rr,w5,jwe,kRr,SRr,qee,RRr,PRr,BRr,A5,Dwe,IRr,NRr,jee,qRr,jRr,DRr,L5,Gwe,GRr,ORr,Dee,VRr,XRr,zRr,y5,Owe,QRr,WRr,Gee,URr,HRr,JRr,x5,Vwe,YRr,KRr,Oee,ZRr,ePr,oPr,$5,Xwe,rPr,tPr,Vee,aPr,nPr,sPr,k5,zwe,lPr,iPr,Xee,dPr,cPr,mPr,S5,Qwe,fPr,gPr,zee,hPr,uPr,pPr,R5,Wwe,_Pr,bPr,Qee,vPr,FPr,TPr,P5,Uwe,MPr,EPr,Wee,CPr,wPr,APr,B5,Hwe,LPr,yPr,Uee,xPr,$Pr,kPr,I5,Jwe,SPr,RPr,Hee,PPr,BPr,IPr,N5,Ywe,NPr,qPr,Jee,jPr,DPr,GPr,q5,Kwe,OPr,VPr,Yee,XPr,zPr,QPr,j5,Zwe,WPr,UPr,Kee,HPr,JPr,YPr,D5,eAe,KPr,ZPr,Zee,eBr,oBr,rBr,G5,oAe,tBr,aBr,eoe,nBr,sBr,lBr,O5,rAe,iBr,dBr,ooe,cBr,mBr,fBr,V5,tAe,gBr,hBr,roe,uBr,pBr,_Br,X5,aAe,bBr,vBr,toe,FBr,TBr,MBr,z5,GZe,Uc,Q5,nAe,Ok,EBr,sAe,CBr,OZe,ir,Vk,wBr,Hc,ABr,aoe,LBr,yBr,noe,xBr,$Br,kBr,Xk,SBr,lAe,RBr,PBr,BBr,Qt,zk,IBr,iAe,NBr,qBr,Jc,jBr,dAe,DBr,GBr,soe,OBr,VBr,XBr,W5,zBr,qr,Qk,QBr,cAe,WBr,UBr,Ln,HBr,mAe,JBr,YBr,fAe,KBr,ZBr,gAe,eIr,oIr,rIr,Me,U5,hAe,tIr,aIr,loe,nIr,sIr,lIr,H5,uAe,iIr,dIr,ioe,cIr,mIr,fIr,J5,pAe,gIr,hIr,doe,uIr,pIr,_Ir,Y5,_Ae,bIr,vIr,coe,FIr,TIr,MIr,K5,bAe,EIr,CIr,moe,wIr,AIr,LIr,Z5,vAe,yIr,xIr,foe,$Ir,kIr,SIr,e0,FAe,RIr,PIr,goe,BIr,IIr,NIr,o0,TAe,qIr,jIr,hoe,DIr,GIr,OIr,r0,MAe,VIr,XIr,uoe,zIr,QIr,WIr,t0,EAe,UIr,HIr,poe,JIr,YIr,KIr,a0,CAe,ZIr,eNr,_oe,oNr,rNr,tNr,n0,wAe,aNr,nNr,boe,sNr,lNr,iNr,s0,AAe,dNr,cNr,voe,mNr,fNr,gNr,l0,LAe,hNr,uNr,Foe,pNr,_Nr,bNr,i0,VZe,Yc,d0,yAe,Wk,vNr,xAe,FNr,XZe,dr,Uk,TNr,Kc,MNr,Toe,ENr,CNr,Moe,wNr,ANr,LNr,Hk,yNr,$Ae,xNr,$Nr,kNr,Wt,Jk,SNr,kAe,RNr,PNr,Zc,BNr,SAe,INr,NNr,Eoe,qNr,jNr,DNr,c0,GNr,jr,Yk,ONr,RAe,VNr,XNr,yn,zNr,PAe,QNr,WNr,BAe,UNr,HNr,IAe,JNr,YNr,KNr,Be,m0,NAe,ZNr,eqr,Coe,oqr,rqr,tqr,f0,qAe,aqr,nqr,woe,sqr,lqr,iqr,Tl,jAe,dqr,cqr,Aoe,mqr,fqr,Loe,gqr,hqr,uqr,g0,DAe,pqr,_qr,yoe,bqr,vqr,Fqr,h0,GAe,Tqr,Mqr,xoe,Eqr,Cqr,wqr,u0,OAe,Aqr,Lqr,$oe,yqr,xqr,$qr,p0,VAe,kqr,Sqr,koe,Rqr,Pqr,Bqr,_0,XAe,Iqr,Nqr,Soe,qqr,jqr,Dqr,b0,zAe,Gqr,Oqr,Roe,Vqr,Xqr,zqr,v0,zZe,em,F0,QAe,Kk,Qqr,WAe,Wqr,QZe,cr,Zk,Uqr,om,Hqr,Poe,Jqr,Yqr,Boe,Kqr,Zqr,ejr,eS,ojr,UAe,rjr,tjr,ajr,Ut,oS,njr,HAe,sjr,ljr,rm,ijr,JAe,djr,cjr,Ioe,mjr,fjr,gjr,T0,hjr,Dr,rS,ujr,YAe,pjr,_jr,xn,bjr,KAe,vjr,Fjr,ZAe,Tjr,Mjr,e6e,Ejr,Cjr,wjr,tm,M0,o6e,Ajr,Ljr,Noe,yjr,xjr,$jr,E0,r6e,kjr,Sjr,qoe,Rjr,Pjr,Bjr,C0,t6e,Ijr,Njr,joe,qjr,jjr,Djr,w0,WZe,am,A0,a6e,tS,Gjr,n6e,Ojr,UZe,mr,aS,Vjr,nm,Xjr,Doe,zjr,Qjr,Goe,Wjr,Ujr,Hjr,nS,Jjr,s6e,Yjr,Kjr,Zjr,Ht,sS,eDr,l6e,oDr,rDr,sm,tDr,i6e,aDr,nDr,Ooe,sDr,lDr,iDr,L0,dDr,Gr,lS,cDr,d6e,mDr,fDr,$n,gDr,c6e,hDr,uDr,m6e,pDr,_Dr,f6e,bDr,vDr,FDr,fe,y0,g6e,TDr,MDr,Voe,EDr,CDr,wDr,x0,h6e,ADr,LDr,Xoe,yDr,xDr,$Dr,$0,u6e,kDr,SDr,zoe,RDr,PDr,BDr,k0,p6e,IDr,NDr,Qoe,qDr,jDr,DDr,S0,_6e,GDr,ODr,Woe,VDr,XDr,zDr,R0,b6e,QDr,WDr,Uoe,UDr,HDr,JDr,P0,v6e,YDr,KDr,Hoe,ZDr,eGr,oGr,B0,F6e,rGr,tGr,Joe,aGr,nGr,sGr,I0,T6e,lGr,iGr,Yoe,dGr,cGr,mGr,N0,M6e,fGr,gGr,Koe,hGr,uGr,pGr,q0,E6e,_Gr,bGr,Zoe,vGr,FGr,TGr,j0,C6e,MGr,EGr,ere,CGr,wGr,AGr,D0,w6e,LGr,yGr,ore,xGr,$Gr,kGr,G0,A6e,SGr,RGr,rre,PGr,BGr,IGr,O0,L6e,NGr,qGr,tre,jGr,DGr,GGr,V0,y6e,OGr,VGr,are,XGr,zGr,QGr,X0,x6e,WGr,UGr,nre,HGr,JGr,YGr,z0,$6e,KGr,ZGr,sre,eOr,oOr,rOr,Q0,k6e,tOr,aOr,lre,nOr,sOr,lOr,W0,S6e,iOr,dOr,ire,cOr,mOr,fOr,U0,HZe,lm,H0,R6e,iS,gOr,P6e,hOr,JZe,fr,dS,uOr,im,pOr,dre,_Or,bOr,cre,vOr,FOr,TOr,cS,MOr,B6e,EOr,COr,wOr,Jt,mS,AOr,I6e,LOr,yOr,dm,xOr,N6e,$Or,kOr,mre,SOr,ROr,POr,J0,BOr,Or,fS,IOr,q6e,NOr,qOr,kn,jOr,j6e,DOr,GOr,D6e,OOr,VOr,G6e,XOr,zOr,QOr,ye,Y0,O6e,WOr,UOr,fre,HOr,JOr,YOr,K0,V6e,KOr,ZOr,gre,eVr,oVr,rVr,Z0,X6e,tVr,aVr,hre,nVr,sVr,lVr,ew,z6e,iVr,dVr,ure,cVr,mVr,fVr,ow,Q6e,gVr,hVr,pre,uVr,pVr,_Vr,rw,W6e,bVr,vVr,_re,FVr,TVr,MVr,tw,U6e,EVr,CVr,bre,wVr,AVr,LVr,aw,H6e,yVr,xVr,vre,$Vr,kVr,SVr,nw,J6e,RVr,PVr,Fre,BVr,IVr,NVr,sw,Y6e,qVr,jVr,Tre,DVr,GVr,OVr,lw,YZe,cm,iw,K6e,gS,VVr,Z6e,XVr,KZe,gr,hS,zVr,mm,QVr,Mre,WVr,UVr,Ere,HVr,JVr,YVr,uS,KVr,e7e,ZVr,eXr,oXr,Yt,pS,rXr,o7e,tXr,aXr,fm,nXr,r7e,sXr,lXr,Cre,iXr,dXr,cXr,dw,mXr,Vr,_S,fXr,t7e,gXr,hXr,Sn,uXr,a7e,pXr,_Xr,n7e,bXr,vXr,s7e,FXr,TXr,MXr,re,cw,l7e,EXr,CXr,wre,wXr,AXr,LXr,mw,i7e,yXr,xXr,Are,$Xr,kXr,SXr,fw,d7e,RXr,PXr,Lre,BXr,IXr,NXr,gw,c7e,qXr,jXr,yre,DXr,GXr,OXr,hw,m7e,VXr,XXr,xre,zXr,QXr,WXr,uw,f7e,UXr,HXr,$re,JXr,YXr,KXr,pw,g7e,ZXr,ezr,kre,ozr,rzr,tzr,_w,h7e,azr,nzr,Sre,szr,lzr,izr,bw,u7e,dzr,czr,Rre,mzr,fzr,gzr,vw,p7e,hzr,uzr,Pre,pzr,_zr,bzr,Fw,_7e,vzr,Fzr,Bre,Tzr,Mzr,Ezr,Tw,b7e,Czr,wzr,Ire,Azr,Lzr,yzr,Mw,v7e,xzr,$zr,Nre,kzr,Szr,Rzr,Ew,F7e,Pzr,Bzr,qre,Izr,Nzr,qzr,Cw,T7e,jzr,Dzr,jre,Gzr,Ozr,Vzr,ww,M7e,Xzr,zzr,Dre,Qzr,Wzr,Uzr,Aw,E7e,Hzr,Jzr,Gre,Yzr,Kzr,Zzr,Lw,C7e,eQr,oQr,Ore,rQr,tQr,aQr,yw,w7e,nQr,sQr,Vre,lQr,iQr,dQr,xw,A7e,cQr,mQr,Xre,fQr,gQr,hQr,$w,L7e,uQr,pQr,zre,_Qr,bQr,vQr,kw,y7e,FQr,TQr,Qre,MQr,EQr,CQr,Sw,x7e,wQr,AQr,Wre,LQr,yQr,xQr,Rw,$7e,$Qr,kQr,Ure,SQr,RQr,PQr,Pw,k7e,BQr,IQr,Hre,NQr,qQr,jQr,Bw,S7e,DQr,GQr,Jre,OQr,VQr,XQr,Iw,R7e,zQr,QQr,Yre,WQr,UQr,HQr,Nw,ZZe,gm,qw,P7e,bS,JQr,B7e,YQr,eeo,hr,vS,KQr,hm,ZQr,Kre,eWr,oWr,Zre,rWr,tWr,aWr,FS,nWr,I7e,sWr,lWr,iWr,Kt,TS,dWr,N7e,cWr,mWr,um,fWr,q7e,gWr,hWr,ete,uWr,pWr,_Wr,jw,bWr,Xr,MS,vWr,j7e,FWr,TWr,Rn,MWr,D7e,EWr,CWr,G7e,wWr,AWr,O7e,LWr,yWr,xWr,ve,Dw,V7e,$Wr,kWr,ote,SWr,RWr,PWr,Gw,X7e,BWr,IWr,rte,NWr,qWr,jWr,Ow,z7e,DWr,GWr,tte,OWr,VWr,XWr,Vw,Q7e,zWr,QWr,ate,WWr,UWr,HWr,Xw,W7e,JWr,YWr,nte,KWr,ZWr,eUr,zw,U7e,oUr,rUr,ste,tUr,aUr,nUr,Qw,H7e,sUr,lUr,lte,iUr,dUr,cUr,Ww,J7e,mUr,fUr,ite,gUr,hUr,uUr,Uw,Y7e,pUr,_Ur,dte,bUr,vUr,FUr,Hw,K7e,TUr,MUr,cte,EUr,CUr,wUr,Jw,Z7e,AUr,LUr,mte,yUr,xUr,$Ur,Yw,eLe,kUr,SUr,fte,RUr,PUr,BUr,Kw,oLe,IUr,NUr,gte,qUr,jUr,DUr,Zw,rLe,GUr,OUr,hte,VUr,XUr,zUr,eA,tLe,QUr,WUr,ute,UUr,HUr,JUr,oA,aLe,YUr,KUr,pte,ZUr,eHr,oHr,rA,nLe,rHr,tHr,_te,aHr,nHr,sHr,tA,oeo,pm,aA,sLe,ES,lHr,lLe,iHr,reo,ur,CS,dHr,_m,cHr,bte,mHr,fHr,vte,gHr,hHr,uHr,wS,pHr,iLe,_Hr,bHr,vHr,Zt,AS,FHr,dLe,THr,MHr,bm,EHr,cLe,CHr,wHr,Fte,AHr,LHr,yHr,nA,xHr,zr,LS,$Hr,mLe,kHr,SHr,Pn,RHr,fLe,PHr,BHr,gLe,IHr,NHr,hLe,qHr,jHr,DHr,yS,sA,uLe,GHr,OHr,Tte,VHr,XHr,zHr,lA,pLe,QHr,WHr,Mte,UHr,HHr,JHr,iA,teo,vm,dA,_Le,xS,YHr,bLe,KHr,aeo,pr,$S,ZHr,Fm,eJr,Ete,oJr,rJr,Cte,tJr,aJr,nJr,kS,sJr,vLe,lJr,iJr,dJr,ea,SS,cJr,FLe,mJr,fJr,Tm,gJr,TLe,hJr,uJr,wte,pJr,_Jr,bJr,cA,vJr,Qr,RS,FJr,MLe,TJr,MJr,Bn,EJr,ELe,CJr,wJr,CLe,AJr,LJr,wLe,yJr,xJr,$Jr,ALe,mA,LLe,kJr,SJr,Ate,RJr,PJr,BJr,fA,neo,Mm,gA,yLe,PS,IJr,xLe,NJr,seo,_r,BS,qJr,Em,jJr,Lte,DJr,GJr,yte,OJr,VJr,XJr,IS,zJr,$Le,QJr,WJr,UJr,oa,NS,HJr,kLe,JJr,YJr,Cm,KJr,SLe,ZJr,eYr,xte,oYr,rYr,tYr,hA,aYr,Wr,qS,nYr,RLe,sYr,lYr,In,iYr,PLe,dYr,cYr,BLe,mYr,fYr,ILe,gYr,hYr,uYr,NLe,uA,qLe,pYr,_Yr,$te,bYr,vYr,FYr,pA,leo,wm,_A,jLe,jS,TYr,DLe,MYr,ieo,br,DS,EYr,Am,CYr,kte,wYr,AYr,Ste,LYr,yYr,xYr,GS,$Yr,GLe,kYr,SYr,RYr,ra,OS,PYr,OLe,BYr,IYr,Lm,NYr,VLe,qYr,jYr,Rte,DYr,GYr,OYr,bA,VYr,Ur,VS,XYr,XLe,zYr,QYr,Nn,WYr,zLe,UYr,HYr,QLe,JYr,YYr,WLe,KYr,ZYr,eKr,de,vA,ULe,oKr,rKr,Pte,tKr,aKr,nKr,FA,HLe,sKr,lKr,Bte,iKr,dKr,cKr,TA,JLe,mKr,fKr,Ite,gKr,hKr,uKr,MA,YLe,pKr,_Kr,Nte,bKr,vKr,FKr,EA,KLe,TKr,MKr,qte,EKr,CKr,wKr,CA,ZLe,AKr,LKr,jte,yKr,xKr,$Kr,wA,eye,kKr,SKr,Dte,RKr,PKr,BKr,AA,oye,IKr,NKr,Gte,qKr,jKr,DKr,LA,rye,GKr,OKr,Ote,VKr,XKr,zKr,yA,tye,QKr,WKr,Vte,UKr,HKr,JKr,xA,aye,YKr,KKr,Xte,ZKr,eZr,oZr,$A,nye,rZr,tZr,zte,aZr,nZr,sZr,kA,sye,lZr,iZr,Qte,dZr,cZr,mZr,SA,lye,fZr,gZr,Wte,hZr,uZr,pZr,RA,iye,_Zr,bZr,Ute,vZr,FZr,TZr,PA,dye,MZr,EZr,Hte,CZr,wZr,AZr,BA,cye,LZr,yZr,Jte,xZr,$Zr,kZr,IA,mye,SZr,RZr,Yte,PZr,BZr,IZr,NA,fye,NZr,qZr,Kte,jZr,DZr,GZr,qA,gye,OZr,VZr,Zte,XZr,zZr,QZr,jA,hye,WZr,UZr,eae,HZr,JZr,YZr,DA,deo,ym,GA,uye,XS,KZr,pye,ZZr,ceo,vr,zS,eet,xm,oet,oae,ret,tet,rae,aet,net,set,QS,iet,_ye,det,cet,met,ta,WS,fet,bye,get,het,$m,uet,vye,pet,_et,tae,bet,vet,Fet,OA,Tet,Hr,US,Met,Fye,Eet,Cet,qn,wet,Tye,Aet,Let,Mye,yet,xet,Eye,$et,ket,Set,ce,VA,Cye,Ret,Pet,aae,Bet,Iet,Net,XA,wye,qet,jet,nae,Det,Get,Oet,zA,Aye,Vet,Xet,sae,zet,Qet,Wet,QA,Lye,Uet,Het,lae,Jet,Yet,Ket,WA,yye,Zet,eot,iae,oot,rot,tot,UA,xye,aot,not,dae,sot,lot,iot,HA,$ye,dot,cot,cae,mot,fot,got,JA,kye,hot,uot,mae,pot,_ot,bot,YA,Sye,vot,Fot,fae,Tot,Mot,Eot,KA,Rye,Cot,wot,gae,Aot,Lot,yot,ZA,Pye,xot,$ot,hae,kot,Sot,Rot,e6,Bye,Pot,Bot,uae,Iot,Not,qot,o6,Iye,jot,Dot,pae,Got,Oot,Vot,r6,Nye,Xot,zot,_ae,Qot,Wot,Uot,t6,qye,Hot,Jot,bae,Yot,Kot,Zot,a6,jye,ert,ort,vae,rrt,trt,art,n6,Dye,nrt,srt,Fae,lrt,irt,drt,s6,Gye,crt,mrt,Tae,frt,grt,hrt,l6,Oye,urt,prt,Mae,_rt,brt,vrt,i6,Vye,Frt,Trt,Eae,Mrt,Ert,Crt,d6,Xye,wrt,Art,Cae,Lrt,yrt,xrt,c6,meo,km,m6,zye,HS,$rt,Qye,krt,feo,Fr,JS,Srt,Sm,Rrt,wae,Prt,Brt,Aae,Irt,Nrt,qrt,YS,jrt,Wye,Drt,Grt,Ort,aa,KS,Vrt,Uye,Xrt,zrt,Rm,Qrt,Hye,Wrt,Urt,Lae,Hrt,Jrt,Yrt,f6,Krt,Jr,ZS,Zrt,Jye,ett,ott,jn,rtt,Yye,ttt,att,Kye,ntt,stt,Zye,ltt,itt,dtt,e8e,g6,o8e,ctt,mtt,yae,ftt,gtt,htt,h6,geo,Pm,u6,r8e,eR,utt,t8e,ptt,heo,Tr,oR,_tt,Bm,btt,xae,vtt,Ftt,$ae,Ttt,Mtt,Ett,rR,Ctt,a8e,wtt,Att,Ltt,na,tR,ytt,n8e,xtt,$tt,Im,ktt,s8e,Stt,Rtt,kae,Ptt,Btt,Itt,p6,Ntt,Yr,aR,qtt,l8e,jtt,Dtt,Dn,Gtt,i8e,Ott,Vtt,d8e,Xtt,ztt,c8e,Qtt,Wtt,Utt,m8e,_6,f8e,Htt,Jtt,Sae,Ytt,Ktt,Ztt,b6,ueo,Nm,v6,g8e,nR,eat,h8e,oat,peo,Mr,sR,rat,qm,tat,Rae,aat,nat,Pae,sat,lat,iat,lR,dat,u8e,cat,mat,fat,sa,iR,gat,p8e,hat,uat,jm,pat,_8e,_at,bat,Bae,vat,Fat,Tat,F6,Mat,Kr,dR,Eat,b8e,Cat,wat,Gn,Aat,v8e,Lat,yat,F8e,xat,$at,T8e,kat,Sat,Rat,te,T6,M8e,Pat,Bat,Iae,Iat,Nat,qat,M6,E8e,jat,Dat,Nae,Gat,Oat,Vat,E6,C8e,Xat,zat,qae,Qat,Wat,Uat,C6,w8e,Hat,Jat,jae,Yat,Kat,Zat,w6,A8e,ent,ont,Dae,rnt,tnt,ant,A6,L8e,nnt,snt,Gae,lnt,int,dnt,L6,y8e,cnt,mnt,Oae,fnt,gnt,hnt,y6,x8e,unt,pnt,Vae,_nt,bnt,vnt,x6,$8e,Fnt,Tnt,Xae,Mnt,Ent,Cnt,$6,k8e,wnt,Ant,zae,Lnt,ynt,xnt,k6,S8e,$nt,knt,Qae,Snt,Rnt,Pnt,S6,R8e,Bnt,Int,Wae,Nnt,qnt,jnt,R6,P8e,Dnt,Gnt,Uae,Ont,Vnt,Xnt,P6,B8e,znt,Qnt,Hae,Wnt,Unt,Hnt,B6,I8e,Jnt,Ynt,Jae,Knt,Znt,est,I6,N8e,ost,rst,Yae,tst,ast,nst,N6,q8e,sst,lst,Kae,ist,dst,cst,q6,j8e,mst,fst,Zae,gst,hst,ust,j6,D8e,pst,_st,ene,bst,vst,Fst,D6,G8e,Tst,Mst,one,Est,Cst,wst,G6,O8e,Ast,Lst,rne,yst,xst,$st,O6,V8e,kst,Sst,tne,Rst,Pst,Bst,V6,X8e,Ist,Nst,ane,qst,jst,Dst,X6,z8e,Gst,Ost,nne,Vst,Xst,zst,z6,Q8e,Qst,Wst,sne,Ust,Hst,Jst,Q6,W8e,Yst,Kst,lne,Zst,elt,olt,W6,U8e,rlt,tlt,ine,alt,nlt,slt,U6,_eo,Dm,H6,H8e,cR,llt,J8e,ilt,beo,Er,mR,dlt,Gm,clt,dne,mlt,flt,cne,glt,hlt,ult,fR,plt,Y8e,_lt,blt,vlt,la,gR,Flt,K8e,Tlt,Mlt,Om,Elt,Z8e,Clt,wlt,mne,Alt,Llt,ylt,J6,xlt,Zr,hR,$lt,e9e,klt,Slt,On,Rlt,o9e,Plt,Blt,r9e,Ilt,Nlt,t9e,qlt,jlt,Dlt,xe,Y6,a9e,Glt,Olt,fne,Vlt,Xlt,zlt,K6,n9e,Qlt,Wlt,gne,Ult,Hlt,Jlt,Z6,s9e,Ylt,Klt,hne,Zlt,eit,oit,e7,l9e,rit,tit,une,ait,nit,sit,o7,i9e,lit,iit,pne,dit,cit,mit,r7,d9e,fit,git,_ne,hit,uit,pit,t7,c9e,_it,bit,bne,vit,Fit,Tit,a7,m9e,Mit,Eit,vne,Cit,wit,Ait,n7,f9e,Lit,yit,Fne,xit,$it,kit,s7,g9e,Sit,Rit,Tne,Pit,Bit,Iit,l7,veo,Vm,i7,h9e,uR,Nit,u9e,qit,Feo,Cr,pR,jit,Xm,Dit,Mne,Git,Oit,Ene,Vit,Xit,zit,_R,Qit,p9e,Wit,Uit,Hit,ia,bR,Jit,_9e,Yit,Kit,zm,Zit,b9e,edt,odt,Cne,rdt,tdt,adt,d7,ndt,et,vR,sdt,v9e,ldt,idt,Vn,ddt,F9e,cdt,mdt,T9e,fdt,gdt,M9e,hdt,udt,pdt,Ee,c7,E9e,_dt,bdt,wne,vdt,Fdt,Tdt,m7,C9e,Mdt,Edt,Ane,Cdt,wdt,Adt,f7,w9e,Ldt,ydt,Lne,xdt,$dt,kdt,g7,A9e,Sdt,Rdt,yne,Pdt,Bdt,Idt,h7,L9e,Ndt,qdt,xne,jdt,Ddt,Gdt,u7,y9e,Odt,Vdt,$ne,Xdt,zdt,Qdt,p7,x9e,Wdt,Udt,kne,Hdt,Jdt,Ydt,_7,$9e,Kdt,Zdt,Sne,ect,oct,rct,b7,k9e,tct,act,Rne,nct,sct,lct,v7,S9e,ict,dct,Pne,cct,mct,fct,F7,R9e,gct,hct,Bne,uct,pct,_ct,T7,P9e,bct,vct,Ine,Fct,Tct,Mct,M7,B9e,Ect,Cct,Nne,wct,Act,Lct,E7,Teo,Qm,C7,I9e,FR,yct,N9e,xct,Meo,wr,TR,$ct,Wm,kct,qne,Sct,Rct,jne,Pct,Bct,Ict,MR,Nct,q9e,qct,jct,Dct,da,ER,Gct,j9e,Oct,Vct,Um,Xct,D9e,zct,Qct,Dne,Wct,Uct,Hct,w7,Jct,ot,CR,Yct,G9e,Kct,Zct,Xn,emt,O9e,omt,rmt,V9e,tmt,amt,X9e,nmt,smt,lmt,$e,A7,z9e,imt,dmt,Gne,cmt,mmt,fmt,L7,Q9e,gmt,hmt,One,umt,pmt,_mt,y7,W9e,bmt,vmt,Vne,Fmt,Tmt,Mmt,x7,U9e,Emt,Cmt,Xne,wmt,Amt,Lmt,$7,H9e,ymt,xmt,zne,$mt,kmt,Smt,k7,J9e,Rmt,Pmt,Qne,Bmt,Imt,Nmt,S7,Y9e,qmt,jmt,Wne,Dmt,Gmt,Omt,R7,K9e,Vmt,Xmt,Une,zmt,Qmt,Wmt,P7,Z9e,Umt,Hmt,Hne,Jmt,Ymt,Kmt,B7,exe,Zmt,eft,Jne,oft,rft,tft,I7,Eeo,Hm,N7,oxe,wR,aft,rxe,nft,Ceo,Ar,AR,sft,Jm,lft,Yne,ift,dft,Kne,cft,mft,fft,LR,gft,txe,hft,uft,pft,ca,yR,_ft,axe,bft,vft,Ym,Fft,nxe,Tft,Mft,Zne,Eft,Cft,wft,q7,Aft,rt,xR,Lft,sxe,yft,xft,zn,$ft,lxe,kft,Sft,ixe,Rft,Pft,dxe,Bft,Ift,Nft,ke,j7,cxe,qft,jft,ese,Dft,Gft,Oft,D7,mxe,Vft,Xft,ose,zft,Qft,Wft,G7,fxe,Uft,Hft,rse,Jft,Yft,Kft,O7,gxe,Zft,egt,tse,ogt,rgt,tgt,V7,hxe,agt,ngt,ase,sgt,lgt,igt,X7,uxe,dgt,cgt,nse,mgt,fgt,ggt,z7,pxe,hgt,ugt,sse,pgt,_gt,bgt,Q7,_xe,vgt,Fgt,lse,Tgt,Mgt,Egt,W7,bxe,Cgt,wgt,ise,Agt,Lgt,ygt,U7,vxe,xgt,$gt,dse,kgt,Sgt,Rgt,H7,weo,Km,J7,Fxe,$R,Pgt,Txe,Bgt,Aeo,Lr,kR,Igt,Zm,Ngt,cse,qgt,jgt,mse,Dgt,Ggt,Ogt,SR,Vgt,Mxe,Xgt,zgt,Qgt,ma,RR,Wgt,Exe,Ugt,Hgt,ef,Jgt,Cxe,Ygt,Kgt,fse,Zgt,eht,oht,Y7,rht,tt,PR,tht,wxe,aht,nht,Qn,sht,Axe,lht,iht,Lxe,dht,cht,yxe,mht,fht,ght,Se,K7,xxe,hht,uht,gse,pht,_ht,bht,Z7,$xe,vht,Fht,hse,Tht,Mht,Eht,eL,kxe,Cht,wht,use,Aht,Lht,yht,oL,Sxe,xht,$ht,pse,kht,Sht,Rht,rL,Rxe,Pht,Bht,_se,Iht,Nht,qht,tL,Pxe,jht,Dht,bse,Ght,Oht,Vht,aL,Bxe,Xht,zht,vse,Qht,Wht,Uht,nL,Ixe,Hht,Jht,Fse,Yht,Kht,Zht,sL,Nxe,eut,out,Tse,rut,tut,aut,lL,qxe,nut,sut,Mse,lut,iut,dut,iL,Leo,of,dL,jxe,BR,cut,Dxe,mut,yeo,yr,IR,fut,rf,gut,Ese,hut,uut,Cse,put,_ut,but,NR,vut,Gxe,Fut,Tut,Mut,fa,qR,Eut,Oxe,Cut,wut,tf,Aut,Vxe,Lut,yut,wse,xut,$ut,kut,cL,Sut,at,jR,Rut,Xxe,Put,But,Wn,Iut,zxe,Nut,qut,Qxe,jut,Dut,Wxe,Gut,Out,Vut,Re,mL,Uxe,Xut,zut,Ase,Qut,Wut,Uut,fL,Hxe,Hut,Jut,Lse,Yut,Kut,Zut,gL,Jxe,ept,opt,yse,rpt,tpt,apt,hL,Yxe,npt,spt,xse,lpt,ipt,dpt,uL,Kxe,cpt,mpt,$se,fpt,gpt,hpt,pL,Zxe,upt,ppt,kse,_pt,bpt,vpt,_L,e$e,Fpt,Tpt,Sse,Mpt,Ept,Cpt,bL,o$e,wpt,Apt,Rse,Lpt,ypt,xpt,vL,r$e,$pt,kpt,Pse,Spt,Rpt,Ppt,FL,t$e,Bpt,Ipt,Bse,Npt,qpt,jpt,TL,xeo,af,ML,a$e,DR,Dpt,n$e,Gpt,$eo,xr,GR,Opt,nf,Vpt,Ise,Xpt,zpt,Nse,Qpt,Wpt,Upt,OR,Hpt,s$e,Jpt,Ypt,Kpt,ga,VR,Zpt,l$e,e_t,o_t,sf,r_t,i$e,t_t,a_t,qse,n_t,s_t,l_t,EL,i_t,nt,XR,d_t,d$e,c_t,m_t,Un,f_t,c$e,g_t,h_t,m$e,u_t,p_t,f$e,__t,b_t,v_t,Xe,CL,g$e,F_t,T_t,jse,M_t,E_t,C_t,wL,h$e,w_t,A_t,Dse,L_t,y_t,x_t,AL,u$e,$_t,k_t,Gse,S_t,R_t,P_t,LL,p$e,B_t,I_t,Ose,N_t,q_t,j_t,yL,_$e,D_t,G_t,Vse,O_t,V_t,X_t,xL,b$e,z_t,Q_t,Xse,W_t,U_t,H_t,$L,v$e,J_t,Y_t,zse,K_t,Z_t,ebt,kL,F$e,obt,rbt,Qse,tbt,abt,nbt,SL,keo,lf,RL,T$e,zR,sbt,M$e,lbt,Seo,$r,QR,ibt,df,dbt,Wse,cbt,mbt,Use,fbt,gbt,hbt,WR,ubt,E$e,pbt,_bt,bbt,ha,UR,vbt,C$e,Fbt,Tbt,cf,Mbt,w$e,Ebt,Cbt,Hse,wbt,Abt,Lbt,PL,ybt,st,HR,xbt,A$e,$bt,kbt,Hn,Sbt,L$e,Rbt,Pbt,y$e,Bbt,Ibt,x$e,Nbt,qbt,jbt,ze,BL,$$e,Dbt,Gbt,Jse,Obt,Vbt,Xbt,IL,k$e,zbt,Qbt,Yse,Wbt,Ubt,Hbt,NL,S$e,Jbt,Ybt,Kse,Kbt,Zbt,e2t,qL,R$e,o2t,r2t,Zse,t2t,a2t,n2t,jL,P$e,s2t,l2t,ele,i2t,d2t,c2t,DL,B$e,m2t,f2t,ole,g2t,h2t,u2t,GL,I$e,p2t,_2t,rle,b2t,v2t,F2t,OL,N$e,T2t,M2t,tle,E2t,C2t,w2t,VL,Reo,mf,XL,q$e,JR,A2t,j$e,L2t,Peo,kr,YR,y2t,ff,x2t,ale,$2t,k2t,nle,S2t,R2t,P2t,KR,B2t,D$e,I2t,N2t,q2t,ua,ZR,j2t,G$e,D2t,G2t,gf,O2t,O$e,V2t,X2t,sle,z2t,Q2t,W2t,zL,U2t,lt,eP,H2t,V$e,J2t,Y2t,Jn,K2t,X$e,Z2t,e1t,z$e,o1t,r1t,Q$e,t1t,a1t,n1t,W$e,QL,U$e,s1t,l1t,lle,i1t,d1t,c1t,WL,Beo,hf,UL,H$e,oP,m1t,J$e,f1t,Ieo,Sr,rP,g1t,uf,h1t,ile,u1t,p1t,dle,_1t,b1t,v1t,tP,F1t,Y$e,T1t,M1t,E1t,pa,aP,C1t,K$e,w1t,A1t,pf,L1t,Z$e,y1t,x1t,cle,$1t,k1t,S1t,HL,R1t,it,nP,P1t,eke,B1t,I1t,Yn,N1t,oke,q1t,j1t,rke,D1t,G1t,tke,O1t,V1t,X1t,sP,JL,ake,z1t,Q1t,mle,W1t,U1t,H1t,YL,nke,J1t,Y1t,fle,K1t,Z1t,evt,KL,Neo,_f,ZL,ske,lP,ovt,lke,rvt,qeo,Rr,iP,tvt,bf,avt,gle,nvt,svt,hle,lvt,ivt,dvt,dP,cvt,ike,mvt,fvt,gvt,_a,cP,hvt,dke,uvt,pvt,vf,_vt,cke,bvt,vvt,ule,Fvt,Tvt,Mvt,ey,Evt,dt,mP,Cvt,mke,wvt,Avt,Kn,Lvt,fke,yvt,xvt,gke,$vt,kvt,hke,Svt,Rvt,Pvt,uke,oy,pke,Bvt,Ivt,ple,Nvt,qvt,jvt,ry,jeo;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),N9=new oe({}),q9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),yf=new Dvt({props:{warning:!0,$$slots:{default:[mua]},$$scope:{ctx:$}}}),j9=new oe({}),D9=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L644"}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L667"}}),Jh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[fua]},$$scope:{ctx:$}}}),X9=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L790"}}),z9=new oe({}),Q9=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L427"}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L441"}}),Ru=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[gua]},$$scope:{ctx:$}}}),J9=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L642"}}),Y9=new oe({}),K9=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L215"}}),Ep=new Dvt({props:{$$slots:{default:[hua]},$$scope:{ctx:$}}}),Cp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[uua]},$$scope:{ctx:$}}}),rx=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L342"}}),tx=new oe({}),ax=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L94"}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L108"}}),Up=new Dvt({props:{$$slots:{default:[pua]},$$scope:{ctx:$}}}),Hp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_ua]},$$scope:{ctx:$}}}),ix=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L275"}}),dx=new oe({}),cx=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L847"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[bua]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g2=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[vua]},$$scope:{ctx:$}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Fua]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Tua]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Mua]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tv=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Eua]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Cua]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[wua]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Aua]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lua]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[yua]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[xua]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L948"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$ua]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kua]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L955"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Sua]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Rua]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L941"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Pua]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bua]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L901"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Iua]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Nua]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L908"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qua]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jua]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L930"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Dua]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Gua]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L964"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Oua]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Vua]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1003"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Xua]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[zua]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1010"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Qua]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Wua]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L919"}}),R$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Uua]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Hua]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1017"}}),q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Jua]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Yua]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1040"}}),V$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Kua]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Zua]},$$scope:{ctx:$}}}),z$=new oe({}),Q$=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1024"}}),U$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[epa]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[opa]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1031"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[rpa]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[tpa]},$$scope:{ctx:$}}}),rk=new oe({}),tk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1049"}}),nk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[apa]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[npa]},$$scope:{ctx:$}}}),lk=new oe({}),ik=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1056"}}),ck=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[spa]},$$scope:{ctx:$}}}),mk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[lpa]},$$scope:{ctx:$}}}),fk=new oe({}),gk=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L996"}}),uk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[ipa]},$$scope:{ctx:$}}}),pk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[dpa]},$$scope:{ctx:$}}}),_k=new oe({}),bk=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L971"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[cpa]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[mpa]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L978"}}),wk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[fpa]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[gpa]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L987"}}),$k=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[hpa]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[upa]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ppa]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[_pa]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[bpa]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vpa]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),zk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Fpa]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Tpa]},$$scope:{ctx:$}}}),Wk=new oe({}),Uk=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Mpa]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Epa]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),oS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Cpa]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[wpa]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),sS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Apa]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Lpa]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),mS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ypa]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xpa]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),pS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$pa]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kpa]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L559"}}),TS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Spa]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tA=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Rpa]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L566"}}),AS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Ppa]},$$scope:{ctx:$}}}),LS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Bpa]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),SS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Ipa]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Npa]},$$scope:{ctx:$}}}),PS=new oe({}),BS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),NS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[qpa]},$$scope:{ctx:$}}}),qS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[jpa]},$$scope:{ctx:$}}}),jS=new oe({}),DS=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),OS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Dpa]},$$scope:{ctx:$}}}),VS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Gpa]},$$scope:{ctx:$}}}),XS=new oe({}),zS=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),WS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Opa]},$$scope:{ctx:$}}}),US=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Vpa]},$$scope:{ctx:$}}}),HS=new oe({}),JS=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),KS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Xpa]},$$scope:{ctx:$}}}),ZS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zpa]},$$scope:{ctx:$}}}),eR=new oe({}),oR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L575"}}),tR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Qpa]},$$scope:{ctx:$}}}),aR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Wpa]},$$scope:{ctx:$}}}),nR=new oe({}),sR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),iR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Upa]},$$scope:{ctx:$}}}),dR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Hpa]},$$scope:{ctx:$}}}),cR=new oe({}),mR=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),gR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Jpa]},$$scope:{ctx:$}}}),hR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ypa]},$$scope:{ctx:$}}}),uR=new oe({}),pR=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),bR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Kpa]},$$scope:{ctx:$}}}),vR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Zpa]},$$scope:{ctx:$}}}),FR=new oe({}),TR=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),ER=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[e_a]},$$scope:{ctx:$}}}),CR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o_a]},$$scope:{ctx:$}}}),wR=new oe({}),AR=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),yR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r_a]},$$scope:{ctx:$}}}),xR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t_a]},$$scope:{ctx:$}}}),$R=new oe({}),kR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),RR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[a_a]},$$scope:{ctx:$}}}),PR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n_a]},$$scope:{ctx:$}}}),BR=new oe({}),IR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),qR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[s_a]},$$scope:{ctx:$}}}),jR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TL=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[l_a]},$$scope:{ctx:$}}}),DR=new oe({}),GR=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),VR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[i_a]},$$scope:{ctx:$}}}),XR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SL=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[d_a]},$$scope:{ctx:$}}}),zR=new oe({}),QR=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),UR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[c_a]},$$scope:{ctx:$}}}),HR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VL=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[m_a]},$$scope:{ctx:$}}}),JR=new oe({}),YR=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ZR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[f_a]},$$scope:{ctx:$}}}),eP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[g_a]},$$scope:{ctx:$}}}),oP=new oe({}),rP=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),aP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[h_a]},$$scope:{ctx:$}}}),nP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KL=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[u_a]},$$scope:{ctx:$}}}),lP=new oe({}),iP=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),cP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ey=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[p_a]},$$scope:{ctx:$}}}),mP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ry=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[__a]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),td=o("Auto Classes"),Ef=l(),pt=a("p"),ad=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=a("code"),R9=o("from_pretrained()"),Cf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),sd=o("Instantiating one of "),es=a("a"),P9=o("AutoConfig"),os=o(", "),rs=a("a"),B9=o("AutoModel"),ld=o(`, and
`),ts=a("a"),I9=o("AutoTokenizer"),id=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),F(Qa.$$.fragment),Je=l(),Ae=a("p"),NB=o("will create a model that is an instance of "),dd=a("a"),qB=o("BertModel"),jB=o("."),xo=l(),Wa=a("p"),DB=o("There is one class of "),Af=a("code"),GB=o("AutoModel"),rto=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),AKe=l(),cd=a("h2"),Lf=a("a"),Fde=a("span"),F(N9.$$.fragment),tto=l(),Tde=a("span"),ato=o("Extending the Auto Classes"),LKe=l(),as=a("p"),nto=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mde=a("code"),sto=o("NewModel"),lto=o(", make sure you have a "),Ede=a("code"),ito=o("NewModelConfig"),dto=o(` then you can add those to the auto
classes like this:`),yKe=l(),F(q9.$$.fragment),xKe=l(),OB=a("p"),cto=o("You will then be able to use the auto classes like you would usually do!"),$Ke=l(),F(yf.$$.fragment),kKe=l(),md=a("h2"),xf=a("a"),Cde=a("span"),F(j9.$$.fragment),mto=l(),wde=a("span"),fto=o("AutoConfig"),SKe=l(),$o=a("div"),F(D9.$$.fragment),gto=l(),G9=a("p"),hto=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VB=a("a"),uto=o("from_pretrained()"),pto=o(" class method."),_to=l(),O9=a("p"),bto=o("This class cannot be instantiated directly using "),Ade=a("code"),vto=o("__init__()"),Fto=o(" (throws an error)."),Tto=l(),Pr=a("div"),F(V9.$$.fragment),Mto=l(),Lde=a("p"),Eto=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Cto=l(),fd=a("p"),wto=o("The configuration class to instantiate is selected based on the "),yde=a("code"),Ato=o("model_type"),Lto=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xde=a("code"),yto=o("pretrained_model_name_or_path"),xto=o(":"),$to=l(),A=a("ul"),$f=a("li"),$de=a("strong"),kto=o("albert"),Sto=o(" \u2014 "),XB=a("a"),Rto=o("AlbertConfig"),Pto=o(" (ALBERT model)"),Bto=l(),kf=a("li"),kde=a("strong"),Ito=o("bart"),Nto=o(" \u2014 "),zB=a("a"),qto=o("BartConfig"),jto=o(" (BART model)"),Dto=l(),Sf=a("li"),Sde=a("strong"),Gto=o("beit"),Oto=o(" \u2014 "),QB=a("a"),Vto=o("BeitConfig"),Xto=o(" (BEiT model)"),zto=l(),Rf=a("li"),Rde=a("strong"),Qto=o("bert"),Wto=o(" \u2014 "),WB=a("a"),Uto=o("BertConfig"),Hto=o(" (BERT model)"),Jto=l(),Pf=a("li"),Pde=a("strong"),Yto=o("bert-generation"),Kto=o(" \u2014 "),UB=a("a"),Zto=o("BertGenerationConfig"),eao=o(" (Bert Generation model)"),oao=l(),Bf=a("li"),Bde=a("strong"),rao=o("big_bird"),tao=o(" \u2014 "),HB=a("a"),aao=o("BigBirdConfig"),nao=o(" (BigBird model)"),sao=l(),If=a("li"),Ide=a("strong"),lao=o("bigbird_pegasus"),iao=o(" \u2014 "),JB=a("a"),dao=o("BigBirdPegasusConfig"),cao=o(" (BigBird-Pegasus model)"),mao=l(),Nf=a("li"),Nde=a("strong"),fao=o("blenderbot"),gao=o(" \u2014 "),YB=a("a"),hao=o("BlenderbotConfig"),uao=o(" (Blenderbot model)"),pao=l(),qf=a("li"),qde=a("strong"),_ao=o("blenderbot-small"),bao=o(" \u2014 "),KB=a("a"),vao=o("BlenderbotSmallConfig"),Fao=o(" (BlenderbotSmall model)"),Tao=l(),jf=a("li"),jde=a("strong"),Mao=o("bloom"),Eao=o(" \u2014 "),ZB=a("a"),Cao=o("BloomConfig"),wao=o(" (BLOOM model)"),Aao=l(),Df=a("li"),Dde=a("strong"),Lao=o("camembert"),yao=o(" \u2014 "),eI=a("a"),xao=o("CamembertConfig"),$ao=o(" (CamemBERT model)"),kao=l(),Gf=a("li"),Gde=a("strong"),Sao=o("canine"),Rao=o(" \u2014 "),oI=a("a"),Pao=o("CanineConfig"),Bao=o(" (CANINE model)"),Iao=l(),Of=a("li"),Ode=a("strong"),Nao=o("clip"),qao=o(" \u2014 "),rI=a("a"),jao=o("CLIPConfig"),Dao=o(" (CLIP model)"),Gao=l(),Vf=a("li"),Vde=a("strong"),Oao=o("codegen"),Vao=o(" \u2014 "),tI=a("a"),Xao=o("CodeGenConfig"),zao=o(" (CodeGen model)"),Qao=l(),Xf=a("li"),Xde=a("strong"),Wao=o("conditional_detr"),Uao=o(" \u2014 "),aI=a("a"),Hao=o("ConditionalDetrConfig"),Jao=o(" (Conditional DETR model)"),Yao=l(),zf=a("li"),zde=a("strong"),Kao=o("convbert"),Zao=o(" \u2014 "),nI=a("a"),eno=o("ConvBertConfig"),ono=o(" (ConvBERT model)"),rno=l(),Qf=a("li"),Qde=a("strong"),tno=o("convnext"),ano=o(" \u2014 "),sI=a("a"),nno=o("ConvNextConfig"),sno=o(" (ConvNeXT model)"),lno=l(),Wf=a("li"),Wde=a("strong"),ino=o("ctrl"),dno=o(" \u2014 "),lI=a("a"),cno=o("CTRLConfig"),mno=o(" (CTRL model)"),fno=l(),Uf=a("li"),Ude=a("strong"),gno=o("cvt"),hno=o(" \u2014 "),iI=a("a"),uno=o("CvtConfig"),pno=o(" (CvT model)"),_no=l(),Hf=a("li"),Hde=a("strong"),bno=o("data2vec-audio"),vno=o(" \u2014 "),dI=a("a"),Fno=o("Data2VecAudioConfig"),Tno=o(" (Data2VecAudio model)"),Mno=l(),Jf=a("li"),Jde=a("strong"),Eno=o("data2vec-text"),Cno=o(" \u2014 "),cI=a("a"),wno=o("Data2VecTextConfig"),Ano=o(" (Data2VecText model)"),Lno=l(),Yf=a("li"),Yde=a("strong"),yno=o("data2vec-vision"),xno=o(" \u2014 "),mI=a("a"),$no=o("Data2VecVisionConfig"),kno=o(" (Data2VecVision model)"),Sno=l(),Kf=a("li"),Kde=a("strong"),Rno=o("deberta"),Pno=o(" \u2014 "),fI=a("a"),Bno=o("DebertaConfig"),Ino=o(" (DeBERTa model)"),Nno=l(),Zf=a("li"),Zde=a("strong"),qno=o("deberta-v2"),jno=o(" \u2014 "),gI=a("a"),Dno=o("DebertaV2Config"),Gno=o(" (DeBERTa-v2 model)"),Ono=l(),eg=a("li"),ece=a("strong"),Vno=o("decision_transformer"),Xno=o(" \u2014 "),hI=a("a"),zno=o("DecisionTransformerConfig"),Qno=o(" (Decision Transformer model)"),Wno=l(),og=a("li"),oce=a("strong"),Uno=o("deformable_detr"),Hno=o(" \u2014 "),uI=a("a"),Jno=o("DeformableDetrConfig"),Yno=o(" (Deformable DETR model)"),Kno=l(),rg=a("li"),rce=a("strong"),Zno=o("deit"),eso=o(" \u2014 "),pI=a("a"),oso=o("DeiTConfig"),rso=o(" (DeiT model)"),tso=l(),tg=a("li"),tce=a("strong"),aso=o("detr"),nso=o(" \u2014 "),_I=a("a"),sso=o("DetrConfig"),lso=o(" (DETR model)"),iso=l(),ag=a("li"),ace=a("strong"),dso=o("distilbert"),cso=o(" \u2014 "),bI=a("a"),mso=o("DistilBertConfig"),fso=o(" (DistilBERT model)"),gso=l(),ng=a("li"),nce=a("strong"),hso=o("donut-swin"),uso=o(" \u2014 "),vI=a("a"),pso=o("DonutSwinConfig"),_so=o(" (DonutSwin model)"),bso=l(),sg=a("li"),sce=a("strong"),vso=o("dpr"),Fso=o(" \u2014 "),FI=a("a"),Tso=o("DPRConfig"),Mso=o(" (DPR model)"),Eso=l(),lg=a("li"),lce=a("strong"),Cso=o("dpt"),wso=o(" \u2014 "),TI=a("a"),Aso=o("DPTConfig"),Lso=o(" (DPT model)"),yso=l(),ig=a("li"),ice=a("strong"),xso=o("electra"),$so=o(" \u2014 "),MI=a("a"),kso=o("ElectraConfig"),Sso=o(" (ELECTRA model)"),Rso=l(),dg=a("li"),dce=a("strong"),Pso=o("encoder-decoder"),Bso=o(" \u2014 "),EI=a("a"),Iso=o("EncoderDecoderConfig"),Nso=o(" (Encoder decoder model)"),qso=l(),cg=a("li"),cce=a("strong"),jso=o("ernie"),Dso=o(" \u2014 "),CI=a("a"),Gso=o("ErnieConfig"),Oso=o(" (ERNIE model)"),Vso=l(),mg=a("li"),mce=a("strong"),Xso=o("flaubert"),zso=o(" \u2014 "),wI=a("a"),Qso=o("FlaubertConfig"),Wso=o(" (FlauBERT model)"),Uso=l(),fg=a("li"),fce=a("strong"),Hso=o("flava"),Jso=o(" \u2014 "),AI=a("a"),Yso=o("FlavaConfig"),Kso=o(" (FLAVA model)"),Zso=l(),gg=a("li"),gce=a("strong"),elo=o("fnet"),olo=o(" \u2014 "),LI=a("a"),rlo=o("FNetConfig"),tlo=o(" (FNet model)"),alo=l(),hg=a("li"),hce=a("strong"),nlo=o("fsmt"),slo=o(" \u2014 "),yI=a("a"),llo=o("FSMTConfig"),ilo=o(" (FairSeq Machine-Translation model)"),dlo=l(),ug=a("li"),uce=a("strong"),clo=o("funnel"),mlo=o(" \u2014 "),xI=a("a"),flo=o("FunnelConfig"),glo=o(" (Funnel Transformer model)"),hlo=l(),pg=a("li"),pce=a("strong"),ulo=o("glpn"),plo=o(" \u2014 "),$I=a("a"),_lo=o("GLPNConfig"),blo=o(" (GLPN model)"),vlo=l(),_g=a("li"),_ce=a("strong"),Flo=o("gpt2"),Tlo=o(" \u2014 "),kI=a("a"),Mlo=o("GPT2Config"),Elo=o(" (OpenAI GPT-2 model)"),Clo=l(),bg=a("li"),bce=a("strong"),wlo=o("gpt_neo"),Alo=o(" \u2014 "),SI=a("a"),Llo=o("GPTNeoConfig"),ylo=o(" (GPT Neo model)"),xlo=l(),vg=a("li"),vce=a("strong"),$lo=o("gpt_neox"),klo=o(" \u2014 "),RI=a("a"),Slo=o("GPTNeoXConfig"),Rlo=o(" (GPT NeoX model)"),Plo=l(),Fg=a("li"),Fce=a("strong"),Blo=o("gpt_neox_japanese"),Ilo=o(" \u2014 "),PI=a("a"),Nlo=o("GPTNeoXJapaneseConfig"),qlo=o(" (GPT NeoX Japanese model)"),jlo=l(),Tg=a("li"),Tce=a("strong"),Dlo=o("gptj"),Glo=o(" \u2014 "),BI=a("a"),Olo=o("GPTJConfig"),Vlo=o(" (GPT-J model)"),Xlo=l(),Mg=a("li"),Mce=a("strong"),zlo=o("groupvit"),Qlo=o(" \u2014 "),II=a("a"),Wlo=o("GroupViTConfig"),Ulo=o(" (GroupViT model)"),Hlo=l(),Eg=a("li"),Ece=a("strong"),Jlo=o("hubert"),Ylo=o(" \u2014 "),NI=a("a"),Klo=o("HubertConfig"),Zlo=o(" (Hubert model)"),eio=l(),Cg=a("li"),Cce=a("strong"),oio=o("ibert"),rio=o(" \u2014 "),qI=a("a"),tio=o("IBertConfig"),aio=o(" (I-BERT model)"),nio=l(),wg=a("li"),wce=a("strong"),sio=o("imagegpt"),lio=o(" \u2014 "),jI=a("a"),iio=o("ImageGPTConfig"),dio=o(" (ImageGPT model)"),cio=l(),Ag=a("li"),Ace=a("strong"),mio=o("layoutlm"),fio=o(" \u2014 "),DI=a("a"),gio=o("LayoutLMConfig"),hio=o(" (LayoutLM model)"),uio=l(),Lg=a("li"),Lce=a("strong"),pio=o("layoutlmv2"),_io=o(" \u2014 "),GI=a("a"),bio=o("LayoutLMv2Config"),vio=o(" (LayoutLMv2 model)"),Fio=l(),yg=a("li"),yce=a("strong"),Tio=o("layoutlmv3"),Mio=o(" \u2014 "),OI=a("a"),Eio=o("LayoutLMv3Config"),Cio=o(" (LayoutLMv3 model)"),wio=l(),xg=a("li"),xce=a("strong"),Aio=o("led"),Lio=o(" \u2014 "),VI=a("a"),yio=o("LEDConfig"),xio=o(" (LED model)"),$io=l(),$g=a("li"),$ce=a("strong"),kio=o("levit"),Sio=o(" \u2014 "),XI=a("a"),Rio=o("LevitConfig"),Pio=o(" (LeViT model)"),Bio=l(),kg=a("li"),kce=a("strong"),Iio=o("longformer"),Nio=o(" \u2014 "),zI=a("a"),qio=o("LongformerConfig"),jio=o(" (Longformer model)"),Dio=l(),Sg=a("li"),Sce=a("strong"),Gio=o("longt5"),Oio=o(" \u2014 "),QI=a("a"),Vio=o("LongT5Config"),Xio=o(" (LongT5 model)"),zio=l(),Rg=a("li"),Rce=a("strong"),Qio=o("luke"),Wio=o(" \u2014 "),WI=a("a"),Uio=o("LukeConfig"),Hio=o(" (LUKE model)"),Jio=l(),Pg=a("li"),Pce=a("strong"),Yio=o("lxmert"),Kio=o(" \u2014 "),UI=a("a"),Zio=o("LxmertConfig"),edo=o(" (LXMERT model)"),odo=l(),Bg=a("li"),Bce=a("strong"),rdo=o("m2m_100"),tdo=o(" \u2014 "),HI=a("a"),ado=o("M2M100Config"),ndo=o(" (M2M100 model)"),sdo=l(),Ig=a("li"),Ice=a("strong"),ldo=o("marian"),ido=o(" \u2014 "),JI=a("a"),ddo=o("MarianConfig"),cdo=o(" (Marian model)"),mdo=l(),Ng=a("li"),Nce=a("strong"),fdo=o("maskformer"),gdo=o(" \u2014 "),YI=a("a"),hdo=o("MaskFormerConfig"),udo=o(" (MaskFormer model)"),pdo=l(),qg=a("li"),qce=a("strong"),_do=o("mbart"),bdo=o(" \u2014 "),KI=a("a"),vdo=o("MBartConfig"),Fdo=o(" (mBART model)"),Tdo=l(),jg=a("li"),jce=a("strong"),Mdo=o("mctct"),Edo=o(" \u2014 "),ZI=a("a"),Cdo=o("MCTCTConfig"),wdo=o(" (M-CTC-T model)"),Ado=l(),Dg=a("li"),Dce=a("strong"),Ldo=o("megatron-bert"),ydo=o(" \u2014 "),eN=a("a"),xdo=o("MegatronBertConfig"),$do=o(" (Megatron-BERT model)"),kdo=l(),Gg=a("li"),Gce=a("strong"),Sdo=o("mobilebert"),Rdo=o(" \u2014 "),oN=a("a"),Pdo=o("MobileBertConfig"),Bdo=o(" (MobileBERT model)"),Ido=l(),Og=a("li"),Oce=a("strong"),Ndo=o("mobilevit"),qdo=o(" \u2014 "),rN=a("a"),jdo=o("MobileViTConfig"),Ddo=o(" (MobileViT model)"),Gdo=l(),Vg=a("li"),Vce=a("strong"),Odo=o("mpnet"),Vdo=o(" \u2014 "),tN=a("a"),Xdo=o("MPNetConfig"),zdo=o(" (MPNet model)"),Qdo=l(),Xg=a("li"),Xce=a("strong"),Wdo=o("mt5"),Udo=o(" \u2014 "),aN=a("a"),Hdo=o("MT5Config"),Jdo=o(" (MT5 model)"),Ydo=l(),zg=a("li"),zce=a("strong"),Kdo=o("mvp"),Zdo=o(" \u2014 "),nN=a("a"),eco=o("MvpConfig"),oco=o(" (MVP model)"),rco=l(),Qg=a("li"),Qce=a("strong"),tco=o("nezha"),aco=o(" \u2014 "),sN=a("a"),nco=o("NezhaConfig"),sco=o(" (Nezha model)"),lco=l(),Wg=a("li"),Wce=a("strong"),ico=o("nystromformer"),dco=o(" \u2014 "),lN=a("a"),cco=o("NystromformerConfig"),mco=o(" (Nystr\xF6mformer model)"),fco=l(),Ug=a("li"),Uce=a("strong"),gco=o("openai-gpt"),hco=o(" \u2014 "),iN=a("a"),uco=o("OpenAIGPTConfig"),pco=o(" (OpenAI GPT model)"),_co=l(),Hg=a("li"),Hce=a("strong"),bco=o("opt"),vco=o(" \u2014 "),dN=a("a"),Fco=o("OPTConfig"),Tco=o(" (OPT model)"),Mco=l(),Jg=a("li"),Jce=a("strong"),Eco=o("owlvit"),Cco=o(" \u2014 "),cN=a("a"),wco=o("OwlViTConfig"),Aco=o(" (OWL-ViT model)"),Lco=l(),Yg=a("li"),Yce=a("strong"),yco=o("pegasus"),xco=o(" \u2014 "),mN=a("a"),$co=o("PegasusConfig"),kco=o(" (Pegasus model)"),Sco=l(),Kg=a("li"),Kce=a("strong"),Rco=o("pegasus_x"),Pco=o(" \u2014 "),fN=a("a"),Bco=o("PegasusXConfig"),Ico=o(" (PEGASUS-X model)"),Nco=l(),Zg=a("li"),Zce=a("strong"),qco=o("perceiver"),jco=o(" \u2014 "),gN=a("a"),Dco=o("PerceiverConfig"),Gco=o(" (Perceiver model)"),Oco=l(),eh=a("li"),eme=a("strong"),Vco=o("plbart"),Xco=o(" \u2014 "),hN=a("a"),zco=o("PLBartConfig"),Qco=o(" (PLBart model)"),Wco=l(),oh=a("li"),ome=a("strong"),Uco=o("poolformer"),Hco=o(" \u2014 "),uN=a("a"),Jco=o("PoolFormerConfig"),Yco=o(" (PoolFormer model)"),Kco=l(),rh=a("li"),rme=a("strong"),Zco=o("prophetnet"),emo=o(" \u2014 "),pN=a("a"),omo=o("ProphetNetConfig"),rmo=o(" (ProphetNet model)"),tmo=l(),th=a("li"),tme=a("strong"),amo=o("qdqbert"),nmo=o(" \u2014 "),_N=a("a"),smo=o("QDQBertConfig"),lmo=o(" (QDQBert model)"),imo=l(),ah=a("li"),ame=a("strong"),dmo=o("rag"),cmo=o(" \u2014 "),bN=a("a"),mmo=o("RagConfig"),fmo=o(" (RAG model)"),gmo=l(),nh=a("li"),nme=a("strong"),hmo=o("realm"),umo=o(" \u2014 "),vN=a("a"),pmo=o("RealmConfig"),_mo=o(" (REALM model)"),bmo=l(),sh=a("li"),sme=a("strong"),vmo=o("reformer"),Fmo=o(" \u2014 "),FN=a("a"),Tmo=o("ReformerConfig"),Mmo=o(" (Reformer model)"),Emo=l(),lh=a("li"),lme=a("strong"),Cmo=o("regnet"),wmo=o(" \u2014 "),TN=a("a"),Amo=o("RegNetConfig"),Lmo=o(" (RegNet model)"),ymo=l(),ih=a("li"),ime=a("strong"),xmo=o("rembert"),$mo=o(" \u2014 "),MN=a("a"),kmo=o("RemBertConfig"),Smo=o(" (RemBERT model)"),Rmo=l(),dh=a("li"),dme=a("strong"),Pmo=o("resnet"),Bmo=o(" \u2014 "),EN=a("a"),Imo=o("ResNetConfig"),Nmo=o(" (ResNet model)"),qmo=l(),ch=a("li"),cme=a("strong"),jmo=o("retribert"),Dmo=o(" \u2014 "),CN=a("a"),Gmo=o("RetriBertConfig"),Omo=o(" (RetriBERT model)"),Vmo=l(),mh=a("li"),mme=a("strong"),Xmo=o("roberta"),zmo=o(" \u2014 "),wN=a("a"),Qmo=o("RobertaConfig"),Wmo=o(" (RoBERTa model)"),Umo=l(),fh=a("li"),fme=a("strong"),Hmo=o("roformer"),Jmo=o(" \u2014 "),AN=a("a"),Ymo=o("RoFormerConfig"),Kmo=o(" (RoFormer model)"),Zmo=l(),gh=a("li"),gme=a("strong"),efo=o("segformer"),ofo=o(" \u2014 "),LN=a("a"),rfo=o("SegformerConfig"),tfo=o(" (SegFormer model)"),afo=l(),hh=a("li"),hme=a("strong"),nfo=o("sew"),sfo=o(" \u2014 "),yN=a("a"),lfo=o("SEWConfig"),ifo=o(" (SEW model)"),dfo=l(),uh=a("li"),ume=a("strong"),cfo=o("sew-d"),mfo=o(" \u2014 "),xN=a("a"),ffo=o("SEWDConfig"),gfo=o(" (SEW-D model)"),hfo=l(),ph=a("li"),pme=a("strong"),ufo=o("speech-encoder-decoder"),pfo=o(" \u2014 "),$N=a("a"),_fo=o("SpeechEncoderDecoderConfig"),bfo=o(" (Speech Encoder decoder model)"),vfo=l(),_h=a("li"),_me=a("strong"),Ffo=o("speech_to_text"),Tfo=o(" \u2014 "),kN=a("a"),Mfo=o("Speech2TextConfig"),Efo=o(" (Speech2Text model)"),Cfo=l(),bh=a("li"),bme=a("strong"),wfo=o("speech_to_text_2"),Afo=o(" \u2014 "),SN=a("a"),Lfo=o("Speech2Text2Config"),yfo=o(" (Speech2Text2 model)"),xfo=l(),vh=a("li"),vme=a("strong"),$fo=o("splinter"),kfo=o(" \u2014 "),RN=a("a"),Sfo=o("SplinterConfig"),Rfo=o(" (Splinter model)"),Pfo=l(),Fh=a("li"),Fme=a("strong"),Bfo=o("squeezebert"),Ifo=o(" \u2014 "),PN=a("a"),Nfo=o("SqueezeBertConfig"),qfo=o(" (SqueezeBERT model)"),jfo=l(),Th=a("li"),Tme=a("strong"),Dfo=o("swin"),Gfo=o(" \u2014 "),BN=a("a"),Ofo=o("SwinConfig"),Vfo=o(" (Swin Transformer model)"),Xfo=l(),Mh=a("li"),Mme=a("strong"),zfo=o("swinv2"),Qfo=o(" \u2014 "),IN=a("a"),Wfo=o("Swinv2Config"),Ufo=o(" (Swin Transformer V2 model)"),Hfo=l(),Eh=a("li"),Eme=a("strong"),Jfo=o("t5"),Yfo=o(" \u2014 "),NN=a("a"),Kfo=o("T5Config"),Zfo=o(" (T5 model)"),ego=l(),Ch=a("li"),Cme=a("strong"),ogo=o("tapas"),rgo=o(" \u2014 "),qN=a("a"),tgo=o("TapasConfig"),ago=o(" (TAPAS model)"),ngo=l(),wh=a("li"),wme=a("strong"),sgo=o("trajectory_transformer"),lgo=o(" \u2014 "),jN=a("a"),igo=o("TrajectoryTransformerConfig"),dgo=o(" (Trajectory Transformer model)"),cgo=l(),Ah=a("li"),Ame=a("strong"),mgo=o("transfo-xl"),fgo=o(" \u2014 "),DN=a("a"),ggo=o("TransfoXLConfig"),hgo=o(" (Transformer-XL model)"),ugo=l(),Lh=a("li"),Lme=a("strong"),pgo=o("trocr"),_go=o(" \u2014 "),GN=a("a"),bgo=o("TrOCRConfig"),vgo=o(" (TrOCR model)"),Fgo=l(),yh=a("li"),yme=a("strong"),Tgo=o("unispeech"),Mgo=o(" \u2014 "),ON=a("a"),Ego=o("UniSpeechConfig"),Cgo=o(" (UniSpeech model)"),wgo=l(),xh=a("li"),xme=a("strong"),Ago=o("unispeech-sat"),Lgo=o(" \u2014 "),VN=a("a"),ygo=o("UniSpeechSatConfig"),xgo=o(" (UniSpeechSat model)"),$go=l(),$h=a("li"),$me=a("strong"),kgo=o("van"),Sgo=o(" \u2014 "),XN=a("a"),Rgo=o("VanConfig"),Pgo=o(" (VAN model)"),Bgo=l(),kh=a("li"),kme=a("strong"),Igo=o("videomae"),Ngo=o(" \u2014 "),zN=a("a"),qgo=o("VideoMAEConfig"),jgo=o(" (VideoMAE model)"),Dgo=l(),Sh=a("li"),Sme=a("strong"),Ggo=o("vilt"),Ogo=o(" \u2014 "),QN=a("a"),Vgo=o("ViltConfig"),Xgo=o(" (ViLT model)"),zgo=l(),Rh=a("li"),Rme=a("strong"),Qgo=o("vision-encoder-decoder"),Wgo=o(" \u2014 "),WN=a("a"),Ugo=o("VisionEncoderDecoderConfig"),Hgo=o(" (Vision Encoder decoder model)"),Jgo=l(),Ph=a("li"),Pme=a("strong"),Ygo=o("vision-text-dual-encoder"),Kgo=o(" \u2014 "),UN=a("a"),Zgo=o("VisionTextDualEncoderConfig"),eho=o(" (VisionTextDualEncoder model)"),oho=l(),Bh=a("li"),Bme=a("strong"),rho=o("visual_bert"),tho=o(" \u2014 "),HN=a("a"),aho=o("VisualBertConfig"),nho=o(" (VisualBERT model)"),sho=l(),Ih=a("li"),Ime=a("strong"),lho=o("vit"),iho=o(" \u2014 "),JN=a("a"),dho=o("ViTConfig"),cho=o(" (ViT model)"),mho=l(),Nh=a("li"),Nme=a("strong"),fho=o("vit_mae"),gho=o(" \u2014 "),YN=a("a"),hho=o("ViTMAEConfig"),uho=o(" (ViTMAE model)"),pho=l(),qh=a("li"),qme=a("strong"),_ho=o("wav2vec2"),bho=o(" \u2014 "),KN=a("a"),vho=o("Wav2Vec2Config"),Fho=o(" (Wav2Vec2 model)"),Tho=l(),jh=a("li"),jme=a("strong"),Mho=o("wav2vec2-conformer"),Eho=o(" \u2014 "),ZN=a("a"),Cho=o("Wav2Vec2ConformerConfig"),who=o(" (Wav2Vec2-Conformer model)"),Aho=l(),Dh=a("li"),Dme=a("strong"),Lho=o("wavlm"),yho=o(" \u2014 "),eq=a("a"),xho=o("WavLMConfig"),$ho=o(" (WavLM model)"),kho=l(),Gh=a("li"),Gme=a("strong"),Sho=o("xclip"),Rho=o(" \u2014 "),oq=a("a"),Pho=o("XCLIPConfig"),Bho=o(" (X-CLIP model)"),Iho=l(),Oh=a("li"),Ome=a("strong"),Nho=o("xglm"),qho=o(" \u2014 "),rq=a("a"),jho=o("XGLMConfig"),Dho=o(" (XGLM model)"),Gho=l(),Vh=a("li"),Vme=a("strong"),Oho=o("xlm"),Vho=o(" \u2014 "),tq=a("a"),Xho=o("XLMConfig"),zho=o(" (XLM model)"),Qho=l(),Xh=a("li"),Xme=a("strong"),Who=o("xlm-prophetnet"),Uho=o(" \u2014 "),aq=a("a"),Hho=o("XLMProphetNetConfig"),Jho=o(" (XLM-ProphetNet model)"),Yho=l(),zh=a("li"),zme=a("strong"),Kho=o("xlm-roberta"),Zho=o(" \u2014 "),nq=a("a"),euo=o("XLMRobertaConfig"),ouo=o(" (XLM-RoBERTa model)"),ruo=l(),Qh=a("li"),Qme=a("strong"),tuo=o("xlm-roberta-xl"),auo=o(" \u2014 "),sq=a("a"),nuo=o("XLMRobertaXLConfig"),suo=o(" (XLM-RoBERTa-XL model)"),luo=l(),Wh=a("li"),Wme=a("strong"),iuo=o("xlnet"),duo=o(" \u2014 "),lq=a("a"),cuo=o("XLNetConfig"),muo=o(" (XLNet model)"),fuo=l(),Uh=a("li"),Ume=a("strong"),guo=o("yolos"),huo=o(" \u2014 "),iq=a("a"),uuo=o("YolosConfig"),puo=o(" (YOLOS model)"),_uo=l(),Hh=a("li"),Hme=a("strong"),buo=o("yoso"),vuo=o(" \u2014 "),dq=a("a"),Fuo=o("YosoConfig"),Tuo=o(" (YOSO model)"),Muo=l(),F(Jh.$$.fragment),Euo=l(),Yh=a("div"),F(X9.$$.fragment),Cuo=l(),Jme=a("p"),wuo=o("Register a new configuration for this class."),RKe=l(),gd=a("h2"),Kh=a("a"),Yme=a("span"),F(z9.$$.fragment),Auo=l(),Kme=a("span"),Luo=o("AutoTokenizer"),PKe=l(),ko=a("div"),F(Q9.$$.fragment),yuo=l(),W9=a("p"),xuo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cq=a("a"),$uo=o("AutoTokenizer.from_pretrained()"),kuo=o(" class method."),Suo=l(),U9=a("p"),Ruo=o("This class cannot be instantiated directly using "),Zme=a("code"),Puo=o("__init__()"),Buo=o(" (throws an error)."),Iuo=l(),Br=a("div"),F(H9.$$.fragment),Nuo=l(),efe=a("p"),quo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),juo=l(),Ua=a("p"),Duo=o("The tokenizer class to instantiate is selected based on the "),ofe=a("code"),Guo=o("model_type"),Ouo=o(` property of the config object (either
passed as an argument or loaded from `),rfe=a("code"),Vuo=o("pretrained_model_name_or_path"),Xuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=a("code"),zuo=o("pretrained_model_name_or_path"),Quo=o(":"),Wuo=l(),k=a("ul"),ns=a("li"),afe=a("strong"),Uuo=o("albert"),Huo=o(" \u2014 "),mq=a("a"),Juo=o("AlbertTokenizer"),Yuo=o(" or "),fq=a("a"),Kuo=o("AlbertTokenizerFast"),Zuo=o(" (ALBERT model)"),epo=l(),ss=a("li"),nfe=a("strong"),opo=o("bart"),rpo=o(" \u2014 "),gq=a("a"),tpo=o("BartTokenizer"),apo=o(" or "),hq=a("a"),npo=o("BartTokenizerFast"),spo=o(" (BART model)"),lpo=l(),ls=a("li"),sfe=a("strong"),ipo=o("barthez"),dpo=o(" \u2014 "),uq=a("a"),cpo=o("BarthezTokenizer"),mpo=o(" or "),pq=a("a"),fpo=o("BarthezTokenizerFast"),gpo=o(" (BARThez model)"),hpo=l(),Zh=a("li"),lfe=a("strong"),upo=o("bartpho"),ppo=o(" \u2014 "),_q=a("a"),_po=o("BartphoTokenizer"),bpo=o(" (BARTpho model)"),vpo=l(),is=a("li"),ife=a("strong"),Fpo=o("bert"),Tpo=o(" \u2014 "),bq=a("a"),Mpo=o("BertTokenizer"),Epo=o(" or "),vq=a("a"),Cpo=o("BertTokenizerFast"),wpo=o(" (BERT model)"),Apo=l(),eu=a("li"),dfe=a("strong"),Lpo=o("bert-generation"),ypo=o(" \u2014 "),Fq=a("a"),xpo=o("BertGenerationTokenizer"),$po=o(" (Bert Generation model)"),kpo=l(),ou=a("li"),cfe=a("strong"),Spo=o("bert-japanese"),Rpo=o(" \u2014 "),Tq=a("a"),Ppo=o("BertJapaneseTokenizer"),Bpo=o(" (BertJapanese model)"),Ipo=l(),ru=a("li"),mfe=a("strong"),Npo=o("bertweet"),qpo=o(" \u2014 "),Mq=a("a"),jpo=o("BertweetTokenizer"),Dpo=o(" (BERTweet model)"),Gpo=l(),ds=a("li"),ffe=a("strong"),Opo=o("big_bird"),Vpo=o(" \u2014 "),Eq=a("a"),Xpo=o("BigBirdTokenizer"),zpo=o(" or "),Cq=a("a"),Qpo=o("BigBirdTokenizerFast"),Wpo=o(" (BigBird model)"),Upo=l(),cs=a("li"),gfe=a("strong"),Hpo=o("bigbird_pegasus"),Jpo=o(" \u2014 "),wq=a("a"),Ypo=o("PegasusTokenizer"),Kpo=o(" or "),Aq=a("a"),Zpo=o("PegasusTokenizerFast"),e_o=o(" (BigBird-Pegasus model)"),o_o=l(),ms=a("li"),hfe=a("strong"),r_o=o("blenderbot"),t_o=o(" \u2014 "),Lq=a("a"),a_o=o("BlenderbotTokenizer"),n_o=o(" or "),yq=a("a"),s_o=o("BlenderbotTokenizerFast"),l_o=o(" (Blenderbot model)"),i_o=l(),tu=a("li"),ufe=a("strong"),d_o=o("blenderbot-small"),c_o=o(" \u2014 "),xq=a("a"),m_o=o("BlenderbotSmallTokenizer"),f_o=o(" (BlenderbotSmall model)"),g_o=l(),au=a("li"),pfe=a("strong"),h_o=o("bloom"),u_o=o(" \u2014 "),$q=a("a"),p_o=o("BloomTokenizerFast"),__o=o(" (BLOOM model)"),b_o=l(),nu=a("li"),_fe=a("strong"),v_o=o("byt5"),F_o=o(" \u2014 "),kq=a("a"),T_o=o("ByT5Tokenizer"),M_o=o(" (ByT5 model)"),E_o=l(),fs=a("li"),bfe=a("strong"),C_o=o("camembert"),w_o=o(" \u2014 "),Sq=a("a"),A_o=o("CamembertTokenizer"),L_o=o(" or "),Rq=a("a"),y_o=o("CamembertTokenizerFast"),x_o=o(" (CamemBERT model)"),$_o=l(),su=a("li"),vfe=a("strong"),k_o=o("canine"),S_o=o(" \u2014 "),Pq=a("a"),R_o=o("CanineTokenizer"),P_o=o(" (CANINE model)"),B_o=l(),gs=a("li"),Ffe=a("strong"),I_o=o("clip"),N_o=o(" \u2014 "),Bq=a("a"),q_o=o("CLIPTokenizer"),j_o=o(" or "),Iq=a("a"),D_o=o("CLIPTokenizerFast"),G_o=o(" (CLIP model)"),O_o=l(),hs=a("li"),Tfe=a("strong"),V_o=o("codegen"),X_o=o(" \u2014 "),Nq=a("a"),z_o=o("CodeGenTokenizer"),Q_o=o(" or "),qq=a("a"),W_o=o("CodeGenTokenizerFast"),U_o=o(" (CodeGen model)"),H_o=l(),us=a("li"),Mfe=a("strong"),J_o=o("convbert"),Y_o=o(" \u2014 "),jq=a("a"),K_o=o("ConvBertTokenizer"),Z_o=o(" or "),Dq=a("a"),ebo=o("ConvBertTokenizerFast"),obo=o(" (ConvBERT model)"),rbo=l(),ps=a("li"),Efe=a("strong"),tbo=o("cpm"),abo=o(" \u2014 "),Gq=a("a"),nbo=o("CpmTokenizer"),sbo=o(" or "),Oq=a("a"),lbo=o("CpmTokenizerFast"),ibo=o(" (CPM model)"),dbo=l(),lu=a("li"),Cfe=a("strong"),cbo=o("ctrl"),mbo=o(" \u2014 "),Vq=a("a"),fbo=o("CTRLTokenizer"),gbo=o(" (CTRL model)"),hbo=l(),_s=a("li"),wfe=a("strong"),ubo=o("data2vec-text"),pbo=o(" \u2014 "),Xq=a("a"),_bo=o("RobertaTokenizer"),bbo=o(" or "),zq=a("a"),vbo=o("RobertaTokenizerFast"),Fbo=o(" (Data2VecText model)"),Tbo=l(),bs=a("li"),Afe=a("strong"),Mbo=o("deberta"),Ebo=o(" \u2014 "),Qq=a("a"),Cbo=o("DebertaTokenizer"),wbo=o(" or "),Wq=a("a"),Abo=o("DebertaTokenizerFast"),Lbo=o(" (DeBERTa model)"),ybo=l(),vs=a("li"),Lfe=a("strong"),xbo=o("deberta-v2"),$bo=o(" \u2014 "),Uq=a("a"),kbo=o("DebertaV2Tokenizer"),Sbo=o(" or "),Hq=a("a"),Rbo=o("DebertaV2TokenizerFast"),Pbo=o(" (DeBERTa-v2 model)"),Bbo=l(),Fs=a("li"),yfe=a("strong"),Ibo=o("distilbert"),Nbo=o(" \u2014 "),Jq=a("a"),qbo=o("DistilBertTokenizer"),jbo=o(" or "),Yq=a("a"),Dbo=o("DistilBertTokenizerFast"),Gbo=o(" (DistilBERT model)"),Obo=l(),Ts=a("li"),xfe=a("strong"),Vbo=o("dpr"),Xbo=o(" \u2014 "),Kq=a("a"),zbo=o("DPRQuestionEncoderTokenizer"),Qbo=o(" or "),Zq=a("a"),Wbo=o("DPRQuestionEncoderTokenizerFast"),Ubo=o(" (DPR model)"),Hbo=l(),Ms=a("li"),$fe=a("strong"),Jbo=o("electra"),Ybo=o(" \u2014 "),ej=a("a"),Kbo=o("ElectraTokenizer"),Zbo=o(" or "),oj=a("a"),e2o=o("ElectraTokenizerFast"),o2o=o(" (ELECTRA model)"),r2o=l(),Es=a("li"),kfe=a("strong"),t2o=o("ernie"),a2o=o(" \u2014 "),rj=a("a"),n2o=o("BertTokenizer"),s2o=o(" or "),tj=a("a"),l2o=o("BertTokenizerFast"),i2o=o(" (ERNIE model)"),d2o=l(),iu=a("li"),Sfe=a("strong"),c2o=o("flaubert"),m2o=o(" \u2014 "),aj=a("a"),f2o=o("FlaubertTokenizer"),g2o=o(" (FlauBERT model)"),h2o=l(),Cs=a("li"),Rfe=a("strong"),u2o=o("fnet"),p2o=o(" \u2014 "),nj=a("a"),_2o=o("FNetTokenizer"),b2o=o(" or "),sj=a("a"),v2o=o("FNetTokenizerFast"),F2o=o(" (FNet model)"),T2o=l(),du=a("li"),Pfe=a("strong"),M2o=o("fsmt"),E2o=o(" \u2014 "),lj=a("a"),C2o=o("FSMTTokenizer"),w2o=o(" (FairSeq Machine-Translation model)"),A2o=l(),ws=a("li"),Bfe=a("strong"),L2o=o("funnel"),y2o=o(" \u2014 "),ij=a("a"),x2o=o("FunnelTokenizer"),$2o=o(" or "),dj=a("a"),k2o=o("FunnelTokenizerFast"),S2o=o(" (Funnel Transformer model)"),R2o=l(),As=a("li"),Ife=a("strong"),P2o=o("gpt2"),B2o=o(" \u2014 "),cj=a("a"),I2o=o("GPT2Tokenizer"),N2o=o(" or "),mj=a("a"),q2o=o("GPT2TokenizerFast"),j2o=o(" (OpenAI GPT-2 model)"),D2o=l(),Ls=a("li"),Nfe=a("strong"),G2o=o("gpt_neo"),O2o=o(" \u2014 "),fj=a("a"),V2o=o("GPT2Tokenizer"),X2o=o(" or "),gj=a("a"),z2o=o("GPT2TokenizerFast"),Q2o=o(" (GPT Neo model)"),W2o=l(),cu=a("li"),qfe=a("strong"),U2o=o("gpt_neox"),H2o=o(" \u2014 "),hj=a("a"),J2o=o("GPTNeoXTokenizerFast"),Y2o=o(" (GPT NeoX model)"),K2o=l(),mu=a("li"),jfe=a("strong"),Z2o=o("gpt_neox_japanese"),e1o=o(" \u2014 "),uj=a("a"),o1o=o("GPTNeoXJapaneseTokenizer"),r1o=o(" (GPT NeoX Japanese model)"),t1o=l(),ys=a("li"),Dfe=a("strong"),a1o=o("gptj"),n1o=o(" \u2014 "),pj=a("a"),s1o=o("GPT2Tokenizer"),l1o=o(" or "),_j=a("a"),i1o=o("GPT2TokenizerFast"),d1o=o(" (GPT-J model)"),c1o=l(),xs=a("li"),Gfe=a("strong"),m1o=o("groupvit"),f1o=o(" \u2014 "),bj=a("a"),g1o=o("CLIPTokenizer"),h1o=o(" or "),vj=a("a"),u1o=o("CLIPTokenizerFast"),p1o=o(" (GroupViT model)"),_1o=l(),$s=a("li"),Ofe=a("strong"),b1o=o("herbert"),v1o=o(" \u2014 "),Fj=a("a"),F1o=o("HerbertTokenizer"),T1o=o(" or "),Tj=a("a"),M1o=o("HerbertTokenizerFast"),E1o=o(" (HerBERT model)"),C1o=l(),fu=a("li"),Vfe=a("strong"),w1o=o("hubert"),A1o=o(" \u2014 "),Mj=a("a"),L1o=o("Wav2Vec2CTCTokenizer"),y1o=o(" (Hubert model)"),x1o=l(),ks=a("li"),Xfe=a("strong"),$1o=o("ibert"),k1o=o(" \u2014 "),Ej=a("a"),S1o=o("RobertaTokenizer"),R1o=o(" or "),Cj=a("a"),P1o=o("RobertaTokenizerFast"),B1o=o(" (I-BERT model)"),I1o=l(),Ss=a("li"),zfe=a("strong"),N1o=o("layoutlm"),q1o=o(" \u2014 "),wj=a("a"),j1o=o("LayoutLMTokenizer"),D1o=o(" or "),Aj=a("a"),G1o=o("LayoutLMTokenizerFast"),O1o=o(" (LayoutLM model)"),V1o=l(),Rs=a("li"),Qfe=a("strong"),X1o=o("layoutlmv2"),z1o=o(" \u2014 "),Lj=a("a"),Q1o=o("LayoutLMv2Tokenizer"),W1o=o(" or "),yj=a("a"),U1o=o("LayoutLMv2TokenizerFast"),H1o=o(" (LayoutLMv2 model)"),J1o=l(),Ps=a("li"),Wfe=a("strong"),Y1o=o("layoutlmv3"),K1o=o(" \u2014 "),xj=a("a"),Z1o=o("LayoutLMv3Tokenizer"),evo=o(" or "),$j=a("a"),ovo=o("LayoutLMv3TokenizerFast"),rvo=o(" (LayoutLMv3 model)"),tvo=l(),Bs=a("li"),Ufe=a("strong"),avo=o("layoutxlm"),nvo=o(" \u2014 "),kj=a("a"),svo=o("LayoutXLMTokenizer"),lvo=o(" or "),Sj=a("a"),ivo=o("LayoutXLMTokenizerFast"),dvo=o(" (LayoutXLM model)"),cvo=l(),Is=a("li"),Hfe=a("strong"),mvo=o("led"),fvo=o(" \u2014 "),Rj=a("a"),gvo=o("LEDTokenizer"),hvo=o(" or "),Pj=a("a"),uvo=o("LEDTokenizerFast"),pvo=o(" (LED model)"),_vo=l(),Ns=a("li"),Jfe=a("strong"),bvo=o("longformer"),vvo=o(" \u2014 "),Bj=a("a"),Fvo=o("LongformerTokenizer"),Tvo=o(" or "),Ij=a("a"),Mvo=o("LongformerTokenizerFast"),Evo=o(" (Longformer model)"),Cvo=l(),qs=a("li"),Yfe=a("strong"),wvo=o("longt5"),Avo=o(" \u2014 "),Nj=a("a"),Lvo=o("T5Tokenizer"),yvo=o(" or "),qj=a("a"),xvo=o("T5TokenizerFast"),$vo=o(" (LongT5 model)"),kvo=l(),gu=a("li"),Kfe=a("strong"),Svo=o("luke"),Rvo=o(" \u2014 "),jj=a("a"),Pvo=o("LukeTokenizer"),Bvo=o(" (LUKE model)"),Ivo=l(),js=a("li"),Zfe=a("strong"),Nvo=o("lxmert"),qvo=o(" \u2014 "),Dj=a("a"),jvo=o("LxmertTokenizer"),Dvo=o(" or "),Gj=a("a"),Gvo=o("LxmertTokenizerFast"),Ovo=o(" (LXMERT model)"),Vvo=l(),hu=a("li"),ege=a("strong"),Xvo=o("m2m_100"),zvo=o(" \u2014 "),Oj=a("a"),Qvo=o("M2M100Tokenizer"),Wvo=o(" (M2M100 model)"),Uvo=l(),uu=a("li"),oge=a("strong"),Hvo=o("marian"),Jvo=o(" \u2014 "),Vj=a("a"),Yvo=o("MarianTokenizer"),Kvo=o(" (Marian model)"),Zvo=l(),Ds=a("li"),rge=a("strong"),eFo=o("mbart"),oFo=o(" \u2014 "),Xj=a("a"),rFo=o("MBartTokenizer"),tFo=o(" or "),zj=a("a"),aFo=o("MBartTokenizerFast"),nFo=o(" (mBART model)"),sFo=l(),Gs=a("li"),tge=a("strong"),lFo=o("mbart50"),iFo=o(" \u2014 "),Qj=a("a"),dFo=o("MBart50Tokenizer"),cFo=o(" or "),Wj=a("a"),mFo=o("MBart50TokenizerFast"),fFo=o(" (mBART-50 model)"),gFo=l(),Os=a("li"),age=a("strong"),hFo=o("megatron-bert"),uFo=o(" \u2014 "),Uj=a("a"),pFo=o("BertTokenizer"),_Fo=o(" or "),Hj=a("a"),bFo=o("BertTokenizerFast"),vFo=o(" (Megatron-BERT model)"),FFo=l(),pu=a("li"),nge=a("strong"),TFo=o("mluke"),MFo=o(" \u2014 "),Jj=a("a"),EFo=o("MLukeTokenizer"),CFo=o(" (mLUKE model)"),wFo=l(),Vs=a("li"),sge=a("strong"),AFo=o("mobilebert"),LFo=o(" \u2014 "),Yj=a("a"),yFo=o("MobileBertTokenizer"),xFo=o(" or "),Kj=a("a"),$Fo=o("MobileBertTokenizerFast"),kFo=o(" (MobileBERT model)"),SFo=l(),Xs=a("li"),lge=a("strong"),RFo=o("mpnet"),PFo=o(" \u2014 "),Zj=a("a"),BFo=o("MPNetTokenizer"),IFo=o(" or "),eD=a("a"),NFo=o("MPNetTokenizerFast"),qFo=o(" (MPNet model)"),jFo=l(),zs=a("li"),ige=a("strong"),DFo=o("mt5"),GFo=o(" \u2014 "),oD=a("a"),OFo=o("MT5Tokenizer"),VFo=o(" or "),rD=a("a"),XFo=o("MT5TokenizerFast"),zFo=o(" (MT5 model)"),QFo=l(),Qs=a("li"),dge=a("strong"),WFo=o("mvp"),UFo=o(" \u2014 "),tD=a("a"),HFo=o("MvpTokenizer"),JFo=o(" or "),aD=a("a"),YFo=o("MvpTokenizerFast"),KFo=o(" (MVP model)"),ZFo=l(),Ws=a("li"),cge=a("strong"),eTo=o("nezha"),oTo=o(" \u2014 "),nD=a("a"),rTo=o("BertTokenizer"),tTo=o(" or "),sD=a("a"),aTo=o("BertTokenizerFast"),nTo=o(" (Nezha model)"),sTo=l(),Us=a("li"),mge=a("strong"),lTo=o("nllb"),iTo=o(" \u2014 "),lD=a("a"),dTo=o("NllbTokenizer"),cTo=o(" or "),iD=a("a"),mTo=o("NllbTokenizerFast"),fTo=o(" (NLLB model)"),gTo=l(),Hs=a("li"),fge=a("strong"),hTo=o("nystromformer"),uTo=o(" \u2014 "),dD=a("a"),pTo=o("AlbertTokenizer"),_To=o(" or "),cD=a("a"),bTo=o("AlbertTokenizerFast"),vTo=o(" (Nystr\xF6mformer model)"),FTo=l(),Js=a("li"),gge=a("strong"),TTo=o("openai-gpt"),MTo=o(" \u2014 "),mD=a("a"),ETo=o("OpenAIGPTTokenizer"),CTo=o(" or "),fD=a("a"),wTo=o("OpenAIGPTTokenizerFast"),ATo=o(" (OpenAI GPT model)"),LTo=l(),_u=a("li"),hge=a("strong"),yTo=o("opt"),xTo=o(" \u2014 "),gD=a("a"),$To=o("GPT2Tokenizer"),kTo=o(" (OPT model)"),STo=l(),Ys=a("li"),uge=a("strong"),RTo=o("owlvit"),PTo=o(" \u2014 "),hD=a("a"),BTo=o("CLIPTokenizer"),ITo=o(" or "),uD=a("a"),NTo=o("CLIPTokenizerFast"),qTo=o(" (OWL-ViT model)"),jTo=l(),Ks=a("li"),pge=a("strong"),DTo=o("pegasus"),GTo=o(" \u2014 "),pD=a("a"),OTo=o("PegasusTokenizer"),VTo=o(" or "),_D=a("a"),XTo=o("PegasusTokenizerFast"),zTo=o(" (Pegasus model)"),QTo=l(),bu=a("li"),_ge=a("strong"),WTo=o("perceiver"),UTo=o(" \u2014 "),bD=a("a"),HTo=o("PerceiverTokenizer"),JTo=o(" (Perceiver model)"),YTo=l(),vu=a("li"),bge=a("strong"),KTo=o("phobert"),ZTo=o(" \u2014 "),vD=a("a"),eMo=o("PhobertTokenizer"),oMo=o(" (PhoBERT model)"),rMo=l(),Fu=a("li"),vge=a("strong"),tMo=o("plbart"),aMo=o(" \u2014 "),FD=a("a"),nMo=o("PLBartTokenizer"),sMo=o(" (PLBart model)"),lMo=l(),Tu=a("li"),Fge=a("strong"),iMo=o("prophetnet"),dMo=o(" \u2014 "),TD=a("a"),cMo=o("ProphetNetTokenizer"),mMo=o(" (ProphetNet model)"),fMo=l(),Zs=a("li"),Tge=a("strong"),gMo=o("qdqbert"),hMo=o(" \u2014 "),MD=a("a"),uMo=o("BertTokenizer"),pMo=o(" or "),ED=a("a"),_Mo=o("BertTokenizerFast"),bMo=o(" (QDQBert model)"),vMo=l(),Mu=a("li"),Mge=a("strong"),FMo=o("rag"),TMo=o(" \u2014 "),CD=a("a"),MMo=o("RagTokenizer"),EMo=o(" (RAG model)"),CMo=l(),el=a("li"),Ege=a("strong"),wMo=o("realm"),AMo=o(" \u2014 "),wD=a("a"),LMo=o("RealmTokenizer"),yMo=o(" or "),AD=a("a"),xMo=o("RealmTokenizerFast"),$Mo=o(" (REALM model)"),kMo=l(),ol=a("li"),Cge=a("strong"),SMo=o("reformer"),RMo=o(" \u2014 "),LD=a("a"),PMo=o("ReformerTokenizer"),BMo=o(" or "),yD=a("a"),IMo=o("ReformerTokenizerFast"),NMo=o(" (Reformer model)"),qMo=l(),rl=a("li"),wge=a("strong"),jMo=o("rembert"),DMo=o(" \u2014 "),xD=a("a"),GMo=o("RemBertTokenizer"),OMo=o(" or "),$D=a("a"),VMo=o("RemBertTokenizerFast"),XMo=o(" (RemBERT model)"),zMo=l(),tl=a("li"),Age=a("strong"),QMo=o("retribert"),WMo=o(" \u2014 "),kD=a("a"),UMo=o("RetriBertTokenizer"),HMo=o(" or "),SD=a("a"),JMo=o("RetriBertTokenizerFast"),YMo=o(" (RetriBERT model)"),KMo=l(),al=a("li"),Lge=a("strong"),ZMo=o("roberta"),eEo=o(" \u2014 "),RD=a("a"),oEo=o("RobertaTokenizer"),rEo=o(" or "),PD=a("a"),tEo=o("RobertaTokenizerFast"),aEo=o(" (RoBERTa model)"),nEo=l(),nl=a("li"),yge=a("strong"),sEo=o("roformer"),lEo=o(" \u2014 "),BD=a("a"),iEo=o("RoFormerTokenizer"),dEo=o(" or "),ID=a("a"),cEo=o("RoFormerTokenizerFast"),mEo=o(" (RoFormer model)"),fEo=l(),Eu=a("li"),xge=a("strong"),gEo=o("speech_to_text"),hEo=o(" \u2014 "),ND=a("a"),uEo=o("Speech2TextTokenizer"),pEo=o(" (Speech2Text model)"),_Eo=l(),Cu=a("li"),$ge=a("strong"),bEo=o("speech_to_text_2"),vEo=o(" \u2014 "),qD=a("a"),FEo=o("Speech2Text2Tokenizer"),TEo=o(" (Speech2Text2 model)"),MEo=l(),sl=a("li"),kge=a("strong"),EEo=o("splinter"),CEo=o(" \u2014 "),jD=a("a"),wEo=o("SplinterTokenizer"),AEo=o(" or "),DD=a("a"),LEo=o("SplinterTokenizerFast"),yEo=o(" (Splinter model)"),xEo=l(),ll=a("li"),Sge=a("strong"),$Eo=o("squeezebert"),kEo=o(" \u2014 "),GD=a("a"),SEo=o("SqueezeBertTokenizer"),REo=o(" or "),OD=a("a"),PEo=o("SqueezeBertTokenizerFast"),BEo=o(" (SqueezeBERT model)"),IEo=l(),il=a("li"),Rge=a("strong"),NEo=o("t5"),qEo=o(" \u2014 "),VD=a("a"),jEo=o("T5Tokenizer"),DEo=o(" or "),XD=a("a"),GEo=o("T5TokenizerFast"),OEo=o(" (T5 model)"),VEo=l(),wu=a("li"),Pge=a("strong"),XEo=o("tapas"),zEo=o(" \u2014 "),zD=a("a"),QEo=o("TapasTokenizer"),WEo=o(" (TAPAS model)"),UEo=l(),Au=a("li"),Bge=a("strong"),HEo=o("tapex"),JEo=o(" \u2014 "),QD=a("a"),YEo=o("TapexTokenizer"),KEo=o(" (TAPEX model)"),ZEo=l(),Lu=a("li"),Ige=a("strong"),e4o=o("transfo-xl"),o4o=o(" \u2014 "),WD=a("a"),r4o=o("TransfoXLTokenizer"),t4o=o(" (Transformer-XL model)"),a4o=l(),dl=a("li"),Nge=a("strong"),n4o=o("vilt"),s4o=o(" \u2014 "),UD=a("a"),l4o=o("BertTokenizer"),i4o=o(" or "),HD=a("a"),d4o=o("BertTokenizerFast"),c4o=o(" (ViLT model)"),m4o=l(),cl=a("li"),qge=a("strong"),f4o=o("visual_bert"),g4o=o(" \u2014 "),JD=a("a"),h4o=o("BertTokenizer"),u4o=o(" or "),YD=a("a"),p4o=o("BertTokenizerFast"),_4o=o(" (VisualBERT model)"),b4o=l(),yu=a("li"),jge=a("strong"),v4o=o("wav2vec2"),F4o=o(" \u2014 "),KD=a("a"),T4o=o("Wav2Vec2CTCTokenizer"),M4o=o(" (Wav2Vec2 model)"),E4o=l(),xu=a("li"),Dge=a("strong"),C4o=o("wav2vec2-conformer"),w4o=o(" \u2014 "),ZD=a("a"),A4o=o("Wav2Vec2CTCTokenizer"),L4o=o(" (Wav2Vec2-Conformer model)"),y4o=l(),$u=a("li"),Gge=a("strong"),x4o=o("wav2vec2_phoneme"),$4o=o(" \u2014 "),eG=a("a"),k4o=o("Wav2Vec2PhonemeCTCTokenizer"),S4o=o(" (Wav2Vec2Phoneme model)"),R4o=l(),ml=a("li"),Oge=a("strong"),P4o=o("xclip"),B4o=o(" \u2014 "),oG=a("a"),I4o=o("CLIPTokenizer"),N4o=o(" or "),rG=a("a"),q4o=o("CLIPTokenizerFast"),j4o=o(" (X-CLIP model)"),D4o=l(),fl=a("li"),Vge=a("strong"),G4o=o("xglm"),O4o=o(" \u2014 "),tG=a("a"),V4o=o("XGLMTokenizer"),X4o=o(" or "),aG=a("a"),z4o=o("XGLMTokenizerFast"),Q4o=o(" (XGLM model)"),W4o=l(),ku=a("li"),Xge=a("strong"),U4o=o("xlm"),H4o=o(" \u2014 "),nG=a("a"),J4o=o("XLMTokenizer"),Y4o=o(" (XLM model)"),K4o=l(),Su=a("li"),zge=a("strong"),Z4o=o("xlm-prophetnet"),eCo=o(" \u2014 "),sG=a("a"),oCo=o("XLMProphetNetTokenizer"),rCo=o(" (XLM-ProphetNet model)"),tCo=l(),gl=a("li"),Qge=a("strong"),aCo=o("xlm-roberta"),nCo=o(" \u2014 "),lG=a("a"),sCo=o("XLMRobertaTokenizer"),lCo=o(" or "),iG=a("a"),iCo=o("XLMRobertaTokenizerFast"),dCo=o(" (XLM-RoBERTa model)"),cCo=l(),hl=a("li"),Wge=a("strong"),mCo=o("xlm-roberta-xl"),fCo=o(" \u2014 "),dG=a("a"),gCo=o("XLMRobertaTokenizer"),hCo=o(" or "),cG=a("a"),uCo=o("XLMRobertaTokenizerFast"),pCo=o(" (XLM-RoBERTa-XL model)"),_Co=l(),ul=a("li"),Uge=a("strong"),bCo=o("xlnet"),vCo=o(" \u2014 "),mG=a("a"),FCo=o("XLNetTokenizer"),TCo=o(" or "),fG=a("a"),MCo=o("XLNetTokenizerFast"),ECo=o(" (XLNet model)"),CCo=l(),pl=a("li"),Hge=a("strong"),wCo=o("yoso"),ACo=o(" \u2014 "),gG=a("a"),LCo=o("AlbertTokenizer"),yCo=o(" or "),hG=a("a"),xCo=o("AlbertTokenizerFast"),$Co=o(" (YOSO model)"),kCo=l(),F(Ru.$$.fragment),SCo=l(),Pu=a("div"),F(J9.$$.fragment),RCo=l(),Jge=a("p"),PCo=o("Register a new tokenizer in this mapping."),BKe=l(),hd=a("h2"),Bu=a("a"),Yge=a("span"),F(Y9.$$.fragment),BCo=l(),Kge=a("span"),ICo=o("AutoFeatureExtractor"),IKe=l(),So=a("div"),F(K9.$$.fragment),NCo=l(),Z9=a("p"),qCo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uG=a("a"),jCo=o("AutoFeatureExtractor.from_pretrained()"),DCo=o(" class method."),GCo=l(),ex=a("p"),OCo=o("This class cannot be instantiated directly using "),Zge=a("code"),VCo=o("__init__()"),XCo=o(" (throws an error)."),zCo=l(),Ye=a("div"),F(ox.$$.fragment),QCo=l(),ehe=a("p"),WCo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UCo=l(),Ha=a("p"),HCo=o("The feature extractor class to instantiate is selected based on the "),ohe=a("code"),JCo=o("model_type"),YCo=o(` property of the config object
(either passed as an argument or loaded from `),rhe=a("code"),KCo=o("pretrained_model_name_or_path"),ZCo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),the=a("code"),e3o=o("pretrained_model_name_or_path"),o3o=o(":"),r3o=l(),Q=a("ul"),Iu=a("li"),ahe=a("strong"),t3o=o("beit"),a3o=o(" \u2014 "),pG=a("a"),n3o=o("BeitFeatureExtractor"),s3o=o(" (BEiT model)"),l3o=l(),Nu=a("li"),nhe=a("strong"),i3o=o("clip"),d3o=o(" \u2014 "),_G=a("a"),c3o=o("CLIPFeatureExtractor"),m3o=o(" (CLIP model)"),f3o=l(),qu=a("li"),she=a("strong"),g3o=o("conditional_detr"),h3o=o(" \u2014 "),bG=a("a"),u3o=o("ConditionalDetrFeatureExtractor"),p3o=o(" (Conditional DETR model)"),_3o=l(),ju=a("li"),lhe=a("strong"),b3o=o("convnext"),v3o=o(" \u2014 "),vG=a("a"),F3o=o("ConvNextFeatureExtractor"),T3o=o(" (ConvNeXT model)"),M3o=l(),Du=a("li"),ihe=a("strong"),E3o=o("cvt"),C3o=o(" \u2014 "),FG=a("a"),w3o=o("ConvNextFeatureExtractor"),A3o=o(" (CvT model)"),L3o=l(),Gu=a("li"),dhe=a("strong"),y3o=o("data2vec-audio"),x3o=o(" \u2014 "),TG=a("a"),$3o=o("Wav2Vec2FeatureExtractor"),k3o=o(" (Data2VecAudio model)"),S3o=l(),Ou=a("li"),che=a("strong"),R3o=o("data2vec-vision"),P3o=o(" \u2014 "),MG=a("a"),B3o=o("BeitFeatureExtractor"),I3o=o(" (Data2VecVision model)"),N3o=l(),Vu=a("li"),mhe=a("strong"),q3o=o("deformable_detr"),j3o=o(" \u2014 "),EG=a("a"),D3o=o("DeformableDetrFeatureExtractor"),G3o=o(" (Deformable DETR model)"),O3o=l(),Xu=a("li"),fhe=a("strong"),V3o=o("deit"),X3o=o(" \u2014 "),CG=a("a"),z3o=o("DeiTFeatureExtractor"),Q3o=o(" (DeiT model)"),W3o=l(),zu=a("li"),ghe=a("strong"),U3o=o("detr"),H3o=o(" \u2014 "),wG=a("a"),J3o=o("DetrFeatureExtractor"),Y3o=o(" (DETR model)"),K3o=l(),Qu=a("li"),hhe=a("strong"),Z3o=o("donut"),e5o=o(" \u2014 "),AG=a("a"),o5o=o("DonutFeatureExtractor"),r5o=o(" (Donut model)"),t5o=l(),Wu=a("li"),uhe=a("strong"),a5o=o("dpt"),n5o=o(" \u2014 "),LG=a("a"),s5o=o("DPTFeatureExtractor"),l5o=o(" (DPT model)"),i5o=l(),Uu=a("li"),phe=a("strong"),d5o=o("flava"),c5o=o(" \u2014 "),yG=a("a"),m5o=o("FlavaFeatureExtractor"),f5o=o(" (FLAVA model)"),g5o=l(),Hu=a("li"),_he=a("strong"),h5o=o("glpn"),u5o=o(" \u2014 "),xG=a("a"),p5o=o("GLPNFeatureExtractor"),_5o=o(" (GLPN model)"),b5o=l(),Ju=a("li"),bhe=a("strong"),v5o=o("groupvit"),F5o=o(" \u2014 "),$G=a("a"),T5o=o("CLIPFeatureExtractor"),M5o=o(" (GroupViT model)"),E5o=l(),Yu=a("li"),vhe=a("strong"),C5o=o("hubert"),w5o=o(" \u2014 "),kG=a("a"),A5o=o("Wav2Vec2FeatureExtractor"),L5o=o(" (Hubert model)"),y5o=l(),Ku=a("li"),Fhe=a("strong"),x5o=o("imagegpt"),$5o=o(" \u2014 "),SG=a("a"),k5o=o("ImageGPTFeatureExtractor"),S5o=o(" (ImageGPT model)"),R5o=l(),Zu=a("li"),The=a("strong"),P5o=o("layoutlmv2"),B5o=o(" \u2014 "),RG=a("a"),I5o=o("LayoutLMv2FeatureExtractor"),N5o=o(" (LayoutLMv2 model)"),q5o=l(),ep=a("li"),Mhe=a("strong"),j5o=o("layoutlmv3"),D5o=o(" \u2014 "),PG=a("a"),G5o=o("LayoutLMv3FeatureExtractor"),O5o=o(" (LayoutLMv3 model)"),V5o=l(),op=a("li"),Ehe=a("strong"),X5o=o("levit"),z5o=o(" \u2014 "),BG=a("a"),Q5o=o("LevitFeatureExtractor"),W5o=o(" (LeViT model)"),U5o=l(),rp=a("li"),Che=a("strong"),H5o=o("maskformer"),J5o=o(" \u2014 "),IG=a("a"),Y5o=o("MaskFormerFeatureExtractor"),K5o=o(" (MaskFormer model)"),Z5o=l(),tp=a("li"),whe=a("strong"),e0o=o("mctct"),o0o=o(" \u2014 "),NG=a("a"),r0o=o("MCTCTFeatureExtractor"),t0o=o(" (M-CTC-T model)"),a0o=l(),ap=a("li"),Ahe=a("strong"),n0o=o("mobilevit"),s0o=o(" \u2014 "),qG=a("a"),l0o=o("MobileViTFeatureExtractor"),i0o=o(" (MobileViT model)"),d0o=l(),np=a("li"),Lhe=a("strong"),c0o=o("owlvit"),m0o=o(" \u2014 "),jG=a("a"),f0o=o("OwlViTFeatureExtractor"),g0o=o(" (OWL-ViT model)"),h0o=l(),sp=a("li"),yhe=a("strong"),u0o=o("perceiver"),p0o=o(" \u2014 "),DG=a("a"),_0o=o("PerceiverFeatureExtractor"),b0o=o(" (Perceiver model)"),v0o=l(),lp=a("li"),xhe=a("strong"),F0o=o("poolformer"),T0o=o(" \u2014 "),GG=a("a"),M0o=o("PoolFormerFeatureExtractor"),E0o=o(" (PoolFormer model)"),C0o=l(),ip=a("li"),$he=a("strong"),w0o=o("regnet"),A0o=o(" \u2014 "),OG=a("a"),L0o=o("ConvNextFeatureExtractor"),y0o=o(" (RegNet model)"),x0o=l(),dp=a("li"),khe=a("strong"),$0o=o("resnet"),k0o=o(" \u2014 "),VG=a("a"),S0o=o("ConvNextFeatureExtractor"),R0o=o(" (ResNet model)"),P0o=l(),cp=a("li"),She=a("strong"),B0o=o("segformer"),I0o=o(" \u2014 "),XG=a("a"),N0o=o("SegformerFeatureExtractor"),q0o=o(" (SegFormer model)"),j0o=l(),mp=a("li"),Rhe=a("strong"),D0o=o("speech_to_text"),G0o=o(" \u2014 "),zG=a("a"),O0o=o("Speech2TextFeatureExtractor"),V0o=o(" (Speech2Text model)"),X0o=l(),fp=a("li"),Phe=a("strong"),z0o=o("swin"),Q0o=o(" \u2014 "),QG=a("a"),W0o=o("ViTFeatureExtractor"),U0o=o(" (Swin Transformer model)"),H0o=l(),gp=a("li"),Bhe=a("strong"),J0o=o("swinv2"),Y0o=o(" \u2014 "),WG=a("a"),K0o=o("ViTFeatureExtractor"),Z0o=o(" (Swin Transformer V2 model)"),ewo=l(),hp=a("li"),Ihe=a("strong"),owo=o("van"),rwo=o(" \u2014 "),UG=a("a"),two=o("ConvNextFeatureExtractor"),awo=o(" (VAN model)"),nwo=l(),up=a("li"),Nhe=a("strong"),swo=o("videomae"),lwo=o(" \u2014 "),HG=a("a"),iwo=o("VideoMAEFeatureExtractor"),dwo=o(" (VideoMAE model)"),cwo=l(),pp=a("li"),qhe=a("strong"),mwo=o("vilt"),fwo=o(" \u2014 "),JG=a("a"),gwo=o("ViltFeatureExtractor"),hwo=o(" (ViLT model)"),uwo=l(),_p=a("li"),jhe=a("strong"),pwo=o("vit"),_wo=o(" \u2014 "),YG=a("a"),bwo=o("ViTFeatureExtractor"),vwo=o(" (ViT model)"),Fwo=l(),bp=a("li"),Dhe=a("strong"),Two=o("vit_mae"),Mwo=o(" \u2014 "),KG=a("a"),Ewo=o("ViTFeatureExtractor"),Cwo=o(" (ViTMAE model)"),wwo=l(),vp=a("li"),Ghe=a("strong"),Awo=o("wav2vec2"),Lwo=o(" \u2014 "),ZG=a("a"),ywo=o("Wav2Vec2FeatureExtractor"),xwo=o(" (Wav2Vec2 model)"),$wo=l(),Fp=a("li"),Ohe=a("strong"),kwo=o("wav2vec2-conformer"),Swo=o(" \u2014 "),eO=a("a"),Rwo=o("Wav2Vec2FeatureExtractor"),Pwo=o(" (Wav2Vec2-Conformer model)"),Bwo=l(),Tp=a("li"),Vhe=a("strong"),Iwo=o("xclip"),Nwo=o(" \u2014 "),oO=a("a"),qwo=o("CLIPFeatureExtractor"),jwo=o(" (X-CLIP model)"),Dwo=l(),Mp=a("li"),Xhe=a("strong"),Gwo=o("yolos"),Owo=o(" \u2014 "),rO=a("a"),Vwo=o("YolosFeatureExtractor"),Xwo=o(" (YOLOS model)"),zwo=l(),F(Ep.$$.fragment),Qwo=l(),F(Cp.$$.fragment),Wwo=l(),wp=a("div"),F(rx.$$.fragment),Uwo=l(),zhe=a("p"),Hwo=o("Register a new feature extractor for this class."),NKe=l(),ud=a("h2"),Ap=a("a"),Qhe=a("span"),F(tx.$$.fragment),Jwo=l(),Whe=a("span"),Ywo=o("AutoProcessor"),qKe=l(),Ro=a("div"),F(ax.$$.fragment),Kwo=l(),nx=a("p"),Zwo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tO=a("a"),eAo=o("AutoProcessor.from_pretrained()"),oAo=o(" class method."),rAo=l(),sx=a("p"),tAo=o("This class cannot be instantiated directly using "),Uhe=a("code"),aAo=o("__init__()"),nAo=o(" (throws an error)."),sAo=l(),Ke=a("div"),F(lx.$$.fragment),lAo=l(),Hhe=a("p"),iAo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dAo=l(),pd=a("p"),cAo=o("The processor class to instantiate is selected based on the "),Jhe=a("code"),mAo=o("model_type"),fAo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(" if possible):"),uAo=l(),ie=a("ul"),Lp=a("li"),Khe=a("strong"),pAo=o("clip"),_Ao=o(" \u2014 "),aO=a("a"),bAo=o("CLIPProcessor"),vAo=o(" (CLIP model)"),FAo=l(),yp=a("li"),Zhe=a("strong"),TAo=o("donut"),MAo=o(" \u2014 "),nO=a("a"),EAo=o("DonutProcessor"),CAo=o(" (Donut model)"),wAo=l(),xp=a("li"),eue=a("strong"),AAo=o("flava"),LAo=o(" \u2014 "),sO=a("a"),yAo=o("FlavaProcessor"),xAo=o(" (FLAVA model)"),$Ao=l(),$p=a("li"),oue=a("strong"),kAo=o("groupvit"),SAo=o(" \u2014 "),lO=a("a"),RAo=o("CLIPProcessor"),PAo=o(" (GroupViT model)"),BAo=l(),kp=a("li"),rue=a("strong"),IAo=o("layoutlmv2"),NAo=o(" \u2014 "),iO=a("a"),qAo=o("LayoutLMv2Processor"),jAo=o(" (LayoutLMv2 model)"),DAo=l(),Sp=a("li"),tue=a("strong"),GAo=o("layoutlmv3"),OAo=o(" \u2014 "),dO=a("a"),VAo=o("LayoutLMv3Processor"),XAo=o(" (LayoutLMv3 model)"),zAo=l(),Rp=a("li"),aue=a("strong"),QAo=o("layoutxlm"),WAo=o(" \u2014 "),cO=a("a"),UAo=o("LayoutXLMProcessor"),HAo=o(" (LayoutXLM model)"),JAo=l(),Pp=a("li"),nue=a("strong"),YAo=o("owlvit"),KAo=o(" \u2014 "),mO=a("a"),ZAo=o("OwlViTProcessor"),e6o=o(" (OWL-ViT model)"),o6o=l(),Bp=a("li"),sue=a("strong"),r6o=o("sew"),t6o=o(" \u2014 "),fO=a("a"),a6o=o("Wav2Vec2Processor"),n6o=o(" (SEW model)"),s6o=l(),Ip=a("li"),lue=a("strong"),l6o=o("sew-d"),i6o=o(" \u2014 "),gO=a("a"),d6o=o("Wav2Vec2Processor"),c6o=o(" (SEW-D model)"),m6o=l(),Np=a("li"),iue=a("strong"),f6o=o("speech_to_text"),g6o=o(" \u2014 "),hO=a("a"),h6o=o("Speech2TextProcessor"),u6o=o(" (Speech2Text model)"),p6o=l(),qp=a("li"),due=a("strong"),_6o=o("speech_to_text_2"),b6o=o(" \u2014 "),uO=a("a"),v6o=o("Speech2Text2Processor"),F6o=o(" (Speech2Text2 model)"),T6o=l(),jp=a("li"),cue=a("strong"),M6o=o("trocr"),E6o=o(" \u2014 "),pO=a("a"),C6o=o("TrOCRProcessor"),w6o=o(" (TrOCR model)"),A6o=l(),Dp=a("li"),mue=a("strong"),L6o=o("unispeech"),y6o=o(" \u2014 "),_O=a("a"),x6o=o("Wav2Vec2Processor"),$6o=o(" (UniSpeech model)"),k6o=l(),Gp=a("li"),fue=a("strong"),S6o=o("unispeech-sat"),R6o=o(" \u2014 "),bO=a("a"),P6o=o("Wav2Vec2Processor"),B6o=o(" (UniSpeechSat model)"),I6o=l(),Op=a("li"),gue=a("strong"),N6o=o("vilt"),q6o=o(" \u2014 "),vO=a("a"),j6o=o("ViltProcessor"),D6o=o(" (ViLT model)"),G6o=l(),Vp=a("li"),hue=a("strong"),O6o=o("vision-text-dual-encoder"),V6o=o(" \u2014 "),FO=a("a"),X6o=o("VisionTextDualEncoderProcessor"),z6o=o(" (VisionTextDualEncoder model)"),Q6o=l(),Xp=a("li"),uue=a("strong"),W6o=o("wav2vec2"),U6o=o(" \u2014 "),TO=a("a"),H6o=o("Wav2Vec2Processor"),J6o=o(" (Wav2Vec2 model)"),Y6o=l(),zp=a("li"),pue=a("strong"),K6o=o("wav2vec2-conformer"),Z6o=o(" \u2014 "),MO=a("a"),e7o=o("Wav2Vec2Processor"),o7o=o(" (Wav2Vec2-Conformer model)"),r7o=l(),Qp=a("li"),_ue=a("strong"),t7o=o("wavlm"),a7o=o(" \u2014 "),EO=a("a"),n7o=o("Wav2Vec2Processor"),s7o=o(" (WavLM model)"),l7o=l(),Wp=a("li"),bue=a("strong"),i7o=o("xclip"),d7o=o(" \u2014 "),CO=a("a"),c7o=o("CLIPProcessor"),m7o=o(" (X-CLIP model)"),f7o=l(),F(Up.$$.fragment),g7o=l(),F(Hp.$$.fragment),h7o=l(),Jp=a("div"),F(ix.$$.fragment),u7o=l(),vue=a("p"),p7o=o("Register a new processor for this class."),jKe=l(),_d=a("h2"),Yp=a("a"),Fue=a("span"),F(dx.$$.fragment),_7o=l(),Tue=a("span"),b7o=o("AutoModel"),DKe=l(),Po=a("div"),F(cx.$$.fragment),v7o=l(),bd=a("p"),F7o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wO=a("a"),T7o=o("from_pretrained()"),M7o=o(" class method or the "),AO=a("a"),E7o=o("from_config()"),C7o=o(` class
method.`),w7o=l(),mx=a("p"),A7o=o("This class cannot be instantiated directly using "),Mue=a("code"),L7o=o("__init__()"),y7o=o(" (throws an error)."),x7o=l(),_t=a("div"),F(fx.$$.fragment),$7o=l(),Eue=a("p"),k7o=o("Instantiates one of the base model classes of the library from a configuration."),S7o=l(),vd=a("p"),R7o=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),P7o=o("not"),B7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),I7o=o("from_pretrained()"),N7o=o(" to load the model weights."),q7o=l(),F(Kp.$$.fragment),j7o=l(),Ze=a("div"),F(gx.$$.fragment),D7o=l(),wue=a("p"),G7o=o("Instantiate one of the base model classes of the library from a pretrained model."),O7o=l(),Ja=a("p"),V7o=o("The model class to instantiate is selected based on the "),Aue=a("code"),X7o=o("model_type"),z7o=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),Q7o=o("pretrained_model_name_or_path"),W7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),U7o=o("pretrained_model_name_or_path"),H7o=o(":"),J7o=l(),y=a("ul"),Zp=a("li"),xue=a("strong"),Y7o=o("albert"),K7o=o(" \u2014 "),yO=a("a"),Z7o=o("AlbertModel"),eLo=o(" (ALBERT model)"),oLo=l(),e_=a("li"),$ue=a("strong"),rLo=o("bart"),tLo=o(" \u2014 "),xO=a("a"),aLo=o("BartModel"),nLo=o(" (BART model)"),sLo=l(),o_=a("li"),kue=a("strong"),lLo=o("beit"),iLo=o(" \u2014 "),$O=a("a"),dLo=o("BeitModel"),cLo=o(" (BEiT model)"),mLo=l(),r_=a("li"),Sue=a("strong"),fLo=o("bert"),gLo=o(" \u2014 "),kO=a("a"),hLo=o("BertModel"),uLo=o(" (BERT model)"),pLo=l(),t_=a("li"),Rue=a("strong"),_Lo=o("bert-generation"),bLo=o(" \u2014 "),SO=a("a"),vLo=o("BertGenerationEncoder"),FLo=o(" (Bert Generation model)"),TLo=l(),a_=a("li"),Pue=a("strong"),MLo=o("big_bird"),ELo=o(" \u2014 "),RO=a("a"),CLo=o("BigBirdModel"),wLo=o(" (BigBird model)"),ALo=l(),n_=a("li"),Bue=a("strong"),LLo=o("bigbird_pegasus"),yLo=o(" \u2014 "),PO=a("a"),xLo=o("BigBirdPegasusModel"),$Lo=o(" (BigBird-Pegasus model)"),kLo=l(),s_=a("li"),Iue=a("strong"),SLo=o("blenderbot"),RLo=o(" \u2014 "),BO=a("a"),PLo=o("BlenderbotModel"),BLo=o(" (Blenderbot model)"),ILo=l(),l_=a("li"),Nue=a("strong"),NLo=o("blenderbot-small"),qLo=o(" \u2014 "),IO=a("a"),jLo=o("BlenderbotSmallModel"),DLo=o(" (BlenderbotSmall model)"),GLo=l(),i_=a("li"),que=a("strong"),OLo=o("bloom"),VLo=o(" \u2014 "),NO=a("a"),XLo=o("BloomModel"),zLo=o(" (BLOOM model)"),QLo=l(),d_=a("li"),jue=a("strong"),WLo=o("camembert"),ULo=o(" \u2014 "),qO=a("a"),HLo=o("CamembertModel"),JLo=o(" (CamemBERT model)"),YLo=l(),c_=a("li"),Due=a("strong"),KLo=o("canine"),ZLo=o(" \u2014 "),jO=a("a"),eyo=o("CanineModel"),oyo=o(" (CANINE model)"),ryo=l(),m_=a("li"),Gue=a("strong"),tyo=o("clip"),ayo=o(" \u2014 "),DO=a("a"),nyo=o("CLIPModel"),syo=o(" (CLIP model)"),lyo=l(),f_=a("li"),Oue=a("strong"),iyo=o("codegen"),dyo=o(" \u2014 "),GO=a("a"),cyo=o("CodeGenModel"),myo=o(" (CodeGen model)"),fyo=l(),g_=a("li"),Vue=a("strong"),gyo=o("conditional_detr"),hyo=o(" \u2014 "),OO=a("a"),uyo=o("ConditionalDetrModel"),pyo=o(" (Conditional DETR model)"),_yo=l(),h_=a("li"),Xue=a("strong"),byo=o("convbert"),vyo=o(" \u2014 "),VO=a("a"),Fyo=o("ConvBertModel"),Tyo=o(" (ConvBERT model)"),Myo=l(),u_=a("li"),zue=a("strong"),Eyo=o("convnext"),Cyo=o(" \u2014 "),XO=a("a"),wyo=o("ConvNextModel"),Ayo=o(" (ConvNeXT model)"),Lyo=l(),p_=a("li"),Que=a("strong"),yyo=o("ctrl"),xyo=o(" \u2014 "),zO=a("a"),$yo=o("CTRLModel"),kyo=o(" (CTRL model)"),Syo=l(),__=a("li"),Wue=a("strong"),Ryo=o("cvt"),Pyo=o(" \u2014 "),QO=a("a"),Byo=o("CvtModel"),Iyo=o(" (CvT model)"),Nyo=l(),b_=a("li"),Uue=a("strong"),qyo=o("data2vec-audio"),jyo=o(" \u2014 "),WO=a("a"),Dyo=o("Data2VecAudioModel"),Gyo=o(" (Data2VecAudio model)"),Oyo=l(),v_=a("li"),Hue=a("strong"),Vyo=o("data2vec-text"),Xyo=o(" \u2014 "),UO=a("a"),zyo=o("Data2VecTextModel"),Qyo=o(" (Data2VecText model)"),Wyo=l(),F_=a("li"),Jue=a("strong"),Uyo=o("data2vec-vision"),Hyo=o(" \u2014 "),HO=a("a"),Jyo=o("Data2VecVisionModel"),Yyo=o(" (Data2VecVision model)"),Kyo=l(),T_=a("li"),Yue=a("strong"),Zyo=o("deberta"),e8o=o(" \u2014 "),JO=a("a"),o8o=o("DebertaModel"),r8o=o(" (DeBERTa model)"),t8o=l(),M_=a("li"),Kue=a("strong"),a8o=o("deberta-v2"),n8o=o(" \u2014 "),YO=a("a"),s8o=o("DebertaV2Model"),l8o=o(" (DeBERTa-v2 model)"),i8o=l(),E_=a("li"),Zue=a("strong"),d8o=o("decision_transformer"),c8o=o(" \u2014 "),KO=a("a"),m8o=o("DecisionTransformerModel"),f8o=o(" (Decision Transformer model)"),g8o=l(),C_=a("li"),epe=a("strong"),h8o=o("deformable_detr"),u8o=o(" \u2014 "),ZO=a("a"),p8o=o("DeformableDetrModel"),_8o=o(" (Deformable DETR model)"),b8o=l(),w_=a("li"),ope=a("strong"),v8o=o("deit"),F8o=o(" \u2014 "),eV=a("a"),T8o=o("DeiTModel"),M8o=o(" (DeiT model)"),E8o=l(),A_=a("li"),rpe=a("strong"),C8o=o("detr"),w8o=o(" \u2014 "),oV=a("a"),A8o=o("DetrModel"),L8o=o(" (DETR model)"),y8o=l(),L_=a("li"),tpe=a("strong"),x8o=o("distilbert"),$8o=o(" \u2014 "),rV=a("a"),k8o=o("DistilBertModel"),S8o=o(" (DistilBERT model)"),R8o=l(),y_=a("li"),ape=a("strong"),P8o=o("donut-swin"),B8o=o(" \u2014 "),tV=a("a"),I8o=o("DonutSwinModel"),N8o=o(" (DonutSwin model)"),q8o=l(),x_=a("li"),npe=a("strong"),j8o=o("dpr"),D8o=o(" \u2014 "),aV=a("a"),G8o=o("DPRQuestionEncoder"),O8o=o(" (DPR model)"),V8o=l(),$_=a("li"),spe=a("strong"),X8o=o("dpt"),z8o=o(" \u2014 "),nV=a("a"),Q8o=o("DPTModel"),W8o=o(" (DPT model)"),U8o=l(),k_=a("li"),lpe=a("strong"),H8o=o("electra"),J8o=o(" \u2014 "),sV=a("a"),Y8o=o("ElectraModel"),K8o=o(" (ELECTRA model)"),Z8o=l(),S_=a("li"),ipe=a("strong"),e9o=o("ernie"),o9o=o(" \u2014 "),lV=a("a"),r9o=o("ErnieModel"),t9o=o(" (ERNIE model)"),a9o=l(),R_=a("li"),dpe=a("strong"),n9o=o("flaubert"),s9o=o(" \u2014 "),iV=a("a"),l9o=o("FlaubertModel"),i9o=o(" (FlauBERT model)"),d9o=l(),P_=a("li"),cpe=a("strong"),c9o=o("flava"),m9o=o(" \u2014 "),dV=a("a"),f9o=o("FlavaModel"),g9o=o(" (FLAVA model)"),h9o=l(),B_=a("li"),mpe=a("strong"),u9o=o("fnet"),p9o=o(" \u2014 "),cV=a("a"),_9o=o("FNetModel"),b9o=o(" (FNet model)"),v9o=l(),I_=a("li"),fpe=a("strong"),F9o=o("fsmt"),T9o=o(" \u2014 "),mV=a("a"),M9o=o("FSMTModel"),E9o=o(" (FairSeq Machine-Translation model)"),C9o=l(),_l=a("li"),gpe=a("strong"),w9o=o("funnel"),A9o=o(" \u2014 "),fV=a("a"),L9o=o("FunnelModel"),y9o=o(" or "),gV=a("a"),x9o=o("FunnelBaseModel"),$9o=o(" (Funnel Transformer model)"),k9o=l(),N_=a("li"),hpe=a("strong"),S9o=o("glpn"),R9o=o(" \u2014 "),hV=a("a"),P9o=o("GLPNModel"),B9o=o(" (GLPN model)"),I9o=l(),q_=a("li"),upe=a("strong"),N9o=o("gpt2"),q9o=o(" \u2014 "),uV=a("a"),j9o=o("GPT2Model"),D9o=o(" (OpenAI GPT-2 model)"),G9o=l(),j_=a("li"),ppe=a("strong"),O9o=o("gpt_neo"),V9o=o(" \u2014 "),pV=a("a"),X9o=o("GPTNeoModel"),z9o=o(" (GPT Neo model)"),Q9o=l(),D_=a("li"),_pe=a("strong"),W9o=o("gpt_neox"),U9o=o(" \u2014 "),_V=a("a"),H9o=o("GPTNeoXModel"),J9o=o(" (GPT NeoX model)"),Y9o=l(),G_=a("li"),bpe=a("strong"),K9o=o("gpt_neox_japanese"),Z9o=o(" \u2014 "),bV=a("a"),exo=o("GPTNeoXJapaneseModel"),oxo=o(" (GPT NeoX Japanese model)"),rxo=l(),O_=a("li"),vpe=a("strong"),txo=o("gptj"),axo=o(" \u2014 "),vV=a("a"),nxo=o("GPTJModel"),sxo=o(" (GPT-J model)"),lxo=l(),V_=a("li"),Fpe=a("strong"),ixo=o("groupvit"),dxo=o(" \u2014 "),FV=a("a"),cxo=o("GroupViTModel"),mxo=o(" (GroupViT model)"),fxo=l(),X_=a("li"),Tpe=a("strong"),gxo=o("hubert"),hxo=o(" \u2014 "),TV=a("a"),uxo=o("HubertModel"),pxo=o(" (Hubert model)"),_xo=l(),z_=a("li"),Mpe=a("strong"),bxo=o("ibert"),vxo=o(" \u2014 "),MV=a("a"),Fxo=o("IBertModel"),Txo=o(" (I-BERT model)"),Mxo=l(),Q_=a("li"),Epe=a("strong"),Exo=o("imagegpt"),Cxo=o(" \u2014 "),EV=a("a"),wxo=o("ImageGPTModel"),Axo=o(" (ImageGPT model)"),Lxo=l(),W_=a("li"),Cpe=a("strong"),yxo=o("layoutlm"),xxo=o(" \u2014 "),CV=a("a"),$xo=o("LayoutLMModel"),kxo=o(" (LayoutLM model)"),Sxo=l(),U_=a("li"),wpe=a("strong"),Rxo=o("layoutlmv2"),Pxo=o(" \u2014 "),wV=a("a"),Bxo=o("LayoutLMv2Model"),Ixo=o(" (LayoutLMv2 model)"),Nxo=l(),H_=a("li"),Ape=a("strong"),qxo=o("layoutlmv3"),jxo=o(" \u2014 "),AV=a("a"),Dxo=o("LayoutLMv3Model"),Gxo=o(" (LayoutLMv3 model)"),Oxo=l(),J_=a("li"),Lpe=a("strong"),Vxo=o("led"),Xxo=o(" \u2014 "),LV=a("a"),zxo=o("LEDModel"),Qxo=o(" (LED model)"),Wxo=l(),Y_=a("li"),ype=a("strong"),Uxo=o("levit"),Hxo=o(" \u2014 "),yV=a("a"),Jxo=o("LevitModel"),Yxo=o(" (LeViT model)"),Kxo=l(),K_=a("li"),xpe=a("strong"),Zxo=o("longformer"),e$o=o(" \u2014 "),xV=a("a"),o$o=o("LongformerModel"),r$o=o(" (Longformer model)"),t$o=l(),Z_=a("li"),$pe=a("strong"),a$o=o("longt5"),n$o=o(" \u2014 "),$V=a("a"),s$o=o("LongT5Model"),l$o=o(" (LongT5 model)"),i$o=l(),eb=a("li"),kpe=a("strong"),d$o=o("luke"),c$o=o(" \u2014 "),kV=a("a"),m$o=o("LukeModel"),f$o=o(" (LUKE model)"),g$o=l(),ob=a("li"),Spe=a("strong"),h$o=o("lxmert"),u$o=o(" \u2014 "),SV=a("a"),p$o=o("LxmertModel"),_$o=o(" (LXMERT model)"),b$o=l(),rb=a("li"),Rpe=a("strong"),v$o=o("m2m_100"),F$o=o(" \u2014 "),RV=a("a"),T$o=o("M2M100Model"),M$o=o(" (M2M100 model)"),E$o=l(),tb=a("li"),Ppe=a("strong"),C$o=o("marian"),w$o=o(" \u2014 "),PV=a("a"),A$o=o("MarianModel"),L$o=o(" (Marian model)"),y$o=l(),ab=a("li"),Bpe=a("strong"),x$o=o("maskformer"),$$o=o(" \u2014 "),BV=a("a"),k$o=o("MaskFormerModel"),S$o=o(" (MaskFormer model)"),R$o=l(),nb=a("li"),Ipe=a("strong"),P$o=o("mbart"),B$o=o(" \u2014 "),IV=a("a"),I$o=o("MBartModel"),N$o=o(" (mBART model)"),q$o=l(),sb=a("li"),Npe=a("strong"),j$o=o("mctct"),D$o=o(" \u2014 "),NV=a("a"),G$o=o("MCTCTModel"),O$o=o(" (M-CTC-T model)"),V$o=l(),lb=a("li"),qpe=a("strong"),X$o=o("megatron-bert"),z$o=o(" \u2014 "),qV=a("a"),Q$o=o("MegatronBertModel"),W$o=o(" (Megatron-BERT model)"),U$o=l(),ib=a("li"),jpe=a("strong"),H$o=o("mobilebert"),J$o=o(" \u2014 "),jV=a("a"),Y$o=o("MobileBertModel"),K$o=o(" (MobileBERT model)"),Z$o=l(),db=a("li"),Dpe=a("strong"),eko=o("mobilevit"),oko=o(" \u2014 "),DV=a("a"),rko=o("MobileViTModel"),tko=o(" (MobileViT model)"),ako=l(),cb=a("li"),Gpe=a("strong"),nko=o("mpnet"),sko=o(" \u2014 "),GV=a("a"),lko=o("MPNetModel"),iko=o(" (MPNet model)"),dko=l(),mb=a("li"),Ope=a("strong"),cko=o("mt5"),mko=o(" \u2014 "),OV=a("a"),fko=o("MT5Model"),gko=o(" (MT5 model)"),hko=l(),fb=a("li"),Vpe=a("strong"),uko=o("mvp"),pko=o(" \u2014 "),VV=a("a"),_ko=o("MvpModel"),bko=o(" (MVP model)"),vko=l(),gb=a("li"),Xpe=a("strong"),Fko=o("nezha"),Tko=o(" \u2014 "),XV=a("a"),Mko=o("NezhaModel"),Eko=o(" (Nezha model)"),Cko=l(),hb=a("li"),zpe=a("strong"),wko=o("nllb"),Ako=o(" \u2014 "),zV=a("a"),Lko=o("M2M100Model"),yko=o(" (NLLB model)"),xko=l(),ub=a("li"),Qpe=a("strong"),$ko=o("nystromformer"),kko=o(" \u2014 "),QV=a("a"),Sko=o("NystromformerModel"),Rko=o(" (Nystr\xF6mformer model)"),Pko=l(),pb=a("li"),Wpe=a("strong"),Bko=o("openai-gpt"),Iko=o(" \u2014 "),WV=a("a"),Nko=o("OpenAIGPTModel"),qko=o(" (OpenAI GPT model)"),jko=l(),_b=a("li"),Upe=a("strong"),Dko=o("opt"),Gko=o(" \u2014 "),UV=a("a"),Oko=o("OPTModel"),Vko=o(" (OPT model)"),Xko=l(),bb=a("li"),Hpe=a("strong"),zko=o("owlvit"),Qko=o(" \u2014 "),HV=a("a"),Wko=o("OwlViTModel"),Uko=o(" (OWL-ViT model)"),Hko=l(),vb=a("li"),Jpe=a("strong"),Jko=o("pegasus"),Yko=o(" \u2014 "),JV=a("a"),Kko=o("PegasusModel"),Zko=o(" (Pegasus model)"),eSo=l(),Fb=a("li"),Ype=a("strong"),oSo=o("pegasus_x"),rSo=o(" \u2014 "),YV=a("a"),tSo=o("PegasusXModel"),aSo=o(" (PEGASUS-X model)"),nSo=l(),Tb=a("li"),Kpe=a("strong"),sSo=o("perceiver"),lSo=o(" \u2014 "),KV=a("a"),iSo=o("PerceiverModel"),dSo=o(" (Perceiver model)"),cSo=l(),Mb=a("li"),Zpe=a("strong"),mSo=o("plbart"),fSo=o(" \u2014 "),ZV=a("a"),gSo=o("PLBartModel"),hSo=o(" (PLBart model)"),uSo=l(),Eb=a("li"),e_e=a("strong"),pSo=o("poolformer"),_So=o(" \u2014 "),eX=a("a"),bSo=o("PoolFormerModel"),vSo=o(" (PoolFormer model)"),FSo=l(),Cb=a("li"),o_e=a("strong"),TSo=o("prophetnet"),MSo=o(" \u2014 "),oX=a("a"),ESo=o("ProphetNetModel"),CSo=o(" (ProphetNet model)"),wSo=l(),wb=a("li"),r_e=a("strong"),ASo=o("qdqbert"),LSo=o(" \u2014 "),rX=a("a"),ySo=o("QDQBertModel"),xSo=o(" (QDQBert model)"),$So=l(),Ab=a("li"),t_e=a("strong"),kSo=o("reformer"),SSo=o(" \u2014 "),tX=a("a"),RSo=o("ReformerModel"),PSo=o(" (Reformer model)"),BSo=l(),Lb=a("li"),a_e=a("strong"),ISo=o("regnet"),NSo=o(" \u2014 "),aX=a("a"),qSo=o("RegNetModel"),jSo=o(" (RegNet model)"),DSo=l(),yb=a("li"),n_e=a("strong"),GSo=o("rembert"),OSo=o(" \u2014 "),nX=a("a"),VSo=o("RemBertModel"),XSo=o(" (RemBERT model)"),zSo=l(),xb=a("li"),s_e=a("strong"),QSo=o("resnet"),WSo=o(" \u2014 "),sX=a("a"),USo=o("ResNetModel"),HSo=o(" (ResNet model)"),JSo=l(),$b=a("li"),l_e=a("strong"),YSo=o("retribert"),KSo=o(" \u2014 "),lX=a("a"),ZSo=o("RetriBertModel"),eRo=o(" (RetriBERT model)"),oRo=l(),kb=a("li"),i_e=a("strong"),rRo=o("roberta"),tRo=o(" \u2014 "),iX=a("a"),aRo=o("RobertaModel"),nRo=o(" (RoBERTa model)"),sRo=l(),Sb=a("li"),d_e=a("strong"),lRo=o("roformer"),iRo=o(" \u2014 "),dX=a("a"),dRo=o("RoFormerModel"),cRo=o(" (RoFormer model)"),mRo=l(),Rb=a("li"),c_e=a("strong"),fRo=o("segformer"),gRo=o(" \u2014 "),cX=a("a"),hRo=o("SegformerModel"),uRo=o(" (SegFormer model)"),pRo=l(),Pb=a("li"),m_e=a("strong"),_Ro=o("sew"),bRo=o(" \u2014 "),mX=a("a"),vRo=o("SEWModel"),FRo=o(" (SEW model)"),TRo=l(),Bb=a("li"),f_e=a("strong"),MRo=o("sew-d"),ERo=o(" \u2014 "),fX=a("a"),CRo=o("SEWDModel"),wRo=o(" (SEW-D model)"),ARo=l(),Ib=a("li"),g_e=a("strong"),LRo=o("speech_to_text"),yRo=o(" \u2014 "),gX=a("a"),xRo=o("Speech2TextModel"),$Ro=o(" (Speech2Text model)"),kRo=l(),Nb=a("li"),h_e=a("strong"),SRo=o("splinter"),RRo=o(" \u2014 "),hX=a("a"),PRo=o("SplinterModel"),BRo=o(" (Splinter model)"),IRo=l(),qb=a("li"),u_e=a("strong"),NRo=o("squeezebert"),qRo=o(" \u2014 "),uX=a("a"),jRo=o("SqueezeBertModel"),DRo=o(" (SqueezeBERT model)"),GRo=l(),jb=a("li"),p_e=a("strong"),ORo=o("swin"),VRo=o(" \u2014 "),pX=a("a"),XRo=o("SwinModel"),zRo=o(" (Swin Transformer model)"),QRo=l(),Db=a("li"),__e=a("strong"),WRo=o("swinv2"),URo=o(" \u2014 "),_X=a("a"),HRo=o("Swinv2Model"),JRo=o(" (Swin Transformer V2 model)"),YRo=l(),Gb=a("li"),b_e=a("strong"),KRo=o("t5"),ZRo=o(" \u2014 "),bX=a("a"),ePo=o("T5Model"),oPo=o(" (T5 model)"),rPo=l(),Ob=a("li"),v_e=a("strong"),tPo=o("tapas"),aPo=o(" \u2014 "),vX=a("a"),nPo=o("TapasModel"),sPo=o(" (TAPAS model)"),lPo=l(),Vb=a("li"),F_e=a("strong"),iPo=o("trajectory_transformer"),dPo=o(" \u2014 "),FX=a("a"),cPo=o("TrajectoryTransformerModel"),mPo=o(" (Trajectory Transformer model)"),fPo=l(),Xb=a("li"),T_e=a("strong"),gPo=o("transfo-xl"),hPo=o(" \u2014 "),TX=a("a"),uPo=o("TransfoXLModel"),pPo=o(" (Transformer-XL model)"),_Po=l(),zb=a("li"),M_e=a("strong"),bPo=o("unispeech"),vPo=o(" \u2014 "),MX=a("a"),FPo=o("UniSpeechModel"),TPo=o(" (UniSpeech model)"),MPo=l(),Qb=a("li"),E_e=a("strong"),EPo=o("unispeech-sat"),CPo=o(" \u2014 "),EX=a("a"),wPo=o("UniSpeechSatModel"),APo=o(" (UniSpeechSat model)"),LPo=l(),Wb=a("li"),C_e=a("strong"),yPo=o("van"),xPo=o(" \u2014 "),CX=a("a"),$Po=o("VanModel"),kPo=o(" (VAN model)"),SPo=l(),Ub=a("li"),w_e=a("strong"),RPo=o("videomae"),PPo=o(" \u2014 "),wX=a("a"),BPo=o("VideoMAEModel"),IPo=o(" (VideoMAE model)"),NPo=l(),Hb=a("li"),A_e=a("strong"),qPo=o("vilt"),jPo=o(" \u2014 "),AX=a("a"),DPo=o("ViltModel"),GPo=o(" (ViLT model)"),OPo=l(),Jb=a("li"),L_e=a("strong"),VPo=o("vision-text-dual-encoder"),XPo=o(" \u2014 "),LX=a("a"),zPo=o("VisionTextDualEncoderModel"),QPo=o(" (VisionTextDualEncoder model)"),WPo=l(),Yb=a("li"),y_e=a("strong"),UPo=o("visual_bert"),HPo=o(" \u2014 "),yX=a("a"),JPo=o("VisualBertModel"),YPo=o(" (VisualBERT model)"),KPo=l(),Kb=a("li"),x_e=a("strong"),ZPo=o("vit"),eBo=o(" \u2014 "),xX=a("a"),oBo=o("ViTModel"),rBo=o(" (ViT model)"),tBo=l(),Zb=a("li"),$_e=a("strong"),aBo=o("vit_mae"),nBo=o(" \u2014 "),$X=a("a"),sBo=o("ViTMAEModel"),lBo=o(" (ViTMAE model)"),iBo=l(),e2=a("li"),k_e=a("strong"),dBo=o("wav2vec2"),cBo=o(" \u2014 "),kX=a("a"),mBo=o("Wav2Vec2Model"),fBo=o(" (Wav2Vec2 model)"),gBo=l(),o2=a("li"),S_e=a("strong"),hBo=o("wav2vec2-conformer"),uBo=o(" \u2014 "),SX=a("a"),pBo=o("Wav2Vec2ConformerModel"),_Bo=o(" (Wav2Vec2-Conformer model)"),bBo=l(),r2=a("li"),R_e=a("strong"),vBo=o("wavlm"),FBo=o(" \u2014 "),RX=a("a"),TBo=o("WavLMModel"),MBo=o(" (WavLM model)"),EBo=l(),t2=a("li"),P_e=a("strong"),CBo=o("xclip"),wBo=o(" \u2014 "),PX=a("a"),ABo=o("XCLIPModel"),LBo=o(" (X-CLIP model)"),yBo=l(),a2=a("li"),B_e=a("strong"),xBo=o("xglm"),$Bo=o(" \u2014 "),BX=a("a"),kBo=o("XGLMModel"),SBo=o(" (XGLM model)"),RBo=l(),n2=a("li"),I_e=a("strong"),PBo=o("xlm"),BBo=o(" \u2014 "),IX=a("a"),IBo=o("XLMModel"),NBo=o(" (XLM model)"),qBo=l(),s2=a("li"),N_e=a("strong"),jBo=o("xlm-prophetnet"),DBo=o(" \u2014 "),NX=a("a"),GBo=o("XLMProphetNetModel"),OBo=o(" (XLM-ProphetNet model)"),VBo=l(),l2=a("li"),q_e=a("strong"),XBo=o("xlm-roberta"),zBo=o(" \u2014 "),qX=a("a"),QBo=o("XLMRobertaModel"),WBo=o(" (XLM-RoBERTa model)"),UBo=l(),i2=a("li"),j_e=a("strong"),HBo=o("xlm-roberta-xl"),JBo=o(" \u2014 "),jX=a("a"),YBo=o("XLMRobertaXLModel"),KBo=o(" (XLM-RoBERTa-XL model)"),ZBo=l(),d2=a("li"),D_e=a("strong"),eIo=o("xlnet"),oIo=o(" \u2014 "),DX=a("a"),rIo=o("XLNetModel"),tIo=o(" (XLNet model)"),aIo=l(),c2=a("li"),G_e=a("strong"),nIo=o("yolos"),sIo=o(" \u2014 "),GX=a("a"),lIo=o("YolosModel"),iIo=o(" (YOLOS model)"),dIo=l(),m2=a("li"),O_e=a("strong"),cIo=o("yoso"),mIo=o(" \u2014 "),OX=a("a"),fIo=o("YosoModel"),gIo=o(" (YOSO model)"),hIo=l(),f2=a("p"),uIo=o("The model is set in evaluation mode by default using "),V_e=a("code"),pIo=o("model.eval()"),_Io=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),bIo=o("model.train()"),vIo=l(),F(g2.$$.fragment),GKe=l(),Fd=a("h2"),h2=a("a"),z_e=a("span"),F(hx.$$.fragment),FIo=l(),Q_e=a("span"),TIo=o("AutoModelForPreTraining"),OKe=l(),Bo=a("div"),F(ux.$$.fragment),MIo=l(),Td=a("p"),EIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VX=a("a"),CIo=o("from_pretrained()"),wIo=o(" class method or the "),XX=a("a"),AIo=o("from_config()"),LIo=o(` class
method.`),yIo=l(),px=a("p"),xIo=o("This class cannot be instantiated directly using "),W_e=a("code"),$Io=o("__init__()"),kIo=o(" (throws an error)."),SIo=l(),bt=a("div"),F(_x.$$.fragment),RIo=l(),U_e=a("p"),PIo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),BIo=l(),Md=a("p"),IIo=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),NIo=o("not"),qIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),jIo=o("from_pretrained()"),DIo=o(" to load the model weights."),GIo=l(),F(u2.$$.fragment),OIo=l(),eo=a("div"),F(bx.$$.fragment),VIo=l(),J_e=a("p"),XIo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zIo=l(),Ya=a("p"),QIo=o("The model class to instantiate is selected based on the "),Y_e=a("code"),WIo=o("model_type"),UIo=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),HIo=o("pretrained_model_name_or_path"),JIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),YIo=o("pretrained_model_name_or_path"),KIo=o(":"),ZIo=l(),G=a("ul"),p2=a("li"),ebe=a("strong"),eNo=o("albert"),oNo=o(" \u2014 "),QX=a("a"),rNo=o("AlbertForPreTraining"),tNo=o(" (ALBERT model)"),aNo=l(),_2=a("li"),obe=a("strong"),nNo=o("bart"),sNo=o(" \u2014 "),WX=a("a"),lNo=o("BartForConditionalGeneration"),iNo=o(" (BART model)"),dNo=l(),b2=a("li"),rbe=a("strong"),cNo=o("bert"),mNo=o(" \u2014 "),UX=a("a"),fNo=o("BertForPreTraining"),gNo=o(" (BERT model)"),hNo=l(),v2=a("li"),tbe=a("strong"),uNo=o("big_bird"),pNo=o(" \u2014 "),HX=a("a"),_No=o("BigBirdForPreTraining"),bNo=o(" (BigBird model)"),vNo=l(),F2=a("li"),abe=a("strong"),FNo=o("bloom"),TNo=o(" \u2014 "),JX=a("a"),MNo=o("BloomForCausalLM"),ENo=o(" (BLOOM model)"),CNo=l(),T2=a("li"),nbe=a("strong"),wNo=o("camembert"),ANo=o(" \u2014 "),YX=a("a"),LNo=o("CamembertForMaskedLM"),yNo=o(" (CamemBERT model)"),xNo=l(),M2=a("li"),sbe=a("strong"),$No=o("ctrl"),kNo=o(" \u2014 "),KX=a("a"),SNo=o("CTRLLMHeadModel"),RNo=o(" (CTRL model)"),PNo=l(),E2=a("li"),lbe=a("strong"),BNo=o("data2vec-text"),INo=o(" \u2014 "),ZX=a("a"),NNo=o("Data2VecTextForMaskedLM"),qNo=o(" (Data2VecText model)"),jNo=l(),C2=a("li"),ibe=a("strong"),DNo=o("deberta"),GNo=o(" \u2014 "),ez=a("a"),ONo=o("DebertaForMaskedLM"),VNo=o(" (DeBERTa model)"),XNo=l(),w2=a("li"),dbe=a("strong"),zNo=o("deberta-v2"),QNo=o(" \u2014 "),oz=a("a"),WNo=o("DebertaV2ForMaskedLM"),UNo=o(" (DeBERTa-v2 model)"),HNo=l(),A2=a("li"),cbe=a("strong"),JNo=o("distilbert"),YNo=o(" \u2014 "),rz=a("a"),KNo=o("DistilBertForMaskedLM"),ZNo=o(" (DistilBERT model)"),eqo=l(),L2=a("li"),mbe=a("strong"),oqo=o("electra"),rqo=o(" \u2014 "),tz=a("a"),tqo=o("ElectraForPreTraining"),aqo=o(" (ELECTRA model)"),nqo=l(),y2=a("li"),fbe=a("strong"),sqo=o("ernie"),lqo=o(" \u2014 "),az=a("a"),iqo=o("ErnieForPreTraining"),dqo=o(" (ERNIE model)"),cqo=l(),x2=a("li"),gbe=a("strong"),mqo=o("flaubert"),fqo=o(" \u2014 "),nz=a("a"),gqo=o("FlaubertWithLMHeadModel"),hqo=o(" (FlauBERT model)"),uqo=l(),$2=a("li"),hbe=a("strong"),pqo=o("flava"),_qo=o(" \u2014 "),sz=a("a"),bqo=o("FlavaForPreTraining"),vqo=o(" (FLAVA model)"),Fqo=l(),k2=a("li"),ube=a("strong"),Tqo=o("fnet"),Mqo=o(" \u2014 "),lz=a("a"),Eqo=o("FNetForPreTraining"),Cqo=o(" (FNet model)"),wqo=l(),S2=a("li"),pbe=a("strong"),Aqo=o("fsmt"),Lqo=o(" \u2014 "),iz=a("a"),yqo=o("FSMTForConditionalGeneration"),xqo=o(" (FairSeq Machine-Translation model)"),$qo=l(),R2=a("li"),_be=a("strong"),kqo=o("funnel"),Sqo=o(" \u2014 "),dz=a("a"),Rqo=o("FunnelForPreTraining"),Pqo=o(" (Funnel Transformer model)"),Bqo=l(),P2=a("li"),bbe=a("strong"),Iqo=o("gpt2"),Nqo=o(" \u2014 "),cz=a("a"),qqo=o("GPT2LMHeadModel"),jqo=o(" (OpenAI GPT-2 model)"),Dqo=l(),B2=a("li"),vbe=a("strong"),Gqo=o("ibert"),Oqo=o(" \u2014 "),mz=a("a"),Vqo=o("IBertForMaskedLM"),Xqo=o(" (I-BERT model)"),zqo=l(),I2=a("li"),Fbe=a("strong"),Qqo=o("layoutlm"),Wqo=o(" \u2014 "),fz=a("a"),Uqo=o("LayoutLMForMaskedLM"),Hqo=o(" (LayoutLM model)"),Jqo=l(),N2=a("li"),Tbe=a("strong"),Yqo=o("longformer"),Kqo=o(" \u2014 "),gz=a("a"),Zqo=o("LongformerForMaskedLM"),ejo=o(" (Longformer model)"),ojo=l(),q2=a("li"),Mbe=a("strong"),rjo=o("luke"),tjo=o(" \u2014 "),hz=a("a"),ajo=o("LukeForMaskedLM"),njo=o(" (LUKE model)"),sjo=l(),j2=a("li"),Ebe=a("strong"),ljo=o("lxmert"),ijo=o(" \u2014 "),uz=a("a"),djo=o("LxmertForPreTraining"),cjo=o(" (LXMERT model)"),mjo=l(),D2=a("li"),Cbe=a("strong"),fjo=o("megatron-bert"),gjo=o(" \u2014 "),pz=a("a"),hjo=o("MegatronBertForPreTraining"),ujo=o(" (Megatron-BERT model)"),pjo=l(),G2=a("li"),wbe=a("strong"),_jo=o("mobilebert"),bjo=o(" \u2014 "),_z=a("a"),vjo=o("MobileBertForPreTraining"),Fjo=o(" (MobileBERT model)"),Tjo=l(),O2=a("li"),Abe=a("strong"),Mjo=o("mpnet"),Ejo=o(" \u2014 "),bz=a("a"),Cjo=o("MPNetForMaskedLM"),wjo=o(" (MPNet model)"),Ajo=l(),V2=a("li"),Lbe=a("strong"),Ljo=o("mvp"),yjo=o(" \u2014 "),vz=a("a"),xjo=o("MvpForConditionalGeneration"),$jo=o(" (MVP model)"),kjo=l(),X2=a("li"),ybe=a("strong"),Sjo=o("nezha"),Rjo=o(" \u2014 "),Fz=a("a"),Pjo=o("NezhaForPreTraining"),Bjo=o(" (Nezha model)"),Ijo=l(),z2=a("li"),xbe=a("strong"),Njo=o("openai-gpt"),qjo=o(" \u2014 "),Tz=a("a"),jjo=o("OpenAIGPTLMHeadModel"),Djo=o(" (OpenAI GPT model)"),Gjo=l(),Q2=a("li"),$be=a("strong"),Ojo=o("retribert"),Vjo=o(" \u2014 "),Mz=a("a"),Xjo=o("RetriBertModel"),zjo=o(" (RetriBERT model)"),Qjo=l(),W2=a("li"),kbe=a("strong"),Wjo=o("roberta"),Ujo=o(" \u2014 "),Ez=a("a"),Hjo=o("RobertaForMaskedLM"),Jjo=o(" (RoBERTa model)"),Yjo=l(),U2=a("li"),Sbe=a("strong"),Kjo=o("splinter"),Zjo=o(" \u2014 "),Cz=a("a"),eDo=o("SplinterForPreTraining"),oDo=o(" (Splinter model)"),rDo=l(),H2=a("li"),Rbe=a("strong"),tDo=o("squeezebert"),aDo=o(" \u2014 "),wz=a("a"),nDo=o("SqueezeBertForMaskedLM"),sDo=o(" (SqueezeBERT model)"),lDo=l(),J2=a("li"),Pbe=a("strong"),iDo=o("t5"),dDo=o(" \u2014 "),Az=a("a"),cDo=o("T5ForConditionalGeneration"),mDo=o(" (T5 model)"),fDo=l(),Y2=a("li"),Bbe=a("strong"),gDo=o("tapas"),hDo=o(" \u2014 "),Lz=a("a"),uDo=o("TapasForMaskedLM"),pDo=o(" (TAPAS model)"),_Do=l(),K2=a("li"),Ibe=a("strong"),bDo=o("transfo-xl"),vDo=o(" \u2014 "),yz=a("a"),FDo=o("TransfoXLLMHeadModel"),TDo=o(" (Transformer-XL model)"),MDo=l(),Z2=a("li"),Nbe=a("strong"),EDo=o("unispeech"),CDo=o(" \u2014 "),xz=a("a"),wDo=o("UniSpeechForPreTraining"),ADo=o(" (UniSpeech model)"),LDo=l(),e1=a("li"),qbe=a("strong"),yDo=o("unispeech-sat"),xDo=o(" \u2014 "),$z=a("a"),$Do=o("UniSpeechSatForPreTraining"),kDo=o(" (UniSpeechSat model)"),SDo=l(),o1=a("li"),jbe=a("strong"),RDo=o("videomae"),PDo=o(" \u2014 "),kz=a("a"),BDo=o("VideoMAEForPreTraining"),IDo=o(" (VideoMAE model)"),NDo=l(),r1=a("li"),Dbe=a("strong"),qDo=o("visual_bert"),jDo=o(" \u2014 "),Sz=a("a"),DDo=o("VisualBertForPreTraining"),GDo=o(" (VisualBERT model)"),ODo=l(),t1=a("li"),Gbe=a("strong"),VDo=o("vit_mae"),XDo=o(" \u2014 "),Rz=a("a"),zDo=o("ViTMAEForPreTraining"),QDo=o(" (ViTMAE model)"),WDo=l(),a1=a("li"),Obe=a("strong"),UDo=o("wav2vec2"),HDo=o(" \u2014 "),Pz=a("a"),JDo=o("Wav2Vec2ForPreTraining"),YDo=o(" (Wav2Vec2 model)"),KDo=l(),n1=a("li"),Vbe=a("strong"),ZDo=o("wav2vec2-conformer"),eGo=o(" \u2014 "),Bz=a("a"),oGo=o("Wav2Vec2ConformerForPreTraining"),rGo=o(" (Wav2Vec2-Conformer model)"),tGo=l(),s1=a("li"),Xbe=a("strong"),aGo=o("xlm"),nGo=o(" \u2014 "),Iz=a("a"),sGo=o("XLMWithLMHeadModel"),lGo=o(" (XLM model)"),iGo=l(),l1=a("li"),zbe=a("strong"),dGo=o("xlm-roberta"),cGo=o(" \u2014 "),Nz=a("a"),mGo=o("XLMRobertaForMaskedLM"),fGo=o(" (XLM-RoBERTa model)"),gGo=l(),i1=a("li"),Qbe=a("strong"),hGo=o("xlm-roberta-xl"),uGo=o(" \u2014 "),qz=a("a"),pGo=o("XLMRobertaXLForMaskedLM"),_Go=o(" (XLM-RoBERTa-XL model)"),bGo=l(),d1=a("li"),Wbe=a("strong"),vGo=o("xlnet"),FGo=o(" \u2014 "),jz=a("a"),TGo=o("XLNetLMHeadModel"),MGo=o(" (XLNet model)"),EGo=l(),c1=a("p"),CGo=o("The model is set in evaluation mode by default using "),Ube=a("code"),wGo=o("model.eval()"),AGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hbe=a("code"),LGo=o("model.train()"),yGo=l(),F(m1.$$.fragment),VKe=l(),Ed=a("h2"),f1=a("a"),Jbe=a("span"),F(vx.$$.fragment),xGo=l(),Ybe=a("span"),$Go=o("AutoModelForCausalLM"),XKe=l(),Io=a("div"),F(Fx.$$.fragment),kGo=l(),Cd=a("p"),SGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dz=a("a"),RGo=o("from_pretrained()"),PGo=o(" class method or the "),Gz=a("a"),BGo=o("from_config()"),IGo=o(` class
method.`),NGo=l(),Tx=a("p"),qGo=o("This class cannot be instantiated directly using "),Kbe=a("code"),jGo=o("__init__()"),DGo=o(" (throws an error)."),GGo=l(),vt=a("div"),F(Mx.$$.fragment),OGo=l(),Zbe=a("p"),VGo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XGo=l(),wd=a("p"),zGo=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),QGo=o("not"),WGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),UGo=o("from_pretrained()"),HGo=o(" to load the model weights."),JGo=l(),F(g1.$$.fragment),YGo=l(),oo=a("div"),F(Ex.$$.fragment),KGo=l(),o2e=a("p"),ZGo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eOo=l(),Ka=a("p"),oOo=o("The model class to instantiate is selected based on the "),r2e=a("code"),rOo=o("model_type"),tOo=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),aOo=o("pretrained_model_name_or_path"),nOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),sOo=o("pretrained_model_name_or_path"),lOo=o(":"),iOo=l(),z=a("ul"),h1=a("li"),n2e=a("strong"),dOo=o("bart"),cOo=o(" \u2014 "),Vz=a("a"),mOo=o("BartForCausalLM"),fOo=o(" (BART model)"),gOo=l(),u1=a("li"),s2e=a("strong"),hOo=o("bert"),uOo=o(" \u2014 "),Xz=a("a"),pOo=o("BertLMHeadModel"),_Oo=o(" (BERT model)"),bOo=l(),p1=a("li"),l2e=a("strong"),vOo=o("bert-generation"),FOo=o(" \u2014 "),zz=a("a"),TOo=o("BertGenerationDecoder"),MOo=o(" (Bert Generation model)"),EOo=l(),_1=a("li"),i2e=a("strong"),COo=o("big_bird"),wOo=o(" \u2014 "),Qz=a("a"),AOo=o("BigBirdForCausalLM"),LOo=o(" (BigBird model)"),yOo=l(),b1=a("li"),d2e=a("strong"),xOo=o("bigbird_pegasus"),$Oo=o(" \u2014 "),Wz=a("a"),kOo=o("BigBirdPegasusForCausalLM"),SOo=o(" (BigBird-Pegasus model)"),ROo=l(),v1=a("li"),c2e=a("strong"),POo=o("blenderbot"),BOo=o(" \u2014 "),Uz=a("a"),IOo=o("BlenderbotForCausalLM"),NOo=o(" (Blenderbot model)"),qOo=l(),F1=a("li"),m2e=a("strong"),jOo=o("blenderbot-small"),DOo=o(" \u2014 "),Hz=a("a"),GOo=o("BlenderbotSmallForCausalLM"),OOo=o(" (BlenderbotSmall model)"),VOo=l(),T1=a("li"),f2e=a("strong"),XOo=o("bloom"),zOo=o(" \u2014 "),Jz=a("a"),QOo=o("BloomForCausalLM"),WOo=o(" (BLOOM model)"),UOo=l(),M1=a("li"),g2e=a("strong"),HOo=o("camembert"),JOo=o(" \u2014 "),Yz=a("a"),YOo=o("CamembertForCausalLM"),KOo=o(" (CamemBERT model)"),ZOo=l(),E1=a("li"),h2e=a("strong"),eVo=o("codegen"),oVo=o(" \u2014 "),Kz=a("a"),rVo=o("CodeGenForCausalLM"),tVo=o(" (CodeGen model)"),aVo=l(),C1=a("li"),u2e=a("strong"),nVo=o("ctrl"),sVo=o(" \u2014 "),Zz=a("a"),lVo=o("CTRLLMHeadModel"),iVo=o(" (CTRL model)"),dVo=l(),w1=a("li"),p2e=a("strong"),cVo=o("data2vec-text"),mVo=o(" \u2014 "),eQ=a("a"),fVo=o("Data2VecTextForCausalLM"),gVo=o(" (Data2VecText model)"),hVo=l(),A1=a("li"),_2e=a("strong"),uVo=o("electra"),pVo=o(" \u2014 "),oQ=a("a"),_Vo=o("ElectraForCausalLM"),bVo=o(" (ELECTRA model)"),vVo=l(),L1=a("li"),b2e=a("strong"),FVo=o("ernie"),TVo=o(" \u2014 "),rQ=a("a"),MVo=o("ErnieForCausalLM"),EVo=o(" (ERNIE model)"),CVo=l(),y1=a("li"),v2e=a("strong"),wVo=o("gpt2"),AVo=o(" \u2014 "),tQ=a("a"),LVo=o("GPT2LMHeadModel"),yVo=o(" (OpenAI GPT-2 model)"),xVo=l(),x1=a("li"),F2e=a("strong"),$Vo=o("gpt_neo"),kVo=o(" \u2014 "),aQ=a("a"),SVo=o("GPTNeoForCausalLM"),RVo=o(" (GPT Neo model)"),PVo=l(),$1=a("li"),T2e=a("strong"),BVo=o("gpt_neox"),IVo=o(" \u2014 "),nQ=a("a"),NVo=o("GPTNeoXForCausalLM"),qVo=o(" (GPT NeoX model)"),jVo=l(),k1=a("li"),M2e=a("strong"),DVo=o("gpt_neox_japanese"),GVo=o(" \u2014 "),sQ=a("a"),OVo=o("GPTNeoXJapaneseForCausalLM"),VVo=o(" (GPT NeoX Japanese model)"),XVo=l(),S1=a("li"),E2e=a("strong"),zVo=o("gptj"),QVo=o(" \u2014 "),lQ=a("a"),WVo=o("GPTJForCausalLM"),UVo=o(" (GPT-J model)"),HVo=l(),R1=a("li"),C2e=a("strong"),JVo=o("marian"),YVo=o(" \u2014 "),iQ=a("a"),KVo=o("MarianForCausalLM"),ZVo=o(" (Marian model)"),eXo=l(),P1=a("li"),w2e=a("strong"),oXo=o("mbart"),rXo=o(" \u2014 "),dQ=a("a"),tXo=o("MBartForCausalLM"),aXo=o(" (mBART model)"),nXo=l(),B1=a("li"),A2e=a("strong"),sXo=o("megatron-bert"),lXo=o(" \u2014 "),cQ=a("a"),iXo=o("MegatronBertForCausalLM"),dXo=o(" (Megatron-BERT model)"),cXo=l(),I1=a("li"),L2e=a("strong"),mXo=o("mvp"),fXo=o(" \u2014 "),mQ=a("a"),gXo=o("MvpForCausalLM"),hXo=o(" (MVP model)"),uXo=l(),N1=a("li"),y2e=a("strong"),pXo=o("openai-gpt"),_Xo=o(" \u2014 "),fQ=a("a"),bXo=o("OpenAIGPTLMHeadModel"),vXo=o(" (OpenAI GPT model)"),FXo=l(),q1=a("li"),x2e=a("strong"),TXo=o("opt"),MXo=o(" \u2014 "),gQ=a("a"),EXo=o("OPTForCausalLM"),CXo=o(" (OPT model)"),wXo=l(),j1=a("li"),$2e=a("strong"),AXo=o("pegasus"),LXo=o(" \u2014 "),hQ=a("a"),yXo=o("PegasusForCausalLM"),xXo=o(" (Pegasus model)"),$Xo=l(),D1=a("li"),k2e=a("strong"),kXo=o("plbart"),SXo=o(" \u2014 "),uQ=a("a"),RXo=o("PLBartForCausalLM"),PXo=o(" (PLBart model)"),BXo=l(),G1=a("li"),S2e=a("strong"),IXo=o("prophetnet"),NXo=o(" \u2014 "),pQ=a("a"),qXo=o("ProphetNetForCausalLM"),jXo=o(" (ProphetNet model)"),DXo=l(),O1=a("li"),R2e=a("strong"),GXo=o("qdqbert"),OXo=o(" \u2014 "),_Q=a("a"),VXo=o("QDQBertLMHeadModel"),XXo=o(" (QDQBert model)"),zXo=l(),V1=a("li"),P2e=a("strong"),QXo=o("reformer"),WXo=o(" \u2014 "),bQ=a("a"),UXo=o("ReformerModelWithLMHead"),HXo=o(" (Reformer model)"),JXo=l(),X1=a("li"),B2e=a("strong"),YXo=o("rembert"),KXo=o(" \u2014 "),vQ=a("a"),ZXo=o("RemBertForCausalLM"),ezo=o(" (RemBERT model)"),ozo=l(),z1=a("li"),I2e=a("strong"),rzo=o("roberta"),tzo=o(" \u2014 "),FQ=a("a"),azo=o("RobertaForCausalLM"),nzo=o(" (RoBERTa model)"),szo=l(),Q1=a("li"),N2e=a("strong"),lzo=o("roformer"),izo=o(" \u2014 "),TQ=a("a"),dzo=o("RoFormerForCausalLM"),czo=o(" (RoFormer model)"),mzo=l(),W1=a("li"),q2e=a("strong"),fzo=o("speech_to_text_2"),gzo=o(" \u2014 "),MQ=a("a"),hzo=o("Speech2Text2ForCausalLM"),uzo=o(" (Speech2Text2 model)"),pzo=l(),U1=a("li"),j2e=a("strong"),_zo=o("transfo-xl"),bzo=o(" \u2014 "),EQ=a("a"),vzo=o("TransfoXLLMHeadModel"),Fzo=o(" (Transformer-XL model)"),Tzo=l(),H1=a("li"),D2e=a("strong"),Mzo=o("trocr"),Ezo=o(" \u2014 "),CQ=a("a"),Czo=o("TrOCRForCausalLM"),wzo=o(" (TrOCR model)"),Azo=l(),J1=a("li"),G2e=a("strong"),Lzo=o("xglm"),yzo=o(" \u2014 "),wQ=a("a"),xzo=o("XGLMForCausalLM"),$zo=o(" (XGLM model)"),kzo=l(),Y1=a("li"),O2e=a("strong"),Szo=o("xlm"),Rzo=o(" \u2014 "),AQ=a("a"),Pzo=o("XLMWithLMHeadModel"),Bzo=o(" (XLM model)"),Izo=l(),K1=a("li"),V2e=a("strong"),Nzo=o("xlm-prophetnet"),qzo=o(" \u2014 "),LQ=a("a"),jzo=o("XLMProphetNetForCausalLM"),Dzo=o(" (XLM-ProphetNet model)"),Gzo=l(),Z1=a("li"),X2e=a("strong"),Ozo=o("xlm-roberta"),Vzo=o(" \u2014 "),yQ=a("a"),Xzo=o("XLMRobertaForCausalLM"),zzo=o(" (XLM-RoBERTa model)"),Qzo=l(),ev=a("li"),z2e=a("strong"),Wzo=o("xlm-roberta-xl"),Uzo=o(" \u2014 "),xQ=a("a"),Hzo=o("XLMRobertaXLForCausalLM"),Jzo=o(" (XLM-RoBERTa-XL model)"),Yzo=l(),ov=a("li"),Q2e=a("strong"),Kzo=o("xlnet"),Zzo=o(" \u2014 "),$Q=a("a"),eQo=o("XLNetLMHeadModel"),oQo=o(" (XLNet model)"),rQo=l(),rv=a("p"),tQo=o("The model is set in evaluation mode by default using "),W2e=a("code"),aQo=o("model.eval()"),nQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),sQo=o("model.train()"),lQo=l(),F(tv.$$.fragment),zKe=l(),Ad=a("h2"),av=a("a"),H2e=a("span"),F(Cx.$$.fragment),iQo=l(),J2e=a("span"),dQo=o("AutoModelForMaskedLM"),QKe=l(),No=a("div"),F(wx.$$.fragment),cQo=l(),Ld=a("p"),mQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=a("a"),fQo=o("from_pretrained()"),gQo=o(" class method or the "),SQ=a("a"),hQo=o("from_config()"),uQo=o(` class
method.`),pQo=l(),Ax=a("p"),_Qo=o("This class cannot be instantiated directly using "),Y2e=a("code"),bQo=o("__init__()"),vQo=o(" (throws an error)."),FQo=l(),Ft=a("div"),F(Lx.$$.fragment),TQo=l(),K2e=a("p"),MQo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EQo=l(),yd=a("p"),CQo=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),wQo=o("not"),AQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),LQo=o("from_pretrained()"),yQo=o(" to load the model weights."),xQo=l(),F(nv.$$.fragment),$Qo=l(),ro=a("div"),F(yx.$$.fragment),kQo=l(),e1e=a("p"),SQo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RQo=l(),Za=a("p"),PQo=o("The model class to instantiate is selected based on the "),o1e=a("code"),BQo=o("model_type"),IQo=o(` property of the config object (either
passed as an argument or loaded from `),r1e=a("code"),NQo=o("pretrained_model_name_or_path"),qQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=a("code"),jQo=o("pretrained_model_name_or_path"),DQo=o(":"),GQo=l(),H=a("ul"),sv=a("li"),a1e=a("strong"),OQo=o("albert"),VQo=o(" \u2014 "),PQ=a("a"),XQo=o("AlbertForMaskedLM"),zQo=o(" (ALBERT model)"),QQo=l(),lv=a("li"),n1e=a("strong"),WQo=o("bart"),UQo=o(" \u2014 "),BQ=a("a"),HQo=o("BartForConditionalGeneration"),JQo=o(" (BART model)"),YQo=l(),iv=a("li"),s1e=a("strong"),KQo=o("bert"),ZQo=o(" \u2014 "),IQ=a("a"),eWo=o("BertForMaskedLM"),oWo=o(" (BERT model)"),rWo=l(),dv=a("li"),l1e=a("strong"),tWo=o("big_bird"),aWo=o(" \u2014 "),NQ=a("a"),nWo=o("BigBirdForMaskedLM"),sWo=o(" (BigBird model)"),lWo=l(),cv=a("li"),i1e=a("strong"),iWo=o("camembert"),dWo=o(" \u2014 "),qQ=a("a"),cWo=o("CamembertForMaskedLM"),mWo=o(" (CamemBERT model)"),fWo=l(),mv=a("li"),d1e=a("strong"),gWo=o("convbert"),hWo=o(" \u2014 "),jQ=a("a"),uWo=o("ConvBertForMaskedLM"),pWo=o(" (ConvBERT model)"),_Wo=l(),fv=a("li"),c1e=a("strong"),bWo=o("data2vec-text"),vWo=o(" \u2014 "),DQ=a("a"),FWo=o("Data2VecTextForMaskedLM"),TWo=o(" (Data2VecText model)"),MWo=l(),gv=a("li"),m1e=a("strong"),EWo=o("deberta"),CWo=o(" \u2014 "),GQ=a("a"),wWo=o("DebertaForMaskedLM"),AWo=o(" (DeBERTa model)"),LWo=l(),hv=a("li"),f1e=a("strong"),yWo=o("deberta-v2"),xWo=o(" \u2014 "),OQ=a("a"),$Wo=o("DebertaV2ForMaskedLM"),kWo=o(" (DeBERTa-v2 model)"),SWo=l(),uv=a("li"),g1e=a("strong"),RWo=o("distilbert"),PWo=o(" \u2014 "),VQ=a("a"),BWo=o("DistilBertForMaskedLM"),IWo=o(" (DistilBERT model)"),NWo=l(),pv=a("li"),h1e=a("strong"),qWo=o("electra"),jWo=o(" \u2014 "),XQ=a("a"),DWo=o("ElectraForMaskedLM"),GWo=o(" (ELECTRA model)"),OWo=l(),_v=a("li"),u1e=a("strong"),VWo=o("ernie"),XWo=o(" \u2014 "),zQ=a("a"),zWo=o("ErnieForMaskedLM"),QWo=o(" (ERNIE model)"),WWo=l(),bv=a("li"),p1e=a("strong"),UWo=o("flaubert"),HWo=o(" \u2014 "),QQ=a("a"),JWo=o("FlaubertWithLMHeadModel"),YWo=o(" (FlauBERT model)"),KWo=l(),vv=a("li"),_1e=a("strong"),ZWo=o("fnet"),eUo=o(" \u2014 "),WQ=a("a"),oUo=o("FNetForMaskedLM"),rUo=o(" (FNet model)"),tUo=l(),Fv=a("li"),b1e=a("strong"),aUo=o("funnel"),nUo=o(" \u2014 "),UQ=a("a"),sUo=o("FunnelForMaskedLM"),lUo=o(" (Funnel Transformer model)"),iUo=l(),Tv=a("li"),v1e=a("strong"),dUo=o("ibert"),cUo=o(" \u2014 "),HQ=a("a"),mUo=o("IBertForMaskedLM"),fUo=o(" (I-BERT model)"),gUo=l(),Mv=a("li"),F1e=a("strong"),hUo=o("layoutlm"),uUo=o(" \u2014 "),JQ=a("a"),pUo=o("LayoutLMForMaskedLM"),_Uo=o(" (LayoutLM model)"),bUo=l(),Ev=a("li"),T1e=a("strong"),vUo=o("longformer"),FUo=o(" \u2014 "),YQ=a("a"),TUo=o("LongformerForMaskedLM"),MUo=o(" (Longformer model)"),EUo=l(),Cv=a("li"),M1e=a("strong"),CUo=o("luke"),wUo=o(" \u2014 "),KQ=a("a"),AUo=o("LukeForMaskedLM"),LUo=o(" (LUKE model)"),yUo=l(),wv=a("li"),E1e=a("strong"),xUo=o("mbart"),$Uo=o(" \u2014 "),ZQ=a("a"),kUo=o("MBartForConditionalGeneration"),SUo=o(" (mBART model)"),RUo=l(),Av=a("li"),C1e=a("strong"),PUo=o("megatron-bert"),BUo=o(" \u2014 "),eW=a("a"),IUo=o("MegatronBertForMaskedLM"),NUo=o(" (Megatron-BERT model)"),qUo=l(),Lv=a("li"),w1e=a("strong"),jUo=o("mobilebert"),DUo=o(" \u2014 "),oW=a("a"),GUo=o("MobileBertForMaskedLM"),OUo=o(" (MobileBERT model)"),VUo=l(),yv=a("li"),A1e=a("strong"),XUo=o("mpnet"),zUo=o(" \u2014 "),rW=a("a"),QUo=o("MPNetForMaskedLM"),WUo=o(" (MPNet model)"),UUo=l(),xv=a("li"),L1e=a("strong"),HUo=o("mvp"),JUo=o(" \u2014 "),tW=a("a"),YUo=o("MvpForConditionalGeneration"),KUo=o(" (MVP model)"),ZUo=l(),$v=a("li"),y1e=a("strong"),eHo=o("nezha"),oHo=o(" \u2014 "),aW=a("a"),rHo=o("NezhaForMaskedLM"),tHo=o(" (Nezha model)"),aHo=l(),kv=a("li"),x1e=a("strong"),nHo=o("nystromformer"),sHo=o(" \u2014 "),nW=a("a"),lHo=o("NystromformerForMaskedLM"),iHo=o(" (Nystr\xF6mformer model)"),dHo=l(),Sv=a("li"),$1e=a("strong"),cHo=o("perceiver"),mHo=o(" \u2014 "),sW=a("a"),fHo=o("PerceiverForMaskedLM"),gHo=o(" (Perceiver model)"),hHo=l(),Rv=a("li"),k1e=a("strong"),uHo=o("qdqbert"),pHo=o(" \u2014 "),lW=a("a"),_Ho=o("QDQBertForMaskedLM"),bHo=o(" (QDQBert model)"),vHo=l(),Pv=a("li"),S1e=a("strong"),FHo=o("reformer"),THo=o(" \u2014 "),iW=a("a"),MHo=o("ReformerForMaskedLM"),EHo=o(" (Reformer model)"),CHo=l(),Bv=a("li"),R1e=a("strong"),wHo=o("rembert"),AHo=o(" \u2014 "),dW=a("a"),LHo=o("RemBertForMaskedLM"),yHo=o(" (RemBERT model)"),xHo=l(),Iv=a("li"),P1e=a("strong"),$Ho=o("roberta"),kHo=o(" \u2014 "),cW=a("a"),SHo=o("RobertaForMaskedLM"),RHo=o(" (RoBERTa model)"),PHo=l(),Nv=a("li"),B1e=a("strong"),BHo=o("roformer"),IHo=o(" \u2014 "),mW=a("a"),NHo=o("RoFormerForMaskedLM"),qHo=o(" (RoFormer model)"),jHo=l(),qv=a("li"),I1e=a("strong"),DHo=o("squeezebert"),GHo=o(" \u2014 "),fW=a("a"),OHo=o("SqueezeBertForMaskedLM"),VHo=o(" (SqueezeBERT model)"),XHo=l(),jv=a("li"),N1e=a("strong"),zHo=o("tapas"),QHo=o(" \u2014 "),gW=a("a"),WHo=o("TapasForMaskedLM"),UHo=o(" (TAPAS model)"),HHo=l(),Dv=a("li"),q1e=a("strong"),JHo=o("wav2vec2"),YHo=o(" \u2014 "),j1e=a("code"),KHo=o("Wav2Vec2ForMaskedLM"),ZHo=o(" (Wav2Vec2 model)"),eJo=l(),Gv=a("li"),D1e=a("strong"),oJo=o("xlm"),rJo=o(" \u2014 "),hW=a("a"),tJo=o("XLMWithLMHeadModel"),aJo=o(" (XLM model)"),nJo=l(),Ov=a("li"),G1e=a("strong"),sJo=o("xlm-roberta"),lJo=o(" \u2014 "),uW=a("a"),iJo=o("XLMRobertaForMaskedLM"),dJo=o(" (XLM-RoBERTa model)"),cJo=l(),Vv=a("li"),O1e=a("strong"),mJo=o("xlm-roberta-xl"),fJo=o(" \u2014 "),pW=a("a"),gJo=o("XLMRobertaXLForMaskedLM"),hJo=o(" (XLM-RoBERTa-XL model)"),uJo=l(),Xv=a("li"),V1e=a("strong"),pJo=o("yoso"),_Jo=o(" \u2014 "),_W=a("a"),bJo=o("YosoForMaskedLM"),vJo=o(" (YOSO model)"),FJo=l(),zv=a("p"),TJo=o("The model is set in evaluation mode by default using "),X1e=a("code"),MJo=o("model.eval()"),EJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),CJo=o("model.train()"),wJo=l(),F(Qv.$$.fragment),WKe=l(),xd=a("h2"),Wv=a("a"),Q1e=a("span"),F(xx.$$.fragment),AJo=l(),W1e=a("span"),LJo=o("AutoModelForSeq2SeqLM"),UKe=l(),qo=a("div"),F($x.$$.fragment),yJo=l(),$d=a("p"),xJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bW=a("a"),$Jo=o("from_pretrained()"),kJo=o(" class method or the "),vW=a("a"),SJo=o("from_config()"),RJo=o(` class
method.`),PJo=l(),kx=a("p"),BJo=o("This class cannot be instantiated directly using "),U1e=a("code"),IJo=o("__init__()"),NJo=o(" (throws an error)."),qJo=l(),Tt=a("div"),F(Sx.$$.fragment),jJo=l(),H1e=a("p"),DJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),GJo=l(),kd=a("p"),OJo=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),VJo=o("not"),XJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),zJo=o("from_pretrained()"),QJo=o(" to load the model weights."),WJo=l(),F(Uv.$$.fragment),UJo=l(),to=a("div"),F(Rx.$$.fragment),HJo=l(),Y1e=a("p"),JJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YJo=l(),en=a("p"),KJo=o("The model class to instantiate is selected based on the "),K1e=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),me=a("ul"),Hv=a("li"),ove=a("strong"),sYo=o("bart"),lYo=o(" \u2014 "),TW=a("a"),iYo=o("BartForConditionalGeneration"),dYo=o(" (BART model)"),cYo=l(),Jv=a("li"),rve=a("strong"),mYo=o("bigbird_pegasus"),fYo=o(" \u2014 "),MW=a("a"),gYo=o("BigBirdPegasusForConditionalGeneration"),hYo=o(" (BigBird-Pegasus model)"),uYo=l(),Yv=a("li"),tve=a("strong"),pYo=o("blenderbot"),_Yo=o(" \u2014 "),EW=a("a"),bYo=o("BlenderbotForConditionalGeneration"),vYo=o(" (Blenderbot model)"),FYo=l(),Kv=a("li"),ave=a("strong"),TYo=o("blenderbot-small"),MYo=o(" \u2014 "),CW=a("a"),EYo=o("BlenderbotSmallForConditionalGeneration"),CYo=o(" (BlenderbotSmall model)"),wYo=l(),Zv=a("li"),nve=a("strong"),AYo=o("encoder-decoder"),LYo=o(" \u2014 "),wW=a("a"),yYo=o("EncoderDecoderModel"),xYo=o(" (Encoder decoder model)"),$Yo=l(),eF=a("li"),sve=a("strong"),kYo=o("fsmt"),SYo=o(" \u2014 "),AW=a("a"),RYo=o("FSMTForConditionalGeneration"),PYo=o(" (FairSeq Machine-Translation model)"),BYo=l(),oF=a("li"),lve=a("strong"),IYo=o("led"),NYo=o(" \u2014 "),LW=a("a"),qYo=o("LEDForConditionalGeneration"),jYo=o(" (LED model)"),DYo=l(),rF=a("li"),ive=a("strong"),GYo=o("longt5"),OYo=o(" \u2014 "),yW=a("a"),VYo=o("LongT5ForConditionalGeneration"),XYo=o(" (LongT5 model)"),zYo=l(),tF=a("li"),dve=a("strong"),QYo=o("m2m_100"),WYo=o(" \u2014 "),xW=a("a"),UYo=o("M2M100ForConditionalGeneration"),HYo=o(" (M2M100 model)"),JYo=l(),aF=a("li"),cve=a("strong"),YYo=o("marian"),KYo=o(" \u2014 "),$W=a("a"),ZYo=o("MarianMTModel"),eKo=o(" (Marian model)"),oKo=l(),nF=a("li"),mve=a("strong"),rKo=o("mbart"),tKo=o(" \u2014 "),kW=a("a"),aKo=o("MBartForConditionalGeneration"),nKo=o(" (mBART model)"),sKo=l(),sF=a("li"),fve=a("strong"),lKo=o("mt5"),iKo=o(" \u2014 "),SW=a("a"),dKo=o("MT5ForConditionalGeneration"),cKo=o(" (MT5 model)"),mKo=l(),lF=a("li"),gve=a("strong"),fKo=o("mvp"),gKo=o(" \u2014 "),RW=a("a"),hKo=o("MvpForConditionalGeneration"),uKo=o(" (MVP model)"),pKo=l(),iF=a("li"),hve=a("strong"),_Ko=o("nllb"),bKo=o(" \u2014 "),PW=a("a"),vKo=o("M2M100ForConditionalGeneration"),FKo=o(" (NLLB model)"),TKo=l(),dF=a("li"),uve=a("strong"),MKo=o("pegasus"),EKo=o(" \u2014 "),BW=a("a"),CKo=o("PegasusForConditionalGeneration"),wKo=o(" (Pegasus model)"),AKo=l(),cF=a("li"),pve=a("strong"),LKo=o("pegasus_x"),yKo=o(" \u2014 "),IW=a("a"),xKo=o("PegasusXForConditionalGeneration"),$Ko=o(" (PEGASUS-X model)"),kKo=l(),mF=a("li"),_ve=a("strong"),SKo=o("plbart"),RKo=o(" \u2014 "),NW=a("a"),PKo=o("PLBartForConditionalGeneration"),BKo=o(" (PLBart model)"),IKo=l(),fF=a("li"),bve=a("strong"),NKo=o("prophetnet"),qKo=o(" \u2014 "),qW=a("a"),jKo=o("ProphetNetForConditionalGeneration"),DKo=o(" (ProphetNet model)"),GKo=l(),gF=a("li"),vve=a("strong"),OKo=o("t5"),VKo=o(" \u2014 "),jW=a("a"),XKo=o("T5ForConditionalGeneration"),zKo=o(" (T5 model)"),QKo=l(),hF=a("li"),Fve=a("strong"),WKo=o("xlm-prophetnet"),UKo=o(" \u2014 "),DW=a("a"),HKo=o("XLMProphetNetForConditionalGeneration"),JKo=o(" (XLM-ProphetNet model)"),YKo=l(),uF=a("p"),KKo=o("The model is set in evaluation mode by default using "),Tve=a("code"),ZKo=o("model.eval()"),eZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=a("code"),oZo=o("model.train()"),rZo=l(),F(pF.$$.fragment),HKe=l(),Sd=a("h2"),_F=a("a"),Eve=a("span"),F(Px.$$.fragment),tZo=l(),Cve=a("span"),aZo=o("AutoModelForSequenceClassification"),JKe=l(),jo=a("div"),F(Bx.$$.fragment),nZo=l(),Rd=a("p"),sZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GW=a("a"),lZo=o("from_pretrained()"),iZo=o(" class method or the "),OW=a("a"),dZo=o("from_config()"),cZo=o(` class
method.`),mZo=l(),Ix=a("p"),fZo=o("This class cannot be instantiated directly using "),wve=a("code"),gZo=o("__init__()"),hZo=o(" (throws an error)."),uZo=l(),Mt=a("div"),F(Nx.$$.fragment),pZo=l(),Ave=a("p"),_Zo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bZo=l(),Pd=a("p"),vZo=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),FZo=o("not"),TZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),MZo=o("from_pretrained()"),EZo=o(" to load the model weights."),CZo=l(),F(bF.$$.fragment),wZo=l(),ao=a("div"),F(qx.$$.fragment),AZo=l(),yve=a("p"),LZo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yZo=l(),on=a("p"),xZo=o("The model class to instantiate is selected based on the "),xve=a("code"),$Zo=o("model_type"),kZo=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),SZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),PZo=o("pretrained_model_name_or_path"),BZo=o(":"),IZo=l(),q=a("ul"),vF=a("li"),Sve=a("strong"),NZo=o("albert"),qZo=o(" \u2014 "),XW=a("a"),jZo=o("AlbertForSequenceClassification"),DZo=o(" (ALBERT model)"),GZo=l(),FF=a("li"),Rve=a("strong"),OZo=o("bart"),VZo=o(" \u2014 "),zW=a("a"),XZo=o("BartForSequenceClassification"),zZo=o(" (BART model)"),QZo=l(),TF=a("li"),Pve=a("strong"),WZo=o("bert"),UZo=o(" \u2014 "),QW=a("a"),HZo=o("BertForSequenceClassification"),JZo=o(" (BERT model)"),YZo=l(),MF=a("li"),Bve=a("strong"),KZo=o("big_bird"),ZZo=o(" \u2014 "),WW=a("a"),eer=o("BigBirdForSequenceClassification"),oer=o(" (BigBird model)"),rer=l(),EF=a("li"),Ive=a("strong"),ter=o("bigbird_pegasus"),aer=o(" \u2014 "),UW=a("a"),ner=o("BigBirdPegasusForSequenceClassification"),ser=o(" (BigBird-Pegasus model)"),ler=l(),CF=a("li"),Nve=a("strong"),ier=o("bloom"),der=o(" \u2014 "),HW=a("a"),cer=o("BloomForSequenceClassification"),mer=o(" (BLOOM model)"),fer=l(),wF=a("li"),qve=a("strong"),ger=o("camembert"),her=o(" \u2014 "),JW=a("a"),uer=o("CamembertForSequenceClassification"),per=o(" (CamemBERT model)"),_er=l(),AF=a("li"),jve=a("strong"),ber=o("canine"),ver=o(" \u2014 "),YW=a("a"),Fer=o("CanineForSequenceClassification"),Ter=o(" (CANINE model)"),Mer=l(),LF=a("li"),Dve=a("strong"),Eer=o("convbert"),Cer=o(" \u2014 "),KW=a("a"),wer=o("ConvBertForSequenceClassification"),Aer=o(" (ConvBERT model)"),Ler=l(),yF=a("li"),Gve=a("strong"),yer=o("ctrl"),xer=o(" \u2014 "),ZW=a("a"),$er=o("CTRLForSequenceClassification"),ker=o(" (CTRL model)"),Ser=l(),xF=a("li"),Ove=a("strong"),Rer=o("data2vec-text"),Per=o(" \u2014 "),eU=a("a"),Ber=o("Data2VecTextForSequenceClassification"),Ier=o(" (Data2VecText model)"),Ner=l(),$F=a("li"),Vve=a("strong"),qer=o("deberta"),jer=o(" \u2014 "),oU=a("a"),Der=o("DebertaForSequenceClassification"),Ger=o(" (DeBERTa model)"),Oer=l(),kF=a("li"),Xve=a("strong"),Ver=o("deberta-v2"),Xer=o(" \u2014 "),rU=a("a"),zer=o("DebertaV2ForSequenceClassification"),Qer=o(" (DeBERTa-v2 model)"),Wer=l(),SF=a("li"),zve=a("strong"),Uer=o("distilbert"),Her=o(" \u2014 "),tU=a("a"),Jer=o("DistilBertForSequenceClassification"),Yer=o(" (DistilBERT model)"),Ker=l(),RF=a("li"),Qve=a("strong"),Zer=o("electra"),eor=o(" \u2014 "),aU=a("a"),oor=o("ElectraForSequenceClassification"),ror=o(" (ELECTRA model)"),tor=l(),PF=a("li"),Wve=a("strong"),aor=o("ernie"),nor=o(" \u2014 "),nU=a("a"),sor=o("ErnieForSequenceClassification"),lor=o(" (ERNIE model)"),ior=l(),BF=a("li"),Uve=a("strong"),dor=o("flaubert"),cor=o(" \u2014 "),sU=a("a"),mor=o("FlaubertForSequenceClassification"),gor=o(" (FlauBERT model)"),hor=l(),IF=a("li"),Hve=a("strong"),uor=o("fnet"),por=o(" \u2014 "),lU=a("a"),_or=o("FNetForSequenceClassification"),bor=o(" (FNet model)"),vor=l(),NF=a("li"),Jve=a("strong"),For=o("funnel"),Tor=o(" \u2014 "),iU=a("a"),Mor=o("FunnelForSequenceClassification"),Eor=o(" (Funnel Transformer model)"),Cor=l(),qF=a("li"),Yve=a("strong"),wor=o("gpt2"),Aor=o(" \u2014 "),dU=a("a"),Lor=o("GPT2ForSequenceClassification"),yor=o(" (OpenAI GPT-2 model)"),xor=l(),jF=a("li"),Kve=a("strong"),$or=o("gpt_neo"),kor=o(" \u2014 "),cU=a("a"),Sor=o("GPTNeoForSequenceClassification"),Ror=o(" (GPT Neo model)"),Por=l(),DF=a("li"),Zve=a("strong"),Bor=o("gptj"),Ior=o(" \u2014 "),mU=a("a"),Nor=o("GPTJForSequenceClassification"),qor=o(" (GPT-J model)"),jor=l(),GF=a("li"),eFe=a("strong"),Dor=o("ibert"),Gor=o(" \u2014 "),fU=a("a"),Oor=o("IBertForSequenceClassification"),Vor=o(" (I-BERT model)"),Xor=l(),OF=a("li"),oFe=a("strong"),zor=o("layoutlm"),Qor=o(" \u2014 "),gU=a("a"),Wor=o("LayoutLMForSequenceClassification"),Uor=o(" (LayoutLM model)"),Hor=l(),VF=a("li"),rFe=a("strong"),Jor=o("layoutlmv2"),Yor=o(" \u2014 "),hU=a("a"),Kor=o("LayoutLMv2ForSequenceClassification"),Zor=o(" (LayoutLMv2 model)"),err=l(),XF=a("li"),tFe=a("strong"),orr=o("layoutlmv3"),rrr=o(" \u2014 "),uU=a("a"),trr=o("LayoutLMv3ForSequenceClassification"),arr=o(" (LayoutLMv3 model)"),nrr=l(),zF=a("li"),aFe=a("strong"),srr=o("led"),lrr=o(" \u2014 "),pU=a("a"),irr=o("LEDForSequenceClassification"),drr=o(" (LED model)"),crr=l(),QF=a("li"),nFe=a("strong"),mrr=o("longformer"),frr=o(" \u2014 "),_U=a("a"),grr=o("LongformerForSequenceClassification"),hrr=o(" (Longformer model)"),urr=l(),WF=a("li"),sFe=a("strong"),prr=o("luke"),_rr=o(" \u2014 "),bU=a("a"),brr=o("LukeForSequenceClassification"),vrr=o(" (LUKE model)"),Frr=l(),UF=a("li"),lFe=a("strong"),Trr=o("mbart"),Mrr=o(" \u2014 "),vU=a("a"),Err=o("MBartForSequenceClassification"),Crr=o(" (mBART model)"),wrr=l(),HF=a("li"),iFe=a("strong"),Arr=o("megatron-bert"),Lrr=o(" \u2014 "),FU=a("a"),yrr=o("MegatronBertForSequenceClassification"),xrr=o(" (Megatron-BERT model)"),$rr=l(),JF=a("li"),dFe=a("strong"),krr=o("mobilebert"),Srr=o(" \u2014 "),TU=a("a"),Rrr=o("MobileBertForSequenceClassification"),Prr=o(" (MobileBERT model)"),Brr=l(),YF=a("li"),cFe=a("strong"),Irr=o("mpnet"),Nrr=o(" \u2014 "),MU=a("a"),qrr=o("MPNetForSequenceClassification"),jrr=o(" (MPNet model)"),Drr=l(),KF=a("li"),mFe=a("strong"),Grr=o("mvp"),Orr=o(" \u2014 "),EU=a("a"),Vrr=o("MvpForSequenceClassification"),Xrr=o(" (MVP model)"),zrr=l(),ZF=a("li"),fFe=a("strong"),Qrr=o("nezha"),Wrr=o(" \u2014 "),CU=a("a"),Urr=o("NezhaForSequenceClassification"),Hrr=o(" (Nezha model)"),Jrr=l(),eT=a("li"),gFe=a("strong"),Yrr=o("nystromformer"),Krr=o(" \u2014 "),wU=a("a"),Zrr=o("NystromformerForSequenceClassification"),etr=o(" (Nystr\xF6mformer model)"),otr=l(),oT=a("li"),hFe=a("strong"),rtr=o("openai-gpt"),ttr=o(" \u2014 "),AU=a("a"),atr=o("OpenAIGPTForSequenceClassification"),ntr=o(" (OpenAI GPT model)"),str=l(),rT=a("li"),uFe=a("strong"),ltr=o("opt"),itr=o(" \u2014 "),LU=a("a"),dtr=o("OPTForSequenceClassification"),ctr=o(" (OPT model)"),mtr=l(),tT=a("li"),pFe=a("strong"),ftr=o("perceiver"),gtr=o(" \u2014 "),yU=a("a"),htr=o("PerceiverForSequenceClassification"),utr=o(" (Perceiver model)"),ptr=l(),aT=a("li"),_Fe=a("strong"),_tr=o("plbart"),btr=o(" \u2014 "),xU=a("a"),vtr=o("PLBartForSequenceClassification"),Ftr=o(" (PLBart model)"),Ttr=l(),nT=a("li"),bFe=a("strong"),Mtr=o("qdqbert"),Etr=o(" \u2014 "),$U=a("a"),Ctr=o("QDQBertForSequenceClassification"),wtr=o(" (QDQBert model)"),Atr=l(),sT=a("li"),vFe=a("strong"),Ltr=o("reformer"),ytr=o(" \u2014 "),kU=a("a"),xtr=o("ReformerForSequenceClassification"),$tr=o(" (Reformer model)"),ktr=l(),lT=a("li"),FFe=a("strong"),Str=o("rembert"),Rtr=o(" \u2014 "),SU=a("a"),Ptr=o("RemBertForSequenceClassification"),Btr=o(" (RemBERT model)"),Itr=l(),iT=a("li"),TFe=a("strong"),Ntr=o("roberta"),qtr=o(" \u2014 "),RU=a("a"),jtr=o("RobertaForSequenceClassification"),Dtr=o(" (RoBERTa model)"),Gtr=l(),dT=a("li"),MFe=a("strong"),Otr=o("roformer"),Vtr=o(" \u2014 "),PU=a("a"),Xtr=o("RoFormerForSequenceClassification"),ztr=o(" (RoFormer model)"),Qtr=l(),cT=a("li"),EFe=a("strong"),Wtr=o("squeezebert"),Utr=o(" \u2014 "),BU=a("a"),Htr=o("SqueezeBertForSequenceClassification"),Jtr=o(" (SqueezeBERT model)"),Ytr=l(),mT=a("li"),CFe=a("strong"),Ktr=o("tapas"),Ztr=o(" \u2014 "),IU=a("a"),ear=o("TapasForSequenceClassification"),oar=o(" (TAPAS model)"),rar=l(),fT=a("li"),wFe=a("strong"),tar=o("transfo-xl"),aar=o(" \u2014 "),NU=a("a"),nar=o("TransfoXLForSequenceClassification"),sar=o(" (Transformer-XL model)"),lar=l(),gT=a("li"),AFe=a("strong"),iar=o("xlm"),dar=o(" \u2014 "),qU=a("a"),car=o("XLMForSequenceClassification"),mar=o(" (XLM model)"),far=l(),hT=a("li"),LFe=a("strong"),gar=o("xlm-roberta"),har=o(" \u2014 "),jU=a("a"),uar=o("XLMRobertaForSequenceClassification"),par=o(" (XLM-RoBERTa model)"),_ar=l(),uT=a("li"),yFe=a("strong"),bar=o("xlm-roberta-xl"),Far=o(" \u2014 "),DU=a("a"),Tar=o("XLMRobertaXLForSequenceClassification"),Mar=o(" (XLM-RoBERTa-XL model)"),Ear=l(),pT=a("li"),xFe=a("strong"),Car=o("xlnet"),war=o(" \u2014 "),GU=a("a"),Aar=o("XLNetForSequenceClassification"),Lar=o(" (XLNet model)"),yar=l(),_T=a("li"),$Fe=a("strong"),xar=o("yoso"),$ar=o(" \u2014 "),OU=a("a"),kar=o("YosoForSequenceClassification"),Sar=o(" (YOSO model)"),Rar=l(),bT=a("p"),Par=o("The model is set in evaluation mode by default using "),kFe=a("code"),Bar=o("model.eval()"),Iar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=a("code"),Nar=o("model.train()"),qar=l(),F(vT.$$.fragment),YKe=l(),Bd=a("h2"),FT=a("a"),RFe=a("span"),F(jx.$$.fragment),jar=l(),PFe=a("span"),Dar=o("AutoModelForMultipleChoice"),KKe=l(),Do=a("div"),F(Dx.$$.fragment),Gar=l(),Id=a("p"),Oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VU=a("a"),Var=o("from_pretrained()"),Xar=o(" class method or the "),XU=a("a"),zar=o("from_config()"),Qar=o(` class
method.`),War=l(),Gx=a("p"),Uar=o("This class cannot be instantiated directly using "),BFe=a("code"),Har=o("__init__()"),Jar=o(" (throws an error)."),Yar=l(),Et=a("div"),F(Ox.$$.fragment),Kar=l(),IFe=a("p"),Zar=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),enr=l(),Nd=a("p"),onr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),rnr=o("not"),tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=a("a"),anr=o("from_pretrained()"),nnr=o(" to load the model weights."),snr=l(),F(TT.$$.fragment),lnr=l(),no=a("div"),F(Vx.$$.fragment),inr=l(),qFe=a("p"),dnr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cnr=l(),rn=a("p"),mnr=o("The model class to instantiate is selected based on the "),jFe=a("code"),fnr=o("model_type"),gnr=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),hnr=o("pretrained_model_name_or_path"),unr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),pnr=o("pretrained_model_name_or_path"),_nr=o(":"),bnr=l(),Z=a("ul"),MT=a("li"),OFe=a("strong"),vnr=o("albert"),Fnr=o(" \u2014 "),QU=a("a"),Tnr=o("AlbertForMultipleChoice"),Mnr=o(" (ALBERT model)"),Enr=l(),ET=a("li"),VFe=a("strong"),Cnr=o("bert"),wnr=o(" \u2014 "),WU=a("a"),Anr=o("BertForMultipleChoice"),Lnr=o(" (BERT model)"),ynr=l(),CT=a("li"),XFe=a("strong"),xnr=o("big_bird"),$nr=o(" \u2014 "),UU=a("a"),knr=o("BigBirdForMultipleChoice"),Snr=o(" (BigBird model)"),Rnr=l(),wT=a("li"),zFe=a("strong"),Pnr=o("camembert"),Bnr=o(" \u2014 "),HU=a("a"),Inr=o("CamembertForMultipleChoice"),Nnr=o(" (CamemBERT model)"),qnr=l(),AT=a("li"),QFe=a("strong"),jnr=o("canine"),Dnr=o(" \u2014 "),JU=a("a"),Gnr=o("CanineForMultipleChoice"),Onr=o(" (CANINE model)"),Vnr=l(),LT=a("li"),WFe=a("strong"),Xnr=o("convbert"),znr=o(" \u2014 "),YU=a("a"),Qnr=o("ConvBertForMultipleChoice"),Wnr=o(" (ConvBERT model)"),Unr=l(),yT=a("li"),UFe=a("strong"),Hnr=o("data2vec-text"),Jnr=o(" \u2014 "),KU=a("a"),Ynr=o("Data2VecTextForMultipleChoice"),Knr=o(" (Data2VecText model)"),Znr=l(),xT=a("li"),HFe=a("strong"),esr=o("deberta-v2"),osr=o(" \u2014 "),ZU=a("a"),rsr=o("DebertaV2ForMultipleChoice"),tsr=o(" (DeBERTa-v2 model)"),asr=l(),$T=a("li"),JFe=a("strong"),nsr=o("distilbert"),ssr=o(" \u2014 "),eH=a("a"),lsr=o("DistilBertForMultipleChoice"),isr=o(" (DistilBERT model)"),dsr=l(),kT=a("li"),YFe=a("strong"),csr=o("electra"),msr=o(" \u2014 "),oH=a("a"),fsr=o("ElectraForMultipleChoice"),gsr=o(" (ELECTRA model)"),hsr=l(),ST=a("li"),KFe=a("strong"),usr=o("ernie"),psr=o(" \u2014 "),rH=a("a"),_sr=o("ErnieForMultipleChoice"),bsr=o(" (ERNIE model)"),vsr=l(),RT=a("li"),ZFe=a("strong"),Fsr=o("flaubert"),Tsr=o(" \u2014 "),tH=a("a"),Msr=o("FlaubertForMultipleChoice"),Esr=o(" (FlauBERT model)"),Csr=l(),PT=a("li"),eTe=a("strong"),wsr=o("fnet"),Asr=o(" \u2014 "),aH=a("a"),Lsr=o("FNetForMultipleChoice"),ysr=o(" (FNet model)"),xsr=l(),BT=a("li"),oTe=a("strong"),$sr=o("funnel"),ksr=o(" \u2014 "),nH=a("a"),Ssr=o("FunnelForMultipleChoice"),Rsr=o(" (Funnel Transformer model)"),Psr=l(),IT=a("li"),rTe=a("strong"),Bsr=o("ibert"),Isr=o(" \u2014 "),sH=a("a"),Nsr=o("IBertForMultipleChoice"),qsr=o(" (I-BERT model)"),jsr=l(),NT=a("li"),tTe=a("strong"),Dsr=o("longformer"),Gsr=o(" \u2014 "),lH=a("a"),Osr=o("LongformerForMultipleChoice"),Vsr=o(" (Longformer model)"),Xsr=l(),qT=a("li"),aTe=a("strong"),zsr=o("luke"),Qsr=o(" \u2014 "),iH=a("a"),Wsr=o("LukeForMultipleChoice"),Usr=o(" (LUKE model)"),Hsr=l(),jT=a("li"),nTe=a("strong"),Jsr=o("megatron-bert"),Ysr=o(" \u2014 "),dH=a("a"),Ksr=o("MegatronBertForMultipleChoice"),Zsr=o(" (Megatron-BERT model)"),elr=l(),DT=a("li"),sTe=a("strong"),olr=o("mobilebert"),rlr=o(" \u2014 "),cH=a("a"),tlr=o("MobileBertForMultipleChoice"),alr=o(" (MobileBERT model)"),nlr=l(),GT=a("li"),lTe=a("strong"),slr=o("mpnet"),llr=o(" \u2014 "),mH=a("a"),ilr=o("MPNetForMultipleChoice"),dlr=o(" (MPNet model)"),clr=l(),OT=a("li"),iTe=a("strong"),mlr=o("nezha"),flr=o(" \u2014 "),fH=a("a"),glr=o("NezhaForMultipleChoice"),hlr=o(" (Nezha model)"),ulr=l(),VT=a("li"),dTe=a("strong"),plr=o("nystromformer"),_lr=o(" \u2014 "),gH=a("a"),blr=o("NystromformerForMultipleChoice"),vlr=o(" (Nystr\xF6mformer model)"),Flr=l(),XT=a("li"),cTe=a("strong"),Tlr=o("qdqbert"),Mlr=o(" \u2014 "),hH=a("a"),Elr=o("QDQBertForMultipleChoice"),Clr=o(" (QDQBert model)"),wlr=l(),zT=a("li"),mTe=a("strong"),Alr=o("rembert"),Llr=o(" \u2014 "),uH=a("a"),ylr=o("RemBertForMultipleChoice"),xlr=o(" (RemBERT model)"),$lr=l(),QT=a("li"),fTe=a("strong"),klr=o("roberta"),Slr=o(" \u2014 "),pH=a("a"),Rlr=o("RobertaForMultipleChoice"),Plr=o(" (RoBERTa model)"),Blr=l(),WT=a("li"),gTe=a("strong"),Ilr=o("roformer"),Nlr=o(" \u2014 "),_H=a("a"),qlr=o("RoFormerForMultipleChoice"),jlr=o(" (RoFormer model)"),Dlr=l(),UT=a("li"),hTe=a("strong"),Glr=o("squeezebert"),Olr=o(" \u2014 "),bH=a("a"),Vlr=o("SqueezeBertForMultipleChoice"),Xlr=o(" (SqueezeBERT model)"),zlr=l(),HT=a("li"),uTe=a("strong"),Qlr=o("xlm"),Wlr=o(" \u2014 "),vH=a("a"),Ulr=o("XLMForMultipleChoice"),Hlr=o(" (XLM model)"),Jlr=l(),JT=a("li"),pTe=a("strong"),Ylr=o("xlm-roberta"),Klr=o(" \u2014 "),FH=a("a"),Zlr=o("XLMRobertaForMultipleChoice"),eir=o(" (XLM-RoBERTa model)"),oir=l(),YT=a("li"),_Te=a("strong"),rir=o("xlm-roberta-xl"),tir=o(" \u2014 "),TH=a("a"),air=o("XLMRobertaXLForMultipleChoice"),nir=o(" (XLM-RoBERTa-XL model)"),sir=l(),KT=a("li"),bTe=a("strong"),lir=o("xlnet"),iir=o(" \u2014 "),MH=a("a"),dir=o("XLNetForMultipleChoice"),cir=o(" (XLNet model)"),mir=l(),ZT=a("li"),vTe=a("strong"),fir=o("yoso"),gir=o(" \u2014 "),EH=a("a"),hir=o("YosoForMultipleChoice"),uir=o(" (YOSO model)"),pir=l(),eM=a("p"),_ir=o("The model is set in evaluation mode by default using "),FTe=a("code"),bir=o("model.eval()"),vir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=a("code"),Fir=o("model.train()"),Tir=l(),F(oM.$$.fragment),ZKe=l(),qd=a("h2"),rM=a("a"),MTe=a("span"),F(Xx.$$.fragment),Mir=l(),ETe=a("span"),Eir=o("AutoModelForNextSentencePrediction"),eZe=l(),Go=a("div"),F(zx.$$.fragment),Cir=l(),jd=a("p"),wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CH=a("a"),Air=o("from_pretrained()"),Lir=o(" class method or the "),wH=a("a"),yir=o("from_config()"),xir=o(` class
method.`),$ir=l(),Qx=a("p"),kir=o("This class cannot be instantiated directly using "),CTe=a("code"),Sir=o("__init__()"),Rir=o(" (throws an error)."),Pir=l(),Ct=a("div"),F(Wx.$$.fragment),Bir=l(),wTe=a("p"),Iir=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Nir=l(),Dd=a("p"),qir=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),jir=o("not"),Dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),Gir=o("from_pretrained()"),Oir=o(" to load the model weights."),Vir=l(),F(tM.$$.fragment),Xir=l(),so=a("div"),F(Ux.$$.fragment),zir=l(),LTe=a("p"),Qir=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wir=l(),tn=a("p"),Uir=o("The model class to instantiate is selected based on the "),yTe=a("code"),Hir=o("model_type"),Jir=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),Yir=o("pretrained_model_name_or_path"),Kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(":"),odr=l(),Ue=a("ul"),aM=a("li"),kTe=a("strong"),rdr=o("bert"),tdr=o(" \u2014 "),LH=a("a"),adr=o("BertForNextSentencePrediction"),ndr=o(" (BERT model)"),sdr=l(),nM=a("li"),STe=a("strong"),ldr=o("ernie"),idr=o(" \u2014 "),yH=a("a"),ddr=o("ErnieForNextSentencePrediction"),cdr=o(" (ERNIE model)"),mdr=l(),sM=a("li"),RTe=a("strong"),fdr=o("fnet"),gdr=o(" \u2014 "),xH=a("a"),hdr=o("FNetForNextSentencePrediction"),udr=o(" (FNet model)"),pdr=l(),lM=a("li"),PTe=a("strong"),_dr=o("megatron-bert"),bdr=o(" \u2014 "),$H=a("a"),vdr=o("MegatronBertForNextSentencePrediction"),Fdr=o(" (Megatron-BERT model)"),Tdr=l(),iM=a("li"),BTe=a("strong"),Mdr=o("mobilebert"),Edr=o(" \u2014 "),kH=a("a"),Cdr=o("MobileBertForNextSentencePrediction"),wdr=o(" (MobileBERT model)"),Adr=l(),dM=a("li"),ITe=a("strong"),Ldr=o("nezha"),ydr=o(" \u2014 "),SH=a("a"),xdr=o("NezhaForNextSentencePrediction"),$dr=o(" (Nezha model)"),kdr=l(),cM=a("li"),NTe=a("strong"),Sdr=o("qdqbert"),Rdr=o(" \u2014 "),RH=a("a"),Pdr=o("QDQBertForNextSentencePrediction"),Bdr=o(" (QDQBert model)"),Idr=l(),mM=a("p"),Ndr=o("The model is set in evaluation mode by default using "),qTe=a("code"),qdr=o("model.eval()"),jdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jTe=a("code"),Ddr=o("model.train()"),Gdr=l(),F(fM.$$.fragment),oZe=l(),Gd=a("h2"),gM=a("a"),DTe=a("span"),F(Hx.$$.fragment),Odr=l(),GTe=a("span"),Vdr=o("AutoModelForTokenClassification"),rZe=l(),Oo=a("div"),F(Jx.$$.fragment),Xdr=l(),Od=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PH=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),BH=a("a"),Udr=o("from_config()"),Hdr=o(` class
method.`),Jdr=l(),Yx=a("p"),Ydr=o("This class cannot be instantiated directly using "),OTe=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),wt=a("div"),F(Kx.$$.fragment),ocr=l(),VTe=a("p"),rcr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tcr=l(),Vd=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),F(hM.$$.fragment),ccr=l(),lo=a("div"),F(Zx.$$.fragment),mcr=l(),zTe=a("p"),fcr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gcr=l(),an=a("p"),hcr=o("The model class to instantiate is selected based on the "),QTe=a("code"),ucr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),_cr=o("pretrained_model_name_or_path"),bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(":"),Tcr=l(),J=a("ul"),uM=a("li"),HTe=a("strong"),Mcr=o("albert"),Ecr=o(" \u2014 "),NH=a("a"),Ccr=o("AlbertForTokenClassification"),wcr=o(" (ALBERT model)"),Acr=l(),pM=a("li"),JTe=a("strong"),Lcr=o("bert"),ycr=o(" \u2014 "),qH=a("a"),xcr=o("BertForTokenClassification"),$cr=o(" (BERT model)"),kcr=l(),_M=a("li"),YTe=a("strong"),Scr=o("big_bird"),Rcr=o(" \u2014 "),jH=a("a"),Pcr=o("BigBirdForTokenClassification"),Bcr=o(" (BigBird model)"),Icr=l(),bM=a("li"),KTe=a("strong"),Ncr=o("bloom"),qcr=o(" \u2014 "),DH=a("a"),jcr=o("BloomForTokenClassification"),Dcr=o(" (BLOOM model)"),Gcr=l(),vM=a("li"),ZTe=a("strong"),Ocr=o("camembert"),Vcr=o(" \u2014 "),GH=a("a"),Xcr=o("CamembertForTokenClassification"),zcr=o(" (CamemBERT model)"),Qcr=l(),FM=a("li"),eMe=a("strong"),Wcr=o("canine"),Ucr=o(" \u2014 "),OH=a("a"),Hcr=o("CanineForTokenClassification"),Jcr=o(" (CANINE model)"),Ycr=l(),TM=a("li"),oMe=a("strong"),Kcr=o("convbert"),Zcr=o(" \u2014 "),VH=a("a"),emr=o("ConvBertForTokenClassification"),omr=o(" (ConvBERT model)"),rmr=l(),MM=a("li"),rMe=a("strong"),tmr=o("data2vec-text"),amr=o(" \u2014 "),XH=a("a"),nmr=o("Data2VecTextForTokenClassification"),smr=o(" (Data2VecText model)"),lmr=l(),EM=a("li"),tMe=a("strong"),imr=o("deberta"),dmr=o(" \u2014 "),zH=a("a"),cmr=o("DebertaForTokenClassification"),mmr=o(" (DeBERTa model)"),fmr=l(),CM=a("li"),aMe=a("strong"),gmr=o("deberta-v2"),hmr=o(" \u2014 "),QH=a("a"),umr=o("DebertaV2ForTokenClassification"),pmr=o(" (DeBERTa-v2 model)"),_mr=l(),wM=a("li"),nMe=a("strong"),bmr=o("distilbert"),vmr=o(" \u2014 "),WH=a("a"),Fmr=o("DistilBertForTokenClassification"),Tmr=o(" (DistilBERT model)"),Mmr=l(),AM=a("li"),sMe=a("strong"),Emr=o("electra"),Cmr=o(" \u2014 "),UH=a("a"),wmr=o("ElectraForTokenClassification"),Amr=o(" (ELECTRA model)"),Lmr=l(),LM=a("li"),lMe=a("strong"),ymr=o("ernie"),xmr=o(" \u2014 "),HH=a("a"),$mr=o("ErnieForTokenClassification"),kmr=o(" (ERNIE model)"),Smr=l(),yM=a("li"),iMe=a("strong"),Rmr=o("flaubert"),Pmr=o(" \u2014 "),JH=a("a"),Bmr=o("FlaubertForTokenClassification"),Imr=o(" (FlauBERT model)"),Nmr=l(),xM=a("li"),dMe=a("strong"),qmr=o("fnet"),jmr=o(" \u2014 "),YH=a("a"),Dmr=o("FNetForTokenClassification"),Gmr=o(" (FNet model)"),Omr=l(),$M=a("li"),cMe=a("strong"),Vmr=o("funnel"),Xmr=o(" \u2014 "),KH=a("a"),zmr=o("FunnelForTokenClassification"),Qmr=o(" (Funnel Transformer model)"),Wmr=l(),kM=a("li"),mMe=a("strong"),Umr=o("gpt2"),Hmr=o(" \u2014 "),ZH=a("a"),Jmr=o("GPT2ForTokenClassification"),Ymr=o(" (OpenAI GPT-2 model)"),Kmr=l(),SM=a("li"),fMe=a("strong"),Zmr=o("ibert"),efr=o(" \u2014 "),eJ=a("a"),ofr=o("IBertForTokenClassification"),rfr=o(" (I-BERT model)"),tfr=l(),RM=a("li"),gMe=a("strong"),afr=o("layoutlm"),nfr=o(" \u2014 "),oJ=a("a"),sfr=o("LayoutLMForTokenClassification"),lfr=o(" (LayoutLM model)"),ifr=l(),PM=a("li"),hMe=a("strong"),dfr=o("layoutlmv2"),cfr=o(" \u2014 "),rJ=a("a"),mfr=o("LayoutLMv2ForTokenClassification"),ffr=o(" (LayoutLMv2 model)"),gfr=l(),BM=a("li"),uMe=a("strong"),hfr=o("layoutlmv3"),ufr=o(" \u2014 "),tJ=a("a"),pfr=o("LayoutLMv3ForTokenClassification"),_fr=o(" (LayoutLMv3 model)"),bfr=l(),IM=a("li"),pMe=a("strong"),vfr=o("longformer"),Ffr=o(" \u2014 "),aJ=a("a"),Tfr=o("LongformerForTokenClassification"),Mfr=o(" (Longformer model)"),Efr=l(),NM=a("li"),_Me=a("strong"),Cfr=o("luke"),wfr=o(" \u2014 "),nJ=a("a"),Afr=o("LukeForTokenClassification"),Lfr=o(" (LUKE model)"),yfr=l(),qM=a("li"),bMe=a("strong"),xfr=o("megatron-bert"),$fr=o(" \u2014 "),sJ=a("a"),kfr=o("MegatronBertForTokenClassification"),Sfr=o(" (Megatron-BERT model)"),Rfr=l(),jM=a("li"),vMe=a("strong"),Pfr=o("mobilebert"),Bfr=o(" \u2014 "),lJ=a("a"),Ifr=o("MobileBertForTokenClassification"),Nfr=o(" (MobileBERT model)"),qfr=l(),DM=a("li"),FMe=a("strong"),jfr=o("mpnet"),Dfr=o(" \u2014 "),iJ=a("a"),Gfr=o("MPNetForTokenClassification"),Ofr=o(" (MPNet model)"),Vfr=l(),GM=a("li"),TMe=a("strong"),Xfr=o("nezha"),zfr=o(" \u2014 "),dJ=a("a"),Qfr=o("NezhaForTokenClassification"),Wfr=o(" (Nezha model)"),Ufr=l(),OM=a("li"),MMe=a("strong"),Hfr=o("nystromformer"),Jfr=o(" \u2014 "),cJ=a("a"),Yfr=o("NystromformerForTokenClassification"),Kfr=o(" (Nystr\xF6mformer model)"),Zfr=l(),VM=a("li"),EMe=a("strong"),egr=o("qdqbert"),ogr=o(" \u2014 "),mJ=a("a"),rgr=o("QDQBertForTokenClassification"),tgr=o(" (QDQBert model)"),agr=l(),XM=a("li"),CMe=a("strong"),ngr=o("rembert"),sgr=o(" \u2014 "),fJ=a("a"),lgr=o("RemBertForTokenClassification"),igr=o(" (RemBERT model)"),dgr=l(),zM=a("li"),wMe=a("strong"),cgr=o("roberta"),mgr=o(" \u2014 "),gJ=a("a"),fgr=o("RobertaForTokenClassification"),ggr=o(" (RoBERTa model)"),hgr=l(),QM=a("li"),AMe=a("strong"),ugr=o("roformer"),pgr=o(" \u2014 "),hJ=a("a"),_gr=o("RoFormerForTokenClassification"),bgr=o(" (RoFormer model)"),vgr=l(),WM=a("li"),LMe=a("strong"),Fgr=o("squeezebert"),Tgr=o(" \u2014 "),uJ=a("a"),Mgr=o("SqueezeBertForTokenClassification"),Egr=o(" (SqueezeBERT model)"),Cgr=l(),UM=a("li"),yMe=a("strong"),wgr=o("xlm"),Agr=o(" \u2014 "),pJ=a("a"),Lgr=o("XLMForTokenClassification"),ygr=o(" (XLM model)"),xgr=l(),HM=a("li"),xMe=a("strong"),$gr=o("xlm-roberta"),kgr=o(" \u2014 "),_J=a("a"),Sgr=o("XLMRobertaForTokenClassification"),Rgr=o(" (XLM-RoBERTa model)"),Pgr=l(),JM=a("li"),$Me=a("strong"),Bgr=o("xlm-roberta-xl"),Igr=o(" \u2014 "),bJ=a("a"),Ngr=o("XLMRobertaXLForTokenClassification"),qgr=o(" (XLM-RoBERTa-XL model)"),jgr=l(),YM=a("li"),kMe=a("strong"),Dgr=o("xlnet"),Ggr=o(" \u2014 "),vJ=a("a"),Ogr=o("XLNetForTokenClassification"),Vgr=o(" (XLNet model)"),Xgr=l(),KM=a("li"),SMe=a("strong"),zgr=o("yoso"),Qgr=o(" \u2014 "),FJ=a("a"),Wgr=o("YosoForTokenClassification"),Ugr=o(" (YOSO model)"),Hgr=l(),ZM=a("p"),Jgr=o("The model is set in evaluation mode by default using "),RMe=a("code"),Ygr=o("model.eval()"),Kgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PMe=a("code"),Zgr=o("model.train()"),ehr=l(),F(eE.$$.fragment),tZe=l(),Xd=a("h2"),oE=a("a"),BMe=a("span"),F(e$.$$.fragment),ohr=l(),IMe=a("span"),rhr=o("AutoModelForQuestionAnswering"),aZe=l(),Vo=a("div"),F(o$.$$.fragment),thr=l(),zd=a("p"),ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TJ=a("a"),nhr=o("from_pretrained()"),shr=o(" class method or the "),MJ=a("a"),lhr=o("from_config()"),ihr=o(` class
method.`),dhr=l(),r$=a("p"),chr=o("This class cannot be instantiated directly using "),NMe=a("code"),mhr=o("__init__()"),fhr=o(" (throws an error)."),ghr=l(),At=a("div"),F(t$.$$.fragment),hhr=l(),qMe=a("p"),uhr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),phr=l(),Qd=a("p"),_hr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),bhr=o("not"),vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),Fhr=o("from_pretrained()"),Thr=o(" to load the model weights."),Mhr=l(),F(rE.$$.fragment),Ehr=l(),io=a("div"),F(a$.$$.fragment),Chr=l(),DMe=a("p"),whr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ahr=l(),nn=a("p"),Lhr=o("The model class to instantiate is selected based on the "),GMe=a("code"),yhr=o("model_type"),xhr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),$hr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Phr=l(),V=a("ul"),tE=a("li"),XMe=a("strong"),Bhr=o("albert"),Ihr=o(" \u2014 "),CJ=a("a"),Nhr=o("AlbertForQuestionAnswering"),qhr=o(" (ALBERT model)"),jhr=l(),aE=a("li"),zMe=a("strong"),Dhr=o("bart"),Ghr=o(" \u2014 "),wJ=a("a"),Ohr=o("BartForQuestionAnswering"),Vhr=o(" (BART model)"),Xhr=l(),nE=a("li"),QMe=a("strong"),zhr=o("bert"),Qhr=o(" \u2014 "),AJ=a("a"),Whr=o("BertForQuestionAnswering"),Uhr=o(" (BERT model)"),Hhr=l(),sE=a("li"),WMe=a("strong"),Jhr=o("big_bird"),Yhr=o(" \u2014 "),LJ=a("a"),Khr=o("BigBirdForQuestionAnswering"),Zhr=o(" (BigBird model)"),eur=l(),lE=a("li"),UMe=a("strong"),our=o("bigbird_pegasus"),rur=o(" \u2014 "),yJ=a("a"),tur=o("BigBirdPegasusForQuestionAnswering"),aur=o(" (BigBird-Pegasus model)"),nur=l(),iE=a("li"),HMe=a("strong"),sur=o("camembert"),lur=o(" \u2014 "),xJ=a("a"),iur=o("CamembertForQuestionAnswering"),dur=o(" (CamemBERT model)"),cur=l(),dE=a("li"),JMe=a("strong"),mur=o("canine"),fur=o(" \u2014 "),$J=a("a"),gur=o("CanineForQuestionAnswering"),hur=o(" (CANINE model)"),uur=l(),cE=a("li"),YMe=a("strong"),pur=o("convbert"),_ur=o(" \u2014 "),kJ=a("a"),bur=o("ConvBertForQuestionAnswering"),vur=o(" (ConvBERT model)"),Fur=l(),mE=a("li"),KMe=a("strong"),Tur=o("data2vec-text"),Mur=o(" \u2014 "),SJ=a("a"),Eur=o("Data2VecTextForQuestionAnswering"),Cur=o(" (Data2VecText model)"),wur=l(),fE=a("li"),ZMe=a("strong"),Aur=o("deberta"),Lur=o(" \u2014 "),RJ=a("a"),yur=o("DebertaForQuestionAnswering"),xur=o(" (DeBERTa model)"),$ur=l(),gE=a("li"),eEe=a("strong"),kur=o("deberta-v2"),Sur=o(" \u2014 "),PJ=a("a"),Rur=o("DebertaV2ForQuestionAnswering"),Pur=o(" (DeBERTa-v2 model)"),Bur=l(),hE=a("li"),oEe=a("strong"),Iur=o("distilbert"),Nur=o(" \u2014 "),BJ=a("a"),qur=o("DistilBertForQuestionAnswering"),jur=o(" (DistilBERT model)"),Dur=l(),uE=a("li"),rEe=a("strong"),Gur=o("electra"),Our=o(" \u2014 "),IJ=a("a"),Vur=o("ElectraForQuestionAnswering"),Xur=o(" (ELECTRA model)"),zur=l(),pE=a("li"),tEe=a("strong"),Qur=o("ernie"),Wur=o(" \u2014 "),NJ=a("a"),Uur=o("ErnieForQuestionAnswering"),Hur=o(" (ERNIE model)"),Jur=l(),_E=a("li"),aEe=a("strong"),Yur=o("flaubert"),Kur=o(" \u2014 "),qJ=a("a"),Zur=o("FlaubertForQuestionAnsweringSimple"),epr=o(" (FlauBERT model)"),opr=l(),bE=a("li"),nEe=a("strong"),rpr=o("fnet"),tpr=o(" \u2014 "),jJ=a("a"),apr=o("FNetForQuestionAnswering"),npr=o(" (FNet model)"),spr=l(),vE=a("li"),sEe=a("strong"),lpr=o("funnel"),ipr=o(" \u2014 "),DJ=a("a"),dpr=o("FunnelForQuestionAnswering"),cpr=o(" (Funnel Transformer model)"),mpr=l(),FE=a("li"),lEe=a("strong"),fpr=o("gptj"),gpr=o(" \u2014 "),GJ=a("a"),hpr=o("GPTJForQuestionAnswering"),upr=o(" (GPT-J model)"),ppr=l(),TE=a("li"),iEe=a("strong"),_pr=o("ibert"),bpr=o(" \u2014 "),OJ=a("a"),vpr=o("IBertForQuestionAnswering"),Fpr=o(" (I-BERT model)"),Tpr=l(),ME=a("li"),dEe=a("strong"),Mpr=o("layoutlmv2"),Epr=o(" \u2014 "),VJ=a("a"),Cpr=o("LayoutLMv2ForQuestionAnswering"),wpr=o(" (LayoutLMv2 model)"),Apr=l(),EE=a("li"),cEe=a("strong"),Lpr=o("layoutlmv3"),ypr=o(" \u2014 "),XJ=a("a"),xpr=o("LayoutLMv3ForQuestionAnswering"),$pr=o(" (LayoutLMv3 model)"),kpr=l(),CE=a("li"),mEe=a("strong"),Spr=o("led"),Rpr=o(" \u2014 "),zJ=a("a"),Ppr=o("LEDForQuestionAnswering"),Bpr=o(" (LED model)"),Ipr=l(),wE=a("li"),fEe=a("strong"),Npr=o("longformer"),qpr=o(" \u2014 "),QJ=a("a"),jpr=o("LongformerForQuestionAnswering"),Dpr=o(" (Longformer model)"),Gpr=l(),AE=a("li"),gEe=a("strong"),Opr=o("luke"),Vpr=o(" \u2014 "),WJ=a("a"),Xpr=o("LukeForQuestionAnswering"),zpr=o(" (LUKE model)"),Qpr=l(),LE=a("li"),hEe=a("strong"),Wpr=o("lxmert"),Upr=o(" \u2014 "),UJ=a("a"),Hpr=o("LxmertForQuestionAnswering"),Jpr=o(" (LXMERT model)"),Ypr=l(),yE=a("li"),uEe=a("strong"),Kpr=o("mbart"),Zpr=o(" \u2014 "),HJ=a("a"),e_r=o("MBartForQuestionAnswering"),o_r=o(" (mBART model)"),r_r=l(),xE=a("li"),pEe=a("strong"),t_r=o("megatron-bert"),a_r=o(" \u2014 "),JJ=a("a"),n_r=o("MegatronBertForQuestionAnswering"),s_r=o(" (Megatron-BERT model)"),l_r=l(),$E=a("li"),_Ee=a("strong"),i_r=o("mobilebert"),d_r=o(" \u2014 "),YJ=a("a"),c_r=o("MobileBertForQuestionAnswering"),m_r=o(" (MobileBERT model)"),f_r=l(),kE=a("li"),bEe=a("strong"),g_r=o("mpnet"),h_r=o(" \u2014 "),KJ=a("a"),u_r=o("MPNetForQuestionAnswering"),p_r=o(" (MPNet model)"),__r=l(),SE=a("li"),vEe=a("strong"),b_r=o("mvp"),v_r=o(" \u2014 "),ZJ=a("a"),F_r=o("MvpForQuestionAnswering"),T_r=o(" (MVP model)"),M_r=l(),RE=a("li"),FEe=a("strong"),E_r=o("nezha"),C_r=o(" \u2014 "),eY=a("a"),w_r=o("NezhaForQuestionAnswering"),A_r=o(" (Nezha model)"),L_r=l(),PE=a("li"),TEe=a("strong"),y_r=o("nystromformer"),x_r=o(" \u2014 "),oY=a("a"),$_r=o("NystromformerForQuestionAnswering"),k_r=o(" (Nystr\xF6mformer model)"),S_r=l(),BE=a("li"),MEe=a("strong"),R_r=o("qdqbert"),P_r=o(" \u2014 "),rY=a("a"),B_r=o("QDQBertForQuestionAnswering"),I_r=o(" (QDQBert model)"),N_r=l(),IE=a("li"),EEe=a("strong"),q_r=o("reformer"),j_r=o(" \u2014 "),tY=a("a"),D_r=o("ReformerForQuestionAnswering"),G_r=o(" (Reformer model)"),O_r=l(),NE=a("li"),CEe=a("strong"),V_r=o("rembert"),X_r=o(" \u2014 "),aY=a("a"),z_r=o("RemBertForQuestionAnswering"),Q_r=o(" (RemBERT model)"),W_r=l(),qE=a("li"),wEe=a("strong"),U_r=o("roberta"),H_r=o(" \u2014 "),nY=a("a"),J_r=o("RobertaForQuestionAnswering"),Y_r=o(" (RoBERTa model)"),K_r=l(),jE=a("li"),AEe=a("strong"),Z_r=o("roformer"),ebr=o(" \u2014 "),sY=a("a"),obr=o("RoFormerForQuestionAnswering"),rbr=o(" (RoFormer model)"),tbr=l(),DE=a("li"),LEe=a("strong"),abr=o("splinter"),nbr=o(" \u2014 "),lY=a("a"),sbr=o("SplinterForQuestionAnswering"),lbr=o(" (Splinter model)"),ibr=l(),GE=a("li"),yEe=a("strong"),dbr=o("squeezebert"),cbr=o(" \u2014 "),iY=a("a"),mbr=o("SqueezeBertForQuestionAnswering"),fbr=o(" (SqueezeBERT model)"),gbr=l(),OE=a("li"),xEe=a("strong"),hbr=o("xlm"),ubr=o(" \u2014 "),dY=a("a"),pbr=o("XLMForQuestionAnsweringSimple"),_br=o(" (XLM model)"),bbr=l(),VE=a("li"),$Ee=a("strong"),vbr=o("xlm-roberta"),Fbr=o(" \u2014 "),cY=a("a"),Tbr=o("XLMRobertaForQuestionAnswering"),Mbr=o(" (XLM-RoBERTa model)"),Ebr=l(),XE=a("li"),kEe=a("strong"),Cbr=o("xlm-roberta-xl"),wbr=o(" \u2014 "),mY=a("a"),Abr=o("XLMRobertaXLForQuestionAnswering"),Lbr=o(" (XLM-RoBERTa-XL model)"),ybr=l(),zE=a("li"),SEe=a("strong"),xbr=o("xlnet"),$br=o(" \u2014 "),fY=a("a"),kbr=o("XLNetForQuestionAnsweringSimple"),Sbr=o(" (XLNet model)"),Rbr=l(),QE=a("li"),REe=a("strong"),Pbr=o("yoso"),Bbr=o(" \u2014 "),gY=a("a"),Ibr=o("YosoForQuestionAnswering"),Nbr=o(" (YOSO model)"),qbr=l(),WE=a("p"),jbr=o("The model is set in evaluation mode by default using "),PEe=a("code"),Dbr=o("model.eval()"),Gbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BEe=a("code"),Obr=o("model.train()"),Vbr=l(),F(UE.$$.fragment),nZe=l(),Wd=a("h2"),HE=a("a"),IEe=a("span"),F(n$.$$.fragment),Xbr=l(),NEe=a("span"),zbr=o("AutoModelForTableQuestionAnswering"),sZe=l(),Xo=a("div"),F(s$.$$.fragment),Qbr=l(),Ud=a("p"),Wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hY=a("a"),Ubr=o("from_pretrained()"),Hbr=o(" class method or the "),uY=a("a"),Jbr=o("from_config()"),Ybr=o(` class
method.`),Kbr=l(),l$=a("p"),Zbr=o("This class cannot be instantiated directly using "),qEe=a("code"),e2r=o("__init__()"),o2r=o(" (throws an error)."),r2r=l(),Lt=a("div"),F(i$.$$.fragment),t2r=l(),jEe=a("p"),a2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n2r=l(),Hd=a("p"),s2r=o(`Note:
Loading a model from its configuration file does `),DEe=a("strong"),l2r=o("not"),i2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),d2r=o("from_pretrained()"),c2r=o(" to load the model weights."),m2r=l(),F(JE.$$.fragment),f2r=l(),co=a("div"),F(d$.$$.fragment),g2r=l(),GEe=a("p"),h2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u2r=l(),sn=a("p"),p2r=o("The model class to instantiate is selected based on the "),OEe=a("code"),_2r=o("model_type"),b2r=o(` property of the config object (either
passed as an argument or loaded from `),VEe=a("code"),v2r=o("pretrained_model_name_or_path"),F2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(":"),E2r=l(),zEe=a("ul"),YE=a("li"),QEe=a("strong"),C2r=o("tapas"),w2r=o(" \u2014 "),_Y=a("a"),A2r=o("TapasForQuestionAnswering"),L2r=o(" (TAPAS model)"),y2r=l(),KE=a("p"),x2r=o("The model is set in evaluation mode by default using "),WEe=a("code"),$2r=o("model.eval()"),k2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UEe=a("code"),S2r=o("model.train()"),R2r=l(),F(ZE.$$.fragment),lZe=l(),Jd=a("h2"),e4=a("a"),HEe=a("span"),F(c$.$$.fragment),P2r=l(),JEe=a("span"),B2r=o("AutoModelForDocumentQuestionAnswering"),iZe=l(),zo=a("div"),F(m$.$$.fragment),I2r=l(),Yd=a("p"),N2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),bY=a("a"),q2r=o("from_pretrained()"),j2r=o(" class method or the "),vY=a("a"),D2r=o("from_config()"),G2r=o(` class
method.`),O2r=l(),f$=a("p"),V2r=o("This class cannot be instantiated directly using "),YEe=a("code"),X2r=o("__init__()"),z2r=o(" (throws an error)."),Q2r=l(),yt=a("div"),F(g$.$$.fragment),W2r=l(),KEe=a("p"),U2r=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),H2r=l(),Kd=a("p"),J2r=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),Y2r=o("not"),K2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),Z2r=o("from_pretrained()"),e1r=o(" to load the model weights."),o1r=l(),F(o4.$$.fragment),r1r=l(),mo=a("div"),F(h$.$$.fragment),t1r=l(),e4e=a("p"),a1r=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),n1r=l(),ln=a("p"),s1r=o("The model class to instantiate is selected based on the "),o4e=a("code"),l1r=o("model_type"),i1r=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),d1r=o("pretrained_model_name_or_path"),c1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),m1r=o("pretrained_model_name_or_path"),f1r=o(":"),g1r=l(),Zd=a("ul"),r4=a("li"),a4e=a("strong"),h1r=o("layoutlm"),u1r=o(" \u2014 "),TY=a("a"),p1r=o("LayoutLMForQuestionAnswering"),_1r=o(" (LayoutLM model)"),b1r=l(),t4=a("li"),n4e=a("strong"),v1r=o("layoutlmv2"),F1r=o(" \u2014 "),MY=a("a"),T1r=o("LayoutLMv2ForQuestionAnswering"),M1r=o(" (LayoutLMv2 model)"),E1r=l(),a4=a("li"),s4e=a("strong"),C1r=o("layoutlmv3"),w1r=o(" \u2014 "),EY=a("a"),A1r=o("LayoutLMv3ForQuestionAnswering"),L1r=o(" (LayoutLMv3 model)"),y1r=l(),n4=a("p"),x1r=o("The model is set in evaluation mode by default using "),l4e=a("code"),$1r=o("model.eval()"),k1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=a("code"),S1r=o("model.train()"),R1r=l(),F(s4.$$.fragment),dZe=l(),ec=a("h2"),l4=a("a"),d4e=a("span"),F(u$.$$.fragment),P1r=l(),c4e=a("span"),B1r=o("AutoModelForImageClassification"),cZe=l(),Qo=a("div"),F(p$.$$.fragment),I1r=l(),oc=a("p"),N1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CY=a("a"),q1r=o("from_pretrained()"),j1r=o(" class method or the "),wY=a("a"),D1r=o("from_config()"),G1r=o(` class
method.`),O1r=l(),_$=a("p"),V1r=o("This class cannot be instantiated directly using "),m4e=a("code"),X1r=o("__init__()"),z1r=o(" (throws an error)."),Q1r=l(),xt=a("div"),F(b$.$$.fragment),W1r=l(),f4e=a("p"),U1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),H1r=l(),rc=a("p"),J1r=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),Y1r=o("not"),K1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=a("a"),Z1r=o("from_pretrained()"),evr=o(" to load the model weights."),ovr=l(),F(i4.$$.fragment),rvr=l(),fo=a("div"),F(v$.$$.fragment),tvr=l(),h4e=a("p"),avr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nvr=l(),dn=a("p"),svr=o("The model class to instantiate is selected based on the "),u4e=a("code"),lvr=o("model_type"),ivr=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),dvr=o("pretrained_model_name_or_path"),cvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),mvr=o("pretrained_model_name_or_path"),fvr=o(":"),gvr=l(),be=a("ul"),d4=a("li"),b4e=a("strong"),hvr=o("beit"),uvr=o(" \u2014 "),LY=a("a"),pvr=o("BeitForImageClassification"),_vr=o(" (BEiT model)"),bvr=l(),c4=a("li"),v4e=a("strong"),vvr=o("convnext"),Fvr=o(" \u2014 "),yY=a("a"),Tvr=o("ConvNextForImageClassification"),Mvr=o(" (ConvNeXT model)"),Evr=l(),m4=a("li"),F4e=a("strong"),Cvr=o("cvt"),wvr=o(" \u2014 "),xY=a("a"),Avr=o("CvtForImageClassification"),Lvr=o(" (CvT model)"),yvr=l(),f4=a("li"),T4e=a("strong"),xvr=o("data2vec-vision"),$vr=o(" \u2014 "),$Y=a("a"),kvr=o("Data2VecVisionForImageClassification"),Svr=o(" (Data2VecVision model)"),Rvr=l(),bl=a("li"),M4e=a("strong"),Pvr=o("deit"),Bvr=o(" \u2014 "),kY=a("a"),Ivr=o("DeiTForImageClassification"),Nvr=o(" or "),SY=a("a"),qvr=o("DeiTForImageClassificationWithTeacher"),jvr=o(" (DeiT model)"),Dvr=l(),g4=a("li"),E4e=a("strong"),Gvr=o("imagegpt"),Ovr=o(" \u2014 "),RY=a("a"),Vvr=o("ImageGPTForImageClassification"),Xvr=o(" (ImageGPT model)"),zvr=l(),vl=a("li"),C4e=a("strong"),Qvr=o("levit"),Wvr=o(" \u2014 "),PY=a("a"),Uvr=o("LevitForImageClassification"),Hvr=o(" or "),BY=a("a"),Jvr=o("LevitForImageClassificationWithTeacher"),Yvr=o(" (LeViT model)"),Kvr=l(),h4=a("li"),w4e=a("strong"),Zvr=o("mobilevit"),eFr=o(" \u2014 "),IY=a("a"),oFr=o("MobileViTForImageClassification"),rFr=o(" (MobileViT model)"),tFr=l(),$t=a("li"),A4e=a("strong"),aFr=o("perceiver"),nFr=o(" \u2014 "),NY=a("a"),sFr=o("PerceiverForImageClassificationLearned"),lFr=o(" or "),qY=a("a"),iFr=o("PerceiverForImageClassificationFourier"),dFr=o(" or "),jY=a("a"),cFr=o("PerceiverForImageClassificationConvProcessing"),mFr=o(" (Perceiver model)"),fFr=l(),u4=a("li"),L4e=a("strong"),gFr=o("poolformer"),hFr=o(" \u2014 "),DY=a("a"),uFr=o("PoolFormerForImageClassification"),pFr=o(" (PoolFormer model)"),_Fr=l(),p4=a("li"),y4e=a("strong"),bFr=o("regnet"),vFr=o(" \u2014 "),GY=a("a"),FFr=o("RegNetForImageClassification"),TFr=o(" (RegNet model)"),MFr=l(),_4=a("li"),x4e=a("strong"),EFr=o("resnet"),CFr=o(" \u2014 "),OY=a("a"),wFr=o("ResNetForImageClassification"),AFr=o(" (ResNet model)"),LFr=l(),b4=a("li"),$4e=a("strong"),yFr=o("segformer"),xFr=o(" \u2014 "),VY=a("a"),$Fr=o("SegformerForImageClassification"),kFr=o(" (SegFormer model)"),SFr=l(),v4=a("li"),k4e=a("strong"),RFr=o("swin"),PFr=o(" \u2014 "),XY=a("a"),BFr=o("SwinForImageClassification"),IFr=o(" (Swin Transformer model)"),NFr=l(),F4=a("li"),S4e=a("strong"),qFr=o("swinv2"),jFr=o(" \u2014 "),zY=a("a"),DFr=o("Swinv2ForImageClassification"),GFr=o(" (Swin Transformer V2 model)"),OFr=l(),T4=a("li"),R4e=a("strong"),VFr=o("van"),XFr=o(" \u2014 "),QY=a("a"),zFr=o("VanForImageClassification"),QFr=o(" (VAN model)"),WFr=l(),M4=a("li"),P4e=a("strong"),UFr=o("vit"),HFr=o(" \u2014 "),WY=a("a"),JFr=o("ViTForImageClassification"),YFr=o(" (ViT model)"),KFr=l(),E4=a("p"),ZFr=o("The model is set in evaluation mode by default using "),B4e=a("code"),eTr=o("model.eval()"),oTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I4e=a("code"),rTr=o("model.train()"),tTr=l(),F(C4.$$.fragment),mZe=l(),tc=a("h2"),w4=a("a"),N4e=a("span"),F(F$.$$.fragment),aTr=l(),q4e=a("span"),nTr=o("AutoModelForVideoClassification"),fZe=l(),Wo=a("div"),F(T$.$$.fragment),sTr=l(),ac=a("p"),lTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),UY=a("a"),iTr=o("from_pretrained()"),dTr=o(" class method or the "),HY=a("a"),cTr=o("from_config()"),mTr=o(` class
method.`),fTr=l(),M$=a("p"),gTr=o("This class cannot be instantiated directly using "),j4e=a("code"),hTr=o("__init__()"),uTr=o(" (throws an error)."),pTr=l(),kt=a("div"),F(E$.$$.fragment),_Tr=l(),D4e=a("p"),bTr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),vTr=l(),nc=a("p"),FTr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),TTr=o("not"),MTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=a("a"),ETr=o("from_pretrained()"),CTr=o(" to load the model weights."),wTr=l(),F(A4.$$.fragment),ATr=l(),go=a("div"),F(C$.$$.fragment),LTr=l(),O4e=a("p"),yTr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),xTr=l(),cn=a("p"),$Tr=o("The model class to instantiate is selected based on the "),V4e=a("code"),kTr=o("model_type"),STr=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),RTr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),BTr=o("pretrained_model_name_or_path"),ITr=o(":"),NTr=l(),Q4e=a("ul"),L4=a("li"),W4e=a("strong"),qTr=o("videomae"),jTr=o(" \u2014 "),YY=a("a"),DTr=o("VideoMAEForVideoClassification"),GTr=o(" (VideoMAE model)"),OTr=l(),y4=a("p"),VTr=o("The model is set in evaluation mode by default using "),U4e=a("code"),XTr=o("model.eval()"),zTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H4e=a("code"),QTr=o("model.train()"),WTr=l(),F(x4.$$.fragment),gZe=l(),sc=a("h2"),$4=a("a"),J4e=a("span"),F(w$.$$.fragment),UTr=l(),Y4e=a("span"),HTr=o("AutoModelForVision2Seq"),hZe=l(),Uo=a("div"),F(A$.$$.fragment),JTr=l(),lc=a("p"),YTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KY=a("a"),KTr=o("from_pretrained()"),ZTr=o(" class method or the "),ZY=a("a"),eMr=o("from_config()"),oMr=o(` class
method.`),rMr=l(),L$=a("p"),tMr=o("This class cannot be instantiated directly using "),K4e=a("code"),aMr=o("__init__()"),nMr=o(" (throws an error)."),sMr=l(),St=a("div"),F(y$.$$.fragment),lMr=l(),Z4e=a("p"),iMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dMr=l(),ic=a("p"),cMr=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),mMr=o("not"),fMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),gMr=o("from_pretrained()"),hMr=o(" to load the model weights."),uMr=l(),F(k4.$$.fragment),pMr=l(),ho=a("div"),F(x$.$$.fragment),_Mr=l(),oCe=a("p"),bMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vMr=l(),mn=a("p"),FMr=o("The model class to instantiate is selected based on the "),rCe=a("code"),TMr=o("model_type"),MMr=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),EMr=o("pretrained_model_name_or_path"),CMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(":"),LMr=l(),nCe=a("ul"),S4=a("li"),sCe=a("strong"),yMr=o("vision-encoder-decoder"),xMr=o(" \u2014 "),oK=a("a"),$Mr=o("VisionEncoderDecoderModel"),kMr=o(" (Vision Encoder decoder model)"),SMr=l(),R4=a("p"),RMr=o("The model is set in evaluation mode by default using "),lCe=a("code"),PMr=o("model.eval()"),BMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iCe=a("code"),IMr=o("model.train()"),NMr=l(),F(P4.$$.fragment),uZe=l(),dc=a("h2"),B4=a("a"),dCe=a("span"),F($$.$$.fragment),qMr=l(),cCe=a("span"),jMr=o("AutoModelForVisualQuestionAnswering"),pZe=l(),Ho=a("div"),F(k$.$$.fragment),DMr=l(),cc=a("p"),GMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),rK=a("a"),OMr=o("from_pretrained()"),VMr=o(" class method or the "),tK=a("a"),XMr=o("from_config()"),zMr=o(` class
method.`),QMr=l(),S$=a("p"),WMr=o("This class cannot be instantiated directly using "),mCe=a("code"),UMr=o("__init__()"),HMr=o(" (throws an error)."),JMr=l(),Rt=a("div"),F(R$.$$.fragment),YMr=l(),fCe=a("p"),KMr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),ZMr=l(),mc=a("p"),eEr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),oEr=o("not"),rEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),tEr=o("from_pretrained()"),aEr=o(" to load the model weights."),nEr=l(),F(I4.$$.fragment),sEr=l(),uo=a("div"),F(P$.$$.fragment),lEr=l(),hCe=a("p"),iEr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),dEr=l(),fn=a("p"),cEr=o("The model class to instantiate is selected based on the "),uCe=a("code"),mEr=o("model_type"),fEr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),uEr=o("pretrained_model_name_or_path"),pEr=o(":"),_Er=l(),bCe=a("ul"),N4=a("li"),vCe=a("strong"),bEr=o("vilt"),vEr=o(" \u2014 "),nK=a("a"),FEr=o("ViltForQuestionAnswering"),TEr=o(" (ViLT model)"),MEr=l(),q4=a("p"),EEr=o("The model is set in evaluation mode by default using "),FCe=a("code"),CEr=o("model.eval()"),wEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TCe=a("code"),AEr=o("model.train()"),LEr=l(),F(j4.$$.fragment),_Ze=l(),fc=a("h2"),D4=a("a"),MCe=a("span"),F(B$.$$.fragment),yEr=l(),ECe=a("span"),xEr=o("AutoModelForAudioClassification"),bZe=l(),Jo=a("div"),F(I$.$$.fragment),$Er=l(),gc=a("p"),kEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sK=a("a"),SEr=o("from_pretrained()"),REr=o(" class method or the "),lK=a("a"),PEr=o("from_config()"),BEr=o(` class
method.`),IEr=l(),N$=a("p"),NEr=o("This class cannot be instantiated directly using "),CCe=a("code"),qEr=o("__init__()"),jEr=o(" (throws an error)."),DEr=l(),Pt=a("div"),F(q$.$$.fragment),GEr=l(),wCe=a("p"),OEr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),VEr=l(),hc=a("p"),XEr=o(`Note:
Loading a model from its configuration file does `),ACe=a("strong"),zEr=o("not"),QEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),WEr=o("from_pretrained()"),UEr=o(" to load the model weights."),HEr=l(),F(G4.$$.fragment),JEr=l(),po=a("div"),F(j$.$$.fragment),YEr=l(),LCe=a("p"),KEr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ZEr=l(),gn=a("p"),e4r=o("The model class to instantiate is selected based on the "),yCe=a("code"),o4r=o("model_type"),r4r=o(` property of the config object (either
passed as an argument or loaded from `),xCe=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=a("code"),n4r=o("pretrained_model_name_or_path"),s4r=o(":"),l4r=l(),Pe=a("ul"),O4=a("li"),kCe=a("strong"),i4r=o("data2vec-audio"),d4r=o(" \u2014 "),dK=a("a"),c4r=o("Data2VecAudioForSequenceClassification"),m4r=o(" (Data2VecAudio model)"),f4r=l(),V4=a("li"),SCe=a("strong"),g4r=o("hubert"),h4r=o(" \u2014 "),cK=a("a"),u4r=o("HubertForSequenceClassification"),p4r=o(" (Hubert model)"),_4r=l(),X4=a("li"),RCe=a("strong"),b4r=o("sew"),v4r=o(" \u2014 "),mK=a("a"),F4r=o("SEWForSequenceClassification"),T4r=o(" (SEW model)"),M4r=l(),z4=a("li"),PCe=a("strong"),E4r=o("sew-d"),C4r=o(" \u2014 "),fK=a("a"),w4r=o("SEWDForSequenceClassification"),A4r=o(" (SEW-D model)"),L4r=l(),Q4=a("li"),BCe=a("strong"),y4r=o("unispeech"),x4r=o(" \u2014 "),gK=a("a"),$4r=o("UniSpeechForSequenceClassification"),k4r=o(" (UniSpeech model)"),S4r=l(),W4=a("li"),ICe=a("strong"),R4r=o("unispeech-sat"),P4r=o(" \u2014 "),hK=a("a"),B4r=o("UniSpeechSatForSequenceClassification"),I4r=o(" (UniSpeechSat model)"),N4r=l(),U4=a("li"),NCe=a("strong"),q4r=o("wav2vec2"),j4r=o(" \u2014 "),uK=a("a"),D4r=o("Wav2Vec2ForSequenceClassification"),G4r=o(" (Wav2Vec2 model)"),O4r=l(),H4=a("li"),qCe=a("strong"),V4r=o("wav2vec2-conformer"),X4r=o(" \u2014 "),pK=a("a"),z4r=o("Wav2Vec2ConformerForSequenceClassification"),Q4r=o(" (Wav2Vec2-Conformer model)"),W4r=l(),J4=a("li"),jCe=a("strong"),U4r=o("wavlm"),H4r=o(" \u2014 "),_K=a("a"),J4r=o("WavLMForSequenceClassification"),Y4r=o(" (WavLM model)"),K4r=l(),Y4=a("p"),Z4r=o("The model is set in evaluation mode by default using "),DCe=a("code"),eCr=o("model.eval()"),oCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GCe=a("code"),rCr=o("model.train()"),tCr=l(),F(K4.$$.fragment),vZe=l(),uc=a("h2"),Z4=a("a"),OCe=a("span"),F(D$.$$.fragment),aCr=l(),VCe=a("span"),nCr=o("AutoModelForAudioFrameClassification"),FZe=l(),Yo=a("div"),F(G$.$$.fragment),sCr=l(),pc=a("p"),lCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bK=a("a"),iCr=o("from_pretrained()"),dCr=o(" class method or the "),vK=a("a"),cCr=o("from_config()"),mCr=o(` class
method.`),fCr=l(),O$=a("p"),gCr=o("This class cannot be instantiated directly using "),XCe=a("code"),hCr=o("__init__()"),uCr=o(" (throws an error)."),pCr=l(),Bt=a("div"),F(V$.$$.fragment),_Cr=l(),zCe=a("p"),bCr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vCr=l(),_c=a("p"),FCr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),TCr=o("not"),MCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),ECr=o("from_pretrained()"),CCr=o(" to load the model weights."),wCr=l(),F(eC.$$.fragment),ACr=l(),_o=a("div"),F(X$.$$.fragment),LCr=l(),WCe=a("p"),yCr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xCr=l(),hn=a("p"),$Cr=o("The model class to instantiate is selected based on the "),UCe=a("code"),kCr=o("model_type"),SCr=o(` property of the config object (either
passed as an argument or loaded from `),HCe=a("code"),RCr=o("pretrained_model_name_or_path"),PCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(":"),NCr=l(),mt=a("ul"),oC=a("li"),YCe=a("strong"),qCr=o("data2vec-audio"),jCr=o(" \u2014 "),TK=a("a"),DCr=o("Data2VecAudioForAudioFrameClassification"),GCr=o(" (Data2VecAudio model)"),OCr=l(),rC=a("li"),KCe=a("strong"),VCr=o("unispeech-sat"),XCr=o(" \u2014 "),MK=a("a"),zCr=o("UniSpeechSatForAudioFrameClassification"),QCr=o(" (UniSpeechSat model)"),WCr=l(),tC=a("li"),ZCe=a("strong"),UCr=o("wav2vec2"),HCr=o(" \u2014 "),EK=a("a"),JCr=o("Wav2Vec2ForAudioFrameClassification"),YCr=o(" (Wav2Vec2 model)"),KCr=l(),aC=a("li"),e3e=a("strong"),ZCr=o("wav2vec2-conformer"),e3r=o(" \u2014 "),CK=a("a"),o3r=o("Wav2Vec2ConformerForAudioFrameClassification"),r3r=o(" (Wav2Vec2-Conformer model)"),t3r=l(),nC=a("li"),o3e=a("strong"),a3r=o("wavlm"),n3r=o(" \u2014 "),wK=a("a"),s3r=o("WavLMForAudioFrameClassification"),l3r=o(" (WavLM model)"),i3r=l(),sC=a("p"),d3r=o("The model is set in evaluation mode by default using "),r3e=a("code"),c3r=o("model.eval()"),m3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=a("code"),f3r=o("model.train()"),g3r=l(),F(lC.$$.fragment),TZe=l(),bc=a("h2"),iC=a("a"),a3e=a("span"),F(z$.$$.fragment),h3r=l(),n3e=a("span"),u3r=o("AutoModelForCTC"),MZe=l(),Ko=a("div"),F(Q$.$$.fragment),p3r=l(),vc=a("p"),_3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AK=a("a"),b3r=o("from_pretrained()"),v3r=o(" class method or the "),LK=a("a"),F3r=o("from_config()"),T3r=o(` class
method.`),M3r=l(),W$=a("p"),E3r=o("This class cannot be instantiated directly using "),s3e=a("code"),C3r=o("__init__()"),w3r=o(" (throws an error)."),A3r=l(),It=a("div"),F(U$.$$.fragment),L3r=l(),l3e=a("p"),y3r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),x3r=l(),Fc=a("p"),$3r=o(`Note:
Loading a model from its configuration file does `),i3e=a("strong"),k3r=o("not"),S3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=a("a"),R3r=o("from_pretrained()"),P3r=o(" to load the model weights."),B3r=l(),F(dC.$$.fragment),I3r=l(),bo=a("div"),F(H$.$$.fragment),N3r=l(),d3e=a("p"),q3r=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),j3r=l(),un=a("p"),D3r=o("The model class to instantiate is selected based on the "),c3e=a("code"),G3r=o("model_type"),O3r=o(` property of the config object (either
passed as an argument or loaded from `),m3e=a("code"),V3r=o("pretrained_model_name_or_path"),X3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(":"),W3r=l(),Le=a("ul"),cC=a("li"),g3e=a("strong"),U3r=o("data2vec-audio"),H3r=o(" \u2014 "),xK=a("a"),J3r=o("Data2VecAudioForCTC"),Y3r=o(" (Data2VecAudio model)"),K3r=l(),mC=a("li"),h3e=a("strong"),Z3r=o("hubert"),e5r=o(" \u2014 "),$K=a("a"),o5r=o("HubertForCTC"),r5r=o(" (Hubert model)"),t5r=l(),fC=a("li"),u3e=a("strong"),a5r=o("mctct"),n5r=o(" \u2014 "),kK=a("a"),s5r=o("MCTCTForCTC"),l5r=o(" (M-CTC-T model)"),i5r=l(),gC=a("li"),p3e=a("strong"),d5r=o("sew"),c5r=o(" \u2014 "),SK=a("a"),m5r=o("SEWForCTC"),f5r=o(" (SEW model)"),g5r=l(),hC=a("li"),_3e=a("strong"),h5r=o("sew-d"),u5r=o(" \u2014 "),RK=a("a"),p5r=o("SEWDForCTC"),_5r=o(" (SEW-D model)"),b5r=l(),uC=a("li"),b3e=a("strong"),v5r=o("unispeech"),F5r=o(" \u2014 "),PK=a("a"),T5r=o("UniSpeechForCTC"),M5r=o(" (UniSpeech model)"),E5r=l(),pC=a("li"),v3e=a("strong"),C5r=o("unispeech-sat"),w5r=o(" \u2014 "),BK=a("a"),A5r=o("UniSpeechSatForCTC"),L5r=o(" (UniSpeechSat model)"),y5r=l(),_C=a("li"),F3e=a("strong"),x5r=o("wav2vec2"),$5r=o(" \u2014 "),IK=a("a"),k5r=o("Wav2Vec2ForCTC"),S5r=o(" (Wav2Vec2 model)"),R5r=l(),bC=a("li"),T3e=a("strong"),P5r=o("wav2vec2-conformer"),B5r=o(" \u2014 "),NK=a("a"),I5r=o("Wav2Vec2ConformerForCTC"),N5r=o(" (Wav2Vec2-Conformer model)"),q5r=l(),vC=a("li"),M3e=a("strong"),j5r=o("wavlm"),D5r=o(" \u2014 "),qK=a("a"),G5r=o("WavLMForCTC"),O5r=o(" (WavLM model)"),V5r=l(),FC=a("p"),X5r=o("The model is set in evaluation mode by default using "),E3e=a("code"),z5r=o("model.eval()"),Q5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C3e=a("code"),W5r=o("model.train()"),U5r=l(),F(TC.$$.fragment),EZe=l(),Tc=a("h2"),MC=a("a"),w3e=a("span"),F(J$.$$.fragment),H5r=l(),A3e=a("span"),J5r=o("AutoModelForSpeechSeq2Seq"),CZe=l(),Zo=a("div"),F(Y$.$$.fragment),Y5r=l(),Mc=a("p"),K5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jK=a("a"),Z5r=o("from_pretrained()"),e0r=o(" class method or the "),DK=a("a"),o0r=o("from_config()"),r0r=o(` class
method.`),t0r=l(),K$=a("p"),a0r=o("This class cannot be instantiated directly using "),L3e=a("code"),n0r=o("__init__()"),s0r=o(" (throws an error)."),l0r=l(),Nt=a("div"),F(Z$.$$.fragment),i0r=l(),y3e=a("p"),d0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),c0r=l(),Ec=a("p"),m0r=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),f0r=o("not"),g0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=a("a"),h0r=o("from_pretrained()"),u0r=o(" to load the model weights."),p0r=l(),F(EC.$$.fragment),_0r=l(),vo=a("div"),F(ek.$$.fragment),b0r=l(),$3e=a("p"),v0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F0r=l(),pn=a("p"),T0r=o("The model class to instantiate is selected based on the "),k3e=a("code"),M0r=o("model_type"),E0r=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),C0r=o("pretrained_model_name_or_path"),w0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),A0r=o("pretrained_model_name_or_path"),L0r=o(":"),y0r=l(),ok=a("ul"),CC=a("li"),P3e=a("strong"),x0r=o("speech-encoder-decoder"),$0r=o(" \u2014 "),OK=a("a"),k0r=o("SpeechEncoderDecoderModel"),S0r=o(" (Speech Encoder decoder model)"),R0r=l(),wC=a("li"),B3e=a("strong"),P0r=o("speech_to_text"),B0r=o(" \u2014 "),VK=a("a"),I0r=o("Speech2TextForConditionalGeneration"),N0r=o(" (Speech2Text model)"),q0r=l(),AC=a("p"),j0r=o("The model is set in evaluation mode by default using "),I3e=a("code"),D0r=o("model.eval()"),G0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N3e=a("code"),O0r=o("model.train()"),V0r=l(),F(LC.$$.fragment),wZe=l(),Cc=a("h2"),yC=a("a"),q3e=a("span"),F(rk.$$.fragment),X0r=l(),j3e=a("span"),z0r=o("AutoModelForAudioXVector"),AZe=l(),er=a("div"),F(tk.$$.fragment),Q0r=l(),wc=a("p"),W0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),XK=a("a"),U0r=o("from_pretrained()"),H0r=o(" class method or the "),zK=a("a"),J0r=o("from_config()"),Y0r=o(` class
method.`),K0r=l(),ak=a("p"),Z0r=o("This class cannot be instantiated directly using "),D3e=a("code"),ewr=o("__init__()"),owr=o(" (throws an error)."),rwr=l(),qt=a("div"),F(nk.$$.fragment),twr=l(),G3e=a("p"),awr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nwr=l(),Ac=a("p"),swr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),lwr=o("not"),iwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),dwr=o("from_pretrained()"),cwr=o(" to load the model weights."),mwr=l(),F(xC.$$.fragment),fwr=l(),Fo=a("div"),F(sk.$$.fragment),gwr=l(),V3e=a("p"),hwr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uwr=l(),_n=a("p"),pwr=o("The model class to instantiate is selected based on the "),X3e=a("code"),_wr=o("model_type"),bwr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),vwr=o("pretrained_model_name_or_path"),Fwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=a("code"),Twr=o("pretrained_model_name_or_path"),Mwr=o(":"),Ewr=l(),ft=a("ul"),$C=a("li"),W3e=a("strong"),Cwr=o("data2vec-audio"),wwr=o(" \u2014 "),WK=a("a"),Awr=o("Data2VecAudioForXVector"),Lwr=o(" (Data2VecAudio model)"),ywr=l(),kC=a("li"),U3e=a("strong"),xwr=o("unispeech-sat"),$wr=o(" \u2014 "),UK=a("a"),kwr=o("UniSpeechSatForXVector"),Swr=o(" (UniSpeechSat model)"),Rwr=l(),SC=a("li"),H3e=a("strong"),Pwr=o("wav2vec2"),Bwr=o(" \u2014 "),HK=a("a"),Iwr=o("Wav2Vec2ForXVector"),Nwr=o(" (Wav2Vec2 model)"),qwr=l(),RC=a("li"),J3e=a("strong"),jwr=o("wav2vec2-conformer"),Dwr=o(" \u2014 "),JK=a("a"),Gwr=o("Wav2Vec2ConformerForXVector"),Owr=o(" (Wav2Vec2-Conformer model)"),Vwr=l(),PC=a("li"),Y3e=a("strong"),Xwr=o("wavlm"),zwr=o(" \u2014 "),YK=a("a"),Qwr=o("WavLMForXVector"),Wwr=o(" (WavLM model)"),Uwr=l(),BC=a("p"),Hwr=o("The model is set in evaluation mode by default using "),K3e=a("code"),Jwr=o("model.eval()"),Ywr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z3e=a("code"),Kwr=o("model.train()"),Zwr=l(),F(IC.$$.fragment),LZe=l(),Lc=a("h2"),NC=a("a"),e5e=a("span"),F(lk.$$.fragment),eAr=l(),o5e=a("span"),oAr=o("AutoModelForMaskedImageModeling"),yZe=l(),or=a("div"),F(ik.$$.fragment),rAr=l(),yc=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KK=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),ZK=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),dk=a("p"),dAr=o("This class cannot be instantiated directly using "),r5e=a("code"),cAr=o("__init__()"),mAr=o(" (throws an error)."),fAr=l(),jt=a("div"),F(ck.$$.fragment),gAr=l(),t5e=a("p"),hAr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),uAr=l(),xc=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),a5e=a("strong"),_Ar=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(qC.$$.fragment),MAr=l(),To=a("div"),F(mk.$$.fragment),EAr=l(),n5e=a("p"),CAr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wAr=l(),bn=a("p"),AAr=o("The model class to instantiate is selected based on the "),s5e=a("code"),LAr=o("model_type"),yAr=o(` property of the config object (either
passed as an argument or loaded from `),l5e=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),vn=a("ul"),jC=a("li"),d5e=a("strong"),PAr=o("deit"),BAr=o(" \u2014 "),oZ=a("a"),IAr=o("DeiTForMaskedImageModeling"),NAr=o(" (DeiT model)"),qAr=l(),DC=a("li"),c5e=a("strong"),jAr=o("swin"),DAr=o(" \u2014 "),rZ=a("a"),GAr=o("SwinForMaskedImageModeling"),OAr=o(" (Swin Transformer model)"),VAr=l(),GC=a("li"),m5e=a("strong"),XAr=o("swinv2"),zAr=o(" \u2014 "),tZ=a("a"),QAr=o("Swinv2ForMaskedImageModeling"),WAr=o(" (Swin Transformer V2 model)"),UAr=l(),OC=a("li"),f5e=a("strong"),HAr=o("vit"),JAr=o(" \u2014 "),aZ=a("a"),YAr=o("ViTForMaskedImageModeling"),KAr=o(" (ViT model)"),ZAr=l(),VC=a("p"),e6r=o("The model is set in evaluation mode by default using "),g5e=a("code"),o6r=o("model.eval()"),r6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h5e=a("code"),t6r=o("model.train()"),a6r=l(),F(XC.$$.fragment),xZe=l(),$c=a("h2"),zC=a("a"),u5e=a("span"),F(fk.$$.fragment),n6r=l(),p5e=a("span"),s6r=o("AutoModelForObjectDetection"),$Ze=l(),rr=a("div"),F(gk.$$.fragment),l6r=l(),kc=a("p"),i6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nZ=a("a"),d6r=o("from_pretrained()"),c6r=o(" class method or the "),sZ=a("a"),m6r=o("from_config()"),f6r=o(` class
method.`),g6r=l(),hk=a("p"),h6r=o("This class cannot be instantiated directly using "),_5e=a("code"),u6r=o("__init__()"),p6r=o(" (throws an error)."),_6r=l(),Dt=a("div"),F(uk.$$.fragment),b6r=l(),b5e=a("p"),v6r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),F6r=l(),Sc=a("p"),T6r=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),M6r=o("not"),E6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),C6r=o("from_pretrained()"),w6r=o(" to load the model weights."),A6r=l(),F(QC.$$.fragment),L6r=l(),Mo=a("div"),F(pk.$$.fragment),y6r=l(),F5e=a("p"),x6r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$6r=l(),Fn=a("p"),k6r=o("The model class to instantiate is selected based on the "),T5e=a("code"),S6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),P6r=o("pretrained_model_name_or_path"),B6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),I6r=o("pretrained_model_name_or_path"),N6r=o(":"),q6r=l(),Tn=a("ul"),WC=a("li"),C5e=a("strong"),j6r=o("conditional_detr"),D6r=o(" \u2014 "),iZ=a("a"),G6r=o("ConditionalDetrForObjectDetection"),O6r=o(" (Conditional DETR model)"),V6r=l(),UC=a("li"),w5e=a("strong"),X6r=o("deformable_detr"),z6r=o(" \u2014 "),dZ=a("a"),Q6r=o("DeformableDetrForObjectDetection"),W6r=o(" (Deformable DETR model)"),U6r=l(),HC=a("li"),A5e=a("strong"),H6r=o("detr"),J6r=o(" \u2014 "),cZ=a("a"),Y6r=o("DetrForObjectDetection"),K6r=o(" (DETR model)"),Z6r=l(),JC=a("li"),L5e=a("strong"),e7r=o("yolos"),o7r=o(" \u2014 "),mZ=a("a"),r7r=o("YolosForObjectDetection"),t7r=o(" (YOLOS model)"),a7r=l(),YC=a("p"),n7r=o("The model is set in evaluation mode by default using "),y5e=a("code"),s7r=o("model.eval()"),l7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x5e=a("code"),i7r=o("model.train()"),d7r=l(),F(KC.$$.fragment),kZe=l(),Rc=a("h2"),ZC=a("a"),$5e=a("span"),F(_k.$$.fragment),c7r=l(),k5e=a("span"),m7r=o("AutoModelForImageSegmentation"),SZe=l(),tr=a("div"),F(bk.$$.fragment),f7r=l(),Pc=a("p"),g7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fZ=a("a"),h7r=o("from_pretrained()"),u7r=o(" class method or the "),gZ=a("a"),p7r=o("from_config()"),_7r=o(` class
method.`),b7r=l(),vk=a("p"),v7r=o("This class cannot be instantiated directly using "),S5e=a("code"),F7r=o("__init__()"),T7r=o(" (throws an error)."),M7r=l(),Gt=a("div"),F(Fk.$$.fragment),E7r=l(),R5e=a("p"),C7r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),w7r=l(),Bc=a("p"),A7r=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),L7r=o("not"),y7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=a("a"),x7r=o("from_pretrained()"),$7r=o(" to load the model weights."),k7r=l(),F(e3.$$.fragment),S7r=l(),Eo=a("div"),F(Tk.$$.fragment),R7r=l(),B5e=a("p"),P7r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),B7r=l(),Mn=a("p"),I7r=o("The model class to instantiate is selected based on the "),I5e=a("code"),N7r=o("model_type"),q7r=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),j7r=o("pretrained_model_name_or_path"),D7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(":"),V7r=l(),j5e=a("ul"),o3=a("li"),D5e=a("strong"),X7r=o("detr"),z7r=o(" \u2014 "),uZ=a("a"),Q7r=o("DetrForSegmentation"),W7r=o(" (DETR model)"),U7r=l(),r3=a("p"),H7r=o("The model is set in evaluation mode by default using "),G5e=a("code"),J7r=o("model.eval()"),Y7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O5e=a("code"),K7r=o("model.train()"),Z7r=l(),F(t3.$$.fragment),RZe=l(),Ic=a("h2"),a3=a("a"),V5e=a("span"),F(Mk.$$.fragment),eLr=l(),X5e=a("span"),oLr=o("AutoModelForSemanticSegmentation"),PZe=l(),ar=a("div"),F(Ek.$$.fragment),rLr=l(),Nc=a("p"),tLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pZ=a("a"),aLr=o("from_pretrained()"),nLr=o(" class method or the "),_Z=a("a"),sLr=o("from_config()"),lLr=o(` class
method.`),iLr=l(),Ck=a("p"),dLr=o("This class cannot be instantiated directly using "),z5e=a("code"),cLr=o("__init__()"),mLr=o(" (throws an error)."),fLr=l(),Ot=a("div"),F(wk.$$.fragment),gLr=l(),Q5e=a("p"),hLr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),uLr=l(),qc=a("p"),pLr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),_Lr=o("not"),bLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=a("a"),vLr=o("from_pretrained()"),FLr=o(" to load the model weights."),TLr=l(),F(n3.$$.fragment),MLr=l(),Co=a("div"),F(Ak.$$.fragment),ELr=l(),U5e=a("p"),CLr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),wLr=l(),En=a("p"),ALr=o("The model class to instantiate is selected based on the "),H5e=a("code"),LLr=o("model_type"),yLr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),xLr=o("pretrained_model_name_or_path"),$Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(":"),RLr=l(),gt=a("ul"),s3=a("li"),K5e=a("strong"),PLr=o("beit"),BLr=o(" \u2014 "),vZ=a("a"),ILr=o("BeitForSemanticSegmentation"),NLr=o(" (BEiT model)"),qLr=l(),l3=a("li"),Z5e=a("strong"),jLr=o("data2vec-vision"),DLr=o(" \u2014 "),FZ=a("a"),GLr=o("Data2VecVisionForSemanticSegmentation"),OLr=o(" (Data2VecVision model)"),VLr=l(),i3=a("li"),e0e=a("strong"),XLr=o("dpt"),zLr=o(" \u2014 "),TZ=a("a"),QLr=o("DPTForSemanticSegmentation"),WLr=o(" (DPT model)"),ULr=l(),d3=a("li"),o0e=a("strong"),HLr=o("mobilevit"),JLr=o(" \u2014 "),MZ=a("a"),YLr=o("MobileViTForSemanticSegmentation"),KLr=o(" (MobileViT model)"),ZLr=l(),c3=a("li"),r0e=a("strong"),eyr=o("segformer"),oyr=o(" \u2014 "),EZ=a("a"),ryr=o("SegformerForSemanticSegmentation"),tyr=o(" (SegFormer model)"),ayr=l(),m3=a("p"),nyr=o("The model is set in evaluation mode by default using "),t0e=a("code"),syr=o("model.eval()"),lyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a0e=a("code"),iyr=o("model.train()"),dyr=l(),F(f3.$$.fragment),BZe=l(),jc=a("h2"),g3=a("a"),n0e=a("span"),F(Lk.$$.fragment),cyr=l(),s0e=a("span"),myr=o("AutoModelForInstanceSegmentation"),IZe=l(),nr=a("div"),F(yk.$$.fragment),fyr=l(),Dc=a("p"),gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),CZ=a("a"),hyr=o("from_pretrained()"),uyr=o(" class method or the "),wZ=a("a"),pyr=o("from_config()"),_yr=o(` class
method.`),byr=l(),xk=a("p"),vyr=o("This class cannot be instantiated directly using "),l0e=a("code"),Fyr=o("__init__()"),Tyr=o(" (throws an error)."),Myr=l(),Vt=a("div"),F($k.$$.fragment),Eyr=l(),i0e=a("p"),Cyr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),wyr=l(),Gc=a("p"),Ayr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),Lyr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),xyr=o("from_pretrained()"),$yr=o(" to load the model weights."),kyr=l(),F(h3.$$.fragment),Syr=l(),wo=a("div"),F(kk.$$.fragment),Ryr=l(),c0e=a("p"),Pyr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Byr=l(),Cn=a("p"),Iyr=o("The model class to instantiate is selected based on the "),m0e=a("code"),Nyr=o("model_type"),qyr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(":"),Vyr=l(),h0e=a("ul"),u3=a("li"),u0e=a("strong"),Xyr=o("maskformer"),zyr=o(" \u2014 "),LZ=a("a"),Qyr=o("MaskFormerForInstanceSegmentation"),Wyr=o(" (MaskFormer model)"),Uyr=l(),p3=a("p"),Hyr=o("The model is set in evaluation mode by default using "),p0e=a("code"),Jyr=o("model.eval()"),Yyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=a("code"),Kyr=o("model.train()"),Zyr=l(),F(_3.$$.fragment),NZe=l(),Oc=a("h2"),b3=a("a"),b0e=a("span"),F(Sk.$$.fragment),e8r=l(),v0e=a("span"),o8r=o("TFAutoModel"),qZe=l(),sr=a("div"),F(Rk.$$.fragment),r8r=l(),Vc=a("p"),t8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yZ=a("a"),a8r=o("from_pretrained()"),n8r=o(" class method or the "),xZ=a("a"),s8r=o("from_config()"),l8r=o(` class
method.`),i8r=l(),Pk=a("p"),d8r=o("This class cannot be instantiated directly using "),F0e=a("code"),c8r=o("__init__()"),m8r=o(" (throws an error)."),f8r=l(),Xt=a("div"),F(Bk.$$.fragment),g8r=l(),T0e=a("p"),h8r=o("Instantiates one of the base model classes of the library from a configuration."),u8r=l(),Xc=a("p"),p8r=o(`Note:
Loading a model from its configuration file does `),M0e=a("strong"),_8r=o("not"),b8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),v8r=o("from_pretrained()"),F8r=o(" to load the model weights."),T8r=l(),F(v3.$$.fragment),M8r=l(),Ir=a("div"),F(Ik.$$.fragment),E8r=l(),E0e=a("p"),C8r=o("Instantiate one of the base model classes of the library from a pretrained model."),w8r=l(),wn=a("p"),A8r=o("The model class to instantiate is selected based on the "),C0e=a("code"),L8r=o("model_type"),y8r=o(` property of the config object (either
passed as an argument or loaded from `),w0e=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),N=a("ul"),F3=a("li"),L0e=a("strong"),P8r=o("albert"),B8r=o(" \u2014 "),kZ=a("a"),I8r=o("TFAlbertModel"),N8r=o(" (ALBERT model)"),q8r=l(),T3=a("li"),y0e=a("strong"),j8r=o("bart"),D8r=o(" \u2014 "),SZ=a("a"),G8r=o("TFBartModel"),O8r=o(" (BART model)"),V8r=l(),M3=a("li"),x0e=a("strong"),X8r=o("bert"),z8r=o(" \u2014 "),RZ=a("a"),Q8r=o("TFBertModel"),W8r=o(" (BERT model)"),U8r=l(),E3=a("li"),$0e=a("strong"),H8r=o("blenderbot"),J8r=o(" \u2014 "),PZ=a("a"),Y8r=o("TFBlenderbotModel"),K8r=o(" (Blenderbot model)"),Z8r=l(),C3=a("li"),k0e=a("strong"),e9r=o("blenderbot-small"),o9r=o(" \u2014 "),BZ=a("a"),r9r=o("TFBlenderbotSmallModel"),t9r=o(" (BlenderbotSmall model)"),a9r=l(),w3=a("li"),S0e=a("strong"),n9r=o("camembert"),s9r=o(" \u2014 "),IZ=a("a"),l9r=o("TFCamembertModel"),i9r=o(" (CamemBERT model)"),d9r=l(),A3=a("li"),R0e=a("strong"),c9r=o("clip"),m9r=o(" \u2014 "),NZ=a("a"),f9r=o("TFCLIPModel"),g9r=o(" (CLIP model)"),h9r=l(),L3=a("li"),P0e=a("strong"),u9r=o("convbert"),p9r=o(" \u2014 "),qZ=a("a"),_9r=o("TFConvBertModel"),b9r=o(" (ConvBERT model)"),v9r=l(),y3=a("li"),B0e=a("strong"),F9r=o("convnext"),T9r=o(" \u2014 "),jZ=a("a"),M9r=o("TFConvNextModel"),E9r=o(" (ConvNeXT model)"),C9r=l(),x3=a("li"),I0e=a("strong"),w9r=o("ctrl"),A9r=o(" \u2014 "),DZ=a("a"),L9r=o("TFCTRLModel"),y9r=o(" (CTRL model)"),x9r=l(),$3=a("li"),N0e=a("strong"),$9r=o("data2vec-vision"),k9r=o(" \u2014 "),GZ=a("a"),S9r=o("TFData2VecVisionModel"),R9r=o(" (Data2VecVision model)"),P9r=l(),k3=a("li"),q0e=a("strong"),B9r=o("deberta"),I9r=o(" \u2014 "),OZ=a("a"),N9r=o("TFDebertaModel"),q9r=o(" (DeBERTa model)"),j9r=l(),S3=a("li"),j0e=a("strong"),D9r=o("deberta-v2"),G9r=o(" \u2014 "),VZ=a("a"),O9r=o("TFDebertaV2Model"),V9r=o(" (DeBERTa-v2 model)"),X9r=l(),R3=a("li"),D0e=a("strong"),z9r=o("deit"),Q9r=o(" \u2014 "),XZ=a("a"),W9r=o("TFDeiTModel"),U9r=o(" (DeiT model)"),H9r=l(),P3=a("li"),G0e=a("strong"),J9r=o("distilbert"),Y9r=o(" \u2014 "),zZ=a("a"),K9r=o("TFDistilBertModel"),Z9r=o(" (DistilBERT model)"),exr=l(),B3=a("li"),O0e=a("strong"),oxr=o("dpr"),rxr=o(" \u2014 "),QZ=a("a"),txr=o("TFDPRQuestionEncoder"),axr=o(" (DPR model)"),nxr=l(),I3=a("li"),V0e=a("strong"),sxr=o("electra"),lxr=o(" \u2014 "),WZ=a("a"),ixr=o("TFElectraModel"),dxr=o(" (ELECTRA model)"),cxr=l(),N3=a("li"),X0e=a("strong"),mxr=o("flaubert"),fxr=o(" \u2014 "),UZ=a("a"),gxr=o("TFFlaubertModel"),hxr=o(" (FlauBERT model)"),uxr=l(),Fl=a("li"),z0e=a("strong"),pxr=o("funnel"),_xr=o(" \u2014 "),HZ=a("a"),bxr=o("TFFunnelModel"),vxr=o(" or "),JZ=a("a"),Fxr=o("TFFunnelBaseModel"),Txr=o(" (Funnel Transformer model)"),Mxr=l(),q3=a("li"),Q0e=a("strong"),Exr=o("gpt2"),Cxr=o(" \u2014 "),YZ=a("a"),wxr=o("TFGPT2Model"),Axr=o(" (OpenAI GPT-2 model)"),Lxr=l(),j3=a("li"),W0e=a("strong"),yxr=o("gptj"),xxr=o(" \u2014 "),KZ=a("a"),$xr=o("TFGPTJModel"),kxr=o(" (GPT-J model)"),Sxr=l(),D3=a("li"),U0e=a("strong"),Rxr=o("hubert"),Pxr=o(" \u2014 "),ZZ=a("a"),Bxr=o("TFHubertModel"),Ixr=o(" (Hubert model)"),Nxr=l(),G3=a("li"),H0e=a("strong"),qxr=o("layoutlm"),jxr=o(" \u2014 "),eee=a("a"),Dxr=o("TFLayoutLMModel"),Gxr=o(" (LayoutLM model)"),Oxr=l(),O3=a("li"),J0e=a("strong"),Vxr=o("layoutlmv3"),Xxr=o(" \u2014 "),oee=a("a"),zxr=o("TFLayoutLMv3Model"),Qxr=o(" (LayoutLMv3 model)"),Wxr=l(),V3=a("li"),Y0e=a("strong"),Uxr=o("led"),Hxr=o(" \u2014 "),ree=a("a"),Jxr=o("TFLEDModel"),Yxr=o(" (LED model)"),Kxr=l(),X3=a("li"),K0e=a("strong"),Zxr=o("longformer"),e$r=o(" \u2014 "),tee=a("a"),o$r=o("TFLongformerModel"),r$r=o(" (Longformer model)"),t$r=l(),z3=a("li"),Z0e=a("strong"),a$r=o("lxmert"),n$r=o(" \u2014 "),aee=a("a"),s$r=o("TFLxmertModel"),l$r=o(" (LXMERT model)"),i$r=l(),Q3=a("li"),ewe=a("strong"),d$r=o("marian"),c$r=o(" \u2014 "),nee=a("a"),m$r=o("TFMarianModel"),f$r=o(" (Marian model)"),g$r=l(),W3=a("li"),owe=a("strong"),h$r=o("mbart"),u$r=o(" \u2014 "),see=a("a"),p$r=o("TFMBartModel"),_$r=o(" (mBART model)"),b$r=l(),U3=a("li"),rwe=a("strong"),v$r=o("mobilebert"),F$r=o(" \u2014 "),lee=a("a"),T$r=o("TFMobileBertModel"),M$r=o(" (MobileBERT model)"),E$r=l(),H3=a("li"),twe=a("strong"),C$r=o("mobilevit"),w$r=o(" \u2014 "),iee=a("a"),A$r=o("TFMobileViTModel"),L$r=o(" (MobileViT model)"),y$r=l(),J3=a("li"),awe=a("strong"),x$r=o("mpnet"),$$r=o(" \u2014 "),dee=a("a"),k$r=o("TFMPNetModel"),S$r=o(" (MPNet model)"),R$r=l(),Y3=a("li"),nwe=a("strong"),P$r=o("mt5"),B$r=o(" \u2014 "),cee=a("a"),I$r=o("TFMT5Model"),N$r=o(" (MT5 model)"),q$r=l(),K3=a("li"),swe=a("strong"),j$r=o("openai-gpt"),D$r=o(" \u2014 "),mee=a("a"),G$r=o("TFOpenAIGPTModel"),O$r=o(" (OpenAI GPT model)"),V$r=l(),Z3=a("li"),lwe=a("strong"),X$r=o("opt"),z$r=o(" \u2014 "),fee=a("a"),Q$r=o("TFOPTModel"),W$r=o(" (OPT model)"),U$r=l(),e5=a("li"),iwe=a("strong"),H$r=o("pegasus"),J$r=o(" \u2014 "),gee=a("a"),Y$r=o("TFPegasusModel"),K$r=o(" (Pegasus model)"),Z$r=l(),o5=a("li"),dwe=a("strong"),ekr=o("regnet"),okr=o(" \u2014 "),hee=a("a"),rkr=o("TFRegNetModel"),tkr=o(" (RegNet model)"),akr=l(),r5=a("li"),cwe=a("strong"),nkr=o("rembert"),skr=o(" \u2014 "),uee=a("a"),lkr=o("TFRemBertModel"),ikr=o(" (RemBERT model)"),dkr=l(),t5=a("li"),mwe=a("strong"),ckr=o("resnet"),mkr=o(" \u2014 "),pee=a("a"),fkr=o("TFResNetModel"),gkr=o(" (ResNet model)"),hkr=l(),a5=a("li"),fwe=a("strong"),ukr=o("roberta"),pkr=o(" \u2014 "),_ee=a("a"),_kr=o("TFRobertaModel"),bkr=o(" (RoBERTa model)"),vkr=l(),n5=a("li"),gwe=a("strong"),Fkr=o("roformer"),Tkr=o(" \u2014 "),bee=a("a"),Mkr=o("TFRoFormerModel"),Ekr=o(" (RoFormer model)"),Ckr=l(),s5=a("li"),hwe=a("strong"),wkr=o("segformer"),Akr=o(" \u2014 "),vee=a("a"),Lkr=o("TFSegformerModel"),ykr=o(" (SegFormer model)"),xkr=l(),l5=a("li"),uwe=a("strong"),$kr=o("speech_to_text"),kkr=o(" \u2014 "),Fee=a("a"),Skr=o("TFSpeech2TextModel"),Rkr=o(" (Speech2Text model)"),Pkr=l(),i5=a("li"),pwe=a("strong"),Bkr=o("swin"),Ikr=o(" \u2014 "),Tee=a("a"),Nkr=o("TFSwinModel"),qkr=o(" (Swin Transformer model)"),jkr=l(),d5=a("li"),_we=a("strong"),Dkr=o("t5"),Gkr=o(" \u2014 "),Mee=a("a"),Okr=o("TFT5Model"),Vkr=o(" (T5 model)"),Xkr=l(),c5=a("li"),bwe=a("strong"),zkr=o("tapas"),Qkr=o(" \u2014 "),Eee=a("a"),Wkr=o("TFTapasModel"),Ukr=o(" (TAPAS model)"),Hkr=l(),m5=a("li"),vwe=a("strong"),Jkr=o("transfo-xl"),Ykr=o(" \u2014 "),Cee=a("a"),Kkr=o("TFTransfoXLModel"),Zkr=o(" (Transformer-XL model)"),eSr=l(),f5=a("li"),Fwe=a("strong"),oSr=o("vit"),rSr=o(" \u2014 "),wee=a("a"),tSr=o("TFViTModel"),aSr=o(" (ViT model)"),nSr=l(),g5=a("li"),Twe=a("strong"),sSr=o("vit_mae"),lSr=o(" \u2014 "),Aee=a("a"),iSr=o("TFViTMAEModel"),dSr=o(" (ViTMAE model)"),cSr=l(),h5=a("li"),Mwe=a("strong"),mSr=o("wav2vec2"),fSr=o(" \u2014 "),Lee=a("a"),gSr=o("TFWav2Vec2Model"),hSr=o(" (Wav2Vec2 model)"),uSr=l(),u5=a("li"),Ewe=a("strong"),pSr=o("xglm"),_Sr=o(" \u2014 "),yee=a("a"),bSr=o("TFXGLMModel"),vSr=o(" (XGLM model)"),FSr=l(),p5=a("li"),Cwe=a("strong"),TSr=o("xlm"),MSr=o(" \u2014 "),xee=a("a"),ESr=o("TFXLMModel"),CSr=o(" (XLM model)"),wSr=l(),_5=a("li"),wwe=a("strong"),ASr=o("xlm-roberta"),LSr=o(" \u2014 "),$ee=a("a"),ySr=o("TFXLMRobertaModel"),xSr=o(" (XLM-RoBERTa model)"),$Sr=l(),b5=a("li"),Awe=a("strong"),kSr=o("xlnet"),SSr=o(" \u2014 "),kee=a("a"),RSr=o("TFXLNetModel"),PSr=o(" (XLNet model)"),BSr=l(),F(v5.$$.fragment),jZe=l(),zc=a("h2"),F5=a("a"),Lwe=a("span"),F(Nk.$$.fragment),ISr=l(),ywe=a("span"),NSr=o("TFAutoModelForPreTraining"),DZe=l(),lr=a("div"),F(qk.$$.fragment),qSr=l(),Qc=a("p"),jSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),See=a("a"),DSr=o("from_pretrained()"),GSr=o(" class method or the "),Ree=a("a"),OSr=o("from_config()"),VSr=o(` class
method.`),XSr=l(),jk=a("p"),zSr=o("This class cannot be instantiated directly using "),xwe=a("code"),QSr=o("__init__()"),WSr=o(" (throws an error)."),USr=l(),zt=a("div"),F(Dk.$$.fragment),HSr=l(),$we=a("p"),JSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YSr=l(),Wc=a("p"),KSr=o(`Note:
Loading a model from its configuration file does `),kwe=a("strong"),ZSr=o("not"),eRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("a"),oRr=o("from_pretrained()"),rRr=o(" to load the model weights."),tRr=l(),F(T5.$$.fragment),aRr=l(),Nr=a("div"),F(Gk.$$.fragment),nRr=l(),Swe=a("p"),sRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lRr=l(),An=a("p"),iRr=o("The model class to instantiate is selected based on the "),Rwe=a("code"),dRr=o("model_type"),cRr=o(` property of the config object (either
passed as an argument or loaded from `),Pwe=a("code"),mRr=o("pretrained_model_name_or_path"),fRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=a("code"),gRr=o("pretrained_model_name_or_path"),hRr=o(":"),uRr=l(),se=a("ul"),M5=a("li"),Iwe=a("strong"),pRr=o("albert"),_Rr=o(" \u2014 "),Bee=a("a"),bRr=o("TFAlbertForPreTraining"),vRr=o(" (ALBERT model)"),FRr=l(),E5=a("li"),Nwe=a("strong"),TRr=o("bart"),MRr=o(" \u2014 "),Iee=a("a"),ERr=o("TFBartForConditionalGeneration"),CRr=o(" (BART model)"),wRr=l(),C5=a("li"),qwe=a("strong"),ARr=o("bert"),LRr=o(" \u2014 "),Nee=a("a"),yRr=o("TFBertForPreTraining"),xRr=o(" (BERT model)"),$Rr=l(),w5=a("li"),jwe=a("strong"),kRr=o("camembert"),SRr=o(" \u2014 "),qee=a("a"),RRr=o("TFCamembertForMaskedLM"),PRr=o(" (CamemBERT model)"),BRr=l(),A5=a("li"),Dwe=a("strong"),IRr=o("ctrl"),NRr=o(" \u2014 "),jee=a("a"),qRr=o("TFCTRLLMHeadModel"),jRr=o(" (CTRL model)"),DRr=l(),L5=a("li"),Gwe=a("strong"),GRr=o("distilbert"),ORr=o(" \u2014 "),Dee=a("a"),VRr=o("TFDistilBertForMaskedLM"),XRr=o(" (DistilBERT model)"),zRr=l(),y5=a("li"),Owe=a("strong"),QRr=o("electra"),WRr=o(" \u2014 "),Gee=a("a"),URr=o("TFElectraForPreTraining"),HRr=o(" (ELECTRA model)"),JRr=l(),x5=a("li"),Vwe=a("strong"),YRr=o("flaubert"),KRr=o(" \u2014 "),Oee=a("a"),ZRr=o("TFFlaubertWithLMHeadModel"),ePr=o(" (FlauBERT model)"),oPr=l(),$5=a("li"),Xwe=a("strong"),rPr=o("funnel"),tPr=o(" \u2014 "),Vee=a("a"),aPr=o("TFFunnelForPreTraining"),nPr=o(" (Funnel Transformer model)"),sPr=l(),k5=a("li"),zwe=a("strong"),lPr=o("gpt2"),iPr=o(" \u2014 "),Xee=a("a"),dPr=o("TFGPT2LMHeadModel"),cPr=o(" (OpenAI GPT-2 model)"),mPr=l(),S5=a("li"),Qwe=a("strong"),fPr=o("layoutlm"),gPr=o(" \u2014 "),zee=a("a"),hPr=o("TFLayoutLMForMaskedLM"),uPr=o(" (LayoutLM model)"),pPr=l(),R5=a("li"),Wwe=a("strong"),_Pr=o("lxmert"),bPr=o(" \u2014 "),Qee=a("a"),vPr=o("TFLxmertForPreTraining"),FPr=o(" (LXMERT model)"),TPr=l(),P5=a("li"),Uwe=a("strong"),MPr=o("mobilebert"),EPr=o(" \u2014 "),Wee=a("a"),CPr=o("TFMobileBertForPreTraining"),wPr=o(" (MobileBERT model)"),APr=l(),B5=a("li"),Hwe=a("strong"),LPr=o("mpnet"),yPr=o(" \u2014 "),Uee=a("a"),xPr=o("TFMPNetForMaskedLM"),$Pr=o(" (MPNet model)"),kPr=l(),I5=a("li"),Jwe=a("strong"),SPr=o("openai-gpt"),RPr=o(" \u2014 "),Hee=a("a"),PPr=o("TFOpenAIGPTLMHeadModel"),BPr=o(" (OpenAI GPT model)"),IPr=l(),N5=a("li"),Ywe=a("strong"),NPr=o("roberta"),qPr=o(" \u2014 "),Jee=a("a"),jPr=o("TFRobertaForMaskedLM"),DPr=o(" (RoBERTa model)"),GPr=l(),q5=a("li"),Kwe=a("strong"),OPr=o("t5"),VPr=o(" \u2014 "),Yee=a("a"),XPr=o("TFT5ForConditionalGeneration"),zPr=o(" (T5 model)"),QPr=l(),j5=a("li"),Zwe=a("strong"),WPr=o("tapas"),UPr=o(" \u2014 "),Kee=a("a"),HPr=o("TFTapasForMaskedLM"),JPr=o(" (TAPAS model)"),YPr=l(),D5=a("li"),eAe=a("strong"),KPr=o("transfo-xl"),ZPr=o(" \u2014 "),Zee=a("a"),eBr=o("TFTransfoXLLMHeadModel"),oBr=o(" (Transformer-XL model)"),rBr=l(),G5=a("li"),oAe=a("strong"),tBr=o("vit_mae"),aBr=o(" \u2014 "),eoe=a("a"),nBr=o("TFViTMAEForPreTraining"),sBr=o(" (ViTMAE model)"),lBr=l(),O5=a("li"),rAe=a("strong"),iBr=o("xlm"),dBr=o(" \u2014 "),ooe=a("a"),cBr=o("TFXLMWithLMHeadModel"),mBr=o(" (XLM model)"),fBr=l(),V5=a("li"),tAe=a("strong"),gBr=o("xlm-roberta"),hBr=o(" \u2014 "),roe=a("a"),uBr=o("TFXLMRobertaForMaskedLM"),pBr=o(" (XLM-RoBERTa model)"),_Br=l(),X5=a("li"),aAe=a("strong"),bBr=o("xlnet"),vBr=o(" \u2014 "),toe=a("a"),FBr=o("TFXLNetLMHeadModel"),TBr=o(" (XLNet model)"),MBr=l(),F(z5.$$.fragment),GZe=l(),Uc=a("h2"),Q5=a("a"),nAe=a("span"),F(Ok.$$.fragment),EBr=l(),sAe=a("span"),CBr=o("TFAutoModelForCausalLM"),OZe=l(),ir=a("div"),F(Vk.$$.fragment),wBr=l(),Hc=a("p"),ABr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aoe=a("a"),LBr=o("from_pretrained()"),yBr=o(" class method or the "),noe=a("a"),xBr=o("from_config()"),$Br=o(` class
method.`),kBr=l(),Xk=a("p"),SBr=o("This class cannot be instantiated directly using "),lAe=a("code"),RBr=o("__init__()"),PBr=o(" (throws an error)."),BBr=l(),Qt=a("div"),F(zk.$$.fragment),IBr=l(),iAe=a("p"),NBr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qBr=l(),Jc=a("p"),jBr=o(`Note:
Loading a model from its configuration file does `),dAe=a("strong"),DBr=o("not"),GBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),OBr=o("from_pretrained()"),VBr=o(" to load the model weights."),XBr=l(),F(W5.$$.fragment),zBr=l(),qr=a("div"),F(Qk.$$.fragment),QBr=l(),cAe=a("p"),WBr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),UBr=l(),Ln=a("p"),HBr=o("The model class to instantiate is selected based on the "),mAe=a("code"),JBr=o("model_type"),YBr=o(` property of the config object (either
passed as an argument or loaded from `),fAe=a("code"),KBr=o("pretrained_model_name_or_path"),ZBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=a("code"),eIr=o("pretrained_model_name_or_path"),oIr=o(":"),rIr=l(),Me=a("ul"),U5=a("li"),hAe=a("strong"),tIr=o("bert"),aIr=o(" \u2014 "),loe=a("a"),nIr=o("TFBertLMHeadModel"),sIr=o(" (BERT model)"),lIr=l(),H5=a("li"),uAe=a("strong"),iIr=o("camembert"),dIr=o(" \u2014 "),ioe=a("a"),cIr=o("TFCamembertForCausalLM"),mIr=o(" (CamemBERT model)"),fIr=l(),J5=a("li"),pAe=a("strong"),gIr=o("ctrl"),hIr=o(" \u2014 "),doe=a("a"),uIr=o("TFCTRLLMHeadModel"),pIr=o(" (CTRL model)"),_Ir=l(),Y5=a("li"),_Ae=a("strong"),bIr=o("gpt2"),vIr=o(" \u2014 "),coe=a("a"),FIr=o("TFGPT2LMHeadModel"),TIr=o(" (OpenAI GPT-2 model)"),MIr=l(),K5=a("li"),bAe=a("strong"),EIr=o("gptj"),CIr=o(" \u2014 "),moe=a("a"),wIr=o("TFGPTJForCausalLM"),AIr=o(" (GPT-J model)"),LIr=l(),Z5=a("li"),vAe=a("strong"),yIr=o("openai-gpt"),xIr=o(" \u2014 "),foe=a("a"),$Ir=o("TFOpenAIGPTLMHeadModel"),kIr=o(" (OpenAI GPT model)"),SIr=l(),e0=a("li"),FAe=a("strong"),RIr=o("opt"),PIr=o(" \u2014 "),goe=a("a"),BIr=o("TFOPTForCausalLM"),IIr=o(" (OPT model)"),NIr=l(),o0=a("li"),TAe=a("strong"),qIr=o("rembert"),jIr=o(" \u2014 "),hoe=a("a"),DIr=o("TFRemBertForCausalLM"),GIr=o(" (RemBERT model)"),OIr=l(),r0=a("li"),MAe=a("strong"),VIr=o("roberta"),XIr=o(" \u2014 "),uoe=a("a"),zIr=o("TFRobertaForCausalLM"),QIr=o(" (RoBERTa model)"),WIr=l(),t0=a("li"),EAe=a("strong"),UIr=o("roformer"),HIr=o(" \u2014 "),poe=a("a"),JIr=o("TFRoFormerForCausalLM"),YIr=o(" (RoFormer model)"),KIr=l(),a0=a("li"),CAe=a("strong"),ZIr=o("transfo-xl"),eNr=o(" \u2014 "),_oe=a("a"),oNr=o("TFTransfoXLLMHeadModel"),rNr=o(" (Transformer-XL model)"),tNr=l(),n0=a("li"),wAe=a("strong"),aNr=o("xglm"),nNr=o(" \u2014 "),boe=a("a"),sNr=o("TFXGLMForCausalLM"),lNr=o(" (XGLM model)"),iNr=l(),s0=a("li"),AAe=a("strong"),dNr=o("xlm"),cNr=o(" \u2014 "),voe=a("a"),mNr=o("TFXLMWithLMHeadModel"),fNr=o(" (XLM model)"),gNr=l(),l0=a("li"),LAe=a("strong"),hNr=o("xlnet"),uNr=o(" \u2014 "),Foe=a("a"),pNr=o("TFXLNetLMHeadModel"),_Nr=o(" (XLNet model)"),bNr=l(),F(i0.$$.fragment),VZe=l(),Yc=a("h2"),d0=a("a"),yAe=a("span"),F(Wk.$$.fragment),vNr=l(),xAe=a("span"),FNr=o("TFAutoModelForImageClassification"),XZe=l(),dr=a("div"),F(Uk.$$.fragment),TNr=l(),Kc=a("p"),MNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Toe=a("a"),ENr=o("from_pretrained()"),CNr=o(" class method or the "),Moe=a("a"),wNr=o("from_config()"),ANr=o(` class
method.`),LNr=l(),Hk=a("p"),yNr=o("This class cannot be instantiated directly using "),$Ae=a("code"),xNr=o("__init__()"),$Nr=o(" (throws an error)."),kNr=l(),Wt=a("div"),F(Jk.$$.fragment),SNr=l(),kAe=a("p"),RNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PNr=l(),Zc=a("p"),BNr=o(`Note:
Loading a model from its configuration file does `),SAe=a("strong"),INr=o("not"),NNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=a("a"),qNr=o("from_pretrained()"),jNr=o(" to load the model weights."),DNr=l(),F(c0.$$.fragment),GNr=l(),jr=a("div"),F(Yk.$$.fragment),ONr=l(),RAe=a("p"),VNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XNr=l(),yn=a("p"),zNr=o("The model class to instantiate is selected based on the "),PAe=a("code"),QNr=o("model_type"),WNr=o(` property of the config object (either
passed as an argument or loaded from `),BAe=a("code"),UNr=o("pretrained_model_name_or_path"),HNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=a("code"),JNr=o("pretrained_model_name_or_path"),YNr=o(":"),KNr=l(),Be=a("ul"),m0=a("li"),NAe=a("strong"),ZNr=o("convnext"),eqr=o(" \u2014 "),Coe=a("a"),oqr=o("TFConvNextForImageClassification"),rqr=o(" (ConvNeXT model)"),tqr=l(),f0=a("li"),qAe=a("strong"),aqr=o("data2vec-vision"),nqr=o(" \u2014 "),woe=a("a"),sqr=o("TFData2VecVisionForImageClassification"),lqr=o(" (Data2VecVision model)"),iqr=l(),Tl=a("li"),jAe=a("strong"),dqr=o("deit"),cqr=o(" \u2014 "),Aoe=a("a"),mqr=o("TFDeiTForImageClassification"),fqr=o(" or "),Loe=a("a"),gqr=o("TFDeiTForImageClassificationWithTeacher"),hqr=o(" (DeiT model)"),uqr=l(),g0=a("li"),DAe=a("strong"),pqr=o("mobilevit"),_qr=o(" \u2014 "),yoe=a("a"),bqr=o("TFMobileViTForImageClassification"),vqr=o(" (MobileViT model)"),Fqr=l(),h0=a("li"),GAe=a("strong"),Tqr=o("regnet"),Mqr=o(" \u2014 "),xoe=a("a"),Eqr=o("TFRegNetForImageClassification"),Cqr=o(" (RegNet model)"),wqr=l(),u0=a("li"),OAe=a("strong"),Aqr=o("resnet"),Lqr=o(" \u2014 "),$oe=a("a"),yqr=o("TFResNetForImageClassification"),xqr=o(" (ResNet model)"),$qr=l(),p0=a("li"),VAe=a("strong"),kqr=o("segformer"),Sqr=o(" \u2014 "),koe=a("a"),Rqr=o("TFSegformerForImageClassification"),Pqr=o(" (SegFormer model)"),Bqr=l(),_0=a("li"),XAe=a("strong"),Iqr=o("swin"),Nqr=o(" \u2014 "),Soe=a("a"),qqr=o("TFSwinForImageClassification"),jqr=o(" (Swin Transformer model)"),Dqr=l(),b0=a("li"),zAe=a("strong"),Gqr=o("vit"),Oqr=o(" \u2014 "),Roe=a("a"),Vqr=o("TFViTForImageClassification"),Xqr=o(" (ViT model)"),zqr=l(),F(v0.$$.fragment),zZe=l(),em=a("h2"),F0=a("a"),QAe=a("span"),F(Kk.$$.fragment),Qqr=l(),WAe=a("span"),Wqr=o("TFAutoModelForSemanticSegmentation"),QZe=l(),cr=a("div"),F(Zk.$$.fragment),Uqr=l(),om=a("p"),Hqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Poe=a("a"),Jqr=o("from_pretrained()"),Yqr=o(" class method or the "),Boe=a("a"),Kqr=o("from_config()"),Zqr=o(` class
method.`),ejr=l(),eS=a("p"),ojr=o("This class cannot be instantiated directly using "),UAe=a("code"),rjr=o("__init__()"),tjr=o(" (throws an error)."),ajr=l(),Ut=a("div"),F(oS.$$.fragment),njr=l(),HAe=a("p"),sjr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ljr=l(),rm=a("p"),ijr=o(`Note:
Loading a model from its configuration file does `),JAe=a("strong"),djr=o("not"),cjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=a("a"),mjr=o("from_pretrained()"),fjr=o(" to load the model weights."),gjr=l(),F(T0.$$.fragment),hjr=l(),Dr=a("div"),F(rS.$$.fragment),ujr=l(),YAe=a("p"),pjr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_jr=l(),xn=a("p"),bjr=o("The model class to instantiate is selected based on the "),KAe=a("code"),vjr=o("model_type"),Fjr=o(` property of the config object (either
passed as an argument or loaded from `),ZAe=a("code"),Tjr=o("pretrained_model_name_or_path"),Mjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(":"),wjr=l(),tm=a("ul"),M0=a("li"),o6e=a("strong"),Ajr=o("data2vec-vision"),Ljr=o(" \u2014 "),Noe=a("a"),yjr=o("TFData2VecVisionForSemanticSegmentation"),xjr=o(" (Data2VecVision model)"),$jr=l(),E0=a("li"),r6e=a("strong"),kjr=o("mobilevit"),Sjr=o(" \u2014 "),qoe=a("a"),Rjr=o("TFMobileViTForSemanticSegmentation"),Pjr=o(" (MobileViT model)"),Bjr=l(),C0=a("li"),t6e=a("strong"),Ijr=o("segformer"),Njr=o(" \u2014 "),joe=a("a"),qjr=o("TFSegformerForSemanticSegmentation"),jjr=o(" (SegFormer model)"),Djr=l(),F(w0.$$.fragment),WZe=l(),am=a("h2"),A0=a("a"),a6e=a("span"),F(tS.$$.fragment),Gjr=l(),n6e=a("span"),Ojr=o("TFAutoModelForMaskedLM"),UZe=l(),mr=a("div"),F(aS.$$.fragment),Vjr=l(),nm=a("p"),Xjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Doe=a("a"),zjr=o("from_pretrained()"),Qjr=o(" class method or the "),Goe=a("a"),Wjr=o("from_config()"),Ujr=o(` class
method.`),Hjr=l(),nS=a("p"),Jjr=o("This class cannot be instantiated directly using "),s6e=a("code"),Yjr=o("__init__()"),Kjr=o(" (throws an error)."),Zjr=l(),Ht=a("div"),F(sS.$$.fragment),eDr=l(),l6e=a("p"),oDr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rDr=l(),sm=a("p"),tDr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),aDr=o("not"),nDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),sDr=o("from_pretrained()"),lDr=o(" to load the model weights."),iDr=l(),F(L0.$$.fragment),dDr=l(),Gr=a("div"),F(lS.$$.fragment),cDr=l(),d6e=a("p"),mDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fDr=l(),$n=a("p"),gDr=o("The model class to instantiate is selected based on the "),c6e=a("code"),hDr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),pDr=o("pretrained_model_name_or_path"),_Dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(":"),FDr=l(),fe=a("ul"),y0=a("li"),g6e=a("strong"),TDr=o("albert"),MDr=o(" \u2014 "),Voe=a("a"),EDr=o("TFAlbertForMaskedLM"),CDr=o(" (ALBERT model)"),wDr=l(),x0=a("li"),h6e=a("strong"),ADr=o("bert"),LDr=o(" \u2014 "),Xoe=a("a"),yDr=o("TFBertForMaskedLM"),xDr=o(" (BERT model)"),$Dr=l(),$0=a("li"),u6e=a("strong"),kDr=o("camembert"),SDr=o(" \u2014 "),zoe=a("a"),RDr=o("TFCamembertForMaskedLM"),PDr=o(" (CamemBERT model)"),BDr=l(),k0=a("li"),p6e=a("strong"),IDr=o("convbert"),NDr=o(" \u2014 "),Qoe=a("a"),qDr=o("TFConvBertForMaskedLM"),jDr=o(" (ConvBERT model)"),DDr=l(),S0=a("li"),_6e=a("strong"),GDr=o("deberta"),ODr=o(" \u2014 "),Woe=a("a"),VDr=o("TFDebertaForMaskedLM"),XDr=o(" (DeBERTa model)"),zDr=l(),R0=a("li"),b6e=a("strong"),QDr=o("deberta-v2"),WDr=o(" \u2014 "),Uoe=a("a"),UDr=o("TFDebertaV2ForMaskedLM"),HDr=o(" (DeBERTa-v2 model)"),JDr=l(),P0=a("li"),v6e=a("strong"),YDr=o("distilbert"),KDr=o(" \u2014 "),Hoe=a("a"),ZDr=o("TFDistilBertForMaskedLM"),eGr=o(" (DistilBERT model)"),oGr=l(),B0=a("li"),F6e=a("strong"),rGr=o("electra"),tGr=o(" \u2014 "),Joe=a("a"),aGr=o("TFElectraForMaskedLM"),nGr=o(" (ELECTRA model)"),sGr=l(),I0=a("li"),T6e=a("strong"),lGr=o("flaubert"),iGr=o(" \u2014 "),Yoe=a("a"),dGr=o("TFFlaubertWithLMHeadModel"),cGr=o(" (FlauBERT model)"),mGr=l(),N0=a("li"),M6e=a("strong"),fGr=o("funnel"),gGr=o(" \u2014 "),Koe=a("a"),hGr=o("TFFunnelForMaskedLM"),uGr=o(" (Funnel Transformer model)"),pGr=l(),q0=a("li"),E6e=a("strong"),_Gr=o("layoutlm"),bGr=o(" \u2014 "),Zoe=a("a"),vGr=o("TFLayoutLMForMaskedLM"),FGr=o(" (LayoutLM model)"),TGr=l(),j0=a("li"),C6e=a("strong"),MGr=o("longformer"),EGr=o(" \u2014 "),ere=a("a"),CGr=o("TFLongformerForMaskedLM"),wGr=o(" (Longformer model)"),AGr=l(),D0=a("li"),w6e=a("strong"),LGr=o("mobilebert"),yGr=o(" \u2014 "),ore=a("a"),xGr=o("TFMobileBertForMaskedLM"),$Gr=o(" (MobileBERT model)"),kGr=l(),G0=a("li"),A6e=a("strong"),SGr=o("mpnet"),RGr=o(" \u2014 "),rre=a("a"),PGr=o("TFMPNetForMaskedLM"),BGr=o(" (MPNet model)"),IGr=l(),O0=a("li"),L6e=a("strong"),NGr=o("rembert"),qGr=o(" \u2014 "),tre=a("a"),jGr=o("TFRemBertForMaskedLM"),DGr=o(" (RemBERT model)"),GGr=l(),V0=a("li"),y6e=a("strong"),OGr=o("roberta"),VGr=o(" \u2014 "),are=a("a"),XGr=o("TFRobertaForMaskedLM"),zGr=o(" (RoBERTa model)"),QGr=l(),X0=a("li"),x6e=a("strong"),WGr=o("roformer"),UGr=o(" \u2014 "),nre=a("a"),HGr=o("TFRoFormerForMaskedLM"),JGr=o(" (RoFormer model)"),YGr=l(),z0=a("li"),$6e=a("strong"),KGr=o("tapas"),ZGr=o(" \u2014 "),sre=a("a"),eOr=o("TFTapasForMaskedLM"),oOr=o(" (TAPAS model)"),rOr=l(),Q0=a("li"),k6e=a("strong"),tOr=o("xlm"),aOr=o(" \u2014 "),lre=a("a"),nOr=o("TFXLMWithLMHeadModel"),sOr=o(" (XLM model)"),lOr=l(),W0=a("li"),S6e=a("strong"),iOr=o("xlm-roberta"),dOr=o(" \u2014 "),ire=a("a"),cOr=o("TFXLMRobertaForMaskedLM"),mOr=o(" (XLM-RoBERTa model)"),fOr=l(),F(U0.$$.fragment),HZe=l(),lm=a("h2"),H0=a("a"),R6e=a("span"),F(iS.$$.fragment),gOr=l(),P6e=a("span"),hOr=o("TFAutoModelForSeq2SeqLM"),JZe=l(),fr=a("div"),F(dS.$$.fragment),uOr=l(),im=a("p"),pOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dre=a("a"),_Or=o("from_pretrained()"),bOr=o(" class method or the "),cre=a("a"),vOr=o("from_config()"),FOr=o(` class
method.`),TOr=l(),cS=a("p"),MOr=o("This class cannot be instantiated directly using "),B6e=a("code"),EOr=o("__init__()"),COr=o(" (throws an error)."),wOr=l(),Jt=a("div"),F(mS.$$.fragment),AOr=l(),I6e=a("p"),LOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yOr=l(),dm=a("p"),xOr=o(`Note:
Loading a model from its configuration file does `),N6e=a("strong"),$Or=o("not"),kOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),SOr=o("from_pretrained()"),ROr=o(" to load the model weights."),POr=l(),F(J0.$$.fragment),BOr=l(),Or=a("div"),F(fS.$$.fragment),IOr=l(),q6e=a("p"),NOr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qOr=l(),kn=a("p"),jOr=o("The model class to instantiate is selected based on the "),j6e=a("code"),DOr=o("model_type"),GOr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),OOr=o("pretrained_model_name_or_path"),VOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),XOr=o("pretrained_model_name_or_path"),zOr=o(":"),QOr=l(),ye=a("ul"),Y0=a("li"),O6e=a("strong"),WOr=o("bart"),UOr=o(" \u2014 "),fre=a("a"),HOr=o("TFBartForConditionalGeneration"),JOr=o(" (BART model)"),YOr=l(),K0=a("li"),V6e=a("strong"),KOr=o("blenderbot"),ZOr=o(" \u2014 "),gre=a("a"),eVr=o("TFBlenderbotForConditionalGeneration"),oVr=o(" (Blenderbot model)"),rVr=l(),Z0=a("li"),X6e=a("strong"),tVr=o("blenderbot-small"),aVr=o(" \u2014 "),hre=a("a"),nVr=o("TFBlenderbotSmallForConditionalGeneration"),sVr=o(" (BlenderbotSmall model)"),lVr=l(),ew=a("li"),z6e=a("strong"),iVr=o("encoder-decoder"),dVr=o(" \u2014 "),ure=a("a"),cVr=o("TFEncoderDecoderModel"),mVr=o(" (Encoder decoder model)"),fVr=l(),ow=a("li"),Q6e=a("strong"),gVr=o("led"),hVr=o(" \u2014 "),pre=a("a"),uVr=o("TFLEDForConditionalGeneration"),pVr=o(" (LED model)"),_Vr=l(),rw=a("li"),W6e=a("strong"),bVr=o("marian"),vVr=o(" \u2014 "),_re=a("a"),FVr=o("TFMarianMTModel"),TVr=o(" (Marian model)"),MVr=l(),tw=a("li"),U6e=a("strong"),EVr=o("mbart"),CVr=o(" \u2014 "),bre=a("a"),wVr=o("TFMBartForConditionalGeneration"),AVr=o(" (mBART model)"),LVr=l(),aw=a("li"),H6e=a("strong"),yVr=o("mt5"),xVr=o(" \u2014 "),vre=a("a"),$Vr=o("TFMT5ForConditionalGeneration"),kVr=o(" (MT5 model)"),SVr=l(),nw=a("li"),J6e=a("strong"),RVr=o("pegasus"),PVr=o(" \u2014 "),Fre=a("a"),BVr=o("TFPegasusForConditionalGeneration"),IVr=o(" (Pegasus model)"),NVr=l(),sw=a("li"),Y6e=a("strong"),qVr=o("t5"),jVr=o(" \u2014 "),Tre=a("a"),DVr=o("TFT5ForConditionalGeneration"),GVr=o(" (T5 model)"),OVr=l(),F(lw.$$.fragment),YZe=l(),cm=a("h2"),iw=a("a"),K6e=a("span"),F(gS.$$.fragment),VVr=l(),Z6e=a("span"),XVr=o("TFAutoModelForSequenceClassification"),KZe=l(),gr=a("div"),F(hS.$$.fragment),zVr=l(),mm=a("p"),QVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mre=a("a"),WVr=o("from_pretrained()"),UVr=o(" class method or the "),Ere=a("a"),HVr=o("from_config()"),JVr=o(` class
method.`),YVr=l(),uS=a("p"),KVr=o("This class cannot be instantiated directly using "),e7e=a("code"),ZVr=o("__init__()"),eXr=o(" (throws an error)."),oXr=l(),Yt=a("div"),F(pS.$$.fragment),rXr=l(),o7e=a("p"),tXr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aXr=l(),fm=a("p"),nXr=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),sXr=o("not"),lXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),iXr=o("from_pretrained()"),dXr=o(" to load the model weights."),cXr=l(),F(dw.$$.fragment),mXr=l(),Vr=a("div"),F(_S.$$.fragment),fXr=l(),t7e=a("p"),gXr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hXr=l(),Sn=a("p"),uXr=o("The model class to instantiate is selected based on the "),a7e=a("code"),pXr=o("model_type"),_Xr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),bXr=o("pretrained_model_name_or_path"),vXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),FXr=o("pretrained_model_name_or_path"),TXr=o(":"),MXr=l(),re=a("ul"),cw=a("li"),l7e=a("strong"),EXr=o("albert"),CXr=o(" \u2014 "),wre=a("a"),wXr=o("TFAlbertForSequenceClassification"),AXr=o(" (ALBERT model)"),LXr=l(),mw=a("li"),i7e=a("strong"),yXr=o("bert"),xXr=o(" \u2014 "),Are=a("a"),$Xr=o("TFBertForSequenceClassification"),kXr=o(" (BERT model)"),SXr=l(),fw=a("li"),d7e=a("strong"),RXr=o("camembert"),PXr=o(" \u2014 "),Lre=a("a"),BXr=o("TFCamembertForSequenceClassification"),IXr=o(" (CamemBERT model)"),NXr=l(),gw=a("li"),c7e=a("strong"),qXr=o("convbert"),jXr=o(" \u2014 "),yre=a("a"),DXr=o("TFConvBertForSequenceClassification"),GXr=o(" (ConvBERT model)"),OXr=l(),hw=a("li"),m7e=a("strong"),VXr=o("ctrl"),XXr=o(" \u2014 "),xre=a("a"),zXr=o("TFCTRLForSequenceClassification"),QXr=o(" (CTRL model)"),WXr=l(),uw=a("li"),f7e=a("strong"),UXr=o("deberta"),HXr=o(" \u2014 "),$re=a("a"),JXr=o("TFDebertaForSequenceClassification"),YXr=o(" (DeBERTa model)"),KXr=l(),pw=a("li"),g7e=a("strong"),ZXr=o("deberta-v2"),ezr=o(" \u2014 "),kre=a("a"),ozr=o("TFDebertaV2ForSequenceClassification"),rzr=o(" (DeBERTa-v2 model)"),tzr=l(),_w=a("li"),h7e=a("strong"),azr=o("distilbert"),nzr=o(" \u2014 "),Sre=a("a"),szr=o("TFDistilBertForSequenceClassification"),lzr=o(" (DistilBERT model)"),izr=l(),bw=a("li"),u7e=a("strong"),dzr=o("electra"),czr=o(" \u2014 "),Rre=a("a"),mzr=o("TFElectraForSequenceClassification"),fzr=o(" (ELECTRA model)"),gzr=l(),vw=a("li"),p7e=a("strong"),hzr=o("flaubert"),uzr=o(" \u2014 "),Pre=a("a"),pzr=o("TFFlaubertForSequenceClassification"),_zr=o(" (FlauBERT model)"),bzr=l(),Fw=a("li"),_7e=a("strong"),vzr=o("funnel"),Fzr=o(" \u2014 "),Bre=a("a"),Tzr=o("TFFunnelForSequenceClassification"),Mzr=o(" (Funnel Transformer model)"),Ezr=l(),Tw=a("li"),b7e=a("strong"),Czr=o("gpt2"),wzr=o(" \u2014 "),Ire=a("a"),Azr=o("TFGPT2ForSequenceClassification"),Lzr=o(" (OpenAI GPT-2 model)"),yzr=l(),Mw=a("li"),v7e=a("strong"),xzr=o("gptj"),$zr=o(" \u2014 "),Nre=a("a"),kzr=o("TFGPTJForSequenceClassification"),Szr=o(" (GPT-J model)"),Rzr=l(),Ew=a("li"),F7e=a("strong"),Pzr=o("layoutlm"),Bzr=o(" \u2014 "),qre=a("a"),Izr=o("TFLayoutLMForSequenceClassification"),Nzr=o(" (LayoutLM model)"),qzr=l(),Cw=a("li"),T7e=a("strong"),jzr=o("layoutlmv3"),Dzr=o(" \u2014 "),jre=a("a"),Gzr=o("TFLayoutLMv3ForSequenceClassification"),Ozr=o(" (LayoutLMv3 model)"),Vzr=l(),ww=a("li"),M7e=a("strong"),Xzr=o("longformer"),zzr=o(" \u2014 "),Dre=a("a"),Qzr=o("TFLongformerForSequenceClassification"),Wzr=o(" (Longformer model)"),Uzr=l(),Aw=a("li"),E7e=a("strong"),Hzr=o("mobilebert"),Jzr=o(" \u2014 "),Gre=a("a"),Yzr=o("TFMobileBertForSequenceClassification"),Kzr=o(" (MobileBERT model)"),Zzr=l(),Lw=a("li"),C7e=a("strong"),eQr=o("mpnet"),oQr=o(" \u2014 "),Ore=a("a"),rQr=o("TFMPNetForSequenceClassification"),tQr=o(" (MPNet model)"),aQr=l(),yw=a("li"),w7e=a("strong"),nQr=o("openai-gpt"),sQr=o(" \u2014 "),Vre=a("a"),lQr=o("TFOpenAIGPTForSequenceClassification"),iQr=o(" (OpenAI GPT model)"),dQr=l(),xw=a("li"),A7e=a("strong"),cQr=o("rembert"),mQr=o(" \u2014 "),Xre=a("a"),fQr=o("TFRemBertForSequenceClassification"),gQr=o(" (RemBERT model)"),hQr=l(),$w=a("li"),L7e=a("strong"),uQr=o("roberta"),pQr=o(" \u2014 "),zre=a("a"),_Qr=o("TFRobertaForSequenceClassification"),bQr=o(" (RoBERTa model)"),vQr=l(),kw=a("li"),y7e=a("strong"),FQr=o("roformer"),TQr=o(" \u2014 "),Qre=a("a"),MQr=o("TFRoFormerForSequenceClassification"),EQr=o(" (RoFormer model)"),CQr=l(),Sw=a("li"),x7e=a("strong"),wQr=o("tapas"),AQr=o(" \u2014 "),Wre=a("a"),LQr=o("TFTapasForSequenceClassification"),yQr=o(" (TAPAS model)"),xQr=l(),Rw=a("li"),$7e=a("strong"),$Qr=o("transfo-xl"),kQr=o(" \u2014 "),Ure=a("a"),SQr=o("TFTransfoXLForSequenceClassification"),RQr=o(" (Transformer-XL model)"),PQr=l(),Pw=a("li"),k7e=a("strong"),BQr=o("xlm"),IQr=o(" \u2014 "),Hre=a("a"),NQr=o("TFXLMForSequenceClassification"),qQr=o(" (XLM model)"),jQr=l(),Bw=a("li"),S7e=a("strong"),DQr=o("xlm-roberta"),GQr=o(" \u2014 "),Jre=a("a"),OQr=o("TFXLMRobertaForSequenceClassification"),VQr=o(" (XLM-RoBERTa model)"),XQr=l(),Iw=a("li"),R7e=a("strong"),zQr=o("xlnet"),QQr=o(" \u2014 "),Yre=a("a"),WQr=o("TFXLNetForSequenceClassification"),UQr=o(" (XLNet model)"),HQr=l(),F(Nw.$$.fragment),ZZe=l(),gm=a("h2"),qw=a("a"),P7e=a("span"),F(bS.$$.fragment),JQr=l(),B7e=a("span"),YQr=o("TFAutoModelForMultipleChoice"),eeo=l(),hr=a("div"),F(vS.$$.fragment),KQr=l(),hm=a("p"),ZQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kre=a("a"),eWr=o("from_pretrained()"),oWr=o(" class method or the "),Zre=a("a"),rWr=o("from_config()"),tWr=o(` class
method.`),aWr=l(),FS=a("p"),nWr=o("This class cannot be instantiated directly using "),I7e=a("code"),sWr=o("__init__()"),lWr=o(" (throws an error)."),iWr=l(),Kt=a("div"),F(TS.$$.fragment),dWr=l(),N7e=a("p"),cWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mWr=l(),um=a("p"),fWr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),gWr=o("not"),hWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),uWr=o("from_pretrained()"),pWr=o(" to load the model weights."),_Wr=l(),F(jw.$$.fragment),bWr=l(),Xr=a("div"),F(MS.$$.fragment),vWr=l(),j7e=a("p"),FWr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TWr=l(),Rn=a("p"),MWr=o("The model class to instantiate is selected based on the "),D7e=a("code"),EWr=o("model_type"),CWr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),wWr=o("pretrained_model_name_or_path"),AWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),LWr=o("pretrained_model_name_or_path"),yWr=o(":"),xWr=l(),ve=a("ul"),Dw=a("li"),V7e=a("strong"),$Wr=o("albert"),kWr=o(" \u2014 "),ote=a("a"),SWr=o("TFAlbertForMultipleChoice"),RWr=o(" (ALBERT model)"),PWr=l(),Gw=a("li"),X7e=a("strong"),BWr=o("bert"),IWr=o(" \u2014 "),rte=a("a"),NWr=o("TFBertForMultipleChoice"),qWr=o(" (BERT model)"),jWr=l(),Ow=a("li"),z7e=a("strong"),DWr=o("camembert"),GWr=o(" \u2014 "),tte=a("a"),OWr=o("TFCamembertForMultipleChoice"),VWr=o(" (CamemBERT model)"),XWr=l(),Vw=a("li"),Q7e=a("strong"),zWr=o("convbert"),QWr=o(" \u2014 "),ate=a("a"),WWr=o("TFConvBertForMultipleChoice"),UWr=o(" (ConvBERT model)"),HWr=l(),Xw=a("li"),W7e=a("strong"),JWr=o("distilbert"),YWr=o(" \u2014 "),nte=a("a"),KWr=o("TFDistilBertForMultipleChoice"),ZWr=o(" (DistilBERT model)"),eUr=l(),zw=a("li"),U7e=a("strong"),oUr=o("electra"),rUr=o(" \u2014 "),ste=a("a"),tUr=o("TFElectraForMultipleChoice"),aUr=o(" (ELECTRA model)"),nUr=l(),Qw=a("li"),H7e=a("strong"),sUr=o("flaubert"),lUr=o(" \u2014 "),lte=a("a"),iUr=o("TFFlaubertForMultipleChoice"),dUr=o(" (FlauBERT model)"),cUr=l(),Ww=a("li"),J7e=a("strong"),mUr=o("funnel"),fUr=o(" \u2014 "),ite=a("a"),gUr=o("TFFunnelForMultipleChoice"),hUr=o(" (Funnel Transformer model)"),uUr=l(),Uw=a("li"),Y7e=a("strong"),pUr=o("longformer"),_Ur=o(" \u2014 "),dte=a("a"),bUr=o("TFLongformerForMultipleChoice"),vUr=o(" (Longformer model)"),FUr=l(),Hw=a("li"),K7e=a("strong"),TUr=o("mobilebert"),MUr=o(" \u2014 "),cte=a("a"),EUr=o("TFMobileBertForMultipleChoice"),CUr=o(" (MobileBERT model)"),wUr=l(),Jw=a("li"),Z7e=a("strong"),AUr=o("mpnet"),LUr=o(" \u2014 "),mte=a("a"),yUr=o("TFMPNetForMultipleChoice"),xUr=o(" (MPNet model)"),$Ur=l(),Yw=a("li"),eLe=a("strong"),kUr=o("rembert"),SUr=o(" \u2014 "),fte=a("a"),RUr=o("TFRemBertForMultipleChoice"),PUr=o(" (RemBERT model)"),BUr=l(),Kw=a("li"),oLe=a("strong"),IUr=o("roberta"),NUr=o(" \u2014 "),gte=a("a"),qUr=o("TFRobertaForMultipleChoice"),jUr=o(" (RoBERTa model)"),DUr=l(),Zw=a("li"),rLe=a("strong"),GUr=o("roformer"),OUr=o(" \u2014 "),hte=a("a"),VUr=o("TFRoFormerForMultipleChoice"),XUr=o(" (RoFormer model)"),zUr=l(),eA=a("li"),tLe=a("strong"),QUr=o("xlm"),WUr=o(" \u2014 "),ute=a("a"),UUr=o("TFXLMForMultipleChoice"),HUr=o(" (XLM model)"),JUr=l(),oA=a("li"),aLe=a("strong"),YUr=o("xlm-roberta"),KUr=o(" \u2014 "),pte=a("a"),ZUr=o("TFXLMRobertaForMultipleChoice"),eHr=o(" (XLM-RoBERTa model)"),oHr=l(),rA=a("li"),nLe=a("strong"),rHr=o("xlnet"),tHr=o(" \u2014 "),_te=a("a"),aHr=o("TFXLNetForMultipleChoice"),nHr=o(" (XLNet model)"),sHr=l(),F(tA.$$.fragment),oeo=l(),pm=a("h2"),aA=a("a"),sLe=a("span"),F(ES.$$.fragment),lHr=l(),lLe=a("span"),iHr=o("TFAutoModelForNextSentencePrediction"),reo=l(),ur=a("div"),F(CS.$$.fragment),dHr=l(),_m=a("p"),cHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bte=a("a"),mHr=o("from_pretrained()"),fHr=o(" class method or the "),vte=a("a"),gHr=o("from_config()"),hHr=o(` class
method.`),uHr=l(),wS=a("p"),pHr=o("This class cannot be instantiated directly using "),iLe=a("code"),_Hr=o("__init__()"),bHr=o(" (throws an error)."),vHr=l(),Zt=a("div"),F(AS.$$.fragment),FHr=l(),dLe=a("p"),THr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MHr=l(),bm=a("p"),EHr=o(`Note:
Loading a model from its configuration file does `),cLe=a("strong"),CHr=o("not"),wHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=a("a"),AHr=o("from_pretrained()"),LHr=o(" to load the model weights."),yHr=l(),F(nA.$$.fragment),xHr=l(),zr=a("div"),F(LS.$$.fragment),$Hr=l(),mLe=a("p"),kHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SHr=l(),Pn=a("p"),RHr=o("The model class to instantiate is selected based on the "),fLe=a("code"),PHr=o("model_type"),BHr=o(` property of the config object (either
passed as an argument or loaded from `),gLe=a("code"),IHr=o("pretrained_model_name_or_path"),NHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hLe=a("code"),qHr=o("pretrained_model_name_or_path"),jHr=o(":"),DHr=l(),yS=a("ul"),sA=a("li"),uLe=a("strong"),GHr=o("bert"),OHr=o(" \u2014 "),Tte=a("a"),VHr=o("TFBertForNextSentencePrediction"),XHr=o(" (BERT model)"),zHr=l(),lA=a("li"),pLe=a("strong"),QHr=o("mobilebert"),WHr=o(" \u2014 "),Mte=a("a"),UHr=o("TFMobileBertForNextSentencePrediction"),HHr=o(" (MobileBERT model)"),JHr=l(),F(iA.$$.fragment),teo=l(),vm=a("h2"),dA=a("a"),_Le=a("span"),F(xS.$$.fragment),YHr=l(),bLe=a("span"),KHr=o("TFAutoModelForTableQuestionAnswering"),aeo=l(),pr=a("div"),F($S.$$.fragment),ZHr=l(),Fm=a("p"),eJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Ete=a("a"),oJr=o("from_pretrained()"),rJr=o(" class method or the "),Cte=a("a"),tJr=o("from_config()"),aJr=o(` class
method.`),nJr=l(),kS=a("p"),sJr=o("This class cannot be instantiated directly using "),vLe=a("code"),lJr=o("__init__()"),iJr=o(" (throws an error)."),dJr=l(),ea=a("div"),F(SS.$$.fragment),cJr=l(),FLe=a("p"),mJr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fJr=l(),Tm=a("p"),gJr=o(`Note:
Loading a model from its configuration file does `),TLe=a("strong"),hJr=o("not"),uJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=a("a"),pJr=o("from_pretrained()"),_Jr=o(" to load the model weights."),bJr=l(),F(cA.$$.fragment),vJr=l(),Qr=a("div"),F(RS.$$.fragment),FJr=l(),MLe=a("p"),TJr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MJr=l(),Bn=a("p"),EJr=o("The model class to instantiate is selected based on the "),ELe=a("code"),CJr=o("model_type"),wJr=o(` property of the config object (either
passed as an argument or loaded from `),CLe=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wLe=a("code"),yJr=o("pretrained_model_name_or_path"),xJr=o(":"),$Jr=l(),ALe=a("ul"),mA=a("li"),LLe=a("strong"),kJr=o("tapas"),SJr=o(" \u2014 "),Ate=a("a"),RJr=o("TFTapasForQuestionAnswering"),PJr=o(" (TAPAS model)"),BJr=l(),F(fA.$$.fragment),neo=l(),Mm=a("h2"),gA=a("a"),yLe=a("span"),F(PS.$$.fragment),IJr=l(),xLe=a("span"),NJr=o("TFAutoModelForDocumentQuestionAnswering"),seo=l(),_r=a("div"),F(BS.$$.fragment),qJr=l(),Em=a("p"),jJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Lte=a("a"),DJr=o("from_pretrained()"),GJr=o(" class method or the "),yte=a("a"),OJr=o("from_config()"),VJr=o(` class
method.`),XJr=l(),IS=a("p"),zJr=o("This class cannot be instantiated directly using "),$Le=a("code"),QJr=o("__init__()"),WJr=o(" (throws an error)."),UJr=l(),oa=a("div"),F(NS.$$.fragment),HJr=l(),kLe=a("p"),JJr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),YJr=l(),Cm=a("p"),KJr=o(`Note:
Loading a model from its configuration file does `),SLe=a("strong"),ZJr=o("not"),eYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xte=a("a"),oYr=o("from_pretrained()"),rYr=o(" to load the model weights."),tYr=l(),F(hA.$$.fragment),aYr=l(),Wr=a("div"),F(qS.$$.fragment),nYr=l(),RLe=a("p"),sYr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),lYr=l(),In=a("p"),iYr=o("The model class to instantiate is selected based on the "),PLe=a("code"),dYr=o("model_type"),cYr=o(` property of the config object (either
passed as an argument or loaded from `),BLe=a("code"),mYr=o("pretrained_model_name_or_path"),fYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ILe=a("code"),gYr=o("pretrained_model_name_or_path"),hYr=o(":"),uYr=l(),NLe=a("ul"),uA=a("li"),qLe=a("strong"),pYr=o("layoutlm"),_Yr=o(" \u2014 "),$te=a("a"),bYr=o("TFLayoutLMForQuestionAnswering"),vYr=o(" (LayoutLM model)"),FYr=l(),F(pA.$$.fragment),leo=l(),wm=a("h2"),_A=a("a"),jLe=a("span"),F(jS.$$.fragment),TYr=l(),DLe=a("span"),MYr=o("TFAutoModelForTokenClassification"),ieo=l(),br=a("div"),F(DS.$$.fragment),EYr=l(),Am=a("p"),CYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kte=a("a"),wYr=o("from_pretrained()"),AYr=o(" class method or the "),Ste=a("a"),LYr=o("from_config()"),yYr=o(` class
method.`),xYr=l(),GS=a("p"),$Yr=o("This class cannot be instantiated directly using "),GLe=a("code"),kYr=o("__init__()"),SYr=o(" (throws an error)."),RYr=l(),ra=a("div"),F(OS.$$.fragment),PYr=l(),OLe=a("p"),BYr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IYr=l(),Lm=a("p"),NYr=o(`Note:
Loading a model from its configuration file does `),VLe=a("strong"),qYr=o("not"),jYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=a("a"),DYr=o("from_pretrained()"),GYr=o(" to load the model weights."),OYr=l(),F(bA.$$.fragment),VYr=l(),Ur=a("div"),F(VS.$$.fragment),XYr=l(),XLe=a("p"),zYr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QYr=l(),Nn=a("p"),WYr=o("The model class to instantiate is selected based on the "),zLe=a("code"),UYr=o("model_type"),HYr=o(` property of the config object (either
passed as an argument or loaded from `),QLe=a("code"),JYr=o("pretrained_model_name_or_path"),YYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WLe=a("code"),KYr=o("pretrained_model_name_or_path"),ZYr=o(":"),eKr=l(),de=a("ul"),vA=a("li"),ULe=a("strong"),oKr=o("albert"),rKr=o(" \u2014 "),Pte=a("a"),tKr=o("TFAlbertForTokenClassification"),aKr=o(" (ALBERT model)"),nKr=l(),FA=a("li"),HLe=a("strong"),sKr=o("bert"),lKr=o(" \u2014 "),Bte=a("a"),iKr=o("TFBertForTokenClassification"),dKr=o(" (BERT model)"),cKr=l(),TA=a("li"),JLe=a("strong"),mKr=o("camembert"),fKr=o(" \u2014 "),Ite=a("a"),gKr=o("TFCamembertForTokenClassification"),hKr=o(" (CamemBERT model)"),uKr=l(),MA=a("li"),YLe=a("strong"),pKr=o("convbert"),_Kr=o(" \u2014 "),Nte=a("a"),bKr=o("TFConvBertForTokenClassification"),vKr=o(" (ConvBERT model)"),FKr=l(),EA=a("li"),KLe=a("strong"),TKr=o("deberta"),MKr=o(" \u2014 "),qte=a("a"),EKr=o("TFDebertaForTokenClassification"),CKr=o(" (DeBERTa model)"),wKr=l(),CA=a("li"),ZLe=a("strong"),AKr=o("deberta-v2"),LKr=o(" \u2014 "),jte=a("a"),yKr=o("TFDebertaV2ForTokenClassification"),xKr=o(" (DeBERTa-v2 model)"),$Kr=l(),wA=a("li"),eye=a("strong"),kKr=o("distilbert"),SKr=o(" \u2014 "),Dte=a("a"),RKr=o("TFDistilBertForTokenClassification"),PKr=o(" (DistilBERT model)"),BKr=l(),AA=a("li"),oye=a("strong"),IKr=o("electra"),NKr=o(" \u2014 "),Gte=a("a"),qKr=o("TFElectraForTokenClassification"),jKr=o(" (ELECTRA model)"),DKr=l(),LA=a("li"),rye=a("strong"),GKr=o("flaubert"),OKr=o(" \u2014 "),Ote=a("a"),VKr=o("TFFlaubertForTokenClassification"),XKr=o(" (FlauBERT model)"),zKr=l(),yA=a("li"),tye=a("strong"),QKr=o("funnel"),WKr=o(" \u2014 "),Vte=a("a"),UKr=o("TFFunnelForTokenClassification"),HKr=o(" (Funnel Transformer model)"),JKr=l(),xA=a("li"),aye=a("strong"),YKr=o("layoutlm"),KKr=o(" \u2014 "),Xte=a("a"),ZKr=o("TFLayoutLMForTokenClassification"),eZr=o(" (LayoutLM model)"),oZr=l(),$A=a("li"),nye=a("strong"),rZr=o("layoutlmv3"),tZr=o(" \u2014 "),zte=a("a"),aZr=o("TFLayoutLMv3ForTokenClassification"),nZr=o(" (LayoutLMv3 model)"),sZr=l(),kA=a("li"),sye=a("strong"),lZr=o("longformer"),iZr=o(" \u2014 "),Qte=a("a"),dZr=o("TFLongformerForTokenClassification"),cZr=o(" (Longformer model)"),mZr=l(),SA=a("li"),lye=a("strong"),fZr=o("mobilebert"),gZr=o(" \u2014 "),Wte=a("a"),hZr=o("TFMobileBertForTokenClassification"),uZr=o(" (MobileBERT model)"),pZr=l(),RA=a("li"),iye=a("strong"),_Zr=o("mpnet"),bZr=o(" \u2014 "),Ute=a("a"),vZr=o("TFMPNetForTokenClassification"),FZr=o(" (MPNet model)"),TZr=l(),PA=a("li"),dye=a("strong"),MZr=o("rembert"),EZr=o(" \u2014 "),Hte=a("a"),CZr=o("TFRemBertForTokenClassification"),wZr=o(" (RemBERT model)"),AZr=l(),BA=a("li"),cye=a("strong"),LZr=o("roberta"),yZr=o(" \u2014 "),Jte=a("a"),xZr=o("TFRobertaForTokenClassification"),$Zr=o(" (RoBERTa model)"),kZr=l(),IA=a("li"),mye=a("strong"),SZr=o("roformer"),RZr=o(" \u2014 "),Yte=a("a"),PZr=o("TFRoFormerForTokenClassification"),BZr=o(" (RoFormer model)"),IZr=l(),NA=a("li"),fye=a("strong"),NZr=o("xlm"),qZr=o(" \u2014 "),Kte=a("a"),jZr=o("TFXLMForTokenClassification"),DZr=o(" (XLM model)"),GZr=l(),qA=a("li"),gye=a("strong"),OZr=o("xlm-roberta"),VZr=o(" \u2014 "),Zte=a("a"),XZr=o("TFXLMRobertaForTokenClassification"),zZr=o(" (XLM-RoBERTa model)"),QZr=l(),jA=a("li"),hye=a("strong"),WZr=o("xlnet"),UZr=o(" \u2014 "),eae=a("a"),HZr=o("TFXLNetForTokenClassification"),JZr=o(" (XLNet model)"),YZr=l(),F(DA.$$.fragment),deo=l(),ym=a("h2"),GA=a("a"),uye=a("span"),F(XS.$$.fragment),KZr=l(),pye=a("span"),ZZr=o("TFAutoModelForQuestionAnswering"),ceo=l(),vr=a("div"),F(zS.$$.fragment),eet=l(),xm=a("p"),oet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oae=a("a"),ret=o("from_pretrained()"),tet=o(" class method or the "),rae=a("a"),aet=o("from_config()"),net=o(` class
method.`),set=l(),QS=a("p"),iet=o("This class cannot be instantiated directly using "),_ye=a("code"),det=o("__init__()"),cet=o(" (throws an error)."),met=l(),ta=a("div"),F(WS.$$.fragment),fet=l(),bye=a("p"),get=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),het=l(),$m=a("p"),uet=o(`Note:
Loading a model from its configuration file does `),vye=a("strong"),pet=o("not"),_et=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tae=a("a"),bet=o("from_pretrained()"),vet=o(" to load the model weights."),Fet=l(),F(OA.$$.fragment),Tet=l(),Hr=a("div"),F(US.$$.fragment),Met=l(),Fye=a("p"),Eet=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Cet=l(),qn=a("p"),wet=o("The model class to instantiate is selected based on the "),Tye=a("code"),Aet=o("model_type"),Let=o(` property of the config object (either
passed as an argument or loaded from `),Mye=a("code"),yet=o("pretrained_model_name_or_path"),xet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=a("code"),$et=o("pretrained_model_name_or_path"),ket=o(":"),Set=l(),ce=a("ul"),VA=a("li"),Cye=a("strong"),Ret=o("albert"),Pet=o(" \u2014 "),aae=a("a"),Bet=o("TFAlbertForQuestionAnswering"),Iet=o(" (ALBERT model)"),Net=l(),XA=a("li"),wye=a("strong"),qet=o("bert"),jet=o(" \u2014 "),nae=a("a"),Det=o("TFBertForQuestionAnswering"),Get=o(" (BERT model)"),Oet=l(),zA=a("li"),Aye=a("strong"),Vet=o("camembert"),Xet=o(" \u2014 "),sae=a("a"),zet=o("TFCamembertForQuestionAnswering"),Qet=o(" (CamemBERT model)"),Wet=l(),QA=a("li"),Lye=a("strong"),Uet=o("convbert"),Het=o(" \u2014 "),lae=a("a"),Jet=o("TFConvBertForQuestionAnswering"),Yet=o(" (ConvBERT model)"),Ket=l(),WA=a("li"),yye=a("strong"),Zet=o("deberta"),eot=o(" \u2014 "),iae=a("a"),oot=o("TFDebertaForQuestionAnswering"),rot=o(" (DeBERTa model)"),tot=l(),UA=a("li"),xye=a("strong"),aot=o("deberta-v2"),not=o(" \u2014 "),dae=a("a"),sot=o("TFDebertaV2ForQuestionAnswering"),lot=o(" (DeBERTa-v2 model)"),iot=l(),HA=a("li"),$ye=a("strong"),dot=o("distilbert"),cot=o(" \u2014 "),cae=a("a"),mot=o("TFDistilBertForQuestionAnswering"),fot=o(" (DistilBERT model)"),got=l(),JA=a("li"),kye=a("strong"),hot=o("electra"),uot=o(" \u2014 "),mae=a("a"),pot=o("TFElectraForQuestionAnswering"),_ot=o(" (ELECTRA model)"),bot=l(),YA=a("li"),Sye=a("strong"),vot=o("flaubert"),Fot=o(" \u2014 "),fae=a("a"),Tot=o("TFFlaubertForQuestionAnsweringSimple"),Mot=o(" (FlauBERT model)"),Eot=l(),KA=a("li"),Rye=a("strong"),Cot=o("funnel"),wot=o(" \u2014 "),gae=a("a"),Aot=o("TFFunnelForQuestionAnswering"),Lot=o(" (Funnel Transformer model)"),yot=l(),ZA=a("li"),Pye=a("strong"),xot=o("gptj"),$ot=o(" \u2014 "),hae=a("a"),kot=o("TFGPTJForQuestionAnswering"),Sot=o(" (GPT-J model)"),Rot=l(),e6=a("li"),Bye=a("strong"),Pot=o("layoutlmv3"),Bot=o(" \u2014 "),uae=a("a"),Iot=o("TFLayoutLMv3ForQuestionAnswering"),Not=o(" (LayoutLMv3 model)"),qot=l(),o6=a("li"),Iye=a("strong"),jot=o("longformer"),Dot=o(" \u2014 "),pae=a("a"),Got=o("TFLongformerForQuestionAnswering"),Oot=o(" (Longformer model)"),Vot=l(),r6=a("li"),Nye=a("strong"),Xot=o("mobilebert"),zot=o(" \u2014 "),_ae=a("a"),Qot=o("TFMobileBertForQuestionAnswering"),Wot=o(" (MobileBERT model)"),Uot=l(),t6=a("li"),qye=a("strong"),Hot=o("mpnet"),Jot=o(" \u2014 "),bae=a("a"),Yot=o("TFMPNetForQuestionAnswering"),Kot=o(" (MPNet model)"),Zot=l(),a6=a("li"),jye=a("strong"),ert=o("rembert"),ort=o(" \u2014 "),vae=a("a"),rrt=o("TFRemBertForQuestionAnswering"),trt=o(" (RemBERT model)"),art=l(),n6=a("li"),Dye=a("strong"),nrt=o("roberta"),srt=o(" \u2014 "),Fae=a("a"),lrt=o("TFRobertaForQuestionAnswering"),irt=o(" (RoBERTa model)"),drt=l(),s6=a("li"),Gye=a("strong"),crt=o("roformer"),mrt=o(" \u2014 "),Tae=a("a"),frt=o("TFRoFormerForQuestionAnswering"),grt=o(" (RoFormer model)"),hrt=l(),l6=a("li"),Oye=a("strong"),urt=o("xlm"),prt=o(" \u2014 "),Mae=a("a"),_rt=o("TFXLMForQuestionAnsweringSimple"),brt=o(" (XLM model)"),vrt=l(),i6=a("li"),Vye=a("strong"),Frt=o("xlm-roberta"),Trt=o(" \u2014 "),Eae=a("a"),Mrt=o("TFXLMRobertaForQuestionAnswering"),Ert=o(" (XLM-RoBERTa model)"),Crt=l(),d6=a("li"),Xye=a("strong"),wrt=o("xlnet"),Art=o(" \u2014 "),Cae=a("a"),Lrt=o("TFXLNetForQuestionAnsweringSimple"),yrt=o(" (XLNet model)"),xrt=l(),F(c6.$$.fragment),meo=l(),km=a("h2"),m6=a("a"),zye=a("span"),F(HS.$$.fragment),$rt=l(),Qye=a("span"),krt=o("TFAutoModelForVision2Seq"),feo=l(),Fr=a("div"),F(JS.$$.fragment),Srt=l(),Sm=a("p"),Rrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wae=a("a"),Prt=o("from_pretrained()"),Brt=o(" class method or the "),Aae=a("a"),Irt=o("from_config()"),Nrt=o(` class
method.`),qrt=l(),YS=a("p"),jrt=o("This class cannot be instantiated directly using "),Wye=a("code"),Drt=o("__init__()"),Grt=o(" (throws an error)."),Ort=l(),aa=a("div"),F(KS.$$.fragment),Vrt=l(),Uye=a("p"),Xrt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zrt=l(),Rm=a("p"),Qrt=o(`Note:
Loading a model from its configuration file does `),Hye=a("strong"),Wrt=o("not"),Urt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lae=a("a"),Hrt=o("from_pretrained()"),Jrt=o(" to load the model weights."),Yrt=l(),F(f6.$$.fragment),Krt=l(),Jr=a("div"),F(ZS.$$.fragment),Zrt=l(),Jye=a("p"),ett=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ott=l(),jn=a("p"),rtt=o("The model class to instantiate is selected based on the "),Yye=a("code"),ttt=o("model_type"),att=o(` property of the config object (either
passed as an argument or loaded from `),Kye=a("code"),ntt=o("pretrained_model_name_or_path"),stt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zye=a("code"),ltt=o("pretrained_model_name_or_path"),itt=o(":"),dtt=l(),e8e=a("ul"),g6=a("li"),o8e=a("strong"),ctt=o("vision-encoder-decoder"),mtt=o(" \u2014 "),yae=a("a"),ftt=o("TFVisionEncoderDecoderModel"),gtt=o(" (Vision Encoder decoder model)"),htt=l(),F(h6.$$.fragment),geo=l(),Pm=a("h2"),u6=a("a"),r8e=a("span"),F(eR.$$.fragment),utt=l(),t8e=a("span"),ptt=o("TFAutoModelForSpeechSeq2Seq"),heo=l(),Tr=a("div"),F(oR.$$.fragment),_tt=l(),Bm=a("p"),btt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xae=a("a"),vtt=o("from_pretrained()"),Ftt=o(" class method or the "),$ae=a("a"),Ttt=o("from_config()"),Mtt=o(` class
method.`),Ett=l(),rR=a("p"),Ctt=o("This class cannot be instantiated directly using "),a8e=a("code"),wtt=o("__init__()"),Att=o(" (throws an error)."),Ltt=l(),na=a("div"),F(tR.$$.fragment),ytt=l(),n8e=a("p"),xtt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$tt=l(),Im=a("p"),ktt=o(`Note:
Loading a model from its configuration file does `),s8e=a("strong"),Stt=o("not"),Rtt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kae=a("a"),Ptt=o("from_pretrained()"),Btt=o(" to load the model weights."),Itt=l(),F(p6.$$.fragment),Ntt=l(),Yr=a("div"),F(aR.$$.fragment),qtt=l(),l8e=a("p"),jtt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dtt=l(),Dn=a("p"),Gtt=o("The model class to instantiate is selected based on the "),i8e=a("code"),Ott=o("model_type"),Vtt=o(` property of the config object (either
passed as an argument or loaded from `),d8e=a("code"),Xtt=o("pretrained_model_name_or_path"),ztt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=a("code"),Qtt=o("pretrained_model_name_or_path"),Wtt=o(":"),Utt=l(),m8e=a("ul"),_6=a("li"),f8e=a("strong"),Htt=o("speech_to_text"),Jtt=o(" \u2014 "),Sae=a("a"),Ytt=o("TFSpeech2TextForConditionalGeneration"),Ktt=o(" (Speech2Text model)"),Ztt=l(),F(b6.$$.fragment),ueo=l(),Nm=a("h2"),v6=a("a"),g8e=a("span"),F(nR.$$.fragment),eat=l(),h8e=a("span"),oat=o("FlaxAutoModel"),peo=l(),Mr=a("div"),F(sR.$$.fragment),rat=l(),qm=a("p"),tat=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rae=a("a"),aat=o("from_pretrained()"),nat=o(" class method or the "),Pae=a("a"),sat=o("from_config()"),lat=o(` class
method.`),iat=l(),lR=a("p"),dat=o("This class cannot be instantiated directly using "),u8e=a("code"),cat=o("__init__()"),mat=o(" (throws an error)."),fat=l(),sa=a("div"),F(iR.$$.fragment),gat=l(),p8e=a("p"),hat=o("Instantiates one of the base model classes of the library from a configuration."),uat=l(),jm=a("p"),pat=o(`Note:
Loading a model from its configuration file does `),_8e=a("strong"),_at=o("not"),bat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=a("a"),vat=o("from_pretrained()"),Fat=o(" to load the model weights."),Tat=l(),F(F6.$$.fragment),Mat=l(),Kr=a("div"),F(dR.$$.fragment),Eat=l(),b8e=a("p"),Cat=o("Instantiate one of the base model classes of the library from a pretrained model."),wat=l(),Gn=a("p"),Aat=o("The model class to instantiate is selected based on the "),v8e=a("code"),Lat=o("model_type"),yat=o(` property of the config object (either
passed as an argument or loaded from `),F8e=a("code"),xat=o("pretrained_model_name_or_path"),$at=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=a("code"),kat=o("pretrained_model_name_or_path"),Sat=o(":"),Rat=l(),te=a("ul"),T6=a("li"),M8e=a("strong"),Pat=o("albert"),Bat=o(" \u2014 "),Iae=a("a"),Iat=o("FlaxAlbertModel"),Nat=o(" (ALBERT model)"),qat=l(),M6=a("li"),E8e=a("strong"),jat=o("bart"),Dat=o(" \u2014 "),Nae=a("a"),Gat=o("FlaxBartModel"),Oat=o(" (BART model)"),Vat=l(),E6=a("li"),C8e=a("strong"),Xat=o("beit"),zat=o(" \u2014 "),qae=a("a"),Qat=o("FlaxBeitModel"),Wat=o(" (BEiT model)"),Uat=l(),C6=a("li"),w8e=a("strong"),Hat=o("bert"),Jat=o(" \u2014 "),jae=a("a"),Yat=o("FlaxBertModel"),Kat=o(" (BERT model)"),Zat=l(),w6=a("li"),A8e=a("strong"),ent=o("big_bird"),ont=o(" \u2014 "),Dae=a("a"),rnt=o("FlaxBigBirdModel"),tnt=o(" (BigBird model)"),ant=l(),A6=a("li"),L8e=a("strong"),nnt=o("blenderbot"),snt=o(" \u2014 "),Gae=a("a"),lnt=o("FlaxBlenderbotModel"),int=o(" (Blenderbot model)"),dnt=l(),L6=a("li"),y8e=a("strong"),cnt=o("blenderbot-small"),mnt=o(" \u2014 "),Oae=a("a"),fnt=o("FlaxBlenderbotSmallModel"),gnt=o(" (BlenderbotSmall model)"),hnt=l(),y6=a("li"),x8e=a("strong"),unt=o("clip"),pnt=o(" \u2014 "),Vae=a("a"),_nt=o("FlaxCLIPModel"),bnt=o(" (CLIP model)"),vnt=l(),x6=a("li"),$8e=a("strong"),Fnt=o("distilbert"),Tnt=o(" \u2014 "),Xae=a("a"),Mnt=o("FlaxDistilBertModel"),Ent=o(" (DistilBERT model)"),Cnt=l(),$6=a("li"),k8e=a("strong"),wnt=o("electra"),Ant=o(" \u2014 "),zae=a("a"),Lnt=o("FlaxElectraModel"),ynt=o(" (ELECTRA model)"),xnt=l(),k6=a("li"),S8e=a("strong"),$nt=o("gpt2"),knt=o(" \u2014 "),Qae=a("a"),Snt=o("FlaxGPT2Model"),Rnt=o(" (OpenAI GPT-2 model)"),Pnt=l(),S6=a("li"),R8e=a("strong"),Bnt=o("gpt_neo"),Int=o(" \u2014 "),Wae=a("a"),Nnt=o("FlaxGPTNeoModel"),qnt=o(" (GPT Neo model)"),jnt=l(),R6=a("li"),P8e=a("strong"),Dnt=o("gptj"),Gnt=o(" \u2014 "),Uae=a("a"),Ont=o("FlaxGPTJModel"),Vnt=o(" (GPT-J model)"),Xnt=l(),P6=a("li"),B8e=a("strong"),znt=o("longt5"),Qnt=o(" \u2014 "),Hae=a("a"),Wnt=o("FlaxLongT5Model"),Unt=o(" (LongT5 model)"),Hnt=l(),B6=a("li"),I8e=a("strong"),Jnt=o("marian"),Ynt=o(" \u2014 "),Jae=a("a"),Knt=o("FlaxMarianModel"),Znt=o(" (Marian model)"),est=l(),I6=a("li"),N8e=a("strong"),ost=o("mbart"),rst=o(" \u2014 "),Yae=a("a"),tst=o("FlaxMBartModel"),ast=o(" (mBART model)"),nst=l(),N6=a("li"),q8e=a("strong"),sst=o("mt5"),lst=o(" \u2014 "),Kae=a("a"),ist=o("FlaxMT5Model"),dst=o(" (MT5 model)"),cst=l(),q6=a("li"),j8e=a("strong"),mst=o("opt"),fst=o(" \u2014 "),Zae=a("a"),gst=o("FlaxOPTModel"),hst=o(" (OPT model)"),ust=l(),j6=a("li"),D8e=a("strong"),pst=o("pegasus"),_st=o(" \u2014 "),ene=a("a"),bst=o("FlaxPegasusModel"),vst=o(" (Pegasus model)"),Fst=l(),D6=a("li"),G8e=a("strong"),Tst=o("roberta"),Mst=o(" \u2014 "),one=a("a"),Est=o("FlaxRobertaModel"),Cst=o(" (RoBERTa model)"),wst=l(),G6=a("li"),O8e=a("strong"),Ast=o("roformer"),Lst=o(" \u2014 "),rne=a("a"),yst=o("FlaxRoFormerModel"),xst=o(" (RoFormer model)"),$st=l(),O6=a("li"),V8e=a("strong"),kst=o("t5"),Sst=o(" \u2014 "),tne=a("a"),Rst=o("FlaxT5Model"),Pst=o(" (T5 model)"),Bst=l(),V6=a("li"),X8e=a("strong"),Ist=o("vision-text-dual-encoder"),Nst=o(" \u2014 "),ane=a("a"),qst=o("FlaxVisionTextDualEncoderModel"),jst=o(" (VisionTextDualEncoder model)"),Dst=l(),X6=a("li"),z8e=a("strong"),Gst=o("vit"),Ost=o(" \u2014 "),nne=a("a"),Vst=o("FlaxViTModel"),Xst=o(" (ViT model)"),zst=l(),z6=a("li"),Q8e=a("strong"),Qst=o("wav2vec2"),Wst=o(" \u2014 "),sne=a("a"),Ust=o("FlaxWav2Vec2Model"),Hst=o(" (Wav2Vec2 model)"),Jst=l(),Q6=a("li"),W8e=a("strong"),Yst=o("xglm"),Kst=o(" \u2014 "),lne=a("a"),Zst=o("FlaxXGLMModel"),elt=o(" (XGLM model)"),olt=l(),W6=a("li"),U8e=a("strong"),rlt=o("xlm-roberta"),tlt=o(" \u2014 "),ine=a("a"),alt=o("FlaxXLMRobertaModel"),nlt=o(" (XLM-RoBERTa model)"),slt=l(),F(U6.$$.fragment),_eo=l(),Dm=a("h2"),H6=a("a"),H8e=a("span"),F(cR.$$.fragment),llt=l(),J8e=a("span"),ilt=o("FlaxAutoModelForCausalLM"),beo=l(),Er=a("div"),F(mR.$$.fragment),dlt=l(),Gm=a("p"),clt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dne=a("a"),mlt=o("from_pretrained()"),flt=o(" class method or the "),cne=a("a"),glt=o("from_config()"),hlt=o(` class
method.`),ult=l(),fR=a("p"),plt=o("This class cannot be instantiated directly using "),Y8e=a("code"),_lt=o("__init__()"),blt=o(" (throws an error)."),vlt=l(),la=a("div"),F(gR.$$.fragment),Flt=l(),K8e=a("p"),Tlt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mlt=l(),Om=a("p"),Elt=o(`Note:
Loading a model from its configuration file does `),Z8e=a("strong"),Clt=o("not"),wlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=a("a"),Alt=o("from_pretrained()"),Llt=o(" to load the model weights."),ylt=l(),F(J6.$$.fragment),xlt=l(),Zr=a("div"),F(hR.$$.fragment),$lt=l(),e9e=a("p"),klt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Slt=l(),On=a("p"),Rlt=o("The model class to instantiate is selected based on the "),o9e=a("code"),Plt=o("model_type"),Blt=o(` property of the config object (either
passed as an argument or loaded from `),r9e=a("code"),Ilt=o("pretrained_model_name_or_path"),Nlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=a("code"),qlt=o("pretrained_model_name_or_path"),jlt=o(":"),Dlt=l(),xe=a("ul"),Y6=a("li"),a9e=a("strong"),Glt=o("bart"),Olt=o(" \u2014 "),fne=a("a"),Vlt=o("FlaxBartForCausalLM"),Xlt=o(" (BART model)"),zlt=l(),K6=a("li"),n9e=a("strong"),Qlt=o("bert"),Wlt=o(" \u2014 "),gne=a("a"),Ult=o("FlaxBertForCausalLM"),Hlt=o(" (BERT model)"),Jlt=l(),Z6=a("li"),s9e=a("strong"),Ylt=o("big_bird"),Klt=o(" \u2014 "),hne=a("a"),Zlt=o("FlaxBigBirdForCausalLM"),eit=o(" (BigBird model)"),oit=l(),e7=a("li"),l9e=a("strong"),rit=o("electra"),tit=o(" \u2014 "),une=a("a"),ait=o("FlaxElectraForCausalLM"),nit=o(" (ELECTRA model)"),sit=l(),o7=a("li"),i9e=a("strong"),lit=o("gpt2"),iit=o(" \u2014 "),pne=a("a"),dit=o("FlaxGPT2LMHeadModel"),cit=o(" (OpenAI GPT-2 model)"),mit=l(),r7=a("li"),d9e=a("strong"),fit=o("gpt_neo"),git=o(" \u2014 "),_ne=a("a"),hit=o("FlaxGPTNeoForCausalLM"),uit=o(" (GPT Neo model)"),pit=l(),t7=a("li"),c9e=a("strong"),_it=o("gptj"),bit=o(" \u2014 "),bne=a("a"),vit=o("FlaxGPTJForCausalLM"),Fit=o(" (GPT-J model)"),Tit=l(),a7=a("li"),m9e=a("strong"),Mit=o("opt"),Eit=o(" \u2014 "),vne=a("a"),Cit=o("FlaxOPTForCausalLM"),wit=o(" (OPT model)"),Ait=l(),n7=a("li"),f9e=a("strong"),Lit=o("roberta"),yit=o(" \u2014 "),Fne=a("a"),xit=o("FlaxRobertaForCausalLM"),$it=o(" (RoBERTa model)"),kit=l(),s7=a("li"),g9e=a("strong"),Sit=o("xglm"),Rit=o(" \u2014 "),Tne=a("a"),Pit=o("FlaxXGLMForCausalLM"),Bit=o(" (XGLM model)"),Iit=l(),F(l7.$$.fragment),veo=l(),Vm=a("h2"),i7=a("a"),h9e=a("span"),F(uR.$$.fragment),Nit=l(),u9e=a("span"),qit=o("FlaxAutoModelForPreTraining"),Feo=l(),Cr=a("div"),F(pR.$$.fragment),jit=l(),Xm=a("p"),Dit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mne=a("a"),Git=o("from_pretrained()"),Oit=o(" class method or the "),Ene=a("a"),Vit=o("from_config()"),Xit=o(` class
method.`),zit=l(),_R=a("p"),Qit=o("This class cannot be instantiated directly using "),p9e=a("code"),Wit=o("__init__()"),Uit=o(" (throws an error)."),Hit=l(),ia=a("div"),F(bR.$$.fragment),Jit=l(),_9e=a("p"),Yit=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Kit=l(),zm=a("p"),Zit=o(`Note:
Loading a model from its configuration file does `),b9e=a("strong"),edt=o("not"),odt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cne=a("a"),rdt=o("from_pretrained()"),tdt=o(" to load the model weights."),adt=l(),F(d7.$$.fragment),ndt=l(),et=a("div"),F(vR.$$.fragment),sdt=l(),v9e=a("p"),ldt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),idt=l(),Vn=a("p"),ddt=o("The model class to instantiate is selected based on the "),F9e=a("code"),cdt=o("model_type"),mdt=o(` property of the config object (either
passed as an argument or loaded from `),T9e=a("code"),fdt=o("pretrained_model_name_or_path"),gdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=a("code"),hdt=o("pretrained_model_name_or_path"),udt=o(":"),pdt=l(),Ee=a("ul"),c7=a("li"),E9e=a("strong"),_dt=o("albert"),bdt=o(" \u2014 "),wne=a("a"),vdt=o("FlaxAlbertForPreTraining"),Fdt=o(" (ALBERT model)"),Tdt=l(),m7=a("li"),C9e=a("strong"),Mdt=o("bart"),Edt=o(" \u2014 "),Ane=a("a"),Cdt=o("FlaxBartForConditionalGeneration"),wdt=o(" (BART model)"),Adt=l(),f7=a("li"),w9e=a("strong"),Ldt=o("bert"),ydt=o(" \u2014 "),Lne=a("a"),xdt=o("FlaxBertForPreTraining"),$dt=o(" (BERT model)"),kdt=l(),g7=a("li"),A9e=a("strong"),Sdt=o("big_bird"),Rdt=o(" \u2014 "),yne=a("a"),Pdt=o("FlaxBigBirdForPreTraining"),Bdt=o(" (BigBird model)"),Idt=l(),h7=a("li"),L9e=a("strong"),Ndt=o("electra"),qdt=o(" \u2014 "),xne=a("a"),jdt=o("FlaxElectraForPreTraining"),Ddt=o(" (ELECTRA model)"),Gdt=l(),u7=a("li"),y9e=a("strong"),Odt=o("longt5"),Vdt=o(" \u2014 "),$ne=a("a"),Xdt=o("FlaxLongT5ForConditionalGeneration"),zdt=o(" (LongT5 model)"),Qdt=l(),p7=a("li"),x9e=a("strong"),Wdt=o("mbart"),Udt=o(" \u2014 "),kne=a("a"),Hdt=o("FlaxMBartForConditionalGeneration"),Jdt=o(" (mBART model)"),Ydt=l(),_7=a("li"),$9e=a("strong"),Kdt=o("mt5"),Zdt=o(" \u2014 "),Sne=a("a"),ect=o("FlaxMT5ForConditionalGeneration"),oct=o(" (MT5 model)"),rct=l(),b7=a("li"),k9e=a("strong"),tct=o("roberta"),act=o(" \u2014 "),Rne=a("a"),nct=o("FlaxRobertaForMaskedLM"),sct=o(" (RoBERTa model)"),lct=l(),v7=a("li"),S9e=a("strong"),ict=o("roformer"),dct=o(" \u2014 "),Pne=a("a"),cct=o("FlaxRoFormerForMaskedLM"),mct=o(" (RoFormer model)"),fct=l(),F7=a("li"),R9e=a("strong"),gct=o("t5"),hct=o(" \u2014 "),Bne=a("a"),uct=o("FlaxT5ForConditionalGeneration"),pct=o(" (T5 model)"),_ct=l(),T7=a("li"),P9e=a("strong"),bct=o("wav2vec2"),vct=o(" \u2014 "),Ine=a("a"),Fct=o("FlaxWav2Vec2ForPreTraining"),Tct=o(" (Wav2Vec2 model)"),Mct=l(),M7=a("li"),B9e=a("strong"),Ect=o("xlm-roberta"),Cct=o(" \u2014 "),Nne=a("a"),wct=o("FlaxXLMRobertaForMaskedLM"),Act=o(" (XLM-RoBERTa model)"),Lct=l(),F(E7.$$.fragment),Teo=l(),Qm=a("h2"),C7=a("a"),I9e=a("span"),F(FR.$$.fragment),yct=l(),N9e=a("span"),xct=o("FlaxAutoModelForMaskedLM"),Meo=l(),wr=a("div"),F(TR.$$.fragment),$ct=l(),Wm=a("p"),kct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qne=a("a"),Sct=o("from_pretrained()"),Rct=o(" class method or the "),jne=a("a"),Pct=o("from_config()"),Bct=o(` class
method.`),Ict=l(),MR=a("p"),Nct=o("This class cannot be instantiated directly using "),q9e=a("code"),qct=o("__init__()"),jct=o(" (throws an error)."),Dct=l(),da=a("div"),F(ER.$$.fragment),Gct=l(),j9e=a("p"),Oct=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vct=l(),Um=a("p"),Xct=o(`Note:
Loading a model from its configuration file does `),D9e=a("strong"),zct=o("not"),Qct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dne=a("a"),Wct=o("from_pretrained()"),Uct=o(" to load the model weights."),Hct=l(),F(w7.$$.fragment),Jct=l(),ot=a("div"),F(CR.$$.fragment),Yct=l(),G9e=a("p"),Kct=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zct=l(),Xn=a("p"),emt=o("The model class to instantiate is selected based on the "),O9e=a("code"),omt=o("model_type"),rmt=o(` property of the config object (either
passed as an argument or loaded from `),V9e=a("code"),tmt=o("pretrained_model_name_or_path"),amt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=a("code"),nmt=o("pretrained_model_name_or_path"),smt=o(":"),lmt=l(),$e=a("ul"),A7=a("li"),z9e=a("strong"),imt=o("albert"),dmt=o(" \u2014 "),Gne=a("a"),cmt=o("FlaxAlbertForMaskedLM"),mmt=o(" (ALBERT model)"),fmt=l(),L7=a("li"),Q9e=a("strong"),gmt=o("bart"),hmt=o(" \u2014 "),One=a("a"),umt=o("FlaxBartForConditionalGeneration"),pmt=o(" (BART model)"),_mt=l(),y7=a("li"),W9e=a("strong"),bmt=o("bert"),vmt=o(" \u2014 "),Vne=a("a"),Fmt=o("FlaxBertForMaskedLM"),Tmt=o(" (BERT model)"),Mmt=l(),x7=a("li"),U9e=a("strong"),Emt=o("big_bird"),Cmt=o(" \u2014 "),Xne=a("a"),wmt=o("FlaxBigBirdForMaskedLM"),Amt=o(" (BigBird model)"),Lmt=l(),$7=a("li"),H9e=a("strong"),ymt=o("distilbert"),xmt=o(" \u2014 "),zne=a("a"),$mt=o("FlaxDistilBertForMaskedLM"),kmt=o(" (DistilBERT model)"),Smt=l(),k7=a("li"),J9e=a("strong"),Rmt=o("electra"),Pmt=o(" \u2014 "),Qne=a("a"),Bmt=o("FlaxElectraForMaskedLM"),Imt=o(" (ELECTRA model)"),Nmt=l(),S7=a("li"),Y9e=a("strong"),qmt=o("mbart"),jmt=o(" \u2014 "),Wne=a("a"),Dmt=o("FlaxMBartForConditionalGeneration"),Gmt=o(" (mBART model)"),Omt=l(),R7=a("li"),K9e=a("strong"),Vmt=o("roberta"),Xmt=o(" \u2014 "),Une=a("a"),zmt=o("FlaxRobertaForMaskedLM"),Qmt=o(" (RoBERTa model)"),Wmt=l(),P7=a("li"),Z9e=a("strong"),Umt=o("roformer"),Hmt=o(" \u2014 "),Hne=a("a"),Jmt=o("FlaxRoFormerForMaskedLM"),Ymt=o(" (RoFormer model)"),Kmt=l(),B7=a("li"),exe=a("strong"),Zmt=o("xlm-roberta"),eft=o(" \u2014 "),Jne=a("a"),oft=o("FlaxXLMRobertaForMaskedLM"),rft=o(" (XLM-RoBERTa model)"),tft=l(),F(I7.$$.fragment),Eeo=l(),Hm=a("h2"),N7=a("a"),oxe=a("span"),F(wR.$$.fragment),aft=l(),rxe=a("span"),nft=o("FlaxAutoModelForSeq2SeqLM"),Ceo=l(),Ar=a("div"),F(AR.$$.fragment),sft=l(),Jm=a("p"),lft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Yne=a("a"),ift=o("from_pretrained()"),dft=o(" class method or the "),Kne=a("a"),cft=o("from_config()"),mft=o(` class
method.`),fft=l(),LR=a("p"),gft=o("This class cannot be instantiated directly using "),txe=a("code"),hft=o("__init__()"),uft=o(" (throws an error)."),pft=l(),ca=a("div"),F(yR.$$.fragment),_ft=l(),axe=a("p"),bft=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vft=l(),Ym=a("p"),Fft=o(`Note:
Loading a model from its configuration file does `),nxe=a("strong"),Tft=o("not"),Mft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=a("a"),Eft=o("from_pretrained()"),Cft=o(" to load the model weights."),wft=l(),F(q7.$$.fragment),Aft=l(),rt=a("div"),F(xR.$$.fragment),Lft=l(),sxe=a("p"),yft=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xft=l(),zn=a("p"),$ft=o("The model class to instantiate is selected based on the "),lxe=a("code"),kft=o("model_type"),Sft=o(` property of the config object (either
passed as an argument or loaded from `),ixe=a("code"),Rft=o("pretrained_model_name_or_path"),Pft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dxe=a("code"),Bft=o("pretrained_model_name_or_path"),Ift=o(":"),Nft=l(),ke=a("ul"),j7=a("li"),cxe=a("strong"),qft=o("bart"),jft=o(" \u2014 "),ese=a("a"),Dft=o("FlaxBartForConditionalGeneration"),Gft=o(" (BART model)"),Oft=l(),D7=a("li"),mxe=a("strong"),Vft=o("blenderbot"),Xft=o(" \u2014 "),ose=a("a"),zft=o("FlaxBlenderbotForConditionalGeneration"),Qft=o(" (Blenderbot model)"),Wft=l(),G7=a("li"),fxe=a("strong"),Uft=o("blenderbot-small"),Hft=o(" \u2014 "),rse=a("a"),Jft=o("FlaxBlenderbotSmallForConditionalGeneration"),Yft=o(" (BlenderbotSmall model)"),Kft=l(),O7=a("li"),gxe=a("strong"),Zft=o("encoder-decoder"),egt=o(" \u2014 "),tse=a("a"),ogt=o("FlaxEncoderDecoderModel"),rgt=o(" (Encoder decoder model)"),tgt=l(),V7=a("li"),hxe=a("strong"),agt=o("longt5"),ngt=o(" \u2014 "),ase=a("a"),sgt=o("FlaxLongT5ForConditionalGeneration"),lgt=o(" (LongT5 model)"),igt=l(),X7=a("li"),uxe=a("strong"),dgt=o("marian"),cgt=o(" \u2014 "),nse=a("a"),mgt=o("FlaxMarianMTModel"),fgt=o(" (Marian model)"),ggt=l(),z7=a("li"),pxe=a("strong"),hgt=o("mbart"),ugt=o(" \u2014 "),sse=a("a"),pgt=o("FlaxMBartForConditionalGeneration"),_gt=o(" (mBART model)"),bgt=l(),Q7=a("li"),_xe=a("strong"),vgt=o("mt5"),Fgt=o(" \u2014 "),lse=a("a"),Tgt=o("FlaxMT5ForConditionalGeneration"),Mgt=o(" (MT5 model)"),Egt=l(),W7=a("li"),bxe=a("strong"),Cgt=o("pegasus"),wgt=o(" \u2014 "),ise=a("a"),Agt=o("FlaxPegasusForConditionalGeneration"),Lgt=o(" (Pegasus model)"),ygt=l(),U7=a("li"),vxe=a("strong"),xgt=o("t5"),$gt=o(" \u2014 "),dse=a("a"),kgt=o("FlaxT5ForConditionalGeneration"),Sgt=o(" (T5 model)"),Rgt=l(),F(H7.$$.fragment),weo=l(),Km=a("h2"),J7=a("a"),Fxe=a("span"),F($R.$$.fragment),Pgt=l(),Txe=a("span"),Bgt=o("FlaxAutoModelForSequenceClassification"),Aeo=l(),Lr=a("div"),F(kR.$$.fragment),Igt=l(),Zm=a("p"),Ngt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cse=a("a"),qgt=o("from_pretrained()"),jgt=o(" class method or the "),mse=a("a"),Dgt=o("from_config()"),Ggt=o(` class
method.`),Ogt=l(),SR=a("p"),Vgt=o("This class cannot be instantiated directly using "),Mxe=a("code"),Xgt=o("__init__()"),zgt=o(" (throws an error)."),Qgt=l(),ma=a("div"),F(RR.$$.fragment),Wgt=l(),Exe=a("p"),Ugt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Hgt=l(),ef=a("p"),Jgt=o(`Note:
Loading a model from its configuration file does `),Cxe=a("strong"),Ygt=o("not"),Kgt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fse=a("a"),Zgt=o("from_pretrained()"),eht=o(" to load the model weights."),oht=l(),F(Y7.$$.fragment),rht=l(),tt=a("div"),F(PR.$$.fragment),tht=l(),wxe=a("p"),aht=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nht=l(),Qn=a("p"),sht=o("The model class to instantiate is selected based on the "),Axe=a("code"),lht=o("model_type"),iht=o(` property of the config object (either
passed as an argument or loaded from `),Lxe=a("code"),dht=o("pretrained_model_name_or_path"),cht=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yxe=a("code"),mht=o("pretrained_model_name_or_path"),fht=o(":"),ght=l(),Se=a("ul"),K7=a("li"),xxe=a("strong"),hht=o("albert"),uht=o(" \u2014 "),gse=a("a"),pht=o("FlaxAlbertForSequenceClassification"),_ht=o(" (ALBERT model)"),bht=l(),Z7=a("li"),$xe=a("strong"),vht=o("bart"),Fht=o(" \u2014 "),hse=a("a"),Tht=o("FlaxBartForSequenceClassification"),Mht=o(" (BART model)"),Eht=l(),eL=a("li"),kxe=a("strong"),Cht=o("bert"),wht=o(" \u2014 "),use=a("a"),Aht=o("FlaxBertForSequenceClassification"),Lht=o(" (BERT model)"),yht=l(),oL=a("li"),Sxe=a("strong"),xht=o("big_bird"),$ht=o(" \u2014 "),pse=a("a"),kht=o("FlaxBigBirdForSequenceClassification"),Sht=o(" (BigBird model)"),Rht=l(),rL=a("li"),Rxe=a("strong"),Pht=o("distilbert"),Bht=o(" \u2014 "),_se=a("a"),Iht=o("FlaxDistilBertForSequenceClassification"),Nht=o(" (DistilBERT model)"),qht=l(),tL=a("li"),Pxe=a("strong"),jht=o("electra"),Dht=o(" \u2014 "),bse=a("a"),Ght=o("FlaxElectraForSequenceClassification"),Oht=o(" (ELECTRA model)"),Vht=l(),aL=a("li"),Bxe=a("strong"),Xht=o("mbart"),zht=o(" \u2014 "),vse=a("a"),Qht=o("FlaxMBartForSequenceClassification"),Wht=o(" (mBART model)"),Uht=l(),nL=a("li"),Ixe=a("strong"),Hht=o("roberta"),Jht=o(" \u2014 "),Fse=a("a"),Yht=o("FlaxRobertaForSequenceClassification"),Kht=o(" (RoBERTa model)"),Zht=l(),sL=a("li"),Nxe=a("strong"),eut=o("roformer"),out=o(" \u2014 "),Tse=a("a"),rut=o("FlaxRoFormerForSequenceClassification"),tut=o(" (RoFormer model)"),aut=l(),lL=a("li"),qxe=a("strong"),nut=o("xlm-roberta"),sut=o(" \u2014 "),Mse=a("a"),lut=o("FlaxXLMRobertaForSequenceClassification"),iut=o(" (XLM-RoBERTa model)"),dut=l(),F(iL.$$.fragment),Leo=l(),of=a("h2"),dL=a("a"),jxe=a("span"),F(BR.$$.fragment),cut=l(),Dxe=a("span"),mut=o("FlaxAutoModelForQuestionAnswering"),yeo=l(),yr=a("div"),F(IR.$$.fragment),fut=l(),rf=a("p"),gut=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ese=a("a"),hut=o("from_pretrained()"),uut=o(" class method or the "),Cse=a("a"),put=o("from_config()"),_ut=o(` class
method.`),but=l(),NR=a("p"),vut=o("This class cannot be instantiated directly using "),Gxe=a("code"),Fut=o("__init__()"),Tut=o(" (throws an error)."),Mut=l(),fa=a("div"),F(qR.$$.fragment),Eut=l(),Oxe=a("p"),Cut=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wut=l(),tf=a("p"),Aut=o(`Note:
Loading a model from its configuration file does `),Vxe=a("strong"),Lut=o("not"),yut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=a("a"),xut=o("from_pretrained()"),$ut=o(" to load the model weights."),kut=l(),F(cL.$$.fragment),Sut=l(),at=a("div"),F(jR.$$.fragment),Rut=l(),Xxe=a("p"),Put=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),But=l(),Wn=a("p"),Iut=o("The model class to instantiate is selected based on the "),zxe=a("code"),Nut=o("model_type"),qut=o(` property of the config object (either
passed as an argument or loaded from `),Qxe=a("code"),jut=o("pretrained_model_name_or_path"),Dut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wxe=a("code"),Gut=o("pretrained_model_name_or_path"),Out=o(":"),Vut=l(),Re=a("ul"),mL=a("li"),Uxe=a("strong"),Xut=o("albert"),zut=o(" \u2014 "),Ase=a("a"),Qut=o("FlaxAlbertForQuestionAnswering"),Wut=o(" (ALBERT model)"),Uut=l(),fL=a("li"),Hxe=a("strong"),Hut=o("bart"),Jut=o(" \u2014 "),Lse=a("a"),Yut=o("FlaxBartForQuestionAnswering"),Kut=o(" (BART model)"),Zut=l(),gL=a("li"),Jxe=a("strong"),ept=o("bert"),opt=o(" \u2014 "),yse=a("a"),rpt=o("FlaxBertForQuestionAnswering"),tpt=o(" (BERT model)"),apt=l(),hL=a("li"),Yxe=a("strong"),npt=o("big_bird"),spt=o(" \u2014 "),xse=a("a"),lpt=o("FlaxBigBirdForQuestionAnswering"),ipt=o(" (BigBird model)"),dpt=l(),uL=a("li"),Kxe=a("strong"),cpt=o("distilbert"),mpt=o(" \u2014 "),$se=a("a"),fpt=o("FlaxDistilBertForQuestionAnswering"),gpt=o(" (DistilBERT model)"),hpt=l(),pL=a("li"),Zxe=a("strong"),upt=o("electra"),ppt=o(" \u2014 "),kse=a("a"),_pt=o("FlaxElectraForQuestionAnswering"),bpt=o(" (ELECTRA model)"),vpt=l(),_L=a("li"),e$e=a("strong"),Fpt=o("mbart"),Tpt=o(" \u2014 "),Sse=a("a"),Mpt=o("FlaxMBartForQuestionAnswering"),Ept=o(" (mBART model)"),Cpt=l(),bL=a("li"),o$e=a("strong"),wpt=o("roberta"),Apt=o(" \u2014 "),Rse=a("a"),Lpt=o("FlaxRobertaForQuestionAnswering"),ypt=o(" (RoBERTa model)"),xpt=l(),vL=a("li"),r$e=a("strong"),$pt=o("roformer"),kpt=o(" \u2014 "),Pse=a("a"),Spt=o("FlaxRoFormerForQuestionAnswering"),Rpt=o(" (RoFormer model)"),Ppt=l(),FL=a("li"),t$e=a("strong"),Bpt=o("xlm-roberta"),Ipt=o(" \u2014 "),Bse=a("a"),Npt=o("FlaxXLMRobertaForQuestionAnswering"),qpt=o(" (XLM-RoBERTa model)"),jpt=l(),F(TL.$$.fragment),xeo=l(),af=a("h2"),ML=a("a"),a$e=a("span"),F(DR.$$.fragment),Dpt=l(),n$e=a("span"),Gpt=o("FlaxAutoModelForTokenClassification"),$eo=l(),xr=a("div"),F(GR.$$.fragment),Opt=l(),nf=a("p"),Vpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ise=a("a"),Xpt=o("from_pretrained()"),zpt=o(" class method or the "),Nse=a("a"),Qpt=o("from_config()"),Wpt=o(` class
method.`),Upt=l(),OR=a("p"),Hpt=o("This class cannot be instantiated directly using "),s$e=a("code"),Jpt=o("__init__()"),Ypt=o(" (throws an error)."),Kpt=l(),ga=a("div"),F(VR.$$.fragment),Zpt=l(),l$e=a("p"),e_t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o_t=l(),sf=a("p"),r_t=o(`Note:
Loading a model from its configuration file does `),i$e=a("strong"),t_t=o("not"),a_t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=a("a"),n_t=o("from_pretrained()"),s_t=o(" to load the model weights."),l_t=l(),F(EL.$$.fragment),i_t=l(),nt=a("div"),F(XR.$$.fragment),d_t=l(),d$e=a("p"),c_t=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),m_t=l(),Un=a("p"),f_t=o("The model class to instantiate is selected based on the "),c$e=a("code"),g_t=o("model_type"),h_t=o(` property of the config object (either
passed as an argument or loaded from `),m$e=a("code"),u_t=o("pretrained_model_name_or_path"),p_t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f$e=a("code"),__t=o("pretrained_model_name_or_path"),b_t=o(":"),v_t=l(),Xe=a("ul"),CL=a("li"),g$e=a("strong"),F_t=o("albert"),T_t=o(" \u2014 "),jse=a("a"),M_t=o("FlaxAlbertForTokenClassification"),E_t=o(" (ALBERT model)"),C_t=l(),wL=a("li"),h$e=a("strong"),w_t=o("bert"),A_t=o(" \u2014 "),Dse=a("a"),L_t=o("FlaxBertForTokenClassification"),y_t=o(" (BERT model)"),x_t=l(),AL=a("li"),u$e=a("strong"),$_t=o("big_bird"),k_t=o(" \u2014 "),Gse=a("a"),S_t=o("FlaxBigBirdForTokenClassification"),R_t=o(" (BigBird model)"),P_t=l(),LL=a("li"),p$e=a("strong"),B_t=o("distilbert"),I_t=o(" \u2014 "),Ose=a("a"),N_t=o("FlaxDistilBertForTokenClassification"),q_t=o(" (DistilBERT model)"),j_t=l(),yL=a("li"),_$e=a("strong"),D_t=o("electra"),G_t=o(" \u2014 "),Vse=a("a"),O_t=o("FlaxElectraForTokenClassification"),V_t=o(" (ELECTRA model)"),X_t=l(),xL=a("li"),b$e=a("strong"),z_t=o("roberta"),Q_t=o(" \u2014 "),Xse=a("a"),W_t=o("FlaxRobertaForTokenClassification"),U_t=o(" (RoBERTa model)"),H_t=l(),$L=a("li"),v$e=a("strong"),J_t=o("roformer"),Y_t=o(" \u2014 "),zse=a("a"),K_t=o("FlaxRoFormerForTokenClassification"),Z_t=o(" (RoFormer model)"),ebt=l(),kL=a("li"),F$e=a("strong"),obt=o("xlm-roberta"),rbt=o(" \u2014 "),Qse=a("a"),tbt=o("FlaxXLMRobertaForTokenClassification"),abt=o(" (XLM-RoBERTa model)"),nbt=l(),F(SL.$$.fragment),keo=l(),lf=a("h2"),RL=a("a"),T$e=a("span"),F(zR.$$.fragment),sbt=l(),M$e=a("span"),lbt=o("FlaxAutoModelForMultipleChoice"),Seo=l(),$r=a("div"),F(QR.$$.fragment),ibt=l(),df=a("p"),dbt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Wse=a("a"),cbt=o("from_pretrained()"),mbt=o(" class method or the "),Use=a("a"),fbt=o("from_config()"),gbt=o(` class
method.`),hbt=l(),WR=a("p"),ubt=o("This class cannot be instantiated directly using "),E$e=a("code"),pbt=o("__init__()"),_bt=o(" (throws an error)."),bbt=l(),ha=a("div"),F(UR.$$.fragment),vbt=l(),C$e=a("p"),Fbt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tbt=l(),cf=a("p"),Mbt=o(`Note:
Loading a model from its configuration file does `),w$e=a("strong"),Ebt=o("not"),Cbt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hse=a("a"),wbt=o("from_pretrained()"),Abt=o(" to load the model weights."),Lbt=l(),F(PL.$$.fragment),ybt=l(),st=a("div"),F(HR.$$.fragment),xbt=l(),A$e=a("p"),$bt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kbt=l(),Hn=a("p"),Sbt=o("The model class to instantiate is selected based on the "),L$e=a("code"),Rbt=o("model_type"),Pbt=o(` property of the config object (either
passed as an argument or loaded from `),y$e=a("code"),Bbt=o("pretrained_model_name_or_path"),Ibt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x$e=a("code"),Nbt=o("pretrained_model_name_or_path"),qbt=o(":"),jbt=l(),ze=a("ul"),BL=a("li"),$$e=a("strong"),Dbt=o("albert"),Gbt=o(" \u2014 "),Jse=a("a"),Obt=o("FlaxAlbertForMultipleChoice"),Vbt=o(" (ALBERT model)"),Xbt=l(),IL=a("li"),k$e=a("strong"),zbt=o("bert"),Qbt=o(" \u2014 "),Yse=a("a"),Wbt=o("FlaxBertForMultipleChoice"),Ubt=o(" (BERT model)"),Hbt=l(),NL=a("li"),S$e=a("strong"),Jbt=o("big_bird"),Ybt=o(" \u2014 "),Kse=a("a"),Kbt=o("FlaxBigBirdForMultipleChoice"),Zbt=o(" (BigBird model)"),e2t=l(),qL=a("li"),R$e=a("strong"),o2t=o("distilbert"),r2t=o(" \u2014 "),Zse=a("a"),t2t=o("FlaxDistilBertForMultipleChoice"),a2t=o(" (DistilBERT model)"),n2t=l(),jL=a("li"),P$e=a("strong"),s2t=o("electra"),l2t=o(" \u2014 "),ele=a("a"),i2t=o("FlaxElectraForMultipleChoice"),d2t=o(" (ELECTRA model)"),c2t=l(),DL=a("li"),B$e=a("strong"),m2t=o("roberta"),f2t=o(" \u2014 "),ole=a("a"),g2t=o("FlaxRobertaForMultipleChoice"),h2t=o(" (RoBERTa model)"),u2t=l(),GL=a("li"),I$e=a("strong"),p2t=o("roformer"),_2t=o(" \u2014 "),rle=a("a"),b2t=o("FlaxRoFormerForMultipleChoice"),v2t=o(" (RoFormer model)"),F2t=l(),OL=a("li"),N$e=a("strong"),T2t=o("xlm-roberta"),M2t=o(" \u2014 "),tle=a("a"),E2t=o("FlaxXLMRobertaForMultipleChoice"),C2t=o(" (XLM-RoBERTa model)"),w2t=l(),F(VL.$$.fragment),Reo=l(),mf=a("h2"),XL=a("a"),q$e=a("span"),F(JR.$$.fragment),A2t=l(),j$e=a("span"),L2t=o("FlaxAutoModelForNextSentencePrediction"),Peo=l(),kr=a("div"),F(YR.$$.fragment),y2t=l(),ff=a("p"),x2t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ale=a("a"),$2t=o("from_pretrained()"),k2t=o(" class method or the "),nle=a("a"),S2t=o("from_config()"),R2t=o(` class
method.`),P2t=l(),KR=a("p"),B2t=o("This class cannot be instantiated directly using "),D$e=a("code"),I2t=o("__init__()"),N2t=o(" (throws an error)."),q2t=l(),ua=a("div"),F(ZR.$$.fragment),j2t=l(),G$e=a("p"),D2t=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),G2t=l(),gf=a("p"),O2t=o(`Note:
Loading a model from its configuration file does `),O$e=a("strong"),V2t=o("not"),X2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sle=a("a"),z2t=o("from_pretrained()"),Q2t=o(" to load the model weights."),W2t=l(),F(zL.$$.fragment),U2t=l(),lt=a("div"),F(eP.$$.fragment),H2t=l(),V$e=a("p"),J2t=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Y2t=l(),Jn=a("p"),K2t=o("The model class to instantiate is selected based on the "),X$e=a("code"),Z2t=o("model_type"),e1t=o(` property of the config object (either
passed as an argument or loaded from `),z$e=a("code"),o1t=o("pretrained_model_name_or_path"),r1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q$e=a("code"),t1t=o("pretrained_model_name_or_path"),a1t=o(":"),n1t=l(),W$e=a("ul"),QL=a("li"),U$e=a("strong"),s1t=o("bert"),l1t=o(" \u2014 "),lle=a("a"),i1t=o("FlaxBertForNextSentencePrediction"),d1t=o(" (BERT model)"),c1t=l(),F(WL.$$.fragment),Beo=l(),hf=a("h2"),UL=a("a"),H$e=a("span"),F(oP.$$.fragment),m1t=l(),J$e=a("span"),f1t=o("FlaxAutoModelForImageClassification"),Ieo=l(),Sr=a("div"),F(rP.$$.fragment),g1t=l(),uf=a("p"),h1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ile=a("a"),u1t=o("from_pretrained()"),p1t=o(" class method or the "),dle=a("a"),_1t=o("from_config()"),b1t=o(` class
method.`),v1t=l(),tP=a("p"),F1t=o("This class cannot be instantiated directly using "),Y$e=a("code"),T1t=o("__init__()"),M1t=o(" (throws an error)."),E1t=l(),pa=a("div"),F(aP.$$.fragment),C1t=l(),K$e=a("p"),w1t=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),A1t=l(),pf=a("p"),L1t=o(`Note:
Loading a model from its configuration file does `),Z$e=a("strong"),y1t=o("not"),x1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cle=a("a"),$1t=o("from_pretrained()"),k1t=o(" to load the model weights."),S1t=l(),F(HL.$$.fragment),R1t=l(),it=a("div"),F(nP.$$.fragment),P1t=l(),eke=a("p"),B1t=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),I1t=l(),Yn=a("p"),N1t=o("The model class to instantiate is selected based on the "),oke=a("code"),q1t=o("model_type"),j1t=o(` property of the config object (either
passed as an argument or loaded from `),rke=a("code"),D1t=o("pretrained_model_name_or_path"),G1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tke=a("code"),O1t=o("pretrained_model_name_or_path"),V1t=o(":"),X1t=l(),sP=a("ul"),JL=a("li"),ake=a("strong"),z1t=o("beit"),Q1t=o(" \u2014 "),mle=a("a"),W1t=o("FlaxBeitForImageClassification"),U1t=o(" (BEiT model)"),H1t=l(),YL=a("li"),nke=a("strong"),J1t=o("vit"),Y1t=o(" \u2014 "),fle=a("a"),K1t=o("FlaxViTForImageClassification"),Z1t=o(" (ViT model)"),evt=l(),F(KL.$$.fragment),Neo=l(),_f=a("h2"),ZL=a("a"),ske=a("span"),F(lP.$$.fragment),ovt=l(),lke=a("span"),rvt=o("FlaxAutoModelForVision2Seq"),qeo=l(),Rr=a("div"),F(iP.$$.fragment),tvt=l(),bf=a("p"),avt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gle=a("a"),nvt=o("from_pretrained()"),svt=o(" class method or the "),hle=a("a"),lvt=o("from_config()"),ivt=o(` class
method.`),dvt=l(),dP=a("p"),cvt=o("This class cannot be instantiated directly using "),ike=a("code"),mvt=o("__init__()"),fvt=o(" (throws an error)."),gvt=l(),_a=a("div"),F(cP.$$.fragment),hvt=l(),dke=a("p"),uvt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pvt=l(),vf=a("p"),_vt=o(`Note:
Loading a model from its configuration file does `),cke=a("strong"),bvt=o("not"),vvt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=a("a"),Fvt=o("from_pretrained()"),Tvt=o(" to load the model weights."),Mvt=l(),F(ey.$$.fragment),Evt=l(),dt=a("div"),F(mP.$$.fragment),Cvt=l(),mke=a("p"),wvt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Avt=l(),Kn=a("p"),Lvt=o("The model class to instantiate is selected based on the "),fke=a("code"),yvt=o("model_type"),xvt=o(` property of the config object (either
passed as an argument or loaded from `),gke=a("code"),$vt=o("pretrained_model_name_or_path"),kvt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hke=a("code"),Svt=o("pretrained_model_name_or_path"),Rvt=o(":"),Pvt=l(),uke=a("ul"),oy=a("li"),pke=a("strong"),Bvt=o("vision-encoder-decoder"),Ivt=o(" \u2014 "),ple=a("a"),Nvt=o("FlaxVisionEncoderDecoderModel"),qvt=o(" (Vision Encoder decoder model)"),jvt=l(),F(ry.$$.fragment),this.h()},l(m){const _=dua('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var fP=s(u);f=n(fP,"A",{id:!0,class:!0,href:!0});var _ke=s(f);p=n(_ke,"SPAN",{});var bke=s(p);T(d.$$.fragment,bke),bke.forEach(t),_ke.forEach(t),h=i(fP),yo=n(fP,"SPAN",{});var vke=s(yo);td=r(vke,"Auto Classes"),vke.forEach(t),fP.forEach(t),Ef=i(m),pt=n(m,"P",{});var gP=s(pt);ad=r(gP,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=n(gP,"CODE",{});var Fke=s(nd);R9=r(Fke,"from_pretrained()"),Fke.forEach(t),Cf=r(gP,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),gP.forEach(t),Ve=i(m),He=n(m,"P",{});var Zn=s(He);sd=r(Zn,"Instantiating one of "),es=n(Zn,"A",{href:!0});var Tke=s(es);P9=r(Tke,"AutoConfig"),Tke.forEach(t),os=r(Zn,", "),rs=n(Zn,"A",{href:!0});var Mke=s(rs);B9=r(Mke,"AutoModel"),Mke.forEach(t),ld=r(Zn,`, and
`),ts=n(Zn,"A",{href:!0});var Eke=s(ts);I9=r(Eke,"AutoTokenizer"),Eke.forEach(t),id=r(Zn," will directly create a class of the relevant architecture. For instance"),Zn.forEach(t),wf=i(m),T(Qa.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var hP=s(Ae);NB=r(hP,"will create a model that is an instance of "),dd=n(hP,"A",{href:!0});var Cke=s(dd);qB=r(Cke,"BertModel"),Cke.forEach(t),jB=r(hP,"."),hP.forEach(t),xo=i(m),Wa=n(m,"P",{});var uP=s(Wa);DB=r(uP,"There is one class of "),Af=n(uP,"CODE",{});var wke=s(Af);GB=r(wke,"AutoModel"),wke.forEach(t),rto=r(uP," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),uP.forEach(t),AKe=i(m),cd=n(m,"H2",{class:!0});var pP=s(cd);Lf=n(pP,"A",{id:!0,class:!0,href:!0});var Ake=s(Lf);Fde=n(Ake,"SPAN",{});var Lke=s(Fde);T(N9.$$.fragment,Lke),Lke.forEach(t),Ake.forEach(t),tto=i(pP),Tde=n(pP,"SPAN",{});var yke=s(Tde);ato=r(yke,"Extending the Auto Classes"),yke.forEach(t),pP.forEach(t),LKe=i(m),as=n(m,"P",{});var Ff=s(as);nto=r(Ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mde=n(Ff,"CODE",{});var xke=s(Mde);sto=r(xke,"NewModel"),xke.forEach(t),lto=r(Ff,", make sure you have a "),Ede=n(Ff,"CODE",{});var $ke=s(Ede);ito=r($ke,"NewModelConfig"),$ke.forEach(t),dto=r(Ff,` then you can add those to the auto
classes like this:`),Ff.forEach(t),yKe=i(m),T(q9.$$.fragment,m),xKe=i(m),OB=n(m,"P",{});var kke=s(OB);cto=r(kke,"You will then be able to use the auto classes like you would usually do!"),kke.forEach(t),$Ke=i(m),T(yf.$$.fragment,m),kKe=i(m),md=n(m,"H2",{class:!0});var _P=s(md);xf=n(_P,"A",{id:!0,class:!0,href:!0});var Ske=s(xf);Cde=n(Ske,"SPAN",{});var Rke=s(Cde);T(j9.$$.fragment,Rke),Rke.forEach(t),Ske.forEach(t),mto=i(_P),wde=n(_P,"SPAN",{});var Pke=s(wde);fto=r(Pke,"AutoConfig"),Pke.forEach(t),_P.forEach(t),SKe=i(m),$o=n(m,"DIV",{class:!0});var ht=s($o);T(D9.$$.fragment,ht),gto=i(ht),G9=n(ht,"P",{});var bP=s(G9);hto=r(bP,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),VB=n(bP,"A",{href:!0});var Bke=s(VB);uto=r(Bke,"from_pretrained()"),Bke.forEach(t),pto=r(bP," class method."),bP.forEach(t),_to=i(ht),O9=n(ht,"P",{});var vP=s(O9);bto=r(vP,"This class cannot be instantiated directly using "),Ade=n(vP,"CODE",{});var Ike=s(Ade);vto=r(Ike,"__init__()"),Ike.forEach(t),Fto=r(vP," (throws an error)."),vP.forEach(t),Tto=i(ht),Pr=n(ht,"DIV",{class:!0});var ut=s(Pr);T(V9.$$.fragment,ut),Mto=i(ut),Lde=n(ut,"P",{});var Nke=s(Lde);Eto=r(Nke,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Nke.forEach(t),Cto=i(ut),fd=n(ut,"P",{});var Tf=s(fd);wto=r(Tf,"The configuration class to instantiate is selected based on the "),yde=n(Tf,"CODE",{});var qke=s(yde);Ato=r(qke,"model_type"),qke.forEach(t),Lto=r(Tf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xde=n(Tf,"CODE",{});var jke=s(xde);yto=r(jke,"pretrained_model_name_or_path"),jke.forEach(t),xto=r(Tf,":"),Tf.forEach(t),$to=i(ut),A=n(ut,"UL",{});var L=s(A);$f=n(L,"LI",{});var ty=s($f);$de=n(ty,"STRONG",{});var Dke=s($de);kto=r(Dke,"albert"),Dke.forEach(t),Sto=r(ty," \u2014 "),XB=n(ty,"A",{href:!0});var Gke=s(XB);Rto=r(Gke,"AlbertConfig"),Gke.forEach(t),Pto=r(ty," (ALBERT model)"),ty.forEach(t),Bto=i(L),kf=n(L,"LI",{});var ay=s(kf);kde=n(ay,"STRONG",{});var Oke=s(kde);Ito=r(Oke,"bart"),Oke.forEach(t),Nto=r(ay," \u2014 "),zB=n(ay,"A",{href:!0});var Vke=s(zB);qto=r(Vke,"BartConfig"),Vke.forEach(t),jto=r(ay," (BART model)"),ay.forEach(t),Dto=i(L),Sf=n(L,"LI",{});var ny=s(Sf);Sde=n(ny,"STRONG",{});var Xke=s(Sde);Gto=r(Xke,"beit"),Xke.forEach(t),Oto=r(ny," \u2014 "),QB=n(ny,"A",{href:!0});var zke=s(QB);Vto=r(zke,"BeitConfig"),zke.forEach(t),Xto=r(ny," (BEiT model)"),ny.forEach(t),zto=i(L),Rf=n(L,"LI",{});var sy=s(Rf);Rde=n(sy,"STRONG",{});var Qke=s(Rde);Qto=r(Qke,"bert"),Qke.forEach(t),Wto=r(sy," \u2014 "),WB=n(sy,"A",{href:!0});var Wke=s(WB);Uto=r(Wke,"BertConfig"),Wke.forEach(t),Hto=r(sy," (BERT model)"),sy.forEach(t),Jto=i(L),Pf=n(L,"LI",{});var ly=s(Pf);Pde=n(ly,"STRONG",{});var Uke=s(Pde);Yto=r(Uke,"bert-generation"),Uke.forEach(t),Kto=r(ly," \u2014 "),UB=n(ly,"A",{href:!0});var Hke=s(UB);Zto=r(Hke,"BertGenerationConfig"),Hke.forEach(t),eao=r(ly," (Bert Generation model)"),ly.forEach(t),oao=i(L),Bf=n(L,"LI",{});var iy=s(Bf);Bde=n(iy,"STRONG",{});var Jke=s(Bde);rao=r(Jke,"big_bird"),Jke.forEach(t),tao=r(iy," \u2014 "),HB=n(iy,"A",{href:!0});var Yke=s(HB);aao=r(Yke,"BigBirdConfig"),Yke.forEach(t),nao=r(iy," (BigBird model)"),iy.forEach(t),sao=i(L),If=n(L,"LI",{});var dy=s(If);Ide=n(dy,"STRONG",{});var Kke=s(Ide);lao=r(Kke,"bigbird_pegasus"),Kke.forEach(t),iao=r(dy," \u2014 "),JB=n(dy,"A",{href:!0});var Zke=s(JB);dao=r(Zke,"BigBirdPegasusConfig"),Zke.forEach(t),cao=r(dy," (BigBird-Pegasus model)"),dy.forEach(t),mao=i(L),Nf=n(L,"LI",{});var cy=s(Nf);Nde=n(cy,"STRONG",{});var eSe=s(Nde);fao=r(eSe,"blenderbot"),eSe.forEach(t),gao=r(cy," \u2014 "),YB=n(cy,"A",{href:!0});var oSe=s(YB);hao=r(oSe,"BlenderbotConfig"),oSe.forEach(t),uao=r(cy," (Blenderbot model)"),cy.forEach(t),pao=i(L),qf=n(L,"LI",{});var my=s(qf);qde=n(my,"STRONG",{});var rSe=s(qde);_ao=r(rSe,"blenderbot-small"),rSe.forEach(t),bao=r(my," \u2014 "),KB=n(my,"A",{href:!0});var tSe=s(KB);vao=r(tSe,"BlenderbotSmallConfig"),tSe.forEach(t),Fao=r(my," (BlenderbotSmall model)"),my.forEach(t),Tao=i(L),jf=n(L,"LI",{});var fy=s(jf);jde=n(fy,"STRONG",{});var aSe=s(jde);Mao=r(aSe,"bloom"),aSe.forEach(t),Eao=r(fy," \u2014 "),ZB=n(fy,"A",{href:!0});var nSe=s(ZB);Cao=r(nSe,"BloomConfig"),nSe.forEach(t),wao=r(fy," (BLOOM model)"),fy.forEach(t),Aao=i(L),Df=n(L,"LI",{});var gy=s(Df);Dde=n(gy,"STRONG",{});var sSe=s(Dde);Lao=r(sSe,"camembert"),sSe.forEach(t),yao=r(gy," \u2014 "),eI=n(gy,"A",{href:!0});var lSe=s(eI);xao=r(lSe,"CamembertConfig"),lSe.forEach(t),$ao=r(gy," (CamemBERT model)"),gy.forEach(t),kao=i(L),Gf=n(L,"LI",{});var hy=s(Gf);Gde=n(hy,"STRONG",{});var iSe=s(Gde);Sao=r(iSe,"canine"),iSe.forEach(t),Rao=r(hy," \u2014 "),oI=n(hy,"A",{href:!0});var dSe=s(oI);Pao=r(dSe,"CanineConfig"),dSe.forEach(t),Bao=r(hy," (CANINE model)"),hy.forEach(t),Iao=i(L),Of=n(L,"LI",{});var uy=s(Of);Ode=n(uy,"STRONG",{});var cSe=s(Ode);Nao=r(cSe,"clip"),cSe.forEach(t),qao=r(uy," \u2014 "),rI=n(uy,"A",{href:!0});var mSe=s(rI);jao=r(mSe,"CLIPConfig"),mSe.forEach(t),Dao=r(uy," (CLIP model)"),uy.forEach(t),Gao=i(L),Vf=n(L,"LI",{});var py=s(Vf);Vde=n(py,"STRONG",{});var fSe=s(Vde);Oao=r(fSe,"codegen"),fSe.forEach(t),Vao=r(py," \u2014 "),tI=n(py,"A",{href:!0});var gSe=s(tI);Xao=r(gSe,"CodeGenConfig"),gSe.forEach(t),zao=r(py," (CodeGen model)"),py.forEach(t),Qao=i(L),Xf=n(L,"LI",{});var _y=s(Xf);Xde=n(_y,"STRONG",{});var hSe=s(Xde);Wao=r(hSe,"conditional_detr"),hSe.forEach(t),Uao=r(_y," \u2014 "),aI=n(_y,"A",{href:!0});var uSe=s(aI);Hao=r(uSe,"ConditionalDetrConfig"),uSe.forEach(t),Jao=r(_y," (Conditional DETR model)"),_y.forEach(t),Yao=i(L),zf=n(L,"LI",{});var by=s(zf);zde=n(by,"STRONG",{});var pSe=s(zde);Kao=r(pSe,"convbert"),pSe.forEach(t),Zao=r(by," \u2014 "),nI=n(by,"A",{href:!0});var _Se=s(nI);eno=r(_Se,"ConvBertConfig"),_Se.forEach(t),ono=r(by," (ConvBERT model)"),by.forEach(t),rno=i(L),Qf=n(L,"LI",{});var vy=s(Qf);Qde=n(vy,"STRONG",{});var bSe=s(Qde);tno=r(bSe,"convnext"),bSe.forEach(t),ano=r(vy," \u2014 "),sI=n(vy,"A",{href:!0});var vSe=s(sI);nno=r(vSe,"ConvNextConfig"),vSe.forEach(t),sno=r(vy," (ConvNeXT model)"),vy.forEach(t),lno=i(L),Wf=n(L,"LI",{});var Fy=s(Wf);Wde=n(Fy,"STRONG",{});var FSe=s(Wde);ino=r(FSe,"ctrl"),FSe.forEach(t),dno=r(Fy," \u2014 "),lI=n(Fy,"A",{href:!0});var TSe=s(lI);cno=r(TSe,"CTRLConfig"),TSe.forEach(t),mno=r(Fy," (CTRL model)"),Fy.forEach(t),fno=i(L),Uf=n(L,"LI",{});var Ty=s(Uf);Ude=n(Ty,"STRONG",{});var MSe=s(Ude);gno=r(MSe,"cvt"),MSe.forEach(t),hno=r(Ty," \u2014 "),iI=n(Ty,"A",{href:!0});var ESe=s(iI);uno=r(ESe,"CvtConfig"),ESe.forEach(t),pno=r(Ty," (CvT model)"),Ty.forEach(t),_no=i(L),Hf=n(L,"LI",{});var My=s(Hf);Hde=n(My,"STRONG",{});var CSe=s(Hde);bno=r(CSe,"data2vec-audio"),CSe.forEach(t),vno=r(My," \u2014 "),dI=n(My,"A",{href:!0});var wSe=s(dI);Fno=r(wSe,"Data2VecAudioConfig"),wSe.forEach(t),Tno=r(My," (Data2VecAudio model)"),My.forEach(t),Mno=i(L),Jf=n(L,"LI",{});var Ey=s(Jf);Jde=n(Ey,"STRONG",{});var ASe=s(Jde);Eno=r(ASe,"data2vec-text"),ASe.forEach(t),Cno=r(Ey," \u2014 "),cI=n(Ey,"A",{href:!0});var LSe=s(cI);wno=r(LSe,"Data2VecTextConfig"),LSe.forEach(t),Ano=r(Ey," (Data2VecText model)"),Ey.forEach(t),Lno=i(L),Yf=n(L,"LI",{});var Cy=s(Yf);Yde=n(Cy,"STRONG",{});var ySe=s(Yde);yno=r(ySe,"data2vec-vision"),ySe.forEach(t),xno=r(Cy," \u2014 "),mI=n(Cy,"A",{href:!0});var xSe=s(mI);$no=r(xSe,"Data2VecVisionConfig"),xSe.forEach(t),kno=r(Cy," (Data2VecVision model)"),Cy.forEach(t),Sno=i(L),Kf=n(L,"LI",{});var wy=s(Kf);Kde=n(wy,"STRONG",{});var $Se=s(Kde);Rno=r($Se,"deberta"),$Se.forEach(t),Pno=r(wy," \u2014 "),fI=n(wy,"A",{href:!0});var kSe=s(fI);Bno=r(kSe,"DebertaConfig"),kSe.forEach(t),Ino=r(wy," (DeBERTa model)"),wy.forEach(t),Nno=i(L),Zf=n(L,"LI",{});var Ay=s(Zf);Zde=n(Ay,"STRONG",{});var SSe=s(Zde);qno=r(SSe,"deberta-v2"),SSe.forEach(t),jno=r(Ay," \u2014 "),gI=n(Ay,"A",{href:!0});var RSe=s(gI);Dno=r(RSe,"DebertaV2Config"),RSe.forEach(t),Gno=r(Ay," (DeBERTa-v2 model)"),Ay.forEach(t),Ono=i(L),eg=n(L,"LI",{});var Ly=s(eg);ece=n(Ly,"STRONG",{});var PSe=s(ece);Vno=r(PSe,"decision_transformer"),PSe.forEach(t),Xno=r(Ly," \u2014 "),hI=n(Ly,"A",{href:!0});var BSe=s(hI);zno=r(BSe,"DecisionTransformerConfig"),BSe.forEach(t),Qno=r(Ly," (Decision Transformer model)"),Ly.forEach(t),Wno=i(L),og=n(L,"LI",{});var yy=s(og);oce=n(yy,"STRONG",{});var ISe=s(oce);Uno=r(ISe,"deformable_detr"),ISe.forEach(t),Hno=r(yy," \u2014 "),uI=n(yy,"A",{href:!0});var NSe=s(uI);Jno=r(NSe,"DeformableDetrConfig"),NSe.forEach(t),Yno=r(yy," (Deformable DETR model)"),yy.forEach(t),Kno=i(L),rg=n(L,"LI",{});var qSe=s(rg);rce=n(qSe,"STRONG",{});var Gvt=s(rce);Zno=r(Gvt,"deit"),Gvt.forEach(t),eso=r(qSe," \u2014 "),pI=n(qSe,"A",{href:!0});var Ovt=s(pI);oso=r(Ovt,"DeiTConfig"),Ovt.forEach(t),rso=r(qSe," (DeiT model)"),qSe.forEach(t),tso=i(L),tg=n(L,"LI",{});var jSe=s(tg);tce=n(jSe,"STRONG",{});var Vvt=s(tce);aso=r(Vvt,"detr"),Vvt.forEach(t),nso=r(jSe," \u2014 "),_I=n(jSe,"A",{href:!0});var Xvt=s(_I);sso=r(Xvt,"DetrConfig"),Xvt.forEach(t),lso=r(jSe," (DETR model)"),jSe.forEach(t),iso=i(L),ag=n(L,"LI",{});var DSe=s(ag);ace=n(DSe,"STRONG",{});var zvt=s(ace);dso=r(zvt,"distilbert"),zvt.forEach(t),cso=r(DSe," \u2014 "),bI=n(DSe,"A",{href:!0});var Qvt=s(bI);mso=r(Qvt,"DistilBertConfig"),Qvt.forEach(t),fso=r(DSe," (DistilBERT model)"),DSe.forEach(t),gso=i(L),ng=n(L,"LI",{});var GSe=s(ng);nce=n(GSe,"STRONG",{});var Wvt=s(nce);hso=r(Wvt,"donut-swin"),Wvt.forEach(t),uso=r(GSe," \u2014 "),vI=n(GSe,"A",{href:!0});var Uvt=s(vI);pso=r(Uvt,"DonutSwinConfig"),Uvt.forEach(t),_so=r(GSe," (DonutSwin model)"),GSe.forEach(t),bso=i(L),sg=n(L,"LI",{});var OSe=s(sg);sce=n(OSe,"STRONG",{});var Hvt=s(sce);vso=r(Hvt,"dpr"),Hvt.forEach(t),Fso=r(OSe," \u2014 "),FI=n(OSe,"A",{href:!0});var Jvt=s(FI);Tso=r(Jvt,"DPRConfig"),Jvt.forEach(t),Mso=r(OSe," (DPR model)"),OSe.forEach(t),Eso=i(L),lg=n(L,"LI",{});var VSe=s(lg);lce=n(VSe,"STRONG",{});var Yvt=s(lce);Cso=r(Yvt,"dpt"),Yvt.forEach(t),wso=r(VSe," \u2014 "),TI=n(VSe,"A",{href:!0});var Kvt=s(TI);Aso=r(Kvt,"DPTConfig"),Kvt.forEach(t),Lso=r(VSe," (DPT model)"),VSe.forEach(t),yso=i(L),ig=n(L,"LI",{});var XSe=s(ig);ice=n(XSe,"STRONG",{});var Zvt=s(ice);xso=r(Zvt,"electra"),Zvt.forEach(t),$so=r(XSe," \u2014 "),MI=n(XSe,"A",{href:!0});var eFt=s(MI);kso=r(eFt,"ElectraConfig"),eFt.forEach(t),Sso=r(XSe," (ELECTRA model)"),XSe.forEach(t),Rso=i(L),dg=n(L,"LI",{});var zSe=s(dg);dce=n(zSe,"STRONG",{});var oFt=s(dce);Pso=r(oFt,"encoder-decoder"),oFt.forEach(t),Bso=r(zSe," \u2014 "),EI=n(zSe,"A",{href:!0});var rFt=s(EI);Iso=r(rFt,"EncoderDecoderConfig"),rFt.forEach(t),Nso=r(zSe," (Encoder decoder model)"),zSe.forEach(t),qso=i(L),cg=n(L,"LI",{});var QSe=s(cg);cce=n(QSe,"STRONG",{});var tFt=s(cce);jso=r(tFt,"ernie"),tFt.forEach(t),Dso=r(QSe," \u2014 "),CI=n(QSe,"A",{href:!0});var aFt=s(CI);Gso=r(aFt,"ErnieConfig"),aFt.forEach(t),Oso=r(QSe," (ERNIE model)"),QSe.forEach(t),Vso=i(L),mg=n(L,"LI",{});var WSe=s(mg);mce=n(WSe,"STRONG",{});var nFt=s(mce);Xso=r(nFt,"flaubert"),nFt.forEach(t),zso=r(WSe," \u2014 "),wI=n(WSe,"A",{href:!0});var sFt=s(wI);Qso=r(sFt,"FlaubertConfig"),sFt.forEach(t),Wso=r(WSe," (FlauBERT model)"),WSe.forEach(t),Uso=i(L),fg=n(L,"LI",{});var USe=s(fg);fce=n(USe,"STRONG",{});var lFt=s(fce);Hso=r(lFt,"flava"),lFt.forEach(t),Jso=r(USe," \u2014 "),AI=n(USe,"A",{href:!0});var iFt=s(AI);Yso=r(iFt,"FlavaConfig"),iFt.forEach(t),Kso=r(USe," (FLAVA model)"),USe.forEach(t),Zso=i(L),gg=n(L,"LI",{});var HSe=s(gg);gce=n(HSe,"STRONG",{});var dFt=s(gce);elo=r(dFt,"fnet"),dFt.forEach(t),olo=r(HSe," \u2014 "),LI=n(HSe,"A",{href:!0});var cFt=s(LI);rlo=r(cFt,"FNetConfig"),cFt.forEach(t),tlo=r(HSe," (FNet model)"),HSe.forEach(t),alo=i(L),hg=n(L,"LI",{});var JSe=s(hg);hce=n(JSe,"STRONG",{});var mFt=s(hce);nlo=r(mFt,"fsmt"),mFt.forEach(t),slo=r(JSe," \u2014 "),yI=n(JSe,"A",{href:!0});var fFt=s(yI);llo=r(fFt,"FSMTConfig"),fFt.forEach(t),ilo=r(JSe," (FairSeq Machine-Translation model)"),JSe.forEach(t),dlo=i(L),ug=n(L,"LI",{});var YSe=s(ug);uce=n(YSe,"STRONG",{});var gFt=s(uce);clo=r(gFt,"funnel"),gFt.forEach(t),mlo=r(YSe," \u2014 "),xI=n(YSe,"A",{href:!0});var hFt=s(xI);flo=r(hFt,"FunnelConfig"),hFt.forEach(t),glo=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),hlo=i(L),pg=n(L,"LI",{});var KSe=s(pg);pce=n(KSe,"STRONG",{});var uFt=s(pce);ulo=r(uFt,"glpn"),uFt.forEach(t),plo=r(KSe," \u2014 "),$I=n(KSe,"A",{href:!0});var pFt=s($I);_lo=r(pFt,"GLPNConfig"),pFt.forEach(t),blo=r(KSe," (GLPN model)"),KSe.forEach(t),vlo=i(L),_g=n(L,"LI",{});var ZSe=s(_g);_ce=n(ZSe,"STRONG",{});var _Ft=s(_ce);Flo=r(_Ft,"gpt2"),_Ft.forEach(t),Tlo=r(ZSe," \u2014 "),kI=n(ZSe,"A",{href:!0});var bFt=s(kI);Mlo=r(bFt,"GPT2Config"),bFt.forEach(t),Elo=r(ZSe," (OpenAI GPT-2 model)"),ZSe.forEach(t),Clo=i(L),bg=n(L,"LI",{});var eRe=s(bg);bce=n(eRe,"STRONG",{});var vFt=s(bce);wlo=r(vFt,"gpt_neo"),vFt.forEach(t),Alo=r(eRe," \u2014 "),SI=n(eRe,"A",{href:!0});var FFt=s(SI);Llo=r(FFt,"GPTNeoConfig"),FFt.forEach(t),ylo=r(eRe," (GPT Neo model)"),eRe.forEach(t),xlo=i(L),vg=n(L,"LI",{});var oRe=s(vg);vce=n(oRe,"STRONG",{});var TFt=s(vce);$lo=r(TFt,"gpt_neox"),TFt.forEach(t),klo=r(oRe," \u2014 "),RI=n(oRe,"A",{href:!0});var MFt=s(RI);Slo=r(MFt,"GPTNeoXConfig"),MFt.forEach(t),Rlo=r(oRe," (GPT NeoX model)"),oRe.forEach(t),Plo=i(L),Fg=n(L,"LI",{});var rRe=s(Fg);Fce=n(rRe,"STRONG",{});var EFt=s(Fce);Blo=r(EFt,"gpt_neox_japanese"),EFt.forEach(t),Ilo=r(rRe," \u2014 "),PI=n(rRe,"A",{href:!0});var CFt=s(PI);Nlo=r(CFt,"GPTNeoXJapaneseConfig"),CFt.forEach(t),qlo=r(rRe," (GPT NeoX Japanese model)"),rRe.forEach(t),jlo=i(L),Tg=n(L,"LI",{});var tRe=s(Tg);Tce=n(tRe,"STRONG",{});var wFt=s(Tce);Dlo=r(wFt,"gptj"),wFt.forEach(t),Glo=r(tRe," \u2014 "),BI=n(tRe,"A",{href:!0});var AFt=s(BI);Olo=r(AFt,"GPTJConfig"),AFt.forEach(t),Vlo=r(tRe," (GPT-J model)"),tRe.forEach(t),Xlo=i(L),Mg=n(L,"LI",{});var aRe=s(Mg);Mce=n(aRe,"STRONG",{});var LFt=s(Mce);zlo=r(LFt,"groupvit"),LFt.forEach(t),Qlo=r(aRe," \u2014 "),II=n(aRe,"A",{href:!0});var yFt=s(II);Wlo=r(yFt,"GroupViTConfig"),yFt.forEach(t),Ulo=r(aRe," (GroupViT model)"),aRe.forEach(t),Hlo=i(L),Eg=n(L,"LI",{});var nRe=s(Eg);Ece=n(nRe,"STRONG",{});var xFt=s(Ece);Jlo=r(xFt,"hubert"),xFt.forEach(t),Ylo=r(nRe," \u2014 "),NI=n(nRe,"A",{href:!0});var $Ft=s(NI);Klo=r($Ft,"HubertConfig"),$Ft.forEach(t),Zlo=r(nRe," (Hubert model)"),nRe.forEach(t),eio=i(L),Cg=n(L,"LI",{});var sRe=s(Cg);Cce=n(sRe,"STRONG",{});var kFt=s(Cce);oio=r(kFt,"ibert"),kFt.forEach(t),rio=r(sRe," \u2014 "),qI=n(sRe,"A",{href:!0});var SFt=s(qI);tio=r(SFt,"IBertConfig"),SFt.forEach(t),aio=r(sRe," (I-BERT model)"),sRe.forEach(t),nio=i(L),wg=n(L,"LI",{});var lRe=s(wg);wce=n(lRe,"STRONG",{});var RFt=s(wce);sio=r(RFt,"imagegpt"),RFt.forEach(t),lio=r(lRe," \u2014 "),jI=n(lRe,"A",{href:!0});var PFt=s(jI);iio=r(PFt,"ImageGPTConfig"),PFt.forEach(t),dio=r(lRe," (ImageGPT model)"),lRe.forEach(t),cio=i(L),Ag=n(L,"LI",{});var iRe=s(Ag);Ace=n(iRe,"STRONG",{});var BFt=s(Ace);mio=r(BFt,"layoutlm"),BFt.forEach(t),fio=r(iRe," \u2014 "),DI=n(iRe,"A",{href:!0});var IFt=s(DI);gio=r(IFt,"LayoutLMConfig"),IFt.forEach(t),hio=r(iRe," (LayoutLM model)"),iRe.forEach(t),uio=i(L),Lg=n(L,"LI",{});var dRe=s(Lg);Lce=n(dRe,"STRONG",{});var NFt=s(Lce);pio=r(NFt,"layoutlmv2"),NFt.forEach(t),_io=r(dRe," \u2014 "),GI=n(dRe,"A",{href:!0});var qFt=s(GI);bio=r(qFt,"LayoutLMv2Config"),qFt.forEach(t),vio=r(dRe," (LayoutLMv2 model)"),dRe.forEach(t),Fio=i(L),yg=n(L,"LI",{});var cRe=s(yg);yce=n(cRe,"STRONG",{});var jFt=s(yce);Tio=r(jFt,"layoutlmv3"),jFt.forEach(t),Mio=r(cRe," \u2014 "),OI=n(cRe,"A",{href:!0});var DFt=s(OI);Eio=r(DFt,"LayoutLMv3Config"),DFt.forEach(t),Cio=r(cRe," (LayoutLMv3 model)"),cRe.forEach(t),wio=i(L),xg=n(L,"LI",{});var mRe=s(xg);xce=n(mRe,"STRONG",{});var GFt=s(xce);Aio=r(GFt,"led"),GFt.forEach(t),Lio=r(mRe," \u2014 "),VI=n(mRe,"A",{href:!0});var OFt=s(VI);yio=r(OFt,"LEDConfig"),OFt.forEach(t),xio=r(mRe," (LED model)"),mRe.forEach(t),$io=i(L),$g=n(L,"LI",{});var fRe=s($g);$ce=n(fRe,"STRONG",{});var VFt=s($ce);kio=r(VFt,"levit"),VFt.forEach(t),Sio=r(fRe," \u2014 "),XI=n(fRe,"A",{href:!0});var XFt=s(XI);Rio=r(XFt,"LevitConfig"),XFt.forEach(t),Pio=r(fRe," (LeViT model)"),fRe.forEach(t),Bio=i(L),kg=n(L,"LI",{});var gRe=s(kg);kce=n(gRe,"STRONG",{});var zFt=s(kce);Iio=r(zFt,"longformer"),zFt.forEach(t),Nio=r(gRe," \u2014 "),zI=n(gRe,"A",{href:!0});var QFt=s(zI);qio=r(QFt,"LongformerConfig"),QFt.forEach(t),jio=r(gRe," (Longformer model)"),gRe.forEach(t),Dio=i(L),Sg=n(L,"LI",{});var hRe=s(Sg);Sce=n(hRe,"STRONG",{});var WFt=s(Sce);Gio=r(WFt,"longt5"),WFt.forEach(t),Oio=r(hRe," \u2014 "),QI=n(hRe,"A",{href:!0});var UFt=s(QI);Vio=r(UFt,"LongT5Config"),UFt.forEach(t),Xio=r(hRe," (LongT5 model)"),hRe.forEach(t),zio=i(L),Rg=n(L,"LI",{});var uRe=s(Rg);Rce=n(uRe,"STRONG",{});var HFt=s(Rce);Qio=r(HFt,"luke"),HFt.forEach(t),Wio=r(uRe," \u2014 "),WI=n(uRe,"A",{href:!0});var JFt=s(WI);Uio=r(JFt,"LukeConfig"),JFt.forEach(t),Hio=r(uRe," (LUKE model)"),uRe.forEach(t),Jio=i(L),Pg=n(L,"LI",{});var pRe=s(Pg);Pce=n(pRe,"STRONG",{});var YFt=s(Pce);Yio=r(YFt,"lxmert"),YFt.forEach(t),Kio=r(pRe," \u2014 "),UI=n(pRe,"A",{href:!0});var KFt=s(UI);Zio=r(KFt,"LxmertConfig"),KFt.forEach(t),edo=r(pRe," (LXMERT model)"),pRe.forEach(t),odo=i(L),Bg=n(L,"LI",{});var _Re=s(Bg);Bce=n(_Re,"STRONG",{});var ZFt=s(Bce);rdo=r(ZFt,"m2m_100"),ZFt.forEach(t),tdo=r(_Re," \u2014 "),HI=n(_Re,"A",{href:!0});var eTt=s(HI);ado=r(eTt,"M2M100Config"),eTt.forEach(t),ndo=r(_Re," (M2M100 model)"),_Re.forEach(t),sdo=i(L),Ig=n(L,"LI",{});var bRe=s(Ig);Ice=n(bRe,"STRONG",{});var oTt=s(Ice);ldo=r(oTt,"marian"),oTt.forEach(t),ido=r(bRe," \u2014 "),JI=n(bRe,"A",{href:!0});var rTt=s(JI);ddo=r(rTt,"MarianConfig"),rTt.forEach(t),cdo=r(bRe," (Marian model)"),bRe.forEach(t),mdo=i(L),Ng=n(L,"LI",{});var vRe=s(Ng);Nce=n(vRe,"STRONG",{});var tTt=s(Nce);fdo=r(tTt,"maskformer"),tTt.forEach(t),gdo=r(vRe," \u2014 "),YI=n(vRe,"A",{href:!0});var aTt=s(YI);hdo=r(aTt,"MaskFormerConfig"),aTt.forEach(t),udo=r(vRe," (MaskFormer model)"),vRe.forEach(t),pdo=i(L),qg=n(L,"LI",{});var FRe=s(qg);qce=n(FRe,"STRONG",{});var nTt=s(qce);_do=r(nTt,"mbart"),nTt.forEach(t),bdo=r(FRe," \u2014 "),KI=n(FRe,"A",{href:!0});var sTt=s(KI);vdo=r(sTt,"MBartConfig"),sTt.forEach(t),Fdo=r(FRe," (mBART model)"),FRe.forEach(t),Tdo=i(L),jg=n(L,"LI",{});var TRe=s(jg);jce=n(TRe,"STRONG",{});var lTt=s(jce);Mdo=r(lTt,"mctct"),lTt.forEach(t),Edo=r(TRe," \u2014 "),ZI=n(TRe,"A",{href:!0});var iTt=s(ZI);Cdo=r(iTt,"MCTCTConfig"),iTt.forEach(t),wdo=r(TRe," (M-CTC-T model)"),TRe.forEach(t),Ado=i(L),Dg=n(L,"LI",{});var MRe=s(Dg);Dce=n(MRe,"STRONG",{});var dTt=s(Dce);Ldo=r(dTt,"megatron-bert"),dTt.forEach(t),ydo=r(MRe," \u2014 "),eN=n(MRe,"A",{href:!0});var cTt=s(eN);xdo=r(cTt,"MegatronBertConfig"),cTt.forEach(t),$do=r(MRe," (Megatron-BERT model)"),MRe.forEach(t),kdo=i(L),Gg=n(L,"LI",{});var ERe=s(Gg);Gce=n(ERe,"STRONG",{});var mTt=s(Gce);Sdo=r(mTt,"mobilebert"),mTt.forEach(t),Rdo=r(ERe," \u2014 "),oN=n(ERe,"A",{href:!0});var fTt=s(oN);Pdo=r(fTt,"MobileBertConfig"),fTt.forEach(t),Bdo=r(ERe," (MobileBERT model)"),ERe.forEach(t),Ido=i(L),Og=n(L,"LI",{});var CRe=s(Og);Oce=n(CRe,"STRONG",{});var gTt=s(Oce);Ndo=r(gTt,"mobilevit"),gTt.forEach(t),qdo=r(CRe," \u2014 "),rN=n(CRe,"A",{href:!0});var hTt=s(rN);jdo=r(hTt,"MobileViTConfig"),hTt.forEach(t),Ddo=r(CRe," (MobileViT model)"),CRe.forEach(t),Gdo=i(L),Vg=n(L,"LI",{});var wRe=s(Vg);Vce=n(wRe,"STRONG",{});var uTt=s(Vce);Odo=r(uTt,"mpnet"),uTt.forEach(t),Vdo=r(wRe," \u2014 "),tN=n(wRe,"A",{href:!0});var pTt=s(tN);Xdo=r(pTt,"MPNetConfig"),pTt.forEach(t),zdo=r(wRe," (MPNet model)"),wRe.forEach(t),Qdo=i(L),Xg=n(L,"LI",{});var ARe=s(Xg);Xce=n(ARe,"STRONG",{});var _Tt=s(Xce);Wdo=r(_Tt,"mt5"),_Tt.forEach(t),Udo=r(ARe," \u2014 "),aN=n(ARe,"A",{href:!0});var bTt=s(aN);Hdo=r(bTt,"MT5Config"),bTt.forEach(t),Jdo=r(ARe," (MT5 model)"),ARe.forEach(t),Ydo=i(L),zg=n(L,"LI",{});var LRe=s(zg);zce=n(LRe,"STRONG",{});var vTt=s(zce);Kdo=r(vTt,"mvp"),vTt.forEach(t),Zdo=r(LRe," \u2014 "),nN=n(LRe,"A",{href:!0});var FTt=s(nN);eco=r(FTt,"MvpConfig"),FTt.forEach(t),oco=r(LRe," (MVP model)"),LRe.forEach(t),rco=i(L),Qg=n(L,"LI",{});var yRe=s(Qg);Qce=n(yRe,"STRONG",{});var TTt=s(Qce);tco=r(TTt,"nezha"),TTt.forEach(t),aco=r(yRe," \u2014 "),sN=n(yRe,"A",{href:!0});var MTt=s(sN);nco=r(MTt,"NezhaConfig"),MTt.forEach(t),sco=r(yRe," (Nezha model)"),yRe.forEach(t),lco=i(L),Wg=n(L,"LI",{});var xRe=s(Wg);Wce=n(xRe,"STRONG",{});var ETt=s(Wce);ico=r(ETt,"nystromformer"),ETt.forEach(t),dco=r(xRe," \u2014 "),lN=n(xRe,"A",{href:!0});var CTt=s(lN);cco=r(CTt,"NystromformerConfig"),CTt.forEach(t),mco=r(xRe," (Nystr\xF6mformer model)"),xRe.forEach(t),fco=i(L),Ug=n(L,"LI",{});var $Re=s(Ug);Uce=n($Re,"STRONG",{});var wTt=s(Uce);gco=r(wTt,"openai-gpt"),wTt.forEach(t),hco=r($Re," \u2014 "),iN=n($Re,"A",{href:!0});var ATt=s(iN);uco=r(ATt,"OpenAIGPTConfig"),ATt.forEach(t),pco=r($Re," (OpenAI GPT model)"),$Re.forEach(t),_co=i(L),Hg=n(L,"LI",{});var kRe=s(Hg);Hce=n(kRe,"STRONG",{});var LTt=s(Hce);bco=r(LTt,"opt"),LTt.forEach(t),vco=r(kRe," \u2014 "),dN=n(kRe,"A",{href:!0});var yTt=s(dN);Fco=r(yTt,"OPTConfig"),yTt.forEach(t),Tco=r(kRe," (OPT model)"),kRe.forEach(t),Mco=i(L),Jg=n(L,"LI",{});var SRe=s(Jg);Jce=n(SRe,"STRONG",{});var xTt=s(Jce);Eco=r(xTt,"owlvit"),xTt.forEach(t),Cco=r(SRe," \u2014 "),cN=n(SRe,"A",{href:!0});var $Tt=s(cN);wco=r($Tt,"OwlViTConfig"),$Tt.forEach(t),Aco=r(SRe," (OWL-ViT model)"),SRe.forEach(t),Lco=i(L),Yg=n(L,"LI",{});var RRe=s(Yg);Yce=n(RRe,"STRONG",{});var kTt=s(Yce);yco=r(kTt,"pegasus"),kTt.forEach(t),xco=r(RRe," \u2014 "),mN=n(RRe,"A",{href:!0});var STt=s(mN);$co=r(STt,"PegasusConfig"),STt.forEach(t),kco=r(RRe," (Pegasus model)"),RRe.forEach(t),Sco=i(L),Kg=n(L,"LI",{});var PRe=s(Kg);Kce=n(PRe,"STRONG",{});var RTt=s(Kce);Rco=r(RTt,"pegasus_x"),RTt.forEach(t),Pco=r(PRe," \u2014 "),fN=n(PRe,"A",{href:!0});var PTt=s(fN);Bco=r(PTt,"PegasusXConfig"),PTt.forEach(t),Ico=r(PRe," (PEGASUS-X model)"),PRe.forEach(t),Nco=i(L),Zg=n(L,"LI",{});var BRe=s(Zg);Zce=n(BRe,"STRONG",{});var BTt=s(Zce);qco=r(BTt,"perceiver"),BTt.forEach(t),jco=r(BRe," \u2014 "),gN=n(BRe,"A",{href:!0});var ITt=s(gN);Dco=r(ITt,"PerceiverConfig"),ITt.forEach(t),Gco=r(BRe," (Perceiver model)"),BRe.forEach(t),Oco=i(L),eh=n(L,"LI",{});var IRe=s(eh);eme=n(IRe,"STRONG",{});var NTt=s(eme);Vco=r(NTt,"plbart"),NTt.forEach(t),Xco=r(IRe," \u2014 "),hN=n(IRe,"A",{href:!0});var qTt=s(hN);zco=r(qTt,"PLBartConfig"),qTt.forEach(t),Qco=r(IRe," (PLBart model)"),IRe.forEach(t),Wco=i(L),oh=n(L,"LI",{});var NRe=s(oh);ome=n(NRe,"STRONG",{});var jTt=s(ome);Uco=r(jTt,"poolformer"),jTt.forEach(t),Hco=r(NRe," \u2014 "),uN=n(NRe,"A",{href:!0});var DTt=s(uN);Jco=r(DTt,"PoolFormerConfig"),DTt.forEach(t),Yco=r(NRe," (PoolFormer model)"),NRe.forEach(t),Kco=i(L),rh=n(L,"LI",{});var qRe=s(rh);rme=n(qRe,"STRONG",{});var GTt=s(rme);Zco=r(GTt,"prophetnet"),GTt.forEach(t),emo=r(qRe," \u2014 "),pN=n(qRe,"A",{href:!0});var OTt=s(pN);omo=r(OTt,"ProphetNetConfig"),OTt.forEach(t),rmo=r(qRe," (ProphetNet model)"),qRe.forEach(t),tmo=i(L),th=n(L,"LI",{});var jRe=s(th);tme=n(jRe,"STRONG",{});var VTt=s(tme);amo=r(VTt,"qdqbert"),VTt.forEach(t),nmo=r(jRe," \u2014 "),_N=n(jRe,"A",{href:!0});var XTt=s(_N);smo=r(XTt,"QDQBertConfig"),XTt.forEach(t),lmo=r(jRe," (QDQBert model)"),jRe.forEach(t),imo=i(L),ah=n(L,"LI",{});var DRe=s(ah);ame=n(DRe,"STRONG",{});var zTt=s(ame);dmo=r(zTt,"rag"),zTt.forEach(t),cmo=r(DRe," \u2014 "),bN=n(DRe,"A",{href:!0});var QTt=s(bN);mmo=r(QTt,"RagConfig"),QTt.forEach(t),fmo=r(DRe," (RAG model)"),DRe.forEach(t),gmo=i(L),nh=n(L,"LI",{});var GRe=s(nh);nme=n(GRe,"STRONG",{});var WTt=s(nme);hmo=r(WTt,"realm"),WTt.forEach(t),umo=r(GRe," \u2014 "),vN=n(GRe,"A",{href:!0});var UTt=s(vN);pmo=r(UTt,"RealmConfig"),UTt.forEach(t),_mo=r(GRe," (REALM model)"),GRe.forEach(t),bmo=i(L),sh=n(L,"LI",{});var ORe=s(sh);sme=n(ORe,"STRONG",{});var HTt=s(sme);vmo=r(HTt,"reformer"),HTt.forEach(t),Fmo=r(ORe," \u2014 "),FN=n(ORe,"A",{href:!0});var JTt=s(FN);Tmo=r(JTt,"ReformerConfig"),JTt.forEach(t),Mmo=r(ORe," (Reformer model)"),ORe.forEach(t),Emo=i(L),lh=n(L,"LI",{});var VRe=s(lh);lme=n(VRe,"STRONG",{});var YTt=s(lme);Cmo=r(YTt,"regnet"),YTt.forEach(t),wmo=r(VRe," \u2014 "),TN=n(VRe,"A",{href:!0});var KTt=s(TN);Amo=r(KTt,"RegNetConfig"),KTt.forEach(t),Lmo=r(VRe," (RegNet model)"),VRe.forEach(t),ymo=i(L),ih=n(L,"LI",{});var XRe=s(ih);ime=n(XRe,"STRONG",{});var ZTt=s(ime);xmo=r(ZTt,"rembert"),ZTt.forEach(t),$mo=r(XRe," \u2014 "),MN=n(XRe,"A",{href:!0});var eMt=s(MN);kmo=r(eMt,"RemBertConfig"),eMt.forEach(t),Smo=r(XRe," (RemBERT model)"),XRe.forEach(t),Rmo=i(L),dh=n(L,"LI",{});var zRe=s(dh);dme=n(zRe,"STRONG",{});var oMt=s(dme);Pmo=r(oMt,"resnet"),oMt.forEach(t),Bmo=r(zRe," \u2014 "),EN=n(zRe,"A",{href:!0});var rMt=s(EN);Imo=r(rMt,"ResNetConfig"),rMt.forEach(t),Nmo=r(zRe," (ResNet model)"),zRe.forEach(t),qmo=i(L),ch=n(L,"LI",{});var QRe=s(ch);cme=n(QRe,"STRONG",{});var tMt=s(cme);jmo=r(tMt,"retribert"),tMt.forEach(t),Dmo=r(QRe," \u2014 "),CN=n(QRe,"A",{href:!0});var aMt=s(CN);Gmo=r(aMt,"RetriBertConfig"),aMt.forEach(t),Omo=r(QRe," (RetriBERT model)"),QRe.forEach(t),Vmo=i(L),mh=n(L,"LI",{});var WRe=s(mh);mme=n(WRe,"STRONG",{});var nMt=s(mme);Xmo=r(nMt,"roberta"),nMt.forEach(t),zmo=r(WRe," \u2014 "),wN=n(WRe,"A",{href:!0});var sMt=s(wN);Qmo=r(sMt,"RobertaConfig"),sMt.forEach(t),Wmo=r(WRe," (RoBERTa model)"),WRe.forEach(t),Umo=i(L),fh=n(L,"LI",{});var URe=s(fh);fme=n(URe,"STRONG",{});var lMt=s(fme);Hmo=r(lMt,"roformer"),lMt.forEach(t),Jmo=r(URe," \u2014 "),AN=n(URe,"A",{href:!0});var iMt=s(AN);Ymo=r(iMt,"RoFormerConfig"),iMt.forEach(t),Kmo=r(URe," (RoFormer model)"),URe.forEach(t),Zmo=i(L),gh=n(L,"LI",{});var HRe=s(gh);gme=n(HRe,"STRONG",{});var dMt=s(gme);efo=r(dMt,"segformer"),dMt.forEach(t),ofo=r(HRe," \u2014 "),LN=n(HRe,"A",{href:!0});var cMt=s(LN);rfo=r(cMt,"SegformerConfig"),cMt.forEach(t),tfo=r(HRe," (SegFormer model)"),HRe.forEach(t),afo=i(L),hh=n(L,"LI",{});var JRe=s(hh);hme=n(JRe,"STRONG",{});var mMt=s(hme);nfo=r(mMt,"sew"),mMt.forEach(t),sfo=r(JRe," \u2014 "),yN=n(JRe,"A",{href:!0});var fMt=s(yN);lfo=r(fMt,"SEWConfig"),fMt.forEach(t),ifo=r(JRe," (SEW model)"),JRe.forEach(t),dfo=i(L),uh=n(L,"LI",{});var YRe=s(uh);ume=n(YRe,"STRONG",{});var gMt=s(ume);cfo=r(gMt,"sew-d"),gMt.forEach(t),mfo=r(YRe," \u2014 "),xN=n(YRe,"A",{href:!0});var hMt=s(xN);ffo=r(hMt,"SEWDConfig"),hMt.forEach(t),gfo=r(YRe," (SEW-D model)"),YRe.forEach(t),hfo=i(L),ph=n(L,"LI",{});var KRe=s(ph);pme=n(KRe,"STRONG",{});var uMt=s(pme);ufo=r(uMt,"speech-encoder-decoder"),uMt.forEach(t),pfo=r(KRe," \u2014 "),$N=n(KRe,"A",{href:!0});var pMt=s($N);_fo=r(pMt,"SpeechEncoderDecoderConfig"),pMt.forEach(t),bfo=r(KRe," (Speech Encoder decoder model)"),KRe.forEach(t),vfo=i(L),_h=n(L,"LI",{});var ZRe=s(_h);_me=n(ZRe,"STRONG",{});var _Mt=s(_me);Ffo=r(_Mt,"speech_to_text"),_Mt.forEach(t),Tfo=r(ZRe," \u2014 "),kN=n(ZRe,"A",{href:!0});var bMt=s(kN);Mfo=r(bMt,"Speech2TextConfig"),bMt.forEach(t),Efo=r(ZRe," (Speech2Text model)"),ZRe.forEach(t),Cfo=i(L),bh=n(L,"LI",{});var ePe=s(bh);bme=n(ePe,"STRONG",{});var vMt=s(bme);wfo=r(vMt,"speech_to_text_2"),vMt.forEach(t),Afo=r(ePe," \u2014 "),SN=n(ePe,"A",{href:!0});var FMt=s(SN);Lfo=r(FMt,"Speech2Text2Config"),FMt.forEach(t),yfo=r(ePe," (Speech2Text2 model)"),ePe.forEach(t),xfo=i(L),vh=n(L,"LI",{});var oPe=s(vh);vme=n(oPe,"STRONG",{});var TMt=s(vme);$fo=r(TMt,"splinter"),TMt.forEach(t),kfo=r(oPe," \u2014 "),RN=n(oPe,"A",{href:!0});var MMt=s(RN);Sfo=r(MMt,"SplinterConfig"),MMt.forEach(t),Rfo=r(oPe," (Splinter model)"),oPe.forEach(t),Pfo=i(L),Fh=n(L,"LI",{});var rPe=s(Fh);Fme=n(rPe,"STRONG",{});var EMt=s(Fme);Bfo=r(EMt,"squeezebert"),EMt.forEach(t),Ifo=r(rPe," \u2014 "),PN=n(rPe,"A",{href:!0});var CMt=s(PN);Nfo=r(CMt,"SqueezeBertConfig"),CMt.forEach(t),qfo=r(rPe," (SqueezeBERT model)"),rPe.forEach(t),jfo=i(L),Th=n(L,"LI",{});var tPe=s(Th);Tme=n(tPe,"STRONG",{});var wMt=s(Tme);Dfo=r(wMt,"swin"),wMt.forEach(t),Gfo=r(tPe," \u2014 "),BN=n(tPe,"A",{href:!0});var AMt=s(BN);Ofo=r(AMt,"SwinConfig"),AMt.forEach(t),Vfo=r(tPe," (Swin Transformer model)"),tPe.forEach(t),Xfo=i(L),Mh=n(L,"LI",{});var aPe=s(Mh);Mme=n(aPe,"STRONG",{});var LMt=s(Mme);zfo=r(LMt,"swinv2"),LMt.forEach(t),Qfo=r(aPe," \u2014 "),IN=n(aPe,"A",{href:!0});var yMt=s(IN);Wfo=r(yMt,"Swinv2Config"),yMt.forEach(t),Ufo=r(aPe," (Swin Transformer V2 model)"),aPe.forEach(t),Hfo=i(L),Eh=n(L,"LI",{});var nPe=s(Eh);Eme=n(nPe,"STRONG",{});var xMt=s(Eme);Jfo=r(xMt,"t5"),xMt.forEach(t),Yfo=r(nPe," \u2014 "),NN=n(nPe,"A",{href:!0});var $Mt=s(NN);Kfo=r($Mt,"T5Config"),$Mt.forEach(t),Zfo=r(nPe," (T5 model)"),nPe.forEach(t),ego=i(L),Ch=n(L,"LI",{});var sPe=s(Ch);Cme=n(sPe,"STRONG",{});var kMt=s(Cme);ogo=r(kMt,"tapas"),kMt.forEach(t),rgo=r(sPe," \u2014 "),qN=n(sPe,"A",{href:!0});var SMt=s(qN);tgo=r(SMt,"TapasConfig"),SMt.forEach(t),ago=r(sPe," (TAPAS model)"),sPe.forEach(t),ngo=i(L),wh=n(L,"LI",{});var lPe=s(wh);wme=n(lPe,"STRONG",{});var RMt=s(wme);sgo=r(RMt,"trajectory_transformer"),RMt.forEach(t),lgo=r(lPe," \u2014 "),jN=n(lPe,"A",{href:!0});var PMt=s(jN);igo=r(PMt,"TrajectoryTransformerConfig"),PMt.forEach(t),dgo=r(lPe," (Trajectory Transformer model)"),lPe.forEach(t),cgo=i(L),Ah=n(L,"LI",{});var iPe=s(Ah);Ame=n(iPe,"STRONG",{});var BMt=s(Ame);mgo=r(BMt,"transfo-xl"),BMt.forEach(t),fgo=r(iPe," \u2014 "),DN=n(iPe,"A",{href:!0});var IMt=s(DN);ggo=r(IMt,"TransfoXLConfig"),IMt.forEach(t),hgo=r(iPe," (Transformer-XL model)"),iPe.forEach(t),ugo=i(L),Lh=n(L,"LI",{});var dPe=s(Lh);Lme=n(dPe,"STRONG",{});var NMt=s(Lme);pgo=r(NMt,"trocr"),NMt.forEach(t),_go=r(dPe," \u2014 "),GN=n(dPe,"A",{href:!0});var qMt=s(GN);bgo=r(qMt,"TrOCRConfig"),qMt.forEach(t),vgo=r(dPe," (TrOCR model)"),dPe.forEach(t),Fgo=i(L),yh=n(L,"LI",{});var cPe=s(yh);yme=n(cPe,"STRONG",{});var jMt=s(yme);Tgo=r(jMt,"unispeech"),jMt.forEach(t),Mgo=r(cPe," \u2014 "),ON=n(cPe,"A",{href:!0});var DMt=s(ON);Ego=r(DMt,"UniSpeechConfig"),DMt.forEach(t),Cgo=r(cPe," (UniSpeech model)"),cPe.forEach(t),wgo=i(L),xh=n(L,"LI",{});var mPe=s(xh);xme=n(mPe,"STRONG",{});var GMt=s(xme);Ago=r(GMt,"unispeech-sat"),GMt.forEach(t),Lgo=r(mPe," \u2014 "),VN=n(mPe,"A",{href:!0});var OMt=s(VN);ygo=r(OMt,"UniSpeechSatConfig"),OMt.forEach(t),xgo=r(mPe," (UniSpeechSat model)"),mPe.forEach(t),$go=i(L),$h=n(L,"LI",{});var fPe=s($h);$me=n(fPe,"STRONG",{});var VMt=s($me);kgo=r(VMt,"van"),VMt.forEach(t),Sgo=r(fPe," \u2014 "),XN=n(fPe,"A",{href:!0});var XMt=s(XN);Rgo=r(XMt,"VanConfig"),XMt.forEach(t),Pgo=r(fPe," (VAN model)"),fPe.forEach(t),Bgo=i(L),kh=n(L,"LI",{});var gPe=s(kh);kme=n(gPe,"STRONG",{});var zMt=s(kme);Igo=r(zMt,"videomae"),zMt.forEach(t),Ngo=r(gPe," \u2014 "),zN=n(gPe,"A",{href:!0});var QMt=s(zN);qgo=r(QMt,"VideoMAEConfig"),QMt.forEach(t),jgo=r(gPe," (VideoMAE model)"),gPe.forEach(t),Dgo=i(L),Sh=n(L,"LI",{});var hPe=s(Sh);Sme=n(hPe,"STRONG",{});var WMt=s(Sme);Ggo=r(WMt,"vilt"),WMt.forEach(t),Ogo=r(hPe," \u2014 "),QN=n(hPe,"A",{href:!0});var UMt=s(QN);Vgo=r(UMt,"ViltConfig"),UMt.forEach(t),Xgo=r(hPe," (ViLT model)"),hPe.forEach(t),zgo=i(L),Rh=n(L,"LI",{});var uPe=s(Rh);Rme=n(uPe,"STRONG",{});var HMt=s(Rme);Qgo=r(HMt,"vision-encoder-decoder"),HMt.forEach(t),Wgo=r(uPe," \u2014 "),WN=n(uPe,"A",{href:!0});var JMt=s(WN);Ugo=r(JMt,"VisionEncoderDecoderConfig"),JMt.forEach(t),Hgo=r(uPe," (Vision Encoder decoder model)"),uPe.forEach(t),Jgo=i(L),Ph=n(L,"LI",{});var pPe=s(Ph);Pme=n(pPe,"STRONG",{});var YMt=s(Pme);Ygo=r(YMt,"vision-text-dual-encoder"),YMt.forEach(t),Kgo=r(pPe," \u2014 "),UN=n(pPe,"A",{href:!0});var KMt=s(UN);Zgo=r(KMt,"VisionTextDualEncoderConfig"),KMt.forEach(t),eho=r(pPe," (VisionTextDualEncoder model)"),pPe.forEach(t),oho=i(L),Bh=n(L,"LI",{});var _Pe=s(Bh);Bme=n(_Pe,"STRONG",{});var ZMt=s(Bme);rho=r(ZMt,"visual_bert"),ZMt.forEach(t),tho=r(_Pe," \u2014 "),HN=n(_Pe,"A",{href:!0});var eEt=s(HN);aho=r(eEt,"VisualBertConfig"),eEt.forEach(t),nho=r(_Pe," (VisualBERT model)"),_Pe.forEach(t),sho=i(L),Ih=n(L,"LI",{});var bPe=s(Ih);Ime=n(bPe,"STRONG",{});var oEt=s(Ime);lho=r(oEt,"vit"),oEt.forEach(t),iho=r(bPe," \u2014 "),JN=n(bPe,"A",{href:!0});var rEt=s(JN);dho=r(rEt,"ViTConfig"),rEt.forEach(t),cho=r(bPe," (ViT model)"),bPe.forEach(t),mho=i(L),Nh=n(L,"LI",{});var vPe=s(Nh);Nme=n(vPe,"STRONG",{});var tEt=s(Nme);fho=r(tEt,"vit_mae"),tEt.forEach(t),gho=r(vPe," \u2014 "),YN=n(vPe,"A",{href:!0});var aEt=s(YN);hho=r(aEt,"ViTMAEConfig"),aEt.forEach(t),uho=r(vPe," (ViTMAE model)"),vPe.forEach(t),pho=i(L),qh=n(L,"LI",{});var FPe=s(qh);qme=n(FPe,"STRONG",{});var nEt=s(qme);_ho=r(nEt,"wav2vec2"),nEt.forEach(t),bho=r(FPe," \u2014 "),KN=n(FPe,"A",{href:!0});var sEt=s(KN);vho=r(sEt,"Wav2Vec2Config"),sEt.forEach(t),Fho=r(FPe," (Wav2Vec2 model)"),FPe.forEach(t),Tho=i(L),jh=n(L,"LI",{});var TPe=s(jh);jme=n(TPe,"STRONG",{});var lEt=s(jme);Mho=r(lEt,"wav2vec2-conformer"),lEt.forEach(t),Eho=r(TPe," \u2014 "),ZN=n(TPe,"A",{href:!0});var iEt=s(ZN);Cho=r(iEt,"Wav2Vec2ConformerConfig"),iEt.forEach(t),who=r(TPe," (Wav2Vec2-Conformer model)"),TPe.forEach(t),Aho=i(L),Dh=n(L,"LI",{});var MPe=s(Dh);Dme=n(MPe,"STRONG",{});var dEt=s(Dme);Lho=r(dEt,"wavlm"),dEt.forEach(t),yho=r(MPe," \u2014 "),eq=n(MPe,"A",{href:!0});var cEt=s(eq);xho=r(cEt,"WavLMConfig"),cEt.forEach(t),$ho=r(MPe," (WavLM model)"),MPe.forEach(t),kho=i(L),Gh=n(L,"LI",{});var EPe=s(Gh);Gme=n(EPe,"STRONG",{});var mEt=s(Gme);Sho=r(mEt,"xclip"),mEt.forEach(t),Rho=r(EPe," \u2014 "),oq=n(EPe,"A",{href:!0});var fEt=s(oq);Pho=r(fEt,"XCLIPConfig"),fEt.forEach(t),Bho=r(EPe," (X-CLIP model)"),EPe.forEach(t),Iho=i(L),Oh=n(L,"LI",{});var CPe=s(Oh);Ome=n(CPe,"STRONG",{});var gEt=s(Ome);Nho=r(gEt,"xglm"),gEt.forEach(t),qho=r(CPe," \u2014 "),rq=n(CPe,"A",{href:!0});var hEt=s(rq);jho=r(hEt,"XGLMConfig"),hEt.forEach(t),Dho=r(CPe," (XGLM model)"),CPe.forEach(t),Gho=i(L),Vh=n(L,"LI",{});var wPe=s(Vh);Vme=n(wPe,"STRONG",{});var uEt=s(Vme);Oho=r(uEt,"xlm"),uEt.forEach(t),Vho=r(wPe," \u2014 "),tq=n(wPe,"A",{href:!0});var pEt=s(tq);Xho=r(pEt,"XLMConfig"),pEt.forEach(t),zho=r(wPe," (XLM model)"),wPe.forEach(t),Qho=i(L),Xh=n(L,"LI",{});var APe=s(Xh);Xme=n(APe,"STRONG",{});var _Et=s(Xme);Who=r(_Et,"xlm-prophetnet"),_Et.forEach(t),Uho=r(APe," \u2014 "),aq=n(APe,"A",{href:!0});var bEt=s(aq);Hho=r(bEt,"XLMProphetNetConfig"),bEt.forEach(t),Jho=r(APe," (XLM-ProphetNet model)"),APe.forEach(t),Yho=i(L),zh=n(L,"LI",{});var LPe=s(zh);zme=n(LPe,"STRONG",{});var vEt=s(zme);Kho=r(vEt,"xlm-roberta"),vEt.forEach(t),Zho=r(LPe," \u2014 "),nq=n(LPe,"A",{href:!0});var FEt=s(nq);euo=r(FEt,"XLMRobertaConfig"),FEt.forEach(t),ouo=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),ruo=i(L),Qh=n(L,"LI",{});var yPe=s(Qh);Qme=n(yPe,"STRONG",{});var TEt=s(Qme);tuo=r(TEt,"xlm-roberta-xl"),TEt.forEach(t),auo=r(yPe," \u2014 "),sq=n(yPe,"A",{href:!0});var MEt=s(sq);nuo=r(MEt,"XLMRobertaXLConfig"),MEt.forEach(t),suo=r(yPe," (XLM-RoBERTa-XL model)"),yPe.forEach(t),luo=i(L),Wh=n(L,"LI",{});var xPe=s(Wh);Wme=n(xPe,"STRONG",{});var EEt=s(Wme);iuo=r(EEt,"xlnet"),EEt.forEach(t),duo=r(xPe," \u2014 "),lq=n(xPe,"A",{href:!0});var CEt=s(lq);cuo=r(CEt,"XLNetConfig"),CEt.forEach(t),muo=r(xPe," (XLNet model)"),xPe.forEach(t),fuo=i(L),Uh=n(L,"LI",{});var $Pe=s(Uh);Ume=n($Pe,"STRONG",{});var wEt=s(Ume);guo=r(wEt,"yolos"),wEt.forEach(t),huo=r($Pe," \u2014 "),iq=n($Pe,"A",{href:!0});var AEt=s(iq);uuo=r(AEt,"YolosConfig"),AEt.forEach(t),puo=r($Pe," (YOLOS model)"),$Pe.forEach(t),_uo=i(L),Hh=n(L,"LI",{});var kPe=s(Hh);Hme=n(kPe,"STRONG",{});var LEt=s(Hme);buo=r(LEt,"yoso"),LEt.forEach(t),vuo=r(kPe," \u2014 "),dq=n(kPe,"A",{href:!0});var yEt=s(dq);Fuo=r(yEt,"YosoConfig"),yEt.forEach(t),Tuo=r(kPe," (YOSO model)"),kPe.forEach(t),L.forEach(t),Muo=i(ut),T(Jh.$$.fragment,ut),ut.forEach(t),Euo=i(ht),Yh=n(ht,"DIV",{class:!0});var Deo=s(Yh);T(X9.$$.fragment,Deo),Cuo=i(Deo),Jme=n(Deo,"P",{});var xEt=s(Jme);wuo=r(xEt,"Register a new configuration for this class."),xEt.forEach(t),Deo.forEach(t),ht.forEach(t),RKe=i(m),gd=n(m,"H2",{class:!0});var Geo=s(gd);Kh=n(Geo,"A",{id:!0,class:!0,href:!0});var $Et=s(Kh);Yme=n($Et,"SPAN",{});var kEt=s(Yme);T(z9.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),Auo=i(Geo),Kme=n(Geo,"SPAN",{});var SEt=s(Kme);Luo=r(SEt,"AutoTokenizer"),SEt.forEach(t),Geo.forEach(t),PKe=i(m),ko=n(m,"DIV",{class:!0});var Ml=s(ko);T(Q9.$$.fragment,Ml),yuo=i(Ml),W9=n(Ml,"P",{});var Oeo=s(W9);xuo=r(Oeo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),cq=n(Oeo,"A",{href:!0});var REt=s(cq);$uo=r(REt,"AutoTokenizer.from_pretrained()"),REt.forEach(t),kuo=r(Oeo," class method."),Oeo.forEach(t),Suo=i(Ml),U9=n(Ml,"P",{});var Veo=s(U9);Ruo=r(Veo,"This class cannot be instantiated directly using "),Zme=n(Veo,"CODE",{});var PEt=s(Zme);Puo=r(PEt,"__init__()"),PEt.forEach(t),Buo=r(Veo," (throws an error)."),Veo.forEach(t),Iuo=i(Ml),Br=n(Ml,"DIV",{class:!0});var El=s(Br);T(H9.$$.fragment,El),Nuo=i(El),efe=n(El,"P",{});var BEt=s(efe);quo=r(BEt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BEt.forEach(t),juo=i(El),Ua=n(El,"P",{});var xy=s(Ua);Duo=r(xy,"The tokenizer class to instantiate is selected based on the "),ofe=n(xy,"CODE",{});var IEt=s(ofe);Guo=r(IEt,"model_type"),IEt.forEach(t),Ouo=r(xy,` property of the config object (either
passed as an argument or loaded from `),rfe=n(xy,"CODE",{});var NEt=s(rfe);Vuo=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),Xuo=r(xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tfe=n(xy,"CODE",{});var qEt=s(tfe);zuo=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),Quo=r(xy,":"),xy.forEach(t),Wuo=i(El),k=n(El,"UL",{});var S=s(k);ns=n(S,"LI",{});var FP=s(ns);afe=n(FP,"STRONG",{});var jEt=s(afe);Uuo=r(jEt,"albert"),jEt.forEach(t),Huo=r(FP," \u2014 "),mq=n(FP,"A",{href:!0});var DEt=s(mq);Juo=r(DEt,"AlbertTokenizer"),DEt.forEach(t),Yuo=r(FP," or "),fq=n(FP,"A",{href:!0});var GEt=s(fq);Kuo=r(GEt,"AlbertTokenizerFast"),GEt.forEach(t),Zuo=r(FP," (ALBERT model)"),FP.forEach(t),epo=i(S),ss=n(S,"LI",{});var TP=s(ss);nfe=n(TP,"STRONG",{});var OEt=s(nfe);opo=r(OEt,"bart"),OEt.forEach(t),rpo=r(TP," \u2014 "),gq=n(TP,"A",{href:!0});var VEt=s(gq);tpo=r(VEt,"BartTokenizer"),VEt.forEach(t),apo=r(TP," or "),hq=n(TP,"A",{href:!0});var XEt=s(hq);npo=r(XEt,"BartTokenizerFast"),XEt.forEach(t),spo=r(TP," (BART model)"),TP.forEach(t),lpo=i(S),ls=n(S,"LI",{});var MP=s(ls);sfe=n(MP,"STRONG",{});var zEt=s(sfe);ipo=r(zEt,"barthez"),zEt.forEach(t),dpo=r(MP," \u2014 "),uq=n(MP,"A",{href:!0});var QEt=s(uq);cpo=r(QEt,"BarthezTokenizer"),QEt.forEach(t),mpo=r(MP," or "),pq=n(MP,"A",{href:!0});var WEt=s(pq);fpo=r(WEt,"BarthezTokenizerFast"),WEt.forEach(t),gpo=r(MP," (BARThez model)"),MP.forEach(t),hpo=i(S),Zh=n(S,"LI",{});var SPe=s(Zh);lfe=n(SPe,"STRONG",{});var UEt=s(lfe);upo=r(UEt,"bartpho"),UEt.forEach(t),ppo=r(SPe," \u2014 "),_q=n(SPe,"A",{href:!0});var HEt=s(_q);_po=r(HEt,"BartphoTokenizer"),HEt.forEach(t),bpo=r(SPe," (BARTpho model)"),SPe.forEach(t),vpo=i(S),is=n(S,"LI",{});var EP=s(is);ife=n(EP,"STRONG",{});var JEt=s(ife);Fpo=r(JEt,"bert"),JEt.forEach(t),Tpo=r(EP," \u2014 "),bq=n(EP,"A",{href:!0});var YEt=s(bq);Mpo=r(YEt,"BertTokenizer"),YEt.forEach(t),Epo=r(EP," or "),vq=n(EP,"A",{href:!0});var KEt=s(vq);Cpo=r(KEt,"BertTokenizerFast"),KEt.forEach(t),wpo=r(EP," (BERT model)"),EP.forEach(t),Apo=i(S),eu=n(S,"LI",{});var RPe=s(eu);dfe=n(RPe,"STRONG",{});var ZEt=s(dfe);Lpo=r(ZEt,"bert-generation"),ZEt.forEach(t),ypo=r(RPe," \u2014 "),Fq=n(RPe,"A",{href:!0});var e4t=s(Fq);xpo=r(e4t,"BertGenerationTokenizer"),e4t.forEach(t),$po=r(RPe," (Bert Generation model)"),RPe.forEach(t),kpo=i(S),ou=n(S,"LI",{});var PPe=s(ou);cfe=n(PPe,"STRONG",{});var o4t=s(cfe);Spo=r(o4t,"bert-japanese"),o4t.forEach(t),Rpo=r(PPe," \u2014 "),Tq=n(PPe,"A",{href:!0});var r4t=s(Tq);Ppo=r(r4t,"BertJapaneseTokenizer"),r4t.forEach(t),Bpo=r(PPe," (BertJapanese model)"),PPe.forEach(t),Ipo=i(S),ru=n(S,"LI",{});var BPe=s(ru);mfe=n(BPe,"STRONG",{});var t4t=s(mfe);Npo=r(t4t,"bertweet"),t4t.forEach(t),qpo=r(BPe," \u2014 "),Mq=n(BPe,"A",{href:!0});var a4t=s(Mq);jpo=r(a4t,"BertweetTokenizer"),a4t.forEach(t),Dpo=r(BPe," (BERTweet model)"),BPe.forEach(t),Gpo=i(S),ds=n(S,"LI",{});var CP=s(ds);ffe=n(CP,"STRONG",{});var n4t=s(ffe);Opo=r(n4t,"big_bird"),n4t.forEach(t),Vpo=r(CP," \u2014 "),Eq=n(CP,"A",{href:!0});var s4t=s(Eq);Xpo=r(s4t,"BigBirdTokenizer"),s4t.forEach(t),zpo=r(CP," or "),Cq=n(CP,"A",{href:!0});var l4t=s(Cq);Qpo=r(l4t,"BigBirdTokenizerFast"),l4t.forEach(t),Wpo=r(CP," (BigBird model)"),CP.forEach(t),Upo=i(S),cs=n(S,"LI",{});var wP=s(cs);gfe=n(wP,"STRONG",{});var i4t=s(gfe);Hpo=r(i4t,"bigbird_pegasus"),i4t.forEach(t),Jpo=r(wP," \u2014 "),wq=n(wP,"A",{href:!0});var d4t=s(wq);Ypo=r(d4t,"PegasusTokenizer"),d4t.forEach(t),Kpo=r(wP," or "),Aq=n(wP,"A",{href:!0});var c4t=s(Aq);Zpo=r(c4t,"PegasusTokenizerFast"),c4t.forEach(t),e_o=r(wP," (BigBird-Pegasus model)"),wP.forEach(t),o_o=i(S),ms=n(S,"LI",{});var AP=s(ms);hfe=n(AP,"STRONG",{});var m4t=s(hfe);r_o=r(m4t,"blenderbot"),m4t.forEach(t),t_o=r(AP," \u2014 "),Lq=n(AP,"A",{href:!0});var f4t=s(Lq);a_o=r(f4t,"BlenderbotTokenizer"),f4t.forEach(t),n_o=r(AP," or "),yq=n(AP,"A",{href:!0});var g4t=s(yq);s_o=r(g4t,"BlenderbotTokenizerFast"),g4t.forEach(t),l_o=r(AP," (Blenderbot model)"),AP.forEach(t),i_o=i(S),tu=n(S,"LI",{});var IPe=s(tu);ufe=n(IPe,"STRONG",{});var h4t=s(ufe);d_o=r(h4t,"blenderbot-small"),h4t.forEach(t),c_o=r(IPe," \u2014 "),xq=n(IPe,"A",{href:!0});var u4t=s(xq);m_o=r(u4t,"BlenderbotSmallTokenizer"),u4t.forEach(t),f_o=r(IPe," (BlenderbotSmall model)"),IPe.forEach(t),g_o=i(S),au=n(S,"LI",{});var NPe=s(au);pfe=n(NPe,"STRONG",{});var p4t=s(pfe);h_o=r(p4t,"bloom"),p4t.forEach(t),u_o=r(NPe," \u2014 "),$q=n(NPe,"A",{href:!0});var _4t=s($q);p_o=r(_4t,"BloomTokenizerFast"),_4t.forEach(t),__o=r(NPe," (BLOOM model)"),NPe.forEach(t),b_o=i(S),nu=n(S,"LI",{});var qPe=s(nu);_fe=n(qPe,"STRONG",{});var b4t=s(_fe);v_o=r(b4t,"byt5"),b4t.forEach(t),F_o=r(qPe," \u2014 "),kq=n(qPe,"A",{href:!0});var v4t=s(kq);T_o=r(v4t,"ByT5Tokenizer"),v4t.forEach(t),M_o=r(qPe," (ByT5 model)"),qPe.forEach(t),E_o=i(S),fs=n(S,"LI",{});var LP=s(fs);bfe=n(LP,"STRONG",{});var F4t=s(bfe);C_o=r(F4t,"camembert"),F4t.forEach(t),w_o=r(LP," \u2014 "),Sq=n(LP,"A",{href:!0});var T4t=s(Sq);A_o=r(T4t,"CamembertTokenizer"),T4t.forEach(t),L_o=r(LP," or "),Rq=n(LP,"A",{href:!0});var M4t=s(Rq);y_o=r(M4t,"CamembertTokenizerFast"),M4t.forEach(t),x_o=r(LP," (CamemBERT model)"),LP.forEach(t),$_o=i(S),su=n(S,"LI",{});var jPe=s(su);vfe=n(jPe,"STRONG",{});var E4t=s(vfe);k_o=r(E4t,"canine"),E4t.forEach(t),S_o=r(jPe," \u2014 "),Pq=n(jPe,"A",{href:!0});var C4t=s(Pq);R_o=r(C4t,"CanineTokenizer"),C4t.forEach(t),P_o=r(jPe," (CANINE model)"),jPe.forEach(t),B_o=i(S),gs=n(S,"LI",{});var yP=s(gs);Ffe=n(yP,"STRONG",{});var w4t=s(Ffe);I_o=r(w4t,"clip"),w4t.forEach(t),N_o=r(yP," \u2014 "),Bq=n(yP,"A",{href:!0});var A4t=s(Bq);q_o=r(A4t,"CLIPTokenizer"),A4t.forEach(t),j_o=r(yP," or "),Iq=n(yP,"A",{href:!0});var L4t=s(Iq);D_o=r(L4t,"CLIPTokenizerFast"),L4t.forEach(t),G_o=r(yP," (CLIP model)"),yP.forEach(t),O_o=i(S),hs=n(S,"LI",{});var xP=s(hs);Tfe=n(xP,"STRONG",{});var y4t=s(Tfe);V_o=r(y4t,"codegen"),y4t.forEach(t),X_o=r(xP," \u2014 "),Nq=n(xP,"A",{href:!0});var x4t=s(Nq);z_o=r(x4t,"CodeGenTokenizer"),x4t.forEach(t),Q_o=r(xP," or "),qq=n(xP,"A",{href:!0});var $4t=s(qq);W_o=r($4t,"CodeGenTokenizerFast"),$4t.forEach(t),U_o=r(xP," (CodeGen model)"),xP.forEach(t),H_o=i(S),us=n(S,"LI",{});var $P=s(us);Mfe=n($P,"STRONG",{});var k4t=s(Mfe);J_o=r(k4t,"convbert"),k4t.forEach(t),Y_o=r($P," \u2014 "),jq=n($P,"A",{href:!0});var S4t=s(jq);K_o=r(S4t,"ConvBertTokenizer"),S4t.forEach(t),Z_o=r($P," or "),Dq=n($P,"A",{href:!0});var R4t=s(Dq);ebo=r(R4t,"ConvBertTokenizerFast"),R4t.forEach(t),obo=r($P," (ConvBERT model)"),$P.forEach(t),rbo=i(S),ps=n(S,"LI",{});var kP=s(ps);Efe=n(kP,"STRONG",{});var P4t=s(Efe);tbo=r(P4t,"cpm"),P4t.forEach(t),abo=r(kP," \u2014 "),Gq=n(kP,"A",{href:!0});var B4t=s(Gq);nbo=r(B4t,"CpmTokenizer"),B4t.forEach(t),sbo=r(kP," or "),Oq=n(kP,"A",{href:!0});var I4t=s(Oq);lbo=r(I4t,"CpmTokenizerFast"),I4t.forEach(t),ibo=r(kP," (CPM model)"),kP.forEach(t),dbo=i(S),lu=n(S,"LI",{});var DPe=s(lu);Cfe=n(DPe,"STRONG",{});var N4t=s(Cfe);cbo=r(N4t,"ctrl"),N4t.forEach(t),mbo=r(DPe," \u2014 "),Vq=n(DPe,"A",{href:!0});var q4t=s(Vq);fbo=r(q4t,"CTRLTokenizer"),q4t.forEach(t),gbo=r(DPe," (CTRL model)"),DPe.forEach(t),hbo=i(S),_s=n(S,"LI",{});var SP=s(_s);wfe=n(SP,"STRONG",{});var j4t=s(wfe);ubo=r(j4t,"data2vec-text"),j4t.forEach(t),pbo=r(SP," \u2014 "),Xq=n(SP,"A",{href:!0});var D4t=s(Xq);_bo=r(D4t,"RobertaTokenizer"),D4t.forEach(t),bbo=r(SP," or "),zq=n(SP,"A",{href:!0});var G4t=s(zq);vbo=r(G4t,"RobertaTokenizerFast"),G4t.forEach(t),Fbo=r(SP," (Data2VecText model)"),SP.forEach(t),Tbo=i(S),bs=n(S,"LI",{});var RP=s(bs);Afe=n(RP,"STRONG",{});var O4t=s(Afe);Mbo=r(O4t,"deberta"),O4t.forEach(t),Ebo=r(RP," \u2014 "),Qq=n(RP,"A",{href:!0});var V4t=s(Qq);Cbo=r(V4t,"DebertaTokenizer"),V4t.forEach(t),wbo=r(RP," or "),Wq=n(RP,"A",{href:!0});var X4t=s(Wq);Abo=r(X4t,"DebertaTokenizerFast"),X4t.forEach(t),Lbo=r(RP," (DeBERTa model)"),RP.forEach(t),ybo=i(S),vs=n(S,"LI",{});var PP=s(vs);Lfe=n(PP,"STRONG",{});var z4t=s(Lfe);xbo=r(z4t,"deberta-v2"),z4t.forEach(t),$bo=r(PP," \u2014 "),Uq=n(PP,"A",{href:!0});var Q4t=s(Uq);kbo=r(Q4t,"DebertaV2Tokenizer"),Q4t.forEach(t),Sbo=r(PP," or "),Hq=n(PP,"A",{href:!0});var W4t=s(Hq);Rbo=r(W4t,"DebertaV2TokenizerFast"),W4t.forEach(t),Pbo=r(PP," (DeBERTa-v2 model)"),PP.forEach(t),Bbo=i(S),Fs=n(S,"LI",{});var BP=s(Fs);yfe=n(BP,"STRONG",{});var U4t=s(yfe);Ibo=r(U4t,"distilbert"),U4t.forEach(t),Nbo=r(BP," \u2014 "),Jq=n(BP,"A",{href:!0});var H4t=s(Jq);qbo=r(H4t,"DistilBertTokenizer"),H4t.forEach(t),jbo=r(BP," or "),Yq=n(BP,"A",{href:!0});var J4t=s(Yq);Dbo=r(J4t,"DistilBertTokenizerFast"),J4t.forEach(t),Gbo=r(BP," (DistilBERT model)"),BP.forEach(t),Obo=i(S),Ts=n(S,"LI",{});var IP=s(Ts);xfe=n(IP,"STRONG",{});var Y4t=s(xfe);Vbo=r(Y4t,"dpr"),Y4t.forEach(t),Xbo=r(IP," \u2014 "),Kq=n(IP,"A",{href:!0});var K4t=s(Kq);zbo=r(K4t,"DPRQuestionEncoderTokenizer"),K4t.forEach(t),Qbo=r(IP," or "),Zq=n(IP,"A",{href:!0});var Z4t=s(Zq);Wbo=r(Z4t,"DPRQuestionEncoderTokenizerFast"),Z4t.forEach(t),Ubo=r(IP," (DPR model)"),IP.forEach(t),Hbo=i(S),Ms=n(S,"LI",{});var NP=s(Ms);$fe=n(NP,"STRONG",{});var eCt=s($fe);Jbo=r(eCt,"electra"),eCt.forEach(t),Ybo=r(NP," \u2014 "),ej=n(NP,"A",{href:!0});var oCt=s(ej);Kbo=r(oCt,"ElectraTokenizer"),oCt.forEach(t),Zbo=r(NP," or "),oj=n(NP,"A",{href:!0});var rCt=s(oj);e2o=r(rCt,"ElectraTokenizerFast"),rCt.forEach(t),o2o=r(NP," (ELECTRA model)"),NP.forEach(t),r2o=i(S),Es=n(S,"LI",{});var qP=s(Es);kfe=n(qP,"STRONG",{});var tCt=s(kfe);t2o=r(tCt,"ernie"),tCt.forEach(t),a2o=r(qP," \u2014 "),rj=n(qP,"A",{href:!0});var aCt=s(rj);n2o=r(aCt,"BertTokenizer"),aCt.forEach(t),s2o=r(qP," or "),tj=n(qP,"A",{href:!0});var nCt=s(tj);l2o=r(nCt,"BertTokenizerFast"),nCt.forEach(t),i2o=r(qP," (ERNIE model)"),qP.forEach(t),d2o=i(S),iu=n(S,"LI",{});var GPe=s(iu);Sfe=n(GPe,"STRONG",{});var sCt=s(Sfe);c2o=r(sCt,"flaubert"),sCt.forEach(t),m2o=r(GPe," \u2014 "),aj=n(GPe,"A",{href:!0});var lCt=s(aj);f2o=r(lCt,"FlaubertTokenizer"),lCt.forEach(t),g2o=r(GPe," (FlauBERT model)"),GPe.forEach(t),h2o=i(S),Cs=n(S,"LI",{});var jP=s(Cs);Rfe=n(jP,"STRONG",{});var iCt=s(Rfe);u2o=r(iCt,"fnet"),iCt.forEach(t),p2o=r(jP," \u2014 "),nj=n(jP,"A",{href:!0});var dCt=s(nj);_2o=r(dCt,"FNetTokenizer"),dCt.forEach(t),b2o=r(jP," or "),sj=n(jP,"A",{href:!0});var cCt=s(sj);v2o=r(cCt,"FNetTokenizerFast"),cCt.forEach(t),F2o=r(jP," (FNet model)"),jP.forEach(t),T2o=i(S),du=n(S,"LI",{});var OPe=s(du);Pfe=n(OPe,"STRONG",{});var mCt=s(Pfe);M2o=r(mCt,"fsmt"),mCt.forEach(t),E2o=r(OPe," \u2014 "),lj=n(OPe,"A",{href:!0});var fCt=s(lj);C2o=r(fCt,"FSMTTokenizer"),fCt.forEach(t),w2o=r(OPe," (FairSeq Machine-Translation model)"),OPe.forEach(t),A2o=i(S),ws=n(S,"LI",{});var DP=s(ws);Bfe=n(DP,"STRONG",{});var gCt=s(Bfe);L2o=r(gCt,"funnel"),gCt.forEach(t),y2o=r(DP," \u2014 "),ij=n(DP,"A",{href:!0});var hCt=s(ij);x2o=r(hCt,"FunnelTokenizer"),hCt.forEach(t),$2o=r(DP," or "),dj=n(DP,"A",{href:!0});var uCt=s(dj);k2o=r(uCt,"FunnelTokenizerFast"),uCt.forEach(t),S2o=r(DP," (Funnel Transformer model)"),DP.forEach(t),R2o=i(S),As=n(S,"LI",{});var GP=s(As);Ife=n(GP,"STRONG",{});var pCt=s(Ife);P2o=r(pCt,"gpt2"),pCt.forEach(t),B2o=r(GP," \u2014 "),cj=n(GP,"A",{href:!0});var _Ct=s(cj);I2o=r(_Ct,"GPT2Tokenizer"),_Ct.forEach(t),N2o=r(GP," or "),mj=n(GP,"A",{href:!0});var bCt=s(mj);q2o=r(bCt,"GPT2TokenizerFast"),bCt.forEach(t),j2o=r(GP," (OpenAI GPT-2 model)"),GP.forEach(t),D2o=i(S),Ls=n(S,"LI",{});var OP=s(Ls);Nfe=n(OP,"STRONG",{});var vCt=s(Nfe);G2o=r(vCt,"gpt_neo"),vCt.forEach(t),O2o=r(OP," \u2014 "),fj=n(OP,"A",{href:!0});var FCt=s(fj);V2o=r(FCt,"GPT2Tokenizer"),FCt.forEach(t),X2o=r(OP," or "),gj=n(OP,"A",{href:!0});var TCt=s(gj);z2o=r(TCt,"GPT2TokenizerFast"),TCt.forEach(t),Q2o=r(OP," (GPT Neo model)"),OP.forEach(t),W2o=i(S),cu=n(S,"LI",{});var VPe=s(cu);qfe=n(VPe,"STRONG",{});var MCt=s(qfe);U2o=r(MCt,"gpt_neox"),MCt.forEach(t),H2o=r(VPe," \u2014 "),hj=n(VPe,"A",{href:!0});var ECt=s(hj);J2o=r(ECt,"GPTNeoXTokenizerFast"),ECt.forEach(t),Y2o=r(VPe," (GPT NeoX model)"),VPe.forEach(t),K2o=i(S),mu=n(S,"LI",{});var XPe=s(mu);jfe=n(XPe,"STRONG",{});var CCt=s(jfe);Z2o=r(CCt,"gpt_neox_japanese"),CCt.forEach(t),e1o=r(XPe," \u2014 "),uj=n(XPe,"A",{href:!0});var wCt=s(uj);o1o=r(wCt,"GPTNeoXJapaneseTokenizer"),wCt.forEach(t),r1o=r(XPe," (GPT NeoX Japanese model)"),XPe.forEach(t),t1o=i(S),ys=n(S,"LI",{});var VP=s(ys);Dfe=n(VP,"STRONG",{});var ACt=s(Dfe);a1o=r(ACt,"gptj"),ACt.forEach(t),n1o=r(VP," \u2014 "),pj=n(VP,"A",{href:!0});var LCt=s(pj);s1o=r(LCt,"GPT2Tokenizer"),LCt.forEach(t),l1o=r(VP," or "),_j=n(VP,"A",{href:!0});var yCt=s(_j);i1o=r(yCt,"GPT2TokenizerFast"),yCt.forEach(t),d1o=r(VP," (GPT-J model)"),VP.forEach(t),c1o=i(S),xs=n(S,"LI",{});var XP=s(xs);Gfe=n(XP,"STRONG",{});var xCt=s(Gfe);m1o=r(xCt,"groupvit"),xCt.forEach(t),f1o=r(XP," \u2014 "),bj=n(XP,"A",{href:!0});var $Ct=s(bj);g1o=r($Ct,"CLIPTokenizer"),$Ct.forEach(t),h1o=r(XP," or "),vj=n(XP,"A",{href:!0});var kCt=s(vj);u1o=r(kCt,"CLIPTokenizerFast"),kCt.forEach(t),p1o=r(XP," (GroupViT model)"),XP.forEach(t),_1o=i(S),$s=n(S,"LI",{});var zP=s($s);Ofe=n(zP,"STRONG",{});var SCt=s(Ofe);b1o=r(SCt,"herbert"),SCt.forEach(t),v1o=r(zP," \u2014 "),Fj=n(zP,"A",{href:!0});var RCt=s(Fj);F1o=r(RCt,"HerbertTokenizer"),RCt.forEach(t),T1o=r(zP," or "),Tj=n(zP,"A",{href:!0});var PCt=s(Tj);M1o=r(PCt,"HerbertTokenizerFast"),PCt.forEach(t),E1o=r(zP," (HerBERT model)"),zP.forEach(t),C1o=i(S),fu=n(S,"LI",{});var zPe=s(fu);Vfe=n(zPe,"STRONG",{});var BCt=s(Vfe);w1o=r(BCt,"hubert"),BCt.forEach(t),A1o=r(zPe," \u2014 "),Mj=n(zPe,"A",{href:!0});var ICt=s(Mj);L1o=r(ICt,"Wav2Vec2CTCTokenizer"),ICt.forEach(t),y1o=r(zPe," (Hubert model)"),zPe.forEach(t),x1o=i(S),ks=n(S,"LI",{});var QP=s(ks);Xfe=n(QP,"STRONG",{});var NCt=s(Xfe);$1o=r(NCt,"ibert"),NCt.forEach(t),k1o=r(QP," \u2014 "),Ej=n(QP,"A",{href:!0});var qCt=s(Ej);S1o=r(qCt,"RobertaTokenizer"),qCt.forEach(t),R1o=r(QP," or "),Cj=n(QP,"A",{href:!0});var jCt=s(Cj);P1o=r(jCt,"RobertaTokenizerFast"),jCt.forEach(t),B1o=r(QP," (I-BERT model)"),QP.forEach(t),I1o=i(S),Ss=n(S,"LI",{});var WP=s(Ss);zfe=n(WP,"STRONG",{});var DCt=s(zfe);N1o=r(DCt,"layoutlm"),DCt.forEach(t),q1o=r(WP," \u2014 "),wj=n(WP,"A",{href:!0});var GCt=s(wj);j1o=r(GCt,"LayoutLMTokenizer"),GCt.forEach(t),D1o=r(WP," or "),Aj=n(WP,"A",{href:!0});var OCt=s(Aj);G1o=r(OCt,"LayoutLMTokenizerFast"),OCt.forEach(t),O1o=r(WP," (LayoutLM model)"),WP.forEach(t),V1o=i(S),Rs=n(S,"LI",{});var UP=s(Rs);Qfe=n(UP,"STRONG",{});var VCt=s(Qfe);X1o=r(VCt,"layoutlmv2"),VCt.forEach(t),z1o=r(UP," \u2014 "),Lj=n(UP,"A",{href:!0});var XCt=s(Lj);Q1o=r(XCt,"LayoutLMv2Tokenizer"),XCt.forEach(t),W1o=r(UP," or "),yj=n(UP,"A",{href:!0});var zCt=s(yj);U1o=r(zCt,"LayoutLMv2TokenizerFast"),zCt.forEach(t),H1o=r(UP," (LayoutLMv2 model)"),UP.forEach(t),J1o=i(S),Ps=n(S,"LI",{});var HP=s(Ps);Wfe=n(HP,"STRONG",{});var QCt=s(Wfe);Y1o=r(QCt,"layoutlmv3"),QCt.forEach(t),K1o=r(HP," \u2014 "),xj=n(HP,"A",{href:!0});var WCt=s(xj);Z1o=r(WCt,"LayoutLMv3Tokenizer"),WCt.forEach(t),evo=r(HP," or "),$j=n(HP,"A",{href:!0});var UCt=s($j);ovo=r(UCt,"LayoutLMv3TokenizerFast"),UCt.forEach(t),rvo=r(HP," (LayoutLMv3 model)"),HP.forEach(t),tvo=i(S),Bs=n(S,"LI",{});var JP=s(Bs);Ufe=n(JP,"STRONG",{});var HCt=s(Ufe);avo=r(HCt,"layoutxlm"),HCt.forEach(t),nvo=r(JP," \u2014 "),kj=n(JP,"A",{href:!0});var JCt=s(kj);svo=r(JCt,"LayoutXLMTokenizer"),JCt.forEach(t),lvo=r(JP," or "),Sj=n(JP,"A",{href:!0});var YCt=s(Sj);ivo=r(YCt,"LayoutXLMTokenizerFast"),YCt.forEach(t),dvo=r(JP," (LayoutXLM model)"),JP.forEach(t),cvo=i(S),Is=n(S,"LI",{});var YP=s(Is);Hfe=n(YP,"STRONG",{});var KCt=s(Hfe);mvo=r(KCt,"led"),KCt.forEach(t),fvo=r(YP," \u2014 "),Rj=n(YP,"A",{href:!0});var ZCt=s(Rj);gvo=r(ZCt,"LEDTokenizer"),ZCt.forEach(t),hvo=r(YP," or "),Pj=n(YP,"A",{href:!0});var e3t=s(Pj);uvo=r(e3t,"LEDTokenizerFast"),e3t.forEach(t),pvo=r(YP," (LED model)"),YP.forEach(t),_vo=i(S),Ns=n(S,"LI",{});var KP=s(Ns);Jfe=n(KP,"STRONG",{});var o3t=s(Jfe);bvo=r(o3t,"longformer"),o3t.forEach(t),vvo=r(KP," \u2014 "),Bj=n(KP,"A",{href:!0});var r3t=s(Bj);Fvo=r(r3t,"LongformerTokenizer"),r3t.forEach(t),Tvo=r(KP," or "),Ij=n(KP,"A",{href:!0});var t3t=s(Ij);Mvo=r(t3t,"LongformerTokenizerFast"),t3t.forEach(t),Evo=r(KP," (Longformer model)"),KP.forEach(t),Cvo=i(S),qs=n(S,"LI",{});var ZP=s(qs);Yfe=n(ZP,"STRONG",{});var a3t=s(Yfe);wvo=r(a3t,"longt5"),a3t.forEach(t),Avo=r(ZP," \u2014 "),Nj=n(ZP,"A",{href:!0});var n3t=s(Nj);Lvo=r(n3t,"T5Tokenizer"),n3t.forEach(t),yvo=r(ZP," or "),qj=n(ZP,"A",{href:!0});var s3t=s(qj);xvo=r(s3t,"T5TokenizerFast"),s3t.forEach(t),$vo=r(ZP," (LongT5 model)"),ZP.forEach(t),kvo=i(S),gu=n(S,"LI",{});var QPe=s(gu);Kfe=n(QPe,"STRONG",{});var l3t=s(Kfe);Svo=r(l3t,"luke"),l3t.forEach(t),Rvo=r(QPe," \u2014 "),jj=n(QPe,"A",{href:!0});var i3t=s(jj);Pvo=r(i3t,"LukeTokenizer"),i3t.forEach(t),Bvo=r(QPe," (LUKE model)"),QPe.forEach(t),Ivo=i(S),js=n(S,"LI",{});var eB=s(js);Zfe=n(eB,"STRONG",{});var d3t=s(Zfe);Nvo=r(d3t,"lxmert"),d3t.forEach(t),qvo=r(eB," \u2014 "),Dj=n(eB,"A",{href:!0});var c3t=s(Dj);jvo=r(c3t,"LxmertTokenizer"),c3t.forEach(t),Dvo=r(eB," or "),Gj=n(eB,"A",{href:!0});var m3t=s(Gj);Gvo=r(m3t,"LxmertTokenizerFast"),m3t.forEach(t),Ovo=r(eB," (LXMERT model)"),eB.forEach(t),Vvo=i(S),hu=n(S,"LI",{});var WPe=s(hu);ege=n(WPe,"STRONG",{});var f3t=s(ege);Xvo=r(f3t,"m2m_100"),f3t.forEach(t),zvo=r(WPe," \u2014 "),Oj=n(WPe,"A",{href:!0});var g3t=s(Oj);Qvo=r(g3t,"M2M100Tokenizer"),g3t.forEach(t),Wvo=r(WPe," (M2M100 model)"),WPe.forEach(t),Uvo=i(S),uu=n(S,"LI",{});var UPe=s(uu);oge=n(UPe,"STRONG",{});var h3t=s(oge);Hvo=r(h3t,"marian"),h3t.forEach(t),Jvo=r(UPe," \u2014 "),Vj=n(UPe,"A",{href:!0});var u3t=s(Vj);Yvo=r(u3t,"MarianTokenizer"),u3t.forEach(t),Kvo=r(UPe," (Marian model)"),UPe.forEach(t),Zvo=i(S),Ds=n(S,"LI",{});var oB=s(Ds);rge=n(oB,"STRONG",{});var p3t=s(rge);eFo=r(p3t,"mbart"),p3t.forEach(t),oFo=r(oB," \u2014 "),Xj=n(oB,"A",{href:!0});var _3t=s(Xj);rFo=r(_3t,"MBartTokenizer"),_3t.forEach(t),tFo=r(oB," or "),zj=n(oB,"A",{href:!0});var b3t=s(zj);aFo=r(b3t,"MBartTokenizerFast"),b3t.forEach(t),nFo=r(oB," (mBART model)"),oB.forEach(t),sFo=i(S),Gs=n(S,"LI",{});var rB=s(Gs);tge=n(rB,"STRONG",{});var v3t=s(tge);lFo=r(v3t,"mbart50"),v3t.forEach(t),iFo=r(rB," \u2014 "),Qj=n(rB,"A",{href:!0});var F3t=s(Qj);dFo=r(F3t,"MBart50Tokenizer"),F3t.forEach(t),cFo=r(rB," or "),Wj=n(rB,"A",{href:!0});var T3t=s(Wj);mFo=r(T3t,"MBart50TokenizerFast"),T3t.forEach(t),fFo=r(rB," (mBART-50 model)"),rB.forEach(t),gFo=i(S),Os=n(S,"LI",{});var tB=s(Os);age=n(tB,"STRONG",{});var M3t=s(age);hFo=r(M3t,"megatron-bert"),M3t.forEach(t),uFo=r(tB," \u2014 "),Uj=n(tB,"A",{href:!0});var E3t=s(Uj);pFo=r(E3t,"BertTokenizer"),E3t.forEach(t),_Fo=r(tB," or "),Hj=n(tB,"A",{href:!0});var C3t=s(Hj);bFo=r(C3t,"BertTokenizerFast"),C3t.forEach(t),vFo=r(tB," (Megatron-BERT model)"),tB.forEach(t),FFo=i(S),pu=n(S,"LI",{});var HPe=s(pu);nge=n(HPe,"STRONG",{});var w3t=s(nge);TFo=r(w3t,"mluke"),w3t.forEach(t),MFo=r(HPe," \u2014 "),Jj=n(HPe,"A",{href:!0});var A3t=s(Jj);EFo=r(A3t,"MLukeTokenizer"),A3t.forEach(t),CFo=r(HPe," (mLUKE model)"),HPe.forEach(t),wFo=i(S),Vs=n(S,"LI",{});var aB=s(Vs);sge=n(aB,"STRONG",{});var L3t=s(sge);AFo=r(L3t,"mobilebert"),L3t.forEach(t),LFo=r(aB," \u2014 "),Yj=n(aB,"A",{href:!0});var y3t=s(Yj);yFo=r(y3t,"MobileBertTokenizer"),y3t.forEach(t),xFo=r(aB," or "),Kj=n(aB,"A",{href:!0});var x3t=s(Kj);$Fo=r(x3t,"MobileBertTokenizerFast"),x3t.forEach(t),kFo=r(aB," (MobileBERT model)"),aB.forEach(t),SFo=i(S),Xs=n(S,"LI",{});var nB=s(Xs);lge=n(nB,"STRONG",{});var $3t=s(lge);RFo=r($3t,"mpnet"),$3t.forEach(t),PFo=r(nB," \u2014 "),Zj=n(nB,"A",{href:!0});var k3t=s(Zj);BFo=r(k3t,"MPNetTokenizer"),k3t.forEach(t),IFo=r(nB," or "),eD=n(nB,"A",{href:!0});var S3t=s(eD);NFo=r(S3t,"MPNetTokenizerFast"),S3t.forEach(t),qFo=r(nB," (MPNet model)"),nB.forEach(t),jFo=i(S),zs=n(S,"LI",{});var sB=s(zs);ige=n(sB,"STRONG",{});var R3t=s(ige);DFo=r(R3t,"mt5"),R3t.forEach(t),GFo=r(sB," \u2014 "),oD=n(sB,"A",{href:!0});var P3t=s(oD);OFo=r(P3t,"MT5Tokenizer"),P3t.forEach(t),VFo=r(sB," or "),rD=n(sB,"A",{href:!0});var B3t=s(rD);XFo=r(B3t,"MT5TokenizerFast"),B3t.forEach(t),zFo=r(sB," (MT5 model)"),sB.forEach(t),QFo=i(S),Qs=n(S,"LI",{});var lB=s(Qs);dge=n(lB,"STRONG",{});var I3t=s(dge);WFo=r(I3t,"mvp"),I3t.forEach(t),UFo=r(lB," \u2014 "),tD=n(lB,"A",{href:!0});var N3t=s(tD);HFo=r(N3t,"MvpTokenizer"),N3t.forEach(t),JFo=r(lB," or "),aD=n(lB,"A",{href:!0});var q3t=s(aD);YFo=r(q3t,"MvpTokenizerFast"),q3t.forEach(t),KFo=r(lB," (MVP model)"),lB.forEach(t),ZFo=i(S),Ws=n(S,"LI",{});var iB=s(Ws);cge=n(iB,"STRONG",{});var j3t=s(cge);eTo=r(j3t,"nezha"),j3t.forEach(t),oTo=r(iB," \u2014 "),nD=n(iB,"A",{href:!0});var D3t=s(nD);rTo=r(D3t,"BertTokenizer"),D3t.forEach(t),tTo=r(iB," or "),sD=n(iB,"A",{href:!0});var G3t=s(sD);aTo=r(G3t,"BertTokenizerFast"),G3t.forEach(t),nTo=r(iB," (Nezha model)"),iB.forEach(t),sTo=i(S),Us=n(S,"LI",{});var dB=s(Us);mge=n(dB,"STRONG",{});var O3t=s(mge);lTo=r(O3t,"nllb"),O3t.forEach(t),iTo=r(dB," \u2014 "),lD=n(dB,"A",{href:!0});var V3t=s(lD);dTo=r(V3t,"NllbTokenizer"),V3t.forEach(t),cTo=r(dB," or "),iD=n(dB,"A",{href:!0});var X3t=s(iD);mTo=r(X3t,"NllbTokenizerFast"),X3t.forEach(t),fTo=r(dB," (NLLB model)"),dB.forEach(t),gTo=i(S),Hs=n(S,"LI",{});var cB=s(Hs);fge=n(cB,"STRONG",{});var z3t=s(fge);hTo=r(z3t,"nystromformer"),z3t.forEach(t),uTo=r(cB," \u2014 "),dD=n(cB,"A",{href:!0});var Q3t=s(dD);pTo=r(Q3t,"AlbertTokenizer"),Q3t.forEach(t),_To=r(cB," or "),cD=n(cB,"A",{href:!0});var W3t=s(cD);bTo=r(W3t,"AlbertTokenizerFast"),W3t.forEach(t),vTo=r(cB," (Nystr\xF6mformer model)"),cB.forEach(t),FTo=i(S),Js=n(S,"LI",{});var mB=s(Js);gge=n(mB,"STRONG",{});var U3t=s(gge);TTo=r(U3t,"openai-gpt"),U3t.forEach(t),MTo=r(mB," \u2014 "),mD=n(mB,"A",{href:!0});var H3t=s(mD);ETo=r(H3t,"OpenAIGPTTokenizer"),H3t.forEach(t),CTo=r(mB," or "),fD=n(mB,"A",{href:!0});var J3t=s(fD);wTo=r(J3t,"OpenAIGPTTokenizerFast"),J3t.forEach(t),ATo=r(mB," (OpenAI GPT model)"),mB.forEach(t),LTo=i(S),_u=n(S,"LI",{});var JPe=s(_u);hge=n(JPe,"STRONG",{});var Y3t=s(hge);yTo=r(Y3t,"opt"),Y3t.forEach(t),xTo=r(JPe," \u2014 "),gD=n(JPe,"A",{href:!0});var K3t=s(gD);$To=r(K3t,"GPT2Tokenizer"),K3t.forEach(t),kTo=r(JPe," (OPT model)"),JPe.forEach(t),STo=i(S),Ys=n(S,"LI",{});var fB=s(Ys);uge=n(fB,"STRONG",{});var Z3t=s(uge);RTo=r(Z3t,"owlvit"),Z3t.forEach(t),PTo=r(fB," \u2014 "),hD=n(fB,"A",{href:!0});var e5t=s(hD);BTo=r(e5t,"CLIPTokenizer"),e5t.forEach(t),ITo=r(fB," or "),uD=n(fB,"A",{href:!0});var o5t=s(uD);NTo=r(o5t,"CLIPTokenizerFast"),o5t.forEach(t),qTo=r(fB," (OWL-ViT model)"),fB.forEach(t),jTo=i(S),Ks=n(S,"LI",{});var gB=s(Ks);pge=n(gB,"STRONG",{});var r5t=s(pge);DTo=r(r5t,"pegasus"),r5t.forEach(t),GTo=r(gB," \u2014 "),pD=n(gB,"A",{href:!0});var t5t=s(pD);OTo=r(t5t,"PegasusTokenizer"),t5t.forEach(t),VTo=r(gB," or "),_D=n(gB,"A",{href:!0});var a5t=s(_D);XTo=r(a5t,"PegasusTokenizerFast"),a5t.forEach(t),zTo=r(gB," (Pegasus model)"),gB.forEach(t),QTo=i(S),bu=n(S,"LI",{});var YPe=s(bu);_ge=n(YPe,"STRONG",{});var n5t=s(_ge);WTo=r(n5t,"perceiver"),n5t.forEach(t),UTo=r(YPe," \u2014 "),bD=n(YPe,"A",{href:!0});var s5t=s(bD);HTo=r(s5t,"PerceiverTokenizer"),s5t.forEach(t),JTo=r(YPe," (Perceiver model)"),YPe.forEach(t),YTo=i(S),vu=n(S,"LI",{});var KPe=s(vu);bge=n(KPe,"STRONG",{});var l5t=s(bge);KTo=r(l5t,"phobert"),l5t.forEach(t),ZTo=r(KPe," \u2014 "),vD=n(KPe,"A",{href:!0});var i5t=s(vD);eMo=r(i5t,"PhobertTokenizer"),i5t.forEach(t),oMo=r(KPe," (PhoBERT model)"),KPe.forEach(t),rMo=i(S),Fu=n(S,"LI",{});var ZPe=s(Fu);vge=n(ZPe,"STRONG",{});var d5t=s(vge);tMo=r(d5t,"plbart"),d5t.forEach(t),aMo=r(ZPe," \u2014 "),FD=n(ZPe,"A",{href:!0});var c5t=s(FD);nMo=r(c5t,"PLBartTokenizer"),c5t.forEach(t),sMo=r(ZPe," (PLBart model)"),ZPe.forEach(t),lMo=i(S),Tu=n(S,"LI",{});var eBe=s(Tu);Fge=n(eBe,"STRONG",{});var m5t=s(Fge);iMo=r(m5t,"prophetnet"),m5t.forEach(t),dMo=r(eBe," \u2014 "),TD=n(eBe,"A",{href:!0});var f5t=s(TD);cMo=r(f5t,"ProphetNetTokenizer"),f5t.forEach(t),mMo=r(eBe," (ProphetNet model)"),eBe.forEach(t),fMo=i(S),Zs=n(S,"LI",{});var hB=s(Zs);Tge=n(hB,"STRONG",{});var g5t=s(Tge);gMo=r(g5t,"qdqbert"),g5t.forEach(t),hMo=r(hB," \u2014 "),MD=n(hB,"A",{href:!0});var h5t=s(MD);uMo=r(h5t,"BertTokenizer"),h5t.forEach(t),pMo=r(hB," or "),ED=n(hB,"A",{href:!0});var u5t=s(ED);_Mo=r(u5t,"BertTokenizerFast"),u5t.forEach(t),bMo=r(hB," (QDQBert model)"),hB.forEach(t),vMo=i(S),Mu=n(S,"LI",{});var oBe=s(Mu);Mge=n(oBe,"STRONG",{});var p5t=s(Mge);FMo=r(p5t,"rag"),p5t.forEach(t),TMo=r(oBe," \u2014 "),CD=n(oBe,"A",{href:!0});var _5t=s(CD);MMo=r(_5t,"RagTokenizer"),_5t.forEach(t),EMo=r(oBe," (RAG model)"),oBe.forEach(t),CMo=i(S),el=n(S,"LI",{});var uB=s(el);Ege=n(uB,"STRONG",{});var b5t=s(Ege);wMo=r(b5t,"realm"),b5t.forEach(t),AMo=r(uB," \u2014 "),wD=n(uB,"A",{href:!0});var v5t=s(wD);LMo=r(v5t,"RealmTokenizer"),v5t.forEach(t),yMo=r(uB," or "),AD=n(uB,"A",{href:!0});var F5t=s(AD);xMo=r(F5t,"RealmTokenizerFast"),F5t.forEach(t),$Mo=r(uB," (REALM model)"),uB.forEach(t),kMo=i(S),ol=n(S,"LI",{});var pB=s(ol);Cge=n(pB,"STRONG",{});var T5t=s(Cge);SMo=r(T5t,"reformer"),T5t.forEach(t),RMo=r(pB," \u2014 "),LD=n(pB,"A",{href:!0});var M5t=s(LD);PMo=r(M5t,"ReformerTokenizer"),M5t.forEach(t),BMo=r(pB," or "),yD=n(pB,"A",{href:!0});var E5t=s(yD);IMo=r(E5t,"ReformerTokenizerFast"),E5t.forEach(t),NMo=r(pB," (Reformer model)"),pB.forEach(t),qMo=i(S),rl=n(S,"LI",{});var _B=s(rl);wge=n(_B,"STRONG",{});var C5t=s(wge);jMo=r(C5t,"rembert"),C5t.forEach(t),DMo=r(_B," \u2014 "),xD=n(_B,"A",{href:!0});var w5t=s(xD);GMo=r(w5t,"RemBertTokenizer"),w5t.forEach(t),OMo=r(_B," or "),$D=n(_B,"A",{href:!0});var A5t=s($D);VMo=r(A5t,"RemBertTokenizerFast"),A5t.forEach(t),XMo=r(_B," (RemBERT model)"),_B.forEach(t),zMo=i(S),tl=n(S,"LI",{});var bB=s(tl);Age=n(bB,"STRONG",{});var L5t=s(Age);QMo=r(L5t,"retribert"),L5t.forEach(t),WMo=r(bB," \u2014 "),kD=n(bB,"A",{href:!0});var y5t=s(kD);UMo=r(y5t,"RetriBertTokenizer"),y5t.forEach(t),HMo=r(bB," or "),SD=n(bB,"A",{href:!0});var x5t=s(SD);JMo=r(x5t,"RetriBertTokenizerFast"),x5t.forEach(t),YMo=r(bB," (RetriBERT model)"),bB.forEach(t),KMo=i(S),al=n(S,"LI",{});var vB=s(al);Lge=n(vB,"STRONG",{});var $5t=s(Lge);ZMo=r($5t,"roberta"),$5t.forEach(t),eEo=r(vB," \u2014 "),RD=n(vB,"A",{href:!0});var k5t=s(RD);oEo=r(k5t,"RobertaTokenizer"),k5t.forEach(t),rEo=r(vB," or "),PD=n(vB,"A",{href:!0});var S5t=s(PD);tEo=r(S5t,"RobertaTokenizerFast"),S5t.forEach(t),aEo=r(vB," (RoBERTa model)"),vB.forEach(t),nEo=i(S),nl=n(S,"LI",{});var FB=s(nl);yge=n(FB,"STRONG",{});var R5t=s(yge);sEo=r(R5t,"roformer"),R5t.forEach(t),lEo=r(FB," \u2014 "),BD=n(FB,"A",{href:!0});var P5t=s(BD);iEo=r(P5t,"RoFormerTokenizer"),P5t.forEach(t),dEo=r(FB," or "),ID=n(FB,"A",{href:!0});var B5t=s(ID);cEo=r(B5t,"RoFormerTokenizerFast"),B5t.forEach(t),mEo=r(FB," (RoFormer model)"),FB.forEach(t),fEo=i(S),Eu=n(S,"LI",{});var rBe=s(Eu);xge=n(rBe,"STRONG",{});var I5t=s(xge);gEo=r(I5t,"speech_to_text"),I5t.forEach(t),hEo=r(rBe," \u2014 "),ND=n(rBe,"A",{href:!0});var N5t=s(ND);uEo=r(N5t,"Speech2TextTokenizer"),N5t.forEach(t),pEo=r(rBe," (Speech2Text model)"),rBe.forEach(t),_Eo=i(S),Cu=n(S,"LI",{});var tBe=s(Cu);$ge=n(tBe,"STRONG",{});var q5t=s($ge);bEo=r(q5t,"speech_to_text_2"),q5t.forEach(t),vEo=r(tBe," \u2014 "),qD=n(tBe,"A",{href:!0});var j5t=s(qD);FEo=r(j5t,"Speech2Text2Tokenizer"),j5t.forEach(t),TEo=r(tBe," (Speech2Text2 model)"),tBe.forEach(t),MEo=i(S),sl=n(S,"LI",{});var TB=s(sl);kge=n(TB,"STRONG",{});var D5t=s(kge);EEo=r(D5t,"splinter"),D5t.forEach(t),CEo=r(TB," \u2014 "),jD=n(TB,"A",{href:!0});var G5t=s(jD);wEo=r(G5t,"SplinterTokenizer"),G5t.forEach(t),AEo=r(TB," or "),DD=n(TB,"A",{href:!0});var O5t=s(DD);LEo=r(O5t,"SplinterTokenizerFast"),O5t.forEach(t),yEo=r(TB," (Splinter model)"),TB.forEach(t),xEo=i(S),ll=n(S,"LI",{});var MB=s(ll);Sge=n(MB,"STRONG",{});var V5t=s(Sge);$Eo=r(V5t,"squeezebert"),V5t.forEach(t),kEo=r(MB," \u2014 "),GD=n(MB,"A",{href:!0});var X5t=s(GD);SEo=r(X5t,"SqueezeBertTokenizer"),X5t.forEach(t),REo=r(MB," or "),OD=n(MB,"A",{href:!0});var z5t=s(OD);PEo=r(z5t,"SqueezeBertTokenizerFast"),z5t.forEach(t),BEo=r(MB," (SqueezeBERT model)"),MB.forEach(t),IEo=i(S),il=n(S,"LI",{});var EB=s(il);Rge=n(EB,"STRONG",{});var Q5t=s(Rge);NEo=r(Q5t,"t5"),Q5t.forEach(t),qEo=r(EB," \u2014 "),VD=n(EB,"A",{href:!0});var W5t=s(VD);jEo=r(W5t,"T5Tokenizer"),W5t.forEach(t),DEo=r(EB," or "),XD=n(EB,"A",{href:!0});var U5t=s(XD);GEo=r(U5t,"T5TokenizerFast"),U5t.forEach(t),OEo=r(EB," (T5 model)"),EB.forEach(t),VEo=i(S),wu=n(S,"LI",{});var aBe=s(wu);Pge=n(aBe,"STRONG",{});var H5t=s(Pge);XEo=r(H5t,"tapas"),H5t.forEach(t),zEo=r(aBe," \u2014 "),zD=n(aBe,"A",{href:!0});var J5t=s(zD);QEo=r(J5t,"TapasTokenizer"),J5t.forEach(t),WEo=r(aBe," (TAPAS model)"),aBe.forEach(t),UEo=i(S),Au=n(S,"LI",{});var nBe=s(Au);Bge=n(nBe,"STRONG",{});var Y5t=s(Bge);HEo=r(Y5t,"tapex"),Y5t.forEach(t),JEo=r(nBe," \u2014 "),QD=n(nBe,"A",{href:!0});var K5t=s(QD);YEo=r(K5t,"TapexTokenizer"),K5t.forEach(t),KEo=r(nBe," (TAPEX model)"),nBe.forEach(t),ZEo=i(S),Lu=n(S,"LI",{});var sBe=s(Lu);Ige=n(sBe,"STRONG",{});var Z5t=s(Ige);e4o=r(Z5t,"transfo-xl"),Z5t.forEach(t),o4o=r(sBe," \u2014 "),WD=n(sBe,"A",{href:!0});var e0t=s(WD);r4o=r(e0t,"TransfoXLTokenizer"),e0t.forEach(t),t4o=r(sBe," (Transformer-XL model)"),sBe.forEach(t),a4o=i(S),dl=n(S,"LI",{});var CB=s(dl);Nge=n(CB,"STRONG",{});var o0t=s(Nge);n4o=r(o0t,"vilt"),o0t.forEach(t),s4o=r(CB," \u2014 "),UD=n(CB,"A",{href:!0});var r0t=s(UD);l4o=r(r0t,"BertTokenizer"),r0t.forEach(t),i4o=r(CB," or "),HD=n(CB,"A",{href:!0});var t0t=s(HD);d4o=r(t0t,"BertTokenizerFast"),t0t.forEach(t),c4o=r(CB," (ViLT model)"),CB.forEach(t),m4o=i(S),cl=n(S,"LI",{});var wB=s(cl);qge=n(wB,"STRONG",{});var a0t=s(qge);f4o=r(a0t,"visual_bert"),a0t.forEach(t),g4o=r(wB," \u2014 "),JD=n(wB,"A",{href:!0});var n0t=s(JD);h4o=r(n0t,"BertTokenizer"),n0t.forEach(t),u4o=r(wB," or "),YD=n(wB,"A",{href:!0});var s0t=s(YD);p4o=r(s0t,"BertTokenizerFast"),s0t.forEach(t),_4o=r(wB," (VisualBERT model)"),wB.forEach(t),b4o=i(S),yu=n(S,"LI",{});var lBe=s(yu);jge=n(lBe,"STRONG",{});var l0t=s(jge);v4o=r(l0t,"wav2vec2"),l0t.forEach(t),F4o=r(lBe," \u2014 "),KD=n(lBe,"A",{href:!0});var i0t=s(KD);T4o=r(i0t,"Wav2Vec2CTCTokenizer"),i0t.forEach(t),M4o=r(lBe," (Wav2Vec2 model)"),lBe.forEach(t),E4o=i(S),xu=n(S,"LI",{});var iBe=s(xu);Dge=n(iBe,"STRONG",{});var d0t=s(Dge);C4o=r(d0t,"wav2vec2-conformer"),d0t.forEach(t),w4o=r(iBe," \u2014 "),ZD=n(iBe,"A",{href:!0});var c0t=s(ZD);A4o=r(c0t,"Wav2Vec2CTCTokenizer"),c0t.forEach(t),L4o=r(iBe," (Wav2Vec2-Conformer model)"),iBe.forEach(t),y4o=i(S),$u=n(S,"LI",{});var dBe=s($u);Gge=n(dBe,"STRONG",{});var m0t=s(Gge);x4o=r(m0t,"wav2vec2_phoneme"),m0t.forEach(t),$4o=r(dBe," \u2014 "),eG=n(dBe,"A",{href:!0});var f0t=s(eG);k4o=r(f0t,"Wav2Vec2PhonemeCTCTokenizer"),f0t.forEach(t),S4o=r(dBe," (Wav2Vec2Phoneme model)"),dBe.forEach(t),R4o=i(S),ml=n(S,"LI",{});var AB=s(ml);Oge=n(AB,"STRONG",{});var g0t=s(Oge);P4o=r(g0t,"xclip"),g0t.forEach(t),B4o=r(AB," \u2014 "),oG=n(AB,"A",{href:!0});var h0t=s(oG);I4o=r(h0t,"CLIPTokenizer"),h0t.forEach(t),N4o=r(AB," or "),rG=n(AB,"A",{href:!0});var u0t=s(rG);q4o=r(u0t,"CLIPTokenizerFast"),u0t.forEach(t),j4o=r(AB," (X-CLIP model)"),AB.forEach(t),D4o=i(S),fl=n(S,"LI",{});var LB=s(fl);Vge=n(LB,"STRONG",{});var p0t=s(Vge);G4o=r(p0t,"xglm"),p0t.forEach(t),O4o=r(LB," \u2014 "),tG=n(LB,"A",{href:!0});var _0t=s(tG);V4o=r(_0t,"XGLMTokenizer"),_0t.forEach(t),X4o=r(LB," or "),aG=n(LB,"A",{href:!0});var b0t=s(aG);z4o=r(b0t,"XGLMTokenizerFast"),b0t.forEach(t),Q4o=r(LB," (XGLM model)"),LB.forEach(t),W4o=i(S),ku=n(S,"LI",{});var cBe=s(ku);Xge=n(cBe,"STRONG",{});var v0t=s(Xge);U4o=r(v0t,"xlm"),v0t.forEach(t),H4o=r(cBe," \u2014 "),nG=n(cBe,"A",{href:!0});var F0t=s(nG);J4o=r(F0t,"XLMTokenizer"),F0t.forEach(t),Y4o=r(cBe," (XLM model)"),cBe.forEach(t),K4o=i(S),Su=n(S,"LI",{});var mBe=s(Su);zge=n(mBe,"STRONG",{});var T0t=s(zge);Z4o=r(T0t,"xlm-prophetnet"),T0t.forEach(t),eCo=r(mBe," \u2014 "),sG=n(mBe,"A",{href:!0});var M0t=s(sG);oCo=r(M0t,"XLMProphetNetTokenizer"),M0t.forEach(t),rCo=r(mBe," (XLM-ProphetNet model)"),mBe.forEach(t),tCo=i(S),gl=n(S,"LI",{});var yB=s(gl);Qge=n(yB,"STRONG",{});var E0t=s(Qge);aCo=r(E0t,"xlm-roberta"),E0t.forEach(t),nCo=r(yB," \u2014 "),lG=n(yB,"A",{href:!0});var C0t=s(lG);sCo=r(C0t,"XLMRobertaTokenizer"),C0t.forEach(t),lCo=r(yB," or "),iG=n(yB,"A",{href:!0});var w0t=s(iG);iCo=r(w0t,"XLMRobertaTokenizerFast"),w0t.forEach(t),dCo=r(yB," (XLM-RoBERTa model)"),yB.forEach(t),cCo=i(S),hl=n(S,"LI",{});var xB=s(hl);Wge=n(xB,"STRONG",{});var A0t=s(Wge);mCo=r(A0t,"xlm-roberta-xl"),A0t.forEach(t),fCo=r(xB," \u2014 "),dG=n(xB,"A",{href:!0});var L0t=s(dG);gCo=r(L0t,"XLMRobertaTokenizer"),L0t.forEach(t),hCo=r(xB," or "),cG=n(xB,"A",{href:!0});var y0t=s(cG);uCo=r(y0t,"XLMRobertaTokenizerFast"),y0t.forEach(t),pCo=r(xB," (XLM-RoBERTa-XL model)"),xB.forEach(t),_Co=i(S),ul=n(S,"LI",{});var $B=s(ul);Uge=n($B,"STRONG",{});var x0t=s(Uge);bCo=r(x0t,"xlnet"),x0t.forEach(t),vCo=r($B," \u2014 "),mG=n($B,"A",{href:!0});var $0t=s(mG);FCo=r($0t,"XLNetTokenizer"),$0t.forEach(t),TCo=r($B," or "),fG=n($B,"A",{href:!0});var k0t=s(fG);MCo=r(k0t,"XLNetTokenizerFast"),k0t.forEach(t),ECo=r($B," (XLNet model)"),$B.forEach(t),CCo=i(S),pl=n(S,"LI",{});var kB=s(pl);Hge=n(kB,"STRONG",{});var S0t=s(Hge);wCo=r(S0t,"yoso"),S0t.forEach(t),ACo=r(kB," \u2014 "),gG=n(kB,"A",{href:!0});var R0t=s(gG);LCo=r(R0t,"AlbertTokenizer"),R0t.forEach(t),yCo=r(kB," or "),hG=n(kB,"A",{href:!0});var P0t=s(hG);xCo=r(P0t,"AlbertTokenizerFast"),P0t.forEach(t),$Co=r(kB," (YOSO model)"),kB.forEach(t),S.forEach(t),kCo=i(El),T(Ru.$$.fragment,El),El.forEach(t),SCo=i(Ml),Pu=n(Ml,"DIV",{class:!0});var Xeo=s(Pu);T(J9.$$.fragment,Xeo),RCo=i(Xeo),Jge=n(Xeo,"P",{});var B0t=s(Jge);PCo=r(B0t,"Register a new tokenizer in this mapping."),B0t.forEach(t),Xeo.forEach(t),Ml.forEach(t),BKe=i(m),hd=n(m,"H2",{class:!0});var zeo=s(hd);Bu=n(zeo,"A",{id:!0,class:!0,href:!0});var I0t=s(Bu);Yge=n(I0t,"SPAN",{});var N0t=s(Yge);T(Y9.$$.fragment,N0t),N0t.forEach(t),I0t.forEach(t),BCo=i(zeo),Kge=n(zeo,"SPAN",{});var q0t=s(Kge);ICo=r(q0t,"AutoFeatureExtractor"),q0t.forEach(t),zeo.forEach(t),IKe=i(m),So=n(m,"DIV",{class:!0});var Cl=s(So);T(K9.$$.fragment,Cl),NCo=i(Cl),Z9=n(Cl,"P",{});var Qeo=s(Z9);qCo=r(Qeo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uG=n(Qeo,"A",{href:!0});var j0t=s(uG);jCo=r(j0t,"AutoFeatureExtractor.from_pretrained()"),j0t.forEach(t),DCo=r(Qeo," class method."),Qeo.forEach(t),GCo=i(Cl),ex=n(Cl,"P",{});var Weo=s(ex);OCo=r(Weo,"This class cannot be instantiated directly using "),Zge=n(Weo,"CODE",{});var D0t=s(Zge);VCo=r(D0t,"__init__()"),D0t.forEach(t),XCo=r(Weo," (throws an error)."),Weo.forEach(t),zCo=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ba=s(Ye);T(ox.$$.fragment,ba),QCo=i(ba),ehe=n(ba,"P",{});var G0t=s(ehe);WCo=r(G0t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),G0t.forEach(t),UCo=i(ba),Ha=n(ba,"P",{});var $y=s(Ha);HCo=r($y,"The feature extractor class to instantiate is selected based on the "),ohe=n($y,"CODE",{});var O0t=s(ohe);JCo=r(O0t,"model_type"),O0t.forEach(t),YCo=r($y,` property of the config object
(either passed as an argument or loaded from `),rhe=n($y,"CODE",{});var V0t=s(rhe);KCo=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),ZCo=r($y,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),the=n($y,"CODE",{});var X0t=s(the);e3o=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),o3o=r($y,":"),$y.forEach(t),r3o=i(ba),Q=n(ba,"UL",{});var U=s(Q);Iu=n(U,"LI",{});var fBe=s(Iu);ahe=n(fBe,"STRONG",{});var z0t=s(ahe);t3o=r(z0t,"beit"),z0t.forEach(t),a3o=r(fBe," \u2014 "),pG=n(fBe,"A",{href:!0});var Q0t=s(pG);n3o=r(Q0t,"BeitFeatureExtractor"),Q0t.forEach(t),s3o=r(fBe," (BEiT model)"),fBe.forEach(t),l3o=i(U),Nu=n(U,"LI",{});var gBe=s(Nu);nhe=n(gBe,"STRONG",{});var W0t=s(nhe);i3o=r(W0t,"clip"),W0t.forEach(t),d3o=r(gBe," \u2014 "),_G=n(gBe,"A",{href:!0});var U0t=s(_G);c3o=r(U0t,"CLIPFeatureExtractor"),U0t.forEach(t),m3o=r(gBe," (CLIP model)"),gBe.forEach(t),f3o=i(U),qu=n(U,"LI",{});var hBe=s(qu);she=n(hBe,"STRONG",{});var H0t=s(she);g3o=r(H0t,"conditional_detr"),H0t.forEach(t),h3o=r(hBe," \u2014 "),bG=n(hBe,"A",{href:!0});var J0t=s(bG);u3o=r(J0t,"ConditionalDetrFeatureExtractor"),J0t.forEach(t),p3o=r(hBe," (Conditional DETR model)"),hBe.forEach(t),_3o=i(U),ju=n(U,"LI",{});var uBe=s(ju);lhe=n(uBe,"STRONG",{});var Y0t=s(lhe);b3o=r(Y0t,"convnext"),Y0t.forEach(t),v3o=r(uBe," \u2014 "),vG=n(uBe,"A",{href:!0});var K0t=s(vG);F3o=r(K0t,"ConvNextFeatureExtractor"),K0t.forEach(t),T3o=r(uBe," (ConvNeXT model)"),uBe.forEach(t),M3o=i(U),Du=n(U,"LI",{});var pBe=s(Du);ihe=n(pBe,"STRONG",{});var Z0t=s(ihe);E3o=r(Z0t,"cvt"),Z0t.forEach(t),C3o=r(pBe," \u2014 "),FG=n(pBe,"A",{href:!0});var ewt=s(FG);w3o=r(ewt,"ConvNextFeatureExtractor"),ewt.forEach(t),A3o=r(pBe," (CvT model)"),pBe.forEach(t),L3o=i(U),Gu=n(U,"LI",{});var _Be=s(Gu);dhe=n(_Be,"STRONG",{});var owt=s(dhe);y3o=r(owt,"data2vec-audio"),owt.forEach(t),x3o=r(_Be," \u2014 "),TG=n(_Be,"A",{href:!0});var rwt=s(TG);$3o=r(rwt,"Wav2Vec2FeatureExtractor"),rwt.forEach(t),k3o=r(_Be," (Data2VecAudio model)"),_Be.forEach(t),S3o=i(U),Ou=n(U,"LI",{});var bBe=s(Ou);che=n(bBe,"STRONG",{});var twt=s(che);R3o=r(twt,"data2vec-vision"),twt.forEach(t),P3o=r(bBe," \u2014 "),MG=n(bBe,"A",{href:!0});var awt=s(MG);B3o=r(awt,"BeitFeatureExtractor"),awt.forEach(t),I3o=r(bBe," (Data2VecVision model)"),bBe.forEach(t),N3o=i(U),Vu=n(U,"LI",{});var vBe=s(Vu);mhe=n(vBe,"STRONG",{});var nwt=s(mhe);q3o=r(nwt,"deformable_detr"),nwt.forEach(t),j3o=r(vBe," \u2014 "),EG=n(vBe,"A",{href:!0});var swt=s(EG);D3o=r(swt,"DeformableDetrFeatureExtractor"),swt.forEach(t),G3o=r(vBe," (Deformable DETR model)"),vBe.forEach(t),O3o=i(U),Xu=n(U,"LI",{});var FBe=s(Xu);fhe=n(FBe,"STRONG",{});var lwt=s(fhe);V3o=r(lwt,"deit"),lwt.forEach(t),X3o=r(FBe," \u2014 "),CG=n(FBe,"A",{href:!0});var iwt=s(CG);z3o=r(iwt,"DeiTFeatureExtractor"),iwt.forEach(t),Q3o=r(FBe," (DeiT model)"),FBe.forEach(t),W3o=i(U),zu=n(U,"LI",{});var TBe=s(zu);ghe=n(TBe,"STRONG",{});var dwt=s(ghe);U3o=r(dwt,"detr"),dwt.forEach(t),H3o=r(TBe," \u2014 "),wG=n(TBe,"A",{href:!0});var cwt=s(wG);J3o=r(cwt,"DetrFeatureExtractor"),cwt.forEach(t),Y3o=r(TBe," (DETR model)"),TBe.forEach(t),K3o=i(U),Qu=n(U,"LI",{});var MBe=s(Qu);hhe=n(MBe,"STRONG",{});var mwt=s(hhe);Z3o=r(mwt,"donut"),mwt.forEach(t),e5o=r(MBe," \u2014 "),AG=n(MBe,"A",{href:!0});var fwt=s(AG);o5o=r(fwt,"DonutFeatureExtractor"),fwt.forEach(t),r5o=r(MBe," (Donut model)"),MBe.forEach(t),t5o=i(U),Wu=n(U,"LI",{});var EBe=s(Wu);uhe=n(EBe,"STRONG",{});var gwt=s(uhe);a5o=r(gwt,"dpt"),gwt.forEach(t),n5o=r(EBe," \u2014 "),LG=n(EBe,"A",{href:!0});var hwt=s(LG);s5o=r(hwt,"DPTFeatureExtractor"),hwt.forEach(t),l5o=r(EBe," (DPT model)"),EBe.forEach(t),i5o=i(U),Uu=n(U,"LI",{});var CBe=s(Uu);phe=n(CBe,"STRONG",{});var uwt=s(phe);d5o=r(uwt,"flava"),uwt.forEach(t),c5o=r(CBe," \u2014 "),yG=n(CBe,"A",{href:!0});var pwt=s(yG);m5o=r(pwt,"FlavaFeatureExtractor"),pwt.forEach(t),f5o=r(CBe," (FLAVA model)"),CBe.forEach(t),g5o=i(U),Hu=n(U,"LI",{});var wBe=s(Hu);_he=n(wBe,"STRONG",{});var _wt=s(_he);h5o=r(_wt,"glpn"),_wt.forEach(t),u5o=r(wBe," \u2014 "),xG=n(wBe,"A",{href:!0});var bwt=s(xG);p5o=r(bwt,"GLPNFeatureExtractor"),bwt.forEach(t),_5o=r(wBe," (GLPN model)"),wBe.forEach(t),b5o=i(U),Ju=n(U,"LI",{});var ABe=s(Ju);bhe=n(ABe,"STRONG",{});var vwt=s(bhe);v5o=r(vwt,"groupvit"),vwt.forEach(t),F5o=r(ABe," \u2014 "),$G=n(ABe,"A",{href:!0});var Fwt=s($G);T5o=r(Fwt,"CLIPFeatureExtractor"),Fwt.forEach(t),M5o=r(ABe," (GroupViT model)"),ABe.forEach(t),E5o=i(U),Yu=n(U,"LI",{});var LBe=s(Yu);vhe=n(LBe,"STRONG",{});var Twt=s(vhe);C5o=r(Twt,"hubert"),Twt.forEach(t),w5o=r(LBe," \u2014 "),kG=n(LBe,"A",{href:!0});var Mwt=s(kG);A5o=r(Mwt,"Wav2Vec2FeatureExtractor"),Mwt.forEach(t),L5o=r(LBe," (Hubert model)"),LBe.forEach(t),y5o=i(U),Ku=n(U,"LI",{});var yBe=s(Ku);Fhe=n(yBe,"STRONG",{});var Ewt=s(Fhe);x5o=r(Ewt,"imagegpt"),Ewt.forEach(t),$5o=r(yBe," \u2014 "),SG=n(yBe,"A",{href:!0});var Cwt=s(SG);k5o=r(Cwt,"ImageGPTFeatureExtractor"),Cwt.forEach(t),S5o=r(yBe," (ImageGPT model)"),yBe.forEach(t),R5o=i(U),Zu=n(U,"LI",{});var xBe=s(Zu);The=n(xBe,"STRONG",{});var wwt=s(The);P5o=r(wwt,"layoutlmv2"),wwt.forEach(t),B5o=r(xBe," \u2014 "),RG=n(xBe,"A",{href:!0});var Awt=s(RG);I5o=r(Awt,"LayoutLMv2FeatureExtractor"),Awt.forEach(t),N5o=r(xBe," (LayoutLMv2 model)"),xBe.forEach(t),q5o=i(U),ep=n(U,"LI",{});var $Be=s(ep);Mhe=n($Be,"STRONG",{});var Lwt=s(Mhe);j5o=r(Lwt,"layoutlmv3"),Lwt.forEach(t),D5o=r($Be," \u2014 "),PG=n($Be,"A",{href:!0});var ywt=s(PG);G5o=r(ywt,"LayoutLMv3FeatureExtractor"),ywt.forEach(t),O5o=r($Be," (LayoutLMv3 model)"),$Be.forEach(t),V5o=i(U),op=n(U,"LI",{});var kBe=s(op);Ehe=n(kBe,"STRONG",{});var xwt=s(Ehe);X5o=r(xwt,"levit"),xwt.forEach(t),z5o=r(kBe," \u2014 "),BG=n(kBe,"A",{href:!0});var $wt=s(BG);Q5o=r($wt,"LevitFeatureExtractor"),$wt.forEach(t),W5o=r(kBe," (LeViT model)"),kBe.forEach(t),U5o=i(U),rp=n(U,"LI",{});var SBe=s(rp);Che=n(SBe,"STRONG",{});var kwt=s(Che);H5o=r(kwt,"maskformer"),kwt.forEach(t),J5o=r(SBe," \u2014 "),IG=n(SBe,"A",{href:!0});var Swt=s(IG);Y5o=r(Swt,"MaskFormerFeatureExtractor"),Swt.forEach(t),K5o=r(SBe," (MaskFormer model)"),SBe.forEach(t),Z5o=i(U),tp=n(U,"LI",{});var RBe=s(tp);whe=n(RBe,"STRONG",{});var Rwt=s(whe);e0o=r(Rwt,"mctct"),Rwt.forEach(t),o0o=r(RBe," \u2014 "),NG=n(RBe,"A",{href:!0});var Pwt=s(NG);r0o=r(Pwt,"MCTCTFeatureExtractor"),Pwt.forEach(t),t0o=r(RBe," (M-CTC-T model)"),RBe.forEach(t),a0o=i(U),ap=n(U,"LI",{});var PBe=s(ap);Ahe=n(PBe,"STRONG",{});var Bwt=s(Ahe);n0o=r(Bwt,"mobilevit"),Bwt.forEach(t),s0o=r(PBe," \u2014 "),qG=n(PBe,"A",{href:!0});var Iwt=s(qG);l0o=r(Iwt,"MobileViTFeatureExtractor"),Iwt.forEach(t),i0o=r(PBe," (MobileViT model)"),PBe.forEach(t),d0o=i(U),np=n(U,"LI",{});var BBe=s(np);Lhe=n(BBe,"STRONG",{});var Nwt=s(Lhe);c0o=r(Nwt,"owlvit"),Nwt.forEach(t),m0o=r(BBe," \u2014 "),jG=n(BBe,"A",{href:!0});var qwt=s(jG);f0o=r(qwt,"OwlViTFeatureExtractor"),qwt.forEach(t),g0o=r(BBe," (OWL-ViT model)"),BBe.forEach(t),h0o=i(U),sp=n(U,"LI",{});var IBe=s(sp);yhe=n(IBe,"STRONG",{});var jwt=s(yhe);u0o=r(jwt,"perceiver"),jwt.forEach(t),p0o=r(IBe," \u2014 "),DG=n(IBe,"A",{href:!0});var Dwt=s(DG);_0o=r(Dwt,"PerceiverFeatureExtractor"),Dwt.forEach(t),b0o=r(IBe," (Perceiver model)"),IBe.forEach(t),v0o=i(U),lp=n(U,"LI",{});var NBe=s(lp);xhe=n(NBe,"STRONG",{});var Gwt=s(xhe);F0o=r(Gwt,"poolformer"),Gwt.forEach(t),T0o=r(NBe," \u2014 "),GG=n(NBe,"A",{href:!0});var Owt=s(GG);M0o=r(Owt,"PoolFormerFeatureExtractor"),Owt.forEach(t),E0o=r(NBe," (PoolFormer model)"),NBe.forEach(t),C0o=i(U),ip=n(U,"LI",{});var qBe=s(ip);$he=n(qBe,"STRONG",{});var Vwt=s($he);w0o=r(Vwt,"regnet"),Vwt.forEach(t),A0o=r(qBe," \u2014 "),OG=n(qBe,"A",{href:!0});var Xwt=s(OG);L0o=r(Xwt,"ConvNextFeatureExtractor"),Xwt.forEach(t),y0o=r(qBe," (RegNet model)"),qBe.forEach(t),x0o=i(U),dp=n(U,"LI",{});var jBe=s(dp);khe=n(jBe,"STRONG",{});var zwt=s(khe);$0o=r(zwt,"resnet"),zwt.forEach(t),k0o=r(jBe," \u2014 "),VG=n(jBe,"A",{href:!0});var Qwt=s(VG);S0o=r(Qwt,"ConvNextFeatureExtractor"),Qwt.forEach(t),R0o=r(jBe," (ResNet model)"),jBe.forEach(t),P0o=i(U),cp=n(U,"LI",{});var DBe=s(cp);She=n(DBe,"STRONG",{});var Wwt=s(She);B0o=r(Wwt,"segformer"),Wwt.forEach(t),I0o=r(DBe," \u2014 "),XG=n(DBe,"A",{href:!0});var Uwt=s(XG);N0o=r(Uwt,"SegformerFeatureExtractor"),Uwt.forEach(t),q0o=r(DBe," (SegFormer model)"),DBe.forEach(t),j0o=i(U),mp=n(U,"LI",{});var GBe=s(mp);Rhe=n(GBe,"STRONG",{});var Hwt=s(Rhe);D0o=r(Hwt,"speech_to_text"),Hwt.forEach(t),G0o=r(GBe," \u2014 "),zG=n(GBe,"A",{href:!0});var Jwt=s(zG);O0o=r(Jwt,"Speech2TextFeatureExtractor"),Jwt.forEach(t),V0o=r(GBe," (Speech2Text model)"),GBe.forEach(t),X0o=i(U),fp=n(U,"LI",{});var OBe=s(fp);Phe=n(OBe,"STRONG",{});var Ywt=s(Phe);z0o=r(Ywt,"swin"),Ywt.forEach(t),Q0o=r(OBe," \u2014 "),QG=n(OBe,"A",{href:!0});var Kwt=s(QG);W0o=r(Kwt,"ViTFeatureExtractor"),Kwt.forEach(t),U0o=r(OBe," (Swin Transformer model)"),OBe.forEach(t),H0o=i(U),gp=n(U,"LI",{});var VBe=s(gp);Bhe=n(VBe,"STRONG",{});var Zwt=s(Bhe);J0o=r(Zwt,"swinv2"),Zwt.forEach(t),Y0o=r(VBe," \u2014 "),WG=n(VBe,"A",{href:!0});var eAt=s(WG);K0o=r(eAt,"ViTFeatureExtractor"),eAt.forEach(t),Z0o=r(VBe," (Swin Transformer V2 model)"),VBe.forEach(t),ewo=i(U),hp=n(U,"LI",{});var XBe=s(hp);Ihe=n(XBe,"STRONG",{});var oAt=s(Ihe);owo=r(oAt,"van"),oAt.forEach(t),rwo=r(XBe," \u2014 "),UG=n(XBe,"A",{href:!0});var rAt=s(UG);two=r(rAt,"ConvNextFeatureExtractor"),rAt.forEach(t),awo=r(XBe," (VAN model)"),XBe.forEach(t),nwo=i(U),up=n(U,"LI",{});var zBe=s(up);Nhe=n(zBe,"STRONG",{});var tAt=s(Nhe);swo=r(tAt,"videomae"),tAt.forEach(t),lwo=r(zBe," \u2014 "),HG=n(zBe,"A",{href:!0});var aAt=s(HG);iwo=r(aAt,"VideoMAEFeatureExtractor"),aAt.forEach(t),dwo=r(zBe," (VideoMAE model)"),zBe.forEach(t),cwo=i(U),pp=n(U,"LI",{});var QBe=s(pp);qhe=n(QBe,"STRONG",{});var nAt=s(qhe);mwo=r(nAt,"vilt"),nAt.forEach(t),fwo=r(QBe," \u2014 "),JG=n(QBe,"A",{href:!0});var sAt=s(JG);gwo=r(sAt,"ViltFeatureExtractor"),sAt.forEach(t),hwo=r(QBe," (ViLT model)"),QBe.forEach(t),uwo=i(U),_p=n(U,"LI",{});var WBe=s(_p);jhe=n(WBe,"STRONG",{});var lAt=s(jhe);pwo=r(lAt,"vit"),lAt.forEach(t),_wo=r(WBe," \u2014 "),YG=n(WBe,"A",{href:!0});var iAt=s(YG);bwo=r(iAt,"ViTFeatureExtractor"),iAt.forEach(t),vwo=r(WBe," (ViT model)"),WBe.forEach(t),Fwo=i(U),bp=n(U,"LI",{});var UBe=s(bp);Dhe=n(UBe,"STRONG",{});var dAt=s(Dhe);Two=r(dAt,"vit_mae"),dAt.forEach(t),Mwo=r(UBe," \u2014 "),KG=n(UBe,"A",{href:!0});var cAt=s(KG);Ewo=r(cAt,"ViTFeatureExtractor"),cAt.forEach(t),Cwo=r(UBe," (ViTMAE model)"),UBe.forEach(t),wwo=i(U),vp=n(U,"LI",{});var HBe=s(vp);Ghe=n(HBe,"STRONG",{});var mAt=s(Ghe);Awo=r(mAt,"wav2vec2"),mAt.forEach(t),Lwo=r(HBe," \u2014 "),ZG=n(HBe,"A",{href:!0});var fAt=s(ZG);ywo=r(fAt,"Wav2Vec2FeatureExtractor"),fAt.forEach(t),xwo=r(HBe," (Wav2Vec2 model)"),HBe.forEach(t),$wo=i(U),Fp=n(U,"LI",{});var JBe=s(Fp);Ohe=n(JBe,"STRONG",{});var gAt=s(Ohe);kwo=r(gAt,"wav2vec2-conformer"),gAt.forEach(t),Swo=r(JBe," \u2014 "),eO=n(JBe,"A",{href:!0});var hAt=s(eO);Rwo=r(hAt,"Wav2Vec2FeatureExtractor"),hAt.forEach(t),Pwo=r(JBe," (Wav2Vec2-Conformer model)"),JBe.forEach(t),Bwo=i(U),Tp=n(U,"LI",{});var YBe=s(Tp);Vhe=n(YBe,"STRONG",{});var uAt=s(Vhe);Iwo=r(uAt,"xclip"),uAt.forEach(t),Nwo=r(YBe," \u2014 "),oO=n(YBe,"A",{href:!0});var pAt=s(oO);qwo=r(pAt,"CLIPFeatureExtractor"),pAt.forEach(t),jwo=r(YBe," (X-CLIP model)"),YBe.forEach(t),Dwo=i(U),Mp=n(U,"LI",{});var KBe=s(Mp);Xhe=n(KBe,"STRONG",{});var _At=s(Xhe);Gwo=r(_At,"yolos"),_At.forEach(t),Owo=r(KBe," \u2014 "),rO=n(KBe,"A",{href:!0});var bAt=s(rO);Vwo=r(bAt,"YolosFeatureExtractor"),bAt.forEach(t),Xwo=r(KBe," (YOLOS model)"),KBe.forEach(t),U.forEach(t),zwo=i(ba),T(Ep.$$.fragment,ba),Qwo=i(ba),T(Cp.$$.fragment,ba),ba.forEach(t),Wwo=i(Cl),wp=n(Cl,"DIV",{class:!0});var Ueo=s(wp);T(rx.$$.fragment,Ueo),Uwo=i(Ueo),zhe=n(Ueo,"P",{});var vAt=s(zhe);Hwo=r(vAt,"Register a new feature extractor for this class."),vAt.forEach(t),Ueo.forEach(t),Cl.forEach(t),NKe=i(m),ud=n(m,"H2",{class:!0});var Heo=s(ud);Ap=n(Heo,"A",{id:!0,class:!0,href:!0});var FAt=s(Ap);Qhe=n(FAt,"SPAN",{});var TAt=s(Qhe);T(tx.$$.fragment,TAt),TAt.forEach(t),FAt.forEach(t),Jwo=i(Heo),Whe=n(Heo,"SPAN",{});var MAt=s(Whe);Ywo=r(MAt,"AutoProcessor"),MAt.forEach(t),Heo.forEach(t),qKe=i(m),Ro=n(m,"DIV",{class:!0});var wl=s(Ro);T(ax.$$.fragment,wl),Kwo=i(wl),nx=n(wl,"P",{});var Jeo=s(nx);Zwo=r(Jeo,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tO=n(Jeo,"A",{href:!0});var EAt=s(tO);eAo=r(EAt,"AutoProcessor.from_pretrained()"),EAt.forEach(t),oAo=r(Jeo," class method."),Jeo.forEach(t),rAo=i(wl),sx=n(wl,"P",{});var Yeo=s(sx);tAo=r(Yeo,"This class cannot be instantiated directly using "),Uhe=n(Yeo,"CODE",{});var CAt=s(Uhe);aAo=r(CAt,"__init__()"),CAt.forEach(t),nAo=r(Yeo," (throws an error)."),Yeo.forEach(t),sAo=i(wl),Ke=n(wl,"DIV",{class:!0});var va=s(Ke);T(lx.$$.fragment,va),lAo=i(va),Hhe=n(va,"P",{});var wAt=s(Hhe);iAo=r(wAt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wAt.forEach(t),dAo=i(va),pd=n(va,"P",{});var _le=s(pd);cAo=r(_le,"The processor class to instantiate is selected based on the "),Jhe=n(_le,"CODE",{});var AAt=s(Jhe);mAo=r(AAt,"model_type"),AAt.forEach(t),fAo=r(_le,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(_le,"CODE",{});var LAt=s(Yhe);gAo=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),hAo=r(_le," if possible):"),_le.forEach(t),uAo=i(va),ie=n(va,"UL",{});var ge=s(ie);Lp=n(ge,"LI",{});var ZBe=s(Lp);Khe=n(ZBe,"STRONG",{});var yAt=s(Khe);pAo=r(yAt,"clip"),yAt.forEach(t),_Ao=r(ZBe," \u2014 "),aO=n(ZBe,"A",{href:!0});var xAt=s(aO);bAo=r(xAt,"CLIPProcessor"),xAt.forEach(t),vAo=r(ZBe," (CLIP model)"),ZBe.forEach(t),FAo=i(ge),yp=n(ge,"LI",{});var eIe=s(yp);Zhe=n(eIe,"STRONG",{});var $At=s(Zhe);TAo=r($At,"donut"),$At.forEach(t),MAo=r(eIe," \u2014 "),nO=n(eIe,"A",{href:!0});var kAt=s(nO);EAo=r(kAt,"DonutProcessor"),kAt.forEach(t),CAo=r(eIe," (Donut model)"),eIe.forEach(t),wAo=i(ge),xp=n(ge,"LI",{});var oIe=s(xp);eue=n(oIe,"STRONG",{});var SAt=s(eue);AAo=r(SAt,"flava"),SAt.forEach(t),LAo=r(oIe," \u2014 "),sO=n(oIe,"A",{href:!0});var RAt=s(sO);yAo=r(RAt,"FlavaProcessor"),RAt.forEach(t),xAo=r(oIe," (FLAVA model)"),oIe.forEach(t),$Ao=i(ge),$p=n(ge,"LI",{});var rIe=s($p);oue=n(rIe,"STRONG",{});var PAt=s(oue);kAo=r(PAt,"groupvit"),PAt.forEach(t),SAo=r(rIe," \u2014 "),lO=n(rIe,"A",{href:!0});var BAt=s(lO);RAo=r(BAt,"CLIPProcessor"),BAt.forEach(t),PAo=r(rIe," (GroupViT model)"),rIe.forEach(t),BAo=i(ge),kp=n(ge,"LI",{});var tIe=s(kp);rue=n(tIe,"STRONG",{});var IAt=s(rue);IAo=r(IAt,"layoutlmv2"),IAt.forEach(t),NAo=r(tIe," \u2014 "),iO=n(tIe,"A",{href:!0});var NAt=s(iO);qAo=r(NAt,"LayoutLMv2Processor"),NAt.forEach(t),jAo=r(tIe," (LayoutLMv2 model)"),tIe.forEach(t),DAo=i(ge),Sp=n(ge,"LI",{});var aIe=s(Sp);tue=n(aIe,"STRONG",{});var qAt=s(tue);GAo=r(qAt,"layoutlmv3"),qAt.forEach(t),OAo=r(aIe," \u2014 "),dO=n(aIe,"A",{href:!0});var jAt=s(dO);VAo=r(jAt,"LayoutLMv3Processor"),jAt.forEach(t),XAo=r(aIe," (LayoutLMv3 model)"),aIe.forEach(t),zAo=i(ge),Rp=n(ge,"LI",{});var nIe=s(Rp);aue=n(nIe,"STRONG",{});var DAt=s(aue);QAo=r(DAt,"layoutxlm"),DAt.forEach(t),WAo=r(nIe," \u2014 "),cO=n(nIe,"A",{href:!0});var GAt=s(cO);UAo=r(GAt,"LayoutXLMProcessor"),GAt.forEach(t),HAo=r(nIe," (LayoutXLM model)"),nIe.forEach(t),JAo=i(ge),Pp=n(ge,"LI",{});var sIe=s(Pp);nue=n(sIe,"STRONG",{});var OAt=s(nue);YAo=r(OAt,"owlvit"),OAt.forEach(t),KAo=r(sIe," \u2014 "),mO=n(sIe,"A",{href:!0});var VAt=s(mO);ZAo=r(VAt,"OwlViTProcessor"),VAt.forEach(t),e6o=r(sIe," (OWL-ViT model)"),sIe.forEach(t),o6o=i(ge),Bp=n(ge,"LI",{});var lIe=s(Bp);sue=n(lIe,"STRONG",{});var XAt=s(sue);r6o=r(XAt,"sew"),XAt.forEach(t),t6o=r(lIe," \u2014 "),fO=n(lIe,"A",{href:!0});var zAt=s(fO);a6o=r(zAt,"Wav2Vec2Processor"),zAt.forEach(t),n6o=r(lIe," (SEW model)"),lIe.forEach(t),s6o=i(ge),Ip=n(ge,"LI",{});var iIe=s(Ip);lue=n(iIe,"STRONG",{});var QAt=s(lue);l6o=r(QAt,"sew-d"),QAt.forEach(t),i6o=r(iIe," \u2014 "),gO=n(iIe,"A",{href:!0});var WAt=s(gO);d6o=r(WAt,"Wav2Vec2Processor"),WAt.forEach(t),c6o=r(iIe," (SEW-D model)"),iIe.forEach(t),m6o=i(ge),Np=n(ge,"LI",{});var dIe=s(Np);iue=n(dIe,"STRONG",{});var UAt=s(iue);f6o=r(UAt,"speech_to_text"),UAt.forEach(t),g6o=r(dIe," \u2014 "),hO=n(dIe,"A",{href:!0});var HAt=s(hO);h6o=r(HAt,"Speech2TextProcessor"),HAt.forEach(t),u6o=r(dIe," (Speech2Text model)"),dIe.forEach(t),p6o=i(ge),qp=n(ge,"LI",{});var cIe=s(qp);due=n(cIe,"STRONG",{});var JAt=s(due);_6o=r(JAt,"speech_to_text_2"),JAt.forEach(t),b6o=r(cIe," \u2014 "),uO=n(cIe,"A",{href:!0});var YAt=s(uO);v6o=r(YAt,"Speech2Text2Processor"),YAt.forEach(t),F6o=r(cIe," (Speech2Text2 model)"),cIe.forEach(t),T6o=i(ge),jp=n(ge,"LI",{});var mIe=s(jp);cue=n(mIe,"STRONG",{});var KAt=s(cue);M6o=r(KAt,"trocr"),KAt.forEach(t),E6o=r(mIe," \u2014 "),pO=n(mIe,"A",{href:!0});var ZAt=s(pO);C6o=r(ZAt,"TrOCRProcessor"),ZAt.forEach(t),w6o=r(mIe," (TrOCR model)"),mIe.forEach(t),A6o=i(ge),Dp=n(ge,"LI",{});var fIe=s(Dp);mue=n(fIe,"STRONG",{});var e6t=s(mue);L6o=r(e6t,"unispeech"),e6t.forEach(t),y6o=r(fIe," \u2014 "),_O=n(fIe,"A",{href:!0});var o6t=s(_O);x6o=r(o6t,"Wav2Vec2Processor"),o6t.forEach(t),$6o=r(fIe," (UniSpeech model)"),fIe.forEach(t),k6o=i(ge),Gp=n(ge,"LI",{});var gIe=s(Gp);fue=n(gIe,"STRONG",{});var r6t=s(fue);S6o=r(r6t,"unispeech-sat"),r6t.forEach(t),R6o=r(gIe," \u2014 "),bO=n(gIe,"A",{href:!0});var t6t=s(bO);P6o=r(t6t,"Wav2Vec2Processor"),t6t.forEach(t),B6o=r(gIe," (UniSpeechSat model)"),gIe.forEach(t),I6o=i(ge),Op=n(ge,"LI",{});var hIe=s(Op);gue=n(hIe,"STRONG",{});var a6t=s(gue);N6o=r(a6t,"vilt"),a6t.forEach(t),q6o=r(hIe," \u2014 "),vO=n(hIe,"A",{href:!0});var n6t=s(vO);j6o=r(n6t,"ViltProcessor"),n6t.forEach(t),D6o=r(hIe," (ViLT model)"),hIe.forEach(t),G6o=i(ge),Vp=n(ge,"LI",{});var uIe=s(Vp);hue=n(uIe,"STRONG",{});var s6t=s(hue);O6o=r(s6t,"vision-text-dual-encoder"),s6t.forEach(t),V6o=r(uIe," \u2014 "),FO=n(uIe,"A",{href:!0});var l6t=s(FO);X6o=r(l6t,"VisionTextDualEncoderProcessor"),l6t.forEach(t),z6o=r(uIe," (VisionTextDualEncoder model)"),uIe.forEach(t),Q6o=i(ge),Xp=n(ge,"LI",{});var pIe=s(Xp);uue=n(pIe,"STRONG",{});var i6t=s(uue);W6o=r(i6t,"wav2vec2"),i6t.forEach(t),U6o=r(pIe," \u2014 "),TO=n(pIe,"A",{href:!0});var d6t=s(TO);H6o=r(d6t,"Wav2Vec2Processor"),d6t.forEach(t),J6o=r(pIe," (Wav2Vec2 model)"),pIe.forEach(t),Y6o=i(ge),zp=n(ge,"LI",{});var _Ie=s(zp);pue=n(_Ie,"STRONG",{});var c6t=s(pue);K6o=r(c6t,"wav2vec2-conformer"),c6t.forEach(t),Z6o=r(_Ie," \u2014 "),MO=n(_Ie,"A",{href:!0});var m6t=s(MO);e7o=r(m6t,"Wav2Vec2Processor"),m6t.forEach(t),o7o=r(_Ie," (Wav2Vec2-Conformer model)"),_Ie.forEach(t),r7o=i(ge),Qp=n(ge,"LI",{});var bIe=s(Qp);_ue=n(bIe,"STRONG",{});var f6t=s(_ue);t7o=r(f6t,"wavlm"),f6t.forEach(t),a7o=r(bIe," \u2014 "),EO=n(bIe,"A",{href:!0});var g6t=s(EO);n7o=r(g6t,"Wav2Vec2Processor"),g6t.forEach(t),s7o=r(bIe," (WavLM model)"),bIe.forEach(t),l7o=i(ge),Wp=n(ge,"LI",{});var vIe=s(Wp);bue=n(vIe,"STRONG",{});var h6t=s(bue);i7o=r(h6t,"xclip"),h6t.forEach(t),d7o=r(vIe," \u2014 "),CO=n(vIe,"A",{href:!0});var u6t=s(CO);c7o=r(u6t,"CLIPProcessor"),u6t.forEach(t),m7o=r(vIe," (X-CLIP model)"),vIe.forEach(t),ge.forEach(t),f7o=i(va),T(Up.$$.fragment,va),g7o=i(va),T(Hp.$$.fragment,va),va.forEach(t),h7o=i(wl),Jp=n(wl,"DIV",{class:!0});var Keo=s(Jp);T(ix.$$.fragment,Keo),u7o=i(Keo),vue=n(Keo,"P",{});var p6t=s(vue);p7o=r(p6t,"Register a new processor for this class."),p6t.forEach(t),Keo.forEach(t),wl.forEach(t),jKe=i(m),_d=n(m,"H2",{class:!0});var Zeo=s(_d);Yp=n(Zeo,"A",{id:!0,class:!0,href:!0});var _6t=s(Yp);Fue=n(_6t,"SPAN",{});var b6t=s(Fue);T(dx.$$.fragment,b6t),b6t.forEach(t),_6t.forEach(t),_7o=i(Zeo),Tue=n(Zeo,"SPAN",{});var v6t=s(Tue);b7o=r(v6t,"AutoModel"),v6t.forEach(t),Zeo.forEach(t),DKe=i(m),Po=n(m,"DIV",{class:!0});var Al=s(Po);T(cx.$$.fragment,Al),v7o=i(Al),bd=n(Al,"P",{});var ble=s(bd);F7o=r(ble,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wO=n(ble,"A",{href:!0});var F6t=s(wO);T7o=r(F6t,"from_pretrained()"),F6t.forEach(t),M7o=r(ble," class method or the "),AO=n(ble,"A",{href:!0});var T6t=s(AO);E7o=r(T6t,"from_config()"),T6t.forEach(t),C7o=r(ble,` class
method.`),ble.forEach(t),w7o=i(Al),mx=n(Al,"P",{});var eoo=s(mx);A7o=r(eoo,"This class cannot be instantiated directly using "),Mue=n(eoo,"CODE",{});var M6t=s(Mue);L7o=r(M6t,"__init__()"),M6t.forEach(t),y7o=r(eoo," (throws an error)."),eoo.forEach(t),x7o=i(Al),_t=n(Al,"DIV",{class:!0});var ky=s(_t);T(fx.$$.fragment,ky),$7o=i(ky),Eue=n(ky,"P",{});var E6t=s(Eue);k7o=r(E6t,"Instantiates one of the base model classes of the library from a configuration."),E6t.forEach(t),S7o=i(ky),vd=n(ky,"P",{});var vle=s(vd);R7o=r(vle,`Note:
Loading a model from its configuration file does `),Cue=n(vle,"STRONG",{});var C6t=s(Cue);P7o=r(C6t,"not"),C6t.forEach(t),B7o=r(vle,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(vle,"A",{href:!0});var w6t=s(LO);I7o=r(w6t,"from_pretrained()"),w6t.forEach(t),N7o=r(vle," to load the model weights."),vle.forEach(t),q7o=i(ky),T(Kp.$$.fragment,ky),ky.forEach(t),j7o=i(Al),Ze=n(Al,"DIV",{class:!0});var Fa=s(Ze);T(gx.$$.fragment,Fa),D7o=i(Fa),wue=n(Fa,"P",{});var A6t=s(wue);G7o=r(A6t,"Instantiate one of the base model classes of the library from a pretrained model."),A6t.forEach(t),O7o=i(Fa),Ja=n(Fa,"P",{});var Sy=s(Ja);V7o=r(Sy,"The model class to instantiate is selected based on the "),Aue=n(Sy,"CODE",{});var L6t=s(Aue);X7o=r(L6t,"model_type"),L6t.forEach(t),z7o=r(Sy,` property of the config object (either
passed as an argument or loaded from `),Lue=n(Sy,"CODE",{});var y6t=s(Lue);Q7o=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),W7o=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(Sy,"CODE",{});var x6t=s(yue);U7o=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),H7o=r(Sy,":"),Sy.forEach(t),J7o=i(Fa),y=n(Fa,"UL",{});var x=s(y);Zp=n(x,"LI",{});var FIe=s(Zp);xue=n(FIe,"STRONG",{});var $6t=s(xue);Y7o=r($6t,"albert"),$6t.forEach(t),K7o=r(FIe," \u2014 "),yO=n(FIe,"A",{href:!0});var k6t=s(yO);Z7o=r(k6t,"AlbertModel"),k6t.forEach(t),eLo=r(FIe," (ALBERT model)"),FIe.forEach(t),oLo=i(x),e_=n(x,"LI",{});var TIe=s(e_);$ue=n(TIe,"STRONG",{});var S6t=s($ue);rLo=r(S6t,"bart"),S6t.forEach(t),tLo=r(TIe," \u2014 "),xO=n(TIe,"A",{href:!0});var R6t=s(xO);aLo=r(R6t,"BartModel"),R6t.forEach(t),nLo=r(TIe," (BART model)"),TIe.forEach(t),sLo=i(x),o_=n(x,"LI",{});var MIe=s(o_);kue=n(MIe,"STRONG",{});var P6t=s(kue);lLo=r(P6t,"beit"),P6t.forEach(t),iLo=r(MIe," \u2014 "),$O=n(MIe,"A",{href:!0});var B6t=s($O);dLo=r(B6t,"BeitModel"),B6t.forEach(t),cLo=r(MIe," (BEiT model)"),MIe.forEach(t),mLo=i(x),r_=n(x,"LI",{});var EIe=s(r_);Sue=n(EIe,"STRONG",{});var I6t=s(Sue);fLo=r(I6t,"bert"),I6t.forEach(t),gLo=r(EIe," \u2014 "),kO=n(EIe,"A",{href:!0});var N6t=s(kO);hLo=r(N6t,"BertModel"),N6t.forEach(t),uLo=r(EIe," (BERT model)"),EIe.forEach(t),pLo=i(x),t_=n(x,"LI",{});var CIe=s(t_);Rue=n(CIe,"STRONG",{});var q6t=s(Rue);_Lo=r(q6t,"bert-generation"),q6t.forEach(t),bLo=r(CIe," \u2014 "),SO=n(CIe,"A",{href:!0});var j6t=s(SO);vLo=r(j6t,"BertGenerationEncoder"),j6t.forEach(t),FLo=r(CIe," (Bert Generation model)"),CIe.forEach(t),TLo=i(x),a_=n(x,"LI",{});var wIe=s(a_);Pue=n(wIe,"STRONG",{});var D6t=s(Pue);MLo=r(D6t,"big_bird"),D6t.forEach(t),ELo=r(wIe," \u2014 "),RO=n(wIe,"A",{href:!0});var G6t=s(RO);CLo=r(G6t,"BigBirdModel"),G6t.forEach(t),wLo=r(wIe," (BigBird model)"),wIe.forEach(t),ALo=i(x),n_=n(x,"LI",{});var AIe=s(n_);Bue=n(AIe,"STRONG",{});var O6t=s(Bue);LLo=r(O6t,"bigbird_pegasus"),O6t.forEach(t),yLo=r(AIe," \u2014 "),PO=n(AIe,"A",{href:!0});var V6t=s(PO);xLo=r(V6t,"BigBirdPegasusModel"),V6t.forEach(t),$Lo=r(AIe," (BigBird-Pegasus model)"),AIe.forEach(t),kLo=i(x),s_=n(x,"LI",{});var LIe=s(s_);Iue=n(LIe,"STRONG",{});var X6t=s(Iue);SLo=r(X6t,"blenderbot"),X6t.forEach(t),RLo=r(LIe," \u2014 "),BO=n(LIe,"A",{href:!0});var z6t=s(BO);PLo=r(z6t,"BlenderbotModel"),z6t.forEach(t),BLo=r(LIe," (Blenderbot model)"),LIe.forEach(t),ILo=i(x),l_=n(x,"LI",{});var yIe=s(l_);Nue=n(yIe,"STRONG",{});var Q6t=s(Nue);NLo=r(Q6t,"blenderbot-small"),Q6t.forEach(t),qLo=r(yIe," \u2014 "),IO=n(yIe,"A",{href:!0});var W6t=s(IO);jLo=r(W6t,"BlenderbotSmallModel"),W6t.forEach(t),DLo=r(yIe," (BlenderbotSmall model)"),yIe.forEach(t),GLo=i(x),i_=n(x,"LI",{});var xIe=s(i_);que=n(xIe,"STRONG",{});var U6t=s(que);OLo=r(U6t,"bloom"),U6t.forEach(t),VLo=r(xIe," \u2014 "),NO=n(xIe,"A",{href:!0});var H6t=s(NO);XLo=r(H6t,"BloomModel"),H6t.forEach(t),zLo=r(xIe," (BLOOM model)"),xIe.forEach(t),QLo=i(x),d_=n(x,"LI",{});var $Ie=s(d_);jue=n($Ie,"STRONG",{});var J6t=s(jue);WLo=r(J6t,"camembert"),J6t.forEach(t),ULo=r($Ie," \u2014 "),qO=n($Ie,"A",{href:!0});var Y6t=s(qO);HLo=r(Y6t,"CamembertModel"),Y6t.forEach(t),JLo=r($Ie," (CamemBERT model)"),$Ie.forEach(t),YLo=i(x),c_=n(x,"LI",{});var kIe=s(c_);Due=n(kIe,"STRONG",{});var K6t=s(Due);KLo=r(K6t,"canine"),K6t.forEach(t),ZLo=r(kIe," \u2014 "),jO=n(kIe,"A",{href:!0});var Z6t=s(jO);eyo=r(Z6t,"CanineModel"),Z6t.forEach(t),oyo=r(kIe," (CANINE model)"),kIe.forEach(t),ryo=i(x),m_=n(x,"LI",{});var SIe=s(m_);Gue=n(SIe,"STRONG",{});var e7t=s(Gue);tyo=r(e7t,"clip"),e7t.forEach(t),ayo=r(SIe," \u2014 "),DO=n(SIe,"A",{href:!0});var o7t=s(DO);nyo=r(o7t,"CLIPModel"),o7t.forEach(t),syo=r(SIe," (CLIP model)"),SIe.forEach(t),lyo=i(x),f_=n(x,"LI",{});var RIe=s(f_);Oue=n(RIe,"STRONG",{});var r7t=s(Oue);iyo=r(r7t,"codegen"),r7t.forEach(t),dyo=r(RIe," \u2014 "),GO=n(RIe,"A",{href:!0});var t7t=s(GO);cyo=r(t7t,"CodeGenModel"),t7t.forEach(t),myo=r(RIe," (CodeGen model)"),RIe.forEach(t),fyo=i(x),g_=n(x,"LI",{});var PIe=s(g_);Vue=n(PIe,"STRONG",{});var a7t=s(Vue);gyo=r(a7t,"conditional_detr"),a7t.forEach(t),hyo=r(PIe," \u2014 "),OO=n(PIe,"A",{href:!0});var n7t=s(OO);uyo=r(n7t,"ConditionalDetrModel"),n7t.forEach(t),pyo=r(PIe," (Conditional DETR model)"),PIe.forEach(t),_yo=i(x),h_=n(x,"LI",{});var BIe=s(h_);Xue=n(BIe,"STRONG",{});var s7t=s(Xue);byo=r(s7t,"convbert"),s7t.forEach(t),vyo=r(BIe," \u2014 "),VO=n(BIe,"A",{href:!0});var l7t=s(VO);Fyo=r(l7t,"ConvBertModel"),l7t.forEach(t),Tyo=r(BIe," (ConvBERT model)"),BIe.forEach(t),Myo=i(x),u_=n(x,"LI",{});var IIe=s(u_);zue=n(IIe,"STRONG",{});var i7t=s(zue);Eyo=r(i7t,"convnext"),i7t.forEach(t),Cyo=r(IIe," \u2014 "),XO=n(IIe,"A",{href:!0});var d7t=s(XO);wyo=r(d7t,"ConvNextModel"),d7t.forEach(t),Ayo=r(IIe," (ConvNeXT model)"),IIe.forEach(t),Lyo=i(x),p_=n(x,"LI",{});var NIe=s(p_);Que=n(NIe,"STRONG",{});var c7t=s(Que);yyo=r(c7t,"ctrl"),c7t.forEach(t),xyo=r(NIe," \u2014 "),zO=n(NIe,"A",{href:!0});var m7t=s(zO);$yo=r(m7t,"CTRLModel"),m7t.forEach(t),kyo=r(NIe," (CTRL model)"),NIe.forEach(t),Syo=i(x),__=n(x,"LI",{});var qIe=s(__);Wue=n(qIe,"STRONG",{});var f7t=s(Wue);Ryo=r(f7t,"cvt"),f7t.forEach(t),Pyo=r(qIe," \u2014 "),QO=n(qIe,"A",{href:!0});var g7t=s(QO);Byo=r(g7t,"CvtModel"),g7t.forEach(t),Iyo=r(qIe," (CvT model)"),qIe.forEach(t),Nyo=i(x),b_=n(x,"LI",{});var jIe=s(b_);Uue=n(jIe,"STRONG",{});var h7t=s(Uue);qyo=r(h7t,"data2vec-audio"),h7t.forEach(t),jyo=r(jIe," \u2014 "),WO=n(jIe,"A",{href:!0});var u7t=s(WO);Dyo=r(u7t,"Data2VecAudioModel"),u7t.forEach(t),Gyo=r(jIe," (Data2VecAudio model)"),jIe.forEach(t),Oyo=i(x),v_=n(x,"LI",{});var DIe=s(v_);Hue=n(DIe,"STRONG",{});var p7t=s(Hue);Vyo=r(p7t,"data2vec-text"),p7t.forEach(t),Xyo=r(DIe," \u2014 "),UO=n(DIe,"A",{href:!0});var _7t=s(UO);zyo=r(_7t,"Data2VecTextModel"),_7t.forEach(t),Qyo=r(DIe," (Data2VecText model)"),DIe.forEach(t),Wyo=i(x),F_=n(x,"LI",{});var GIe=s(F_);Jue=n(GIe,"STRONG",{});var b7t=s(Jue);Uyo=r(b7t,"data2vec-vision"),b7t.forEach(t),Hyo=r(GIe," \u2014 "),HO=n(GIe,"A",{href:!0});var v7t=s(HO);Jyo=r(v7t,"Data2VecVisionModel"),v7t.forEach(t),Yyo=r(GIe," (Data2VecVision model)"),GIe.forEach(t),Kyo=i(x),T_=n(x,"LI",{});var OIe=s(T_);Yue=n(OIe,"STRONG",{});var F7t=s(Yue);Zyo=r(F7t,"deberta"),F7t.forEach(t),e8o=r(OIe," \u2014 "),JO=n(OIe,"A",{href:!0});var T7t=s(JO);o8o=r(T7t,"DebertaModel"),T7t.forEach(t),r8o=r(OIe," (DeBERTa model)"),OIe.forEach(t),t8o=i(x),M_=n(x,"LI",{});var VIe=s(M_);Kue=n(VIe,"STRONG",{});var M7t=s(Kue);a8o=r(M7t,"deberta-v2"),M7t.forEach(t),n8o=r(VIe," \u2014 "),YO=n(VIe,"A",{href:!0});var E7t=s(YO);s8o=r(E7t,"DebertaV2Model"),E7t.forEach(t),l8o=r(VIe," (DeBERTa-v2 model)"),VIe.forEach(t),i8o=i(x),E_=n(x,"LI",{});var XIe=s(E_);Zue=n(XIe,"STRONG",{});var C7t=s(Zue);d8o=r(C7t,"decision_transformer"),C7t.forEach(t),c8o=r(XIe," \u2014 "),KO=n(XIe,"A",{href:!0});var w7t=s(KO);m8o=r(w7t,"DecisionTransformerModel"),w7t.forEach(t),f8o=r(XIe," (Decision Transformer model)"),XIe.forEach(t),g8o=i(x),C_=n(x,"LI",{});var zIe=s(C_);epe=n(zIe,"STRONG",{});var A7t=s(epe);h8o=r(A7t,"deformable_detr"),A7t.forEach(t),u8o=r(zIe," \u2014 "),ZO=n(zIe,"A",{href:!0});var L7t=s(ZO);p8o=r(L7t,"DeformableDetrModel"),L7t.forEach(t),_8o=r(zIe," (Deformable DETR model)"),zIe.forEach(t),b8o=i(x),w_=n(x,"LI",{});var QIe=s(w_);ope=n(QIe,"STRONG",{});var y7t=s(ope);v8o=r(y7t,"deit"),y7t.forEach(t),F8o=r(QIe," \u2014 "),eV=n(QIe,"A",{href:!0});var x7t=s(eV);T8o=r(x7t,"DeiTModel"),x7t.forEach(t),M8o=r(QIe," (DeiT model)"),QIe.forEach(t),E8o=i(x),A_=n(x,"LI",{});var WIe=s(A_);rpe=n(WIe,"STRONG",{});var $7t=s(rpe);C8o=r($7t,"detr"),$7t.forEach(t),w8o=r(WIe," \u2014 "),oV=n(WIe,"A",{href:!0});var k7t=s(oV);A8o=r(k7t,"DetrModel"),k7t.forEach(t),L8o=r(WIe," (DETR model)"),WIe.forEach(t),y8o=i(x),L_=n(x,"LI",{});var UIe=s(L_);tpe=n(UIe,"STRONG",{});var S7t=s(tpe);x8o=r(S7t,"distilbert"),S7t.forEach(t),$8o=r(UIe," \u2014 "),rV=n(UIe,"A",{href:!0});var R7t=s(rV);k8o=r(R7t,"DistilBertModel"),R7t.forEach(t),S8o=r(UIe," (DistilBERT model)"),UIe.forEach(t),R8o=i(x),y_=n(x,"LI",{});var HIe=s(y_);ape=n(HIe,"STRONG",{});var P7t=s(ape);P8o=r(P7t,"donut-swin"),P7t.forEach(t),B8o=r(HIe," \u2014 "),tV=n(HIe,"A",{href:!0});var B7t=s(tV);I8o=r(B7t,"DonutSwinModel"),B7t.forEach(t),N8o=r(HIe," (DonutSwin model)"),HIe.forEach(t),q8o=i(x),x_=n(x,"LI",{});var JIe=s(x_);npe=n(JIe,"STRONG",{});var I7t=s(npe);j8o=r(I7t,"dpr"),I7t.forEach(t),D8o=r(JIe," \u2014 "),aV=n(JIe,"A",{href:!0});var N7t=s(aV);G8o=r(N7t,"DPRQuestionEncoder"),N7t.forEach(t),O8o=r(JIe," (DPR model)"),JIe.forEach(t),V8o=i(x),$_=n(x,"LI",{});var YIe=s($_);spe=n(YIe,"STRONG",{});var q7t=s(spe);X8o=r(q7t,"dpt"),q7t.forEach(t),z8o=r(YIe," \u2014 "),nV=n(YIe,"A",{href:!0});var j7t=s(nV);Q8o=r(j7t,"DPTModel"),j7t.forEach(t),W8o=r(YIe," (DPT model)"),YIe.forEach(t),U8o=i(x),k_=n(x,"LI",{});var KIe=s(k_);lpe=n(KIe,"STRONG",{});var D7t=s(lpe);H8o=r(D7t,"electra"),D7t.forEach(t),J8o=r(KIe," \u2014 "),sV=n(KIe,"A",{href:!0});var G7t=s(sV);Y8o=r(G7t,"ElectraModel"),G7t.forEach(t),K8o=r(KIe," (ELECTRA model)"),KIe.forEach(t),Z8o=i(x),S_=n(x,"LI",{});var ZIe=s(S_);ipe=n(ZIe,"STRONG",{});var O7t=s(ipe);e9o=r(O7t,"ernie"),O7t.forEach(t),o9o=r(ZIe," \u2014 "),lV=n(ZIe,"A",{href:!0});var V7t=s(lV);r9o=r(V7t,"ErnieModel"),V7t.forEach(t),t9o=r(ZIe," (ERNIE model)"),ZIe.forEach(t),a9o=i(x),R_=n(x,"LI",{});var eNe=s(R_);dpe=n(eNe,"STRONG",{});var X7t=s(dpe);n9o=r(X7t,"flaubert"),X7t.forEach(t),s9o=r(eNe," \u2014 "),iV=n(eNe,"A",{href:!0});var z7t=s(iV);l9o=r(z7t,"FlaubertModel"),z7t.forEach(t),i9o=r(eNe," (FlauBERT model)"),eNe.forEach(t),d9o=i(x),P_=n(x,"LI",{});var oNe=s(P_);cpe=n(oNe,"STRONG",{});var Q7t=s(cpe);c9o=r(Q7t,"flava"),Q7t.forEach(t),m9o=r(oNe," \u2014 "),dV=n(oNe,"A",{href:!0});var W7t=s(dV);f9o=r(W7t,"FlavaModel"),W7t.forEach(t),g9o=r(oNe," (FLAVA model)"),oNe.forEach(t),h9o=i(x),B_=n(x,"LI",{});var rNe=s(B_);mpe=n(rNe,"STRONG",{});var U7t=s(mpe);u9o=r(U7t,"fnet"),U7t.forEach(t),p9o=r(rNe," \u2014 "),cV=n(rNe,"A",{href:!0});var H7t=s(cV);_9o=r(H7t,"FNetModel"),H7t.forEach(t),b9o=r(rNe," (FNet model)"),rNe.forEach(t),v9o=i(x),I_=n(x,"LI",{});var tNe=s(I_);fpe=n(tNe,"STRONG",{});var J7t=s(fpe);F9o=r(J7t,"fsmt"),J7t.forEach(t),T9o=r(tNe," \u2014 "),mV=n(tNe,"A",{href:!0});var Y7t=s(mV);M9o=r(Y7t,"FSMTModel"),Y7t.forEach(t),E9o=r(tNe," (FairSeq Machine-Translation model)"),tNe.forEach(t),C9o=i(x),_l=n(x,"LI",{});var SB=s(_l);gpe=n(SB,"STRONG",{});var K7t=s(gpe);w9o=r(K7t,"funnel"),K7t.forEach(t),A9o=r(SB," \u2014 "),fV=n(SB,"A",{href:!0});var Z7t=s(fV);L9o=r(Z7t,"FunnelModel"),Z7t.forEach(t),y9o=r(SB," or "),gV=n(SB,"A",{href:!0});var eLt=s(gV);x9o=r(eLt,"FunnelBaseModel"),eLt.forEach(t),$9o=r(SB," (Funnel Transformer model)"),SB.forEach(t),k9o=i(x),N_=n(x,"LI",{});var aNe=s(N_);hpe=n(aNe,"STRONG",{});var oLt=s(hpe);S9o=r(oLt,"glpn"),oLt.forEach(t),R9o=r(aNe," \u2014 "),hV=n(aNe,"A",{href:!0});var rLt=s(hV);P9o=r(rLt,"GLPNModel"),rLt.forEach(t),B9o=r(aNe," (GLPN model)"),aNe.forEach(t),I9o=i(x),q_=n(x,"LI",{});var nNe=s(q_);upe=n(nNe,"STRONG",{});var tLt=s(upe);N9o=r(tLt,"gpt2"),tLt.forEach(t),q9o=r(nNe," \u2014 "),uV=n(nNe,"A",{href:!0});var aLt=s(uV);j9o=r(aLt,"GPT2Model"),aLt.forEach(t),D9o=r(nNe," (OpenAI GPT-2 model)"),nNe.forEach(t),G9o=i(x),j_=n(x,"LI",{});var sNe=s(j_);ppe=n(sNe,"STRONG",{});var nLt=s(ppe);O9o=r(nLt,"gpt_neo"),nLt.forEach(t),V9o=r(sNe," \u2014 "),pV=n(sNe,"A",{href:!0});var sLt=s(pV);X9o=r(sLt,"GPTNeoModel"),sLt.forEach(t),z9o=r(sNe," (GPT Neo model)"),sNe.forEach(t),Q9o=i(x),D_=n(x,"LI",{});var lNe=s(D_);_pe=n(lNe,"STRONG",{});var lLt=s(_pe);W9o=r(lLt,"gpt_neox"),lLt.forEach(t),U9o=r(lNe," \u2014 "),_V=n(lNe,"A",{href:!0});var iLt=s(_V);H9o=r(iLt,"GPTNeoXModel"),iLt.forEach(t),J9o=r(lNe," (GPT NeoX model)"),lNe.forEach(t),Y9o=i(x),G_=n(x,"LI",{});var iNe=s(G_);bpe=n(iNe,"STRONG",{});var dLt=s(bpe);K9o=r(dLt,"gpt_neox_japanese"),dLt.forEach(t),Z9o=r(iNe," \u2014 "),bV=n(iNe,"A",{href:!0});var cLt=s(bV);exo=r(cLt,"GPTNeoXJapaneseModel"),cLt.forEach(t),oxo=r(iNe," (GPT NeoX Japanese model)"),iNe.forEach(t),rxo=i(x),O_=n(x,"LI",{});var dNe=s(O_);vpe=n(dNe,"STRONG",{});var mLt=s(vpe);txo=r(mLt,"gptj"),mLt.forEach(t),axo=r(dNe," \u2014 "),vV=n(dNe,"A",{href:!0});var fLt=s(vV);nxo=r(fLt,"GPTJModel"),fLt.forEach(t),sxo=r(dNe," (GPT-J model)"),dNe.forEach(t),lxo=i(x),V_=n(x,"LI",{});var cNe=s(V_);Fpe=n(cNe,"STRONG",{});var gLt=s(Fpe);ixo=r(gLt,"groupvit"),gLt.forEach(t),dxo=r(cNe," \u2014 "),FV=n(cNe,"A",{href:!0});var hLt=s(FV);cxo=r(hLt,"GroupViTModel"),hLt.forEach(t),mxo=r(cNe," (GroupViT model)"),cNe.forEach(t),fxo=i(x),X_=n(x,"LI",{});var mNe=s(X_);Tpe=n(mNe,"STRONG",{});var uLt=s(Tpe);gxo=r(uLt,"hubert"),uLt.forEach(t),hxo=r(mNe," \u2014 "),TV=n(mNe,"A",{href:!0});var pLt=s(TV);uxo=r(pLt,"HubertModel"),pLt.forEach(t),pxo=r(mNe," (Hubert model)"),mNe.forEach(t),_xo=i(x),z_=n(x,"LI",{});var fNe=s(z_);Mpe=n(fNe,"STRONG",{});var _Lt=s(Mpe);bxo=r(_Lt,"ibert"),_Lt.forEach(t),vxo=r(fNe," \u2014 "),MV=n(fNe,"A",{href:!0});var bLt=s(MV);Fxo=r(bLt,"IBertModel"),bLt.forEach(t),Txo=r(fNe," (I-BERT model)"),fNe.forEach(t),Mxo=i(x),Q_=n(x,"LI",{});var gNe=s(Q_);Epe=n(gNe,"STRONG",{});var vLt=s(Epe);Exo=r(vLt,"imagegpt"),vLt.forEach(t),Cxo=r(gNe," \u2014 "),EV=n(gNe,"A",{href:!0});var FLt=s(EV);wxo=r(FLt,"ImageGPTModel"),FLt.forEach(t),Axo=r(gNe," (ImageGPT model)"),gNe.forEach(t),Lxo=i(x),W_=n(x,"LI",{});var hNe=s(W_);Cpe=n(hNe,"STRONG",{});var TLt=s(Cpe);yxo=r(TLt,"layoutlm"),TLt.forEach(t),xxo=r(hNe," \u2014 "),CV=n(hNe,"A",{href:!0});var MLt=s(CV);$xo=r(MLt,"LayoutLMModel"),MLt.forEach(t),kxo=r(hNe," (LayoutLM model)"),hNe.forEach(t),Sxo=i(x),U_=n(x,"LI",{});var uNe=s(U_);wpe=n(uNe,"STRONG",{});var ELt=s(wpe);Rxo=r(ELt,"layoutlmv2"),ELt.forEach(t),Pxo=r(uNe," \u2014 "),wV=n(uNe,"A",{href:!0});var CLt=s(wV);Bxo=r(CLt,"LayoutLMv2Model"),CLt.forEach(t),Ixo=r(uNe," (LayoutLMv2 model)"),uNe.forEach(t),Nxo=i(x),H_=n(x,"LI",{});var pNe=s(H_);Ape=n(pNe,"STRONG",{});var wLt=s(Ape);qxo=r(wLt,"layoutlmv3"),wLt.forEach(t),jxo=r(pNe," \u2014 "),AV=n(pNe,"A",{href:!0});var ALt=s(AV);Dxo=r(ALt,"LayoutLMv3Model"),ALt.forEach(t),Gxo=r(pNe," (LayoutLMv3 model)"),pNe.forEach(t),Oxo=i(x),J_=n(x,"LI",{});var _Ne=s(J_);Lpe=n(_Ne,"STRONG",{});var LLt=s(Lpe);Vxo=r(LLt,"led"),LLt.forEach(t),Xxo=r(_Ne," \u2014 "),LV=n(_Ne,"A",{href:!0});var yLt=s(LV);zxo=r(yLt,"LEDModel"),yLt.forEach(t),Qxo=r(_Ne," (LED model)"),_Ne.forEach(t),Wxo=i(x),Y_=n(x,"LI",{});var bNe=s(Y_);ype=n(bNe,"STRONG",{});var xLt=s(ype);Uxo=r(xLt,"levit"),xLt.forEach(t),Hxo=r(bNe," \u2014 "),yV=n(bNe,"A",{href:!0});var $Lt=s(yV);Jxo=r($Lt,"LevitModel"),$Lt.forEach(t),Yxo=r(bNe," (LeViT model)"),bNe.forEach(t),Kxo=i(x),K_=n(x,"LI",{});var vNe=s(K_);xpe=n(vNe,"STRONG",{});var kLt=s(xpe);Zxo=r(kLt,"longformer"),kLt.forEach(t),e$o=r(vNe," \u2014 "),xV=n(vNe,"A",{href:!0});var SLt=s(xV);o$o=r(SLt,"LongformerModel"),SLt.forEach(t),r$o=r(vNe," (Longformer model)"),vNe.forEach(t),t$o=i(x),Z_=n(x,"LI",{});var FNe=s(Z_);$pe=n(FNe,"STRONG",{});var RLt=s($pe);a$o=r(RLt,"longt5"),RLt.forEach(t),n$o=r(FNe," \u2014 "),$V=n(FNe,"A",{href:!0});var PLt=s($V);s$o=r(PLt,"LongT5Model"),PLt.forEach(t),l$o=r(FNe," (LongT5 model)"),FNe.forEach(t),i$o=i(x),eb=n(x,"LI",{});var TNe=s(eb);kpe=n(TNe,"STRONG",{});var BLt=s(kpe);d$o=r(BLt,"luke"),BLt.forEach(t),c$o=r(TNe," \u2014 "),kV=n(TNe,"A",{href:!0});var ILt=s(kV);m$o=r(ILt,"LukeModel"),ILt.forEach(t),f$o=r(TNe," (LUKE model)"),TNe.forEach(t),g$o=i(x),ob=n(x,"LI",{});var MNe=s(ob);Spe=n(MNe,"STRONG",{});var NLt=s(Spe);h$o=r(NLt,"lxmert"),NLt.forEach(t),u$o=r(MNe," \u2014 "),SV=n(MNe,"A",{href:!0});var qLt=s(SV);p$o=r(qLt,"LxmertModel"),qLt.forEach(t),_$o=r(MNe," (LXMERT model)"),MNe.forEach(t),b$o=i(x),rb=n(x,"LI",{});var ENe=s(rb);Rpe=n(ENe,"STRONG",{});var jLt=s(Rpe);v$o=r(jLt,"m2m_100"),jLt.forEach(t),F$o=r(ENe," \u2014 "),RV=n(ENe,"A",{href:!0});var DLt=s(RV);T$o=r(DLt,"M2M100Model"),DLt.forEach(t),M$o=r(ENe," (M2M100 model)"),ENe.forEach(t),E$o=i(x),tb=n(x,"LI",{});var CNe=s(tb);Ppe=n(CNe,"STRONG",{});var GLt=s(Ppe);C$o=r(GLt,"marian"),GLt.forEach(t),w$o=r(CNe," \u2014 "),PV=n(CNe,"A",{href:!0});var OLt=s(PV);A$o=r(OLt,"MarianModel"),OLt.forEach(t),L$o=r(CNe," (Marian model)"),CNe.forEach(t),y$o=i(x),ab=n(x,"LI",{});var wNe=s(ab);Bpe=n(wNe,"STRONG",{});var VLt=s(Bpe);x$o=r(VLt,"maskformer"),VLt.forEach(t),$$o=r(wNe," \u2014 "),BV=n(wNe,"A",{href:!0});var XLt=s(BV);k$o=r(XLt,"MaskFormerModel"),XLt.forEach(t),S$o=r(wNe," (MaskFormer model)"),wNe.forEach(t),R$o=i(x),nb=n(x,"LI",{});var ANe=s(nb);Ipe=n(ANe,"STRONG",{});var zLt=s(Ipe);P$o=r(zLt,"mbart"),zLt.forEach(t),B$o=r(ANe," \u2014 "),IV=n(ANe,"A",{href:!0});var QLt=s(IV);I$o=r(QLt,"MBartModel"),QLt.forEach(t),N$o=r(ANe," (mBART model)"),ANe.forEach(t),q$o=i(x),sb=n(x,"LI",{});var LNe=s(sb);Npe=n(LNe,"STRONG",{});var WLt=s(Npe);j$o=r(WLt,"mctct"),WLt.forEach(t),D$o=r(LNe," \u2014 "),NV=n(LNe,"A",{href:!0});var ULt=s(NV);G$o=r(ULt,"MCTCTModel"),ULt.forEach(t),O$o=r(LNe," (M-CTC-T model)"),LNe.forEach(t),V$o=i(x),lb=n(x,"LI",{});var yNe=s(lb);qpe=n(yNe,"STRONG",{});var HLt=s(qpe);X$o=r(HLt,"megatron-bert"),HLt.forEach(t),z$o=r(yNe," \u2014 "),qV=n(yNe,"A",{href:!0});var JLt=s(qV);Q$o=r(JLt,"MegatronBertModel"),JLt.forEach(t),W$o=r(yNe," (Megatron-BERT model)"),yNe.forEach(t),U$o=i(x),ib=n(x,"LI",{});var xNe=s(ib);jpe=n(xNe,"STRONG",{});var YLt=s(jpe);H$o=r(YLt,"mobilebert"),YLt.forEach(t),J$o=r(xNe," \u2014 "),jV=n(xNe,"A",{href:!0});var KLt=s(jV);Y$o=r(KLt,"MobileBertModel"),KLt.forEach(t),K$o=r(xNe," (MobileBERT model)"),xNe.forEach(t),Z$o=i(x),db=n(x,"LI",{});var $Ne=s(db);Dpe=n($Ne,"STRONG",{});var ZLt=s(Dpe);eko=r(ZLt,"mobilevit"),ZLt.forEach(t),oko=r($Ne," \u2014 "),DV=n($Ne,"A",{href:!0});var eyt=s(DV);rko=r(eyt,"MobileViTModel"),eyt.forEach(t),tko=r($Ne," (MobileViT model)"),$Ne.forEach(t),ako=i(x),cb=n(x,"LI",{});var kNe=s(cb);Gpe=n(kNe,"STRONG",{});var oyt=s(Gpe);nko=r(oyt,"mpnet"),oyt.forEach(t),sko=r(kNe," \u2014 "),GV=n(kNe,"A",{href:!0});var ryt=s(GV);lko=r(ryt,"MPNetModel"),ryt.forEach(t),iko=r(kNe," (MPNet model)"),kNe.forEach(t),dko=i(x),mb=n(x,"LI",{});var SNe=s(mb);Ope=n(SNe,"STRONG",{});var tyt=s(Ope);cko=r(tyt,"mt5"),tyt.forEach(t),mko=r(SNe," \u2014 "),OV=n(SNe,"A",{href:!0});var ayt=s(OV);fko=r(ayt,"MT5Model"),ayt.forEach(t),gko=r(SNe," (MT5 model)"),SNe.forEach(t),hko=i(x),fb=n(x,"LI",{});var RNe=s(fb);Vpe=n(RNe,"STRONG",{});var nyt=s(Vpe);uko=r(nyt,"mvp"),nyt.forEach(t),pko=r(RNe," \u2014 "),VV=n(RNe,"A",{href:!0});var syt=s(VV);_ko=r(syt,"MvpModel"),syt.forEach(t),bko=r(RNe," (MVP model)"),RNe.forEach(t),vko=i(x),gb=n(x,"LI",{});var PNe=s(gb);Xpe=n(PNe,"STRONG",{});var lyt=s(Xpe);Fko=r(lyt,"nezha"),lyt.forEach(t),Tko=r(PNe," \u2014 "),XV=n(PNe,"A",{href:!0});var iyt=s(XV);Mko=r(iyt,"NezhaModel"),iyt.forEach(t),Eko=r(PNe," (Nezha model)"),PNe.forEach(t),Cko=i(x),hb=n(x,"LI",{});var BNe=s(hb);zpe=n(BNe,"STRONG",{});var dyt=s(zpe);wko=r(dyt,"nllb"),dyt.forEach(t),Ako=r(BNe," \u2014 "),zV=n(BNe,"A",{href:!0});var cyt=s(zV);Lko=r(cyt,"M2M100Model"),cyt.forEach(t),yko=r(BNe," (NLLB model)"),BNe.forEach(t),xko=i(x),ub=n(x,"LI",{});var INe=s(ub);Qpe=n(INe,"STRONG",{});var myt=s(Qpe);$ko=r(myt,"nystromformer"),myt.forEach(t),kko=r(INe," \u2014 "),QV=n(INe,"A",{href:!0});var fyt=s(QV);Sko=r(fyt,"NystromformerModel"),fyt.forEach(t),Rko=r(INe," (Nystr\xF6mformer model)"),INe.forEach(t),Pko=i(x),pb=n(x,"LI",{});var NNe=s(pb);Wpe=n(NNe,"STRONG",{});var gyt=s(Wpe);Bko=r(gyt,"openai-gpt"),gyt.forEach(t),Iko=r(NNe," \u2014 "),WV=n(NNe,"A",{href:!0});var hyt=s(WV);Nko=r(hyt,"OpenAIGPTModel"),hyt.forEach(t),qko=r(NNe," (OpenAI GPT model)"),NNe.forEach(t),jko=i(x),_b=n(x,"LI",{});var qNe=s(_b);Upe=n(qNe,"STRONG",{});var uyt=s(Upe);Dko=r(uyt,"opt"),uyt.forEach(t),Gko=r(qNe," \u2014 "),UV=n(qNe,"A",{href:!0});var pyt=s(UV);Oko=r(pyt,"OPTModel"),pyt.forEach(t),Vko=r(qNe," (OPT model)"),qNe.forEach(t),Xko=i(x),bb=n(x,"LI",{});var jNe=s(bb);Hpe=n(jNe,"STRONG",{});var _yt=s(Hpe);zko=r(_yt,"owlvit"),_yt.forEach(t),Qko=r(jNe," \u2014 "),HV=n(jNe,"A",{href:!0});var byt=s(HV);Wko=r(byt,"OwlViTModel"),byt.forEach(t),Uko=r(jNe," (OWL-ViT model)"),jNe.forEach(t),Hko=i(x),vb=n(x,"LI",{});var DNe=s(vb);Jpe=n(DNe,"STRONG",{});var vyt=s(Jpe);Jko=r(vyt,"pegasus"),vyt.forEach(t),Yko=r(DNe," \u2014 "),JV=n(DNe,"A",{href:!0});var Fyt=s(JV);Kko=r(Fyt,"PegasusModel"),Fyt.forEach(t),Zko=r(DNe," (Pegasus model)"),DNe.forEach(t),eSo=i(x),Fb=n(x,"LI",{});var GNe=s(Fb);Ype=n(GNe,"STRONG",{});var Tyt=s(Ype);oSo=r(Tyt,"pegasus_x"),Tyt.forEach(t),rSo=r(GNe," \u2014 "),YV=n(GNe,"A",{href:!0});var Myt=s(YV);tSo=r(Myt,"PegasusXModel"),Myt.forEach(t),aSo=r(GNe," (PEGASUS-X model)"),GNe.forEach(t),nSo=i(x),Tb=n(x,"LI",{});var ONe=s(Tb);Kpe=n(ONe,"STRONG",{});var Eyt=s(Kpe);sSo=r(Eyt,"perceiver"),Eyt.forEach(t),lSo=r(ONe," \u2014 "),KV=n(ONe,"A",{href:!0});var Cyt=s(KV);iSo=r(Cyt,"PerceiverModel"),Cyt.forEach(t),dSo=r(ONe," (Perceiver model)"),ONe.forEach(t),cSo=i(x),Mb=n(x,"LI",{});var VNe=s(Mb);Zpe=n(VNe,"STRONG",{});var wyt=s(Zpe);mSo=r(wyt,"plbart"),wyt.forEach(t),fSo=r(VNe," \u2014 "),ZV=n(VNe,"A",{href:!0});var Ayt=s(ZV);gSo=r(Ayt,"PLBartModel"),Ayt.forEach(t),hSo=r(VNe," (PLBart model)"),VNe.forEach(t),uSo=i(x),Eb=n(x,"LI",{});var XNe=s(Eb);e_e=n(XNe,"STRONG",{});var Lyt=s(e_e);pSo=r(Lyt,"poolformer"),Lyt.forEach(t),_So=r(XNe," \u2014 "),eX=n(XNe,"A",{href:!0});var yyt=s(eX);bSo=r(yyt,"PoolFormerModel"),yyt.forEach(t),vSo=r(XNe," (PoolFormer model)"),XNe.forEach(t),FSo=i(x),Cb=n(x,"LI",{});var zNe=s(Cb);o_e=n(zNe,"STRONG",{});var xyt=s(o_e);TSo=r(xyt,"prophetnet"),xyt.forEach(t),MSo=r(zNe," \u2014 "),oX=n(zNe,"A",{href:!0});var $yt=s(oX);ESo=r($yt,"ProphetNetModel"),$yt.forEach(t),CSo=r(zNe," (ProphetNet model)"),zNe.forEach(t),wSo=i(x),wb=n(x,"LI",{});var QNe=s(wb);r_e=n(QNe,"STRONG",{});var kyt=s(r_e);ASo=r(kyt,"qdqbert"),kyt.forEach(t),LSo=r(QNe," \u2014 "),rX=n(QNe,"A",{href:!0});var Syt=s(rX);ySo=r(Syt,"QDQBertModel"),Syt.forEach(t),xSo=r(QNe," (QDQBert model)"),QNe.forEach(t),$So=i(x),Ab=n(x,"LI",{});var WNe=s(Ab);t_e=n(WNe,"STRONG",{});var Ryt=s(t_e);kSo=r(Ryt,"reformer"),Ryt.forEach(t),SSo=r(WNe," \u2014 "),tX=n(WNe,"A",{href:!0});var Pyt=s(tX);RSo=r(Pyt,"ReformerModel"),Pyt.forEach(t),PSo=r(WNe," (Reformer model)"),WNe.forEach(t),BSo=i(x),Lb=n(x,"LI",{});var UNe=s(Lb);a_e=n(UNe,"STRONG",{});var Byt=s(a_e);ISo=r(Byt,"regnet"),Byt.forEach(t),NSo=r(UNe," \u2014 "),aX=n(UNe,"A",{href:!0});var Iyt=s(aX);qSo=r(Iyt,"RegNetModel"),Iyt.forEach(t),jSo=r(UNe," (RegNet model)"),UNe.forEach(t),DSo=i(x),yb=n(x,"LI",{});var HNe=s(yb);n_e=n(HNe,"STRONG",{});var Nyt=s(n_e);GSo=r(Nyt,"rembert"),Nyt.forEach(t),OSo=r(HNe," \u2014 "),nX=n(HNe,"A",{href:!0});var qyt=s(nX);VSo=r(qyt,"RemBertModel"),qyt.forEach(t),XSo=r(HNe," (RemBERT model)"),HNe.forEach(t),zSo=i(x),xb=n(x,"LI",{});var JNe=s(xb);s_e=n(JNe,"STRONG",{});var jyt=s(s_e);QSo=r(jyt,"resnet"),jyt.forEach(t),WSo=r(JNe," \u2014 "),sX=n(JNe,"A",{href:!0});var Dyt=s(sX);USo=r(Dyt,"ResNetModel"),Dyt.forEach(t),HSo=r(JNe," (ResNet model)"),JNe.forEach(t),JSo=i(x),$b=n(x,"LI",{});var YNe=s($b);l_e=n(YNe,"STRONG",{});var Gyt=s(l_e);YSo=r(Gyt,"retribert"),Gyt.forEach(t),KSo=r(YNe," \u2014 "),lX=n(YNe,"A",{href:!0});var Oyt=s(lX);ZSo=r(Oyt,"RetriBertModel"),Oyt.forEach(t),eRo=r(YNe," (RetriBERT model)"),YNe.forEach(t),oRo=i(x),kb=n(x,"LI",{});var KNe=s(kb);i_e=n(KNe,"STRONG",{});var Vyt=s(i_e);rRo=r(Vyt,"roberta"),Vyt.forEach(t),tRo=r(KNe," \u2014 "),iX=n(KNe,"A",{href:!0});var Xyt=s(iX);aRo=r(Xyt,"RobertaModel"),Xyt.forEach(t),nRo=r(KNe," (RoBERTa model)"),KNe.forEach(t),sRo=i(x),Sb=n(x,"LI",{});var ZNe=s(Sb);d_e=n(ZNe,"STRONG",{});var zyt=s(d_e);lRo=r(zyt,"roformer"),zyt.forEach(t),iRo=r(ZNe," \u2014 "),dX=n(ZNe,"A",{href:!0});var Qyt=s(dX);dRo=r(Qyt,"RoFormerModel"),Qyt.forEach(t),cRo=r(ZNe," (RoFormer model)"),ZNe.forEach(t),mRo=i(x),Rb=n(x,"LI",{});var eqe=s(Rb);c_e=n(eqe,"STRONG",{});var Wyt=s(c_e);fRo=r(Wyt,"segformer"),Wyt.forEach(t),gRo=r(eqe," \u2014 "),cX=n(eqe,"A",{href:!0});var Uyt=s(cX);hRo=r(Uyt,"SegformerModel"),Uyt.forEach(t),uRo=r(eqe," (SegFormer model)"),eqe.forEach(t),pRo=i(x),Pb=n(x,"LI",{});var oqe=s(Pb);m_e=n(oqe,"STRONG",{});var Hyt=s(m_e);_Ro=r(Hyt,"sew"),Hyt.forEach(t),bRo=r(oqe," \u2014 "),mX=n(oqe,"A",{href:!0});var Jyt=s(mX);vRo=r(Jyt,"SEWModel"),Jyt.forEach(t),FRo=r(oqe," (SEW model)"),oqe.forEach(t),TRo=i(x),Bb=n(x,"LI",{});var rqe=s(Bb);f_e=n(rqe,"STRONG",{});var Yyt=s(f_e);MRo=r(Yyt,"sew-d"),Yyt.forEach(t),ERo=r(rqe," \u2014 "),fX=n(rqe,"A",{href:!0});var Kyt=s(fX);CRo=r(Kyt,"SEWDModel"),Kyt.forEach(t),wRo=r(rqe," (SEW-D model)"),rqe.forEach(t),ARo=i(x),Ib=n(x,"LI",{});var tqe=s(Ib);g_e=n(tqe,"STRONG",{});var Zyt=s(g_e);LRo=r(Zyt,"speech_to_text"),Zyt.forEach(t),yRo=r(tqe," \u2014 "),gX=n(tqe,"A",{href:!0});var e8t=s(gX);xRo=r(e8t,"Speech2TextModel"),e8t.forEach(t),$Ro=r(tqe," (Speech2Text model)"),tqe.forEach(t),kRo=i(x),Nb=n(x,"LI",{});var aqe=s(Nb);h_e=n(aqe,"STRONG",{});var o8t=s(h_e);SRo=r(o8t,"splinter"),o8t.forEach(t),RRo=r(aqe," \u2014 "),hX=n(aqe,"A",{href:!0});var r8t=s(hX);PRo=r(r8t,"SplinterModel"),r8t.forEach(t),BRo=r(aqe," (Splinter model)"),aqe.forEach(t),IRo=i(x),qb=n(x,"LI",{});var nqe=s(qb);u_e=n(nqe,"STRONG",{});var t8t=s(u_e);NRo=r(t8t,"squeezebert"),t8t.forEach(t),qRo=r(nqe," \u2014 "),uX=n(nqe,"A",{href:!0});var a8t=s(uX);jRo=r(a8t,"SqueezeBertModel"),a8t.forEach(t),DRo=r(nqe," (SqueezeBERT model)"),nqe.forEach(t),GRo=i(x),jb=n(x,"LI",{});var sqe=s(jb);p_e=n(sqe,"STRONG",{});var n8t=s(p_e);ORo=r(n8t,"swin"),n8t.forEach(t),VRo=r(sqe," \u2014 "),pX=n(sqe,"A",{href:!0});var s8t=s(pX);XRo=r(s8t,"SwinModel"),s8t.forEach(t),zRo=r(sqe," (Swin Transformer model)"),sqe.forEach(t),QRo=i(x),Db=n(x,"LI",{});var lqe=s(Db);__e=n(lqe,"STRONG",{});var l8t=s(__e);WRo=r(l8t,"swinv2"),l8t.forEach(t),URo=r(lqe," \u2014 "),_X=n(lqe,"A",{href:!0});var i8t=s(_X);HRo=r(i8t,"Swinv2Model"),i8t.forEach(t),JRo=r(lqe," (Swin Transformer V2 model)"),lqe.forEach(t),YRo=i(x),Gb=n(x,"LI",{});var iqe=s(Gb);b_e=n(iqe,"STRONG",{});var d8t=s(b_e);KRo=r(d8t,"t5"),d8t.forEach(t),ZRo=r(iqe," \u2014 "),bX=n(iqe,"A",{href:!0});var c8t=s(bX);ePo=r(c8t,"T5Model"),c8t.forEach(t),oPo=r(iqe," (T5 model)"),iqe.forEach(t),rPo=i(x),Ob=n(x,"LI",{});var dqe=s(Ob);v_e=n(dqe,"STRONG",{});var m8t=s(v_e);tPo=r(m8t,"tapas"),m8t.forEach(t),aPo=r(dqe," \u2014 "),vX=n(dqe,"A",{href:!0});var f8t=s(vX);nPo=r(f8t,"TapasModel"),f8t.forEach(t),sPo=r(dqe," (TAPAS model)"),dqe.forEach(t),lPo=i(x),Vb=n(x,"LI",{});var cqe=s(Vb);F_e=n(cqe,"STRONG",{});var g8t=s(F_e);iPo=r(g8t,"trajectory_transformer"),g8t.forEach(t),dPo=r(cqe," \u2014 "),FX=n(cqe,"A",{href:!0});var h8t=s(FX);cPo=r(h8t,"TrajectoryTransformerModel"),h8t.forEach(t),mPo=r(cqe," (Trajectory Transformer model)"),cqe.forEach(t),fPo=i(x),Xb=n(x,"LI",{});var mqe=s(Xb);T_e=n(mqe,"STRONG",{});var u8t=s(T_e);gPo=r(u8t,"transfo-xl"),u8t.forEach(t),hPo=r(mqe," \u2014 "),TX=n(mqe,"A",{href:!0});var p8t=s(TX);uPo=r(p8t,"TransfoXLModel"),p8t.forEach(t),pPo=r(mqe," (Transformer-XL model)"),mqe.forEach(t),_Po=i(x),zb=n(x,"LI",{});var fqe=s(zb);M_e=n(fqe,"STRONG",{});var _8t=s(M_e);bPo=r(_8t,"unispeech"),_8t.forEach(t),vPo=r(fqe," \u2014 "),MX=n(fqe,"A",{href:!0});var b8t=s(MX);FPo=r(b8t,"UniSpeechModel"),b8t.forEach(t),TPo=r(fqe," (UniSpeech model)"),fqe.forEach(t),MPo=i(x),Qb=n(x,"LI",{});var gqe=s(Qb);E_e=n(gqe,"STRONG",{});var v8t=s(E_e);EPo=r(v8t,"unispeech-sat"),v8t.forEach(t),CPo=r(gqe," \u2014 "),EX=n(gqe,"A",{href:!0});var F8t=s(EX);wPo=r(F8t,"UniSpeechSatModel"),F8t.forEach(t),APo=r(gqe," (UniSpeechSat model)"),gqe.forEach(t),LPo=i(x),Wb=n(x,"LI",{});var hqe=s(Wb);C_e=n(hqe,"STRONG",{});var T8t=s(C_e);yPo=r(T8t,"van"),T8t.forEach(t),xPo=r(hqe," \u2014 "),CX=n(hqe,"A",{href:!0});var M8t=s(CX);$Po=r(M8t,"VanModel"),M8t.forEach(t),kPo=r(hqe," (VAN model)"),hqe.forEach(t),SPo=i(x),Ub=n(x,"LI",{});var uqe=s(Ub);w_e=n(uqe,"STRONG",{});var E8t=s(w_e);RPo=r(E8t,"videomae"),E8t.forEach(t),PPo=r(uqe," \u2014 "),wX=n(uqe,"A",{href:!0});var C8t=s(wX);BPo=r(C8t,"VideoMAEModel"),C8t.forEach(t),IPo=r(uqe," (VideoMAE model)"),uqe.forEach(t),NPo=i(x),Hb=n(x,"LI",{});var pqe=s(Hb);A_e=n(pqe,"STRONG",{});var w8t=s(A_e);qPo=r(w8t,"vilt"),w8t.forEach(t),jPo=r(pqe," \u2014 "),AX=n(pqe,"A",{href:!0});var A8t=s(AX);DPo=r(A8t,"ViltModel"),A8t.forEach(t),GPo=r(pqe," (ViLT model)"),pqe.forEach(t),OPo=i(x),Jb=n(x,"LI",{});var _qe=s(Jb);L_e=n(_qe,"STRONG",{});var L8t=s(L_e);VPo=r(L8t,"vision-text-dual-encoder"),L8t.forEach(t),XPo=r(_qe," \u2014 "),LX=n(_qe,"A",{href:!0});var y8t=s(LX);zPo=r(y8t,"VisionTextDualEncoderModel"),y8t.forEach(t),QPo=r(_qe," (VisionTextDualEncoder model)"),_qe.forEach(t),WPo=i(x),Yb=n(x,"LI",{});var bqe=s(Yb);y_e=n(bqe,"STRONG",{});var x8t=s(y_e);UPo=r(x8t,"visual_bert"),x8t.forEach(t),HPo=r(bqe," \u2014 "),yX=n(bqe,"A",{href:!0});var $8t=s(yX);JPo=r($8t,"VisualBertModel"),$8t.forEach(t),YPo=r(bqe," (VisualBERT model)"),bqe.forEach(t),KPo=i(x),Kb=n(x,"LI",{});var vqe=s(Kb);x_e=n(vqe,"STRONG",{});var k8t=s(x_e);ZPo=r(k8t,"vit"),k8t.forEach(t),eBo=r(vqe," \u2014 "),xX=n(vqe,"A",{href:!0});var S8t=s(xX);oBo=r(S8t,"ViTModel"),S8t.forEach(t),rBo=r(vqe," (ViT model)"),vqe.forEach(t),tBo=i(x),Zb=n(x,"LI",{});var Fqe=s(Zb);$_e=n(Fqe,"STRONG",{});var R8t=s($_e);aBo=r(R8t,"vit_mae"),R8t.forEach(t),nBo=r(Fqe," \u2014 "),$X=n(Fqe,"A",{href:!0});var P8t=s($X);sBo=r(P8t,"ViTMAEModel"),P8t.forEach(t),lBo=r(Fqe," (ViTMAE model)"),Fqe.forEach(t),iBo=i(x),e2=n(x,"LI",{});var Tqe=s(e2);k_e=n(Tqe,"STRONG",{});var B8t=s(k_e);dBo=r(B8t,"wav2vec2"),B8t.forEach(t),cBo=r(Tqe," \u2014 "),kX=n(Tqe,"A",{href:!0});var I8t=s(kX);mBo=r(I8t,"Wav2Vec2Model"),I8t.forEach(t),fBo=r(Tqe," (Wav2Vec2 model)"),Tqe.forEach(t),gBo=i(x),o2=n(x,"LI",{});var Mqe=s(o2);S_e=n(Mqe,"STRONG",{});var N8t=s(S_e);hBo=r(N8t,"wav2vec2-conformer"),N8t.forEach(t),uBo=r(Mqe," \u2014 "),SX=n(Mqe,"A",{href:!0});var q8t=s(SX);pBo=r(q8t,"Wav2Vec2ConformerModel"),q8t.forEach(t),_Bo=r(Mqe," (Wav2Vec2-Conformer model)"),Mqe.forEach(t),bBo=i(x),r2=n(x,"LI",{});var Eqe=s(r2);R_e=n(Eqe,"STRONG",{});var j8t=s(R_e);vBo=r(j8t,"wavlm"),j8t.forEach(t),FBo=r(Eqe," \u2014 "),RX=n(Eqe,"A",{href:!0});var D8t=s(RX);TBo=r(D8t,"WavLMModel"),D8t.forEach(t),MBo=r(Eqe," (WavLM model)"),Eqe.forEach(t),EBo=i(x),t2=n(x,"LI",{});var Cqe=s(t2);P_e=n(Cqe,"STRONG",{});var G8t=s(P_e);CBo=r(G8t,"xclip"),G8t.forEach(t),wBo=r(Cqe," \u2014 "),PX=n(Cqe,"A",{href:!0});var O8t=s(PX);ABo=r(O8t,"XCLIPModel"),O8t.forEach(t),LBo=r(Cqe," (X-CLIP model)"),Cqe.forEach(t),yBo=i(x),a2=n(x,"LI",{});var wqe=s(a2);B_e=n(wqe,"STRONG",{});var V8t=s(B_e);xBo=r(V8t,"xglm"),V8t.forEach(t),$Bo=r(wqe," \u2014 "),BX=n(wqe,"A",{href:!0});var X8t=s(BX);kBo=r(X8t,"XGLMModel"),X8t.forEach(t),SBo=r(wqe," (XGLM model)"),wqe.forEach(t),RBo=i(x),n2=n(x,"LI",{});var Aqe=s(n2);I_e=n(Aqe,"STRONG",{});var z8t=s(I_e);PBo=r(z8t,"xlm"),z8t.forEach(t),BBo=r(Aqe," \u2014 "),IX=n(Aqe,"A",{href:!0});var Q8t=s(IX);IBo=r(Q8t,"XLMModel"),Q8t.forEach(t),NBo=r(Aqe," (XLM model)"),Aqe.forEach(t),qBo=i(x),s2=n(x,"LI",{});var Lqe=s(s2);N_e=n(Lqe,"STRONG",{});var W8t=s(N_e);jBo=r(W8t,"xlm-prophetnet"),W8t.forEach(t),DBo=r(Lqe," \u2014 "),NX=n(Lqe,"A",{href:!0});var U8t=s(NX);GBo=r(U8t,"XLMProphetNetModel"),U8t.forEach(t),OBo=r(Lqe," (XLM-ProphetNet model)"),Lqe.forEach(t),VBo=i(x),l2=n(x,"LI",{});var yqe=s(l2);q_e=n(yqe,"STRONG",{});var H8t=s(q_e);XBo=r(H8t,"xlm-roberta"),H8t.forEach(t),zBo=r(yqe," \u2014 "),qX=n(yqe,"A",{href:!0});var J8t=s(qX);QBo=r(J8t,"XLMRobertaModel"),J8t.forEach(t),WBo=r(yqe," (XLM-RoBERTa model)"),yqe.forEach(t),UBo=i(x),i2=n(x,"LI",{});var xqe=s(i2);j_e=n(xqe,"STRONG",{});var Y8t=s(j_e);HBo=r(Y8t,"xlm-roberta-xl"),Y8t.forEach(t),JBo=r(xqe," \u2014 "),jX=n(xqe,"A",{href:!0});var K8t=s(jX);YBo=r(K8t,"XLMRobertaXLModel"),K8t.forEach(t),KBo=r(xqe," (XLM-RoBERTa-XL model)"),xqe.forEach(t),ZBo=i(x),d2=n(x,"LI",{});var $qe=s(d2);D_e=n($qe,"STRONG",{});var Z8t=s(D_e);eIo=r(Z8t,"xlnet"),Z8t.forEach(t),oIo=r($qe," \u2014 "),DX=n($qe,"A",{href:!0});var e9t=s(DX);rIo=r(e9t,"XLNetModel"),e9t.forEach(t),tIo=r($qe," (XLNet model)"),$qe.forEach(t),aIo=i(x),c2=n(x,"LI",{});var kqe=s(c2);G_e=n(kqe,"STRONG",{});var o9t=s(G_e);nIo=r(o9t,"yolos"),o9t.forEach(t),sIo=r(kqe," \u2014 "),GX=n(kqe,"A",{href:!0});var r9t=s(GX);lIo=r(r9t,"YolosModel"),r9t.forEach(t),iIo=r(kqe," (YOLOS model)"),kqe.forEach(t),dIo=i(x),m2=n(x,"LI",{});var Sqe=s(m2);O_e=n(Sqe,"STRONG",{});var t9t=s(O_e);cIo=r(t9t,"yoso"),t9t.forEach(t),mIo=r(Sqe," \u2014 "),OX=n(Sqe,"A",{href:!0});var a9t=s(OX);fIo=r(a9t,"YosoModel"),a9t.forEach(t),gIo=r(Sqe," (YOSO model)"),Sqe.forEach(t),x.forEach(t),hIo=i(Fa),f2=n(Fa,"P",{});var Rqe=s(f2);uIo=r(Rqe,"The model is set in evaluation mode by default using "),V_e=n(Rqe,"CODE",{});var n9t=s(V_e);pIo=r(n9t,"model.eval()"),n9t.forEach(t),_Io=r(Rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(Rqe,"CODE",{});var s9t=s(X_e);bIo=r(s9t,"model.train()"),s9t.forEach(t),Rqe.forEach(t),vIo=i(Fa),T(g2.$$.fragment,Fa),Fa.forEach(t),Al.forEach(t),GKe=i(m),Fd=n(m,"H2",{class:!0});var ooo=s(Fd);h2=n(ooo,"A",{id:!0,class:!0,href:!0});var l9t=s(h2);z_e=n(l9t,"SPAN",{});var i9t=s(z_e);T(hx.$$.fragment,i9t),i9t.forEach(t),l9t.forEach(t),FIo=i(ooo),Q_e=n(ooo,"SPAN",{});var d9t=s(Q_e);TIo=r(d9t,"AutoModelForPreTraining"),d9t.forEach(t),ooo.forEach(t),OKe=i(m),Bo=n(m,"DIV",{class:!0});var Ll=s(Bo);T(ux.$$.fragment,Ll),MIo=i(Ll),Td=n(Ll,"P",{});var Fle=s(Td);EIo=r(Fle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VX=n(Fle,"A",{href:!0});var c9t=s(VX);CIo=r(c9t,"from_pretrained()"),c9t.forEach(t),wIo=r(Fle," class method or the "),XX=n(Fle,"A",{href:!0});var m9t=s(XX);AIo=r(m9t,"from_config()"),m9t.forEach(t),LIo=r(Fle,` class
method.`),Fle.forEach(t),yIo=i(Ll),px=n(Ll,"P",{});var roo=s(px);xIo=r(roo,"This class cannot be instantiated directly using "),W_e=n(roo,"CODE",{});var f9t=s(W_e);$Io=r(f9t,"__init__()"),f9t.forEach(t),kIo=r(roo," (throws an error)."),roo.forEach(t),SIo=i(Ll),bt=n(Ll,"DIV",{class:!0});var Ry=s(bt);T(_x.$$.fragment,Ry),RIo=i(Ry),U_e=n(Ry,"P",{});var g9t=s(U_e);PIo=r(g9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g9t.forEach(t),BIo=i(Ry),Md=n(Ry,"P",{});var Tle=s(Md);IIo=r(Tle,`Note:
Loading a model from its configuration file does `),H_e=n(Tle,"STRONG",{});var h9t=s(H_e);NIo=r(h9t,"not"),h9t.forEach(t),qIo=r(Tle,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(Tle,"A",{href:!0});var u9t=s(zX);jIo=r(u9t,"from_pretrained()"),u9t.forEach(t),DIo=r(Tle," to load the model weights."),Tle.forEach(t),GIo=i(Ry),T(u2.$$.fragment,Ry),Ry.forEach(t),OIo=i(Ll),eo=n(Ll,"DIV",{class:!0});var Ta=s(eo);T(bx.$$.fragment,Ta),VIo=i(Ta),J_e=n(Ta,"P",{});var p9t=s(J_e);XIo=r(p9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p9t.forEach(t),zIo=i(Ta),Ya=n(Ta,"P",{});var Py=s(Ya);QIo=r(Py,"The model class to instantiate is selected based on the "),Y_e=n(Py,"CODE",{});var _9t=s(Y_e);WIo=r(_9t,"model_type"),_9t.forEach(t),UIo=r(Py,` property of the config object (either
passed as an argument or loaded from `),K_e=n(Py,"CODE",{});var b9t=s(K_e);HIo=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),JIo=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(Py,"CODE",{});var v9t=s(Z_e);YIo=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),KIo=r(Py,":"),Py.forEach(t),ZIo=i(Ta),G=n(Ta,"UL",{});var O=s(G);p2=n(O,"LI",{});var Pqe=s(p2);ebe=n(Pqe,"STRONG",{});var F9t=s(ebe);eNo=r(F9t,"albert"),F9t.forEach(t),oNo=r(Pqe," \u2014 "),QX=n(Pqe,"A",{href:!0});var T9t=s(QX);rNo=r(T9t,"AlbertForPreTraining"),T9t.forEach(t),tNo=r(Pqe," (ALBERT model)"),Pqe.forEach(t),aNo=i(O),_2=n(O,"LI",{});var Bqe=s(_2);obe=n(Bqe,"STRONG",{});var M9t=s(obe);nNo=r(M9t,"bart"),M9t.forEach(t),sNo=r(Bqe," \u2014 "),WX=n(Bqe,"A",{href:!0});var E9t=s(WX);lNo=r(E9t,"BartForConditionalGeneration"),E9t.forEach(t),iNo=r(Bqe," (BART model)"),Bqe.forEach(t),dNo=i(O),b2=n(O,"LI",{});var Iqe=s(b2);rbe=n(Iqe,"STRONG",{});var C9t=s(rbe);cNo=r(C9t,"bert"),C9t.forEach(t),mNo=r(Iqe," \u2014 "),UX=n(Iqe,"A",{href:!0});var w9t=s(UX);fNo=r(w9t,"BertForPreTraining"),w9t.forEach(t),gNo=r(Iqe," (BERT model)"),Iqe.forEach(t),hNo=i(O),v2=n(O,"LI",{});var Nqe=s(v2);tbe=n(Nqe,"STRONG",{});var A9t=s(tbe);uNo=r(A9t,"big_bird"),A9t.forEach(t),pNo=r(Nqe," \u2014 "),HX=n(Nqe,"A",{href:!0});var L9t=s(HX);_No=r(L9t,"BigBirdForPreTraining"),L9t.forEach(t),bNo=r(Nqe," (BigBird model)"),Nqe.forEach(t),vNo=i(O),F2=n(O,"LI",{});var qqe=s(F2);abe=n(qqe,"STRONG",{});var y9t=s(abe);FNo=r(y9t,"bloom"),y9t.forEach(t),TNo=r(qqe," \u2014 "),JX=n(qqe,"A",{href:!0});var x9t=s(JX);MNo=r(x9t,"BloomForCausalLM"),x9t.forEach(t),ENo=r(qqe," (BLOOM model)"),qqe.forEach(t),CNo=i(O),T2=n(O,"LI",{});var jqe=s(T2);nbe=n(jqe,"STRONG",{});var $9t=s(nbe);wNo=r($9t,"camembert"),$9t.forEach(t),ANo=r(jqe," \u2014 "),YX=n(jqe,"A",{href:!0});var k9t=s(YX);LNo=r(k9t,"CamembertForMaskedLM"),k9t.forEach(t),yNo=r(jqe," (CamemBERT model)"),jqe.forEach(t),xNo=i(O),M2=n(O,"LI",{});var Dqe=s(M2);sbe=n(Dqe,"STRONG",{});var S9t=s(sbe);$No=r(S9t,"ctrl"),S9t.forEach(t),kNo=r(Dqe," \u2014 "),KX=n(Dqe,"A",{href:!0});var R9t=s(KX);SNo=r(R9t,"CTRLLMHeadModel"),R9t.forEach(t),RNo=r(Dqe," (CTRL model)"),Dqe.forEach(t),PNo=i(O),E2=n(O,"LI",{});var Gqe=s(E2);lbe=n(Gqe,"STRONG",{});var P9t=s(lbe);BNo=r(P9t,"data2vec-text"),P9t.forEach(t),INo=r(Gqe," \u2014 "),ZX=n(Gqe,"A",{href:!0});var B9t=s(ZX);NNo=r(B9t,"Data2VecTextForMaskedLM"),B9t.forEach(t),qNo=r(Gqe," (Data2VecText model)"),Gqe.forEach(t),jNo=i(O),C2=n(O,"LI",{});var Oqe=s(C2);ibe=n(Oqe,"STRONG",{});var I9t=s(ibe);DNo=r(I9t,"deberta"),I9t.forEach(t),GNo=r(Oqe," \u2014 "),ez=n(Oqe,"A",{href:!0});var N9t=s(ez);ONo=r(N9t,"DebertaForMaskedLM"),N9t.forEach(t),VNo=r(Oqe," (DeBERTa model)"),Oqe.forEach(t),XNo=i(O),w2=n(O,"LI",{});var Vqe=s(w2);dbe=n(Vqe,"STRONG",{});var q9t=s(dbe);zNo=r(q9t,"deberta-v2"),q9t.forEach(t),QNo=r(Vqe," \u2014 "),oz=n(Vqe,"A",{href:!0});var j9t=s(oz);WNo=r(j9t,"DebertaV2ForMaskedLM"),j9t.forEach(t),UNo=r(Vqe," (DeBERTa-v2 model)"),Vqe.forEach(t),HNo=i(O),A2=n(O,"LI",{});var Xqe=s(A2);cbe=n(Xqe,"STRONG",{});var D9t=s(cbe);JNo=r(D9t,"distilbert"),D9t.forEach(t),YNo=r(Xqe," \u2014 "),rz=n(Xqe,"A",{href:!0});var G9t=s(rz);KNo=r(G9t,"DistilBertForMaskedLM"),G9t.forEach(t),ZNo=r(Xqe," (DistilBERT model)"),Xqe.forEach(t),eqo=i(O),L2=n(O,"LI",{});var zqe=s(L2);mbe=n(zqe,"STRONG",{});var O9t=s(mbe);oqo=r(O9t,"electra"),O9t.forEach(t),rqo=r(zqe," \u2014 "),tz=n(zqe,"A",{href:!0});var V9t=s(tz);tqo=r(V9t,"ElectraForPreTraining"),V9t.forEach(t),aqo=r(zqe," (ELECTRA model)"),zqe.forEach(t),nqo=i(O),y2=n(O,"LI",{});var Qqe=s(y2);fbe=n(Qqe,"STRONG",{});var X9t=s(fbe);sqo=r(X9t,"ernie"),X9t.forEach(t),lqo=r(Qqe," \u2014 "),az=n(Qqe,"A",{href:!0});var z9t=s(az);iqo=r(z9t,"ErnieForPreTraining"),z9t.forEach(t),dqo=r(Qqe," (ERNIE model)"),Qqe.forEach(t),cqo=i(O),x2=n(O,"LI",{});var Wqe=s(x2);gbe=n(Wqe,"STRONG",{});var Q9t=s(gbe);mqo=r(Q9t,"flaubert"),Q9t.forEach(t),fqo=r(Wqe," \u2014 "),nz=n(Wqe,"A",{href:!0});var W9t=s(nz);gqo=r(W9t,"FlaubertWithLMHeadModel"),W9t.forEach(t),hqo=r(Wqe," (FlauBERT model)"),Wqe.forEach(t),uqo=i(O),$2=n(O,"LI",{});var Uqe=s($2);hbe=n(Uqe,"STRONG",{});var U9t=s(hbe);pqo=r(U9t,"flava"),U9t.forEach(t),_qo=r(Uqe," \u2014 "),sz=n(Uqe,"A",{href:!0});var H9t=s(sz);bqo=r(H9t,"FlavaForPreTraining"),H9t.forEach(t),vqo=r(Uqe," (FLAVA model)"),Uqe.forEach(t),Fqo=i(O),k2=n(O,"LI",{});var Hqe=s(k2);ube=n(Hqe,"STRONG",{});var J9t=s(ube);Tqo=r(J9t,"fnet"),J9t.forEach(t),Mqo=r(Hqe," \u2014 "),lz=n(Hqe,"A",{href:!0});var Y9t=s(lz);Eqo=r(Y9t,"FNetForPreTraining"),Y9t.forEach(t),Cqo=r(Hqe," (FNet model)"),Hqe.forEach(t),wqo=i(O),S2=n(O,"LI",{});var Jqe=s(S2);pbe=n(Jqe,"STRONG",{});var K9t=s(pbe);Aqo=r(K9t,"fsmt"),K9t.forEach(t),Lqo=r(Jqe," \u2014 "),iz=n(Jqe,"A",{href:!0});var Z9t=s(iz);yqo=r(Z9t,"FSMTForConditionalGeneration"),Z9t.forEach(t),xqo=r(Jqe," (FairSeq Machine-Translation model)"),Jqe.forEach(t),$qo=i(O),R2=n(O,"LI",{});var Yqe=s(R2);_be=n(Yqe,"STRONG",{});var ext=s(_be);kqo=r(ext,"funnel"),ext.forEach(t),Sqo=r(Yqe," \u2014 "),dz=n(Yqe,"A",{href:!0});var oxt=s(dz);Rqo=r(oxt,"FunnelForPreTraining"),oxt.forEach(t),Pqo=r(Yqe," (Funnel Transformer model)"),Yqe.forEach(t),Bqo=i(O),P2=n(O,"LI",{});var Kqe=s(P2);bbe=n(Kqe,"STRONG",{});var rxt=s(bbe);Iqo=r(rxt,"gpt2"),rxt.forEach(t),Nqo=r(Kqe," \u2014 "),cz=n(Kqe,"A",{href:!0});var txt=s(cz);qqo=r(txt,"GPT2LMHeadModel"),txt.forEach(t),jqo=r(Kqe," (OpenAI GPT-2 model)"),Kqe.forEach(t),Dqo=i(O),B2=n(O,"LI",{});var Zqe=s(B2);vbe=n(Zqe,"STRONG",{});var axt=s(vbe);Gqo=r(axt,"ibert"),axt.forEach(t),Oqo=r(Zqe," \u2014 "),mz=n(Zqe,"A",{href:!0});var nxt=s(mz);Vqo=r(nxt,"IBertForMaskedLM"),nxt.forEach(t),Xqo=r(Zqe," (I-BERT model)"),Zqe.forEach(t),zqo=i(O),I2=n(O,"LI",{});var eje=s(I2);Fbe=n(eje,"STRONG",{});var sxt=s(Fbe);Qqo=r(sxt,"layoutlm"),sxt.forEach(t),Wqo=r(eje," \u2014 "),fz=n(eje,"A",{href:!0});var lxt=s(fz);Uqo=r(lxt,"LayoutLMForMaskedLM"),lxt.forEach(t),Hqo=r(eje," (LayoutLM model)"),eje.forEach(t),Jqo=i(O),N2=n(O,"LI",{});var oje=s(N2);Tbe=n(oje,"STRONG",{});var ixt=s(Tbe);Yqo=r(ixt,"longformer"),ixt.forEach(t),Kqo=r(oje," \u2014 "),gz=n(oje,"A",{href:!0});var dxt=s(gz);Zqo=r(dxt,"LongformerForMaskedLM"),dxt.forEach(t),ejo=r(oje," (Longformer model)"),oje.forEach(t),ojo=i(O),q2=n(O,"LI",{});var rje=s(q2);Mbe=n(rje,"STRONG",{});var cxt=s(Mbe);rjo=r(cxt,"luke"),cxt.forEach(t),tjo=r(rje," \u2014 "),hz=n(rje,"A",{href:!0});var mxt=s(hz);ajo=r(mxt,"LukeForMaskedLM"),mxt.forEach(t),njo=r(rje," (LUKE model)"),rje.forEach(t),sjo=i(O),j2=n(O,"LI",{});var tje=s(j2);Ebe=n(tje,"STRONG",{});var fxt=s(Ebe);ljo=r(fxt,"lxmert"),fxt.forEach(t),ijo=r(tje," \u2014 "),uz=n(tje,"A",{href:!0});var gxt=s(uz);djo=r(gxt,"LxmertForPreTraining"),gxt.forEach(t),cjo=r(tje," (LXMERT model)"),tje.forEach(t),mjo=i(O),D2=n(O,"LI",{});var aje=s(D2);Cbe=n(aje,"STRONG",{});var hxt=s(Cbe);fjo=r(hxt,"megatron-bert"),hxt.forEach(t),gjo=r(aje," \u2014 "),pz=n(aje,"A",{href:!0});var uxt=s(pz);hjo=r(uxt,"MegatronBertForPreTraining"),uxt.forEach(t),ujo=r(aje," (Megatron-BERT model)"),aje.forEach(t),pjo=i(O),G2=n(O,"LI",{});var nje=s(G2);wbe=n(nje,"STRONG",{});var pxt=s(wbe);_jo=r(pxt,"mobilebert"),pxt.forEach(t),bjo=r(nje," \u2014 "),_z=n(nje,"A",{href:!0});var _xt=s(_z);vjo=r(_xt,"MobileBertForPreTraining"),_xt.forEach(t),Fjo=r(nje," (MobileBERT model)"),nje.forEach(t),Tjo=i(O),O2=n(O,"LI",{});var sje=s(O2);Abe=n(sje,"STRONG",{});var bxt=s(Abe);Mjo=r(bxt,"mpnet"),bxt.forEach(t),Ejo=r(sje," \u2014 "),bz=n(sje,"A",{href:!0});var vxt=s(bz);Cjo=r(vxt,"MPNetForMaskedLM"),vxt.forEach(t),wjo=r(sje," (MPNet model)"),sje.forEach(t),Ajo=i(O),V2=n(O,"LI",{});var lje=s(V2);Lbe=n(lje,"STRONG",{});var Fxt=s(Lbe);Ljo=r(Fxt,"mvp"),Fxt.forEach(t),yjo=r(lje," \u2014 "),vz=n(lje,"A",{href:!0});var Txt=s(vz);xjo=r(Txt,"MvpForConditionalGeneration"),Txt.forEach(t),$jo=r(lje," (MVP model)"),lje.forEach(t),kjo=i(O),X2=n(O,"LI",{});var ije=s(X2);ybe=n(ije,"STRONG",{});var Mxt=s(ybe);Sjo=r(Mxt,"nezha"),Mxt.forEach(t),Rjo=r(ije," \u2014 "),Fz=n(ije,"A",{href:!0});var Ext=s(Fz);Pjo=r(Ext,"NezhaForPreTraining"),Ext.forEach(t),Bjo=r(ije," (Nezha model)"),ije.forEach(t),Ijo=i(O),z2=n(O,"LI",{});var dje=s(z2);xbe=n(dje,"STRONG",{});var Cxt=s(xbe);Njo=r(Cxt,"openai-gpt"),Cxt.forEach(t),qjo=r(dje," \u2014 "),Tz=n(dje,"A",{href:!0});var wxt=s(Tz);jjo=r(wxt,"OpenAIGPTLMHeadModel"),wxt.forEach(t),Djo=r(dje," (OpenAI GPT model)"),dje.forEach(t),Gjo=i(O),Q2=n(O,"LI",{});var cje=s(Q2);$be=n(cje,"STRONG",{});var Axt=s($be);Ojo=r(Axt,"retribert"),Axt.forEach(t),Vjo=r(cje," \u2014 "),Mz=n(cje,"A",{href:!0});var Lxt=s(Mz);Xjo=r(Lxt,"RetriBertModel"),Lxt.forEach(t),zjo=r(cje," (RetriBERT model)"),cje.forEach(t),Qjo=i(O),W2=n(O,"LI",{});var mje=s(W2);kbe=n(mje,"STRONG",{});var yxt=s(kbe);Wjo=r(yxt,"roberta"),yxt.forEach(t),Ujo=r(mje," \u2014 "),Ez=n(mje,"A",{href:!0});var xxt=s(Ez);Hjo=r(xxt,"RobertaForMaskedLM"),xxt.forEach(t),Jjo=r(mje," (RoBERTa model)"),mje.forEach(t),Yjo=i(O),U2=n(O,"LI",{});var fje=s(U2);Sbe=n(fje,"STRONG",{});var $xt=s(Sbe);Kjo=r($xt,"splinter"),$xt.forEach(t),Zjo=r(fje," \u2014 "),Cz=n(fje,"A",{href:!0});var kxt=s(Cz);eDo=r(kxt,"SplinterForPreTraining"),kxt.forEach(t),oDo=r(fje," (Splinter model)"),fje.forEach(t),rDo=i(O),H2=n(O,"LI",{});var gje=s(H2);Rbe=n(gje,"STRONG",{});var Sxt=s(Rbe);tDo=r(Sxt,"squeezebert"),Sxt.forEach(t),aDo=r(gje," \u2014 "),wz=n(gje,"A",{href:!0});var Rxt=s(wz);nDo=r(Rxt,"SqueezeBertForMaskedLM"),Rxt.forEach(t),sDo=r(gje," (SqueezeBERT model)"),gje.forEach(t),lDo=i(O),J2=n(O,"LI",{});var hje=s(J2);Pbe=n(hje,"STRONG",{});var Pxt=s(Pbe);iDo=r(Pxt,"t5"),Pxt.forEach(t),dDo=r(hje," \u2014 "),Az=n(hje,"A",{href:!0});var Bxt=s(Az);cDo=r(Bxt,"T5ForConditionalGeneration"),Bxt.forEach(t),mDo=r(hje," (T5 model)"),hje.forEach(t),fDo=i(O),Y2=n(O,"LI",{});var uje=s(Y2);Bbe=n(uje,"STRONG",{});var Ixt=s(Bbe);gDo=r(Ixt,"tapas"),Ixt.forEach(t),hDo=r(uje," \u2014 "),Lz=n(uje,"A",{href:!0});var Nxt=s(Lz);uDo=r(Nxt,"TapasForMaskedLM"),Nxt.forEach(t),pDo=r(uje," (TAPAS model)"),uje.forEach(t),_Do=i(O),K2=n(O,"LI",{});var pje=s(K2);Ibe=n(pje,"STRONG",{});var qxt=s(Ibe);bDo=r(qxt,"transfo-xl"),qxt.forEach(t),vDo=r(pje," \u2014 "),yz=n(pje,"A",{href:!0});var jxt=s(yz);FDo=r(jxt,"TransfoXLLMHeadModel"),jxt.forEach(t),TDo=r(pje," (Transformer-XL model)"),pje.forEach(t),MDo=i(O),Z2=n(O,"LI",{});var _je=s(Z2);Nbe=n(_je,"STRONG",{});var Dxt=s(Nbe);EDo=r(Dxt,"unispeech"),Dxt.forEach(t),CDo=r(_je," \u2014 "),xz=n(_je,"A",{href:!0});var Gxt=s(xz);wDo=r(Gxt,"UniSpeechForPreTraining"),Gxt.forEach(t),ADo=r(_je," (UniSpeech model)"),_je.forEach(t),LDo=i(O),e1=n(O,"LI",{});var bje=s(e1);qbe=n(bje,"STRONG",{});var Oxt=s(qbe);yDo=r(Oxt,"unispeech-sat"),Oxt.forEach(t),xDo=r(bje," \u2014 "),$z=n(bje,"A",{href:!0});var Vxt=s($z);$Do=r(Vxt,"UniSpeechSatForPreTraining"),Vxt.forEach(t),kDo=r(bje," (UniSpeechSat model)"),bje.forEach(t),SDo=i(O),o1=n(O,"LI",{});var vje=s(o1);jbe=n(vje,"STRONG",{});var Xxt=s(jbe);RDo=r(Xxt,"videomae"),Xxt.forEach(t),PDo=r(vje," \u2014 "),kz=n(vje,"A",{href:!0});var zxt=s(kz);BDo=r(zxt,"VideoMAEForPreTraining"),zxt.forEach(t),IDo=r(vje," (VideoMAE model)"),vje.forEach(t),NDo=i(O),r1=n(O,"LI",{});var Fje=s(r1);Dbe=n(Fje,"STRONG",{});var Qxt=s(Dbe);qDo=r(Qxt,"visual_bert"),Qxt.forEach(t),jDo=r(Fje," \u2014 "),Sz=n(Fje,"A",{href:!0});var Wxt=s(Sz);DDo=r(Wxt,"VisualBertForPreTraining"),Wxt.forEach(t),GDo=r(Fje," (VisualBERT model)"),Fje.forEach(t),ODo=i(O),t1=n(O,"LI",{});var Tje=s(t1);Gbe=n(Tje,"STRONG",{});var Uxt=s(Gbe);VDo=r(Uxt,"vit_mae"),Uxt.forEach(t),XDo=r(Tje," \u2014 "),Rz=n(Tje,"A",{href:!0});var Hxt=s(Rz);zDo=r(Hxt,"ViTMAEForPreTraining"),Hxt.forEach(t),QDo=r(Tje," (ViTMAE model)"),Tje.forEach(t),WDo=i(O),a1=n(O,"LI",{});var Mje=s(a1);Obe=n(Mje,"STRONG",{});var Jxt=s(Obe);UDo=r(Jxt,"wav2vec2"),Jxt.forEach(t),HDo=r(Mje," \u2014 "),Pz=n(Mje,"A",{href:!0});var Yxt=s(Pz);JDo=r(Yxt,"Wav2Vec2ForPreTraining"),Yxt.forEach(t),YDo=r(Mje," (Wav2Vec2 model)"),Mje.forEach(t),KDo=i(O),n1=n(O,"LI",{});var Eje=s(n1);Vbe=n(Eje,"STRONG",{});var Kxt=s(Vbe);ZDo=r(Kxt,"wav2vec2-conformer"),Kxt.forEach(t),eGo=r(Eje," \u2014 "),Bz=n(Eje,"A",{href:!0});var Zxt=s(Bz);oGo=r(Zxt,"Wav2Vec2ConformerForPreTraining"),Zxt.forEach(t),rGo=r(Eje," (Wav2Vec2-Conformer model)"),Eje.forEach(t),tGo=i(O),s1=n(O,"LI",{});var Cje=s(s1);Xbe=n(Cje,"STRONG",{});var e$t=s(Xbe);aGo=r(e$t,"xlm"),e$t.forEach(t),nGo=r(Cje," \u2014 "),Iz=n(Cje,"A",{href:!0});var o$t=s(Iz);sGo=r(o$t,"XLMWithLMHeadModel"),o$t.forEach(t),lGo=r(Cje," (XLM model)"),Cje.forEach(t),iGo=i(O),l1=n(O,"LI",{});var wje=s(l1);zbe=n(wje,"STRONG",{});var r$t=s(zbe);dGo=r(r$t,"xlm-roberta"),r$t.forEach(t),cGo=r(wje," \u2014 "),Nz=n(wje,"A",{href:!0});var t$t=s(Nz);mGo=r(t$t,"XLMRobertaForMaskedLM"),t$t.forEach(t),fGo=r(wje," (XLM-RoBERTa model)"),wje.forEach(t),gGo=i(O),i1=n(O,"LI",{});var Aje=s(i1);Qbe=n(Aje,"STRONG",{});var a$t=s(Qbe);hGo=r(a$t,"xlm-roberta-xl"),a$t.forEach(t),uGo=r(Aje," \u2014 "),qz=n(Aje,"A",{href:!0});var n$t=s(qz);pGo=r(n$t,"XLMRobertaXLForMaskedLM"),n$t.forEach(t),_Go=r(Aje," (XLM-RoBERTa-XL model)"),Aje.forEach(t),bGo=i(O),d1=n(O,"LI",{});var Lje=s(d1);Wbe=n(Lje,"STRONG",{});var s$t=s(Wbe);vGo=r(s$t,"xlnet"),s$t.forEach(t),FGo=r(Lje," \u2014 "),jz=n(Lje,"A",{href:!0});var l$t=s(jz);TGo=r(l$t,"XLNetLMHeadModel"),l$t.forEach(t),MGo=r(Lje," (XLNet model)"),Lje.forEach(t),O.forEach(t),EGo=i(Ta),c1=n(Ta,"P",{});var yje=s(c1);CGo=r(yje,"The model is set in evaluation mode by default using "),Ube=n(yje,"CODE",{});var i$t=s(Ube);wGo=r(i$t,"model.eval()"),i$t.forEach(t),AGo=r(yje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hbe=n(yje,"CODE",{});var d$t=s(Hbe);LGo=r(d$t,"model.train()"),d$t.forEach(t),yje.forEach(t),yGo=i(Ta),T(m1.$$.fragment,Ta),Ta.forEach(t),Ll.forEach(t),VKe=i(m),Ed=n(m,"H2",{class:!0});var too=s(Ed);f1=n(too,"A",{id:!0,class:!0,href:!0});var c$t=s(f1);Jbe=n(c$t,"SPAN",{});var m$t=s(Jbe);T(vx.$$.fragment,m$t),m$t.forEach(t),c$t.forEach(t),xGo=i(too),Ybe=n(too,"SPAN",{});var f$t=s(Ybe);$Go=r(f$t,"AutoModelForCausalLM"),f$t.forEach(t),too.forEach(t),XKe=i(m),Io=n(m,"DIV",{class:!0});var yl=s(Io);T(Fx.$$.fragment,yl),kGo=i(yl),Cd=n(yl,"P",{});var Mle=s(Cd);SGo=r(Mle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Dz=n(Mle,"A",{href:!0});var g$t=s(Dz);RGo=r(g$t,"from_pretrained()"),g$t.forEach(t),PGo=r(Mle," class method or the "),Gz=n(Mle,"A",{href:!0});var h$t=s(Gz);BGo=r(h$t,"from_config()"),h$t.forEach(t),IGo=r(Mle,` class
method.`),Mle.forEach(t),NGo=i(yl),Tx=n(yl,"P",{});var aoo=s(Tx);qGo=r(aoo,"This class cannot be instantiated directly using "),Kbe=n(aoo,"CODE",{});var u$t=s(Kbe);jGo=r(u$t,"__init__()"),u$t.forEach(t),DGo=r(aoo," (throws an error)."),aoo.forEach(t),GGo=i(yl),vt=n(yl,"DIV",{class:!0});var By=s(vt);T(Mx.$$.fragment,By),OGo=i(By),Zbe=n(By,"P",{});var p$t=s(Zbe);VGo=r(p$t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p$t.forEach(t),XGo=i(By),wd=n(By,"P",{});var Ele=s(wd);zGo=r(Ele,`Note:
Loading a model from its configuration file does `),e2e=n(Ele,"STRONG",{});var _$t=s(e2e);QGo=r(_$t,"not"),_$t.forEach(t),WGo=r(Ele,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(Ele,"A",{href:!0});var b$t=s(Oz);UGo=r(b$t,"from_pretrained()"),b$t.forEach(t),HGo=r(Ele," to load the model weights."),Ele.forEach(t),JGo=i(By),T(g1.$$.fragment,By),By.forEach(t),YGo=i(yl),oo=n(yl,"DIV",{class:!0});var Ma=s(oo);T(Ex.$$.fragment,Ma),KGo=i(Ma),o2e=n(Ma,"P",{});var v$t=s(o2e);ZGo=r(v$t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),v$t.forEach(t),eOo=i(Ma),Ka=n(Ma,"P",{});var Iy=s(Ka);oOo=r(Iy,"The model class to instantiate is selected based on the "),r2e=n(Iy,"CODE",{});var F$t=s(r2e);rOo=r(F$t,"model_type"),F$t.forEach(t),tOo=r(Iy,` property of the config object (either
passed as an argument or loaded from `),t2e=n(Iy,"CODE",{});var T$t=s(t2e);aOo=r(T$t,"pretrained_model_name_or_path"),T$t.forEach(t),nOo=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(Iy,"CODE",{});var M$t=s(a2e);sOo=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),lOo=r(Iy,":"),Iy.forEach(t),iOo=i(Ma),z=n(Ma,"UL",{});var W=s(z);h1=n(W,"LI",{});var xje=s(h1);n2e=n(xje,"STRONG",{});var E$t=s(n2e);dOo=r(E$t,"bart"),E$t.forEach(t),cOo=r(xje," \u2014 "),Vz=n(xje,"A",{href:!0});var C$t=s(Vz);mOo=r(C$t,"BartForCausalLM"),C$t.forEach(t),fOo=r(xje," (BART model)"),xje.forEach(t),gOo=i(W),u1=n(W,"LI",{});var $je=s(u1);s2e=n($je,"STRONG",{});var w$t=s(s2e);hOo=r(w$t,"bert"),w$t.forEach(t),uOo=r($je," \u2014 "),Xz=n($je,"A",{href:!0});var A$t=s(Xz);pOo=r(A$t,"BertLMHeadModel"),A$t.forEach(t),_Oo=r($je," (BERT model)"),$je.forEach(t),bOo=i(W),p1=n(W,"LI",{});var kje=s(p1);l2e=n(kje,"STRONG",{});var L$t=s(l2e);vOo=r(L$t,"bert-generation"),L$t.forEach(t),FOo=r(kje," \u2014 "),zz=n(kje,"A",{href:!0});var y$t=s(zz);TOo=r(y$t,"BertGenerationDecoder"),y$t.forEach(t),MOo=r(kje," (Bert Generation model)"),kje.forEach(t),EOo=i(W),_1=n(W,"LI",{});var Sje=s(_1);i2e=n(Sje,"STRONG",{});var x$t=s(i2e);COo=r(x$t,"big_bird"),x$t.forEach(t),wOo=r(Sje," \u2014 "),Qz=n(Sje,"A",{href:!0});var $$t=s(Qz);AOo=r($$t,"BigBirdForCausalLM"),$$t.forEach(t),LOo=r(Sje," (BigBird model)"),Sje.forEach(t),yOo=i(W),b1=n(W,"LI",{});var Rje=s(b1);d2e=n(Rje,"STRONG",{});var k$t=s(d2e);xOo=r(k$t,"bigbird_pegasus"),k$t.forEach(t),$Oo=r(Rje," \u2014 "),Wz=n(Rje,"A",{href:!0});var S$t=s(Wz);kOo=r(S$t,"BigBirdPegasusForCausalLM"),S$t.forEach(t),SOo=r(Rje," (BigBird-Pegasus model)"),Rje.forEach(t),ROo=i(W),v1=n(W,"LI",{});var Pje=s(v1);c2e=n(Pje,"STRONG",{});var R$t=s(c2e);POo=r(R$t,"blenderbot"),R$t.forEach(t),BOo=r(Pje," \u2014 "),Uz=n(Pje,"A",{href:!0});var P$t=s(Uz);IOo=r(P$t,"BlenderbotForCausalLM"),P$t.forEach(t),NOo=r(Pje," (Blenderbot model)"),Pje.forEach(t),qOo=i(W),F1=n(W,"LI",{});var Bje=s(F1);m2e=n(Bje,"STRONG",{});var B$t=s(m2e);jOo=r(B$t,"blenderbot-small"),B$t.forEach(t),DOo=r(Bje," \u2014 "),Hz=n(Bje,"A",{href:!0});var I$t=s(Hz);GOo=r(I$t,"BlenderbotSmallForCausalLM"),I$t.forEach(t),OOo=r(Bje," (BlenderbotSmall model)"),Bje.forEach(t),VOo=i(W),T1=n(W,"LI",{});var Ije=s(T1);f2e=n(Ije,"STRONG",{});var N$t=s(f2e);XOo=r(N$t,"bloom"),N$t.forEach(t),zOo=r(Ije," \u2014 "),Jz=n(Ije,"A",{href:!0});var q$t=s(Jz);QOo=r(q$t,"BloomForCausalLM"),q$t.forEach(t),WOo=r(Ije," (BLOOM model)"),Ije.forEach(t),UOo=i(W),M1=n(W,"LI",{});var Nje=s(M1);g2e=n(Nje,"STRONG",{});var j$t=s(g2e);HOo=r(j$t,"camembert"),j$t.forEach(t),JOo=r(Nje," \u2014 "),Yz=n(Nje,"A",{href:!0});var D$t=s(Yz);YOo=r(D$t,"CamembertForCausalLM"),D$t.forEach(t),KOo=r(Nje," (CamemBERT model)"),Nje.forEach(t),ZOo=i(W),E1=n(W,"LI",{});var qje=s(E1);h2e=n(qje,"STRONG",{});var G$t=s(h2e);eVo=r(G$t,"codegen"),G$t.forEach(t),oVo=r(qje," \u2014 "),Kz=n(qje,"A",{href:!0});var O$t=s(Kz);rVo=r(O$t,"CodeGenForCausalLM"),O$t.forEach(t),tVo=r(qje," (CodeGen model)"),qje.forEach(t),aVo=i(W),C1=n(W,"LI",{});var jje=s(C1);u2e=n(jje,"STRONG",{});var V$t=s(u2e);nVo=r(V$t,"ctrl"),V$t.forEach(t),sVo=r(jje," \u2014 "),Zz=n(jje,"A",{href:!0});var X$t=s(Zz);lVo=r(X$t,"CTRLLMHeadModel"),X$t.forEach(t),iVo=r(jje," (CTRL model)"),jje.forEach(t),dVo=i(W),w1=n(W,"LI",{});var Dje=s(w1);p2e=n(Dje,"STRONG",{});var z$t=s(p2e);cVo=r(z$t,"data2vec-text"),z$t.forEach(t),mVo=r(Dje," \u2014 "),eQ=n(Dje,"A",{href:!0});var Q$t=s(eQ);fVo=r(Q$t,"Data2VecTextForCausalLM"),Q$t.forEach(t),gVo=r(Dje," (Data2VecText model)"),Dje.forEach(t),hVo=i(W),A1=n(W,"LI",{});var Gje=s(A1);_2e=n(Gje,"STRONG",{});var W$t=s(_2e);uVo=r(W$t,"electra"),W$t.forEach(t),pVo=r(Gje," \u2014 "),oQ=n(Gje,"A",{href:!0});var U$t=s(oQ);_Vo=r(U$t,"ElectraForCausalLM"),U$t.forEach(t),bVo=r(Gje," (ELECTRA model)"),Gje.forEach(t),vVo=i(W),L1=n(W,"LI",{});var Oje=s(L1);b2e=n(Oje,"STRONG",{});var H$t=s(b2e);FVo=r(H$t,"ernie"),H$t.forEach(t),TVo=r(Oje," \u2014 "),rQ=n(Oje,"A",{href:!0});var J$t=s(rQ);MVo=r(J$t,"ErnieForCausalLM"),J$t.forEach(t),EVo=r(Oje," (ERNIE model)"),Oje.forEach(t),CVo=i(W),y1=n(W,"LI",{});var Vje=s(y1);v2e=n(Vje,"STRONG",{});var Y$t=s(v2e);wVo=r(Y$t,"gpt2"),Y$t.forEach(t),AVo=r(Vje," \u2014 "),tQ=n(Vje,"A",{href:!0});var K$t=s(tQ);LVo=r(K$t,"GPT2LMHeadModel"),K$t.forEach(t),yVo=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),xVo=i(W),x1=n(W,"LI",{});var Xje=s(x1);F2e=n(Xje,"STRONG",{});var Z$t=s(F2e);$Vo=r(Z$t,"gpt_neo"),Z$t.forEach(t),kVo=r(Xje," \u2014 "),aQ=n(Xje,"A",{href:!0});var ekt=s(aQ);SVo=r(ekt,"GPTNeoForCausalLM"),ekt.forEach(t),RVo=r(Xje," (GPT Neo model)"),Xje.forEach(t),PVo=i(W),$1=n(W,"LI",{});var zje=s($1);T2e=n(zje,"STRONG",{});var okt=s(T2e);BVo=r(okt,"gpt_neox"),okt.forEach(t),IVo=r(zje," \u2014 "),nQ=n(zje,"A",{href:!0});var rkt=s(nQ);NVo=r(rkt,"GPTNeoXForCausalLM"),rkt.forEach(t),qVo=r(zje," (GPT NeoX model)"),zje.forEach(t),jVo=i(W),k1=n(W,"LI",{});var Qje=s(k1);M2e=n(Qje,"STRONG",{});var tkt=s(M2e);DVo=r(tkt,"gpt_neox_japanese"),tkt.forEach(t),GVo=r(Qje," \u2014 "),sQ=n(Qje,"A",{href:!0});var akt=s(sQ);OVo=r(akt,"GPTNeoXJapaneseForCausalLM"),akt.forEach(t),VVo=r(Qje," (GPT NeoX Japanese model)"),Qje.forEach(t),XVo=i(W),S1=n(W,"LI",{});var Wje=s(S1);E2e=n(Wje,"STRONG",{});var nkt=s(E2e);zVo=r(nkt,"gptj"),nkt.forEach(t),QVo=r(Wje," \u2014 "),lQ=n(Wje,"A",{href:!0});var skt=s(lQ);WVo=r(skt,"GPTJForCausalLM"),skt.forEach(t),UVo=r(Wje," (GPT-J model)"),Wje.forEach(t),HVo=i(W),R1=n(W,"LI",{});var Uje=s(R1);C2e=n(Uje,"STRONG",{});var lkt=s(C2e);JVo=r(lkt,"marian"),lkt.forEach(t),YVo=r(Uje," \u2014 "),iQ=n(Uje,"A",{href:!0});var ikt=s(iQ);KVo=r(ikt,"MarianForCausalLM"),ikt.forEach(t),ZVo=r(Uje," (Marian model)"),Uje.forEach(t),eXo=i(W),P1=n(W,"LI",{});var Hje=s(P1);w2e=n(Hje,"STRONG",{});var dkt=s(w2e);oXo=r(dkt,"mbart"),dkt.forEach(t),rXo=r(Hje," \u2014 "),dQ=n(Hje,"A",{href:!0});var ckt=s(dQ);tXo=r(ckt,"MBartForCausalLM"),ckt.forEach(t),aXo=r(Hje," (mBART model)"),Hje.forEach(t),nXo=i(W),B1=n(W,"LI",{});var Jje=s(B1);A2e=n(Jje,"STRONG",{});var mkt=s(A2e);sXo=r(mkt,"megatron-bert"),mkt.forEach(t),lXo=r(Jje," \u2014 "),cQ=n(Jje,"A",{href:!0});var fkt=s(cQ);iXo=r(fkt,"MegatronBertForCausalLM"),fkt.forEach(t),dXo=r(Jje," (Megatron-BERT model)"),Jje.forEach(t),cXo=i(W),I1=n(W,"LI",{});var Yje=s(I1);L2e=n(Yje,"STRONG",{});var gkt=s(L2e);mXo=r(gkt,"mvp"),gkt.forEach(t),fXo=r(Yje," \u2014 "),mQ=n(Yje,"A",{href:!0});var hkt=s(mQ);gXo=r(hkt,"MvpForCausalLM"),hkt.forEach(t),hXo=r(Yje," (MVP model)"),Yje.forEach(t),uXo=i(W),N1=n(W,"LI",{});var Kje=s(N1);y2e=n(Kje,"STRONG",{});var ukt=s(y2e);pXo=r(ukt,"openai-gpt"),ukt.forEach(t),_Xo=r(Kje," \u2014 "),fQ=n(Kje,"A",{href:!0});var pkt=s(fQ);bXo=r(pkt,"OpenAIGPTLMHeadModel"),pkt.forEach(t),vXo=r(Kje," (OpenAI GPT model)"),Kje.forEach(t),FXo=i(W),q1=n(W,"LI",{});var Zje=s(q1);x2e=n(Zje,"STRONG",{});var _kt=s(x2e);TXo=r(_kt,"opt"),_kt.forEach(t),MXo=r(Zje," \u2014 "),gQ=n(Zje,"A",{href:!0});var bkt=s(gQ);EXo=r(bkt,"OPTForCausalLM"),bkt.forEach(t),CXo=r(Zje," (OPT model)"),Zje.forEach(t),wXo=i(W),j1=n(W,"LI",{});var eDe=s(j1);$2e=n(eDe,"STRONG",{});var vkt=s($2e);AXo=r(vkt,"pegasus"),vkt.forEach(t),LXo=r(eDe," \u2014 "),hQ=n(eDe,"A",{href:!0});var Fkt=s(hQ);yXo=r(Fkt,"PegasusForCausalLM"),Fkt.forEach(t),xXo=r(eDe," (Pegasus model)"),eDe.forEach(t),$Xo=i(W),D1=n(W,"LI",{});var oDe=s(D1);k2e=n(oDe,"STRONG",{});var Tkt=s(k2e);kXo=r(Tkt,"plbart"),Tkt.forEach(t),SXo=r(oDe," \u2014 "),uQ=n(oDe,"A",{href:!0});var Mkt=s(uQ);RXo=r(Mkt,"PLBartForCausalLM"),Mkt.forEach(t),PXo=r(oDe," (PLBart model)"),oDe.forEach(t),BXo=i(W),G1=n(W,"LI",{});var rDe=s(G1);S2e=n(rDe,"STRONG",{});var Ekt=s(S2e);IXo=r(Ekt,"prophetnet"),Ekt.forEach(t),NXo=r(rDe," \u2014 "),pQ=n(rDe,"A",{href:!0});var Ckt=s(pQ);qXo=r(Ckt,"ProphetNetForCausalLM"),Ckt.forEach(t),jXo=r(rDe," (ProphetNet model)"),rDe.forEach(t),DXo=i(W),O1=n(W,"LI",{});var tDe=s(O1);R2e=n(tDe,"STRONG",{});var wkt=s(R2e);GXo=r(wkt,"qdqbert"),wkt.forEach(t),OXo=r(tDe," \u2014 "),_Q=n(tDe,"A",{href:!0});var Akt=s(_Q);VXo=r(Akt,"QDQBertLMHeadModel"),Akt.forEach(t),XXo=r(tDe," (QDQBert model)"),tDe.forEach(t),zXo=i(W),V1=n(W,"LI",{});var aDe=s(V1);P2e=n(aDe,"STRONG",{});var Lkt=s(P2e);QXo=r(Lkt,"reformer"),Lkt.forEach(t),WXo=r(aDe," \u2014 "),bQ=n(aDe,"A",{href:!0});var ykt=s(bQ);UXo=r(ykt,"ReformerModelWithLMHead"),ykt.forEach(t),HXo=r(aDe," (Reformer model)"),aDe.forEach(t),JXo=i(W),X1=n(W,"LI",{});var nDe=s(X1);B2e=n(nDe,"STRONG",{});var xkt=s(B2e);YXo=r(xkt,"rembert"),xkt.forEach(t),KXo=r(nDe," \u2014 "),vQ=n(nDe,"A",{href:!0});var $kt=s(vQ);ZXo=r($kt,"RemBertForCausalLM"),$kt.forEach(t),ezo=r(nDe," (RemBERT model)"),nDe.forEach(t),ozo=i(W),z1=n(W,"LI",{});var sDe=s(z1);I2e=n(sDe,"STRONG",{});var kkt=s(I2e);rzo=r(kkt,"roberta"),kkt.forEach(t),tzo=r(sDe," \u2014 "),FQ=n(sDe,"A",{href:!0});var Skt=s(FQ);azo=r(Skt,"RobertaForCausalLM"),Skt.forEach(t),nzo=r(sDe," (RoBERTa model)"),sDe.forEach(t),szo=i(W),Q1=n(W,"LI",{});var lDe=s(Q1);N2e=n(lDe,"STRONG",{});var Rkt=s(N2e);lzo=r(Rkt,"roformer"),Rkt.forEach(t),izo=r(lDe," \u2014 "),TQ=n(lDe,"A",{href:!0});var Pkt=s(TQ);dzo=r(Pkt,"RoFormerForCausalLM"),Pkt.forEach(t),czo=r(lDe," (RoFormer model)"),lDe.forEach(t),mzo=i(W),W1=n(W,"LI",{});var iDe=s(W1);q2e=n(iDe,"STRONG",{});var Bkt=s(q2e);fzo=r(Bkt,"speech_to_text_2"),Bkt.forEach(t),gzo=r(iDe," \u2014 "),MQ=n(iDe,"A",{href:!0});var Ikt=s(MQ);hzo=r(Ikt,"Speech2Text2ForCausalLM"),Ikt.forEach(t),uzo=r(iDe," (Speech2Text2 model)"),iDe.forEach(t),pzo=i(W),U1=n(W,"LI",{});var dDe=s(U1);j2e=n(dDe,"STRONG",{});var Nkt=s(j2e);_zo=r(Nkt,"transfo-xl"),Nkt.forEach(t),bzo=r(dDe," \u2014 "),EQ=n(dDe,"A",{href:!0});var qkt=s(EQ);vzo=r(qkt,"TransfoXLLMHeadModel"),qkt.forEach(t),Fzo=r(dDe," (Transformer-XL model)"),dDe.forEach(t),Tzo=i(W),H1=n(W,"LI",{});var cDe=s(H1);D2e=n(cDe,"STRONG",{});var jkt=s(D2e);Mzo=r(jkt,"trocr"),jkt.forEach(t),Ezo=r(cDe," \u2014 "),CQ=n(cDe,"A",{href:!0});var Dkt=s(CQ);Czo=r(Dkt,"TrOCRForCausalLM"),Dkt.forEach(t),wzo=r(cDe," (TrOCR model)"),cDe.forEach(t),Azo=i(W),J1=n(W,"LI",{});var mDe=s(J1);G2e=n(mDe,"STRONG",{});var Gkt=s(G2e);Lzo=r(Gkt,"xglm"),Gkt.forEach(t),yzo=r(mDe," \u2014 "),wQ=n(mDe,"A",{href:!0});var Okt=s(wQ);xzo=r(Okt,"XGLMForCausalLM"),Okt.forEach(t),$zo=r(mDe," (XGLM model)"),mDe.forEach(t),kzo=i(W),Y1=n(W,"LI",{});var fDe=s(Y1);O2e=n(fDe,"STRONG",{});var Vkt=s(O2e);Szo=r(Vkt,"xlm"),Vkt.forEach(t),Rzo=r(fDe," \u2014 "),AQ=n(fDe,"A",{href:!0});var Xkt=s(AQ);Pzo=r(Xkt,"XLMWithLMHeadModel"),Xkt.forEach(t),Bzo=r(fDe," (XLM model)"),fDe.forEach(t),Izo=i(W),K1=n(W,"LI",{});var gDe=s(K1);V2e=n(gDe,"STRONG",{});var zkt=s(V2e);Nzo=r(zkt,"xlm-prophetnet"),zkt.forEach(t),qzo=r(gDe," \u2014 "),LQ=n(gDe,"A",{href:!0});var Qkt=s(LQ);jzo=r(Qkt,"XLMProphetNetForCausalLM"),Qkt.forEach(t),Dzo=r(gDe," (XLM-ProphetNet model)"),gDe.forEach(t),Gzo=i(W),Z1=n(W,"LI",{});var hDe=s(Z1);X2e=n(hDe,"STRONG",{});var Wkt=s(X2e);Ozo=r(Wkt,"xlm-roberta"),Wkt.forEach(t),Vzo=r(hDe," \u2014 "),yQ=n(hDe,"A",{href:!0});var Ukt=s(yQ);Xzo=r(Ukt,"XLMRobertaForCausalLM"),Ukt.forEach(t),zzo=r(hDe," (XLM-RoBERTa model)"),hDe.forEach(t),Qzo=i(W),ev=n(W,"LI",{});var uDe=s(ev);z2e=n(uDe,"STRONG",{});var Hkt=s(z2e);Wzo=r(Hkt,"xlm-roberta-xl"),Hkt.forEach(t),Uzo=r(uDe," \u2014 "),xQ=n(uDe,"A",{href:!0});var Jkt=s(xQ);Hzo=r(Jkt,"XLMRobertaXLForCausalLM"),Jkt.forEach(t),Jzo=r(uDe," (XLM-RoBERTa-XL model)"),uDe.forEach(t),Yzo=i(W),ov=n(W,"LI",{});var pDe=s(ov);Q2e=n(pDe,"STRONG",{});var Ykt=s(Q2e);Kzo=r(Ykt,"xlnet"),Ykt.forEach(t),Zzo=r(pDe," \u2014 "),$Q=n(pDe,"A",{href:!0});var Kkt=s($Q);eQo=r(Kkt,"XLNetLMHeadModel"),Kkt.forEach(t),oQo=r(pDe," (XLNet model)"),pDe.forEach(t),W.forEach(t),rQo=i(Ma),rv=n(Ma,"P",{});var _De=s(rv);tQo=r(_De,"The model is set in evaluation mode by default using "),W2e=n(_De,"CODE",{});var Zkt=s(W2e);aQo=r(Zkt,"model.eval()"),Zkt.forEach(t),nQo=r(_De,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(_De,"CODE",{});var eSt=s(U2e);sQo=r(eSt,"model.train()"),eSt.forEach(t),_De.forEach(t),lQo=i(Ma),T(tv.$$.fragment,Ma),Ma.forEach(t),yl.forEach(t),zKe=i(m),Ad=n(m,"H2",{class:!0});var noo=s(Ad);av=n(noo,"A",{id:!0,class:!0,href:!0});var oSt=s(av);H2e=n(oSt,"SPAN",{});var rSt=s(H2e);T(Cx.$$.fragment,rSt),rSt.forEach(t),oSt.forEach(t),iQo=i(noo),J2e=n(noo,"SPAN",{});var tSt=s(J2e);dQo=r(tSt,"AutoModelForMaskedLM"),tSt.forEach(t),noo.forEach(t),QKe=i(m),No=n(m,"DIV",{class:!0});var xl=s(No);T(wx.$$.fragment,xl),cQo=i(xl),Ld=n(xl,"P",{});var Cle=s(Ld);mQo=r(Cle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=n(Cle,"A",{href:!0});var aSt=s(kQ);fQo=r(aSt,"from_pretrained()"),aSt.forEach(t),gQo=r(Cle," class method or the "),SQ=n(Cle,"A",{href:!0});var nSt=s(SQ);hQo=r(nSt,"from_config()"),nSt.forEach(t),uQo=r(Cle,` class
method.`),Cle.forEach(t),pQo=i(xl),Ax=n(xl,"P",{});var soo=s(Ax);_Qo=r(soo,"This class cannot be instantiated directly using "),Y2e=n(soo,"CODE",{});var sSt=s(Y2e);bQo=r(sSt,"__init__()"),sSt.forEach(t),vQo=r(soo," (throws an error)."),soo.forEach(t),FQo=i(xl),Ft=n(xl,"DIV",{class:!0});var Ny=s(Ft);T(Lx.$$.fragment,Ny),TQo=i(Ny),K2e=n(Ny,"P",{});var lSt=s(K2e);MQo=r(lSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lSt.forEach(t),EQo=i(Ny),yd=n(Ny,"P",{});var wle=s(yd);CQo=r(wle,`Note:
Loading a model from its configuration file does `),Z2e=n(wle,"STRONG",{});var iSt=s(Z2e);wQo=r(iSt,"not"),iSt.forEach(t),AQo=r(wle,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(wle,"A",{href:!0});var dSt=s(RQ);LQo=r(dSt,"from_pretrained()"),dSt.forEach(t),yQo=r(wle," to load the model weights."),wle.forEach(t),xQo=i(Ny),T(nv.$$.fragment,Ny),Ny.forEach(t),$Qo=i(xl),ro=n(xl,"DIV",{class:!0});var Ea=s(ro);T(yx.$$.fragment,Ea),kQo=i(Ea),e1e=n(Ea,"P",{});var cSt=s(e1e);SQo=r(cSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cSt.forEach(t),RQo=i(Ea),Za=n(Ea,"P",{});var qy=s(Za);PQo=r(qy,"The model class to instantiate is selected based on the "),o1e=n(qy,"CODE",{});var mSt=s(o1e);BQo=r(mSt,"model_type"),mSt.forEach(t),IQo=r(qy,` property of the config object (either
passed as an argument or loaded from `),r1e=n(qy,"CODE",{});var fSt=s(r1e);NQo=r(fSt,"pretrained_model_name_or_path"),fSt.forEach(t),qQo=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t1e=n(qy,"CODE",{});var gSt=s(t1e);jQo=r(gSt,"pretrained_model_name_or_path"),gSt.forEach(t),DQo=r(qy,":"),qy.forEach(t),GQo=i(Ea),H=n(Ea,"UL",{});var Y=s(H);sv=n(Y,"LI",{});var bDe=s(sv);a1e=n(bDe,"STRONG",{});var hSt=s(a1e);OQo=r(hSt,"albert"),hSt.forEach(t),VQo=r(bDe," \u2014 "),PQ=n(bDe,"A",{href:!0});var uSt=s(PQ);XQo=r(uSt,"AlbertForMaskedLM"),uSt.forEach(t),zQo=r(bDe," (ALBERT model)"),bDe.forEach(t),QQo=i(Y),lv=n(Y,"LI",{});var vDe=s(lv);n1e=n(vDe,"STRONG",{});var pSt=s(n1e);WQo=r(pSt,"bart"),pSt.forEach(t),UQo=r(vDe," \u2014 "),BQ=n(vDe,"A",{href:!0});var _St=s(BQ);HQo=r(_St,"BartForConditionalGeneration"),_St.forEach(t),JQo=r(vDe," (BART model)"),vDe.forEach(t),YQo=i(Y),iv=n(Y,"LI",{});var FDe=s(iv);s1e=n(FDe,"STRONG",{});var bSt=s(s1e);KQo=r(bSt,"bert"),bSt.forEach(t),ZQo=r(FDe," \u2014 "),IQ=n(FDe,"A",{href:!0});var vSt=s(IQ);eWo=r(vSt,"BertForMaskedLM"),vSt.forEach(t),oWo=r(FDe," (BERT model)"),FDe.forEach(t),rWo=i(Y),dv=n(Y,"LI",{});var TDe=s(dv);l1e=n(TDe,"STRONG",{});var FSt=s(l1e);tWo=r(FSt,"big_bird"),FSt.forEach(t),aWo=r(TDe," \u2014 "),NQ=n(TDe,"A",{href:!0});var TSt=s(NQ);nWo=r(TSt,"BigBirdForMaskedLM"),TSt.forEach(t),sWo=r(TDe," (BigBird model)"),TDe.forEach(t),lWo=i(Y),cv=n(Y,"LI",{});var MDe=s(cv);i1e=n(MDe,"STRONG",{});var MSt=s(i1e);iWo=r(MSt,"camembert"),MSt.forEach(t),dWo=r(MDe," \u2014 "),qQ=n(MDe,"A",{href:!0});var ESt=s(qQ);cWo=r(ESt,"CamembertForMaskedLM"),ESt.forEach(t),mWo=r(MDe," (CamemBERT model)"),MDe.forEach(t),fWo=i(Y),mv=n(Y,"LI",{});var EDe=s(mv);d1e=n(EDe,"STRONG",{});var CSt=s(d1e);gWo=r(CSt,"convbert"),CSt.forEach(t),hWo=r(EDe," \u2014 "),jQ=n(EDe,"A",{href:!0});var wSt=s(jQ);uWo=r(wSt,"ConvBertForMaskedLM"),wSt.forEach(t),pWo=r(EDe," (ConvBERT model)"),EDe.forEach(t),_Wo=i(Y),fv=n(Y,"LI",{});var CDe=s(fv);c1e=n(CDe,"STRONG",{});var ASt=s(c1e);bWo=r(ASt,"data2vec-text"),ASt.forEach(t),vWo=r(CDe," \u2014 "),DQ=n(CDe,"A",{href:!0});var LSt=s(DQ);FWo=r(LSt,"Data2VecTextForMaskedLM"),LSt.forEach(t),TWo=r(CDe," (Data2VecText model)"),CDe.forEach(t),MWo=i(Y),gv=n(Y,"LI",{});var wDe=s(gv);m1e=n(wDe,"STRONG",{});var ySt=s(m1e);EWo=r(ySt,"deberta"),ySt.forEach(t),CWo=r(wDe," \u2014 "),GQ=n(wDe,"A",{href:!0});var xSt=s(GQ);wWo=r(xSt,"DebertaForMaskedLM"),xSt.forEach(t),AWo=r(wDe," (DeBERTa model)"),wDe.forEach(t),LWo=i(Y),hv=n(Y,"LI",{});var ADe=s(hv);f1e=n(ADe,"STRONG",{});var $St=s(f1e);yWo=r($St,"deberta-v2"),$St.forEach(t),xWo=r(ADe," \u2014 "),OQ=n(ADe,"A",{href:!0});var kSt=s(OQ);$Wo=r(kSt,"DebertaV2ForMaskedLM"),kSt.forEach(t),kWo=r(ADe," (DeBERTa-v2 model)"),ADe.forEach(t),SWo=i(Y),uv=n(Y,"LI",{});var LDe=s(uv);g1e=n(LDe,"STRONG",{});var SSt=s(g1e);RWo=r(SSt,"distilbert"),SSt.forEach(t),PWo=r(LDe," \u2014 "),VQ=n(LDe,"A",{href:!0});var RSt=s(VQ);BWo=r(RSt,"DistilBertForMaskedLM"),RSt.forEach(t),IWo=r(LDe," (DistilBERT model)"),LDe.forEach(t),NWo=i(Y),pv=n(Y,"LI",{});var yDe=s(pv);h1e=n(yDe,"STRONG",{});var PSt=s(h1e);qWo=r(PSt,"electra"),PSt.forEach(t),jWo=r(yDe," \u2014 "),XQ=n(yDe,"A",{href:!0});var BSt=s(XQ);DWo=r(BSt,"ElectraForMaskedLM"),BSt.forEach(t),GWo=r(yDe," (ELECTRA model)"),yDe.forEach(t),OWo=i(Y),_v=n(Y,"LI",{});var xDe=s(_v);u1e=n(xDe,"STRONG",{});var ISt=s(u1e);VWo=r(ISt,"ernie"),ISt.forEach(t),XWo=r(xDe," \u2014 "),zQ=n(xDe,"A",{href:!0});var NSt=s(zQ);zWo=r(NSt,"ErnieForMaskedLM"),NSt.forEach(t),QWo=r(xDe," (ERNIE model)"),xDe.forEach(t),WWo=i(Y),bv=n(Y,"LI",{});var $De=s(bv);p1e=n($De,"STRONG",{});var qSt=s(p1e);UWo=r(qSt,"flaubert"),qSt.forEach(t),HWo=r($De," \u2014 "),QQ=n($De,"A",{href:!0});var jSt=s(QQ);JWo=r(jSt,"FlaubertWithLMHeadModel"),jSt.forEach(t),YWo=r($De," (FlauBERT model)"),$De.forEach(t),KWo=i(Y),vv=n(Y,"LI",{});var kDe=s(vv);_1e=n(kDe,"STRONG",{});var DSt=s(_1e);ZWo=r(DSt,"fnet"),DSt.forEach(t),eUo=r(kDe," \u2014 "),WQ=n(kDe,"A",{href:!0});var GSt=s(WQ);oUo=r(GSt,"FNetForMaskedLM"),GSt.forEach(t),rUo=r(kDe," (FNet model)"),kDe.forEach(t),tUo=i(Y),Fv=n(Y,"LI",{});var SDe=s(Fv);b1e=n(SDe,"STRONG",{});var OSt=s(b1e);aUo=r(OSt,"funnel"),OSt.forEach(t),nUo=r(SDe," \u2014 "),UQ=n(SDe,"A",{href:!0});var VSt=s(UQ);sUo=r(VSt,"FunnelForMaskedLM"),VSt.forEach(t),lUo=r(SDe," (Funnel Transformer model)"),SDe.forEach(t),iUo=i(Y),Tv=n(Y,"LI",{});var RDe=s(Tv);v1e=n(RDe,"STRONG",{});var XSt=s(v1e);dUo=r(XSt,"ibert"),XSt.forEach(t),cUo=r(RDe," \u2014 "),HQ=n(RDe,"A",{href:!0});var zSt=s(HQ);mUo=r(zSt,"IBertForMaskedLM"),zSt.forEach(t),fUo=r(RDe," (I-BERT model)"),RDe.forEach(t),gUo=i(Y),Mv=n(Y,"LI",{});var PDe=s(Mv);F1e=n(PDe,"STRONG",{});var QSt=s(F1e);hUo=r(QSt,"layoutlm"),QSt.forEach(t),uUo=r(PDe," \u2014 "),JQ=n(PDe,"A",{href:!0});var WSt=s(JQ);pUo=r(WSt,"LayoutLMForMaskedLM"),WSt.forEach(t),_Uo=r(PDe," (LayoutLM model)"),PDe.forEach(t),bUo=i(Y),Ev=n(Y,"LI",{});var BDe=s(Ev);T1e=n(BDe,"STRONG",{});var USt=s(T1e);vUo=r(USt,"longformer"),USt.forEach(t),FUo=r(BDe," \u2014 "),YQ=n(BDe,"A",{href:!0});var HSt=s(YQ);TUo=r(HSt,"LongformerForMaskedLM"),HSt.forEach(t),MUo=r(BDe," (Longformer model)"),BDe.forEach(t),EUo=i(Y),Cv=n(Y,"LI",{});var IDe=s(Cv);M1e=n(IDe,"STRONG",{});var JSt=s(M1e);CUo=r(JSt,"luke"),JSt.forEach(t),wUo=r(IDe," \u2014 "),KQ=n(IDe,"A",{href:!0});var YSt=s(KQ);AUo=r(YSt,"LukeForMaskedLM"),YSt.forEach(t),LUo=r(IDe," (LUKE model)"),IDe.forEach(t),yUo=i(Y),wv=n(Y,"LI",{});var NDe=s(wv);E1e=n(NDe,"STRONG",{});var KSt=s(E1e);xUo=r(KSt,"mbart"),KSt.forEach(t),$Uo=r(NDe," \u2014 "),ZQ=n(NDe,"A",{href:!0});var ZSt=s(ZQ);kUo=r(ZSt,"MBartForConditionalGeneration"),ZSt.forEach(t),SUo=r(NDe," (mBART model)"),NDe.forEach(t),RUo=i(Y),Av=n(Y,"LI",{});var qDe=s(Av);C1e=n(qDe,"STRONG",{});var eRt=s(C1e);PUo=r(eRt,"megatron-bert"),eRt.forEach(t),BUo=r(qDe," \u2014 "),eW=n(qDe,"A",{href:!0});var oRt=s(eW);IUo=r(oRt,"MegatronBertForMaskedLM"),oRt.forEach(t),NUo=r(qDe," (Megatron-BERT model)"),qDe.forEach(t),qUo=i(Y),Lv=n(Y,"LI",{});var jDe=s(Lv);w1e=n(jDe,"STRONG",{});var rRt=s(w1e);jUo=r(rRt,"mobilebert"),rRt.forEach(t),DUo=r(jDe," \u2014 "),oW=n(jDe,"A",{href:!0});var tRt=s(oW);GUo=r(tRt,"MobileBertForMaskedLM"),tRt.forEach(t),OUo=r(jDe," (MobileBERT model)"),jDe.forEach(t),VUo=i(Y),yv=n(Y,"LI",{});var DDe=s(yv);A1e=n(DDe,"STRONG",{});var aRt=s(A1e);XUo=r(aRt,"mpnet"),aRt.forEach(t),zUo=r(DDe," \u2014 "),rW=n(DDe,"A",{href:!0});var nRt=s(rW);QUo=r(nRt,"MPNetForMaskedLM"),nRt.forEach(t),WUo=r(DDe," (MPNet model)"),DDe.forEach(t),UUo=i(Y),xv=n(Y,"LI",{});var GDe=s(xv);L1e=n(GDe,"STRONG",{});var sRt=s(L1e);HUo=r(sRt,"mvp"),sRt.forEach(t),JUo=r(GDe," \u2014 "),tW=n(GDe,"A",{href:!0});var lRt=s(tW);YUo=r(lRt,"MvpForConditionalGeneration"),lRt.forEach(t),KUo=r(GDe," (MVP model)"),GDe.forEach(t),ZUo=i(Y),$v=n(Y,"LI",{});var ODe=s($v);y1e=n(ODe,"STRONG",{});var iRt=s(y1e);eHo=r(iRt,"nezha"),iRt.forEach(t),oHo=r(ODe," \u2014 "),aW=n(ODe,"A",{href:!0});var dRt=s(aW);rHo=r(dRt,"NezhaForMaskedLM"),dRt.forEach(t),tHo=r(ODe," (Nezha model)"),ODe.forEach(t),aHo=i(Y),kv=n(Y,"LI",{});var VDe=s(kv);x1e=n(VDe,"STRONG",{});var cRt=s(x1e);nHo=r(cRt,"nystromformer"),cRt.forEach(t),sHo=r(VDe," \u2014 "),nW=n(VDe,"A",{href:!0});var mRt=s(nW);lHo=r(mRt,"NystromformerForMaskedLM"),mRt.forEach(t),iHo=r(VDe," (Nystr\xF6mformer model)"),VDe.forEach(t),dHo=i(Y),Sv=n(Y,"LI",{});var XDe=s(Sv);$1e=n(XDe,"STRONG",{});var fRt=s($1e);cHo=r(fRt,"perceiver"),fRt.forEach(t),mHo=r(XDe," \u2014 "),sW=n(XDe,"A",{href:!0});var gRt=s(sW);fHo=r(gRt,"PerceiverForMaskedLM"),gRt.forEach(t),gHo=r(XDe," (Perceiver model)"),XDe.forEach(t),hHo=i(Y),Rv=n(Y,"LI",{});var zDe=s(Rv);k1e=n(zDe,"STRONG",{});var hRt=s(k1e);uHo=r(hRt,"qdqbert"),hRt.forEach(t),pHo=r(zDe," \u2014 "),lW=n(zDe,"A",{href:!0});var uRt=s(lW);_Ho=r(uRt,"QDQBertForMaskedLM"),uRt.forEach(t),bHo=r(zDe," (QDQBert model)"),zDe.forEach(t),vHo=i(Y),Pv=n(Y,"LI",{});var QDe=s(Pv);S1e=n(QDe,"STRONG",{});var pRt=s(S1e);FHo=r(pRt,"reformer"),pRt.forEach(t),THo=r(QDe," \u2014 "),iW=n(QDe,"A",{href:!0});var _Rt=s(iW);MHo=r(_Rt,"ReformerForMaskedLM"),_Rt.forEach(t),EHo=r(QDe," (Reformer model)"),QDe.forEach(t),CHo=i(Y),Bv=n(Y,"LI",{});var WDe=s(Bv);R1e=n(WDe,"STRONG",{});var bRt=s(R1e);wHo=r(bRt,"rembert"),bRt.forEach(t),AHo=r(WDe," \u2014 "),dW=n(WDe,"A",{href:!0});var vRt=s(dW);LHo=r(vRt,"RemBertForMaskedLM"),vRt.forEach(t),yHo=r(WDe," (RemBERT model)"),WDe.forEach(t),xHo=i(Y),Iv=n(Y,"LI",{});var UDe=s(Iv);P1e=n(UDe,"STRONG",{});var FRt=s(P1e);$Ho=r(FRt,"roberta"),FRt.forEach(t),kHo=r(UDe," \u2014 "),cW=n(UDe,"A",{href:!0});var TRt=s(cW);SHo=r(TRt,"RobertaForMaskedLM"),TRt.forEach(t),RHo=r(UDe," (RoBERTa model)"),UDe.forEach(t),PHo=i(Y),Nv=n(Y,"LI",{});var HDe=s(Nv);B1e=n(HDe,"STRONG",{});var MRt=s(B1e);BHo=r(MRt,"roformer"),MRt.forEach(t),IHo=r(HDe," \u2014 "),mW=n(HDe,"A",{href:!0});var ERt=s(mW);NHo=r(ERt,"RoFormerForMaskedLM"),ERt.forEach(t),qHo=r(HDe," (RoFormer model)"),HDe.forEach(t),jHo=i(Y),qv=n(Y,"LI",{});var JDe=s(qv);I1e=n(JDe,"STRONG",{});var CRt=s(I1e);DHo=r(CRt,"squeezebert"),CRt.forEach(t),GHo=r(JDe," \u2014 "),fW=n(JDe,"A",{href:!0});var wRt=s(fW);OHo=r(wRt,"SqueezeBertForMaskedLM"),wRt.forEach(t),VHo=r(JDe," (SqueezeBERT model)"),JDe.forEach(t),XHo=i(Y),jv=n(Y,"LI",{});var YDe=s(jv);N1e=n(YDe,"STRONG",{});var ARt=s(N1e);zHo=r(ARt,"tapas"),ARt.forEach(t),QHo=r(YDe," \u2014 "),gW=n(YDe,"A",{href:!0});var LRt=s(gW);WHo=r(LRt,"TapasForMaskedLM"),LRt.forEach(t),UHo=r(YDe," (TAPAS model)"),YDe.forEach(t),HHo=i(Y),Dv=n(Y,"LI",{});var KDe=s(Dv);q1e=n(KDe,"STRONG",{});var yRt=s(q1e);JHo=r(yRt,"wav2vec2"),yRt.forEach(t),YHo=r(KDe," \u2014 "),j1e=n(KDe,"CODE",{});var xRt=s(j1e);KHo=r(xRt,"Wav2Vec2ForMaskedLM"),xRt.forEach(t),ZHo=r(KDe," (Wav2Vec2 model)"),KDe.forEach(t),eJo=i(Y),Gv=n(Y,"LI",{});var ZDe=s(Gv);D1e=n(ZDe,"STRONG",{});var $Rt=s(D1e);oJo=r($Rt,"xlm"),$Rt.forEach(t),rJo=r(ZDe," \u2014 "),hW=n(ZDe,"A",{href:!0});var kRt=s(hW);tJo=r(kRt,"XLMWithLMHeadModel"),kRt.forEach(t),aJo=r(ZDe," (XLM model)"),ZDe.forEach(t),nJo=i(Y),Ov=n(Y,"LI",{});var eGe=s(Ov);G1e=n(eGe,"STRONG",{});var SRt=s(G1e);sJo=r(SRt,"xlm-roberta"),SRt.forEach(t),lJo=r(eGe," \u2014 "),uW=n(eGe,"A",{href:!0});var RRt=s(uW);iJo=r(RRt,"XLMRobertaForMaskedLM"),RRt.forEach(t),dJo=r(eGe," (XLM-RoBERTa model)"),eGe.forEach(t),cJo=i(Y),Vv=n(Y,"LI",{});var oGe=s(Vv);O1e=n(oGe,"STRONG",{});var PRt=s(O1e);mJo=r(PRt,"xlm-roberta-xl"),PRt.forEach(t),fJo=r(oGe," \u2014 "),pW=n(oGe,"A",{href:!0});var BRt=s(pW);gJo=r(BRt,"XLMRobertaXLForMaskedLM"),BRt.forEach(t),hJo=r(oGe," (XLM-RoBERTa-XL model)"),oGe.forEach(t),uJo=i(Y),Xv=n(Y,"LI",{});var rGe=s(Xv);V1e=n(rGe,"STRONG",{});var IRt=s(V1e);pJo=r(IRt,"yoso"),IRt.forEach(t),_Jo=r(rGe," \u2014 "),_W=n(rGe,"A",{href:!0});var NRt=s(_W);bJo=r(NRt,"YosoForMaskedLM"),NRt.forEach(t),vJo=r(rGe," (YOSO model)"),rGe.forEach(t),Y.forEach(t),FJo=i(Ea),zv=n(Ea,"P",{});var tGe=s(zv);TJo=r(tGe,"The model is set in evaluation mode by default using "),X1e=n(tGe,"CODE",{});var qRt=s(X1e);MJo=r(qRt,"model.eval()"),qRt.forEach(t),EJo=r(tGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(tGe,"CODE",{});var jRt=s(z1e);CJo=r(jRt,"model.train()"),jRt.forEach(t),tGe.forEach(t),wJo=i(Ea),T(Qv.$$.fragment,Ea),Ea.forEach(t),xl.forEach(t),WKe=i(m),xd=n(m,"H2",{class:!0});var loo=s(xd);Wv=n(loo,"A",{id:!0,class:!0,href:!0});var DRt=s(Wv);Q1e=n(DRt,"SPAN",{});var GRt=s(Q1e);T(xx.$$.fragment,GRt),GRt.forEach(t),DRt.forEach(t),AJo=i(loo),W1e=n(loo,"SPAN",{});var ORt=s(W1e);LJo=r(ORt,"AutoModelForSeq2SeqLM"),ORt.forEach(t),loo.forEach(t),UKe=i(m),qo=n(m,"DIV",{class:!0});var $l=s(qo);T($x.$$.fragment,$l),yJo=i($l),$d=n($l,"P",{});var Ale=s($d);xJo=r(Ale,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bW=n(Ale,"A",{href:!0});var VRt=s(bW);$Jo=r(VRt,"from_pretrained()"),VRt.forEach(t),kJo=r(Ale," class method or the "),vW=n(Ale,"A",{href:!0});var XRt=s(vW);SJo=r(XRt,"from_config()"),XRt.forEach(t),RJo=r(Ale,` class
method.`),Ale.forEach(t),PJo=i($l),kx=n($l,"P",{});var ioo=s(kx);BJo=r(ioo,"This class cannot be instantiated directly using "),U1e=n(ioo,"CODE",{});var zRt=s(U1e);IJo=r(zRt,"__init__()"),zRt.forEach(t),NJo=r(ioo," (throws an error)."),ioo.forEach(t),qJo=i($l),Tt=n($l,"DIV",{class:!0});var jy=s(Tt);T(Sx.$$.fragment,jy),jJo=i(jy),H1e=n(jy,"P",{});var QRt=s(H1e);DJo=r(QRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QRt.forEach(t),GJo=i(jy),kd=n(jy,"P",{});var Lle=s(kd);OJo=r(Lle,`Note:
Loading a model from its configuration file does `),J1e=n(Lle,"STRONG",{});var WRt=s(J1e);VJo=r(WRt,"not"),WRt.forEach(t),XJo=r(Lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(Lle,"A",{href:!0});var URt=s(FW);zJo=r(URt,"from_pretrained()"),URt.forEach(t),QJo=r(Lle," to load the model weights."),Lle.forEach(t),WJo=i(jy),T(Uv.$$.fragment,jy),jy.forEach(t),UJo=i($l),to=n($l,"DIV",{class:!0});var Ca=s(to);T(Rx.$$.fragment,Ca),HJo=i(Ca),Y1e=n(Ca,"P",{});var HRt=s(Y1e);JJo=r(HRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HRt.forEach(t),YJo=i(Ca),en=n(Ca,"P",{});var Dy=s(en);KJo=r(Dy,"The model class to instantiate is selected based on the "),K1e=n(Dy,"CODE",{});var JRt=s(K1e);ZJo=r(JRt,"model_type"),JRt.forEach(t),eYo=r(Dy,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(Dy,"CODE",{});var YRt=s(Z1e);oYo=r(YRt,"pretrained_model_name_or_path"),YRt.forEach(t),rYo=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(Dy,"CODE",{});var KRt=s(eve);tYo=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),aYo=r(Dy,":"),Dy.forEach(t),nYo=i(Ca),me=n(Ca,"UL",{});var pe=s(me);Hv=n(pe,"LI",{});var aGe=s(Hv);ove=n(aGe,"STRONG",{});var ZRt=s(ove);sYo=r(ZRt,"bart"),ZRt.forEach(t),lYo=r(aGe," \u2014 "),TW=n(aGe,"A",{href:!0});var ePt=s(TW);iYo=r(ePt,"BartForConditionalGeneration"),ePt.forEach(t),dYo=r(aGe," (BART model)"),aGe.forEach(t),cYo=i(pe),Jv=n(pe,"LI",{});var nGe=s(Jv);rve=n(nGe,"STRONG",{});var oPt=s(rve);mYo=r(oPt,"bigbird_pegasus"),oPt.forEach(t),fYo=r(nGe," \u2014 "),MW=n(nGe,"A",{href:!0});var rPt=s(MW);gYo=r(rPt,"BigBirdPegasusForConditionalGeneration"),rPt.forEach(t),hYo=r(nGe," (BigBird-Pegasus model)"),nGe.forEach(t),uYo=i(pe),Yv=n(pe,"LI",{});var sGe=s(Yv);tve=n(sGe,"STRONG",{});var tPt=s(tve);pYo=r(tPt,"blenderbot"),tPt.forEach(t),_Yo=r(sGe," \u2014 "),EW=n(sGe,"A",{href:!0});var aPt=s(EW);bYo=r(aPt,"BlenderbotForConditionalGeneration"),aPt.forEach(t),vYo=r(sGe," (Blenderbot model)"),sGe.forEach(t),FYo=i(pe),Kv=n(pe,"LI",{});var lGe=s(Kv);ave=n(lGe,"STRONG",{});var nPt=s(ave);TYo=r(nPt,"blenderbot-small"),nPt.forEach(t),MYo=r(lGe," \u2014 "),CW=n(lGe,"A",{href:!0});var sPt=s(CW);EYo=r(sPt,"BlenderbotSmallForConditionalGeneration"),sPt.forEach(t),CYo=r(lGe," (BlenderbotSmall model)"),lGe.forEach(t),wYo=i(pe),Zv=n(pe,"LI",{});var iGe=s(Zv);nve=n(iGe,"STRONG",{});var lPt=s(nve);AYo=r(lPt,"encoder-decoder"),lPt.forEach(t),LYo=r(iGe," \u2014 "),wW=n(iGe,"A",{href:!0});var iPt=s(wW);yYo=r(iPt,"EncoderDecoderModel"),iPt.forEach(t),xYo=r(iGe," (Encoder decoder model)"),iGe.forEach(t),$Yo=i(pe),eF=n(pe,"LI",{});var dGe=s(eF);sve=n(dGe,"STRONG",{});var dPt=s(sve);kYo=r(dPt,"fsmt"),dPt.forEach(t),SYo=r(dGe," \u2014 "),AW=n(dGe,"A",{href:!0});var cPt=s(AW);RYo=r(cPt,"FSMTForConditionalGeneration"),cPt.forEach(t),PYo=r(dGe," (FairSeq Machine-Translation model)"),dGe.forEach(t),BYo=i(pe),oF=n(pe,"LI",{});var cGe=s(oF);lve=n(cGe,"STRONG",{});var mPt=s(lve);IYo=r(mPt,"led"),mPt.forEach(t),NYo=r(cGe," \u2014 "),LW=n(cGe,"A",{href:!0});var fPt=s(LW);qYo=r(fPt,"LEDForConditionalGeneration"),fPt.forEach(t),jYo=r(cGe," (LED model)"),cGe.forEach(t),DYo=i(pe),rF=n(pe,"LI",{});var mGe=s(rF);ive=n(mGe,"STRONG",{});var gPt=s(ive);GYo=r(gPt,"longt5"),gPt.forEach(t),OYo=r(mGe," \u2014 "),yW=n(mGe,"A",{href:!0});var hPt=s(yW);VYo=r(hPt,"LongT5ForConditionalGeneration"),hPt.forEach(t),XYo=r(mGe," (LongT5 model)"),mGe.forEach(t),zYo=i(pe),tF=n(pe,"LI",{});var fGe=s(tF);dve=n(fGe,"STRONG",{});var uPt=s(dve);QYo=r(uPt,"m2m_100"),uPt.forEach(t),WYo=r(fGe," \u2014 "),xW=n(fGe,"A",{href:!0});var pPt=s(xW);UYo=r(pPt,"M2M100ForConditionalGeneration"),pPt.forEach(t),HYo=r(fGe," (M2M100 model)"),fGe.forEach(t),JYo=i(pe),aF=n(pe,"LI",{});var gGe=s(aF);cve=n(gGe,"STRONG",{});var _Pt=s(cve);YYo=r(_Pt,"marian"),_Pt.forEach(t),KYo=r(gGe," \u2014 "),$W=n(gGe,"A",{href:!0});var bPt=s($W);ZYo=r(bPt,"MarianMTModel"),bPt.forEach(t),eKo=r(gGe," (Marian model)"),gGe.forEach(t),oKo=i(pe),nF=n(pe,"LI",{});var hGe=s(nF);mve=n(hGe,"STRONG",{});var vPt=s(mve);rKo=r(vPt,"mbart"),vPt.forEach(t),tKo=r(hGe," \u2014 "),kW=n(hGe,"A",{href:!0});var FPt=s(kW);aKo=r(FPt,"MBartForConditionalGeneration"),FPt.forEach(t),nKo=r(hGe," (mBART model)"),hGe.forEach(t),sKo=i(pe),sF=n(pe,"LI",{});var uGe=s(sF);fve=n(uGe,"STRONG",{});var TPt=s(fve);lKo=r(TPt,"mt5"),TPt.forEach(t),iKo=r(uGe," \u2014 "),SW=n(uGe,"A",{href:!0});var MPt=s(SW);dKo=r(MPt,"MT5ForConditionalGeneration"),MPt.forEach(t),cKo=r(uGe," (MT5 model)"),uGe.forEach(t),mKo=i(pe),lF=n(pe,"LI",{});var pGe=s(lF);gve=n(pGe,"STRONG",{});var EPt=s(gve);fKo=r(EPt,"mvp"),EPt.forEach(t),gKo=r(pGe," \u2014 "),RW=n(pGe,"A",{href:!0});var CPt=s(RW);hKo=r(CPt,"MvpForConditionalGeneration"),CPt.forEach(t),uKo=r(pGe," (MVP model)"),pGe.forEach(t),pKo=i(pe),iF=n(pe,"LI",{});var _Ge=s(iF);hve=n(_Ge,"STRONG",{});var wPt=s(hve);_Ko=r(wPt,"nllb"),wPt.forEach(t),bKo=r(_Ge," \u2014 "),PW=n(_Ge,"A",{href:!0});var APt=s(PW);vKo=r(APt,"M2M100ForConditionalGeneration"),APt.forEach(t),FKo=r(_Ge," (NLLB model)"),_Ge.forEach(t),TKo=i(pe),dF=n(pe,"LI",{});var bGe=s(dF);uve=n(bGe,"STRONG",{});var LPt=s(uve);MKo=r(LPt,"pegasus"),LPt.forEach(t),EKo=r(bGe," \u2014 "),BW=n(bGe,"A",{href:!0});var yPt=s(BW);CKo=r(yPt,"PegasusForConditionalGeneration"),yPt.forEach(t),wKo=r(bGe," (Pegasus model)"),bGe.forEach(t),AKo=i(pe),cF=n(pe,"LI",{});var vGe=s(cF);pve=n(vGe,"STRONG",{});var xPt=s(pve);LKo=r(xPt,"pegasus_x"),xPt.forEach(t),yKo=r(vGe," \u2014 "),IW=n(vGe,"A",{href:!0});var $Pt=s(IW);xKo=r($Pt,"PegasusXForConditionalGeneration"),$Pt.forEach(t),$Ko=r(vGe," (PEGASUS-X model)"),vGe.forEach(t),kKo=i(pe),mF=n(pe,"LI",{});var FGe=s(mF);_ve=n(FGe,"STRONG",{});var kPt=s(_ve);SKo=r(kPt,"plbart"),kPt.forEach(t),RKo=r(FGe," \u2014 "),NW=n(FGe,"A",{href:!0});var SPt=s(NW);PKo=r(SPt,"PLBartForConditionalGeneration"),SPt.forEach(t),BKo=r(FGe," (PLBart model)"),FGe.forEach(t),IKo=i(pe),fF=n(pe,"LI",{});var TGe=s(fF);bve=n(TGe,"STRONG",{});var RPt=s(bve);NKo=r(RPt,"prophetnet"),RPt.forEach(t),qKo=r(TGe," \u2014 "),qW=n(TGe,"A",{href:!0});var PPt=s(qW);jKo=r(PPt,"ProphetNetForConditionalGeneration"),PPt.forEach(t),DKo=r(TGe," (ProphetNet model)"),TGe.forEach(t),GKo=i(pe),gF=n(pe,"LI",{});var MGe=s(gF);vve=n(MGe,"STRONG",{});var BPt=s(vve);OKo=r(BPt,"t5"),BPt.forEach(t),VKo=r(MGe," \u2014 "),jW=n(MGe,"A",{href:!0});var IPt=s(jW);XKo=r(IPt,"T5ForConditionalGeneration"),IPt.forEach(t),zKo=r(MGe," (T5 model)"),MGe.forEach(t),QKo=i(pe),hF=n(pe,"LI",{});var EGe=s(hF);Fve=n(EGe,"STRONG",{});var NPt=s(Fve);WKo=r(NPt,"xlm-prophetnet"),NPt.forEach(t),UKo=r(EGe," \u2014 "),DW=n(EGe,"A",{href:!0});var qPt=s(DW);HKo=r(qPt,"XLMProphetNetForConditionalGeneration"),qPt.forEach(t),JKo=r(EGe," (XLM-ProphetNet model)"),EGe.forEach(t),pe.forEach(t),YKo=i(Ca),uF=n(Ca,"P",{});var CGe=s(uF);KKo=r(CGe,"The model is set in evaluation mode by default using "),Tve=n(CGe,"CODE",{});var jPt=s(Tve);ZKo=r(jPt,"model.eval()"),jPt.forEach(t),eZo=r(CGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mve=n(CGe,"CODE",{});var DPt=s(Mve);oZo=r(DPt,"model.train()"),DPt.forEach(t),CGe.forEach(t),rZo=i(Ca),T(pF.$$.fragment,Ca),Ca.forEach(t),$l.forEach(t),HKe=i(m),Sd=n(m,"H2",{class:!0});var doo=s(Sd);_F=n(doo,"A",{id:!0,class:!0,href:!0});var GPt=s(_F);Eve=n(GPt,"SPAN",{});var OPt=s(Eve);T(Px.$$.fragment,OPt),OPt.forEach(t),GPt.forEach(t),tZo=i(doo),Cve=n(doo,"SPAN",{});var VPt=s(Cve);aZo=r(VPt,"AutoModelForSequenceClassification"),VPt.forEach(t),doo.forEach(t),JKe=i(m),jo=n(m,"DIV",{class:!0});var kl=s(jo);T(Bx.$$.fragment,kl),nZo=i(kl),Rd=n(kl,"P",{});var yle=s(Rd);sZo=r(yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GW=n(yle,"A",{href:!0});var XPt=s(GW);lZo=r(XPt,"from_pretrained()"),XPt.forEach(t),iZo=r(yle," class method or the "),OW=n(yle,"A",{href:!0});var zPt=s(OW);dZo=r(zPt,"from_config()"),zPt.forEach(t),cZo=r(yle,` class
method.`),yle.forEach(t),mZo=i(kl),Ix=n(kl,"P",{});var coo=s(Ix);fZo=r(coo,"This class cannot be instantiated directly using "),wve=n(coo,"CODE",{});var QPt=s(wve);gZo=r(QPt,"__init__()"),QPt.forEach(t),hZo=r(coo," (throws an error)."),coo.forEach(t),uZo=i(kl),Mt=n(kl,"DIV",{class:!0});var Gy=s(Mt);T(Nx.$$.fragment,Gy),pZo=i(Gy),Ave=n(Gy,"P",{});var WPt=s(Ave);_Zo=r(WPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WPt.forEach(t),bZo=i(Gy),Pd=n(Gy,"P",{});var xle=s(Pd);vZo=r(xle,`Note:
Loading a model from its configuration file does `),Lve=n(xle,"STRONG",{});var UPt=s(Lve);FZo=r(UPt,"not"),UPt.forEach(t),TZo=r(xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(xle,"A",{href:!0});var HPt=s(VW);MZo=r(HPt,"from_pretrained()"),HPt.forEach(t),EZo=r(xle," to load the model weights."),xle.forEach(t),CZo=i(Gy),T(bF.$$.fragment,Gy),Gy.forEach(t),wZo=i(kl),ao=n(kl,"DIV",{class:!0});var wa=s(ao);T(qx.$$.fragment,wa),AZo=i(wa),yve=n(wa,"P",{});var JPt=s(yve);LZo=r(JPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),JPt.forEach(t),yZo=i(wa),on=n(wa,"P",{});var Oy=s(on);xZo=r(Oy,"The model class to instantiate is selected based on the "),xve=n(Oy,"CODE",{});var YPt=s(xve);$Zo=r(YPt,"model_type"),YPt.forEach(t),kZo=r(Oy,` property of the config object (either
passed as an argument or loaded from `),$ve=n(Oy,"CODE",{});var KPt=s($ve);SZo=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),RZo=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(Oy,"CODE",{});var ZPt=s(kve);PZo=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),BZo=r(Oy,":"),Oy.forEach(t),IZo=i(wa),q=n(wa,"UL",{});var D=s(q);vF=n(D,"LI",{});var wGe=s(vF);Sve=n(wGe,"STRONG",{});var eBt=s(Sve);NZo=r(eBt,"albert"),eBt.forEach(t),qZo=r(wGe," \u2014 "),XW=n(wGe,"A",{href:!0});var oBt=s(XW);jZo=r(oBt,"AlbertForSequenceClassification"),oBt.forEach(t),DZo=r(wGe," (ALBERT model)"),wGe.forEach(t),GZo=i(D),FF=n(D,"LI",{});var AGe=s(FF);Rve=n(AGe,"STRONG",{});var rBt=s(Rve);OZo=r(rBt,"bart"),rBt.forEach(t),VZo=r(AGe," \u2014 "),zW=n(AGe,"A",{href:!0});var tBt=s(zW);XZo=r(tBt,"BartForSequenceClassification"),tBt.forEach(t),zZo=r(AGe," (BART model)"),AGe.forEach(t),QZo=i(D),TF=n(D,"LI",{});var LGe=s(TF);Pve=n(LGe,"STRONG",{});var aBt=s(Pve);WZo=r(aBt,"bert"),aBt.forEach(t),UZo=r(LGe," \u2014 "),QW=n(LGe,"A",{href:!0});var nBt=s(QW);HZo=r(nBt,"BertForSequenceClassification"),nBt.forEach(t),JZo=r(LGe," (BERT model)"),LGe.forEach(t),YZo=i(D),MF=n(D,"LI",{});var yGe=s(MF);Bve=n(yGe,"STRONG",{});var sBt=s(Bve);KZo=r(sBt,"big_bird"),sBt.forEach(t),ZZo=r(yGe," \u2014 "),WW=n(yGe,"A",{href:!0});var lBt=s(WW);eer=r(lBt,"BigBirdForSequenceClassification"),lBt.forEach(t),oer=r(yGe," (BigBird model)"),yGe.forEach(t),rer=i(D),EF=n(D,"LI",{});var xGe=s(EF);Ive=n(xGe,"STRONG",{});var iBt=s(Ive);ter=r(iBt,"bigbird_pegasus"),iBt.forEach(t),aer=r(xGe," \u2014 "),UW=n(xGe,"A",{href:!0});var dBt=s(UW);ner=r(dBt,"BigBirdPegasusForSequenceClassification"),dBt.forEach(t),ser=r(xGe," (BigBird-Pegasus model)"),xGe.forEach(t),ler=i(D),CF=n(D,"LI",{});var $Ge=s(CF);Nve=n($Ge,"STRONG",{});var cBt=s(Nve);ier=r(cBt,"bloom"),cBt.forEach(t),der=r($Ge," \u2014 "),HW=n($Ge,"A",{href:!0});var mBt=s(HW);cer=r(mBt,"BloomForSequenceClassification"),mBt.forEach(t),mer=r($Ge," (BLOOM model)"),$Ge.forEach(t),fer=i(D),wF=n(D,"LI",{});var kGe=s(wF);qve=n(kGe,"STRONG",{});var fBt=s(qve);ger=r(fBt,"camembert"),fBt.forEach(t),her=r(kGe," \u2014 "),JW=n(kGe,"A",{href:!0});var gBt=s(JW);uer=r(gBt,"CamembertForSequenceClassification"),gBt.forEach(t),per=r(kGe," (CamemBERT model)"),kGe.forEach(t),_er=i(D),AF=n(D,"LI",{});var SGe=s(AF);jve=n(SGe,"STRONG",{});var hBt=s(jve);ber=r(hBt,"canine"),hBt.forEach(t),ver=r(SGe," \u2014 "),YW=n(SGe,"A",{href:!0});var uBt=s(YW);Fer=r(uBt,"CanineForSequenceClassification"),uBt.forEach(t),Ter=r(SGe," (CANINE model)"),SGe.forEach(t),Mer=i(D),LF=n(D,"LI",{});var RGe=s(LF);Dve=n(RGe,"STRONG",{});var pBt=s(Dve);Eer=r(pBt,"convbert"),pBt.forEach(t),Cer=r(RGe," \u2014 "),KW=n(RGe,"A",{href:!0});var _Bt=s(KW);wer=r(_Bt,"ConvBertForSequenceClassification"),_Bt.forEach(t),Aer=r(RGe," (ConvBERT model)"),RGe.forEach(t),Ler=i(D),yF=n(D,"LI",{});var PGe=s(yF);Gve=n(PGe,"STRONG",{});var bBt=s(Gve);yer=r(bBt,"ctrl"),bBt.forEach(t),xer=r(PGe," \u2014 "),ZW=n(PGe,"A",{href:!0});var vBt=s(ZW);$er=r(vBt,"CTRLForSequenceClassification"),vBt.forEach(t),ker=r(PGe," (CTRL model)"),PGe.forEach(t),Ser=i(D),xF=n(D,"LI",{});var BGe=s(xF);Ove=n(BGe,"STRONG",{});var FBt=s(Ove);Rer=r(FBt,"data2vec-text"),FBt.forEach(t),Per=r(BGe," \u2014 "),eU=n(BGe,"A",{href:!0});var TBt=s(eU);Ber=r(TBt,"Data2VecTextForSequenceClassification"),TBt.forEach(t),Ier=r(BGe," (Data2VecText model)"),BGe.forEach(t),Ner=i(D),$F=n(D,"LI",{});var IGe=s($F);Vve=n(IGe,"STRONG",{});var MBt=s(Vve);qer=r(MBt,"deberta"),MBt.forEach(t),jer=r(IGe," \u2014 "),oU=n(IGe,"A",{href:!0});var EBt=s(oU);Der=r(EBt,"DebertaForSequenceClassification"),EBt.forEach(t),Ger=r(IGe," (DeBERTa model)"),IGe.forEach(t),Oer=i(D),kF=n(D,"LI",{});var NGe=s(kF);Xve=n(NGe,"STRONG",{});var CBt=s(Xve);Ver=r(CBt,"deberta-v2"),CBt.forEach(t),Xer=r(NGe," \u2014 "),rU=n(NGe,"A",{href:!0});var wBt=s(rU);zer=r(wBt,"DebertaV2ForSequenceClassification"),wBt.forEach(t),Qer=r(NGe," (DeBERTa-v2 model)"),NGe.forEach(t),Wer=i(D),SF=n(D,"LI",{});var qGe=s(SF);zve=n(qGe,"STRONG",{});var ABt=s(zve);Uer=r(ABt,"distilbert"),ABt.forEach(t),Her=r(qGe," \u2014 "),tU=n(qGe,"A",{href:!0});var LBt=s(tU);Jer=r(LBt,"DistilBertForSequenceClassification"),LBt.forEach(t),Yer=r(qGe," (DistilBERT model)"),qGe.forEach(t),Ker=i(D),RF=n(D,"LI",{});var jGe=s(RF);Qve=n(jGe,"STRONG",{});var yBt=s(Qve);Zer=r(yBt,"electra"),yBt.forEach(t),eor=r(jGe," \u2014 "),aU=n(jGe,"A",{href:!0});var xBt=s(aU);oor=r(xBt,"ElectraForSequenceClassification"),xBt.forEach(t),ror=r(jGe," (ELECTRA model)"),jGe.forEach(t),tor=i(D),PF=n(D,"LI",{});var DGe=s(PF);Wve=n(DGe,"STRONG",{});var $Bt=s(Wve);aor=r($Bt,"ernie"),$Bt.forEach(t),nor=r(DGe," \u2014 "),nU=n(DGe,"A",{href:!0});var kBt=s(nU);sor=r(kBt,"ErnieForSequenceClassification"),kBt.forEach(t),lor=r(DGe," (ERNIE model)"),DGe.forEach(t),ior=i(D),BF=n(D,"LI",{});var GGe=s(BF);Uve=n(GGe,"STRONG",{});var SBt=s(Uve);dor=r(SBt,"flaubert"),SBt.forEach(t),cor=r(GGe," \u2014 "),sU=n(GGe,"A",{href:!0});var RBt=s(sU);mor=r(RBt,"FlaubertForSequenceClassification"),RBt.forEach(t),gor=r(GGe," (FlauBERT model)"),GGe.forEach(t),hor=i(D),IF=n(D,"LI",{});var OGe=s(IF);Hve=n(OGe,"STRONG",{});var PBt=s(Hve);uor=r(PBt,"fnet"),PBt.forEach(t),por=r(OGe," \u2014 "),lU=n(OGe,"A",{href:!0});var BBt=s(lU);_or=r(BBt,"FNetForSequenceClassification"),BBt.forEach(t),bor=r(OGe," (FNet model)"),OGe.forEach(t),vor=i(D),NF=n(D,"LI",{});var VGe=s(NF);Jve=n(VGe,"STRONG",{});var IBt=s(Jve);For=r(IBt,"funnel"),IBt.forEach(t),Tor=r(VGe," \u2014 "),iU=n(VGe,"A",{href:!0});var NBt=s(iU);Mor=r(NBt,"FunnelForSequenceClassification"),NBt.forEach(t),Eor=r(VGe," (Funnel Transformer model)"),VGe.forEach(t),Cor=i(D),qF=n(D,"LI",{});var XGe=s(qF);Yve=n(XGe,"STRONG",{});var qBt=s(Yve);wor=r(qBt,"gpt2"),qBt.forEach(t),Aor=r(XGe," \u2014 "),dU=n(XGe,"A",{href:!0});var jBt=s(dU);Lor=r(jBt,"GPT2ForSequenceClassification"),jBt.forEach(t),yor=r(XGe," (OpenAI GPT-2 model)"),XGe.forEach(t),xor=i(D),jF=n(D,"LI",{});var zGe=s(jF);Kve=n(zGe,"STRONG",{});var DBt=s(Kve);$or=r(DBt,"gpt_neo"),DBt.forEach(t),kor=r(zGe," \u2014 "),cU=n(zGe,"A",{href:!0});var GBt=s(cU);Sor=r(GBt,"GPTNeoForSequenceClassification"),GBt.forEach(t),Ror=r(zGe," (GPT Neo model)"),zGe.forEach(t),Por=i(D),DF=n(D,"LI",{});var QGe=s(DF);Zve=n(QGe,"STRONG",{});var OBt=s(Zve);Bor=r(OBt,"gptj"),OBt.forEach(t),Ior=r(QGe," \u2014 "),mU=n(QGe,"A",{href:!0});var VBt=s(mU);Nor=r(VBt,"GPTJForSequenceClassification"),VBt.forEach(t),qor=r(QGe," (GPT-J model)"),QGe.forEach(t),jor=i(D),GF=n(D,"LI",{});var WGe=s(GF);eFe=n(WGe,"STRONG",{});var XBt=s(eFe);Dor=r(XBt,"ibert"),XBt.forEach(t),Gor=r(WGe," \u2014 "),fU=n(WGe,"A",{href:!0});var zBt=s(fU);Oor=r(zBt,"IBertForSequenceClassification"),zBt.forEach(t),Vor=r(WGe," (I-BERT model)"),WGe.forEach(t),Xor=i(D),OF=n(D,"LI",{});var UGe=s(OF);oFe=n(UGe,"STRONG",{});var QBt=s(oFe);zor=r(QBt,"layoutlm"),QBt.forEach(t),Qor=r(UGe," \u2014 "),gU=n(UGe,"A",{href:!0});var WBt=s(gU);Wor=r(WBt,"LayoutLMForSequenceClassification"),WBt.forEach(t),Uor=r(UGe," (LayoutLM model)"),UGe.forEach(t),Hor=i(D),VF=n(D,"LI",{});var HGe=s(VF);rFe=n(HGe,"STRONG",{});var UBt=s(rFe);Jor=r(UBt,"layoutlmv2"),UBt.forEach(t),Yor=r(HGe," \u2014 "),hU=n(HGe,"A",{href:!0});var HBt=s(hU);Kor=r(HBt,"LayoutLMv2ForSequenceClassification"),HBt.forEach(t),Zor=r(HGe," (LayoutLMv2 model)"),HGe.forEach(t),err=i(D),XF=n(D,"LI",{});var JGe=s(XF);tFe=n(JGe,"STRONG",{});var JBt=s(tFe);orr=r(JBt,"layoutlmv3"),JBt.forEach(t),rrr=r(JGe," \u2014 "),uU=n(JGe,"A",{href:!0});var YBt=s(uU);trr=r(YBt,"LayoutLMv3ForSequenceClassification"),YBt.forEach(t),arr=r(JGe," (LayoutLMv3 model)"),JGe.forEach(t),nrr=i(D),zF=n(D,"LI",{});var YGe=s(zF);aFe=n(YGe,"STRONG",{});var KBt=s(aFe);srr=r(KBt,"led"),KBt.forEach(t),lrr=r(YGe," \u2014 "),pU=n(YGe,"A",{href:!0});var ZBt=s(pU);irr=r(ZBt,"LEDForSequenceClassification"),ZBt.forEach(t),drr=r(YGe," (LED model)"),YGe.forEach(t),crr=i(D),QF=n(D,"LI",{});var KGe=s(QF);nFe=n(KGe,"STRONG",{});var eIt=s(nFe);mrr=r(eIt,"longformer"),eIt.forEach(t),frr=r(KGe," \u2014 "),_U=n(KGe,"A",{href:!0});var oIt=s(_U);grr=r(oIt,"LongformerForSequenceClassification"),oIt.forEach(t),hrr=r(KGe," (Longformer model)"),KGe.forEach(t),urr=i(D),WF=n(D,"LI",{});var ZGe=s(WF);sFe=n(ZGe,"STRONG",{});var rIt=s(sFe);prr=r(rIt,"luke"),rIt.forEach(t),_rr=r(ZGe," \u2014 "),bU=n(ZGe,"A",{href:!0});var tIt=s(bU);brr=r(tIt,"LukeForSequenceClassification"),tIt.forEach(t),vrr=r(ZGe," (LUKE model)"),ZGe.forEach(t),Frr=i(D),UF=n(D,"LI",{});var eOe=s(UF);lFe=n(eOe,"STRONG",{});var aIt=s(lFe);Trr=r(aIt,"mbart"),aIt.forEach(t),Mrr=r(eOe," \u2014 "),vU=n(eOe,"A",{href:!0});var nIt=s(vU);Err=r(nIt,"MBartForSequenceClassification"),nIt.forEach(t),Crr=r(eOe," (mBART model)"),eOe.forEach(t),wrr=i(D),HF=n(D,"LI",{});var oOe=s(HF);iFe=n(oOe,"STRONG",{});var sIt=s(iFe);Arr=r(sIt,"megatron-bert"),sIt.forEach(t),Lrr=r(oOe," \u2014 "),FU=n(oOe,"A",{href:!0});var lIt=s(FU);yrr=r(lIt,"MegatronBertForSequenceClassification"),lIt.forEach(t),xrr=r(oOe," (Megatron-BERT model)"),oOe.forEach(t),$rr=i(D),JF=n(D,"LI",{});var rOe=s(JF);dFe=n(rOe,"STRONG",{});var iIt=s(dFe);krr=r(iIt,"mobilebert"),iIt.forEach(t),Srr=r(rOe," \u2014 "),TU=n(rOe,"A",{href:!0});var dIt=s(TU);Rrr=r(dIt,"MobileBertForSequenceClassification"),dIt.forEach(t),Prr=r(rOe," (MobileBERT model)"),rOe.forEach(t),Brr=i(D),YF=n(D,"LI",{});var tOe=s(YF);cFe=n(tOe,"STRONG",{});var cIt=s(cFe);Irr=r(cIt,"mpnet"),cIt.forEach(t),Nrr=r(tOe," \u2014 "),MU=n(tOe,"A",{href:!0});var mIt=s(MU);qrr=r(mIt,"MPNetForSequenceClassification"),mIt.forEach(t),jrr=r(tOe," (MPNet model)"),tOe.forEach(t),Drr=i(D),KF=n(D,"LI",{});var aOe=s(KF);mFe=n(aOe,"STRONG",{});var fIt=s(mFe);Grr=r(fIt,"mvp"),fIt.forEach(t),Orr=r(aOe," \u2014 "),EU=n(aOe,"A",{href:!0});var gIt=s(EU);Vrr=r(gIt,"MvpForSequenceClassification"),gIt.forEach(t),Xrr=r(aOe," (MVP model)"),aOe.forEach(t),zrr=i(D),ZF=n(D,"LI",{});var nOe=s(ZF);fFe=n(nOe,"STRONG",{});var hIt=s(fFe);Qrr=r(hIt,"nezha"),hIt.forEach(t),Wrr=r(nOe," \u2014 "),CU=n(nOe,"A",{href:!0});var uIt=s(CU);Urr=r(uIt,"NezhaForSequenceClassification"),uIt.forEach(t),Hrr=r(nOe," (Nezha model)"),nOe.forEach(t),Jrr=i(D),eT=n(D,"LI",{});var sOe=s(eT);gFe=n(sOe,"STRONG",{});var pIt=s(gFe);Yrr=r(pIt,"nystromformer"),pIt.forEach(t),Krr=r(sOe," \u2014 "),wU=n(sOe,"A",{href:!0});var _It=s(wU);Zrr=r(_It,"NystromformerForSequenceClassification"),_It.forEach(t),etr=r(sOe," (Nystr\xF6mformer model)"),sOe.forEach(t),otr=i(D),oT=n(D,"LI",{});var lOe=s(oT);hFe=n(lOe,"STRONG",{});var bIt=s(hFe);rtr=r(bIt,"openai-gpt"),bIt.forEach(t),ttr=r(lOe," \u2014 "),AU=n(lOe,"A",{href:!0});var vIt=s(AU);atr=r(vIt,"OpenAIGPTForSequenceClassification"),vIt.forEach(t),ntr=r(lOe," (OpenAI GPT model)"),lOe.forEach(t),str=i(D),rT=n(D,"LI",{});var iOe=s(rT);uFe=n(iOe,"STRONG",{});var FIt=s(uFe);ltr=r(FIt,"opt"),FIt.forEach(t),itr=r(iOe," \u2014 "),LU=n(iOe,"A",{href:!0});var TIt=s(LU);dtr=r(TIt,"OPTForSequenceClassification"),TIt.forEach(t),ctr=r(iOe," (OPT model)"),iOe.forEach(t),mtr=i(D),tT=n(D,"LI",{});var dOe=s(tT);pFe=n(dOe,"STRONG",{});var MIt=s(pFe);ftr=r(MIt,"perceiver"),MIt.forEach(t),gtr=r(dOe," \u2014 "),yU=n(dOe,"A",{href:!0});var EIt=s(yU);htr=r(EIt,"PerceiverForSequenceClassification"),EIt.forEach(t),utr=r(dOe," (Perceiver model)"),dOe.forEach(t),ptr=i(D),aT=n(D,"LI",{});var cOe=s(aT);_Fe=n(cOe,"STRONG",{});var CIt=s(_Fe);_tr=r(CIt,"plbart"),CIt.forEach(t),btr=r(cOe," \u2014 "),xU=n(cOe,"A",{href:!0});var wIt=s(xU);vtr=r(wIt,"PLBartForSequenceClassification"),wIt.forEach(t),Ftr=r(cOe," (PLBart model)"),cOe.forEach(t),Ttr=i(D),nT=n(D,"LI",{});var mOe=s(nT);bFe=n(mOe,"STRONG",{});var AIt=s(bFe);Mtr=r(AIt,"qdqbert"),AIt.forEach(t),Etr=r(mOe," \u2014 "),$U=n(mOe,"A",{href:!0});var LIt=s($U);Ctr=r(LIt,"QDQBertForSequenceClassification"),LIt.forEach(t),wtr=r(mOe," (QDQBert model)"),mOe.forEach(t),Atr=i(D),sT=n(D,"LI",{});var fOe=s(sT);vFe=n(fOe,"STRONG",{});var yIt=s(vFe);Ltr=r(yIt,"reformer"),yIt.forEach(t),ytr=r(fOe," \u2014 "),kU=n(fOe,"A",{href:!0});var xIt=s(kU);xtr=r(xIt,"ReformerForSequenceClassification"),xIt.forEach(t),$tr=r(fOe," (Reformer model)"),fOe.forEach(t),ktr=i(D),lT=n(D,"LI",{});var gOe=s(lT);FFe=n(gOe,"STRONG",{});var $It=s(FFe);Str=r($It,"rembert"),$It.forEach(t),Rtr=r(gOe," \u2014 "),SU=n(gOe,"A",{href:!0});var kIt=s(SU);Ptr=r(kIt,"RemBertForSequenceClassification"),kIt.forEach(t),Btr=r(gOe," (RemBERT model)"),gOe.forEach(t),Itr=i(D),iT=n(D,"LI",{});var hOe=s(iT);TFe=n(hOe,"STRONG",{});var SIt=s(TFe);Ntr=r(SIt,"roberta"),SIt.forEach(t),qtr=r(hOe," \u2014 "),RU=n(hOe,"A",{href:!0});var RIt=s(RU);jtr=r(RIt,"RobertaForSequenceClassification"),RIt.forEach(t),Dtr=r(hOe," (RoBERTa model)"),hOe.forEach(t),Gtr=i(D),dT=n(D,"LI",{});var uOe=s(dT);MFe=n(uOe,"STRONG",{});var PIt=s(MFe);Otr=r(PIt,"roformer"),PIt.forEach(t),Vtr=r(uOe," \u2014 "),PU=n(uOe,"A",{href:!0});var BIt=s(PU);Xtr=r(BIt,"RoFormerForSequenceClassification"),BIt.forEach(t),ztr=r(uOe," (RoFormer model)"),uOe.forEach(t),Qtr=i(D),cT=n(D,"LI",{});var pOe=s(cT);EFe=n(pOe,"STRONG",{});var IIt=s(EFe);Wtr=r(IIt,"squeezebert"),IIt.forEach(t),Utr=r(pOe," \u2014 "),BU=n(pOe,"A",{href:!0});var NIt=s(BU);Htr=r(NIt,"SqueezeBertForSequenceClassification"),NIt.forEach(t),Jtr=r(pOe," (SqueezeBERT model)"),pOe.forEach(t),Ytr=i(D),mT=n(D,"LI",{});var _Oe=s(mT);CFe=n(_Oe,"STRONG",{});var qIt=s(CFe);Ktr=r(qIt,"tapas"),qIt.forEach(t),Ztr=r(_Oe," \u2014 "),IU=n(_Oe,"A",{href:!0});var jIt=s(IU);ear=r(jIt,"TapasForSequenceClassification"),jIt.forEach(t),oar=r(_Oe," (TAPAS model)"),_Oe.forEach(t),rar=i(D),fT=n(D,"LI",{});var bOe=s(fT);wFe=n(bOe,"STRONG",{});var DIt=s(wFe);tar=r(DIt,"transfo-xl"),DIt.forEach(t),aar=r(bOe," \u2014 "),NU=n(bOe,"A",{href:!0});var GIt=s(NU);nar=r(GIt,"TransfoXLForSequenceClassification"),GIt.forEach(t),sar=r(bOe," (Transformer-XL model)"),bOe.forEach(t),lar=i(D),gT=n(D,"LI",{});var vOe=s(gT);AFe=n(vOe,"STRONG",{});var OIt=s(AFe);iar=r(OIt,"xlm"),OIt.forEach(t),dar=r(vOe," \u2014 "),qU=n(vOe,"A",{href:!0});var VIt=s(qU);car=r(VIt,"XLMForSequenceClassification"),VIt.forEach(t),mar=r(vOe," (XLM model)"),vOe.forEach(t),far=i(D),hT=n(D,"LI",{});var FOe=s(hT);LFe=n(FOe,"STRONG",{});var XIt=s(LFe);gar=r(XIt,"xlm-roberta"),XIt.forEach(t),har=r(FOe," \u2014 "),jU=n(FOe,"A",{href:!0});var zIt=s(jU);uar=r(zIt,"XLMRobertaForSequenceClassification"),zIt.forEach(t),par=r(FOe," (XLM-RoBERTa model)"),FOe.forEach(t),_ar=i(D),uT=n(D,"LI",{});var TOe=s(uT);yFe=n(TOe,"STRONG",{});var QIt=s(yFe);bar=r(QIt,"xlm-roberta-xl"),QIt.forEach(t),Far=r(TOe," \u2014 "),DU=n(TOe,"A",{href:!0});var WIt=s(DU);Tar=r(WIt,"XLMRobertaXLForSequenceClassification"),WIt.forEach(t),Mar=r(TOe," (XLM-RoBERTa-XL model)"),TOe.forEach(t),Ear=i(D),pT=n(D,"LI",{});var MOe=s(pT);xFe=n(MOe,"STRONG",{});var UIt=s(xFe);Car=r(UIt,"xlnet"),UIt.forEach(t),war=r(MOe," \u2014 "),GU=n(MOe,"A",{href:!0});var HIt=s(GU);Aar=r(HIt,"XLNetForSequenceClassification"),HIt.forEach(t),Lar=r(MOe," (XLNet model)"),MOe.forEach(t),yar=i(D),_T=n(D,"LI",{});var EOe=s(_T);$Fe=n(EOe,"STRONG",{});var JIt=s($Fe);xar=r(JIt,"yoso"),JIt.forEach(t),$ar=r(EOe," \u2014 "),OU=n(EOe,"A",{href:!0});var YIt=s(OU);kar=r(YIt,"YosoForSequenceClassification"),YIt.forEach(t),Sar=r(EOe," (YOSO model)"),EOe.forEach(t),D.forEach(t),Rar=i(wa),bT=n(wa,"P",{});var COe=s(bT);Par=r(COe,"The model is set in evaluation mode by default using "),kFe=n(COe,"CODE",{});var KIt=s(kFe);Bar=r(KIt,"model.eval()"),KIt.forEach(t),Iar=r(COe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=n(COe,"CODE",{});var ZIt=s(SFe);Nar=r(ZIt,"model.train()"),ZIt.forEach(t),COe.forEach(t),qar=i(wa),T(vT.$$.fragment,wa),wa.forEach(t),kl.forEach(t),YKe=i(m),Bd=n(m,"H2",{class:!0});var moo=s(Bd);FT=n(moo,"A",{id:!0,class:!0,href:!0});var eNt=s(FT);RFe=n(eNt,"SPAN",{});var oNt=s(RFe);T(jx.$$.fragment,oNt),oNt.forEach(t),eNt.forEach(t),jar=i(moo),PFe=n(moo,"SPAN",{});var rNt=s(PFe);Dar=r(rNt,"AutoModelForMultipleChoice"),rNt.forEach(t),moo.forEach(t),KKe=i(m),Do=n(m,"DIV",{class:!0});var Sl=s(Do);T(Dx.$$.fragment,Sl),Gar=i(Sl),Id=n(Sl,"P",{});var $le=s(Id);Oar=r($le,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VU=n($le,"A",{href:!0});var tNt=s(VU);Var=r(tNt,"from_pretrained()"),tNt.forEach(t),Xar=r($le," class method or the "),XU=n($le,"A",{href:!0});var aNt=s(XU);zar=r(aNt,"from_config()"),aNt.forEach(t),Qar=r($le,` class
method.`),$le.forEach(t),War=i(Sl),Gx=n(Sl,"P",{});var foo=s(Gx);Uar=r(foo,"This class cannot be instantiated directly using "),BFe=n(foo,"CODE",{});var nNt=s(BFe);Har=r(nNt,"__init__()"),nNt.forEach(t),Jar=r(foo," (throws an error)."),foo.forEach(t),Yar=i(Sl),Et=n(Sl,"DIV",{class:!0});var Vy=s(Et);T(Ox.$$.fragment,Vy),Kar=i(Vy),IFe=n(Vy,"P",{});var sNt=s(IFe);Zar=r(sNt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sNt.forEach(t),enr=i(Vy),Nd=n(Vy,"P",{});var kle=s(Nd);onr=r(kle,`Note:
Loading a model from its configuration file does `),NFe=n(kle,"STRONG",{});var lNt=s(NFe);rnr=r(lNt,"not"),lNt.forEach(t),tnr=r(kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),zU=n(kle,"A",{href:!0});var iNt=s(zU);anr=r(iNt,"from_pretrained()"),iNt.forEach(t),nnr=r(kle," to load the model weights."),kle.forEach(t),snr=i(Vy),T(TT.$$.fragment,Vy),Vy.forEach(t),lnr=i(Sl),no=n(Sl,"DIV",{class:!0});var Aa=s(no);T(Vx.$$.fragment,Aa),inr=i(Aa),qFe=n(Aa,"P",{});var dNt=s(qFe);dnr=r(dNt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dNt.forEach(t),cnr=i(Aa),rn=n(Aa,"P",{});var Xy=s(rn);mnr=r(Xy,"The model class to instantiate is selected based on the "),jFe=n(Xy,"CODE",{});var cNt=s(jFe);fnr=r(cNt,"model_type"),cNt.forEach(t),gnr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),DFe=n(Xy,"CODE",{});var mNt=s(DFe);hnr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),unr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(Xy,"CODE",{});var fNt=s(GFe);pnr=r(fNt,"pretrained_model_name_or_path"),fNt.forEach(t),_nr=r(Xy,":"),Xy.forEach(t),bnr=i(Aa),Z=n(Aa,"UL",{});var ee=s(Z);MT=n(ee,"LI",{});var wOe=s(MT);OFe=n(wOe,"STRONG",{});var gNt=s(OFe);vnr=r(gNt,"albert"),gNt.forEach(t),Fnr=r(wOe," \u2014 "),QU=n(wOe,"A",{href:!0});var hNt=s(QU);Tnr=r(hNt,"AlbertForMultipleChoice"),hNt.forEach(t),Mnr=r(wOe," (ALBERT model)"),wOe.forEach(t),Enr=i(ee),ET=n(ee,"LI",{});var AOe=s(ET);VFe=n(AOe,"STRONG",{});var uNt=s(VFe);Cnr=r(uNt,"bert"),uNt.forEach(t),wnr=r(AOe," \u2014 "),WU=n(AOe,"A",{href:!0});var pNt=s(WU);Anr=r(pNt,"BertForMultipleChoice"),pNt.forEach(t),Lnr=r(AOe," (BERT model)"),AOe.forEach(t),ynr=i(ee),CT=n(ee,"LI",{});var LOe=s(CT);XFe=n(LOe,"STRONG",{});var _Nt=s(XFe);xnr=r(_Nt,"big_bird"),_Nt.forEach(t),$nr=r(LOe," \u2014 "),UU=n(LOe,"A",{href:!0});var bNt=s(UU);knr=r(bNt,"BigBirdForMultipleChoice"),bNt.forEach(t),Snr=r(LOe," (BigBird model)"),LOe.forEach(t),Rnr=i(ee),wT=n(ee,"LI",{});var yOe=s(wT);zFe=n(yOe,"STRONG",{});var vNt=s(zFe);Pnr=r(vNt,"camembert"),vNt.forEach(t),Bnr=r(yOe," \u2014 "),HU=n(yOe,"A",{href:!0});var FNt=s(HU);Inr=r(FNt,"CamembertForMultipleChoice"),FNt.forEach(t),Nnr=r(yOe," (CamemBERT model)"),yOe.forEach(t),qnr=i(ee),AT=n(ee,"LI",{});var xOe=s(AT);QFe=n(xOe,"STRONG",{});var TNt=s(QFe);jnr=r(TNt,"canine"),TNt.forEach(t),Dnr=r(xOe," \u2014 "),JU=n(xOe,"A",{href:!0});var MNt=s(JU);Gnr=r(MNt,"CanineForMultipleChoice"),MNt.forEach(t),Onr=r(xOe," (CANINE model)"),xOe.forEach(t),Vnr=i(ee),LT=n(ee,"LI",{});var $Oe=s(LT);WFe=n($Oe,"STRONG",{});var ENt=s(WFe);Xnr=r(ENt,"convbert"),ENt.forEach(t),znr=r($Oe," \u2014 "),YU=n($Oe,"A",{href:!0});var CNt=s(YU);Qnr=r(CNt,"ConvBertForMultipleChoice"),CNt.forEach(t),Wnr=r($Oe," (ConvBERT model)"),$Oe.forEach(t),Unr=i(ee),yT=n(ee,"LI",{});var kOe=s(yT);UFe=n(kOe,"STRONG",{});var wNt=s(UFe);Hnr=r(wNt,"data2vec-text"),wNt.forEach(t),Jnr=r(kOe," \u2014 "),KU=n(kOe,"A",{href:!0});var ANt=s(KU);Ynr=r(ANt,"Data2VecTextForMultipleChoice"),ANt.forEach(t),Knr=r(kOe," (Data2VecText model)"),kOe.forEach(t),Znr=i(ee),xT=n(ee,"LI",{});var SOe=s(xT);HFe=n(SOe,"STRONG",{});var LNt=s(HFe);esr=r(LNt,"deberta-v2"),LNt.forEach(t),osr=r(SOe," \u2014 "),ZU=n(SOe,"A",{href:!0});var yNt=s(ZU);rsr=r(yNt,"DebertaV2ForMultipleChoice"),yNt.forEach(t),tsr=r(SOe," (DeBERTa-v2 model)"),SOe.forEach(t),asr=i(ee),$T=n(ee,"LI",{});var ROe=s($T);JFe=n(ROe,"STRONG",{});var xNt=s(JFe);nsr=r(xNt,"distilbert"),xNt.forEach(t),ssr=r(ROe," \u2014 "),eH=n(ROe,"A",{href:!0});var $Nt=s(eH);lsr=r($Nt,"DistilBertForMultipleChoice"),$Nt.forEach(t),isr=r(ROe," (DistilBERT model)"),ROe.forEach(t),dsr=i(ee),kT=n(ee,"LI",{});var POe=s(kT);YFe=n(POe,"STRONG",{});var kNt=s(YFe);csr=r(kNt,"electra"),kNt.forEach(t),msr=r(POe," \u2014 "),oH=n(POe,"A",{href:!0});var SNt=s(oH);fsr=r(SNt,"ElectraForMultipleChoice"),SNt.forEach(t),gsr=r(POe," (ELECTRA model)"),POe.forEach(t),hsr=i(ee),ST=n(ee,"LI",{});var BOe=s(ST);KFe=n(BOe,"STRONG",{});var RNt=s(KFe);usr=r(RNt,"ernie"),RNt.forEach(t),psr=r(BOe," \u2014 "),rH=n(BOe,"A",{href:!0});var PNt=s(rH);_sr=r(PNt,"ErnieForMultipleChoice"),PNt.forEach(t),bsr=r(BOe," (ERNIE model)"),BOe.forEach(t),vsr=i(ee),RT=n(ee,"LI",{});var IOe=s(RT);ZFe=n(IOe,"STRONG",{});var BNt=s(ZFe);Fsr=r(BNt,"flaubert"),BNt.forEach(t),Tsr=r(IOe," \u2014 "),tH=n(IOe,"A",{href:!0});var INt=s(tH);Msr=r(INt,"FlaubertForMultipleChoice"),INt.forEach(t),Esr=r(IOe," (FlauBERT model)"),IOe.forEach(t),Csr=i(ee),PT=n(ee,"LI",{});var NOe=s(PT);eTe=n(NOe,"STRONG",{});var NNt=s(eTe);wsr=r(NNt,"fnet"),NNt.forEach(t),Asr=r(NOe," \u2014 "),aH=n(NOe,"A",{href:!0});var qNt=s(aH);Lsr=r(qNt,"FNetForMultipleChoice"),qNt.forEach(t),ysr=r(NOe," (FNet model)"),NOe.forEach(t),xsr=i(ee),BT=n(ee,"LI",{});var qOe=s(BT);oTe=n(qOe,"STRONG",{});var jNt=s(oTe);$sr=r(jNt,"funnel"),jNt.forEach(t),ksr=r(qOe," \u2014 "),nH=n(qOe,"A",{href:!0});var DNt=s(nH);Ssr=r(DNt,"FunnelForMultipleChoice"),DNt.forEach(t),Rsr=r(qOe," (Funnel Transformer model)"),qOe.forEach(t),Psr=i(ee),IT=n(ee,"LI",{});var jOe=s(IT);rTe=n(jOe,"STRONG",{});var GNt=s(rTe);Bsr=r(GNt,"ibert"),GNt.forEach(t),Isr=r(jOe," \u2014 "),sH=n(jOe,"A",{href:!0});var ONt=s(sH);Nsr=r(ONt,"IBertForMultipleChoice"),ONt.forEach(t),qsr=r(jOe," (I-BERT model)"),jOe.forEach(t),jsr=i(ee),NT=n(ee,"LI",{});var DOe=s(NT);tTe=n(DOe,"STRONG",{});var VNt=s(tTe);Dsr=r(VNt,"longformer"),VNt.forEach(t),Gsr=r(DOe," \u2014 "),lH=n(DOe,"A",{href:!0});var XNt=s(lH);Osr=r(XNt,"LongformerForMultipleChoice"),XNt.forEach(t),Vsr=r(DOe," (Longformer model)"),DOe.forEach(t),Xsr=i(ee),qT=n(ee,"LI",{});var GOe=s(qT);aTe=n(GOe,"STRONG",{});var zNt=s(aTe);zsr=r(zNt,"luke"),zNt.forEach(t),Qsr=r(GOe," \u2014 "),iH=n(GOe,"A",{href:!0});var QNt=s(iH);Wsr=r(QNt,"LukeForMultipleChoice"),QNt.forEach(t),Usr=r(GOe," (LUKE model)"),GOe.forEach(t),Hsr=i(ee),jT=n(ee,"LI",{});var OOe=s(jT);nTe=n(OOe,"STRONG",{});var WNt=s(nTe);Jsr=r(WNt,"megatron-bert"),WNt.forEach(t),Ysr=r(OOe," \u2014 "),dH=n(OOe,"A",{href:!0});var UNt=s(dH);Ksr=r(UNt,"MegatronBertForMultipleChoice"),UNt.forEach(t),Zsr=r(OOe," (Megatron-BERT model)"),OOe.forEach(t),elr=i(ee),DT=n(ee,"LI",{});var VOe=s(DT);sTe=n(VOe,"STRONG",{});var HNt=s(sTe);olr=r(HNt,"mobilebert"),HNt.forEach(t),rlr=r(VOe," \u2014 "),cH=n(VOe,"A",{href:!0});var JNt=s(cH);tlr=r(JNt,"MobileBertForMultipleChoice"),JNt.forEach(t),alr=r(VOe," (MobileBERT model)"),VOe.forEach(t),nlr=i(ee),GT=n(ee,"LI",{});var XOe=s(GT);lTe=n(XOe,"STRONG",{});var YNt=s(lTe);slr=r(YNt,"mpnet"),YNt.forEach(t),llr=r(XOe," \u2014 "),mH=n(XOe,"A",{href:!0});var KNt=s(mH);ilr=r(KNt,"MPNetForMultipleChoice"),KNt.forEach(t),dlr=r(XOe," (MPNet model)"),XOe.forEach(t),clr=i(ee),OT=n(ee,"LI",{});var zOe=s(OT);iTe=n(zOe,"STRONG",{});var ZNt=s(iTe);mlr=r(ZNt,"nezha"),ZNt.forEach(t),flr=r(zOe," \u2014 "),fH=n(zOe,"A",{href:!0});var eqt=s(fH);glr=r(eqt,"NezhaForMultipleChoice"),eqt.forEach(t),hlr=r(zOe," (Nezha model)"),zOe.forEach(t),ulr=i(ee),VT=n(ee,"LI",{});var QOe=s(VT);dTe=n(QOe,"STRONG",{});var oqt=s(dTe);plr=r(oqt,"nystromformer"),oqt.forEach(t),_lr=r(QOe," \u2014 "),gH=n(QOe,"A",{href:!0});var rqt=s(gH);blr=r(rqt,"NystromformerForMultipleChoice"),rqt.forEach(t),vlr=r(QOe," (Nystr\xF6mformer model)"),QOe.forEach(t),Flr=i(ee),XT=n(ee,"LI",{});var WOe=s(XT);cTe=n(WOe,"STRONG",{});var tqt=s(cTe);Tlr=r(tqt,"qdqbert"),tqt.forEach(t),Mlr=r(WOe," \u2014 "),hH=n(WOe,"A",{href:!0});var aqt=s(hH);Elr=r(aqt,"QDQBertForMultipleChoice"),aqt.forEach(t),Clr=r(WOe," (QDQBert model)"),WOe.forEach(t),wlr=i(ee),zT=n(ee,"LI",{});var UOe=s(zT);mTe=n(UOe,"STRONG",{});var nqt=s(mTe);Alr=r(nqt,"rembert"),nqt.forEach(t),Llr=r(UOe," \u2014 "),uH=n(UOe,"A",{href:!0});var sqt=s(uH);ylr=r(sqt,"RemBertForMultipleChoice"),sqt.forEach(t),xlr=r(UOe," (RemBERT model)"),UOe.forEach(t),$lr=i(ee),QT=n(ee,"LI",{});var HOe=s(QT);fTe=n(HOe,"STRONG",{});var lqt=s(fTe);klr=r(lqt,"roberta"),lqt.forEach(t),Slr=r(HOe," \u2014 "),pH=n(HOe,"A",{href:!0});var iqt=s(pH);Rlr=r(iqt,"RobertaForMultipleChoice"),iqt.forEach(t),Plr=r(HOe," (RoBERTa model)"),HOe.forEach(t),Blr=i(ee),WT=n(ee,"LI",{});var JOe=s(WT);gTe=n(JOe,"STRONG",{});var dqt=s(gTe);Ilr=r(dqt,"roformer"),dqt.forEach(t),Nlr=r(JOe," \u2014 "),_H=n(JOe,"A",{href:!0});var cqt=s(_H);qlr=r(cqt,"RoFormerForMultipleChoice"),cqt.forEach(t),jlr=r(JOe," (RoFormer model)"),JOe.forEach(t),Dlr=i(ee),UT=n(ee,"LI",{});var YOe=s(UT);hTe=n(YOe,"STRONG",{});var mqt=s(hTe);Glr=r(mqt,"squeezebert"),mqt.forEach(t),Olr=r(YOe," \u2014 "),bH=n(YOe,"A",{href:!0});var fqt=s(bH);Vlr=r(fqt,"SqueezeBertForMultipleChoice"),fqt.forEach(t),Xlr=r(YOe," (SqueezeBERT model)"),YOe.forEach(t),zlr=i(ee),HT=n(ee,"LI",{});var KOe=s(HT);uTe=n(KOe,"STRONG",{});var gqt=s(uTe);Qlr=r(gqt,"xlm"),gqt.forEach(t),Wlr=r(KOe," \u2014 "),vH=n(KOe,"A",{href:!0});var hqt=s(vH);Ulr=r(hqt,"XLMForMultipleChoice"),hqt.forEach(t),Hlr=r(KOe," (XLM model)"),KOe.forEach(t),Jlr=i(ee),JT=n(ee,"LI",{});var ZOe=s(JT);pTe=n(ZOe,"STRONG",{});var uqt=s(pTe);Ylr=r(uqt,"xlm-roberta"),uqt.forEach(t),Klr=r(ZOe," \u2014 "),FH=n(ZOe,"A",{href:!0});var pqt=s(FH);Zlr=r(pqt,"XLMRobertaForMultipleChoice"),pqt.forEach(t),eir=r(ZOe," (XLM-RoBERTa model)"),ZOe.forEach(t),oir=i(ee),YT=n(ee,"LI",{});var eVe=s(YT);_Te=n(eVe,"STRONG",{});var _qt=s(_Te);rir=r(_qt,"xlm-roberta-xl"),_qt.forEach(t),tir=r(eVe," \u2014 "),TH=n(eVe,"A",{href:!0});var bqt=s(TH);air=r(bqt,"XLMRobertaXLForMultipleChoice"),bqt.forEach(t),nir=r(eVe," (XLM-RoBERTa-XL model)"),eVe.forEach(t),sir=i(ee),KT=n(ee,"LI",{});var oVe=s(KT);bTe=n(oVe,"STRONG",{});var vqt=s(bTe);lir=r(vqt,"xlnet"),vqt.forEach(t),iir=r(oVe," \u2014 "),MH=n(oVe,"A",{href:!0});var Fqt=s(MH);dir=r(Fqt,"XLNetForMultipleChoice"),Fqt.forEach(t),cir=r(oVe," (XLNet model)"),oVe.forEach(t),mir=i(ee),ZT=n(ee,"LI",{});var rVe=s(ZT);vTe=n(rVe,"STRONG",{});var Tqt=s(vTe);fir=r(Tqt,"yoso"),Tqt.forEach(t),gir=r(rVe," \u2014 "),EH=n(rVe,"A",{href:!0});var Mqt=s(EH);hir=r(Mqt,"YosoForMultipleChoice"),Mqt.forEach(t),uir=r(rVe," (YOSO model)"),rVe.forEach(t),ee.forEach(t),pir=i(Aa),eM=n(Aa,"P",{});var tVe=s(eM);_ir=r(tVe,"The model is set in evaluation mode by default using "),FTe=n(tVe,"CODE",{});var Eqt=s(FTe);bir=r(Eqt,"model.eval()"),Eqt.forEach(t),vir=r(tVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=n(tVe,"CODE",{});var Cqt=s(TTe);Fir=r(Cqt,"model.train()"),Cqt.forEach(t),tVe.forEach(t),Tir=i(Aa),T(oM.$$.fragment,Aa),Aa.forEach(t),Sl.forEach(t),ZKe=i(m),qd=n(m,"H2",{class:!0});var goo=s(qd);rM=n(goo,"A",{id:!0,class:!0,href:!0});var wqt=s(rM);MTe=n(wqt,"SPAN",{});var Aqt=s(MTe);T(Xx.$$.fragment,Aqt),Aqt.forEach(t),wqt.forEach(t),Mir=i(goo),ETe=n(goo,"SPAN",{});var Lqt=s(ETe);Eir=r(Lqt,"AutoModelForNextSentencePrediction"),Lqt.forEach(t),goo.forEach(t),eZe=i(m),Go=n(m,"DIV",{class:!0});var Rl=s(Go);T(zx.$$.fragment,Rl),Cir=i(Rl),jd=n(Rl,"P",{});var Sle=s(jd);wir=r(Sle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CH=n(Sle,"A",{href:!0});var yqt=s(CH);Air=r(yqt,"from_pretrained()"),yqt.forEach(t),Lir=r(Sle," class method or the "),wH=n(Sle,"A",{href:!0});var xqt=s(wH);yir=r(xqt,"from_config()"),xqt.forEach(t),xir=r(Sle,` class
method.`),Sle.forEach(t),$ir=i(Rl),Qx=n(Rl,"P",{});var hoo=s(Qx);kir=r(hoo,"This class cannot be instantiated directly using "),CTe=n(hoo,"CODE",{});var $qt=s(CTe);Sir=r($qt,"__init__()"),$qt.forEach(t),Rir=r(hoo," (throws an error)."),hoo.forEach(t),Pir=i(Rl),Ct=n(Rl,"DIV",{class:!0});var zy=s(Ct);T(Wx.$$.fragment,zy),Bir=i(zy),wTe=n(zy,"P",{});var kqt=s(wTe);Iir=r(kqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kqt.forEach(t),Nir=i(zy),Dd=n(zy,"P",{});var Rle=s(Dd);qir=r(Rle,`Note:
Loading a model from its configuration file does `),ATe=n(Rle,"STRONG",{});var Sqt=s(ATe);jir=r(Sqt,"not"),Sqt.forEach(t),Dir=r(Rle,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(Rle,"A",{href:!0});var Rqt=s(AH);Gir=r(Rqt,"from_pretrained()"),Rqt.forEach(t),Oir=r(Rle," to load the model weights."),Rle.forEach(t),Vir=i(zy),T(tM.$$.fragment,zy),zy.forEach(t),Xir=i(Rl),so=n(Rl,"DIV",{class:!0});var La=s(so);T(Ux.$$.fragment,La),zir=i(La),LTe=n(La,"P",{});var Pqt=s(LTe);Qir=r(Pqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pqt.forEach(t),Wir=i(La),tn=n(La,"P",{});var Qy=s(tn);Uir=r(Qy,"The model class to instantiate is selected based on the "),yTe=n(Qy,"CODE",{});var Bqt=s(yTe);Hir=r(Bqt,"model_type"),Bqt.forEach(t),Jir=r(Qy,` property of the config object (either
passed as an argument or loaded from `),xTe=n(Qy,"CODE",{});var Iqt=s(xTe);Yir=r(Iqt,"pretrained_model_name_or_path"),Iqt.forEach(t),Kir=r(Qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(Qy,"CODE",{});var Nqt=s($Te);Zir=r(Nqt,"pretrained_model_name_or_path"),Nqt.forEach(t),edr=r(Qy,":"),Qy.forEach(t),odr=i(La),Ue=n(La,"UL",{});var ct=s(Ue);aM=n(ct,"LI",{});var aVe=s(aM);kTe=n(aVe,"STRONG",{});var qqt=s(kTe);rdr=r(qqt,"bert"),qqt.forEach(t),tdr=r(aVe," \u2014 "),LH=n(aVe,"A",{href:!0});var jqt=s(LH);adr=r(jqt,"BertForNextSentencePrediction"),jqt.forEach(t),ndr=r(aVe," (BERT model)"),aVe.forEach(t),sdr=i(ct),nM=n(ct,"LI",{});var nVe=s(nM);STe=n(nVe,"STRONG",{});var Dqt=s(STe);ldr=r(Dqt,"ernie"),Dqt.forEach(t),idr=r(nVe," \u2014 "),yH=n(nVe,"A",{href:!0});var Gqt=s(yH);ddr=r(Gqt,"ErnieForNextSentencePrediction"),Gqt.forEach(t),cdr=r(nVe," (ERNIE model)"),nVe.forEach(t),mdr=i(ct),sM=n(ct,"LI",{});var sVe=s(sM);RTe=n(sVe,"STRONG",{});var Oqt=s(RTe);fdr=r(Oqt,"fnet"),Oqt.forEach(t),gdr=r(sVe," \u2014 "),xH=n(sVe,"A",{href:!0});var Vqt=s(xH);hdr=r(Vqt,"FNetForNextSentencePrediction"),Vqt.forEach(t),udr=r(sVe," (FNet model)"),sVe.forEach(t),pdr=i(ct),lM=n(ct,"LI",{});var lVe=s(lM);PTe=n(lVe,"STRONG",{});var Xqt=s(PTe);_dr=r(Xqt,"megatron-bert"),Xqt.forEach(t),bdr=r(lVe," \u2014 "),$H=n(lVe,"A",{href:!0});var zqt=s($H);vdr=r(zqt,"MegatronBertForNextSentencePrediction"),zqt.forEach(t),Fdr=r(lVe," (Megatron-BERT model)"),lVe.forEach(t),Tdr=i(ct),iM=n(ct,"LI",{});var iVe=s(iM);BTe=n(iVe,"STRONG",{});var Qqt=s(BTe);Mdr=r(Qqt,"mobilebert"),Qqt.forEach(t),Edr=r(iVe," \u2014 "),kH=n(iVe,"A",{href:!0});var Wqt=s(kH);Cdr=r(Wqt,"MobileBertForNextSentencePrediction"),Wqt.forEach(t),wdr=r(iVe," (MobileBERT model)"),iVe.forEach(t),Adr=i(ct),dM=n(ct,"LI",{});var dVe=s(dM);ITe=n(dVe,"STRONG",{});var Uqt=s(ITe);Ldr=r(Uqt,"nezha"),Uqt.forEach(t),ydr=r(dVe," \u2014 "),SH=n(dVe,"A",{href:!0});var Hqt=s(SH);xdr=r(Hqt,"NezhaForNextSentencePrediction"),Hqt.forEach(t),$dr=r(dVe," (Nezha model)"),dVe.forEach(t),kdr=i(ct),cM=n(ct,"LI",{});var cVe=s(cM);NTe=n(cVe,"STRONG",{});var Jqt=s(NTe);Sdr=r(Jqt,"qdqbert"),Jqt.forEach(t),Rdr=r(cVe," \u2014 "),RH=n(cVe,"A",{href:!0});var Yqt=s(RH);Pdr=r(Yqt,"QDQBertForNextSentencePrediction"),Yqt.forEach(t),Bdr=r(cVe," (QDQBert model)"),cVe.forEach(t),ct.forEach(t),Idr=i(La),mM=n(La,"P",{});var mVe=s(mM);Ndr=r(mVe,"The model is set in evaluation mode by default using "),qTe=n(mVe,"CODE",{});var Kqt=s(qTe);qdr=r(Kqt,"model.eval()"),Kqt.forEach(t),jdr=r(mVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jTe=n(mVe,"CODE",{});var Zqt=s(jTe);Ddr=r(Zqt,"model.train()"),Zqt.forEach(t),mVe.forEach(t),Gdr=i(La),T(fM.$$.fragment,La),La.forEach(t),Rl.forEach(t),oZe=i(m),Gd=n(m,"H2",{class:!0});var uoo=s(Gd);gM=n(uoo,"A",{id:!0,class:!0,href:!0});var ejt=s(gM);DTe=n(ejt,"SPAN",{});var ojt=s(DTe);T(Hx.$$.fragment,ojt),ojt.forEach(t),ejt.forEach(t),Odr=i(uoo),GTe=n(uoo,"SPAN",{});var rjt=s(GTe);Vdr=r(rjt,"AutoModelForTokenClassification"),rjt.forEach(t),uoo.forEach(t),rZe=i(m),Oo=n(m,"DIV",{class:!0});var Pl=s(Oo);T(Jx.$$.fragment,Pl),Xdr=i(Pl),Od=n(Pl,"P",{});var Ple=s(Od);zdr=r(Ple,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PH=n(Ple,"A",{href:!0});var tjt=s(PH);Qdr=r(tjt,"from_pretrained()"),tjt.forEach(t),Wdr=r(Ple," class method or the "),BH=n(Ple,"A",{href:!0});var ajt=s(BH);Udr=r(ajt,"from_config()"),ajt.forEach(t),Hdr=r(Ple,` class
method.`),Ple.forEach(t),Jdr=i(Pl),Yx=n(Pl,"P",{});var poo=s(Yx);Ydr=r(poo,"This class cannot be instantiated directly using "),OTe=n(poo,"CODE",{});var njt=s(OTe);Kdr=r(njt,"__init__()"),njt.forEach(t),Zdr=r(poo," (throws an error)."),poo.forEach(t),ecr=i(Pl),wt=n(Pl,"DIV",{class:!0});var Wy=s(wt);T(Kx.$$.fragment,Wy),ocr=i(Wy),VTe=n(Wy,"P",{});var sjt=s(VTe);rcr=r(sjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sjt.forEach(t),tcr=i(Wy),Vd=n(Wy,"P",{});var Ble=s(Vd);acr=r(Ble,`Note:
Loading a model from its configuration file does `),XTe=n(Ble,"STRONG",{});var ljt=s(XTe);ncr=r(ljt,"not"),ljt.forEach(t),scr=r(Ble,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(Ble,"A",{href:!0});var ijt=s(IH);lcr=r(ijt,"from_pretrained()"),ijt.forEach(t),icr=r(Ble," to load the model weights."),Ble.forEach(t),dcr=i(Wy),T(hM.$$.fragment,Wy),Wy.forEach(t),ccr=i(Pl),lo=n(Pl,"DIV",{class:!0});var ya=s(lo);T(Zx.$$.fragment,ya),mcr=i(ya),zTe=n(ya,"P",{});var djt=s(zTe);fcr=r(djt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),djt.forEach(t),gcr=i(ya),an=n(ya,"P",{});var Uy=s(an);hcr=r(Uy,"The model class to instantiate is selected based on the "),QTe=n(Uy,"CODE",{});var cjt=s(QTe);ucr=r(cjt,"model_type"),cjt.forEach(t),pcr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),WTe=n(Uy,"CODE",{});var mjt=s(WTe);_cr=r(mjt,"pretrained_model_name_or_path"),mjt.forEach(t),bcr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(Uy,"CODE",{});var fjt=s(UTe);vcr=r(fjt,"pretrained_model_name_or_path"),fjt.forEach(t),Fcr=r(Uy,":"),Uy.forEach(t),Tcr=i(ya),J=n(ya,"UL",{});var K=s(J);uM=n(K,"LI",{});var fVe=s(uM);HTe=n(fVe,"STRONG",{});var gjt=s(HTe);Mcr=r(gjt,"albert"),gjt.forEach(t),Ecr=r(fVe," \u2014 "),NH=n(fVe,"A",{href:!0});var hjt=s(NH);Ccr=r(hjt,"AlbertForTokenClassification"),hjt.forEach(t),wcr=r(fVe," (ALBERT model)"),fVe.forEach(t),Acr=i(K),pM=n(K,"LI",{});var gVe=s(pM);JTe=n(gVe,"STRONG",{});var ujt=s(JTe);Lcr=r(ujt,"bert"),ujt.forEach(t),ycr=r(gVe," \u2014 "),qH=n(gVe,"A",{href:!0});var pjt=s(qH);xcr=r(pjt,"BertForTokenClassification"),pjt.forEach(t),$cr=r(gVe," (BERT model)"),gVe.forEach(t),kcr=i(K),_M=n(K,"LI",{});var hVe=s(_M);YTe=n(hVe,"STRONG",{});var _jt=s(YTe);Scr=r(_jt,"big_bird"),_jt.forEach(t),Rcr=r(hVe," \u2014 "),jH=n(hVe,"A",{href:!0});var bjt=s(jH);Pcr=r(bjt,"BigBirdForTokenClassification"),bjt.forEach(t),Bcr=r(hVe," (BigBird model)"),hVe.forEach(t),Icr=i(K),bM=n(K,"LI",{});var uVe=s(bM);KTe=n(uVe,"STRONG",{});var vjt=s(KTe);Ncr=r(vjt,"bloom"),vjt.forEach(t),qcr=r(uVe," \u2014 "),DH=n(uVe,"A",{href:!0});var Fjt=s(DH);jcr=r(Fjt,"BloomForTokenClassification"),Fjt.forEach(t),Dcr=r(uVe," (BLOOM model)"),uVe.forEach(t),Gcr=i(K),vM=n(K,"LI",{});var pVe=s(vM);ZTe=n(pVe,"STRONG",{});var Tjt=s(ZTe);Ocr=r(Tjt,"camembert"),Tjt.forEach(t),Vcr=r(pVe," \u2014 "),GH=n(pVe,"A",{href:!0});var Mjt=s(GH);Xcr=r(Mjt,"CamembertForTokenClassification"),Mjt.forEach(t),zcr=r(pVe," (CamemBERT model)"),pVe.forEach(t),Qcr=i(K),FM=n(K,"LI",{});var _Ve=s(FM);eMe=n(_Ve,"STRONG",{});var Ejt=s(eMe);Wcr=r(Ejt,"canine"),Ejt.forEach(t),Ucr=r(_Ve," \u2014 "),OH=n(_Ve,"A",{href:!0});var Cjt=s(OH);Hcr=r(Cjt,"CanineForTokenClassification"),Cjt.forEach(t),Jcr=r(_Ve," (CANINE model)"),_Ve.forEach(t),Ycr=i(K),TM=n(K,"LI",{});var bVe=s(TM);oMe=n(bVe,"STRONG",{});var wjt=s(oMe);Kcr=r(wjt,"convbert"),wjt.forEach(t),Zcr=r(bVe," \u2014 "),VH=n(bVe,"A",{href:!0});var Ajt=s(VH);emr=r(Ajt,"ConvBertForTokenClassification"),Ajt.forEach(t),omr=r(bVe," (ConvBERT model)"),bVe.forEach(t),rmr=i(K),MM=n(K,"LI",{});var vVe=s(MM);rMe=n(vVe,"STRONG",{});var Ljt=s(rMe);tmr=r(Ljt,"data2vec-text"),Ljt.forEach(t),amr=r(vVe," \u2014 "),XH=n(vVe,"A",{href:!0});var yjt=s(XH);nmr=r(yjt,"Data2VecTextForTokenClassification"),yjt.forEach(t),smr=r(vVe," (Data2VecText model)"),vVe.forEach(t),lmr=i(K),EM=n(K,"LI",{});var FVe=s(EM);tMe=n(FVe,"STRONG",{});var xjt=s(tMe);imr=r(xjt,"deberta"),xjt.forEach(t),dmr=r(FVe," \u2014 "),zH=n(FVe,"A",{href:!0});var $jt=s(zH);cmr=r($jt,"DebertaForTokenClassification"),$jt.forEach(t),mmr=r(FVe," (DeBERTa model)"),FVe.forEach(t),fmr=i(K),CM=n(K,"LI",{});var TVe=s(CM);aMe=n(TVe,"STRONG",{});var kjt=s(aMe);gmr=r(kjt,"deberta-v2"),kjt.forEach(t),hmr=r(TVe," \u2014 "),QH=n(TVe,"A",{href:!0});var Sjt=s(QH);umr=r(Sjt,"DebertaV2ForTokenClassification"),Sjt.forEach(t),pmr=r(TVe," (DeBERTa-v2 model)"),TVe.forEach(t),_mr=i(K),wM=n(K,"LI",{});var MVe=s(wM);nMe=n(MVe,"STRONG",{});var Rjt=s(nMe);bmr=r(Rjt,"distilbert"),Rjt.forEach(t),vmr=r(MVe," \u2014 "),WH=n(MVe,"A",{href:!0});var Pjt=s(WH);Fmr=r(Pjt,"DistilBertForTokenClassification"),Pjt.forEach(t),Tmr=r(MVe," (DistilBERT model)"),MVe.forEach(t),Mmr=i(K),AM=n(K,"LI",{});var EVe=s(AM);sMe=n(EVe,"STRONG",{});var Bjt=s(sMe);Emr=r(Bjt,"electra"),Bjt.forEach(t),Cmr=r(EVe," \u2014 "),UH=n(EVe,"A",{href:!0});var Ijt=s(UH);wmr=r(Ijt,"ElectraForTokenClassification"),Ijt.forEach(t),Amr=r(EVe," (ELECTRA model)"),EVe.forEach(t),Lmr=i(K),LM=n(K,"LI",{});var CVe=s(LM);lMe=n(CVe,"STRONG",{});var Njt=s(lMe);ymr=r(Njt,"ernie"),Njt.forEach(t),xmr=r(CVe," \u2014 "),HH=n(CVe,"A",{href:!0});var qjt=s(HH);$mr=r(qjt,"ErnieForTokenClassification"),qjt.forEach(t),kmr=r(CVe," (ERNIE model)"),CVe.forEach(t),Smr=i(K),yM=n(K,"LI",{});var wVe=s(yM);iMe=n(wVe,"STRONG",{});var jjt=s(iMe);Rmr=r(jjt,"flaubert"),jjt.forEach(t),Pmr=r(wVe," \u2014 "),JH=n(wVe,"A",{href:!0});var Djt=s(JH);Bmr=r(Djt,"FlaubertForTokenClassification"),Djt.forEach(t),Imr=r(wVe," (FlauBERT model)"),wVe.forEach(t),Nmr=i(K),xM=n(K,"LI",{});var AVe=s(xM);dMe=n(AVe,"STRONG",{});var Gjt=s(dMe);qmr=r(Gjt,"fnet"),Gjt.forEach(t),jmr=r(AVe," \u2014 "),YH=n(AVe,"A",{href:!0});var Ojt=s(YH);Dmr=r(Ojt,"FNetForTokenClassification"),Ojt.forEach(t),Gmr=r(AVe," (FNet model)"),AVe.forEach(t),Omr=i(K),$M=n(K,"LI",{});var LVe=s($M);cMe=n(LVe,"STRONG",{});var Vjt=s(cMe);Vmr=r(Vjt,"funnel"),Vjt.forEach(t),Xmr=r(LVe," \u2014 "),KH=n(LVe,"A",{href:!0});var Xjt=s(KH);zmr=r(Xjt,"FunnelForTokenClassification"),Xjt.forEach(t),Qmr=r(LVe," (Funnel Transformer model)"),LVe.forEach(t),Wmr=i(K),kM=n(K,"LI",{});var yVe=s(kM);mMe=n(yVe,"STRONG",{});var zjt=s(mMe);Umr=r(zjt,"gpt2"),zjt.forEach(t),Hmr=r(yVe," \u2014 "),ZH=n(yVe,"A",{href:!0});var Qjt=s(ZH);Jmr=r(Qjt,"GPT2ForTokenClassification"),Qjt.forEach(t),Ymr=r(yVe," (OpenAI GPT-2 model)"),yVe.forEach(t),Kmr=i(K),SM=n(K,"LI",{});var xVe=s(SM);fMe=n(xVe,"STRONG",{});var Wjt=s(fMe);Zmr=r(Wjt,"ibert"),Wjt.forEach(t),efr=r(xVe," \u2014 "),eJ=n(xVe,"A",{href:!0});var Ujt=s(eJ);ofr=r(Ujt,"IBertForTokenClassification"),Ujt.forEach(t),rfr=r(xVe," (I-BERT model)"),xVe.forEach(t),tfr=i(K),RM=n(K,"LI",{});var $Ve=s(RM);gMe=n($Ve,"STRONG",{});var Hjt=s(gMe);afr=r(Hjt,"layoutlm"),Hjt.forEach(t),nfr=r($Ve," \u2014 "),oJ=n($Ve,"A",{href:!0});var Jjt=s(oJ);sfr=r(Jjt,"LayoutLMForTokenClassification"),Jjt.forEach(t),lfr=r($Ve," (LayoutLM model)"),$Ve.forEach(t),ifr=i(K),PM=n(K,"LI",{});var kVe=s(PM);hMe=n(kVe,"STRONG",{});var Yjt=s(hMe);dfr=r(Yjt,"layoutlmv2"),Yjt.forEach(t),cfr=r(kVe," \u2014 "),rJ=n(kVe,"A",{href:!0});var Kjt=s(rJ);mfr=r(Kjt,"LayoutLMv2ForTokenClassification"),Kjt.forEach(t),ffr=r(kVe," (LayoutLMv2 model)"),kVe.forEach(t),gfr=i(K),BM=n(K,"LI",{});var SVe=s(BM);uMe=n(SVe,"STRONG",{});var Zjt=s(uMe);hfr=r(Zjt,"layoutlmv3"),Zjt.forEach(t),ufr=r(SVe," \u2014 "),tJ=n(SVe,"A",{href:!0});var eDt=s(tJ);pfr=r(eDt,"LayoutLMv3ForTokenClassification"),eDt.forEach(t),_fr=r(SVe," (LayoutLMv3 model)"),SVe.forEach(t),bfr=i(K),IM=n(K,"LI",{});var RVe=s(IM);pMe=n(RVe,"STRONG",{});var oDt=s(pMe);vfr=r(oDt,"longformer"),oDt.forEach(t),Ffr=r(RVe," \u2014 "),aJ=n(RVe,"A",{href:!0});var rDt=s(aJ);Tfr=r(rDt,"LongformerForTokenClassification"),rDt.forEach(t),Mfr=r(RVe," (Longformer model)"),RVe.forEach(t),Efr=i(K),NM=n(K,"LI",{});var PVe=s(NM);_Me=n(PVe,"STRONG",{});var tDt=s(_Me);Cfr=r(tDt,"luke"),tDt.forEach(t),wfr=r(PVe," \u2014 "),nJ=n(PVe,"A",{href:!0});var aDt=s(nJ);Afr=r(aDt,"LukeForTokenClassification"),aDt.forEach(t),Lfr=r(PVe," (LUKE model)"),PVe.forEach(t),yfr=i(K),qM=n(K,"LI",{});var BVe=s(qM);bMe=n(BVe,"STRONG",{});var nDt=s(bMe);xfr=r(nDt,"megatron-bert"),nDt.forEach(t),$fr=r(BVe," \u2014 "),sJ=n(BVe,"A",{href:!0});var sDt=s(sJ);kfr=r(sDt,"MegatronBertForTokenClassification"),sDt.forEach(t),Sfr=r(BVe," (Megatron-BERT model)"),BVe.forEach(t),Rfr=i(K),jM=n(K,"LI",{});var IVe=s(jM);vMe=n(IVe,"STRONG",{});var lDt=s(vMe);Pfr=r(lDt,"mobilebert"),lDt.forEach(t),Bfr=r(IVe," \u2014 "),lJ=n(IVe,"A",{href:!0});var iDt=s(lJ);Ifr=r(iDt,"MobileBertForTokenClassification"),iDt.forEach(t),Nfr=r(IVe," (MobileBERT model)"),IVe.forEach(t),qfr=i(K),DM=n(K,"LI",{});var NVe=s(DM);FMe=n(NVe,"STRONG",{});var dDt=s(FMe);jfr=r(dDt,"mpnet"),dDt.forEach(t),Dfr=r(NVe," \u2014 "),iJ=n(NVe,"A",{href:!0});var cDt=s(iJ);Gfr=r(cDt,"MPNetForTokenClassification"),cDt.forEach(t),Ofr=r(NVe," (MPNet model)"),NVe.forEach(t),Vfr=i(K),GM=n(K,"LI",{});var qVe=s(GM);TMe=n(qVe,"STRONG",{});var mDt=s(TMe);Xfr=r(mDt,"nezha"),mDt.forEach(t),zfr=r(qVe," \u2014 "),dJ=n(qVe,"A",{href:!0});var fDt=s(dJ);Qfr=r(fDt,"NezhaForTokenClassification"),fDt.forEach(t),Wfr=r(qVe," (Nezha model)"),qVe.forEach(t),Ufr=i(K),OM=n(K,"LI",{});var jVe=s(OM);MMe=n(jVe,"STRONG",{});var gDt=s(MMe);Hfr=r(gDt,"nystromformer"),gDt.forEach(t),Jfr=r(jVe," \u2014 "),cJ=n(jVe,"A",{href:!0});var hDt=s(cJ);Yfr=r(hDt,"NystromformerForTokenClassification"),hDt.forEach(t),Kfr=r(jVe," (Nystr\xF6mformer model)"),jVe.forEach(t),Zfr=i(K),VM=n(K,"LI",{});var DVe=s(VM);EMe=n(DVe,"STRONG",{});var uDt=s(EMe);egr=r(uDt,"qdqbert"),uDt.forEach(t),ogr=r(DVe," \u2014 "),mJ=n(DVe,"A",{href:!0});var pDt=s(mJ);rgr=r(pDt,"QDQBertForTokenClassification"),pDt.forEach(t),tgr=r(DVe," (QDQBert model)"),DVe.forEach(t),agr=i(K),XM=n(K,"LI",{});var GVe=s(XM);CMe=n(GVe,"STRONG",{});var _Dt=s(CMe);ngr=r(_Dt,"rembert"),_Dt.forEach(t),sgr=r(GVe," \u2014 "),fJ=n(GVe,"A",{href:!0});var bDt=s(fJ);lgr=r(bDt,"RemBertForTokenClassification"),bDt.forEach(t),igr=r(GVe," (RemBERT model)"),GVe.forEach(t),dgr=i(K),zM=n(K,"LI",{});var OVe=s(zM);wMe=n(OVe,"STRONG",{});var vDt=s(wMe);cgr=r(vDt,"roberta"),vDt.forEach(t),mgr=r(OVe," \u2014 "),gJ=n(OVe,"A",{href:!0});var FDt=s(gJ);fgr=r(FDt,"RobertaForTokenClassification"),FDt.forEach(t),ggr=r(OVe," (RoBERTa model)"),OVe.forEach(t),hgr=i(K),QM=n(K,"LI",{});var VVe=s(QM);AMe=n(VVe,"STRONG",{});var TDt=s(AMe);ugr=r(TDt,"roformer"),TDt.forEach(t),pgr=r(VVe," \u2014 "),hJ=n(VVe,"A",{href:!0});var MDt=s(hJ);_gr=r(MDt,"RoFormerForTokenClassification"),MDt.forEach(t),bgr=r(VVe," (RoFormer model)"),VVe.forEach(t),vgr=i(K),WM=n(K,"LI",{});var XVe=s(WM);LMe=n(XVe,"STRONG",{});var EDt=s(LMe);Fgr=r(EDt,"squeezebert"),EDt.forEach(t),Tgr=r(XVe," \u2014 "),uJ=n(XVe,"A",{href:!0});var CDt=s(uJ);Mgr=r(CDt,"SqueezeBertForTokenClassification"),CDt.forEach(t),Egr=r(XVe," (SqueezeBERT model)"),XVe.forEach(t),Cgr=i(K),UM=n(K,"LI",{});var zVe=s(UM);yMe=n(zVe,"STRONG",{});var wDt=s(yMe);wgr=r(wDt,"xlm"),wDt.forEach(t),Agr=r(zVe," \u2014 "),pJ=n(zVe,"A",{href:!0});var ADt=s(pJ);Lgr=r(ADt,"XLMForTokenClassification"),ADt.forEach(t),ygr=r(zVe," (XLM model)"),zVe.forEach(t),xgr=i(K),HM=n(K,"LI",{});var QVe=s(HM);xMe=n(QVe,"STRONG",{});var LDt=s(xMe);$gr=r(LDt,"xlm-roberta"),LDt.forEach(t),kgr=r(QVe," \u2014 "),_J=n(QVe,"A",{href:!0});var yDt=s(_J);Sgr=r(yDt,"XLMRobertaForTokenClassification"),yDt.forEach(t),Rgr=r(QVe," (XLM-RoBERTa model)"),QVe.forEach(t),Pgr=i(K),JM=n(K,"LI",{});var WVe=s(JM);$Me=n(WVe,"STRONG",{});var xDt=s($Me);Bgr=r(xDt,"xlm-roberta-xl"),xDt.forEach(t),Igr=r(WVe," \u2014 "),bJ=n(WVe,"A",{href:!0});var $Dt=s(bJ);Ngr=r($Dt,"XLMRobertaXLForTokenClassification"),$Dt.forEach(t),qgr=r(WVe," (XLM-RoBERTa-XL model)"),WVe.forEach(t),jgr=i(K),YM=n(K,"LI",{});var UVe=s(YM);kMe=n(UVe,"STRONG",{});var kDt=s(kMe);Dgr=r(kDt,"xlnet"),kDt.forEach(t),Ggr=r(UVe," \u2014 "),vJ=n(UVe,"A",{href:!0});var SDt=s(vJ);Ogr=r(SDt,"XLNetForTokenClassification"),SDt.forEach(t),Vgr=r(UVe," (XLNet model)"),UVe.forEach(t),Xgr=i(K),KM=n(K,"LI",{});var HVe=s(KM);SMe=n(HVe,"STRONG",{});var RDt=s(SMe);zgr=r(RDt,"yoso"),RDt.forEach(t),Qgr=r(HVe," \u2014 "),FJ=n(HVe,"A",{href:!0});var PDt=s(FJ);Wgr=r(PDt,"YosoForTokenClassification"),PDt.forEach(t),Ugr=r(HVe," (YOSO model)"),HVe.forEach(t),K.forEach(t),Hgr=i(ya),ZM=n(ya,"P",{});var JVe=s(ZM);Jgr=r(JVe,"The model is set in evaluation mode by default using "),RMe=n(JVe,"CODE",{});var BDt=s(RMe);Ygr=r(BDt,"model.eval()"),BDt.forEach(t),Kgr=r(JVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PMe=n(JVe,"CODE",{});var IDt=s(PMe);Zgr=r(IDt,"model.train()"),IDt.forEach(t),JVe.forEach(t),ehr=i(ya),T(eE.$$.fragment,ya),ya.forEach(t),Pl.forEach(t),tZe=i(m),Xd=n(m,"H2",{class:!0});var _oo=s(Xd);oE=n(_oo,"A",{id:!0,class:!0,href:!0});var NDt=s(oE);BMe=n(NDt,"SPAN",{});var qDt=s(BMe);T(e$.$$.fragment,qDt),qDt.forEach(t),NDt.forEach(t),ohr=i(_oo),IMe=n(_oo,"SPAN",{});var jDt=s(IMe);rhr=r(jDt,"AutoModelForQuestionAnswering"),jDt.forEach(t),_oo.forEach(t),aZe=i(m),Vo=n(m,"DIV",{class:!0});var Bl=s(Vo);T(o$.$$.fragment,Bl),thr=i(Bl),zd=n(Bl,"P",{});var Ile=s(zd);ahr=r(Ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TJ=n(Ile,"A",{href:!0});var DDt=s(TJ);nhr=r(DDt,"from_pretrained()"),DDt.forEach(t),shr=r(Ile," class method or the "),MJ=n(Ile,"A",{href:!0});var GDt=s(MJ);lhr=r(GDt,"from_config()"),GDt.forEach(t),ihr=r(Ile,` class
method.`),Ile.forEach(t),dhr=i(Bl),r$=n(Bl,"P",{});var boo=s(r$);chr=r(boo,"This class cannot be instantiated directly using "),NMe=n(boo,"CODE",{});var ODt=s(NMe);mhr=r(ODt,"__init__()"),ODt.forEach(t),fhr=r(boo," (throws an error)."),boo.forEach(t),ghr=i(Bl),At=n(Bl,"DIV",{class:!0});var Hy=s(At);T(t$.$$.fragment,Hy),hhr=i(Hy),qMe=n(Hy,"P",{});var VDt=s(qMe);uhr=r(VDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),VDt.forEach(t),phr=i(Hy),Qd=n(Hy,"P",{});var Nle=s(Qd);_hr=r(Nle,`Note:
Loading a model from its configuration file does `),jMe=n(Nle,"STRONG",{});var XDt=s(jMe);bhr=r(XDt,"not"),XDt.forEach(t),vhr=r(Nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(Nle,"A",{href:!0});var zDt=s(EJ);Fhr=r(zDt,"from_pretrained()"),zDt.forEach(t),Thr=r(Nle," to load the model weights."),Nle.forEach(t),Mhr=i(Hy),T(rE.$$.fragment,Hy),Hy.forEach(t),Ehr=i(Bl),io=n(Bl,"DIV",{class:!0});var xa=s(io);T(a$.$$.fragment,xa),Chr=i(xa),DMe=n(xa,"P",{});var QDt=s(DMe);whr=r(QDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QDt.forEach(t),Ahr=i(xa),nn=n(xa,"P",{});var Jy=s(nn);Lhr=r(Jy,"The model class to instantiate is selected based on the "),GMe=n(Jy,"CODE",{});var WDt=s(GMe);yhr=r(WDt,"model_type"),WDt.forEach(t),xhr=r(Jy,` property of the config object (either
passed as an argument or loaded from `),OMe=n(Jy,"CODE",{});var UDt=s(OMe);$hr=r(UDt,"pretrained_model_name_or_path"),UDt.forEach(t),khr=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(Jy,"CODE",{});var HDt=s(VMe);Shr=r(HDt,"pretrained_model_name_or_path"),HDt.forEach(t),Rhr=r(Jy,":"),Jy.forEach(t),Phr=i(xa),V=n(xa,"UL",{});var X=s(V);tE=n(X,"LI",{});var YVe=s(tE);XMe=n(YVe,"STRONG",{});var JDt=s(XMe);Bhr=r(JDt,"albert"),JDt.forEach(t),Ihr=r(YVe," \u2014 "),CJ=n(YVe,"A",{href:!0});var YDt=s(CJ);Nhr=r(YDt,"AlbertForQuestionAnswering"),YDt.forEach(t),qhr=r(YVe," (ALBERT model)"),YVe.forEach(t),jhr=i(X),aE=n(X,"LI",{});var KVe=s(aE);zMe=n(KVe,"STRONG",{});var KDt=s(zMe);Dhr=r(KDt,"bart"),KDt.forEach(t),Ghr=r(KVe," \u2014 "),wJ=n(KVe,"A",{href:!0});var ZDt=s(wJ);Ohr=r(ZDt,"BartForQuestionAnswering"),ZDt.forEach(t),Vhr=r(KVe," (BART model)"),KVe.forEach(t),Xhr=i(X),nE=n(X,"LI",{});var ZVe=s(nE);QMe=n(ZVe,"STRONG",{});var eGt=s(QMe);zhr=r(eGt,"bert"),eGt.forEach(t),Qhr=r(ZVe," \u2014 "),AJ=n(ZVe,"A",{href:!0});var oGt=s(AJ);Whr=r(oGt,"BertForQuestionAnswering"),oGt.forEach(t),Uhr=r(ZVe," (BERT model)"),ZVe.forEach(t),Hhr=i(X),sE=n(X,"LI",{});var eXe=s(sE);WMe=n(eXe,"STRONG",{});var rGt=s(WMe);Jhr=r(rGt,"big_bird"),rGt.forEach(t),Yhr=r(eXe," \u2014 "),LJ=n(eXe,"A",{href:!0});var tGt=s(LJ);Khr=r(tGt,"BigBirdForQuestionAnswering"),tGt.forEach(t),Zhr=r(eXe," (BigBird model)"),eXe.forEach(t),eur=i(X),lE=n(X,"LI",{});var oXe=s(lE);UMe=n(oXe,"STRONG",{});var aGt=s(UMe);our=r(aGt,"bigbird_pegasus"),aGt.forEach(t),rur=r(oXe," \u2014 "),yJ=n(oXe,"A",{href:!0});var nGt=s(yJ);tur=r(nGt,"BigBirdPegasusForQuestionAnswering"),nGt.forEach(t),aur=r(oXe," (BigBird-Pegasus model)"),oXe.forEach(t),nur=i(X),iE=n(X,"LI",{});var rXe=s(iE);HMe=n(rXe,"STRONG",{});var sGt=s(HMe);sur=r(sGt,"camembert"),sGt.forEach(t),lur=r(rXe," \u2014 "),xJ=n(rXe,"A",{href:!0});var lGt=s(xJ);iur=r(lGt,"CamembertForQuestionAnswering"),lGt.forEach(t),dur=r(rXe," (CamemBERT model)"),rXe.forEach(t),cur=i(X),dE=n(X,"LI",{});var tXe=s(dE);JMe=n(tXe,"STRONG",{});var iGt=s(JMe);mur=r(iGt,"canine"),iGt.forEach(t),fur=r(tXe," \u2014 "),$J=n(tXe,"A",{href:!0});var dGt=s($J);gur=r(dGt,"CanineForQuestionAnswering"),dGt.forEach(t),hur=r(tXe," (CANINE model)"),tXe.forEach(t),uur=i(X),cE=n(X,"LI",{});var aXe=s(cE);YMe=n(aXe,"STRONG",{});var cGt=s(YMe);pur=r(cGt,"convbert"),cGt.forEach(t),_ur=r(aXe," \u2014 "),kJ=n(aXe,"A",{href:!0});var mGt=s(kJ);bur=r(mGt,"ConvBertForQuestionAnswering"),mGt.forEach(t),vur=r(aXe," (ConvBERT model)"),aXe.forEach(t),Fur=i(X),mE=n(X,"LI",{});var nXe=s(mE);KMe=n(nXe,"STRONG",{});var fGt=s(KMe);Tur=r(fGt,"data2vec-text"),fGt.forEach(t),Mur=r(nXe," \u2014 "),SJ=n(nXe,"A",{href:!0});var gGt=s(SJ);Eur=r(gGt,"Data2VecTextForQuestionAnswering"),gGt.forEach(t),Cur=r(nXe," (Data2VecText model)"),nXe.forEach(t),wur=i(X),fE=n(X,"LI",{});var sXe=s(fE);ZMe=n(sXe,"STRONG",{});var hGt=s(ZMe);Aur=r(hGt,"deberta"),hGt.forEach(t),Lur=r(sXe," \u2014 "),RJ=n(sXe,"A",{href:!0});var uGt=s(RJ);yur=r(uGt,"DebertaForQuestionAnswering"),uGt.forEach(t),xur=r(sXe," (DeBERTa model)"),sXe.forEach(t),$ur=i(X),gE=n(X,"LI",{});var lXe=s(gE);eEe=n(lXe,"STRONG",{});var pGt=s(eEe);kur=r(pGt,"deberta-v2"),pGt.forEach(t),Sur=r(lXe," \u2014 "),PJ=n(lXe,"A",{href:!0});var _Gt=s(PJ);Rur=r(_Gt,"DebertaV2ForQuestionAnswering"),_Gt.forEach(t),Pur=r(lXe," (DeBERTa-v2 model)"),lXe.forEach(t),Bur=i(X),hE=n(X,"LI",{});var iXe=s(hE);oEe=n(iXe,"STRONG",{});var bGt=s(oEe);Iur=r(bGt,"distilbert"),bGt.forEach(t),Nur=r(iXe," \u2014 "),BJ=n(iXe,"A",{href:!0});var vGt=s(BJ);qur=r(vGt,"DistilBertForQuestionAnswering"),vGt.forEach(t),jur=r(iXe," (DistilBERT model)"),iXe.forEach(t),Dur=i(X),uE=n(X,"LI",{});var dXe=s(uE);rEe=n(dXe,"STRONG",{});var FGt=s(rEe);Gur=r(FGt,"electra"),FGt.forEach(t),Our=r(dXe," \u2014 "),IJ=n(dXe,"A",{href:!0});var TGt=s(IJ);Vur=r(TGt,"ElectraForQuestionAnswering"),TGt.forEach(t),Xur=r(dXe," (ELECTRA model)"),dXe.forEach(t),zur=i(X),pE=n(X,"LI",{});var cXe=s(pE);tEe=n(cXe,"STRONG",{});var MGt=s(tEe);Qur=r(MGt,"ernie"),MGt.forEach(t),Wur=r(cXe," \u2014 "),NJ=n(cXe,"A",{href:!0});var EGt=s(NJ);Uur=r(EGt,"ErnieForQuestionAnswering"),EGt.forEach(t),Hur=r(cXe," (ERNIE model)"),cXe.forEach(t),Jur=i(X),_E=n(X,"LI",{});var mXe=s(_E);aEe=n(mXe,"STRONG",{});var CGt=s(aEe);Yur=r(CGt,"flaubert"),CGt.forEach(t),Kur=r(mXe," \u2014 "),qJ=n(mXe,"A",{href:!0});var wGt=s(qJ);Zur=r(wGt,"FlaubertForQuestionAnsweringSimple"),wGt.forEach(t),epr=r(mXe," (FlauBERT model)"),mXe.forEach(t),opr=i(X),bE=n(X,"LI",{});var fXe=s(bE);nEe=n(fXe,"STRONG",{});var AGt=s(nEe);rpr=r(AGt,"fnet"),AGt.forEach(t),tpr=r(fXe," \u2014 "),jJ=n(fXe,"A",{href:!0});var LGt=s(jJ);apr=r(LGt,"FNetForQuestionAnswering"),LGt.forEach(t),npr=r(fXe," (FNet model)"),fXe.forEach(t),spr=i(X),vE=n(X,"LI",{});var gXe=s(vE);sEe=n(gXe,"STRONG",{});var yGt=s(sEe);lpr=r(yGt,"funnel"),yGt.forEach(t),ipr=r(gXe," \u2014 "),DJ=n(gXe,"A",{href:!0});var xGt=s(DJ);dpr=r(xGt,"FunnelForQuestionAnswering"),xGt.forEach(t),cpr=r(gXe," (Funnel Transformer model)"),gXe.forEach(t),mpr=i(X),FE=n(X,"LI",{});var hXe=s(FE);lEe=n(hXe,"STRONG",{});var $Gt=s(lEe);fpr=r($Gt,"gptj"),$Gt.forEach(t),gpr=r(hXe," \u2014 "),GJ=n(hXe,"A",{href:!0});var kGt=s(GJ);hpr=r(kGt,"GPTJForQuestionAnswering"),kGt.forEach(t),upr=r(hXe," (GPT-J model)"),hXe.forEach(t),ppr=i(X),TE=n(X,"LI",{});var uXe=s(TE);iEe=n(uXe,"STRONG",{});var SGt=s(iEe);_pr=r(SGt,"ibert"),SGt.forEach(t),bpr=r(uXe," \u2014 "),OJ=n(uXe,"A",{href:!0});var RGt=s(OJ);vpr=r(RGt,"IBertForQuestionAnswering"),RGt.forEach(t),Fpr=r(uXe," (I-BERT model)"),uXe.forEach(t),Tpr=i(X),ME=n(X,"LI",{});var pXe=s(ME);dEe=n(pXe,"STRONG",{});var PGt=s(dEe);Mpr=r(PGt,"layoutlmv2"),PGt.forEach(t),Epr=r(pXe," \u2014 "),VJ=n(pXe,"A",{href:!0});var BGt=s(VJ);Cpr=r(BGt,"LayoutLMv2ForQuestionAnswering"),BGt.forEach(t),wpr=r(pXe," (LayoutLMv2 model)"),pXe.forEach(t),Apr=i(X),EE=n(X,"LI",{});var _Xe=s(EE);cEe=n(_Xe,"STRONG",{});var IGt=s(cEe);Lpr=r(IGt,"layoutlmv3"),IGt.forEach(t),ypr=r(_Xe," \u2014 "),XJ=n(_Xe,"A",{href:!0});var NGt=s(XJ);xpr=r(NGt,"LayoutLMv3ForQuestionAnswering"),NGt.forEach(t),$pr=r(_Xe," (LayoutLMv3 model)"),_Xe.forEach(t),kpr=i(X),CE=n(X,"LI",{});var bXe=s(CE);mEe=n(bXe,"STRONG",{});var qGt=s(mEe);Spr=r(qGt,"led"),qGt.forEach(t),Rpr=r(bXe," \u2014 "),zJ=n(bXe,"A",{href:!0});var jGt=s(zJ);Ppr=r(jGt,"LEDForQuestionAnswering"),jGt.forEach(t),Bpr=r(bXe," (LED model)"),bXe.forEach(t),Ipr=i(X),wE=n(X,"LI",{});var vXe=s(wE);fEe=n(vXe,"STRONG",{});var DGt=s(fEe);Npr=r(DGt,"longformer"),DGt.forEach(t),qpr=r(vXe," \u2014 "),QJ=n(vXe,"A",{href:!0});var GGt=s(QJ);jpr=r(GGt,"LongformerForQuestionAnswering"),GGt.forEach(t),Dpr=r(vXe," (Longformer model)"),vXe.forEach(t),Gpr=i(X),AE=n(X,"LI",{});var FXe=s(AE);gEe=n(FXe,"STRONG",{});var OGt=s(gEe);Opr=r(OGt,"luke"),OGt.forEach(t),Vpr=r(FXe," \u2014 "),WJ=n(FXe,"A",{href:!0});var VGt=s(WJ);Xpr=r(VGt,"LukeForQuestionAnswering"),VGt.forEach(t),zpr=r(FXe," (LUKE model)"),FXe.forEach(t),Qpr=i(X),LE=n(X,"LI",{});var TXe=s(LE);hEe=n(TXe,"STRONG",{});var XGt=s(hEe);Wpr=r(XGt,"lxmert"),XGt.forEach(t),Upr=r(TXe," \u2014 "),UJ=n(TXe,"A",{href:!0});var zGt=s(UJ);Hpr=r(zGt,"LxmertForQuestionAnswering"),zGt.forEach(t),Jpr=r(TXe," (LXMERT model)"),TXe.forEach(t),Ypr=i(X),yE=n(X,"LI",{});var MXe=s(yE);uEe=n(MXe,"STRONG",{});var QGt=s(uEe);Kpr=r(QGt,"mbart"),QGt.forEach(t),Zpr=r(MXe," \u2014 "),HJ=n(MXe,"A",{href:!0});var WGt=s(HJ);e_r=r(WGt,"MBartForQuestionAnswering"),WGt.forEach(t),o_r=r(MXe," (mBART model)"),MXe.forEach(t),r_r=i(X),xE=n(X,"LI",{});var EXe=s(xE);pEe=n(EXe,"STRONG",{});var UGt=s(pEe);t_r=r(UGt,"megatron-bert"),UGt.forEach(t),a_r=r(EXe," \u2014 "),JJ=n(EXe,"A",{href:!0});var HGt=s(JJ);n_r=r(HGt,"MegatronBertForQuestionAnswering"),HGt.forEach(t),s_r=r(EXe," (Megatron-BERT model)"),EXe.forEach(t),l_r=i(X),$E=n(X,"LI",{});var CXe=s($E);_Ee=n(CXe,"STRONG",{});var JGt=s(_Ee);i_r=r(JGt,"mobilebert"),JGt.forEach(t),d_r=r(CXe," \u2014 "),YJ=n(CXe,"A",{href:!0});var YGt=s(YJ);c_r=r(YGt,"MobileBertForQuestionAnswering"),YGt.forEach(t),m_r=r(CXe," (MobileBERT model)"),CXe.forEach(t),f_r=i(X),kE=n(X,"LI",{});var wXe=s(kE);bEe=n(wXe,"STRONG",{});var KGt=s(bEe);g_r=r(KGt,"mpnet"),KGt.forEach(t),h_r=r(wXe," \u2014 "),KJ=n(wXe,"A",{href:!0});var ZGt=s(KJ);u_r=r(ZGt,"MPNetForQuestionAnswering"),ZGt.forEach(t),p_r=r(wXe," (MPNet model)"),wXe.forEach(t),__r=i(X),SE=n(X,"LI",{});var AXe=s(SE);vEe=n(AXe,"STRONG",{});var eOt=s(vEe);b_r=r(eOt,"mvp"),eOt.forEach(t),v_r=r(AXe," \u2014 "),ZJ=n(AXe,"A",{href:!0});var oOt=s(ZJ);F_r=r(oOt,"MvpForQuestionAnswering"),oOt.forEach(t),T_r=r(AXe," (MVP model)"),AXe.forEach(t),M_r=i(X),RE=n(X,"LI",{});var LXe=s(RE);FEe=n(LXe,"STRONG",{});var rOt=s(FEe);E_r=r(rOt,"nezha"),rOt.forEach(t),C_r=r(LXe," \u2014 "),eY=n(LXe,"A",{href:!0});var tOt=s(eY);w_r=r(tOt,"NezhaForQuestionAnswering"),tOt.forEach(t),A_r=r(LXe," (Nezha model)"),LXe.forEach(t),L_r=i(X),PE=n(X,"LI",{});var yXe=s(PE);TEe=n(yXe,"STRONG",{});var aOt=s(TEe);y_r=r(aOt,"nystromformer"),aOt.forEach(t),x_r=r(yXe," \u2014 "),oY=n(yXe,"A",{href:!0});var nOt=s(oY);$_r=r(nOt,"NystromformerForQuestionAnswering"),nOt.forEach(t),k_r=r(yXe," (Nystr\xF6mformer model)"),yXe.forEach(t),S_r=i(X),BE=n(X,"LI",{});var xXe=s(BE);MEe=n(xXe,"STRONG",{});var sOt=s(MEe);R_r=r(sOt,"qdqbert"),sOt.forEach(t),P_r=r(xXe," \u2014 "),rY=n(xXe,"A",{href:!0});var lOt=s(rY);B_r=r(lOt,"QDQBertForQuestionAnswering"),lOt.forEach(t),I_r=r(xXe," (QDQBert model)"),xXe.forEach(t),N_r=i(X),IE=n(X,"LI",{});var $Xe=s(IE);EEe=n($Xe,"STRONG",{});var iOt=s(EEe);q_r=r(iOt,"reformer"),iOt.forEach(t),j_r=r($Xe," \u2014 "),tY=n($Xe,"A",{href:!0});var dOt=s(tY);D_r=r(dOt,"ReformerForQuestionAnswering"),dOt.forEach(t),G_r=r($Xe," (Reformer model)"),$Xe.forEach(t),O_r=i(X),NE=n(X,"LI",{});var kXe=s(NE);CEe=n(kXe,"STRONG",{});var cOt=s(CEe);V_r=r(cOt,"rembert"),cOt.forEach(t),X_r=r(kXe," \u2014 "),aY=n(kXe,"A",{href:!0});var mOt=s(aY);z_r=r(mOt,"RemBertForQuestionAnswering"),mOt.forEach(t),Q_r=r(kXe," (RemBERT model)"),kXe.forEach(t),W_r=i(X),qE=n(X,"LI",{});var SXe=s(qE);wEe=n(SXe,"STRONG",{});var fOt=s(wEe);U_r=r(fOt,"roberta"),fOt.forEach(t),H_r=r(SXe," \u2014 "),nY=n(SXe,"A",{href:!0});var gOt=s(nY);J_r=r(gOt,"RobertaForQuestionAnswering"),gOt.forEach(t),Y_r=r(SXe," (RoBERTa model)"),SXe.forEach(t),K_r=i(X),jE=n(X,"LI",{});var RXe=s(jE);AEe=n(RXe,"STRONG",{});var hOt=s(AEe);Z_r=r(hOt,"roformer"),hOt.forEach(t),ebr=r(RXe," \u2014 "),sY=n(RXe,"A",{href:!0});var uOt=s(sY);obr=r(uOt,"RoFormerForQuestionAnswering"),uOt.forEach(t),rbr=r(RXe," (RoFormer model)"),RXe.forEach(t),tbr=i(X),DE=n(X,"LI",{});var PXe=s(DE);LEe=n(PXe,"STRONG",{});var pOt=s(LEe);abr=r(pOt,"splinter"),pOt.forEach(t),nbr=r(PXe," \u2014 "),lY=n(PXe,"A",{href:!0});var _Ot=s(lY);sbr=r(_Ot,"SplinterForQuestionAnswering"),_Ot.forEach(t),lbr=r(PXe," (Splinter model)"),PXe.forEach(t),ibr=i(X),GE=n(X,"LI",{});var BXe=s(GE);yEe=n(BXe,"STRONG",{});var bOt=s(yEe);dbr=r(bOt,"squeezebert"),bOt.forEach(t),cbr=r(BXe," \u2014 "),iY=n(BXe,"A",{href:!0});var vOt=s(iY);mbr=r(vOt,"SqueezeBertForQuestionAnswering"),vOt.forEach(t),fbr=r(BXe," (SqueezeBERT model)"),BXe.forEach(t),gbr=i(X),OE=n(X,"LI",{});var IXe=s(OE);xEe=n(IXe,"STRONG",{});var FOt=s(xEe);hbr=r(FOt,"xlm"),FOt.forEach(t),ubr=r(IXe," \u2014 "),dY=n(IXe,"A",{href:!0});var TOt=s(dY);pbr=r(TOt,"XLMForQuestionAnsweringSimple"),TOt.forEach(t),_br=r(IXe," (XLM model)"),IXe.forEach(t),bbr=i(X),VE=n(X,"LI",{});var NXe=s(VE);$Ee=n(NXe,"STRONG",{});var MOt=s($Ee);vbr=r(MOt,"xlm-roberta"),MOt.forEach(t),Fbr=r(NXe," \u2014 "),cY=n(NXe,"A",{href:!0});var EOt=s(cY);Tbr=r(EOt,"XLMRobertaForQuestionAnswering"),EOt.forEach(t),Mbr=r(NXe," (XLM-RoBERTa model)"),NXe.forEach(t),Ebr=i(X),XE=n(X,"LI",{});var qXe=s(XE);kEe=n(qXe,"STRONG",{});var COt=s(kEe);Cbr=r(COt,"xlm-roberta-xl"),COt.forEach(t),wbr=r(qXe," \u2014 "),mY=n(qXe,"A",{href:!0});var wOt=s(mY);Abr=r(wOt,"XLMRobertaXLForQuestionAnswering"),wOt.forEach(t),Lbr=r(qXe," (XLM-RoBERTa-XL model)"),qXe.forEach(t),ybr=i(X),zE=n(X,"LI",{});var jXe=s(zE);SEe=n(jXe,"STRONG",{});var AOt=s(SEe);xbr=r(AOt,"xlnet"),AOt.forEach(t),$br=r(jXe," \u2014 "),fY=n(jXe,"A",{href:!0});var LOt=s(fY);kbr=r(LOt,"XLNetForQuestionAnsweringSimple"),LOt.forEach(t),Sbr=r(jXe," (XLNet model)"),jXe.forEach(t),Rbr=i(X),QE=n(X,"LI",{});var DXe=s(QE);REe=n(DXe,"STRONG",{});var yOt=s(REe);Pbr=r(yOt,"yoso"),yOt.forEach(t),Bbr=r(DXe," \u2014 "),gY=n(DXe,"A",{href:!0});var xOt=s(gY);Ibr=r(xOt,"YosoForQuestionAnswering"),xOt.forEach(t),Nbr=r(DXe," (YOSO model)"),DXe.forEach(t),X.forEach(t),qbr=i(xa),WE=n(xa,"P",{});var GXe=s(WE);jbr=r(GXe,"The model is set in evaluation mode by default using "),PEe=n(GXe,"CODE",{});var $Ot=s(PEe);Dbr=r($Ot,"model.eval()"),$Ot.forEach(t),Gbr=r(GXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BEe=n(GXe,"CODE",{});var kOt=s(BEe);Obr=r(kOt,"model.train()"),kOt.forEach(t),GXe.forEach(t),Vbr=i(xa),T(UE.$$.fragment,xa),xa.forEach(t),Bl.forEach(t),nZe=i(m),Wd=n(m,"H2",{class:!0});var voo=s(Wd);HE=n(voo,"A",{id:!0,class:!0,href:!0});var SOt=s(HE);IEe=n(SOt,"SPAN",{});var ROt=s(IEe);T(n$.$$.fragment,ROt),ROt.forEach(t),SOt.forEach(t),Xbr=i(voo),NEe=n(voo,"SPAN",{});var POt=s(NEe);zbr=r(POt,"AutoModelForTableQuestionAnswering"),POt.forEach(t),voo.forEach(t),sZe=i(m),Xo=n(m,"DIV",{class:!0});var Il=s(Xo);T(s$.$$.fragment,Il),Qbr=i(Il),Ud=n(Il,"P",{});var qle=s(Ud);Wbr=r(qle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hY=n(qle,"A",{href:!0});var BOt=s(hY);Ubr=r(BOt,"from_pretrained()"),BOt.forEach(t),Hbr=r(qle," class method or the "),uY=n(qle,"A",{href:!0});var IOt=s(uY);Jbr=r(IOt,"from_config()"),IOt.forEach(t),Ybr=r(qle,` class
method.`),qle.forEach(t),Kbr=i(Il),l$=n(Il,"P",{});var Foo=s(l$);Zbr=r(Foo,"This class cannot be instantiated directly using "),qEe=n(Foo,"CODE",{});var NOt=s(qEe);e2r=r(NOt,"__init__()"),NOt.forEach(t),o2r=r(Foo," (throws an error)."),Foo.forEach(t),r2r=i(Il),Lt=n(Il,"DIV",{class:!0});var Yy=s(Lt);T(i$.$$.fragment,Yy),t2r=i(Yy),jEe=n(Yy,"P",{});var qOt=s(jEe);a2r=r(qOt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qOt.forEach(t),n2r=i(Yy),Hd=n(Yy,"P",{});var jle=s(Hd);s2r=r(jle,`Note:
Loading a model from its configuration file does `),DEe=n(jle,"STRONG",{});var jOt=s(DEe);l2r=r(jOt,"not"),jOt.forEach(t),i2r=r(jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(jle,"A",{href:!0});var DOt=s(pY);d2r=r(DOt,"from_pretrained()"),DOt.forEach(t),c2r=r(jle," to load the model weights."),jle.forEach(t),m2r=i(Yy),T(JE.$$.fragment,Yy),Yy.forEach(t),f2r=i(Il),co=n(Il,"DIV",{class:!0});var $a=s(co);T(d$.$$.fragment,$a),g2r=i($a),GEe=n($a,"P",{});var GOt=s(GEe);h2r=r(GOt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GOt.forEach(t),u2r=i($a),sn=n($a,"P",{});var Ky=s(sn);p2r=r(Ky,"The model class to instantiate is selected based on the "),OEe=n(Ky,"CODE",{});var OOt=s(OEe);_2r=r(OOt,"model_type"),OOt.forEach(t),b2r=r(Ky,` property of the config object (either
passed as an argument or loaded from `),VEe=n(Ky,"CODE",{});var VOt=s(VEe);v2r=r(VOt,"pretrained_model_name_or_path"),VOt.forEach(t),F2r=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XEe=n(Ky,"CODE",{});var XOt=s(XEe);T2r=r(XOt,"pretrained_model_name_or_path"),XOt.forEach(t),M2r=r(Ky,":"),Ky.forEach(t),E2r=i($a),zEe=n($a,"UL",{});var zOt=s(zEe);YE=n(zOt,"LI",{});var OXe=s(YE);QEe=n(OXe,"STRONG",{});var QOt=s(QEe);C2r=r(QOt,"tapas"),QOt.forEach(t),w2r=r(OXe," \u2014 "),_Y=n(OXe,"A",{href:!0});var WOt=s(_Y);A2r=r(WOt,"TapasForQuestionAnswering"),WOt.forEach(t),L2r=r(OXe," (TAPAS model)"),OXe.forEach(t),zOt.forEach(t),y2r=i($a),KE=n($a,"P",{});var VXe=s(KE);x2r=r(VXe,"The model is set in evaluation mode by default using "),WEe=n(VXe,"CODE",{});var UOt=s(WEe);$2r=r(UOt,"model.eval()"),UOt.forEach(t),k2r=r(VXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UEe=n(VXe,"CODE",{});var HOt=s(UEe);S2r=r(HOt,"model.train()"),HOt.forEach(t),VXe.forEach(t),R2r=i($a),T(ZE.$$.fragment,$a),$a.forEach(t),Il.forEach(t),lZe=i(m),Jd=n(m,"H2",{class:!0});var Too=s(Jd);e4=n(Too,"A",{id:!0,class:!0,href:!0});var JOt=s(e4);HEe=n(JOt,"SPAN",{});var YOt=s(HEe);T(c$.$$.fragment,YOt),YOt.forEach(t),JOt.forEach(t),P2r=i(Too),JEe=n(Too,"SPAN",{});var KOt=s(JEe);B2r=r(KOt,"AutoModelForDocumentQuestionAnswering"),KOt.forEach(t),Too.forEach(t),iZe=i(m),zo=n(m,"DIV",{class:!0});var Nl=s(zo);T(m$.$$.fragment,Nl),I2r=i(Nl),Yd=n(Nl,"P",{});var Dle=s(Yd);N2r=r(Dle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),bY=n(Dle,"A",{href:!0});var ZOt=s(bY);q2r=r(ZOt,"from_pretrained()"),ZOt.forEach(t),j2r=r(Dle," class method or the "),vY=n(Dle,"A",{href:!0});var eVt=s(vY);D2r=r(eVt,"from_config()"),eVt.forEach(t),G2r=r(Dle,` class
method.`),Dle.forEach(t),O2r=i(Nl),f$=n(Nl,"P",{});var Moo=s(f$);V2r=r(Moo,"This class cannot be instantiated directly using "),YEe=n(Moo,"CODE",{});var oVt=s(YEe);X2r=r(oVt,"__init__()"),oVt.forEach(t),z2r=r(Moo," (throws an error)."),Moo.forEach(t),Q2r=i(Nl),yt=n(Nl,"DIV",{class:!0});var Zy=s(yt);T(g$.$$.fragment,Zy),W2r=i(Zy),KEe=n(Zy,"P",{});var rVt=s(KEe);U2r=r(rVt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),rVt.forEach(t),H2r=i(Zy),Kd=n(Zy,"P",{});var Gle=s(Kd);J2r=r(Gle,`Note:
Loading a model from its configuration file does `),ZEe=n(Gle,"STRONG",{});var tVt=s(ZEe);Y2r=r(tVt,"not"),tVt.forEach(t),K2r=r(Gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(Gle,"A",{href:!0});var aVt=s(FY);Z2r=r(aVt,"from_pretrained()"),aVt.forEach(t),e1r=r(Gle," to load the model weights."),Gle.forEach(t),o1r=i(Zy),T(o4.$$.fragment,Zy),Zy.forEach(t),r1r=i(Nl),mo=n(Nl,"DIV",{class:!0});var ka=s(mo);T(h$.$$.fragment,ka),t1r=i(ka),e4e=n(ka,"P",{});var nVt=s(e4e);a1r=r(nVt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),nVt.forEach(t),n1r=i(ka),ln=n(ka,"P",{});var e8=s(ln);s1r=r(e8,"The model class to instantiate is selected based on the "),o4e=n(e8,"CODE",{});var sVt=s(o4e);l1r=r(sVt,"model_type"),sVt.forEach(t),i1r=r(e8,` property of the config object (either
passed as an argument or loaded from `),r4e=n(e8,"CODE",{});var lVt=s(r4e);d1r=r(lVt,"pretrained_model_name_or_path"),lVt.forEach(t),c1r=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(e8,"CODE",{});var iVt=s(t4e);m1r=r(iVt,"pretrained_model_name_or_path"),iVt.forEach(t),f1r=r(e8,":"),e8.forEach(t),g1r=i(ka),Zd=n(ka,"UL",{});var Ole=s(Zd);r4=n(Ole,"LI",{});var XXe=s(r4);a4e=n(XXe,"STRONG",{});var dVt=s(a4e);h1r=r(dVt,"layoutlm"),dVt.forEach(t),u1r=r(XXe," \u2014 "),TY=n(XXe,"A",{href:!0});var cVt=s(TY);p1r=r(cVt,"LayoutLMForQuestionAnswering"),cVt.forEach(t),_1r=r(XXe," (LayoutLM model)"),XXe.forEach(t),b1r=i(Ole),t4=n(Ole,"LI",{});var zXe=s(t4);n4e=n(zXe,"STRONG",{});var mVt=s(n4e);v1r=r(mVt,"layoutlmv2"),mVt.forEach(t),F1r=r(zXe," \u2014 "),MY=n(zXe,"A",{href:!0});var fVt=s(MY);T1r=r(fVt,"LayoutLMv2ForQuestionAnswering"),fVt.forEach(t),M1r=r(zXe," (LayoutLMv2 model)"),zXe.forEach(t),E1r=i(Ole),a4=n(Ole,"LI",{});var QXe=s(a4);s4e=n(QXe,"STRONG",{});var gVt=s(s4e);C1r=r(gVt,"layoutlmv3"),gVt.forEach(t),w1r=r(QXe," \u2014 "),EY=n(QXe,"A",{href:!0});var hVt=s(EY);A1r=r(hVt,"LayoutLMv3ForQuestionAnswering"),hVt.forEach(t),L1r=r(QXe," (LayoutLMv3 model)"),QXe.forEach(t),Ole.forEach(t),y1r=i(ka),n4=n(ka,"P",{});var WXe=s(n4);x1r=r(WXe,"The model is set in evaluation mode by default using "),l4e=n(WXe,"CODE",{});var uVt=s(l4e);$1r=r(uVt,"model.eval()"),uVt.forEach(t),k1r=r(WXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=n(WXe,"CODE",{});var pVt=s(i4e);S1r=r(pVt,"model.train()"),pVt.forEach(t),WXe.forEach(t),R1r=i(ka),T(s4.$$.fragment,ka),ka.forEach(t),Nl.forEach(t),dZe=i(m),ec=n(m,"H2",{class:!0});var Eoo=s(ec);l4=n(Eoo,"A",{id:!0,class:!0,href:!0});var _Vt=s(l4);d4e=n(_Vt,"SPAN",{});var bVt=s(d4e);T(u$.$$.fragment,bVt),bVt.forEach(t),_Vt.forEach(t),P1r=i(Eoo),c4e=n(Eoo,"SPAN",{});var vVt=s(c4e);B1r=r(vVt,"AutoModelForImageClassification"),vVt.forEach(t),Eoo.forEach(t),cZe=i(m),Qo=n(m,"DIV",{class:!0});var ql=s(Qo);T(p$.$$.fragment,ql),I1r=i(ql),oc=n(ql,"P",{});var Vle=s(oc);N1r=r(Vle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CY=n(Vle,"A",{href:!0});var FVt=s(CY);q1r=r(FVt,"from_pretrained()"),FVt.forEach(t),j1r=r(Vle," class method or the "),wY=n(Vle,"A",{href:!0});var TVt=s(wY);D1r=r(TVt,"from_config()"),TVt.forEach(t),G1r=r(Vle,` class
method.`),Vle.forEach(t),O1r=i(ql),_$=n(ql,"P",{});var Coo=s(_$);V1r=r(Coo,"This class cannot be instantiated directly using "),m4e=n(Coo,"CODE",{});var MVt=s(m4e);X1r=r(MVt,"__init__()"),MVt.forEach(t),z1r=r(Coo," (throws an error)."),Coo.forEach(t),Q1r=i(ql),xt=n(ql,"DIV",{class:!0});var o8=s(xt);T(b$.$$.fragment,o8),W1r=i(o8),f4e=n(o8,"P",{});var EVt=s(f4e);U1r=r(EVt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EVt.forEach(t),H1r=i(o8),rc=n(o8,"P",{});var Xle=s(rc);J1r=r(Xle,`Note:
Loading a model from its configuration file does `),g4e=n(Xle,"STRONG",{});var CVt=s(g4e);Y1r=r(CVt,"not"),CVt.forEach(t),K1r=r(Xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),AY=n(Xle,"A",{href:!0});var wVt=s(AY);Z1r=r(wVt,"from_pretrained()"),wVt.forEach(t),evr=r(Xle," to load the model weights."),Xle.forEach(t),ovr=i(o8),T(i4.$$.fragment,o8),o8.forEach(t),rvr=i(ql),fo=n(ql,"DIV",{class:!0});var Sa=s(fo);T(v$.$$.fragment,Sa),tvr=i(Sa),h4e=n(Sa,"P",{});var AVt=s(h4e);avr=r(AVt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AVt.forEach(t),nvr=i(Sa),dn=n(Sa,"P",{});var r8=s(dn);svr=r(r8,"The model class to instantiate is selected based on the "),u4e=n(r8,"CODE",{});var LVt=s(u4e);lvr=r(LVt,"model_type"),LVt.forEach(t),ivr=r(r8,` property of the config object (either
passed as an argument or loaded from `),p4e=n(r8,"CODE",{});var yVt=s(p4e);dvr=r(yVt,"pretrained_model_name_or_path"),yVt.forEach(t),cvr=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(r8,"CODE",{});var xVt=s(_4e);mvr=r(xVt,"pretrained_model_name_or_path"),xVt.forEach(t),fvr=r(r8,":"),r8.forEach(t),gvr=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);d4=n(Fe,"LI",{});var UXe=s(d4);b4e=n(UXe,"STRONG",{});var $Vt=s(b4e);hvr=r($Vt,"beit"),$Vt.forEach(t),uvr=r(UXe," \u2014 "),LY=n(UXe,"A",{href:!0});var kVt=s(LY);pvr=r(kVt,"BeitForImageClassification"),kVt.forEach(t),_vr=r(UXe," (BEiT model)"),UXe.forEach(t),bvr=i(Fe),c4=n(Fe,"LI",{});var HXe=s(c4);v4e=n(HXe,"STRONG",{});var SVt=s(v4e);vvr=r(SVt,"convnext"),SVt.forEach(t),Fvr=r(HXe," \u2014 "),yY=n(HXe,"A",{href:!0});var RVt=s(yY);Tvr=r(RVt,"ConvNextForImageClassification"),RVt.forEach(t),Mvr=r(HXe," (ConvNeXT model)"),HXe.forEach(t),Evr=i(Fe),m4=n(Fe,"LI",{});var JXe=s(m4);F4e=n(JXe,"STRONG",{});var PVt=s(F4e);Cvr=r(PVt,"cvt"),PVt.forEach(t),wvr=r(JXe," \u2014 "),xY=n(JXe,"A",{href:!0});var BVt=s(xY);Avr=r(BVt,"CvtForImageClassification"),BVt.forEach(t),Lvr=r(JXe," (CvT model)"),JXe.forEach(t),yvr=i(Fe),f4=n(Fe,"LI",{});var YXe=s(f4);T4e=n(YXe,"STRONG",{});var IVt=s(T4e);xvr=r(IVt,"data2vec-vision"),IVt.forEach(t),$vr=r(YXe," \u2014 "),$Y=n(YXe,"A",{href:!0});var NVt=s($Y);kvr=r(NVt,"Data2VecVisionForImageClassification"),NVt.forEach(t),Svr=r(YXe," (Data2VecVision model)"),YXe.forEach(t),Rvr=i(Fe),bl=n(Fe,"LI",{});var RB=s(bl);M4e=n(RB,"STRONG",{});var qVt=s(M4e);Pvr=r(qVt,"deit"),qVt.forEach(t),Bvr=r(RB," \u2014 "),kY=n(RB,"A",{href:!0});var jVt=s(kY);Ivr=r(jVt,"DeiTForImageClassification"),jVt.forEach(t),Nvr=r(RB," or "),SY=n(RB,"A",{href:!0});var DVt=s(SY);qvr=r(DVt,"DeiTForImageClassificationWithTeacher"),DVt.forEach(t),jvr=r(RB," (DeiT model)"),RB.forEach(t),Dvr=i(Fe),g4=n(Fe,"LI",{});var KXe=s(g4);E4e=n(KXe,"STRONG",{});var GVt=s(E4e);Gvr=r(GVt,"imagegpt"),GVt.forEach(t),Ovr=r(KXe," \u2014 "),RY=n(KXe,"A",{href:!0});var OVt=s(RY);Vvr=r(OVt,"ImageGPTForImageClassification"),OVt.forEach(t),Xvr=r(KXe," (ImageGPT model)"),KXe.forEach(t),zvr=i(Fe),vl=n(Fe,"LI",{});var PB=s(vl);C4e=n(PB,"STRONG",{});var VVt=s(C4e);Qvr=r(VVt,"levit"),VVt.forEach(t),Wvr=r(PB," \u2014 "),PY=n(PB,"A",{href:!0});var XVt=s(PY);Uvr=r(XVt,"LevitForImageClassification"),XVt.forEach(t),Hvr=r(PB," or "),BY=n(PB,"A",{href:!0});var zVt=s(BY);Jvr=r(zVt,"LevitForImageClassificationWithTeacher"),zVt.forEach(t),Yvr=r(PB," (LeViT model)"),PB.forEach(t),Kvr=i(Fe),h4=n(Fe,"LI",{});var ZXe=s(h4);w4e=n(ZXe,"STRONG",{});var QVt=s(w4e);Zvr=r(QVt,"mobilevit"),QVt.forEach(t),eFr=r(ZXe," \u2014 "),IY=n(ZXe,"A",{href:!0});var WVt=s(IY);oFr=r(WVt,"MobileViTForImageClassification"),WVt.forEach(t),rFr=r(ZXe," (MobileViT model)"),ZXe.forEach(t),tFr=i(Fe),$t=n(Fe,"LI",{});var Mf=s($t);A4e=n(Mf,"STRONG",{});var UVt=s(A4e);aFr=r(UVt,"perceiver"),UVt.forEach(t),nFr=r(Mf," \u2014 "),NY=n(Mf,"A",{href:!0});var HVt=s(NY);sFr=r(HVt,"PerceiverForImageClassificationLearned"),HVt.forEach(t),lFr=r(Mf," or "),qY=n(Mf,"A",{href:!0});var JVt=s(qY);iFr=r(JVt,"PerceiverForImageClassificationFourier"),JVt.forEach(t),dFr=r(Mf," or "),jY=n(Mf,"A",{href:!0});var YVt=s(jY);cFr=r(YVt,"PerceiverForImageClassificationConvProcessing"),YVt.forEach(t),mFr=r(Mf," (Perceiver model)"),Mf.forEach(t),fFr=i(Fe),u4=n(Fe,"LI",{});var eze=s(u4);L4e=n(eze,"STRONG",{});var KVt=s(L4e);gFr=r(KVt,"poolformer"),KVt.forEach(t),hFr=r(eze," \u2014 "),DY=n(eze,"A",{href:!0});var ZVt=s(DY);uFr=r(ZVt,"PoolFormerForImageClassification"),ZVt.forEach(t),pFr=r(eze," (PoolFormer model)"),eze.forEach(t),_Fr=i(Fe),p4=n(Fe,"LI",{});var oze=s(p4);y4e=n(oze,"STRONG",{});var eXt=s(y4e);bFr=r(eXt,"regnet"),eXt.forEach(t),vFr=r(oze," \u2014 "),GY=n(oze,"A",{href:!0});var oXt=s(GY);FFr=r(oXt,"RegNetForImageClassification"),oXt.forEach(t),TFr=r(oze," (RegNet model)"),oze.forEach(t),MFr=i(Fe),_4=n(Fe,"LI",{});var rze=s(_4);x4e=n(rze,"STRONG",{});var rXt=s(x4e);EFr=r(rXt,"resnet"),rXt.forEach(t),CFr=r(rze," \u2014 "),OY=n(rze,"A",{href:!0});var tXt=s(OY);wFr=r(tXt,"ResNetForImageClassification"),tXt.forEach(t),AFr=r(rze," (ResNet model)"),rze.forEach(t),LFr=i(Fe),b4=n(Fe,"LI",{});var tze=s(b4);$4e=n(tze,"STRONG",{});var aXt=s($4e);yFr=r(aXt,"segformer"),aXt.forEach(t),xFr=r(tze," \u2014 "),VY=n(tze,"A",{href:!0});var nXt=s(VY);$Fr=r(nXt,"SegformerForImageClassification"),nXt.forEach(t),kFr=r(tze," (SegFormer model)"),tze.forEach(t),SFr=i(Fe),v4=n(Fe,"LI",{});var aze=s(v4);k4e=n(aze,"STRONG",{});var sXt=s(k4e);RFr=r(sXt,"swin"),sXt.forEach(t),PFr=r(aze," \u2014 "),XY=n(aze,"A",{href:!0});var lXt=s(XY);BFr=r(lXt,"SwinForImageClassification"),lXt.forEach(t),IFr=r(aze," (Swin Transformer model)"),aze.forEach(t),NFr=i(Fe),F4=n(Fe,"LI",{});var nze=s(F4);S4e=n(nze,"STRONG",{});var iXt=s(S4e);qFr=r(iXt,"swinv2"),iXt.forEach(t),jFr=r(nze," \u2014 "),zY=n(nze,"A",{href:!0});var dXt=s(zY);DFr=r(dXt,"Swinv2ForImageClassification"),dXt.forEach(t),GFr=r(nze," (Swin Transformer V2 model)"),nze.forEach(t),OFr=i(Fe),T4=n(Fe,"LI",{});var sze=s(T4);R4e=n(sze,"STRONG",{});var cXt=s(R4e);VFr=r(cXt,"van"),cXt.forEach(t),XFr=r(sze," \u2014 "),QY=n(sze,"A",{href:!0});var mXt=s(QY);zFr=r(mXt,"VanForImageClassification"),mXt.forEach(t),QFr=r(sze," (VAN model)"),sze.forEach(t),WFr=i(Fe),M4=n(Fe,"LI",{});var lze=s(M4);P4e=n(lze,"STRONG",{});var fXt=s(P4e);UFr=r(fXt,"vit"),fXt.forEach(t),HFr=r(lze," \u2014 "),WY=n(lze,"A",{href:!0});var gXt=s(WY);JFr=r(gXt,"ViTForImageClassification"),gXt.forEach(t),YFr=r(lze," (ViT model)"),lze.forEach(t),Fe.forEach(t),KFr=i(Sa),E4=n(Sa,"P",{});var ize=s(E4);ZFr=r(ize,"The model is set in evaluation mode by default using "),B4e=n(ize,"CODE",{});var hXt=s(B4e);eTr=r(hXt,"model.eval()"),hXt.forEach(t),oTr=r(ize,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I4e=n(ize,"CODE",{});var uXt=s(I4e);rTr=r(uXt,"model.train()"),uXt.forEach(t),ize.forEach(t),tTr=i(Sa),T(C4.$$.fragment,Sa),Sa.forEach(t),ql.forEach(t),mZe=i(m),tc=n(m,"H2",{class:!0});var woo=s(tc);w4=n(woo,"A",{id:!0,class:!0,href:!0});var pXt=s(w4);N4e=n(pXt,"SPAN",{});var _Xt=s(N4e);T(F$.$$.fragment,_Xt),_Xt.forEach(t),pXt.forEach(t),aTr=i(woo),q4e=n(woo,"SPAN",{});var bXt=s(q4e);nTr=r(bXt,"AutoModelForVideoClassification"),bXt.forEach(t),woo.forEach(t),fZe=i(m),Wo=n(m,"DIV",{class:!0});var jl=s(Wo);T(T$.$$.fragment,jl),sTr=i(jl),ac=n(jl,"P",{});var zle=s(ac);lTr=r(zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),UY=n(zle,"A",{href:!0});var vXt=s(UY);iTr=r(vXt,"from_pretrained()"),vXt.forEach(t),dTr=r(zle," class method or the "),HY=n(zle,"A",{href:!0});var FXt=s(HY);cTr=r(FXt,"from_config()"),FXt.forEach(t),mTr=r(zle,` class
method.`),zle.forEach(t),fTr=i(jl),M$=n(jl,"P",{});var Aoo=s(M$);gTr=r(Aoo,"This class cannot be instantiated directly using "),j4e=n(Aoo,"CODE",{});var TXt=s(j4e);hTr=r(TXt,"__init__()"),TXt.forEach(t),uTr=r(Aoo," (throws an error)."),Aoo.forEach(t),pTr=i(jl),kt=n(jl,"DIV",{class:!0});var t8=s(kt);T(E$.$$.fragment,t8),_Tr=i(t8),D4e=n(t8,"P",{});var MXt=s(D4e);bTr=r(MXt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),MXt.forEach(t),vTr=i(t8),nc=n(t8,"P",{});var Qle=s(nc);FTr=r(Qle,`Note:
Loading a model from its configuration file does `),G4e=n(Qle,"STRONG",{});var EXt=s(G4e);TTr=r(EXt,"not"),EXt.forEach(t),MTr=r(Qle,` load the model weights. It only affects the
model\u2019s configuration. Use `),JY=n(Qle,"A",{href:!0});var CXt=s(JY);ETr=r(CXt,"from_pretrained()"),CXt.forEach(t),CTr=r(Qle," to load the model weights."),Qle.forEach(t),wTr=i(t8),T(A4.$$.fragment,t8),t8.forEach(t),ATr=i(jl),go=n(jl,"DIV",{class:!0});var Ra=s(go);T(C$.$$.fragment,Ra),LTr=i(Ra),O4e=n(Ra,"P",{});var wXt=s(O4e);yTr=r(wXt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),wXt.forEach(t),xTr=i(Ra),cn=n(Ra,"P",{});var a8=s(cn);$Tr=r(a8,"The model class to instantiate is selected based on the "),V4e=n(a8,"CODE",{});var AXt=s(V4e);kTr=r(AXt,"model_type"),AXt.forEach(t),STr=r(a8,` property of the config object (either
passed as an argument or loaded from `),X4e=n(a8,"CODE",{});var LXt=s(X4e);RTr=r(LXt,"pretrained_model_name_or_path"),LXt.forEach(t),PTr=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(a8,"CODE",{});var yXt=s(z4e);BTr=r(yXt,"pretrained_model_name_or_path"),yXt.forEach(t),ITr=r(a8,":"),a8.forEach(t),NTr=i(Ra),Q4e=n(Ra,"UL",{});var xXt=s(Q4e);L4=n(xXt,"LI",{});var dze=s(L4);W4e=n(dze,"STRONG",{});var $Xt=s(W4e);qTr=r($Xt,"videomae"),$Xt.forEach(t),jTr=r(dze," \u2014 "),YY=n(dze,"A",{href:!0});var kXt=s(YY);DTr=r(kXt,"VideoMAEForVideoClassification"),kXt.forEach(t),GTr=r(dze," (VideoMAE model)"),dze.forEach(t),xXt.forEach(t),OTr=i(Ra),y4=n(Ra,"P",{});var cze=s(y4);VTr=r(cze,"The model is set in evaluation mode by default using "),U4e=n(cze,"CODE",{});var SXt=s(U4e);XTr=r(SXt,"model.eval()"),SXt.forEach(t),zTr=r(cze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H4e=n(cze,"CODE",{});var RXt=s(H4e);QTr=r(RXt,"model.train()"),RXt.forEach(t),cze.forEach(t),WTr=i(Ra),T(x4.$$.fragment,Ra),Ra.forEach(t),jl.forEach(t),gZe=i(m),sc=n(m,"H2",{class:!0});var Loo=s(sc);$4=n(Loo,"A",{id:!0,class:!0,href:!0});var PXt=s($4);J4e=n(PXt,"SPAN",{});var BXt=s(J4e);T(w$.$$.fragment,BXt),BXt.forEach(t),PXt.forEach(t),UTr=i(Loo),Y4e=n(Loo,"SPAN",{});var IXt=s(Y4e);HTr=r(IXt,"AutoModelForVision2Seq"),IXt.forEach(t),Loo.forEach(t),hZe=i(m),Uo=n(m,"DIV",{class:!0});var Dl=s(Uo);T(A$.$$.fragment,Dl),JTr=i(Dl),lc=n(Dl,"P",{});var Wle=s(lc);YTr=r(Wle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KY=n(Wle,"A",{href:!0});var NXt=s(KY);KTr=r(NXt,"from_pretrained()"),NXt.forEach(t),ZTr=r(Wle," class method or the "),ZY=n(Wle,"A",{href:!0});var qXt=s(ZY);eMr=r(qXt,"from_config()"),qXt.forEach(t),oMr=r(Wle,` class
method.`),Wle.forEach(t),rMr=i(Dl),L$=n(Dl,"P",{});var yoo=s(L$);tMr=r(yoo,"This class cannot be instantiated directly using "),K4e=n(yoo,"CODE",{});var jXt=s(K4e);aMr=r(jXt,"__init__()"),jXt.forEach(t),nMr=r(yoo," (throws an error)."),yoo.forEach(t),sMr=i(Dl),St=n(Dl,"DIV",{class:!0});var n8=s(St);T(y$.$$.fragment,n8),lMr=i(n8),Z4e=n(n8,"P",{});var DXt=s(Z4e);iMr=r(DXt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DXt.forEach(t),dMr=i(n8),ic=n(n8,"P",{});var Ule=s(ic);cMr=r(Ule,`Note:
Loading a model from its configuration file does `),eCe=n(Ule,"STRONG",{});var GXt=s(eCe);mMr=r(GXt,"not"),GXt.forEach(t),fMr=r(Ule,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Ule,"A",{href:!0});var OXt=s(eK);gMr=r(OXt,"from_pretrained()"),OXt.forEach(t),hMr=r(Ule," to load the model weights."),Ule.forEach(t),uMr=i(n8),T(k4.$$.fragment,n8),n8.forEach(t),pMr=i(Dl),ho=n(Dl,"DIV",{class:!0});var Pa=s(ho);T(x$.$$.fragment,Pa),_Mr=i(Pa),oCe=n(Pa,"P",{});var VXt=s(oCe);bMr=r(VXt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VXt.forEach(t),vMr=i(Pa),mn=n(Pa,"P",{});var s8=s(mn);FMr=r(s8,"The model class to instantiate is selected based on the "),rCe=n(s8,"CODE",{});var XXt=s(rCe);TMr=r(XXt,"model_type"),XXt.forEach(t),MMr=r(s8,` property of the config object (either
passed as an argument or loaded from `),tCe=n(s8,"CODE",{});var zXt=s(tCe);EMr=r(zXt,"pretrained_model_name_or_path"),zXt.forEach(t),CMr=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(s8,"CODE",{});var QXt=s(aCe);wMr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),AMr=r(s8,":"),s8.forEach(t),LMr=i(Pa),nCe=n(Pa,"UL",{});var WXt=s(nCe);S4=n(WXt,"LI",{});var mze=s(S4);sCe=n(mze,"STRONG",{});var UXt=s(sCe);yMr=r(UXt,"vision-encoder-decoder"),UXt.forEach(t),xMr=r(mze," \u2014 "),oK=n(mze,"A",{href:!0});var HXt=s(oK);$Mr=r(HXt,"VisionEncoderDecoderModel"),HXt.forEach(t),kMr=r(mze," (Vision Encoder decoder model)"),mze.forEach(t),WXt.forEach(t),SMr=i(Pa),R4=n(Pa,"P",{});var fze=s(R4);RMr=r(fze,"The model is set in evaluation mode by default using "),lCe=n(fze,"CODE",{});var JXt=s(lCe);PMr=r(JXt,"model.eval()"),JXt.forEach(t),BMr=r(fze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iCe=n(fze,"CODE",{});var YXt=s(iCe);IMr=r(YXt,"model.train()"),YXt.forEach(t),fze.forEach(t),NMr=i(Pa),T(P4.$$.fragment,Pa),Pa.forEach(t),Dl.forEach(t),uZe=i(m),dc=n(m,"H2",{class:!0});var xoo=s(dc);B4=n(xoo,"A",{id:!0,class:!0,href:!0});var KXt=s(B4);dCe=n(KXt,"SPAN",{});var ZXt=s(dCe);T($$.$$.fragment,ZXt),ZXt.forEach(t),KXt.forEach(t),qMr=i(xoo),cCe=n(xoo,"SPAN",{});var ezt=s(cCe);jMr=r(ezt,"AutoModelForVisualQuestionAnswering"),ezt.forEach(t),xoo.forEach(t),pZe=i(m),Ho=n(m,"DIV",{class:!0});var Gl=s(Ho);T(k$.$$.fragment,Gl),DMr=i(Gl),cc=n(Gl,"P",{});var Hle=s(cc);GMr=r(Hle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),rK=n(Hle,"A",{href:!0});var ozt=s(rK);OMr=r(ozt,"from_pretrained()"),ozt.forEach(t),VMr=r(Hle," class method or the "),tK=n(Hle,"A",{href:!0});var rzt=s(tK);XMr=r(rzt,"from_config()"),rzt.forEach(t),zMr=r(Hle,` class
method.`),Hle.forEach(t),QMr=i(Gl),S$=n(Gl,"P",{});var $oo=s(S$);WMr=r($oo,"This class cannot be instantiated directly using "),mCe=n($oo,"CODE",{});var tzt=s(mCe);UMr=r(tzt,"__init__()"),tzt.forEach(t),HMr=r($oo," (throws an error)."),$oo.forEach(t),JMr=i(Gl),Rt=n(Gl,"DIV",{class:!0});var l8=s(Rt);T(R$.$$.fragment,l8),YMr=i(l8),fCe=n(l8,"P",{});var azt=s(fCe);KMr=r(azt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),azt.forEach(t),ZMr=i(l8),mc=n(l8,"P",{});var Jle=s(mc);eEr=r(Jle,`Note:
Loading a model from its configuration file does `),gCe=n(Jle,"STRONG",{});var nzt=s(gCe);oEr=r(nzt,"not"),nzt.forEach(t),rEr=r(Jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(Jle,"A",{href:!0});var szt=s(aK);tEr=r(szt,"from_pretrained()"),szt.forEach(t),aEr=r(Jle," to load the model weights."),Jle.forEach(t),nEr=i(l8),T(I4.$$.fragment,l8),l8.forEach(t),sEr=i(Gl),uo=n(Gl,"DIV",{class:!0});var Ba=s(uo);T(P$.$$.fragment,Ba),lEr=i(Ba),hCe=n(Ba,"P",{});var lzt=s(hCe);iEr=r(lzt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),lzt.forEach(t),dEr=i(Ba),fn=n(Ba,"P",{});var i8=s(fn);cEr=r(i8,"The model class to instantiate is selected based on the "),uCe=n(i8,"CODE",{});var izt=s(uCe);mEr=r(izt,"model_type"),izt.forEach(t),fEr=r(i8,` property of the config object (either
passed as an argument or loaded from `),pCe=n(i8,"CODE",{});var dzt=s(pCe);gEr=r(dzt,"pretrained_model_name_or_path"),dzt.forEach(t),hEr=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(i8,"CODE",{});var czt=s(_Ce);uEr=r(czt,"pretrained_model_name_or_path"),czt.forEach(t),pEr=r(i8,":"),i8.forEach(t),_Er=i(Ba),bCe=n(Ba,"UL",{});var mzt=s(bCe);N4=n(mzt,"LI",{});var gze=s(N4);vCe=n(gze,"STRONG",{});var fzt=s(vCe);bEr=r(fzt,"vilt"),fzt.forEach(t),vEr=r(gze," \u2014 "),nK=n(gze,"A",{href:!0});var gzt=s(nK);FEr=r(gzt,"ViltForQuestionAnswering"),gzt.forEach(t),TEr=r(gze," (ViLT model)"),gze.forEach(t),mzt.forEach(t),MEr=i(Ba),q4=n(Ba,"P",{});var hze=s(q4);EEr=r(hze,"The model is set in evaluation mode by default using "),FCe=n(hze,"CODE",{});var hzt=s(FCe);CEr=r(hzt,"model.eval()"),hzt.forEach(t),wEr=r(hze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TCe=n(hze,"CODE",{});var uzt=s(TCe);AEr=r(uzt,"model.train()"),uzt.forEach(t),hze.forEach(t),LEr=i(Ba),T(j4.$$.fragment,Ba),Ba.forEach(t),Gl.forEach(t),_Ze=i(m),fc=n(m,"H2",{class:!0});var koo=s(fc);D4=n(koo,"A",{id:!0,class:!0,href:!0});var pzt=s(D4);MCe=n(pzt,"SPAN",{});var _zt=s(MCe);T(B$.$$.fragment,_zt),_zt.forEach(t),pzt.forEach(t),yEr=i(koo),ECe=n(koo,"SPAN",{});var bzt=s(ECe);xEr=r(bzt,"AutoModelForAudioClassification"),bzt.forEach(t),koo.forEach(t),bZe=i(m),Jo=n(m,"DIV",{class:!0});var Ol=s(Jo);T(I$.$$.fragment,Ol),$Er=i(Ol),gc=n(Ol,"P",{});var Yle=s(gc);kEr=r(Yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sK=n(Yle,"A",{href:!0});var vzt=s(sK);SEr=r(vzt,"from_pretrained()"),vzt.forEach(t),REr=r(Yle," class method or the "),lK=n(Yle,"A",{href:!0});var Fzt=s(lK);PEr=r(Fzt,"from_config()"),Fzt.forEach(t),BEr=r(Yle,` class
method.`),Yle.forEach(t),IEr=i(Ol),N$=n(Ol,"P",{});var Soo=s(N$);NEr=r(Soo,"This class cannot be instantiated directly using "),CCe=n(Soo,"CODE",{});var Tzt=s(CCe);qEr=r(Tzt,"__init__()"),Tzt.forEach(t),jEr=r(Soo," (throws an error)."),Soo.forEach(t),DEr=i(Ol),Pt=n(Ol,"DIV",{class:!0});var d8=s(Pt);T(q$.$$.fragment,d8),GEr=i(d8),wCe=n(d8,"P",{});var Mzt=s(wCe);OEr=r(Mzt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mzt.forEach(t),VEr=i(d8),hc=n(d8,"P",{});var Kle=s(hc);XEr=r(Kle,`Note:
Loading a model from its configuration file does `),ACe=n(Kle,"STRONG",{});var Ezt=s(ACe);zEr=r(Ezt,"not"),Ezt.forEach(t),QEr=r(Kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(Kle,"A",{href:!0});var Czt=s(iK);WEr=r(Czt,"from_pretrained()"),Czt.forEach(t),UEr=r(Kle," to load the model weights."),Kle.forEach(t),HEr=i(d8),T(G4.$$.fragment,d8),d8.forEach(t),JEr=i(Ol),po=n(Ol,"DIV",{class:!0});var Ia=s(po);T(j$.$$.fragment,Ia),YEr=i(Ia),LCe=n(Ia,"P",{});var wzt=s(LCe);KEr=r(wzt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wzt.forEach(t),ZEr=i(Ia),gn=n(Ia,"P",{});var c8=s(gn);e4r=r(c8,"The model class to instantiate is selected based on the "),yCe=n(c8,"CODE",{});var Azt=s(yCe);o4r=r(Azt,"model_type"),Azt.forEach(t),r4r=r(c8,` property of the config object (either
passed as an argument or loaded from `),xCe=n(c8,"CODE",{});var Lzt=s(xCe);t4r=r(Lzt,"pretrained_model_name_or_path"),Lzt.forEach(t),a4r=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=n(c8,"CODE",{});var yzt=s($Ce);n4r=r(yzt,"pretrained_model_name_or_path"),yzt.forEach(t),s4r=r(c8,":"),c8.forEach(t),l4r=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);O4=n(Qe,"LI",{});var uze=s(O4);kCe=n(uze,"STRONG",{});var xzt=s(kCe);i4r=r(xzt,"data2vec-audio"),xzt.forEach(t),d4r=r(uze," \u2014 "),dK=n(uze,"A",{href:!0});var $zt=s(dK);c4r=r($zt,"Data2VecAudioForSequenceClassification"),$zt.forEach(t),m4r=r(uze," (Data2VecAudio model)"),uze.forEach(t),f4r=i(Qe),V4=n(Qe,"LI",{});var pze=s(V4);SCe=n(pze,"STRONG",{});var kzt=s(SCe);g4r=r(kzt,"hubert"),kzt.forEach(t),h4r=r(pze," \u2014 "),cK=n(pze,"A",{href:!0});var Szt=s(cK);u4r=r(Szt,"HubertForSequenceClassification"),Szt.forEach(t),p4r=r(pze," (Hubert model)"),pze.forEach(t),_4r=i(Qe),X4=n(Qe,"LI",{});var _ze=s(X4);RCe=n(_ze,"STRONG",{});var Rzt=s(RCe);b4r=r(Rzt,"sew"),Rzt.forEach(t),v4r=r(_ze," \u2014 "),mK=n(_ze,"A",{href:!0});var Pzt=s(mK);F4r=r(Pzt,"SEWForSequenceClassification"),Pzt.forEach(t),T4r=r(_ze," (SEW model)"),_ze.forEach(t),M4r=i(Qe),z4=n(Qe,"LI",{});var bze=s(z4);PCe=n(bze,"STRONG",{});var Bzt=s(PCe);E4r=r(Bzt,"sew-d"),Bzt.forEach(t),C4r=r(bze," \u2014 "),fK=n(bze,"A",{href:!0});var Izt=s(fK);w4r=r(Izt,"SEWDForSequenceClassification"),Izt.forEach(t),A4r=r(bze," (SEW-D model)"),bze.forEach(t),L4r=i(Qe),Q4=n(Qe,"LI",{});var vze=s(Q4);BCe=n(vze,"STRONG",{});var Nzt=s(BCe);y4r=r(Nzt,"unispeech"),Nzt.forEach(t),x4r=r(vze," \u2014 "),gK=n(vze,"A",{href:!0});var qzt=s(gK);$4r=r(qzt,"UniSpeechForSequenceClassification"),qzt.forEach(t),k4r=r(vze," (UniSpeech model)"),vze.forEach(t),S4r=i(Qe),W4=n(Qe,"LI",{});var Fze=s(W4);ICe=n(Fze,"STRONG",{});var jzt=s(ICe);R4r=r(jzt,"unispeech-sat"),jzt.forEach(t),P4r=r(Fze," \u2014 "),hK=n(Fze,"A",{href:!0});var Dzt=s(hK);B4r=r(Dzt,"UniSpeechSatForSequenceClassification"),Dzt.forEach(t),I4r=r(Fze," (UniSpeechSat model)"),Fze.forEach(t),N4r=i(Qe),U4=n(Qe,"LI",{});var Tze=s(U4);NCe=n(Tze,"STRONG",{});var Gzt=s(NCe);q4r=r(Gzt,"wav2vec2"),Gzt.forEach(t),j4r=r(Tze," \u2014 "),uK=n(Tze,"A",{href:!0});var Ozt=s(uK);D4r=r(Ozt,"Wav2Vec2ForSequenceClassification"),Ozt.forEach(t),G4r=r(Tze," (Wav2Vec2 model)"),Tze.forEach(t),O4r=i(Qe),H4=n(Qe,"LI",{});var Mze=s(H4);qCe=n(Mze,"STRONG",{});var Vzt=s(qCe);V4r=r(Vzt,"wav2vec2-conformer"),Vzt.forEach(t),X4r=r(Mze," \u2014 "),pK=n(Mze,"A",{href:!0});var Xzt=s(pK);z4r=r(Xzt,"Wav2Vec2ConformerForSequenceClassification"),Xzt.forEach(t),Q4r=r(Mze," (Wav2Vec2-Conformer model)"),Mze.forEach(t),W4r=i(Qe),J4=n(Qe,"LI",{});var Eze=s(J4);jCe=n(Eze,"STRONG",{});var zzt=s(jCe);U4r=r(zzt,"wavlm"),zzt.forEach(t),H4r=r(Eze," \u2014 "),_K=n(Eze,"A",{href:!0});var Qzt=s(_K);J4r=r(Qzt,"WavLMForSequenceClassification"),Qzt.forEach(t),Y4r=r(Eze," (WavLM model)"),Eze.forEach(t),Qe.forEach(t),K4r=i(Ia),Y4=n(Ia,"P",{});var Cze=s(Y4);Z4r=r(Cze,"The model is set in evaluation mode by default using "),DCe=n(Cze,"CODE",{});var Wzt=s(DCe);eCr=r(Wzt,"model.eval()"),Wzt.forEach(t),oCr=r(Cze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GCe=n(Cze,"CODE",{});var Uzt=s(GCe);rCr=r(Uzt,"model.train()"),Uzt.forEach(t),Cze.forEach(t),tCr=i(Ia),T(K4.$$.fragment,Ia),Ia.forEach(t),Ol.forEach(t),vZe=i(m),uc=n(m,"H2",{class:!0});var Roo=s(uc);Z4=n(Roo,"A",{id:!0,class:!0,href:!0});var Hzt=s(Z4);OCe=n(Hzt,"SPAN",{});var Jzt=s(OCe);T(D$.$$.fragment,Jzt),Jzt.forEach(t),Hzt.forEach(t),aCr=i(Roo),VCe=n(Roo,"SPAN",{});var Yzt=s(VCe);nCr=r(Yzt,"AutoModelForAudioFrameClassification"),Yzt.forEach(t),Roo.forEach(t),FZe=i(m),Yo=n(m,"DIV",{class:!0});var Vl=s(Yo);T(G$.$$.fragment,Vl),sCr=i(Vl),pc=n(Vl,"P",{});var Zle=s(pc);lCr=r(Zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bK=n(Zle,"A",{href:!0});var Kzt=s(bK);iCr=r(Kzt,"from_pretrained()"),Kzt.forEach(t),dCr=r(Zle," class method or the "),vK=n(Zle,"A",{href:!0});var Zzt=s(vK);cCr=r(Zzt,"from_config()"),Zzt.forEach(t),mCr=r(Zle,` class
method.`),Zle.forEach(t),fCr=i(Vl),O$=n(Vl,"P",{});var Poo=s(O$);gCr=r(Poo,"This class cannot be instantiated directly using "),XCe=n(Poo,"CODE",{});var eQt=s(XCe);hCr=r(eQt,"__init__()"),eQt.forEach(t),uCr=r(Poo," (throws an error)."),Poo.forEach(t),pCr=i(Vl),Bt=n(Vl,"DIV",{class:!0});var m8=s(Bt);T(V$.$$.fragment,m8),_Cr=i(m8),zCe=n(m8,"P",{});var oQt=s(zCe);bCr=r(oQt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oQt.forEach(t),vCr=i(m8),_c=n(m8,"P",{});var eie=s(_c);FCr=r(eie,`Note:
Loading a model from its configuration file does `),QCe=n(eie,"STRONG",{});var rQt=s(QCe);TCr=r(rQt,"not"),rQt.forEach(t),MCr=r(eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(eie,"A",{href:!0});var tQt=s(FK);ECr=r(tQt,"from_pretrained()"),tQt.forEach(t),CCr=r(eie," to load the model weights."),eie.forEach(t),wCr=i(m8),T(eC.$$.fragment,m8),m8.forEach(t),ACr=i(Vl),_o=n(Vl,"DIV",{class:!0});var Na=s(_o);T(X$.$$.fragment,Na),LCr=i(Na),WCe=n(Na,"P",{});var aQt=s(WCe);yCr=r(aQt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aQt.forEach(t),xCr=i(Na),hn=n(Na,"P",{});var f8=s(hn);$Cr=r(f8,"The model class to instantiate is selected based on the "),UCe=n(f8,"CODE",{});var nQt=s(UCe);kCr=r(nQt,"model_type"),nQt.forEach(t),SCr=r(f8,` property of the config object (either
passed as an argument or loaded from `),HCe=n(f8,"CODE",{});var sQt=s(HCe);RCr=r(sQt,"pretrained_model_name_or_path"),sQt.forEach(t),PCr=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JCe=n(f8,"CODE",{});var lQt=s(JCe);BCr=r(lQt,"pretrained_model_name_or_path"),lQt.forEach(t),ICr=r(f8,":"),f8.forEach(t),NCr=i(Na),mt=n(Na,"UL",{});var Xl=s(mt);oC=n(Xl,"LI",{});var wze=s(oC);YCe=n(wze,"STRONG",{});var iQt=s(YCe);qCr=r(iQt,"data2vec-audio"),iQt.forEach(t),jCr=r(wze," \u2014 "),TK=n(wze,"A",{href:!0});var dQt=s(TK);DCr=r(dQt,"Data2VecAudioForAudioFrameClassification"),dQt.forEach(t),GCr=r(wze," (Data2VecAudio model)"),wze.forEach(t),OCr=i(Xl),rC=n(Xl,"LI",{});var Aze=s(rC);KCe=n(Aze,"STRONG",{});var cQt=s(KCe);VCr=r(cQt,"unispeech-sat"),cQt.forEach(t),XCr=r(Aze," \u2014 "),MK=n(Aze,"A",{href:!0});var mQt=s(MK);zCr=r(mQt,"UniSpeechSatForAudioFrameClassification"),mQt.forEach(t),QCr=r(Aze," (UniSpeechSat model)"),Aze.forEach(t),WCr=i(Xl),tC=n(Xl,"LI",{});var Lze=s(tC);ZCe=n(Lze,"STRONG",{});var fQt=s(ZCe);UCr=r(fQt,"wav2vec2"),fQt.forEach(t),HCr=r(Lze," \u2014 "),EK=n(Lze,"A",{href:!0});var gQt=s(EK);JCr=r(gQt,"Wav2Vec2ForAudioFrameClassification"),gQt.forEach(t),YCr=r(Lze," (Wav2Vec2 model)"),Lze.forEach(t),KCr=i(Xl),aC=n(Xl,"LI",{});var yze=s(aC);e3e=n(yze,"STRONG",{});var hQt=s(e3e);ZCr=r(hQt,"wav2vec2-conformer"),hQt.forEach(t),e3r=r(yze," \u2014 "),CK=n(yze,"A",{href:!0});var uQt=s(CK);o3r=r(uQt,"Wav2Vec2ConformerForAudioFrameClassification"),uQt.forEach(t),r3r=r(yze," (Wav2Vec2-Conformer model)"),yze.forEach(t),t3r=i(Xl),nC=n(Xl,"LI",{});var xze=s(nC);o3e=n(xze,"STRONG",{});var pQt=s(o3e);a3r=r(pQt,"wavlm"),pQt.forEach(t),n3r=r(xze," \u2014 "),wK=n(xze,"A",{href:!0});var _Qt=s(wK);s3r=r(_Qt,"WavLMForAudioFrameClassification"),_Qt.forEach(t),l3r=r(xze," (WavLM model)"),xze.forEach(t),Xl.forEach(t),i3r=i(Na),sC=n(Na,"P",{});var $ze=s(sC);d3r=r($ze,"The model is set in evaluation mode by default using "),r3e=n($ze,"CODE",{});var bQt=s(r3e);c3r=r(bQt,"model.eval()"),bQt.forEach(t),m3r=r($ze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t3e=n($ze,"CODE",{});var vQt=s(t3e);f3r=r(vQt,"model.train()"),vQt.forEach(t),$ze.forEach(t),g3r=i(Na),T(lC.$$.fragment,Na),Na.forEach(t),Vl.forEach(t),TZe=i(m),bc=n(m,"H2",{class:!0});var Boo=s(bc);iC=n(Boo,"A",{id:!0,class:!0,href:!0});var FQt=s(iC);a3e=n(FQt,"SPAN",{});var TQt=s(a3e);T(z$.$$.fragment,TQt),TQt.forEach(t),FQt.forEach(t),h3r=i(Boo),n3e=n(Boo,"SPAN",{});var MQt=s(n3e);u3r=r(MQt,"AutoModelForCTC"),MQt.forEach(t),Boo.forEach(t),MZe=i(m),Ko=n(m,"DIV",{class:!0});var zl=s(Ko);T(Q$.$$.fragment,zl),p3r=i(zl),vc=n(zl,"P",{});var oie=s(vc);_3r=r(oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AK=n(oie,"A",{href:!0});var EQt=s(AK);b3r=r(EQt,"from_pretrained()"),EQt.forEach(t),v3r=r(oie," class method or the "),LK=n(oie,"A",{href:!0});var CQt=s(LK);F3r=r(CQt,"from_config()"),CQt.forEach(t),T3r=r(oie,` class
method.`),oie.forEach(t),M3r=i(zl),W$=n(zl,"P",{});var Ioo=s(W$);E3r=r(Ioo,"This class cannot be instantiated directly using "),s3e=n(Ioo,"CODE",{});var wQt=s(s3e);C3r=r(wQt,"__init__()"),wQt.forEach(t),w3r=r(Ioo," (throws an error)."),Ioo.forEach(t),A3r=i(zl),It=n(zl,"DIV",{class:!0});var g8=s(It);T(U$.$$.fragment,g8),L3r=i(g8),l3e=n(g8,"P",{});var AQt=s(l3e);y3r=r(AQt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),AQt.forEach(t),x3r=i(g8),Fc=n(g8,"P",{});var rie=s(Fc);$3r=r(rie,`Note:
Loading a model from its configuration file does `),i3e=n(rie,"STRONG",{});var LQt=s(i3e);k3r=r(LQt,"not"),LQt.forEach(t),S3r=r(rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),yK=n(rie,"A",{href:!0});var yQt=s(yK);R3r=r(yQt,"from_pretrained()"),yQt.forEach(t),P3r=r(rie," to load the model weights."),rie.forEach(t),B3r=i(g8),T(dC.$$.fragment,g8),g8.forEach(t),I3r=i(zl),bo=n(zl,"DIV",{class:!0});var qa=s(bo);T(H$.$$.fragment,qa),N3r=i(qa),d3e=n(qa,"P",{});var xQt=s(d3e);q3r=r(xQt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xQt.forEach(t),j3r=i(qa),un=n(qa,"P",{});var h8=s(un);D3r=r(h8,"The model class to instantiate is selected based on the "),c3e=n(h8,"CODE",{});var $Qt=s(c3e);G3r=r($Qt,"model_type"),$Qt.forEach(t),O3r=r(h8,` property of the config object (either
passed as an argument or loaded from `),m3e=n(h8,"CODE",{});var kQt=s(m3e);V3r=r(kQt,"pretrained_model_name_or_path"),kQt.forEach(t),X3r=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(h8,"CODE",{});var SQt=s(f3e);z3r=r(SQt,"pretrained_model_name_or_path"),SQt.forEach(t),Q3r=r(h8,":"),h8.forEach(t),W3r=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);cC=n(Ie,"LI",{});var kze=s(cC);g3e=n(kze,"STRONG",{});var RQt=s(g3e);U3r=r(RQt,"data2vec-audio"),RQt.forEach(t),H3r=r(kze," \u2014 "),xK=n(kze,"A",{href:!0});var PQt=s(xK);J3r=r(PQt,"Data2VecAudioForCTC"),PQt.forEach(t),Y3r=r(kze," (Data2VecAudio model)"),kze.forEach(t),K3r=i(Ie),mC=n(Ie,"LI",{});var Sze=s(mC);h3e=n(Sze,"STRONG",{});var BQt=s(h3e);Z3r=r(BQt,"hubert"),BQt.forEach(t),e5r=r(Sze," \u2014 "),$K=n(Sze,"A",{href:!0});var IQt=s($K);o5r=r(IQt,"HubertForCTC"),IQt.forEach(t),r5r=r(Sze," (Hubert model)"),Sze.forEach(t),t5r=i(Ie),fC=n(Ie,"LI",{});var Rze=s(fC);u3e=n(Rze,"STRONG",{});var NQt=s(u3e);a5r=r(NQt,"mctct"),NQt.forEach(t),n5r=r(Rze," \u2014 "),kK=n(Rze,"A",{href:!0});var qQt=s(kK);s5r=r(qQt,"MCTCTForCTC"),qQt.forEach(t),l5r=r(Rze," (M-CTC-T model)"),Rze.forEach(t),i5r=i(Ie),gC=n(Ie,"LI",{});var Pze=s(gC);p3e=n(Pze,"STRONG",{});var jQt=s(p3e);d5r=r(jQt,"sew"),jQt.forEach(t),c5r=r(Pze," \u2014 "),SK=n(Pze,"A",{href:!0});var DQt=s(SK);m5r=r(DQt,"SEWForCTC"),DQt.forEach(t),f5r=r(Pze," (SEW model)"),Pze.forEach(t),g5r=i(Ie),hC=n(Ie,"LI",{});var Bze=s(hC);_3e=n(Bze,"STRONG",{});var GQt=s(_3e);h5r=r(GQt,"sew-d"),GQt.forEach(t),u5r=r(Bze," \u2014 "),RK=n(Bze,"A",{href:!0});var OQt=s(RK);p5r=r(OQt,"SEWDForCTC"),OQt.forEach(t),_5r=r(Bze," (SEW-D model)"),Bze.forEach(t),b5r=i(Ie),uC=n(Ie,"LI",{});var Ize=s(uC);b3e=n(Ize,"STRONG",{});var VQt=s(b3e);v5r=r(VQt,"unispeech"),VQt.forEach(t),F5r=r(Ize," \u2014 "),PK=n(Ize,"A",{href:!0});var XQt=s(PK);T5r=r(XQt,"UniSpeechForCTC"),XQt.forEach(t),M5r=r(Ize," (UniSpeech model)"),Ize.forEach(t),E5r=i(Ie),pC=n(Ie,"LI",{});var Nze=s(pC);v3e=n(Nze,"STRONG",{});var zQt=s(v3e);C5r=r(zQt,"unispeech-sat"),zQt.forEach(t),w5r=r(Nze," \u2014 "),BK=n(Nze,"A",{href:!0});var QQt=s(BK);A5r=r(QQt,"UniSpeechSatForCTC"),QQt.forEach(t),L5r=r(Nze," (UniSpeechSat model)"),Nze.forEach(t),y5r=i(Ie),_C=n(Ie,"LI",{});var qze=s(_C);F3e=n(qze,"STRONG",{});var WQt=s(F3e);x5r=r(WQt,"wav2vec2"),WQt.forEach(t),$5r=r(qze," \u2014 "),IK=n(qze,"A",{href:!0});var UQt=s(IK);k5r=r(UQt,"Wav2Vec2ForCTC"),UQt.forEach(t),S5r=r(qze," (Wav2Vec2 model)"),qze.forEach(t),R5r=i(Ie),bC=n(Ie,"LI",{});var jze=s(bC);T3e=n(jze,"STRONG",{});var HQt=s(T3e);P5r=r(HQt,"wav2vec2-conformer"),HQt.forEach(t),B5r=r(jze," \u2014 "),NK=n(jze,"A",{href:!0});var JQt=s(NK);I5r=r(JQt,"Wav2Vec2ConformerForCTC"),JQt.forEach(t),N5r=r(jze," (Wav2Vec2-Conformer model)"),jze.forEach(t),q5r=i(Ie),vC=n(Ie,"LI",{});var Dze=s(vC);M3e=n(Dze,"STRONG",{});var YQt=s(M3e);j5r=r(YQt,"wavlm"),YQt.forEach(t),D5r=r(Dze," \u2014 "),qK=n(Dze,"A",{href:!0});var KQt=s(qK);G5r=r(KQt,"WavLMForCTC"),KQt.forEach(t),O5r=r(Dze," (WavLM model)"),Dze.forEach(t),Ie.forEach(t),V5r=i(qa),FC=n(qa,"P",{});var Gze=s(FC);X5r=r(Gze,"The model is set in evaluation mode by default using "),E3e=n(Gze,"CODE",{});var ZQt=s(E3e);z5r=r(ZQt,"model.eval()"),ZQt.forEach(t),Q5r=r(Gze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C3e=n(Gze,"CODE",{});var eWt=s(C3e);W5r=r(eWt,"model.train()"),eWt.forEach(t),Gze.forEach(t),U5r=i(qa),T(TC.$$.fragment,qa),qa.forEach(t),zl.forEach(t),EZe=i(m),Tc=n(m,"H2",{class:!0});var Noo=s(Tc);MC=n(Noo,"A",{id:!0,class:!0,href:!0});var oWt=s(MC);w3e=n(oWt,"SPAN",{});var rWt=s(w3e);T(J$.$$.fragment,rWt),rWt.forEach(t),oWt.forEach(t),H5r=i(Noo),A3e=n(Noo,"SPAN",{});var tWt=s(A3e);J5r=r(tWt,"AutoModelForSpeechSeq2Seq"),tWt.forEach(t),Noo.forEach(t),CZe=i(m),Zo=n(m,"DIV",{class:!0});var Ql=s(Zo);T(Y$.$$.fragment,Ql),Y5r=i(Ql),Mc=n(Ql,"P",{});var tie=s(Mc);K5r=r(tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jK=n(tie,"A",{href:!0});var aWt=s(jK);Z5r=r(aWt,"from_pretrained()"),aWt.forEach(t),e0r=r(tie," class method or the "),DK=n(tie,"A",{href:!0});var nWt=s(DK);o0r=r(nWt,"from_config()"),nWt.forEach(t),r0r=r(tie,` class
method.`),tie.forEach(t),t0r=i(Ql),K$=n(Ql,"P",{});var qoo=s(K$);a0r=r(qoo,"This class cannot be instantiated directly using "),L3e=n(qoo,"CODE",{});var sWt=s(L3e);n0r=r(sWt,"__init__()"),sWt.forEach(t),s0r=r(qoo," (throws an error)."),qoo.forEach(t),l0r=i(Ql),Nt=n(Ql,"DIV",{class:!0});var u8=s(Nt);T(Z$.$$.fragment,u8),i0r=i(u8),y3e=n(u8,"P",{});var lWt=s(y3e);d0r=r(lWt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lWt.forEach(t),c0r=i(u8),Ec=n(u8,"P",{});var aie=s(Ec);m0r=r(aie,`Note:
Loading a model from its configuration file does `),x3e=n(aie,"STRONG",{});var iWt=s(x3e);f0r=r(iWt,"not"),iWt.forEach(t),g0r=r(aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),GK=n(aie,"A",{href:!0});var dWt=s(GK);h0r=r(dWt,"from_pretrained()"),dWt.forEach(t),u0r=r(aie," to load the model weights."),aie.forEach(t),p0r=i(u8),T(EC.$$.fragment,u8),u8.forEach(t),_0r=i(Ql),vo=n(Ql,"DIV",{class:!0});var ja=s(vo);T(ek.$$.fragment,ja),b0r=i(ja),$3e=n(ja,"P",{});var cWt=s($3e);v0r=r(cWt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cWt.forEach(t),F0r=i(ja),pn=n(ja,"P",{});var p8=s(pn);T0r=r(p8,"The model class to instantiate is selected based on the "),k3e=n(p8,"CODE",{});var mWt=s(k3e);M0r=r(mWt,"model_type"),mWt.forEach(t),E0r=r(p8,` property of the config object (either
passed as an argument or loaded from `),S3e=n(p8,"CODE",{});var fWt=s(S3e);C0r=r(fWt,"pretrained_model_name_or_path"),fWt.forEach(t),w0r=r(p8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(p8,"CODE",{});var gWt=s(R3e);A0r=r(gWt,"pretrained_model_name_or_path"),gWt.forEach(t),L0r=r(p8,":"),p8.forEach(t),y0r=i(ja),ok=n(ja,"UL",{});var joo=s(ok);CC=n(joo,"LI",{});var Oze=s(CC);P3e=n(Oze,"STRONG",{});var hWt=s(P3e);x0r=r(hWt,"speech-encoder-decoder"),hWt.forEach(t),$0r=r(Oze," \u2014 "),OK=n(Oze,"A",{href:!0});var uWt=s(OK);k0r=r(uWt,"SpeechEncoderDecoderModel"),uWt.forEach(t),S0r=r(Oze," (Speech Encoder decoder model)"),Oze.forEach(t),R0r=i(joo),wC=n(joo,"LI",{});var Vze=s(wC);B3e=n(Vze,"STRONG",{});var pWt=s(B3e);P0r=r(pWt,"speech_to_text"),pWt.forEach(t),B0r=r(Vze," \u2014 "),VK=n(Vze,"A",{href:!0});var _Wt=s(VK);I0r=r(_Wt,"Speech2TextForConditionalGeneration"),_Wt.forEach(t),N0r=r(Vze," (Speech2Text model)"),Vze.forEach(t),joo.forEach(t),q0r=i(ja),AC=n(ja,"P",{});var Xze=s(AC);j0r=r(Xze,"The model is set in evaluation mode by default using "),I3e=n(Xze,"CODE",{});var bWt=s(I3e);D0r=r(bWt,"model.eval()"),bWt.forEach(t),G0r=r(Xze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N3e=n(Xze,"CODE",{});var vWt=s(N3e);O0r=r(vWt,"model.train()"),vWt.forEach(t),Xze.forEach(t),V0r=i(ja),T(LC.$$.fragment,ja),ja.forEach(t),Ql.forEach(t),wZe=i(m),Cc=n(m,"H2",{class:!0});var Doo=s(Cc);yC=n(Doo,"A",{id:!0,class:!0,href:!0});var FWt=s(yC);q3e=n(FWt,"SPAN",{});var TWt=s(q3e);T(rk.$$.fragment,TWt),TWt.forEach(t),FWt.forEach(t),X0r=i(Doo),j3e=n(Doo,"SPAN",{});var MWt=s(j3e);z0r=r(MWt,"AutoModelForAudioXVector"),MWt.forEach(t),Doo.forEach(t),AZe=i(m),er=n(m,"DIV",{class:!0});var Wl=s(er);T(tk.$$.fragment,Wl),Q0r=i(Wl),wc=n(Wl,"P",{});var nie=s(wc);W0r=r(nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),XK=n(nie,"A",{href:!0});var EWt=s(XK);U0r=r(EWt,"from_pretrained()"),EWt.forEach(t),H0r=r(nie," class method or the "),zK=n(nie,"A",{href:!0});var CWt=s(zK);J0r=r(CWt,"from_config()"),CWt.forEach(t),Y0r=r(nie,` class
method.`),nie.forEach(t),K0r=i(Wl),ak=n(Wl,"P",{});var Goo=s(ak);Z0r=r(Goo,"This class cannot be instantiated directly using "),D3e=n(Goo,"CODE",{});var wWt=s(D3e);ewr=r(wWt,"__init__()"),wWt.forEach(t),owr=r(Goo," (throws an error)."),Goo.forEach(t),rwr=i(Wl),qt=n(Wl,"DIV",{class:!0});var _8=s(qt);T(nk.$$.fragment,_8),twr=i(_8),G3e=n(_8,"P",{});var AWt=s(G3e);awr=r(AWt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),AWt.forEach(t),nwr=i(_8),Ac=n(_8,"P",{});var sie=s(Ac);swr=r(sie,`Note:
Loading a model from its configuration file does `),O3e=n(sie,"STRONG",{});var LWt=s(O3e);lwr=r(LWt,"not"),LWt.forEach(t),iwr=r(sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(sie,"A",{href:!0});var yWt=s(QK);dwr=r(yWt,"from_pretrained()"),yWt.forEach(t),cwr=r(sie," to load the model weights."),sie.forEach(t),mwr=i(_8),T(xC.$$.fragment,_8),_8.forEach(t),fwr=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Da=s(Fo);T(sk.$$.fragment,Da),gwr=i(Da),V3e=n(Da,"P",{});var xWt=s(V3e);hwr=r(xWt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),xWt.forEach(t),uwr=i(Da),_n=n(Da,"P",{});var b8=s(_n);pwr=r(b8,"The model class to instantiate is selected based on the "),X3e=n(b8,"CODE",{});var $Wt=s(X3e);_wr=r($Wt,"model_type"),$Wt.forEach(t),bwr=r(b8,` property of the config object (either
passed as an argument or loaded from `),z3e=n(b8,"CODE",{});var kWt=s(z3e);vwr=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),Fwr=r(b8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q3e=n(b8,"CODE",{});var SWt=s(Q3e);Twr=r(SWt,"pretrained_model_name_or_path"),SWt.forEach(t),Mwr=r(b8,":"),b8.forEach(t),Ewr=i(Da),ft=n(Da,"UL",{});var Ul=s(ft);$C=n(Ul,"LI",{});var zze=s($C);W3e=n(zze,"STRONG",{});var RWt=s(W3e);Cwr=r(RWt,"data2vec-audio"),RWt.forEach(t),wwr=r(zze," \u2014 "),WK=n(zze,"A",{href:!0});var PWt=s(WK);Awr=r(PWt,"Data2VecAudioForXVector"),PWt.forEach(t),Lwr=r(zze," (Data2VecAudio model)"),zze.forEach(t),ywr=i(Ul),kC=n(Ul,"LI",{});var Qze=s(kC);U3e=n(Qze,"STRONG",{});var BWt=s(U3e);xwr=r(BWt,"unispeech-sat"),BWt.forEach(t),$wr=r(Qze," \u2014 "),UK=n(Qze,"A",{href:!0});var IWt=s(UK);kwr=r(IWt,"UniSpeechSatForXVector"),IWt.forEach(t),Swr=r(Qze," (UniSpeechSat model)"),Qze.forEach(t),Rwr=i(Ul),SC=n(Ul,"LI",{});var Wze=s(SC);H3e=n(Wze,"STRONG",{});var NWt=s(H3e);Pwr=r(NWt,"wav2vec2"),NWt.forEach(t),Bwr=r(Wze," \u2014 "),HK=n(Wze,"A",{href:!0});var qWt=s(HK);Iwr=r(qWt,"Wav2Vec2ForXVector"),qWt.forEach(t),Nwr=r(Wze," (Wav2Vec2 model)"),Wze.forEach(t),qwr=i(Ul),RC=n(Ul,"LI",{});var Uze=s(RC);J3e=n(Uze,"STRONG",{});var jWt=s(J3e);jwr=r(jWt,"wav2vec2-conformer"),jWt.forEach(t),Dwr=r(Uze," \u2014 "),JK=n(Uze,"A",{href:!0});var DWt=s(JK);Gwr=r(DWt,"Wav2Vec2ConformerForXVector"),DWt.forEach(t),Owr=r(Uze," (Wav2Vec2-Conformer model)"),Uze.forEach(t),Vwr=i(Ul),PC=n(Ul,"LI",{});var Hze=s(PC);Y3e=n(Hze,"STRONG",{});var GWt=s(Y3e);Xwr=r(GWt,"wavlm"),GWt.forEach(t),zwr=r(Hze," \u2014 "),YK=n(Hze,"A",{href:!0});var OWt=s(YK);Qwr=r(OWt,"WavLMForXVector"),OWt.forEach(t),Wwr=r(Hze," (WavLM model)"),Hze.forEach(t),Ul.forEach(t),Uwr=i(Da),BC=n(Da,"P",{});var Jze=s(BC);Hwr=r(Jze,"The model is set in evaluation mode by default using "),K3e=n(Jze,"CODE",{});var VWt=s(K3e);Jwr=r(VWt,"model.eval()"),VWt.forEach(t),Ywr=r(Jze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z3e=n(Jze,"CODE",{});var XWt=s(Z3e);Kwr=r(XWt,"model.train()"),XWt.forEach(t),Jze.forEach(t),Zwr=i(Da),T(IC.$$.fragment,Da),Da.forEach(t),Wl.forEach(t),LZe=i(m),Lc=n(m,"H2",{class:!0});var Ooo=s(Lc);NC=n(Ooo,"A",{id:!0,class:!0,href:!0});var zWt=s(NC);e5e=n(zWt,"SPAN",{});var QWt=s(e5e);T(lk.$$.fragment,QWt),QWt.forEach(t),zWt.forEach(t),eAr=i(Ooo),o5e=n(Ooo,"SPAN",{});var WWt=s(o5e);oAr=r(WWt,"AutoModelForMaskedImageModeling"),WWt.forEach(t),Ooo.forEach(t),yZe=i(m),or=n(m,"DIV",{class:!0});var Hl=s(or);T(ik.$$.fragment,Hl),rAr=i(Hl),yc=n(Hl,"P",{});var lie=s(yc);tAr=r(lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KK=n(lie,"A",{href:!0});var UWt=s(KK);aAr=r(UWt,"from_pretrained()"),UWt.forEach(t),nAr=r(lie," class method or the "),ZK=n(lie,"A",{href:!0});var HWt=s(ZK);sAr=r(HWt,"from_config()"),HWt.forEach(t),lAr=r(lie,` class
method.`),lie.forEach(t),iAr=i(Hl),dk=n(Hl,"P",{});var Voo=s(dk);dAr=r(Voo,"This class cannot be instantiated directly using "),r5e=n(Voo,"CODE",{});var JWt=s(r5e);cAr=r(JWt,"__init__()"),JWt.forEach(t),mAr=r(Voo," (throws an error)."),Voo.forEach(t),fAr=i(Hl),jt=n(Hl,"DIV",{class:!0});var v8=s(jt);T(ck.$$.fragment,v8),gAr=i(v8),t5e=n(v8,"P",{});var YWt=s(t5e);hAr=r(YWt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),YWt.forEach(t),uAr=i(v8),xc=n(v8,"P",{});var iie=s(xc);pAr=r(iie,`Note:
Loading a model from its configuration file does `),a5e=n(iie,"STRONG",{});var KWt=s(a5e);_Ar=r(KWt,"not"),KWt.forEach(t),bAr=r(iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(iie,"A",{href:!0});var ZWt=s(eZ);vAr=r(ZWt,"from_pretrained()"),ZWt.forEach(t),FAr=r(iie," to load the model weights."),iie.forEach(t),TAr=i(v8),T(qC.$$.fragment,v8),v8.forEach(t),MAr=i(Hl),To=n(Hl,"DIV",{class:!0});var Ga=s(To);T(mk.$$.fragment,Ga),EAr=i(Ga),n5e=n(Ga,"P",{});var eUt=s(n5e);CAr=r(eUt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),eUt.forEach(t),wAr=i(Ga),bn=n(Ga,"P",{});var F8=s(bn);AAr=r(F8,"The model class to instantiate is selected based on the "),s5e=n(F8,"CODE",{});var oUt=s(s5e);LAr=r(oUt,"model_type"),oUt.forEach(t),yAr=r(F8,` property of the config object (either
passed as an argument or loaded from `),l5e=n(F8,"CODE",{});var rUt=s(l5e);xAr=r(rUt,"pretrained_model_name_or_path"),rUt.forEach(t),$Ar=r(F8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i5e=n(F8,"CODE",{});var tUt=s(i5e);kAr=r(tUt,"pretrained_model_name_or_path"),tUt.forEach(t),SAr=r(F8,":"),F8.forEach(t),RAr=i(Ga),vn=n(Ga,"UL",{});var T8=s(vn);jC=n(T8,"LI",{});var Yze=s(jC);d5e=n(Yze,"STRONG",{});var aUt=s(d5e);PAr=r(aUt,"deit"),aUt.forEach(t),BAr=r(Yze," \u2014 "),oZ=n(Yze,"A",{href:!0});var nUt=s(oZ);IAr=r(nUt,"DeiTForMaskedImageModeling"),nUt.forEach(t),NAr=r(Yze," (DeiT model)"),Yze.forEach(t),qAr=i(T8),DC=n(T8,"LI",{});var Kze=s(DC);c5e=n(Kze,"STRONG",{});var sUt=s(c5e);jAr=r(sUt,"swin"),sUt.forEach(t),DAr=r(Kze," \u2014 "),rZ=n(Kze,"A",{href:!0});var lUt=s(rZ);GAr=r(lUt,"SwinForMaskedImageModeling"),lUt.forEach(t),OAr=r(Kze," (Swin Transformer model)"),Kze.forEach(t),VAr=i(T8),GC=n(T8,"LI",{});var Zze=s(GC);m5e=n(Zze,"STRONG",{});var iUt=s(m5e);XAr=r(iUt,"swinv2"),iUt.forEach(t),zAr=r(Zze," \u2014 "),tZ=n(Zze,"A",{href:!0});var dUt=s(tZ);QAr=r(dUt,"Swinv2ForMaskedImageModeling"),dUt.forEach(t),WAr=r(Zze," (Swin Transformer V2 model)"),Zze.forEach(t),UAr=i(T8),OC=n(T8,"LI",{});var eQe=s(OC);f5e=n(eQe,"STRONG",{});var cUt=s(f5e);HAr=r(cUt,"vit"),cUt.forEach(t),JAr=r(eQe," \u2014 "),aZ=n(eQe,"A",{href:!0});var mUt=s(aZ);YAr=r(mUt,"ViTForMaskedImageModeling"),mUt.forEach(t),KAr=r(eQe," (ViT model)"),eQe.forEach(t),T8.forEach(t),ZAr=i(Ga),VC=n(Ga,"P",{});var oQe=s(VC);e6r=r(oQe,"The model is set in evaluation mode by default using "),g5e=n(oQe,"CODE",{});var fUt=s(g5e);o6r=r(fUt,"model.eval()"),fUt.forEach(t),r6r=r(oQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h5e=n(oQe,"CODE",{});var gUt=s(h5e);t6r=r(gUt,"model.train()"),gUt.forEach(t),oQe.forEach(t),a6r=i(Ga),T(XC.$$.fragment,Ga),Ga.forEach(t),Hl.forEach(t),xZe=i(m),$c=n(m,"H2",{class:!0});var Xoo=s($c);zC=n(Xoo,"A",{id:!0,class:!0,href:!0});var hUt=s(zC);u5e=n(hUt,"SPAN",{});var uUt=s(u5e);T(fk.$$.fragment,uUt),uUt.forEach(t),hUt.forEach(t),n6r=i(Xoo),p5e=n(Xoo,"SPAN",{});var pUt=s(p5e);s6r=r(pUt,"AutoModelForObjectDetection"),pUt.forEach(t),Xoo.forEach(t),$Ze=i(m),rr=n(m,"DIV",{class:!0});var Jl=s(rr);T(gk.$$.fragment,Jl),l6r=i(Jl),kc=n(Jl,"P",{});var die=s(kc);i6r=r(die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),nZ=n(die,"A",{href:!0});var _Ut=s(nZ);d6r=r(_Ut,"from_pretrained()"),_Ut.forEach(t),c6r=r(die," class method or the "),sZ=n(die,"A",{href:!0});var bUt=s(sZ);m6r=r(bUt,"from_config()"),bUt.forEach(t),f6r=r(die,` class
method.`),die.forEach(t),g6r=i(Jl),hk=n(Jl,"P",{});var zoo=s(hk);h6r=r(zoo,"This class cannot be instantiated directly using "),_5e=n(zoo,"CODE",{});var vUt=s(_5e);u6r=r(vUt,"__init__()"),vUt.forEach(t),p6r=r(zoo," (throws an error)."),zoo.forEach(t),_6r=i(Jl),Dt=n(Jl,"DIV",{class:!0});var M8=s(Dt);T(uk.$$.fragment,M8),b6r=i(M8),b5e=n(M8,"P",{});var FUt=s(b5e);v6r=r(FUt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),FUt.forEach(t),F6r=i(M8),Sc=n(M8,"P",{});var cie=s(Sc);T6r=r(cie,`Note:
Loading a model from its configuration file does `),v5e=n(cie,"STRONG",{});var TUt=s(v5e);M6r=r(TUt,"not"),TUt.forEach(t),E6r=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(cie,"A",{href:!0});var MUt=s(lZ);C6r=r(MUt,"from_pretrained()"),MUt.forEach(t),w6r=r(cie," to load the model weights."),cie.forEach(t),A6r=i(M8),T(QC.$$.fragment,M8),M8.forEach(t),L6r=i(Jl),Mo=n(Jl,"DIV",{class:!0});var Oa=s(Mo);T(pk.$$.fragment,Oa),y6r=i(Oa),F5e=n(Oa,"P",{});var EUt=s(F5e);x6r=r(EUt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),EUt.forEach(t),$6r=i(Oa),Fn=n(Oa,"P",{});var E8=s(Fn);k6r=r(E8,"The model class to instantiate is selected based on the "),T5e=n(E8,"CODE",{});var CUt=s(T5e);S6r=r(CUt,"model_type"),CUt.forEach(t),R6r=r(E8,` property of the config object (either
passed as an argument or loaded from `),M5e=n(E8,"CODE",{});var wUt=s(M5e);P6r=r(wUt,"pretrained_model_name_or_path"),wUt.forEach(t),B6r=r(E8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(E8,"CODE",{});var AUt=s(E5e);I6r=r(AUt,"pretrained_model_name_or_path"),AUt.forEach(t),N6r=r(E8,":"),E8.forEach(t),q6r=i(Oa),Tn=n(Oa,"UL",{});var C8=s(Tn);WC=n(C8,"LI",{});var rQe=s(WC);C5e=n(rQe,"STRONG",{});var LUt=s(C5e);j6r=r(LUt,"conditional_detr"),LUt.forEach(t),D6r=r(rQe," \u2014 "),iZ=n(rQe,"A",{href:!0});var yUt=s(iZ);G6r=r(yUt,"ConditionalDetrForObjectDetection"),yUt.forEach(t),O6r=r(rQe," (Conditional DETR model)"),rQe.forEach(t),V6r=i(C8),UC=n(C8,"LI",{});var tQe=s(UC);w5e=n(tQe,"STRONG",{});var xUt=s(w5e);X6r=r(xUt,"deformable_detr"),xUt.forEach(t),z6r=r(tQe," \u2014 "),dZ=n(tQe,"A",{href:!0});var $Ut=s(dZ);Q6r=r($Ut,"DeformableDetrForObjectDetection"),$Ut.forEach(t),W6r=r(tQe," (Deformable DETR model)"),tQe.forEach(t),U6r=i(C8),HC=n(C8,"LI",{});var aQe=s(HC);A5e=n(aQe,"STRONG",{});var kUt=s(A5e);H6r=r(kUt,"detr"),kUt.forEach(t),J6r=r(aQe," \u2014 "),cZ=n(aQe,"A",{href:!0});var SUt=s(cZ);Y6r=r(SUt,"DetrForObjectDetection"),SUt.forEach(t),K6r=r(aQe," (DETR model)"),aQe.forEach(t),Z6r=i(C8),JC=n(C8,"LI",{});var nQe=s(JC);L5e=n(nQe,"STRONG",{});var RUt=s(L5e);e7r=r(RUt,"yolos"),RUt.forEach(t),o7r=r(nQe," \u2014 "),mZ=n(nQe,"A",{href:!0});var PUt=s(mZ);r7r=r(PUt,"YolosForObjectDetection"),PUt.forEach(t),t7r=r(nQe," (YOLOS model)"),nQe.forEach(t),C8.forEach(t),a7r=i(Oa),YC=n(Oa,"P",{});var sQe=s(YC);n7r=r(sQe,"The model is set in evaluation mode by default using "),y5e=n(sQe,"CODE",{});var BUt=s(y5e);s7r=r(BUt,"model.eval()"),BUt.forEach(t),l7r=r(sQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x5e=n(sQe,"CODE",{});var IUt=s(x5e);i7r=r(IUt,"model.train()"),IUt.forEach(t),sQe.forEach(t),d7r=i(Oa),T(KC.$$.fragment,Oa),Oa.forEach(t),Jl.forEach(t),kZe=i(m),Rc=n(m,"H2",{class:!0});var Qoo=s(Rc);ZC=n(Qoo,"A",{id:!0,class:!0,href:!0});var NUt=s(ZC);$5e=n(NUt,"SPAN",{});var qUt=s($5e);T(_k.$$.fragment,qUt),qUt.forEach(t),NUt.forEach(t),c7r=i(Qoo),k5e=n(Qoo,"SPAN",{});var jUt=s(k5e);m7r=r(jUt,"AutoModelForImageSegmentation"),jUt.forEach(t),Qoo.forEach(t),SZe=i(m),tr=n(m,"DIV",{class:!0});var Yl=s(tr);T(bk.$$.fragment,Yl),f7r=i(Yl),Pc=n(Yl,"P",{});var mie=s(Pc);g7r=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),fZ=n(mie,"A",{href:!0});var DUt=s(fZ);h7r=r(DUt,"from_pretrained()"),DUt.forEach(t),u7r=r(mie," class method or the "),gZ=n(mie,"A",{href:!0});var GUt=s(gZ);p7r=r(GUt,"from_config()"),GUt.forEach(t),_7r=r(mie,` class
method.`),mie.forEach(t),b7r=i(Yl),vk=n(Yl,"P",{});var Woo=s(vk);v7r=r(Woo,"This class cannot be instantiated directly using "),S5e=n(Woo,"CODE",{});var OUt=s(S5e);F7r=r(OUt,"__init__()"),OUt.forEach(t),T7r=r(Woo," (throws an error)."),Woo.forEach(t),M7r=i(Yl),Gt=n(Yl,"DIV",{class:!0});var w8=s(Gt);T(Fk.$$.fragment,w8),E7r=i(w8),R5e=n(w8,"P",{});var VUt=s(R5e);C7r=r(VUt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),VUt.forEach(t),w7r=i(w8),Bc=n(w8,"P",{});var fie=s(Bc);A7r=r(fie,`Note:
Loading a model from its configuration file does `),P5e=n(fie,"STRONG",{});var XUt=s(P5e);L7r=r(XUt,"not"),XUt.forEach(t),y7r=r(fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),hZ=n(fie,"A",{href:!0});var zUt=s(hZ);x7r=r(zUt,"from_pretrained()"),zUt.forEach(t),$7r=r(fie," to load the model weights."),fie.forEach(t),k7r=i(w8),T(e3.$$.fragment,w8),w8.forEach(t),S7r=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Va=s(Eo);T(Tk.$$.fragment,Va),R7r=i(Va),B5e=n(Va,"P",{});var QUt=s(B5e);P7r=r(QUt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),QUt.forEach(t),B7r=i(Va),Mn=n(Va,"P",{});var A8=s(Mn);I7r=r(A8,"The model class to instantiate is selected based on the "),I5e=n(A8,"CODE",{});var WUt=s(I5e);N7r=r(WUt,"model_type"),WUt.forEach(t),q7r=r(A8,` property of the config object (either
passed as an argument or loaded from `),N5e=n(A8,"CODE",{});var UUt=s(N5e);j7r=r(UUt,"pretrained_model_name_or_path"),UUt.forEach(t),D7r=r(A8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(A8,"CODE",{});var HUt=s(q5e);G7r=r(HUt,"pretrained_model_name_or_path"),HUt.forEach(t),O7r=r(A8,":"),A8.forEach(t),V7r=i(Va),j5e=n(Va,"UL",{});var JUt=s(j5e);o3=n(JUt,"LI",{});var lQe=s(o3);D5e=n(lQe,"STRONG",{});var YUt=s(D5e);X7r=r(YUt,"detr"),YUt.forEach(t),z7r=r(lQe," \u2014 "),uZ=n(lQe,"A",{href:!0});var KUt=s(uZ);Q7r=r(KUt,"DetrForSegmentation"),KUt.forEach(t),W7r=r(lQe," (DETR model)"),lQe.forEach(t),JUt.forEach(t),U7r=i(Va),r3=n(Va,"P",{});var iQe=s(r3);H7r=r(iQe,"The model is set in evaluation mode by default using "),G5e=n(iQe,"CODE",{});var ZUt=s(G5e);J7r=r(ZUt,"model.eval()"),ZUt.forEach(t),Y7r=r(iQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O5e=n(iQe,"CODE",{});var eHt=s(O5e);K7r=r(eHt,"model.train()"),eHt.forEach(t),iQe.forEach(t),Z7r=i(Va),T(t3.$$.fragment,Va),Va.forEach(t),Yl.forEach(t),RZe=i(m),Ic=n(m,"H2",{class:!0});var Uoo=s(Ic);a3=n(Uoo,"A",{id:!0,class:!0,href:!0});var oHt=s(a3);V5e=n(oHt,"SPAN",{});var rHt=s(V5e);T(Mk.$$.fragment,rHt),rHt.forEach(t),oHt.forEach(t),eLr=i(Uoo),X5e=n(Uoo,"SPAN",{});var tHt=s(X5e);oLr=r(tHt,"AutoModelForSemanticSegmentation"),tHt.forEach(t),Uoo.forEach(t),PZe=i(m),ar=n(m,"DIV",{class:!0});var Kl=s(ar);T(Ek.$$.fragment,Kl),rLr=i(Kl),Nc=n(Kl,"P",{});var gie=s(Nc);tLr=r(gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),pZ=n(gie,"A",{href:!0});var aHt=s(pZ);aLr=r(aHt,"from_pretrained()"),aHt.forEach(t),nLr=r(gie," class method or the "),_Z=n(gie,"A",{href:!0});var nHt=s(_Z);sLr=r(nHt,"from_config()"),nHt.forEach(t),lLr=r(gie,` class
method.`),gie.forEach(t),iLr=i(Kl),Ck=n(Kl,"P",{});var Hoo=s(Ck);dLr=r(Hoo,"This class cannot be instantiated directly using "),z5e=n(Hoo,"CODE",{});var sHt=s(z5e);cLr=r(sHt,"__init__()"),sHt.forEach(t),mLr=r(Hoo," (throws an error)."),Hoo.forEach(t),fLr=i(Kl),Ot=n(Kl,"DIV",{class:!0});var L8=s(Ot);T(wk.$$.fragment,L8),gLr=i(L8),Q5e=n(L8,"P",{});var lHt=s(Q5e);hLr=r(lHt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lHt.forEach(t),uLr=i(L8),qc=n(L8,"P",{});var hie=s(qc);pLr=r(hie,`Note:
Loading a model from its configuration file does `),W5e=n(hie,"STRONG",{});var iHt=s(W5e);_Lr=r(iHt,"not"),iHt.forEach(t),bLr=r(hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),bZ=n(hie,"A",{href:!0});var dHt=s(bZ);vLr=r(dHt,"from_pretrained()"),dHt.forEach(t),FLr=r(hie," to load the model weights."),hie.forEach(t),TLr=i(L8),T(n3.$$.fragment,L8),L8.forEach(t),MLr=i(Kl),Co=n(Kl,"DIV",{class:!0});var Xa=s(Co);T(Ak.$$.fragment,Xa),ELr=i(Xa),U5e=n(Xa,"P",{});var cHt=s(U5e);CLr=r(cHt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),cHt.forEach(t),wLr=i(Xa),En=n(Xa,"P",{});var y8=s(En);ALr=r(y8,"The model class to instantiate is selected based on the "),H5e=n(y8,"CODE",{});var mHt=s(H5e);LLr=r(mHt,"model_type"),mHt.forEach(t),yLr=r(y8,` property of the config object (either
passed as an argument or loaded from `),J5e=n(y8,"CODE",{});var fHt=s(J5e);xLr=r(fHt,"pretrained_model_name_or_path"),fHt.forEach(t),$Lr=r(y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(y8,"CODE",{});var gHt=s(Y5e);kLr=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),SLr=r(y8,":"),y8.forEach(t),RLr=i(Xa),gt=n(Xa,"UL",{});var Zl=s(gt);s3=n(Zl,"LI",{});var dQe=s(s3);K5e=n(dQe,"STRONG",{});var hHt=s(K5e);PLr=r(hHt,"beit"),hHt.forEach(t),BLr=r(dQe," \u2014 "),vZ=n(dQe,"A",{href:!0});var uHt=s(vZ);ILr=r(uHt,"BeitForSemanticSegmentation"),uHt.forEach(t),NLr=r(dQe," (BEiT model)"),dQe.forEach(t),qLr=i(Zl),l3=n(Zl,"LI",{});var cQe=s(l3);Z5e=n(cQe,"STRONG",{});var pHt=s(Z5e);jLr=r(pHt,"data2vec-vision"),pHt.forEach(t),DLr=r(cQe," \u2014 "),FZ=n(cQe,"A",{href:!0});var _Ht=s(FZ);GLr=r(_Ht,"Data2VecVisionForSemanticSegmentation"),_Ht.forEach(t),OLr=r(cQe," (Data2VecVision model)"),cQe.forEach(t),VLr=i(Zl),i3=n(Zl,"LI",{});var mQe=s(i3);e0e=n(mQe,"STRONG",{});var bHt=s(e0e);XLr=r(bHt,"dpt"),bHt.forEach(t),zLr=r(mQe," \u2014 "),TZ=n(mQe,"A",{href:!0});var vHt=s(TZ);QLr=r(vHt,"DPTForSemanticSegmentation"),vHt.forEach(t),WLr=r(mQe," (DPT model)"),mQe.forEach(t),ULr=i(Zl),d3=n(Zl,"LI",{});var fQe=s(d3);o0e=n(fQe,"STRONG",{});var FHt=s(o0e);HLr=r(FHt,"mobilevit"),FHt.forEach(t),JLr=r(fQe," \u2014 "),MZ=n(fQe,"A",{href:!0});var THt=s(MZ);YLr=r(THt,"MobileViTForSemanticSegmentation"),THt.forEach(t),KLr=r(fQe," (MobileViT model)"),fQe.forEach(t),ZLr=i(Zl),c3=n(Zl,"LI",{});var gQe=s(c3);r0e=n(gQe,"STRONG",{});var MHt=s(r0e);eyr=r(MHt,"segformer"),MHt.forEach(t),oyr=r(gQe," \u2014 "),EZ=n(gQe,"A",{href:!0});var EHt=s(EZ);ryr=r(EHt,"SegformerForSemanticSegmentation"),EHt.forEach(t),tyr=r(gQe," (SegFormer model)"),gQe.forEach(t),Zl.forEach(t),ayr=i(Xa),m3=n(Xa,"P",{});var hQe=s(m3);nyr=r(hQe,"The model is set in evaluation mode by default using "),t0e=n(hQe,"CODE",{});var CHt=s(t0e);syr=r(CHt,"model.eval()"),CHt.forEach(t),lyr=r(hQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a0e=n(hQe,"CODE",{});var wHt=s(a0e);iyr=r(wHt,"model.train()"),wHt.forEach(t),hQe.forEach(t),dyr=i(Xa),T(f3.$$.fragment,Xa),Xa.forEach(t),Kl.forEach(t),BZe=i(m),jc=n(m,"H2",{class:!0});var Joo=s(jc);g3=n(Joo,"A",{id:!0,class:!0,href:!0});var AHt=s(g3);n0e=n(AHt,"SPAN",{});var LHt=s(n0e);T(Lk.$$.fragment,LHt),LHt.forEach(t),AHt.forEach(t),cyr=i(Joo),s0e=n(Joo,"SPAN",{});var yHt=s(s0e);myr=r(yHt,"AutoModelForInstanceSegmentation"),yHt.forEach(t),Joo.forEach(t),IZe=i(m),nr=n(m,"DIV",{class:!0});var ei=s(nr);T(yk.$$.fragment,ei),fyr=i(ei),Dc=n(ei,"P",{});var uie=s(Dc);gyr=r(uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),CZ=n(uie,"A",{href:!0});var xHt=s(CZ);hyr=r(xHt,"from_pretrained()"),xHt.forEach(t),uyr=r(uie," class method or the "),wZ=n(uie,"A",{href:!0});var $Ht=s(wZ);pyr=r($Ht,"from_config()"),$Ht.forEach(t),_yr=r(uie,` class
method.`),uie.forEach(t),byr=i(ei),xk=n(ei,"P",{});var Yoo=s(xk);vyr=r(Yoo,"This class cannot be instantiated directly using "),l0e=n(Yoo,"CODE",{});var kHt=s(l0e);Fyr=r(kHt,"__init__()"),kHt.forEach(t),Tyr=r(Yoo," (throws an error)."),Yoo.forEach(t),Myr=i(ei),Vt=n(ei,"DIV",{class:!0});var x8=s(Vt);T($k.$$.fragment,x8),Eyr=i(x8),i0e=n(x8,"P",{});var SHt=s(i0e);Cyr=r(SHt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),SHt.forEach(t),wyr=i(x8),Gc=n(x8,"P",{});var pie=s(Gc);Ayr=r(pie,`Note:
Loading a model from its configuration file does `),d0e=n(pie,"STRONG",{});var RHt=s(d0e);Lyr=r(RHt,"not"),RHt.forEach(t),yyr=r(pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(pie,"A",{href:!0});var PHt=s(AZ);xyr=r(PHt,"from_pretrained()"),PHt.forEach(t),$yr=r(pie," to load the model weights."),pie.forEach(t),kyr=i(x8),T(h3.$$.fragment,x8),x8.forEach(t),Syr=i(ei),wo=n(ei,"DIV",{class:!0});var za=s(wo);T(kk.$$.fragment,za),Ryr=i(za),c0e=n(za,"P",{});var BHt=s(c0e);Pyr=r(BHt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),BHt.forEach(t),Byr=i(za),Cn=n(za,"P",{});var $8=s(Cn);Iyr=r($8,"The model class to instantiate is selected based on the "),m0e=n($8,"CODE",{});var IHt=s(m0e);Nyr=r(IHt,"model_type"),IHt.forEach(t),qyr=r($8,` property of the config object (either
passed as an argument or loaded from `),f0e=n($8,"CODE",{});var NHt=s(f0e);jyr=r(NHt,"pretrained_model_name_or_path"),NHt.forEach(t),Dyr=r($8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n($8,"CODE",{});var qHt=s(g0e);Gyr=r(qHt,"pretrained_model_name_or_path"),qHt.forEach(t),Oyr=r($8,":"),$8.forEach(t),Vyr=i(za),h0e=n(za,"UL",{});var jHt=s(h0e);u3=n(jHt,"LI",{});var uQe=s(u3);u0e=n(uQe,"STRONG",{});var DHt=s(u0e);Xyr=r(DHt,"maskformer"),DHt.forEach(t),zyr=r(uQe," \u2014 "),LZ=n(uQe,"A",{href:!0});var GHt=s(LZ);Qyr=r(GHt,"MaskFormerForInstanceSegmentation"),GHt.forEach(t),Wyr=r(uQe," (MaskFormer model)"),uQe.forEach(t),jHt.forEach(t),Uyr=i(za),p3=n(za,"P",{});var pQe=s(p3);Hyr=r(pQe,"The model is set in evaluation mode by default using "),p0e=n(pQe,"CODE",{});var OHt=s(p0e);Jyr=r(OHt,"model.eval()"),OHt.forEach(t),Yyr=r(pQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_0e=n(pQe,"CODE",{});var VHt=s(_0e);Kyr=r(VHt,"model.train()"),VHt.forEach(t),pQe.forEach(t),Zyr=i(za),T(_3.$$.fragment,za),za.forEach(t),ei.forEach(t),NZe=i(m),Oc=n(m,"H2",{class:!0});var Koo=s(Oc);b3=n(Koo,"A",{id:!0,class:!0,href:!0});var XHt=s(b3);b0e=n(XHt,"SPAN",{});var zHt=s(b0e);T(Sk.$$.fragment,zHt),zHt.forEach(t),XHt.forEach(t),e8r=i(Koo),v0e=n(Koo,"SPAN",{});var QHt=s(v0e);o8r=r(QHt,"TFAutoModel"),QHt.forEach(t),Koo.forEach(t),qZe=i(m),sr=n(m,"DIV",{class:!0});var oi=s(sr);T(Rk.$$.fragment,oi),r8r=i(oi),Vc=n(oi,"P",{});var _ie=s(Vc);t8r=r(_ie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yZ=n(_ie,"A",{href:!0});var WHt=s(yZ);a8r=r(WHt,"from_pretrained()"),WHt.forEach(t),n8r=r(_ie," class method or the "),xZ=n(_ie,"A",{href:!0});var UHt=s(xZ);s8r=r(UHt,"from_config()"),UHt.forEach(t),l8r=r(_ie,` class
method.`),_ie.forEach(t),i8r=i(oi),Pk=n(oi,"P",{});var Zoo=s(Pk);d8r=r(Zoo,"This class cannot be instantiated directly using "),F0e=n(Zoo,"CODE",{});var HHt=s(F0e);c8r=r(HHt,"__init__()"),HHt.forEach(t),m8r=r(Zoo," (throws an error)."),Zoo.forEach(t),f8r=i(oi),Xt=n(oi,"DIV",{class:!0});var k8=s(Xt);T(Bk.$$.fragment,k8),g8r=i(k8),T0e=n(k8,"P",{});var JHt=s(T0e);h8r=r(JHt,"Instantiates one of the base model classes of the library from a configuration."),JHt.forEach(t),u8r=i(k8),Xc=n(k8,"P",{});var bie=s(Xc);p8r=r(bie,`Note:
Loading a model from its configuration file does `),M0e=n(bie,"STRONG",{});var YHt=s(M0e);_8r=r(YHt,"not"),YHt.forEach(t),b8r=r(bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(bie,"A",{href:!0});var KHt=s($Z);v8r=r(KHt,"from_pretrained()"),KHt.forEach(t),F8r=r(bie," to load the model weights."),bie.forEach(t),T8r=i(k8),T(v3.$$.fragment,k8),k8.forEach(t),M8r=i(oi),Ir=n(oi,"DIV",{class:!0});var ri=s(Ir);T(Ik.$$.fragment,ri),E8r=i(ri),E0e=n(ri,"P",{});var ZHt=s(E0e);C8r=r(ZHt,"Instantiate one of the base model classes of the library from a pretrained model."),ZHt.forEach(t),w8r=i(ri),wn=n(ri,"P",{});var S8=s(wn);A8r=r(S8,"The model class to instantiate is selected based on the "),C0e=n(S8,"CODE",{});var eJt=s(C0e);L8r=r(eJt,"model_type"),eJt.forEach(t),y8r=r(S8,` property of the config object (either
passed as an argument or loaded from `),w0e=n(S8,"CODE",{});var oJt=s(w0e);x8r=r(oJt,"pretrained_model_name_or_path"),oJt.forEach(t),$8r=r(S8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A0e=n(S8,"CODE",{});var rJt=s(A0e);k8r=r(rJt,"pretrained_model_name_or_path"),rJt.forEach(t),S8r=r(S8,":"),S8.forEach(t),R8r=i(ri),N=n(ri,"UL",{});var j=s(N);F3=n(j,"LI",{});var _Qe=s(F3);L0e=n(_Qe,"STRONG",{});var tJt=s(L0e);P8r=r(tJt,"albert"),tJt.forEach(t),B8r=r(_Qe," \u2014 "),kZ=n(_Qe,"A",{href:!0});var aJt=s(kZ);I8r=r(aJt,"TFAlbertModel"),aJt.forEach(t),N8r=r(_Qe," (ALBERT model)"),_Qe.forEach(t),q8r=i(j),T3=n(j,"LI",{});var bQe=s(T3);y0e=n(bQe,"STRONG",{});var nJt=s(y0e);j8r=r(nJt,"bart"),nJt.forEach(t),D8r=r(bQe," \u2014 "),SZ=n(bQe,"A",{href:!0});var sJt=s(SZ);G8r=r(sJt,"TFBartModel"),sJt.forEach(t),O8r=r(bQe," (BART model)"),bQe.forEach(t),V8r=i(j),M3=n(j,"LI",{});var vQe=s(M3);x0e=n(vQe,"STRONG",{});var lJt=s(x0e);X8r=r(lJt,"bert"),lJt.forEach(t),z8r=r(vQe," \u2014 "),RZ=n(vQe,"A",{href:!0});var iJt=s(RZ);Q8r=r(iJt,"TFBertModel"),iJt.forEach(t),W8r=r(vQe," (BERT model)"),vQe.forEach(t),U8r=i(j),E3=n(j,"LI",{});var FQe=s(E3);$0e=n(FQe,"STRONG",{});var dJt=s($0e);H8r=r(dJt,"blenderbot"),dJt.forEach(t),J8r=r(FQe," \u2014 "),PZ=n(FQe,"A",{href:!0});var cJt=s(PZ);Y8r=r(cJt,"TFBlenderbotModel"),cJt.forEach(t),K8r=r(FQe," (Blenderbot model)"),FQe.forEach(t),Z8r=i(j),C3=n(j,"LI",{});var TQe=s(C3);k0e=n(TQe,"STRONG",{});var mJt=s(k0e);e9r=r(mJt,"blenderbot-small"),mJt.forEach(t),o9r=r(TQe," \u2014 "),BZ=n(TQe,"A",{href:!0});var fJt=s(BZ);r9r=r(fJt,"TFBlenderbotSmallModel"),fJt.forEach(t),t9r=r(TQe," (BlenderbotSmall model)"),TQe.forEach(t),a9r=i(j),w3=n(j,"LI",{});var MQe=s(w3);S0e=n(MQe,"STRONG",{});var gJt=s(S0e);n9r=r(gJt,"camembert"),gJt.forEach(t),s9r=r(MQe," \u2014 "),IZ=n(MQe,"A",{href:!0});var hJt=s(IZ);l9r=r(hJt,"TFCamembertModel"),hJt.forEach(t),i9r=r(MQe," (CamemBERT model)"),MQe.forEach(t),d9r=i(j),A3=n(j,"LI",{});var EQe=s(A3);R0e=n(EQe,"STRONG",{});var uJt=s(R0e);c9r=r(uJt,"clip"),uJt.forEach(t),m9r=r(EQe," \u2014 "),NZ=n(EQe,"A",{href:!0});var pJt=s(NZ);f9r=r(pJt,"TFCLIPModel"),pJt.forEach(t),g9r=r(EQe," (CLIP model)"),EQe.forEach(t),h9r=i(j),L3=n(j,"LI",{});var CQe=s(L3);P0e=n(CQe,"STRONG",{});var _Jt=s(P0e);u9r=r(_Jt,"convbert"),_Jt.forEach(t),p9r=r(CQe," \u2014 "),qZ=n(CQe,"A",{href:!0});var bJt=s(qZ);_9r=r(bJt,"TFConvBertModel"),bJt.forEach(t),b9r=r(CQe," (ConvBERT model)"),CQe.forEach(t),v9r=i(j),y3=n(j,"LI",{});var wQe=s(y3);B0e=n(wQe,"STRONG",{});var vJt=s(B0e);F9r=r(vJt,"convnext"),vJt.forEach(t),T9r=r(wQe," \u2014 "),jZ=n(wQe,"A",{href:!0});var FJt=s(jZ);M9r=r(FJt,"TFConvNextModel"),FJt.forEach(t),E9r=r(wQe," (ConvNeXT model)"),wQe.forEach(t),C9r=i(j),x3=n(j,"LI",{});var AQe=s(x3);I0e=n(AQe,"STRONG",{});var TJt=s(I0e);w9r=r(TJt,"ctrl"),TJt.forEach(t),A9r=r(AQe," \u2014 "),DZ=n(AQe,"A",{href:!0});var MJt=s(DZ);L9r=r(MJt,"TFCTRLModel"),MJt.forEach(t),y9r=r(AQe," (CTRL model)"),AQe.forEach(t),x9r=i(j),$3=n(j,"LI",{});var LQe=s($3);N0e=n(LQe,"STRONG",{});var EJt=s(N0e);$9r=r(EJt,"data2vec-vision"),EJt.forEach(t),k9r=r(LQe," \u2014 "),GZ=n(LQe,"A",{href:!0});var CJt=s(GZ);S9r=r(CJt,"TFData2VecVisionModel"),CJt.forEach(t),R9r=r(LQe," (Data2VecVision model)"),LQe.forEach(t),P9r=i(j),k3=n(j,"LI",{});var yQe=s(k3);q0e=n(yQe,"STRONG",{});var wJt=s(q0e);B9r=r(wJt,"deberta"),wJt.forEach(t),I9r=r(yQe," \u2014 "),OZ=n(yQe,"A",{href:!0});var AJt=s(OZ);N9r=r(AJt,"TFDebertaModel"),AJt.forEach(t),q9r=r(yQe," (DeBERTa model)"),yQe.forEach(t),j9r=i(j),S3=n(j,"LI",{});var xQe=s(S3);j0e=n(xQe,"STRONG",{});var LJt=s(j0e);D9r=r(LJt,"deberta-v2"),LJt.forEach(t),G9r=r(xQe," \u2014 "),VZ=n(xQe,"A",{href:!0});var yJt=s(VZ);O9r=r(yJt,"TFDebertaV2Model"),yJt.forEach(t),V9r=r(xQe," (DeBERTa-v2 model)"),xQe.forEach(t),X9r=i(j),R3=n(j,"LI",{});var $Qe=s(R3);D0e=n($Qe,"STRONG",{});var xJt=s(D0e);z9r=r(xJt,"deit"),xJt.forEach(t),Q9r=r($Qe," \u2014 "),XZ=n($Qe,"A",{href:!0});var $Jt=s(XZ);W9r=r($Jt,"TFDeiTModel"),$Jt.forEach(t),U9r=r($Qe," (DeiT model)"),$Qe.forEach(t),H9r=i(j),P3=n(j,"LI",{});var kQe=s(P3);G0e=n(kQe,"STRONG",{});var kJt=s(G0e);J9r=r(kJt,"distilbert"),kJt.forEach(t),Y9r=r(kQe," \u2014 "),zZ=n(kQe,"A",{href:!0});var SJt=s(zZ);K9r=r(SJt,"TFDistilBertModel"),SJt.forEach(t),Z9r=r(kQe," (DistilBERT model)"),kQe.forEach(t),exr=i(j),B3=n(j,"LI",{});var SQe=s(B3);O0e=n(SQe,"STRONG",{});var RJt=s(O0e);oxr=r(RJt,"dpr"),RJt.forEach(t),rxr=r(SQe," \u2014 "),QZ=n(SQe,"A",{href:!0});var PJt=s(QZ);txr=r(PJt,"TFDPRQuestionEncoder"),PJt.forEach(t),axr=r(SQe," (DPR model)"),SQe.forEach(t),nxr=i(j),I3=n(j,"LI",{});var RQe=s(I3);V0e=n(RQe,"STRONG",{});var BJt=s(V0e);sxr=r(BJt,"electra"),BJt.forEach(t),lxr=r(RQe," \u2014 "),WZ=n(RQe,"A",{href:!0});var IJt=s(WZ);ixr=r(IJt,"TFElectraModel"),IJt.forEach(t),dxr=r(RQe," (ELECTRA model)"),RQe.forEach(t),cxr=i(j),N3=n(j,"LI",{});var PQe=s(N3);X0e=n(PQe,"STRONG",{});var NJt=s(X0e);mxr=r(NJt,"flaubert"),NJt.forEach(t),fxr=r(PQe," \u2014 "),UZ=n(PQe,"A",{href:!0});var qJt=s(UZ);gxr=r(qJt,"TFFlaubertModel"),qJt.forEach(t),hxr=r(PQe," (FlauBERT model)"),PQe.forEach(t),uxr=i(j),Fl=n(j,"LI",{});var BB=s(Fl);z0e=n(BB,"STRONG",{});var jJt=s(z0e);pxr=r(jJt,"funnel"),jJt.forEach(t),_xr=r(BB," \u2014 "),HZ=n(BB,"A",{href:!0});var DJt=s(HZ);bxr=r(DJt,"TFFunnelModel"),DJt.forEach(t),vxr=r(BB," or "),JZ=n(BB,"A",{href:!0});var GJt=s(JZ);Fxr=r(GJt,"TFFunnelBaseModel"),GJt.forEach(t),Txr=r(BB," (Funnel Transformer model)"),BB.forEach(t),Mxr=i(j),q3=n(j,"LI",{});var BQe=s(q3);Q0e=n(BQe,"STRONG",{});var OJt=s(Q0e);Exr=r(OJt,"gpt2"),OJt.forEach(t),Cxr=r(BQe," \u2014 "),YZ=n(BQe,"A",{href:!0});var VJt=s(YZ);wxr=r(VJt,"TFGPT2Model"),VJt.forEach(t),Axr=r(BQe," (OpenAI GPT-2 model)"),BQe.forEach(t),Lxr=i(j),j3=n(j,"LI",{});var IQe=s(j3);W0e=n(IQe,"STRONG",{});var XJt=s(W0e);yxr=r(XJt,"gptj"),XJt.forEach(t),xxr=r(IQe," \u2014 "),KZ=n(IQe,"A",{href:!0});var zJt=s(KZ);$xr=r(zJt,"TFGPTJModel"),zJt.forEach(t),kxr=r(IQe," (GPT-J model)"),IQe.forEach(t),Sxr=i(j),D3=n(j,"LI",{});var NQe=s(D3);U0e=n(NQe,"STRONG",{});var QJt=s(U0e);Rxr=r(QJt,"hubert"),QJt.forEach(t),Pxr=r(NQe," \u2014 "),ZZ=n(NQe,"A",{href:!0});var WJt=s(ZZ);Bxr=r(WJt,"TFHubertModel"),WJt.forEach(t),Ixr=r(NQe," (Hubert model)"),NQe.forEach(t),Nxr=i(j),G3=n(j,"LI",{});var qQe=s(G3);H0e=n(qQe,"STRONG",{});var UJt=s(H0e);qxr=r(UJt,"layoutlm"),UJt.forEach(t),jxr=r(qQe," \u2014 "),eee=n(qQe,"A",{href:!0});var HJt=s(eee);Dxr=r(HJt,"TFLayoutLMModel"),HJt.forEach(t),Gxr=r(qQe," (LayoutLM model)"),qQe.forEach(t),Oxr=i(j),O3=n(j,"LI",{});var jQe=s(O3);J0e=n(jQe,"STRONG",{});var JJt=s(J0e);Vxr=r(JJt,"layoutlmv3"),JJt.forEach(t),Xxr=r(jQe," \u2014 "),oee=n(jQe,"A",{href:!0});var YJt=s(oee);zxr=r(YJt,"TFLayoutLMv3Model"),YJt.forEach(t),Qxr=r(jQe," (LayoutLMv3 model)"),jQe.forEach(t),Wxr=i(j),V3=n(j,"LI",{});var DQe=s(V3);Y0e=n(DQe,"STRONG",{});var KJt=s(Y0e);Uxr=r(KJt,"led"),KJt.forEach(t),Hxr=r(DQe," \u2014 "),ree=n(DQe,"A",{href:!0});var ZJt=s(ree);Jxr=r(ZJt,"TFLEDModel"),ZJt.forEach(t),Yxr=r(DQe," (LED model)"),DQe.forEach(t),Kxr=i(j),X3=n(j,"LI",{});var GQe=s(X3);K0e=n(GQe,"STRONG",{});var eYt=s(K0e);Zxr=r(eYt,"longformer"),eYt.forEach(t),e$r=r(GQe," \u2014 "),tee=n(GQe,"A",{href:!0});var oYt=s(tee);o$r=r(oYt,"TFLongformerModel"),oYt.forEach(t),r$r=r(GQe," (Longformer model)"),GQe.forEach(t),t$r=i(j),z3=n(j,"LI",{});var OQe=s(z3);Z0e=n(OQe,"STRONG",{});var rYt=s(Z0e);a$r=r(rYt,"lxmert"),rYt.forEach(t),n$r=r(OQe," \u2014 "),aee=n(OQe,"A",{href:!0});var tYt=s(aee);s$r=r(tYt,"TFLxmertModel"),tYt.forEach(t),l$r=r(OQe," (LXMERT model)"),OQe.forEach(t),i$r=i(j),Q3=n(j,"LI",{});var VQe=s(Q3);ewe=n(VQe,"STRONG",{});var aYt=s(ewe);d$r=r(aYt,"marian"),aYt.forEach(t),c$r=r(VQe," \u2014 "),nee=n(VQe,"A",{href:!0});var nYt=s(nee);m$r=r(nYt,"TFMarianModel"),nYt.forEach(t),f$r=r(VQe," (Marian model)"),VQe.forEach(t),g$r=i(j),W3=n(j,"LI",{});var XQe=s(W3);owe=n(XQe,"STRONG",{});var sYt=s(owe);h$r=r(sYt,"mbart"),sYt.forEach(t),u$r=r(XQe," \u2014 "),see=n(XQe,"A",{href:!0});var lYt=s(see);p$r=r(lYt,"TFMBartModel"),lYt.forEach(t),_$r=r(XQe," (mBART model)"),XQe.forEach(t),b$r=i(j),U3=n(j,"LI",{});var zQe=s(U3);rwe=n(zQe,"STRONG",{});var iYt=s(rwe);v$r=r(iYt,"mobilebert"),iYt.forEach(t),F$r=r(zQe," \u2014 "),lee=n(zQe,"A",{href:!0});var dYt=s(lee);T$r=r(dYt,"TFMobileBertModel"),dYt.forEach(t),M$r=r(zQe," (MobileBERT model)"),zQe.forEach(t),E$r=i(j),H3=n(j,"LI",{});var QQe=s(H3);twe=n(QQe,"STRONG",{});var cYt=s(twe);C$r=r(cYt,"mobilevit"),cYt.forEach(t),w$r=r(QQe," \u2014 "),iee=n(QQe,"A",{href:!0});var mYt=s(iee);A$r=r(mYt,"TFMobileViTModel"),mYt.forEach(t),L$r=r(QQe," (MobileViT model)"),QQe.forEach(t),y$r=i(j),J3=n(j,"LI",{});var WQe=s(J3);awe=n(WQe,"STRONG",{});var fYt=s(awe);x$r=r(fYt,"mpnet"),fYt.forEach(t),$$r=r(WQe," \u2014 "),dee=n(WQe,"A",{href:!0});var gYt=s(dee);k$r=r(gYt,"TFMPNetModel"),gYt.forEach(t),S$r=r(WQe," (MPNet model)"),WQe.forEach(t),R$r=i(j),Y3=n(j,"LI",{});var UQe=s(Y3);nwe=n(UQe,"STRONG",{});var hYt=s(nwe);P$r=r(hYt,"mt5"),hYt.forEach(t),B$r=r(UQe," \u2014 "),cee=n(UQe,"A",{href:!0});var uYt=s(cee);I$r=r(uYt,"TFMT5Model"),uYt.forEach(t),N$r=r(UQe," (MT5 model)"),UQe.forEach(t),q$r=i(j),K3=n(j,"LI",{});var HQe=s(K3);swe=n(HQe,"STRONG",{});var pYt=s(swe);j$r=r(pYt,"openai-gpt"),pYt.forEach(t),D$r=r(HQe," \u2014 "),mee=n(HQe,"A",{href:!0});var _Yt=s(mee);G$r=r(_Yt,"TFOpenAIGPTModel"),_Yt.forEach(t),O$r=r(HQe," (OpenAI GPT model)"),HQe.forEach(t),V$r=i(j),Z3=n(j,"LI",{});var JQe=s(Z3);lwe=n(JQe,"STRONG",{});var bYt=s(lwe);X$r=r(bYt,"opt"),bYt.forEach(t),z$r=r(JQe," \u2014 "),fee=n(JQe,"A",{href:!0});var vYt=s(fee);Q$r=r(vYt,"TFOPTModel"),vYt.forEach(t),W$r=r(JQe," (OPT model)"),JQe.forEach(t),U$r=i(j),e5=n(j,"LI",{});var YQe=s(e5);iwe=n(YQe,"STRONG",{});var FYt=s(iwe);H$r=r(FYt,"pegasus"),FYt.forEach(t),J$r=r(YQe," \u2014 "),gee=n(YQe,"A",{href:!0});var TYt=s(gee);Y$r=r(TYt,"TFPegasusModel"),TYt.forEach(t),K$r=r(YQe," (Pegasus model)"),YQe.forEach(t),Z$r=i(j),o5=n(j,"LI",{});var KQe=s(o5);dwe=n(KQe,"STRONG",{});var MYt=s(dwe);ekr=r(MYt,"regnet"),MYt.forEach(t),okr=r(KQe," \u2014 "),hee=n(KQe,"A",{href:!0});var EYt=s(hee);rkr=r(EYt,"TFRegNetModel"),EYt.forEach(t),tkr=r(KQe," (RegNet model)"),KQe.forEach(t),akr=i(j),r5=n(j,"LI",{});var ZQe=s(r5);cwe=n(ZQe,"STRONG",{});var CYt=s(cwe);nkr=r(CYt,"rembert"),CYt.forEach(t),skr=r(ZQe," \u2014 "),uee=n(ZQe,"A",{href:!0});var wYt=s(uee);lkr=r(wYt,"TFRemBertModel"),wYt.forEach(t),ikr=r(ZQe," (RemBERT model)"),ZQe.forEach(t),dkr=i(j),t5=n(j,"LI",{});var eWe=s(t5);mwe=n(eWe,"STRONG",{});var AYt=s(mwe);ckr=r(AYt,"resnet"),AYt.forEach(t),mkr=r(eWe," \u2014 "),pee=n(eWe,"A",{href:!0});var LYt=s(pee);fkr=r(LYt,"TFResNetModel"),LYt.forEach(t),gkr=r(eWe," (ResNet model)"),eWe.forEach(t),hkr=i(j),a5=n(j,"LI",{});var oWe=s(a5);fwe=n(oWe,"STRONG",{});var yYt=s(fwe);ukr=r(yYt,"roberta"),yYt.forEach(t),pkr=r(oWe," \u2014 "),_ee=n(oWe,"A",{href:!0});var xYt=s(_ee);_kr=r(xYt,"TFRobertaModel"),xYt.forEach(t),bkr=r(oWe," (RoBERTa model)"),oWe.forEach(t),vkr=i(j),n5=n(j,"LI",{});var rWe=s(n5);gwe=n(rWe,"STRONG",{});var $Yt=s(gwe);Fkr=r($Yt,"roformer"),$Yt.forEach(t),Tkr=r(rWe," \u2014 "),bee=n(rWe,"A",{href:!0});var kYt=s(bee);Mkr=r(kYt,"TFRoFormerModel"),kYt.forEach(t),Ekr=r(rWe," (RoFormer model)"),rWe.forEach(t),Ckr=i(j),s5=n(j,"LI",{});var tWe=s(s5);hwe=n(tWe,"STRONG",{});var SYt=s(hwe);wkr=r(SYt,"segformer"),SYt.forEach(t),Akr=r(tWe," \u2014 "),vee=n(tWe,"A",{href:!0});var RYt=s(vee);Lkr=r(RYt,"TFSegformerModel"),RYt.forEach(t),ykr=r(tWe," (SegFormer model)"),tWe.forEach(t),xkr=i(j),l5=n(j,"LI",{});var aWe=s(l5);uwe=n(aWe,"STRONG",{});var PYt=s(uwe);$kr=r(PYt,"speech_to_text"),PYt.forEach(t),kkr=r(aWe," \u2014 "),Fee=n(aWe,"A",{href:!0});var BYt=s(Fee);Skr=r(BYt,"TFSpeech2TextModel"),BYt.forEach(t),Rkr=r(aWe," (Speech2Text model)"),aWe.forEach(t),Pkr=i(j),i5=n(j,"LI",{});var nWe=s(i5);pwe=n(nWe,"STRONG",{});var IYt=s(pwe);Bkr=r(IYt,"swin"),IYt.forEach(t),Ikr=r(nWe," \u2014 "),Tee=n(nWe,"A",{href:!0});var NYt=s(Tee);Nkr=r(NYt,"TFSwinModel"),NYt.forEach(t),qkr=r(nWe," (Swin Transformer model)"),nWe.forEach(t),jkr=i(j),d5=n(j,"LI",{});var sWe=s(d5);_we=n(sWe,"STRONG",{});var qYt=s(_we);Dkr=r(qYt,"t5"),qYt.forEach(t),Gkr=r(sWe," \u2014 "),Mee=n(sWe,"A",{href:!0});var jYt=s(Mee);Okr=r(jYt,"TFT5Model"),jYt.forEach(t),Vkr=r(sWe," (T5 model)"),sWe.forEach(t),Xkr=i(j),c5=n(j,"LI",{});var lWe=s(c5);bwe=n(lWe,"STRONG",{});var DYt=s(bwe);zkr=r(DYt,"tapas"),DYt.forEach(t),Qkr=r(lWe," \u2014 "),Eee=n(lWe,"A",{href:!0});var GYt=s(Eee);Wkr=r(GYt,"TFTapasModel"),GYt.forEach(t),Ukr=r(lWe," (TAPAS model)"),lWe.forEach(t),Hkr=i(j),m5=n(j,"LI",{});var iWe=s(m5);vwe=n(iWe,"STRONG",{});var OYt=s(vwe);Jkr=r(OYt,"transfo-xl"),OYt.forEach(t),Ykr=r(iWe," \u2014 "),Cee=n(iWe,"A",{href:!0});var VYt=s(Cee);Kkr=r(VYt,"TFTransfoXLModel"),VYt.forEach(t),Zkr=r(iWe," (Transformer-XL model)"),iWe.forEach(t),eSr=i(j),f5=n(j,"LI",{});var dWe=s(f5);Fwe=n(dWe,"STRONG",{});var XYt=s(Fwe);oSr=r(XYt,"vit"),XYt.forEach(t),rSr=r(dWe," \u2014 "),wee=n(dWe,"A",{href:!0});var zYt=s(wee);tSr=r(zYt,"TFViTModel"),zYt.forEach(t),aSr=r(dWe," (ViT model)"),dWe.forEach(t),nSr=i(j),g5=n(j,"LI",{});var cWe=s(g5);Twe=n(cWe,"STRONG",{});var QYt=s(Twe);sSr=r(QYt,"vit_mae"),QYt.forEach(t),lSr=r(cWe," \u2014 "),Aee=n(cWe,"A",{href:!0});var WYt=s(Aee);iSr=r(WYt,"TFViTMAEModel"),WYt.forEach(t),dSr=r(cWe," (ViTMAE model)"),cWe.forEach(t),cSr=i(j),h5=n(j,"LI",{});var mWe=s(h5);Mwe=n(mWe,"STRONG",{});var UYt=s(Mwe);mSr=r(UYt,"wav2vec2"),UYt.forEach(t),fSr=r(mWe," \u2014 "),Lee=n(mWe,"A",{href:!0});var HYt=s(Lee);gSr=r(HYt,"TFWav2Vec2Model"),HYt.forEach(t),hSr=r(mWe," (Wav2Vec2 model)"),mWe.forEach(t),uSr=i(j),u5=n(j,"LI",{});var fWe=s(u5);Ewe=n(fWe,"STRONG",{});var JYt=s(Ewe);pSr=r(JYt,"xglm"),JYt.forEach(t),_Sr=r(fWe," \u2014 "),yee=n(fWe,"A",{href:!0});var YYt=s(yee);bSr=r(YYt,"TFXGLMModel"),YYt.forEach(t),vSr=r(fWe," (XGLM model)"),fWe.forEach(t),FSr=i(j),p5=n(j,"LI",{});var gWe=s(p5);Cwe=n(gWe,"STRONG",{});var KYt=s(Cwe);TSr=r(KYt,"xlm"),KYt.forEach(t),MSr=r(gWe," \u2014 "),xee=n(gWe,"A",{href:!0});var ZYt=s(xee);ESr=r(ZYt,"TFXLMModel"),ZYt.forEach(t),CSr=r(gWe," (XLM model)"),gWe.forEach(t),wSr=i(j),_5=n(j,"LI",{});var hWe=s(_5);wwe=n(hWe,"STRONG",{});var eKt=s(wwe);ASr=r(eKt,"xlm-roberta"),eKt.forEach(t),LSr=r(hWe," \u2014 "),$ee=n(hWe,"A",{href:!0});var oKt=s($ee);ySr=r(oKt,"TFXLMRobertaModel"),oKt.forEach(t),xSr=r(hWe," (XLM-RoBERTa model)"),hWe.forEach(t),$Sr=i(j),b5=n(j,"LI",{});var uWe=s(b5);Awe=n(uWe,"STRONG",{});var rKt=s(Awe);kSr=r(rKt,"xlnet"),rKt.forEach(t),SSr=r(uWe," \u2014 "),kee=n(uWe,"A",{href:!0});var tKt=s(kee);RSr=r(tKt,"TFXLNetModel"),tKt.forEach(t),PSr=r(uWe," (XLNet model)"),uWe.forEach(t),j.forEach(t),BSr=i(ri),T(v5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),jZe=i(m),zc=n(m,"H2",{class:!0});var ero=s(zc);F5=n(ero,"A",{id:!0,class:!0,href:!0});var aKt=s(F5);Lwe=n(aKt,"SPAN",{});var nKt=s(Lwe);T(Nk.$$.fragment,nKt),nKt.forEach(t),aKt.forEach(t),ISr=i(ero),ywe=n(ero,"SPAN",{});var sKt=s(ywe);NSr=r(sKt,"TFAutoModelForPreTraining"),sKt.forEach(t),ero.forEach(t),DZe=i(m),lr=n(m,"DIV",{class:!0});var ti=s(lr);T(qk.$$.fragment,ti),qSr=i(ti),Qc=n(ti,"P",{});var vie=s(Qc);jSr=r(vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),See=n(vie,"A",{href:!0});var lKt=s(See);DSr=r(lKt,"from_pretrained()"),lKt.forEach(t),GSr=r(vie," class method or the "),Ree=n(vie,"A",{href:!0});var iKt=s(Ree);OSr=r(iKt,"from_config()"),iKt.forEach(t),VSr=r(vie,` class
method.`),vie.forEach(t),XSr=i(ti),jk=n(ti,"P",{});var oro=s(jk);zSr=r(oro,"This class cannot be instantiated directly using "),xwe=n(oro,"CODE",{});var dKt=s(xwe);QSr=r(dKt,"__init__()"),dKt.forEach(t),WSr=r(oro," (throws an error)."),oro.forEach(t),USr=i(ti),zt=n(ti,"DIV",{class:!0});var R8=s(zt);T(Dk.$$.fragment,R8),HSr=i(R8),$we=n(R8,"P",{});var cKt=s($we);JSr=r(cKt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cKt.forEach(t),YSr=i(R8),Wc=n(R8,"P",{});var Fie=s(Wc);KSr=r(Fie,`Note:
Loading a model from its configuration file does `),kwe=n(Fie,"STRONG",{});var mKt=s(kwe);ZSr=r(mKt,"not"),mKt.forEach(t),eRr=r(Fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=n(Fie,"A",{href:!0});var fKt=s(Pee);oRr=r(fKt,"from_pretrained()"),fKt.forEach(t),rRr=r(Fie," to load the model weights."),Fie.forEach(t),tRr=i(R8),T(T5.$$.fragment,R8),R8.forEach(t),aRr=i(ti),Nr=n(ti,"DIV",{class:!0});var ai=s(Nr);T(Gk.$$.fragment,ai),nRr=i(ai),Swe=n(ai,"P",{});var gKt=s(Swe);sRr=r(gKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gKt.forEach(t),lRr=i(ai),An=n(ai,"P",{});var P8=s(An);iRr=r(P8,"The model class to instantiate is selected based on the "),Rwe=n(P8,"CODE",{});var hKt=s(Rwe);dRr=r(hKt,"model_type"),hKt.forEach(t),cRr=r(P8,` property of the config object (either
passed as an argument or loaded from `),Pwe=n(P8,"CODE",{});var uKt=s(Pwe);mRr=r(uKt,"pretrained_model_name_or_path"),uKt.forEach(t),fRr=r(P8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=n(P8,"CODE",{});var pKt=s(Bwe);gRr=r(pKt,"pretrained_model_name_or_path"),pKt.forEach(t),hRr=r(P8,":"),P8.forEach(t),uRr=i(ai),se=n(ai,"UL",{});var le=s(se);M5=n(le,"LI",{});var pWe=s(M5);Iwe=n(pWe,"STRONG",{});var _Kt=s(Iwe);pRr=r(_Kt,"albert"),_Kt.forEach(t),_Rr=r(pWe," \u2014 "),Bee=n(pWe,"A",{href:!0});var bKt=s(Bee);bRr=r(bKt,"TFAlbertForPreTraining"),bKt.forEach(t),vRr=r(pWe," (ALBERT model)"),pWe.forEach(t),FRr=i(le),E5=n(le,"LI",{});var _We=s(E5);Nwe=n(_We,"STRONG",{});var vKt=s(Nwe);TRr=r(vKt,"bart"),vKt.forEach(t),MRr=r(_We," \u2014 "),Iee=n(_We,"A",{href:!0});var FKt=s(Iee);ERr=r(FKt,"TFBartForConditionalGeneration"),FKt.forEach(t),CRr=r(_We," (BART model)"),_We.forEach(t),wRr=i(le),C5=n(le,"LI",{});var bWe=s(C5);qwe=n(bWe,"STRONG",{});var TKt=s(qwe);ARr=r(TKt,"bert"),TKt.forEach(t),LRr=r(bWe," \u2014 "),Nee=n(bWe,"A",{href:!0});var MKt=s(Nee);yRr=r(MKt,"TFBertForPreTraining"),MKt.forEach(t),xRr=r(bWe," (BERT model)"),bWe.forEach(t),$Rr=i(le),w5=n(le,"LI",{});var vWe=s(w5);jwe=n(vWe,"STRONG",{});var EKt=s(jwe);kRr=r(EKt,"camembert"),EKt.forEach(t),SRr=r(vWe," \u2014 "),qee=n(vWe,"A",{href:!0});var CKt=s(qee);RRr=r(CKt,"TFCamembertForMaskedLM"),CKt.forEach(t),PRr=r(vWe," (CamemBERT model)"),vWe.forEach(t),BRr=i(le),A5=n(le,"LI",{});var FWe=s(A5);Dwe=n(FWe,"STRONG",{});var wKt=s(Dwe);IRr=r(wKt,"ctrl"),wKt.forEach(t),NRr=r(FWe," \u2014 "),jee=n(FWe,"A",{href:!0});var AKt=s(jee);qRr=r(AKt,"TFCTRLLMHeadModel"),AKt.forEach(t),jRr=r(FWe," (CTRL model)"),FWe.forEach(t),DRr=i(le),L5=n(le,"LI",{});var TWe=s(L5);Gwe=n(TWe,"STRONG",{});var LKt=s(Gwe);GRr=r(LKt,"distilbert"),LKt.forEach(t),ORr=r(TWe," \u2014 "),Dee=n(TWe,"A",{href:!0});var yKt=s(Dee);VRr=r(yKt,"TFDistilBertForMaskedLM"),yKt.forEach(t),XRr=r(TWe," (DistilBERT model)"),TWe.forEach(t),zRr=i(le),y5=n(le,"LI",{});var MWe=s(y5);Owe=n(MWe,"STRONG",{});var xKt=s(Owe);QRr=r(xKt,"electra"),xKt.forEach(t),WRr=r(MWe," \u2014 "),Gee=n(MWe,"A",{href:!0});var $Kt=s(Gee);URr=r($Kt,"TFElectraForPreTraining"),$Kt.forEach(t),HRr=r(MWe," (ELECTRA model)"),MWe.forEach(t),JRr=i(le),x5=n(le,"LI",{});var EWe=s(x5);Vwe=n(EWe,"STRONG",{});var kKt=s(Vwe);YRr=r(kKt,"flaubert"),kKt.forEach(t),KRr=r(EWe," \u2014 "),Oee=n(EWe,"A",{href:!0});var SKt=s(Oee);ZRr=r(SKt,"TFFlaubertWithLMHeadModel"),SKt.forEach(t),ePr=r(EWe," (FlauBERT model)"),EWe.forEach(t),oPr=i(le),$5=n(le,"LI",{});var CWe=s($5);Xwe=n(CWe,"STRONG",{});var RKt=s(Xwe);rPr=r(RKt,"funnel"),RKt.forEach(t),tPr=r(CWe," \u2014 "),Vee=n(CWe,"A",{href:!0});var PKt=s(Vee);aPr=r(PKt,"TFFunnelForPreTraining"),PKt.forEach(t),nPr=r(CWe," (Funnel Transformer model)"),CWe.forEach(t),sPr=i(le),k5=n(le,"LI",{});var wWe=s(k5);zwe=n(wWe,"STRONG",{});var BKt=s(zwe);lPr=r(BKt,"gpt2"),BKt.forEach(t),iPr=r(wWe," \u2014 "),Xee=n(wWe,"A",{href:!0});var IKt=s(Xee);dPr=r(IKt,"TFGPT2LMHeadModel"),IKt.forEach(t),cPr=r(wWe," (OpenAI GPT-2 model)"),wWe.forEach(t),mPr=i(le),S5=n(le,"LI",{});var AWe=s(S5);Qwe=n(AWe,"STRONG",{});var NKt=s(Qwe);fPr=r(NKt,"layoutlm"),NKt.forEach(t),gPr=r(AWe," \u2014 "),zee=n(AWe,"A",{href:!0});var qKt=s(zee);hPr=r(qKt,"TFLayoutLMForMaskedLM"),qKt.forEach(t),uPr=r(AWe," (LayoutLM model)"),AWe.forEach(t),pPr=i(le),R5=n(le,"LI",{});var LWe=s(R5);Wwe=n(LWe,"STRONG",{});var jKt=s(Wwe);_Pr=r(jKt,"lxmert"),jKt.forEach(t),bPr=r(LWe," \u2014 "),Qee=n(LWe,"A",{href:!0});var DKt=s(Qee);vPr=r(DKt,"TFLxmertForPreTraining"),DKt.forEach(t),FPr=r(LWe," (LXMERT model)"),LWe.forEach(t),TPr=i(le),P5=n(le,"LI",{});var yWe=s(P5);Uwe=n(yWe,"STRONG",{});var GKt=s(Uwe);MPr=r(GKt,"mobilebert"),GKt.forEach(t),EPr=r(yWe," \u2014 "),Wee=n(yWe,"A",{href:!0});var OKt=s(Wee);CPr=r(OKt,"TFMobileBertForPreTraining"),OKt.forEach(t),wPr=r(yWe," (MobileBERT model)"),yWe.forEach(t),APr=i(le),B5=n(le,"LI",{});var xWe=s(B5);Hwe=n(xWe,"STRONG",{});var VKt=s(Hwe);LPr=r(VKt,"mpnet"),VKt.forEach(t),yPr=r(xWe," \u2014 "),Uee=n(xWe,"A",{href:!0});var XKt=s(Uee);xPr=r(XKt,"TFMPNetForMaskedLM"),XKt.forEach(t),$Pr=r(xWe," (MPNet model)"),xWe.forEach(t),kPr=i(le),I5=n(le,"LI",{});var $We=s(I5);Jwe=n($We,"STRONG",{});var zKt=s(Jwe);SPr=r(zKt,"openai-gpt"),zKt.forEach(t),RPr=r($We," \u2014 "),Hee=n($We,"A",{href:!0});var QKt=s(Hee);PPr=r(QKt,"TFOpenAIGPTLMHeadModel"),QKt.forEach(t),BPr=r($We," (OpenAI GPT model)"),$We.forEach(t),IPr=i(le),N5=n(le,"LI",{});var kWe=s(N5);Ywe=n(kWe,"STRONG",{});var WKt=s(Ywe);NPr=r(WKt,"roberta"),WKt.forEach(t),qPr=r(kWe," \u2014 "),Jee=n(kWe,"A",{href:!0});var UKt=s(Jee);jPr=r(UKt,"TFRobertaForMaskedLM"),UKt.forEach(t),DPr=r(kWe," (RoBERTa model)"),kWe.forEach(t),GPr=i(le),q5=n(le,"LI",{});var SWe=s(q5);Kwe=n(SWe,"STRONG",{});var HKt=s(Kwe);OPr=r(HKt,"t5"),HKt.forEach(t),VPr=r(SWe," \u2014 "),Yee=n(SWe,"A",{href:!0});var JKt=s(Yee);XPr=r(JKt,"TFT5ForConditionalGeneration"),JKt.forEach(t),zPr=r(SWe," (T5 model)"),SWe.forEach(t),QPr=i(le),j5=n(le,"LI",{});var RWe=s(j5);Zwe=n(RWe,"STRONG",{});var YKt=s(Zwe);WPr=r(YKt,"tapas"),YKt.forEach(t),UPr=r(RWe," \u2014 "),Kee=n(RWe,"A",{href:!0});var KKt=s(Kee);HPr=r(KKt,"TFTapasForMaskedLM"),KKt.forEach(t),JPr=r(RWe," (TAPAS model)"),RWe.forEach(t),YPr=i(le),D5=n(le,"LI",{});var PWe=s(D5);eAe=n(PWe,"STRONG",{});var ZKt=s(eAe);KPr=r(ZKt,"transfo-xl"),ZKt.forEach(t),ZPr=r(PWe," \u2014 "),Zee=n(PWe,"A",{href:!0});var eZt=s(Zee);eBr=r(eZt,"TFTransfoXLLMHeadModel"),eZt.forEach(t),oBr=r(PWe," (Transformer-XL model)"),PWe.forEach(t),rBr=i(le),G5=n(le,"LI",{});var BWe=s(G5);oAe=n(BWe,"STRONG",{});var oZt=s(oAe);tBr=r(oZt,"vit_mae"),oZt.forEach(t),aBr=r(BWe," \u2014 "),eoe=n(BWe,"A",{href:!0});var rZt=s(eoe);nBr=r(rZt,"TFViTMAEForPreTraining"),rZt.forEach(t),sBr=r(BWe," (ViTMAE model)"),BWe.forEach(t),lBr=i(le),O5=n(le,"LI",{});var IWe=s(O5);rAe=n(IWe,"STRONG",{});var tZt=s(rAe);iBr=r(tZt,"xlm"),tZt.forEach(t),dBr=r(IWe," \u2014 "),ooe=n(IWe,"A",{href:!0});var aZt=s(ooe);cBr=r(aZt,"TFXLMWithLMHeadModel"),aZt.forEach(t),mBr=r(IWe," (XLM model)"),IWe.forEach(t),fBr=i(le),V5=n(le,"LI",{});var NWe=s(V5);tAe=n(NWe,"STRONG",{});var nZt=s(tAe);gBr=r(nZt,"xlm-roberta"),nZt.forEach(t),hBr=r(NWe," \u2014 "),roe=n(NWe,"A",{href:!0});var sZt=s(roe);uBr=r(sZt,"TFXLMRobertaForMaskedLM"),sZt.forEach(t),pBr=r(NWe," (XLM-RoBERTa model)"),NWe.forEach(t),_Br=i(le),X5=n(le,"LI",{});var qWe=s(X5);aAe=n(qWe,"STRONG",{});var lZt=s(aAe);bBr=r(lZt,"xlnet"),lZt.forEach(t),vBr=r(qWe," \u2014 "),toe=n(qWe,"A",{href:!0});var iZt=s(toe);FBr=r(iZt,"TFXLNetLMHeadModel"),iZt.forEach(t),TBr=r(qWe," (XLNet model)"),qWe.forEach(t),le.forEach(t),MBr=i(ai),T(z5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),GZe=i(m),Uc=n(m,"H2",{class:!0});var rro=s(Uc);Q5=n(rro,"A",{id:!0,class:!0,href:!0});var dZt=s(Q5);nAe=n(dZt,"SPAN",{});var cZt=s(nAe);T(Ok.$$.fragment,cZt),cZt.forEach(t),dZt.forEach(t),EBr=i(rro),sAe=n(rro,"SPAN",{});var mZt=s(sAe);CBr=r(mZt,"TFAutoModelForCausalLM"),mZt.forEach(t),rro.forEach(t),OZe=i(m),ir=n(m,"DIV",{class:!0});var ni=s(ir);T(Vk.$$.fragment,ni),wBr=i(ni),Hc=n(ni,"P",{});var Tie=s(Hc);ABr=r(Tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aoe=n(Tie,"A",{href:!0});var fZt=s(aoe);LBr=r(fZt,"from_pretrained()"),fZt.forEach(t),yBr=r(Tie," class method or the "),noe=n(Tie,"A",{href:!0});var gZt=s(noe);xBr=r(gZt,"from_config()"),gZt.forEach(t),$Br=r(Tie,` class
method.`),Tie.forEach(t),kBr=i(ni),Xk=n(ni,"P",{});var tro=s(Xk);SBr=r(tro,"This class cannot be instantiated directly using "),lAe=n(tro,"CODE",{});var hZt=s(lAe);RBr=r(hZt,"__init__()"),hZt.forEach(t),PBr=r(tro," (throws an error)."),tro.forEach(t),BBr=i(ni),Qt=n(ni,"DIV",{class:!0});var B8=s(Qt);T(zk.$$.fragment,B8),IBr=i(B8),iAe=n(B8,"P",{});var uZt=s(iAe);NBr=r(uZt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uZt.forEach(t),qBr=i(B8),Jc=n(B8,"P",{});var Mie=s(Jc);jBr=r(Mie,`Note:
Loading a model from its configuration file does `),dAe=n(Mie,"STRONG",{});var pZt=s(dAe);DBr=r(pZt,"not"),pZt.forEach(t),GBr=r(Mie,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(Mie,"A",{href:!0});var _Zt=s(soe);OBr=r(_Zt,"from_pretrained()"),_Zt.forEach(t),VBr=r(Mie," to load the model weights."),Mie.forEach(t),XBr=i(B8),T(W5.$$.fragment,B8),B8.forEach(t),zBr=i(ni),qr=n(ni,"DIV",{class:!0});var si=s(qr);T(Qk.$$.fragment,si),QBr=i(si),cAe=n(si,"P",{});var bZt=s(cAe);WBr=r(bZt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bZt.forEach(t),UBr=i(si),Ln=n(si,"P",{});var I8=s(Ln);HBr=r(I8,"The model class to instantiate is selected based on the "),mAe=n(I8,"CODE",{});var vZt=s(mAe);JBr=r(vZt,"model_type"),vZt.forEach(t),YBr=r(I8,` property of the config object (either
passed as an argument or loaded from `),fAe=n(I8,"CODE",{});var FZt=s(fAe);KBr=r(FZt,"pretrained_model_name_or_path"),FZt.forEach(t),ZBr=r(I8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gAe=n(I8,"CODE",{});var TZt=s(gAe);eIr=r(TZt,"pretrained_model_name_or_path"),TZt.forEach(t),oIr=r(I8,":"),I8.forEach(t),rIr=i(si),Me=n(si,"UL",{});var Ce=s(Me);U5=n(Ce,"LI",{});var jWe=s(U5);hAe=n(jWe,"STRONG",{});var MZt=s(hAe);tIr=r(MZt,"bert"),MZt.forEach(t),aIr=r(jWe," \u2014 "),loe=n(jWe,"A",{href:!0});var EZt=s(loe);nIr=r(EZt,"TFBertLMHeadModel"),EZt.forEach(t),sIr=r(jWe," (BERT model)"),jWe.forEach(t),lIr=i(Ce),H5=n(Ce,"LI",{});var DWe=s(H5);uAe=n(DWe,"STRONG",{});var CZt=s(uAe);iIr=r(CZt,"camembert"),CZt.forEach(t),dIr=r(DWe," \u2014 "),ioe=n(DWe,"A",{href:!0});var wZt=s(ioe);cIr=r(wZt,"TFCamembertForCausalLM"),wZt.forEach(t),mIr=r(DWe," (CamemBERT model)"),DWe.forEach(t),fIr=i(Ce),J5=n(Ce,"LI",{});var GWe=s(J5);pAe=n(GWe,"STRONG",{});var AZt=s(pAe);gIr=r(AZt,"ctrl"),AZt.forEach(t),hIr=r(GWe," \u2014 "),doe=n(GWe,"A",{href:!0});var LZt=s(doe);uIr=r(LZt,"TFCTRLLMHeadModel"),LZt.forEach(t),pIr=r(GWe," (CTRL model)"),GWe.forEach(t),_Ir=i(Ce),Y5=n(Ce,"LI",{});var OWe=s(Y5);_Ae=n(OWe,"STRONG",{});var yZt=s(_Ae);bIr=r(yZt,"gpt2"),yZt.forEach(t),vIr=r(OWe," \u2014 "),coe=n(OWe,"A",{href:!0});var xZt=s(coe);FIr=r(xZt,"TFGPT2LMHeadModel"),xZt.forEach(t),TIr=r(OWe," (OpenAI GPT-2 model)"),OWe.forEach(t),MIr=i(Ce),K5=n(Ce,"LI",{});var VWe=s(K5);bAe=n(VWe,"STRONG",{});var $Zt=s(bAe);EIr=r($Zt,"gptj"),$Zt.forEach(t),CIr=r(VWe," \u2014 "),moe=n(VWe,"A",{href:!0});var kZt=s(moe);wIr=r(kZt,"TFGPTJForCausalLM"),kZt.forEach(t),AIr=r(VWe," (GPT-J model)"),VWe.forEach(t),LIr=i(Ce),Z5=n(Ce,"LI",{});var XWe=s(Z5);vAe=n(XWe,"STRONG",{});var SZt=s(vAe);yIr=r(SZt,"openai-gpt"),SZt.forEach(t),xIr=r(XWe," \u2014 "),foe=n(XWe,"A",{href:!0});var RZt=s(foe);$Ir=r(RZt,"TFOpenAIGPTLMHeadModel"),RZt.forEach(t),kIr=r(XWe," (OpenAI GPT model)"),XWe.forEach(t),SIr=i(Ce),e0=n(Ce,"LI",{});var zWe=s(e0);FAe=n(zWe,"STRONG",{});var PZt=s(FAe);RIr=r(PZt,"opt"),PZt.forEach(t),PIr=r(zWe," \u2014 "),goe=n(zWe,"A",{href:!0});var BZt=s(goe);BIr=r(BZt,"TFOPTForCausalLM"),BZt.forEach(t),IIr=r(zWe," (OPT model)"),zWe.forEach(t),NIr=i(Ce),o0=n(Ce,"LI",{});var QWe=s(o0);TAe=n(QWe,"STRONG",{});var IZt=s(TAe);qIr=r(IZt,"rembert"),IZt.forEach(t),jIr=r(QWe," \u2014 "),hoe=n(QWe,"A",{href:!0});var NZt=s(hoe);DIr=r(NZt,"TFRemBertForCausalLM"),NZt.forEach(t),GIr=r(QWe," (RemBERT model)"),QWe.forEach(t),OIr=i(Ce),r0=n(Ce,"LI",{});var WWe=s(r0);MAe=n(WWe,"STRONG",{});var qZt=s(MAe);VIr=r(qZt,"roberta"),qZt.forEach(t),XIr=r(WWe," \u2014 "),uoe=n(WWe,"A",{href:!0});var jZt=s(uoe);zIr=r(jZt,"TFRobertaForCausalLM"),jZt.forEach(t),QIr=r(WWe," (RoBERTa model)"),WWe.forEach(t),WIr=i(Ce),t0=n(Ce,"LI",{});var UWe=s(t0);EAe=n(UWe,"STRONG",{});var DZt=s(EAe);UIr=r(DZt,"roformer"),DZt.forEach(t),HIr=r(UWe," \u2014 "),poe=n(UWe,"A",{href:!0});var GZt=s(poe);JIr=r(GZt,"TFRoFormerForCausalLM"),GZt.forEach(t),YIr=r(UWe," (RoFormer model)"),UWe.forEach(t),KIr=i(Ce),a0=n(Ce,"LI",{});var HWe=s(a0);CAe=n(HWe,"STRONG",{});var OZt=s(CAe);ZIr=r(OZt,"transfo-xl"),OZt.forEach(t),eNr=r(HWe," \u2014 "),_oe=n(HWe,"A",{href:!0});var VZt=s(_oe);oNr=r(VZt,"TFTransfoXLLMHeadModel"),VZt.forEach(t),rNr=r(HWe," (Transformer-XL model)"),HWe.forEach(t),tNr=i(Ce),n0=n(Ce,"LI",{});var JWe=s(n0);wAe=n(JWe,"STRONG",{});var XZt=s(wAe);aNr=r(XZt,"xglm"),XZt.forEach(t),nNr=r(JWe," \u2014 "),boe=n(JWe,"A",{href:!0});var zZt=s(boe);sNr=r(zZt,"TFXGLMForCausalLM"),zZt.forEach(t),lNr=r(JWe," (XGLM model)"),JWe.forEach(t),iNr=i(Ce),s0=n(Ce,"LI",{});var YWe=s(s0);AAe=n(YWe,"STRONG",{});var QZt=s(AAe);dNr=r(QZt,"xlm"),QZt.forEach(t),cNr=r(YWe," \u2014 "),voe=n(YWe,"A",{href:!0});var WZt=s(voe);mNr=r(WZt,"TFXLMWithLMHeadModel"),WZt.forEach(t),fNr=r(YWe," (XLM model)"),YWe.forEach(t),gNr=i(Ce),l0=n(Ce,"LI",{});var KWe=s(l0);LAe=n(KWe,"STRONG",{});var UZt=s(LAe);hNr=r(UZt,"xlnet"),UZt.forEach(t),uNr=r(KWe," \u2014 "),Foe=n(KWe,"A",{href:!0});var HZt=s(Foe);pNr=r(HZt,"TFXLNetLMHeadModel"),HZt.forEach(t),_Nr=r(KWe," (XLNet model)"),KWe.forEach(t),Ce.forEach(t),bNr=i(si),T(i0.$$.fragment,si),si.forEach(t),ni.forEach(t),VZe=i(m),Yc=n(m,"H2",{class:!0});var aro=s(Yc);d0=n(aro,"A",{id:!0,class:!0,href:!0});var JZt=s(d0);yAe=n(JZt,"SPAN",{});var YZt=s(yAe);T(Wk.$$.fragment,YZt),YZt.forEach(t),JZt.forEach(t),vNr=i(aro),xAe=n(aro,"SPAN",{});var KZt=s(xAe);FNr=r(KZt,"TFAutoModelForImageClassification"),KZt.forEach(t),aro.forEach(t),XZe=i(m),dr=n(m,"DIV",{class:!0});var li=s(dr);T(Uk.$$.fragment,li),TNr=i(li),Kc=n(li,"P",{});var Eie=s(Kc);MNr=r(Eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Toe=n(Eie,"A",{href:!0});var ZZt=s(Toe);ENr=r(ZZt,"from_pretrained()"),ZZt.forEach(t),CNr=r(Eie," class method or the "),Moe=n(Eie,"A",{href:!0});var eea=s(Moe);wNr=r(eea,"from_config()"),eea.forEach(t),ANr=r(Eie,` class
method.`),Eie.forEach(t),LNr=i(li),Hk=n(li,"P",{});var nro=s(Hk);yNr=r(nro,"This class cannot be instantiated directly using "),$Ae=n(nro,"CODE",{});var oea=s($Ae);xNr=r(oea,"__init__()"),oea.forEach(t),$Nr=r(nro," (throws an error)."),nro.forEach(t),kNr=i(li),Wt=n(li,"DIV",{class:!0});var N8=s(Wt);T(Jk.$$.fragment,N8),SNr=i(N8),kAe=n(N8,"P",{});var rea=s(kAe);RNr=r(rea,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rea.forEach(t),PNr=i(N8),Zc=n(N8,"P",{});var Cie=s(Zc);BNr=r(Cie,`Note:
Loading a model from its configuration file does `),SAe=n(Cie,"STRONG",{});var tea=s(SAe);INr=r(tea,"not"),tea.forEach(t),NNr=r(Cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eoe=n(Cie,"A",{href:!0});var aea=s(Eoe);qNr=r(aea,"from_pretrained()"),aea.forEach(t),jNr=r(Cie," to load the model weights."),Cie.forEach(t),DNr=i(N8),T(c0.$$.fragment,N8),N8.forEach(t),GNr=i(li),jr=n(li,"DIV",{class:!0});var ii=s(jr);T(Yk.$$.fragment,ii),ONr=i(ii),RAe=n(ii,"P",{});var nea=s(RAe);VNr=r(nea,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nea.forEach(t),XNr=i(ii),yn=n(ii,"P",{});var q8=s(yn);zNr=r(q8,"The model class to instantiate is selected based on the "),PAe=n(q8,"CODE",{});var sea=s(PAe);QNr=r(sea,"model_type"),sea.forEach(t),WNr=r(q8,` property of the config object (either
passed as an argument or loaded from `),BAe=n(q8,"CODE",{});var lea=s(BAe);UNr=r(lea,"pretrained_model_name_or_path"),lea.forEach(t),HNr=r(q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IAe=n(q8,"CODE",{});var iea=s(IAe);JNr=r(iea,"pretrained_model_name_or_path"),iea.forEach(t),YNr=r(q8,":"),q8.forEach(t),KNr=i(ii),Be=n(ii,"UL",{});var We=s(Be);m0=n(We,"LI",{});var ZWe=s(m0);NAe=n(ZWe,"STRONG",{});var dea=s(NAe);ZNr=r(dea,"convnext"),dea.forEach(t),eqr=r(ZWe," \u2014 "),Coe=n(ZWe,"A",{href:!0});var cea=s(Coe);oqr=r(cea,"TFConvNextForImageClassification"),cea.forEach(t),rqr=r(ZWe," (ConvNeXT model)"),ZWe.forEach(t),tqr=i(We),f0=n(We,"LI",{});var eUe=s(f0);qAe=n(eUe,"STRONG",{});var mea=s(qAe);aqr=r(mea,"data2vec-vision"),mea.forEach(t),nqr=r(eUe," \u2014 "),woe=n(eUe,"A",{href:!0});var fea=s(woe);sqr=r(fea,"TFData2VecVisionForImageClassification"),fea.forEach(t),lqr=r(eUe," (Data2VecVision model)"),eUe.forEach(t),iqr=i(We),Tl=n(We,"LI",{});var IB=s(Tl);jAe=n(IB,"STRONG",{});var gea=s(jAe);dqr=r(gea,"deit"),gea.forEach(t),cqr=r(IB," \u2014 "),Aoe=n(IB,"A",{href:!0});var hea=s(Aoe);mqr=r(hea,"TFDeiTForImageClassification"),hea.forEach(t),fqr=r(IB," or "),Loe=n(IB,"A",{href:!0});var uea=s(Loe);gqr=r(uea,"TFDeiTForImageClassificationWithTeacher"),uea.forEach(t),hqr=r(IB," (DeiT model)"),IB.forEach(t),uqr=i(We),g0=n(We,"LI",{});var oUe=s(g0);DAe=n(oUe,"STRONG",{});var pea=s(DAe);pqr=r(pea,"mobilevit"),pea.forEach(t),_qr=r(oUe," \u2014 "),yoe=n(oUe,"A",{href:!0});var _ea=s(yoe);bqr=r(_ea,"TFMobileViTForImageClassification"),_ea.forEach(t),vqr=r(oUe," (MobileViT model)"),oUe.forEach(t),Fqr=i(We),h0=n(We,"LI",{});var rUe=s(h0);GAe=n(rUe,"STRONG",{});var bea=s(GAe);Tqr=r(bea,"regnet"),bea.forEach(t),Mqr=r(rUe," \u2014 "),xoe=n(rUe,"A",{href:!0});var vea=s(xoe);Eqr=r(vea,"TFRegNetForImageClassification"),vea.forEach(t),Cqr=r(rUe," (RegNet model)"),rUe.forEach(t),wqr=i(We),u0=n(We,"LI",{});var tUe=s(u0);OAe=n(tUe,"STRONG",{});var Fea=s(OAe);Aqr=r(Fea,"resnet"),Fea.forEach(t),Lqr=r(tUe," \u2014 "),$oe=n(tUe,"A",{href:!0});var Tea=s($oe);yqr=r(Tea,"TFResNetForImageClassification"),Tea.forEach(t),xqr=r(tUe," (ResNet model)"),tUe.forEach(t),$qr=i(We),p0=n(We,"LI",{});var aUe=s(p0);VAe=n(aUe,"STRONG",{});var Mea=s(VAe);kqr=r(Mea,"segformer"),Mea.forEach(t),Sqr=r(aUe," \u2014 "),koe=n(aUe,"A",{href:!0});var Eea=s(koe);Rqr=r(Eea,"TFSegformerForImageClassification"),Eea.forEach(t),Pqr=r(aUe," (SegFormer model)"),aUe.forEach(t),Bqr=i(We),_0=n(We,"LI",{});var nUe=s(_0);XAe=n(nUe,"STRONG",{});var Cea=s(XAe);Iqr=r(Cea,"swin"),Cea.forEach(t),Nqr=r(nUe," \u2014 "),Soe=n(nUe,"A",{href:!0});var wea=s(Soe);qqr=r(wea,"TFSwinForImageClassification"),wea.forEach(t),jqr=r(nUe," (Swin Transformer model)"),nUe.forEach(t),Dqr=i(We),b0=n(We,"LI",{});var sUe=s(b0);zAe=n(sUe,"STRONG",{});var Aea=s(zAe);Gqr=r(Aea,"vit"),Aea.forEach(t),Oqr=r(sUe," \u2014 "),Roe=n(sUe,"A",{href:!0});var Lea=s(Roe);Vqr=r(Lea,"TFViTForImageClassification"),Lea.forEach(t),Xqr=r(sUe," (ViT model)"),sUe.forEach(t),We.forEach(t),zqr=i(ii),T(v0.$$.fragment,ii),ii.forEach(t),li.forEach(t),zZe=i(m),em=n(m,"H2",{class:!0});var sro=s(em);F0=n(sro,"A",{id:!0,class:!0,href:!0});var yea=s(F0);QAe=n(yea,"SPAN",{});var xea=s(QAe);T(Kk.$$.fragment,xea),xea.forEach(t),yea.forEach(t),Qqr=i(sro),WAe=n(sro,"SPAN",{});var $ea=s(WAe);Wqr=r($ea,"TFAutoModelForSemanticSegmentation"),$ea.forEach(t),sro.forEach(t),QZe=i(m),cr=n(m,"DIV",{class:!0});var di=s(cr);T(Zk.$$.fragment,di),Uqr=i(di),om=n(di,"P",{});var wie=s(om);Hqr=r(wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Poe=n(wie,"A",{href:!0});var kea=s(Poe);Jqr=r(kea,"from_pretrained()"),kea.forEach(t),Yqr=r(wie," class method or the "),Boe=n(wie,"A",{href:!0});var Sea=s(Boe);Kqr=r(Sea,"from_config()"),Sea.forEach(t),Zqr=r(wie,` class
method.`),wie.forEach(t),ejr=i(di),eS=n(di,"P",{});var lro=s(eS);ojr=r(lro,"This class cannot be instantiated directly using "),UAe=n(lro,"CODE",{});var Rea=s(UAe);rjr=r(Rea,"__init__()"),Rea.forEach(t),tjr=r(lro," (throws an error)."),lro.forEach(t),ajr=i(di),Ut=n(di,"DIV",{class:!0});var j8=s(Ut);T(oS.$$.fragment,j8),njr=i(j8),HAe=n(j8,"P",{});var Pea=s(HAe);sjr=r(Pea,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Pea.forEach(t),ljr=i(j8),rm=n(j8,"P",{});var Aie=s(rm);ijr=r(Aie,`Note:
Loading a model from its configuration file does `),JAe=n(Aie,"STRONG",{});var Bea=s(JAe);djr=r(Bea,"not"),Bea.forEach(t),cjr=r(Aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=n(Aie,"A",{href:!0});var Iea=s(Ioe);mjr=r(Iea,"from_pretrained()"),Iea.forEach(t),fjr=r(Aie," to load the model weights."),Aie.forEach(t),gjr=i(j8),T(T0.$$.fragment,j8),j8.forEach(t),hjr=i(di),Dr=n(di,"DIV",{class:!0});var ci=s(Dr);T(rS.$$.fragment,ci),ujr=i(ci),YAe=n(ci,"P",{});var Nea=s(YAe);pjr=r(Nea,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Nea.forEach(t),_jr=i(ci),xn=n(ci,"P",{});var D8=s(xn);bjr=r(D8,"The model class to instantiate is selected based on the "),KAe=n(D8,"CODE",{});var qea=s(KAe);vjr=r(qea,"model_type"),qea.forEach(t),Fjr=r(D8,` property of the config object (either
passed as an argument or loaded from `),ZAe=n(D8,"CODE",{});var jea=s(ZAe);Tjr=r(jea,"pretrained_model_name_or_path"),jea.forEach(t),Mjr=r(D8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(D8,"CODE",{});var Dea=s(e6e);Ejr=r(Dea,"pretrained_model_name_or_path"),Dea.forEach(t),Cjr=r(D8,":"),D8.forEach(t),wjr=i(ci),tm=n(ci,"UL",{});var Lie=s(tm);M0=n(Lie,"LI",{});var lUe=s(M0);o6e=n(lUe,"STRONG",{});var Gea=s(o6e);Ajr=r(Gea,"data2vec-vision"),Gea.forEach(t),Ljr=r(lUe," \u2014 "),Noe=n(lUe,"A",{href:!0});var Oea=s(Noe);yjr=r(Oea,"TFData2VecVisionForSemanticSegmentation"),Oea.forEach(t),xjr=r(lUe," (Data2VecVision model)"),lUe.forEach(t),$jr=i(Lie),E0=n(Lie,"LI",{});var iUe=s(E0);r6e=n(iUe,"STRONG",{});var Vea=s(r6e);kjr=r(Vea,"mobilevit"),Vea.forEach(t),Sjr=r(iUe," \u2014 "),qoe=n(iUe,"A",{href:!0});var Xea=s(qoe);Rjr=r(Xea,"TFMobileViTForSemanticSegmentation"),Xea.forEach(t),Pjr=r(iUe," (MobileViT model)"),iUe.forEach(t),Bjr=i(Lie),C0=n(Lie,"LI",{});var dUe=s(C0);t6e=n(dUe,"STRONG",{});var zea=s(t6e);Ijr=r(zea,"segformer"),zea.forEach(t),Njr=r(dUe," \u2014 "),joe=n(dUe,"A",{href:!0});var Qea=s(joe);qjr=r(Qea,"TFSegformerForSemanticSegmentation"),Qea.forEach(t),jjr=r(dUe," (SegFormer model)"),dUe.forEach(t),Lie.forEach(t),Djr=i(ci),T(w0.$$.fragment,ci),ci.forEach(t),di.forEach(t),WZe=i(m),am=n(m,"H2",{class:!0});var iro=s(am);A0=n(iro,"A",{id:!0,class:!0,href:!0});var Wea=s(A0);a6e=n(Wea,"SPAN",{});var Uea=s(a6e);T(tS.$$.fragment,Uea),Uea.forEach(t),Wea.forEach(t),Gjr=i(iro),n6e=n(iro,"SPAN",{});var Hea=s(n6e);Ojr=r(Hea,"TFAutoModelForMaskedLM"),Hea.forEach(t),iro.forEach(t),UZe=i(m),mr=n(m,"DIV",{class:!0});var mi=s(mr);T(aS.$$.fragment,mi),Vjr=i(mi),nm=n(mi,"P",{});var yie=s(nm);Xjr=r(yie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Doe=n(yie,"A",{href:!0});var Jea=s(Doe);zjr=r(Jea,"from_pretrained()"),Jea.forEach(t),Qjr=r(yie," class method or the "),Goe=n(yie,"A",{href:!0});var Yea=s(Goe);Wjr=r(Yea,"from_config()"),Yea.forEach(t),Ujr=r(yie,` class
method.`),yie.forEach(t),Hjr=i(mi),nS=n(mi,"P",{});var dro=s(nS);Jjr=r(dro,"This class cannot be instantiated directly using "),s6e=n(dro,"CODE",{});var Kea=s(s6e);Yjr=r(Kea,"__init__()"),Kea.forEach(t),Kjr=r(dro," (throws an error)."),dro.forEach(t),Zjr=i(mi),Ht=n(mi,"DIV",{class:!0});var G8=s(Ht);T(sS.$$.fragment,G8),eDr=i(G8),l6e=n(G8,"P",{});var Zea=s(l6e);oDr=r(Zea,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zea.forEach(t),rDr=i(G8),sm=n(G8,"P",{});var xie=s(sm);tDr=r(xie,`Note:
Loading a model from its configuration file does `),i6e=n(xie,"STRONG",{});var eoa=s(i6e);aDr=r(eoa,"not"),eoa.forEach(t),nDr=r(xie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(xie,"A",{href:!0});var ooa=s(Ooe);sDr=r(ooa,"from_pretrained()"),ooa.forEach(t),lDr=r(xie," to load the model weights."),xie.forEach(t),iDr=i(G8),T(L0.$$.fragment,G8),G8.forEach(t),dDr=i(mi),Gr=n(mi,"DIV",{class:!0});var fi=s(Gr);T(lS.$$.fragment,fi),cDr=i(fi),d6e=n(fi,"P",{});var roa=s(d6e);mDr=r(roa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),roa.forEach(t),fDr=i(fi),$n=n(fi,"P",{});var O8=s($n);gDr=r(O8,"The model class to instantiate is selected based on the "),c6e=n(O8,"CODE",{});var toa=s(c6e);hDr=r(toa,"model_type"),toa.forEach(t),uDr=r(O8,` property of the config object (either
passed as an argument or loaded from `),m6e=n(O8,"CODE",{});var aoa=s(m6e);pDr=r(aoa,"pretrained_model_name_or_path"),aoa.forEach(t),_Dr=r(O8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(O8,"CODE",{});var noa=s(f6e);bDr=r(noa,"pretrained_model_name_or_path"),noa.forEach(t),vDr=r(O8,":"),O8.forEach(t),FDr=i(fi),fe=n(fi,"UL",{});var _e=s(fe);y0=n(_e,"LI",{});var cUe=s(y0);g6e=n(cUe,"STRONG",{});var soa=s(g6e);TDr=r(soa,"albert"),soa.forEach(t),MDr=r(cUe," \u2014 "),Voe=n(cUe,"A",{href:!0});var loa=s(Voe);EDr=r(loa,"TFAlbertForMaskedLM"),loa.forEach(t),CDr=r(cUe," (ALBERT model)"),cUe.forEach(t),wDr=i(_e),x0=n(_e,"LI",{});var mUe=s(x0);h6e=n(mUe,"STRONG",{});var ioa=s(h6e);ADr=r(ioa,"bert"),ioa.forEach(t),LDr=r(mUe," \u2014 "),Xoe=n(mUe,"A",{href:!0});var doa=s(Xoe);yDr=r(doa,"TFBertForMaskedLM"),doa.forEach(t),xDr=r(mUe," (BERT model)"),mUe.forEach(t),$Dr=i(_e),$0=n(_e,"LI",{});var fUe=s($0);u6e=n(fUe,"STRONG",{});var coa=s(u6e);kDr=r(coa,"camembert"),coa.forEach(t),SDr=r(fUe," \u2014 "),zoe=n(fUe,"A",{href:!0});var moa=s(zoe);RDr=r(moa,"TFCamembertForMaskedLM"),moa.forEach(t),PDr=r(fUe," (CamemBERT model)"),fUe.forEach(t),BDr=i(_e),k0=n(_e,"LI",{});var gUe=s(k0);p6e=n(gUe,"STRONG",{});var foa=s(p6e);IDr=r(foa,"convbert"),foa.forEach(t),NDr=r(gUe," \u2014 "),Qoe=n(gUe,"A",{href:!0});var goa=s(Qoe);qDr=r(goa,"TFConvBertForMaskedLM"),goa.forEach(t),jDr=r(gUe," (ConvBERT model)"),gUe.forEach(t),DDr=i(_e),S0=n(_e,"LI",{});var hUe=s(S0);_6e=n(hUe,"STRONG",{});var hoa=s(_6e);GDr=r(hoa,"deberta"),hoa.forEach(t),ODr=r(hUe," \u2014 "),Woe=n(hUe,"A",{href:!0});var uoa=s(Woe);VDr=r(uoa,"TFDebertaForMaskedLM"),uoa.forEach(t),XDr=r(hUe," (DeBERTa model)"),hUe.forEach(t),zDr=i(_e),R0=n(_e,"LI",{});var uUe=s(R0);b6e=n(uUe,"STRONG",{});var poa=s(b6e);QDr=r(poa,"deberta-v2"),poa.forEach(t),WDr=r(uUe," \u2014 "),Uoe=n(uUe,"A",{href:!0});var _oa=s(Uoe);UDr=r(_oa,"TFDebertaV2ForMaskedLM"),_oa.forEach(t),HDr=r(uUe," (DeBERTa-v2 model)"),uUe.forEach(t),JDr=i(_e),P0=n(_e,"LI",{});var pUe=s(P0);v6e=n(pUe,"STRONG",{});var boa=s(v6e);YDr=r(boa,"distilbert"),boa.forEach(t),KDr=r(pUe," \u2014 "),Hoe=n(pUe,"A",{href:!0});var voa=s(Hoe);ZDr=r(voa,"TFDistilBertForMaskedLM"),voa.forEach(t),eGr=r(pUe," (DistilBERT model)"),pUe.forEach(t),oGr=i(_e),B0=n(_e,"LI",{});var _Ue=s(B0);F6e=n(_Ue,"STRONG",{});var Foa=s(F6e);rGr=r(Foa,"electra"),Foa.forEach(t),tGr=r(_Ue," \u2014 "),Joe=n(_Ue,"A",{href:!0});var Toa=s(Joe);aGr=r(Toa,"TFElectraForMaskedLM"),Toa.forEach(t),nGr=r(_Ue," (ELECTRA model)"),_Ue.forEach(t),sGr=i(_e),I0=n(_e,"LI",{});var bUe=s(I0);T6e=n(bUe,"STRONG",{});var Moa=s(T6e);lGr=r(Moa,"flaubert"),Moa.forEach(t),iGr=r(bUe," \u2014 "),Yoe=n(bUe,"A",{href:!0});var Eoa=s(Yoe);dGr=r(Eoa,"TFFlaubertWithLMHeadModel"),Eoa.forEach(t),cGr=r(bUe," (FlauBERT model)"),bUe.forEach(t),mGr=i(_e),N0=n(_e,"LI",{});var vUe=s(N0);M6e=n(vUe,"STRONG",{});var Coa=s(M6e);fGr=r(Coa,"funnel"),Coa.forEach(t),gGr=r(vUe," \u2014 "),Koe=n(vUe,"A",{href:!0});var woa=s(Koe);hGr=r(woa,"TFFunnelForMaskedLM"),woa.forEach(t),uGr=r(vUe," (Funnel Transformer model)"),vUe.forEach(t),pGr=i(_e),q0=n(_e,"LI",{});var FUe=s(q0);E6e=n(FUe,"STRONG",{});var Aoa=s(E6e);_Gr=r(Aoa,"layoutlm"),Aoa.forEach(t),bGr=r(FUe," \u2014 "),Zoe=n(FUe,"A",{href:!0});var Loa=s(Zoe);vGr=r(Loa,"TFLayoutLMForMaskedLM"),Loa.forEach(t),FGr=r(FUe," (LayoutLM model)"),FUe.forEach(t),TGr=i(_e),j0=n(_e,"LI",{});var TUe=s(j0);C6e=n(TUe,"STRONG",{});var yoa=s(C6e);MGr=r(yoa,"longformer"),yoa.forEach(t),EGr=r(TUe," \u2014 "),ere=n(TUe,"A",{href:!0});var xoa=s(ere);CGr=r(xoa,"TFLongformerForMaskedLM"),xoa.forEach(t),wGr=r(TUe," (Longformer model)"),TUe.forEach(t),AGr=i(_e),D0=n(_e,"LI",{});var MUe=s(D0);w6e=n(MUe,"STRONG",{});var $oa=s(w6e);LGr=r($oa,"mobilebert"),$oa.forEach(t),yGr=r(MUe," \u2014 "),ore=n(MUe,"A",{href:!0});var koa=s(ore);xGr=r(koa,"TFMobileBertForMaskedLM"),koa.forEach(t),$Gr=r(MUe," (MobileBERT model)"),MUe.forEach(t),kGr=i(_e),G0=n(_e,"LI",{});var EUe=s(G0);A6e=n(EUe,"STRONG",{});var Soa=s(A6e);SGr=r(Soa,"mpnet"),Soa.forEach(t),RGr=r(EUe," \u2014 "),rre=n(EUe,"A",{href:!0});var Roa=s(rre);PGr=r(Roa,"TFMPNetForMaskedLM"),Roa.forEach(t),BGr=r(EUe," (MPNet model)"),EUe.forEach(t),IGr=i(_e),O0=n(_e,"LI",{});var CUe=s(O0);L6e=n(CUe,"STRONG",{});var Poa=s(L6e);NGr=r(Poa,"rembert"),Poa.forEach(t),qGr=r(CUe," \u2014 "),tre=n(CUe,"A",{href:!0});var Boa=s(tre);jGr=r(Boa,"TFRemBertForMaskedLM"),Boa.forEach(t),DGr=r(CUe," (RemBERT model)"),CUe.forEach(t),GGr=i(_e),V0=n(_e,"LI",{});var wUe=s(V0);y6e=n(wUe,"STRONG",{});var Ioa=s(y6e);OGr=r(Ioa,"roberta"),Ioa.forEach(t),VGr=r(wUe," \u2014 "),are=n(wUe,"A",{href:!0});var Noa=s(are);XGr=r(Noa,"TFRobertaForMaskedLM"),Noa.forEach(t),zGr=r(wUe," (RoBERTa model)"),wUe.forEach(t),QGr=i(_e),X0=n(_e,"LI",{});var AUe=s(X0);x6e=n(AUe,"STRONG",{});var qoa=s(x6e);WGr=r(qoa,"roformer"),qoa.forEach(t),UGr=r(AUe," \u2014 "),nre=n(AUe,"A",{href:!0});var joa=s(nre);HGr=r(joa,"TFRoFormerForMaskedLM"),joa.forEach(t),JGr=r(AUe," (RoFormer model)"),AUe.forEach(t),YGr=i(_e),z0=n(_e,"LI",{});var LUe=s(z0);$6e=n(LUe,"STRONG",{});var Doa=s($6e);KGr=r(Doa,"tapas"),Doa.forEach(t),ZGr=r(LUe," \u2014 "),sre=n(LUe,"A",{href:!0});var Goa=s(sre);eOr=r(Goa,"TFTapasForMaskedLM"),Goa.forEach(t),oOr=r(LUe," (TAPAS model)"),LUe.forEach(t),rOr=i(_e),Q0=n(_e,"LI",{});var yUe=s(Q0);k6e=n(yUe,"STRONG",{});var Ooa=s(k6e);tOr=r(Ooa,"xlm"),Ooa.forEach(t),aOr=r(yUe," \u2014 "),lre=n(yUe,"A",{href:!0});var Voa=s(lre);nOr=r(Voa,"TFXLMWithLMHeadModel"),Voa.forEach(t),sOr=r(yUe," (XLM model)"),yUe.forEach(t),lOr=i(_e),W0=n(_e,"LI",{});var xUe=s(W0);S6e=n(xUe,"STRONG",{});var Xoa=s(S6e);iOr=r(Xoa,"xlm-roberta"),Xoa.forEach(t),dOr=r(xUe," \u2014 "),ire=n(xUe,"A",{href:!0});var zoa=s(ire);cOr=r(zoa,"TFXLMRobertaForMaskedLM"),zoa.forEach(t),mOr=r(xUe," (XLM-RoBERTa model)"),xUe.forEach(t),_e.forEach(t),fOr=i(fi),T(U0.$$.fragment,fi),fi.forEach(t),mi.forEach(t),HZe=i(m),lm=n(m,"H2",{class:!0});var cro=s(lm);H0=n(cro,"A",{id:!0,class:!0,href:!0});var Qoa=s(H0);R6e=n(Qoa,"SPAN",{});var Woa=s(R6e);T(iS.$$.fragment,Woa),Woa.forEach(t),Qoa.forEach(t),gOr=i(cro),P6e=n(cro,"SPAN",{});var Uoa=s(P6e);hOr=r(Uoa,"TFAutoModelForSeq2SeqLM"),Uoa.forEach(t),cro.forEach(t),JZe=i(m),fr=n(m,"DIV",{class:!0});var gi=s(fr);T(dS.$$.fragment,gi),uOr=i(gi),im=n(gi,"P",{});var $ie=s(im);pOr=r($ie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dre=n($ie,"A",{href:!0});var Hoa=s(dre);_Or=r(Hoa,"from_pretrained()"),Hoa.forEach(t),bOr=r($ie," class method or the "),cre=n($ie,"A",{href:!0});var Joa=s(cre);vOr=r(Joa,"from_config()"),Joa.forEach(t),FOr=r($ie,` class
method.`),$ie.forEach(t),TOr=i(gi),cS=n(gi,"P",{});var mro=s(cS);MOr=r(mro,"This class cannot be instantiated directly using "),B6e=n(mro,"CODE",{});var Yoa=s(B6e);EOr=r(Yoa,"__init__()"),Yoa.forEach(t),COr=r(mro," (throws an error)."),mro.forEach(t),wOr=i(gi),Jt=n(gi,"DIV",{class:!0});var V8=s(Jt);T(mS.$$.fragment,V8),AOr=i(V8),I6e=n(V8,"P",{});var Koa=s(I6e);LOr=r(Koa,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Koa.forEach(t),yOr=i(V8),dm=n(V8,"P",{});var kie=s(dm);xOr=r(kie,`Note:
Loading a model from its configuration file does `),N6e=n(kie,"STRONG",{});var Zoa=s(N6e);$Or=r(Zoa,"not"),Zoa.forEach(t),kOr=r(kie,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(kie,"A",{href:!0});var era=s(mre);SOr=r(era,"from_pretrained()"),era.forEach(t),ROr=r(kie," to load the model weights."),kie.forEach(t),POr=i(V8),T(J0.$$.fragment,V8),V8.forEach(t),BOr=i(gi),Or=n(gi,"DIV",{class:!0});var hi=s(Or);T(fS.$$.fragment,hi),IOr=i(hi),q6e=n(hi,"P",{});var ora=s(q6e);NOr=r(ora,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ora.forEach(t),qOr=i(hi),kn=n(hi,"P",{});var X8=s(kn);jOr=r(X8,"The model class to instantiate is selected based on the "),j6e=n(X8,"CODE",{});var rra=s(j6e);DOr=r(rra,"model_type"),rra.forEach(t),GOr=r(X8,` property of the config object (either
passed as an argument or loaded from `),D6e=n(X8,"CODE",{});var tra=s(D6e);OOr=r(tra,"pretrained_model_name_or_path"),tra.forEach(t),VOr=r(X8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(X8,"CODE",{});var ara=s(G6e);XOr=r(ara,"pretrained_model_name_or_path"),ara.forEach(t),zOr=r(X8,":"),X8.forEach(t),QOr=i(hi),ye=n(hi,"UL",{});var Ne=s(ye);Y0=n(Ne,"LI",{});var $Ue=s(Y0);O6e=n($Ue,"STRONG",{});var nra=s(O6e);WOr=r(nra,"bart"),nra.forEach(t),UOr=r($Ue," \u2014 "),fre=n($Ue,"A",{href:!0});var sra=s(fre);HOr=r(sra,"TFBartForConditionalGeneration"),sra.forEach(t),JOr=r($Ue," (BART model)"),$Ue.forEach(t),YOr=i(Ne),K0=n(Ne,"LI",{});var kUe=s(K0);V6e=n(kUe,"STRONG",{});var lra=s(V6e);KOr=r(lra,"blenderbot"),lra.forEach(t),ZOr=r(kUe," \u2014 "),gre=n(kUe,"A",{href:!0});var ira=s(gre);eVr=r(ira,"TFBlenderbotForConditionalGeneration"),ira.forEach(t),oVr=r(kUe," (Blenderbot model)"),kUe.forEach(t),rVr=i(Ne),Z0=n(Ne,"LI",{});var SUe=s(Z0);X6e=n(SUe,"STRONG",{});var dra=s(X6e);tVr=r(dra,"blenderbot-small"),dra.forEach(t),aVr=r(SUe," \u2014 "),hre=n(SUe,"A",{href:!0});var cra=s(hre);nVr=r(cra,"TFBlenderbotSmallForConditionalGeneration"),cra.forEach(t),sVr=r(SUe," (BlenderbotSmall model)"),SUe.forEach(t),lVr=i(Ne),ew=n(Ne,"LI",{});var RUe=s(ew);z6e=n(RUe,"STRONG",{});var mra=s(z6e);iVr=r(mra,"encoder-decoder"),mra.forEach(t),dVr=r(RUe," \u2014 "),ure=n(RUe,"A",{href:!0});var fra=s(ure);cVr=r(fra,"TFEncoderDecoderModel"),fra.forEach(t),mVr=r(RUe," (Encoder decoder model)"),RUe.forEach(t),fVr=i(Ne),ow=n(Ne,"LI",{});var PUe=s(ow);Q6e=n(PUe,"STRONG",{});var gra=s(Q6e);gVr=r(gra,"led"),gra.forEach(t),hVr=r(PUe," \u2014 "),pre=n(PUe,"A",{href:!0});var hra=s(pre);uVr=r(hra,"TFLEDForConditionalGeneration"),hra.forEach(t),pVr=r(PUe," (LED model)"),PUe.forEach(t),_Vr=i(Ne),rw=n(Ne,"LI",{});var BUe=s(rw);W6e=n(BUe,"STRONG",{});var ura=s(W6e);bVr=r(ura,"marian"),ura.forEach(t),vVr=r(BUe," \u2014 "),_re=n(BUe,"A",{href:!0});var pra=s(_re);FVr=r(pra,"TFMarianMTModel"),pra.forEach(t),TVr=r(BUe," (Marian model)"),BUe.forEach(t),MVr=i(Ne),tw=n(Ne,"LI",{});var IUe=s(tw);U6e=n(IUe,"STRONG",{});var _ra=s(U6e);EVr=r(_ra,"mbart"),_ra.forEach(t),CVr=r(IUe," \u2014 "),bre=n(IUe,"A",{href:!0});var bra=s(bre);wVr=r(bra,"TFMBartForConditionalGeneration"),bra.forEach(t),AVr=r(IUe," (mBART model)"),IUe.forEach(t),LVr=i(Ne),aw=n(Ne,"LI",{});var NUe=s(aw);H6e=n(NUe,"STRONG",{});var vra=s(H6e);yVr=r(vra,"mt5"),vra.forEach(t),xVr=r(NUe," \u2014 "),vre=n(NUe,"A",{href:!0});var Fra=s(vre);$Vr=r(Fra,"TFMT5ForConditionalGeneration"),Fra.forEach(t),kVr=r(NUe," (MT5 model)"),NUe.forEach(t),SVr=i(Ne),nw=n(Ne,"LI",{});var qUe=s(nw);J6e=n(qUe,"STRONG",{});var Tra=s(J6e);RVr=r(Tra,"pegasus"),Tra.forEach(t),PVr=r(qUe," \u2014 "),Fre=n(qUe,"A",{href:!0});var Mra=s(Fre);BVr=r(Mra,"TFPegasusForConditionalGeneration"),Mra.forEach(t),IVr=r(qUe," (Pegasus model)"),qUe.forEach(t),NVr=i(Ne),sw=n(Ne,"LI",{});var jUe=s(sw);Y6e=n(jUe,"STRONG",{});var Era=s(Y6e);qVr=r(Era,"t5"),Era.forEach(t),jVr=r(jUe," \u2014 "),Tre=n(jUe,"A",{href:!0});var Cra=s(Tre);DVr=r(Cra,"TFT5ForConditionalGeneration"),Cra.forEach(t),GVr=r(jUe," (T5 model)"),jUe.forEach(t),Ne.forEach(t),OVr=i(hi),T(lw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),YZe=i(m),cm=n(m,"H2",{class:!0});var fro=s(cm);iw=n(fro,"A",{id:!0,class:!0,href:!0});var wra=s(iw);K6e=n(wra,"SPAN",{});var Ara=s(K6e);T(gS.$$.fragment,Ara),Ara.forEach(t),wra.forEach(t),VVr=i(fro),Z6e=n(fro,"SPAN",{});var Lra=s(Z6e);XVr=r(Lra,"TFAutoModelForSequenceClassification"),Lra.forEach(t),fro.forEach(t),KZe=i(m),gr=n(m,"DIV",{class:!0});var ui=s(gr);T(hS.$$.fragment,ui),zVr=i(ui),mm=n(ui,"P",{});var Sie=s(mm);QVr=r(Sie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Mre=n(Sie,"A",{href:!0});var yra=s(Mre);WVr=r(yra,"from_pretrained()"),yra.forEach(t),UVr=r(Sie," class method or the "),Ere=n(Sie,"A",{href:!0});var xra=s(Ere);HVr=r(xra,"from_config()"),xra.forEach(t),JVr=r(Sie,` class
method.`),Sie.forEach(t),YVr=i(ui),uS=n(ui,"P",{});var gro=s(uS);KVr=r(gro,"This class cannot be instantiated directly using "),e7e=n(gro,"CODE",{});var $ra=s(e7e);ZVr=r($ra,"__init__()"),$ra.forEach(t),eXr=r(gro," (throws an error)."),gro.forEach(t),oXr=i(ui),Yt=n(ui,"DIV",{class:!0});var z8=s(Yt);T(pS.$$.fragment,z8),rXr=i(z8),o7e=n(z8,"P",{});var kra=s(o7e);tXr=r(kra,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kra.forEach(t),aXr=i(z8),fm=n(z8,"P",{});var Rie=s(fm);nXr=r(Rie,`Note:
Loading a model from its configuration file does `),r7e=n(Rie,"STRONG",{});var Sra=s(r7e);sXr=r(Sra,"not"),Sra.forEach(t),lXr=r(Rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(Rie,"A",{href:!0});var Rra=s(Cre);iXr=r(Rra,"from_pretrained()"),Rra.forEach(t),dXr=r(Rie," to load the model weights."),Rie.forEach(t),cXr=i(z8),T(dw.$$.fragment,z8),z8.forEach(t),mXr=i(ui),Vr=n(ui,"DIV",{class:!0});var pi=s(Vr);T(_S.$$.fragment,pi),fXr=i(pi),t7e=n(pi,"P",{});var Pra=s(t7e);gXr=r(Pra,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pra.forEach(t),hXr=i(pi),Sn=n(pi,"P",{});var Q8=s(Sn);uXr=r(Q8,"The model class to instantiate is selected based on the "),a7e=n(Q8,"CODE",{});var Bra=s(a7e);pXr=r(Bra,"model_type"),Bra.forEach(t),_Xr=r(Q8,` property of the config object (either
passed as an argument or loaded from `),n7e=n(Q8,"CODE",{});var Ira=s(n7e);bXr=r(Ira,"pretrained_model_name_or_path"),Ira.forEach(t),vXr=r(Q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(Q8,"CODE",{});var Nra=s(s7e);FXr=r(Nra,"pretrained_model_name_or_path"),Nra.forEach(t),TXr=r(Q8,":"),Q8.forEach(t),MXr=i(pi),re=n(pi,"UL",{});var ae=s(re);cw=n(ae,"LI",{});var DUe=s(cw);l7e=n(DUe,"STRONG",{});var qra=s(l7e);EXr=r(qra,"albert"),qra.forEach(t),CXr=r(DUe," \u2014 "),wre=n(DUe,"A",{href:!0});var jra=s(wre);wXr=r(jra,"TFAlbertForSequenceClassification"),jra.forEach(t),AXr=r(DUe," (ALBERT model)"),DUe.forEach(t),LXr=i(ae),mw=n(ae,"LI",{});var GUe=s(mw);i7e=n(GUe,"STRONG",{});var Dra=s(i7e);yXr=r(Dra,"bert"),Dra.forEach(t),xXr=r(GUe," \u2014 "),Are=n(GUe,"A",{href:!0});var Gra=s(Are);$Xr=r(Gra,"TFBertForSequenceClassification"),Gra.forEach(t),kXr=r(GUe," (BERT model)"),GUe.forEach(t),SXr=i(ae),fw=n(ae,"LI",{});var OUe=s(fw);d7e=n(OUe,"STRONG",{});var Ora=s(d7e);RXr=r(Ora,"camembert"),Ora.forEach(t),PXr=r(OUe," \u2014 "),Lre=n(OUe,"A",{href:!0});var Vra=s(Lre);BXr=r(Vra,"TFCamembertForSequenceClassification"),Vra.forEach(t),IXr=r(OUe," (CamemBERT model)"),OUe.forEach(t),NXr=i(ae),gw=n(ae,"LI",{});var VUe=s(gw);c7e=n(VUe,"STRONG",{});var Xra=s(c7e);qXr=r(Xra,"convbert"),Xra.forEach(t),jXr=r(VUe," \u2014 "),yre=n(VUe,"A",{href:!0});var zra=s(yre);DXr=r(zra,"TFConvBertForSequenceClassification"),zra.forEach(t),GXr=r(VUe," (ConvBERT model)"),VUe.forEach(t),OXr=i(ae),hw=n(ae,"LI",{});var XUe=s(hw);m7e=n(XUe,"STRONG",{});var Qra=s(m7e);VXr=r(Qra,"ctrl"),Qra.forEach(t),XXr=r(XUe," \u2014 "),xre=n(XUe,"A",{href:!0});var Wra=s(xre);zXr=r(Wra,"TFCTRLForSequenceClassification"),Wra.forEach(t),QXr=r(XUe," (CTRL model)"),XUe.forEach(t),WXr=i(ae),uw=n(ae,"LI",{});var zUe=s(uw);f7e=n(zUe,"STRONG",{});var Ura=s(f7e);UXr=r(Ura,"deberta"),Ura.forEach(t),HXr=r(zUe," \u2014 "),$re=n(zUe,"A",{href:!0});var Hra=s($re);JXr=r(Hra,"TFDebertaForSequenceClassification"),Hra.forEach(t),YXr=r(zUe," (DeBERTa model)"),zUe.forEach(t),KXr=i(ae),pw=n(ae,"LI",{});var QUe=s(pw);g7e=n(QUe,"STRONG",{});var Jra=s(g7e);ZXr=r(Jra,"deberta-v2"),Jra.forEach(t),ezr=r(QUe," \u2014 "),kre=n(QUe,"A",{href:!0});var Yra=s(kre);ozr=r(Yra,"TFDebertaV2ForSequenceClassification"),Yra.forEach(t),rzr=r(QUe," (DeBERTa-v2 model)"),QUe.forEach(t),tzr=i(ae),_w=n(ae,"LI",{});var WUe=s(_w);h7e=n(WUe,"STRONG",{});var Kra=s(h7e);azr=r(Kra,"distilbert"),Kra.forEach(t),nzr=r(WUe," \u2014 "),Sre=n(WUe,"A",{href:!0});var Zra=s(Sre);szr=r(Zra,"TFDistilBertForSequenceClassification"),Zra.forEach(t),lzr=r(WUe," (DistilBERT model)"),WUe.forEach(t),izr=i(ae),bw=n(ae,"LI",{});var UUe=s(bw);u7e=n(UUe,"STRONG",{});var eta=s(u7e);dzr=r(eta,"electra"),eta.forEach(t),czr=r(UUe," \u2014 "),Rre=n(UUe,"A",{href:!0});var ota=s(Rre);mzr=r(ota,"TFElectraForSequenceClassification"),ota.forEach(t),fzr=r(UUe," (ELECTRA model)"),UUe.forEach(t),gzr=i(ae),vw=n(ae,"LI",{});var HUe=s(vw);p7e=n(HUe,"STRONG",{});var rta=s(p7e);hzr=r(rta,"flaubert"),rta.forEach(t),uzr=r(HUe," \u2014 "),Pre=n(HUe,"A",{href:!0});var tta=s(Pre);pzr=r(tta,"TFFlaubertForSequenceClassification"),tta.forEach(t),_zr=r(HUe," (FlauBERT model)"),HUe.forEach(t),bzr=i(ae),Fw=n(ae,"LI",{});var JUe=s(Fw);_7e=n(JUe,"STRONG",{});var ata=s(_7e);vzr=r(ata,"funnel"),ata.forEach(t),Fzr=r(JUe," \u2014 "),Bre=n(JUe,"A",{href:!0});var nta=s(Bre);Tzr=r(nta,"TFFunnelForSequenceClassification"),nta.forEach(t),Mzr=r(JUe," (Funnel Transformer model)"),JUe.forEach(t),Ezr=i(ae),Tw=n(ae,"LI",{});var YUe=s(Tw);b7e=n(YUe,"STRONG",{});var sta=s(b7e);Czr=r(sta,"gpt2"),sta.forEach(t),wzr=r(YUe," \u2014 "),Ire=n(YUe,"A",{href:!0});var lta=s(Ire);Azr=r(lta,"TFGPT2ForSequenceClassification"),lta.forEach(t),Lzr=r(YUe," (OpenAI GPT-2 model)"),YUe.forEach(t),yzr=i(ae),Mw=n(ae,"LI",{});var KUe=s(Mw);v7e=n(KUe,"STRONG",{});var ita=s(v7e);xzr=r(ita,"gptj"),ita.forEach(t),$zr=r(KUe," \u2014 "),Nre=n(KUe,"A",{href:!0});var dta=s(Nre);kzr=r(dta,"TFGPTJForSequenceClassification"),dta.forEach(t),Szr=r(KUe," (GPT-J model)"),KUe.forEach(t),Rzr=i(ae),Ew=n(ae,"LI",{});var ZUe=s(Ew);F7e=n(ZUe,"STRONG",{});var cta=s(F7e);Pzr=r(cta,"layoutlm"),cta.forEach(t),Bzr=r(ZUe," \u2014 "),qre=n(ZUe,"A",{href:!0});var mta=s(qre);Izr=r(mta,"TFLayoutLMForSequenceClassification"),mta.forEach(t),Nzr=r(ZUe," (LayoutLM model)"),ZUe.forEach(t),qzr=i(ae),Cw=n(ae,"LI",{});var eHe=s(Cw);T7e=n(eHe,"STRONG",{});var fta=s(T7e);jzr=r(fta,"layoutlmv3"),fta.forEach(t),Dzr=r(eHe," \u2014 "),jre=n(eHe,"A",{href:!0});var gta=s(jre);Gzr=r(gta,"TFLayoutLMv3ForSequenceClassification"),gta.forEach(t),Ozr=r(eHe," (LayoutLMv3 model)"),eHe.forEach(t),Vzr=i(ae),ww=n(ae,"LI",{});var oHe=s(ww);M7e=n(oHe,"STRONG",{});var hta=s(M7e);Xzr=r(hta,"longformer"),hta.forEach(t),zzr=r(oHe," \u2014 "),Dre=n(oHe,"A",{href:!0});var uta=s(Dre);Qzr=r(uta,"TFLongformerForSequenceClassification"),uta.forEach(t),Wzr=r(oHe," (Longformer model)"),oHe.forEach(t),Uzr=i(ae),Aw=n(ae,"LI",{});var rHe=s(Aw);E7e=n(rHe,"STRONG",{});var pta=s(E7e);Hzr=r(pta,"mobilebert"),pta.forEach(t),Jzr=r(rHe," \u2014 "),Gre=n(rHe,"A",{href:!0});var _ta=s(Gre);Yzr=r(_ta,"TFMobileBertForSequenceClassification"),_ta.forEach(t),Kzr=r(rHe," (MobileBERT model)"),rHe.forEach(t),Zzr=i(ae),Lw=n(ae,"LI",{});var tHe=s(Lw);C7e=n(tHe,"STRONG",{});var bta=s(C7e);eQr=r(bta,"mpnet"),bta.forEach(t),oQr=r(tHe," \u2014 "),Ore=n(tHe,"A",{href:!0});var vta=s(Ore);rQr=r(vta,"TFMPNetForSequenceClassification"),vta.forEach(t),tQr=r(tHe," (MPNet model)"),tHe.forEach(t),aQr=i(ae),yw=n(ae,"LI",{});var aHe=s(yw);w7e=n(aHe,"STRONG",{});var Fta=s(w7e);nQr=r(Fta,"openai-gpt"),Fta.forEach(t),sQr=r(aHe," \u2014 "),Vre=n(aHe,"A",{href:!0});var Tta=s(Vre);lQr=r(Tta,"TFOpenAIGPTForSequenceClassification"),Tta.forEach(t),iQr=r(aHe," (OpenAI GPT model)"),aHe.forEach(t),dQr=i(ae),xw=n(ae,"LI",{});var nHe=s(xw);A7e=n(nHe,"STRONG",{});var Mta=s(A7e);cQr=r(Mta,"rembert"),Mta.forEach(t),mQr=r(nHe," \u2014 "),Xre=n(nHe,"A",{href:!0});var Eta=s(Xre);fQr=r(Eta,"TFRemBertForSequenceClassification"),Eta.forEach(t),gQr=r(nHe," (RemBERT model)"),nHe.forEach(t),hQr=i(ae),$w=n(ae,"LI",{});var sHe=s($w);L7e=n(sHe,"STRONG",{});var Cta=s(L7e);uQr=r(Cta,"roberta"),Cta.forEach(t),pQr=r(sHe," \u2014 "),zre=n(sHe,"A",{href:!0});var wta=s(zre);_Qr=r(wta,"TFRobertaForSequenceClassification"),wta.forEach(t),bQr=r(sHe," (RoBERTa model)"),sHe.forEach(t),vQr=i(ae),kw=n(ae,"LI",{});var lHe=s(kw);y7e=n(lHe,"STRONG",{});var Ata=s(y7e);FQr=r(Ata,"roformer"),Ata.forEach(t),TQr=r(lHe," \u2014 "),Qre=n(lHe,"A",{href:!0});var Lta=s(Qre);MQr=r(Lta,"TFRoFormerForSequenceClassification"),Lta.forEach(t),EQr=r(lHe," (RoFormer model)"),lHe.forEach(t),CQr=i(ae),Sw=n(ae,"LI",{});var iHe=s(Sw);x7e=n(iHe,"STRONG",{});var yta=s(x7e);wQr=r(yta,"tapas"),yta.forEach(t),AQr=r(iHe," \u2014 "),Wre=n(iHe,"A",{href:!0});var xta=s(Wre);LQr=r(xta,"TFTapasForSequenceClassification"),xta.forEach(t),yQr=r(iHe," (TAPAS model)"),iHe.forEach(t),xQr=i(ae),Rw=n(ae,"LI",{});var dHe=s(Rw);$7e=n(dHe,"STRONG",{});var $ta=s($7e);$Qr=r($ta,"transfo-xl"),$ta.forEach(t),kQr=r(dHe," \u2014 "),Ure=n(dHe,"A",{href:!0});var kta=s(Ure);SQr=r(kta,"TFTransfoXLForSequenceClassification"),kta.forEach(t),RQr=r(dHe," (Transformer-XL model)"),dHe.forEach(t),PQr=i(ae),Pw=n(ae,"LI",{});var cHe=s(Pw);k7e=n(cHe,"STRONG",{});var Sta=s(k7e);BQr=r(Sta,"xlm"),Sta.forEach(t),IQr=r(cHe," \u2014 "),Hre=n(cHe,"A",{href:!0});var Rta=s(Hre);NQr=r(Rta,"TFXLMForSequenceClassification"),Rta.forEach(t),qQr=r(cHe," (XLM model)"),cHe.forEach(t),jQr=i(ae),Bw=n(ae,"LI",{});var mHe=s(Bw);S7e=n(mHe,"STRONG",{});var Pta=s(S7e);DQr=r(Pta,"xlm-roberta"),Pta.forEach(t),GQr=r(mHe," \u2014 "),Jre=n(mHe,"A",{href:!0});var Bta=s(Jre);OQr=r(Bta,"TFXLMRobertaForSequenceClassification"),Bta.forEach(t),VQr=r(mHe," (XLM-RoBERTa model)"),mHe.forEach(t),XQr=i(ae),Iw=n(ae,"LI",{});var fHe=s(Iw);R7e=n(fHe,"STRONG",{});var Ita=s(R7e);zQr=r(Ita,"xlnet"),Ita.forEach(t),QQr=r(fHe," \u2014 "),Yre=n(fHe,"A",{href:!0});var Nta=s(Yre);WQr=r(Nta,"TFXLNetForSequenceClassification"),Nta.forEach(t),UQr=r(fHe," (XLNet model)"),fHe.forEach(t),ae.forEach(t),HQr=i(pi),T(Nw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),ZZe=i(m),gm=n(m,"H2",{class:!0});var hro=s(gm);qw=n(hro,"A",{id:!0,class:!0,href:!0});var qta=s(qw);P7e=n(qta,"SPAN",{});var jta=s(P7e);T(bS.$$.fragment,jta),jta.forEach(t),qta.forEach(t),JQr=i(hro),B7e=n(hro,"SPAN",{});var Dta=s(B7e);YQr=r(Dta,"TFAutoModelForMultipleChoice"),Dta.forEach(t),hro.forEach(t),eeo=i(m),hr=n(m,"DIV",{class:!0});var _i=s(hr);T(vS.$$.fragment,_i),KQr=i(_i),hm=n(_i,"P",{});var Pie=s(hm);ZQr=r(Pie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Kre=n(Pie,"A",{href:!0});var Gta=s(Kre);eWr=r(Gta,"from_pretrained()"),Gta.forEach(t),oWr=r(Pie," class method or the "),Zre=n(Pie,"A",{href:!0});var Ota=s(Zre);rWr=r(Ota,"from_config()"),Ota.forEach(t),tWr=r(Pie,` class
method.`),Pie.forEach(t),aWr=i(_i),FS=n(_i,"P",{});var uro=s(FS);nWr=r(uro,"This class cannot be instantiated directly using "),I7e=n(uro,"CODE",{});var Vta=s(I7e);sWr=r(Vta,"__init__()"),Vta.forEach(t),lWr=r(uro," (throws an error)."),uro.forEach(t),iWr=i(_i),Kt=n(_i,"DIV",{class:!0});var W8=s(Kt);T(TS.$$.fragment,W8),dWr=i(W8),N7e=n(W8,"P",{});var Xta=s(N7e);cWr=r(Xta,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xta.forEach(t),mWr=i(W8),um=n(W8,"P",{});var Bie=s(um);fWr=r(Bie,`Note:
Loading a model from its configuration file does `),q7e=n(Bie,"STRONG",{});var zta=s(q7e);gWr=r(zta,"not"),zta.forEach(t),hWr=r(Bie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(Bie,"A",{href:!0});var Qta=s(ete);uWr=r(Qta,"from_pretrained()"),Qta.forEach(t),pWr=r(Bie," to load the model weights."),Bie.forEach(t),_Wr=i(W8),T(jw.$$.fragment,W8),W8.forEach(t),bWr=i(_i),Xr=n(_i,"DIV",{class:!0});var bi=s(Xr);T(MS.$$.fragment,bi),vWr=i(bi),j7e=n(bi,"P",{});var Wta=s(j7e);FWr=r(Wta,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wta.forEach(t),TWr=i(bi),Rn=n(bi,"P",{});var U8=s(Rn);MWr=r(U8,"The model class to instantiate is selected based on the "),D7e=n(U8,"CODE",{});var Uta=s(D7e);EWr=r(Uta,"model_type"),Uta.forEach(t),CWr=r(U8,` property of the config object (either
passed as an argument or loaded from `),G7e=n(U8,"CODE",{});var Hta=s(G7e);wWr=r(Hta,"pretrained_model_name_or_path"),Hta.forEach(t),AWr=r(U8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(U8,"CODE",{});var Jta=s(O7e);LWr=r(Jta,"pretrained_model_name_or_path"),Jta.forEach(t),yWr=r(U8,":"),U8.forEach(t),xWr=i(bi),ve=n(bi,"UL",{});var Te=s(ve);Dw=n(Te,"LI",{});var gHe=s(Dw);V7e=n(gHe,"STRONG",{});var Yta=s(V7e);$Wr=r(Yta,"albert"),Yta.forEach(t),kWr=r(gHe," \u2014 "),ote=n(gHe,"A",{href:!0});var Kta=s(ote);SWr=r(Kta,"TFAlbertForMultipleChoice"),Kta.forEach(t),RWr=r(gHe," (ALBERT model)"),gHe.forEach(t),PWr=i(Te),Gw=n(Te,"LI",{});var hHe=s(Gw);X7e=n(hHe,"STRONG",{});var Zta=s(X7e);BWr=r(Zta,"bert"),Zta.forEach(t),IWr=r(hHe," \u2014 "),rte=n(hHe,"A",{href:!0});var eaa=s(rte);NWr=r(eaa,"TFBertForMultipleChoice"),eaa.forEach(t),qWr=r(hHe," (BERT model)"),hHe.forEach(t),jWr=i(Te),Ow=n(Te,"LI",{});var uHe=s(Ow);z7e=n(uHe,"STRONG",{});var oaa=s(z7e);DWr=r(oaa,"camembert"),oaa.forEach(t),GWr=r(uHe," \u2014 "),tte=n(uHe,"A",{href:!0});var raa=s(tte);OWr=r(raa,"TFCamembertForMultipleChoice"),raa.forEach(t),VWr=r(uHe," (CamemBERT model)"),uHe.forEach(t),XWr=i(Te),Vw=n(Te,"LI",{});var pHe=s(Vw);Q7e=n(pHe,"STRONG",{});var taa=s(Q7e);zWr=r(taa,"convbert"),taa.forEach(t),QWr=r(pHe," \u2014 "),ate=n(pHe,"A",{href:!0});var aaa=s(ate);WWr=r(aaa,"TFConvBertForMultipleChoice"),aaa.forEach(t),UWr=r(pHe," (ConvBERT model)"),pHe.forEach(t),HWr=i(Te),Xw=n(Te,"LI",{});var _He=s(Xw);W7e=n(_He,"STRONG",{});var naa=s(W7e);JWr=r(naa,"distilbert"),naa.forEach(t),YWr=r(_He," \u2014 "),nte=n(_He,"A",{href:!0});var saa=s(nte);KWr=r(saa,"TFDistilBertForMultipleChoice"),saa.forEach(t),ZWr=r(_He," (DistilBERT model)"),_He.forEach(t),eUr=i(Te),zw=n(Te,"LI",{});var bHe=s(zw);U7e=n(bHe,"STRONG",{});var laa=s(U7e);oUr=r(laa,"electra"),laa.forEach(t),rUr=r(bHe," \u2014 "),ste=n(bHe,"A",{href:!0});var iaa=s(ste);tUr=r(iaa,"TFElectraForMultipleChoice"),iaa.forEach(t),aUr=r(bHe," (ELECTRA model)"),bHe.forEach(t),nUr=i(Te),Qw=n(Te,"LI",{});var vHe=s(Qw);H7e=n(vHe,"STRONG",{});var daa=s(H7e);sUr=r(daa,"flaubert"),daa.forEach(t),lUr=r(vHe," \u2014 "),lte=n(vHe,"A",{href:!0});var caa=s(lte);iUr=r(caa,"TFFlaubertForMultipleChoice"),caa.forEach(t),dUr=r(vHe," (FlauBERT model)"),vHe.forEach(t),cUr=i(Te),Ww=n(Te,"LI",{});var FHe=s(Ww);J7e=n(FHe,"STRONG",{});var maa=s(J7e);mUr=r(maa,"funnel"),maa.forEach(t),fUr=r(FHe," \u2014 "),ite=n(FHe,"A",{href:!0});var faa=s(ite);gUr=r(faa,"TFFunnelForMultipleChoice"),faa.forEach(t),hUr=r(FHe," (Funnel Transformer model)"),FHe.forEach(t),uUr=i(Te),Uw=n(Te,"LI",{});var THe=s(Uw);Y7e=n(THe,"STRONG",{});var gaa=s(Y7e);pUr=r(gaa,"longformer"),gaa.forEach(t),_Ur=r(THe," \u2014 "),dte=n(THe,"A",{href:!0});var haa=s(dte);bUr=r(haa,"TFLongformerForMultipleChoice"),haa.forEach(t),vUr=r(THe," (Longformer model)"),THe.forEach(t),FUr=i(Te),Hw=n(Te,"LI",{});var MHe=s(Hw);K7e=n(MHe,"STRONG",{});var uaa=s(K7e);TUr=r(uaa,"mobilebert"),uaa.forEach(t),MUr=r(MHe," \u2014 "),cte=n(MHe,"A",{href:!0});var paa=s(cte);EUr=r(paa,"TFMobileBertForMultipleChoice"),paa.forEach(t),CUr=r(MHe," (MobileBERT model)"),MHe.forEach(t),wUr=i(Te),Jw=n(Te,"LI",{});var EHe=s(Jw);Z7e=n(EHe,"STRONG",{});var _aa=s(Z7e);AUr=r(_aa,"mpnet"),_aa.forEach(t),LUr=r(EHe," \u2014 "),mte=n(EHe,"A",{href:!0});var baa=s(mte);yUr=r(baa,"TFMPNetForMultipleChoice"),baa.forEach(t),xUr=r(EHe," (MPNet model)"),EHe.forEach(t),$Ur=i(Te),Yw=n(Te,"LI",{});var CHe=s(Yw);eLe=n(CHe,"STRONG",{});var vaa=s(eLe);kUr=r(vaa,"rembert"),vaa.forEach(t),SUr=r(CHe," \u2014 "),fte=n(CHe,"A",{href:!0});var Faa=s(fte);RUr=r(Faa,"TFRemBertForMultipleChoice"),Faa.forEach(t),PUr=r(CHe," (RemBERT model)"),CHe.forEach(t),BUr=i(Te),Kw=n(Te,"LI",{});var wHe=s(Kw);oLe=n(wHe,"STRONG",{});var Taa=s(oLe);IUr=r(Taa,"roberta"),Taa.forEach(t),NUr=r(wHe," \u2014 "),gte=n(wHe,"A",{href:!0});var Maa=s(gte);qUr=r(Maa,"TFRobertaForMultipleChoice"),Maa.forEach(t),jUr=r(wHe," (RoBERTa model)"),wHe.forEach(t),DUr=i(Te),Zw=n(Te,"LI",{});var AHe=s(Zw);rLe=n(AHe,"STRONG",{});var Eaa=s(rLe);GUr=r(Eaa,"roformer"),Eaa.forEach(t),OUr=r(AHe," \u2014 "),hte=n(AHe,"A",{href:!0});var Caa=s(hte);VUr=r(Caa,"TFRoFormerForMultipleChoice"),Caa.forEach(t),XUr=r(AHe," (RoFormer model)"),AHe.forEach(t),zUr=i(Te),eA=n(Te,"LI",{});var LHe=s(eA);tLe=n(LHe,"STRONG",{});var waa=s(tLe);QUr=r(waa,"xlm"),waa.forEach(t),WUr=r(LHe," \u2014 "),ute=n(LHe,"A",{href:!0});var Aaa=s(ute);UUr=r(Aaa,"TFXLMForMultipleChoice"),Aaa.forEach(t),HUr=r(LHe," (XLM model)"),LHe.forEach(t),JUr=i(Te),oA=n(Te,"LI",{});var yHe=s(oA);aLe=n(yHe,"STRONG",{});var Laa=s(aLe);YUr=r(Laa,"xlm-roberta"),Laa.forEach(t),KUr=r(yHe," \u2014 "),pte=n(yHe,"A",{href:!0});var yaa=s(pte);ZUr=r(yaa,"TFXLMRobertaForMultipleChoice"),yaa.forEach(t),eHr=r(yHe," (XLM-RoBERTa model)"),yHe.forEach(t),oHr=i(Te),rA=n(Te,"LI",{});var xHe=s(rA);nLe=n(xHe,"STRONG",{});var xaa=s(nLe);rHr=r(xaa,"xlnet"),xaa.forEach(t),tHr=r(xHe," \u2014 "),_te=n(xHe,"A",{href:!0});var $aa=s(_te);aHr=r($aa,"TFXLNetForMultipleChoice"),$aa.forEach(t),nHr=r(xHe," (XLNet model)"),xHe.forEach(t),Te.forEach(t),sHr=i(bi),T(tA.$$.fragment,bi),bi.forEach(t),_i.forEach(t),oeo=i(m),pm=n(m,"H2",{class:!0});var pro=s(pm);aA=n(pro,"A",{id:!0,class:!0,href:!0});var kaa=s(aA);sLe=n(kaa,"SPAN",{});var Saa=s(sLe);T(ES.$$.fragment,Saa),Saa.forEach(t),kaa.forEach(t),lHr=i(pro),lLe=n(pro,"SPAN",{});var Raa=s(lLe);iHr=r(Raa,"TFAutoModelForNextSentencePrediction"),Raa.forEach(t),pro.forEach(t),reo=i(m),ur=n(m,"DIV",{class:!0});var vi=s(ur);T(CS.$$.fragment,vi),dHr=i(vi),_m=n(vi,"P",{});var Iie=s(_m);cHr=r(Iie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bte=n(Iie,"A",{href:!0});var Paa=s(bte);mHr=r(Paa,"from_pretrained()"),Paa.forEach(t),fHr=r(Iie," class method or the "),vte=n(Iie,"A",{href:!0});var Baa=s(vte);gHr=r(Baa,"from_config()"),Baa.forEach(t),hHr=r(Iie,` class
method.`),Iie.forEach(t),uHr=i(vi),wS=n(vi,"P",{});var _ro=s(wS);pHr=r(_ro,"This class cannot be instantiated directly using "),iLe=n(_ro,"CODE",{});var Iaa=s(iLe);_Hr=r(Iaa,"__init__()"),Iaa.forEach(t),bHr=r(_ro," (throws an error)."),_ro.forEach(t),vHr=i(vi),Zt=n(vi,"DIV",{class:!0});var H8=s(Zt);T(AS.$$.fragment,H8),FHr=i(H8),dLe=n(H8,"P",{});var Naa=s(dLe);THr=r(Naa,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Naa.forEach(t),MHr=i(H8),bm=n(H8,"P",{});var Nie=s(bm);EHr=r(Nie,`Note:
Loading a model from its configuration file does `),cLe=n(Nie,"STRONG",{});var qaa=s(cLe);CHr=r(qaa,"not"),qaa.forEach(t),wHr=r(Nie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=n(Nie,"A",{href:!0});var jaa=s(Fte);AHr=r(jaa,"from_pretrained()"),jaa.forEach(t),LHr=r(Nie," to load the model weights."),Nie.forEach(t),yHr=i(H8),T(nA.$$.fragment,H8),H8.forEach(t),xHr=i(vi),zr=n(vi,"DIV",{class:!0});var Fi=s(zr);T(LS.$$.fragment,Fi),$Hr=i(Fi),mLe=n(Fi,"P",{});var Daa=s(mLe);kHr=r(Daa,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Daa.forEach(t),SHr=i(Fi),Pn=n(Fi,"P",{});var J8=s(Pn);RHr=r(J8,"The model class to instantiate is selected based on the "),fLe=n(J8,"CODE",{});var Gaa=s(fLe);PHr=r(Gaa,"model_type"),Gaa.forEach(t),BHr=r(J8,` property of the config object (either
passed as an argument or loaded from `),gLe=n(J8,"CODE",{});var Oaa=s(gLe);IHr=r(Oaa,"pretrained_model_name_or_path"),Oaa.forEach(t),NHr=r(J8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hLe=n(J8,"CODE",{});var Vaa=s(hLe);qHr=r(Vaa,"pretrained_model_name_or_path"),Vaa.forEach(t),jHr=r(J8,":"),J8.forEach(t),DHr=i(Fi),yS=n(Fi,"UL",{});var bro=s(yS);sA=n(bro,"LI",{});var $He=s(sA);uLe=n($He,"STRONG",{});var Xaa=s(uLe);GHr=r(Xaa,"bert"),Xaa.forEach(t),OHr=r($He," \u2014 "),Tte=n($He,"A",{href:!0});var zaa=s(Tte);VHr=r(zaa,"TFBertForNextSentencePrediction"),zaa.forEach(t),XHr=r($He," (BERT model)"),$He.forEach(t),zHr=i(bro),lA=n(bro,"LI",{});var kHe=s(lA);pLe=n(kHe,"STRONG",{});var Qaa=s(pLe);QHr=r(Qaa,"mobilebert"),Qaa.forEach(t),WHr=r(kHe," \u2014 "),Mte=n(kHe,"A",{href:!0});var Waa=s(Mte);UHr=r(Waa,"TFMobileBertForNextSentencePrediction"),Waa.forEach(t),HHr=r(kHe," (MobileBERT model)"),kHe.forEach(t),bro.forEach(t),JHr=i(Fi),T(iA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),teo=i(m),vm=n(m,"H2",{class:!0});var vro=s(vm);dA=n(vro,"A",{id:!0,class:!0,href:!0});var Uaa=s(dA);_Le=n(Uaa,"SPAN",{});var Haa=s(_Le);T(xS.$$.fragment,Haa),Haa.forEach(t),Uaa.forEach(t),YHr=i(vro),bLe=n(vro,"SPAN",{});var Jaa=s(bLe);KHr=r(Jaa,"TFAutoModelForTableQuestionAnswering"),Jaa.forEach(t),vro.forEach(t),aeo=i(m),pr=n(m,"DIV",{class:!0});var Ti=s(pr);T($S.$$.fragment,Ti),ZHr=i(Ti),Fm=n(Ti,"P",{});var qie=s(Fm);eJr=r(qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Ete=n(qie,"A",{href:!0});var Yaa=s(Ete);oJr=r(Yaa,"from_pretrained()"),Yaa.forEach(t),rJr=r(qie," class method or the "),Cte=n(qie,"A",{href:!0});var Kaa=s(Cte);tJr=r(Kaa,"from_config()"),Kaa.forEach(t),aJr=r(qie,` class
method.`),qie.forEach(t),nJr=i(Ti),kS=n(Ti,"P",{});var Fro=s(kS);sJr=r(Fro,"This class cannot be instantiated directly using "),vLe=n(Fro,"CODE",{});var Zaa=s(vLe);lJr=r(Zaa,"__init__()"),Zaa.forEach(t),iJr=r(Fro," (throws an error)."),Fro.forEach(t),dJr=i(Ti),ea=n(Ti,"DIV",{class:!0});var Y8=s(ea);T(SS.$$.fragment,Y8),cJr=i(Y8),FLe=n(Y8,"P",{});var ena=s(FLe);mJr=r(ena,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ena.forEach(t),fJr=i(Y8),Tm=n(Y8,"P",{});var jie=s(Tm);gJr=r(jie,`Note:
Loading a model from its configuration file does `),TLe=n(jie,"STRONG",{});var ona=s(TLe);hJr=r(ona,"not"),ona.forEach(t),uJr=r(jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),wte=n(jie,"A",{href:!0});var rna=s(wte);pJr=r(rna,"from_pretrained()"),rna.forEach(t),_Jr=r(jie," to load the model weights."),jie.forEach(t),bJr=i(Y8),T(cA.$$.fragment,Y8),Y8.forEach(t),vJr=i(Ti),Qr=n(Ti,"DIV",{class:!0});var Mi=s(Qr);T(RS.$$.fragment,Mi),FJr=i(Mi),MLe=n(Mi,"P",{});var tna=s(MLe);TJr=r(tna,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tna.forEach(t),MJr=i(Mi),Bn=n(Mi,"P",{});var K8=s(Bn);EJr=r(K8,"The model class to instantiate is selected based on the "),ELe=n(K8,"CODE",{});var ana=s(ELe);CJr=r(ana,"model_type"),ana.forEach(t),wJr=r(K8,` property of the config object (either
passed as an argument or loaded from `),CLe=n(K8,"CODE",{});var nna=s(CLe);AJr=r(nna,"pretrained_model_name_or_path"),nna.forEach(t),LJr=r(K8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wLe=n(K8,"CODE",{});var sna=s(wLe);yJr=r(sna,"pretrained_model_name_or_path"),sna.forEach(t),xJr=r(K8,":"),K8.forEach(t),$Jr=i(Mi),ALe=n(Mi,"UL",{});var lna=s(ALe);mA=n(lna,"LI",{});var SHe=s(mA);LLe=n(SHe,"STRONG",{});var ina=s(LLe);kJr=r(ina,"tapas"),ina.forEach(t),SJr=r(SHe," \u2014 "),Ate=n(SHe,"A",{href:!0});var dna=s(Ate);RJr=r(dna,"TFTapasForQuestionAnswering"),dna.forEach(t),PJr=r(SHe," (TAPAS model)"),SHe.forEach(t),lna.forEach(t),BJr=i(Mi),T(fA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),neo=i(m),Mm=n(m,"H2",{class:!0});var Tro=s(Mm);gA=n(Tro,"A",{id:!0,class:!0,href:!0});var cna=s(gA);yLe=n(cna,"SPAN",{});var mna=s(yLe);T(PS.$$.fragment,mna),mna.forEach(t),cna.forEach(t),IJr=i(Tro),xLe=n(Tro,"SPAN",{});var fna=s(xLe);NJr=r(fna,"TFAutoModelForDocumentQuestionAnswering"),fna.forEach(t),Tro.forEach(t),seo=i(m),_r=n(m,"DIV",{class:!0});var Ei=s(_r);T(BS.$$.fragment,Ei),qJr=i(Ei),Em=n(Ei,"P",{});var Die=s(Em);jJr=r(Die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Lte=n(Die,"A",{href:!0});var gna=s(Lte);DJr=r(gna,"from_pretrained()"),gna.forEach(t),GJr=r(Die," class method or the "),yte=n(Die,"A",{href:!0});var hna=s(yte);OJr=r(hna,"from_config()"),hna.forEach(t),VJr=r(Die,` class
method.`),Die.forEach(t),XJr=i(Ei),IS=n(Ei,"P",{});var Mro=s(IS);zJr=r(Mro,"This class cannot be instantiated directly using "),$Le=n(Mro,"CODE",{});var una=s($Le);QJr=r(una,"__init__()"),una.forEach(t),WJr=r(Mro," (throws an error)."),Mro.forEach(t),UJr=i(Ei),oa=n(Ei,"DIV",{class:!0});var Z8=s(oa);T(NS.$$.fragment,Z8),HJr=i(Z8),kLe=n(Z8,"P",{});var pna=s(kLe);JJr=r(pna,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),pna.forEach(t),YJr=i(Z8),Cm=n(Z8,"P",{});var Gie=s(Cm);KJr=r(Gie,`Note:
Loading a model from its configuration file does `),SLe=n(Gie,"STRONG",{});var _na=s(SLe);ZJr=r(_na,"not"),_na.forEach(t),eYr=r(Gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),xte=n(Gie,"A",{href:!0});var bna=s(xte);oYr=r(bna,"from_pretrained()"),bna.forEach(t),rYr=r(Gie," to load the model weights."),Gie.forEach(t),tYr=i(Z8),T(hA.$$.fragment,Z8),Z8.forEach(t),aYr=i(Ei),Wr=n(Ei,"DIV",{class:!0});var Ci=s(Wr);T(qS.$$.fragment,Ci),nYr=i(Ci),RLe=n(Ci,"P",{});var vna=s(RLe);sYr=r(vna,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),vna.forEach(t),lYr=i(Ci),In=n(Ci,"P",{});var e9=s(In);iYr=r(e9,"The model class to instantiate is selected based on the "),PLe=n(e9,"CODE",{});var Fna=s(PLe);dYr=r(Fna,"model_type"),Fna.forEach(t),cYr=r(e9,` property of the config object (either
passed as an argument or loaded from `),BLe=n(e9,"CODE",{});var Tna=s(BLe);mYr=r(Tna,"pretrained_model_name_or_path"),Tna.forEach(t),fYr=r(e9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ILe=n(e9,"CODE",{});var Mna=s(ILe);gYr=r(Mna,"pretrained_model_name_or_path"),Mna.forEach(t),hYr=r(e9,":"),e9.forEach(t),uYr=i(Ci),NLe=n(Ci,"UL",{});var Ena=s(NLe);uA=n(Ena,"LI",{});var RHe=s(uA);qLe=n(RHe,"STRONG",{});var Cna=s(qLe);pYr=r(Cna,"layoutlm"),Cna.forEach(t),_Yr=r(RHe," \u2014 "),$te=n(RHe,"A",{href:!0});var wna=s($te);bYr=r(wna,"TFLayoutLMForQuestionAnswering"),wna.forEach(t),vYr=r(RHe," (LayoutLM model)"),RHe.forEach(t),Ena.forEach(t),FYr=i(Ci),T(pA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),leo=i(m),wm=n(m,"H2",{class:!0});var Ero=s(wm);_A=n(Ero,"A",{id:!0,class:!0,href:!0});var Ana=s(_A);jLe=n(Ana,"SPAN",{});var Lna=s(jLe);T(jS.$$.fragment,Lna),Lna.forEach(t),Ana.forEach(t),TYr=i(Ero),DLe=n(Ero,"SPAN",{});var yna=s(DLe);MYr=r(yna,"TFAutoModelForTokenClassification"),yna.forEach(t),Ero.forEach(t),ieo=i(m),br=n(m,"DIV",{class:!0});var wi=s(br);T(DS.$$.fragment,wi),EYr=i(wi),Am=n(wi,"P",{});var Oie=s(Am);CYr=r(Oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kte=n(Oie,"A",{href:!0});var xna=s(kte);wYr=r(xna,"from_pretrained()"),xna.forEach(t),AYr=r(Oie," class method or the "),Ste=n(Oie,"A",{href:!0});var $na=s(Ste);LYr=r($na,"from_config()"),$na.forEach(t),yYr=r(Oie,` class
method.`),Oie.forEach(t),xYr=i(wi),GS=n(wi,"P",{});var Cro=s(GS);$Yr=r(Cro,"This class cannot be instantiated directly using "),GLe=n(Cro,"CODE",{});var kna=s(GLe);kYr=r(kna,"__init__()"),kna.forEach(t),SYr=r(Cro," (throws an error)."),Cro.forEach(t),RYr=i(wi),ra=n(wi,"DIV",{class:!0});var o9=s(ra);T(OS.$$.fragment,o9),PYr=i(o9),OLe=n(o9,"P",{});var Sna=s(OLe);BYr=r(Sna,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sna.forEach(t),IYr=i(o9),Lm=n(o9,"P",{});var Vie=s(Lm);NYr=r(Vie,`Note:
Loading a model from its configuration file does `),VLe=n(Vie,"STRONG",{});var Rna=s(VLe);qYr=r(Rna,"not"),Rna.forEach(t),jYr=r(Vie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=n(Vie,"A",{href:!0});var Pna=s(Rte);DYr=r(Pna,"from_pretrained()"),Pna.forEach(t),GYr=r(Vie," to load the model weights."),Vie.forEach(t),OYr=i(o9),T(bA.$$.fragment,o9),o9.forEach(t),VYr=i(wi),Ur=n(wi,"DIV",{class:!0});var Ai=s(Ur);T(VS.$$.fragment,Ai),XYr=i(Ai),XLe=n(Ai,"P",{});var Bna=s(XLe);zYr=r(Bna,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bna.forEach(t),QYr=i(Ai),Nn=n(Ai,"P",{});var r9=s(Nn);WYr=r(r9,"The model class to instantiate is selected based on the "),zLe=n(r9,"CODE",{});var Ina=s(zLe);UYr=r(Ina,"model_type"),Ina.forEach(t),HYr=r(r9,` property of the config object (either
passed as an argument or loaded from `),QLe=n(r9,"CODE",{});var Nna=s(QLe);JYr=r(Nna,"pretrained_model_name_or_path"),Nna.forEach(t),YYr=r(r9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WLe=n(r9,"CODE",{});var qna=s(WLe);KYr=r(qna,"pretrained_model_name_or_path"),qna.forEach(t),ZYr=r(r9,":"),r9.forEach(t),eKr=i(Ai),de=n(Ai,"UL",{});var he=s(de);vA=n(he,"LI",{});var PHe=s(vA);ULe=n(PHe,"STRONG",{});var jna=s(ULe);oKr=r(jna,"albert"),jna.forEach(t),rKr=r(PHe," \u2014 "),Pte=n(PHe,"A",{href:!0});var Dna=s(Pte);tKr=r(Dna,"TFAlbertForTokenClassification"),Dna.forEach(t),aKr=r(PHe," (ALBERT model)"),PHe.forEach(t),nKr=i(he),FA=n(he,"LI",{});var BHe=s(FA);HLe=n(BHe,"STRONG",{});var Gna=s(HLe);sKr=r(Gna,"bert"),Gna.forEach(t),lKr=r(BHe," \u2014 "),Bte=n(BHe,"A",{href:!0});var Ona=s(Bte);iKr=r(Ona,"TFBertForTokenClassification"),Ona.forEach(t),dKr=r(BHe," (BERT model)"),BHe.forEach(t),cKr=i(he),TA=n(he,"LI",{});var IHe=s(TA);JLe=n(IHe,"STRONG",{});var Vna=s(JLe);mKr=r(Vna,"camembert"),Vna.forEach(t),fKr=r(IHe," \u2014 "),Ite=n(IHe,"A",{href:!0});var Xna=s(Ite);gKr=r(Xna,"TFCamembertForTokenClassification"),Xna.forEach(t),hKr=r(IHe," (CamemBERT model)"),IHe.forEach(t),uKr=i(he),MA=n(he,"LI",{});var NHe=s(MA);YLe=n(NHe,"STRONG",{});var zna=s(YLe);pKr=r(zna,"convbert"),zna.forEach(t),_Kr=r(NHe," \u2014 "),Nte=n(NHe,"A",{href:!0});var Qna=s(Nte);bKr=r(Qna,"TFConvBertForTokenClassification"),Qna.forEach(t),vKr=r(NHe," (ConvBERT model)"),NHe.forEach(t),FKr=i(he),EA=n(he,"LI",{});var qHe=s(EA);KLe=n(qHe,"STRONG",{});var Wna=s(KLe);TKr=r(Wna,"deberta"),Wna.forEach(t),MKr=r(qHe," \u2014 "),qte=n(qHe,"A",{href:!0});var Una=s(qte);EKr=r(Una,"TFDebertaForTokenClassification"),Una.forEach(t),CKr=r(qHe," (DeBERTa model)"),qHe.forEach(t),wKr=i(he),CA=n(he,"LI",{});var jHe=s(CA);ZLe=n(jHe,"STRONG",{});var Hna=s(ZLe);AKr=r(Hna,"deberta-v2"),Hna.forEach(t),LKr=r(jHe," \u2014 "),jte=n(jHe,"A",{href:!0});var Jna=s(jte);yKr=r(Jna,"TFDebertaV2ForTokenClassification"),Jna.forEach(t),xKr=r(jHe," (DeBERTa-v2 model)"),jHe.forEach(t),$Kr=i(he),wA=n(he,"LI",{});var DHe=s(wA);eye=n(DHe,"STRONG",{});var Yna=s(eye);kKr=r(Yna,"distilbert"),Yna.forEach(t),SKr=r(DHe," \u2014 "),Dte=n(DHe,"A",{href:!0});var Kna=s(Dte);RKr=r(Kna,"TFDistilBertForTokenClassification"),Kna.forEach(t),PKr=r(DHe," (DistilBERT model)"),DHe.forEach(t),BKr=i(he),AA=n(he,"LI",{});var GHe=s(AA);oye=n(GHe,"STRONG",{});var Zna=s(oye);IKr=r(Zna,"electra"),Zna.forEach(t),NKr=r(GHe," \u2014 "),Gte=n(GHe,"A",{href:!0});var esa=s(Gte);qKr=r(esa,"TFElectraForTokenClassification"),esa.forEach(t),jKr=r(GHe," (ELECTRA model)"),GHe.forEach(t),DKr=i(he),LA=n(he,"LI",{});var OHe=s(LA);rye=n(OHe,"STRONG",{});var osa=s(rye);GKr=r(osa,"flaubert"),osa.forEach(t),OKr=r(OHe," \u2014 "),Ote=n(OHe,"A",{href:!0});var rsa=s(Ote);VKr=r(rsa,"TFFlaubertForTokenClassification"),rsa.forEach(t),XKr=r(OHe," (FlauBERT model)"),OHe.forEach(t),zKr=i(he),yA=n(he,"LI",{});var VHe=s(yA);tye=n(VHe,"STRONG",{});var tsa=s(tye);QKr=r(tsa,"funnel"),tsa.forEach(t),WKr=r(VHe," \u2014 "),Vte=n(VHe,"A",{href:!0});var asa=s(Vte);UKr=r(asa,"TFFunnelForTokenClassification"),asa.forEach(t),HKr=r(VHe," (Funnel Transformer model)"),VHe.forEach(t),JKr=i(he),xA=n(he,"LI",{});var XHe=s(xA);aye=n(XHe,"STRONG",{});var nsa=s(aye);YKr=r(nsa,"layoutlm"),nsa.forEach(t),KKr=r(XHe," \u2014 "),Xte=n(XHe,"A",{href:!0});var ssa=s(Xte);ZKr=r(ssa,"TFLayoutLMForTokenClassification"),ssa.forEach(t),eZr=r(XHe," (LayoutLM model)"),XHe.forEach(t),oZr=i(he),$A=n(he,"LI",{});var zHe=s($A);nye=n(zHe,"STRONG",{});var lsa=s(nye);rZr=r(lsa,"layoutlmv3"),lsa.forEach(t),tZr=r(zHe," \u2014 "),zte=n(zHe,"A",{href:!0});var isa=s(zte);aZr=r(isa,"TFLayoutLMv3ForTokenClassification"),isa.forEach(t),nZr=r(zHe," (LayoutLMv3 model)"),zHe.forEach(t),sZr=i(he),kA=n(he,"LI",{});var QHe=s(kA);sye=n(QHe,"STRONG",{});var dsa=s(sye);lZr=r(dsa,"longformer"),dsa.forEach(t),iZr=r(QHe," \u2014 "),Qte=n(QHe,"A",{href:!0});var csa=s(Qte);dZr=r(csa,"TFLongformerForTokenClassification"),csa.forEach(t),cZr=r(QHe," (Longformer model)"),QHe.forEach(t),mZr=i(he),SA=n(he,"LI",{});var WHe=s(SA);lye=n(WHe,"STRONG",{});var msa=s(lye);fZr=r(msa,"mobilebert"),msa.forEach(t),gZr=r(WHe," \u2014 "),Wte=n(WHe,"A",{href:!0});var fsa=s(Wte);hZr=r(fsa,"TFMobileBertForTokenClassification"),fsa.forEach(t),uZr=r(WHe," (MobileBERT model)"),WHe.forEach(t),pZr=i(he),RA=n(he,"LI",{});var UHe=s(RA);iye=n(UHe,"STRONG",{});var gsa=s(iye);_Zr=r(gsa,"mpnet"),gsa.forEach(t),bZr=r(UHe," \u2014 "),Ute=n(UHe,"A",{href:!0});var hsa=s(Ute);vZr=r(hsa,"TFMPNetForTokenClassification"),hsa.forEach(t),FZr=r(UHe," (MPNet model)"),UHe.forEach(t),TZr=i(he),PA=n(he,"LI",{});var HHe=s(PA);dye=n(HHe,"STRONG",{});var usa=s(dye);MZr=r(usa,"rembert"),usa.forEach(t),EZr=r(HHe," \u2014 "),Hte=n(HHe,"A",{href:!0});var psa=s(Hte);CZr=r(psa,"TFRemBertForTokenClassification"),psa.forEach(t),wZr=r(HHe," (RemBERT model)"),HHe.forEach(t),AZr=i(he),BA=n(he,"LI",{});var JHe=s(BA);cye=n(JHe,"STRONG",{});var _sa=s(cye);LZr=r(_sa,"roberta"),_sa.forEach(t),yZr=r(JHe," \u2014 "),Jte=n(JHe,"A",{href:!0});var bsa=s(Jte);xZr=r(bsa,"TFRobertaForTokenClassification"),bsa.forEach(t),$Zr=r(JHe," (RoBERTa model)"),JHe.forEach(t),kZr=i(he),IA=n(he,"LI",{});var YHe=s(IA);mye=n(YHe,"STRONG",{});var vsa=s(mye);SZr=r(vsa,"roformer"),vsa.forEach(t),RZr=r(YHe," \u2014 "),Yte=n(YHe,"A",{href:!0});var Fsa=s(Yte);PZr=r(Fsa,"TFRoFormerForTokenClassification"),Fsa.forEach(t),BZr=r(YHe," (RoFormer model)"),YHe.forEach(t),IZr=i(he),NA=n(he,"LI",{});var KHe=s(NA);fye=n(KHe,"STRONG",{});var Tsa=s(fye);NZr=r(Tsa,"xlm"),Tsa.forEach(t),qZr=r(KHe," \u2014 "),Kte=n(KHe,"A",{href:!0});var Msa=s(Kte);jZr=r(Msa,"TFXLMForTokenClassification"),Msa.forEach(t),DZr=r(KHe," (XLM model)"),KHe.forEach(t),GZr=i(he),qA=n(he,"LI",{});var ZHe=s(qA);gye=n(ZHe,"STRONG",{});var Esa=s(gye);OZr=r(Esa,"xlm-roberta"),Esa.forEach(t),VZr=r(ZHe," \u2014 "),Zte=n(ZHe,"A",{href:!0});var Csa=s(Zte);XZr=r(Csa,"TFXLMRobertaForTokenClassification"),Csa.forEach(t),zZr=r(ZHe," (XLM-RoBERTa model)"),ZHe.forEach(t),QZr=i(he),jA=n(he,"LI",{});var eJe=s(jA);hye=n(eJe,"STRONG",{});var wsa=s(hye);WZr=r(wsa,"xlnet"),wsa.forEach(t),UZr=r(eJe," \u2014 "),eae=n(eJe,"A",{href:!0});var Asa=s(eae);HZr=r(Asa,"TFXLNetForTokenClassification"),Asa.forEach(t),JZr=r(eJe," (XLNet model)"),eJe.forEach(t),he.forEach(t),YZr=i(Ai),T(DA.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),deo=i(m),ym=n(m,"H2",{class:!0});var wro=s(ym);GA=n(wro,"A",{id:!0,class:!0,href:!0});var Lsa=s(GA);uye=n(Lsa,"SPAN",{});var ysa=s(uye);T(XS.$$.fragment,ysa),ysa.forEach(t),Lsa.forEach(t),KZr=i(wro),pye=n(wro,"SPAN",{});var xsa=s(pye);ZZr=r(xsa,"TFAutoModelForQuestionAnswering"),xsa.forEach(t),wro.forEach(t),ceo=i(m),vr=n(m,"DIV",{class:!0});var Li=s(vr);T(zS.$$.fragment,Li),eet=i(Li),xm=n(Li,"P",{});var Xie=s(xm);oet=r(Xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oae=n(Xie,"A",{href:!0});var $sa=s(oae);ret=r($sa,"from_pretrained()"),$sa.forEach(t),tet=r(Xie," class method or the "),rae=n(Xie,"A",{href:!0});var ksa=s(rae);aet=r(ksa,"from_config()"),ksa.forEach(t),net=r(Xie,` class
method.`),Xie.forEach(t),set=i(Li),QS=n(Li,"P",{});var Aro=s(QS);iet=r(Aro,"This class cannot be instantiated directly using "),_ye=n(Aro,"CODE",{});var Ssa=s(_ye);det=r(Ssa,"__init__()"),Ssa.forEach(t),cet=r(Aro," (throws an error)."),Aro.forEach(t),met=i(Li),ta=n(Li,"DIV",{class:!0});var t9=s(ta);T(WS.$$.fragment,t9),fet=i(t9),bye=n(t9,"P",{});var Rsa=s(bye);get=r(Rsa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rsa.forEach(t),het=i(t9),$m=n(t9,"P",{});var zie=s($m);uet=r(zie,`Note:
Loading a model from its configuration file does `),vye=n(zie,"STRONG",{});var Psa=s(vye);pet=r(Psa,"not"),Psa.forEach(t),_et=r(zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),tae=n(zie,"A",{href:!0});var Bsa=s(tae);bet=r(Bsa,"from_pretrained()"),Bsa.forEach(t),vet=r(zie," to load the model weights."),zie.forEach(t),Fet=i(t9),T(OA.$$.fragment,t9),t9.forEach(t),Tet=i(Li),Hr=n(Li,"DIV",{class:!0});var yi=s(Hr);T(US.$$.fragment,yi),Met=i(yi),Fye=n(yi,"P",{});var Isa=s(Fye);Eet=r(Isa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Isa.forEach(t),Cet=i(yi),qn=n(yi,"P",{});var a9=s(qn);wet=r(a9,"The model class to instantiate is selected based on the "),Tye=n(a9,"CODE",{});var Nsa=s(Tye);Aet=r(Nsa,"model_type"),Nsa.forEach(t),Let=r(a9,` property of the config object (either
passed as an argument or loaded from `),Mye=n(a9,"CODE",{});var qsa=s(Mye);yet=r(qsa,"pretrained_model_name_or_path"),qsa.forEach(t),xet=r(a9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eye=n(a9,"CODE",{});var jsa=s(Eye);$et=r(jsa,"pretrained_model_name_or_path"),jsa.forEach(t),ket=r(a9,":"),a9.forEach(t),Set=i(yi),ce=n(yi,"UL",{});var ue=s(ce);VA=n(ue,"LI",{});var oJe=s(VA);Cye=n(oJe,"STRONG",{});var Dsa=s(Cye);Ret=r(Dsa,"albert"),Dsa.forEach(t),Pet=r(oJe," \u2014 "),aae=n(oJe,"A",{href:!0});var Gsa=s(aae);Bet=r(Gsa,"TFAlbertForQuestionAnswering"),Gsa.forEach(t),Iet=r(oJe," (ALBERT model)"),oJe.forEach(t),Net=i(ue),XA=n(ue,"LI",{});var rJe=s(XA);wye=n(rJe,"STRONG",{});var Osa=s(wye);qet=r(Osa,"bert"),Osa.forEach(t),jet=r(rJe," \u2014 "),nae=n(rJe,"A",{href:!0});var Vsa=s(nae);Det=r(Vsa,"TFBertForQuestionAnswering"),Vsa.forEach(t),Get=r(rJe," (BERT model)"),rJe.forEach(t),Oet=i(ue),zA=n(ue,"LI",{});var tJe=s(zA);Aye=n(tJe,"STRONG",{});var Xsa=s(Aye);Vet=r(Xsa,"camembert"),Xsa.forEach(t),Xet=r(tJe," \u2014 "),sae=n(tJe,"A",{href:!0});var zsa=s(sae);zet=r(zsa,"TFCamembertForQuestionAnswering"),zsa.forEach(t),Qet=r(tJe," (CamemBERT model)"),tJe.forEach(t),Wet=i(ue),QA=n(ue,"LI",{});var aJe=s(QA);Lye=n(aJe,"STRONG",{});var Qsa=s(Lye);Uet=r(Qsa,"convbert"),Qsa.forEach(t),Het=r(aJe," \u2014 "),lae=n(aJe,"A",{href:!0});var Wsa=s(lae);Jet=r(Wsa,"TFConvBertForQuestionAnswering"),Wsa.forEach(t),Yet=r(aJe," (ConvBERT model)"),aJe.forEach(t),Ket=i(ue),WA=n(ue,"LI",{});var nJe=s(WA);yye=n(nJe,"STRONG",{});var Usa=s(yye);Zet=r(Usa,"deberta"),Usa.forEach(t),eot=r(nJe," \u2014 "),iae=n(nJe,"A",{href:!0});var Hsa=s(iae);oot=r(Hsa,"TFDebertaForQuestionAnswering"),Hsa.forEach(t),rot=r(nJe," (DeBERTa model)"),nJe.forEach(t),tot=i(ue),UA=n(ue,"LI",{});var sJe=s(UA);xye=n(sJe,"STRONG",{});var Jsa=s(xye);aot=r(Jsa,"deberta-v2"),Jsa.forEach(t),not=r(sJe," \u2014 "),dae=n(sJe,"A",{href:!0});var Ysa=s(dae);sot=r(Ysa,"TFDebertaV2ForQuestionAnswering"),Ysa.forEach(t),lot=r(sJe," (DeBERTa-v2 model)"),sJe.forEach(t),iot=i(ue),HA=n(ue,"LI",{});var lJe=s(HA);$ye=n(lJe,"STRONG",{});var Ksa=s($ye);dot=r(Ksa,"distilbert"),Ksa.forEach(t),cot=r(lJe," \u2014 "),cae=n(lJe,"A",{href:!0});var Zsa=s(cae);mot=r(Zsa,"TFDistilBertForQuestionAnswering"),Zsa.forEach(t),fot=r(lJe," (DistilBERT model)"),lJe.forEach(t),got=i(ue),JA=n(ue,"LI",{});var iJe=s(JA);kye=n(iJe,"STRONG",{});var ela=s(kye);hot=r(ela,"electra"),ela.forEach(t),uot=r(iJe," \u2014 "),mae=n(iJe,"A",{href:!0});var ola=s(mae);pot=r(ola,"TFElectraForQuestionAnswering"),ola.forEach(t),_ot=r(iJe," (ELECTRA model)"),iJe.forEach(t),bot=i(ue),YA=n(ue,"LI",{});var dJe=s(YA);Sye=n(dJe,"STRONG",{});var rla=s(Sye);vot=r(rla,"flaubert"),rla.forEach(t),Fot=r(dJe," \u2014 "),fae=n(dJe,"A",{href:!0});var tla=s(fae);Tot=r(tla,"TFFlaubertForQuestionAnsweringSimple"),tla.forEach(t),Mot=r(dJe," (FlauBERT model)"),dJe.forEach(t),Eot=i(ue),KA=n(ue,"LI",{});var cJe=s(KA);Rye=n(cJe,"STRONG",{});var ala=s(Rye);Cot=r(ala,"funnel"),ala.forEach(t),wot=r(cJe," \u2014 "),gae=n(cJe,"A",{href:!0});var nla=s(gae);Aot=r(nla,"TFFunnelForQuestionAnswering"),nla.forEach(t),Lot=r(cJe," (Funnel Transformer model)"),cJe.forEach(t),yot=i(ue),ZA=n(ue,"LI",{});var mJe=s(ZA);Pye=n(mJe,"STRONG",{});var sla=s(Pye);xot=r(sla,"gptj"),sla.forEach(t),$ot=r(mJe," \u2014 "),hae=n(mJe,"A",{href:!0});var lla=s(hae);kot=r(lla,"TFGPTJForQuestionAnswering"),lla.forEach(t),Sot=r(mJe," (GPT-J model)"),mJe.forEach(t),Rot=i(ue),e6=n(ue,"LI",{});var fJe=s(e6);Bye=n(fJe,"STRONG",{});var ila=s(Bye);Pot=r(ila,"layoutlmv3"),ila.forEach(t),Bot=r(fJe," \u2014 "),uae=n(fJe,"A",{href:!0});var dla=s(uae);Iot=r(dla,"TFLayoutLMv3ForQuestionAnswering"),dla.forEach(t),Not=r(fJe," (LayoutLMv3 model)"),fJe.forEach(t),qot=i(ue),o6=n(ue,"LI",{});var gJe=s(o6);Iye=n(gJe,"STRONG",{});var cla=s(Iye);jot=r(cla,"longformer"),cla.forEach(t),Dot=r(gJe," \u2014 "),pae=n(gJe,"A",{href:!0});var mla=s(pae);Got=r(mla,"TFLongformerForQuestionAnswering"),mla.forEach(t),Oot=r(gJe," (Longformer model)"),gJe.forEach(t),Vot=i(ue),r6=n(ue,"LI",{});var hJe=s(r6);Nye=n(hJe,"STRONG",{});var fla=s(Nye);Xot=r(fla,"mobilebert"),fla.forEach(t),zot=r(hJe," \u2014 "),_ae=n(hJe,"A",{href:!0});var gla=s(_ae);Qot=r(gla,"TFMobileBertForQuestionAnswering"),gla.forEach(t),Wot=r(hJe," (MobileBERT model)"),hJe.forEach(t),Uot=i(ue),t6=n(ue,"LI",{});var uJe=s(t6);qye=n(uJe,"STRONG",{});var hla=s(qye);Hot=r(hla,"mpnet"),hla.forEach(t),Jot=r(uJe," \u2014 "),bae=n(uJe,"A",{href:!0});var ula=s(bae);Yot=r(ula,"TFMPNetForQuestionAnswering"),ula.forEach(t),Kot=r(uJe," (MPNet model)"),uJe.forEach(t),Zot=i(ue),a6=n(ue,"LI",{});var pJe=s(a6);jye=n(pJe,"STRONG",{});var pla=s(jye);ert=r(pla,"rembert"),pla.forEach(t),ort=r(pJe," \u2014 "),vae=n(pJe,"A",{href:!0});var _la=s(vae);rrt=r(_la,"TFRemBertForQuestionAnswering"),_la.forEach(t),trt=r(pJe," (RemBERT model)"),pJe.forEach(t),art=i(ue),n6=n(ue,"LI",{});var _Je=s(n6);Dye=n(_Je,"STRONG",{});var bla=s(Dye);nrt=r(bla,"roberta"),bla.forEach(t),srt=r(_Je," \u2014 "),Fae=n(_Je,"A",{href:!0});var vla=s(Fae);lrt=r(vla,"TFRobertaForQuestionAnswering"),vla.forEach(t),irt=r(_Je," (RoBERTa model)"),_Je.forEach(t),drt=i(ue),s6=n(ue,"LI",{});var bJe=s(s6);Gye=n(bJe,"STRONG",{});var Fla=s(Gye);crt=r(Fla,"roformer"),Fla.forEach(t),mrt=r(bJe," \u2014 "),Tae=n(bJe,"A",{href:!0});var Tla=s(Tae);frt=r(Tla,"TFRoFormerForQuestionAnswering"),Tla.forEach(t),grt=r(bJe," (RoFormer model)"),bJe.forEach(t),hrt=i(ue),l6=n(ue,"LI",{});var vJe=s(l6);Oye=n(vJe,"STRONG",{});var Mla=s(Oye);urt=r(Mla,"xlm"),Mla.forEach(t),prt=r(vJe," \u2014 "),Mae=n(vJe,"A",{href:!0});var Ela=s(Mae);_rt=r(Ela,"TFXLMForQuestionAnsweringSimple"),Ela.forEach(t),brt=r(vJe," (XLM model)"),vJe.forEach(t),vrt=i(ue),i6=n(ue,"LI",{});var FJe=s(i6);Vye=n(FJe,"STRONG",{});var Cla=s(Vye);Frt=r(Cla,"xlm-roberta"),Cla.forEach(t),Trt=r(FJe," \u2014 "),Eae=n(FJe,"A",{href:!0});var wla=s(Eae);Mrt=r(wla,"TFXLMRobertaForQuestionAnswering"),wla.forEach(t),Ert=r(FJe," (XLM-RoBERTa model)"),FJe.forEach(t),Crt=i(ue),d6=n(ue,"LI",{});var TJe=s(d6);Xye=n(TJe,"STRONG",{});var Ala=s(Xye);wrt=r(Ala,"xlnet"),Ala.forEach(t),Art=r(TJe," \u2014 "),Cae=n(TJe,"A",{href:!0});var Lla=s(Cae);Lrt=r(Lla,"TFXLNetForQuestionAnsweringSimple"),Lla.forEach(t),yrt=r(TJe," (XLNet model)"),TJe.forEach(t),ue.forEach(t),xrt=i(yi),T(c6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),meo=i(m),km=n(m,"H2",{class:!0});var Lro=s(km);m6=n(Lro,"A",{id:!0,class:!0,href:!0});var yla=s(m6);zye=n(yla,"SPAN",{});var xla=s(zye);T(HS.$$.fragment,xla),xla.forEach(t),yla.forEach(t),$rt=i(Lro),Qye=n(Lro,"SPAN",{});var $la=s(Qye);krt=r($la,"TFAutoModelForVision2Seq"),$la.forEach(t),Lro.forEach(t),feo=i(m),Fr=n(m,"DIV",{class:!0});var xi=s(Fr);T(JS.$$.fragment,xi),Srt=i(xi),Sm=n(xi,"P",{});var Qie=s(Sm);Rrt=r(Qie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wae=n(Qie,"A",{href:!0});var kla=s(wae);Prt=r(kla,"from_pretrained()"),kla.forEach(t),Brt=r(Qie," class method or the "),Aae=n(Qie,"A",{href:!0});var Sla=s(Aae);Irt=r(Sla,"from_config()"),Sla.forEach(t),Nrt=r(Qie,` class
method.`),Qie.forEach(t),qrt=i(xi),YS=n(xi,"P",{});var yro=s(YS);jrt=r(yro,"This class cannot be instantiated directly using "),Wye=n(yro,"CODE",{});var Rla=s(Wye);Drt=r(Rla,"__init__()"),Rla.forEach(t),Grt=r(yro," (throws an error)."),yro.forEach(t),Ort=i(xi),aa=n(xi,"DIV",{class:!0});var n9=s(aa);T(KS.$$.fragment,n9),Vrt=i(n9),Uye=n(n9,"P",{});var Pla=s(Uye);Xrt=r(Pla,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pla.forEach(t),zrt=i(n9),Rm=n(n9,"P",{});var Wie=s(Rm);Qrt=r(Wie,`Note:
Loading a model from its configuration file does `),Hye=n(Wie,"STRONG",{});var Bla=s(Hye);Wrt=r(Bla,"not"),Bla.forEach(t),Urt=r(Wie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lae=n(Wie,"A",{href:!0});var Ila=s(Lae);Hrt=r(Ila,"from_pretrained()"),Ila.forEach(t),Jrt=r(Wie," to load the model weights."),Wie.forEach(t),Yrt=i(n9),T(f6.$$.fragment,n9),n9.forEach(t),Krt=i(xi),Jr=n(xi,"DIV",{class:!0});var $i=s(Jr);T(ZS.$$.fragment,$i),Zrt=i($i),Jye=n($i,"P",{});var Nla=s(Jye);ett=r(Nla,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nla.forEach(t),ott=i($i),jn=n($i,"P",{});var s9=s(jn);rtt=r(s9,"The model class to instantiate is selected based on the "),Yye=n(s9,"CODE",{});var qla=s(Yye);ttt=r(qla,"model_type"),qla.forEach(t),att=r(s9,` property of the config object (either
passed as an argument or loaded from `),Kye=n(s9,"CODE",{});var jla=s(Kye);ntt=r(jla,"pretrained_model_name_or_path"),jla.forEach(t),stt=r(s9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zye=n(s9,"CODE",{});var Dla=s(Zye);ltt=r(Dla,"pretrained_model_name_or_path"),Dla.forEach(t),itt=r(s9,":"),s9.forEach(t),dtt=i($i),e8e=n($i,"UL",{});var Gla=s(e8e);g6=n(Gla,"LI",{});var MJe=s(g6);o8e=n(MJe,"STRONG",{});var Ola=s(o8e);ctt=r(Ola,"vision-encoder-decoder"),Ola.forEach(t),mtt=r(MJe," \u2014 "),yae=n(MJe,"A",{href:!0});var Vla=s(yae);ftt=r(Vla,"TFVisionEncoderDecoderModel"),Vla.forEach(t),gtt=r(MJe," (Vision Encoder decoder model)"),MJe.forEach(t),Gla.forEach(t),htt=i($i),T(h6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),geo=i(m),Pm=n(m,"H2",{class:!0});var xro=s(Pm);u6=n(xro,"A",{id:!0,class:!0,href:!0});var Xla=s(u6);r8e=n(Xla,"SPAN",{});var zla=s(r8e);T(eR.$$.fragment,zla),zla.forEach(t),Xla.forEach(t),utt=i(xro),t8e=n(xro,"SPAN",{});var Qla=s(t8e);ptt=r(Qla,"TFAutoModelForSpeechSeq2Seq"),Qla.forEach(t),xro.forEach(t),heo=i(m),Tr=n(m,"DIV",{class:!0});var ki=s(Tr);T(oR.$$.fragment,ki),_tt=i(ki),Bm=n(ki,"P",{});var Uie=s(Bm);btt=r(Uie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xae=n(Uie,"A",{href:!0});var Wla=s(xae);vtt=r(Wla,"from_pretrained()"),Wla.forEach(t),Ftt=r(Uie," class method or the "),$ae=n(Uie,"A",{href:!0});var Ula=s($ae);Ttt=r(Ula,"from_config()"),Ula.forEach(t),Mtt=r(Uie,` class
method.`),Uie.forEach(t),Ett=i(ki),rR=n(ki,"P",{});var $ro=s(rR);Ctt=r($ro,"This class cannot be instantiated directly using "),a8e=n($ro,"CODE",{});var Hla=s(a8e);wtt=r(Hla,"__init__()"),Hla.forEach(t),Att=r($ro," (throws an error)."),$ro.forEach(t),Ltt=i(ki),na=n(ki,"DIV",{class:!0});var l9=s(na);T(tR.$$.fragment,l9),ytt=i(l9),n8e=n(l9,"P",{});var Jla=s(n8e);xtt=r(Jla,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Jla.forEach(t),$tt=i(l9),Im=n(l9,"P",{});var Hie=s(Im);ktt=r(Hie,`Note:
Loading a model from its configuration file does `),s8e=n(Hie,"STRONG",{});var Yla=s(s8e);Stt=r(Yla,"not"),Yla.forEach(t),Rtt=r(Hie,` load the model weights. It only affects the
model\u2019s configuration. Use `),kae=n(Hie,"A",{href:!0});var Kla=s(kae);Ptt=r(Kla,"from_pretrained()"),Kla.forEach(t),Btt=r(Hie," to load the model weights."),Hie.forEach(t),Itt=i(l9),T(p6.$$.fragment,l9),l9.forEach(t),Ntt=i(ki),Yr=n(ki,"DIV",{class:!0});var Si=s(Yr);T(aR.$$.fragment,Si),qtt=i(Si),l8e=n(Si,"P",{});var Zla=s(l8e);jtt=r(Zla,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Zla.forEach(t),Dtt=i(Si),Dn=n(Si,"P",{});var i9=s(Dn);Gtt=r(i9,"The model class to instantiate is selected based on the "),i8e=n(i9,"CODE",{});var eia=s(i8e);Ott=r(eia,"model_type"),eia.forEach(t),Vtt=r(i9,` property of the config object (either
passed as an argument or loaded from `),d8e=n(i9,"CODE",{});var oia=s(d8e);Xtt=r(oia,"pretrained_model_name_or_path"),oia.forEach(t),ztt=r(i9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c8e=n(i9,"CODE",{});var ria=s(c8e);Qtt=r(ria,"pretrained_model_name_or_path"),ria.forEach(t),Wtt=r(i9,":"),i9.forEach(t),Utt=i(Si),m8e=n(Si,"UL",{});var tia=s(m8e);_6=n(tia,"LI",{});var EJe=s(_6);f8e=n(EJe,"STRONG",{});var aia=s(f8e);Htt=r(aia,"speech_to_text"),aia.forEach(t),Jtt=r(EJe," \u2014 "),Sae=n(EJe,"A",{href:!0});var nia=s(Sae);Ytt=r(nia,"TFSpeech2TextForConditionalGeneration"),nia.forEach(t),Ktt=r(EJe," (Speech2Text model)"),EJe.forEach(t),tia.forEach(t),Ztt=i(Si),T(b6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),ueo=i(m),Nm=n(m,"H2",{class:!0});var kro=s(Nm);v6=n(kro,"A",{id:!0,class:!0,href:!0});var sia=s(v6);g8e=n(sia,"SPAN",{});var lia=s(g8e);T(nR.$$.fragment,lia),lia.forEach(t),sia.forEach(t),eat=i(kro),h8e=n(kro,"SPAN",{});var iia=s(h8e);oat=r(iia,"FlaxAutoModel"),iia.forEach(t),kro.forEach(t),peo=i(m),Mr=n(m,"DIV",{class:!0});var Ri=s(Mr);T(sR.$$.fragment,Ri),rat=i(Ri),qm=n(Ri,"P",{});var Jie=s(qm);tat=r(Jie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Rae=n(Jie,"A",{href:!0});var dia=s(Rae);aat=r(dia,"from_pretrained()"),dia.forEach(t),nat=r(Jie," class method or the "),Pae=n(Jie,"A",{href:!0});var cia=s(Pae);sat=r(cia,"from_config()"),cia.forEach(t),lat=r(Jie,` class
method.`),Jie.forEach(t),iat=i(Ri),lR=n(Ri,"P",{});var Sro=s(lR);dat=r(Sro,"This class cannot be instantiated directly using "),u8e=n(Sro,"CODE",{});var mia=s(u8e);cat=r(mia,"__init__()"),mia.forEach(t),mat=r(Sro," (throws an error)."),Sro.forEach(t),fat=i(Ri),sa=n(Ri,"DIV",{class:!0});var d9=s(sa);T(iR.$$.fragment,d9),gat=i(d9),p8e=n(d9,"P",{});var fia=s(p8e);hat=r(fia,"Instantiates one of the base model classes of the library from a configuration."),fia.forEach(t),uat=i(d9),jm=n(d9,"P",{});var Yie=s(jm);pat=r(Yie,`Note:
Loading a model from its configuration file does `),_8e=n(Yie,"STRONG",{});var gia=s(_8e);_at=r(gia,"not"),gia.forEach(t),bat=r(Yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bae=n(Yie,"A",{href:!0});var hia=s(Bae);vat=r(hia,"from_pretrained()"),hia.forEach(t),Fat=r(Yie," to load the model weights."),Yie.forEach(t),Tat=i(d9),T(F6.$$.fragment,d9),d9.forEach(t),Mat=i(Ri),Kr=n(Ri,"DIV",{class:!0});var Pi=s(Kr);T(dR.$$.fragment,Pi),Eat=i(Pi),b8e=n(Pi,"P",{});var uia=s(b8e);Cat=r(uia,"Instantiate one of the base model classes of the library from a pretrained model."),uia.forEach(t),wat=i(Pi),Gn=n(Pi,"P",{});var c9=s(Gn);Aat=r(c9,"The model class to instantiate is selected based on the "),v8e=n(c9,"CODE",{});var pia=s(v8e);Lat=r(pia,"model_type"),pia.forEach(t),yat=r(c9,` property of the config object (either
passed as an argument or loaded from `),F8e=n(c9,"CODE",{});var _ia=s(F8e);xat=r(_ia,"pretrained_model_name_or_path"),_ia.forEach(t),$at=r(c9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T8e=n(c9,"CODE",{});var bia=s(T8e);kat=r(bia,"pretrained_model_name_or_path"),bia.forEach(t),Sat=r(c9,":"),c9.forEach(t),Rat=i(Pi),te=n(Pi,"UL",{});var ne=s(te);T6=n(ne,"LI",{});var CJe=s(T6);M8e=n(CJe,"STRONG",{});var via=s(M8e);Pat=r(via,"albert"),via.forEach(t),Bat=r(CJe," \u2014 "),Iae=n(CJe,"A",{href:!0});var Fia=s(Iae);Iat=r(Fia,"FlaxAlbertModel"),Fia.forEach(t),Nat=r(CJe," (ALBERT model)"),CJe.forEach(t),qat=i(ne),M6=n(ne,"LI",{});var wJe=s(M6);E8e=n(wJe,"STRONG",{});var Tia=s(E8e);jat=r(Tia,"bart"),Tia.forEach(t),Dat=r(wJe," \u2014 "),Nae=n(wJe,"A",{href:!0});var Mia=s(Nae);Gat=r(Mia,"FlaxBartModel"),Mia.forEach(t),Oat=r(wJe," (BART model)"),wJe.forEach(t),Vat=i(ne),E6=n(ne,"LI",{});var AJe=s(E6);C8e=n(AJe,"STRONG",{});var Eia=s(C8e);Xat=r(Eia,"beit"),Eia.forEach(t),zat=r(AJe," \u2014 "),qae=n(AJe,"A",{href:!0});var Cia=s(qae);Qat=r(Cia,"FlaxBeitModel"),Cia.forEach(t),Wat=r(AJe," (BEiT model)"),AJe.forEach(t),Uat=i(ne),C6=n(ne,"LI",{});var LJe=s(C6);w8e=n(LJe,"STRONG",{});var wia=s(w8e);Hat=r(wia,"bert"),wia.forEach(t),Jat=r(LJe," \u2014 "),jae=n(LJe,"A",{href:!0});var Aia=s(jae);Yat=r(Aia,"FlaxBertModel"),Aia.forEach(t),Kat=r(LJe," (BERT model)"),LJe.forEach(t),Zat=i(ne),w6=n(ne,"LI",{});var yJe=s(w6);A8e=n(yJe,"STRONG",{});var Lia=s(A8e);ent=r(Lia,"big_bird"),Lia.forEach(t),ont=r(yJe," \u2014 "),Dae=n(yJe,"A",{href:!0});var yia=s(Dae);rnt=r(yia,"FlaxBigBirdModel"),yia.forEach(t),tnt=r(yJe," (BigBird model)"),yJe.forEach(t),ant=i(ne),A6=n(ne,"LI",{});var xJe=s(A6);L8e=n(xJe,"STRONG",{});var xia=s(L8e);nnt=r(xia,"blenderbot"),xia.forEach(t),snt=r(xJe," \u2014 "),Gae=n(xJe,"A",{href:!0});var $ia=s(Gae);lnt=r($ia,"FlaxBlenderbotModel"),$ia.forEach(t),int=r(xJe," (Blenderbot model)"),xJe.forEach(t),dnt=i(ne),L6=n(ne,"LI",{});var $Je=s(L6);y8e=n($Je,"STRONG",{});var kia=s(y8e);cnt=r(kia,"blenderbot-small"),kia.forEach(t),mnt=r($Je," \u2014 "),Oae=n($Je,"A",{href:!0});var Sia=s(Oae);fnt=r(Sia,"FlaxBlenderbotSmallModel"),Sia.forEach(t),gnt=r($Je," (BlenderbotSmall model)"),$Je.forEach(t),hnt=i(ne),y6=n(ne,"LI",{});var kJe=s(y6);x8e=n(kJe,"STRONG",{});var Ria=s(x8e);unt=r(Ria,"clip"),Ria.forEach(t),pnt=r(kJe," \u2014 "),Vae=n(kJe,"A",{href:!0});var Pia=s(Vae);_nt=r(Pia,"FlaxCLIPModel"),Pia.forEach(t),bnt=r(kJe," (CLIP model)"),kJe.forEach(t),vnt=i(ne),x6=n(ne,"LI",{});var SJe=s(x6);$8e=n(SJe,"STRONG",{});var Bia=s($8e);Fnt=r(Bia,"distilbert"),Bia.forEach(t),Tnt=r(SJe," \u2014 "),Xae=n(SJe,"A",{href:!0});var Iia=s(Xae);Mnt=r(Iia,"FlaxDistilBertModel"),Iia.forEach(t),Ent=r(SJe," (DistilBERT model)"),SJe.forEach(t),Cnt=i(ne),$6=n(ne,"LI",{});var RJe=s($6);k8e=n(RJe,"STRONG",{});var Nia=s(k8e);wnt=r(Nia,"electra"),Nia.forEach(t),Ant=r(RJe," \u2014 "),zae=n(RJe,"A",{href:!0});var qia=s(zae);Lnt=r(qia,"FlaxElectraModel"),qia.forEach(t),ynt=r(RJe," (ELECTRA model)"),RJe.forEach(t),xnt=i(ne),k6=n(ne,"LI",{});var PJe=s(k6);S8e=n(PJe,"STRONG",{});var jia=s(S8e);$nt=r(jia,"gpt2"),jia.forEach(t),knt=r(PJe," \u2014 "),Qae=n(PJe,"A",{href:!0});var Dia=s(Qae);Snt=r(Dia,"FlaxGPT2Model"),Dia.forEach(t),Rnt=r(PJe," (OpenAI GPT-2 model)"),PJe.forEach(t),Pnt=i(ne),S6=n(ne,"LI",{});var BJe=s(S6);R8e=n(BJe,"STRONG",{});var Gia=s(R8e);Bnt=r(Gia,"gpt_neo"),Gia.forEach(t),Int=r(BJe," \u2014 "),Wae=n(BJe,"A",{href:!0});var Oia=s(Wae);Nnt=r(Oia,"FlaxGPTNeoModel"),Oia.forEach(t),qnt=r(BJe," (GPT Neo model)"),BJe.forEach(t),jnt=i(ne),R6=n(ne,"LI",{});var IJe=s(R6);P8e=n(IJe,"STRONG",{});var Via=s(P8e);Dnt=r(Via,"gptj"),Via.forEach(t),Gnt=r(IJe," \u2014 "),Uae=n(IJe,"A",{href:!0});var Xia=s(Uae);Ont=r(Xia,"FlaxGPTJModel"),Xia.forEach(t),Vnt=r(IJe," (GPT-J model)"),IJe.forEach(t),Xnt=i(ne),P6=n(ne,"LI",{});var NJe=s(P6);B8e=n(NJe,"STRONG",{});var zia=s(B8e);znt=r(zia,"longt5"),zia.forEach(t),Qnt=r(NJe," \u2014 "),Hae=n(NJe,"A",{href:!0});var Qia=s(Hae);Wnt=r(Qia,"FlaxLongT5Model"),Qia.forEach(t),Unt=r(NJe," (LongT5 model)"),NJe.forEach(t),Hnt=i(ne),B6=n(ne,"LI",{});var qJe=s(B6);I8e=n(qJe,"STRONG",{});var Wia=s(I8e);Jnt=r(Wia,"marian"),Wia.forEach(t),Ynt=r(qJe," \u2014 "),Jae=n(qJe,"A",{href:!0});var Uia=s(Jae);Knt=r(Uia,"FlaxMarianModel"),Uia.forEach(t),Znt=r(qJe," (Marian model)"),qJe.forEach(t),est=i(ne),I6=n(ne,"LI",{});var jJe=s(I6);N8e=n(jJe,"STRONG",{});var Hia=s(N8e);ost=r(Hia,"mbart"),Hia.forEach(t),rst=r(jJe," \u2014 "),Yae=n(jJe,"A",{href:!0});var Jia=s(Yae);tst=r(Jia,"FlaxMBartModel"),Jia.forEach(t),ast=r(jJe," (mBART model)"),jJe.forEach(t),nst=i(ne),N6=n(ne,"LI",{});var DJe=s(N6);q8e=n(DJe,"STRONG",{});var Yia=s(q8e);sst=r(Yia,"mt5"),Yia.forEach(t),lst=r(DJe," \u2014 "),Kae=n(DJe,"A",{href:!0});var Kia=s(Kae);ist=r(Kia,"FlaxMT5Model"),Kia.forEach(t),dst=r(DJe," (MT5 model)"),DJe.forEach(t),cst=i(ne),q6=n(ne,"LI",{});var GJe=s(q6);j8e=n(GJe,"STRONG",{});var Zia=s(j8e);mst=r(Zia,"opt"),Zia.forEach(t),fst=r(GJe," \u2014 "),Zae=n(GJe,"A",{href:!0});var eda=s(Zae);gst=r(eda,"FlaxOPTModel"),eda.forEach(t),hst=r(GJe," (OPT model)"),GJe.forEach(t),ust=i(ne),j6=n(ne,"LI",{});var OJe=s(j6);D8e=n(OJe,"STRONG",{});var oda=s(D8e);pst=r(oda,"pegasus"),oda.forEach(t),_st=r(OJe," \u2014 "),ene=n(OJe,"A",{href:!0});var rda=s(ene);bst=r(rda,"FlaxPegasusModel"),rda.forEach(t),vst=r(OJe," (Pegasus model)"),OJe.forEach(t),Fst=i(ne),D6=n(ne,"LI",{});var VJe=s(D6);G8e=n(VJe,"STRONG",{});var tda=s(G8e);Tst=r(tda,"roberta"),tda.forEach(t),Mst=r(VJe," \u2014 "),one=n(VJe,"A",{href:!0});var ada=s(one);Est=r(ada,"FlaxRobertaModel"),ada.forEach(t),Cst=r(VJe," (RoBERTa model)"),VJe.forEach(t),wst=i(ne),G6=n(ne,"LI",{});var XJe=s(G6);O8e=n(XJe,"STRONG",{});var nda=s(O8e);Ast=r(nda,"roformer"),nda.forEach(t),Lst=r(XJe," \u2014 "),rne=n(XJe,"A",{href:!0});var sda=s(rne);yst=r(sda,"FlaxRoFormerModel"),sda.forEach(t),xst=r(XJe," (RoFormer model)"),XJe.forEach(t),$st=i(ne),O6=n(ne,"LI",{});var zJe=s(O6);V8e=n(zJe,"STRONG",{});var lda=s(V8e);kst=r(lda,"t5"),lda.forEach(t),Sst=r(zJe," \u2014 "),tne=n(zJe,"A",{href:!0});var ida=s(tne);Rst=r(ida,"FlaxT5Model"),ida.forEach(t),Pst=r(zJe," (T5 model)"),zJe.forEach(t),Bst=i(ne),V6=n(ne,"LI",{});var QJe=s(V6);X8e=n(QJe,"STRONG",{});var dda=s(X8e);Ist=r(dda,"vision-text-dual-encoder"),dda.forEach(t),Nst=r(QJe," \u2014 "),ane=n(QJe,"A",{href:!0});var cda=s(ane);qst=r(cda,"FlaxVisionTextDualEncoderModel"),cda.forEach(t),jst=r(QJe," (VisionTextDualEncoder model)"),QJe.forEach(t),Dst=i(ne),X6=n(ne,"LI",{});var WJe=s(X6);z8e=n(WJe,"STRONG",{});var mda=s(z8e);Gst=r(mda,"vit"),mda.forEach(t),Ost=r(WJe," \u2014 "),nne=n(WJe,"A",{href:!0});var fda=s(nne);Vst=r(fda,"FlaxViTModel"),fda.forEach(t),Xst=r(WJe," (ViT model)"),WJe.forEach(t),zst=i(ne),z6=n(ne,"LI",{});var UJe=s(z6);Q8e=n(UJe,"STRONG",{});var gda=s(Q8e);Qst=r(gda,"wav2vec2"),gda.forEach(t),Wst=r(UJe," \u2014 "),sne=n(UJe,"A",{href:!0});var hda=s(sne);Ust=r(hda,"FlaxWav2Vec2Model"),hda.forEach(t),Hst=r(UJe," (Wav2Vec2 model)"),UJe.forEach(t),Jst=i(ne),Q6=n(ne,"LI",{});var HJe=s(Q6);W8e=n(HJe,"STRONG",{});var uda=s(W8e);Yst=r(uda,"xglm"),uda.forEach(t),Kst=r(HJe," \u2014 "),lne=n(HJe,"A",{href:!0});var pda=s(lne);Zst=r(pda,"FlaxXGLMModel"),pda.forEach(t),elt=r(HJe," (XGLM model)"),HJe.forEach(t),olt=i(ne),W6=n(ne,"LI",{});var JJe=s(W6);U8e=n(JJe,"STRONG",{});var _da=s(U8e);rlt=r(_da,"xlm-roberta"),_da.forEach(t),tlt=r(JJe," \u2014 "),ine=n(JJe,"A",{href:!0});var bda=s(ine);alt=r(bda,"FlaxXLMRobertaModel"),bda.forEach(t),nlt=r(JJe," (XLM-RoBERTa model)"),JJe.forEach(t),ne.forEach(t),slt=i(Pi),T(U6.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),_eo=i(m),Dm=n(m,"H2",{class:!0});var Rro=s(Dm);H6=n(Rro,"A",{id:!0,class:!0,href:!0});var vda=s(H6);H8e=n(vda,"SPAN",{});var Fda=s(H8e);T(cR.$$.fragment,Fda),Fda.forEach(t),vda.forEach(t),llt=i(Rro),J8e=n(Rro,"SPAN",{});var Tda=s(J8e);ilt=r(Tda,"FlaxAutoModelForCausalLM"),Tda.forEach(t),Rro.forEach(t),beo=i(m),Er=n(m,"DIV",{class:!0});var Bi=s(Er);T(mR.$$.fragment,Bi),dlt=i(Bi),Gm=n(Bi,"P",{});var Kie=s(Gm);clt=r(Kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dne=n(Kie,"A",{href:!0});var Mda=s(dne);mlt=r(Mda,"from_pretrained()"),Mda.forEach(t),flt=r(Kie," class method or the "),cne=n(Kie,"A",{href:!0});var Eda=s(cne);glt=r(Eda,"from_config()"),Eda.forEach(t),hlt=r(Kie,` class
method.`),Kie.forEach(t),ult=i(Bi),fR=n(Bi,"P",{});var Pro=s(fR);plt=r(Pro,"This class cannot be instantiated directly using "),Y8e=n(Pro,"CODE",{});var Cda=s(Y8e);_lt=r(Cda,"__init__()"),Cda.forEach(t),blt=r(Pro," (throws an error)."),Pro.forEach(t),vlt=i(Bi),la=n(Bi,"DIV",{class:!0});var m9=s(la);T(gR.$$.fragment,m9),Flt=i(m9),K8e=n(m9,"P",{});var wda=s(K8e);Tlt=r(wda,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wda.forEach(t),Mlt=i(m9),Om=n(m9,"P",{});var Zie=s(Om);Elt=r(Zie,`Note:
Loading a model from its configuration file does `),Z8e=n(Zie,"STRONG",{});var Ada=s(Z8e);Clt=r(Ada,"not"),Ada.forEach(t),wlt=r(Zie,` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=n(Zie,"A",{href:!0});var Lda=s(mne);Alt=r(Lda,"from_pretrained()"),Lda.forEach(t),Llt=r(Zie," to load the model weights."),Zie.forEach(t),ylt=i(m9),T(J6.$$.fragment,m9),m9.forEach(t),xlt=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(hR.$$.fragment,Ii),$lt=i(Ii),e9e=n(Ii,"P",{});var yda=s(e9e);klt=r(yda,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),yda.forEach(t),Slt=i(Ii),On=n(Ii,"P",{});var f9=s(On);Rlt=r(f9,"The model class to instantiate is selected based on the "),o9e=n(f9,"CODE",{});var xda=s(o9e);Plt=r(xda,"model_type"),xda.forEach(t),Blt=r(f9,` property of the config object (either
passed as an argument or loaded from `),r9e=n(f9,"CODE",{});var $da=s(r9e);Ilt=r($da,"pretrained_model_name_or_path"),$da.forEach(t),Nlt=r(f9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=n(f9,"CODE",{});var kda=s(t9e);qlt=r(kda,"pretrained_model_name_or_path"),kda.forEach(t),jlt=r(f9,":"),f9.forEach(t),Dlt=i(Ii),xe=n(Ii,"UL",{});var qe=s(xe);Y6=n(qe,"LI",{});var YJe=s(Y6);a9e=n(YJe,"STRONG",{});var Sda=s(a9e);Glt=r(Sda,"bart"),Sda.forEach(t),Olt=r(YJe," \u2014 "),fne=n(YJe,"A",{href:!0});var Rda=s(fne);Vlt=r(Rda,"FlaxBartForCausalLM"),Rda.forEach(t),Xlt=r(YJe," (BART model)"),YJe.forEach(t),zlt=i(qe),K6=n(qe,"LI",{});var KJe=s(K6);n9e=n(KJe,"STRONG",{});var Pda=s(n9e);Qlt=r(Pda,"bert"),Pda.forEach(t),Wlt=r(KJe," \u2014 "),gne=n(KJe,"A",{href:!0});var Bda=s(gne);Ult=r(Bda,"FlaxBertForCausalLM"),Bda.forEach(t),Hlt=r(KJe," (BERT model)"),KJe.forEach(t),Jlt=i(qe),Z6=n(qe,"LI",{});var ZJe=s(Z6);s9e=n(ZJe,"STRONG",{});var Ida=s(s9e);Ylt=r(Ida,"big_bird"),Ida.forEach(t),Klt=r(ZJe," \u2014 "),hne=n(ZJe,"A",{href:!0});var Nda=s(hne);Zlt=r(Nda,"FlaxBigBirdForCausalLM"),Nda.forEach(t),eit=r(ZJe," (BigBird model)"),ZJe.forEach(t),oit=i(qe),e7=n(qe,"LI",{});var eYe=s(e7);l9e=n(eYe,"STRONG",{});var qda=s(l9e);rit=r(qda,"electra"),qda.forEach(t),tit=r(eYe," \u2014 "),une=n(eYe,"A",{href:!0});var jda=s(une);ait=r(jda,"FlaxElectraForCausalLM"),jda.forEach(t),nit=r(eYe," (ELECTRA model)"),eYe.forEach(t),sit=i(qe),o7=n(qe,"LI",{});var oYe=s(o7);i9e=n(oYe,"STRONG",{});var Dda=s(i9e);lit=r(Dda,"gpt2"),Dda.forEach(t),iit=r(oYe," \u2014 "),pne=n(oYe,"A",{href:!0});var Gda=s(pne);dit=r(Gda,"FlaxGPT2LMHeadModel"),Gda.forEach(t),cit=r(oYe," (OpenAI GPT-2 model)"),oYe.forEach(t),mit=i(qe),r7=n(qe,"LI",{});var rYe=s(r7);d9e=n(rYe,"STRONG",{});var Oda=s(d9e);fit=r(Oda,"gpt_neo"),Oda.forEach(t),git=r(rYe," \u2014 "),_ne=n(rYe,"A",{href:!0});var Vda=s(_ne);hit=r(Vda,"FlaxGPTNeoForCausalLM"),Vda.forEach(t),uit=r(rYe," (GPT Neo model)"),rYe.forEach(t),pit=i(qe),t7=n(qe,"LI",{});var tYe=s(t7);c9e=n(tYe,"STRONG",{});var Xda=s(c9e);_it=r(Xda,"gptj"),Xda.forEach(t),bit=r(tYe," \u2014 "),bne=n(tYe,"A",{href:!0});var zda=s(bne);vit=r(zda,"FlaxGPTJForCausalLM"),zda.forEach(t),Fit=r(tYe," (GPT-J model)"),tYe.forEach(t),Tit=i(qe),a7=n(qe,"LI",{});var aYe=s(a7);m9e=n(aYe,"STRONG",{});var Qda=s(m9e);Mit=r(Qda,"opt"),Qda.forEach(t),Eit=r(aYe," \u2014 "),vne=n(aYe,"A",{href:!0});var Wda=s(vne);Cit=r(Wda,"FlaxOPTForCausalLM"),Wda.forEach(t),wit=r(aYe," (OPT model)"),aYe.forEach(t),Ait=i(qe),n7=n(qe,"LI",{});var nYe=s(n7);f9e=n(nYe,"STRONG",{});var Uda=s(f9e);Lit=r(Uda,"roberta"),Uda.forEach(t),yit=r(nYe," \u2014 "),Fne=n(nYe,"A",{href:!0});var Hda=s(Fne);xit=r(Hda,"FlaxRobertaForCausalLM"),Hda.forEach(t),$it=r(nYe," (RoBERTa model)"),nYe.forEach(t),kit=i(qe),s7=n(qe,"LI",{});var sYe=s(s7);g9e=n(sYe,"STRONG",{});var Jda=s(g9e);Sit=r(Jda,"xglm"),Jda.forEach(t),Rit=r(sYe," \u2014 "),Tne=n(sYe,"A",{href:!0});var Yda=s(Tne);Pit=r(Yda,"FlaxXGLMForCausalLM"),Yda.forEach(t),Bit=r(sYe," (XGLM model)"),sYe.forEach(t),qe.forEach(t),Iit=i(Ii),T(l7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),veo=i(m),Vm=n(m,"H2",{class:!0});var Bro=s(Vm);i7=n(Bro,"A",{id:!0,class:!0,href:!0});var Kda=s(i7);h9e=n(Kda,"SPAN",{});var Zda=s(h9e);T(uR.$$.fragment,Zda),Zda.forEach(t),Kda.forEach(t),Nit=i(Bro),u9e=n(Bro,"SPAN",{});var eca=s(u9e);qit=r(eca,"FlaxAutoModelForPreTraining"),eca.forEach(t),Bro.forEach(t),Feo=i(m),Cr=n(m,"DIV",{class:!0});var Ni=s(Cr);T(pR.$$.fragment,Ni),jit=i(Ni),Xm=n(Ni,"P",{});var ede=s(Xm);Dit=r(ede,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mne=n(ede,"A",{href:!0});var oca=s(Mne);Git=r(oca,"from_pretrained()"),oca.forEach(t),Oit=r(ede," class method or the "),Ene=n(ede,"A",{href:!0});var rca=s(Ene);Vit=r(rca,"from_config()"),rca.forEach(t),Xit=r(ede,` class
method.`),ede.forEach(t),zit=i(Ni),_R=n(Ni,"P",{});var Iro=s(_R);Qit=r(Iro,"This class cannot be instantiated directly using "),p9e=n(Iro,"CODE",{});var tca=s(p9e);Wit=r(tca,"__init__()"),tca.forEach(t),Uit=r(Iro," (throws an error)."),Iro.forEach(t),Hit=i(Ni),ia=n(Ni,"DIV",{class:!0});var g9=s(ia);T(bR.$$.fragment,g9),Jit=i(g9),_9e=n(g9,"P",{});var aca=s(_9e);Yit=r(aca,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),aca.forEach(t),Kit=i(g9),zm=n(g9,"P",{});var ode=s(zm);Zit=r(ode,`Note:
Loading a model from its configuration file does `),b9e=n(ode,"STRONG",{});var nca=s(b9e);edt=r(nca,"not"),nca.forEach(t),odt=r(ode,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cne=n(ode,"A",{href:!0});var sca=s(Cne);rdt=r(sca,"from_pretrained()"),sca.forEach(t),tdt=r(ode," to load the model weights."),ode.forEach(t),adt=i(g9),T(d7.$$.fragment,g9),g9.forEach(t),ndt=i(Ni),et=n(Ni,"DIV",{class:!0});var qi=s(et);T(vR.$$.fragment,qi),sdt=i(qi),v9e=n(qi,"P",{});var lca=s(v9e);ldt=r(lca,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lca.forEach(t),idt=i(qi),Vn=n(qi,"P",{});var h9=s(Vn);ddt=r(h9,"The model class to instantiate is selected based on the "),F9e=n(h9,"CODE",{});var ica=s(F9e);cdt=r(ica,"model_type"),ica.forEach(t),mdt=r(h9,` property of the config object (either
passed as an argument or loaded from `),T9e=n(h9,"CODE",{});var dca=s(T9e);fdt=r(dca,"pretrained_model_name_or_path"),dca.forEach(t),gdt=r(h9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=n(h9,"CODE",{});var cca=s(M9e);hdt=r(cca,"pretrained_model_name_or_path"),cca.forEach(t),udt=r(h9,":"),h9.forEach(t),pdt=i(qi),Ee=n(qi,"UL",{});var we=s(Ee);c7=n(we,"LI",{});var lYe=s(c7);E9e=n(lYe,"STRONG",{});var mca=s(E9e);_dt=r(mca,"albert"),mca.forEach(t),bdt=r(lYe," \u2014 "),wne=n(lYe,"A",{href:!0});var fca=s(wne);vdt=r(fca,"FlaxAlbertForPreTraining"),fca.forEach(t),Fdt=r(lYe," (ALBERT model)"),lYe.forEach(t),Tdt=i(we),m7=n(we,"LI",{});var iYe=s(m7);C9e=n(iYe,"STRONG",{});var gca=s(C9e);Mdt=r(gca,"bart"),gca.forEach(t),Edt=r(iYe," \u2014 "),Ane=n(iYe,"A",{href:!0});var hca=s(Ane);Cdt=r(hca,"FlaxBartForConditionalGeneration"),hca.forEach(t),wdt=r(iYe," (BART model)"),iYe.forEach(t),Adt=i(we),f7=n(we,"LI",{});var dYe=s(f7);w9e=n(dYe,"STRONG",{});var uca=s(w9e);Ldt=r(uca,"bert"),uca.forEach(t),ydt=r(dYe," \u2014 "),Lne=n(dYe,"A",{href:!0});var pca=s(Lne);xdt=r(pca,"FlaxBertForPreTraining"),pca.forEach(t),$dt=r(dYe," (BERT model)"),dYe.forEach(t),kdt=i(we),g7=n(we,"LI",{});var cYe=s(g7);A9e=n(cYe,"STRONG",{});var _ca=s(A9e);Sdt=r(_ca,"big_bird"),_ca.forEach(t),Rdt=r(cYe," \u2014 "),yne=n(cYe,"A",{href:!0});var bca=s(yne);Pdt=r(bca,"FlaxBigBirdForPreTraining"),bca.forEach(t),Bdt=r(cYe," (BigBird model)"),cYe.forEach(t),Idt=i(we),h7=n(we,"LI",{});var mYe=s(h7);L9e=n(mYe,"STRONG",{});var vca=s(L9e);Ndt=r(vca,"electra"),vca.forEach(t),qdt=r(mYe," \u2014 "),xne=n(mYe,"A",{href:!0});var Fca=s(xne);jdt=r(Fca,"FlaxElectraForPreTraining"),Fca.forEach(t),Ddt=r(mYe," (ELECTRA model)"),mYe.forEach(t),Gdt=i(we),u7=n(we,"LI",{});var fYe=s(u7);y9e=n(fYe,"STRONG",{});var Tca=s(y9e);Odt=r(Tca,"longt5"),Tca.forEach(t),Vdt=r(fYe," \u2014 "),$ne=n(fYe,"A",{href:!0});var Mca=s($ne);Xdt=r(Mca,"FlaxLongT5ForConditionalGeneration"),Mca.forEach(t),zdt=r(fYe," (LongT5 model)"),fYe.forEach(t),Qdt=i(we),p7=n(we,"LI",{});var gYe=s(p7);x9e=n(gYe,"STRONG",{});var Eca=s(x9e);Wdt=r(Eca,"mbart"),Eca.forEach(t),Udt=r(gYe," \u2014 "),kne=n(gYe,"A",{href:!0});var Cca=s(kne);Hdt=r(Cca,"FlaxMBartForConditionalGeneration"),Cca.forEach(t),Jdt=r(gYe," (mBART model)"),gYe.forEach(t),Ydt=i(we),_7=n(we,"LI",{});var hYe=s(_7);$9e=n(hYe,"STRONG",{});var wca=s($9e);Kdt=r(wca,"mt5"),wca.forEach(t),Zdt=r(hYe," \u2014 "),Sne=n(hYe,"A",{href:!0});var Aca=s(Sne);ect=r(Aca,"FlaxMT5ForConditionalGeneration"),Aca.forEach(t),oct=r(hYe," (MT5 model)"),hYe.forEach(t),rct=i(we),b7=n(we,"LI",{});var uYe=s(b7);k9e=n(uYe,"STRONG",{});var Lca=s(k9e);tct=r(Lca,"roberta"),Lca.forEach(t),act=r(uYe," \u2014 "),Rne=n(uYe,"A",{href:!0});var yca=s(Rne);nct=r(yca,"FlaxRobertaForMaskedLM"),yca.forEach(t),sct=r(uYe," (RoBERTa model)"),uYe.forEach(t),lct=i(we),v7=n(we,"LI",{});var pYe=s(v7);S9e=n(pYe,"STRONG",{});var xca=s(S9e);ict=r(xca,"roformer"),xca.forEach(t),dct=r(pYe," \u2014 "),Pne=n(pYe,"A",{href:!0});var $ca=s(Pne);cct=r($ca,"FlaxRoFormerForMaskedLM"),$ca.forEach(t),mct=r(pYe," (RoFormer model)"),pYe.forEach(t),fct=i(we),F7=n(we,"LI",{});var _Ye=s(F7);R9e=n(_Ye,"STRONG",{});var kca=s(R9e);gct=r(kca,"t5"),kca.forEach(t),hct=r(_Ye," \u2014 "),Bne=n(_Ye,"A",{href:!0});var Sca=s(Bne);uct=r(Sca,"FlaxT5ForConditionalGeneration"),Sca.forEach(t),pct=r(_Ye," (T5 model)"),_Ye.forEach(t),_ct=i(we),T7=n(we,"LI",{});var bYe=s(T7);P9e=n(bYe,"STRONG",{});var Rca=s(P9e);bct=r(Rca,"wav2vec2"),Rca.forEach(t),vct=r(bYe," \u2014 "),Ine=n(bYe,"A",{href:!0});var Pca=s(Ine);Fct=r(Pca,"FlaxWav2Vec2ForPreTraining"),Pca.forEach(t),Tct=r(bYe," (Wav2Vec2 model)"),bYe.forEach(t),Mct=i(we),M7=n(we,"LI",{});var vYe=s(M7);B9e=n(vYe,"STRONG",{});var Bca=s(B9e);Ect=r(Bca,"xlm-roberta"),Bca.forEach(t),Cct=r(vYe," \u2014 "),Nne=n(vYe,"A",{href:!0});var Ica=s(Nne);wct=r(Ica,"FlaxXLMRobertaForMaskedLM"),Ica.forEach(t),Act=r(vYe," (XLM-RoBERTa model)"),vYe.forEach(t),we.forEach(t),Lct=i(qi),T(E7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),Teo=i(m),Qm=n(m,"H2",{class:!0});var Nro=s(Qm);C7=n(Nro,"A",{id:!0,class:!0,href:!0});var Nca=s(C7);I9e=n(Nca,"SPAN",{});var qca=s(I9e);T(FR.$$.fragment,qca),qca.forEach(t),Nca.forEach(t),yct=i(Nro),N9e=n(Nro,"SPAN",{});var jca=s(N9e);xct=r(jca,"FlaxAutoModelForMaskedLM"),jca.forEach(t),Nro.forEach(t),Meo=i(m),wr=n(m,"DIV",{class:!0});var ji=s(wr);T(TR.$$.fragment,ji),$ct=i(ji),Wm=n(ji,"P",{});var rde=s(Wm);kct=r(rde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qne=n(rde,"A",{href:!0});var Dca=s(qne);Sct=r(Dca,"from_pretrained()"),Dca.forEach(t),Rct=r(rde," class method or the "),jne=n(rde,"A",{href:!0});var Gca=s(jne);Pct=r(Gca,"from_config()"),Gca.forEach(t),Bct=r(rde,` class
method.`),rde.forEach(t),Ict=i(ji),MR=n(ji,"P",{});var qro=s(MR);Nct=r(qro,"This class cannot be instantiated directly using "),q9e=n(qro,"CODE",{});var Oca=s(q9e);qct=r(Oca,"__init__()"),Oca.forEach(t),jct=r(qro," (throws an error)."),qro.forEach(t),Dct=i(ji),da=n(ji,"DIV",{class:!0});var u9=s(da);T(ER.$$.fragment,u9),Gct=i(u9),j9e=n(u9,"P",{});var Vca=s(j9e);Oct=r(Vca,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vca.forEach(t),Vct=i(u9),Um=n(u9,"P",{});var tde=s(Um);Xct=r(tde,`Note:
Loading a model from its configuration file does `),D9e=n(tde,"STRONG",{});var Xca=s(D9e);zct=r(Xca,"not"),Xca.forEach(t),Qct=r(tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dne=n(tde,"A",{href:!0});var zca=s(Dne);Wct=r(zca,"from_pretrained()"),zca.forEach(t),Uct=r(tde," to load the model weights."),tde.forEach(t),Hct=i(u9),T(w7.$$.fragment,u9),u9.forEach(t),Jct=i(ji),ot=n(ji,"DIV",{class:!0});var Di=s(ot);T(CR.$$.fragment,Di),Yct=i(Di),G9e=n(Di,"P",{});var Qca=s(G9e);Kct=r(Qca,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qca.forEach(t),Zct=i(Di),Xn=n(Di,"P",{});var p9=s(Xn);emt=r(p9,"The model class to instantiate is selected based on the "),O9e=n(p9,"CODE",{});var Wca=s(O9e);omt=r(Wca,"model_type"),Wca.forEach(t),rmt=r(p9,` property of the config object (either
passed as an argument or loaded from `),V9e=n(p9,"CODE",{});var Uca=s(V9e);tmt=r(Uca,"pretrained_model_name_or_path"),Uca.forEach(t),amt=r(p9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X9e=n(p9,"CODE",{});var Hca=s(X9e);nmt=r(Hca,"pretrained_model_name_or_path"),Hca.forEach(t),smt=r(p9,":"),p9.forEach(t),lmt=i(Di),$e=n(Di,"UL",{});var je=s($e);A7=n(je,"LI",{});var FYe=s(A7);z9e=n(FYe,"STRONG",{});var Jca=s(z9e);imt=r(Jca,"albert"),Jca.forEach(t),dmt=r(FYe," \u2014 "),Gne=n(FYe,"A",{href:!0});var Yca=s(Gne);cmt=r(Yca,"FlaxAlbertForMaskedLM"),Yca.forEach(t),mmt=r(FYe," (ALBERT model)"),FYe.forEach(t),fmt=i(je),L7=n(je,"LI",{});var TYe=s(L7);Q9e=n(TYe,"STRONG",{});var Kca=s(Q9e);gmt=r(Kca,"bart"),Kca.forEach(t),hmt=r(TYe," \u2014 "),One=n(TYe,"A",{href:!0});var Zca=s(One);umt=r(Zca,"FlaxBartForConditionalGeneration"),Zca.forEach(t),pmt=r(TYe," (BART model)"),TYe.forEach(t),_mt=i(je),y7=n(je,"LI",{});var MYe=s(y7);W9e=n(MYe,"STRONG",{});var ema=s(W9e);bmt=r(ema,"bert"),ema.forEach(t),vmt=r(MYe," \u2014 "),Vne=n(MYe,"A",{href:!0});var oma=s(Vne);Fmt=r(oma,"FlaxBertForMaskedLM"),oma.forEach(t),Tmt=r(MYe," (BERT model)"),MYe.forEach(t),Mmt=i(je),x7=n(je,"LI",{});var EYe=s(x7);U9e=n(EYe,"STRONG",{});var rma=s(U9e);Emt=r(rma,"big_bird"),rma.forEach(t),Cmt=r(EYe," \u2014 "),Xne=n(EYe,"A",{href:!0});var tma=s(Xne);wmt=r(tma,"FlaxBigBirdForMaskedLM"),tma.forEach(t),Amt=r(EYe," (BigBird model)"),EYe.forEach(t),Lmt=i(je),$7=n(je,"LI",{});var CYe=s($7);H9e=n(CYe,"STRONG",{});var ama=s(H9e);ymt=r(ama,"distilbert"),ama.forEach(t),xmt=r(CYe," \u2014 "),zne=n(CYe,"A",{href:!0});var nma=s(zne);$mt=r(nma,"FlaxDistilBertForMaskedLM"),nma.forEach(t),kmt=r(CYe," (DistilBERT model)"),CYe.forEach(t),Smt=i(je),k7=n(je,"LI",{});var wYe=s(k7);J9e=n(wYe,"STRONG",{});var sma=s(J9e);Rmt=r(sma,"electra"),sma.forEach(t),Pmt=r(wYe," \u2014 "),Qne=n(wYe,"A",{href:!0});var lma=s(Qne);Bmt=r(lma,"FlaxElectraForMaskedLM"),lma.forEach(t),Imt=r(wYe," (ELECTRA model)"),wYe.forEach(t),Nmt=i(je),S7=n(je,"LI",{});var AYe=s(S7);Y9e=n(AYe,"STRONG",{});var ima=s(Y9e);qmt=r(ima,"mbart"),ima.forEach(t),jmt=r(AYe," \u2014 "),Wne=n(AYe,"A",{href:!0});var dma=s(Wne);Dmt=r(dma,"FlaxMBartForConditionalGeneration"),dma.forEach(t),Gmt=r(AYe," (mBART model)"),AYe.forEach(t),Omt=i(je),R7=n(je,"LI",{});var LYe=s(R7);K9e=n(LYe,"STRONG",{});var cma=s(K9e);Vmt=r(cma,"roberta"),cma.forEach(t),Xmt=r(LYe," \u2014 "),Une=n(LYe,"A",{href:!0});var mma=s(Une);zmt=r(mma,"FlaxRobertaForMaskedLM"),mma.forEach(t),Qmt=r(LYe," (RoBERTa model)"),LYe.forEach(t),Wmt=i(je),P7=n(je,"LI",{});var yYe=s(P7);Z9e=n(yYe,"STRONG",{});var fma=s(Z9e);Umt=r(fma,"roformer"),fma.forEach(t),Hmt=r(yYe," \u2014 "),Hne=n(yYe,"A",{href:!0});var gma=s(Hne);Jmt=r(gma,"FlaxRoFormerForMaskedLM"),gma.forEach(t),Ymt=r(yYe," (RoFormer model)"),yYe.forEach(t),Kmt=i(je),B7=n(je,"LI",{});var xYe=s(B7);exe=n(xYe,"STRONG",{});var hma=s(exe);Zmt=r(hma,"xlm-roberta"),hma.forEach(t),eft=r(xYe," \u2014 "),Jne=n(xYe,"A",{href:!0});var uma=s(Jne);oft=r(uma,"FlaxXLMRobertaForMaskedLM"),uma.forEach(t),rft=r(xYe," (XLM-RoBERTa model)"),xYe.forEach(t),je.forEach(t),tft=i(Di),T(I7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),Eeo=i(m),Hm=n(m,"H2",{class:!0});var jro=s(Hm);N7=n(jro,"A",{id:!0,class:!0,href:!0});var pma=s(N7);oxe=n(pma,"SPAN",{});var _ma=s(oxe);T(wR.$$.fragment,_ma),_ma.forEach(t),pma.forEach(t),aft=i(jro),rxe=n(jro,"SPAN",{});var bma=s(rxe);nft=r(bma,"FlaxAutoModelForSeq2SeqLM"),bma.forEach(t),jro.forEach(t),Ceo=i(m),Ar=n(m,"DIV",{class:!0});var Gi=s(Ar);T(AR.$$.fragment,Gi),sft=i(Gi),Jm=n(Gi,"P",{});var ade=s(Jm);lft=r(ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Yne=n(ade,"A",{href:!0});var vma=s(Yne);ift=r(vma,"from_pretrained()"),vma.forEach(t),dft=r(ade," class method or the "),Kne=n(ade,"A",{href:!0});var Fma=s(Kne);cft=r(Fma,"from_config()"),Fma.forEach(t),mft=r(ade,` class
method.`),ade.forEach(t),fft=i(Gi),LR=n(Gi,"P",{});var Dro=s(LR);gft=r(Dro,"This class cannot be instantiated directly using "),txe=n(Dro,"CODE",{});var Tma=s(txe);hft=r(Tma,"__init__()"),Tma.forEach(t),uft=r(Dro," (throws an error)."),Dro.forEach(t),pft=i(Gi),ca=n(Gi,"DIV",{class:!0});var _9=s(ca);T(yR.$$.fragment,_9),_ft=i(_9),axe=n(_9,"P",{});var Mma=s(axe);bft=r(Mma,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Mma.forEach(t),vft=i(_9),Ym=n(_9,"P",{});var nde=s(Ym);Fft=r(nde,`Note:
Loading a model from its configuration file does `),nxe=n(nde,"STRONG",{});var Ema=s(nxe);Tft=r(Ema,"not"),Ema.forEach(t),Mft=r(nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=n(nde,"A",{href:!0});var Cma=s(Zne);Eft=r(Cma,"from_pretrained()"),Cma.forEach(t),Cft=r(nde," to load the model weights."),nde.forEach(t),wft=i(_9),T(q7.$$.fragment,_9),_9.forEach(t),Aft=i(Gi),rt=n(Gi,"DIV",{class:!0});var Oi=s(rt);T(xR.$$.fragment,Oi),Lft=i(Oi),sxe=n(Oi,"P",{});var wma=s(sxe);yft=r(wma,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wma.forEach(t),xft=i(Oi),zn=n(Oi,"P",{});var b9=s(zn);$ft=r(b9,"The model class to instantiate is selected based on the "),lxe=n(b9,"CODE",{});var Ama=s(lxe);kft=r(Ama,"model_type"),Ama.forEach(t),Sft=r(b9,` property of the config object (either
passed as an argument or loaded from `),ixe=n(b9,"CODE",{});var Lma=s(ixe);Rft=r(Lma,"pretrained_model_name_or_path"),Lma.forEach(t),Pft=r(b9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dxe=n(b9,"CODE",{});var yma=s(dxe);Bft=r(yma,"pretrained_model_name_or_path"),yma.forEach(t),Ift=r(b9,":"),b9.forEach(t),Nft=i(Oi),ke=n(Oi,"UL",{});var De=s(ke);j7=n(De,"LI",{});var $Ye=s(j7);cxe=n($Ye,"STRONG",{});var xma=s(cxe);qft=r(xma,"bart"),xma.forEach(t),jft=r($Ye," \u2014 "),ese=n($Ye,"A",{href:!0});var $ma=s(ese);Dft=r($ma,"FlaxBartForConditionalGeneration"),$ma.forEach(t),Gft=r($Ye," (BART model)"),$Ye.forEach(t),Oft=i(De),D7=n(De,"LI",{});var kYe=s(D7);mxe=n(kYe,"STRONG",{});var kma=s(mxe);Vft=r(kma,"blenderbot"),kma.forEach(t),Xft=r(kYe," \u2014 "),ose=n(kYe,"A",{href:!0});var Sma=s(ose);zft=r(Sma,"FlaxBlenderbotForConditionalGeneration"),Sma.forEach(t),Qft=r(kYe," (Blenderbot model)"),kYe.forEach(t),Wft=i(De),G7=n(De,"LI",{});var SYe=s(G7);fxe=n(SYe,"STRONG",{});var Rma=s(fxe);Uft=r(Rma,"blenderbot-small"),Rma.forEach(t),Hft=r(SYe," \u2014 "),rse=n(SYe,"A",{href:!0});var Pma=s(rse);Jft=r(Pma,"FlaxBlenderbotSmallForConditionalGeneration"),Pma.forEach(t),Yft=r(SYe," (BlenderbotSmall model)"),SYe.forEach(t),Kft=i(De),O7=n(De,"LI",{});var RYe=s(O7);gxe=n(RYe,"STRONG",{});var Bma=s(gxe);Zft=r(Bma,"encoder-decoder"),Bma.forEach(t),egt=r(RYe," \u2014 "),tse=n(RYe,"A",{href:!0});var Ima=s(tse);ogt=r(Ima,"FlaxEncoderDecoderModel"),Ima.forEach(t),rgt=r(RYe," (Encoder decoder model)"),RYe.forEach(t),tgt=i(De),V7=n(De,"LI",{});var PYe=s(V7);hxe=n(PYe,"STRONG",{});var Nma=s(hxe);agt=r(Nma,"longt5"),Nma.forEach(t),ngt=r(PYe," \u2014 "),ase=n(PYe,"A",{href:!0});var qma=s(ase);sgt=r(qma,"FlaxLongT5ForConditionalGeneration"),qma.forEach(t),lgt=r(PYe," (LongT5 model)"),PYe.forEach(t),igt=i(De),X7=n(De,"LI",{});var BYe=s(X7);uxe=n(BYe,"STRONG",{});var jma=s(uxe);dgt=r(jma,"marian"),jma.forEach(t),cgt=r(BYe," \u2014 "),nse=n(BYe,"A",{href:!0});var Dma=s(nse);mgt=r(Dma,"FlaxMarianMTModel"),Dma.forEach(t),fgt=r(BYe," (Marian model)"),BYe.forEach(t),ggt=i(De),z7=n(De,"LI",{});var IYe=s(z7);pxe=n(IYe,"STRONG",{});var Gma=s(pxe);hgt=r(Gma,"mbart"),Gma.forEach(t),ugt=r(IYe," \u2014 "),sse=n(IYe,"A",{href:!0});var Oma=s(sse);pgt=r(Oma,"FlaxMBartForConditionalGeneration"),Oma.forEach(t),_gt=r(IYe," (mBART model)"),IYe.forEach(t),bgt=i(De),Q7=n(De,"LI",{});var NYe=s(Q7);_xe=n(NYe,"STRONG",{});var Vma=s(_xe);vgt=r(Vma,"mt5"),Vma.forEach(t),Fgt=r(NYe," \u2014 "),lse=n(NYe,"A",{href:!0});var Xma=s(lse);Tgt=r(Xma,"FlaxMT5ForConditionalGeneration"),Xma.forEach(t),Mgt=r(NYe," (MT5 model)"),NYe.forEach(t),Egt=i(De),W7=n(De,"LI",{});var qYe=s(W7);bxe=n(qYe,"STRONG",{});var zma=s(bxe);Cgt=r(zma,"pegasus"),zma.forEach(t),wgt=r(qYe," \u2014 "),ise=n(qYe,"A",{href:!0});var Qma=s(ise);Agt=r(Qma,"FlaxPegasusForConditionalGeneration"),Qma.forEach(t),Lgt=r(qYe," (Pegasus model)"),qYe.forEach(t),ygt=i(De),U7=n(De,"LI",{});var jYe=s(U7);vxe=n(jYe,"STRONG",{});var Wma=s(vxe);xgt=r(Wma,"t5"),Wma.forEach(t),$gt=r(jYe," \u2014 "),dse=n(jYe,"A",{href:!0});var Uma=s(dse);kgt=r(Uma,"FlaxT5ForConditionalGeneration"),Uma.forEach(t),Sgt=r(jYe," (T5 model)"),jYe.forEach(t),De.forEach(t),Rgt=i(Oi),T(H7.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),weo=i(m),Km=n(m,"H2",{class:!0});var Gro=s(Km);J7=n(Gro,"A",{id:!0,class:!0,href:!0});var Hma=s(J7);Fxe=n(Hma,"SPAN",{});var Jma=s(Fxe);T($R.$$.fragment,Jma),Jma.forEach(t),Hma.forEach(t),Pgt=i(Gro),Txe=n(Gro,"SPAN",{});var Yma=s(Txe);Bgt=r(Yma,"FlaxAutoModelForSequenceClassification"),Yma.forEach(t),Gro.forEach(t),Aeo=i(m),Lr=n(m,"DIV",{class:!0});var Vi=s(Lr);T(kR.$$.fragment,Vi),Igt=i(Vi),Zm=n(Vi,"P",{});var sde=s(Zm);Ngt=r(sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cse=n(sde,"A",{href:!0});var Kma=s(cse);qgt=r(Kma,"from_pretrained()"),Kma.forEach(t),jgt=r(sde," class method or the "),mse=n(sde,"A",{href:!0});var Zma=s(mse);Dgt=r(Zma,"from_config()"),Zma.forEach(t),Ggt=r(sde,` class
method.`),sde.forEach(t),Ogt=i(Vi),SR=n(Vi,"P",{});var Oro=s(SR);Vgt=r(Oro,"This class cannot be instantiated directly using "),Mxe=n(Oro,"CODE",{});var efa=s(Mxe);Xgt=r(efa,"__init__()"),efa.forEach(t),zgt=r(Oro," (throws an error)."),Oro.forEach(t),Qgt=i(Vi),ma=n(Vi,"DIV",{class:!0});var v9=s(ma);T(RR.$$.fragment,v9),Wgt=i(v9),Exe=n(v9,"P",{});var ofa=s(Exe);Ugt=r(ofa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ofa.forEach(t),Hgt=i(v9),ef=n(v9,"P",{});var lde=s(ef);Jgt=r(lde,`Note:
Loading a model from its configuration file does `),Cxe=n(lde,"STRONG",{});var rfa=s(Cxe);Ygt=r(rfa,"not"),rfa.forEach(t),Kgt=r(lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),fse=n(lde,"A",{href:!0});var tfa=s(fse);Zgt=r(tfa,"from_pretrained()"),tfa.forEach(t),eht=r(lde," to load the model weights."),lde.forEach(t),oht=i(v9),T(Y7.$$.fragment,v9),v9.forEach(t),rht=i(Vi),tt=n(Vi,"DIV",{class:!0});var Xi=s(tt);T(PR.$$.fragment,Xi),tht=i(Xi),wxe=n(Xi,"P",{});var afa=s(wxe);aht=r(afa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),afa.forEach(t),nht=i(Xi),Qn=n(Xi,"P",{});var F9=s(Qn);sht=r(F9,"The model class to instantiate is selected based on the "),Axe=n(F9,"CODE",{});var nfa=s(Axe);lht=r(nfa,"model_type"),nfa.forEach(t),iht=r(F9,` property of the config object (either
passed as an argument or loaded from `),Lxe=n(F9,"CODE",{});var sfa=s(Lxe);dht=r(sfa,"pretrained_model_name_or_path"),sfa.forEach(t),cht=r(F9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yxe=n(F9,"CODE",{});var lfa=s(yxe);mht=r(lfa,"pretrained_model_name_or_path"),lfa.forEach(t),fht=r(F9,":"),F9.forEach(t),ght=i(Xi),Se=n(Xi,"UL",{});var Ge=s(Se);K7=n(Ge,"LI",{});var DYe=s(K7);xxe=n(DYe,"STRONG",{});var ifa=s(xxe);hht=r(ifa,"albert"),ifa.forEach(t),uht=r(DYe," \u2014 "),gse=n(DYe,"A",{href:!0});var dfa=s(gse);pht=r(dfa,"FlaxAlbertForSequenceClassification"),dfa.forEach(t),_ht=r(DYe," (ALBERT model)"),DYe.forEach(t),bht=i(Ge),Z7=n(Ge,"LI",{});var GYe=s(Z7);$xe=n(GYe,"STRONG",{});var cfa=s($xe);vht=r(cfa,"bart"),cfa.forEach(t),Fht=r(GYe," \u2014 "),hse=n(GYe,"A",{href:!0});var mfa=s(hse);Tht=r(mfa,"FlaxBartForSequenceClassification"),mfa.forEach(t),Mht=r(GYe," (BART model)"),GYe.forEach(t),Eht=i(Ge),eL=n(Ge,"LI",{});var OYe=s(eL);kxe=n(OYe,"STRONG",{});var ffa=s(kxe);Cht=r(ffa,"bert"),ffa.forEach(t),wht=r(OYe," \u2014 "),use=n(OYe,"A",{href:!0});var gfa=s(use);Aht=r(gfa,"FlaxBertForSequenceClassification"),gfa.forEach(t),Lht=r(OYe," (BERT model)"),OYe.forEach(t),yht=i(Ge),oL=n(Ge,"LI",{});var VYe=s(oL);Sxe=n(VYe,"STRONG",{});var hfa=s(Sxe);xht=r(hfa,"big_bird"),hfa.forEach(t),$ht=r(VYe," \u2014 "),pse=n(VYe,"A",{href:!0});var ufa=s(pse);kht=r(ufa,"FlaxBigBirdForSequenceClassification"),ufa.forEach(t),Sht=r(VYe," (BigBird model)"),VYe.forEach(t),Rht=i(Ge),rL=n(Ge,"LI",{});var XYe=s(rL);Rxe=n(XYe,"STRONG",{});var pfa=s(Rxe);Pht=r(pfa,"distilbert"),pfa.forEach(t),Bht=r(XYe," \u2014 "),_se=n(XYe,"A",{href:!0});var _fa=s(_se);Iht=r(_fa,"FlaxDistilBertForSequenceClassification"),_fa.forEach(t),Nht=r(XYe," (DistilBERT model)"),XYe.forEach(t),qht=i(Ge),tL=n(Ge,"LI",{});var zYe=s(tL);Pxe=n(zYe,"STRONG",{});var bfa=s(Pxe);jht=r(bfa,"electra"),bfa.forEach(t),Dht=r(zYe," \u2014 "),bse=n(zYe,"A",{href:!0});var vfa=s(bse);Ght=r(vfa,"FlaxElectraForSequenceClassification"),vfa.forEach(t),Oht=r(zYe," (ELECTRA model)"),zYe.forEach(t),Vht=i(Ge),aL=n(Ge,"LI",{});var QYe=s(aL);Bxe=n(QYe,"STRONG",{});var Ffa=s(Bxe);Xht=r(Ffa,"mbart"),Ffa.forEach(t),zht=r(QYe," \u2014 "),vse=n(QYe,"A",{href:!0});var Tfa=s(vse);Qht=r(Tfa,"FlaxMBartForSequenceClassification"),Tfa.forEach(t),Wht=r(QYe," (mBART model)"),QYe.forEach(t),Uht=i(Ge),nL=n(Ge,"LI",{});var WYe=s(nL);Ixe=n(WYe,"STRONG",{});var Mfa=s(Ixe);Hht=r(Mfa,"roberta"),Mfa.forEach(t),Jht=r(WYe," \u2014 "),Fse=n(WYe,"A",{href:!0});var Efa=s(Fse);Yht=r(Efa,"FlaxRobertaForSequenceClassification"),Efa.forEach(t),Kht=r(WYe," (RoBERTa model)"),WYe.forEach(t),Zht=i(Ge),sL=n(Ge,"LI",{});var UYe=s(sL);Nxe=n(UYe,"STRONG",{});var Cfa=s(Nxe);eut=r(Cfa,"roformer"),Cfa.forEach(t),out=r(UYe," \u2014 "),Tse=n(UYe,"A",{href:!0});var wfa=s(Tse);rut=r(wfa,"FlaxRoFormerForSequenceClassification"),wfa.forEach(t),tut=r(UYe," (RoFormer model)"),UYe.forEach(t),aut=i(Ge),lL=n(Ge,"LI",{});var HYe=s(lL);qxe=n(HYe,"STRONG",{});var Afa=s(qxe);nut=r(Afa,"xlm-roberta"),Afa.forEach(t),sut=r(HYe," \u2014 "),Mse=n(HYe,"A",{href:!0});var Lfa=s(Mse);lut=r(Lfa,"FlaxXLMRobertaForSequenceClassification"),Lfa.forEach(t),iut=r(HYe," (XLM-RoBERTa model)"),HYe.forEach(t),Ge.forEach(t),dut=i(Xi),T(iL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),Leo=i(m),of=n(m,"H2",{class:!0});var Vro=s(of);dL=n(Vro,"A",{id:!0,class:!0,href:!0});var yfa=s(dL);jxe=n(yfa,"SPAN",{});var xfa=s(jxe);T(BR.$$.fragment,xfa),xfa.forEach(t),yfa.forEach(t),cut=i(Vro),Dxe=n(Vro,"SPAN",{});var $fa=s(Dxe);mut=r($fa,"FlaxAutoModelForQuestionAnswering"),$fa.forEach(t),Vro.forEach(t),yeo=i(m),yr=n(m,"DIV",{class:!0});var zi=s(yr);T(IR.$$.fragment,zi),fut=i(zi),rf=n(zi,"P",{});var ide=s(rf);gut=r(ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ese=n(ide,"A",{href:!0});var kfa=s(Ese);hut=r(kfa,"from_pretrained()"),kfa.forEach(t),uut=r(ide," class method or the "),Cse=n(ide,"A",{href:!0});var Sfa=s(Cse);put=r(Sfa,"from_config()"),Sfa.forEach(t),_ut=r(ide,` class
method.`),ide.forEach(t),but=i(zi),NR=n(zi,"P",{});var Xro=s(NR);vut=r(Xro,"This class cannot be instantiated directly using "),Gxe=n(Xro,"CODE",{});var Rfa=s(Gxe);Fut=r(Rfa,"__init__()"),Rfa.forEach(t),Tut=r(Xro," (throws an error)."),Xro.forEach(t),Mut=i(zi),fa=n(zi,"DIV",{class:!0});var T9=s(fa);T(qR.$$.fragment,T9),Eut=i(T9),Oxe=n(T9,"P",{});var Pfa=s(Oxe);Cut=r(Pfa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pfa.forEach(t),wut=i(T9),tf=n(T9,"P",{});var dde=s(tf);Aut=r(dde,`Note:
Loading a model from its configuration file does `),Vxe=n(dde,"STRONG",{});var Bfa=s(Vxe);Lut=r(Bfa,"not"),Bfa.forEach(t),yut=r(dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=n(dde,"A",{href:!0});var Ifa=s(wse);xut=r(Ifa,"from_pretrained()"),Ifa.forEach(t),$ut=r(dde," to load the model weights."),dde.forEach(t),kut=i(T9),T(cL.$$.fragment,T9),T9.forEach(t),Sut=i(zi),at=n(zi,"DIV",{class:!0});var Qi=s(at);T(jR.$$.fragment,Qi),Rut=i(Qi),Xxe=n(Qi,"P",{});var Nfa=s(Xxe);Put=r(Nfa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nfa.forEach(t),But=i(Qi),Wn=n(Qi,"P",{});var M9=s(Wn);Iut=r(M9,"The model class to instantiate is selected based on the "),zxe=n(M9,"CODE",{});var qfa=s(zxe);Nut=r(qfa,"model_type"),qfa.forEach(t),qut=r(M9,` property of the config object (either
passed as an argument or loaded from `),Qxe=n(M9,"CODE",{});var jfa=s(Qxe);jut=r(jfa,"pretrained_model_name_or_path"),jfa.forEach(t),Dut=r(M9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wxe=n(M9,"CODE",{});var Dfa=s(Wxe);Gut=r(Dfa,"pretrained_model_name_or_path"),Dfa.forEach(t),Out=r(M9,":"),M9.forEach(t),Vut=i(Qi),Re=n(Qi,"UL",{});var Oe=s(Re);mL=n(Oe,"LI",{});var JYe=s(mL);Uxe=n(JYe,"STRONG",{});var Gfa=s(Uxe);Xut=r(Gfa,"albert"),Gfa.forEach(t),zut=r(JYe," \u2014 "),Ase=n(JYe,"A",{href:!0});var Ofa=s(Ase);Qut=r(Ofa,"FlaxAlbertForQuestionAnswering"),Ofa.forEach(t),Wut=r(JYe," (ALBERT model)"),JYe.forEach(t),Uut=i(Oe),fL=n(Oe,"LI",{});var YYe=s(fL);Hxe=n(YYe,"STRONG",{});var Vfa=s(Hxe);Hut=r(Vfa,"bart"),Vfa.forEach(t),Jut=r(YYe," \u2014 "),Lse=n(YYe,"A",{href:!0});var Xfa=s(Lse);Yut=r(Xfa,"FlaxBartForQuestionAnswering"),Xfa.forEach(t),Kut=r(YYe," (BART model)"),YYe.forEach(t),Zut=i(Oe),gL=n(Oe,"LI",{});var KYe=s(gL);Jxe=n(KYe,"STRONG",{});var zfa=s(Jxe);ept=r(zfa,"bert"),zfa.forEach(t),opt=r(KYe," \u2014 "),yse=n(KYe,"A",{href:!0});var Qfa=s(yse);rpt=r(Qfa,"FlaxBertForQuestionAnswering"),Qfa.forEach(t),tpt=r(KYe," (BERT model)"),KYe.forEach(t),apt=i(Oe),hL=n(Oe,"LI",{});var ZYe=s(hL);Yxe=n(ZYe,"STRONG",{});var Wfa=s(Yxe);npt=r(Wfa,"big_bird"),Wfa.forEach(t),spt=r(ZYe," \u2014 "),xse=n(ZYe,"A",{href:!0});var Ufa=s(xse);lpt=r(Ufa,"FlaxBigBirdForQuestionAnswering"),Ufa.forEach(t),ipt=r(ZYe," (BigBird model)"),ZYe.forEach(t),dpt=i(Oe),uL=n(Oe,"LI",{});var eKe=s(uL);Kxe=n(eKe,"STRONG",{});var Hfa=s(Kxe);cpt=r(Hfa,"distilbert"),Hfa.forEach(t),mpt=r(eKe," \u2014 "),$se=n(eKe,"A",{href:!0});var Jfa=s($se);fpt=r(Jfa,"FlaxDistilBertForQuestionAnswering"),Jfa.forEach(t),gpt=r(eKe," (DistilBERT model)"),eKe.forEach(t),hpt=i(Oe),pL=n(Oe,"LI",{});var oKe=s(pL);Zxe=n(oKe,"STRONG",{});var Yfa=s(Zxe);upt=r(Yfa,"electra"),Yfa.forEach(t),ppt=r(oKe," \u2014 "),kse=n(oKe,"A",{href:!0});var Kfa=s(kse);_pt=r(Kfa,"FlaxElectraForQuestionAnswering"),Kfa.forEach(t),bpt=r(oKe," (ELECTRA model)"),oKe.forEach(t),vpt=i(Oe),_L=n(Oe,"LI",{});var rKe=s(_L);e$e=n(rKe,"STRONG",{});var Zfa=s(e$e);Fpt=r(Zfa,"mbart"),Zfa.forEach(t),Tpt=r(rKe," \u2014 "),Sse=n(rKe,"A",{href:!0});var ega=s(Sse);Mpt=r(ega,"FlaxMBartForQuestionAnswering"),ega.forEach(t),Ept=r(rKe," (mBART model)"),rKe.forEach(t),Cpt=i(Oe),bL=n(Oe,"LI",{});var tKe=s(bL);o$e=n(tKe,"STRONG",{});var oga=s(o$e);wpt=r(oga,"roberta"),oga.forEach(t),Apt=r(tKe," \u2014 "),Rse=n(tKe,"A",{href:!0});var rga=s(Rse);Lpt=r(rga,"FlaxRobertaForQuestionAnswering"),rga.forEach(t),ypt=r(tKe," (RoBERTa model)"),tKe.forEach(t),xpt=i(Oe),vL=n(Oe,"LI",{});var aKe=s(vL);r$e=n(aKe,"STRONG",{});var tga=s(r$e);$pt=r(tga,"roformer"),tga.forEach(t),kpt=r(aKe," \u2014 "),Pse=n(aKe,"A",{href:!0});var aga=s(Pse);Spt=r(aga,"FlaxRoFormerForQuestionAnswering"),aga.forEach(t),Rpt=r(aKe," (RoFormer model)"),aKe.forEach(t),Ppt=i(Oe),FL=n(Oe,"LI",{});var nKe=s(FL);t$e=n(nKe,"STRONG",{});var nga=s(t$e);Bpt=r(nga,"xlm-roberta"),nga.forEach(t),Ipt=r(nKe," \u2014 "),Bse=n(nKe,"A",{href:!0});var sga=s(Bse);Npt=r(sga,"FlaxXLMRobertaForQuestionAnswering"),sga.forEach(t),qpt=r(nKe," (XLM-RoBERTa model)"),nKe.forEach(t),Oe.forEach(t),jpt=i(Qi),T(TL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),xeo=i(m),af=n(m,"H2",{class:!0});var zro=s(af);ML=n(zro,"A",{id:!0,class:!0,href:!0});var lga=s(ML);a$e=n(lga,"SPAN",{});var iga=s(a$e);T(DR.$$.fragment,iga),iga.forEach(t),lga.forEach(t),Dpt=i(zro),n$e=n(zro,"SPAN",{});var dga=s(n$e);Gpt=r(dga,"FlaxAutoModelForTokenClassification"),dga.forEach(t),zro.forEach(t),$eo=i(m),xr=n(m,"DIV",{class:!0});var Wi=s(xr);T(GR.$$.fragment,Wi),Opt=i(Wi),nf=n(Wi,"P",{});var cde=s(nf);Vpt=r(cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ise=n(cde,"A",{href:!0});var cga=s(Ise);Xpt=r(cga,"from_pretrained()"),cga.forEach(t),zpt=r(cde," class method or the "),Nse=n(cde,"A",{href:!0});var mga=s(Nse);Qpt=r(mga,"from_config()"),mga.forEach(t),Wpt=r(cde,` class
method.`),cde.forEach(t),Upt=i(Wi),OR=n(Wi,"P",{});var Qro=s(OR);Hpt=r(Qro,"This class cannot be instantiated directly using "),s$e=n(Qro,"CODE",{});var fga=s(s$e);Jpt=r(fga,"__init__()"),fga.forEach(t),Ypt=r(Qro," (throws an error)."),Qro.forEach(t),Kpt=i(Wi),ga=n(Wi,"DIV",{class:!0});var E9=s(ga);T(VR.$$.fragment,E9),Zpt=i(E9),l$e=n(E9,"P",{});var gga=s(l$e);e_t=r(gga,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gga.forEach(t),o_t=i(E9),sf=n(E9,"P",{});var mde=s(sf);r_t=r(mde,`Note:
Loading a model from its configuration file does `),i$e=n(mde,"STRONG",{});var hga=s(i$e);t_t=r(hga,"not"),hga.forEach(t),a_t=r(mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),qse=n(mde,"A",{href:!0});var uga=s(qse);n_t=r(uga,"from_pretrained()"),uga.forEach(t),s_t=r(mde," to load the model weights."),mde.forEach(t),l_t=i(E9),T(EL.$$.fragment,E9),E9.forEach(t),i_t=i(Wi),nt=n(Wi,"DIV",{class:!0});var Ui=s(nt);T(XR.$$.fragment,Ui),d_t=i(Ui),d$e=n(Ui,"P",{});var pga=s(d$e);c_t=r(pga,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pga.forEach(t),m_t=i(Ui),Un=n(Ui,"P",{});var C9=s(Un);f_t=r(C9,"The model class to instantiate is selected based on the "),c$e=n(C9,"CODE",{});var _ga=s(c$e);g_t=r(_ga,"model_type"),_ga.forEach(t),h_t=r(C9,` property of the config object (either
passed as an argument or loaded from `),m$e=n(C9,"CODE",{});var bga=s(m$e);u_t=r(bga,"pretrained_model_name_or_path"),bga.forEach(t),p_t=r(C9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f$e=n(C9,"CODE",{});var vga=s(f$e);__t=r(vga,"pretrained_model_name_or_path"),vga.forEach(t),b_t=r(C9,":"),C9.forEach(t),v_t=i(Ui),Xe=n(Ui,"UL",{});var Ao=s(Xe);CL=n(Ao,"LI",{});var sKe=s(CL);g$e=n(sKe,"STRONG",{});var Fga=s(g$e);F_t=r(Fga,"albert"),Fga.forEach(t),T_t=r(sKe," \u2014 "),jse=n(sKe,"A",{href:!0});var Tga=s(jse);M_t=r(Tga,"FlaxAlbertForTokenClassification"),Tga.forEach(t),E_t=r(sKe," (ALBERT model)"),sKe.forEach(t),C_t=i(Ao),wL=n(Ao,"LI",{});var lKe=s(wL);h$e=n(lKe,"STRONG",{});var Mga=s(h$e);w_t=r(Mga,"bert"),Mga.forEach(t),A_t=r(lKe," \u2014 "),Dse=n(lKe,"A",{href:!0});var Ega=s(Dse);L_t=r(Ega,"FlaxBertForTokenClassification"),Ega.forEach(t),y_t=r(lKe," (BERT model)"),lKe.forEach(t),x_t=i(Ao),AL=n(Ao,"LI",{});var iKe=s(AL);u$e=n(iKe,"STRONG",{});var Cga=s(u$e);$_t=r(Cga,"big_bird"),Cga.forEach(t),k_t=r(iKe," \u2014 "),Gse=n(iKe,"A",{href:!0});var wga=s(Gse);S_t=r(wga,"FlaxBigBirdForTokenClassification"),wga.forEach(t),R_t=r(iKe," (BigBird model)"),iKe.forEach(t),P_t=i(Ao),LL=n(Ao,"LI",{});var dKe=s(LL);p$e=n(dKe,"STRONG",{});var Aga=s(p$e);B_t=r(Aga,"distilbert"),Aga.forEach(t),I_t=r(dKe," \u2014 "),Ose=n(dKe,"A",{href:!0});var Lga=s(Ose);N_t=r(Lga,"FlaxDistilBertForTokenClassification"),Lga.forEach(t),q_t=r(dKe," (DistilBERT model)"),dKe.forEach(t),j_t=i(Ao),yL=n(Ao,"LI",{});var cKe=s(yL);_$e=n(cKe,"STRONG",{});var yga=s(_$e);D_t=r(yga,"electra"),yga.forEach(t),G_t=r(cKe," \u2014 "),Vse=n(cKe,"A",{href:!0});var xga=s(Vse);O_t=r(xga,"FlaxElectraForTokenClassification"),xga.forEach(t),V_t=r(cKe," (ELECTRA model)"),cKe.forEach(t),X_t=i(Ao),xL=n(Ao,"LI",{});var mKe=s(xL);b$e=n(mKe,"STRONG",{});var $ga=s(b$e);z_t=r($ga,"roberta"),$ga.forEach(t),Q_t=r(mKe," \u2014 "),Xse=n(mKe,"A",{href:!0});var kga=s(Xse);W_t=r(kga,"FlaxRobertaForTokenClassification"),kga.forEach(t),U_t=r(mKe," (RoBERTa model)"),mKe.forEach(t),H_t=i(Ao),$L=n(Ao,"LI",{});var fKe=s($L);v$e=n(fKe,"STRONG",{});var Sga=s(v$e);J_t=r(Sga,"roformer"),Sga.forEach(t),Y_t=r(fKe," \u2014 "),zse=n(fKe,"A",{href:!0});var Rga=s(zse);K_t=r(Rga,"FlaxRoFormerForTokenClassification"),Rga.forEach(t),Z_t=r(fKe," (RoFormer model)"),fKe.forEach(t),ebt=i(Ao),kL=n(Ao,"LI",{});var gKe=s(kL);F$e=n(gKe,"STRONG",{});var Pga=s(F$e);obt=r(Pga,"xlm-roberta"),Pga.forEach(t),rbt=r(gKe," \u2014 "),Qse=n(gKe,"A",{href:!0});var Bga=s(Qse);tbt=r(Bga,"FlaxXLMRobertaForTokenClassification"),Bga.forEach(t),abt=r(gKe," (XLM-RoBERTa model)"),gKe.forEach(t),Ao.forEach(t),nbt=i(Ui),T(SL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),keo=i(m),lf=n(m,"H2",{class:!0});var Wro=s(lf);RL=n(Wro,"A",{id:!0,class:!0,href:!0});var Iga=s(RL);T$e=n(Iga,"SPAN",{});var Nga=s(T$e);T(zR.$$.fragment,Nga),Nga.forEach(t),Iga.forEach(t),sbt=i(Wro),M$e=n(Wro,"SPAN",{});var qga=s(M$e);lbt=r(qga,"FlaxAutoModelForMultipleChoice"),qga.forEach(t),Wro.forEach(t),Seo=i(m),$r=n(m,"DIV",{class:!0});var Hi=s($r);T(QR.$$.fragment,Hi),ibt=i(Hi),df=n(Hi,"P",{});var fde=s(df);dbt=r(fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Wse=n(fde,"A",{href:!0});var jga=s(Wse);cbt=r(jga,"from_pretrained()"),jga.forEach(t),mbt=r(fde," class method or the "),Use=n(fde,"A",{href:!0});var Dga=s(Use);fbt=r(Dga,"from_config()"),Dga.forEach(t),gbt=r(fde,` class
method.`),fde.forEach(t),hbt=i(Hi),WR=n(Hi,"P",{});var Uro=s(WR);ubt=r(Uro,"This class cannot be instantiated directly using "),E$e=n(Uro,"CODE",{});var Gga=s(E$e);pbt=r(Gga,"__init__()"),Gga.forEach(t),_bt=r(Uro," (throws an error)."),Uro.forEach(t),bbt=i(Hi),ha=n(Hi,"DIV",{class:!0});var w9=s(ha);T(UR.$$.fragment,w9),vbt=i(w9),C$e=n(w9,"P",{});var Oga=s(C$e);Fbt=r(Oga,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Oga.forEach(t),Tbt=i(w9),cf=n(w9,"P",{});var gde=s(cf);Mbt=r(gde,`Note:
Loading a model from its configuration file does `),w$e=n(gde,"STRONG",{});var Vga=s(w$e);Ebt=r(Vga,"not"),Vga.forEach(t),Cbt=r(gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hse=n(gde,"A",{href:!0});var Xga=s(Hse);wbt=r(Xga,"from_pretrained()"),Xga.forEach(t),Abt=r(gde," to load the model weights."),gde.forEach(t),Lbt=i(w9),T(PL.$$.fragment,w9),w9.forEach(t),ybt=i(Hi),st=n(Hi,"DIV",{class:!0});var Ji=s(st);T(HR.$$.fragment,Ji),xbt=i(Ji),A$e=n(Ji,"P",{});var zga=s(A$e);$bt=r(zga,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zga.forEach(t),kbt=i(Ji),Hn=n(Ji,"P",{});var A9=s(Hn);Sbt=r(A9,"The model class to instantiate is selected based on the "),L$e=n(A9,"CODE",{});var Qga=s(L$e);Rbt=r(Qga,"model_type"),Qga.forEach(t),Pbt=r(A9,` property of the config object (either
passed as an argument or loaded from `),y$e=n(A9,"CODE",{});var Wga=s(y$e);Bbt=r(Wga,"pretrained_model_name_or_path"),Wga.forEach(t),Ibt=r(A9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x$e=n(A9,"CODE",{});var Uga=s(x$e);Nbt=r(Uga,"pretrained_model_name_or_path"),Uga.forEach(t),qbt=r(A9,":"),A9.forEach(t),jbt=i(Ji),ze=n(Ji,"UL",{});var Lo=s(ze);BL=n(Lo,"LI",{});var hKe=s(BL);$$e=n(hKe,"STRONG",{});var Hga=s($$e);Dbt=r(Hga,"albert"),Hga.forEach(t),Gbt=r(hKe," \u2014 "),Jse=n(hKe,"A",{href:!0});var Jga=s(Jse);Obt=r(Jga,"FlaxAlbertForMultipleChoice"),Jga.forEach(t),Vbt=r(hKe," (ALBERT model)"),hKe.forEach(t),Xbt=i(Lo),IL=n(Lo,"LI",{});var uKe=s(IL);k$e=n(uKe,"STRONG",{});var Yga=s(k$e);zbt=r(Yga,"bert"),Yga.forEach(t),Qbt=r(uKe," \u2014 "),Yse=n(uKe,"A",{href:!0});var Kga=s(Yse);Wbt=r(Kga,"FlaxBertForMultipleChoice"),Kga.forEach(t),Ubt=r(uKe," (BERT model)"),uKe.forEach(t),Hbt=i(Lo),NL=n(Lo,"LI",{});var pKe=s(NL);S$e=n(pKe,"STRONG",{});var Zga=s(S$e);Jbt=r(Zga,"big_bird"),Zga.forEach(t),Ybt=r(pKe," \u2014 "),Kse=n(pKe,"A",{href:!0});var eha=s(Kse);Kbt=r(eha,"FlaxBigBirdForMultipleChoice"),eha.forEach(t),Zbt=r(pKe," (BigBird model)"),pKe.forEach(t),e2t=i(Lo),qL=n(Lo,"LI",{});var _Ke=s(qL);R$e=n(_Ke,"STRONG",{});var oha=s(R$e);o2t=r(oha,"distilbert"),oha.forEach(t),r2t=r(_Ke," \u2014 "),Zse=n(_Ke,"A",{href:!0});var rha=s(Zse);t2t=r(rha,"FlaxDistilBertForMultipleChoice"),rha.forEach(t),a2t=r(_Ke," (DistilBERT model)"),_Ke.forEach(t),n2t=i(Lo),jL=n(Lo,"LI",{});var bKe=s(jL);P$e=n(bKe,"STRONG",{});var tha=s(P$e);s2t=r(tha,"electra"),tha.forEach(t),l2t=r(bKe," \u2014 "),ele=n(bKe,"A",{href:!0});var aha=s(ele);i2t=r(aha,"FlaxElectraForMultipleChoice"),aha.forEach(t),d2t=r(bKe," (ELECTRA model)"),bKe.forEach(t),c2t=i(Lo),DL=n(Lo,"LI",{});var vKe=s(DL);B$e=n(vKe,"STRONG",{});var nha=s(B$e);m2t=r(nha,"roberta"),nha.forEach(t),f2t=r(vKe," \u2014 "),ole=n(vKe,"A",{href:!0});var sha=s(ole);g2t=r(sha,"FlaxRobertaForMultipleChoice"),sha.forEach(t),h2t=r(vKe," (RoBERTa model)"),vKe.forEach(t),u2t=i(Lo),GL=n(Lo,"LI",{});var FKe=s(GL);I$e=n(FKe,"STRONG",{});var lha=s(I$e);p2t=r(lha,"roformer"),lha.forEach(t),_2t=r(FKe," \u2014 "),rle=n(FKe,"A",{href:!0});var iha=s(rle);b2t=r(iha,"FlaxRoFormerForMultipleChoice"),iha.forEach(t),v2t=r(FKe," (RoFormer model)"),FKe.forEach(t),F2t=i(Lo),OL=n(Lo,"LI",{});var TKe=s(OL);N$e=n(TKe,"STRONG",{});var dha=s(N$e);T2t=r(dha,"xlm-roberta"),dha.forEach(t),M2t=r(TKe," \u2014 "),tle=n(TKe,"A",{href:!0});var cha=s(tle);E2t=r(cha,"FlaxXLMRobertaForMultipleChoice"),cha.forEach(t),C2t=r(TKe," (XLM-RoBERTa model)"),TKe.forEach(t),Lo.forEach(t),w2t=i(Ji),T(VL.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),Reo=i(m),mf=n(m,"H2",{class:!0});var Hro=s(mf);XL=n(Hro,"A",{id:!0,class:!0,href:!0});var mha=s(XL);q$e=n(mha,"SPAN",{});var fha=s(q$e);T(JR.$$.fragment,fha),fha.forEach(t),mha.forEach(t),A2t=i(Hro),j$e=n(Hro,"SPAN",{});var gha=s(j$e);L2t=r(gha,"FlaxAutoModelForNextSentencePrediction"),gha.forEach(t),Hro.forEach(t),Peo=i(m),kr=n(m,"DIV",{class:!0});var Yi=s(kr);T(YR.$$.fragment,Yi),y2t=i(Yi),ff=n(Yi,"P",{});var hde=s(ff);x2t=r(hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ale=n(hde,"A",{href:!0});var hha=s(ale);$2t=r(hha,"from_pretrained()"),hha.forEach(t),k2t=r(hde," class method or the "),nle=n(hde,"A",{href:!0});var uha=s(nle);S2t=r(uha,"from_config()"),uha.forEach(t),R2t=r(hde,` class
method.`),hde.forEach(t),P2t=i(Yi),KR=n(Yi,"P",{});var Jro=s(KR);B2t=r(Jro,"This class cannot be instantiated directly using "),D$e=n(Jro,"CODE",{});var pha=s(D$e);I2t=r(pha,"__init__()"),pha.forEach(t),N2t=r(Jro," (throws an error)."),Jro.forEach(t),q2t=i(Yi),ua=n(Yi,"DIV",{class:!0});var L9=s(ua);T(ZR.$$.fragment,L9),j2t=i(L9),G$e=n(L9,"P",{});var _ha=s(G$e);D2t=r(_ha,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_ha.forEach(t),G2t=i(L9),gf=n(L9,"P",{});var ude=s(gf);O2t=r(ude,`Note:
Loading a model from its configuration file does `),O$e=n(ude,"STRONG",{});var bha=s(O$e);V2t=r(bha,"not"),bha.forEach(t),X2t=r(ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),sle=n(ude,"A",{href:!0});var vha=s(sle);z2t=r(vha,"from_pretrained()"),vha.forEach(t),Q2t=r(ude," to load the model weights."),ude.forEach(t),W2t=i(L9),T(zL.$$.fragment,L9),L9.forEach(t),U2t=i(Yi),lt=n(Yi,"DIV",{class:!0});var Ki=s(lt);T(eP.$$.fragment,Ki),H2t=i(Ki),V$e=n(Ki,"P",{});var Fha=s(V$e);J2t=r(Fha,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fha.forEach(t),Y2t=i(Ki),Jn=n(Ki,"P",{});var y9=s(Jn);K2t=r(y9,"The model class to instantiate is selected based on the "),X$e=n(y9,"CODE",{});var Tha=s(X$e);Z2t=r(Tha,"model_type"),Tha.forEach(t),e1t=r(y9,` property of the config object (either
passed as an argument or loaded from `),z$e=n(y9,"CODE",{});var Mha=s(z$e);o1t=r(Mha,"pretrained_model_name_or_path"),Mha.forEach(t),r1t=r(y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q$e=n(y9,"CODE",{});var Eha=s(Q$e);t1t=r(Eha,"pretrained_model_name_or_path"),Eha.forEach(t),a1t=r(y9,":"),y9.forEach(t),n1t=i(Ki),W$e=n(Ki,"UL",{});var Cha=s(W$e);QL=n(Cha,"LI",{});var MKe=s(QL);U$e=n(MKe,"STRONG",{});var wha=s(U$e);s1t=r(wha,"bert"),wha.forEach(t),l1t=r(MKe," \u2014 "),lle=n(MKe,"A",{href:!0});var Aha=s(lle);i1t=r(Aha,"FlaxBertForNextSentencePrediction"),Aha.forEach(t),d1t=r(MKe," (BERT model)"),MKe.forEach(t),Cha.forEach(t),c1t=i(Ki),T(WL.$$.fragment,Ki),Ki.forEach(t),Yi.forEach(t),Beo=i(m),hf=n(m,"H2",{class:!0});var Yro=s(hf);UL=n(Yro,"A",{id:!0,class:!0,href:!0});var Lha=s(UL);H$e=n(Lha,"SPAN",{});var yha=s(H$e);T(oP.$$.fragment,yha),yha.forEach(t),Lha.forEach(t),m1t=i(Yro),J$e=n(Yro,"SPAN",{});var xha=s(J$e);f1t=r(xha,"FlaxAutoModelForImageClassification"),xha.forEach(t),Yro.forEach(t),Ieo=i(m),Sr=n(m,"DIV",{class:!0});var Zi=s(Sr);T(rP.$$.fragment,Zi),g1t=i(Zi),uf=n(Zi,"P",{});var pde=s(uf);h1t=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ile=n(pde,"A",{href:!0});var $ha=s(ile);u1t=r($ha,"from_pretrained()"),$ha.forEach(t),p1t=r(pde," class method or the "),dle=n(pde,"A",{href:!0});var kha=s(dle);_1t=r(kha,"from_config()"),kha.forEach(t),b1t=r(pde,` class
method.`),pde.forEach(t),v1t=i(Zi),tP=n(Zi,"P",{});var Kro=s(tP);F1t=r(Kro,"This class cannot be instantiated directly using "),Y$e=n(Kro,"CODE",{});var Sha=s(Y$e);T1t=r(Sha,"__init__()"),Sha.forEach(t),M1t=r(Kro," (throws an error)."),Kro.forEach(t),E1t=i(Zi),pa=n(Zi,"DIV",{class:!0});var x9=s(pa);T(aP.$$.fragment,x9),C1t=i(x9),K$e=n(x9,"P",{});var Rha=s(K$e);w1t=r(Rha,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rha.forEach(t),A1t=i(x9),pf=n(x9,"P",{});var _de=s(pf);L1t=r(_de,`Note:
Loading a model from its configuration file does `),Z$e=n(_de,"STRONG",{});var Pha=s(Z$e);y1t=r(Pha,"not"),Pha.forEach(t),x1t=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),cle=n(_de,"A",{href:!0});var Bha=s(cle);$1t=r(Bha,"from_pretrained()"),Bha.forEach(t),k1t=r(_de," to load the model weights."),_de.forEach(t),S1t=i(x9),T(HL.$$.fragment,x9),x9.forEach(t),R1t=i(Zi),it=n(Zi,"DIV",{class:!0});var ed=s(it);T(nP.$$.fragment,ed),P1t=i(ed),eke=n(ed,"P",{});var Iha=s(eke);B1t=r(Iha,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Iha.forEach(t),I1t=i(ed),Yn=n(ed,"P",{});var $9=s(Yn);N1t=r($9,"The model class to instantiate is selected based on the "),oke=n($9,"CODE",{});var Nha=s(oke);q1t=r(Nha,"model_type"),Nha.forEach(t),j1t=r($9,` property of the config object (either
passed as an argument or loaded from `),rke=n($9,"CODE",{});var qha=s(rke);D1t=r(qha,"pretrained_model_name_or_path"),qha.forEach(t),G1t=r($9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tke=n($9,"CODE",{});var jha=s(tke);O1t=r(jha,"pretrained_model_name_or_path"),jha.forEach(t),V1t=r($9,":"),$9.forEach(t),X1t=i(ed),sP=n(ed,"UL",{});var Zro=s(sP);JL=n(Zro,"LI",{});var EKe=s(JL);ake=n(EKe,"STRONG",{});var Dha=s(ake);z1t=r(Dha,"beit"),Dha.forEach(t),Q1t=r(EKe," \u2014 "),mle=n(EKe,"A",{href:!0});var Gha=s(mle);W1t=r(Gha,"FlaxBeitForImageClassification"),Gha.forEach(t),U1t=r(EKe," (BEiT model)"),EKe.forEach(t),H1t=i(Zro),YL=n(Zro,"LI",{});var CKe=s(YL);nke=n(CKe,"STRONG",{});var Oha=s(nke);J1t=r(Oha,"vit"),Oha.forEach(t),Y1t=r(CKe," \u2014 "),fle=n(CKe,"A",{href:!0});var Vha=s(fle);K1t=r(Vha,"FlaxViTForImageClassification"),Vha.forEach(t),Z1t=r(CKe," (ViT model)"),CKe.forEach(t),Zro.forEach(t),evt=i(ed),T(KL.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),Neo=i(m),_f=n(m,"H2",{class:!0});var eto=s(_f);ZL=n(eto,"A",{id:!0,class:!0,href:!0});var Xha=s(ZL);ske=n(Xha,"SPAN",{});var zha=s(ske);T(lP.$$.fragment,zha),zha.forEach(t),Xha.forEach(t),ovt=i(eto),lke=n(eto,"SPAN",{});var Qha=s(lke);rvt=r(Qha,"FlaxAutoModelForVision2Seq"),Qha.forEach(t),eto.forEach(t),qeo=i(m),Rr=n(m,"DIV",{class:!0});var od=s(Rr);T(iP.$$.fragment,od),tvt=i(od),bf=n(od,"P",{});var bde=s(bf);avt=r(bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gle=n(bde,"A",{href:!0});var Wha=s(gle);nvt=r(Wha,"from_pretrained()"),Wha.forEach(t),svt=r(bde," class method or the "),hle=n(bde,"A",{href:!0});var Uha=s(hle);lvt=r(Uha,"from_config()"),Uha.forEach(t),ivt=r(bde,` class
method.`),bde.forEach(t),dvt=i(od),dP=n(od,"P",{});var oto=s(dP);cvt=r(oto,"This class cannot be instantiated directly using "),ike=n(oto,"CODE",{});var Hha=s(ike);mvt=r(Hha,"__init__()"),Hha.forEach(t),fvt=r(oto," (throws an error)."),oto.forEach(t),gvt=i(od),_a=n(od,"DIV",{class:!0});var k9=s(_a);T(cP.$$.fragment,k9),hvt=i(k9),dke=n(k9,"P",{});var Jha=s(dke);uvt=r(Jha,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jha.forEach(t),pvt=i(k9),vf=n(k9,"P",{});var vde=s(vf);_vt=r(vde,`Note:
Loading a model from its configuration file does `),cke=n(vde,"STRONG",{});var Yha=s(cke);bvt=r(Yha,"not"),Yha.forEach(t),vvt=r(vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ule=n(vde,"A",{href:!0});var Kha=s(ule);Fvt=r(Kha,"from_pretrained()"),Kha.forEach(t),Tvt=r(vde," to load the model weights."),vde.forEach(t),Mvt=i(k9),T(ey.$$.fragment,k9),k9.forEach(t),Evt=i(od),dt=n(od,"DIV",{class:!0});var rd=s(dt);T(mP.$$.fragment,rd),Cvt=i(rd),mke=n(rd,"P",{});var Zha=s(mke);wvt=r(Zha,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zha.forEach(t),Avt=i(rd),Kn=n(rd,"P",{});var S9=s(Kn);Lvt=r(S9,"The model class to instantiate is selected based on the "),fke=n(S9,"CODE",{});var eua=s(fke);yvt=r(eua,"model_type"),eua.forEach(t),xvt=r(S9,` property of the config object (either
passed as an argument or loaded from `),gke=n(S9,"CODE",{});var oua=s(gke);$vt=r(oua,"pretrained_model_name_or_path"),oua.forEach(t),kvt=r(S9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hke=n(S9,"CODE",{});var rua=s(hke);Svt=r(rua,"pretrained_model_name_or_path"),rua.forEach(t),Rvt=r(S9,":"),S9.forEach(t),Pvt=i(rd),uke=n(rd,"UL",{});var tua=s(uke);oy=n(tua,"LI",{});var wKe=s(oy);pke=n(wKe,"STRONG",{});var aua=s(pke);Bvt=r(aua,"vision-encoder-decoder"),aua.forEach(t),Ivt=r(wKe," \u2014 "),ple=n(wKe,"A",{href:!0});var nua=s(ple);Nvt=r(nua,"FlaxVisionEncoderDecoderModel"),nua.forEach(t),qvt=r(wKe," (Vision Encoder decoder model)"),wKe.forEach(t),tua.forEach(t),jvt=i(rd),T(ry.$$.fragment,rd),rd.forEach(t),od.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(v_a)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(es,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(ts,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(dd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(cd,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(md,"class","relative group"),c(VB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(XB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(hI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c($I,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(SI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(II,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(NI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(OI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(VI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(WI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(JI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(nN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c($N,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(RN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(NN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(qN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(DN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(ON,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(VN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(WN,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(JN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(ZN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(eq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(oq,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(tq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(aq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(nq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"id","transformers.AutoTokenizer"),c(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kh,"href","#transformers.AutoTokenizer"),c(gd,"class","relative group"),c(cq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(mq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(fq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(hq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(uq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(_q,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(bq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(vq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Fq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Eq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(wq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Aq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Lq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(xq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Rq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Pq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Bq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(jq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Dq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Gq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(Vq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(Xq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Qq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(Uq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(Hq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(Jq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(Yq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(Kq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ej,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(oj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(rj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(tj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(aj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(cj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(uj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(pj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Mj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(xj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(Bj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Ij,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Nj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(qj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(jj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(Dj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Oj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(Xj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(zj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Qj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Wj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Uj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Hj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Jj,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Yj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Kj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Zj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(tD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(nD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(sD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(lD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(dD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(fD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(gD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(uD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(pD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(vD,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(TD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(ED,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(CD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(wD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(AD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(LD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(xD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c($D,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(kD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(SD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(RD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(ID,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(ND,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(jD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(DD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(GD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(OD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(VD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(XD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(zD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(QD,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(WD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(UD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(HD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(JD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(YD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(KD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eG,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(rG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(aG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(nG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(sG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(lG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(iG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(dG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(mG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(fG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(gG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(hG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"id","transformers.AutoFeatureExtractor"),c(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bu,"href","#transformers.AutoFeatureExtractor"),c(hd,"class","relative group"),c(uG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(pG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(_G,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bG,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(vG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(FG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(EG,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(CG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(wG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(AG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(LG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(yG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(xG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c($G,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(kG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(RG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(PG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(BG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(IG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(NG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(qG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(jG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(DG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(GG,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(OG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(zG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(QG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(JG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(YG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(rO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"id","transformers.AutoProcessor"),c(Ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ap,"href","#transformers.AutoProcessor"),c(ud,"class","relative group"),c(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(aO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(nO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(sO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(lO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(iO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(dO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(cO,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(mO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(fO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(uO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_O,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(FO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(TO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yp,"id","transformers.AutoModel"),c(Yp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yp,"href","#transformers.AutoModel"),c(_d,"class","relative group"),c(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(xO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c($O,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(kO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(SO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(RO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(PO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(BO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(IO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(NO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(qO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(jO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(DO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(GO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(OO,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(VO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(XO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(zO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(QO,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(WO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(HO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(JO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(YO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(KO,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(eV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(oV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(rV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(tV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(aV,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(nV,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(sV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(lV,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(iV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(dV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(cV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(mV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(fV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(gV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hV,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(uV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(pV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(_V,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(bV,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(vV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(FV,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(TV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(MV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(EV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(CV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(wV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(AV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(LV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(yV,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(xV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c($V,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(kV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(SV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(RV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(PV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(BV,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(IV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(NV,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(qV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(jV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(DV,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(GV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(OV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(VV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(XV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(zV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(QV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(WV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(UV,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(HV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(JV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(YV,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(KV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(eX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(oX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(rX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(tX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(aX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(nX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(sX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(lX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(iX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(dX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(cX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(mX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(fX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(gX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(hX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(uX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(pX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(_X,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(bX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(vX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(FX,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(TX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(EX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(wX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(AX,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(LX,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(yX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(xX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c($X,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(kX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(SX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(RX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(PX,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(BX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(IX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(NX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(DX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(GX,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(OX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h2,"id","transformers.AutoModelForPreTraining"),c(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h2,"href","#transformers.AutoModelForPreTraining"),c(Fd,"class","relative group"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(WX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(HX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(JX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(YX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ez,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(az,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(nz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(sz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(lz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(iz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(dz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(cz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(mz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(uz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(_z,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Fz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(Tz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Cz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(wz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Az,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Lz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c($z,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(kz,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(Sz,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Rz,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Pz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Bz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Iz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(qz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForCausalLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForCausalLM"),c(Ed,"class","relative group"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Xz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(zz,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Qz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Wz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Uz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Hz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Jz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(Zz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(bQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(vQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c($Q,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(av,"id","transformers.AutoModelForMaskedLM"),c(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(av,"href","#transformers.AutoModelForMaskedLM"),c(Ad,"class","relative group"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(IQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(GQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(aW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(nW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(fW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_W,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForSeq2SeqLM"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForSeq2SeqLM"),c(xd,"class","relative group"),c(bW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(EW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(yW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(xW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c($W,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(kW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(RW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(PW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(IW,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(NW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qW,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jW,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DW,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForSequenceClassification"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForSequenceClassification"),c(Sd,"class","relative group"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(QW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(WW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(UW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(HW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(JW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(YW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(KW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ZW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c($U,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForMultipleChoice"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForMultipleChoice"),c(Bd,"class","relative group"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(UU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(JU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(YU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(KU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(ZU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(eH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(oH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(rH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(tH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(aH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(nH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(sH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(lH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(iH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(dH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(cH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(mH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(fH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(gH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(uH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_H,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(FH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(TH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(MH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(EH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForNextSentencePrediction"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForNextSentencePrediction"),c(qd,"class","relative group"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(yH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(xH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c($H,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(kH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(SH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(RH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.AutoModelForTokenClassification"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.AutoModelForTokenClassification"),c(Gd,"class","relative group"),c(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(FJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.AutoModelForQuestionAnswering"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.AutoModelForQuestionAnswering"),c(Xd,"class","relative group"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(wJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(AJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(LJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(yJ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(xJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c($J,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(kJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(RJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(PJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(BJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(NJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(qJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(jJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(DJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(GJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(OJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(VJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(XJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(zJ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(QJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(WJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(UJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(HJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(JJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(YJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(KJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lY,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(mY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(fY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HE,"id","transformers.AutoModelForTableQuestionAnswering"),c(HE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HE,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Wd,"class","relative group"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Jd,"class","relative group"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(MY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(EY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.AutoModelForImageClassification"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.AutoModelForImageClassification"),c(ec,"class","relative group"),c(CY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(RY,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(PY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(BY,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(IY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(NY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(qY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jY,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DY,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XY,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(zY,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(QY,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(WY,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.AutoModelForVideoClassification"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.AutoModelForVideoClassification"),c(tc,"class","relative group"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YY,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.AutoModelForVision2Seq"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.AutoModelForVision2Seq"),c(sc,"class","relative group"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(dc,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.AutoModelForAudioClassification"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.AutoModelForAudioClassification"),c(fc,"class","relative group"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.AutoModelForAudioFrameClassification"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.AutoModelForAudioFrameClassification"),c(uc,"class","relative group"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.AutoModelForCTC"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.AutoModelForCTC"),c(bc,"class","relative group"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c($K,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(kK,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(SK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(RK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(PK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(BK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(IK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(NK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(qK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.AutoModelForSpeechSeq2Seq"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Tc,"class","relative group"),c(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OK,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(VK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.AutoModelForAudioXVector"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.AutoModelForAudioXVector"),c(Cc,"class","relative group"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(UK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(HK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(JK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(YK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.AutoModelForMaskedImageModeling"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.AutoModelForMaskedImageModeling"),c(Lc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(rZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(tZ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(aZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.AutoModelForObjectDetection"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.AutoModelForObjectDetection"),c($c,"class","relative group"),c(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(dZ,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(cZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mZ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.AutoModelForImageSegmentation"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.AutoModelForImageSegmentation"),c(Rc,"class","relative group"),c(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.AutoModelForSemanticSegmentation"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ic,"class","relative group"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(FZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(TZ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(MZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(EZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.AutoModelForInstanceSegmentation"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.AutoModelForInstanceSegmentation"),c(jc,"class","relative group"),c(CZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.TFAutoModel"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.TFAutoModel"),c(Oc,"class","relative group"),c(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(SZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(RZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(PZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(BZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(IZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(NZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(qZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(jZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(DZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(GZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(OZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(VZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(XZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(zZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(QZ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(WZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(UZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(HZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(JZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(YZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(KZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(ZZ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(eee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(oee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(ree,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(tee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(aee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(see,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(lee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(dee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(mee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(fee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(gee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(hee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(uee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(pee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(bee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(vee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(Mee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Eee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(wee,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Lee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(xee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c($ee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.TFAutoModelForPreTraining"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.TFAutoModelForPreTraining"),c(zc,"class","relative group"),c(See,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Iee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Nee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(qee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Dee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Gee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Oee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Vee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Xee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Qee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Wee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Uee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Yee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Kee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Zee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eoe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(ooe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(roe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(toe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.TFAutoModelForCausalLM"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.TFAutoModelForCausalLM"),c(Uc,"class","relative group"),c(aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(ioe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(doe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(coe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(moe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(foe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(goe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(hoe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(uoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(poe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(_oe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(boe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(voe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Foe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.TFAutoModelForImageClassification"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.TFAutoModelForImageClassification"),c(Yc,"class","relative group"),c(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Coe,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(woe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(Aoe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(yoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c($oe,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.TFAutoModelForSemanticSegmentation"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(em,"class","relative group"),c(Poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Noe,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(qoe,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(joe,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.TFAutoModelForMaskedLM"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.TFAutoModelForMaskedLM"),c(am,"class","relative group"),c(Doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Xoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(zoe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Qoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Woe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Uoe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Hoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Joe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Yoe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Koe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Zoe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ere,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(ore,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(rre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(tre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(are,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(nre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(sre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(lre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ire,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.TFAutoModelForSeq2SeqLM"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(dre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fre,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(gre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(hre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(ure,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(pre,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(_re,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(bre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(vre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Fre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Tre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.TFAutoModelForSequenceClassification"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.TFAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(Are,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Lre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(xre,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c($re,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(kre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(Sre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Rre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(Pre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Bre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Ire,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Nre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(jre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Gre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Ore,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Vre,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Xre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Qre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Wre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Ure,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Hre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Jre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Yre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qw,"id","transformers.TFAutoModelForMultipleChoice"),c(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qw,"href","#transformers.TFAutoModelForMultipleChoice"),c(gm,"class","relative group"),c(Kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ote,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ate,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(ste,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(ite,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(mte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(fte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ute,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(pte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_te,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(aA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(pm,"class","relative group"),c(bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Mte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(dA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(vm,"class","relative group"),c(Ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ate,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gA,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(gA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gA,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Mm,"class","relative group"),c(Lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($te,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.TFAutoModelForTokenClassification"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.TFAutoModelForTokenClassification"),c(wm,"class","relative group"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Bte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(Ite,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(Nte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(qte,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(jte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Dte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Gte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Ote,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Vte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Xte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(zte,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Qte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Wte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Ute,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Hte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Jte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Yte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Zte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GA,"id","transformers.TFAutoModelForQuestionAnswering"),c(GA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GA,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ym,"class","relative group"),c(oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(nae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(sae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(lae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(iae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(dae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(cae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(mae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(fae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(gae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(hae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(uae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(pae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(_ae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(bae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(vae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Fae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Tae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Mae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Eae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Cae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m6,"id","transformers.TFAutoModelForVision2Seq"),c(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m6,"href","#transformers.TFAutoModelForVision2Seq"),c(km,"class","relative group"),c(wae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(u6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Pm,"class","relative group"),c(xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sae,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.FlaxAutoModel"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.FlaxAutoModel"),c(Nm,"class","relative group"),c(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Nae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(qae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(jae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Dae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Gae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Oae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Vae,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Xae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(zae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Qae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Wae,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Uae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Hae,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Jae,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Yae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Kae,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Zae,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(ene,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(one,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(rne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(tne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(ane,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(nne,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(sne,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(lne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(ine,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.FlaxAutoModelForCausalLM"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.FlaxAutoModelForCausalLM"),c(Dm,"class","relative group"),c(dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(gne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(hne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(une,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(pne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_ne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Fne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Tne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.FlaxAutoModelForPreTraining"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Vm,"class","relative group"),c(Mne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ene,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ane,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Lne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(xne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c($ne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(kne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Sne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Rne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Pne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Bne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Ine,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Nne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.FlaxAutoModelForMaskedLM"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qm,"class","relative group"),c(qne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(One,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Vne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Xne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(zne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Qne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Wne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Une,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Hne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Jne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Hm,"class","relative group"),c(Yne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ese,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ose,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(rse,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(tse,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(ase,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(nse,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(sse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ise,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(dse,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.FlaxAutoModelForSequenceClassification"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Km,"class","relative group"),c(cse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(hse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(use,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(pse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_se,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(bse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(vse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Fse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Tse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Mse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(dL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(of,"class","relative group"),c(Ese,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ase,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Lse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(yse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(xse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c($se,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(kse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Sse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Rse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Pse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Bse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ML,"id","transformers.FlaxAutoModelForTokenClassification"),c(ML,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ML,"href","#transformers.FlaxAutoModelForTokenClassification"),c(af,"class","relative group"),c(Ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Dse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Gse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Ose,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Vse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Xse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(zse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Qse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RL,"id","transformers.FlaxAutoModelForMultipleChoice"),c(RL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RL,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(lf,"class","relative group"),c(Wse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Yse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Kse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Zse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(ele,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ole,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(rle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(tle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XL,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(XL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XL,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(ale,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UL,"id","transformers.FlaxAutoModelForImageClassification"),c(UL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UL,"href","#transformers.FlaxAutoModelForImageClassification"),c(hf,"class","relative group"),c(ile,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mle,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(fle,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZL,"id","transformers.FlaxAutoModelForVision2Seq"),c(ZL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZL,"href","#transformers.FlaxAutoModelForVision2Seq"),c(_f,"class","relative group"),c(gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ule,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ple,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,td),b(m,Ef,_),b(m,pt,_),e(pt,ad),e(pt,nd),e(nd,R9),e(pt,Cf),b(m,Ve,_),b(m,He,_),e(He,sd),e(He,es),e(es,P9),e(He,os),e(He,rs),e(rs,B9),e(He,ld),e(He,ts),e(ts,I9),e(He,id),b(m,wf,_),M(Qa,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,NB),e(Ae,dd),e(dd,qB),e(Ae,jB),b(m,xo,_),b(m,Wa,_),e(Wa,DB),e(Wa,Af),e(Af,GB),e(Wa,rto),b(m,AKe,_),b(m,cd,_),e(cd,Lf),e(Lf,Fde),M(N9,Fde,null),e(cd,tto),e(cd,Tde),e(Tde,ato),b(m,LKe,_),b(m,as,_),e(as,nto),e(as,Mde),e(Mde,sto),e(as,lto),e(as,Ede),e(Ede,ito),e(as,dto),b(m,yKe,_),M(q9,m,_),b(m,xKe,_),b(m,OB,_),e(OB,cto),b(m,$Ke,_),M(yf,m,_),b(m,kKe,_),b(m,md,_),e(md,xf),e(xf,Cde),M(j9,Cde,null),e(md,mto),e(md,wde),e(wde,fto),b(m,SKe,_),b(m,$o,_),M(D9,$o,null),e($o,gto),e($o,G9),e(G9,hto),e(G9,VB),e(VB,uto),e(G9,pto),e($o,_to),e($o,O9),e(O9,bto),e(O9,Ade),e(Ade,vto),e(O9,Fto),e($o,Tto),e($o,Pr),M(V9,Pr,null),e(Pr,Mto),e(Pr,Lde),e(Lde,Eto),e(Pr,Cto),e(Pr,fd),e(fd,wto),e(fd,yde),e(yde,Ato),e(fd,Lto),e(fd,xde),e(xde,yto),e(fd,xto),e(Pr,$to),e(Pr,A),e(A,$f),e($f,$de),e($de,kto),e($f,Sto),e($f,XB),e(XB,Rto),e($f,Pto),e(A,Bto),e(A,kf),e(kf,kde),e(kde,Ito),e(kf,Nto),e(kf,zB),e(zB,qto),e(kf,jto),e(A,Dto),e(A,Sf),e(Sf,Sde),e(Sde,Gto),e(Sf,Oto),e(Sf,QB),e(QB,Vto),e(Sf,Xto),e(A,zto),e(A,Rf),e(Rf,Rde),e(Rde,Qto),e(Rf,Wto),e(Rf,WB),e(WB,Uto),e(Rf,Hto),e(A,Jto),e(A,Pf),e(Pf,Pde),e(Pde,Yto),e(Pf,Kto),e(Pf,UB),e(UB,Zto),e(Pf,eao),e(A,oao),e(A,Bf),e(Bf,Bde),e(Bde,rao),e(Bf,tao),e(Bf,HB),e(HB,aao),e(Bf,nao),e(A,sao),e(A,If),e(If,Ide),e(Ide,lao),e(If,iao),e(If,JB),e(JB,dao),e(If,cao),e(A,mao),e(A,Nf),e(Nf,Nde),e(Nde,fao),e(Nf,gao),e(Nf,YB),e(YB,hao),e(Nf,uao),e(A,pao),e(A,qf),e(qf,qde),e(qde,_ao),e(qf,bao),e(qf,KB),e(KB,vao),e(qf,Fao),e(A,Tao),e(A,jf),e(jf,jde),e(jde,Mao),e(jf,Eao),e(jf,ZB),e(ZB,Cao),e(jf,wao),e(A,Aao),e(A,Df),e(Df,Dde),e(Dde,Lao),e(Df,yao),e(Df,eI),e(eI,xao),e(Df,$ao),e(A,kao),e(A,Gf),e(Gf,Gde),e(Gde,Sao),e(Gf,Rao),e(Gf,oI),e(oI,Pao),e(Gf,Bao),e(A,Iao),e(A,Of),e(Of,Ode),e(Ode,Nao),e(Of,qao),e(Of,rI),e(rI,jao),e(Of,Dao),e(A,Gao),e(A,Vf),e(Vf,Vde),e(Vde,Oao),e(Vf,Vao),e(Vf,tI),e(tI,Xao),e(Vf,zao),e(A,Qao),e(A,Xf),e(Xf,Xde),e(Xde,Wao),e(Xf,Uao),e(Xf,aI),e(aI,Hao),e(Xf,Jao),e(A,Yao),e(A,zf),e(zf,zde),e(zde,Kao),e(zf,Zao),e(zf,nI),e(nI,eno),e(zf,ono),e(A,rno),e(A,Qf),e(Qf,Qde),e(Qde,tno),e(Qf,ano),e(Qf,sI),e(sI,nno),e(Qf,sno),e(A,lno),e(A,Wf),e(Wf,Wde),e(Wde,ino),e(Wf,dno),e(Wf,lI),e(lI,cno),e(Wf,mno),e(A,fno),e(A,Uf),e(Uf,Ude),e(Ude,gno),e(Uf,hno),e(Uf,iI),e(iI,uno),e(Uf,pno),e(A,_no),e(A,Hf),e(Hf,Hde),e(Hde,bno),e(Hf,vno),e(Hf,dI),e(dI,Fno),e(Hf,Tno),e(A,Mno),e(A,Jf),e(Jf,Jde),e(Jde,Eno),e(Jf,Cno),e(Jf,cI),e(cI,wno),e(Jf,Ano),e(A,Lno),e(A,Yf),e(Yf,Yde),e(Yde,yno),e(Yf,xno),e(Yf,mI),e(mI,$no),e(Yf,kno),e(A,Sno),e(A,Kf),e(Kf,Kde),e(Kde,Rno),e(Kf,Pno),e(Kf,fI),e(fI,Bno),e(Kf,Ino),e(A,Nno),e(A,Zf),e(Zf,Zde),e(Zde,qno),e(Zf,jno),e(Zf,gI),e(gI,Dno),e(Zf,Gno),e(A,Ono),e(A,eg),e(eg,ece),e(ece,Vno),e(eg,Xno),e(eg,hI),e(hI,zno),e(eg,Qno),e(A,Wno),e(A,og),e(og,oce),e(oce,Uno),e(og,Hno),e(og,uI),e(uI,Jno),e(og,Yno),e(A,Kno),e(A,rg),e(rg,rce),e(rce,Zno),e(rg,eso),e(rg,pI),e(pI,oso),e(rg,rso),e(A,tso),e(A,tg),e(tg,tce),e(tce,aso),e(tg,nso),e(tg,_I),e(_I,sso),e(tg,lso),e(A,iso),e(A,ag),e(ag,ace),e(ace,dso),e(ag,cso),e(ag,bI),e(bI,mso),e(ag,fso),e(A,gso),e(A,ng),e(ng,nce),e(nce,hso),e(ng,uso),e(ng,vI),e(vI,pso),e(ng,_so),e(A,bso),e(A,sg),e(sg,sce),e(sce,vso),e(sg,Fso),e(sg,FI),e(FI,Tso),e(sg,Mso),e(A,Eso),e(A,lg),e(lg,lce),e(lce,Cso),e(lg,wso),e(lg,TI),e(TI,Aso),e(lg,Lso),e(A,yso),e(A,ig),e(ig,ice),e(ice,xso),e(ig,$so),e(ig,MI),e(MI,kso),e(ig,Sso),e(A,Rso),e(A,dg),e(dg,dce),e(dce,Pso),e(dg,Bso),e(dg,EI),e(EI,Iso),e(dg,Nso),e(A,qso),e(A,cg),e(cg,cce),e(cce,jso),e(cg,Dso),e(cg,CI),e(CI,Gso),e(cg,Oso),e(A,Vso),e(A,mg),e(mg,mce),e(mce,Xso),e(mg,zso),e(mg,wI),e(wI,Qso),e(mg,Wso),e(A,Uso),e(A,fg),e(fg,fce),e(fce,Hso),e(fg,Jso),e(fg,AI),e(AI,Yso),e(fg,Kso),e(A,Zso),e(A,gg),e(gg,gce),e(gce,elo),e(gg,olo),e(gg,LI),e(LI,rlo),e(gg,tlo),e(A,alo),e(A,hg),e(hg,hce),e(hce,nlo),e(hg,slo),e(hg,yI),e(yI,llo),e(hg,ilo),e(A,dlo),e(A,ug),e(ug,uce),e(uce,clo),e(ug,mlo),e(ug,xI),e(xI,flo),e(ug,glo),e(A,hlo),e(A,pg),e(pg,pce),e(pce,ulo),e(pg,plo),e(pg,$I),e($I,_lo),e(pg,blo),e(A,vlo),e(A,_g),e(_g,_ce),e(_ce,Flo),e(_g,Tlo),e(_g,kI),e(kI,Mlo),e(_g,Elo),e(A,Clo),e(A,bg),e(bg,bce),e(bce,wlo),e(bg,Alo),e(bg,SI),e(SI,Llo),e(bg,ylo),e(A,xlo),e(A,vg),e(vg,vce),e(vce,$lo),e(vg,klo),e(vg,RI),e(RI,Slo),e(vg,Rlo),e(A,Plo),e(A,Fg),e(Fg,Fce),e(Fce,Blo),e(Fg,Ilo),e(Fg,PI),e(PI,Nlo),e(Fg,qlo),e(A,jlo),e(A,Tg),e(Tg,Tce),e(Tce,Dlo),e(Tg,Glo),e(Tg,BI),e(BI,Olo),e(Tg,Vlo),e(A,Xlo),e(A,Mg),e(Mg,Mce),e(Mce,zlo),e(Mg,Qlo),e(Mg,II),e(II,Wlo),e(Mg,Ulo),e(A,Hlo),e(A,Eg),e(Eg,Ece),e(Ece,Jlo),e(Eg,Ylo),e(Eg,NI),e(NI,Klo),e(Eg,Zlo),e(A,eio),e(A,Cg),e(Cg,Cce),e(Cce,oio),e(Cg,rio),e(Cg,qI),e(qI,tio),e(Cg,aio),e(A,nio),e(A,wg),e(wg,wce),e(wce,sio),e(wg,lio),e(wg,jI),e(jI,iio),e(wg,dio),e(A,cio),e(A,Ag),e(Ag,Ace),e(Ace,mio),e(Ag,fio),e(Ag,DI),e(DI,gio),e(Ag,hio),e(A,uio),e(A,Lg),e(Lg,Lce),e(Lce,pio),e(Lg,_io),e(Lg,GI),e(GI,bio),e(Lg,vio),e(A,Fio),e(A,yg),e(yg,yce),e(yce,Tio),e(yg,Mio),e(yg,OI),e(OI,Eio),e(yg,Cio),e(A,wio),e(A,xg),e(xg,xce),e(xce,Aio),e(xg,Lio),e(xg,VI),e(VI,yio),e(xg,xio),e(A,$io),e(A,$g),e($g,$ce),e($ce,kio),e($g,Sio),e($g,XI),e(XI,Rio),e($g,Pio),e(A,Bio),e(A,kg),e(kg,kce),e(kce,Iio),e(kg,Nio),e(kg,zI),e(zI,qio),e(kg,jio),e(A,Dio),e(A,Sg),e(Sg,Sce),e(Sce,Gio),e(Sg,Oio),e(Sg,QI),e(QI,Vio),e(Sg,Xio),e(A,zio),e(A,Rg),e(Rg,Rce),e(Rce,Qio),e(Rg,Wio),e(Rg,WI),e(WI,Uio),e(Rg,Hio),e(A,Jio),e(A,Pg),e(Pg,Pce),e(Pce,Yio),e(Pg,Kio),e(Pg,UI),e(UI,Zio),e(Pg,edo),e(A,odo),e(A,Bg),e(Bg,Bce),e(Bce,rdo),e(Bg,tdo),e(Bg,HI),e(HI,ado),e(Bg,ndo),e(A,sdo),e(A,Ig),e(Ig,Ice),e(Ice,ldo),e(Ig,ido),e(Ig,JI),e(JI,ddo),e(Ig,cdo),e(A,mdo),e(A,Ng),e(Ng,Nce),e(Nce,fdo),e(Ng,gdo),e(Ng,YI),e(YI,hdo),e(Ng,udo),e(A,pdo),e(A,qg),e(qg,qce),e(qce,_do),e(qg,bdo),e(qg,KI),e(KI,vdo),e(qg,Fdo),e(A,Tdo),e(A,jg),e(jg,jce),e(jce,Mdo),e(jg,Edo),e(jg,ZI),e(ZI,Cdo),e(jg,wdo),e(A,Ado),e(A,Dg),e(Dg,Dce),e(Dce,Ldo),e(Dg,ydo),e(Dg,eN),e(eN,xdo),e(Dg,$do),e(A,kdo),e(A,Gg),e(Gg,Gce),e(Gce,Sdo),e(Gg,Rdo),e(Gg,oN),e(oN,Pdo),e(Gg,Bdo),e(A,Ido),e(A,Og),e(Og,Oce),e(Oce,Ndo),e(Og,qdo),e(Og,rN),e(rN,jdo),e(Og,Ddo),e(A,Gdo),e(A,Vg),e(Vg,Vce),e(Vce,Odo),e(Vg,Vdo),e(Vg,tN),e(tN,Xdo),e(Vg,zdo),e(A,Qdo),e(A,Xg),e(Xg,Xce),e(Xce,Wdo),e(Xg,Udo),e(Xg,aN),e(aN,Hdo),e(Xg,Jdo),e(A,Ydo),e(A,zg),e(zg,zce),e(zce,Kdo),e(zg,Zdo),e(zg,nN),e(nN,eco),e(zg,oco),e(A,rco),e(A,Qg),e(Qg,Qce),e(Qce,tco),e(Qg,aco),e(Qg,sN),e(sN,nco),e(Qg,sco),e(A,lco),e(A,Wg),e(Wg,Wce),e(Wce,ico),e(Wg,dco),e(Wg,lN),e(lN,cco),e(Wg,mco),e(A,fco),e(A,Ug),e(Ug,Uce),e(Uce,gco),e(Ug,hco),e(Ug,iN),e(iN,uco),e(Ug,pco),e(A,_co),e(A,Hg),e(Hg,Hce),e(Hce,bco),e(Hg,vco),e(Hg,dN),e(dN,Fco),e(Hg,Tco),e(A,Mco),e(A,Jg),e(Jg,Jce),e(Jce,Eco),e(Jg,Cco),e(Jg,cN),e(cN,wco),e(Jg,Aco),e(A,Lco),e(A,Yg),e(Yg,Yce),e(Yce,yco),e(Yg,xco),e(Yg,mN),e(mN,$co),e(Yg,kco),e(A,Sco),e(A,Kg),e(Kg,Kce),e(Kce,Rco),e(Kg,Pco),e(Kg,fN),e(fN,Bco),e(Kg,Ico),e(A,Nco),e(A,Zg),e(Zg,Zce),e(Zce,qco),e(Zg,jco),e(Zg,gN),e(gN,Dco),e(Zg,Gco),e(A,Oco),e(A,eh),e(eh,eme),e(eme,Vco),e(eh,Xco),e(eh,hN),e(hN,zco),e(eh,Qco),e(A,Wco),e(A,oh),e(oh,ome),e(ome,Uco),e(oh,Hco),e(oh,uN),e(uN,Jco),e(oh,Yco),e(A,Kco),e(A,rh),e(rh,rme),e(rme,Zco),e(rh,emo),e(rh,pN),e(pN,omo),e(rh,rmo),e(A,tmo),e(A,th),e(th,tme),e(tme,amo),e(th,nmo),e(th,_N),e(_N,smo),e(th,lmo),e(A,imo),e(A,ah),e(ah,ame),e(ame,dmo),e(ah,cmo),e(ah,bN),e(bN,mmo),e(ah,fmo),e(A,gmo),e(A,nh),e(nh,nme),e(nme,hmo),e(nh,umo),e(nh,vN),e(vN,pmo),e(nh,_mo),e(A,bmo),e(A,sh),e(sh,sme),e(sme,vmo),e(sh,Fmo),e(sh,FN),e(FN,Tmo),e(sh,Mmo),e(A,Emo),e(A,lh),e(lh,lme),e(lme,Cmo),e(lh,wmo),e(lh,TN),e(TN,Amo),e(lh,Lmo),e(A,ymo),e(A,ih),e(ih,ime),e(ime,xmo),e(ih,$mo),e(ih,MN),e(MN,kmo),e(ih,Smo),e(A,Rmo),e(A,dh),e(dh,dme),e(dme,Pmo),e(dh,Bmo),e(dh,EN),e(EN,Imo),e(dh,Nmo),e(A,qmo),e(A,ch),e(ch,cme),e(cme,jmo),e(ch,Dmo),e(ch,CN),e(CN,Gmo),e(ch,Omo),e(A,Vmo),e(A,mh),e(mh,mme),e(mme,Xmo),e(mh,zmo),e(mh,wN),e(wN,Qmo),e(mh,Wmo),e(A,Umo),e(A,fh),e(fh,fme),e(fme,Hmo),e(fh,Jmo),e(fh,AN),e(AN,Ymo),e(fh,Kmo),e(A,Zmo),e(A,gh),e(gh,gme),e(gme,efo),e(gh,ofo),e(gh,LN),e(LN,rfo),e(gh,tfo),e(A,afo),e(A,hh),e(hh,hme),e(hme,nfo),e(hh,sfo),e(hh,yN),e(yN,lfo),e(hh,ifo),e(A,dfo),e(A,uh),e(uh,ume),e(ume,cfo),e(uh,mfo),e(uh,xN),e(xN,ffo),e(uh,gfo),e(A,hfo),e(A,ph),e(ph,pme),e(pme,ufo),e(ph,pfo),e(ph,$N),e($N,_fo),e(ph,bfo),e(A,vfo),e(A,_h),e(_h,_me),e(_me,Ffo),e(_h,Tfo),e(_h,kN),e(kN,Mfo),e(_h,Efo),e(A,Cfo),e(A,bh),e(bh,bme),e(bme,wfo),e(bh,Afo),e(bh,SN),e(SN,Lfo),e(bh,yfo),e(A,xfo),e(A,vh),e(vh,vme),e(vme,$fo),e(vh,kfo),e(vh,RN),e(RN,Sfo),e(vh,Rfo),e(A,Pfo),e(A,Fh),e(Fh,Fme),e(Fme,Bfo),e(Fh,Ifo),e(Fh,PN),e(PN,Nfo),e(Fh,qfo),e(A,jfo),e(A,Th),e(Th,Tme),e(Tme,Dfo),e(Th,Gfo),e(Th,BN),e(BN,Ofo),e(Th,Vfo),e(A,Xfo),e(A,Mh),e(Mh,Mme),e(Mme,zfo),e(Mh,Qfo),e(Mh,IN),e(IN,Wfo),e(Mh,Ufo),e(A,Hfo),e(A,Eh),e(Eh,Eme),e(Eme,Jfo),e(Eh,Yfo),e(Eh,NN),e(NN,Kfo),e(Eh,Zfo),e(A,ego),e(A,Ch),e(Ch,Cme),e(Cme,ogo),e(Ch,rgo),e(Ch,qN),e(qN,tgo),e(Ch,ago),e(A,ngo),e(A,wh),e(wh,wme),e(wme,sgo),e(wh,lgo),e(wh,jN),e(jN,igo),e(wh,dgo),e(A,cgo),e(A,Ah),e(Ah,Ame),e(Ame,mgo),e(Ah,fgo),e(Ah,DN),e(DN,ggo),e(Ah,hgo),e(A,ugo),e(A,Lh),e(Lh,Lme),e(Lme,pgo),e(Lh,_go),e(Lh,GN),e(GN,bgo),e(Lh,vgo),e(A,Fgo),e(A,yh),e(yh,yme),e(yme,Tgo),e(yh,Mgo),e(yh,ON),e(ON,Ego),e(yh,Cgo),e(A,wgo),e(A,xh),e(xh,xme),e(xme,Ago),e(xh,Lgo),e(xh,VN),e(VN,ygo),e(xh,xgo),e(A,$go),e(A,$h),e($h,$me),e($me,kgo),e($h,Sgo),e($h,XN),e(XN,Rgo),e($h,Pgo),e(A,Bgo),e(A,kh),e(kh,kme),e(kme,Igo),e(kh,Ngo),e(kh,zN),e(zN,qgo),e(kh,jgo),e(A,Dgo),e(A,Sh),e(Sh,Sme),e(Sme,Ggo),e(Sh,Ogo),e(Sh,QN),e(QN,Vgo),e(Sh,Xgo),e(A,zgo),e(A,Rh),e(Rh,Rme),e(Rme,Qgo),e(Rh,Wgo),e(Rh,WN),e(WN,Ugo),e(Rh,Hgo),e(A,Jgo),e(A,Ph),e(Ph,Pme),e(Pme,Ygo),e(Ph,Kgo),e(Ph,UN),e(UN,Zgo),e(Ph,eho),e(A,oho),e(A,Bh),e(Bh,Bme),e(Bme,rho),e(Bh,tho),e(Bh,HN),e(HN,aho),e(Bh,nho),e(A,sho),e(A,Ih),e(Ih,Ime),e(Ime,lho),e(Ih,iho),e(Ih,JN),e(JN,dho),e(Ih,cho),e(A,mho),e(A,Nh),e(Nh,Nme),e(Nme,fho),e(Nh,gho),e(Nh,YN),e(YN,hho),e(Nh,uho),e(A,pho),e(A,qh),e(qh,qme),e(qme,_ho),e(qh,bho),e(qh,KN),e(KN,vho),e(qh,Fho),e(A,Tho),e(A,jh),e(jh,jme),e(jme,Mho),e(jh,Eho),e(jh,ZN),e(ZN,Cho),e(jh,who),e(A,Aho),e(A,Dh),e(Dh,Dme),e(Dme,Lho),e(Dh,yho),e(Dh,eq),e(eq,xho),e(Dh,$ho),e(A,kho),e(A,Gh),e(Gh,Gme),e(Gme,Sho),e(Gh,Rho),e(Gh,oq),e(oq,Pho),e(Gh,Bho),e(A,Iho),e(A,Oh),e(Oh,Ome),e(Ome,Nho),e(Oh,qho),e(Oh,rq),e(rq,jho),e(Oh,Dho),e(A,Gho),e(A,Vh),e(Vh,Vme),e(Vme,Oho),e(Vh,Vho),e(Vh,tq),e(tq,Xho),e(Vh,zho),e(A,Qho),e(A,Xh),e(Xh,Xme),e(Xme,Who),e(Xh,Uho),e(Xh,aq),e(aq,Hho),e(Xh,Jho),e(A,Yho),e(A,zh),e(zh,zme),e(zme,Kho),e(zh,Zho),e(zh,nq),e(nq,euo),e(zh,ouo),e(A,ruo),e(A,Qh),e(Qh,Qme),e(Qme,tuo),e(Qh,auo),e(Qh,sq),e(sq,nuo),e(Qh,suo),e(A,luo),e(A,Wh),e(Wh,Wme),e(Wme,iuo),e(Wh,duo),e(Wh,lq),e(lq,cuo),e(Wh,muo),e(A,fuo),e(A,Uh),e(Uh,Ume),e(Ume,guo),e(Uh,huo),e(Uh,iq),e(iq,uuo),e(Uh,puo),e(A,_uo),e(A,Hh),e(Hh,Hme),e(Hme,buo),e(Hh,vuo),e(Hh,dq),e(dq,Fuo),e(Hh,Tuo),e(Pr,Muo),M(Jh,Pr,null),e($o,Euo),e($o,Yh),M(X9,Yh,null),e(Yh,Cuo),e(Yh,Jme),e(Jme,wuo),b(m,RKe,_),b(m,gd,_),e(gd,Kh),e(Kh,Yme),M(z9,Yme,null),e(gd,Auo),e(gd,Kme),e(Kme,Luo),b(m,PKe,_),b(m,ko,_),M(Q9,ko,null),e(ko,yuo),e(ko,W9),e(W9,xuo),e(W9,cq),e(cq,$uo),e(W9,kuo),e(ko,Suo),e(ko,U9),e(U9,Ruo),e(U9,Zme),e(Zme,Puo),e(U9,Buo),e(ko,Iuo),e(ko,Br),M(H9,Br,null),e(Br,Nuo),e(Br,efe),e(efe,quo),e(Br,juo),e(Br,Ua),e(Ua,Duo),e(Ua,ofe),e(ofe,Guo),e(Ua,Ouo),e(Ua,rfe),e(rfe,Vuo),e(Ua,Xuo),e(Ua,tfe),e(tfe,zuo),e(Ua,Quo),e(Br,Wuo),e(Br,k),e(k,ns),e(ns,afe),e(afe,Uuo),e(ns,Huo),e(ns,mq),e(mq,Juo),e(ns,Yuo),e(ns,fq),e(fq,Kuo),e(ns,Zuo),e(k,epo),e(k,ss),e(ss,nfe),e(nfe,opo),e(ss,rpo),e(ss,gq),e(gq,tpo),e(ss,apo),e(ss,hq),e(hq,npo),e(ss,spo),e(k,lpo),e(k,ls),e(ls,sfe),e(sfe,ipo),e(ls,dpo),e(ls,uq),e(uq,cpo),e(ls,mpo),e(ls,pq),e(pq,fpo),e(ls,gpo),e(k,hpo),e(k,Zh),e(Zh,lfe),e(lfe,upo),e(Zh,ppo),e(Zh,_q),e(_q,_po),e(Zh,bpo),e(k,vpo),e(k,is),e(is,ife),e(ife,Fpo),e(is,Tpo),e(is,bq),e(bq,Mpo),e(is,Epo),e(is,vq),e(vq,Cpo),e(is,wpo),e(k,Apo),e(k,eu),e(eu,dfe),e(dfe,Lpo),e(eu,ypo),e(eu,Fq),e(Fq,xpo),e(eu,$po),e(k,kpo),e(k,ou),e(ou,cfe),e(cfe,Spo),e(ou,Rpo),e(ou,Tq),e(Tq,Ppo),e(ou,Bpo),e(k,Ipo),e(k,ru),e(ru,mfe),e(mfe,Npo),e(ru,qpo),e(ru,Mq),e(Mq,jpo),e(ru,Dpo),e(k,Gpo),e(k,ds),e(ds,ffe),e(ffe,Opo),e(ds,Vpo),e(ds,Eq),e(Eq,Xpo),e(ds,zpo),e(ds,Cq),e(Cq,Qpo),e(ds,Wpo),e(k,Upo),e(k,cs),e(cs,gfe),e(gfe,Hpo),e(cs,Jpo),e(cs,wq),e(wq,Ypo),e(cs,Kpo),e(cs,Aq),e(Aq,Zpo),e(cs,e_o),e(k,o_o),e(k,ms),e(ms,hfe),e(hfe,r_o),e(ms,t_o),e(ms,Lq),e(Lq,a_o),e(ms,n_o),e(ms,yq),e(yq,s_o),e(ms,l_o),e(k,i_o),e(k,tu),e(tu,ufe),e(ufe,d_o),e(tu,c_o),e(tu,xq),e(xq,m_o),e(tu,f_o),e(k,g_o),e(k,au),e(au,pfe),e(pfe,h_o),e(au,u_o),e(au,$q),e($q,p_o),e(au,__o),e(k,b_o),e(k,nu),e(nu,_fe),e(_fe,v_o),e(nu,F_o),e(nu,kq),e(kq,T_o),e(nu,M_o),e(k,E_o),e(k,fs),e(fs,bfe),e(bfe,C_o),e(fs,w_o),e(fs,Sq),e(Sq,A_o),e(fs,L_o),e(fs,Rq),e(Rq,y_o),e(fs,x_o),e(k,$_o),e(k,su),e(su,vfe),e(vfe,k_o),e(su,S_o),e(su,Pq),e(Pq,R_o),e(su,P_o),e(k,B_o),e(k,gs),e(gs,Ffe),e(Ffe,I_o),e(gs,N_o),e(gs,Bq),e(Bq,q_o),e(gs,j_o),e(gs,Iq),e(Iq,D_o),e(gs,G_o),e(k,O_o),e(k,hs),e(hs,Tfe),e(Tfe,V_o),e(hs,X_o),e(hs,Nq),e(Nq,z_o),e(hs,Q_o),e(hs,qq),e(qq,W_o),e(hs,U_o),e(k,H_o),e(k,us),e(us,Mfe),e(Mfe,J_o),e(us,Y_o),e(us,jq),e(jq,K_o),e(us,Z_o),e(us,Dq),e(Dq,ebo),e(us,obo),e(k,rbo),e(k,ps),e(ps,Efe),e(Efe,tbo),e(ps,abo),e(ps,Gq),e(Gq,nbo),e(ps,sbo),e(ps,Oq),e(Oq,lbo),e(ps,ibo),e(k,dbo),e(k,lu),e(lu,Cfe),e(Cfe,cbo),e(lu,mbo),e(lu,Vq),e(Vq,fbo),e(lu,gbo),e(k,hbo),e(k,_s),e(_s,wfe),e(wfe,ubo),e(_s,pbo),e(_s,Xq),e(Xq,_bo),e(_s,bbo),e(_s,zq),e(zq,vbo),e(_s,Fbo),e(k,Tbo),e(k,bs),e(bs,Afe),e(Afe,Mbo),e(bs,Ebo),e(bs,Qq),e(Qq,Cbo),e(bs,wbo),e(bs,Wq),e(Wq,Abo),e(bs,Lbo),e(k,ybo),e(k,vs),e(vs,Lfe),e(Lfe,xbo),e(vs,$bo),e(vs,Uq),e(Uq,kbo),e(vs,Sbo),e(vs,Hq),e(Hq,Rbo),e(vs,Pbo),e(k,Bbo),e(k,Fs),e(Fs,yfe),e(yfe,Ibo),e(Fs,Nbo),e(Fs,Jq),e(Jq,qbo),e(Fs,jbo),e(Fs,Yq),e(Yq,Dbo),e(Fs,Gbo),e(k,Obo),e(k,Ts),e(Ts,xfe),e(xfe,Vbo),e(Ts,Xbo),e(Ts,Kq),e(Kq,zbo),e(Ts,Qbo),e(Ts,Zq),e(Zq,Wbo),e(Ts,Ubo),e(k,Hbo),e(k,Ms),e(Ms,$fe),e($fe,Jbo),e(Ms,Ybo),e(Ms,ej),e(ej,Kbo),e(Ms,Zbo),e(Ms,oj),e(oj,e2o),e(Ms,o2o),e(k,r2o),e(k,Es),e(Es,kfe),e(kfe,t2o),e(Es,a2o),e(Es,rj),e(rj,n2o),e(Es,s2o),e(Es,tj),e(tj,l2o),e(Es,i2o),e(k,d2o),e(k,iu),e(iu,Sfe),e(Sfe,c2o),e(iu,m2o),e(iu,aj),e(aj,f2o),e(iu,g2o),e(k,h2o),e(k,Cs),e(Cs,Rfe),e(Rfe,u2o),e(Cs,p2o),e(Cs,nj),e(nj,_2o),e(Cs,b2o),e(Cs,sj),e(sj,v2o),e(Cs,F2o),e(k,T2o),e(k,du),e(du,Pfe),e(Pfe,M2o),e(du,E2o),e(du,lj),e(lj,C2o),e(du,w2o),e(k,A2o),e(k,ws),e(ws,Bfe),e(Bfe,L2o),e(ws,y2o),e(ws,ij),e(ij,x2o),e(ws,$2o),e(ws,dj),e(dj,k2o),e(ws,S2o),e(k,R2o),e(k,As),e(As,Ife),e(Ife,P2o),e(As,B2o),e(As,cj),e(cj,I2o),e(As,N2o),e(As,mj),e(mj,q2o),e(As,j2o),e(k,D2o),e(k,Ls),e(Ls,Nfe),e(Nfe,G2o),e(Ls,O2o),e(Ls,fj),e(fj,V2o),e(Ls,X2o),e(Ls,gj),e(gj,z2o),e(Ls,Q2o),e(k,W2o),e(k,cu),e(cu,qfe),e(qfe,U2o),e(cu,H2o),e(cu,hj),e(hj,J2o),e(cu,Y2o),e(k,K2o),e(k,mu),e(mu,jfe),e(jfe,Z2o),e(mu,e1o),e(mu,uj),e(uj,o1o),e(mu,r1o),e(k,t1o),e(k,ys),e(ys,Dfe),e(Dfe,a1o),e(ys,n1o),e(ys,pj),e(pj,s1o),e(ys,l1o),e(ys,_j),e(_j,i1o),e(ys,d1o),e(k,c1o),e(k,xs),e(xs,Gfe),e(Gfe,m1o),e(xs,f1o),e(xs,bj),e(bj,g1o),e(xs,h1o),e(xs,vj),e(vj,u1o),e(xs,p1o),e(k,_1o),e(k,$s),e($s,Ofe),e(Ofe,b1o),e($s,v1o),e($s,Fj),e(Fj,F1o),e($s,T1o),e($s,Tj),e(Tj,M1o),e($s,E1o),e(k,C1o),e(k,fu),e(fu,Vfe),e(Vfe,w1o),e(fu,A1o),e(fu,Mj),e(Mj,L1o),e(fu,y1o),e(k,x1o),e(k,ks),e(ks,Xfe),e(Xfe,$1o),e(ks,k1o),e(ks,Ej),e(Ej,S1o),e(ks,R1o),e(ks,Cj),e(Cj,P1o),e(ks,B1o),e(k,I1o),e(k,Ss),e(Ss,zfe),e(zfe,N1o),e(Ss,q1o),e(Ss,wj),e(wj,j1o),e(Ss,D1o),e(Ss,Aj),e(Aj,G1o),e(Ss,O1o),e(k,V1o),e(k,Rs),e(Rs,Qfe),e(Qfe,X1o),e(Rs,z1o),e(Rs,Lj),e(Lj,Q1o),e(Rs,W1o),e(Rs,yj),e(yj,U1o),e(Rs,H1o),e(k,J1o),e(k,Ps),e(Ps,Wfe),e(Wfe,Y1o),e(Ps,K1o),e(Ps,xj),e(xj,Z1o),e(Ps,evo),e(Ps,$j),e($j,ovo),e(Ps,rvo),e(k,tvo),e(k,Bs),e(Bs,Ufe),e(Ufe,avo),e(Bs,nvo),e(Bs,kj),e(kj,svo),e(Bs,lvo),e(Bs,Sj),e(Sj,ivo),e(Bs,dvo),e(k,cvo),e(k,Is),e(Is,Hfe),e(Hfe,mvo),e(Is,fvo),e(Is,Rj),e(Rj,gvo),e(Is,hvo),e(Is,Pj),e(Pj,uvo),e(Is,pvo),e(k,_vo),e(k,Ns),e(Ns,Jfe),e(Jfe,bvo),e(Ns,vvo),e(Ns,Bj),e(Bj,Fvo),e(Ns,Tvo),e(Ns,Ij),e(Ij,Mvo),e(Ns,Evo),e(k,Cvo),e(k,qs),e(qs,Yfe),e(Yfe,wvo),e(qs,Avo),e(qs,Nj),e(Nj,Lvo),e(qs,yvo),e(qs,qj),e(qj,xvo),e(qs,$vo),e(k,kvo),e(k,gu),e(gu,Kfe),e(Kfe,Svo),e(gu,Rvo),e(gu,jj),e(jj,Pvo),e(gu,Bvo),e(k,Ivo),e(k,js),e(js,Zfe),e(Zfe,Nvo),e(js,qvo),e(js,Dj),e(Dj,jvo),e(js,Dvo),e(js,Gj),e(Gj,Gvo),e(js,Ovo),e(k,Vvo),e(k,hu),e(hu,ege),e(ege,Xvo),e(hu,zvo),e(hu,Oj),e(Oj,Qvo),e(hu,Wvo),e(k,Uvo),e(k,uu),e(uu,oge),e(oge,Hvo),e(uu,Jvo),e(uu,Vj),e(Vj,Yvo),e(uu,Kvo),e(k,Zvo),e(k,Ds),e(Ds,rge),e(rge,eFo),e(Ds,oFo),e(Ds,Xj),e(Xj,rFo),e(Ds,tFo),e(Ds,zj),e(zj,aFo),e(Ds,nFo),e(k,sFo),e(k,Gs),e(Gs,tge),e(tge,lFo),e(Gs,iFo),e(Gs,Qj),e(Qj,dFo),e(Gs,cFo),e(Gs,Wj),e(Wj,mFo),e(Gs,fFo),e(k,gFo),e(k,Os),e(Os,age),e(age,hFo),e(Os,uFo),e(Os,Uj),e(Uj,pFo),e(Os,_Fo),e(Os,Hj),e(Hj,bFo),e(Os,vFo),e(k,FFo),e(k,pu),e(pu,nge),e(nge,TFo),e(pu,MFo),e(pu,Jj),e(Jj,EFo),e(pu,CFo),e(k,wFo),e(k,Vs),e(Vs,sge),e(sge,AFo),e(Vs,LFo),e(Vs,Yj),e(Yj,yFo),e(Vs,xFo),e(Vs,Kj),e(Kj,$Fo),e(Vs,kFo),e(k,SFo),e(k,Xs),e(Xs,lge),e(lge,RFo),e(Xs,PFo),e(Xs,Zj),e(Zj,BFo),e(Xs,IFo),e(Xs,eD),e(eD,NFo),e(Xs,qFo),e(k,jFo),e(k,zs),e(zs,ige),e(ige,DFo),e(zs,GFo),e(zs,oD),e(oD,OFo),e(zs,VFo),e(zs,rD),e(rD,XFo),e(zs,zFo),e(k,QFo),e(k,Qs),e(Qs,dge),e(dge,WFo),e(Qs,UFo),e(Qs,tD),e(tD,HFo),e(Qs,JFo),e(Qs,aD),e(aD,YFo),e(Qs,KFo),e(k,ZFo),e(k,Ws),e(Ws,cge),e(cge,eTo),e(Ws,oTo),e(Ws,nD),e(nD,rTo),e(Ws,tTo),e(Ws,sD),e(sD,aTo),e(Ws,nTo),e(k,sTo),e(k,Us),e(Us,mge),e(mge,lTo),e(Us,iTo),e(Us,lD),e(lD,dTo),e(Us,cTo),e(Us,iD),e(iD,mTo),e(Us,fTo),e(k,gTo),e(k,Hs),e(Hs,fge),e(fge,hTo),e(Hs,uTo),e(Hs,dD),e(dD,pTo),e(Hs,_To),e(Hs,cD),e(cD,bTo),e(Hs,vTo),e(k,FTo),e(k,Js),e(Js,gge),e(gge,TTo),e(Js,MTo),e(Js,mD),e(mD,ETo),e(Js,CTo),e(Js,fD),e(fD,wTo),e(Js,ATo),e(k,LTo),e(k,_u),e(_u,hge),e(hge,yTo),e(_u,xTo),e(_u,gD),e(gD,$To),e(_u,kTo),e(k,STo),e(k,Ys),e(Ys,uge),e(uge,RTo),e(Ys,PTo),e(Ys,hD),e(hD,BTo),e(Ys,ITo),e(Ys,uD),e(uD,NTo),e(Ys,qTo),e(k,jTo),e(k,Ks),e(Ks,pge),e(pge,DTo),e(Ks,GTo),e(Ks,pD),e(pD,OTo),e(Ks,VTo),e(Ks,_D),e(_D,XTo),e(Ks,zTo),e(k,QTo),e(k,bu),e(bu,_ge),e(_ge,WTo),e(bu,UTo),e(bu,bD),e(bD,HTo),e(bu,JTo),e(k,YTo),e(k,vu),e(vu,bge),e(bge,KTo),e(vu,ZTo),e(vu,vD),e(vD,eMo),e(vu,oMo),e(k,rMo),e(k,Fu),e(Fu,vge),e(vge,tMo),e(Fu,aMo),e(Fu,FD),e(FD,nMo),e(Fu,sMo),e(k,lMo),e(k,Tu),e(Tu,Fge),e(Fge,iMo),e(Tu,dMo),e(Tu,TD),e(TD,cMo),e(Tu,mMo),e(k,fMo),e(k,Zs),e(Zs,Tge),e(Tge,gMo),e(Zs,hMo),e(Zs,MD),e(MD,uMo),e(Zs,pMo),e(Zs,ED),e(ED,_Mo),e(Zs,bMo),e(k,vMo),e(k,Mu),e(Mu,Mge),e(Mge,FMo),e(Mu,TMo),e(Mu,CD),e(CD,MMo),e(Mu,EMo),e(k,CMo),e(k,el),e(el,Ege),e(Ege,wMo),e(el,AMo),e(el,wD),e(wD,LMo),e(el,yMo),e(el,AD),e(AD,xMo),e(el,$Mo),e(k,kMo),e(k,ol),e(ol,Cge),e(Cge,SMo),e(ol,RMo),e(ol,LD),e(LD,PMo),e(ol,BMo),e(ol,yD),e(yD,IMo),e(ol,NMo),e(k,qMo),e(k,rl),e(rl,wge),e(wge,jMo),e(rl,DMo),e(rl,xD),e(xD,GMo),e(rl,OMo),e(rl,$D),e($D,VMo),e(rl,XMo),e(k,zMo),e(k,tl),e(tl,Age),e(Age,QMo),e(tl,WMo),e(tl,kD),e(kD,UMo),e(tl,HMo),e(tl,SD),e(SD,JMo),e(tl,YMo),e(k,KMo),e(k,al),e(al,Lge),e(Lge,ZMo),e(al,eEo),e(al,RD),e(RD,oEo),e(al,rEo),e(al,PD),e(PD,tEo),e(al,aEo),e(k,nEo),e(k,nl),e(nl,yge),e(yge,sEo),e(nl,lEo),e(nl,BD),e(BD,iEo),e(nl,dEo),e(nl,ID),e(ID,cEo),e(nl,mEo),e(k,fEo),e(k,Eu),e(Eu,xge),e(xge,gEo),e(Eu,hEo),e(Eu,ND),e(ND,uEo),e(Eu,pEo),e(k,_Eo),e(k,Cu),e(Cu,$ge),e($ge,bEo),e(Cu,vEo),e(Cu,qD),e(qD,FEo),e(Cu,TEo),e(k,MEo),e(k,sl),e(sl,kge),e(kge,EEo),e(sl,CEo),e(sl,jD),e(jD,wEo),e(sl,AEo),e(sl,DD),e(DD,LEo),e(sl,yEo),e(k,xEo),e(k,ll),e(ll,Sge),e(Sge,$Eo),e(ll,kEo),e(ll,GD),e(GD,SEo),e(ll,REo),e(ll,OD),e(OD,PEo),e(ll,BEo),e(k,IEo),e(k,il),e(il,Rge),e(Rge,NEo),e(il,qEo),e(il,VD),e(VD,jEo),e(il,DEo),e(il,XD),e(XD,GEo),e(il,OEo),e(k,VEo),e(k,wu),e(wu,Pge),e(Pge,XEo),e(wu,zEo),e(wu,zD),e(zD,QEo),e(wu,WEo),e(k,UEo),e(k,Au),e(Au,Bge),e(Bge,HEo),e(Au,JEo),e(Au,QD),e(QD,YEo),e(Au,KEo),e(k,ZEo),e(k,Lu),e(Lu,Ige),e(Ige,e4o),e(Lu,o4o),e(Lu,WD),e(WD,r4o),e(Lu,t4o),e(k,a4o),e(k,dl),e(dl,Nge),e(Nge,n4o),e(dl,s4o),e(dl,UD),e(UD,l4o),e(dl,i4o),e(dl,HD),e(HD,d4o),e(dl,c4o),e(k,m4o),e(k,cl),e(cl,qge),e(qge,f4o),e(cl,g4o),e(cl,JD),e(JD,h4o),e(cl,u4o),e(cl,YD),e(YD,p4o),e(cl,_4o),e(k,b4o),e(k,yu),e(yu,jge),e(jge,v4o),e(yu,F4o),e(yu,KD),e(KD,T4o),e(yu,M4o),e(k,E4o),e(k,xu),e(xu,Dge),e(Dge,C4o),e(xu,w4o),e(xu,ZD),e(ZD,A4o),e(xu,L4o),e(k,y4o),e(k,$u),e($u,Gge),e(Gge,x4o),e($u,$4o),e($u,eG),e(eG,k4o),e($u,S4o),e(k,R4o),e(k,ml),e(ml,Oge),e(Oge,P4o),e(ml,B4o),e(ml,oG),e(oG,I4o),e(ml,N4o),e(ml,rG),e(rG,q4o),e(ml,j4o),e(k,D4o),e(k,fl),e(fl,Vge),e(Vge,G4o),e(fl,O4o),e(fl,tG),e(tG,V4o),e(fl,X4o),e(fl,aG),e(aG,z4o),e(fl,Q4o),e(k,W4o),e(k,ku),e(ku,Xge),e(Xge,U4o),e(ku,H4o),e(ku,nG),e(nG,J4o),e(ku,Y4o),e(k,K4o),e(k,Su),e(Su,zge),e(zge,Z4o),e(Su,eCo),e(Su,sG),e(sG,oCo),e(Su,rCo),e(k,tCo),e(k,gl),e(gl,Qge),e(Qge,aCo),e(gl,nCo),e(gl,lG),e(lG,sCo),e(gl,lCo),e(gl,iG),e(iG,iCo),e(gl,dCo),e(k,cCo),e(k,hl),e(hl,Wge),e(Wge,mCo),e(hl,fCo),e(hl,dG),e(dG,gCo),e(hl,hCo),e(hl,cG),e(cG,uCo),e(hl,pCo),e(k,_Co),e(k,ul),e(ul,Uge),e(Uge,bCo),e(ul,vCo),e(ul,mG),e(mG,FCo),e(ul,TCo),e(ul,fG),e(fG,MCo),e(ul,ECo),e(k,CCo),e(k,pl),e(pl,Hge),e(Hge,wCo),e(pl,ACo),e(pl,gG),e(gG,LCo),e(pl,yCo),e(pl,hG),e(hG,xCo),e(pl,$Co),e(Br,kCo),M(Ru,Br,null),e(ko,SCo),e(ko,Pu),M(J9,Pu,null),e(Pu,RCo),e(Pu,Jge),e(Jge,PCo),b(m,BKe,_),b(m,hd,_),e(hd,Bu),e(Bu,Yge),M(Y9,Yge,null),e(hd,BCo),e(hd,Kge),e(Kge,ICo),b(m,IKe,_),b(m,So,_),M(K9,So,null),e(So,NCo),e(So,Z9),e(Z9,qCo),e(Z9,uG),e(uG,jCo),e(Z9,DCo),e(So,GCo),e(So,ex),e(ex,OCo),e(ex,Zge),e(Zge,VCo),e(ex,XCo),e(So,zCo),e(So,Ye),M(ox,Ye,null),e(Ye,QCo),e(Ye,ehe),e(ehe,WCo),e(Ye,UCo),e(Ye,Ha),e(Ha,HCo),e(Ha,ohe),e(ohe,JCo),e(Ha,YCo),e(Ha,rhe),e(rhe,KCo),e(Ha,ZCo),e(Ha,the),e(the,e3o),e(Ha,o3o),e(Ye,r3o),e(Ye,Q),e(Q,Iu),e(Iu,ahe),e(ahe,t3o),e(Iu,a3o),e(Iu,pG),e(pG,n3o),e(Iu,s3o),e(Q,l3o),e(Q,Nu),e(Nu,nhe),e(nhe,i3o),e(Nu,d3o),e(Nu,_G),e(_G,c3o),e(Nu,m3o),e(Q,f3o),e(Q,qu),e(qu,she),e(she,g3o),e(qu,h3o),e(qu,bG),e(bG,u3o),e(qu,p3o),e(Q,_3o),e(Q,ju),e(ju,lhe),e(lhe,b3o),e(ju,v3o),e(ju,vG),e(vG,F3o),e(ju,T3o),e(Q,M3o),e(Q,Du),e(Du,ihe),e(ihe,E3o),e(Du,C3o),e(Du,FG),e(FG,w3o),e(Du,A3o),e(Q,L3o),e(Q,Gu),e(Gu,dhe),e(dhe,y3o),e(Gu,x3o),e(Gu,TG),e(TG,$3o),e(Gu,k3o),e(Q,S3o),e(Q,Ou),e(Ou,che),e(che,R3o),e(Ou,P3o),e(Ou,MG),e(MG,B3o),e(Ou,I3o),e(Q,N3o),e(Q,Vu),e(Vu,mhe),e(mhe,q3o),e(Vu,j3o),e(Vu,EG),e(EG,D3o),e(Vu,G3o),e(Q,O3o),e(Q,Xu),e(Xu,fhe),e(fhe,V3o),e(Xu,X3o),e(Xu,CG),e(CG,z3o),e(Xu,Q3o),e(Q,W3o),e(Q,zu),e(zu,ghe),e(ghe,U3o),e(zu,H3o),e(zu,wG),e(wG,J3o),e(zu,Y3o),e(Q,K3o),e(Q,Qu),e(Qu,hhe),e(hhe,Z3o),e(Qu,e5o),e(Qu,AG),e(AG,o5o),e(Qu,r5o),e(Q,t5o),e(Q,Wu),e(Wu,uhe),e(uhe,a5o),e(Wu,n5o),e(Wu,LG),e(LG,s5o),e(Wu,l5o),e(Q,i5o),e(Q,Uu),e(Uu,phe),e(phe,d5o),e(Uu,c5o),e(Uu,yG),e(yG,m5o),e(Uu,f5o),e(Q,g5o),e(Q,Hu),e(Hu,_he),e(_he,h5o),e(Hu,u5o),e(Hu,xG),e(xG,p5o),e(Hu,_5o),e(Q,b5o),e(Q,Ju),e(Ju,bhe),e(bhe,v5o),e(Ju,F5o),e(Ju,$G),e($G,T5o),e(Ju,M5o),e(Q,E5o),e(Q,Yu),e(Yu,vhe),e(vhe,C5o),e(Yu,w5o),e(Yu,kG),e(kG,A5o),e(Yu,L5o),e(Q,y5o),e(Q,Ku),e(Ku,Fhe),e(Fhe,x5o),e(Ku,$5o),e(Ku,SG),e(SG,k5o),e(Ku,S5o),e(Q,R5o),e(Q,Zu),e(Zu,The),e(The,P5o),e(Zu,B5o),e(Zu,RG),e(RG,I5o),e(Zu,N5o),e(Q,q5o),e(Q,ep),e(ep,Mhe),e(Mhe,j5o),e(ep,D5o),e(ep,PG),e(PG,G5o),e(ep,O5o),e(Q,V5o),e(Q,op),e(op,Ehe),e(Ehe,X5o),e(op,z5o),e(op,BG),e(BG,Q5o),e(op,W5o),e(Q,U5o),e(Q,rp),e(rp,Che),e(Che,H5o),e(rp,J5o),e(rp,IG),e(IG,Y5o),e(rp,K5o),e(Q,Z5o),e(Q,tp),e(tp,whe),e(whe,e0o),e(tp,o0o),e(tp,NG),e(NG,r0o),e(tp,t0o),e(Q,a0o),e(Q,ap),e(ap,Ahe),e(Ahe,n0o),e(ap,s0o),e(ap,qG),e(qG,l0o),e(ap,i0o),e(Q,d0o),e(Q,np),e(np,Lhe),e(Lhe,c0o),e(np,m0o),e(np,jG),e(jG,f0o),e(np,g0o),e(Q,h0o),e(Q,sp),e(sp,yhe),e(yhe,u0o),e(sp,p0o),e(sp,DG),e(DG,_0o),e(sp,b0o),e(Q,v0o),e(Q,lp),e(lp,xhe),e(xhe,F0o),e(lp,T0o),e(lp,GG),e(GG,M0o),e(lp,E0o),e(Q,C0o),e(Q,ip),e(ip,$he),e($he,w0o),e(ip,A0o),e(ip,OG),e(OG,L0o),e(ip,y0o),e(Q,x0o),e(Q,dp),e(dp,khe),e(khe,$0o),e(dp,k0o),e(dp,VG),e(VG,S0o),e(dp,R0o),e(Q,P0o),e(Q,cp),e(cp,She),e(She,B0o),e(cp,I0o),e(cp,XG),e(XG,N0o),e(cp,q0o),e(Q,j0o),e(Q,mp),e(mp,Rhe),e(Rhe,D0o),e(mp,G0o),e(mp,zG),e(zG,O0o),e(mp,V0o),e(Q,X0o),e(Q,fp),e(fp,Phe),e(Phe,z0o),e(fp,Q0o),e(fp,QG),e(QG,W0o),e(fp,U0o),e(Q,H0o),e(Q,gp),e(gp,Bhe),e(Bhe,J0o),e(gp,Y0o),e(gp,WG),e(WG,K0o),e(gp,Z0o),e(Q,ewo),e(Q,hp),e(hp,Ihe),e(Ihe,owo),e(hp,rwo),e(hp,UG),e(UG,two),e(hp,awo),e(Q,nwo),e(Q,up),e(up,Nhe),e(Nhe,swo),e(up,lwo),e(up,HG),e(HG,iwo),e(up,dwo),e(Q,cwo),e(Q,pp),e(pp,qhe),e(qhe,mwo),e(pp,fwo),e(pp,JG),e(JG,gwo),e(pp,hwo),e(Q,uwo),e(Q,_p),e(_p,jhe),e(jhe,pwo),e(_p,_wo),e(_p,YG),e(YG,bwo),e(_p,vwo),e(Q,Fwo),e(Q,bp),e(bp,Dhe),e(Dhe,Two),e(bp,Mwo),e(bp,KG),e(KG,Ewo),e(bp,Cwo),e(Q,wwo),e(Q,vp),e(vp,Ghe),e(Ghe,Awo),e(vp,Lwo),e(vp,ZG),e(ZG,ywo),e(vp,xwo),e(Q,$wo),e(Q,Fp),e(Fp,Ohe),e(Ohe,kwo),e(Fp,Swo),e(Fp,eO),e(eO,Rwo),e(Fp,Pwo),e(Q,Bwo),e(Q,Tp),e(Tp,Vhe),e(Vhe,Iwo),e(Tp,Nwo),e(Tp,oO),e(oO,qwo),e(Tp,jwo),e(Q,Dwo),e(Q,Mp),e(Mp,Xhe),e(Xhe,Gwo),e(Mp,Owo),e(Mp,rO),e(rO,Vwo),e(Mp,Xwo),e(Ye,zwo),M(Ep,Ye,null),e(Ye,Qwo),M(Cp,Ye,null),e(So,Wwo),e(So,wp),M(rx,wp,null),e(wp,Uwo),e(wp,zhe),e(zhe,Hwo),b(m,NKe,_),b(m,ud,_),e(ud,Ap),e(Ap,Qhe),M(tx,Qhe,null),e(ud,Jwo),e(ud,Whe),e(Whe,Ywo),b(m,qKe,_),b(m,Ro,_),M(ax,Ro,null),e(Ro,Kwo),e(Ro,nx),e(nx,Zwo),e(nx,tO),e(tO,eAo),e(nx,oAo),e(Ro,rAo),e(Ro,sx),e(sx,tAo),e(sx,Uhe),e(Uhe,aAo),e(sx,nAo),e(Ro,sAo),e(Ro,Ke),M(lx,Ke,null),e(Ke,lAo),e(Ke,Hhe),e(Hhe,iAo),e(Ke,dAo),e(Ke,pd),e(pd,cAo),e(pd,Jhe),e(Jhe,mAo),e(pd,fAo),e(pd,Yhe),e(Yhe,gAo),e(pd,hAo),e(Ke,uAo),e(Ke,ie),e(ie,Lp),e(Lp,Khe),e(Khe,pAo),e(Lp,_Ao),e(Lp,aO),e(aO,bAo),e(Lp,vAo),e(ie,FAo),e(ie,yp),e(yp,Zhe),e(Zhe,TAo),e(yp,MAo),e(yp,nO),e(nO,EAo),e(yp,CAo),e(ie,wAo),e(ie,xp),e(xp,eue),e(eue,AAo),e(xp,LAo),e(xp,sO),e(sO,yAo),e(xp,xAo),e(ie,$Ao),e(ie,$p),e($p,oue),e(oue,kAo),e($p,SAo),e($p,lO),e(lO,RAo),e($p,PAo),e(ie,BAo),e(ie,kp),e(kp,rue),e(rue,IAo),e(kp,NAo),e(kp,iO),e(iO,qAo),e(kp,jAo),e(ie,DAo),e(ie,Sp),e(Sp,tue),e(tue,GAo),e(Sp,OAo),e(Sp,dO),e(dO,VAo),e(Sp,XAo),e(ie,zAo),e(ie,Rp),e(Rp,aue),e(aue,QAo),e(Rp,WAo),e(Rp,cO),e(cO,UAo),e(Rp,HAo),e(ie,JAo),e(ie,Pp),e(Pp,nue),e(nue,YAo),e(Pp,KAo),e(Pp,mO),e(mO,ZAo),e(Pp,e6o),e(ie,o6o),e(ie,Bp),e(Bp,sue),e(sue,r6o),e(Bp,t6o),e(Bp,fO),e(fO,a6o),e(Bp,n6o),e(ie,s6o),e(ie,Ip),e(Ip,lue),e(lue,l6o),e(Ip,i6o),e(Ip,gO),e(gO,d6o),e(Ip,c6o),e(ie,m6o),e(ie,Np),e(Np,iue),e(iue,f6o),e(Np,g6o),e(Np,hO),e(hO,h6o),e(Np,u6o),e(ie,p6o),e(ie,qp),e(qp,due),e(due,_6o),e(qp,b6o),e(qp,uO),e(uO,v6o),e(qp,F6o),e(ie,T6o),e(ie,jp),e(jp,cue),e(cue,M6o),e(jp,E6o),e(jp,pO),e(pO,C6o),e(jp,w6o),e(ie,A6o),e(ie,Dp),e(Dp,mue),e(mue,L6o),e(Dp,y6o),e(Dp,_O),e(_O,x6o),e(Dp,$6o),e(ie,k6o),e(ie,Gp),e(Gp,fue),e(fue,S6o),e(Gp,R6o),e(Gp,bO),e(bO,P6o),e(Gp,B6o),e(ie,I6o),e(ie,Op),e(Op,gue),e(gue,N6o),e(Op,q6o),e(Op,vO),e(vO,j6o),e(Op,D6o),e(ie,G6o),e(ie,Vp),e(Vp,hue),e(hue,O6o),e(Vp,V6o),e(Vp,FO),e(FO,X6o),e(Vp,z6o),e(ie,Q6o),e(ie,Xp),e(Xp,uue),e(uue,W6o),e(Xp,U6o),e(Xp,TO),e(TO,H6o),e(Xp,J6o),e(ie,Y6o),e(ie,zp),e(zp,pue),e(pue,K6o),e(zp,Z6o),e(zp,MO),e(MO,e7o),e(zp,o7o),e(ie,r7o),e(ie,Qp),e(Qp,_ue),e(_ue,t7o),e(Qp,a7o),e(Qp,EO),e(EO,n7o),e(Qp,s7o),e(ie,l7o),e(ie,Wp),e(Wp,bue),e(bue,i7o),e(Wp,d7o),e(Wp,CO),e(CO,c7o),e(Wp,m7o),e(Ke,f7o),M(Up,Ke,null),e(Ke,g7o),M(Hp,Ke,null),e(Ro,h7o),e(Ro,Jp),M(ix,Jp,null),e(Jp,u7o),e(Jp,vue),e(vue,p7o),b(m,jKe,_),b(m,_d,_),e(_d,Yp),e(Yp,Fue),M(dx,Fue,null),e(_d,_7o),e(_d,Tue),e(Tue,b7o),b(m,DKe,_),b(m,Po,_),M(cx,Po,null),e(Po,v7o),e(Po,bd),e(bd,F7o),e(bd,wO),e(wO,T7o),e(bd,M7o),e(bd,AO),e(AO,E7o),e(bd,C7o),e(Po,w7o),e(Po,mx),e(mx,A7o),e(mx,Mue),e(Mue,L7o),e(mx,y7o),e(Po,x7o),e(Po,_t),M(fx,_t,null),e(_t,$7o),e(_t,Eue),e(Eue,k7o),e(_t,S7o),e(_t,vd),e(vd,R7o),e(vd,Cue),e(Cue,P7o),e(vd,B7o),e(vd,LO),e(LO,I7o),e(vd,N7o),e(_t,q7o),M(Kp,_t,null),e(Po,j7o),e(Po,Ze),M(gx,Ze,null),e(Ze,D7o),e(Ze,wue),e(wue,G7o),e(Ze,O7o),e(Ze,Ja),e(Ja,V7o),e(Ja,Aue),e(Aue,X7o),e(Ja,z7o),e(Ja,Lue),e(Lue,Q7o),e(Ja,W7o),e(Ja,yue),e(yue,U7o),e(Ja,H7o),e(Ze,J7o),e(Ze,y),e(y,Zp),e(Zp,xue),e(xue,Y7o),e(Zp,K7o),e(Zp,yO),e(yO,Z7o),e(Zp,eLo),e(y,oLo),e(y,e_),e(e_,$ue),e($ue,rLo),e(e_,tLo),e(e_,xO),e(xO,aLo),e(e_,nLo),e(y,sLo),e(y,o_),e(o_,kue),e(kue,lLo),e(o_,iLo),e(o_,$O),e($O,dLo),e(o_,cLo),e(y,mLo),e(y,r_),e(r_,Sue),e(Sue,fLo),e(r_,gLo),e(r_,kO),e(kO,hLo),e(r_,uLo),e(y,pLo),e(y,t_),e(t_,Rue),e(Rue,_Lo),e(t_,bLo),e(t_,SO),e(SO,vLo),e(t_,FLo),e(y,TLo),e(y,a_),e(a_,Pue),e(Pue,MLo),e(a_,ELo),e(a_,RO),e(RO,CLo),e(a_,wLo),e(y,ALo),e(y,n_),e(n_,Bue),e(Bue,LLo),e(n_,yLo),e(n_,PO),e(PO,xLo),e(n_,$Lo),e(y,kLo),e(y,s_),e(s_,Iue),e(Iue,SLo),e(s_,RLo),e(s_,BO),e(BO,PLo),e(s_,BLo),e(y,ILo),e(y,l_),e(l_,Nue),e(Nue,NLo),e(l_,qLo),e(l_,IO),e(IO,jLo),e(l_,DLo),e(y,GLo),e(y,i_),e(i_,que),e(que,OLo),e(i_,VLo),e(i_,NO),e(NO,XLo),e(i_,zLo),e(y,QLo),e(y,d_),e(d_,jue),e(jue,WLo),e(d_,ULo),e(d_,qO),e(qO,HLo),e(d_,JLo),e(y,YLo),e(y,c_),e(c_,Due),e(Due,KLo),e(c_,ZLo),e(c_,jO),e(jO,eyo),e(c_,oyo),e(y,ryo),e(y,m_),e(m_,Gue),e(Gue,tyo),e(m_,ayo),e(m_,DO),e(DO,nyo),e(m_,syo),e(y,lyo),e(y,f_),e(f_,Oue),e(Oue,iyo),e(f_,dyo),e(f_,GO),e(GO,cyo),e(f_,myo),e(y,fyo),e(y,g_),e(g_,Vue),e(Vue,gyo),e(g_,hyo),e(g_,OO),e(OO,uyo),e(g_,pyo),e(y,_yo),e(y,h_),e(h_,Xue),e(Xue,byo),e(h_,vyo),e(h_,VO),e(VO,Fyo),e(h_,Tyo),e(y,Myo),e(y,u_),e(u_,zue),e(zue,Eyo),e(u_,Cyo),e(u_,XO),e(XO,wyo),e(u_,Ayo),e(y,Lyo),e(y,p_),e(p_,Que),e(Que,yyo),e(p_,xyo),e(p_,zO),e(zO,$yo),e(p_,kyo),e(y,Syo),e(y,__),e(__,Wue),e(Wue,Ryo),e(__,Pyo),e(__,QO),e(QO,Byo),e(__,Iyo),e(y,Nyo),e(y,b_),e(b_,Uue),e(Uue,qyo),e(b_,jyo),e(b_,WO),e(WO,Dyo),e(b_,Gyo),e(y,Oyo),e(y,v_),e(v_,Hue),e(Hue,Vyo),e(v_,Xyo),e(v_,UO),e(UO,zyo),e(v_,Qyo),e(y,Wyo),e(y,F_),e(F_,Jue),e(Jue,Uyo),e(F_,Hyo),e(F_,HO),e(HO,Jyo),e(F_,Yyo),e(y,Kyo),e(y,T_),e(T_,Yue),e(Yue,Zyo),e(T_,e8o),e(T_,JO),e(JO,o8o),e(T_,r8o),e(y,t8o),e(y,M_),e(M_,Kue),e(Kue,a8o),e(M_,n8o),e(M_,YO),e(YO,s8o),e(M_,l8o),e(y,i8o),e(y,E_),e(E_,Zue),e(Zue,d8o),e(E_,c8o),e(E_,KO),e(KO,m8o),e(E_,f8o),e(y,g8o),e(y,C_),e(C_,epe),e(epe,h8o),e(C_,u8o),e(C_,ZO),e(ZO,p8o),e(C_,_8o),e(y,b8o),e(y,w_),e(w_,ope),e(ope,v8o),e(w_,F8o),e(w_,eV),e(eV,T8o),e(w_,M8o),e(y,E8o),e(y,A_),e(A_,rpe),e(rpe,C8o),e(A_,w8o),e(A_,oV),e(oV,A8o),e(A_,L8o),e(y,y8o),e(y,L_),e(L_,tpe),e(tpe,x8o),e(L_,$8o),e(L_,rV),e(rV,k8o),e(L_,S8o),e(y,R8o),e(y,y_),e(y_,ape),e(ape,P8o),e(y_,B8o),e(y_,tV),e(tV,I8o),e(y_,N8o),e(y,q8o),e(y,x_),e(x_,npe),e(npe,j8o),e(x_,D8o),e(x_,aV),e(aV,G8o),e(x_,O8o),e(y,V8o),e(y,$_),e($_,spe),e(spe,X8o),e($_,z8o),e($_,nV),e(nV,Q8o),e($_,W8o),e(y,U8o),e(y,k_),e(k_,lpe),e(lpe,H8o),e(k_,J8o),e(k_,sV),e(sV,Y8o),e(k_,K8o),e(y,Z8o),e(y,S_),e(S_,ipe),e(ipe,e9o),e(S_,o9o),e(S_,lV),e(lV,r9o),e(S_,t9o),e(y,a9o),e(y,R_),e(R_,dpe),e(dpe,n9o),e(R_,s9o),e(R_,iV),e(iV,l9o),e(R_,i9o),e(y,d9o),e(y,P_),e(P_,cpe),e(cpe,c9o),e(P_,m9o),e(P_,dV),e(dV,f9o),e(P_,g9o),e(y,h9o),e(y,B_),e(B_,mpe),e(mpe,u9o),e(B_,p9o),e(B_,cV),e(cV,_9o),e(B_,b9o),e(y,v9o),e(y,I_),e(I_,fpe),e(fpe,F9o),e(I_,T9o),e(I_,mV),e(mV,M9o),e(I_,E9o),e(y,C9o),e(y,_l),e(_l,gpe),e(gpe,w9o),e(_l,A9o),e(_l,fV),e(fV,L9o),e(_l,y9o),e(_l,gV),e(gV,x9o),e(_l,$9o),e(y,k9o),e(y,N_),e(N_,hpe),e(hpe,S9o),e(N_,R9o),e(N_,hV),e(hV,P9o),e(N_,B9o),e(y,I9o),e(y,q_),e(q_,upe),e(upe,N9o),e(q_,q9o),e(q_,uV),e(uV,j9o),e(q_,D9o),e(y,G9o),e(y,j_),e(j_,ppe),e(ppe,O9o),e(j_,V9o),e(j_,pV),e(pV,X9o),e(j_,z9o),e(y,Q9o),e(y,D_),e(D_,_pe),e(_pe,W9o),e(D_,U9o),e(D_,_V),e(_V,H9o),e(D_,J9o),e(y,Y9o),e(y,G_),e(G_,bpe),e(bpe,K9o),e(G_,Z9o),e(G_,bV),e(bV,exo),e(G_,oxo),e(y,rxo),e(y,O_),e(O_,vpe),e(vpe,txo),e(O_,axo),e(O_,vV),e(vV,nxo),e(O_,sxo),e(y,lxo),e(y,V_),e(V_,Fpe),e(Fpe,ixo),e(V_,dxo),e(V_,FV),e(FV,cxo),e(V_,mxo),e(y,fxo),e(y,X_),e(X_,Tpe),e(Tpe,gxo),e(X_,hxo),e(X_,TV),e(TV,uxo),e(X_,pxo),e(y,_xo),e(y,z_),e(z_,Mpe),e(Mpe,bxo),e(z_,vxo),e(z_,MV),e(MV,Fxo),e(z_,Txo),e(y,Mxo),e(y,Q_),e(Q_,Epe),e(Epe,Exo),e(Q_,Cxo),e(Q_,EV),e(EV,wxo),e(Q_,Axo),e(y,Lxo),e(y,W_),e(W_,Cpe),e(Cpe,yxo),e(W_,xxo),e(W_,CV),e(CV,$xo),e(W_,kxo),e(y,Sxo),e(y,U_),e(U_,wpe),e(wpe,Rxo),e(U_,Pxo),e(U_,wV),e(wV,Bxo),e(U_,Ixo),e(y,Nxo),e(y,H_),e(H_,Ape),e(Ape,qxo),e(H_,jxo),e(H_,AV),e(AV,Dxo),e(H_,Gxo),e(y,Oxo),e(y,J_),e(J_,Lpe),e(Lpe,Vxo),e(J_,Xxo),e(J_,LV),e(LV,zxo),e(J_,Qxo),e(y,Wxo),e(y,Y_),e(Y_,ype),e(ype,Uxo),e(Y_,Hxo),e(Y_,yV),e(yV,Jxo),e(Y_,Yxo),e(y,Kxo),e(y,K_),e(K_,xpe),e(xpe,Zxo),e(K_,e$o),e(K_,xV),e(xV,o$o),e(K_,r$o),e(y,t$o),e(y,Z_),e(Z_,$pe),e($pe,a$o),e(Z_,n$o),e(Z_,$V),e($V,s$o),e(Z_,l$o),e(y,i$o),e(y,eb),e(eb,kpe),e(kpe,d$o),e(eb,c$o),e(eb,kV),e(kV,m$o),e(eb,f$o),e(y,g$o),e(y,ob),e(ob,Spe),e(Spe,h$o),e(ob,u$o),e(ob,SV),e(SV,p$o),e(ob,_$o),e(y,b$o),e(y,rb),e(rb,Rpe),e(Rpe,v$o),e(rb,F$o),e(rb,RV),e(RV,T$o),e(rb,M$o),e(y,E$o),e(y,tb),e(tb,Ppe),e(Ppe,C$o),e(tb,w$o),e(tb,PV),e(PV,A$o),e(tb,L$o),e(y,y$o),e(y,ab),e(ab,Bpe),e(Bpe,x$o),e(ab,$$o),e(ab,BV),e(BV,k$o),e(ab,S$o),e(y,R$o),e(y,nb),e(nb,Ipe),e(Ipe,P$o),e(nb,B$o),e(nb,IV),e(IV,I$o),e(nb,N$o),e(y,q$o),e(y,sb),e(sb,Npe),e(Npe,j$o),e(sb,D$o),e(sb,NV),e(NV,G$o),e(sb,O$o),e(y,V$o),e(y,lb),e(lb,qpe),e(qpe,X$o),e(lb,z$o),e(lb,qV),e(qV,Q$o),e(lb,W$o),e(y,U$o),e(y,ib),e(ib,jpe),e(jpe,H$o),e(ib,J$o),e(ib,jV),e(jV,Y$o),e(ib,K$o),e(y,Z$o),e(y,db),e(db,Dpe),e(Dpe,eko),e(db,oko),e(db,DV),e(DV,rko),e(db,tko),e(y,ako),e(y,cb),e(cb,Gpe),e(Gpe,nko),e(cb,sko),e(cb,GV),e(GV,lko),e(cb,iko),e(y,dko),e(y,mb),e(mb,Ope),e(Ope,cko),e(mb,mko),e(mb,OV),e(OV,fko),e(mb,gko),e(y,hko),e(y,fb),e(fb,Vpe),e(Vpe,uko),e(fb,pko),e(fb,VV),e(VV,_ko),e(fb,bko),e(y,vko),e(y,gb),e(gb,Xpe),e(Xpe,Fko),e(gb,Tko),e(gb,XV),e(XV,Mko),e(gb,Eko),e(y,Cko),e(y,hb),e(hb,zpe),e(zpe,wko),e(hb,Ako),e(hb,zV),e(zV,Lko),e(hb,yko),e(y,xko),e(y,ub),e(ub,Qpe),e(Qpe,$ko),e(ub,kko),e(ub,QV),e(QV,Sko),e(ub,Rko),e(y,Pko),e(y,pb),e(pb,Wpe),e(Wpe,Bko),e(pb,Iko),e(pb,WV),e(WV,Nko),e(pb,qko),e(y,jko),e(y,_b),e(_b,Upe),e(Upe,Dko),e(_b,Gko),e(_b,UV),e(UV,Oko),e(_b,Vko),e(y,Xko),e(y,bb),e(bb,Hpe),e(Hpe,zko),e(bb,Qko),e(bb,HV),e(HV,Wko),e(bb,Uko),e(y,Hko),e(y,vb),e(vb,Jpe),e(Jpe,Jko),e(vb,Yko),e(vb,JV),e(JV,Kko),e(vb,Zko),e(y,eSo),e(y,Fb),e(Fb,Ype),e(Ype,oSo),e(Fb,rSo),e(Fb,YV),e(YV,tSo),e(Fb,aSo),e(y,nSo),e(y,Tb),e(Tb,Kpe),e(Kpe,sSo),e(Tb,lSo),e(Tb,KV),e(KV,iSo),e(Tb,dSo),e(y,cSo),e(y,Mb),e(Mb,Zpe),e(Zpe,mSo),e(Mb,fSo),e(Mb,ZV),e(ZV,gSo),e(Mb,hSo),e(y,uSo),e(y,Eb),e(Eb,e_e),e(e_e,pSo),e(Eb,_So),e(Eb,eX),e(eX,bSo),e(Eb,vSo),e(y,FSo),e(y,Cb),e(Cb,o_e),e(o_e,TSo),e(Cb,MSo),e(Cb,oX),e(oX,ESo),e(Cb,CSo),e(y,wSo),e(y,wb),e(wb,r_e),e(r_e,ASo),e(wb,LSo),e(wb,rX),e(rX,ySo),e(wb,xSo),e(y,$So),e(y,Ab),e(Ab,t_e),e(t_e,kSo),e(Ab,SSo),e(Ab,tX),e(tX,RSo),e(Ab,PSo),e(y,BSo),e(y,Lb),e(Lb,a_e),e(a_e,ISo),e(Lb,NSo),e(Lb,aX),e(aX,qSo),e(Lb,jSo),e(y,DSo),e(y,yb),e(yb,n_e),e(n_e,GSo),e(yb,OSo),e(yb,nX),e(nX,VSo),e(yb,XSo),e(y,zSo),e(y,xb),e(xb,s_e),e(s_e,QSo),e(xb,WSo),e(xb,sX),e(sX,USo),e(xb,HSo),e(y,JSo),e(y,$b),e($b,l_e),e(l_e,YSo),e($b,KSo),e($b,lX),e(lX,ZSo),e($b,eRo),e(y,oRo),e(y,kb),e(kb,i_e),e(i_e,rRo),e(kb,tRo),e(kb,iX),e(iX,aRo),e(kb,nRo),e(y,sRo),e(y,Sb),e(Sb,d_e),e(d_e,lRo),e(Sb,iRo),e(Sb,dX),e(dX,dRo),e(Sb,cRo),e(y,mRo),e(y,Rb),e(Rb,c_e),e(c_e,fRo),e(Rb,gRo),e(Rb,cX),e(cX,hRo),e(Rb,uRo),e(y,pRo),e(y,Pb),e(Pb,m_e),e(m_e,_Ro),e(Pb,bRo),e(Pb,mX),e(mX,vRo),e(Pb,FRo),e(y,TRo),e(y,Bb),e(Bb,f_e),e(f_e,MRo),e(Bb,ERo),e(Bb,fX),e(fX,CRo),e(Bb,wRo),e(y,ARo),e(y,Ib),e(Ib,g_e),e(g_e,LRo),e(Ib,yRo),e(Ib,gX),e(gX,xRo),e(Ib,$Ro),e(y,kRo),e(y,Nb),e(Nb,h_e),e(h_e,SRo),e(Nb,RRo),e(Nb,hX),e(hX,PRo),e(Nb,BRo),e(y,IRo),e(y,qb),e(qb,u_e),e(u_e,NRo),e(qb,qRo),e(qb,uX),e(uX,jRo),e(qb,DRo),e(y,GRo),e(y,jb),e(jb,p_e),e(p_e,ORo),e(jb,VRo),e(jb,pX),e(pX,XRo),e(jb,zRo),e(y,QRo),e(y,Db),e(Db,__e),e(__e,WRo),e(Db,URo),e(Db,_X),e(_X,HRo),e(Db,JRo),e(y,YRo),e(y,Gb),e(Gb,b_e),e(b_e,KRo),e(Gb,ZRo),e(Gb,bX),e(bX,ePo),e(Gb,oPo),e(y,rPo),e(y,Ob),e(Ob,v_e),e(v_e,tPo),e(Ob,aPo),e(Ob,vX),e(vX,nPo),e(Ob,sPo),e(y,lPo),e(y,Vb),e(Vb,F_e),e(F_e,iPo),e(Vb,dPo),e(Vb,FX),e(FX,cPo),e(Vb,mPo),e(y,fPo),e(y,Xb),e(Xb,T_e),e(T_e,gPo),e(Xb,hPo),e(Xb,TX),e(TX,uPo),e(Xb,pPo),e(y,_Po),e(y,zb),e(zb,M_e),e(M_e,bPo),e(zb,vPo),e(zb,MX),e(MX,FPo),e(zb,TPo),e(y,MPo),e(y,Qb),e(Qb,E_e),e(E_e,EPo),e(Qb,CPo),e(Qb,EX),e(EX,wPo),e(Qb,APo),e(y,LPo),e(y,Wb),e(Wb,C_e),e(C_e,yPo),e(Wb,xPo),e(Wb,CX),e(CX,$Po),e(Wb,kPo),e(y,SPo),e(y,Ub),e(Ub,w_e),e(w_e,RPo),e(Ub,PPo),e(Ub,wX),e(wX,BPo),e(Ub,IPo),e(y,NPo),e(y,Hb),e(Hb,A_e),e(A_e,qPo),e(Hb,jPo),e(Hb,AX),e(AX,DPo),e(Hb,GPo),e(y,OPo),e(y,Jb),e(Jb,L_e),e(L_e,VPo),e(Jb,XPo),e(Jb,LX),e(LX,zPo),e(Jb,QPo),e(y,WPo),e(y,Yb),e(Yb,y_e),e(y_e,UPo),e(Yb,HPo),e(Yb,yX),e(yX,JPo),e(Yb,YPo),e(y,KPo),e(y,Kb),e(Kb,x_e),e(x_e,ZPo),e(Kb,eBo),e(Kb,xX),e(xX,oBo),e(Kb,rBo),e(y,tBo),e(y,Zb),e(Zb,$_e),e($_e,aBo),e(Zb,nBo),e(Zb,$X),e($X,sBo),e(Zb,lBo),e(y,iBo),e(y,e2),e(e2,k_e),e(k_e,dBo),e(e2,cBo),e(e2,kX),e(kX,mBo),e(e2,fBo),e(y,gBo),e(y,o2),e(o2,S_e),e(S_e,hBo),e(o2,uBo),e(o2,SX),e(SX,pBo),e(o2,_Bo),e(y,bBo),e(y,r2),e(r2,R_e),e(R_e,vBo),e(r2,FBo),e(r2,RX),e(RX,TBo),e(r2,MBo),e(y,EBo),e(y,t2),e(t2,P_e),e(P_e,CBo),e(t2,wBo),e(t2,PX),e(PX,ABo),e(t2,LBo),e(y,yBo),e(y,a2),e(a2,B_e),e(B_e,xBo),e(a2,$Bo),e(a2,BX),e(BX,kBo),e(a2,SBo),e(y,RBo),e(y,n2),e(n2,I_e),e(I_e,PBo),e(n2,BBo),e(n2,IX),e(IX,IBo),e(n2,NBo),e(y,qBo),e(y,s2),e(s2,N_e),e(N_e,jBo),e(s2,DBo),e(s2,NX),e(NX,GBo),e(s2,OBo),e(y,VBo),e(y,l2),e(l2,q_e),e(q_e,XBo),e(l2,zBo),e(l2,qX),e(qX,QBo),e(l2,WBo),e(y,UBo),e(y,i2),e(i2,j_e),e(j_e,HBo),e(i2,JBo),e(i2,jX),e(jX,YBo),e(i2,KBo),e(y,ZBo),e(y,d2),e(d2,D_e),e(D_e,eIo),e(d2,oIo),e(d2,DX),e(DX,rIo),e(d2,tIo),e(y,aIo),e(y,c2),e(c2,G_e),e(G_e,nIo),e(c2,sIo),e(c2,GX),e(GX,lIo),e(c2,iIo),e(y,dIo),e(y,m2),e(m2,O_e),e(O_e,cIo),e(m2,mIo),e(m2,OX),e(OX,fIo),e(m2,gIo),e(Ze,hIo),e(Ze,f2),e(f2,uIo),e(f2,V_e),e(V_e,pIo),e(f2,_Io),e(f2,X_e),e(X_e,bIo),e(Ze,vIo),M(g2,Ze,null),b(m,GKe,_),b(m,Fd,_),e(Fd,h2),e(h2,z_e),M(hx,z_e,null),e(Fd,FIo),e(Fd,Q_e),e(Q_e,TIo),b(m,OKe,_),b(m,Bo,_),M(ux,Bo,null),e(Bo,MIo),e(Bo,Td),e(Td,EIo),e(Td,VX),e(VX,CIo),e(Td,wIo),e(Td,XX),e(XX,AIo),e(Td,LIo),e(Bo,yIo),e(Bo,px),e(px,xIo),e(px,W_e),e(W_e,$Io),e(px,kIo),e(Bo,SIo),e(Bo,bt),M(_x,bt,null),e(bt,RIo),e(bt,U_e),e(U_e,PIo),e(bt,BIo),e(bt,Md),e(Md,IIo),e(Md,H_e),e(H_e,NIo),e(Md,qIo),e(Md,zX),e(zX,jIo),e(Md,DIo),e(bt,GIo),M(u2,bt,null),e(Bo,OIo),e(Bo,eo),M(bx,eo,null),e(eo,VIo),e(eo,J_e),e(J_e,XIo),e(eo,zIo),e(eo,Ya),e(Ya,QIo),e(Ya,Y_e),e(Y_e,WIo),e(Ya,UIo),e(Ya,K_e),e(K_e,HIo),e(Ya,JIo),e(Ya,Z_e),e(Z_e,YIo),e(Ya,KIo),e(eo,ZIo),e(eo,G),e(G,p2),e(p2,ebe),e(ebe,eNo),e(p2,oNo),e(p2,QX),e(QX,rNo),e(p2,tNo),e(G,aNo),e(G,_2),e(_2,obe),e(obe,nNo),e(_2,sNo),e(_2,WX),e(WX,lNo),e(_2,iNo),e(G,dNo),e(G,b2),e(b2,rbe),e(rbe,cNo),e(b2,mNo),e(b2,UX),e(UX,fNo),e(b2,gNo),e(G,hNo),e(G,v2),e(v2,tbe),e(tbe,uNo),e(v2,pNo),e(v2,HX),e(HX,_No),e(v2,bNo),e(G,vNo),e(G,F2),e(F2,abe),e(abe,FNo),e(F2,TNo),e(F2,JX),e(JX,MNo),e(F2,ENo),e(G,CNo),e(G,T2),e(T2,nbe),e(nbe,wNo),e(T2,ANo),e(T2,YX),e(YX,LNo),e(T2,yNo),e(G,xNo),e(G,M2),e(M2,sbe),e(sbe,$No),e(M2,kNo),e(M2,KX),e(KX,SNo),e(M2,RNo),e(G,PNo),e(G,E2),e(E2,lbe),e(lbe,BNo),e(E2,INo),e(E2,ZX),e(ZX,NNo),e(E2,qNo),e(G,jNo),e(G,C2),e(C2,ibe),e(ibe,DNo),e(C2,GNo),e(C2,ez),e(ez,ONo),e(C2,VNo),e(G,XNo),e(G,w2),e(w2,dbe),e(dbe,zNo),e(w2,QNo),e(w2,oz),e(oz,WNo),e(w2,UNo),e(G,HNo),e(G,A2),e(A2,cbe),e(cbe,JNo),e(A2,YNo),e(A2,rz),e(rz,KNo),e(A2,ZNo),e(G,eqo),e(G,L2),e(L2,mbe),e(mbe,oqo),e(L2,rqo),e(L2,tz),e(tz,tqo),e(L2,aqo),e(G,nqo),e(G,y2),e(y2,fbe),e(fbe,sqo),e(y2,lqo),e(y2,az),e(az,iqo),e(y2,dqo),e(G,cqo),e(G,x2),e(x2,gbe),e(gbe,mqo),e(x2,fqo),e(x2,nz),e(nz,gqo),e(x2,hqo),e(G,uqo),e(G,$2),e($2,hbe),e(hbe,pqo),e($2,_qo),e($2,sz),e(sz,bqo),e($2,vqo),e(G,Fqo),e(G,k2),e(k2,ube),e(ube,Tqo),e(k2,Mqo),e(k2,lz),e(lz,Eqo),e(k2,Cqo),e(G,wqo),e(G,S2),e(S2,pbe),e(pbe,Aqo),e(S2,Lqo),e(S2,iz),e(iz,yqo),e(S2,xqo),e(G,$qo),e(G,R2),e(R2,_be),e(_be,kqo),e(R2,Sqo),e(R2,dz),e(dz,Rqo),e(R2,Pqo),e(G,Bqo),e(G,P2),e(P2,bbe),e(bbe,Iqo),e(P2,Nqo),e(P2,cz),e(cz,qqo),e(P2,jqo),e(G,Dqo),e(G,B2),e(B2,vbe),e(vbe,Gqo),e(B2,Oqo),e(B2,mz),e(mz,Vqo),e(B2,Xqo),e(G,zqo),e(G,I2),e(I2,Fbe),e(Fbe,Qqo),e(I2,Wqo),e(I2,fz),e(fz,Uqo),e(I2,Hqo),e(G,Jqo),e(G,N2),e(N2,Tbe),e(Tbe,Yqo),e(N2,Kqo),e(N2,gz),e(gz,Zqo),e(N2,ejo),e(G,ojo),e(G,q2),e(q2,Mbe),e(Mbe,rjo),e(q2,tjo),e(q2,hz),e(hz,ajo),e(q2,njo),e(G,sjo),e(G,j2),e(j2,Ebe),e(Ebe,ljo),e(j2,ijo),e(j2,uz),e(uz,djo),e(j2,cjo),e(G,mjo),e(G,D2),e(D2,Cbe),e(Cbe,fjo),e(D2,gjo),e(D2,pz),e(pz,hjo),e(D2,ujo),e(G,pjo),e(G,G2),e(G2,wbe),e(wbe,_jo),e(G2,bjo),e(G2,_z),e(_z,vjo),e(G2,Fjo),e(G,Tjo),e(G,O2),e(O2,Abe),e(Abe,Mjo),e(O2,Ejo),e(O2,bz),e(bz,Cjo),e(O2,wjo),e(G,Ajo),e(G,V2),e(V2,Lbe),e(Lbe,Ljo),e(V2,yjo),e(V2,vz),e(vz,xjo),e(V2,$jo),e(G,kjo),e(G,X2),e(X2,ybe),e(ybe,Sjo),e(X2,Rjo),e(X2,Fz),e(Fz,Pjo),e(X2,Bjo),e(G,Ijo),e(G,z2),e(z2,xbe),e(xbe,Njo),e(z2,qjo),e(z2,Tz),e(Tz,jjo),e(z2,Djo),e(G,Gjo),e(G,Q2),e(Q2,$be),e($be,Ojo),e(Q2,Vjo),e(Q2,Mz),e(Mz,Xjo),e(Q2,zjo),e(G,Qjo),e(G,W2),e(W2,kbe),e(kbe,Wjo),e(W2,Ujo),e(W2,Ez),e(Ez,Hjo),e(W2,Jjo),e(G,Yjo),e(G,U2),e(U2,Sbe),e(Sbe,Kjo),e(U2,Zjo),e(U2,Cz),e(Cz,eDo),e(U2,oDo),e(G,rDo),e(G,H2),e(H2,Rbe),e(Rbe,tDo),e(H2,aDo),e(H2,wz),e(wz,nDo),e(H2,sDo),e(G,lDo),e(G,J2),e(J2,Pbe),e(Pbe,iDo),e(J2,dDo),e(J2,Az),e(Az,cDo),e(J2,mDo),e(G,fDo),e(G,Y2),e(Y2,Bbe),e(Bbe,gDo),e(Y2,hDo),e(Y2,Lz),e(Lz,uDo),e(Y2,pDo),e(G,_Do),e(G,K2),e(K2,Ibe),e(Ibe,bDo),e(K2,vDo),e(K2,yz),e(yz,FDo),e(K2,TDo),e(G,MDo),e(G,Z2),e(Z2,Nbe),e(Nbe,EDo),e(Z2,CDo),e(Z2,xz),e(xz,wDo),e(Z2,ADo),e(G,LDo),e(G,e1),e(e1,qbe),e(qbe,yDo),e(e1,xDo),e(e1,$z),e($z,$Do),e(e1,kDo),e(G,SDo),e(G,o1),e(o1,jbe),e(jbe,RDo),e(o1,PDo),e(o1,kz),e(kz,BDo),e(o1,IDo),e(G,NDo),e(G,r1),e(r1,Dbe),e(Dbe,qDo),e(r1,jDo),e(r1,Sz),e(Sz,DDo),e(r1,GDo),e(G,ODo),e(G,t1),e(t1,Gbe),e(Gbe,VDo),e(t1,XDo),e(t1,Rz),e(Rz,zDo),e(t1,QDo),e(G,WDo),e(G,a1),e(a1,Obe),e(Obe,UDo),e(a1,HDo),e(a1,Pz),e(Pz,JDo),e(a1,YDo),e(G,KDo),e(G,n1),e(n1,Vbe),e(Vbe,ZDo),e(n1,eGo),e(n1,Bz),e(Bz,oGo),e(n1,rGo),e(G,tGo),e(G,s1),e(s1,Xbe),e(Xbe,aGo),e(s1,nGo),e(s1,Iz),e(Iz,sGo),e(s1,lGo),e(G,iGo),e(G,l1),e(l1,zbe),e(zbe,dGo),e(l1,cGo),e(l1,Nz),e(Nz,mGo),e(l1,fGo),e(G,gGo),e(G,i1),e(i1,Qbe),e(Qbe,hGo),e(i1,uGo),e(i1,qz),e(qz,pGo),e(i1,_Go),e(G,bGo),e(G,d1),e(d1,Wbe),e(Wbe,vGo),e(d1,FGo),e(d1,jz),e(jz,TGo),e(d1,MGo),e(eo,EGo),e(eo,c1),e(c1,CGo),e(c1,Ube),e(Ube,wGo),e(c1,AGo),e(c1,Hbe),e(Hbe,LGo),e(eo,yGo),M(m1,eo,null),b(m,VKe,_),b(m,Ed,_),e(Ed,f1),e(f1,Jbe),M(vx,Jbe,null),e(Ed,xGo),e(Ed,Ybe),e(Ybe,$Go),b(m,XKe,_),b(m,Io,_),M(Fx,Io,null),e(Io,kGo),e(Io,Cd),e(Cd,SGo),e(Cd,Dz),e(Dz,RGo),e(Cd,PGo),e(Cd,Gz),e(Gz,BGo),e(Cd,IGo),e(Io,NGo),e(Io,Tx),e(Tx,qGo),e(Tx,Kbe),e(Kbe,jGo),e(Tx,DGo),e(Io,GGo),e(Io,vt),M(Mx,vt,null),e(vt,OGo),e(vt,Zbe),e(Zbe,VGo),e(vt,XGo),e(vt,wd),e(wd,zGo),e(wd,e2e),e(e2e,QGo),e(wd,WGo),e(wd,Oz),e(Oz,UGo),e(wd,HGo),e(vt,JGo),M(g1,vt,null),e(Io,YGo),e(Io,oo),M(Ex,oo,null),e(oo,KGo),e(oo,o2e),e(o2e,ZGo),e(oo,eOo),e(oo,Ka),e(Ka,oOo),e(Ka,r2e),e(r2e,rOo),e(Ka,tOo),e(Ka,t2e),e(t2e,aOo),e(Ka,nOo),e(Ka,a2e),e(a2e,sOo),e(Ka,lOo),e(oo,iOo),e(oo,z),e(z,h1),e(h1,n2e),e(n2e,dOo),e(h1,cOo),e(h1,Vz),e(Vz,mOo),e(h1,fOo),e(z,gOo),e(z,u1),e(u1,s2e),e(s2e,hOo),e(u1,uOo),e(u1,Xz),e(Xz,pOo),e(u1,_Oo),e(z,bOo),e(z,p1),e(p1,l2e),e(l2e,vOo),e(p1,FOo),e(p1,zz),e(zz,TOo),e(p1,MOo),e(z,EOo),e(z,_1),e(_1,i2e),e(i2e,COo),e(_1,wOo),e(_1,Qz),e(Qz,AOo),e(_1,LOo),e(z,yOo),e(z,b1),e(b1,d2e),e(d2e,xOo),e(b1,$Oo),e(b1,Wz),e(Wz,kOo),e(b1,SOo),e(z,ROo),e(z,v1),e(v1,c2e),e(c2e,POo),e(v1,BOo),e(v1,Uz),e(Uz,IOo),e(v1,NOo),e(z,qOo),e(z,F1),e(F1,m2e),e(m2e,jOo),e(F1,DOo),e(F1,Hz),e(Hz,GOo),e(F1,OOo),e(z,VOo),e(z,T1),e(T1,f2e),e(f2e,XOo),e(T1,zOo),e(T1,Jz),e(Jz,QOo),e(T1,WOo),e(z,UOo),e(z,M1),e(M1,g2e),e(g2e,HOo),e(M1,JOo),e(M1,Yz),e(Yz,YOo),e(M1,KOo),e(z,ZOo),e(z,E1),e(E1,h2e),e(h2e,eVo),e(E1,oVo),e(E1,Kz),e(Kz,rVo),e(E1,tVo),e(z,aVo),e(z,C1),e(C1,u2e),e(u2e,nVo),e(C1,sVo),e(C1,Zz),e(Zz,lVo),e(C1,iVo),e(z,dVo),e(z,w1),e(w1,p2e),e(p2e,cVo),e(w1,mVo),e(w1,eQ),e(eQ,fVo),e(w1,gVo),e(z,hVo),e(z,A1),e(A1,_2e),e(_2e,uVo),e(A1,pVo),e(A1,oQ),e(oQ,_Vo),e(A1,bVo),e(z,vVo),e(z,L1),e(L1,b2e),e(b2e,FVo),e(L1,TVo),e(L1,rQ),e(rQ,MVo),e(L1,EVo),e(z,CVo),e(z,y1),e(y1,v2e),e(v2e,wVo),e(y1,AVo),e(y1,tQ),e(tQ,LVo),e(y1,yVo),e(z,xVo),e(z,x1),e(x1,F2e),e(F2e,$Vo),e(x1,kVo),e(x1,aQ),e(aQ,SVo),e(x1,RVo),e(z,PVo),e(z,$1),e($1,T2e),e(T2e,BVo),e($1,IVo),e($1,nQ),e(nQ,NVo),e($1,qVo),e(z,jVo),e(z,k1),e(k1,M2e),e(M2e,DVo),e(k1,GVo),e(k1,sQ),e(sQ,OVo),e(k1,VVo),e(z,XVo),e(z,S1),e(S1,E2e),e(E2e,zVo),e(S1,QVo),e(S1,lQ),e(lQ,WVo),e(S1,UVo),e(z,HVo),e(z,R1),e(R1,C2e),e(C2e,JVo),e(R1,YVo),e(R1,iQ),e(iQ,KVo),e(R1,ZVo),e(z,eXo),e(z,P1),e(P1,w2e),e(w2e,oXo),e(P1,rXo),e(P1,dQ),e(dQ,tXo),e(P1,aXo),e(z,nXo),e(z,B1),e(B1,A2e),e(A2e,sXo),e(B1,lXo),e(B1,cQ),e(cQ,iXo),e(B1,dXo),e(z,cXo),e(z,I1),e(I1,L2e),e(L2e,mXo),e(I1,fXo),e(I1,mQ),e(mQ,gXo),e(I1,hXo),e(z,uXo),e(z,N1),e(N1,y2e),e(y2e,pXo),e(N1,_Xo),e(N1,fQ),e(fQ,bXo),e(N1,vXo),e(z,FXo),e(z,q1),e(q1,x2e),e(x2e,TXo),e(q1,MXo),e(q1,gQ),e(gQ,EXo),e(q1,CXo),e(z,wXo),e(z,j1),e(j1,$2e),e($2e,AXo),e(j1,LXo),e(j1,hQ),e(hQ,yXo),e(j1,xXo),e(z,$Xo),e(z,D1),e(D1,k2e),e(k2e,kXo),e(D1,SXo),e(D1,uQ),e(uQ,RXo),e(D1,PXo),e(z,BXo),e(z,G1),e(G1,S2e),e(S2e,IXo),e(G1,NXo),e(G1,pQ),e(pQ,qXo),e(G1,jXo),e(z,DXo),e(z,O1),e(O1,R2e),e(R2e,GXo),e(O1,OXo),e(O1,_Q),e(_Q,VXo),e(O1,XXo),e(z,zXo),e(z,V1),e(V1,P2e),e(P2e,QXo),e(V1,WXo),e(V1,bQ),e(bQ,UXo),e(V1,HXo),e(z,JXo),e(z,X1),e(X1,B2e),e(B2e,YXo),e(X1,KXo),e(X1,vQ),e(vQ,ZXo),e(X1,ezo),e(z,ozo),e(z,z1),e(z1,I2e),e(I2e,rzo),e(z1,tzo),e(z1,FQ),e(FQ,azo),e(z1,nzo),e(z,szo),e(z,Q1),e(Q1,N2e),e(N2e,lzo),e(Q1,izo),e(Q1,TQ),e(TQ,dzo),e(Q1,czo),e(z,mzo),e(z,W1),e(W1,q2e),e(q2e,fzo),e(W1,gzo),e(W1,MQ),e(MQ,hzo),e(W1,uzo),e(z,pzo),e(z,U1),e(U1,j2e),e(j2e,_zo),e(U1,bzo),e(U1,EQ),e(EQ,vzo),e(U1,Fzo),e(z,Tzo),e(z,H1),e(H1,D2e),e(D2e,Mzo),e(H1,Ezo),e(H1,CQ),e(CQ,Czo),e(H1,wzo),e(z,Azo),e(z,J1),e(J1,G2e),e(G2e,Lzo),e(J1,yzo),e(J1,wQ),e(wQ,xzo),e(J1,$zo),e(z,kzo),e(z,Y1),e(Y1,O2e),e(O2e,Szo),e(Y1,Rzo),e(Y1,AQ),e(AQ,Pzo),e(Y1,Bzo),e(z,Izo),e(z,K1),e(K1,V2e),e(V2e,Nzo),e(K1,qzo),e(K1,LQ),e(LQ,jzo),e(K1,Dzo),e(z,Gzo),e(z,Z1),e(Z1,X2e),e(X2e,Ozo),e(Z1,Vzo),e(Z1,yQ),e(yQ,Xzo),e(Z1,zzo),e(z,Qzo),e(z,ev),e(ev,z2e),e(z2e,Wzo),e(ev,Uzo),e(ev,xQ),e(xQ,Hzo),e(ev,Jzo),e(z,Yzo),e(z,ov),e(ov,Q2e),e(Q2e,Kzo),e(ov,Zzo),e(ov,$Q),e($Q,eQo),e(ov,oQo),e(oo,rQo),e(oo,rv),e(rv,tQo),e(rv,W2e),e(W2e,aQo),e(rv,nQo),e(rv,U2e),e(U2e,sQo),e(oo,lQo),M(tv,oo,null),b(m,zKe,_),b(m,Ad,_),e(Ad,av),e(av,H2e),M(Cx,H2e,null),e(Ad,iQo),e(Ad,J2e),e(J2e,dQo),b(m,QKe,_),b(m,No,_),M(wx,No,null),e(No,cQo),e(No,Ld),e(Ld,mQo),e(Ld,kQ),e(kQ,fQo),e(Ld,gQo),e(Ld,SQ),e(SQ,hQo),e(Ld,uQo),e(No,pQo),e(No,Ax),e(Ax,_Qo),e(Ax,Y2e),e(Y2e,bQo),e(Ax,vQo),e(No,FQo),e(No,Ft),M(Lx,Ft,null),e(Ft,TQo),e(Ft,K2e),e(K2e,MQo),e(Ft,EQo),e(Ft,yd),e(yd,CQo),e(yd,Z2e),e(Z2e,wQo),e(yd,AQo),e(yd,RQ),e(RQ,LQo),e(yd,yQo),e(Ft,xQo),M(nv,Ft,null),e(No,$Qo),e(No,ro),M(yx,ro,null),e(ro,kQo),e(ro,e1e),e(e1e,SQo),e(ro,RQo),e(ro,Za),e(Za,PQo),e(Za,o1e),e(o1e,BQo),e(Za,IQo),e(Za,r1e),e(r1e,NQo),e(Za,qQo),e(Za,t1e),e(t1e,jQo),e(Za,DQo),e(ro,GQo),e(ro,H),e(H,sv),e(sv,a1e),e(a1e,OQo),e(sv,VQo),e(sv,PQ),e(PQ,XQo),e(sv,zQo),e(H,QQo),e(H,lv),e(lv,n1e),e(n1e,WQo),e(lv,UQo),e(lv,BQ),e(BQ,HQo),e(lv,JQo),e(H,YQo),e(H,iv),e(iv,s1e),e(s1e,KQo),e(iv,ZQo),e(iv,IQ),e(IQ,eWo),e(iv,oWo),e(H,rWo),e(H,dv),e(dv,l1e),e(l1e,tWo),e(dv,aWo),e(dv,NQ),e(NQ,nWo),e(dv,sWo),e(H,lWo),e(H,cv),e(cv,i1e),e(i1e,iWo),e(cv,dWo),e(cv,qQ),e(qQ,cWo),e(cv,mWo),e(H,fWo),e(H,mv),e(mv,d1e),e(d1e,gWo),e(mv,hWo),e(mv,jQ),e(jQ,uWo),e(mv,pWo),e(H,_Wo),e(H,fv),e(fv,c1e),e(c1e,bWo),e(fv,vWo),e(fv,DQ),e(DQ,FWo),e(fv,TWo),e(H,MWo),e(H,gv),e(gv,m1e),e(m1e,EWo),e(gv,CWo),e(gv,GQ),e(GQ,wWo),e(gv,AWo),e(H,LWo),e(H,hv),e(hv,f1e),e(f1e,yWo),e(hv,xWo),e(hv,OQ),e(OQ,$Wo),e(hv,kWo),e(H,SWo),e(H,uv),e(uv,g1e),e(g1e,RWo),e(uv,PWo),e(uv,VQ),e(VQ,BWo),e(uv,IWo),e(H,NWo),e(H,pv),e(pv,h1e),e(h1e,qWo),e(pv,jWo),e(pv,XQ),e(XQ,DWo),e(pv,GWo),e(H,OWo),e(H,_v),e(_v,u1e),e(u1e,VWo),e(_v,XWo),e(_v,zQ),e(zQ,zWo),e(_v,QWo),e(H,WWo),e(H,bv),e(bv,p1e),e(p1e,UWo),e(bv,HWo),e(bv,QQ),e(QQ,JWo),e(bv,YWo),e(H,KWo),e(H,vv),e(vv,_1e),e(_1e,ZWo),e(vv,eUo),e(vv,WQ),e(WQ,oUo),e(vv,rUo),e(H,tUo),e(H,Fv),e(Fv,b1e),e(b1e,aUo),e(Fv,nUo),e(Fv,UQ),e(UQ,sUo),e(Fv,lUo),e(H,iUo),e(H,Tv),e(Tv,v1e),e(v1e,dUo),e(Tv,cUo),e(Tv,HQ),e(HQ,mUo),e(Tv,fUo),e(H,gUo),e(H,Mv),e(Mv,F1e),e(F1e,hUo),e(Mv,uUo),e(Mv,JQ),e(JQ,pUo),e(Mv,_Uo),e(H,bUo),e(H,Ev),e(Ev,T1e),e(T1e,vUo),e(Ev,FUo),e(Ev,YQ),e(YQ,TUo),e(Ev,MUo),e(H,EUo),e(H,Cv),e(Cv,M1e),e(M1e,CUo),e(Cv,wUo),e(Cv,KQ),e(KQ,AUo),e(Cv,LUo),e(H,yUo),e(H,wv),e(wv,E1e),e(E1e,xUo),e(wv,$Uo),e(wv,ZQ),e(ZQ,kUo),e(wv,SUo),e(H,RUo),e(H,Av),e(Av,C1e),e(C1e,PUo),e(Av,BUo),e(Av,eW),e(eW,IUo),e(Av,NUo),e(H,qUo),e(H,Lv),e(Lv,w1e),e(w1e,jUo),e(Lv,DUo),e(Lv,oW),e(oW,GUo),e(Lv,OUo),e(H,VUo),e(H,yv),e(yv,A1e),e(A1e,XUo),e(yv,zUo),e(yv,rW),e(rW,QUo),e(yv,WUo),e(H,UUo),e(H,xv),e(xv,L1e),e(L1e,HUo),e(xv,JUo),e(xv,tW),e(tW,YUo),e(xv,KUo),e(H,ZUo),e(H,$v),e($v,y1e),e(y1e,eHo),e($v,oHo),e($v,aW),e(aW,rHo),e($v,tHo),e(H,aHo),e(H,kv),e(kv,x1e),e(x1e,nHo),e(kv,sHo),e(kv,nW),e(nW,lHo),e(kv,iHo),e(H,dHo),e(H,Sv),e(Sv,$1e),e($1e,cHo),e(Sv,mHo),e(Sv,sW),e(sW,fHo),e(Sv,gHo),e(H,hHo),e(H,Rv),e(Rv,k1e),e(k1e,uHo),e(Rv,pHo),e(Rv,lW),e(lW,_Ho),e(Rv,bHo),e(H,vHo),e(H,Pv),e(Pv,S1e),e(S1e,FHo),e(Pv,THo),e(Pv,iW),e(iW,MHo),e(Pv,EHo),e(H,CHo),e(H,Bv),e(Bv,R1e),e(R1e,wHo),e(Bv,AHo),e(Bv,dW),e(dW,LHo),e(Bv,yHo),e(H,xHo),e(H,Iv),e(Iv,P1e),e(P1e,$Ho),e(Iv,kHo),e(Iv,cW),e(cW,SHo),e(Iv,RHo),e(H,PHo),e(H,Nv),e(Nv,B1e),e(B1e,BHo),e(Nv,IHo),e(Nv,mW),e(mW,NHo),e(Nv,qHo),e(H,jHo),e(H,qv),e(qv,I1e),e(I1e,DHo),e(qv,GHo),e(qv,fW),e(fW,OHo),e(qv,VHo),e(H,XHo),e(H,jv),e(jv,N1e),e(N1e,zHo),e(jv,QHo),e(jv,gW),e(gW,WHo),e(jv,UHo),e(H,HHo),e(H,Dv),e(Dv,q1e),e(q1e,JHo),e(Dv,YHo),e(Dv,j1e),e(j1e,KHo),e(Dv,ZHo),e(H,eJo),e(H,Gv),e(Gv,D1e),e(D1e,oJo),e(Gv,rJo),e(Gv,hW),e(hW,tJo),e(Gv,aJo),e(H,nJo),e(H,Ov),e(Ov,G1e),e(G1e,sJo),e(Ov,lJo),e(Ov,uW),e(uW,iJo),e(Ov,dJo),e(H,cJo),e(H,Vv),e(Vv,O1e),e(O1e,mJo),e(Vv,fJo),e(Vv,pW),e(pW,gJo),e(Vv,hJo),e(H,uJo),e(H,Xv),e(Xv,V1e),e(V1e,pJo),e(Xv,_Jo),e(Xv,_W),e(_W,bJo),e(Xv,vJo),e(ro,FJo),e(ro,zv),e(zv,TJo),e(zv,X1e),e(X1e,MJo),e(zv,EJo),e(zv,z1e),e(z1e,CJo),e(ro,wJo),M(Qv,ro,null),b(m,WKe,_),b(m,xd,_),e(xd,Wv),e(Wv,Q1e),M(xx,Q1e,null),e(xd,AJo),e(xd,W1e),e(W1e,LJo),b(m,UKe,_),b(m,qo,_),M($x,qo,null),e(qo,yJo),e(qo,$d),e($d,xJo),e($d,bW),e(bW,$Jo),e($d,kJo),e($d,vW),e(vW,SJo),e($d,RJo),e(qo,PJo),e(qo,kx),e(kx,BJo),e(kx,U1e),e(U1e,IJo),e(kx,NJo),e(qo,qJo),e(qo,Tt),M(Sx,Tt,null),e(Tt,jJo),e(Tt,H1e),e(H1e,DJo),e(Tt,GJo),e(Tt,kd),e(kd,OJo),e(kd,J1e),e(J1e,VJo),e(kd,XJo),e(kd,FW),e(FW,zJo),e(kd,QJo),e(Tt,WJo),M(Uv,Tt,null),e(qo,UJo),e(qo,to),M(Rx,to,null),e(to,HJo),e(to,Y1e),e(Y1e,JJo),e(to,YJo),e(to,en),e(en,KJo),e(en,K1e),e(K1e,ZJo),e(en,eYo),e(en,Z1e),e(Z1e,oYo),e(en,rYo),e(en,eve),e(eve,tYo),e(en,aYo),e(to,nYo),e(to,me),e(me,Hv),e(Hv,ove),e(ove,sYo),e(Hv,lYo),e(Hv,TW),e(TW,iYo),e(Hv,dYo),e(me,cYo),e(me,Jv),e(Jv,rve),e(rve,mYo),e(Jv,fYo),e(Jv,MW),e(MW,gYo),e(Jv,hYo),e(me,uYo),e(me,Yv),e(Yv,tve),e(tve,pYo),e(Yv,_Yo),e(Yv,EW),e(EW,bYo),e(Yv,vYo),e(me,FYo),e(me,Kv),e(Kv,ave),e(ave,TYo),e(Kv,MYo),e(Kv,CW),e(CW,EYo),e(Kv,CYo),e(me,wYo),e(me,Zv),e(Zv,nve),e(nve,AYo),e(Zv,LYo),e(Zv,wW),e(wW,yYo),e(Zv,xYo),e(me,$Yo),e(me,eF),e(eF,sve),e(sve,kYo),e(eF,SYo),e(eF,AW),e(AW,RYo),e(eF,PYo),e(me,BYo),e(me,oF),e(oF,lve),e(lve,IYo),e(oF,NYo),e(oF,LW),e(LW,qYo),e(oF,jYo),e(me,DYo),e(me,rF),e(rF,ive),e(ive,GYo),e(rF,OYo),e(rF,yW),e(yW,VYo),e(rF,XYo),e(me,zYo),e(me,tF),e(tF,dve),e(dve,QYo),e(tF,WYo),e(tF,xW),e(xW,UYo),e(tF,HYo),e(me,JYo),e(me,aF),e(aF,cve),e(cve,YYo),e(aF,KYo),e(aF,$W),e($W,ZYo),e(aF,eKo),e(me,oKo),e(me,nF),e(nF,mve),e(mve,rKo),e(nF,tKo),e(nF,kW),e(kW,aKo),e(nF,nKo),e(me,sKo),e(me,sF),e(sF,fve),e(fve,lKo),e(sF,iKo),e(sF,SW),e(SW,dKo),e(sF,cKo),e(me,mKo),e(me,lF),e(lF,gve),e(gve,fKo),e(lF,gKo),e(lF,RW),e(RW,hKo),e(lF,uKo),e(me,pKo),e(me,iF),e(iF,hve),e(hve,_Ko),e(iF,bKo),e(iF,PW),e(PW,vKo),e(iF,FKo),e(me,TKo),e(me,dF),e(dF,uve),e(uve,MKo),e(dF,EKo),e(dF,BW),e(BW,CKo),e(dF,wKo),e(me,AKo),e(me,cF),e(cF,pve),e(pve,LKo),e(cF,yKo),e(cF,IW),e(IW,xKo),e(cF,$Ko),e(me,kKo),e(me,mF),e(mF,_ve),e(_ve,SKo),e(mF,RKo),e(mF,NW),e(NW,PKo),e(mF,BKo),e(me,IKo),e(me,fF),e(fF,bve),e(bve,NKo),e(fF,qKo),e(fF,qW),e(qW,jKo),e(fF,DKo),e(me,GKo),e(me,gF),e(gF,vve),e(vve,OKo),e(gF,VKo),e(gF,jW),e(jW,XKo),e(gF,zKo),e(me,QKo),e(me,hF),e(hF,Fve),e(Fve,WKo),e(hF,UKo),e(hF,DW),e(DW,HKo),e(hF,JKo),e(to,YKo),e(to,uF),e(uF,KKo),e(uF,Tve),e(Tve,ZKo),e(uF,eZo),e(uF,Mve),e(Mve,oZo),e(to,rZo),M(pF,to,null),b(m,HKe,_),b(m,Sd,_),e(Sd,_F),e(_F,Eve),M(Px,Eve,null),e(Sd,tZo),e(Sd,Cve),e(Cve,aZo),b(m,JKe,_),b(m,jo,_),M(Bx,jo,null),e(jo,nZo),e(jo,Rd),e(Rd,sZo),e(Rd,GW),e(GW,lZo),e(Rd,iZo),e(Rd,OW),e(OW,dZo),e(Rd,cZo),e(jo,mZo),e(jo,Ix),e(Ix,fZo),e(Ix,wve),e(wve,gZo),e(Ix,hZo),e(jo,uZo),e(jo,Mt),M(Nx,Mt,null),e(Mt,pZo),e(Mt,Ave),e(Ave,_Zo),e(Mt,bZo),e(Mt,Pd),e(Pd,vZo),e(Pd,Lve),e(Lve,FZo),e(Pd,TZo),e(Pd,VW),e(VW,MZo),e(Pd,EZo),e(Mt,CZo),M(bF,Mt,null),e(jo,wZo),e(jo,ao),M(qx,ao,null),e(ao,AZo),e(ao,yve),e(yve,LZo),e(ao,yZo),e(ao,on),e(on,xZo),e(on,xve),e(xve,$Zo),e(on,kZo),e(on,$ve),e($ve,SZo),e(on,RZo),e(on,kve),e(kve,PZo),e(on,BZo),e(ao,IZo),e(ao,q),e(q,vF),e(vF,Sve),e(Sve,NZo),e(vF,qZo),e(vF,XW),e(XW,jZo),e(vF,DZo),e(q,GZo),e(q,FF),e(FF,Rve),e(Rve,OZo),e(FF,VZo),e(FF,zW),e(zW,XZo),e(FF,zZo),e(q,QZo),e(q,TF),e(TF,Pve),e(Pve,WZo),e(TF,UZo),e(TF,QW),e(QW,HZo),e(TF,JZo),e(q,YZo),e(q,MF),e(MF,Bve),e(Bve,KZo),e(MF,ZZo),e(MF,WW),e(WW,eer),e(MF,oer),e(q,rer),e(q,EF),e(EF,Ive),e(Ive,ter),e(EF,aer),e(EF,UW),e(UW,ner),e(EF,ser),e(q,ler),e(q,CF),e(CF,Nve),e(Nve,ier),e(CF,der),e(CF,HW),e(HW,cer),e(CF,mer),e(q,fer),e(q,wF),e(wF,qve),e(qve,ger),e(wF,her),e(wF,JW),e(JW,uer),e(wF,per),e(q,_er),e(q,AF),e(AF,jve),e(jve,ber),e(AF,ver),e(AF,YW),e(YW,Fer),e(AF,Ter),e(q,Mer),e(q,LF),e(LF,Dve),e(Dve,Eer),e(LF,Cer),e(LF,KW),e(KW,wer),e(LF,Aer),e(q,Ler),e(q,yF),e(yF,Gve),e(Gve,yer),e(yF,xer),e(yF,ZW),e(ZW,$er),e(yF,ker),e(q,Ser),e(q,xF),e(xF,Ove),e(Ove,Rer),e(xF,Per),e(xF,eU),e(eU,Ber),e(xF,Ier),e(q,Ner),e(q,$F),e($F,Vve),e(Vve,qer),e($F,jer),e($F,oU),e(oU,Der),e($F,Ger),e(q,Oer),e(q,kF),e(kF,Xve),e(Xve,Ver),e(kF,Xer),e(kF,rU),e(rU,zer),e(kF,Qer),e(q,Wer),e(q,SF),e(SF,zve),e(zve,Uer),e(SF,Her),e(SF,tU),e(tU,Jer),e(SF,Yer),e(q,Ker),e(q,RF),e(RF,Qve),e(Qve,Zer),e(RF,eor),e(RF,aU),e(aU,oor),e(RF,ror),e(q,tor),e(q,PF),e(PF,Wve),e(Wve,aor),e(PF,nor),e(PF,nU),e(nU,sor),e(PF,lor),e(q,ior),e(q,BF),e(BF,Uve),e(Uve,dor),e(BF,cor),e(BF,sU),e(sU,mor),e(BF,gor),e(q,hor),e(q,IF),e(IF,Hve),e(Hve,uor),e(IF,por),e(IF,lU),e(lU,_or),e(IF,bor),e(q,vor),e(q,NF),e(NF,Jve),e(Jve,For),e(NF,Tor),e(NF,iU),e(iU,Mor),e(NF,Eor),e(q,Cor),e(q,qF),e(qF,Yve),e(Yve,wor),e(qF,Aor),e(qF,dU),e(dU,Lor),e(qF,yor),e(q,xor),e(q,jF),e(jF,Kve),e(Kve,$or),e(jF,kor),e(jF,cU),e(cU,Sor),e(jF,Ror),e(q,Por),e(q,DF),e(DF,Zve),e(Zve,Bor),e(DF,Ior),e(DF,mU),e(mU,Nor),e(DF,qor),e(q,jor),e(q,GF),e(GF,eFe),e(eFe,Dor),e(GF,Gor),e(GF,fU),e(fU,Oor),e(GF,Vor),e(q,Xor),e(q,OF),e(OF,oFe),e(oFe,zor),e(OF,Qor),e(OF,gU),e(gU,Wor),e(OF,Uor),e(q,Hor),e(q,VF),e(VF,rFe),e(rFe,Jor),e(VF,Yor),e(VF,hU),e(hU,Kor),e(VF,Zor),e(q,err),e(q,XF),e(XF,tFe),e(tFe,orr),e(XF,rrr),e(XF,uU),e(uU,trr),e(XF,arr),e(q,nrr),e(q,zF),e(zF,aFe),e(aFe,srr),e(zF,lrr),e(zF,pU),e(pU,irr),e(zF,drr),e(q,crr),e(q,QF),e(QF,nFe),e(nFe,mrr),e(QF,frr),e(QF,_U),e(_U,grr),e(QF,hrr),e(q,urr),e(q,WF),e(WF,sFe),e(sFe,prr),e(WF,_rr),e(WF,bU),e(bU,brr),e(WF,vrr),e(q,Frr),e(q,UF),e(UF,lFe),e(lFe,Trr),e(UF,Mrr),e(UF,vU),e(vU,Err),e(UF,Crr),e(q,wrr),e(q,HF),e(HF,iFe),e(iFe,Arr),e(HF,Lrr),e(HF,FU),e(FU,yrr),e(HF,xrr),e(q,$rr),e(q,JF),e(JF,dFe),e(dFe,krr),e(JF,Srr),e(JF,TU),e(TU,Rrr),e(JF,Prr),e(q,Brr),e(q,YF),e(YF,cFe),e(cFe,Irr),e(YF,Nrr),e(YF,MU),e(MU,qrr),e(YF,jrr),e(q,Drr),e(q,KF),e(KF,mFe),e(mFe,Grr),e(KF,Orr),e(KF,EU),e(EU,Vrr),e(KF,Xrr),e(q,zrr),e(q,ZF),e(ZF,fFe),e(fFe,Qrr),e(ZF,Wrr),e(ZF,CU),e(CU,Urr),e(ZF,Hrr),e(q,Jrr),e(q,eT),e(eT,gFe),e(gFe,Yrr),e(eT,Krr),e(eT,wU),e(wU,Zrr),e(eT,etr),e(q,otr),e(q,oT),e(oT,hFe),e(hFe,rtr),e(oT,ttr),e(oT,AU),e(AU,atr),e(oT,ntr),e(q,str),e(q,rT),e(rT,uFe),e(uFe,ltr),e(rT,itr),e(rT,LU),e(LU,dtr),e(rT,ctr),e(q,mtr),e(q,tT),e(tT,pFe),e(pFe,ftr),e(tT,gtr),e(tT,yU),e(yU,htr),e(tT,utr),e(q,ptr),e(q,aT),e(aT,_Fe),e(_Fe,_tr),e(aT,btr),e(aT,xU),e(xU,vtr),e(aT,Ftr),e(q,Ttr),e(q,nT),e(nT,bFe),e(bFe,Mtr),e(nT,Etr),e(nT,$U),e($U,Ctr),e(nT,wtr),e(q,Atr),e(q,sT),e(sT,vFe),e(vFe,Ltr),e(sT,ytr),e(sT,kU),e(kU,xtr),e(sT,$tr),e(q,ktr),e(q,lT),e(lT,FFe),e(FFe,Str),e(lT,Rtr),e(lT,SU),e(SU,Ptr),e(lT,Btr),e(q,Itr),e(q,iT),e(iT,TFe),e(TFe,Ntr),e(iT,qtr),e(iT,RU),e(RU,jtr),e(iT,Dtr),e(q,Gtr),e(q,dT),e(dT,MFe),e(MFe,Otr),e(dT,Vtr),e(dT,PU),e(PU,Xtr),e(dT,ztr),e(q,Qtr),e(q,cT),e(cT,EFe),e(EFe,Wtr),e(cT,Utr),e(cT,BU),e(BU,Htr),e(cT,Jtr),e(q,Ytr),e(q,mT),e(mT,CFe),e(CFe,Ktr),e(mT,Ztr),e(mT,IU),e(IU,ear),e(mT,oar),e(q,rar),e(q,fT),e(fT,wFe),e(wFe,tar),e(fT,aar),e(fT,NU),e(NU,nar),e(fT,sar),e(q,lar),e(q,gT),e(gT,AFe),e(AFe,iar),e(gT,dar),e(gT,qU),e(qU,car),e(gT,mar),e(q,far),e(q,hT),e(hT,LFe),e(LFe,gar),e(hT,har),e(hT,jU),e(jU,uar),e(hT,par),e(q,_ar),e(q,uT),e(uT,yFe),e(yFe,bar),e(uT,Far),e(uT,DU),e(DU,Tar),e(uT,Mar),e(q,Ear),e(q,pT),e(pT,xFe),e(xFe,Car),e(pT,war),e(pT,GU),e(GU,Aar),e(pT,Lar),e(q,yar),e(q,_T),e(_T,$Fe),e($Fe,xar),e(_T,$ar),e(_T,OU),e(OU,kar),e(_T,Sar),e(ao,Rar),e(ao,bT),e(bT,Par),e(bT,kFe),e(kFe,Bar),e(bT,Iar),e(bT,SFe),e(SFe,Nar),e(ao,qar),M(vT,ao,null),b(m,YKe,_),b(m,Bd,_),e(Bd,FT),e(FT,RFe),M(jx,RFe,null),e(Bd,jar),e(Bd,PFe),e(PFe,Dar),b(m,KKe,_),b(m,Do,_),M(Dx,Do,null),e(Do,Gar),e(Do,Id),e(Id,Oar),e(Id,VU),e(VU,Var),e(Id,Xar),e(Id,XU),e(XU,zar),e(Id,Qar),e(Do,War),e(Do,Gx),e(Gx,Uar),e(Gx,BFe),e(BFe,Har),e(Gx,Jar),e(Do,Yar),e(Do,Et),M(Ox,Et,null),e(Et,Kar),e(Et,IFe),e(IFe,Zar),e(Et,enr),e(Et,Nd),e(Nd,onr),e(Nd,NFe),e(NFe,rnr),e(Nd,tnr),e(Nd,zU),e(zU,anr),e(Nd,nnr),e(Et,snr),M(TT,Et,null),e(Do,lnr),e(Do,no),M(Vx,no,null),e(no,inr),e(no,qFe),e(qFe,dnr),e(no,cnr),e(no,rn),e(rn,mnr),e(rn,jFe),e(jFe,fnr),e(rn,gnr),e(rn,DFe),e(DFe,hnr),e(rn,unr),e(rn,GFe),e(GFe,pnr),e(rn,_nr),e(no,bnr),e(no,Z),e(Z,MT),e(MT,OFe),e(OFe,vnr),e(MT,Fnr),e(MT,QU),e(QU,Tnr),e(MT,Mnr),e(Z,Enr),e(Z,ET),e(ET,VFe),e(VFe,Cnr),e(ET,wnr),e(ET,WU),e(WU,Anr),e(ET,Lnr),e(Z,ynr),e(Z,CT),e(CT,XFe),e(XFe,xnr),e(CT,$nr),e(CT,UU),e(UU,knr),e(CT,Snr),e(Z,Rnr),e(Z,wT),e(wT,zFe),e(zFe,Pnr),e(wT,Bnr),e(wT,HU),e(HU,Inr),e(wT,Nnr),e(Z,qnr),e(Z,AT),e(AT,QFe),e(QFe,jnr),e(AT,Dnr),e(AT,JU),e(JU,Gnr),e(AT,Onr),e(Z,Vnr),e(Z,LT),e(LT,WFe),e(WFe,Xnr),e(LT,znr),e(LT,YU),e(YU,Qnr),e(LT,Wnr),e(Z,Unr),e(Z,yT),e(yT,UFe),e(UFe,Hnr),e(yT,Jnr),e(yT,KU),e(KU,Ynr),e(yT,Knr),e(Z,Znr),e(Z,xT),e(xT,HFe),e(HFe,esr),e(xT,osr),e(xT,ZU),e(ZU,rsr),e(xT,tsr),e(Z,asr),e(Z,$T),e($T,JFe),e(JFe,nsr),e($T,ssr),e($T,eH),e(eH,lsr),e($T,isr),e(Z,dsr),e(Z,kT),e(kT,YFe),e(YFe,csr),e(kT,msr),e(kT,oH),e(oH,fsr),e(kT,gsr),e(Z,hsr),e(Z,ST),e(ST,KFe),e(KFe,usr),e(ST,psr),e(ST,rH),e(rH,_sr),e(ST,bsr),e(Z,vsr),e(Z,RT),e(RT,ZFe),e(ZFe,Fsr),e(RT,Tsr),e(RT,tH),e(tH,Msr),e(RT,Esr),e(Z,Csr),e(Z,PT),e(PT,eTe),e(eTe,wsr),e(PT,Asr),e(PT,aH),e(aH,Lsr),e(PT,ysr),e(Z,xsr),e(Z,BT),e(BT,oTe),e(oTe,$sr),e(BT,ksr),e(BT,nH),e(nH,Ssr),e(BT,Rsr),e(Z,Psr),e(Z,IT),e(IT,rTe),e(rTe,Bsr),e(IT,Isr),e(IT,sH),e(sH,Nsr),e(IT,qsr),e(Z,jsr),e(Z,NT),e(NT,tTe),e(tTe,Dsr),e(NT,Gsr),e(NT,lH),e(lH,Osr),e(NT,Vsr),e(Z,Xsr),e(Z,qT),e(qT,aTe),e(aTe,zsr),e(qT,Qsr),e(qT,iH),e(iH,Wsr),e(qT,Usr),e(Z,Hsr),e(Z,jT),e(jT,nTe),e(nTe,Jsr),e(jT,Ysr),e(jT,dH),e(dH,Ksr),e(jT,Zsr),e(Z,elr),e(Z,DT),e(DT,sTe),e(sTe,olr),e(DT,rlr),e(DT,cH),e(cH,tlr),e(DT,alr),e(Z,nlr),e(Z,GT),e(GT,lTe),e(lTe,slr),e(GT,llr),e(GT,mH),e(mH,ilr),e(GT,dlr),e(Z,clr),e(Z,OT),e(OT,iTe),e(iTe,mlr),e(OT,flr),e(OT,fH),e(fH,glr),e(OT,hlr),e(Z,ulr),e(Z,VT),e(VT,dTe),e(dTe,plr),e(VT,_lr),e(VT,gH),e(gH,blr),e(VT,vlr),e(Z,Flr),e(Z,XT),e(XT,cTe),e(cTe,Tlr),e(XT,Mlr),e(XT,hH),e(hH,Elr),e(XT,Clr),e(Z,wlr),e(Z,zT),e(zT,mTe),e(mTe,Alr),e(zT,Llr),e(zT,uH),e(uH,ylr),e(zT,xlr),e(Z,$lr),e(Z,QT),e(QT,fTe),e(fTe,klr),e(QT,Slr),e(QT,pH),e(pH,Rlr),e(QT,Plr),e(Z,Blr),e(Z,WT),e(WT,gTe),e(gTe,Ilr),e(WT,Nlr),e(WT,_H),e(_H,qlr),e(WT,jlr),e(Z,Dlr),e(Z,UT),e(UT,hTe),e(hTe,Glr),e(UT,Olr),e(UT,bH),e(bH,Vlr),e(UT,Xlr),e(Z,zlr),e(Z,HT),e(HT,uTe),e(uTe,Qlr),e(HT,Wlr),e(HT,vH),e(vH,Ulr),e(HT,Hlr),e(Z,Jlr),e(Z,JT),e(JT,pTe),e(pTe,Ylr),e(JT,Klr),e(JT,FH),e(FH,Zlr),e(JT,eir),e(Z,oir),e(Z,YT),e(YT,_Te),e(_Te,rir),e(YT,tir),e(YT,TH),e(TH,air),e(YT,nir),e(Z,sir),e(Z,KT),e(KT,bTe),e(bTe,lir),e(KT,iir),e(KT,MH),e(MH,dir),e(KT,cir),e(Z,mir),e(Z,ZT),e(ZT,vTe),e(vTe,fir),e(ZT,gir),e(ZT,EH),e(EH,hir),e(ZT,uir),e(no,pir),e(no,eM),e(eM,_ir),e(eM,FTe),e(FTe,bir),e(eM,vir),e(eM,TTe),e(TTe,Fir),e(no,Tir),M(oM,no,null),b(m,ZKe,_),b(m,qd,_),e(qd,rM),e(rM,MTe),M(Xx,MTe,null),e(qd,Mir),e(qd,ETe),e(ETe,Eir),b(m,eZe,_),b(m,Go,_),M(zx,Go,null),e(Go,Cir),e(Go,jd),e(jd,wir),e(jd,CH),e(CH,Air),e(jd,Lir),e(jd,wH),e(wH,yir),e(jd,xir),e(Go,$ir),e(Go,Qx),e(Qx,kir),e(Qx,CTe),e(CTe,Sir),e(Qx,Rir),e(Go,Pir),e(Go,Ct),M(Wx,Ct,null),e(Ct,Bir),e(Ct,wTe),e(wTe,Iir),e(Ct,Nir),e(Ct,Dd),e(Dd,qir),e(Dd,ATe),e(ATe,jir),e(Dd,Dir),e(Dd,AH),e(AH,Gir),e(Dd,Oir),e(Ct,Vir),M(tM,Ct,null),e(Go,Xir),e(Go,so),M(Ux,so,null),e(so,zir),e(so,LTe),e(LTe,Qir),e(so,Wir),e(so,tn),e(tn,Uir),e(tn,yTe),e(yTe,Hir),e(tn,Jir),e(tn,xTe),e(xTe,Yir),e(tn,Kir),e(tn,$Te),e($Te,Zir),e(tn,edr),e(so,odr),e(so,Ue),e(Ue,aM),e(aM,kTe),e(kTe,rdr),e(aM,tdr),e(aM,LH),e(LH,adr),e(aM,ndr),e(Ue,sdr),e(Ue,nM),e(nM,STe),e(STe,ldr),e(nM,idr),e(nM,yH),e(yH,ddr),e(nM,cdr),e(Ue,mdr),e(Ue,sM),e(sM,RTe),e(RTe,fdr),e(sM,gdr),e(sM,xH),e(xH,hdr),e(sM,udr),e(Ue,pdr),e(Ue,lM),e(lM,PTe),e(PTe,_dr),e(lM,bdr),e(lM,$H),e($H,vdr),e(lM,Fdr),e(Ue,Tdr),e(Ue,iM),e(iM,BTe),e(BTe,Mdr),e(iM,Edr),e(iM,kH),e(kH,Cdr),e(iM,wdr),e(Ue,Adr),e(Ue,dM),e(dM,ITe),e(ITe,Ldr),e(dM,ydr),e(dM,SH),e(SH,xdr),e(dM,$dr),e(Ue,kdr),e(Ue,cM),e(cM,NTe),e(NTe,Sdr),e(cM,Rdr),e(cM,RH),e(RH,Pdr),e(cM,Bdr),e(so,Idr),e(so,mM),e(mM,Ndr),e(mM,qTe),e(qTe,qdr),e(mM,jdr),e(mM,jTe),e(jTe,Ddr),e(so,Gdr),M(fM,so,null),b(m,oZe,_),b(m,Gd,_),e(Gd,gM),e(gM,DTe),M(Hx,DTe,null),e(Gd,Odr),e(Gd,GTe),e(GTe,Vdr),b(m,rZe,_),b(m,Oo,_),M(Jx,Oo,null),e(Oo,Xdr),e(Oo,Od),e(Od,zdr),e(Od,PH),e(PH,Qdr),e(Od,Wdr),e(Od,BH),e(BH,Udr),e(Od,Hdr),e(Oo,Jdr),e(Oo,Yx),e(Yx,Ydr),e(Yx,OTe),e(OTe,Kdr),e(Yx,Zdr),e(Oo,ecr),e(Oo,wt),M(Kx,wt,null),e(wt,ocr),e(wt,VTe),e(VTe,rcr),e(wt,tcr),e(wt,Vd),e(Vd,acr),e(Vd,XTe),e(XTe,ncr),e(Vd,scr),e(Vd,IH),e(IH,lcr),e(Vd,icr),e(wt,dcr),M(hM,wt,null),e(Oo,ccr),e(Oo,lo),M(Zx,lo,null),e(lo,mcr),e(lo,zTe),e(zTe,fcr),e(lo,gcr),e(lo,an),e(an,hcr),e(an,QTe),e(QTe,ucr),e(an,pcr),e(an,WTe),e(WTe,_cr),e(an,bcr),e(an,UTe),e(UTe,vcr),e(an,Fcr),e(lo,Tcr),e(lo,J),e(J,uM),e(uM,HTe),e(HTe,Mcr),e(uM,Ecr),e(uM,NH),e(NH,Ccr),e(uM,wcr),e(J,Acr),e(J,pM),e(pM,JTe),e(JTe,Lcr),e(pM,ycr),e(pM,qH),e(qH,xcr),e(pM,$cr),e(J,kcr),e(J,_M),e(_M,YTe),e(YTe,Scr),e(_M,Rcr),e(_M,jH),e(jH,Pcr),e(_M,Bcr),e(J,Icr),e(J,bM),e(bM,KTe),e(KTe,Ncr),e(bM,qcr),e(bM,DH),e(DH,jcr),e(bM,Dcr),e(J,Gcr),e(J,vM),e(vM,ZTe),e(ZTe,Ocr),e(vM,Vcr),e(vM,GH),e(GH,Xcr),e(vM,zcr),e(J,Qcr),e(J,FM),e(FM,eMe),e(eMe,Wcr),e(FM,Ucr),e(FM,OH),e(OH,Hcr),e(FM,Jcr),e(J,Ycr),e(J,TM),e(TM,oMe),e(oMe,Kcr),e(TM,Zcr),e(TM,VH),e(VH,emr),e(TM,omr),e(J,rmr),e(J,MM),e(MM,rMe),e(rMe,tmr),e(MM,amr),e(MM,XH),e(XH,nmr),e(MM,smr),e(J,lmr),e(J,EM),e(EM,tMe),e(tMe,imr),e(EM,dmr),e(EM,zH),e(zH,cmr),e(EM,mmr),e(J,fmr),e(J,CM),e(CM,aMe),e(aMe,gmr),e(CM,hmr),e(CM,QH),e(QH,umr),e(CM,pmr),e(J,_mr),e(J,wM),e(wM,nMe),e(nMe,bmr),e(wM,vmr),e(wM,WH),e(WH,Fmr),e(wM,Tmr),e(J,Mmr),e(J,AM),e(AM,sMe),e(sMe,Emr),e(AM,Cmr),e(AM,UH),e(UH,wmr),e(AM,Amr),e(J,Lmr),e(J,LM),e(LM,lMe),e(lMe,ymr),e(LM,xmr),e(LM,HH),e(HH,$mr),e(LM,kmr),e(J,Smr),e(J,yM),e(yM,iMe),e(iMe,Rmr),e(yM,Pmr),e(yM,JH),e(JH,Bmr),e(yM,Imr),e(J,Nmr),e(J,xM),e(xM,dMe),e(dMe,qmr),e(xM,jmr),e(xM,YH),e(YH,Dmr),e(xM,Gmr),e(J,Omr),e(J,$M),e($M,cMe),e(cMe,Vmr),e($M,Xmr),e($M,KH),e(KH,zmr),e($M,Qmr),e(J,Wmr),e(J,kM),e(kM,mMe),e(mMe,Umr),e(kM,Hmr),e(kM,ZH),e(ZH,Jmr),e(kM,Ymr),e(J,Kmr),e(J,SM),e(SM,fMe),e(fMe,Zmr),e(SM,efr),e(SM,eJ),e(eJ,ofr),e(SM,rfr),e(J,tfr),e(J,RM),e(RM,gMe),e(gMe,afr),e(RM,nfr),e(RM,oJ),e(oJ,sfr),e(RM,lfr),e(J,ifr),e(J,PM),e(PM,hMe),e(hMe,dfr),e(PM,cfr),e(PM,rJ),e(rJ,mfr),e(PM,ffr),e(J,gfr),e(J,BM),e(BM,uMe),e(uMe,hfr),e(BM,ufr),e(BM,tJ),e(tJ,pfr),e(BM,_fr),e(J,bfr),e(J,IM),e(IM,pMe),e(pMe,vfr),e(IM,Ffr),e(IM,aJ),e(aJ,Tfr),e(IM,Mfr),e(J,Efr),e(J,NM),e(NM,_Me),e(_Me,Cfr),e(NM,wfr),e(NM,nJ),e(nJ,Afr),e(NM,Lfr),e(J,yfr),e(J,qM),e(qM,bMe),e(bMe,xfr),e(qM,$fr),e(qM,sJ),e(sJ,kfr),e(qM,Sfr),e(J,Rfr),e(J,jM),e(jM,vMe),e(vMe,Pfr),e(jM,Bfr),e(jM,lJ),e(lJ,Ifr),e(jM,Nfr),e(J,qfr),e(J,DM),e(DM,FMe),e(FMe,jfr),e(DM,Dfr),e(DM,iJ),e(iJ,Gfr),e(DM,Ofr),e(J,Vfr),e(J,GM),e(GM,TMe),e(TMe,Xfr),e(GM,zfr),e(GM,dJ),e(dJ,Qfr),e(GM,Wfr),e(J,Ufr),e(J,OM),e(OM,MMe),e(MMe,Hfr),e(OM,Jfr),e(OM,cJ),e(cJ,Yfr),e(OM,Kfr),e(J,Zfr),e(J,VM),e(VM,EMe),e(EMe,egr),e(VM,ogr),e(VM,mJ),e(mJ,rgr),e(VM,tgr),e(J,agr),e(J,XM),e(XM,CMe),e(CMe,ngr),e(XM,sgr),e(XM,fJ),e(fJ,lgr),e(XM,igr),e(J,dgr),e(J,zM),e(zM,wMe),e(wMe,cgr),e(zM,mgr),e(zM,gJ),e(gJ,fgr),e(zM,ggr),e(J,hgr),e(J,QM),e(QM,AMe),e(AMe,ugr),e(QM,pgr),e(QM,hJ),e(hJ,_gr),e(QM,bgr),e(J,vgr),e(J,WM),e(WM,LMe),e(LMe,Fgr),e(WM,Tgr),e(WM,uJ),e(uJ,Mgr),e(WM,Egr),e(J,Cgr),e(J,UM),e(UM,yMe),e(yMe,wgr),e(UM,Agr),e(UM,pJ),e(pJ,Lgr),e(UM,ygr),e(J,xgr),e(J,HM),e(HM,xMe),e(xMe,$gr),e(HM,kgr),e(HM,_J),e(_J,Sgr),e(HM,Rgr),e(J,Pgr),e(J,JM),e(JM,$Me),e($Me,Bgr),e(JM,Igr),e(JM,bJ),e(bJ,Ngr),e(JM,qgr),e(J,jgr),e(J,YM),e(YM,kMe),e(kMe,Dgr),e(YM,Ggr),e(YM,vJ),e(vJ,Ogr),e(YM,Vgr),e(J,Xgr),e(J,KM),e(KM,SMe),e(SMe,zgr),e(KM,Qgr),e(KM,FJ),e(FJ,Wgr),e(KM,Ugr),e(lo,Hgr),e(lo,ZM),e(ZM,Jgr),e(ZM,RMe),e(RMe,Ygr),e(ZM,Kgr),e(ZM,PMe),e(PMe,Zgr),e(lo,ehr),M(eE,lo,null),b(m,tZe,_),b(m,Xd,_),e(Xd,oE),e(oE,BMe),M(e$,BMe,null),e(Xd,ohr),e(Xd,IMe),e(IMe,rhr),b(m,aZe,_),b(m,Vo,_),M(o$,Vo,null),e(Vo,thr),e(Vo,zd),e(zd,ahr),e(zd,TJ),e(TJ,nhr),e(zd,shr),e(zd,MJ),e(MJ,lhr),e(zd,ihr),e(Vo,dhr),e(Vo,r$),e(r$,chr),e(r$,NMe),e(NMe,mhr),e(r$,fhr),e(Vo,ghr),e(Vo,At),M(t$,At,null),e(At,hhr),e(At,qMe),e(qMe,uhr),e(At,phr),e(At,Qd),e(Qd,_hr),e(Qd,jMe),e(jMe,bhr),e(Qd,vhr),e(Qd,EJ),e(EJ,Fhr),e(Qd,Thr),e(At,Mhr),M(rE,At,null),e(Vo,Ehr),e(Vo,io),M(a$,io,null),e(io,Chr),e(io,DMe),e(DMe,whr),e(io,Ahr),e(io,nn),e(nn,Lhr),e(nn,GMe),e(GMe,yhr),e(nn,xhr),e(nn,OMe),e(OMe,$hr),e(nn,khr),e(nn,VMe),e(VMe,Shr),e(nn,Rhr),e(io,Phr),e(io,V),e(V,tE),e(tE,XMe),e(XMe,Bhr),e(tE,Ihr),e(tE,CJ),e(CJ,Nhr),e(tE,qhr),e(V,jhr),e(V,aE),e(aE,zMe),e(zMe,Dhr),e(aE,Ghr),e(aE,wJ),e(wJ,Ohr),e(aE,Vhr),e(V,Xhr),e(V,nE),e(nE,QMe),e(QMe,zhr),e(nE,Qhr),e(nE,AJ),e(AJ,Whr),e(nE,Uhr),e(V,Hhr),e(V,sE),e(sE,WMe),e(WMe,Jhr),e(sE,Yhr),e(sE,LJ),e(LJ,Khr),e(sE,Zhr),e(V,eur),e(V,lE),e(lE,UMe),e(UMe,our),e(lE,rur),e(lE,yJ),e(yJ,tur),e(lE,aur),e(V,nur),e(V,iE),e(iE,HMe),e(HMe,sur),e(iE,lur),e(iE,xJ),e(xJ,iur),e(iE,dur),e(V,cur),e(V,dE),e(dE,JMe),e(JMe,mur),e(dE,fur),e(dE,$J),e($J,gur),e(dE,hur),e(V,uur),e(V,cE),e(cE,YMe),e(YMe,pur),e(cE,_ur),e(cE,kJ),e(kJ,bur),e(cE,vur),e(V,Fur),e(V,mE),e(mE,KMe),e(KMe,Tur),e(mE,Mur),e(mE,SJ),e(SJ,Eur),e(mE,Cur),e(V,wur),e(V,fE),e(fE,ZMe),e(ZMe,Aur),e(fE,Lur),e(fE,RJ),e(RJ,yur),e(fE,xur),e(V,$ur),e(V,gE),e(gE,eEe),e(eEe,kur),e(gE,Sur),e(gE,PJ),e(PJ,Rur),e(gE,Pur),e(V,Bur),e(V,hE),e(hE,oEe),e(oEe,Iur),e(hE,Nur),e(hE,BJ),e(BJ,qur),e(hE,jur),e(V,Dur),e(V,uE),e(uE,rEe),e(rEe,Gur),e(uE,Our),e(uE,IJ),e(IJ,Vur),e(uE,Xur),e(V,zur),e(V,pE),e(pE,tEe),e(tEe,Qur),e(pE,Wur),e(pE,NJ),e(NJ,Uur),e(pE,Hur),e(V,Jur),e(V,_E),e(_E,aEe),e(aEe,Yur),e(_E,Kur),e(_E,qJ),e(qJ,Zur),e(_E,epr),e(V,opr),e(V,bE),e(bE,nEe),e(nEe,rpr),e(bE,tpr),e(bE,jJ),e(jJ,apr),e(bE,npr),e(V,spr),e(V,vE),e(vE,sEe),e(sEe,lpr),e(vE,ipr),e(vE,DJ),e(DJ,dpr),e(vE,cpr),e(V,mpr),e(V,FE),e(FE,lEe),e(lEe,fpr),e(FE,gpr),e(FE,GJ),e(GJ,hpr),e(FE,upr),e(V,ppr),e(V,TE),e(TE,iEe),e(iEe,_pr),e(TE,bpr),e(TE,OJ),e(OJ,vpr),e(TE,Fpr),e(V,Tpr),e(V,ME),e(ME,dEe),e(dEe,Mpr),e(ME,Epr),e(ME,VJ),e(VJ,Cpr),e(ME,wpr),e(V,Apr),e(V,EE),e(EE,cEe),e(cEe,Lpr),e(EE,ypr),e(EE,XJ),e(XJ,xpr),e(EE,$pr),e(V,kpr),e(V,CE),e(CE,mEe),e(mEe,Spr),e(CE,Rpr),e(CE,zJ),e(zJ,Ppr),e(CE,Bpr),e(V,Ipr),e(V,wE),e(wE,fEe),e(fEe,Npr),e(wE,qpr),e(wE,QJ),e(QJ,jpr),e(wE,Dpr),e(V,Gpr),e(V,AE),e(AE,gEe),e(gEe,Opr),e(AE,Vpr),e(AE,WJ),e(WJ,Xpr),e(AE,zpr),e(V,Qpr),e(V,LE),e(LE,hEe),e(hEe,Wpr),e(LE,Upr),e(LE,UJ),e(UJ,Hpr),e(LE,Jpr),e(V,Ypr),e(V,yE),e(yE,uEe),e(uEe,Kpr),e(yE,Zpr),e(yE,HJ),e(HJ,e_r),e(yE,o_r),e(V,r_r),e(V,xE),e(xE,pEe),e(pEe,t_r),e(xE,a_r),e(xE,JJ),e(JJ,n_r),e(xE,s_r),e(V,l_r),e(V,$E),e($E,_Ee),e(_Ee,i_r),e($E,d_r),e($E,YJ),e(YJ,c_r),e($E,m_r),e(V,f_r),e(V,kE),e(kE,bEe),e(bEe,g_r),e(kE,h_r),e(kE,KJ),e(KJ,u_r),e(kE,p_r),e(V,__r),e(V,SE),e(SE,vEe),e(vEe,b_r),e(SE,v_r),e(SE,ZJ),e(ZJ,F_r),e(SE,T_r),e(V,M_r),e(V,RE),e(RE,FEe),e(FEe,E_r),e(RE,C_r),e(RE,eY),e(eY,w_r),e(RE,A_r),e(V,L_r),e(V,PE),e(PE,TEe),e(TEe,y_r),e(PE,x_r),e(PE,oY),e(oY,$_r),e(PE,k_r),e(V,S_r),e(V,BE),e(BE,MEe),e(MEe,R_r),e(BE,P_r),e(BE,rY),e(rY,B_r),e(BE,I_r),e(V,N_r),e(V,IE),e(IE,EEe),e(EEe,q_r),e(IE,j_r),e(IE,tY),e(tY,D_r),e(IE,G_r),e(V,O_r),e(V,NE),e(NE,CEe),e(CEe,V_r),e(NE,X_r),e(NE,aY),e(aY,z_r),e(NE,Q_r),e(V,W_r),e(V,qE),e(qE,wEe),e(wEe,U_r),e(qE,H_r),e(qE,nY),e(nY,J_r),e(qE,Y_r),e(V,K_r),e(V,jE),e(jE,AEe),e(AEe,Z_r),e(jE,ebr),e(jE,sY),e(sY,obr),e(jE,rbr),e(V,tbr),e(V,DE),e(DE,LEe),e(LEe,abr),e(DE,nbr),e(DE,lY),e(lY,sbr),e(DE,lbr),e(V,ibr),e(V,GE),e(GE,yEe),e(yEe,dbr),e(GE,cbr),e(GE,iY),e(iY,mbr),e(GE,fbr),e(V,gbr),e(V,OE),e(OE,xEe),e(xEe,hbr),e(OE,ubr),e(OE,dY),e(dY,pbr),e(OE,_br),e(V,bbr),e(V,VE),e(VE,$Ee),e($Ee,vbr),e(VE,Fbr),e(VE,cY),e(cY,Tbr),e(VE,Mbr),e(V,Ebr),e(V,XE),e(XE,kEe),e(kEe,Cbr),e(XE,wbr),e(XE,mY),e(mY,Abr),e(XE,Lbr),e(V,ybr),e(V,zE),e(zE,SEe),e(SEe,xbr),e(zE,$br),e(zE,fY),e(fY,kbr),e(zE,Sbr),e(V,Rbr),e(V,QE),e(QE,REe),e(REe,Pbr),e(QE,Bbr),e(QE,gY),e(gY,Ibr),e(QE,Nbr),e(io,qbr),e(io,WE),e(WE,jbr),e(WE,PEe),e(PEe,Dbr),e(WE,Gbr),e(WE,BEe),e(BEe,Obr),e(io,Vbr),M(UE,io,null),b(m,nZe,_),b(m,Wd,_),e(Wd,HE),e(HE,IEe),M(n$,IEe,null),e(Wd,Xbr),e(Wd,NEe),e(NEe,zbr),b(m,sZe,_),b(m,Xo,_),M(s$,Xo,null),e(Xo,Qbr),e(Xo,Ud),e(Ud,Wbr),e(Ud,hY),e(hY,Ubr),e(Ud,Hbr),e(Ud,uY),e(uY,Jbr),e(Ud,Ybr),e(Xo,Kbr),e(Xo,l$),e(l$,Zbr),e(l$,qEe),e(qEe,e2r),e(l$,o2r),e(Xo,r2r),e(Xo,Lt),M(i$,Lt,null),e(Lt,t2r),e(Lt,jEe),e(jEe,a2r),e(Lt,n2r),e(Lt,Hd),e(Hd,s2r),e(Hd,DEe),e(DEe,l2r),e(Hd,i2r),e(Hd,pY),e(pY,d2r),e(Hd,c2r),e(Lt,m2r),M(JE,Lt,null),e(Xo,f2r),e(Xo,co),M(d$,co,null),e(co,g2r),e(co,GEe),e(GEe,h2r),e(co,u2r),e(co,sn),e(sn,p2r),e(sn,OEe),e(OEe,_2r),e(sn,b2r),e(sn,VEe),e(VEe,v2r),e(sn,F2r),e(sn,XEe),e(XEe,T2r),e(sn,M2r),e(co,E2r),e(co,zEe),e(zEe,YE),e(YE,QEe),e(QEe,C2r),e(YE,w2r),e(YE,_Y),e(_Y,A2r),e(YE,L2r),e(co,y2r),e(co,KE),e(KE,x2r),e(KE,WEe),e(WEe,$2r),e(KE,k2r),e(KE,UEe),e(UEe,S2r),e(co,R2r),M(ZE,co,null),b(m,lZe,_),b(m,Jd,_),e(Jd,e4),e(e4,HEe),M(c$,HEe,null),e(Jd,P2r),e(Jd,JEe),e(JEe,B2r),b(m,iZe,_),b(m,zo,_),M(m$,zo,null),e(zo,I2r),e(zo,Yd),e(Yd,N2r),e(Yd,bY),e(bY,q2r),e(Yd,j2r),e(Yd,vY),e(vY,D2r),e(Yd,G2r),e(zo,O2r),e(zo,f$),e(f$,V2r),e(f$,YEe),e(YEe,X2r),e(f$,z2r),e(zo,Q2r),e(zo,yt),M(g$,yt,null),e(yt,W2r),e(yt,KEe),e(KEe,U2r),e(yt,H2r),e(yt,Kd),e(Kd,J2r),e(Kd,ZEe),e(ZEe,Y2r),e(Kd,K2r),e(Kd,FY),e(FY,Z2r),e(Kd,e1r),e(yt,o1r),M(o4,yt,null),e(zo,r1r),e(zo,mo),M(h$,mo,null),e(mo,t1r),e(mo,e4e),e(e4e,a1r),e(mo,n1r),e(mo,ln),e(ln,s1r),e(ln,o4e),e(o4e,l1r),e(ln,i1r),e(ln,r4e),e(r4e,d1r),e(ln,c1r),e(ln,t4e),e(t4e,m1r),e(ln,f1r),e(mo,g1r),e(mo,Zd),e(Zd,r4),e(r4,a4e),e(a4e,h1r),e(r4,u1r),e(r4,TY),e(TY,p1r),e(r4,_1r),e(Zd,b1r),e(Zd,t4),e(t4,n4e),e(n4e,v1r),e(t4,F1r),e(t4,MY),e(MY,T1r),e(t4,M1r),e(Zd,E1r),e(Zd,a4),e(a4,s4e),e(s4e,C1r),e(a4,w1r),e(a4,EY),e(EY,A1r),e(a4,L1r),e(mo,y1r),e(mo,n4),e(n4,x1r),e(n4,l4e),e(l4e,$1r),e(n4,k1r),e(n4,i4e),e(i4e,S1r),e(mo,R1r),M(s4,mo,null),b(m,dZe,_),b(m,ec,_),e(ec,l4),e(l4,d4e),M(u$,d4e,null),e(ec,P1r),e(ec,c4e),e(c4e,B1r),b(m,cZe,_),b(m,Qo,_),M(p$,Qo,null),e(Qo,I1r),e(Qo,oc),e(oc,N1r),e(oc,CY),e(CY,q1r),e(oc,j1r),e(oc,wY),e(wY,D1r),e(oc,G1r),e(Qo,O1r),e(Qo,_$),e(_$,V1r),e(_$,m4e),e(m4e,X1r),e(_$,z1r),e(Qo,Q1r),e(Qo,xt),M(b$,xt,null),e(xt,W1r),e(xt,f4e),e(f4e,U1r),e(xt,H1r),e(xt,rc),e(rc,J1r),e(rc,g4e),e(g4e,Y1r),e(rc,K1r),e(rc,AY),e(AY,Z1r),e(rc,evr),e(xt,ovr),M(i4,xt,null),e(Qo,rvr),e(Qo,fo),M(v$,fo,null),e(fo,tvr),e(fo,h4e),e(h4e,avr),e(fo,nvr),e(fo,dn),e(dn,svr),e(dn,u4e),e(u4e,lvr),e(dn,ivr),e(dn,p4e),e(p4e,dvr),e(dn,cvr),e(dn,_4e),e(_4e,mvr),e(dn,fvr),e(fo,gvr),e(fo,be),e(be,d4),e(d4,b4e),e(b4e,hvr),e(d4,uvr),e(d4,LY),e(LY,pvr),e(d4,_vr),e(be,bvr),e(be,c4),e(c4,v4e),e(v4e,vvr),e(c4,Fvr),e(c4,yY),e(yY,Tvr),e(c4,Mvr),e(be,Evr),e(be,m4),e(m4,F4e),e(F4e,Cvr),e(m4,wvr),e(m4,xY),e(xY,Avr),e(m4,Lvr),e(be,yvr),e(be,f4),e(f4,T4e),e(T4e,xvr),e(f4,$vr),e(f4,$Y),e($Y,kvr),e(f4,Svr),e(be,Rvr),e(be,bl),e(bl,M4e),e(M4e,Pvr),e(bl,Bvr),e(bl,kY),e(kY,Ivr),e(bl,Nvr),e(bl,SY),e(SY,qvr),e(bl,jvr),e(be,Dvr),e(be,g4),e(g4,E4e),e(E4e,Gvr),e(g4,Ovr),e(g4,RY),e(RY,Vvr),e(g4,Xvr),e(be,zvr),e(be,vl),e(vl,C4e),e(C4e,Qvr),e(vl,Wvr),e(vl,PY),e(PY,Uvr),e(vl,Hvr),e(vl,BY),e(BY,Jvr),e(vl,Yvr),e(be,Kvr),e(be,h4),e(h4,w4e),e(w4e,Zvr),e(h4,eFr),e(h4,IY),e(IY,oFr),e(h4,rFr),e(be,tFr),e(be,$t),e($t,A4e),e(A4e,aFr),e($t,nFr),e($t,NY),e(NY,sFr),e($t,lFr),e($t,qY),e(qY,iFr),e($t,dFr),e($t,jY),e(jY,cFr),e($t,mFr),e(be,fFr),e(be,u4),e(u4,L4e),e(L4e,gFr),e(u4,hFr),e(u4,DY),e(DY,uFr),e(u4,pFr),e(be,_Fr),e(be,p4),e(p4,y4e),e(y4e,bFr),e(p4,vFr),e(p4,GY),e(GY,FFr),e(p4,TFr),e(be,MFr),e(be,_4),e(_4,x4e),e(x4e,EFr),e(_4,CFr),e(_4,OY),e(OY,wFr),e(_4,AFr),e(be,LFr),e(be,b4),e(b4,$4e),e($4e,yFr),e(b4,xFr),e(b4,VY),e(VY,$Fr),e(b4,kFr),e(be,SFr),e(be,v4),e(v4,k4e),e(k4e,RFr),e(v4,PFr),e(v4,XY),e(XY,BFr),e(v4,IFr),e(be,NFr),e(be,F4),e(F4,S4e),e(S4e,qFr),e(F4,jFr),e(F4,zY),e(zY,DFr),e(F4,GFr),e(be,OFr),e(be,T4),e(T4,R4e),e(R4e,VFr),e(T4,XFr),e(T4,QY),e(QY,zFr),e(T4,QFr),e(be,WFr),e(be,M4),e(M4,P4e),e(P4e,UFr),e(M4,HFr),e(M4,WY),e(WY,JFr),e(M4,YFr),e(fo,KFr),e(fo,E4),e(E4,ZFr),e(E4,B4e),e(B4e,eTr),e(E4,oTr),e(E4,I4e),e(I4e,rTr),e(fo,tTr),M(C4,fo,null),b(m,mZe,_),b(m,tc,_),e(tc,w4),e(w4,N4e),M(F$,N4e,null),e(tc,aTr),e(tc,q4e),e(q4e,nTr),b(m,fZe,_),b(m,Wo,_),M(T$,Wo,null),e(Wo,sTr),e(Wo,ac),e(ac,lTr),e(ac,UY),e(UY,iTr),e(ac,dTr),e(ac,HY),e(HY,cTr),e(ac,mTr),e(Wo,fTr),e(Wo,M$),e(M$,gTr),e(M$,j4e),e(j4e,hTr),e(M$,uTr),e(Wo,pTr),e(Wo,kt),M(E$,kt,null),e(kt,_Tr),e(kt,D4e),e(D4e,bTr),e(kt,vTr),e(kt,nc),e(nc,FTr),e(nc,G4e),e(G4e,TTr),e(nc,MTr),e(nc,JY),e(JY,ETr),e(nc,CTr),e(kt,wTr),M(A4,kt,null),e(Wo,ATr),e(Wo,go),M(C$,go,null),e(go,LTr),e(go,O4e),e(O4e,yTr),e(go,xTr),e(go,cn),e(cn,$Tr),e(cn,V4e),e(V4e,kTr),e(cn,STr),e(cn,X4e),e(X4e,RTr),e(cn,PTr),e(cn,z4e),e(z4e,BTr),e(cn,ITr),e(go,NTr),e(go,Q4e),e(Q4e,L4),e(L4,W4e),e(W4e,qTr),e(L4,jTr),e(L4,YY),e(YY,DTr),e(L4,GTr),e(go,OTr),e(go,y4),e(y4,VTr),e(y4,U4e),e(U4e,XTr),e(y4,zTr),e(y4,H4e),e(H4e,QTr),e(go,WTr),M(x4,go,null),b(m,gZe,_),b(m,sc,_),e(sc,$4),e($4,J4e),M(w$,J4e,null),e(sc,UTr),e(sc,Y4e),e(Y4e,HTr),b(m,hZe,_),b(m,Uo,_),M(A$,Uo,null),e(Uo,JTr),e(Uo,lc),e(lc,YTr),e(lc,KY),e(KY,KTr),e(lc,ZTr),e(lc,ZY),e(ZY,eMr),e(lc,oMr),e(Uo,rMr),e(Uo,L$),e(L$,tMr),e(L$,K4e),e(K4e,aMr),e(L$,nMr),e(Uo,sMr),e(Uo,St),M(y$,St,null),e(St,lMr),e(St,Z4e),e(Z4e,iMr),e(St,dMr),e(St,ic),e(ic,cMr),e(ic,eCe),e(eCe,mMr),e(ic,fMr),e(ic,eK),e(eK,gMr),e(ic,hMr),e(St,uMr),M(k4,St,null),e(Uo,pMr),e(Uo,ho),M(x$,ho,null),e(ho,_Mr),e(ho,oCe),e(oCe,bMr),e(ho,vMr),e(ho,mn),e(mn,FMr),e(mn,rCe),e(rCe,TMr),e(mn,MMr),e(mn,tCe),e(tCe,EMr),e(mn,CMr),e(mn,aCe),e(aCe,wMr),e(mn,AMr),e(ho,LMr),e(ho,nCe),e(nCe,S4),e(S4,sCe),e(sCe,yMr),e(S4,xMr),e(S4,oK),e(oK,$Mr),e(S4,kMr),e(ho,SMr),e(ho,R4),e(R4,RMr),e(R4,lCe),e(lCe,PMr),e(R4,BMr),e(R4,iCe),e(iCe,IMr),e(ho,NMr),M(P4,ho,null),b(m,uZe,_),b(m,dc,_),e(dc,B4),e(B4,dCe),M($$,dCe,null),e(dc,qMr),e(dc,cCe),e(cCe,jMr),b(m,pZe,_),b(m,Ho,_),M(k$,Ho,null),e(Ho,DMr),e(Ho,cc),e(cc,GMr),e(cc,rK),e(rK,OMr),e(cc,VMr),e(cc,tK),e(tK,XMr),e(cc,zMr),e(Ho,QMr),e(Ho,S$),e(S$,WMr),e(S$,mCe),e(mCe,UMr),e(S$,HMr),e(Ho,JMr),e(Ho,Rt),M(R$,Rt,null),e(Rt,YMr),e(Rt,fCe),e(fCe,KMr),e(Rt,ZMr),e(Rt,mc),e(mc,eEr),e(mc,gCe),e(gCe,oEr),e(mc,rEr),e(mc,aK),e(aK,tEr),e(mc,aEr),e(Rt,nEr),M(I4,Rt,null),e(Ho,sEr),e(Ho,uo),M(P$,uo,null),e(uo,lEr),e(uo,hCe),e(hCe,iEr),e(uo,dEr),e(uo,fn),e(fn,cEr),e(fn,uCe),e(uCe,mEr),e(fn,fEr),e(fn,pCe),e(pCe,gEr),e(fn,hEr),e(fn,_Ce),e(_Ce,uEr),e(fn,pEr),e(uo,_Er),e(uo,bCe),e(bCe,N4),e(N4,vCe),e(vCe,bEr),e(N4,vEr),e(N4,nK),e(nK,FEr),e(N4,TEr),e(uo,MEr),e(uo,q4),e(q4,EEr),e(q4,FCe),e(FCe,CEr),e(q4,wEr),e(q4,TCe),e(TCe,AEr),e(uo,LEr),M(j4,uo,null),b(m,_Ze,_),b(m,fc,_),e(fc,D4),e(D4,MCe),M(B$,MCe,null),e(fc,yEr),e(fc,ECe),e(ECe,xEr),b(m,bZe,_),b(m,Jo,_),M(I$,Jo,null),e(Jo,$Er),e(Jo,gc),e(gc,kEr),e(gc,sK),e(sK,SEr),e(gc,REr),e(gc,lK),e(lK,PEr),e(gc,BEr),e(Jo,IEr),e(Jo,N$),e(N$,NEr),e(N$,CCe),e(CCe,qEr),e(N$,jEr),e(Jo,DEr),e(Jo,Pt),M(q$,Pt,null),e(Pt,GEr),e(Pt,wCe),e(wCe,OEr),e(Pt,VEr),e(Pt,hc),e(hc,XEr),e(hc,ACe),e(ACe,zEr),e(hc,QEr),e(hc,iK),e(iK,WEr),e(hc,UEr),e(Pt,HEr),M(G4,Pt,null),e(Jo,JEr),e(Jo,po),M(j$,po,null),e(po,YEr),e(po,LCe),e(LCe,KEr),e(po,ZEr),e(po,gn),e(gn,e4r),e(gn,yCe),e(yCe,o4r),e(gn,r4r),e(gn,xCe),e(xCe,t4r),e(gn,a4r),e(gn,$Ce),e($Ce,n4r),e(gn,s4r),e(po,l4r),e(po,Pe),e(Pe,O4),e(O4,kCe),e(kCe,i4r),e(O4,d4r),e(O4,dK),e(dK,c4r),e(O4,m4r),e(Pe,f4r),e(Pe,V4),e(V4,SCe),e(SCe,g4r),e(V4,h4r),e(V4,cK),e(cK,u4r),e(V4,p4r),e(Pe,_4r),e(Pe,X4),e(X4,RCe),e(RCe,b4r),e(X4,v4r),e(X4,mK),e(mK,F4r),e(X4,T4r),e(Pe,M4r),e(Pe,z4),e(z4,PCe),e(PCe,E4r),e(z4,C4r),e(z4,fK),e(fK,w4r),e(z4,A4r),e(Pe,L4r),e(Pe,Q4),e(Q4,BCe),e(BCe,y4r),e(Q4,x4r),e(Q4,gK),e(gK,$4r),e(Q4,k4r),e(Pe,S4r),e(Pe,W4),e(W4,ICe),e(ICe,R4r),e(W4,P4r),e(W4,hK),e(hK,B4r),e(W4,I4r),e(Pe,N4r),e(Pe,U4),e(U4,NCe),e(NCe,q4r),e(U4,j4r),e(U4,uK),e(uK,D4r),e(U4,G4r),e(Pe,O4r),e(Pe,H4),e(H4,qCe),e(qCe,V4r),e(H4,X4r),e(H4,pK),e(pK,z4r),e(H4,Q4r),e(Pe,W4r),e(Pe,J4),e(J4,jCe),e(jCe,U4r),e(J4,H4r),e(J4,_K),e(_K,J4r),e(J4,Y4r),e(po,K4r),e(po,Y4),e(Y4,Z4r),e(Y4,DCe),e(DCe,eCr),e(Y4,oCr),e(Y4,GCe),e(GCe,rCr),e(po,tCr),M(K4,po,null),b(m,vZe,_),b(m,uc,_),e(uc,Z4),e(Z4,OCe),M(D$,OCe,null),e(uc,aCr),e(uc,VCe),e(VCe,nCr),b(m,FZe,_),b(m,Yo,_),M(G$,Yo,null),e(Yo,sCr),e(Yo,pc),e(pc,lCr),e(pc,bK),e(bK,iCr),e(pc,dCr),e(pc,vK),e(vK,cCr),e(pc,mCr),e(Yo,fCr),e(Yo,O$),e(O$,gCr),e(O$,XCe),e(XCe,hCr),e(O$,uCr),e(Yo,pCr),e(Yo,Bt),M(V$,Bt,null),e(Bt,_Cr),e(Bt,zCe),e(zCe,bCr),e(Bt,vCr),e(Bt,_c),e(_c,FCr),e(_c,QCe),e(QCe,TCr),e(_c,MCr),e(_c,FK),e(FK,ECr),e(_c,CCr),e(Bt,wCr),M(eC,Bt,null),e(Yo,ACr),e(Yo,_o),M(X$,_o,null),e(_o,LCr),e(_o,WCe),e(WCe,yCr),e(_o,xCr),e(_o,hn),e(hn,$Cr),e(hn,UCe),e(UCe,kCr),e(hn,SCr),e(hn,HCe),e(HCe,RCr),e(hn,PCr),e(hn,JCe),e(JCe,BCr),e(hn,ICr),e(_o,NCr),e(_o,mt),e(mt,oC),e(oC,YCe),e(YCe,qCr),e(oC,jCr),e(oC,TK),e(TK,DCr),e(oC,GCr),e(mt,OCr),e(mt,rC),e(rC,KCe),e(KCe,VCr),e(rC,XCr),e(rC,MK),e(MK,zCr),e(rC,QCr),e(mt,WCr),e(mt,tC),e(tC,ZCe),e(ZCe,UCr),e(tC,HCr),e(tC,EK),e(EK,JCr),e(tC,YCr),e(mt,KCr),e(mt,aC),e(aC,e3e),e(e3e,ZCr),e(aC,e3r),e(aC,CK),e(CK,o3r),e(aC,r3r),e(mt,t3r),e(mt,nC),e(nC,o3e),e(o3e,a3r),e(nC,n3r),e(nC,wK),e(wK,s3r),e(nC,l3r),e(_o,i3r),e(_o,sC),e(sC,d3r),e(sC,r3e),e(r3e,c3r),e(sC,m3r),e(sC,t3e),e(t3e,f3r),e(_o,g3r),M(lC,_o,null),b(m,TZe,_),b(m,bc,_),e(bc,iC),e(iC,a3e),M(z$,a3e,null),e(bc,h3r),e(bc,n3e),e(n3e,u3r),b(m,MZe,_),b(m,Ko,_),M(Q$,Ko,null),e(Ko,p3r),e(Ko,vc),e(vc,_3r),e(vc,AK),e(AK,b3r),e(vc,v3r),e(vc,LK),e(LK,F3r),e(vc,T3r),e(Ko,M3r),e(Ko,W$),e(W$,E3r),e(W$,s3e),e(s3e,C3r),e(W$,w3r),e(Ko,A3r),e(Ko,It),M(U$,It,null),e(It,L3r),e(It,l3e),e(l3e,y3r),e(It,x3r),e(It,Fc),e(Fc,$3r),e(Fc,i3e),e(i3e,k3r),e(Fc,S3r),e(Fc,yK),e(yK,R3r),e(Fc,P3r),e(It,B3r),M(dC,It,null),e(Ko,I3r),e(Ko,bo),M(H$,bo,null),e(bo,N3r),e(bo,d3e),e(d3e,q3r),e(bo,j3r),e(bo,un),e(un,D3r),e(un,c3e),e(c3e,G3r),e(un,O3r),e(un,m3e),e(m3e,V3r),e(un,X3r),e(un,f3e),e(f3e,z3r),e(un,Q3r),e(bo,W3r),e(bo,Le),e(Le,cC),e(cC,g3e),e(g3e,U3r),e(cC,H3r),e(cC,xK),e(xK,J3r),e(cC,Y3r),e(Le,K3r),e(Le,mC),e(mC,h3e),e(h3e,Z3r),e(mC,e5r),e(mC,$K),e($K,o5r),e(mC,r5r),e(Le,t5r),e(Le,fC),e(fC,u3e),e(u3e,a5r),e(fC,n5r),e(fC,kK),e(kK,s5r),e(fC,l5r),e(Le,i5r),e(Le,gC),e(gC,p3e),e(p3e,d5r),e(gC,c5r),e(gC,SK),e(SK,m5r),e(gC,f5r),e(Le,g5r),e(Le,hC),e(hC,_3e),e(_3e,h5r),e(hC,u5r),e(hC,RK),e(RK,p5r),e(hC,_5r),e(Le,b5r),e(Le,uC),e(uC,b3e),e(b3e,v5r),e(uC,F5r),e(uC,PK),e(PK,T5r),e(uC,M5r),e(Le,E5r),e(Le,pC),e(pC,v3e),e(v3e,C5r),e(pC,w5r),e(pC,BK),e(BK,A5r),e(pC,L5r),e(Le,y5r),e(Le,_C),e(_C,F3e),e(F3e,x5r),e(_C,$5r),e(_C,IK),e(IK,k5r),e(_C,S5r),e(Le,R5r),e(Le,bC),e(bC,T3e),e(T3e,P5r),e(bC,B5r),e(bC,NK),e(NK,I5r),e(bC,N5r),e(Le,q5r),e(Le,vC),e(vC,M3e),e(M3e,j5r),e(vC,D5r),e(vC,qK),e(qK,G5r),e(vC,O5r),e(bo,V5r),e(bo,FC),e(FC,X5r),e(FC,E3e),e(E3e,z5r),e(FC,Q5r),e(FC,C3e),e(C3e,W5r),e(bo,U5r),M(TC,bo,null),b(m,EZe,_),b(m,Tc,_),e(Tc,MC),e(MC,w3e),M(J$,w3e,null),e(Tc,H5r),e(Tc,A3e),e(A3e,J5r),b(m,CZe,_),b(m,Zo,_),M(Y$,Zo,null),e(Zo,Y5r),e(Zo,Mc),e(Mc,K5r),e(Mc,jK),e(jK,Z5r),e(Mc,e0r),e(Mc,DK),e(DK,o0r),e(Mc,r0r),e(Zo,t0r),e(Zo,K$),e(K$,a0r),e(K$,L3e),e(L3e,n0r),e(K$,s0r),e(Zo,l0r),e(Zo,Nt),M(Z$,Nt,null),e(Nt,i0r),e(Nt,y3e),e(y3e,d0r),e(Nt,c0r),e(Nt,Ec),e(Ec,m0r),e(Ec,x3e),e(x3e,f0r),e(Ec,g0r),e(Ec,GK),e(GK,h0r),e(Ec,u0r),e(Nt,p0r),M(EC,Nt,null),e(Zo,_0r),e(Zo,vo),M(ek,vo,null),e(vo,b0r),e(vo,$3e),e($3e,v0r),e(vo,F0r),e(vo,pn),e(pn,T0r),e(pn,k3e),e(k3e,M0r),e(pn,E0r),e(pn,S3e),e(S3e,C0r),e(pn,w0r),e(pn,R3e),e(R3e,A0r),e(pn,L0r),e(vo,y0r),e(vo,ok),e(ok,CC),e(CC,P3e),e(P3e,x0r),e(CC,$0r),e(CC,OK),e(OK,k0r),e(CC,S0r),e(ok,R0r),e(ok,wC),e(wC,B3e),e(B3e,P0r),e(wC,B0r),e(wC,VK),e(VK,I0r),e(wC,N0r),e(vo,q0r),e(vo,AC),e(AC,j0r),e(AC,I3e),e(I3e,D0r),e(AC,G0r),e(AC,N3e),e(N3e,O0r),e(vo,V0r),M(LC,vo,null),b(m,wZe,_),b(m,Cc,_),e(Cc,yC),e(yC,q3e),M(rk,q3e,null),e(Cc,X0r),e(Cc,j3e),e(j3e,z0r),b(m,AZe,_),b(m,er,_),M(tk,er,null),e(er,Q0r),e(er,wc),e(wc,W0r),e(wc,XK),e(XK,U0r),e(wc,H0r),e(wc,zK),e(zK,J0r),e(wc,Y0r),e(er,K0r),e(er,ak),e(ak,Z0r),e(ak,D3e),e(D3e,ewr),e(ak,owr),e(er,rwr),e(er,qt),M(nk,qt,null),e(qt,twr),e(qt,G3e),e(G3e,awr),e(qt,nwr),e(qt,Ac),e(Ac,swr),e(Ac,O3e),e(O3e,lwr),e(Ac,iwr),e(Ac,QK),e(QK,dwr),e(Ac,cwr),e(qt,mwr),M(xC,qt,null),e(er,fwr),e(er,Fo),M(sk,Fo,null),e(Fo,gwr),e(Fo,V3e),e(V3e,hwr),e(Fo,uwr),e(Fo,_n),e(_n,pwr),e(_n,X3e),e(X3e,_wr),e(_n,bwr),e(_n,z3e),e(z3e,vwr),e(_n,Fwr),e(_n,Q3e),e(Q3e,Twr),e(_n,Mwr),e(Fo,Ewr),e(Fo,ft),e(ft,$C),e($C,W3e),e(W3e,Cwr),e($C,wwr),e($C,WK),e(WK,Awr),e($C,Lwr),e(ft,ywr),e(ft,kC),e(kC,U3e),e(U3e,xwr),e(kC,$wr),e(kC,UK),e(UK,kwr),e(kC,Swr),e(ft,Rwr),e(ft,SC),e(SC,H3e),e(H3e,Pwr),e(SC,Bwr),e(SC,HK),e(HK,Iwr),e(SC,Nwr),e(ft,qwr),e(ft,RC),e(RC,J3e),e(J3e,jwr),e(RC,Dwr),e(RC,JK),e(JK,Gwr),e(RC,Owr),e(ft,Vwr),e(ft,PC),e(PC,Y3e),e(Y3e,Xwr),e(PC,zwr),e(PC,YK),e(YK,Qwr),e(PC,Wwr),e(Fo,Uwr),e(Fo,BC),e(BC,Hwr),e(BC,K3e),e(K3e,Jwr),e(BC,Ywr),e(BC,Z3e),e(Z3e,Kwr),e(Fo,Zwr),M(IC,Fo,null),b(m,LZe,_),b(m,Lc,_),e(Lc,NC),e(NC,e5e),M(lk,e5e,null),e(Lc,eAr),e(Lc,o5e),e(o5e,oAr),b(m,yZe,_),b(m,or,_),M(ik,or,null),e(or,rAr),e(or,yc),e(yc,tAr),e(yc,KK),e(KK,aAr),e(yc,nAr),e(yc,ZK),e(ZK,sAr),e(yc,lAr),e(or,iAr),e(or,dk),e(dk,dAr),e(dk,r5e),e(r5e,cAr),e(dk,mAr),e(or,fAr),e(or,jt),M(ck,jt,null),e(jt,gAr),e(jt,t5e),e(t5e,hAr),e(jt,uAr),e(jt,xc),e(xc,pAr),e(xc,a5e),e(a5e,_Ar),e(xc,bAr),e(xc,eZ),e(eZ,vAr),e(xc,FAr),e(jt,TAr),M(qC,jt,null),e(or,MAr),e(or,To),M(mk,To,null),e(To,EAr),e(To,n5e),e(n5e,CAr),e(To,wAr),e(To,bn),e(bn,AAr),e(bn,s5e),e(s5e,LAr),e(bn,yAr),e(bn,l5e),e(l5e,xAr),e(bn,$Ar),e(bn,i5e),e(i5e,kAr),e(bn,SAr),e(To,RAr),e(To,vn),e(vn,jC),e(jC,d5e),e(d5e,PAr),e(jC,BAr),e(jC,oZ),e(oZ,IAr),e(jC,NAr),e(vn,qAr),e(vn,DC),e(DC,c5e),e(c5e,jAr),e(DC,DAr),e(DC,rZ),e(rZ,GAr),e(DC,OAr),e(vn,VAr),e(vn,GC),e(GC,m5e),e(m5e,XAr),e(GC,zAr),e(GC,tZ),e(tZ,QAr),e(GC,WAr),e(vn,UAr),e(vn,OC),e(OC,f5e),e(f5e,HAr),e(OC,JAr),e(OC,aZ),e(aZ,YAr),e(OC,KAr),e(To,ZAr),e(To,VC),e(VC,e6r),e(VC,g5e),e(g5e,o6r),e(VC,r6r),e(VC,h5e),e(h5e,t6r),e(To,a6r),M(XC,To,null),b(m,xZe,_),b(m,$c,_),e($c,zC),e(zC,u5e),M(fk,u5e,null),e($c,n6r),e($c,p5e),e(p5e,s6r),b(m,$Ze,_),b(m,rr,_),M(gk,rr,null),e(rr,l6r),e(rr,kc),e(kc,i6r),e(kc,nZ),e(nZ,d6r),e(kc,c6r),e(kc,sZ),e(sZ,m6r),e(kc,f6r),e(rr,g6r),e(rr,hk),e(hk,h6r),e(hk,_5e),e(_5e,u6r),e(hk,p6r),e(rr,_6r),e(rr,Dt),M(uk,Dt,null),e(Dt,b6r),e(Dt,b5e),e(b5e,v6r),e(Dt,F6r),e(Dt,Sc),e(Sc,T6r),e(Sc,v5e),e(v5e,M6r),e(Sc,E6r),e(Sc,lZ),e(lZ,C6r),e(Sc,w6r),e(Dt,A6r),M(QC,Dt,null),e(rr,L6r),e(rr,Mo),M(pk,Mo,null),e(Mo,y6r),e(Mo,F5e),e(F5e,x6r),e(Mo,$6r),e(Mo,Fn),e(Fn,k6r),e(Fn,T5e),e(T5e,S6r),e(Fn,R6r),e(Fn,M5e),e(M5e,P6r),e(Fn,B6r),e(Fn,E5e),e(E5e,I6r),e(Fn,N6r),e(Mo,q6r),e(Mo,Tn),e(Tn,WC),e(WC,C5e),e(C5e,j6r),e(WC,D6r),e(WC,iZ),e(iZ,G6r),e(WC,O6r),e(Tn,V6r),e(Tn,UC),e(UC,w5e),e(w5e,X6r),e(UC,z6r),e(UC,dZ),e(dZ,Q6r),e(UC,W6r),e(Tn,U6r),e(Tn,HC),e(HC,A5e),e(A5e,H6r),e(HC,J6r),e(HC,cZ),e(cZ,Y6r),e(HC,K6r),e(Tn,Z6r),e(Tn,JC),e(JC,L5e),e(L5e,e7r),e(JC,o7r),e(JC,mZ),e(mZ,r7r),e(JC,t7r),e(Mo,a7r),e(Mo,YC),e(YC,n7r),e(YC,y5e),e(y5e,s7r),e(YC,l7r),e(YC,x5e),e(x5e,i7r),e(Mo,d7r),M(KC,Mo,null),b(m,kZe,_),b(m,Rc,_),e(Rc,ZC),e(ZC,$5e),M(_k,$5e,null),e(Rc,c7r),e(Rc,k5e),e(k5e,m7r),b(m,SZe,_),b(m,tr,_),M(bk,tr,null),e(tr,f7r),e(tr,Pc),e(Pc,g7r),e(Pc,fZ),e(fZ,h7r),e(Pc,u7r),e(Pc,gZ),e(gZ,p7r),e(Pc,_7r),e(tr,b7r),e(tr,vk),e(vk,v7r),e(vk,S5e),e(S5e,F7r),e(vk,T7r),e(tr,M7r),e(tr,Gt),M(Fk,Gt,null),e(Gt,E7r),e(Gt,R5e),e(R5e,C7r),e(Gt,w7r),e(Gt,Bc),e(Bc,A7r),e(Bc,P5e),e(P5e,L7r),e(Bc,y7r),e(Bc,hZ),e(hZ,x7r),e(Bc,$7r),e(Gt,k7r),M(e3,Gt,null),e(tr,S7r),e(tr,Eo),M(Tk,Eo,null),e(Eo,R7r),e(Eo,B5e),e(B5e,P7r),e(Eo,B7r),e(Eo,Mn),e(Mn,I7r),e(Mn,I5e),e(I5e,N7r),e(Mn,q7r),e(Mn,N5e),e(N5e,j7r),e(Mn,D7r),e(Mn,q5e),e(q5e,G7r),e(Mn,O7r),e(Eo,V7r),e(Eo,j5e),e(j5e,o3),e(o3,D5e),e(D5e,X7r),e(o3,z7r),e(o3,uZ),e(uZ,Q7r),e(o3,W7r),e(Eo,U7r),e(Eo,r3),e(r3,H7r),e(r3,G5e),e(G5e,J7r),e(r3,Y7r),e(r3,O5e),e(O5e,K7r),e(Eo,Z7r),M(t3,Eo,null),b(m,RZe,_),b(m,Ic,_),e(Ic,a3),e(a3,V5e),M(Mk,V5e,null),e(Ic,eLr),e(Ic,X5e),e(X5e,oLr),b(m,PZe,_),b(m,ar,_),M(Ek,ar,null),e(ar,rLr),e(ar,Nc),e(Nc,tLr),e(Nc,pZ),e(pZ,aLr),e(Nc,nLr),e(Nc,_Z),e(_Z,sLr),e(Nc,lLr),e(ar,iLr),e(ar,Ck),e(Ck,dLr),e(Ck,z5e),e(z5e,cLr),e(Ck,mLr),e(ar,fLr),e(ar,Ot),M(wk,Ot,null),e(Ot,gLr),e(Ot,Q5e),e(Q5e,hLr),e(Ot,uLr),e(Ot,qc),e(qc,pLr),e(qc,W5e),e(W5e,_Lr),e(qc,bLr),e(qc,bZ),e(bZ,vLr),e(qc,FLr),e(Ot,TLr),M(n3,Ot,null),e(ar,MLr),e(ar,Co),M(Ak,Co,null),e(Co,ELr),e(Co,U5e),e(U5e,CLr),e(Co,wLr),e(Co,En),e(En,ALr),e(En,H5e),e(H5e,LLr),e(En,yLr),e(En,J5e),e(J5e,xLr),e(En,$Lr),e(En,Y5e),e(Y5e,kLr),e(En,SLr),e(Co,RLr),e(Co,gt),e(gt,s3),e(s3,K5e),e(K5e,PLr),e(s3,BLr),e(s3,vZ),e(vZ,ILr),e(s3,NLr),e(gt,qLr),e(gt,l3),e(l3,Z5e),e(Z5e,jLr),e(l3,DLr),e(l3,FZ),e(FZ,GLr),e(l3,OLr),e(gt,VLr),e(gt,i3),e(i3,e0e),e(e0e,XLr),e(i3,zLr),e(i3,TZ),e(TZ,QLr),e(i3,WLr),e(gt,ULr),e(gt,d3),e(d3,o0e),e(o0e,HLr),e(d3,JLr),e(d3,MZ),e(MZ,YLr),e(d3,KLr),e(gt,ZLr),e(gt,c3),e(c3,r0e),e(r0e,eyr),e(c3,oyr),e(c3,EZ),e(EZ,ryr),e(c3,tyr),e(Co,ayr),e(Co,m3),e(m3,nyr),e(m3,t0e),e(t0e,syr),e(m3,lyr),e(m3,a0e),e(a0e,iyr),e(Co,dyr),M(f3,Co,null),b(m,BZe,_),b(m,jc,_),e(jc,g3),e(g3,n0e),M(Lk,n0e,null),e(jc,cyr),e(jc,s0e),e(s0e,myr),b(m,IZe,_),b(m,nr,_),M(yk,nr,null),e(nr,fyr),e(nr,Dc),e(Dc,gyr),e(Dc,CZ),e(CZ,hyr),e(Dc,uyr),e(Dc,wZ),e(wZ,pyr),e(Dc,_yr),e(nr,byr),e(nr,xk),e(xk,vyr),e(xk,l0e),e(l0e,Fyr),e(xk,Tyr),e(nr,Myr),e(nr,Vt),M($k,Vt,null),e(Vt,Eyr),e(Vt,i0e),e(i0e,Cyr),e(Vt,wyr),e(Vt,Gc),e(Gc,Ayr),e(Gc,d0e),e(d0e,Lyr),e(Gc,yyr),e(Gc,AZ),e(AZ,xyr),e(Gc,$yr),e(Vt,kyr),M(h3,Vt,null),e(nr,Syr),e(nr,wo),M(kk,wo,null),e(wo,Ryr),e(wo,c0e),e(c0e,Pyr),e(wo,Byr),e(wo,Cn),e(Cn,Iyr),e(Cn,m0e),e(m0e,Nyr),e(Cn,qyr),e(Cn,f0e),e(f0e,jyr),e(Cn,Dyr),e(Cn,g0e),e(g0e,Gyr),e(Cn,Oyr),e(wo,Vyr),e(wo,h0e),e(h0e,u3),e(u3,u0e),e(u0e,Xyr),e(u3,zyr),e(u3,LZ),e(LZ,Qyr),e(u3,Wyr),e(wo,Uyr),e(wo,p3),e(p3,Hyr),e(p3,p0e),e(p0e,Jyr),e(p3,Yyr),e(p3,_0e),e(_0e,Kyr),e(wo,Zyr),M(_3,wo,null),b(m,NZe,_),b(m,Oc,_),e(Oc,b3),e(b3,b0e),M(Sk,b0e,null),e(Oc,e8r),e(Oc,v0e),e(v0e,o8r),b(m,qZe,_),b(m,sr,_),M(Rk,sr,null),e(sr,r8r),e(sr,Vc),e(Vc,t8r),e(Vc,yZ),e(yZ,a8r),e(Vc,n8r),e(Vc,xZ),e(xZ,s8r),e(Vc,l8r),e(sr,i8r),e(sr,Pk),e(Pk,d8r),e(Pk,F0e),e(F0e,c8r),e(Pk,m8r),e(sr,f8r),e(sr,Xt),M(Bk,Xt,null),e(Xt,g8r),e(Xt,T0e),e(T0e,h8r),e(Xt,u8r),e(Xt,Xc),e(Xc,p8r),e(Xc,M0e),e(M0e,_8r),e(Xc,b8r),e(Xc,$Z),e($Z,v8r),e(Xc,F8r),e(Xt,T8r),M(v3,Xt,null),e(sr,M8r),e(sr,Ir),M(Ik,Ir,null),e(Ir,E8r),e(Ir,E0e),e(E0e,C8r),e(Ir,w8r),e(Ir,wn),e(wn,A8r),e(wn,C0e),e(C0e,L8r),e(wn,y8r),e(wn,w0e),e(w0e,x8r),e(wn,$8r),e(wn,A0e),e(A0e,k8r),e(wn,S8r),e(Ir,R8r),e(Ir,N),e(N,F3),e(F3,L0e),e(L0e,P8r),e(F3,B8r),e(F3,kZ),e(kZ,I8r),e(F3,N8r),e(N,q8r),e(N,T3),e(T3,y0e),e(y0e,j8r),e(T3,D8r),e(T3,SZ),e(SZ,G8r),e(T3,O8r),e(N,V8r),e(N,M3),e(M3,x0e),e(x0e,X8r),e(M3,z8r),e(M3,RZ),e(RZ,Q8r),e(M3,W8r),e(N,U8r),e(N,E3),e(E3,$0e),e($0e,H8r),e(E3,J8r),e(E3,PZ),e(PZ,Y8r),e(E3,K8r),e(N,Z8r),e(N,C3),e(C3,k0e),e(k0e,e9r),e(C3,o9r),e(C3,BZ),e(BZ,r9r),e(C3,t9r),e(N,a9r),e(N,w3),e(w3,S0e),e(S0e,n9r),e(w3,s9r),e(w3,IZ),e(IZ,l9r),e(w3,i9r),e(N,d9r),e(N,A3),e(A3,R0e),e(R0e,c9r),e(A3,m9r),e(A3,NZ),e(NZ,f9r),e(A3,g9r),e(N,h9r),e(N,L3),e(L3,P0e),e(P0e,u9r),e(L3,p9r),e(L3,qZ),e(qZ,_9r),e(L3,b9r),e(N,v9r),e(N,y3),e(y3,B0e),e(B0e,F9r),e(y3,T9r),e(y3,jZ),e(jZ,M9r),e(y3,E9r),e(N,C9r),e(N,x3),e(x3,I0e),e(I0e,w9r),e(x3,A9r),e(x3,DZ),e(DZ,L9r),e(x3,y9r),e(N,x9r),e(N,$3),e($3,N0e),e(N0e,$9r),e($3,k9r),e($3,GZ),e(GZ,S9r),e($3,R9r),e(N,P9r),e(N,k3),e(k3,q0e),e(q0e,B9r),e(k3,I9r),e(k3,OZ),e(OZ,N9r),e(k3,q9r),e(N,j9r),e(N,S3),e(S3,j0e),e(j0e,D9r),e(S3,G9r),e(S3,VZ),e(VZ,O9r),e(S3,V9r),e(N,X9r),e(N,R3),e(R3,D0e),e(D0e,z9r),e(R3,Q9r),e(R3,XZ),e(XZ,W9r),e(R3,U9r),e(N,H9r),e(N,P3),e(P3,G0e),e(G0e,J9r),e(P3,Y9r),e(P3,zZ),e(zZ,K9r),e(P3,Z9r),e(N,exr),e(N,B3),e(B3,O0e),e(O0e,oxr),e(B3,rxr),e(B3,QZ),e(QZ,txr),e(B3,axr),e(N,nxr),e(N,I3),e(I3,V0e),e(V0e,sxr),e(I3,lxr),e(I3,WZ),e(WZ,ixr),e(I3,dxr),e(N,cxr),e(N,N3),e(N3,X0e),e(X0e,mxr),e(N3,fxr),e(N3,UZ),e(UZ,gxr),e(N3,hxr),e(N,uxr),e(N,Fl),e(Fl,z0e),e(z0e,pxr),e(Fl,_xr),e(Fl,HZ),e(HZ,bxr),e(Fl,vxr),e(Fl,JZ),e(JZ,Fxr),e(Fl,Txr),e(N,Mxr),e(N,q3),e(q3,Q0e),e(Q0e,Exr),e(q3,Cxr),e(q3,YZ),e(YZ,wxr),e(q3,Axr),e(N,Lxr),e(N,j3),e(j3,W0e),e(W0e,yxr),e(j3,xxr),e(j3,KZ),e(KZ,$xr),e(j3,kxr),e(N,Sxr),e(N,D3),e(D3,U0e),e(U0e,Rxr),e(D3,Pxr),e(D3,ZZ),e(ZZ,Bxr),e(D3,Ixr),e(N,Nxr),e(N,G3),e(G3,H0e),e(H0e,qxr),e(G3,jxr),e(G3,eee),e(eee,Dxr),e(G3,Gxr),e(N,Oxr),e(N,O3),e(O3,J0e),e(J0e,Vxr),e(O3,Xxr),e(O3,oee),e(oee,zxr),e(O3,Qxr),e(N,Wxr),e(N,V3),e(V3,Y0e),e(Y0e,Uxr),e(V3,Hxr),e(V3,ree),e(ree,Jxr),e(V3,Yxr),e(N,Kxr),e(N,X3),e(X3,K0e),e(K0e,Zxr),e(X3,e$r),e(X3,tee),e(tee,o$r),e(X3,r$r),e(N,t$r),e(N,z3),e(z3,Z0e),e(Z0e,a$r),e(z3,n$r),e(z3,aee),e(aee,s$r),e(z3,l$r),e(N,i$r),e(N,Q3),e(Q3,ewe),e(ewe,d$r),e(Q3,c$r),e(Q3,nee),e(nee,m$r),e(Q3,f$r),e(N,g$r),e(N,W3),e(W3,owe),e(owe,h$r),e(W3,u$r),e(W3,see),e(see,p$r),e(W3,_$r),e(N,b$r),e(N,U3),e(U3,rwe),e(rwe,v$r),e(U3,F$r),e(U3,lee),e(lee,T$r),e(U3,M$r),e(N,E$r),e(N,H3),e(H3,twe),e(twe,C$r),e(H3,w$r),e(H3,iee),e(iee,A$r),e(H3,L$r),e(N,y$r),e(N,J3),e(J3,awe),e(awe,x$r),e(J3,$$r),e(J3,dee),e(dee,k$r),e(J3,S$r),e(N,R$r),e(N,Y3),e(Y3,nwe),e(nwe,P$r),e(Y3,B$r),e(Y3,cee),e(cee,I$r),e(Y3,N$r),e(N,q$r),e(N,K3),e(K3,swe),e(swe,j$r),e(K3,D$r),e(K3,mee),e(mee,G$r),e(K3,O$r),e(N,V$r),e(N,Z3),e(Z3,lwe),e(lwe,X$r),e(Z3,z$r),e(Z3,fee),e(fee,Q$r),e(Z3,W$r),e(N,U$r),e(N,e5),e(e5,iwe),e(iwe,H$r),e(e5,J$r),e(e5,gee),e(gee,Y$r),e(e5,K$r),e(N,Z$r),e(N,o5),e(o5,dwe),e(dwe,ekr),e(o5,okr),e(o5,hee),e(hee,rkr),e(o5,tkr),e(N,akr),e(N,r5),e(r5,cwe),e(cwe,nkr),e(r5,skr),e(r5,uee),e(uee,lkr),e(r5,ikr),e(N,dkr),e(N,t5),e(t5,mwe),e(mwe,ckr),e(t5,mkr),e(t5,pee),e(pee,fkr),e(t5,gkr),e(N,hkr),e(N,a5),e(a5,fwe),e(fwe,ukr),e(a5,pkr),e(a5,_ee),e(_ee,_kr),e(a5,bkr),e(N,vkr),e(N,n5),e(n5,gwe),e(gwe,Fkr),e(n5,Tkr),e(n5,bee),e(bee,Mkr),e(n5,Ekr),e(N,Ckr),e(N,s5),e(s5,hwe),e(hwe,wkr),e(s5,Akr),e(s5,vee),e(vee,Lkr),e(s5,ykr),e(N,xkr),e(N,l5),e(l5,uwe),e(uwe,$kr),e(l5,kkr),e(l5,Fee),e(Fee,Skr),e(l5,Rkr),e(N,Pkr),e(N,i5),e(i5,pwe),e(pwe,Bkr),e(i5,Ikr),e(i5,Tee),e(Tee,Nkr),e(i5,qkr),e(N,jkr),e(N,d5),e(d5,_we),e(_we,Dkr),e(d5,Gkr),e(d5,Mee),e(Mee,Okr),e(d5,Vkr),e(N,Xkr),e(N,c5),e(c5,bwe),e(bwe,zkr),e(c5,Qkr),e(c5,Eee),e(Eee,Wkr),e(c5,Ukr),e(N,Hkr),e(N,m5),e(m5,vwe),e(vwe,Jkr),e(m5,Ykr),e(m5,Cee),e(Cee,Kkr),e(m5,Zkr),e(N,eSr),e(N,f5),e(f5,Fwe),e(Fwe,oSr),e(f5,rSr),e(f5,wee),e(wee,tSr),e(f5,aSr),e(N,nSr),e(N,g5),e(g5,Twe),e(Twe,sSr),e(g5,lSr),e(g5,Aee),e(Aee,iSr),e(g5,dSr),e(N,cSr),e(N,h5),e(h5,Mwe),e(Mwe,mSr),e(h5,fSr),e(h5,Lee),e(Lee,gSr),e(h5,hSr),e(N,uSr),e(N,u5),e(u5,Ewe),e(Ewe,pSr),e(u5,_Sr),e(u5,yee),e(yee,bSr),e(u5,vSr),e(N,FSr),e(N,p5),e(p5,Cwe),e(Cwe,TSr),e(p5,MSr),e(p5,xee),e(xee,ESr),e(p5,CSr),e(N,wSr),e(N,_5),e(_5,wwe),e(wwe,ASr),e(_5,LSr),e(_5,$ee),e($ee,ySr),e(_5,xSr),e(N,$Sr),e(N,b5),e(b5,Awe),e(Awe,kSr),e(b5,SSr),e(b5,kee),e(kee,RSr),e(b5,PSr),e(Ir,BSr),M(v5,Ir,null),b(m,jZe,_),b(m,zc,_),e(zc,F5),e(F5,Lwe),M(Nk,Lwe,null),e(zc,ISr),e(zc,ywe),e(ywe,NSr),b(m,DZe,_),b(m,lr,_),M(qk,lr,null),e(lr,qSr),e(lr,Qc),e(Qc,jSr),e(Qc,See),e(See,DSr),e(Qc,GSr),e(Qc,Ree),e(Ree,OSr),e(Qc,VSr),e(lr,XSr),e(lr,jk),e(jk,zSr),e(jk,xwe),e(xwe,QSr),e(jk,WSr),e(lr,USr),e(lr,zt),M(Dk,zt,null),e(zt,HSr),e(zt,$we),e($we,JSr),e(zt,YSr),e(zt,Wc),e(Wc,KSr),e(Wc,kwe),e(kwe,ZSr),e(Wc,eRr),e(Wc,Pee),e(Pee,oRr),e(Wc,rRr),e(zt,tRr),M(T5,zt,null),e(lr,aRr),e(lr,Nr),M(Gk,Nr,null),e(Nr,nRr),e(Nr,Swe),e(Swe,sRr),e(Nr,lRr),e(Nr,An),e(An,iRr),e(An,Rwe),e(Rwe,dRr),e(An,cRr),e(An,Pwe),e(Pwe,mRr),e(An,fRr),e(An,Bwe),e(Bwe,gRr),e(An,hRr),e(Nr,uRr),e(Nr,se),e(se,M5),e(M5,Iwe),e(Iwe,pRr),e(M5,_Rr),e(M5,Bee),e(Bee,bRr),e(M5,vRr),e(se,FRr),e(se,E5),e(E5,Nwe),e(Nwe,TRr),e(E5,MRr),e(E5,Iee),e(Iee,ERr),e(E5,CRr),e(se,wRr),e(se,C5),e(C5,qwe),e(qwe,ARr),e(C5,LRr),e(C5,Nee),e(Nee,yRr),e(C5,xRr),e(se,$Rr),e(se,w5),e(w5,jwe),e(jwe,kRr),e(w5,SRr),e(w5,qee),e(qee,RRr),e(w5,PRr),e(se,BRr),e(se,A5),e(A5,Dwe),e(Dwe,IRr),e(A5,NRr),e(A5,jee),e(jee,qRr),e(A5,jRr),e(se,DRr),e(se,L5),e(L5,Gwe),e(Gwe,GRr),e(L5,ORr),e(L5,Dee),e(Dee,VRr),e(L5,XRr),e(se,zRr),e(se,y5),e(y5,Owe),e(Owe,QRr),e(y5,WRr),e(y5,Gee),e(Gee,URr),e(y5,HRr),e(se,JRr),e(se,x5),e(x5,Vwe),e(Vwe,YRr),e(x5,KRr),e(x5,Oee),e(Oee,ZRr),e(x5,ePr),e(se,oPr),e(se,$5),e($5,Xwe),e(Xwe,rPr),e($5,tPr),e($5,Vee),e(Vee,aPr),e($5,nPr),e(se,sPr),e(se,k5),e(k5,zwe),e(zwe,lPr),e(k5,iPr),e(k5,Xee),e(Xee,dPr),e(k5,cPr),e(se,mPr),e(se,S5),e(S5,Qwe),e(Qwe,fPr),e(S5,gPr),e(S5,zee),e(zee,hPr),e(S5,uPr),e(se,pPr),e(se,R5),e(R5,Wwe),e(Wwe,_Pr),e(R5,bPr),e(R5,Qee),e(Qee,vPr),e(R5,FPr),e(se,TPr),e(se,P5),e(P5,Uwe),e(Uwe,MPr),e(P5,EPr),e(P5,Wee),e(Wee,CPr),e(P5,wPr),e(se,APr),e(se,B5),e(B5,Hwe),e(Hwe,LPr),e(B5,yPr),e(B5,Uee),e(Uee,xPr),e(B5,$Pr),e(se,kPr),e(se,I5),e(I5,Jwe),e(Jwe,SPr),e(I5,RPr),e(I5,Hee),e(Hee,PPr),e(I5,BPr),e(se,IPr),e(se,N5),e(N5,Ywe),e(Ywe,NPr),e(N5,qPr),e(N5,Jee),e(Jee,jPr),e(N5,DPr),e(se,GPr),e(se,q5),e(q5,Kwe),e(Kwe,OPr),e(q5,VPr),e(q5,Yee),e(Yee,XPr),e(q5,zPr),e(se,QPr),e(se,j5),e(j5,Zwe),e(Zwe,WPr),e(j5,UPr),e(j5,Kee),e(Kee,HPr),e(j5,JPr),e(se,YPr),e(se,D5),e(D5,eAe),e(eAe,KPr),e(D5,ZPr),e(D5,Zee),e(Zee,eBr),e(D5,oBr),e(se,rBr),e(se,G5),e(G5,oAe),e(oAe,tBr),e(G5,aBr),e(G5,eoe),e(eoe,nBr),e(G5,sBr),e(se,lBr),e(se,O5),e(O5,rAe),e(rAe,iBr),e(O5,dBr),e(O5,ooe),e(ooe,cBr),e(O5,mBr),e(se,fBr),e(se,V5),e(V5,tAe),e(tAe,gBr),e(V5,hBr),e(V5,roe),e(roe,uBr),e(V5,pBr),e(se,_Br),e(se,X5),e(X5,aAe),e(aAe,bBr),e(X5,vBr),e(X5,toe),e(toe,FBr),e(X5,TBr),e(Nr,MBr),M(z5,Nr,null),b(m,GZe,_),b(m,Uc,_),e(Uc,Q5),e(Q5,nAe),M(Ok,nAe,null),e(Uc,EBr),e(Uc,sAe),e(sAe,CBr),b(m,OZe,_),b(m,ir,_),M(Vk,ir,null),e(ir,wBr),e(ir,Hc),e(Hc,ABr),e(Hc,aoe),e(aoe,LBr),e(Hc,yBr),e(Hc,noe),e(noe,xBr),e(Hc,$Br),e(ir,kBr),e(ir,Xk),e(Xk,SBr),e(Xk,lAe),e(lAe,RBr),e(Xk,PBr),e(ir,BBr),e(ir,Qt),M(zk,Qt,null),e(Qt,IBr),e(Qt,iAe),e(iAe,NBr),e(Qt,qBr),e(Qt,Jc),e(Jc,jBr),e(Jc,dAe),e(dAe,DBr),e(Jc,GBr),e(Jc,soe),e(soe,OBr),e(Jc,VBr),e(Qt,XBr),M(W5,Qt,null),e(ir,zBr),e(ir,qr),M(Qk,qr,null),e(qr,QBr),e(qr,cAe),e(cAe,WBr),e(qr,UBr),e(qr,Ln),e(Ln,HBr),e(Ln,mAe),e(mAe,JBr),e(Ln,YBr),e(Ln,fAe),e(fAe,KBr),e(Ln,ZBr),e(Ln,gAe),e(gAe,eIr),e(Ln,oIr),e(qr,rIr),e(qr,Me),e(Me,U5),e(U5,hAe),e(hAe,tIr),e(U5,aIr),e(U5,loe),e(loe,nIr),e(U5,sIr),e(Me,lIr),e(Me,H5),e(H5,uAe),e(uAe,iIr),e(H5,dIr),e(H5,ioe),e(ioe,cIr),e(H5,mIr),e(Me,fIr),e(Me,J5),e(J5,pAe),e(pAe,gIr),e(J5,hIr),e(J5,doe),e(doe,uIr),e(J5,pIr),e(Me,_Ir),e(Me,Y5),e(Y5,_Ae),e(_Ae,bIr),e(Y5,vIr),e(Y5,coe),e(coe,FIr),e(Y5,TIr),e(Me,MIr),e(Me,K5),e(K5,bAe),e(bAe,EIr),e(K5,CIr),e(K5,moe),e(moe,wIr),e(K5,AIr),e(Me,LIr),e(Me,Z5),e(Z5,vAe),e(vAe,yIr),e(Z5,xIr),e(Z5,foe),e(foe,$Ir),e(Z5,kIr),e(Me,SIr),e(Me,e0),e(e0,FAe),e(FAe,RIr),e(e0,PIr),e(e0,goe),e(goe,BIr),e(e0,IIr),e(Me,NIr),e(Me,o0),e(o0,TAe),e(TAe,qIr),e(o0,jIr),e(o0,hoe),e(hoe,DIr),e(o0,GIr),e(Me,OIr),e(Me,r0),e(r0,MAe),e(MAe,VIr),e(r0,XIr),e(r0,uoe),e(uoe,zIr),e(r0,QIr),e(Me,WIr),e(Me,t0),e(t0,EAe),e(EAe,UIr),e(t0,HIr),e(t0,poe),e(poe,JIr),e(t0,YIr),e(Me,KIr),e(Me,a0),e(a0,CAe),e(CAe,ZIr),e(a0,eNr),e(a0,_oe),e(_oe,oNr),e(a0,rNr),e(Me,tNr),e(Me,n0),e(n0,wAe),e(wAe,aNr),e(n0,nNr),e(n0,boe),e(boe,sNr),e(n0,lNr),e(Me,iNr),e(Me,s0),e(s0,AAe),e(AAe,dNr),e(s0,cNr),e(s0,voe),e(voe,mNr),e(s0,fNr),e(Me,gNr),e(Me,l0),e(l0,LAe),e(LAe,hNr),e(l0,uNr),e(l0,Foe),e(Foe,pNr),e(l0,_Nr),e(qr,bNr),M(i0,qr,null),b(m,VZe,_),b(m,Yc,_),e(Yc,d0),e(d0,yAe),M(Wk,yAe,null),e(Yc,vNr),e(Yc,xAe),e(xAe,FNr),b(m,XZe,_),b(m,dr,_),M(Uk,dr,null),e(dr,TNr),e(dr,Kc),e(Kc,MNr),e(Kc,Toe),e(Toe,ENr),e(Kc,CNr),e(Kc,Moe),e(Moe,wNr),e(Kc,ANr),e(dr,LNr),e(dr,Hk),e(Hk,yNr),e(Hk,$Ae),e($Ae,xNr),e(Hk,$Nr),e(dr,kNr),e(dr,Wt),M(Jk,Wt,null),e(Wt,SNr),e(Wt,kAe),e(kAe,RNr),e(Wt,PNr),e(Wt,Zc),e(Zc,BNr),e(Zc,SAe),e(SAe,INr),e(Zc,NNr),e(Zc,Eoe),e(Eoe,qNr),e(Zc,jNr),e(Wt,DNr),M(c0,Wt,null),e(dr,GNr),e(dr,jr),M(Yk,jr,null),e(jr,ONr),e(jr,RAe),e(RAe,VNr),e(jr,XNr),e(jr,yn),e(yn,zNr),e(yn,PAe),e(PAe,QNr),e(yn,WNr),e(yn,BAe),e(BAe,UNr),e(yn,HNr),e(yn,IAe),e(IAe,JNr),e(yn,YNr),e(jr,KNr),e(jr,Be),e(Be,m0),e(m0,NAe),e(NAe,ZNr),e(m0,eqr),e(m0,Coe),e(Coe,oqr),e(m0,rqr),e(Be,tqr),e(Be,f0),e(f0,qAe),e(qAe,aqr),e(f0,nqr),e(f0,woe),e(woe,sqr),e(f0,lqr),e(Be,iqr),e(Be,Tl),e(Tl,jAe),e(jAe,dqr),e(Tl,cqr),e(Tl,Aoe),e(Aoe,mqr),e(Tl,fqr),e(Tl,Loe),e(Loe,gqr),e(Tl,hqr),e(Be,uqr),e(Be,g0),e(g0,DAe),e(DAe,pqr),e(g0,_qr),e(g0,yoe),e(yoe,bqr),e(g0,vqr),e(Be,Fqr),e(Be,h0),e(h0,GAe),e(GAe,Tqr),e(h0,Mqr),e(h0,xoe),e(xoe,Eqr),e(h0,Cqr),e(Be,wqr),e(Be,u0),e(u0,OAe),e(OAe,Aqr),e(u0,Lqr),e(u0,$oe),e($oe,yqr),e(u0,xqr),e(Be,$qr),e(Be,p0),e(p0,VAe),e(VAe,kqr),e(p0,Sqr),e(p0,koe),e(koe,Rqr),e(p0,Pqr),e(Be,Bqr),e(Be,_0),e(_0,XAe),e(XAe,Iqr),e(_0,Nqr),e(_0,Soe),e(Soe,qqr),e(_0,jqr),e(Be,Dqr),e(Be,b0),e(b0,zAe),e(zAe,Gqr),e(b0,Oqr),e(b0,Roe),e(Roe,Vqr),e(b0,Xqr),e(jr,zqr),M(v0,jr,null),b(m,zZe,_),b(m,em,_),e(em,F0),e(F0,QAe),M(Kk,QAe,null),e(em,Qqr),e(em,WAe),e(WAe,Wqr),b(m,QZe,_),b(m,cr,_),M(Zk,cr,null),e(cr,Uqr),e(cr,om),e(om,Hqr),e(om,Poe),e(Poe,Jqr),e(om,Yqr),e(om,Boe),e(Boe,Kqr),e(om,Zqr),e(cr,ejr),e(cr,eS),e(eS,ojr),e(eS,UAe),e(UAe,rjr),e(eS,tjr),e(cr,ajr),e(cr,Ut),M(oS,Ut,null),e(Ut,njr),e(Ut,HAe),e(HAe,sjr),e(Ut,ljr),e(Ut,rm),e(rm,ijr),e(rm,JAe),e(JAe,djr),e(rm,cjr),e(rm,Ioe),e(Ioe,mjr),e(rm,fjr),e(Ut,gjr),M(T0,Ut,null),e(cr,hjr),e(cr,Dr),M(rS,Dr,null),e(Dr,ujr),e(Dr,YAe),e(YAe,pjr),e(Dr,_jr),e(Dr,xn),e(xn,bjr),e(xn,KAe),e(KAe,vjr),e(xn,Fjr),e(xn,ZAe),e(ZAe,Tjr),e(xn,Mjr),e(xn,e6e),e(e6e,Ejr),e(xn,Cjr),e(Dr,wjr),e(Dr,tm),e(tm,M0),e(M0,o6e),e(o6e,Ajr),e(M0,Ljr),e(M0,Noe),e(Noe,yjr),e(M0,xjr),e(tm,$jr),e(tm,E0),e(E0,r6e),e(r6e,kjr),e(E0,Sjr),e(E0,qoe),e(qoe,Rjr),e(E0,Pjr),e(tm,Bjr),e(tm,C0),e(C0,t6e),e(t6e,Ijr),e(C0,Njr),e(C0,joe),e(joe,qjr),e(C0,jjr),e(Dr,Djr),M(w0,Dr,null),b(m,WZe,_),b(m,am,_),e(am,A0),e(A0,a6e),M(tS,a6e,null),e(am,Gjr),e(am,n6e),e(n6e,Ojr),b(m,UZe,_),b(m,mr,_),M(aS,mr,null),e(mr,Vjr),e(mr,nm),e(nm,Xjr),e(nm,Doe),e(Doe,zjr),e(nm,Qjr),e(nm,Goe),e(Goe,Wjr),e(nm,Ujr),e(mr,Hjr),e(mr,nS),e(nS,Jjr),e(nS,s6e),e(s6e,Yjr),e(nS,Kjr),e(mr,Zjr),e(mr,Ht),M(sS,Ht,null),e(Ht,eDr),e(Ht,l6e),e(l6e,oDr),e(Ht,rDr),e(Ht,sm),e(sm,tDr),e(sm,i6e),e(i6e,aDr),e(sm,nDr),e(sm,Ooe),e(Ooe,sDr),e(sm,lDr),e(Ht,iDr),M(L0,Ht,null),e(mr,dDr),e(mr,Gr),M(lS,Gr,null),e(Gr,cDr),e(Gr,d6e),e(d6e,mDr),e(Gr,fDr),e(Gr,$n),e($n,gDr),e($n,c6e),e(c6e,hDr),e($n,uDr),e($n,m6e),e(m6e,pDr),e($n,_Dr),e($n,f6e),e(f6e,bDr),e($n,vDr),e(Gr,FDr),e(Gr,fe),e(fe,y0),e(y0,g6e),e(g6e,TDr),e(y0,MDr),e(y0,Voe),e(Voe,EDr),e(y0,CDr),e(fe,wDr),e(fe,x0),e(x0,h6e),e(h6e,ADr),e(x0,LDr),e(x0,Xoe),e(Xoe,yDr),e(x0,xDr),e(fe,$Dr),e(fe,$0),e($0,u6e),e(u6e,kDr),e($0,SDr),e($0,zoe),e(zoe,RDr),e($0,PDr),e(fe,BDr),e(fe,k0),e(k0,p6e),e(p6e,IDr),e(k0,NDr),e(k0,Qoe),e(Qoe,qDr),e(k0,jDr),e(fe,DDr),e(fe,S0),e(S0,_6e),e(_6e,GDr),e(S0,ODr),e(S0,Woe),e(Woe,VDr),e(S0,XDr),e(fe,zDr),e(fe,R0),e(R0,b6e),e(b6e,QDr),e(R0,WDr),e(R0,Uoe),e(Uoe,UDr),e(R0,HDr),e(fe,JDr),e(fe,P0),e(P0,v6e),e(v6e,YDr),e(P0,KDr),e(P0,Hoe),e(Hoe,ZDr),e(P0,eGr),e(fe,oGr),e(fe,B0),e(B0,F6e),e(F6e,rGr),e(B0,tGr),e(B0,Joe),e(Joe,aGr),e(B0,nGr),e(fe,sGr),e(fe,I0),e(I0,T6e),e(T6e,lGr),e(I0,iGr),e(I0,Yoe),e(Yoe,dGr),e(I0,cGr),e(fe,mGr),e(fe,N0),e(N0,M6e),e(M6e,fGr),e(N0,gGr),e(N0,Koe),e(Koe,hGr),e(N0,uGr),e(fe,pGr),e(fe,q0),e(q0,E6e),e(E6e,_Gr),e(q0,bGr),e(q0,Zoe),e(Zoe,vGr),e(q0,FGr),e(fe,TGr),e(fe,j0),e(j0,C6e),e(C6e,MGr),e(j0,EGr),e(j0,ere),e(ere,CGr),e(j0,wGr),e(fe,AGr),e(fe,D0),e(D0,w6e),e(w6e,LGr),e(D0,yGr),e(D0,ore),e(ore,xGr),e(D0,$Gr),e(fe,kGr),e(fe,G0),e(G0,A6e),e(A6e,SGr),e(G0,RGr),e(G0,rre),e(rre,PGr),e(G0,BGr),e(fe,IGr),e(fe,O0),e(O0,L6e),e(L6e,NGr),e(O0,qGr),e(O0,tre),e(tre,jGr),e(O0,DGr),e(fe,GGr),e(fe,V0),e(V0,y6e),e(y6e,OGr),e(V0,VGr),e(V0,are),e(are,XGr),e(V0,zGr),e(fe,QGr),e(fe,X0),e(X0,x6e),e(x6e,WGr),e(X0,UGr),e(X0,nre),e(nre,HGr),e(X0,JGr),e(fe,YGr),e(fe,z0),e(z0,$6e),e($6e,KGr),e(z0,ZGr),e(z0,sre),e(sre,eOr),e(z0,oOr),e(fe,rOr),e(fe,Q0),e(Q0,k6e),e(k6e,tOr),e(Q0,aOr),e(Q0,lre),e(lre,nOr),e(Q0,sOr),e(fe,lOr),e(fe,W0),e(W0,S6e),e(S6e,iOr),e(W0,dOr),e(W0,ire),e(ire,cOr),e(W0,mOr),e(Gr,fOr),M(U0,Gr,null),b(m,HZe,_),b(m,lm,_),e(lm,H0),e(H0,R6e),M(iS,R6e,null),e(lm,gOr),e(lm,P6e),e(P6e,hOr),b(m,JZe,_),b(m,fr,_),M(dS,fr,null),e(fr,uOr),e(fr,im),e(im,pOr),e(im,dre),e(dre,_Or),e(im,bOr),e(im,cre),e(cre,vOr),e(im,FOr),e(fr,TOr),e(fr,cS),e(cS,MOr),e(cS,B6e),e(B6e,EOr),e(cS,COr),e(fr,wOr),e(fr,Jt),M(mS,Jt,null),e(Jt,AOr),e(Jt,I6e),e(I6e,LOr),e(Jt,yOr),e(Jt,dm),e(dm,xOr),e(dm,N6e),e(N6e,$Or),e(dm,kOr),e(dm,mre),e(mre,SOr),e(dm,ROr),e(Jt,POr),M(J0,Jt,null),e(fr,BOr),e(fr,Or),M(fS,Or,null),e(Or,IOr),e(Or,q6e),e(q6e,NOr),e(Or,qOr),e(Or,kn),e(kn,jOr),e(kn,j6e),e(j6e,DOr),e(kn,GOr),e(kn,D6e),e(D6e,OOr),e(kn,VOr),e(kn,G6e),e(G6e,XOr),e(kn,zOr),e(Or,QOr),e(Or,ye),e(ye,Y0),e(Y0,O6e),e(O6e,WOr),e(Y0,UOr),e(Y0,fre),e(fre,HOr),e(Y0,JOr),e(ye,YOr),e(ye,K0),e(K0,V6e),e(V6e,KOr),e(K0,ZOr),e(K0,gre),e(gre,eVr),e(K0,oVr),e(ye,rVr),e(ye,Z0),e(Z0,X6e),e(X6e,tVr),e(Z0,aVr),e(Z0,hre),e(hre,nVr),e(Z0,sVr),e(ye,lVr),e(ye,ew),e(ew,z6e),e(z6e,iVr),e(ew,dVr),e(ew,ure),e(ure,cVr),e(ew,mVr),e(ye,fVr),e(ye,ow),e(ow,Q6e),e(Q6e,gVr),e(ow,hVr),e(ow,pre),e(pre,uVr),e(ow,pVr),e(ye,_Vr),e(ye,rw),e(rw,W6e),e(W6e,bVr),e(rw,vVr),e(rw,_re),e(_re,FVr),e(rw,TVr),e(ye,MVr),e(ye,tw),e(tw,U6e),e(U6e,EVr),e(tw,CVr),e(tw,bre),e(bre,wVr),e(tw,AVr),e(ye,LVr),e(ye,aw),e(aw,H6e),e(H6e,yVr),e(aw,xVr),e(aw,vre),e(vre,$Vr),e(aw,kVr),e(ye,SVr),e(ye,nw),e(nw,J6e),e(J6e,RVr),e(nw,PVr),e(nw,Fre),e(Fre,BVr),e(nw,IVr),e(ye,NVr),e(ye,sw),e(sw,Y6e),e(Y6e,qVr),e(sw,jVr),e(sw,Tre),e(Tre,DVr),e(sw,GVr),e(Or,OVr),M(lw,Or,null),b(m,YZe,_),b(m,cm,_),e(cm,iw),e(iw,K6e),M(gS,K6e,null),e(cm,VVr),e(cm,Z6e),e(Z6e,XVr),b(m,KZe,_),b(m,gr,_),M(hS,gr,null),e(gr,zVr),e(gr,mm),e(mm,QVr),e(mm,Mre),e(Mre,WVr),e(mm,UVr),e(mm,Ere),e(Ere,HVr),e(mm,JVr),e(gr,YVr),e(gr,uS),e(uS,KVr),e(uS,e7e),e(e7e,ZVr),e(uS,eXr),e(gr,oXr),e(gr,Yt),M(pS,Yt,null),e(Yt,rXr),e(Yt,o7e),e(o7e,tXr),e(Yt,aXr),e(Yt,fm),e(fm,nXr),e(fm,r7e),e(r7e,sXr),e(fm,lXr),e(fm,Cre),e(Cre,iXr),e(fm,dXr),e(Yt,cXr),M(dw,Yt,null),e(gr,mXr),e(gr,Vr),M(_S,Vr,null),e(Vr,fXr),e(Vr,t7e),e(t7e,gXr),e(Vr,hXr),e(Vr,Sn),e(Sn,uXr),e(Sn,a7e),e(a7e,pXr),e(Sn,_Xr),e(Sn,n7e),e(n7e,bXr),e(Sn,vXr),e(Sn,s7e),e(s7e,FXr),e(Sn,TXr),e(Vr,MXr),e(Vr,re),e(re,cw),e(cw,l7e),e(l7e,EXr),e(cw,CXr),e(cw,wre),e(wre,wXr),e(cw,AXr),e(re,LXr),e(re,mw),e(mw,i7e),e(i7e,yXr),e(mw,xXr),e(mw,Are),e(Are,$Xr),e(mw,kXr),e(re,SXr),e(re,fw),e(fw,d7e),e(d7e,RXr),e(fw,PXr),e(fw,Lre),e(Lre,BXr),e(fw,IXr),e(re,NXr),e(re,gw),e(gw,c7e),e(c7e,qXr),e(gw,jXr),e(gw,yre),e(yre,DXr),e(gw,GXr),e(re,OXr),e(re,hw),e(hw,m7e),e(m7e,VXr),e(hw,XXr),e(hw,xre),e(xre,zXr),e(hw,QXr),e(re,WXr),e(re,uw),e(uw,f7e),e(f7e,UXr),e(uw,HXr),e(uw,$re),e($re,JXr),e(uw,YXr),e(re,KXr),e(re,pw),e(pw,g7e),e(g7e,ZXr),e(pw,ezr),e(pw,kre),e(kre,ozr),e(pw,rzr),e(re,tzr),e(re,_w),e(_w,h7e),e(h7e,azr),e(_w,nzr),e(_w,Sre),e(Sre,szr),e(_w,lzr),e(re,izr),e(re,bw),e(bw,u7e),e(u7e,dzr),e(bw,czr),e(bw,Rre),e(Rre,mzr),e(bw,fzr),e(re,gzr),e(re,vw),e(vw,p7e),e(p7e,hzr),e(vw,uzr),e(vw,Pre),e(Pre,pzr),e(vw,_zr),e(re,bzr),e(re,Fw),e(Fw,_7e),e(_7e,vzr),e(Fw,Fzr),e(Fw,Bre),e(Bre,Tzr),e(Fw,Mzr),e(re,Ezr),e(re,Tw),e(Tw,b7e),e(b7e,Czr),e(Tw,wzr),e(Tw,Ire),e(Ire,Azr),e(Tw,Lzr),e(re,yzr),e(re,Mw),e(Mw,v7e),e(v7e,xzr),e(Mw,$zr),e(Mw,Nre),e(Nre,kzr),e(Mw,Szr),e(re,Rzr),e(re,Ew),e(Ew,F7e),e(F7e,Pzr),e(Ew,Bzr),e(Ew,qre),e(qre,Izr),e(Ew,Nzr),e(re,qzr),e(re,Cw),e(Cw,T7e),e(T7e,jzr),e(Cw,Dzr),e(Cw,jre),e(jre,Gzr),e(Cw,Ozr),e(re,Vzr),e(re,ww),e(ww,M7e),e(M7e,Xzr),e(ww,zzr),e(ww,Dre),e(Dre,Qzr),e(ww,Wzr),e(re,Uzr),e(re,Aw),e(Aw,E7e),e(E7e,Hzr),e(Aw,Jzr),e(Aw,Gre),e(Gre,Yzr),e(Aw,Kzr),e(re,Zzr),e(re,Lw),e(Lw,C7e),e(C7e,eQr),e(Lw,oQr),e(Lw,Ore),e(Ore,rQr),e(Lw,tQr),e(re,aQr),e(re,yw),e(yw,w7e),e(w7e,nQr),e(yw,sQr),e(yw,Vre),e(Vre,lQr),e(yw,iQr),e(re,dQr),e(re,xw),e(xw,A7e),e(A7e,cQr),e(xw,mQr),e(xw,Xre),e(Xre,fQr),e(xw,gQr),e(re,hQr),e(re,$w),e($w,L7e),e(L7e,uQr),e($w,pQr),e($w,zre),e(zre,_Qr),e($w,bQr),e(re,vQr),e(re,kw),e(kw,y7e),e(y7e,FQr),e(kw,TQr),e(kw,Qre),e(Qre,MQr),e(kw,EQr),e(re,CQr),e(re,Sw),e(Sw,x7e),e(x7e,wQr),e(Sw,AQr),e(Sw,Wre),e(Wre,LQr),e(Sw,yQr),e(re,xQr),e(re,Rw),e(Rw,$7e),e($7e,$Qr),e(Rw,kQr),e(Rw,Ure),e(Ure,SQr),e(Rw,RQr),e(re,PQr),e(re,Pw),e(Pw,k7e),e(k7e,BQr),e(Pw,IQr),e(Pw,Hre),e(Hre,NQr),e(Pw,qQr),e(re,jQr),e(re,Bw),e(Bw,S7e),e(S7e,DQr),e(Bw,GQr),e(Bw,Jre),e(Jre,OQr),e(Bw,VQr),e(re,XQr),e(re,Iw),e(Iw,R7e),e(R7e,zQr),e(Iw,QQr),e(Iw,Yre),e(Yre,WQr),e(Iw,UQr),e(Vr,HQr),M(Nw,Vr,null),b(m,ZZe,_),b(m,gm,_),e(gm,qw),e(qw,P7e),M(bS,P7e,null),e(gm,JQr),e(gm,B7e),e(B7e,YQr),b(m,eeo,_),b(m,hr,_),M(vS,hr,null),e(hr,KQr),e(hr,hm),e(hm,ZQr),e(hm,Kre),e(Kre,eWr),e(hm,oWr),e(hm,Zre),e(Zre,rWr),e(hm,tWr),e(hr,aWr),e(hr,FS),e(FS,nWr),e(FS,I7e),e(I7e,sWr),e(FS,lWr),e(hr,iWr),e(hr,Kt),M(TS,Kt,null),e(Kt,dWr),e(Kt,N7e),e(N7e,cWr),e(Kt,mWr),e(Kt,um),e(um,fWr),e(um,q7e),e(q7e,gWr),e(um,hWr),e(um,ete),e(ete,uWr),e(um,pWr),e(Kt,_Wr),M(jw,Kt,null),e(hr,bWr),e(hr,Xr),M(MS,Xr,null),e(Xr,vWr),e(Xr,j7e),e(j7e,FWr),e(Xr,TWr),e(Xr,Rn),e(Rn,MWr),e(Rn,D7e),e(D7e,EWr),e(Rn,CWr),e(Rn,G7e),e(G7e,wWr),e(Rn,AWr),e(Rn,O7e),e(O7e,LWr),e(Rn,yWr),e(Xr,xWr),e(Xr,ve),e(ve,Dw),e(Dw,V7e),e(V7e,$Wr),e(Dw,kWr),e(Dw,ote),e(ote,SWr),e(Dw,RWr),e(ve,PWr),e(ve,Gw),e(Gw,X7e),e(X7e,BWr),e(Gw,IWr),e(Gw,rte),e(rte,NWr),e(Gw,qWr),e(ve,jWr),e(ve,Ow),e(Ow,z7e),e(z7e,DWr),e(Ow,GWr),e(Ow,tte),e(tte,OWr),e(Ow,VWr),e(ve,XWr),e(ve,Vw),e(Vw,Q7e),e(Q7e,zWr),e(Vw,QWr),e(Vw,ate),e(ate,WWr),e(Vw,UWr),e(ve,HWr),e(ve,Xw),e(Xw,W7e),e(W7e,JWr),e(Xw,YWr),e(Xw,nte),e(nte,KWr),e(Xw,ZWr),e(ve,eUr),e(ve,zw),e(zw,U7e),e(U7e,oUr),e(zw,rUr),e(zw,ste),e(ste,tUr),e(zw,aUr),e(ve,nUr),e(ve,Qw),e(Qw,H7e),e(H7e,sUr),e(Qw,lUr),e(Qw,lte),e(lte,iUr),e(Qw,dUr),e(ve,cUr),e(ve,Ww),e(Ww,J7e),e(J7e,mUr),e(Ww,fUr),e(Ww,ite),e(ite,gUr),e(Ww,hUr),e(ve,uUr),e(ve,Uw),e(Uw,Y7e),e(Y7e,pUr),e(Uw,_Ur),e(Uw,dte),e(dte,bUr),e(Uw,vUr),e(ve,FUr),e(ve,Hw),e(Hw,K7e),e(K7e,TUr),e(Hw,MUr),e(Hw,cte),e(cte,EUr),e(Hw,CUr),e(ve,wUr),e(ve,Jw),e(Jw,Z7e),e(Z7e,AUr),e(Jw,LUr),e(Jw,mte),e(mte,yUr),e(Jw,xUr),e(ve,$Ur),e(ve,Yw),e(Yw,eLe),e(eLe,kUr),e(Yw,SUr),e(Yw,fte),e(fte,RUr),e(Yw,PUr),e(ve,BUr),e(ve,Kw),e(Kw,oLe),e(oLe,IUr),e(Kw,NUr),e(Kw,gte),e(gte,qUr),e(Kw,jUr),e(ve,DUr),e(ve,Zw),e(Zw,rLe),e(rLe,GUr),e(Zw,OUr),e(Zw,hte),e(hte,VUr),e(Zw,XUr),e(ve,zUr),e(ve,eA),e(eA,tLe),e(tLe,QUr),e(eA,WUr),e(eA,ute),e(ute,UUr),e(eA,HUr),e(ve,JUr),e(ve,oA),e(oA,aLe),e(aLe,YUr),e(oA,KUr),e(oA,pte),e(pte,ZUr),e(oA,eHr),e(ve,oHr),e(ve,rA),e(rA,nLe),e(nLe,rHr),e(rA,tHr),e(rA,_te),e(_te,aHr),e(rA,nHr),e(Xr,sHr),M(tA,Xr,null),b(m,oeo,_),b(m,pm,_),e(pm,aA),e(aA,sLe),M(ES,sLe,null),e(pm,lHr),e(pm,lLe),e(lLe,iHr),b(m,reo,_),b(m,ur,_),M(CS,ur,null),e(ur,dHr),e(ur,_m),e(_m,cHr),e(_m,bte),e(bte,mHr),e(_m,fHr),e(_m,vte),e(vte,gHr),e(_m,hHr),e(ur,uHr),e(ur,wS),e(wS,pHr),e(wS,iLe),e(iLe,_Hr),e(wS,bHr),e(ur,vHr),e(ur,Zt),M(AS,Zt,null),e(Zt,FHr),e(Zt,dLe),e(dLe,THr),e(Zt,MHr),e(Zt,bm),e(bm,EHr),e(bm,cLe),e(cLe,CHr),e(bm,wHr),e(bm,Fte),e(Fte,AHr),e(bm,LHr),e(Zt,yHr),M(nA,Zt,null),e(ur,xHr),e(ur,zr),M(LS,zr,null),e(zr,$Hr),e(zr,mLe),e(mLe,kHr),e(zr,SHr),e(zr,Pn),e(Pn,RHr),e(Pn,fLe),e(fLe,PHr),e(Pn,BHr),e(Pn,gLe),e(gLe,IHr),e(Pn,NHr),e(Pn,hLe),e(hLe,qHr),e(Pn,jHr),e(zr,DHr),e(zr,yS),e(yS,sA),e(sA,uLe),e(uLe,GHr),e(sA,OHr),e(sA,Tte),e(Tte,VHr),e(sA,XHr),e(yS,zHr),e(yS,lA),e(lA,pLe),e(pLe,QHr),e(lA,WHr),e(lA,Mte),e(Mte,UHr),e(lA,HHr),e(zr,JHr),M(iA,zr,null),b(m,teo,_),b(m,vm,_),e(vm,dA),e(dA,_Le),M(xS,_Le,null),e(vm,YHr),e(vm,bLe),e(bLe,KHr),b(m,aeo,_),b(m,pr,_),M($S,pr,null),e(pr,ZHr),e(pr,Fm),e(Fm,eJr),e(Fm,Ete),e(Ete,oJr),e(Fm,rJr),e(Fm,Cte),e(Cte,tJr),e(Fm,aJr),e(pr,nJr),e(pr,kS),e(kS,sJr),e(kS,vLe),e(vLe,lJr),e(kS,iJr),e(pr,dJr),e(pr,ea),M(SS,ea,null),e(ea,cJr),e(ea,FLe),e(FLe,mJr),e(ea,fJr),e(ea,Tm),e(Tm,gJr),e(Tm,TLe),e(TLe,hJr),e(Tm,uJr),e(Tm,wte),e(wte,pJr),e(Tm,_Jr),e(ea,bJr),M(cA,ea,null),e(pr,vJr),e(pr,Qr),M(RS,Qr,null),e(Qr,FJr),e(Qr,MLe),e(MLe,TJr),e(Qr,MJr),e(Qr,Bn),e(Bn,EJr),e(Bn,ELe),e(ELe,CJr),e(Bn,wJr),e(Bn,CLe),e(CLe,AJr),e(Bn,LJr),e(Bn,wLe),e(wLe,yJr),e(Bn,xJr),e(Qr,$Jr),e(Qr,ALe),e(ALe,mA),e(mA,LLe),e(LLe,kJr),e(mA,SJr),e(mA,Ate),e(Ate,RJr),e(mA,PJr),e(Qr,BJr),M(fA,Qr,null),b(m,neo,_),b(m,Mm,_),e(Mm,gA),e(gA,yLe),M(PS,yLe,null),e(Mm,IJr),e(Mm,xLe),e(xLe,NJr),b(m,seo,_),b(m,_r,_),M(BS,_r,null),e(_r,qJr),e(_r,Em),e(Em,jJr),e(Em,Lte),e(Lte,DJr),e(Em,GJr),e(Em,yte),e(yte,OJr),e(Em,VJr),e(_r,XJr),e(_r,IS),e(IS,zJr),e(IS,$Le),e($Le,QJr),e(IS,WJr),e(_r,UJr),e(_r,oa),M(NS,oa,null),e(oa,HJr),e(oa,kLe),e(kLe,JJr),e(oa,YJr),e(oa,Cm),e(Cm,KJr),e(Cm,SLe),e(SLe,ZJr),e(Cm,eYr),e(Cm,xte),e(xte,oYr),e(Cm,rYr),e(oa,tYr),M(hA,oa,null),e(_r,aYr),e(_r,Wr),M(qS,Wr,null),e(Wr,nYr),e(Wr,RLe),e(RLe,sYr),e(Wr,lYr),e(Wr,In),e(In,iYr),e(In,PLe),e(PLe,dYr),e(In,cYr),e(In,BLe),e(BLe,mYr),e(In,fYr),e(In,ILe),e(ILe,gYr),e(In,hYr),e(Wr,uYr),e(Wr,NLe),e(NLe,uA),e(uA,qLe),e(qLe,pYr),e(uA,_Yr),e(uA,$te),e($te,bYr),e(uA,vYr),e(Wr,FYr),M(pA,Wr,null),b(m,leo,_),b(m,wm,_),e(wm,_A),e(_A,jLe),M(jS,jLe,null),e(wm,TYr),e(wm,DLe),e(DLe,MYr),b(m,ieo,_),b(m,br,_),M(DS,br,null),e(br,EYr),e(br,Am),e(Am,CYr),e(Am,kte),e(kte,wYr),e(Am,AYr),e(Am,Ste),e(Ste,LYr),e(Am,yYr),e(br,xYr),e(br,GS),e(GS,$Yr),e(GS,GLe),e(GLe,kYr),e(GS,SYr),e(br,RYr),e(br,ra),M(OS,ra,null),e(ra,PYr),e(ra,OLe),e(OLe,BYr),e(ra,IYr),e(ra,Lm),e(Lm,NYr),e(Lm,VLe),e(VLe,qYr),e(Lm,jYr),e(Lm,Rte),e(Rte,DYr),e(Lm,GYr),e(ra,OYr),M(bA,ra,null),e(br,VYr),e(br,Ur),M(VS,Ur,null),e(Ur,XYr),e(Ur,XLe),e(XLe,zYr),e(Ur,QYr),e(Ur,Nn),e(Nn,WYr),e(Nn,zLe),e(zLe,UYr),e(Nn,HYr),e(Nn,QLe),e(QLe,JYr),e(Nn,YYr),e(Nn,WLe),e(WLe,KYr),e(Nn,ZYr),e(Ur,eKr),e(Ur,de),e(de,vA),e(vA,ULe),e(ULe,oKr),e(vA,rKr),e(vA,Pte),e(Pte,tKr),e(vA,aKr),e(de,nKr),e(de,FA),e(FA,HLe),e(HLe,sKr),e(FA,lKr),e(FA,Bte),e(Bte,iKr),e(FA,dKr),e(de,cKr),e(de,TA),e(TA,JLe),e(JLe,mKr),e(TA,fKr),e(TA,Ite),e(Ite,gKr),e(TA,hKr),e(de,uKr),e(de,MA),e(MA,YLe),e(YLe,pKr),e(MA,_Kr),e(MA,Nte),e(Nte,bKr),e(MA,vKr),e(de,FKr),e(de,EA),e(EA,KLe),e(KLe,TKr),e(EA,MKr),e(EA,qte),e(qte,EKr),e(EA,CKr),e(de,wKr),e(de,CA),e(CA,ZLe),e(ZLe,AKr),e(CA,LKr),e(CA,jte),e(jte,yKr),e(CA,xKr),e(de,$Kr),e(de,wA),e(wA,eye),e(eye,kKr),e(wA,SKr),e(wA,Dte),e(Dte,RKr),e(wA,PKr),e(de,BKr),e(de,AA),e(AA,oye),e(oye,IKr),e(AA,NKr),e(AA,Gte),e(Gte,qKr),e(AA,jKr),e(de,DKr),e(de,LA),e(LA,rye),e(rye,GKr),e(LA,OKr),e(LA,Ote),e(Ote,VKr),e(LA,XKr),e(de,zKr),e(de,yA),e(yA,tye),e(tye,QKr),e(yA,WKr),e(yA,Vte),e(Vte,UKr),e(yA,HKr),e(de,JKr),e(de,xA),e(xA,aye),e(aye,YKr),e(xA,KKr),e(xA,Xte),e(Xte,ZKr),e(xA,eZr),e(de,oZr),e(de,$A),e($A,nye),e(nye,rZr),e($A,tZr),e($A,zte),e(zte,aZr),e($A,nZr),e(de,sZr),e(de,kA),e(kA,sye),e(sye,lZr),e(kA,iZr),e(kA,Qte),e(Qte,dZr),e(kA,cZr),e(de,mZr),e(de,SA),e(SA,lye),e(lye,fZr),e(SA,gZr),e(SA,Wte),e(Wte,hZr),e(SA,uZr),e(de,pZr),e(de,RA),e(RA,iye),e(iye,_Zr),e(RA,bZr),e(RA,Ute),e(Ute,vZr),e(RA,FZr),e(de,TZr),e(de,PA),e(PA,dye),e(dye,MZr),e(PA,EZr),e(PA,Hte),e(Hte,CZr),e(PA,wZr),e(de,AZr),e(de,BA),e(BA,cye),e(cye,LZr),e(BA,yZr),e(BA,Jte),e(Jte,xZr),e(BA,$Zr),e(de,kZr),e(de,IA),e(IA,mye),e(mye,SZr),e(IA,RZr),e(IA,Yte),e(Yte,PZr),e(IA,BZr),e(de,IZr),e(de,NA),e(NA,fye),e(fye,NZr),e(NA,qZr),e(NA,Kte),e(Kte,jZr),e(NA,DZr),e(de,GZr),e(de,qA),e(qA,gye),e(gye,OZr),e(qA,VZr),e(qA,Zte),e(Zte,XZr),e(qA,zZr),e(de,QZr),e(de,jA),e(jA,hye),e(hye,WZr),e(jA,UZr),e(jA,eae),e(eae,HZr),e(jA,JZr),e(Ur,YZr),M(DA,Ur,null),b(m,deo,_),b(m,ym,_),e(ym,GA),e(GA,uye),M(XS,uye,null),e(ym,KZr),e(ym,pye),e(pye,ZZr),b(m,ceo,_),b(m,vr,_),M(zS,vr,null),e(vr,eet),e(vr,xm),e(xm,oet),e(xm,oae),e(oae,ret),e(xm,tet),e(xm,rae),e(rae,aet),e(xm,net),e(vr,set),e(vr,QS),e(QS,iet),e(QS,_ye),e(_ye,det),e(QS,cet),e(vr,met),e(vr,ta),M(WS,ta,null),e(ta,fet),e(ta,bye),e(bye,get),e(ta,het),e(ta,$m),e($m,uet),e($m,vye),e(vye,pet),e($m,_et),e($m,tae),e(tae,bet),e($m,vet),e(ta,Fet),M(OA,ta,null),e(vr,Tet),e(vr,Hr),M(US,Hr,null),e(Hr,Met),e(Hr,Fye),e(Fye,Eet),e(Hr,Cet),e(Hr,qn),e(qn,wet),e(qn,Tye),e(Tye,Aet),e(qn,Let),e(qn,Mye),e(Mye,yet),e(qn,xet),e(qn,Eye),e(Eye,$et),e(qn,ket),e(Hr,Set),e(Hr,ce),e(ce,VA),e(VA,Cye),e(Cye,Ret),e(VA,Pet),e(VA,aae),e(aae,Bet),e(VA,Iet),e(ce,Net),e(ce,XA),e(XA,wye),e(wye,qet),e(XA,jet),e(XA,nae),e(nae,Det),e(XA,Get),e(ce,Oet),e(ce,zA),e(zA,Aye),e(Aye,Vet),e(zA,Xet),e(zA,sae),e(sae,zet),e(zA,Qet),e(ce,Wet),e(ce,QA),e(QA,Lye),e(Lye,Uet),e(QA,Het),e(QA,lae),e(lae,Jet),e(QA,Yet),e(ce,Ket),e(ce,WA),e(WA,yye),e(yye,Zet),e(WA,eot),e(WA,iae),e(iae,oot),e(WA,rot),e(ce,tot),e(ce,UA),e(UA,xye),e(xye,aot),e(UA,not),e(UA,dae),e(dae,sot),e(UA,lot),e(ce,iot),e(ce,HA),e(HA,$ye),e($ye,dot),e(HA,cot),e(HA,cae),e(cae,mot),e(HA,fot),e(ce,got),e(ce,JA),e(JA,kye),e(kye,hot),e(JA,uot),e(JA,mae),e(mae,pot),e(JA,_ot),e(ce,bot),e(ce,YA),e(YA,Sye),e(Sye,vot),e(YA,Fot),e(YA,fae),e(fae,Tot),e(YA,Mot),e(ce,Eot),e(ce,KA),e(KA,Rye),e(Rye,Cot),e(KA,wot),e(KA,gae),e(gae,Aot),e(KA,Lot),e(ce,yot),e(ce,ZA),e(ZA,Pye),e(Pye,xot),e(ZA,$ot),e(ZA,hae),e(hae,kot),e(ZA,Sot),e(ce,Rot),e(ce,e6),e(e6,Bye),e(Bye,Pot),e(e6,Bot),e(e6,uae),e(uae,Iot),e(e6,Not),e(ce,qot),e(ce,o6),e(o6,Iye),e(Iye,jot),e(o6,Dot),e(o6,pae),e(pae,Got),e(o6,Oot),e(ce,Vot),e(ce,r6),e(r6,Nye),e(Nye,Xot),e(r6,zot),e(r6,_ae),e(_ae,Qot),e(r6,Wot),e(ce,Uot),e(ce,t6),e(t6,qye),e(qye,Hot),e(t6,Jot),e(t6,bae),e(bae,Yot),e(t6,Kot),e(ce,Zot),e(ce,a6),e(a6,jye),e(jye,ert),e(a6,ort),e(a6,vae),e(vae,rrt),e(a6,trt),e(ce,art),e(ce,n6),e(n6,Dye),e(Dye,nrt),e(n6,srt),e(n6,Fae),e(Fae,lrt),e(n6,irt),e(ce,drt),e(ce,s6),e(s6,Gye),e(Gye,crt),e(s6,mrt),e(s6,Tae),e(Tae,frt),e(s6,grt),e(ce,hrt),e(ce,l6),e(l6,Oye),e(Oye,urt),e(l6,prt),e(l6,Mae),e(Mae,_rt),e(l6,brt),e(ce,vrt),e(ce,i6),e(i6,Vye),e(Vye,Frt),e(i6,Trt),e(i6,Eae),e(Eae,Mrt),e(i6,Ert),e(ce,Crt),e(ce,d6),e(d6,Xye),e(Xye,wrt),e(d6,Art),e(d6,Cae),e(Cae,Lrt),e(d6,yrt),e(Hr,xrt),M(c6,Hr,null),b(m,meo,_),b(m,km,_),e(km,m6),e(m6,zye),M(HS,zye,null),e(km,$rt),e(km,Qye),e(Qye,krt),b(m,feo,_),b(m,Fr,_),M(JS,Fr,null),e(Fr,Srt),e(Fr,Sm),e(Sm,Rrt),e(Sm,wae),e(wae,Prt),e(Sm,Brt),e(Sm,Aae),e(Aae,Irt),e(Sm,Nrt),e(Fr,qrt),e(Fr,YS),e(YS,jrt),e(YS,Wye),e(Wye,Drt),e(YS,Grt),e(Fr,Ort),e(Fr,aa),M(KS,aa,null),e(aa,Vrt),e(aa,Uye),e(Uye,Xrt),e(aa,zrt),e(aa,Rm),e(Rm,Qrt),e(Rm,Hye),e(Hye,Wrt),e(Rm,Urt),e(Rm,Lae),e(Lae,Hrt),e(Rm,Jrt),e(aa,Yrt),M(f6,aa,null),e(Fr,Krt),e(Fr,Jr),M(ZS,Jr,null),e(Jr,Zrt),e(Jr,Jye),e(Jye,ett),e(Jr,ott),e(Jr,jn),e(jn,rtt),e(jn,Yye),e(Yye,ttt),e(jn,att),e(jn,Kye),e(Kye,ntt),e(jn,stt),e(jn,Zye),e(Zye,ltt),e(jn,itt),e(Jr,dtt),e(Jr,e8e),e(e8e,g6),e(g6,o8e),e(o8e,ctt),e(g6,mtt),e(g6,yae),e(yae,ftt),e(g6,gtt),e(Jr,htt),M(h6,Jr,null),b(m,geo,_),b(m,Pm,_),e(Pm,u6),e(u6,r8e),M(eR,r8e,null),e(Pm,utt),e(Pm,t8e),e(t8e,ptt),b(m,heo,_),b(m,Tr,_),M(oR,Tr,null),e(Tr,_tt),e(Tr,Bm),e(Bm,btt),e(Bm,xae),e(xae,vtt),e(Bm,Ftt),e(Bm,$ae),e($ae,Ttt),e(Bm,Mtt),e(Tr,Ett),e(Tr,rR),e(rR,Ctt),e(rR,a8e),e(a8e,wtt),e(rR,Att),e(Tr,Ltt),e(Tr,na),M(tR,na,null),e(na,ytt),e(na,n8e),e(n8e,xtt),e(na,$tt),e(na,Im),e(Im,ktt),e(Im,s8e),e(s8e,Stt),e(Im,Rtt),e(Im,kae),e(kae,Ptt),e(Im,Btt),e(na,Itt),M(p6,na,null),e(Tr,Ntt),e(Tr,Yr),M(aR,Yr,null),e(Yr,qtt),e(Yr,l8e),e(l8e,jtt),e(Yr,Dtt),e(Yr,Dn),e(Dn,Gtt),e(Dn,i8e),e(i8e,Ott),e(Dn,Vtt),e(Dn,d8e),e(d8e,Xtt),e(Dn,ztt),e(Dn,c8e),e(c8e,Qtt),e(Dn,Wtt),e(Yr,Utt),e(Yr,m8e),e(m8e,_6),e(_6,f8e),e(f8e,Htt),e(_6,Jtt),e(_6,Sae),e(Sae,Ytt),e(_6,Ktt),e(Yr,Ztt),M(b6,Yr,null),b(m,ueo,_),b(m,Nm,_),e(Nm,v6),e(v6,g8e),M(nR,g8e,null),e(Nm,eat),e(Nm,h8e),e(h8e,oat),b(m,peo,_),b(m,Mr,_),M(sR,Mr,null),e(Mr,rat),e(Mr,qm),e(qm,tat),e(qm,Rae),e(Rae,aat),e(qm,nat),e(qm,Pae),e(Pae,sat),e(qm,lat),e(Mr,iat),e(Mr,lR),e(lR,dat),e(lR,u8e),e(u8e,cat),e(lR,mat),e(Mr,fat),e(Mr,sa),M(iR,sa,null),e(sa,gat),e(sa,p8e),e(p8e,hat),e(sa,uat),e(sa,jm),e(jm,pat),e(jm,_8e),e(_8e,_at),e(jm,bat),e(jm,Bae),e(Bae,vat),e(jm,Fat),e(sa,Tat),M(F6,sa,null),e(Mr,Mat),e(Mr,Kr),M(dR,Kr,null),e(Kr,Eat),e(Kr,b8e),e(b8e,Cat),e(Kr,wat),e(Kr,Gn),e(Gn,Aat),e(Gn,v8e),e(v8e,Lat),e(Gn,yat),e(Gn,F8e),e(F8e,xat),e(Gn,$at),e(Gn,T8e),e(T8e,kat),e(Gn,Sat),e(Kr,Rat),e(Kr,te),e(te,T6),e(T6,M8e),e(M8e,Pat),e(T6,Bat),e(T6,Iae),e(Iae,Iat),e(T6,Nat),e(te,qat),e(te,M6),e(M6,E8e),e(E8e,jat),e(M6,Dat),e(M6,Nae),e(Nae,Gat),e(M6,Oat),e(te,Vat),e(te,E6),e(E6,C8e),e(C8e,Xat),e(E6,zat),e(E6,qae),e(qae,Qat),e(E6,Wat),e(te,Uat),e(te,C6),e(C6,w8e),e(w8e,Hat),e(C6,Jat),e(C6,jae),e(jae,Yat),e(C6,Kat),e(te,Zat),e(te,w6),e(w6,A8e),e(A8e,ent),e(w6,ont),e(w6,Dae),e(Dae,rnt),e(w6,tnt),e(te,ant),e(te,A6),e(A6,L8e),e(L8e,nnt),e(A6,snt),e(A6,Gae),e(Gae,lnt),e(A6,int),e(te,dnt),e(te,L6),e(L6,y8e),e(y8e,cnt),e(L6,mnt),e(L6,Oae),e(Oae,fnt),e(L6,gnt),e(te,hnt),e(te,y6),e(y6,x8e),e(x8e,unt),e(y6,pnt),e(y6,Vae),e(Vae,_nt),e(y6,bnt),e(te,vnt),e(te,x6),e(x6,$8e),e($8e,Fnt),e(x6,Tnt),e(x6,Xae),e(Xae,Mnt),e(x6,Ent),e(te,Cnt),e(te,$6),e($6,k8e),e(k8e,wnt),e($6,Ant),e($6,zae),e(zae,Lnt),e($6,ynt),e(te,xnt),e(te,k6),e(k6,S8e),e(S8e,$nt),e(k6,knt),e(k6,Qae),e(Qae,Snt),e(k6,Rnt),e(te,Pnt),e(te,S6),e(S6,R8e),e(R8e,Bnt),e(S6,Int),e(S6,Wae),e(Wae,Nnt),e(S6,qnt),e(te,jnt),e(te,R6),e(R6,P8e),e(P8e,Dnt),e(R6,Gnt),e(R6,Uae),e(Uae,Ont),e(R6,Vnt),e(te,Xnt),e(te,P6),e(P6,B8e),e(B8e,znt),e(P6,Qnt),e(P6,Hae),e(Hae,Wnt),e(P6,Unt),e(te,Hnt),e(te,B6),e(B6,I8e),e(I8e,Jnt),e(B6,Ynt),e(B6,Jae),e(Jae,Knt),e(B6,Znt),e(te,est),e(te,I6),e(I6,N8e),e(N8e,ost),e(I6,rst),e(I6,Yae),e(Yae,tst),e(I6,ast),e(te,nst),e(te,N6),e(N6,q8e),e(q8e,sst),e(N6,lst),e(N6,Kae),e(Kae,ist),e(N6,dst),e(te,cst),e(te,q6),e(q6,j8e),e(j8e,mst),e(q6,fst),e(q6,Zae),e(Zae,gst),e(q6,hst),e(te,ust),e(te,j6),e(j6,D8e),e(D8e,pst),e(j6,_st),e(j6,ene),e(ene,bst),e(j6,vst),e(te,Fst),e(te,D6),e(D6,G8e),e(G8e,Tst),e(D6,Mst),e(D6,one),e(one,Est),e(D6,Cst),e(te,wst),e(te,G6),e(G6,O8e),e(O8e,Ast),e(G6,Lst),e(G6,rne),e(rne,yst),e(G6,xst),e(te,$st),e(te,O6),e(O6,V8e),e(V8e,kst),e(O6,Sst),e(O6,tne),e(tne,Rst),e(O6,Pst),e(te,Bst),e(te,V6),e(V6,X8e),e(X8e,Ist),e(V6,Nst),e(V6,ane),e(ane,qst),e(V6,jst),e(te,Dst),e(te,X6),e(X6,z8e),e(z8e,Gst),e(X6,Ost),e(X6,nne),e(nne,Vst),e(X6,Xst),e(te,zst),e(te,z6),e(z6,Q8e),e(Q8e,Qst),e(z6,Wst),e(z6,sne),e(sne,Ust),e(z6,Hst),e(te,Jst),e(te,Q6),e(Q6,W8e),e(W8e,Yst),e(Q6,Kst),e(Q6,lne),e(lne,Zst),e(Q6,elt),e(te,olt),e(te,W6),e(W6,U8e),e(U8e,rlt),e(W6,tlt),e(W6,ine),e(ine,alt),e(W6,nlt),e(Kr,slt),M(U6,Kr,null),b(m,_eo,_),b(m,Dm,_),e(Dm,H6),e(H6,H8e),M(cR,H8e,null),e(Dm,llt),e(Dm,J8e),e(J8e,ilt),b(m,beo,_),b(m,Er,_),M(mR,Er,null),e(Er,dlt),e(Er,Gm),e(Gm,clt),e(Gm,dne),e(dne,mlt),e(Gm,flt),e(Gm,cne),e(cne,glt),e(Gm,hlt),e(Er,ult),e(Er,fR),e(fR,plt),e(fR,Y8e),e(Y8e,_lt),e(fR,blt),e(Er,vlt),e(Er,la),M(gR,la,null),e(la,Flt),e(la,K8e),e(K8e,Tlt),e(la,Mlt),e(la,Om),e(Om,Elt),e(Om,Z8e),e(Z8e,Clt),e(Om,wlt),e(Om,mne),e(mne,Alt),e(Om,Llt),e(la,ylt),M(J6,la,null),e(Er,xlt),e(Er,Zr),M(hR,Zr,null),e(Zr,$lt),e(Zr,e9e),e(e9e,klt),e(Zr,Slt),e(Zr,On),e(On,Rlt),e(On,o9e),e(o9e,Plt),e(On,Blt),e(On,r9e),e(r9e,Ilt),e(On,Nlt),e(On,t9e),e(t9e,qlt),e(On,jlt),e(Zr,Dlt),e(Zr,xe),e(xe,Y6),e(Y6,a9e),e(a9e,Glt),e(Y6,Olt),e(Y6,fne),e(fne,Vlt),e(Y6,Xlt),e(xe,zlt),e(xe,K6),e(K6,n9e),e(n9e,Qlt),e(K6,Wlt),e(K6,gne),e(gne,Ult),e(K6,Hlt),e(xe,Jlt),e(xe,Z6),e(Z6,s9e),e(s9e,Ylt),e(Z6,Klt),e(Z6,hne),e(hne,Zlt),e(Z6,eit),e(xe,oit),e(xe,e7),e(e7,l9e),e(l9e,rit),e(e7,tit),e(e7,une),e(une,ait),e(e7,nit),e(xe,sit),e(xe,o7),e(o7,i9e),e(i9e,lit),e(o7,iit),e(o7,pne),e(pne,dit),e(o7,cit),e(xe,mit),e(xe,r7),e(r7,d9e),e(d9e,fit),e(r7,git),e(r7,_ne),e(_ne,hit),e(r7,uit),e(xe,pit),e(xe,t7),e(t7,c9e),e(c9e,_it),e(t7,bit),e(t7,bne),e(bne,vit),e(t7,Fit),e(xe,Tit),e(xe,a7),e(a7,m9e),e(m9e,Mit),e(a7,Eit),e(a7,vne),e(vne,Cit),e(a7,wit),e(xe,Ait),e(xe,n7),e(n7,f9e),e(f9e,Lit),e(n7,yit),e(n7,Fne),e(Fne,xit),e(n7,$it),e(xe,kit),e(xe,s7),e(s7,g9e),e(g9e,Sit),e(s7,Rit),e(s7,Tne),e(Tne,Pit),e(s7,Bit),e(Zr,Iit),M(l7,Zr,null),b(m,veo,_),b(m,Vm,_),e(Vm,i7),e(i7,h9e),M(uR,h9e,null),e(Vm,Nit),e(Vm,u9e),e(u9e,qit),b(m,Feo,_),b(m,Cr,_),M(pR,Cr,null),e(Cr,jit),e(Cr,Xm),e(Xm,Dit),e(Xm,Mne),e(Mne,Git),e(Xm,Oit),e(Xm,Ene),e(Ene,Vit),e(Xm,Xit),e(Cr,zit),e(Cr,_R),e(_R,Qit),e(_R,p9e),e(p9e,Wit),e(_R,Uit),e(Cr,Hit),e(Cr,ia),M(bR,ia,null),e(ia,Jit),e(ia,_9e),e(_9e,Yit),e(ia,Kit),e(ia,zm),e(zm,Zit),e(zm,b9e),e(b9e,edt),e(zm,odt),e(zm,Cne),e(Cne,rdt),e(zm,tdt),e(ia,adt),M(d7,ia,null),e(Cr,ndt),e(Cr,et),M(vR,et,null),e(et,sdt),e(et,v9e),e(v9e,ldt),e(et,idt),e(et,Vn),e(Vn,ddt),e(Vn,F9e),e(F9e,cdt),e(Vn,mdt),e(Vn,T9e),e(T9e,fdt),e(Vn,gdt),e(Vn,M9e),e(M9e,hdt),e(Vn,udt),e(et,pdt),e(et,Ee),e(Ee,c7),e(c7,E9e),e(E9e,_dt),e(c7,bdt),e(c7,wne),e(wne,vdt),e(c7,Fdt),e(Ee,Tdt),e(Ee,m7),e(m7,C9e),e(C9e,Mdt),e(m7,Edt),e(m7,Ane),e(Ane,Cdt),e(m7,wdt),e(Ee,Adt),e(Ee,f7),e(f7,w9e),e(w9e,Ldt),e(f7,ydt),e(f7,Lne),e(Lne,xdt),e(f7,$dt),e(Ee,kdt),e(Ee,g7),e(g7,A9e),e(A9e,Sdt),e(g7,Rdt),e(g7,yne),e(yne,Pdt),e(g7,Bdt),e(Ee,Idt),e(Ee,h7),e(h7,L9e),e(L9e,Ndt),e(h7,qdt),e(h7,xne),e(xne,jdt),e(h7,Ddt),e(Ee,Gdt),e(Ee,u7),e(u7,y9e),e(y9e,Odt),e(u7,Vdt),e(u7,$ne),e($ne,Xdt),e(u7,zdt),e(Ee,Qdt),e(Ee,p7),e(p7,x9e),e(x9e,Wdt),e(p7,Udt),e(p7,kne),e(kne,Hdt),e(p7,Jdt),e(Ee,Ydt),e(Ee,_7),e(_7,$9e),e($9e,Kdt),e(_7,Zdt),e(_7,Sne),e(Sne,ect),e(_7,oct),e(Ee,rct),e(Ee,b7),e(b7,k9e),e(k9e,tct),e(b7,act),e(b7,Rne),e(Rne,nct),e(b7,sct),e(Ee,lct),e(Ee,v7),e(v7,S9e),e(S9e,ict),e(v7,dct),e(v7,Pne),e(Pne,cct),e(v7,mct),e(Ee,fct),e(Ee,F7),e(F7,R9e),e(R9e,gct),e(F7,hct),e(F7,Bne),e(Bne,uct),e(F7,pct),e(Ee,_ct),e(Ee,T7),e(T7,P9e),e(P9e,bct),e(T7,vct),e(T7,Ine),e(Ine,Fct),e(T7,Tct),e(Ee,Mct),e(Ee,M7),e(M7,B9e),e(B9e,Ect),e(M7,Cct),e(M7,Nne),e(Nne,wct),e(M7,Act),e(et,Lct),M(E7,et,null),b(m,Teo,_),b(m,Qm,_),e(Qm,C7),e(C7,I9e),M(FR,I9e,null),e(Qm,yct),e(Qm,N9e),e(N9e,xct),b(m,Meo,_),b(m,wr,_),M(TR,wr,null),e(wr,$ct),e(wr,Wm),e(Wm,kct),e(Wm,qne),e(qne,Sct),e(Wm,Rct),e(Wm,jne),e(jne,Pct),e(Wm,Bct),e(wr,Ict),e(wr,MR),e(MR,Nct),e(MR,q9e),e(q9e,qct),e(MR,jct),e(wr,Dct),e(wr,da),M(ER,da,null),e(da,Gct),e(da,j9e),e(j9e,Oct),e(da,Vct),e(da,Um),e(Um,Xct),e(Um,D9e),e(D9e,zct),e(Um,Qct),e(Um,Dne),e(Dne,Wct),e(Um,Uct),e(da,Hct),M(w7,da,null),e(wr,Jct),e(wr,ot),M(CR,ot,null),e(ot,Yct),e(ot,G9e),e(G9e,Kct),e(ot,Zct),e(ot,Xn),e(Xn,emt),e(Xn,O9e),e(O9e,omt),e(Xn,rmt),e(Xn,V9e),e(V9e,tmt),e(Xn,amt),e(Xn,X9e),e(X9e,nmt),e(Xn,smt),e(ot,lmt),e(ot,$e),e($e,A7),e(A7,z9e),e(z9e,imt),e(A7,dmt),e(A7,Gne),e(Gne,cmt),e(A7,mmt),e($e,fmt),e($e,L7),e(L7,Q9e),e(Q9e,gmt),e(L7,hmt),e(L7,One),e(One,umt),e(L7,pmt),e($e,_mt),e($e,y7),e(y7,W9e),e(W9e,bmt),e(y7,vmt),e(y7,Vne),e(Vne,Fmt),e(y7,Tmt),e($e,Mmt),e($e,x7),e(x7,U9e),e(U9e,Emt),e(x7,Cmt),e(x7,Xne),e(Xne,wmt),e(x7,Amt),e($e,Lmt),e($e,$7),e($7,H9e),e(H9e,ymt),e($7,xmt),e($7,zne),e(zne,$mt),e($7,kmt),e($e,Smt),e($e,k7),e(k7,J9e),e(J9e,Rmt),e(k7,Pmt),e(k7,Qne),e(Qne,Bmt),e(k7,Imt),e($e,Nmt),e($e,S7),e(S7,Y9e),e(Y9e,qmt),e(S7,jmt),e(S7,Wne),e(Wne,Dmt),e(S7,Gmt),e($e,Omt),e($e,R7),e(R7,K9e),e(K9e,Vmt),e(R7,Xmt),e(R7,Une),e(Une,zmt),e(R7,Qmt),e($e,Wmt),e($e,P7),e(P7,Z9e),e(Z9e,Umt),e(P7,Hmt),e(P7,Hne),e(Hne,Jmt),e(P7,Ymt),e($e,Kmt),e($e,B7),e(B7,exe),e(exe,Zmt),e(B7,eft),e(B7,Jne),e(Jne,oft),e(B7,rft),e(ot,tft),M(I7,ot,null),b(m,Eeo,_),b(m,Hm,_),e(Hm,N7),e(N7,oxe),M(wR,oxe,null),e(Hm,aft),e(Hm,rxe),e(rxe,nft),b(m,Ceo,_),b(m,Ar,_),M(AR,Ar,null),e(Ar,sft),e(Ar,Jm),e(Jm,lft),e(Jm,Yne),e(Yne,ift),e(Jm,dft),e(Jm,Kne),e(Kne,cft),e(Jm,mft),e(Ar,fft),e(Ar,LR),e(LR,gft),e(LR,txe),e(txe,hft),e(LR,uft),e(Ar,pft),e(Ar,ca),M(yR,ca,null),e(ca,_ft),e(ca,axe),e(axe,bft),e(ca,vft),e(ca,Ym),e(Ym,Fft),e(Ym,nxe),e(nxe,Tft),e(Ym,Mft),e(Ym,Zne),e(Zne,Eft),e(Ym,Cft),e(ca,wft),M(q7,ca,null),e(Ar,Aft),e(Ar,rt),M(xR,rt,null),e(rt,Lft),e(rt,sxe),e(sxe,yft),e(rt,xft),e(rt,zn),e(zn,$ft),e(zn,lxe),e(lxe,kft),e(zn,Sft),e(zn,ixe),e(ixe,Rft),e(zn,Pft),e(zn,dxe),e(dxe,Bft),e(zn,Ift),e(rt,Nft),e(rt,ke),e(ke,j7),e(j7,cxe),e(cxe,qft),e(j7,jft),e(j7,ese),e(ese,Dft),e(j7,Gft),e(ke,Oft),e(ke,D7),e(D7,mxe),e(mxe,Vft),e(D7,Xft),e(D7,ose),e(ose,zft),e(D7,Qft),e(ke,Wft),e(ke,G7),e(G7,fxe),e(fxe,Uft),e(G7,Hft),e(G7,rse),e(rse,Jft),e(G7,Yft),e(ke,Kft),e(ke,O7),e(O7,gxe),e(gxe,Zft),e(O7,egt),e(O7,tse),e(tse,ogt),e(O7,rgt),e(ke,tgt),e(ke,V7),e(V7,hxe),e(hxe,agt),e(V7,ngt),e(V7,ase),e(ase,sgt),e(V7,lgt),e(ke,igt),e(ke,X7),e(X7,uxe),e(uxe,dgt),e(X7,cgt),e(X7,nse),e(nse,mgt),e(X7,fgt),e(ke,ggt),e(ke,z7),e(z7,pxe),e(pxe,hgt),e(z7,ugt),e(z7,sse),e(sse,pgt),e(z7,_gt),e(ke,bgt),e(ke,Q7),e(Q7,_xe),e(_xe,vgt),e(Q7,Fgt),e(Q7,lse),e(lse,Tgt),e(Q7,Mgt),e(ke,Egt),e(ke,W7),e(W7,bxe),e(bxe,Cgt),e(W7,wgt),e(W7,ise),e(ise,Agt),e(W7,Lgt),e(ke,ygt),e(ke,U7),e(U7,vxe),e(vxe,xgt),e(U7,$gt),e(U7,dse),e(dse,kgt),e(U7,Sgt),e(rt,Rgt),M(H7,rt,null),b(m,weo,_),b(m,Km,_),e(Km,J7),e(J7,Fxe),M($R,Fxe,null),e(Km,Pgt),e(Km,Txe),e(Txe,Bgt),b(m,Aeo,_),b(m,Lr,_),M(kR,Lr,null),e(Lr,Igt),e(Lr,Zm),e(Zm,Ngt),e(Zm,cse),e(cse,qgt),e(Zm,jgt),e(Zm,mse),e(mse,Dgt),e(Zm,Ggt),e(Lr,Ogt),e(Lr,SR),e(SR,Vgt),e(SR,Mxe),e(Mxe,Xgt),e(SR,zgt),e(Lr,Qgt),e(Lr,ma),M(RR,ma,null),e(ma,Wgt),e(ma,Exe),e(Exe,Ugt),e(ma,Hgt),e(ma,ef),e(ef,Jgt),e(ef,Cxe),e(Cxe,Ygt),e(ef,Kgt),e(ef,fse),e(fse,Zgt),e(ef,eht),e(ma,oht),M(Y7,ma,null),e(Lr,rht),e(Lr,tt),M(PR,tt,null),e(tt,tht),e(tt,wxe),e(wxe,aht),e(tt,nht),e(tt,Qn),e(Qn,sht),e(Qn,Axe),e(Axe,lht),e(Qn,iht),e(Qn,Lxe),e(Lxe,dht),e(Qn,cht),e(Qn,yxe),e(yxe,mht),e(Qn,fht),e(tt,ght),e(tt,Se),e(Se,K7),e(K7,xxe),e(xxe,hht),e(K7,uht),e(K7,gse),e(gse,pht),e(K7,_ht),e(Se,bht),e(Se,Z7),e(Z7,$xe),e($xe,vht),e(Z7,Fht),e(Z7,hse),e(hse,Tht),e(Z7,Mht),e(Se,Eht),e(Se,eL),e(eL,kxe),e(kxe,Cht),e(eL,wht),e(eL,use),e(use,Aht),e(eL,Lht),e(Se,yht),e(Se,oL),e(oL,Sxe),e(Sxe,xht),e(oL,$ht),e(oL,pse),e(pse,kht),e(oL,Sht),e(Se,Rht),e(Se,rL),e(rL,Rxe),e(Rxe,Pht),e(rL,Bht),e(rL,_se),e(_se,Iht),e(rL,Nht),e(Se,qht),e(Se,tL),e(tL,Pxe),e(Pxe,jht),e(tL,Dht),e(tL,bse),e(bse,Ght),e(tL,Oht),e(Se,Vht),e(Se,aL),e(aL,Bxe),e(Bxe,Xht),e(aL,zht),e(aL,vse),e(vse,Qht),e(aL,Wht),e(Se,Uht),e(Se,nL),e(nL,Ixe),e(Ixe,Hht),e(nL,Jht),e(nL,Fse),e(Fse,Yht),e(nL,Kht),e(Se,Zht),e(Se,sL),e(sL,Nxe),e(Nxe,eut),e(sL,out),e(sL,Tse),e(Tse,rut),e(sL,tut),e(Se,aut),e(Se,lL),e(lL,qxe),e(qxe,nut),e(lL,sut),e(lL,Mse),e(Mse,lut),e(lL,iut),e(tt,dut),M(iL,tt,null),b(m,Leo,_),b(m,of,_),e(of,dL),e(dL,jxe),M(BR,jxe,null),e(of,cut),e(of,Dxe),e(Dxe,mut),b(m,yeo,_),b(m,yr,_),M(IR,yr,null),e(yr,fut),e(yr,rf),e(rf,gut),e(rf,Ese),e(Ese,hut),e(rf,uut),e(rf,Cse),e(Cse,put),e(rf,_ut),e(yr,but),e(yr,NR),e(NR,vut),e(NR,Gxe),e(Gxe,Fut),e(NR,Tut),e(yr,Mut),e(yr,fa),M(qR,fa,null),e(fa,Eut),e(fa,Oxe),e(Oxe,Cut),e(fa,wut),e(fa,tf),e(tf,Aut),e(tf,Vxe),e(Vxe,Lut),e(tf,yut),e(tf,wse),e(wse,xut),e(tf,$ut),e(fa,kut),M(cL,fa,null),e(yr,Sut),e(yr,at),M(jR,at,null),e(at,Rut),e(at,Xxe),e(Xxe,Put),e(at,But),e(at,Wn),e(Wn,Iut),e(Wn,zxe),e(zxe,Nut),e(Wn,qut),e(Wn,Qxe),e(Qxe,jut),e(Wn,Dut),e(Wn,Wxe),e(Wxe,Gut),e(Wn,Out),e(at,Vut),e(at,Re),e(Re,mL),e(mL,Uxe),e(Uxe,Xut),e(mL,zut),e(mL,Ase),e(Ase,Qut),e(mL,Wut),e(Re,Uut),e(Re,fL),e(fL,Hxe),e(Hxe,Hut),e(fL,Jut),e(fL,Lse),e(Lse,Yut),e(fL,Kut),e(Re,Zut),e(Re,gL),e(gL,Jxe),e(Jxe,ept),e(gL,opt),e(gL,yse),e(yse,rpt),e(gL,tpt),e(Re,apt),e(Re,hL),e(hL,Yxe),e(Yxe,npt),e(hL,spt),e(hL,xse),e(xse,lpt),e(hL,ipt),e(Re,dpt),e(Re,uL),e(uL,Kxe),e(Kxe,cpt),e(uL,mpt),e(uL,$se),e($se,fpt),e(uL,gpt),e(Re,hpt),e(Re,pL),e(pL,Zxe),e(Zxe,upt),e(pL,ppt),e(pL,kse),e(kse,_pt),e(pL,bpt),e(Re,vpt),e(Re,_L),e(_L,e$e),e(e$e,Fpt),e(_L,Tpt),e(_L,Sse),e(Sse,Mpt),e(_L,Ept),e(Re,Cpt),e(Re,bL),e(bL,o$e),e(o$e,wpt),e(bL,Apt),e(bL,Rse),e(Rse,Lpt),e(bL,ypt),e(Re,xpt),e(Re,vL),e(vL,r$e),e(r$e,$pt),e(vL,kpt),e(vL,Pse),e(Pse,Spt),e(vL,Rpt),e(Re,Ppt),e(Re,FL),e(FL,t$e),e(t$e,Bpt),e(FL,Ipt),e(FL,Bse),e(Bse,Npt),e(FL,qpt),e(at,jpt),M(TL,at,null),b(m,xeo,_),b(m,af,_),e(af,ML),e(ML,a$e),M(DR,a$e,null),e(af,Dpt),e(af,n$e),e(n$e,Gpt),b(m,$eo,_),b(m,xr,_),M(GR,xr,null),e(xr,Opt),e(xr,nf),e(nf,Vpt),e(nf,Ise),e(Ise,Xpt),e(nf,zpt),e(nf,Nse),e(Nse,Qpt),e(nf,Wpt),e(xr,Upt),e(xr,OR),e(OR,Hpt),e(OR,s$e),e(s$e,Jpt),e(OR,Ypt),e(xr,Kpt),e(xr,ga),M(VR,ga,null),e(ga,Zpt),e(ga,l$e),e(l$e,e_t),e(ga,o_t),e(ga,sf),e(sf,r_t),e(sf,i$e),e(i$e,t_t),e(sf,a_t),e(sf,qse),e(qse,n_t),e(sf,s_t),e(ga,l_t),M(EL,ga,null),e(xr,i_t),e(xr,nt),M(XR,nt,null),e(nt,d_t),e(nt,d$e),e(d$e,c_t),e(nt,m_t),e(nt,Un),e(Un,f_t),e(Un,c$e),e(c$e,g_t),e(Un,h_t),e(Un,m$e),e(m$e,u_t),e(Un,p_t),e(Un,f$e),e(f$e,__t),e(Un,b_t),e(nt,v_t),e(nt,Xe),e(Xe,CL),e(CL,g$e),e(g$e,F_t),e(CL,T_t),e(CL,jse),e(jse,M_t),e(CL,E_t),e(Xe,C_t),e(Xe,wL),e(wL,h$e),e(h$e,w_t),e(wL,A_t),e(wL,Dse),e(Dse,L_t),e(wL,y_t),e(Xe,x_t),e(Xe,AL),e(AL,u$e),e(u$e,$_t),e(AL,k_t),e(AL,Gse),e(Gse,S_t),e(AL,R_t),e(Xe,P_t),e(Xe,LL),e(LL,p$e),e(p$e,B_t),e(LL,I_t),e(LL,Ose),e(Ose,N_t),e(LL,q_t),e(Xe,j_t),e(Xe,yL),e(yL,_$e),e(_$e,D_t),e(yL,G_t),e(yL,Vse),e(Vse,O_t),e(yL,V_t),e(Xe,X_t),e(Xe,xL),e(xL,b$e),e(b$e,z_t),e(xL,Q_t),e(xL,Xse),e(Xse,W_t),e(xL,U_t),e(Xe,H_t),e(Xe,$L),e($L,v$e),e(v$e,J_t),e($L,Y_t),e($L,zse),e(zse,K_t),e($L,Z_t),e(Xe,ebt),e(Xe,kL),e(kL,F$e),e(F$e,obt),e(kL,rbt),e(kL,Qse),e(Qse,tbt),e(kL,abt),e(nt,nbt),M(SL,nt,null),b(m,keo,_),b(m,lf,_),e(lf,RL),e(RL,T$e),M(zR,T$e,null),e(lf,sbt),e(lf,M$e),e(M$e,lbt),b(m,Seo,_),b(m,$r,_),M(QR,$r,null),e($r,ibt),e($r,df),e(df,dbt),e(df,Wse),e(Wse,cbt),e(df,mbt),e(df,Use),e(Use,fbt),e(df,gbt),e($r,hbt),e($r,WR),e(WR,ubt),e(WR,E$e),e(E$e,pbt),e(WR,_bt),e($r,bbt),e($r,ha),M(UR,ha,null),e(ha,vbt),e(ha,C$e),e(C$e,Fbt),e(ha,Tbt),e(ha,cf),e(cf,Mbt),e(cf,w$e),e(w$e,Ebt),e(cf,Cbt),e(cf,Hse),e(Hse,wbt),e(cf,Abt),e(ha,Lbt),M(PL,ha,null),e($r,ybt),e($r,st),M(HR,st,null),e(st,xbt),e(st,A$e),e(A$e,$bt),e(st,kbt),e(st,Hn),e(Hn,Sbt),e(Hn,L$e),e(L$e,Rbt),e(Hn,Pbt),e(Hn,y$e),e(y$e,Bbt),e(Hn,Ibt),e(Hn,x$e),e(x$e,Nbt),e(Hn,qbt),e(st,jbt),e(st,ze),e(ze,BL),e(BL,$$e),e($$e,Dbt),e(BL,Gbt),e(BL,Jse),e(Jse,Obt),e(BL,Vbt),e(ze,Xbt),e(ze,IL),e(IL,k$e),e(k$e,zbt),e(IL,Qbt),e(IL,Yse),e(Yse,Wbt),e(IL,Ubt),e(ze,Hbt),e(ze,NL),e(NL,S$e),e(S$e,Jbt),e(NL,Ybt),e(NL,Kse),e(Kse,Kbt),e(NL,Zbt),e(ze,e2t),e(ze,qL),e(qL,R$e),e(R$e,o2t),e(qL,r2t),e(qL,Zse),e(Zse,t2t),e(qL,a2t),e(ze,n2t),e(ze,jL),e(jL,P$e),e(P$e,s2t),e(jL,l2t),e(jL,ele),e(ele,i2t),e(jL,d2t),e(ze,c2t),e(ze,DL),e(DL,B$e),e(B$e,m2t),e(DL,f2t),e(DL,ole),e(ole,g2t),e(DL,h2t),e(ze,u2t),e(ze,GL),e(GL,I$e),e(I$e,p2t),e(GL,_2t),e(GL,rle),e(rle,b2t),e(GL,v2t),e(ze,F2t),e(ze,OL),e(OL,N$e),e(N$e,T2t),e(OL,M2t),e(OL,tle),e(tle,E2t),e(OL,C2t),e(st,w2t),M(VL,st,null),b(m,Reo,_),b(m,mf,_),e(mf,XL),e(XL,q$e),M(JR,q$e,null),e(mf,A2t),e(mf,j$e),e(j$e,L2t),b(m,Peo,_),b(m,kr,_),M(YR,kr,null),e(kr,y2t),e(kr,ff),e(ff,x2t),e(ff,ale),e(ale,$2t),e(ff,k2t),e(ff,nle),e(nle,S2t),e(ff,R2t),e(kr,P2t),e(kr,KR),e(KR,B2t),e(KR,D$e),e(D$e,I2t),e(KR,N2t),e(kr,q2t),e(kr,ua),M(ZR,ua,null),e(ua,j2t),e(ua,G$e),e(G$e,D2t),e(ua,G2t),e(ua,gf),e(gf,O2t),e(gf,O$e),e(O$e,V2t),e(gf,X2t),e(gf,sle),e(sle,z2t),e(gf,Q2t),e(ua,W2t),M(zL,ua,null),e(kr,U2t),e(kr,lt),M(eP,lt,null),e(lt,H2t),e(lt,V$e),e(V$e,J2t),e(lt,Y2t),e(lt,Jn),e(Jn,K2t),e(Jn,X$e),e(X$e,Z2t),e(Jn,e1t),e(Jn,z$e),e(z$e,o1t),e(Jn,r1t),e(Jn,Q$e),e(Q$e,t1t),e(Jn,a1t),e(lt,n1t),e(lt,W$e),e(W$e,QL),e(QL,U$e),e(U$e,s1t),e(QL,l1t),e(QL,lle),e(lle,i1t),e(QL,d1t),e(lt,c1t),M(WL,lt,null),b(m,Beo,_),b(m,hf,_),e(hf,UL),e(UL,H$e),M(oP,H$e,null),e(hf,m1t),e(hf,J$e),e(J$e,f1t),b(m,Ieo,_),b(m,Sr,_),M(rP,Sr,null),e(Sr,g1t),e(Sr,uf),e(uf,h1t),e(uf,ile),e(ile,u1t),e(uf,p1t),e(uf,dle),e(dle,_1t),e(uf,b1t),e(Sr,v1t),e(Sr,tP),e(tP,F1t),e(tP,Y$e),e(Y$e,T1t),e(tP,M1t),e(Sr,E1t),e(Sr,pa),M(aP,pa,null),e(pa,C1t),e(pa,K$e),e(K$e,w1t),e(pa,A1t),e(pa,pf),e(pf,L1t),e(pf,Z$e),e(Z$e,y1t),e(pf,x1t),e(pf,cle),e(cle,$1t),e(pf,k1t),e(pa,S1t),M(HL,pa,null),e(Sr,R1t),e(Sr,it),M(nP,it,null),e(it,P1t),e(it,eke),e(eke,B1t),e(it,I1t),e(it,Yn),e(Yn,N1t),e(Yn,oke),e(oke,q1t),e(Yn,j1t),e(Yn,rke),e(rke,D1t),e(Yn,G1t),e(Yn,tke),e(tke,O1t),e(Yn,V1t),e(it,X1t),e(it,sP),e(sP,JL),e(JL,ake),e(ake,z1t),e(JL,Q1t),e(JL,mle),e(mle,W1t),e(JL,U1t),e(sP,H1t),e(sP,YL),e(YL,nke),e(nke,J1t),e(YL,Y1t),e(YL,fle),e(fle,K1t),e(YL,Z1t),e(it,evt),M(KL,it,null),b(m,Neo,_),b(m,_f,_),e(_f,ZL),e(ZL,ske),M(lP,ske,null),e(_f,ovt),e(_f,lke),e(lke,rvt),b(m,qeo,_),b(m,Rr,_),M(iP,Rr,null),e(Rr,tvt),e(Rr,bf),e(bf,avt),e(bf,gle),e(gle,nvt),e(bf,svt),e(bf,hle),e(hle,lvt),e(bf,ivt),e(Rr,dvt),e(Rr,dP),e(dP,cvt),e(dP,ike),e(ike,mvt),e(dP,fvt),e(Rr,gvt),e(Rr,_a),M(cP,_a,null),e(_a,hvt),e(_a,dke),e(dke,uvt),e(_a,pvt),e(_a,vf),e(vf,_vt),e(vf,cke),e(cke,bvt),e(vf,vvt),e(vf,ule),e(ule,Fvt),e(vf,Tvt),e(_a,Mvt),M(ey,_a,null),e(Rr,Evt),e(Rr,dt),M(mP,dt,null),e(dt,Cvt),e(dt,mke),e(mke,wvt),e(dt,Avt),e(dt,Kn),e(Kn,Lvt),e(Kn,fke),e(fke,yvt),e(Kn,xvt),e(Kn,gke),e(gke,$vt),e(Kn,kvt),e(Kn,hke),e(hke,Svt),e(Kn,Rvt),e(dt,Pvt),e(dt,uke),e(uke,oy),e(oy,pke),e(pke,Bvt),e(oy,Ivt),e(oy,ple),e(ple,Nvt),e(oy,qvt),e(dt,jvt),M(ry,dt,null),jeo=!0},p(m,[_]){const fP={};_&2&&(fP.$$scope={dirty:_,ctx:m}),yf.$set(fP);const _ke={};_&2&&(_ke.$$scope={dirty:_,ctx:m}),Jh.$set(_ke);const bke={};_&2&&(bke.$$scope={dirty:_,ctx:m}),Ru.$set(bke);const vke={};_&2&&(vke.$$scope={dirty:_,ctx:m}),Ep.$set(vke);const gP={};_&2&&(gP.$$scope={dirty:_,ctx:m}),Cp.$set(gP);const Fke={};_&2&&(Fke.$$scope={dirty:_,ctx:m}),Up.$set(Fke);const Zn={};_&2&&(Zn.$$scope={dirty:_,ctx:m}),Hp.$set(Zn);const Tke={};_&2&&(Tke.$$scope={dirty:_,ctx:m}),Kp.$set(Tke);const Mke={};_&2&&(Mke.$$scope={dirty:_,ctx:m}),g2.$set(Mke);const Eke={};_&2&&(Eke.$$scope={dirty:_,ctx:m}),u2.$set(Eke);const hP={};_&2&&(hP.$$scope={dirty:_,ctx:m}),m1.$set(hP);const Cke={};_&2&&(Cke.$$scope={dirty:_,ctx:m}),g1.$set(Cke);const uP={};_&2&&(uP.$$scope={dirty:_,ctx:m}),tv.$set(uP);const wke={};_&2&&(wke.$$scope={dirty:_,ctx:m}),nv.$set(wke);const pP={};_&2&&(pP.$$scope={dirty:_,ctx:m}),Qv.$set(pP);const Ake={};_&2&&(Ake.$$scope={dirty:_,ctx:m}),Uv.$set(Ake);const Lke={};_&2&&(Lke.$$scope={dirty:_,ctx:m}),pF.$set(Lke);const yke={};_&2&&(yke.$$scope={dirty:_,ctx:m}),bF.$set(yke);const Ff={};_&2&&(Ff.$$scope={dirty:_,ctx:m}),vT.$set(Ff);const xke={};_&2&&(xke.$$scope={dirty:_,ctx:m}),TT.$set(xke);const $ke={};_&2&&($ke.$$scope={dirty:_,ctx:m}),oM.$set($ke);const kke={};_&2&&(kke.$$scope={dirty:_,ctx:m}),tM.$set(kke);const _P={};_&2&&(_P.$$scope={dirty:_,ctx:m}),fM.$set(_P);const Ske={};_&2&&(Ske.$$scope={dirty:_,ctx:m}),hM.$set(Ske);const Rke={};_&2&&(Rke.$$scope={dirty:_,ctx:m}),eE.$set(Rke);const Pke={};_&2&&(Pke.$$scope={dirty:_,ctx:m}),rE.$set(Pke);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),UE.$set(ht);const bP={};_&2&&(bP.$$scope={dirty:_,ctx:m}),JE.$set(bP);const Bke={};_&2&&(Bke.$$scope={dirty:_,ctx:m}),ZE.$set(Bke);const vP={};_&2&&(vP.$$scope={dirty:_,ctx:m}),o4.$set(vP);const Ike={};_&2&&(Ike.$$scope={dirty:_,ctx:m}),s4.$set(Ike);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:m}),i4.$set(ut);const Nke={};_&2&&(Nke.$$scope={dirty:_,ctx:m}),C4.$set(Nke);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:m}),A4.$set(Tf);const qke={};_&2&&(qke.$$scope={dirty:_,ctx:m}),x4.$set(qke);const jke={};_&2&&(jke.$$scope={dirty:_,ctx:m}),k4.$set(jke);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),P4.$set(L);const ty={};_&2&&(ty.$$scope={dirty:_,ctx:m}),I4.$set(ty);const Dke={};_&2&&(Dke.$$scope={dirty:_,ctx:m}),j4.$set(Dke);const Gke={};_&2&&(Gke.$$scope={dirty:_,ctx:m}),G4.$set(Gke);const ay={};_&2&&(ay.$$scope={dirty:_,ctx:m}),K4.$set(ay);const Oke={};_&2&&(Oke.$$scope={dirty:_,ctx:m}),eC.$set(Oke);const Vke={};_&2&&(Vke.$$scope={dirty:_,ctx:m}),lC.$set(Vke);const ny={};_&2&&(ny.$$scope={dirty:_,ctx:m}),dC.$set(ny);const Xke={};_&2&&(Xke.$$scope={dirty:_,ctx:m}),TC.$set(Xke);const zke={};_&2&&(zke.$$scope={dirty:_,ctx:m}),EC.$set(zke);const sy={};_&2&&(sy.$$scope={dirty:_,ctx:m}),LC.$set(sy);const Qke={};_&2&&(Qke.$$scope={dirty:_,ctx:m}),xC.$set(Qke);const Wke={};_&2&&(Wke.$$scope={dirty:_,ctx:m}),IC.$set(Wke);const ly={};_&2&&(ly.$$scope={dirty:_,ctx:m}),qC.$set(ly);const Uke={};_&2&&(Uke.$$scope={dirty:_,ctx:m}),XC.$set(Uke);const Hke={};_&2&&(Hke.$$scope={dirty:_,ctx:m}),QC.$set(Hke);const iy={};_&2&&(iy.$$scope={dirty:_,ctx:m}),KC.$set(iy);const Jke={};_&2&&(Jke.$$scope={dirty:_,ctx:m}),e3.$set(Jke);const Yke={};_&2&&(Yke.$$scope={dirty:_,ctx:m}),t3.$set(Yke);const dy={};_&2&&(dy.$$scope={dirty:_,ctx:m}),n3.$set(dy);const Kke={};_&2&&(Kke.$$scope={dirty:_,ctx:m}),f3.$set(Kke);const Zke={};_&2&&(Zke.$$scope={dirty:_,ctx:m}),h3.$set(Zke);const cy={};_&2&&(cy.$$scope={dirty:_,ctx:m}),_3.$set(cy);const eSe={};_&2&&(eSe.$$scope={dirty:_,ctx:m}),v3.$set(eSe);const oSe={};_&2&&(oSe.$$scope={dirty:_,ctx:m}),v5.$set(oSe);const my={};_&2&&(my.$$scope={dirty:_,ctx:m}),T5.$set(my);const rSe={};_&2&&(rSe.$$scope={dirty:_,ctx:m}),z5.$set(rSe);const tSe={};_&2&&(tSe.$$scope={dirty:_,ctx:m}),W5.$set(tSe);const fy={};_&2&&(fy.$$scope={dirty:_,ctx:m}),i0.$set(fy);const aSe={};_&2&&(aSe.$$scope={dirty:_,ctx:m}),c0.$set(aSe);const nSe={};_&2&&(nSe.$$scope={dirty:_,ctx:m}),v0.$set(nSe);const gy={};_&2&&(gy.$$scope={dirty:_,ctx:m}),T0.$set(gy);const sSe={};_&2&&(sSe.$$scope={dirty:_,ctx:m}),w0.$set(sSe);const lSe={};_&2&&(lSe.$$scope={dirty:_,ctx:m}),L0.$set(lSe);const hy={};_&2&&(hy.$$scope={dirty:_,ctx:m}),U0.$set(hy);const iSe={};_&2&&(iSe.$$scope={dirty:_,ctx:m}),J0.$set(iSe);const dSe={};_&2&&(dSe.$$scope={dirty:_,ctx:m}),lw.$set(dSe);const uy={};_&2&&(uy.$$scope={dirty:_,ctx:m}),dw.$set(uy);const cSe={};_&2&&(cSe.$$scope={dirty:_,ctx:m}),Nw.$set(cSe);const mSe={};_&2&&(mSe.$$scope={dirty:_,ctx:m}),jw.$set(mSe);const py={};_&2&&(py.$$scope={dirty:_,ctx:m}),tA.$set(py);const fSe={};_&2&&(fSe.$$scope={dirty:_,ctx:m}),nA.$set(fSe);const gSe={};_&2&&(gSe.$$scope={dirty:_,ctx:m}),iA.$set(gSe);const _y={};_&2&&(_y.$$scope={dirty:_,ctx:m}),cA.$set(_y);const hSe={};_&2&&(hSe.$$scope={dirty:_,ctx:m}),fA.$set(hSe);const uSe={};_&2&&(uSe.$$scope={dirty:_,ctx:m}),hA.$set(uSe);const by={};_&2&&(by.$$scope={dirty:_,ctx:m}),pA.$set(by);const pSe={};_&2&&(pSe.$$scope={dirty:_,ctx:m}),bA.$set(pSe);const _Se={};_&2&&(_Se.$$scope={dirty:_,ctx:m}),DA.$set(_Se);const vy={};_&2&&(vy.$$scope={dirty:_,ctx:m}),OA.$set(vy);const bSe={};_&2&&(bSe.$$scope={dirty:_,ctx:m}),c6.$set(bSe);const vSe={};_&2&&(vSe.$$scope={dirty:_,ctx:m}),f6.$set(vSe);const Fy={};_&2&&(Fy.$$scope={dirty:_,ctx:m}),h6.$set(Fy);const FSe={};_&2&&(FSe.$$scope={dirty:_,ctx:m}),p6.$set(FSe);const TSe={};_&2&&(TSe.$$scope={dirty:_,ctx:m}),b6.$set(TSe);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:m}),F6.$set(Ty);const MSe={};_&2&&(MSe.$$scope={dirty:_,ctx:m}),U6.$set(MSe);const ESe={};_&2&&(ESe.$$scope={dirty:_,ctx:m}),J6.$set(ESe);const My={};_&2&&(My.$$scope={dirty:_,ctx:m}),l7.$set(My);const CSe={};_&2&&(CSe.$$scope={dirty:_,ctx:m}),d7.$set(CSe);const wSe={};_&2&&(wSe.$$scope={dirty:_,ctx:m}),E7.$set(wSe);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:m}),w7.$set(Ey);const ASe={};_&2&&(ASe.$$scope={dirty:_,ctx:m}),I7.$set(ASe);const LSe={};_&2&&(LSe.$$scope={dirty:_,ctx:m}),q7.$set(LSe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:m}),H7.$set(Cy);const ySe={};_&2&&(ySe.$$scope={dirty:_,ctx:m}),Y7.$set(ySe);const xSe={};_&2&&(xSe.$$scope={dirty:_,ctx:m}),iL.$set(xSe);const wy={};_&2&&(wy.$$scope={dirty:_,ctx:m}),cL.$set(wy);const $Se={};_&2&&($Se.$$scope={dirty:_,ctx:m}),TL.$set($Se);const kSe={};_&2&&(kSe.$$scope={dirty:_,ctx:m}),EL.$set(kSe);const Ay={};_&2&&(Ay.$$scope={dirty:_,ctx:m}),SL.$set(Ay);const SSe={};_&2&&(SSe.$$scope={dirty:_,ctx:m}),PL.$set(SSe);const RSe={};_&2&&(RSe.$$scope={dirty:_,ctx:m}),VL.$set(RSe);const Ly={};_&2&&(Ly.$$scope={dirty:_,ctx:m}),zL.$set(Ly);const PSe={};_&2&&(PSe.$$scope={dirty:_,ctx:m}),WL.$set(PSe);const BSe={};_&2&&(BSe.$$scope={dirty:_,ctx:m}),HL.$set(BSe);const yy={};_&2&&(yy.$$scope={dirty:_,ctx:m}),KL.$set(yy);const ISe={};_&2&&(ISe.$$scope={dirty:_,ctx:m}),ey.$set(ISe);const NSe={};_&2&&(NSe.$$scope={dirty:_,ctx:m}),ry.$set(NSe)},i(m){jeo||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(N9.$$.fragment,m),E(q9.$$.fragment,m),E(yf.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(V9.$$.fragment,m),E(Jh.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(Q9.$$.fragment,m),E(H9.$$.fragment,m),E(Ru.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ox.$$.fragment,m),E(Ep.$$.fragment,m),E(Cp.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(ax.$$.fragment,m),E(lx.$$.fragment,m),E(Up.$$.fragment,m),E(Hp.$$.fragment,m),E(ix.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(Kp.$$.fragment,m),E(gx.$$.fragment,m),E(g2.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(u2.$$.fragment,m),E(bx.$$.fragment,m),E(m1.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(g1.$$.fragment,m),E(Ex.$$.fragment,m),E(tv.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(nv.$$.fragment,m),E(yx.$$.fragment,m),E(Qv.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(Uv.$$.fragment,m),E(Rx.$$.fragment,m),E(pF.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(bF.$$.fragment,m),E(qx.$$.fragment,m),E(vT.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(TT.$$.fragment,m),E(Vx.$$.fragment,m),E(oM.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(tM.$$.fragment,m),E(Ux.$$.fragment,m),E(fM.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(hM.$$.fragment,m),E(Zx.$$.fragment,m),E(eE.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(rE.$$.fragment,m),E(a$.$$.fragment,m),E(UE.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(JE.$$.fragment,m),E(d$.$$.fragment,m),E(ZE.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(o4.$$.fragment,m),E(h$.$$.fragment,m),E(s4.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(i4.$$.fragment,m),E(v$.$$.fragment,m),E(C4.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(A4.$$.fragment,m),E(C$.$$.fragment,m),E(x4.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(k4.$$.fragment,m),E(x$.$$.fragment,m),E(P4.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(I4.$$.fragment,m),E(P$.$$.fragment,m),E(j4.$$.fragment,m),E(B$.$$.fragment,m),E(I$.$$.fragment,m),E(q$.$$.fragment,m),E(G4.$$.fragment,m),E(j$.$$.fragment,m),E(K4.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(eC.$$.fragment,m),E(X$.$$.fragment,m),E(lC.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(U$.$$.fragment,m),E(dC.$$.fragment,m),E(H$.$$.fragment,m),E(TC.$$.fragment,m),E(J$.$$.fragment,m),E(Y$.$$.fragment,m),E(Z$.$$.fragment,m),E(EC.$$.fragment,m),E(ek.$$.fragment,m),E(LC.$$.fragment,m),E(rk.$$.fragment,m),E(tk.$$.fragment,m),E(nk.$$.fragment,m),E(xC.$$.fragment,m),E(sk.$$.fragment,m),E(IC.$$.fragment,m),E(lk.$$.fragment,m),E(ik.$$.fragment,m),E(ck.$$.fragment,m),E(qC.$$.fragment,m),E(mk.$$.fragment,m),E(XC.$$.fragment,m),E(fk.$$.fragment,m),E(gk.$$.fragment,m),E(uk.$$.fragment,m),E(QC.$$.fragment,m),E(pk.$$.fragment,m),E(KC.$$.fragment,m),E(_k.$$.fragment,m),E(bk.$$.fragment,m),E(Fk.$$.fragment,m),E(e3.$$.fragment,m),E(Tk.$$.fragment,m),E(t3.$$.fragment,m),E(Mk.$$.fragment,m),E(Ek.$$.fragment,m),E(wk.$$.fragment,m),E(n3.$$.fragment,m),E(Ak.$$.fragment,m),E(f3.$$.fragment,m),E(Lk.$$.fragment,m),E(yk.$$.fragment,m),E($k.$$.fragment,m),E(h3.$$.fragment,m),E(kk.$$.fragment,m),E(_3.$$.fragment,m),E(Sk.$$.fragment,m),E(Rk.$$.fragment,m),E(Bk.$$.fragment,m),E(v3.$$.fragment,m),E(Ik.$$.fragment,m),E(v5.$$.fragment,m),E(Nk.$$.fragment,m),E(qk.$$.fragment,m),E(Dk.$$.fragment,m),E(T5.$$.fragment,m),E(Gk.$$.fragment,m),E(z5.$$.fragment,m),E(Ok.$$.fragment,m),E(Vk.$$.fragment,m),E(zk.$$.fragment,m),E(W5.$$.fragment,m),E(Qk.$$.fragment,m),E(i0.$$.fragment,m),E(Wk.$$.fragment,m),E(Uk.$$.fragment,m),E(Jk.$$.fragment,m),E(c0.$$.fragment,m),E(Yk.$$.fragment,m),E(v0.$$.fragment,m),E(Kk.$$.fragment,m),E(Zk.$$.fragment,m),E(oS.$$.fragment,m),E(T0.$$.fragment,m),E(rS.$$.fragment,m),E(w0.$$.fragment,m),E(tS.$$.fragment,m),E(aS.$$.fragment,m),E(sS.$$.fragment,m),E(L0.$$.fragment,m),E(lS.$$.fragment,m),E(U0.$$.fragment,m),E(iS.$$.fragment,m),E(dS.$$.fragment,m),E(mS.$$.fragment,m),E(J0.$$.fragment,m),E(fS.$$.fragment,m),E(lw.$$.fragment,m),E(gS.$$.fragment,m),E(hS.$$.fragment,m),E(pS.$$.fragment,m),E(dw.$$.fragment,m),E(_S.$$.fragment,m),E(Nw.$$.fragment,m),E(bS.$$.fragment,m),E(vS.$$.fragment,m),E(TS.$$.fragment,m),E(jw.$$.fragment,m),E(MS.$$.fragment,m),E(tA.$$.fragment,m),E(ES.$$.fragment,m),E(CS.$$.fragment,m),E(AS.$$.fragment,m),E(nA.$$.fragment,m),E(LS.$$.fragment,m),E(iA.$$.fragment,m),E(xS.$$.fragment,m),E($S.$$.fragment,m),E(SS.$$.fragment,m),E(cA.$$.fragment,m),E(RS.$$.fragment,m),E(fA.$$.fragment,m),E(PS.$$.fragment,m),E(BS.$$.fragment,m),E(NS.$$.fragment,m),E(hA.$$.fragment,m),E(qS.$$.fragment,m),E(pA.$$.fragment,m),E(jS.$$.fragment,m),E(DS.$$.fragment,m),E(OS.$$.fragment,m),E(bA.$$.fragment,m),E(VS.$$.fragment,m),E(DA.$$.fragment,m),E(XS.$$.fragment,m),E(zS.$$.fragment,m),E(WS.$$.fragment,m),E(OA.$$.fragment,m),E(US.$$.fragment,m),E(c6.$$.fragment,m),E(HS.$$.fragment,m),E(JS.$$.fragment,m),E(KS.$$.fragment,m),E(f6.$$.fragment,m),E(ZS.$$.fragment,m),E(h6.$$.fragment,m),E(eR.$$.fragment,m),E(oR.$$.fragment,m),E(tR.$$.fragment,m),E(p6.$$.fragment,m),E(aR.$$.fragment,m),E(b6.$$.fragment,m),E(nR.$$.fragment,m),E(sR.$$.fragment,m),E(iR.$$.fragment,m),E(F6.$$.fragment,m),E(dR.$$.fragment,m),E(U6.$$.fragment,m),E(cR.$$.fragment,m),E(mR.$$.fragment,m),E(gR.$$.fragment,m),E(J6.$$.fragment,m),E(hR.$$.fragment,m),E(l7.$$.fragment,m),E(uR.$$.fragment,m),E(pR.$$.fragment,m),E(bR.$$.fragment,m),E(d7.$$.fragment,m),E(vR.$$.fragment,m),E(E7.$$.fragment,m),E(FR.$$.fragment,m),E(TR.$$.fragment,m),E(ER.$$.fragment,m),E(w7.$$.fragment,m),E(CR.$$.fragment,m),E(I7.$$.fragment,m),E(wR.$$.fragment,m),E(AR.$$.fragment,m),E(yR.$$.fragment,m),E(q7.$$.fragment,m),E(xR.$$.fragment,m),E(H7.$$.fragment,m),E($R.$$.fragment,m),E(kR.$$.fragment,m),E(RR.$$.fragment,m),E(Y7.$$.fragment,m),E(PR.$$.fragment,m),E(iL.$$.fragment,m),E(BR.$$.fragment,m),E(IR.$$.fragment,m),E(qR.$$.fragment,m),E(cL.$$.fragment,m),E(jR.$$.fragment,m),E(TL.$$.fragment,m),E(DR.$$.fragment,m),E(GR.$$.fragment,m),E(VR.$$.fragment,m),E(EL.$$.fragment,m),E(XR.$$.fragment,m),E(SL.$$.fragment,m),E(zR.$$.fragment,m),E(QR.$$.fragment,m),E(UR.$$.fragment,m),E(PL.$$.fragment,m),E(HR.$$.fragment,m),E(VL.$$.fragment,m),E(JR.$$.fragment,m),E(YR.$$.fragment,m),E(ZR.$$.fragment,m),E(zL.$$.fragment,m),E(eP.$$.fragment,m),E(WL.$$.fragment,m),E(oP.$$.fragment,m),E(rP.$$.fragment,m),E(aP.$$.fragment,m),E(HL.$$.fragment,m),E(nP.$$.fragment,m),E(KL.$$.fragment,m),E(lP.$$.fragment,m),E(iP.$$.fragment,m),E(cP.$$.fragment,m),E(ey.$$.fragment,m),E(mP.$$.fragment,m),E(ry.$$.fragment,m),jeo=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(N9.$$.fragment,m),C(q9.$$.fragment,m),C(yf.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(V9.$$.fragment,m),C(Jh.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(Q9.$$.fragment,m),C(H9.$$.fragment,m),C(Ru.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ox.$$.fragment,m),C(Ep.$$.fragment,m),C(Cp.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(ax.$$.fragment,m),C(lx.$$.fragment,m),C(Up.$$.fragment,m),C(Hp.$$.fragment,m),C(ix.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(Kp.$$.fragment,m),C(gx.$$.fragment,m),C(g2.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(u2.$$.fragment,m),C(bx.$$.fragment,m),C(m1.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(g1.$$.fragment,m),C(Ex.$$.fragment,m),C(tv.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(nv.$$.fragment,m),C(yx.$$.fragment,m),C(Qv.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(Uv.$$.fragment,m),C(Rx.$$.fragment,m),C(pF.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(bF.$$.fragment,m),C(qx.$$.fragment,m),C(vT.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(TT.$$.fragment,m),C(Vx.$$.fragment,m),C(oM.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(tM.$$.fragment,m),C(Ux.$$.fragment,m),C(fM.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(hM.$$.fragment,m),C(Zx.$$.fragment,m),C(eE.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(rE.$$.fragment,m),C(a$.$$.fragment,m),C(UE.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(JE.$$.fragment,m),C(d$.$$.fragment,m),C(ZE.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(o4.$$.fragment,m),C(h$.$$.fragment,m),C(s4.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(i4.$$.fragment,m),C(v$.$$.fragment,m),C(C4.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(A4.$$.fragment,m),C(C$.$$.fragment,m),C(x4.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(k4.$$.fragment,m),C(x$.$$.fragment,m),C(P4.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(I4.$$.fragment,m),C(P$.$$.fragment,m),C(j4.$$.fragment,m),C(B$.$$.fragment,m),C(I$.$$.fragment,m),C(q$.$$.fragment,m),C(G4.$$.fragment,m),C(j$.$$.fragment,m),C(K4.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(eC.$$.fragment,m),C(X$.$$.fragment,m),C(lC.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(U$.$$.fragment,m),C(dC.$$.fragment,m),C(H$.$$.fragment,m),C(TC.$$.fragment,m),C(J$.$$.fragment,m),C(Y$.$$.fragment,m),C(Z$.$$.fragment,m),C(EC.$$.fragment,m),C(ek.$$.fragment,m),C(LC.$$.fragment,m),C(rk.$$.fragment,m),C(tk.$$.fragment,m),C(nk.$$.fragment,m),C(xC.$$.fragment,m),C(sk.$$.fragment,m),C(IC.$$.fragment,m),C(lk.$$.fragment,m),C(ik.$$.fragment,m),C(ck.$$.fragment,m),C(qC.$$.fragment,m),C(mk.$$.fragment,m),C(XC.$$.fragment,m),C(fk.$$.fragment,m),C(gk.$$.fragment,m),C(uk.$$.fragment,m),C(QC.$$.fragment,m),C(pk.$$.fragment,m),C(KC.$$.fragment,m),C(_k.$$.fragment,m),C(bk.$$.fragment,m),C(Fk.$$.fragment,m),C(e3.$$.fragment,m),C(Tk.$$.fragment,m),C(t3.$$.fragment,m),C(Mk.$$.fragment,m),C(Ek.$$.fragment,m),C(wk.$$.fragment,m),C(n3.$$.fragment,m),C(Ak.$$.fragment,m),C(f3.$$.fragment,m),C(Lk.$$.fragment,m),C(yk.$$.fragment,m),C($k.$$.fragment,m),C(h3.$$.fragment,m),C(kk.$$.fragment,m),C(_3.$$.fragment,m),C(Sk.$$.fragment,m),C(Rk.$$.fragment,m),C(Bk.$$.fragment,m),C(v3.$$.fragment,m),C(Ik.$$.fragment,m),C(v5.$$.fragment,m),C(Nk.$$.fragment,m),C(qk.$$.fragment,m),C(Dk.$$.fragment,m),C(T5.$$.fragment,m),C(Gk.$$.fragment,m),C(z5.$$.fragment,m),C(Ok.$$.fragment,m),C(Vk.$$.fragment,m),C(zk.$$.fragment,m),C(W5.$$.fragment,m),C(Qk.$$.fragment,m),C(i0.$$.fragment,m),C(Wk.$$.fragment,m),C(Uk.$$.fragment,m),C(Jk.$$.fragment,m),C(c0.$$.fragment,m),C(Yk.$$.fragment,m),C(v0.$$.fragment,m),C(Kk.$$.fragment,m),C(Zk.$$.fragment,m),C(oS.$$.fragment,m),C(T0.$$.fragment,m),C(rS.$$.fragment,m),C(w0.$$.fragment,m),C(tS.$$.fragment,m),C(aS.$$.fragment,m),C(sS.$$.fragment,m),C(L0.$$.fragment,m),C(lS.$$.fragment,m),C(U0.$$.fragment,m),C(iS.$$.fragment,m),C(dS.$$.fragment,m),C(mS.$$.fragment,m),C(J0.$$.fragment,m),C(fS.$$.fragment,m),C(lw.$$.fragment,m),C(gS.$$.fragment,m),C(hS.$$.fragment,m),C(pS.$$.fragment,m),C(dw.$$.fragment,m),C(_S.$$.fragment,m),C(Nw.$$.fragment,m),C(bS.$$.fragment,m),C(vS.$$.fragment,m),C(TS.$$.fragment,m),C(jw.$$.fragment,m),C(MS.$$.fragment,m),C(tA.$$.fragment,m),C(ES.$$.fragment,m),C(CS.$$.fragment,m),C(AS.$$.fragment,m),C(nA.$$.fragment,m),C(LS.$$.fragment,m),C(iA.$$.fragment,m),C(xS.$$.fragment,m),C($S.$$.fragment,m),C(SS.$$.fragment,m),C(cA.$$.fragment,m),C(RS.$$.fragment,m),C(fA.$$.fragment,m),C(PS.$$.fragment,m),C(BS.$$.fragment,m),C(NS.$$.fragment,m),C(hA.$$.fragment,m),C(qS.$$.fragment,m),C(pA.$$.fragment,m),C(jS.$$.fragment,m),C(DS.$$.fragment,m),C(OS.$$.fragment,m),C(bA.$$.fragment,m),C(VS.$$.fragment,m),C(DA.$$.fragment,m),C(XS.$$.fragment,m),C(zS.$$.fragment,m),C(WS.$$.fragment,m),C(OA.$$.fragment,m),C(US.$$.fragment,m),C(c6.$$.fragment,m),C(HS.$$.fragment,m),C(JS.$$.fragment,m),C(KS.$$.fragment,m),C(f6.$$.fragment,m),C(ZS.$$.fragment,m),C(h6.$$.fragment,m),C(eR.$$.fragment,m),C(oR.$$.fragment,m),C(tR.$$.fragment,m),C(p6.$$.fragment,m),C(aR.$$.fragment,m),C(b6.$$.fragment,m),C(nR.$$.fragment,m),C(sR.$$.fragment,m),C(iR.$$.fragment,m),C(F6.$$.fragment,m),C(dR.$$.fragment,m),C(U6.$$.fragment,m),C(cR.$$.fragment,m),C(mR.$$.fragment,m),C(gR.$$.fragment,m),C(J6.$$.fragment,m),C(hR.$$.fragment,m),C(l7.$$.fragment,m),C(uR.$$.fragment,m),C(pR.$$.fragment,m),C(bR.$$.fragment,m),C(d7.$$.fragment,m),C(vR.$$.fragment,m),C(E7.$$.fragment,m),C(FR.$$.fragment,m),C(TR.$$.fragment,m),C(ER.$$.fragment,m),C(w7.$$.fragment,m),C(CR.$$.fragment,m),C(I7.$$.fragment,m),C(wR.$$.fragment,m),C(AR.$$.fragment,m),C(yR.$$.fragment,m),C(q7.$$.fragment,m),C(xR.$$.fragment,m),C(H7.$$.fragment,m),C($R.$$.fragment,m),C(kR.$$.fragment,m),C(RR.$$.fragment,m),C(Y7.$$.fragment,m),C(PR.$$.fragment,m),C(iL.$$.fragment,m),C(BR.$$.fragment,m),C(IR.$$.fragment,m),C(qR.$$.fragment,m),C(cL.$$.fragment,m),C(jR.$$.fragment,m),C(TL.$$.fragment,m),C(DR.$$.fragment,m),C(GR.$$.fragment,m),C(VR.$$.fragment,m),C(EL.$$.fragment,m),C(XR.$$.fragment,m),C(SL.$$.fragment,m),C(zR.$$.fragment,m),C(QR.$$.fragment,m),C(UR.$$.fragment,m),C(PL.$$.fragment,m),C(HR.$$.fragment,m),C(VL.$$.fragment,m),C(JR.$$.fragment,m),C(YR.$$.fragment,m),C(ZR.$$.fragment,m),C(zL.$$.fragment,m),C(eP.$$.fragment,m),C(WL.$$.fragment,m),C(oP.$$.fragment,m),C(rP.$$.fragment,m),C(aP.$$.fragment,m),C(HL.$$.fragment,m),C(nP.$$.fragment,m),C(KL.$$.fragment,m),C(lP.$$.fragment,m),C(iP.$$.fragment,m),C(cP.$$.fragment,m),C(ey.$$.fragment,m),C(mP.$$.fragment,m),C(ry.$$.fragment,m),jeo=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Ef),m&&t(pt),m&&t(Ve),m&&t(He),m&&t(wf),w(Qa,m),m&&t(Je),m&&t(Ae),m&&t(xo),m&&t(Wa),m&&t(AKe),m&&t(cd),w(N9),m&&t(LKe),m&&t(as),m&&t(yKe),w(q9,m),m&&t(xKe),m&&t(OB),m&&t($Ke),w(yf,m),m&&t(kKe),m&&t(md),w(j9),m&&t(SKe),m&&t($o),w(D9),w(V9),w(Jh),w(X9),m&&t(RKe),m&&t(gd),w(z9),m&&t(PKe),m&&t(ko),w(Q9),w(H9),w(Ru),w(J9),m&&t(BKe),m&&t(hd),w(Y9),m&&t(IKe),m&&t(So),w(K9),w(ox),w(Ep),w(Cp),w(rx),m&&t(NKe),m&&t(ud),w(tx),m&&t(qKe),m&&t(Ro),w(ax),w(lx),w(Up),w(Hp),w(ix),m&&t(jKe),m&&t(_d),w(dx),m&&t(DKe),m&&t(Po),w(cx),w(fx),w(Kp),w(gx),w(g2),m&&t(GKe),m&&t(Fd),w(hx),m&&t(OKe),m&&t(Bo),w(ux),w(_x),w(u2),w(bx),w(m1),m&&t(VKe),m&&t(Ed),w(vx),m&&t(XKe),m&&t(Io),w(Fx),w(Mx),w(g1),w(Ex),w(tv),m&&t(zKe),m&&t(Ad),w(Cx),m&&t(QKe),m&&t(No),w(wx),w(Lx),w(nv),w(yx),w(Qv),m&&t(WKe),m&&t(xd),w(xx),m&&t(UKe),m&&t(qo),w($x),w(Sx),w(Uv),w(Rx),w(pF),m&&t(HKe),m&&t(Sd),w(Px),m&&t(JKe),m&&t(jo),w(Bx),w(Nx),w(bF),w(qx),w(vT),m&&t(YKe),m&&t(Bd),w(jx),m&&t(KKe),m&&t(Do),w(Dx),w(Ox),w(TT),w(Vx),w(oM),m&&t(ZKe),m&&t(qd),w(Xx),m&&t(eZe),m&&t(Go),w(zx),w(Wx),w(tM),w(Ux),w(fM),m&&t(oZe),m&&t(Gd),w(Hx),m&&t(rZe),m&&t(Oo),w(Jx),w(Kx),w(hM),w(Zx),w(eE),m&&t(tZe),m&&t(Xd),w(e$),m&&t(aZe),m&&t(Vo),w(o$),w(t$),w(rE),w(a$),w(UE),m&&t(nZe),m&&t(Wd),w(n$),m&&t(sZe),m&&t(Xo),w(s$),w(i$),w(JE),w(d$),w(ZE),m&&t(lZe),m&&t(Jd),w(c$),m&&t(iZe),m&&t(zo),w(m$),w(g$),w(o4),w(h$),w(s4),m&&t(dZe),m&&t(ec),w(u$),m&&t(cZe),m&&t(Qo),w(p$),w(b$),w(i4),w(v$),w(C4),m&&t(mZe),m&&t(tc),w(F$),m&&t(fZe),m&&t(Wo),w(T$),w(E$),w(A4),w(C$),w(x4),m&&t(gZe),m&&t(sc),w(w$),m&&t(hZe),m&&t(Uo),w(A$),w(y$),w(k4),w(x$),w(P4),m&&t(uZe),m&&t(dc),w($$),m&&t(pZe),m&&t(Ho),w(k$),w(R$),w(I4),w(P$),w(j4),m&&t(_Ze),m&&t(fc),w(B$),m&&t(bZe),m&&t(Jo),w(I$),w(q$),w(G4),w(j$),w(K4),m&&t(vZe),m&&t(uc),w(D$),m&&t(FZe),m&&t(Yo),w(G$),w(V$),w(eC),w(X$),w(lC),m&&t(TZe),m&&t(bc),w(z$),m&&t(MZe),m&&t(Ko),w(Q$),w(U$),w(dC),w(H$),w(TC),m&&t(EZe),m&&t(Tc),w(J$),m&&t(CZe),m&&t(Zo),w(Y$),w(Z$),w(EC),w(ek),w(LC),m&&t(wZe),m&&t(Cc),w(rk),m&&t(AZe),m&&t(er),w(tk),w(nk),w(xC),w(sk),w(IC),m&&t(LZe),m&&t(Lc),w(lk),m&&t(yZe),m&&t(or),w(ik),w(ck),w(qC),w(mk),w(XC),m&&t(xZe),m&&t($c),w(fk),m&&t($Ze),m&&t(rr),w(gk),w(uk),w(QC),w(pk),w(KC),m&&t(kZe),m&&t(Rc),w(_k),m&&t(SZe),m&&t(tr),w(bk),w(Fk),w(e3),w(Tk),w(t3),m&&t(RZe),m&&t(Ic),w(Mk),m&&t(PZe),m&&t(ar),w(Ek),w(wk),w(n3),w(Ak),w(f3),m&&t(BZe),m&&t(jc),w(Lk),m&&t(IZe),m&&t(nr),w(yk),w($k),w(h3),w(kk),w(_3),m&&t(NZe),m&&t(Oc),w(Sk),m&&t(qZe),m&&t(sr),w(Rk),w(Bk),w(v3),w(Ik),w(v5),m&&t(jZe),m&&t(zc),w(Nk),m&&t(DZe),m&&t(lr),w(qk),w(Dk),w(T5),w(Gk),w(z5),m&&t(GZe),m&&t(Uc),w(Ok),m&&t(OZe),m&&t(ir),w(Vk),w(zk),w(W5),w(Qk),w(i0),m&&t(VZe),m&&t(Yc),w(Wk),m&&t(XZe),m&&t(dr),w(Uk),w(Jk),w(c0),w(Yk),w(v0),m&&t(zZe),m&&t(em),w(Kk),m&&t(QZe),m&&t(cr),w(Zk),w(oS),w(T0),w(rS),w(w0),m&&t(WZe),m&&t(am),w(tS),m&&t(UZe),m&&t(mr),w(aS),w(sS),w(L0),w(lS),w(U0),m&&t(HZe),m&&t(lm),w(iS),m&&t(JZe),m&&t(fr),w(dS),w(mS),w(J0),w(fS),w(lw),m&&t(YZe),m&&t(cm),w(gS),m&&t(KZe),m&&t(gr),w(hS),w(pS),w(dw),w(_S),w(Nw),m&&t(ZZe),m&&t(gm),w(bS),m&&t(eeo),m&&t(hr),w(vS),w(TS),w(jw),w(MS),w(tA),m&&t(oeo),m&&t(pm),w(ES),m&&t(reo),m&&t(ur),w(CS),w(AS),w(nA),w(LS),w(iA),m&&t(teo),m&&t(vm),w(xS),m&&t(aeo),m&&t(pr),w($S),w(SS),w(cA),w(RS),w(fA),m&&t(neo),m&&t(Mm),w(PS),m&&t(seo),m&&t(_r),w(BS),w(NS),w(hA),w(qS),w(pA),m&&t(leo),m&&t(wm),w(jS),m&&t(ieo),m&&t(br),w(DS),w(OS),w(bA),w(VS),w(DA),m&&t(deo),m&&t(ym),w(XS),m&&t(ceo),m&&t(vr),w(zS),w(WS),w(OA),w(US),w(c6),m&&t(meo),m&&t(km),w(HS),m&&t(feo),m&&t(Fr),w(JS),w(KS),w(f6),w(ZS),w(h6),m&&t(geo),m&&t(Pm),w(eR),m&&t(heo),m&&t(Tr),w(oR),w(tR),w(p6),w(aR),w(b6),m&&t(ueo),m&&t(Nm),w(nR),m&&t(peo),m&&t(Mr),w(sR),w(iR),w(F6),w(dR),w(U6),m&&t(_eo),m&&t(Dm),w(cR),m&&t(beo),m&&t(Er),w(mR),w(gR),w(J6),w(hR),w(l7),m&&t(veo),m&&t(Vm),w(uR),m&&t(Feo),m&&t(Cr),w(pR),w(bR),w(d7),w(vR),w(E7),m&&t(Teo),m&&t(Qm),w(FR),m&&t(Meo),m&&t(wr),w(TR),w(ER),w(w7),w(CR),w(I7),m&&t(Eeo),m&&t(Hm),w(wR),m&&t(Ceo),m&&t(Ar),w(AR),w(yR),w(q7),w(xR),w(H7),m&&t(weo),m&&t(Km),w($R),m&&t(Aeo),m&&t(Lr),w(kR),w(RR),w(Y7),w(PR),w(iL),m&&t(Leo),m&&t(of),w(BR),m&&t(yeo),m&&t(yr),w(IR),w(qR),w(cL),w(jR),w(TL),m&&t(xeo),m&&t(af),w(DR),m&&t($eo),m&&t(xr),w(GR),w(VR),w(EL),w(XR),w(SL),m&&t(keo),m&&t(lf),w(zR),m&&t(Seo),m&&t($r),w(QR),w(UR),w(PL),w(HR),w(VL),m&&t(Reo),m&&t(mf),w(JR),m&&t(Peo),m&&t(kr),w(YR),w(ZR),w(zL),w(eP),w(WL),m&&t(Beo),m&&t(hf),w(oP),m&&t(Ieo),m&&t(Sr),w(rP),w(aP),w(HL),w(nP),w(KL),m&&t(Neo),m&&t(_f),w(lP),m&&t(qeo),m&&t(Rr),w(iP),w(cP),w(ey),w(mP),w(ry)}}}const v_a={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function F_a($){return cua(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class L_a extends sua{constructor(g){super();lua(this,g,F_a,b_a,iua,{})}}export{L_a as default,v_a as metadata};
