import{S as nxt,i as sxt,s as lxt,e as a,k as l,w as F,t as o,M as ixt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as dxt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as jOr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function cxt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,by,um,je,We,hi,yn,vy,Ln,xn,Fy,ui,$n,Ty,pi,pm,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),hm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),gi=o('"new-model"'),by=o(")."),um=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),vy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Fy=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),Ty=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),pm=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var D$=s(u);f=r(D$,"NewModelConfig"),D$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var G$=s(mi);hm=r(G$,"model_type"),G$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var O$=s(fi);gi=r(O$,'"new-model"'),O$.forEach(t),by=r(Ae,")."),Ae.forEach(t),um=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),vy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var V$=s(Ln);xn=r(V$,"PreTrainedModel"),V$.forEach(t),Fy=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var _m=s(ui);$n=r(_m,"config_class"),_m.forEach(t),Ty=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var X$=s(pi);pm=r(X$,"NewModelConfig"),X$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,hm),e(g,rt),e(g,fi),e(fi,gi),e(g,by),b(Qe,um,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,vy),e(je,Ln),e(Ln,xn),e(je,Fy),e(je,ui),e(ui,$n),e(je,Ty),e(je,pi),e(pi,pm),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(um),Qe&&t(je)}}}function mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gxt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uxt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z$t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ekt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function okt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function akt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function skt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lkt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,by,um,je,We,hi,yn,vy,Ln,xn,Fy,ui,$n,Ty,pi,pm,Ca,Qe,Ae,D$,_i,G$,O$,Eo,wa,V$,_m,X$,VGe,Sqe,bi,bm,Jee,My,XGe,Yee,zGe,Rqe,kn,WGe,Kee,QGe,HGe,Zee,UGe,JGe,Pqe,Ey,Bqe,z$,YGe,Iqe,vm,qqe,vi,Fm,eoe,Cy,KGe,ooe,ZGe,Nqe,Co,wy,eOe,Ay,oOe,W$,rOe,tOe,aOe,yy,nOe,roe,sOe,lOe,iOe,Er,Ly,dOe,toe,cOe,mOe,Fi,fOe,aoe,gOe,hOe,noe,uOe,pOe,_Oe,A,Tm,soe,bOe,vOe,Q$,FOe,TOe,MOe,Mm,loe,EOe,COe,H$,wOe,AOe,yOe,Em,ioe,LOe,xOe,U$,$Oe,kOe,SOe,Cm,doe,ROe,POe,J$,BOe,IOe,qOe,wm,coe,NOe,jOe,Y$,DOe,GOe,OOe,Am,moe,VOe,XOe,K$,zOe,WOe,QOe,ym,foe,HOe,UOe,Z$,JOe,YOe,KOe,Lm,goe,ZOe,eVe,ek,oVe,rVe,tVe,xm,hoe,aVe,nVe,ok,sVe,lVe,iVe,$m,uoe,dVe,cVe,rk,mVe,fVe,gVe,km,poe,hVe,uVe,tk,pVe,_Ve,bVe,Sm,_oe,vVe,FVe,ak,TVe,MVe,EVe,Rm,boe,CVe,wVe,nk,AVe,yVe,LVe,Pm,voe,xVe,$Ve,sk,kVe,SVe,RVe,Bm,Foe,PVe,BVe,lk,IVe,qVe,NVe,Im,Toe,jVe,DVe,ik,GVe,OVe,VVe,qm,Moe,XVe,zVe,dk,WVe,QVe,HVe,Nm,Eoe,UVe,JVe,ck,YVe,KVe,ZVe,jm,Coe,eXe,oXe,mk,rXe,tXe,aXe,Dm,woe,nXe,sXe,fk,lXe,iXe,dXe,Gm,Aoe,cXe,mXe,gk,fXe,gXe,hXe,Om,yoe,uXe,pXe,hk,_Xe,bXe,vXe,Vm,Loe,FXe,TXe,uk,MXe,EXe,CXe,Xm,xoe,wXe,AXe,pk,yXe,LXe,xXe,zm,$oe,$Xe,kXe,_k,SXe,RXe,PXe,Wm,koe,BXe,IXe,bk,qXe,NXe,jXe,Qm,Soe,DXe,GXe,vk,OXe,VXe,XXe,Hm,Roe,zXe,WXe,Fk,QXe,HXe,UXe,Um,Poe,JXe,YXe,Tk,KXe,ZXe,eze,Jm,Boe,oze,rze,Mk,tze,aze,nze,Ym,Ioe,sze,lze,Ek,ize,dze,cze,Km,qoe,mze,fze,Ck,gze,hze,uze,Zm,Noe,pze,_ze,wk,bze,vze,Fze,ef,joe,Tze,Mze,Ak,Eze,Cze,wze,of,Doe,Aze,yze,yk,Lze,xze,$ze,rf,Goe,kze,Sze,Lk,Rze,Pze,Bze,tf,Ooe,Ize,qze,xk,Nze,jze,Dze,af,Voe,Gze,Oze,$k,Vze,Xze,zze,nf,Xoe,Wze,Qze,kk,Hze,Uze,Jze,sf,zoe,Yze,Kze,Sk,Zze,eWe,oWe,lf,Woe,rWe,tWe,Rk,aWe,nWe,sWe,df,Qoe,lWe,iWe,Pk,dWe,cWe,mWe,cf,Hoe,fWe,gWe,Bk,hWe,uWe,pWe,mf,Uoe,_We,bWe,Ik,vWe,FWe,TWe,ff,Joe,MWe,EWe,qk,CWe,wWe,AWe,gf,Yoe,yWe,LWe,Nk,xWe,$We,kWe,hf,Koe,SWe,RWe,jk,PWe,BWe,IWe,uf,Zoe,qWe,NWe,Dk,jWe,DWe,GWe,pf,ere,OWe,VWe,Gk,XWe,zWe,WWe,_f,ore,QWe,HWe,Ok,UWe,JWe,YWe,bf,rre,KWe,ZWe,Vk,eQe,oQe,rQe,vf,tre,tQe,aQe,Xk,nQe,sQe,lQe,Ff,are,iQe,dQe,zk,cQe,mQe,fQe,Tf,nre,gQe,hQe,Wk,uQe,pQe,_Qe,Mf,sre,bQe,vQe,Qk,FQe,TQe,MQe,Ef,lre,EQe,CQe,Hk,wQe,AQe,yQe,Cf,ire,LQe,xQe,Uk,$Qe,kQe,SQe,wf,dre,RQe,PQe,Jk,BQe,IQe,qQe,Af,cre,NQe,jQe,Yk,DQe,GQe,OQe,yf,mre,VQe,XQe,Kk,zQe,WQe,QQe,Lf,fre,HQe,UQe,Zk,JQe,YQe,KQe,xf,gre,ZQe,eHe,eS,oHe,rHe,tHe,$f,hre,aHe,nHe,oS,sHe,lHe,iHe,kf,ure,dHe,cHe,rS,mHe,fHe,gHe,Sf,pre,hHe,uHe,tS,pHe,_He,bHe,Rf,_re,vHe,FHe,aS,THe,MHe,EHe,Pf,bre,CHe,wHe,nS,AHe,yHe,LHe,Bf,vre,xHe,$He,sS,kHe,SHe,RHe,If,Fre,PHe,BHe,lS,IHe,qHe,NHe,qf,Tre,jHe,DHe,iS,GHe,OHe,VHe,Nf,Mre,XHe,zHe,dS,WHe,QHe,HHe,jf,Ere,UHe,JHe,cS,YHe,KHe,ZHe,Df,Cre,eUe,oUe,mS,rUe,tUe,aUe,Gf,wre,nUe,sUe,fS,lUe,iUe,dUe,Of,Are,cUe,mUe,gS,fUe,gUe,hUe,Vf,yre,uUe,pUe,hS,_Ue,bUe,vUe,Xf,Lre,FUe,TUe,uS,MUe,EUe,CUe,zf,xre,wUe,AUe,pS,yUe,LUe,xUe,Wf,$re,$Ue,kUe,_S,SUe,RUe,PUe,Qf,kre,BUe,IUe,bS,qUe,NUe,jUe,Hf,Sre,DUe,GUe,vS,OUe,VUe,XUe,Uf,Rre,zUe,WUe,FS,QUe,HUe,UUe,Jf,Pre,JUe,YUe,TS,KUe,ZUe,eJe,Yf,Bre,oJe,rJe,MS,tJe,aJe,nJe,Kf,Ire,sJe,lJe,ES,iJe,dJe,cJe,Zf,qre,mJe,fJe,CS,gJe,hJe,uJe,eg,Nre,pJe,_Je,wS,bJe,vJe,FJe,og,jre,TJe,MJe,AS,EJe,CJe,wJe,rg,Dre,AJe,yJe,yS,LJe,xJe,$Je,tg,Gre,kJe,SJe,LS,RJe,PJe,BJe,ag,Ore,IJe,qJe,xS,NJe,jJe,DJe,ng,Vre,GJe,OJe,$S,VJe,XJe,zJe,sg,Xre,WJe,QJe,kS,HJe,UJe,JJe,lg,zre,YJe,KJe,SS,ZJe,eYe,oYe,ig,Wre,rYe,tYe,RS,aYe,nYe,sYe,dg,Qre,lYe,iYe,PS,dYe,cYe,mYe,cg,Hre,fYe,gYe,BS,hYe,uYe,pYe,mg,Ure,_Ye,bYe,IS,vYe,FYe,TYe,fg,Jre,MYe,EYe,qS,CYe,wYe,AYe,gg,Yre,yYe,LYe,NS,xYe,$Ye,kYe,hg,Kre,SYe,RYe,jS,PYe,BYe,IYe,ug,Zre,qYe,NYe,DS,jYe,DYe,GYe,pg,ete,OYe,VYe,GS,XYe,zYe,WYe,_g,ote,QYe,HYe,OS,UYe,JYe,YYe,bg,rte,KYe,ZYe,VS,eKe,oKe,rKe,vg,tte,tKe,aKe,XS,nKe,sKe,lKe,Fg,ate,iKe,dKe,zS,cKe,mKe,fKe,Tg,nte,gKe,hKe,WS,uKe,pKe,_Ke,Mg,bKe,Eg,xy,vKe,ste,FKe,jqe,Ti,Cg,lte,$y,TKe,ite,MKe,Dqe,wo,ky,EKe,Sy,CKe,QS,wKe,AKe,yKe,Ry,LKe,dte,xKe,$Ke,kKe,Cr,Py,SKe,cte,RKe,PKe,Aa,BKe,mte,IKe,qKe,fte,NKe,jKe,gte,DKe,GKe,OKe,k,Sn,hte,VKe,XKe,HS,zKe,WKe,US,QKe,HKe,UKe,Rn,ute,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,Pn,pte,tZe,aZe,KS,nZe,sZe,ZS,lZe,iZe,dZe,wg,_te,cZe,mZe,eR,fZe,gZe,hZe,Bn,bte,uZe,pZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,Ag,vte,MZe,EZe,tR,CZe,wZe,AZe,yg,Fte,yZe,LZe,aR,xZe,$Ze,kZe,Lg,Tte,SZe,RZe,nR,PZe,BZe,IZe,In,Mte,qZe,NZe,sR,jZe,DZe,lR,GZe,OZe,VZe,qn,Ete,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,Nn,Cte,YZe,KZe,cR,ZZe,eeo,mR,oeo,reo,teo,xg,wte,aeo,neo,fR,seo,leo,ieo,$g,Ate,deo,ceo,gR,meo,feo,geo,jn,yte,heo,ueo,hR,peo,_eo,uR,beo,veo,Feo,kg,Lte,Teo,Meo,pR,Eeo,Ceo,weo,Dn,xte,Aeo,yeo,_R,Leo,xeo,bR,$eo,keo,Seo,Gn,$te,Reo,Peo,vR,Beo,Ieo,FR,qeo,Neo,jeo,On,kte,Deo,Geo,TR,Oeo,Veo,MR,Xeo,zeo,Weo,Sg,Ste,Qeo,Heo,ER,Ueo,Jeo,Yeo,Vn,Rte,Keo,Zeo,CR,eoo,ooo,wR,roo,too,aoo,Xn,Pte,noo,soo,AR,loo,ioo,yR,doo,coo,moo,zn,Bte,foo,goo,LR,hoo,uoo,xR,poo,_oo,boo,Wn,Ite,voo,Foo,$R,Too,Moo,kR,Eoo,Coo,woo,Qn,qte,Aoo,yoo,SR,Loo,xoo,RR,$oo,koo,Soo,Hn,Nte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Rg,jte,Doo,Goo,IR,Ooo,Voo,Xoo,Un,Dte,zoo,Woo,qR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Pg,Gte,Koo,Zoo,jR,ero,oro,rro,Jn,Ote,tro,aro,DR,nro,sro,GR,lro,iro,dro,Yn,Vte,cro,mro,OR,fro,gro,VR,hro,uro,pro,Kn,Xte,_ro,bro,XR,vro,Fro,zR,Tro,Mro,Ero,Zn,zte,Cro,wro,WR,Aro,yro,QR,Lro,xro,$ro,es,Wte,kro,Sro,HR,Rro,Pro,UR,Bro,Iro,qro,Bg,Qte,Nro,jro,JR,Dro,Gro,Oro,os,Hte,Vro,Xro,YR,zro,Wro,KR,Qro,Hro,Uro,rs,Ute,Jro,Yro,ZR,Kro,Zro,eP,eto,oto,rto,ts,Jte,tto,ato,oP,nto,sto,rP,lto,ito,dto,as,Yte,cto,mto,tP,fto,gto,aP,hto,uto,pto,ns,Kte,_to,bto,nP,vto,Fto,sP,Tto,Mto,Eto,ss,Zte,Cto,wto,lP,Ato,yto,iP,Lto,xto,$to,ls,eae,kto,Sto,dP,Rto,Pto,cP,Bto,Ito,qto,Ig,oae,Nto,jto,mP,Dto,Gto,Oto,is,rae,Vto,Xto,fP,zto,Wto,gP,Qto,Hto,Uto,qg,tae,Jto,Yto,hP,Kto,Zto,eao,Ng,aae,oao,rao,uP,tao,aao,nao,ds,nae,sao,lao,pP,iao,dao,_P,cao,mao,fao,cs,sae,gao,hao,bP,uao,pao,vP,_ao,bao,vao,ms,lae,Fao,Tao,FP,Mao,Eao,TP,Cao,wao,Aao,jg,iae,yao,Lao,MP,xao,$ao,kao,fs,dae,Sao,Rao,EP,Pao,Bao,CP,Iao,qao,Nao,gs,cae,jao,Dao,wP,Gao,Oao,AP,Vao,Xao,zao,hs,mae,Wao,Qao,yP,Hao,Uao,LP,Jao,Yao,Kao,us,fae,Zao,eno,xP,ono,rno,$P,tno,ano,nno,ps,gae,sno,lno,kP,ino,dno,SP,cno,mno,fno,Dg,hae,gno,hno,RP,uno,pno,_no,_s,uae,bno,vno,PP,Fno,Tno,BP,Mno,Eno,Cno,Gg,pae,wno,Ano,IP,yno,Lno,xno,Og,_ae,$no,kno,qP,Sno,Rno,Pno,Vg,bae,Bno,Ino,NP,qno,Nno,jno,Xg,vae,Dno,Gno,jP,Ono,Vno,Xno,bs,Fae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,zg,Tae,Kno,Zno,OP,eso,oso,rso,vs,Mae,tso,aso,VP,nso,sso,XP,lso,iso,dso,Fs,Eae,cso,mso,zP,fso,gso,WP,hso,uso,pso,Ts,Cae,_so,bso,QP,vso,Fso,HP,Tso,Mso,Eso,Ms,wae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Es,Aae,kso,Sso,YP,Rso,Pso,KP,Bso,Iso,qso,Cs,yae,Nso,jso,ZP,Dso,Gso,eB,Oso,Vso,Xso,Wg,Lae,zso,Wso,oB,Qso,Hso,Uso,Qg,xae,Jso,Yso,rB,Kso,Zso,elo,ws,$ae,olo,rlo,tB,tlo,alo,aB,nlo,slo,llo,As,kae,ilo,dlo,nB,clo,mlo,sB,flo,glo,hlo,ys,Sae,ulo,plo,lB,_lo,blo,iB,vlo,Flo,Tlo,Hg,Rae,Mlo,Elo,dB,Clo,wlo,Alo,Ug,Pae,ylo,Llo,cB,xlo,$lo,klo,Jg,Bae,Slo,Rlo,mB,Plo,Blo,Ilo,Ls,Iae,qlo,Nlo,fB,jlo,Dlo,gB,Glo,Olo,Vlo,Yg,qae,Xlo,zlo,hB,Wlo,Qlo,Hlo,Kg,Nae,Ulo,Jlo,uB,Ylo,Klo,Zlo,Zg,jae,eio,oio,pB,rio,tio,aio,xs,Dae,nio,sio,_B,lio,iio,bB,dio,cio,mio,eh,Gae,fio,gio,vB,hio,uio,pio,oh,Oae,_io,bio,FB,vio,Fio,Tio,$s,Vae,Mio,Eio,TB,Cio,wio,MB,Aio,yio,Lio,ks,Xae,xio,$io,EB,kio,Sio,CB,Rio,Pio,Bio,Ss,zae,Iio,qio,wB,Nio,jio,AB,Dio,Gio,Oio,Rs,Wae,Vio,Xio,yB,zio,Wio,LB,Qio,Hio,Uio,rh,Jio,th,By,Yio,Qae,Kio,Gqe,Mi,ah,Hae,Iy,Zio,Uae,edo,Oqe,Ao,qy,odo,Ny,rdo,xB,tdo,ado,ndo,jy,sdo,Jae,ldo,ido,ddo,He,Dy,cdo,Yae,mdo,fdo,ya,gdo,Kae,hdo,udo,Zae,pdo,_do,ene,bdo,vdo,Fdo,K,nh,one,Tdo,Mdo,$B,Edo,Cdo,wdo,sh,rne,Ado,ydo,kB,Ldo,xdo,$do,lh,tne,kdo,Sdo,SB,Rdo,Pdo,Bdo,ih,ane,Ido,qdo,RB,Ndo,jdo,Ddo,dh,nne,Gdo,Odo,PB,Vdo,Xdo,zdo,ch,sne,Wdo,Qdo,BB,Hdo,Udo,Jdo,mh,lne,Ydo,Kdo,IB,Zdo,eco,oco,fh,ine,rco,tco,qB,aco,nco,sco,gh,dne,lco,ico,NB,dco,cco,mco,hh,cne,fco,gco,jB,hco,uco,pco,uh,mne,_co,bco,DB,vco,Fco,Tco,ph,fne,Mco,Eco,GB,Cco,wco,Aco,_h,gne,yco,Lco,OB,xco,$co,kco,bh,hne,Sco,Rco,VB,Pco,Bco,Ico,vh,une,qco,Nco,XB,jco,Dco,Gco,Fh,pne,Oco,Vco,zB,Xco,zco,Wco,Th,_ne,Qco,Hco,WB,Uco,Jco,Yco,Mh,bne,Kco,Zco,QB,emo,omo,rmo,Eh,vne,tmo,amo,HB,nmo,smo,lmo,Ch,Fne,imo,dmo,UB,cmo,mmo,fmo,wh,Tne,gmo,hmo,JB,umo,pmo,_mo,Ah,Mne,bmo,vmo,YB,Fmo,Tmo,Mmo,yh,Ene,Emo,Cmo,KB,wmo,Amo,ymo,Lh,Cne,Lmo,xmo,ZB,$mo,kmo,Smo,xh,wne,Rmo,Pmo,eI,Bmo,Imo,qmo,$h,Ane,Nmo,jmo,oI,Dmo,Gmo,Omo,kh,yne,Vmo,Xmo,rI,zmo,Wmo,Qmo,Sh,Lne,Hmo,Umo,tI,Jmo,Ymo,Kmo,Rh,Zmo,Ph,efo,Bh,Gy,ofo,xne,rfo,Vqe,Ei,Ih,$ne,Oy,tfo,kne,afo,Xqe,yo,Vy,nfo,Xy,sfo,aI,lfo,ifo,dfo,zy,cfo,Sne,mfo,ffo,gfo,Ue,Wy,hfo,Rne,ufo,pfo,Ci,_fo,Pne,bfo,vfo,Bne,Ffo,Tfo,Mfo,he,qh,Ine,Efo,Cfo,nI,wfo,Afo,yfo,Nh,qne,Lfo,xfo,Nne,$fo,kfo,Sfo,jh,jne,Rfo,Pfo,sI,Bfo,Ifo,qfo,Dh,Dne,Nfo,jfo,lI,Dfo,Gfo,Ofo,Gh,Gne,Vfo,Xfo,iI,zfo,Wfo,Qfo,Oh,One,Hfo,Ufo,dI,Jfo,Yfo,Kfo,Vh,Vne,Zfo,ego,cI,ogo,rgo,tgo,Xh,Xne,ago,ngo,mI,sgo,lgo,igo,zh,zne,dgo,cgo,fI,mgo,fgo,ggo,Wh,Wne,hgo,ugo,gI,pgo,_go,bgo,Qh,Qne,vgo,Fgo,hI,Tgo,Mgo,Ego,Hh,Hne,Cgo,wgo,uI,Ago,ygo,Lgo,Uh,Une,xgo,$go,pI,kgo,Sgo,Rgo,Jh,Jne,Pgo,Bgo,_I,Igo,qgo,Ngo,Yh,Yne,jgo,Dgo,bI,Ggo,Ogo,Vgo,Kh,Kne,Xgo,zgo,vI,Wgo,Qgo,Hgo,Zh,Zne,Ugo,Jgo,FI,Ygo,Kgo,Zgo,eu,eho,ou,oho,ru,Qy,rho,ese,tho,zqe,wi,tu,ose,Hy,aho,rse,nho,Wqe,Lo,Uy,sho,Ai,lho,TI,iho,dho,MI,cho,mho,fho,Jy,gho,tse,hho,uho,pho,tt,Yy,_ho,ase,bho,vho,yi,Fho,nse,Tho,Mho,EI,Eho,Cho,who,au,Aho,Je,Ky,yho,sse,Lho,xho,La,$ho,lse,kho,Sho,ise,Rho,Pho,dse,Bho,Iho,qho,x,nu,cse,Nho,jho,CI,Dho,Gho,Oho,su,mse,Vho,Xho,wI,zho,Who,Qho,lu,fse,Hho,Uho,AI,Jho,Yho,Kho,iu,gse,Zho,euo,yI,ouo,ruo,tuo,du,hse,auo,nuo,LI,suo,luo,iuo,cu,use,duo,cuo,xI,muo,fuo,guo,mu,pse,huo,uuo,$I,puo,_uo,buo,fu,_se,vuo,Fuo,kI,Tuo,Muo,Euo,gu,bse,Cuo,wuo,SI,Auo,yuo,Luo,hu,vse,xuo,$uo,RI,kuo,Suo,Ruo,uu,Fse,Puo,Buo,PI,Iuo,quo,Nuo,pu,Tse,juo,Duo,BI,Guo,Ouo,Vuo,_u,Mse,Xuo,zuo,II,Wuo,Quo,Huo,bu,Ese,Uuo,Juo,qI,Yuo,Kuo,Zuo,vu,Cse,epo,opo,NI,rpo,tpo,apo,Fu,wse,npo,spo,jI,lpo,ipo,dpo,Tu,Ase,cpo,mpo,DI,fpo,gpo,hpo,Mu,yse,upo,ppo,GI,_po,bpo,vpo,Eu,Lse,Fpo,Tpo,OI,Mpo,Epo,Cpo,Cu,xse,wpo,Apo,VI,ypo,Lpo,xpo,wu,$se,$po,kpo,XI,Spo,Rpo,Ppo,Au,kse,Bpo,Ipo,zI,qpo,Npo,jpo,yu,Sse,Dpo,Gpo,WI,Opo,Vpo,Xpo,Lu,Rse,zpo,Wpo,QI,Qpo,Hpo,Upo,xu,Pse,Jpo,Ypo,HI,Kpo,Zpo,e_o,$u,Bse,o_o,r_o,UI,t_o,a_o,n_o,ku,Ise,s_o,l_o,JI,i_o,d_o,c_o,Su,qse,m_o,f_o,YI,g_o,h_o,u_o,Ru,Nse,p_o,__o,KI,b_o,v_o,F_o,Pu,jse,T_o,M_o,ZI,E_o,C_o,w_o,Bu,Dse,A_o,y_o,eq,L_o,x_o,$_o,Iu,Gse,k_o,S_o,oq,R_o,P_o,B_o,Ps,Ose,I_o,q_o,rq,N_o,j_o,tq,D_o,G_o,O_o,qu,Vse,V_o,X_o,aq,z_o,W_o,Q_o,Nu,Xse,H_o,U_o,nq,J_o,Y_o,K_o,ju,zse,Z_o,ebo,sq,obo,rbo,tbo,Du,Wse,abo,nbo,lq,sbo,lbo,ibo,Gu,Qse,dbo,cbo,iq,mbo,fbo,gbo,Ou,Hse,hbo,ubo,dq,pbo,_bo,bbo,Vu,Use,vbo,Fbo,cq,Tbo,Mbo,Ebo,Xu,Jse,Cbo,wbo,mq,Abo,ybo,Lbo,zu,Yse,xbo,$bo,fq,kbo,Sbo,Rbo,Wu,Kse,Pbo,Bbo,gq,Ibo,qbo,Nbo,Qu,Zse,jbo,Dbo,hq,Gbo,Obo,Vbo,Hu,ele,Xbo,zbo,uq,Wbo,Qbo,Hbo,Uu,ole,Ubo,Jbo,pq,Ybo,Kbo,Zbo,Ju,rle,e2o,o2o,_q,r2o,t2o,a2o,Yu,tle,n2o,s2o,bq,l2o,i2o,d2o,Ku,ale,c2o,m2o,vq,f2o,g2o,h2o,Zu,nle,u2o,p2o,Fq,_2o,b2o,v2o,ep,sle,F2o,T2o,Tq,M2o,E2o,C2o,op,lle,w2o,A2o,Mq,y2o,L2o,x2o,rp,ile,$2o,k2o,Eq,S2o,R2o,P2o,tp,dle,B2o,I2o,Cq,q2o,N2o,j2o,ap,cle,D2o,G2o,wq,O2o,V2o,X2o,np,mle,z2o,W2o,Aq,Q2o,H2o,U2o,sp,fle,J2o,Y2o,yq,K2o,Z2o,evo,lp,gle,ovo,rvo,Lq,tvo,avo,nvo,ip,hle,svo,lvo,xq,ivo,dvo,cvo,dp,ule,mvo,fvo,$q,gvo,hvo,uvo,cp,ple,pvo,_vo,kq,bvo,vvo,Fvo,mp,_le,Tvo,Mvo,Sq,Evo,Cvo,wvo,fp,ble,Avo,yvo,Rq,Lvo,xvo,$vo,gp,vle,kvo,Svo,Pq,Rvo,Pvo,Bvo,hp,Fle,Ivo,qvo,Bq,Nvo,jvo,Dvo,up,Tle,Gvo,Ovo,Iq,Vvo,Xvo,zvo,pp,Mle,Wvo,Qvo,qq,Hvo,Uvo,Jvo,_p,Ele,Yvo,Kvo,Nq,Zvo,eFo,oFo,bp,Cle,rFo,tFo,jq,aFo,nFo,sFo,vp,wle,lFo,iFo,Dq,dFo,cFo,mFo,Fp,Ale,fFo,gFo,Gq,hFo,uFo,pFo,Tp,yle,_Fo,bFo,Oq,vFo,FFo,TFo,Mp,Lle,MFo,EFo,Vq,CFo,wFo,AFo,Ep,xle,yFo,LFo,Xq,xFo,$Fo,kFo,Cp,$le,SFo,RFo,zq,PFo,BFo,IFo,wp,kle,qFo,NFo,Wq,jFo,DFo,GFo,Ap,Sle,OFo,VFo,Qq,XFo,zFo,WFo,yp,Rle,QFo,HFo,Hq,UFo,JFo,YFo,Lp,Ple,KFo,ZFo,Uq,e1o,o1o,r1o,xp,Ble,t1o,a1o,Jq,n1o,s1o,l1o,$p,Ile,i1o,d1o,Yq,c1o,m1o,f1o,kp,qle,g1o,h1o,Kq,u1o,p1o,_1o,Sp,Nle,b1o,v1o,Zq,F1o,T1o,M1o,Rp,jle,E1o,C1o,eN,w1o,A1o,y1o,Pp,Dle,L1o,x1o,oN,$1o,k1o,S1o,Bp,Gle,R1o,P1o,rN,B1o,I1o,q1o,Ip,Ole,N1o,j1o,tN,D1o,G1o,O1o,qp,Vle,V1o,X1o,aN,z1o,W1o,Q1o,Np,Xle,H1o,U1o,nN,J1o,Y1o,K1o,jp,zle,Z1o,eTo,sN,oTo,rTo,tTo,Dp,Wle,aTo,nTo,lN,sTo,lTo,iTo,Gp,Qle,dTo,cTo,iN,mTo,fTo,gTo,Op,Hle,hTo,uTo,dN,pTo,_To,bTo,Vp,Ule,vTo,FTo,cN,TTo,MTo,ETo,Xp,Jle,CTo,wTo,mN,ATo,yTo,LTo,zp,Yle,xTo,$To,fN,kTo,STo,RTo,Wp,Kle,PTo,BTo,gN,ITo,qTo,NTo,Qp,Zle,jTo,DTo,hN,GTo,OTo,VTo,Hp,eie,XTo,zTo,uN,WTo,QTo,HTo,Up,oie,UTo,JTo,pN,YTo,KTo,ZTo,Jp,rie,eMo,oMo,_N,rMo,tMo,aMo,Yp,nMo,tie,sMo,lMo,aie,iMo,dMo,Kp,Qqe,Li,Zp,nie,Zy,cMo,sie,mMo,Hqe,xo,eL,fMo,xi,gMo,bN,hMo,uMo,vN,pMo,_Mo,bMo,oL,vMo,lie,FMo,TMo,MMo,at,rL,EMo,iie,CMo,wMo,$i,AMo,die,yMo,LMo,FN,xMo,$Mo,kMo,e_,SMo,Ye,tL,RMo,cie,PMo,BMo,xa,IMo,mie,qMo,NMo,fie,jMo,DMo,gie,GMo,OMo,VMo,G,o_,hie,XMo,zMo,TN,WMo,QMo,HMo,r_,uie,UMo,JMo,MN,YMo,KMo,ZMo,t_,pie,e4o,o4o,EN,r4o,t4o,a4o,a_,_ie,n4o,s4o,CN,l4o,i4o,d4o,n_,bie,c4o,m4o,wN,f4o,g4o,h4o,s_,vie,u4o,p4o,AN,_4o,b4o,v4o,l_,Fie,F4o,T4o,yN,M4o,E4o,C4o,i_,Tie,w4o,A4o,LN,y4o,L4o,x4o,d_,Mie,$4o,k4o,xN,S4o,R4o,P4o,c_,Eie,B4o,I4o,$N,q4o,N4o,j4o,m_,Cie,D4o,G4o,kN,O4o,V4o,X4o,f_,wie,z4o,W4o,SN,Q4o,H4o,U4o,g_,Aie,J4o,Y4o,RN,K4o,Z4o,eEo,h_,yie,oEo,rEo,PN,tEo,aEo,nEo,u_,Lie,sEo,lEo,BN,iEo,dEo,cEo,p_,xie,mEo,fEo,IN,gEo,hEo,uEo,__,$ie,pEo,_Eo,qN,bEo,vEo,FEo,b_,kie,TEo,MEo,NN,EEo,CEo,wEo,v_,Sie,AEo,yEo,jN,LEo,xEo,$Eo,F_,Rie,kEo,SEo,DN,REo,PEo,BEo,T_,Pie,IEo,qEo,GN,NEo,jEo,DEo,M_,Bie,GEo,OEo,ON,VEo,XEo,zEo,E_,Iie,WEo,QEo,VN,HEo,UEo,JEo,C_,qie,YEo,KEo,XN,ZEo,eCo,oCo,w_,Nie,rCo,tCo,zN,aCo,nCo,sCo,A_,jie,lCo,iCo,WN,dCo,cCo,mCo,y_,Die,fCo,gCo,QN,hCo,uCo,pCo,L_,Gie,_Co,bCo,HN,vCo,FCo,TCo,x_,Oie,MCo,ECo,UN,CCo,wCo,ACo,$_,Vie,yCo,LCo,JN,xCo,$Co,kCo,k_,Xie,SCo,RCo,YN,PCo,BCo,ICo,S_,zie,qCo,NCo,KN,jCo,DCo,GCo,R_,Wie,OCo,VCo,ZN,XCo,zCo,WCo,P_,Qie,QCo,HCo,ej,UCo,JCo,YCo,B_,Hie,KCo,ZCo,oj,e5o,o5o,r5o,I_,Uie,t5o,a5o,rj,n5o,s5o,l5o,q_,Jie,i5o,d5o,tj,c5o,m5o,f5o,N_,Yie,g5o,h5o,aj,u5o,p5o,_5o,j_,Kie,b5o,v5o,nj,F5o,T5o,M5o,D_,Zie,E5o,C5o,sj,w5o,A5o,y5o,G_,ede,L5o,x5o,lj,$5o,k5o,S5o,O_,ode,R5o,P5o,ij,B5o,I5o,q5o,V_,N5o,rde,j5o,D5o,tde,G5o,O5o,X_,Uqe,ki,z_,ade,aL,V5o,nde,X5o,Jqe,$o,nL,z5o,Si,W5o,dj,Q5o,H5o,cj,U5o,J5o,Y5o,sL,K5o,sde,Z5o,e3o,o3o,nt,lL,r3o,lde,t3o,a3o,Ri,n3o,ide,s3o,l3o,mj,i3o,d3o,c3o,W_,m3o,Ke,iL,f3o,dde,g3o,h3o,$a,u3o,cde,p3o,_3o,mde,b3o,v3o,fde,F3o,T3o,M3o,z,Q_,gde,E3o,C3o,fj,w3o,A3o,y3o,H_,hde,L3o,x3o,gj,$3o,k3o,S3o,U_,ude,R3o,P3o,hj,B3o,I3o,q3o,J_,pde,N3o,j3o,uj,D3o,G3o,O3o,Y_,_de,V3o,X3o,pj,z3o,W3o,Q3o,K_,bde,H3o,U3o,_j,J3o,Y3o,K3o,Z_,vde,Z3o,ewo,bj,owo,rwo,two,eb,Fde,awo,nwo,vj,swo,lwo,iwo,ob,Tde,dwo,cwo,Fj,mwo,fwo,gwo,rb,Mde,hwo,uwo,Tj,pwo,_wo,bwo,tb,Ede,vwo,Fwo,Mj,Two,Mwo,Ewo,ab,Cde,Cwo,wwo,Ej,Awo,ywo,Lwo,nb,wde,xwo,$wo,Cj,kwo,Swo,Rwo,sb,Ade,Pwo,Bwo,wj,Iwo,qwo,Nwo,lb,yde,jwo,Dwo,Aj,Gwo,Owo,Vwo,ib,Lde,Xwo,zwo,yj,Wwo,Qwo,Hwo,db,xde,Uwo,Jwo,Lj,Ywo,Kwo,Zwo,cb,$de,e0o,o0o,xj,r0o,t0o,a0o,mb,kde,n0o,s0o,$j,l0o,i0o,d0o,fb,Sde,c0o,m0o,kj,f0o,g0o,h0o,gb,Rde,u0o,p0o,Sj,_0o,b0o,v0o,hb,Pde,F0o,T0o,Rj,M0o,E0o,C0o,ub,Bde,w0o,A0o,Pj,y0o,L0o,x0o,pb,Ide,$0o,k0o,Bj,S0o,R0o,P0o,_b,qde,B0o,I0o,Ij,q0o,N0o,j0o,bb,Nde,D0o,G0o,qj,O0o,V0o,X0o,vb,jde,z0o,W0o,Nj,Q0o,H0o,U0o,Fb,Dde,J0o,Y0o,jj,K0o,Z0o,eAo,Tb,Gde,oAo,rAo,Dj,tAo,aAo,nAo,Mb,Ode,sAo,lAo,Gj,iAo,dAo,cAo,Eb,Vde,mAo,fAo,Oj,gAo,hAo,uAo,Cb,Xde,pAo,_Ao,Vj,bAo,vAo,FAo,wb,zde,TAo,MAo,Xj,EAo,CAo,wAo,Ab,Wde,AAo,yAo,zj,LAo,xAo,$Ao,yb,Qde,kAo,SAo,Wj,RAo,PAo,BAo,Lb,Hde,IAo,qAo,Qj,NAo,jAo,DAo,xb,GAo,Ude,OAo,VAo,Jde,XAo,zAo,$b,Yqe,Pi,kb,Yde,dL,WAo,Kde,QAo,Kqe,ko,cL,HAo,Bi,UAo,Hj,JAo,YAo,Uj,KAo,ZAo,e6o,mL,o6o,Zde,r6o,t6o,a6o,st,fL,n6o,ece,s6o,l6o,Ii,i6o,oce,d6o,c6o,Jj,m6o,f6o,g6o,Sb,h6o,Ze,gL,u6o,rce,p6o,_6o,ka,b6o,tce,v6o,F6o,ace,T6o,M6o,nce,E6o,C6o,w6o,W,Rb,sce,A6o,y6o,Yj,L6o,x6o,$6o,Pb,lce,k6o,S6o,Kj,R6o,P6o,B6o,Bb,ice,I6o,q6o,Zj,N6o,j6o,D6o,Ib,dce,G6o,O6o,eD,V6o,X6o,z6o,qb,cce,W6o,Q6o,oD,H6o,U6o,J6o,Nb,mce,Y6o,K6o,rD,Z6o,eyo,oyo,jb,fce,ryo,tyo,tD,ayo,nyo,syo,Db,gce,lyo,iyo,aD,dyo,cyo,myo,Gb,hce,fyo,gyo,nD,hyo,uyo,pyo,Ob,uce,_yo,byo,sD,vyo,Fyo,Tyo,Vb,pce,Myo,Eyo,lD,Cyo,wyo,Ayo,Xb,_ce,yyo,Lyo,iD,xyo,$yo,kyo,zb,bce,Syo,Ryo,dD,Pyo,Byo,Iyo,Wb,vce,qyo,Nyo,cD,jyo,Dyo,Gyo,Qb,Fce,Oyo,Vyo,mD,Xyo,zyo,Wyo,Hb,Tce,Qyo,Hyo,fD,Uyo,Jyo,Yyo,Ub,Mce,Kyo,Zyo,gD,eLo,oLo,rLo,Jb,Ece,tLo,aLo,hD,nLo,sLo,lLo,Yb,Cce,iLo,dLo,uD,cLo,mLo,fLo,Kb,wce,gLo,hLo,pD,uLo,pLo,_Lo,Zb,Ace,bLo,vLo,_D,FLo,TLo,MLo,e2,yce,ELo,CLo,bD,wLo,ALo,yLo,o2,Lce,LLo,xLo,vD,$Lo,kLo,SLo,r2,xce,RLo,PLo,FD,BLo,ILo,qLo,t2,$ce,NLo,jLo,TD,DLo,GLo,OLo,a2,kce,VLo,XLo,MD,zLo,WLo,QLo,n2,Sce,HLo,ULo,ED,JLo,YLo,KLo,s2,Rce,ZLo,e8o,CD,o8o,r8o,t8o,l2,Pce,a8o,n8o,wD,s8o,l8o,i8o,i2,Bce,d8o,c8o,AD,m8o,f8o,g8o,d2,Ice,h8o,u8o,qce,p8o,_8o,b8o,c2,Nce,v8o,F8o,yD,T8o,M8o,E8o,m2,jce,C8o,w8o,LD,A8o,y8o,L8o,f2,Dce,x8o,$8o,xD,k8o,S8o,R8o,g2,Gce,P8o,B8o,$D,I8o,q8o,N8o,h2,j8o,Oce,D8o,G8o,Vce,O8o,V8o,u2,Zqe,qi,p2,Xce,hL,X8o,zce,z8o,eNe,So,uL,W8o,Ni,Q8o,kD,H8o,U8o,SD,J8o,Y8o,K8o,pL,Z8o,Wce,e7o,o7o,r7o,lt,_L,t7o,Qce,a7o,n7o,ji,s7o,Hce,l7o,i7o,RD,d7o,c7o,m7o,_2,f7o,eo,bL,g7o,Uce,h7o,u7o,Sa,p7o,Jce,_7o,b7o,Yce,v7o,F7o,Kce,T7o,M7o,E7o,pe,b2,Zce,C7o,w7o,PD,A7o,y7o,L7o,v2,eme,x7o,$7o,BD,k7o,S7o,R7o,F2,ome,P7o,B7o,ID,I7o,q7o,N7o,T2,rme,j7o,D7o,qD,G7o,O7o,V7o,M2,tme,X7o,z7o,ND,W7o,Q7o,H7o,E2,ame,U7o,J7o,jD,Y7o,K7o,Z7o,C2,nme,e9o,o9o,DD,r9o,t9o,a9o,w2,sme,n9o,s9o,GD,l9o,i9o,d9o,A2,lme,c9o,m9o,OD,f9o,g9o,h9o,y2,ime,u9o,p9o,VD,_9o,b9o,v9o,L2,dme,F9o,T9o,XD,M9o,E9o,C9o,x2,cme,w9o,A9o,zD,y9o,L9o,x9o,$2,mme,$9o,k9o,WD,S9o,R9o,P9o,k2,fme,B9o,I9o,QD,q9o,N9o,j9o,S2,gme,D9o,G9o,HD,O9o,V9o,X9o,R2,hme,z9o,W9o,UD,Q9o,H9o,U9o,P2,J9o,ume,Y9o,K9o,pme,Z9o,exo,B2,oNe,Di,I2,_me,vL,oxo,bme,rxo,rNe,Ro,FL,txo,Gi,axo,JD,nxo,sxo,YD,lxo,ixo,dxo,TL,cxo,vme,mxo,fxo,gxo,it,ML,hxo,Fme,uxo,pxo,Oi,_xo,Tme,bxo,vxo,KD,Fxo,Txo,Mxo,q2,Exo,oo,EL,Cxo,Mme,wxo,Axo,Ra,yxo,Eme,Lxo,xxo,Cme,$xo,kxo,wme,Sxo,Rxo,Pxo,q,N2,Ame,Bxo,Ixo,ZD,qxo,Nxo,jxo,j2,yme,Dxo,Gxo,eG,Oxo,Vxo,Xxo,D2,Lme,zxo,Wxo,oG,Qxo,Hxo,Uxo,G2,xme,Jxo,Yxo,rG,Kxo,Zxo,e$o,O2,$me,o$o,r$o,tG,t$o,a$o,n$o,V2,kme,s$o,l$o,aG,i$o,d$o,c$o,X2,Sme,m$o,f$o,nG,g$o,h$o,u$o,z2,Rme,p$o,_$o,sG,b$o,v$o,F$o,W2,Pme,T$o,M$o,lG,E$o,C$o,w$o,Q2,Bme,A$o,y$o,iG,L$o,x$o,$$o,H2,Ime,k$o,S$o,dG,R$o,P$o,B$o,U2,qme,I$o,q$o,cG,N$o,j$o,D$o,J2,Nme,G$o,O$o,mG,V$o,X$o,z$o,Y2,jme,W$o,Q$o,fG,H$o,U$o,J$o,K2,Dme,Y$o,K$o,gG,Z$o,eko,oko,Z2,Gme,rko,tko,hG,ako,nko,sko,ev,Ome,lko,iko,uG,dko,cko,mko,ov,Vme,fko,gko,pG,hko,uko,pko,rv,Xme,_ko,bko,_G,vko,Fko,Tko,tv,zme,Mko,Eko,bG,Cko,wko,Ako,av,Wme,yko,Lko,vG,xko,$ko,kko,nv,Qme,Sko,Rko,FG,Pko,Bko,Iko,sv,Hme,qko,Nko,TG,jko,Dko,Gko,lv,Ume,Oko,Vko,MG,Xko,zko,Wko,iv,Jme,Qko,Hko,EG,Uko,Jko,Yko,dv,Yme,Kko,Zko,CG,eSo,oSo,rSo,cv,Kme,tSo,aSo,wG,nSo,sSo,lSo,mv,Zme,iSo,dSo,AG,cSo,mSo,fSo,fv,efe,gSo,hSo,yG,uSo,pSo,_So,gv,ofe,bSo,vSo,LG,FSo,TSo,MSo,hv,rfe,ESo,CSo,xG,wSo,ASo,ySo,uv,tfe,LSo,xSo,$G,$So,kSo,SSo,pv,afe,RSo,PSo,kG,BSo,ISo,qSo,_v,nfe,NSo,jSo,SG,DSo,GSo,OSo,bv,sfe,VSo,XSo,RG,zSo,WSo,QSo,vv,lfe,HSo,USo,PG,JSo,YSo,KSo,Fv,ife,ZSo,eRo,BG,oRo,rRo,tRo,Tv,dfe,aRo,nRo,IG,sRo,lRo,iRo,Mv,cfe,dRo,cRo,qG,mRo,fRo,gRo,Ev,mfe,hRo,uRo,NG,pRo,_Ro,bRo,Cv,ffe,vRo,FRo,jG,TRo,MRo,ERo,wv,gfe,CRo,wRo,DG,ARo,yRo,LRo,Av,hfe,xRo,$Ro,GG,kRo,SRo,RRo,yv,ufe,PRo,BRo,OG,IRo,qRo,NRo,Lv,pfe,jRo,DRo,VG,GRo,ORo,VRo,xv,_fe,XRo,zRo,XG,WRo,QRo,HRo,$v,bfe,URo,JRo,zG,YRo,KRo,ZRo,kv,ePo,vfe,oPo,rPo,Ffe,tPo,aPo,Sv,tNe,Vi,Rv,Tfe,CL,nPo,Mfe,sPo,aNe,Po,wL,lPo,Xi,iPo,WG,dPo,cPo,QG,mPo,fPo,gPo,AL,hPo,Efe,uPo,pPo,_Po,dt,yL,bPo,Cfe,vPo,FPo,zi,TPo,wfe,MPo,EPo,HG,CPo,wPo,APo,Pv,yPo,ro,LL,LPo,Afe,xPo,$Po,Pa,kPo,yfe,SPo,RPo,Lfe,PPo,BPo,xfe,IPo,qPo,NPo,Y,Bv,$fe,jPo,DPo,UG,GPo,OPo,VPo,Iv,kfe,XPo,zPo,JG,WPo,QPo,HPo,qv,Sfe,UPo,JPo,YG,YPo,KPo,ZPo,Nv,Rfe,eBo,oBo,KG,rBo,tBo,aBo,jv,Pfe,nBo,sBo,ZG,lBo,iBo,dBo,Dv,Bfe,cBo,mBo,eO,fBo,gBo,hBo,Gv,Ife,uBo,pBo,oO,_Bo,bBo,vBo,Ov,qfe,FBo,TBo,rO,MBo,EBo,CBo,Vv,Nfe,wBo,ABo,tO,yBo,LBo,xBo,Xv,jfe,$Bo,kBo,aO,SBo,RBo,PBo,zv,Dfe,BBo,IBo,nO,qBo,NBo,jBo,Wv,Gfe,DBo,GBo,sO,OBo,VBo,XBo,Qv,Ofe,zBo,WBo,lO,QBo,HBo,UBo,Hv,Vfe,JBo,YBo,iO,KBo,ZBo,eIo,Uv,Xfe,oIo,rIo,dO,tIo,aIo,nIo,Jv,zfe,sIo,lIo,cO,iIo,dIo,cIo,Yv,Wfe,mIo,fIo,mO,gIo,hIo,uIo,Kv,Qfe,pIo,_Io,fO,bIo,vIo,FIo,Zv,Hfe,TIo,MIo,gO,EIo,CIo,wIo,eF,Ufe,AIo,yIo,hO,LIo,xIo,$Io,oF,Jfe,kIo,SIo,uO,RIo,PIo,BIo,rF,Yfe,IIo,qIo,pO,NIo,jIo,DIo,tF,Kfe,GIo,OIo,_O,VIo,XIo,zIo,aF,Zfe,WIo,QIo,bO,HIo,UIo,JIo,nF,ege,YIo,KIo,vO,ZIo,eqo,oqo,sF,oge,rqo,tqo,FO,aqo,nqo,sqo,lF,rge,lqo,iqo,TO,dqo,cqo,mqo,iF,tge,fqo,gqo,MO,hqo,uqo,pqo,dF,age,_qo,bqo,EO,vqo,Fqo,Tqo,cF,Mqo,nge,Eqo,Cqo,sge,wqo,Aqo,mF,nNe,Wi,fF,lge,xL,yqo,ige,Lqo,sNe,Bo,$L,xqo,Qi,$qo,CO,kqo,Sqo,wO,Rqo,Pqo,Bqo,kL,Iqo,dge,qqo,Nqo,jqo,ct,SL,Dqo,cge,Gqo,Oqo,Hi,Vqo,mge,Xqo,zqo,AO,Wqo,Qqo,Hqo,gF,Uqo,to,RL,Jqo,fge,Yqo,Kqo,Ba,Zqo,gge,eNo,oNo,hge,rNo,tNo,uge,aNo,nNo,sNo,Yr,hF,pge,lNo,iNo,yO,dNo,cNo,mNo,uF,_ge,fNo,gNo,LO,hNo,uNo,pNo,pF,bge,_No,bNo,xO,vNo,FNo,TNo,_F,vge,MNo,ENo,$O,CNo,wNo,ANo,bF,Fge,yNo,LNo,kO,xNo,$No,kNo,vF,SNo,Tge,RNo,PNo,Mge,BNo,INo,FF,lNe,Ui,TF,Ege,PL,qNo,Cge,NNo,iNe,Io,BL,jNo,Ji,DNo,SO,GNo,ONo,RO,VNo,XNo,zNo,IL,WNo,wge,QNo,HNo,UNo,mt,qL,JNo,Age,YNo,KNo,Yi,ZNo,yge,ejo,ojo,PO,rjo,tjo,ajo,MF,njo,ao,NL,sjo,Lge,ljo,ijo,Ia,djo,xge,cjo,mjo,$ge,fjo,gjo,kge,hjo,ujo,pjo,H,EF,Sge,_jo,bjo,BO,vjo,Fjo,Tjo,CF,Rge,Mjo,Ejo,IO,Cjo,wjo,Ajo,wF,Pge,yjo,Ljo,qO,xjo,$jo,kjo,AF,Bge,Sjo,Rjo,NO,Pjo,Bjo,Ijo,yF,Ige,qjo,Njo,jO,jjo,Djo,Gjo,LF,qge,Ojo,Vjo,DO,Xjo,zjo,Wjo,xF,Nge,Qjo,Hjo,GO,Ujo,Jjo,Yjo,$F,jge,Kjo,Zjo,OO,eDo,oDo,rDo,kF,Dge,tDo,aDo,VO,nDo,sDo,lDo,SF,Gge,iDo,dDo,XO,cDo,mDo,fDo,RF,Oge,gDo,hDo,zO,uDo,pDo,_Do,PF,Vge,bDo,vDo,WO,FDo,TDo,MDo,BF,Xge,EDo,CDo,QO,wDo,ADo,yDo,IF,zge,LDo,xDo,HO,$Do,kDo,SDo,qF,Wge,RDo,PDo,UO,BDo,IDo,qDo,NF,Qge,NDo,jDo,JO,DDo,GDo,ODo,jF,Hge,VDo,XDo,YO,zDo,WDo,QDo,DF,Uge,HDo,UDo,KO,JDo,YDo,KDo,GF,Jge,ZDo,eGo,ZO,oGo,rGo,tGo,OF,Yge,aGo,nGo,eV,sGo,lGo,iGo,VF,Kge,dGo,cGo,oV,mGo,fGo,gGo,XF,Zge,hGo,uGo,rV,pGo,_Go,bGo,zF,ehe,vGo,FGo,tV,TGo,MGo,EGo,WF,ohe,CGo,wGo,aV,AGo,yGo,LGo,QF,rhe,xGo,$Go,nV,kGo,SGo,RGo,HF,the,PGo,BGo,sV,IGo,qGo,NGo,UF,ahe,jGo,DGo,lV,GGo,OGo,VGo,JF,nhe,XGo,zGo,iV,WGo,QGo,HGo,YF,she,UGo,JGo,dV,YGo,KGo,ZGo,KF,lhe,eOo,oOo,cV,rOo,tOo,aOo,ZF,ihe,nOo,sOo,mV,lOo,iOo,dOo,e1,dhe,cOo,mOo,fV,fOo,gOo,hOo,o1,che,uOo,pOo,gV,_Oo,bOo,vOo,r1,mhe,FOo,TOo,hV,MOo,EOo,COo,t1,wOo,fhe,AOo,yOo,ghe,LOo,xOo,a1,dNe,Ki,n1,hhe,jL,$Oo,uhe,kOo,cNe,qo,DL,SOo,Zi,ROo,uV,POo,BOo,pV,IOo,qOo,NOo,GL,jOo,phe,DOo,GOo,OOo,ft,OL,VOo,_he,XOo,zOo,ed,WOo,bhe,QOo,HOo,_V,UOo,JOo,YOo,s1,KOo,no,VL,ZOo,vhe,eVo,oVo,qa,rVo,Fhe,tVo,aVo,The,nVo,sVo,Mhe,lVo,iVo,dVo,V,l1,Ehe,cVo,mVo,bV,fVo,gVo,hVo,i1,Che,uVo,pVo,vV,_Vo,bVo,vVo,d1,whe,FVo,TVo,FV,MVo,EVo,CVo,c1,Ahe,wVo,AVo,TV,yVo,LVo,xVo,m1,yhe,$Vo,kVo,MV,SVo,RVo,PVo,f1,Lhe,BVo,IVo,EV,qVo,NVo,jVo,g1,xhe,DVo,GVo,CV,OVo,VVo,XVo,h1,$he,zVo,WVo,wV,QVo,HVo,UVo,u1,khe,JVo,YVo,AV,KVo,ZVo,eXo,p1,She,oXo,rXo,yV,tXo,aXo,nXo,_1,Rhe,sXo,lXo,LV,iXo,dXo,cXo,b1,Phe,mXo,fXo,xV,gXo,hXo,uXo,v1,Bhe,pXo,_Xo,$V,bXo,vXo,FXo,F1,Ihe,TXo,MXo,kV,EXo,CXo,wXo,T1,qhe,AXo,yXo,SV,LXo,xXo,$Xo,M1,Nhe,kXo,SXo,RV,RXo,PXo,BXo,E1,jhe,IXo,qXo,PV,NXo,jXo,DXo,C1,Dhe,GXo,OXo,BV,VXo,XXo,zXo,w1,Ghe,WXo,QXo,IV,HXo,UXo,JXo,A1,Ohe,YXo,KXo,qV,ZXo,ezo,ozo,y1,Vhe,rzo,tzo,NV,azo,nzo,szo,L1,Xhe,lzo,izo,jV,dzo,czo,mzo,x1,zhe,fzo,gzo,DV,hzo,uzo,pzo,$1,Whe,_zo,bzo,GV,vzo,Fzo,Tzo,k1,Qhe,Mzo,Ezo,OV,Czo,wzo,Azo,S1,Hhe,yzo,Lzo,VV,xzo,$zo,kzo,R1,Uhe,Szo,Rzo,XV,Pzo,Bzo,Izo,P1,Jhe,qzo,Nzo,zV,jzo,Dzo,Gzo,B1,Yhe,Ozo,Vzo,WV,Xzo,zzo,Wzo,I1,Khe,Qzo,Hzo,QV,Uzo,Jzo,Yzo,q1,Zhe,Kzo,Zzo,HV,eWo,oWo,rWo,N1,eue,tWo,aWo,UV,nWo,sWo,lWo,j1,oue,iWo,dWo,JV,cWo,mWo,fWo,D1,rue,gWo,hWo,YV,uWo,pWo,_Wo,G1,tue,bWo,vWo,KV,FWo,TWo,MWo,O1,aue,EWo,CWo,ZV,wWo,AWo,yWo,V1,nue,LWo,xWo,eX,$Wo,kWo,SWo,X1,sue,RWo,PWo,oX,BWo,IWo,qWo,z1,lue,NWo,jWo,rX,DWo,GWo,OWo,W1,iue,VWo,XWo,tX,zWo,WWo,QWo,Q1,HWo,due,UWo,JWo,cue,YWo,KWo,H1,mNe,od,U1,mue,XL,ZWo,fue,eQo,fNe,No,zL,oQo,rd,rQo,aX,tQo,aQo,nX,nQo,sQo,lQo,WL,iQo,gue,dQo,cQo,mQo,gt,QL,fQo,hue,gQo,hQo,td,uQo,uue,pQo,_Qo,sX,bQo,vQo,FQo,J1,TQo,so,HL,MQo,pue,EQo,CQo,Na,wQo,_ue,AQo,yQo,bue,LQo,xQo,vue,$Qo,kQo,SQo,Fue,Y1,Tue,RQo,PQo,lX,BQo,IQo,qQo,K1,NQo,Mue,jQo,DQo,Eue,GQo,OQo,Z1,gNe,ad,eT,Cue,UL,VQo,wue,XQo,hNe,jo,JL,zQo,nd,WQo,iX,QQo,HQo,dX,UQo,JQo,YQo,YL,KQo,Aue,ZQo,eHo,oHo,ht,KL,rHo,yue,tHo,aHo,sd,nHo,Lue,sHo,lHo,cX,iHo,dHo,cHo,oT,mHo,lo,ZL,fHo,xue,gHo,hHo,ja,uHo,$ue,pHo,_Ho,kue,bHo,vHo,Sue,FHo,THo,MHo,Fe,rT,Rue,EHo,CHo,mX,wHo,AHo,yHo,tT,Pue,LHo,xHo,fX,$Ho,kHo,SHo,aT,Bue,RHo,PHo,gX,BHo,IHo,qHo,nT,Iue,NHo,jHo,hX,DHo,GHo,OHo,Bs,que,VHo,XHo,uX,zHo,WHo,pX,QHo,HHo,UHo,sT,Nue,JHo,YHo,_X,KHo,ZHo,eUo,ut,jue,oUo,rUo,bX,tUo,aUo,vX,nUo,sUo,FX,lUo,iUo,dUo,lT,Due,cUo,mUo,TX,fUo,gUo,hUo,iT,Gue,uUo,pUo,MX,_Uo,bUo,vUo,dT,Oue,FUo,TUo,EX,MUo,EUo,CUo,cT,Vue,wUo,AUo,CX,yUo,LUo,xUo,mT,Xue,$Uo,kUo,wX,SUo,RUo,PUo,fT,zue,BUo,IUo,AX,qUo,NUo,jUo,gT,Wue,DUo,GUo,yX,OUo,VUo,XUo,hT,zUo,Que,WUo,QUo,Hue,HUo,UUo,uT,uNe,ld,pT,Uue,e8,JUo,Jue,YUo,pNe,Do,o8,KUo,id,ZUo,LX,eJo,oJo,xX,rJo,tJo,aJo,r8,nJo,Yue,sJo,lJo,iJo,pt,t8,dJo,Kue,cJo,mJo,dd,fJo,Zue,gJo,hJo,$X,uJo,pJo,_Jo,_T,bJo,io,a8,vJo,epe,FJo,TJo,Da,MJo,ope,EJo,CJo,rpe,wJo,AJo,tpe,yJo,LJo,xJo,ape,bT,npe,$Jo,kJo,kX,SJo,RJo,PJo,vT,BJo,spe,IJo,qJo,lpe,NJo,jJo,FT,_Ne,cd,TT,ipe,n8,DJo,dpe,GJo,bNe,Go,s8,OJo,md,VJo,SX,XJo,zJo,RX,WJo,QJo,HJo,l8,UJo,cpe,JJo,YJo,KJo,_t,i8,ZJo,mpe,eYo,oYo,fd,rYo,fpe,tYo,aYo,PX,nYo,sYo,lYo,MT,iYo,co,d8,dYo,gpe,cYo,mYo,Ga,fYo,hpe,gYo,hYo,upe,uYo,pYo,ppe,_Yo,bYo,vYo,ke,ET,_pe,FYo,TYo,BX,MYo,EYo,CYo,CT,bpe,wYo,AYo,IX,yYo,LYo,xYo,wT,vpe,$Yo,kYo,qX,SYo,RYo,PYo,AT,Fpe,BYo,IYo,NX,qYo,NYo,jYo,yT,Tpe,DYo,GYo,jX,OYo,VYo,XYo,LT,Mpe,zYo,WYo,DX,QYo,HYo,UYo,xT,Epe,JYo,YYo,GX,KYo,ZYo,eKo,$T,Cpe,oKo,rKo,OX,tKo,aKo,nKo,kT,wpe,sKo,lKo,VX,iKo,dKo,cKo,ST,mKo,Ape,fKo,gKo,ype,hKo,uKo,RT,vNe,gd,PT,Lpe,c8,pKo,xpe,_Ko,FNe,Oo,m8,bKo,hd,vKo,XX,FKo,TKo,zX,MKo,EKo,CKo,f8,wKo,$pe,AKo,yKo,LKo,bt,g8,xKo,kpe,$Ko,kKo,ud,SKo,Spe,RKo,PKo,WX,BKo,IKo,qKo,BT,NKo,mo,h8,jKo,Rpe,DKo,GKo,Oa,OKo,Ppe,VKo,XKo,Bpe,zKo,WKo,Ipe,QKo,HKo,UKo,Kr,IT,qpe,JKo,YKo,QX,KKo,ZKo,eZo,qT,Npe,oZo,rZo,HX,tZo,aZo,nZo,NT,jpe,sZo,lZo,UX,iZo,dZo,cZo,jT,Dpe,mZo,fZo,JX,gZo,hZo,uZo,DT,Gpe,pZo,_Zo,YX,bZo,vZo,FZo,GT,TZo,Ope,MZo,EZo,Vpe,CZo,wZo,OT,TNe,pd,VT,Xpe,u8,AZo,zpe,yZo,MNe,Vo,p8,LZo,_d,xZo,KX,$Zo,kZo,ZX,SZo,RZo,PZo,_8,BZo,Wpe,IZo,qZo,NZo,vt,b8,jZo,Qpe,DZo,GZo,bd,OZo,Hpe,VZo,XZo,ez,zZo,WZo,QZo,XT,HZo,fo,v8,UZo,Upe,JZo,YZo,Va,KZo,Jpe,ZZo,eer,Ype,oer,rer,Kpe,ter,aer,ner,Se,zT,Zpe,ser,ler,oz,ier,der,cer,WT,e_e,mer,fer,rz,ger,her,uer,QT,o_e,per,_er,tz,ber,ver,Fer,HT,r_e,Ter,Mer,az,Eer,Cer,wer,UT,t_e,Aer,yer,nz,Ler,xer,$er,JT,a_e,ker,Ser,sz,Rer,Per,Ber,YT,n_e,Ier,qer,lz,Ner,jer,Der,KT,s_e,Ger,Oer,iz,Ver,Xer,zer,ZT,l_e,Wer,Qer,dz,Her,Uer,Jer,eM,Yer,i_e,Ker,Zer,d_e,eor,oor,oM,ENe,vd,rM,c_e,F8,ror,m_e,tor,CNe,Xo,T8,aor,Fd,nor,cz,sor,lor,mz,ior,dor,cor,M8,mor,f_e,gor,hor,uor,Ft,E8,por,g_e,_or,bor,Td,vor,h_e,For,Tor,fz,Mor,Eor,Cor,tM,wor,go,C8,Aor,u_e,yor,Lor,Xa,xor,p_e,$or,kor,__e,Sor,Ror,b_e,Por,Bor,Ior,w8,aM,v_e,qor,Nor,gz,jor,Dor,Gor,nM,F_e,Oor,Vor,hz,Xor,zor,Wor,sM,Qor,T_e,Hor,Uor,M_e,Jor,Yor,lM,wNe,Md,iM,E_e,A8,Kor,C_e,Zor,ANe,zo,y8,err,Ed,orr,uz,rrr,trr,pz,arr,nrr,srr,L8,lrr,w_e,irr,drr,crr,Tt,x8,mrr,A_e,frr,grr,Cd,hrr,y_e,urr,prr,_z,_rr,brr,vrr,dM,Frr,ho,$8,Trr,L_e,Mrr,Err,za,Crr,x_e,wrr,Arr,$_e,yrr,Lrr,k_e,xrr,$rr,krr,Zr,cM,S_e,Srr,Rrr,bz,Prr,Brr,Irr,mM,R_e,qrr,Nrr,vz,jrr,Drr,Grr,fM,P_e,Orr,Vrr,Fz,Xrr,zrr,Wrr,gM,B_e,Qrr,Hrr,Tz,Urr,Jrr,Yrr,hM,I_e,Krr,Zrr,Mz,etr,otr,rtr,uM,ttr,q_e,atr,ntr,N_e,str,ltr,pM,yNe,wd,_M,j_e,k8,itr,D_e,dtr,LNe,Wo,S8,ctr,Ad,mtr,Ez,ftr,gtr,Cz,htr,utr,ptr,R8,_tr,G_e,btr,vtr,Ftr,Mt,P8,Ttr,O_e,Mtr,Etr,yd,Ctr,V_e,wtr,Atr,wz,ytr,Ltr,xtr,bM,$tr,uo,B8,ktr,X_e,Str,Rtr,Wa,Ptr,z_e,Btr,Itr,W_e,qtr,Ntr,Q_e,jtr,Dtr,Gtr,Ld,vM,H_e,Otr,Vtr,Az,Xtr,ztr,Wtr,FM,U_e,Qtr,Htr,yz,Utr,Jtr,Ytr,TM,J_e,Ktr,Ztr,Lz,ear,oar,rar,MM,tar,Y_e,aar,nar,K_e,sar,lar,EM,xNe,xd,CM,Z_e,I8,iar,ebe,dar,$Ne,Qo,q8,car,$d,mar,xz,far,gar,$z,har,uar,par,N8,_ar,obe,bar,Far,Tar,Et,j8,Mar,rbe,Ear,Car,kd,war,tbe,Aar,yar,kz,Lar,xar,$ar,wM,kar,po,D8,Sar,abe,Rar,Par,Qa,Bar,nbe,Iar,qar,sbe,Nar,jar,lbe,Dar,Gar,Oar,G8,AM,ibe,Var,Xar,Sz,zar,War,Qar,yM,dbe,Har,Uar,Rz,Jar,Yar,Kar,LM,Zar,cbe,enr,onr,mbe,rnr,tnr,xM,kNe,Sd,$M,fbe,O8,anr,gbe,nnr,SNe,Ho,V8,snr,Rd,lnr,Pz,inr,dnr,Bz,cnr,mnr,fnr,X8,gnr,hbe,hnr,unr,pnr,Ct,z8,_nr,ube,bnr,vnr,Pd,Fnr,pbe,Tnr,Mnr,Iz,Enr,Cnr,wnr,kM,Anr,_o,W8,ynr,_be,Lnr,xnr,Ha,$nr,bbe,knr,Snr,vbe,Rnr,Pnr,Fbe,Bnr,Inr,qnr,Tbe,SM,Mbe,Nnr,jnr,qz,Dnr,Gnr,Onr,RM,Vnr,Ebe,Xnr,znr,Cbe,Wnr,Qnr,PM,RNe,Bd,BM,wbe,Q8,Hnr,Abe,Unr,PNe,Uo,H8,Jnr,Id,Ynr,Nz,Knr,Znr,jz,esr,osr,rsr,U8,tsr,ybe,asr,nsr,ssr,wt,J8,lsr,Lbe,isr,dsr,qd,csr,xbe,msr,fsr,Dz,gsr,hsr,usr,IM,psr,bo,Y8,_sr,$be,bsr,vsr,Ua,Fsr,kbe,Tsr,Msr,Sbe,Esr,Csr,Rbe,wsr,Asr,ysr,Ja,qM,Pbe,Lsr,xsr,Gz,$sr,ksr,Ssr,NM,Bbe,Rsr,Psr,Oz,Bsr,Isr,qsr,jM,Ibe,Nsr,jsr,Vz,Dsr,Gsr,Osr,DM,qbe,Vsr,Xsr,Xz,zsr,Wsr,Qsr,GM,Hsr,Nbe,Usr,Jsr,jbe,Ysr,Ksr,OM,BNe,Nd,VM,Dbe,K8,Zsr,Gbe,elr,INe,Jo,Z8,olr,jd,rlr,zz,tlr,alr,Wz,nlr,slr,llr,e7,ilr,Obe,dlr,clr,mlr,At,o7,flr,Vbe,glr,hlr,Dd,ulr,Xbe,plr,_lr,Qz,blr,vlr,Flr,XM,Tlr,vo,r7,Mlr,zbe,Elr,Clr,Ya,wlr,Wbe,Alr,ylr,Qbe,Llr,xlr,Hbe,$lr,klr,Slr,Ube,zM,Jbe,Rlr,Plr,Hz,Blr,Ilr,qlr,WM,Nlr,Ybe,jlr,Dlr,Kbe,Glr,Olr,QM,qNe,Gd,HM,Zbe,t7,Vlr,e2e,Xlr,NNe,Yo,a7,zlr,Od,Wlr,Uz,Qlr,Hlr,Jz,Ulr,Jlr,Ylr,n7,Klr,o2e,Zlr,eir,oir,yt,s7,rir,r2e,tir,air,Vd,nir,t2e,sir,lir,Yz,iir,dir,cir,UM,mir,wr,l7,fir,a2e,gir,hir,Ka,uir,n2e,pir,_ir,s2e,bir,vir,l2e,Fir,Tir,Mir,N,JM,i2e,Eir,Cir,Kz,wir,Air,yir,YM,d2e,Lir,xir,Zz,$ir,kir,Sir,KM,c2e,Rir,Pir,eW,Bir,Iir,qir,ZM,m2e,Nir,jir,oW,Dir,Gir,Oir,e4,f2e,Vir,Xir,rW,zir,Wir,Qir,o4,g2e,Hir,Uir,tW,Jir,Yir,Kir,r4,h2e,Zir,edr,aW,odr,rdr,tdr,t4,u2e,adr,ndr,nW,sdr,ldr,idr,a4,p2e,ddr,cdr,sW,mdr,fdr,gdr,n4,_2e,hdr,udr,lW,pdr,_dr,bdr,s4,b2e,vdr,Fdr,iW,Tdr,Mdr,Edr,l4,v2e,Cdr,wdr,dW,Adr,ydr,Ldr,i4,F2e,xdr,$dr,cW,kdr,Sdr,Rdr,d4,T2e,Pdr,Bdr,mW,Idr,qdr,Ndr,c4,M2e,jdr,Ddr,fW,Gdr,Odr,Vdr,m4,E2e,Xdr,zdr,gW,Wdr,Qdr,Hdr,f4,C2e,Udr,Jdr,hW,Ydr,Kdr,Zdr,Is,w2e,ecr,ocr,uW,rcr,tcr,pW,acr,ncr,scr,g4,A2e,lcr,icr,_W,dcr,ccr,mcr,h4,y2e,fcr,gcr,bW,hcr,ucr,pcr,u4,L2e,_cr,bcr,vW,vcr,Fcr,Tcr,p4,x2e,Mcr,Ecr,FW,Ccr,wcr,Acr,_4,$2e,ycr,Lcr,TW,xcr,$cr,kcr,b4,k2e,Scr,Rcr,MW,Pcr,Bcr,Icr,v4,S2e,qcr,Ncr,EW,jcr,Dcr,Gcr,F4,R2e,Ocr,Vcr,CW,Xcr,zcr,Wcr,T4,P2e,Qcr,Hcr,wW,Ucr,Jcr,Ycr,M4,B2e,Kcr,Zcr,AW,emr,omr,rmr,E4,I2e,tmr,amr,yW,nmr,smr,lmr,C4,q2e,imr,dmr,LW,cmr,mmr,fmr,w4,N2e,gmr,hmr,xW,umr,pmr,_mr,A4,j2e,bmr,vmr,$W,Fmr,Tmr,Mmr,y4,D2e,Emr,Cmr,kW,wmr,Amr,ymr,L4,G2e,Lmr,xmr,SW,$mr,kmr,Smr,x4,O2e,Rmr,Pmr,RW,Bmr,Imr,qmr,$4,V2e,Nmr,jmr,PW,Dmr,Gmr,Omr,k4,X2e,Vmr,Xmr,BW,zmr,Wmr,Qmr,S4,z2e,Hmr,Umr,IW,Jmr,Ymr,Kmr,R4,W2e,Zmr,efr,qW,ofr,rfr,tfr,P4,Q2e,afr,nfr,NW,sfr,lfr,ifr,B4,H2e,dfr,cfr,jW,mfr,ffr,gfr,I4,U2e,hfr,ufr,DW,pfr,_fr,bfr,q4,J2e,vfr,Ffr,GW,Tfr,Mfr,Efr,N4,Y2e,Cfr,wfr,OW,Afr,yfr,Lfr,j4,K2e,xfr,$fr,VW,kfr,Sfr,Rfr,D4,Z2e,Pfr,Bfr,XW,Ifr,qfr,Nfr,G4,jNe,Xd,O4,eve,i7,jfr,ove,Dfr,DNe,Ko,d7,Gfr,zd,Ofr,zW,Vfr,Xfr,WW,zfr,Wfr,Qfr,c7,Hfr,rve,Ufr,Jfr,Yfr,Lt,m7,Kfr,tve,Zfr,egr,Wd,ogr,ave,rgr,tgr,QW,agr,ngr,sgr,V4,lgr,Ar,f7,igr,nve,dgr,cgr,Za,mgr,sve,fgr,ggr,lve,hgr,ugr,ive,pgr,_gr,bgr,se,X4,dve,vgr,Fgr,HW,Tgr,Mgr,Egr,z4,cve,Cgr,wgr,UW,Agr,ygr,Lgr,W4,mve,xgr,$gr,JW,kgr,Sgr,Rgr,Q4,fve,Pgr,Bgr,YW,Igr,qgr,Ngr,H4,gve,jgr,Dgr,KW,Ggr,Ogr,Vgr,U4,hve,Xgr,zgr,ZW,Wgr,Qgr,Hgr,J4,uve,Ugr,Jgr,eQ,Ygr,Kgr,Zgr,Y4,pve,ehr,ohr,oQ,rhr,thr,ahr,K4,_ve,nhr,shr,rQ,lhr,ihr,dhr,Z4,bve,chr,mhr,tQ,fhr,ghr,hhr,eE,vve,uhr,phr,aQ,_hr,bhr,vhr,oE,Fve,Fhr,Thr,nQ,Mhr,Ehr,Chr,rE,Tve,whr,Ahr,sQ,yhr,Lhr,xhr,tE,Mve,$hr,khr,lQ,Shr,Rhr,Phr,aE,Eve,Bhr,Ihr,iQ,qhr,Nhr,jhr,nE,Cve,Dhr,Ghr,dQ,Ohr,Vhr,Xhr,sE,wve,zhr,Whr,cQ,Qhr,Hhr,Uhr,lE,Ave,Jhr,Yhr,mQ,Khr,Zhr,eur,iE,yve,our,rur,fQ,tur,aur,nur,dE,Lve,sur,lur,gQ,iur,dur,cur,cE,xve,mur,fur,hQ,gur,hur,uur,mE,$ve,pur,_ur,uQ,bur,vur,Fur,fE,kve,Tur,Mur,pQ,Eur,Cur,wur,gE,GNe,Qd,hE,Sve,g7,Aur,Rve,yur,ONe,Zo,h7,Lur,Hd,xur,_Q,$ur,kur,bQ,Sur,Rur,Pur,u7,Bur,Pve,Iur,qur,Nur,xt,p7,jur,Bve,Dur,Gur,Ud,Our,Ive,Vur,Xur,vQ,zur,Wur,Qur,uE,Hur,yr,_7,Uur,qve,Jur,Yur,en,Kur,Nve,Zur,epr,jve,opr,rpr,Dve,tpr,apr,npr,Me,pE,Gve,spr,lpr,FQ,ipr,dpr,cpr,_E,Ove,mpr,fpr,TQ,gpr,hpr,upr,bE,Vve,ppr,_pr,MQ,bpr,vpr,Fpr,vE,Xve,Tpr,Mpr,EQ,Epr,Cpr,wpr,FE,zve,Apr,ypr,CQ,Lpr,xpr,$pr,TE,Wve,kpr,Spr,wQ,Rpr,Ppr,Bpr,ME,Qve,Ipr,qpr,AQ,Npr,jpr,Dpr,EE,Hve,Gpr,Opr,yQ,Vpr,Xpr,zpr,CE,Uve,Wpr,Qpr,LQ,Hpr,Upr,Jpr,wE,Jve,Ypr,Kpr,xQ,Zpr,e_r,o_r,AE,Yve,r_r,t_r,$Q,a_r,n_r,s_r,yE,Kve,l_r,i_r,kQ,d_r,c_r,m_r,LE,VNe,Jd,xE,Zve,b7,f_r,eFe,g_r,XNe,er,v7,h_r,Yd,u_r,SQ,p_r,__r,RQ,b_r,v_r,F_r,F7,T_r,oFe,M_r,E_r,C_r,$t,T7,w_r,rFe,A_r,y_r,Kd,L_r,tFe,x_r,$_r,PQ,k_r,S_r,R_r,$E,P_r,Lr,M7,B_r,aFe,I_r,q_r,on,N_r,nFe,j_r,D_r,sFe,G_r,O_r,lFe,V_r,X_r,z_r,rn,kE,iFe,W_r,Q_r,BQ,H_r,U_r,J_r,SE,dFe,Y_r,K_r,IQ,Z_r,ebr,obr,RE,cFe,rbr,tbr,qQ,abr,nbr,sbr,PE,mFe,lbr,ibr,NQ,dbr,cbr,mbr,BE,zNe,Zd,IE,fFe,E7,fbr,gFe,gbr,WNe,or,C7,hbr,ec,ubr,jQ,pbr,_br,DQ,bbr,vbr,Fbr,w7,Tbr,hFe,Mbr,Ebr,Cbr,kt,A7,wbr,uFe,Abr,ybr,oc,Lbr,pFe,xbr,$br,GQ,kbr,Sbr,Rbr,qE,Pbr,xr,y7,Bbr,_Fe,Ibr,qbr,tn,Nbr,bFe,jbr,Dbr,vFe,Gbr,Obr,FFe,Vbr,Xbr,zbr,ie,NE,TFe,Wbr,Qbr,OQ,Hbr,Ubr,Jbr,jE,MFe,Ybr,Kbr,VQ,Zbr,e2r,o2r,DE,EFe,r2r,t2r,XQ,a2r,n2r,s2r,GE,CFe,l2r,i2r,zQ,d2r,c2r,m2r,OE,wFe,f2r,g2r,WQ,h2r,u2r,p2r,VE,AFe,_2r,b2r,QQ,v2r,F2r,T2r,XE,yFe,M2r,E2r,HQ,C2r,w2r,A2r,zE,LFe,y2r,L2r,UQ,x2r,$2r,k2r,WE,xFe,S2r,R2r,JQ,P2r,B2r,I2r,QE,$Fe,q2r,N2r,YQ,j2r,D2r,G2r,HE,kFe,O2r,V2r,KQ,X2r,z2r,W2r,UE,SFe,Q2r,H2r,ZQ,U2r,J2r,Y2r,JE,RFe,K2r,Z2r,eH,evr,ovr,rvr,YE,PFe,tvr,avr,oH,nvr,svr,lvr,KE,BFe,ivr,dvr,rH,cvr,mvr,fvr,ZE,IFe,gvr,hvr,tH,uvr,pvr,_vr,eC,qFe,bvr,vvr,aH,Fvr,Tvr,Mvr,oC,NFe,Evr,Cvr,nH,wvr,Avr,yvr,rC,jFe,Lvr,xvr,sH,$vr,kvr,Svr,tC,DFe,Rvr,Pvr,lH,Bvr,Ivr,qvr,aC,QNe,rc,nC,GFe,L7,Nvr,OFe,jvr,HNe,rr,x7,Dvr,tc,Gvr,iH,Ovr,Vvr,dH,Xvr,zvr,Wvr,$7,Qvr,VFe,Hvr,Uvr,Jvr,St,k7,Yvr,XFe,Kvr,Zvr,ac,eFr,zFe,oFr,rFr,cH,tFr,aFr,nFr,sC,sFr,$r,S7,lFr,WFe,iFr,dFr,an,cFr,QFe,mFr,fFr,HFe,gFr,hFr,UFe,uFr,pFr,_Fr,ye,lC,JFe,bFr,vFr,mH,FFr,TFr,MFr,iC,YFe,EFr,CFr,fH,wFr,AFr,yFr,dC,KFe,LFr,xFr,gH,$Fr,kFr,SFr,cC,ZFe,RFr,PFr,hH,BFr,IFr,qFr,mC,e1e,NFr,jFr,uH,DFr,GFr,OFr,fC,o1e,VFr,XFr,pH,zFr,WFr,QFr,gC,r1e,HFr,UFr,_H,JFr,YFr,KFr,hC,t1e,ZFr,e1r,bH,o1r,r1r,t1r,uC,a1e,a1r,n1r,vH,s1r,l1r,i1r,pC,n1e,d1r,c1r,FH,m1r,f1r,g1r,_C,UNe,nc,bC,s1e,R7,h1r,l1e,u1r,JNe,tr,P7,p1r,sc,_1r,TH,b1r,v1r,MH,F1r,T1r,M1r,B7,E1r,i1e,C1r,w1r,A1r,Rt,I7,y1r,d1e,L1r,x1r,lc,$1r,c1e,k1r,S1r,EH,R1r,P1r,B1r,vC,I1r,kr,q7,q1r,m1e,N1r,j1r,nn,D1r,f1e,G1r,O1r,g1e,V1r,X1r,h1e,z1r,W1r,Q1r,oe,FC,u1e,H1r,U1r,CH,J1r,Y1r,K1r,TC,p1e,Z1r,eTr,wH,oTr,rTr,tTr,MC,_1e,aTr,nTr,AH,sTr,lTr,iTr,EC,b1e,dTr,cTr,yH,mTr,fTr,gTr,CC,v1e,hTr,uTr,LH,pTr,_Tr,bTr,wC,F1e,vTr,FTr,xH,TTr,MTr,ETr,AC,T1e,CTr,wTr,$H,ATr,yTr,LTr,yC,M1e,xTr,$Tr,kH,kTr,STr,RTr,LC,E1e,PTr,BTr,SH,ITr,qTr,NTr,xC,C1e,jTr,DTr,RH,GTr,OTr,VTr,$C,w1e,XTr,zTr,PH,WTr,QTr,HTr,kC,A1e,UTr,JTr,BH,YTr,KTr,ZTr,SC,y1e,eMr,oMr,IH,rMr,tMr,aMr,RC,L1e,nMr,sMr,qH,lMr,iMr,dMr,PC,x1e,cMr,mMr,NH,fMr,gMr,hMr,BC,$1e,uMr,pMr,jH,_Mr,bMr,vMr,IC,k1e,FMr,TMr,DH,MMr,EMr,CMr,qC,S1e,wMr,AMr,GH,yMr,LMr,xMr,NC,R1e,$Mr,kMr,OH,SMr,RMr,PMr,jC,P1e,BMr,IMr,VH,qMr,NMr,jMr,DC,B1e,DMr,GMr,XH,OMr,VMr,XMr,GC,I1e,zMr,WMr,zH,QMr,HMr,UMr,OC,q1e,JMr,YMr,WH,KMr,ZMr,e4r,VC,N1e,o4r,r4r,QH,t4r,a4r,n4r,XC,j1e,s4r,l4r,HH,i4r,d4r,c4r,zC,D1e,m4r,f4r,UH,g4r,h4r,u4r,WC,YNe,ic,QC,G1e,N7,p4r,O1e,_4r,KNe,ar,j7,b4r,dc,v4r,JH,F4r,T4r,YH,M4r,E4r,C4r,D7,w4r,V1e,A4r,y4r,L4r,Pt,G7,x4r,X1e,$4r,k4r,cc,S4r,z1e,R4r,P4r,KH,B4r,I4r,q4r,HC,N4r,Sr,O7,j4r,W1e,D4r,G4r,sn,O4r,Q1e,V4r,X4r,H1e,z4r,W4r,U1e,Q4r,H4r,U4r,ue,UC,J1e,J4r,Y4r,ZH,K4r,Z4r,eEr,JC,Y1e,oEr,rEr,eU,tEr,aEr,nEr,YC,K1e,sEr,lEr,oU,iEr,dEr,cEr,KC,Z1e,mEr,fEr,rU,gEr,hEr,uEr,ZC,eTe,pEr,_Er,tU,bEr,vEr,FEr,e5,oTe,TEr,MEr,aU,EEr,CEr,wEr,o5,rTe,AEr,yEr,nU,LEr,xEr,$Er,r5,tTe,kEr,SEr,sU,REr,PEr,BEr,t5,aTe,IEr,qEr,lU,NEr,jEr,DEr,a5,nTe,GEr,OEr,iU,VEr,XEr,zEr,n5,sTe,WEr,QEr,dU,HEr,UEr,JEr,s5,lTe,YEr,KEr,cU,ZEr,eCr,oCr,l5,iTe,rCr,tCr,mU,aCr,nCr,sCr,i5,dTe,lCr,iCr,fU,dCr,cCr,mCr,d5,cTe,fCr,gCr,gU,hCr,uCr,pCr,c5,mTe,_Cr,bCr,hU,vCr,FCr,TCr,m5,fTe,MCr,ECr,uU,CCr,wCr,ACr,f5,ZNe,mc,g5,gTe,V7,yCr,hTe,LCr,eje,nr,X7,xCr,fc,$Cr,pU,kCr,SCr,_U,RCr,PCr,BCr,z7,ICr,uTe,qCr,NCr,jCr,Bt,W7,DCr,pTe,GCr,OCr,gc,VCr,_Te,XCr,zCr,bU,WCr,QCr,HCr,h5,UCr,Rr,Q7,JCr,bTe,YCr,KCr,ln,ZCr,vTe,e5r,o5r,FTe,r5r,t5r,TTe,a5r,n5r,s5r,H7,u5,MTe,l5r,i5r,vU,d5r,c5r,m5r,p5,ETe,f5r,g5r,FU,h5r,u5r,p5r,_5,oje,hc,b5,CTe,U7,_5r,wTe,b5r,rje,sr,J7,v5r,uc,F5r,TU,T5r,M5r,MU,E5r,C5r,w5r,Y7,A5r,ATe,y5r,L5r,x5r,It,K7,$5r,yTe,k5r,S5r,pc,R5r,LTe,P5r,B5r,EU,I5r,q5r,N5r,v5,j5r,Pr,Z7,D5r,xTe,G5r,O5r,dn,V5r,$Te,X5r,z5r,kTe,W5r,Q5r,STe,H5r,U5r,J5r,RTe,F5,PTe,Y5r,K5r,CU,Z5r,e3r,o3r,T5,tje,_c,M5,BTe,e9,r3r,ITe,t3r,aje,lr,o9,a3r,bc,n3r,wU,s3r,l3r,AU,i3r,d3r,c3r,r9,m3r,qTe,f3r,g3r,h3r,qt,t9,u3r,NTe,p3r,_3r,vc,b3r,jTe,v3r,F3r,yU,T3r,M3r,E3r,E5,C3r,Br,a9,w3r,DTe,A3r,y3r,cn,L3r,GTe,x3r,$3r,OTe,k3r,S3r,VTe,R3r,P3r,B3r,de,C5,XTe,I3r,q3r,LU,N3r,j3r,D3r,w5,zTe,G3r,O3r,xU,V3r,X3r,z3r,A5,WTe,W3r,Q3r,$U,H3r,U3r,J3r,y5,QTe,Y3r,K3r,kU,Z3r,ewr,owr,L5,HTe,rwr,twr,SU,awr,nwr,swr,x5,UTe,lwr,iwr,RU,dwr,cwr,mwr,$5,JTe,fwr,gwr,PU,hwr,uwr,pwr,k5,YTe,_wr,bwr,BU,vwr,Fwr,Twr,S5,KTe,Mwr,Ewr,IU,Cwr,wwr,Awr,R5,ZTe,ywr,Lwr,qU,xwr,$wr,kwr,P5,eMe,Swr,Rwr,NU,Pwr,Bwr,Iwr,B5,oMe,qwr,Nwr,jU,jwr,Dwr,Gwr,I5,rMe,Owr,Vwr,DU,Xwr,zwr,Wwr,q5,tMe,Qwr,Hwr,GU,Uwr,Jwr,Ywr,N5,aMe,Kwr,Zwr,OU,e0r,o0r,r0r,j5,nMe,t0r,a0r,VU,n0r,s0r,l0r,D5,sMe,i0r,d0r,XU,c0r,m0r,f0r,G5,lMe,g0r,h0r,zU,u0r,p0r,_0r,O5,iMe,b0r,v0r,WU,F0r,T0r,M0r,V5,dMe,E0r,C0r,QU,w0r,A0r,y0r,X5,nje,Fc,z5,cMe,n9,L0r,mMe,x0r,sje,ir,s9,$0r,Tc,k0r,HU,S0r,R0r,UU,P0r,B0r,I0r,l9,q0r,fMe,N0r,j0r,D0r,Nt,i9,G0r,gMe,O0r,V0r,Mc,X0r,hMe,z0r,W0r,JU,Q0r,H0r,U0r,W5,J0r,Ir,d9,Y0r,uMe,K0r,Z0r,mn,eAr,pMe,oAr,rAr,_Me,tAr,aAr,bMe,nAr,sAr,lAr,ce,Q5,vMe,iAr,dAr,YU,cAr,mAr,fAr,H5,FMe,gAr,hAr,KU,uAr,pAr,_Ar,U5,TMe,bAr,vAr,ZU,FAr,TAr,MAr,J5,MMe,EAr,CAr,eJ,wAr,AAr,yAr,Y5,EMe,LAr,xAr,oJ,$Ar,kAr,SAr,K5,CMe,RAr,PAr,rJ,BAr,IAr,qAr,Z5,wMe,NAr,jAr,tJ,DAr,GAr,OAr,e3,AMe,VAr,XAr,aJ,zAr,WAr,QAr,o3,yMe,HAr,UAr,nJ,JAr,YAr,KAr,r3,LMe,ZAr,e6r,sJ,o6r,r6r,t6r,t3,xMe,a6r,n6r,lJ,s6r,l6r,i6r,a3,$Me,d6r,c6r,iJ,m6r,f6r,g6r,n3,kMe,h6r,u6r,dJ,p6r,_6r,b6r,s3,SMe,v6r,F6r,cJ,T6r,M6r,E6r,l3,RMe,C6r,w6r,mJ,A6r,y6r,L6r,i3,PMe,x6r,$6r,fJ,k6r,S6r,R6r,d3,BMe,P6r,B6r,gJ,I6r,q6r,N6r,c3,IMe,j6r,D6r,hJ,G6r,O6r,V6r,m3,qMe,X6r,z6r,uJ,W6r,Q6r,H6r,f3,NMe,U6r,J6r,pJ,Y6r,K6r,Z6r,g3,lje,Ec,h3,jMe,c9,eyr,DMe,oyr,ije,dr,m9,ryr,Cc,tyr,_J,ayr,nyr,bJ,syr,lyr,iyr,f9,dyr,GMe,cyr,myr,fyr,jt,g9,gyr,OMe,hyr,uyr,wc,pyr,VMe,_yr,byr,vJ,vyr,Fyr,Tyr,u3,Myr,qr,h9,Eyr,XMe,Cyr,wyr,fn,Ayr,zMe,yyr,Lyr,WMe,xyr,$yr,QMe,kyr,Syr,Ryr,HMe,p3,UMe,Pyr,Byr,FJ,Iyr,qyr,Nyr,_3,dje,Ac,b3,JMe,u9,jyr,YMe,Dyr,cje,cr,p9,Gyr,yc,Oyr,TJ,Vyr,Xyr,MJ,zyr,Wyr,Qyr,_9,Hyr,KMe,Uyr,Jyr,Yyr,Dt,b9,Kyr,ZMe,Zyr,eLr,Lc,oLr,e4e,rLr,tLr,EJ,aLr,nLr,sLr,v3,lLr,Nr,v9,iLr,o4e,dLr,cLr,gn,mLr,r4e,fLr,gLr,t4e,hLr,uLr,a4e,pLr,_Lr,bLr,n4e,F3,s4e,vLr,FLr,CJ,TLr,MLr,ELr,T3,mje,xc,M3,l4e,F9,CLr,i4e,wLr,fje,mr,T9,ALr,$c,yLr,wJ,LLr,xLr,AJ,$Lr,kLr,SLr,M9,RLr,d4e,PLr,BLr,ILr,Gt,E9,qLr,c4e,NLr,jLr,kc,DLr,m4e,GLr,OLr,yJ,VLr,XLr,zLr,E3,WLr,jr,C9,QLr,f4e,HLr,ULr,hn,JLr,g4e,YLr,KLr,h4e,ZLr,e8r,u4e,o8r,r8r,t8r,te,C3,p4e,a8r,n8r,LJ,s8r,l8r,i8r,w3,_4e,d8r,c8r,xJ,m8r,f8r,g8r,A3,b4e,h8r,u8r,$J,p8r,_8r,b8r,y3,v4e,v8r,F8r,kJ,T8r,M8r,E8r,L3,F4e,C8r,w8r,SJ,A8r,y8r,L8r,x3,T4e,x8r,$8r,RJ,k8r,S8r,R8r,$3,M4e,P8r,B8r,PJ,I8r,q8r,N8r,k3,E4e,j8r,D8r,BJ,G8r,O8r,V8r,S3,C4e,X8r,z8r,IJ,W8r,Q8r,H8r,R3,w4e,U8r,J8r,qJ,Y8r,K8r,Z8r,P3,A4e,e7r,o7r,NJ,r7r,t7r,a7r,B3,y4e,n7r,s7r,jJ,l7r,i7r,d7r,I3,L4e,c7r,m7r,DJ,f7r,g7r,h7r,q3,x4e,u7r,p7r,GJ,_7r,b7r,v7r,N3,$4e,F7r,T7r,OJ,M7r,E7r,C7r,j3,k4e,w7r,A7r,VJ,y7r,L7r,x7r,D3,S4e,$7r,k7r,XJ,S7r,R7r,P7r,G3,R4e,B7r,I7r,zJ,q7r,N7r,j7r,O3,P4e,D7r,G7r,WJ,O7r,V7r,X7r,V3,B4e,z7r,W7r,QJ,Q7r,H7r,U7r,X3,I4e,J7r,Y7r,HJ,K7r,Z7r,e9r,z3,q4e,o9r,r9r,UJ,t9r,a9r,n9r,W3,N4e,s9r,l9r,JJ,i9r,d9r,c9r,Q3,j4e,m9r,f9r,YJ,g9r,h9r,u9r,H3,D4e,p9r,_9r,KJ,b9r,v9r,F9r,U3,gje,Sc,J3,G4e,w9,T9r,O4e,M9r,hje,fr,A9,E9r,Rc,C9r,ZJ,w9r,A9r,eY,y9r,L9r,x9r,y9,$9r,V4e,k9r,S9r,R9r,Ot,L9,P9r,X4e,B9r,I9r,Pc,q9r,z4e,N9r,j9r,oY,D9r,G9r,O9r,Y3,V9r,Dr,x9,X9r,W4e,z9r,W9r,un,Q9r,Q4e,H9r,U9r,H4e,J9r,Y9r,U4e,K9r,Z9r,exr,Re,K3,J4e,oxr,rxr,rY,txr,axr,nxr,Z3,Y4e,sxr,lxr,tY,ixr,dxr,cxr,ew,K4e,mxr,fxr,aY,gxr,hxr,uxr,ow,Z4e,pxr,_xr,nY,bxr,vxr,Fxr,rw,eEe,Txr,Mxr,sY,Exr,Cxr,wxr,tw,oEe,Axr,yxr,lY,Lxr,xxr,$xr,aw,rEe,kxr,Sxr,iY,Rxr,Pxr,Bxr,nw,tEe,Ixr,qxr,dY,Nxr,jxr,Dxr,sw,aEe,Gxr,Oxr,cY,Vxr,Xxr,zxr,lw,uje,Bc,iw,nEe,$9,Wxr,sEe,Qxr,pje,gr,k9,Hxr,Ic,Uxr,mY,Jxr,Yxr,fY,Kxr,Zxr,e$r,S9,o$r,lEe,r$r,t$r,a$r,Vt,R9,n$r,iEe,s$r,l$r,qc,i$r,dEe,d$r,c$r,gY,m$r,f$r,g$r,dw,h$r,Gr,P9,u$r,cEe,p$r,_$r,pn,b$r,mEe,v$r,F$r,fEe,T$r,M$r,gEe,E$r,C$r,w$r,Ee,cw,hEe,A$r,y$r,hY,L$r,x$r,$$r,mw,uEe,k$r,S$r,uY,R$r,P$r,B$r,fw,pEe,I$r,q$r,pY,N$r,j$r,D$r,gw,_Ee,G$r,O$r,_Y,V$r,X$r,z$r,hw,bEe,W$r,Q$r,bY,H$r,U$r,J$r,uw,vEe,Y$r,K$r,vY,Z$r,ekr,okr,pw,FEe,rkr,tkr,FY,akr,nkr,skr,_w,TEe,lkr,ikr,TY,dkr,ckr,mkr,bw,MEe,fkr,gkr,MY,hkr,ukr,pkr,vw,EEe,_kr,bkr,EY,vkr,Fkr,Tkr,Fw,CEe,Mkr,Ekr,CY,Ckr,wkr,Akr,Tw,wEe,ykr,Lkr,wY,xkr,$kr,kkr,Mw,_je,Nc,Ew,AEe,B9,Skr,yEe,Rkr,bje,hr,I9,Pkr,jc,Bkr,AY,Ikr,qkr,yY,Nkr,jkr,Dkr,q9,Gkr,LEe,Okr,Vkr,Xkr,Xt,N9,zkr,xEe,Wkr,Qkr,Dc,Hkr,$Ee,Ukr,Jkr,LY,Ykr,Kkr,Zkr,Cw,eSr,Or,j9,oSr,kEe,rSr,tSr,_n,aSr,SEe,nSr,sSr,REe,lSr,iSr,PEe,dSr,cSr,mSr,Le,ww,BEe,fSr,gSr,xY,hSr,uSr,pSr,Aw,IEe,_Sr,bSr,$Y,vSr,FSr,TSr,yw,qEe,MSr,ESr,kY,CSr,wSr,ASr,Lw,NEe,ySr,LSr,SY,xSr,$Sr,kSr,xw,jEe,SSr,RSr,RY,PSr,BSr,ISr,$w,DEe,qSr,NSr,PY,jSr,DSr,GSr,kw,GEe,OSr,VSr,BY,XSr,zSr,WSr,Sw,OEe,QSr,HSr,IY,USr,JSr,YSr,Rw,VEe,KSr,ZSr,qY,eRr,oRr,rRr,Pw,XEe,tRr,aRr,NY,nRr,sRr,lRr,Bw,vje,Gc,Iw,zEe,D9,iRr,WEe,dRr,Fje,ur,G9,cRr,Oc,mRr,jY,fRr,gRr,DY,hRr,uRr,pRr,O9,_Rr,QEe,bRr,vRr,FRr,zt,V9,TRr,HEe,MRr,ERr,Vc,CRr,UEe,wRr,ARr,GY,yRr,LRr,xRr,qw,$Rr,Vr,X9,kRr,JEe,SRr,RRr,bn,PRr,YEe,BRr,IRr,KEe,qRr,NRr,ZEe,jRr,DRr,GRr,Pe,Nw,eCe,ORr,VRr,OY,XRr,zRr,WRr,jw,oCe,QRr,HRr,VY,URr,JRr,YRr,Dw,rCe,KRr,ZRr,XY,ePr,oPr,rPr,Gw,tCe,tPr,aPr,zY,nPr,sPr,lPr,Ow,aCe,iPr,dPr,WY,cPr,mPr,fPr,Vw,nCe,gPr,hPr,QY,uPr,pPr,_Pr,Xw,sCe,bPr,vPr,HY,FPr,TPr,MPr,zw,lCe,EPr,CPr,UY,wPr,APr,yPr,Ww,iCe,LPr,xPr,JY,$Pr,kPr,SPr,Qw,Tje,Xc,Hw,dCe,z9,RPr,cCe,PPr,Mje,pr,W9,BPr,zc,IPr,YY,qPr,NPr,KY,jPr,DPr,GPr,Q9,OPr,mCe,VPr,XPr,zPr,Wt,H9,WPr,fCe,QPr,HPr,Wc,UPr,gCe,JPr,YPr,ZY,KPr,ZPr,eBr,Uw,oBr,Xr,U9,rBr,hCe,tBr,aBr,vn,nBr,uCe,sBr,lBr,pCe,iBr,dBr,_Ce,cBr,mBr,fBr,xe,Jw,bCe,gBr,hBr,eK,uBr,pBr,_Br,Yw,vCe,bBr,vBr,oK,FBr,TBr,MBr,Kw,FCe,EBr,CBr,rK,wBr,ABr,yBr,Zw,TCe,LBr,xBr,tK,$Br,kBr,SBr,e0,MCe,RBr,PBr,aK,BBr,IBr,qBr,o0,ECe,NBr,jBr,nK,DBr,GBr,OBr,r0,CCe,VBr,XBr,sK,zBr,WBr,QBr,t0,wCe,HBr,UBr,lK,JBr,YBr,KBr,a0,ACe,ZBr,eIr,iK,oIr,rIr,tIr,n0,yCe,aIr,nIr,dK,sIr,lIr,iIr,s0,Eje,Qc,l0,LCe,J9,dIr,xCe,cIr,Cje,_r,Y9,mIr,Hc,fIr,cK,gIr,hIr,mK,uIr,pIr,_Ir,K9,bIr,$Ce,vIr,FIr,TIr,Qt,Z9,MIr,kCe,EIr,CIr,Uc,wIr,SCe,AIr,yIr,fK,LIr,xIr,$Ir,i0,kIr,zr,ex,SIr,RCe,RIr,PIr,Fn,BIr,PCe,IIr,qIr,BCe,NIr,jIr,ICe,DIr,GIr,OIr,$e,d0,qCe,VIr,XIr,gK,zIr,WIr,QIr,c0,NCe,HIr,UIr,hK,JIr,YIr,KIr,m0,jCe,ZIr,eqr,uK,oqr,rqr,tqr,f0,DCe,aqr,nqr,pK,sqr,lqr,iqr,g0,GCe,dqr,cqr,_K,mqr,fqr,gqr,h0,OCe,hqr,uqr,bK,pqr,_qr,bqr,u0,VCe,vqr,Fqr,vK,Tqr,Mqr,Eqr,p0,XCe,Cqr,wqr,FK,Aqr,yqr,Lqr,_0,zCe,xqr,$qr,TK,kqr,Sqr,Rqr,b0,WCe,Pqr,Bqr,MK,Iqr,qqr,Nqr,v0,wje,Jc,F0,QCe,ox,jqr,HCe,Dqr,Aje,br,rx,Gqr,Yc,Oqr,EK,Vqr,Xqr,CK,zqr,Wqr,Qqr,tx,Hqr,UCe,Uqr,Jqr,Yqr,Ht,ax,Kqr,JCe,Zqr,eNr,Kc,oNr,YCe,rNr,tNr,wK,aNr,nNr,sNr,T0,lNr,Wr,nx,iNr,KCe,dNr,cNr,Tn,mNr,ZCe,fNr,gNr,e5e,hNr,uNr,o5e,pNr,_Nr,bNr,De,M0,r5e,vNr,FNr,AK,TNr,MNr,ENr,E0,t5e,CNr,wNr,yK,ANr,yNr,LNr,C0,a5e,xNr,$Nr,LK,kNr,SNr,RNr,w0,n5e,PNr,BNr,xK,INr,qNr,NNr,A0,s5e,jNr,DNr,$K,GNr,ONr,VNr,y0,l5e,XNr,zNr,kK,WNr,QNr,HNr,L0,i5e,UNr,JNr,SK,YNr,KNr,ZNr,x0,d5e,ejr,ojr,RK,rjr,tjr,ajr,$0,yje,Zc,k0,c5e,sx,njr,m5e,sjr,Lje,vr,lx,ljr,em,ijr,PK,djr,cjr,BK,mjr,fjr,gjr,ix,hjr,f5e,ujr,pjr,_jr,Ut,dx,bjr,g5e,vjr,Fjr,om,Tjr,h5e,Mjr,Ejr,IK,Cjr,wjr,Ajr,S0,yjr,Qr,cx,Ljr,u5e,xjr,$jr,Mn,kjr,p5e,Sjr,Rjr,_5e,Pjr,Bjr,b5e,Ijr,qjr,Njr,Ge,R0,v5e,jjr,Djr,qK,Gjr,Ojr,Vjr,P0,F5e,Xjr,zjr,NK,Wjr,Qjr,Hjr,B0,T5e,Ujr,Jjr,jK,Yjr,Kjr,Zjr,I0,M5e,eDr,oDr,DK,rDr,tDr,aDr,q0,E5e,nDr,sDr,GK,lDr,iDr,dDr,N0,C5e,cDr,mDr,OK,fDr,gDr,hDr,j0,w5e,uDr,pDr,VK,_Dr,bDr,vDr,D0,A5e,FDr,TDr,XK,MDr,EDr,CDr,G0,xje,rm,O0,y5e,mx,wDr,L5e,ADr,$je,Fr,fx,yDr,tm,LDr,zK,xDr,$Dr,WK,kDr,SDr,RDr,gx,PDr,x5e,BDr,IDr,qDr,Jt,hx,NDr,$5e,jDr,DDr,am,GDr,k5e,ODr,VDr,QK,XDr,zDr,WDr,V0,QDr,Hr,ux,HDr,S5e,UDr,JDr,En,YDr,R5e,KDr,ZDr,P5e,eGr,oGr,B5e,rGr,tGr,aGr,I5e,X0,q5e,nGr,sGr,HK,lGr,iGr,dGr,z0,kje,nm,W0,N5e,px,cGr,j5e,mGr,Sje,Tr,_x,fGr,sm,gGr,UK,hGr,uGr,JK,pGr,_Gr,bGr,bx,vGr,D5e,FGr,TGr,MGr,Yt,vx,EGr,G5e,CGr,wGr,lm,AGr,O5e,yGr,LGr,YK,xGr,$Gr,kGr,Q0,SGr,Ur,Fx,RGr,V5e,PGr,BGr,Cn,IGr,X5e,qGr,NGr,z5e,jGr,DGr,W5e,GGr,OGr,VGr,Tx,H0,Q5e,XGr,zGr,KK,WGr,QGr,HGr,U0,H5e,UGr,JGr,ZK,YGr,KGr,ZGr,J0,Rje,im,Y0,U5e,Mx,eOr,J5e,oOr,Pje,Mr,Ex,rOr,dm,tOr,eZ,aOr,nOr,oZ,sOr,lOr,iOr,Cx,dOr,Y5e,cOr,mOr,fOr,Kt,wx,gOr,K5e,hOr,uOr,cm,pOr,Z5e,_Or,bOr,rZ,vOr,FOr,TOr,K0,MOr,Jr,Ax,EOr,e3e,COr,wOr,wn,AOr,o3e,yOr,LOr,r3e,xOr,$Or,t3e,kOr,SOr,ROr,a3e,Z0,n3e,POr,BOr,tZ,IOr,qOr,NOr,eA,Bje;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),My=new re({}),Ey=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vm=new jOr({props:{warning:!0,$$slots:{default:[cxt]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L581"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L604"}}),Mg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),xy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L727"}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L389"}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L403"}}),rh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),By=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L599"}}),Iy=new re({}),qy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L189"}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L203"}}),Rh=new jOr({props:{$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Ph=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L330"}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),eu=new jOr({props:{$$slots:{default:[uxt]},$$scope:{ctx:L}}}),ou=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L733"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),au=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kp=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),Zy=new re({}),eL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L740"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L755"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$b=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L762"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Sb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),hL=new re({}),uL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L769"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L778"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Sv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L812"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L819"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L805"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L787"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L794"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L828"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),c8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L897"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),u8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L881"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L888"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),A8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L913"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),I8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L835"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),Q8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L842"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L851"}}),o7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),t7=new re({}),a7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),s7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),i7=new re({}),d7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),m7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),g7=new re({}),h7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),p7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),b7=new re({}),v7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),T7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),E7=new re({}),C7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),A7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),L7=new re({}),x7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),k7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),R7=new re({}),P7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),I7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),N7=new re({}),j7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),G7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),V7=new re({}),X7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),W7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),U7=new re({}),J7=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),K7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),c9=new re({}),m9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),u9=new re({}),p9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),E9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),mx=new re({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),px=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),hm=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),by=o("from_pretrained()"),um=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),vy=o("AutoConfig"),Ln=o(", "),xn=a("a"),Fy=o("AutoModel"),ui=o(`, and
`),$n=a("a"),Ty=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),pm=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),D$=o("will create a model that is an instance of "),_i=a("a"),G$=o("BertModel"),O$=o("."),Eo=l(),wa=a("p"),V$=o("There is one class of "),_m=a("code"),X$=o("AutoModel"),VGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Sqe=l(),bi=a("h2"),bm=a("a"),Jee=a("span"),F(My.$$.fragment),XGe=l(),Yee=a("span"),zGe=o("Extending the Auto Classes"),Rqe=l(),kn=a("p"),WGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kee=a("code"),QGe=o("NewModel"),HGe=o(", make sure you have a "),Zee=a("code"),UGe=o("NewModelConfig"),JGe=o(` then you can add those to the auto
classes like this:`),Pqe=l(),F(Ey.$$.fragment),Bqe=l(),z$=a("p"),YGe=o("You will then be able to use the auto classes like you would usually do!"),Iqe=l(),F(vm.$$.fragment),qqe=l(),vi=a("h2"),Fm=a("a"),eoe=a("span"),F(Cy.$$.fragment),KGe=l(),ooe=a("span"),ZGe=o("AutoConfig"),Nqe=l(),Co=a("div"),F(wy.$$.fragment),eOe=l(),Ay=a("p"),oOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W$=a("a"),rOe=o("from_pretrained()"),tOe=o(" class method."),aOe=l(),yy=a("p"),nOe=o("This class cannot be instantiated directly using "),roe=a("code"),sOe=o("__init__()"),lOe=o(" (throws an error)."),iOe=l(),Er=a("div"),F(Ly.$$.fragment),dOe=l(),toe=a("p"),cOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mOe=l(),Fi=a("p"),fOe=o("The configuration class to instantiate is selected based on the "),aoe=a("code"),gOe=o("model_type"),hOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),noe=a("code"),uOe=o("pretrained_model_name_or_path"),pOe=o(":"),_Oe=l(),A=a("ul"),Tm=a("li"),soe=a("strong"),bOe=o("albert"),vOe=o(" \u2014 "),Q$=a("a"),FOe=o("AlbertConfig"),TOe=o(" (ALBERT model)"),MOe=l(),Mm=a("li"),loe=a("strong"),EOe=o("bart"),COe=o(" \u2014 "),H$=a("a"),wOe=o("BartConfig"),AOe=o(" (BART model)"),yOe=l(),Em=a("li"),ioe=a("strong"),LOe=o("beit"),xOe=o(" \u2014 "),U$=a("a"),$Oe=o("BeitConfig"),kOe=o(" (BEiT model)"),SOe=l(),Cm=a("li"),doe=a("strong"),ROe=o("bert"),POe=o(" \u2014 "),J$=a("a"),BOe=o("BertConfig"),IOe=o(" (BERT model)"),qOe=l(),wm=a("li"),coe=a("strong"),NOe=o("bert-generation"),jOe=o(" \u2014 "),Y$=a("a"),DOe=o("BertGenerationConfig"),GOe=o(" (Bert Generation model)"),OOe=l(),Am=a("li"),moe=a("strong"),VOe=o("big_bird"),XOe=o(" \u2014 "),K$=a("a"),zOe=o("BigBirdConfig"),WOe=o(" (BigBird model)"),QOe=l(),ym=a("li"),foe=a("strong"),HOe=o("bigbird_pegasus"),UOe=o(" \u2014 "),Z$=a("a"),JOe=o("BigBirdPegasusConfig"),YOe=o(" (BigBirdPegasus model)"),KOe=l(),Lm=a("li"),goe=a("strong"),ZOe=o("blenderbot"),eVe=o(" \u2014 "),ek=a("a"),oVe=o("BlenderbotConfig"),rVe=o(" (Blenderbot model)"),tVe=l(),xm=a("li"),hoe=a("strong"),aVe=o("blenderbot-small"),nVe=o(" \u2014 "),ok=a("a"),sVe=o("BlenderbotSmallConfig"),lVe=o(" (BlenderbotSmall model)"),iVe=l(),$m=a("li"),uoe=a("strong"),dVe=o("camembert"),cVe=o(" \u2014 "),rk=a("a"),mVe=o("CamembertConfig"),fVe=o(" (CamemBERT model)"),gVe=l(),km=a("li"),poe=a("strong"),hVe=o("canine"),uVe=o(" \u2014 "),tk=a("a"),pVe=o("CanineConfig"),_Ve=o(" (Canine model)"),bVe=l(),Sm=a("li"),_oe=a("strong"),vVe=o("clip"),FVe=o(" \u2014 "),ak=a("a"),TVe=o("CLIPConfig"),MVe=o(" (CLIP model)"),EVe=l(),Rm=a("li"),boe=a("strong"),CVe=o("convbert"),wVe=o(" \u2014 "),nk=a("a"),AVe=o("ConvBertConfig"),yVe=o(" (ConvBERT model)"),LVe=l(),Pm=a("li"),voe=a("strong"),xVe=o("convnext"),$Ve=o(" \u2014 "),sk=a("a"),kVe=o("ConvNextConfig"),SVe=o(" (ConvNext model)"),RVe=l(),Bm=a("li"),Foe=a("strong"),PVe=o("ctrl"),BVe=o(" \u2014 "),lk=a("a"),IVe=o("CTRLConfig"),qVe=o(" (CTRL model)"),NVe=l(),Im=a("li"),Toe=a("strong"),jVe=o("cvt"),DVe=o(" \u2014 "),ik=a("a"),GVe=o("CvtConfig"),OVe=o(" (CvT model)"),VVe=l(),qm=a("li"),Moe=a("strong"),XVe=o("data2vec-audio"),zVe=o(" \u2014 "),dk=a("a"),WVe=o("Data2VecAudioConfig"),QVe=o(" (Data2VecAudio model)"),HVe=l(),Nm=a("li"),Eoe=a("strong"),UVe=o("data2vec-text"),JVe=o(" \u2014 "),ck=a("a"),YVe=o("Data2VecTextConfig"),KVe=o(" (Data2VecText model)"),ZVe=l(),jm=a("li"),Coe=a("strong"),eXe=o("data2vec-vision"),oXe=o(" \u2014 "),mk=a("a"),rXe=o("Data2VecVisionConfig"),tXe=o(" (Data2VecVision model)"),aXe=l(),Dm=a("li"),woe=a("strong"),nXe=o("deberta"),sXe=o(" \u2014 "),fk=a("a"),lXe=o("DebertaConfig"),iXe=o(" (DeBERTa model)"),dXe=l(),Gm=a("li"),Aoe=a("strong"),cXe=o("deberta-v2"),mXe=o(" \u2014 "),gk=a("a"),fXe=o("DebertaV2Config"),gXe=o(" (DeBERTa-v2 model)"),hXe=l(),Om=a("li"),yoe=a("strong"),uXe=o("decision_transformer"),pXe=o(" \u2014 "),hk=a("a"),_Xe=o("DecisionTransformerConfig"),bXe=o(" (Decision Transformer model)"),vXe=l(),Vm=a("li"),Loe=a("strong"),FXe=o("deit"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("DeiTConfig"),EXe=o(" (DeiT model)"),CXe=l(),Xm=a("li"),xoe=a("strong"),wXe=o("detr"),AXe=o(" \u2014 "),pk=a("a"),yXe=o("DetrConfig"),LXe=o(" (DETR model)"),xXe=l(),zm=a("li"),$oe=a("strong"),$Xe=o("distilbert"),kXe=o(" \u2014 "),_k=a("a"),SXe=o("DistilBertConfig"),RXe=o(" (DistilBERT model)"),PXe=l(),Wm=a("li"),koe=a("strong"),BXe=o("dpr"),IXe=o(" \u2014 "),bk=a("a"),qXe=o("DPRConfig"),NXe=o(" (DPR model)"),jXe=l(),Qm=a("li"),Soe=a("strong"),DXe=o("dpt"),GXe=o(" \u2014 "),vk=a("a"),OXe=o("DPTConfig"),VXe=o(" (DPT model)"),XXe=l(),Hm=a("li"),Roe=a("strong"),zXe=o("electra"),WXe=o(" \u2014 "),Fk=a("a"),QXe=o("ElectraConfig"),HXe=o(" (ELECTRA model)"),UXe=l(),Um=a("li"),Poe=a("strong"),JXe=o("encoder-decoder"),YXe=o(" \u2014 "),Tk=a("a"),KXe=o("EncoderDecoderConfig"),ZXe=o(" (Encoder decoder model)"),eze=l(),Jm=a("li"),Boe=a("strong"),oze=o("flaubert"),rze=o(" \u2014 "),Mk=a("a"),tze=o("FlaubertConfig"),aze=o(" (FlauBERT model)"),nze=l(),Ym=a("li"),Ioe=a("strong"),sze=o("flava"),lze=o(" \u2014 "),Ek=a("a"),ize=o("FlavaConfig"),dze=o(" (Flava model)"),cze=l(),Km=a("li"),qoe=a("strong"),mze=o("fnet"),fze=o(" \u2014 "),Ck=a("a"),gze=o("FNetConfig"),hze=o(" (FNet model)"),uze=l(),Zm=a("li"),Noe=a("strong"),pze=o("fsmt"),_ze=o(" \u2014 "),wk=a("a"),bze=o("FSMTConfig"),vze=o(" (FairSeq Machine-Translation model)"),Fze=l(),ef=a("li"),joe=a("strong"),Tze=o("funnel"),Mze=o(" \u2014 "),Ak=a("a"),Eze=o("FunnelConfig"),Cze=o(" (Funnel Transformer model)"),wze=l(),of=a("li"),Doe=a("strong"),Aze=o("glpn"),yze=o(" \u2014 "),yk=a("a"),Lze=o("GLPNConfig"),xze=o(" (GLPN model)"),$ze=l(),rf=a("li"),Goe=a("strong"),kze=o("gpt2"),Sze=o(" \u2014 "),Lk=a("a"),Rze=o("GPT2Config"),Pze=o(" (OpenAI GPT-2 model)"),Bze=l(),tf=a("li"),Ooe=a("strong"),Ize=o("gpt_neo"),qze=o(" \u2014 "),xk=a("a"),Nze=o("GPTNeoConfig"),jze=o(" (GPT Neo model)"),Dze=l(),af=a("li"),Voe=a("strong"),Gze=o("gptj"),Oze=o(" \u2014 "),$k=a("a"),Vze=o("GPTJConfig"),Xze=o(" (GPT-J model)"),zze=l(),nf=a("li"),Xoe=a("strong"),Wze=o("hubert"),Qze=o(" \u2014 "),kk=a("a"),Hze=o("HubertConfig"),Uze=o(" (Hubert model)"),Jze=l(),sf=a("li"),zoe=a("strong"),Yze=o("ibert"),Kze=o(" \u2014 "),Sk=a("a"),Zze=o("IBertConfig"),eWe=o(" (I-BERT model)"),oWe=l(),lf=a("li"),Woe=a("strong"),rWe=o("imagegpt"),tWe=o(" \u2014 "),Rk=a("a"),aWe=o("ImageGPTConfig"),nWe=o(" (ImageGPT model)"),sWe=l(),df=a("li"),Qoe=a("strong"),lWe=o("layoutlm"),iWe=o(" \u2014 "),Pk=a("a"),dWe=o("LayoutLMConfig"),cWe=o(" (LayoutLM model)"),mWe=l(),cf=a("li"),Hoe=a("strong"),fWe=o("layoutlmv2"),gWe=o(" \u2014 "),Bk=a("a"),hWe=o("LayoutLMv2Config"),uWe=o(" (LayoutLMv2 model)"),pWe=l(),mf=a("li"),Uoe=a("strong"),_We=o("layoutlmv3"),bWe=o(" \u2014 "),Ik=a("a"),vWe=o("LayoutLMv3Config"),FWe=o(" (LayoutLMv3 model)"),TWe=l(),ff=a("li"),Joe=a("strong"),MWe=o("led"),EWe=o(" \u2014 "),qk=a("a"),CWe=o("LEDConfig"),wWe=o(" (LED model)"),AWe=l(),gf=a("li"),Yoe=a("strong"),yWe=o("longformer"),LWe=o(" \u2014 "),Nk=a("a"),xWe=o("LongformerConfig"),$We=o(" (Longformer model)"),kWe=l(),hf=a("li"),Koe=a("strong"),SWe=o("luke"),RWe=o(" \u2014 "),jk=a("a"),PWe=o("LukeConfig"),BWe=o(" (LUKE model)"),IWe=l(),uf=a("li"),Zoe=a("strong"),qWe=o("lxmert"),NWe=o(" \u2014 "),Dk=a("a"),jWe=o("LxmertConfig"),DWe=o(" (LXMERT model)"),GWe=l(),pf=a("li"),ere=a("strong"),OWe=o("m2m_100"),VWe=o(" \u2014 "),Gk=a("a"),XWe=o("M2M100Config"),zWe=o(" (M2M100 model)"),WWe=l(),_f=a("li"),ore=a("strong"),QWe=o("marian"),HWe=o(" \u2014 "),Ok=a("a"),UWe=o("MarianConfig"),JWe=o(" (Marian model)"),YWe=l(),bf=a("li"),rre=a("strong"),KWe=o("maskformer"),ZWe=o(" \u2014 "),Vk=a("a"),eQe=o("MaskFormerConfig"),oQe=o(" (MaskFormer model)"),rQe=l(),vf=a("li"),tre=a("strong"),tQe=o("mbart"),aQe=o(" \u2014 "),Xk=a("a"),nQe=o("MBartConfig"),sQe=o(" (mBART model)"),lQe=l(),Ff=a("li"),are=a("strong"),iQe=o("megatron-bert"),dQe=o(" \u2014 "),zk=a("a"),cQe=o("MegatronBertConfig"),mQe=o(" (MegatronBert model)"),fQe=l(),Tf=a("li"),nre=a("strong"),gQe=o("mobilebert"),hQe=o(" \u2014 "),Wk=a("a"),uQe=o("MobileBertConfig"),pQe=o(" (MobileBERT model)"),_Qe=l(),Mf=a("li"),sre=a("strong"),bQe=o("mpnet"),vQe=o(" \u2014 "),Qk=a("a"),FQe=o("MPNetConfig"),TQe=o(" (MPNet model)"),MQe=l(),Ef=a("li"),lre=a("strong"),EQe=o("mt5"),CQe=o(" \u2014 "),Hk=a("a"),wQe=o("MT5Config"),AQe=o(" (mT5 model)"),yQe=l(),Cf=a("li"),ire=a("strong"),LQe=o("nystromformer"),xQe=o(" \u2014 "),Uk=a("a"),$Qe=o("NystromformerConfig"),kQe=o(" (Nystromformer model)"),SQe=l(),wf=a("li"),dre=a("strong"),RQe=o("openai-gpt"),PQe=o(" \u2014 "),Jk=a("a"),BQe=o("OpenAIGPTConfig"),IQe=o(" (OpenAI GPT model)"),qQe=l(),Af=a("li"),cre=a("strong"),NQe=o("opt"),jQe=o(" \u2014 "),Yk=a("a"),DQe=o("OPTConfig"),GQe=o(" (OPT model)"),OQe=l(),yf=a("li"),mre=a("strong"),VQe=o("pegasus"),XQe=o(" \u2014 "),Kk=a("a"),zQe=o("PegasusConfig"),WQe=o(" (Pegasus model)"),QQe=l(),Lf=a("li"),fre=a("strong"),HQe=o("perceiver"),UQe=o(" \u2014 "),Zk=a("a"),JQe=o("PerceiverConfig"),YQe=o(" (Perceiver model)"),KQe=l(),xf=a("li"),gre=a("strong"),ZQe=o("plbart"),eHe=o(" \u2014 "),eS=a("a"),oHe=o("PLBartConfig"),rHe=o(" (PLBart model)"),tHe=l(),$f=a("li"),hre=a("strong"),aHe=o("poolformer"),nHe=o(" \u2014 "),oS=a("a"),sHe=o("PoolFormerConfig"),lHe=o(" (PoolFormer model)"),iHe=l(),kf=a("li"),ure=a("strong"),dHe=o("prophetnet"),cHe=o(" \u2014 "),rS=a("a"),mHe=o("ProphetNetConfig"),fHe=o(" (ProphetNet model)"),gHe=l(),Sf=a("li"),pre=a("strong"),hHe=o("qdqbert"),uHe=o(" \u2014 "),tS=a("a"),pHe=o("QDQBertConfig"),_He=o(" (QDQBert model)"),bHe=l(),Rf=a("li"),_re=a("strong"),vHe=o("rag"),FHe=o(" \u2014 "),aS=a("a"),THe=o("RagConfig"),MHe=o(" (RAG model)"),EHe=l(),Pf=a("li"),bre=a("strong"),CHe=o("realm"),wHe=o(" \u2014 "),nS=a("a"),AHe=o("RealmConfig"),yHe=o(" (Realm model)"),LHe=l(),Bf=a("li"),vre=a("strong"),xHe=o("reformer"),$He=o(" \u2014 "),sS=a("a"),kHe=o("ReformerConfig"),SHe=o(" (Reformer model)"),RHe=l(),If=a("li"),Fre=a("strong"),PHe=o("regnet"),BHe=o(" \u2014 "),lS=a("a"),IHe=o("RegNetConfig"),qHe=o(" (RegNet model)"),NHe=l(),qf=a("li"),Tre=a("strong"),jHe=o("rembert"),DHe=o(" \u2014 "),iS=a("a"),GHe=o("RemBertConfig"),OHe=o(" (RemBERT model)"),VHe=l(),Nf=a("li"),Mre=a("strong"),XHe=o("resnet"),zHe=o(" \u2014 "),dS=a("a"),WHe=o("ResNetConfig"),QHe=o(" (ResNet model)"),HHe=l(),jf=a("li"),Ere=a("strong"),UHe=o("retribert"),JHe=o(" \u2014 "),cS=a("a"),YHe=o("RetriBertConfig"),KHe=o(" (RetriBERT model)"),ZHe=l(),Df=a("li"),Cre=a("strong"),eUe=o("roberta"),oUe=o(" \u2014 "),mS=a("a"),rUe=o("RobertaConfig"),tUe=o(" (RoBERTa model)"),aUe=l(),Gf=a("li"),wre=a("strong"),nUe=o("roformer"),sUe=o(" \u2014 "),fS=a("a"),lUe=o("RoFormerConfig"),iUe=o(" (RoFormer model)"),dUe=l(),Of=a("li"),Are=a("strong"),cUe=o("segformer"),mUe=o(" \u2014 "),gS=a("a"),fUe=o("SegformerConfig"),gUe=o(" (SegFormer model)"),hUe=l(),Vf=a("li"),yre=a("strong"),uUe=o("sew"),pUe=o(" \u2014 "),hS=a("a"),_Ue=o("SEWConfig"),bUe=o(" (SEW model)"),vUe=l(),Xf=a("li"),Lre=a("strong"),FUe=o("sew-d"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("SEWDConfig"),EUe=o(" (SEW-D model)"),CUe=l(),zf=a("li"),xre=a("strong"),wUe=o("speech-encoder-decoder"),AUe=o(" \u2014 "),pS=a("a"),yUe=o("SpeechEncoderDecoderConfig"),LUe=o(" (Speech Encoder decoder model)"),xUe=l(),Wf=a("li"),$re=a("strong"),$Ue=o("speech_to_text"),kUe=o(" \u2014 "),_S=a("a"),SUe=o("Speech2TextConfig"),RUe=o(" (Speech2Text model)"),PUe=l(),Qf=a("li"),kre=a("strong"),BUe=o("speech_to_text_2"),IUe=o(" \u2014 "),bS=a("a"),qUe=o("Speech2Text2Config"),NUe=o(" (Speech2Text2 model)"),jUe=l(),Hf=a("li"),Sre=a("strong"),DUe=o("splinter"),GUe=o(" \u2014 "),vS=a("a"),OUe=o("SplinterConfig"),VUe=o(" (Splinter model)"),XUe=l(),Uf=a("li"),Rre=a("strong"),zUe=o("squeezebert"),WUe=o(" \u2014 "),FS=a("a"),QUe=o("SqueezeBertConfig"),HUe=o(" (SqueezeBERT model)"),UUe=l(),Jf=a("li"),Pre=a("strong"),JUe=o("swin"),YUe=o(" \u2014 "),TS=a("a"),KUe=o("SwinConfig"),ZUe=o(" (Swin model)"),eJe=l(),Yf=a("li"),Bre=a("strong"),oJe=o("t5"),rJe=o(" \u2014 "),MS=a("a"),tJe=o("T5Config"),aJe=o(" (T5 model)"),nJe=l(),Kf=a("li"),Ire=a("strong"),sJe=o("tapas"),lJe=o(" \u2014 "),ES=a("a"),iJe=o("TapasConfig"),dJe=o(" (TAPAS model)"),cJe=l(),Zf=a("li"),qre=a("strong"),mJe=o("trajectory_transformer"),fJe=o(" \u2014 "),CS=a("a"),gJe=o("TrajectoryTransformerConfig"),hJe=o(" (Trajectory Transformer model)"),uJe=l(),eg=a("li"),Nre=a("strong"),pJe=o("transfo-xl"),_Je=o(" \u2014 "),wS=a("a"),bJe=o("TransfoXLConfig"),vJe=o(" (Transformer-XL model)"),FJe=l(),og=a("li"),jre=a("strong"),TJe=o("trocr"),MJe=o(" \u2014 "),AS=a("a"),EJe=o("TrOCRConfig"),CJe=o(" (TrOCR model)"),wJe=l(),rg=a("li"),Dre=a("strong"),AJe=o("unispeech"),yJe=o(" \u2014 "),yS=a("a"),LJe=o("UniSpeechConfig"),xJe=o(" (UniSpeech model)"),$Je=l(),tg=a("li"),Gre=a("strong"),kJe=o("unispeech-sat"),SJe=o(" \u2014 "),LS=a("a"),RJe=o("UniSpeechSatConfig"),PJe=o(" (UniSpeechSat model)"),BJe=l(),ag=a("li"),Ore=a("strong"),IJe=o("van"),qJe=o(" \u2014 "),xS=a("a"),NJe=o("VanConfig"),jJe=o(" (VAN model)"),DJe=l(),ng=a("li"),Vre=a("strong"),GJe=o("vilt"),OJe=o(" \u2014 "),$S=a("a"),VJe=o("ViltConfig"),XJe=o(" (ViLT model)"),zJe=l(),sg=a("li"),Xre=a("strong"),WJe=o("vision-encoder-decoder"),QJe=o(" \u2014 "),kS=a("a"),HJe=o("VisionEncoderDecoderConfig"),UJe=o(" (Vision Encoder decoder model)"),JJe=l(),lg=a("li"),zre=a("strong"),YJe=o("vision-text-dual-encoder"),KJe=o(" \u2014 "),SS=a("a"),ZJe=o("VisionTextDualEncoderConfig"),eYe=o(" (VisionTextDualEncoder model)"),oYe=l(),ig=a("li"),Wre=a("strong"),rYe=o("visual_bert"),tYe=o(" \u2014 "),RS=a("a"),aYe=o("VisualBertConfig"),nYe=o(" (VisualBert model)"),sYe=l(),dg=a("li"),Qre=a("strong"),lYe=o("vit"),iYe=o(" \u2014 "),PS=a("a"),dYe=o("ViTConfig"),cYe=o(" (ViT model)"),mYe=l(),cg=a("li"),Hre=a("strong"),fYe=o("vit_mae"),gYe=o(" \u2014 "),BS=a("a"),hYe=o("ViTMAEConfig"),uYe=o(" (ViTMAE model)"),pYe=l(),mg=a("li"),Ure=a("strong"),_Ye=o("wav2vec2"),bYe=o(" \u2014 "),IS=a("a"),vYe=o("Wav2Vec2Config"),FYe=o(" (Wav2Vec2 model)"),TYe=l(),fg=a("li"),Jre=a("strong"),MYe=o("wav2vec2-conformer"),EYe=o(" \u2014 "),qS=a("a"),CYe=o("Wav2Vec2ConformerConfig"),wYe=o(" (Wav2Vec2-Conformer model)"),AYe=l(),gg=a("li"),Yre=a("strong"),yYe=o("wavlm"),LYe=o(" \u2014 "),NS=a("a"),xYe=o("WavLMConfig"),$Ye=o(" (WavLM model)"),kYe=l(),hg=a("li"),Kre=a("strong"),SYe=o("xglm"),RYe=o(" \u2014 "),jS=a("a"),PYe=o("XGLMConfig"),BYe=o(" (XGLM model)"),IYe=l(),ug=a("li"),Zre=a("strong"),qYe=o("xlm"),NYe=o(" \u2014 "),DS=a("a"),jYe=o("XLMConfig"),DYe=o(" (XLM model)"),GYe=l(),pg=a("li"),ete=a("strong"),OYe=o("xlm-prophetnet"),VYe=o(" \u2014 "),GS=a("a"),XYe=o("XLMProphetNetConfig"),zYe=o(" (XLMProphetNet model)"),WYe=l(),_g=a("li"),ote=a("strong"),QYe=o("xlm-roberta"),HYe=o(" \u2014 "),OS=a("a"),UYe=o("XLMRobertaConfig"),JYe=o(" (XLM-RoBERTa model)"),YYe=l(),bg=a("li"),rte=a("strong"),KYe=o("xlm-roberta-xl"),ZYe=o(" \u2014 "),VS=a("a"),eKe=o("XLMRobertaXLConfig"),oKe=o(" (XLM-RoBERTa-XL model)"),rKe=l(),vg=a("li"),tte=a("strong"),tKe=o("xlnet"),aKe=o(" \u2014 "),XS=a("a"),nKe=o("XLNetConfig"),sKe=o(" (XLNet model)"),lKe=l(),Fg=a("li"),ate=a("strong"),iKe=o("yolos"),dKe=o(" \u2014 "),zS=a("a"),cKe=o("YolosConfig"),mKe=o(" (YOLOS model)"),fKe=l(),Tg=a("li"),nte=a("strong"),gKe=o("yoso"),hKe=o(" \u2014 "),WS=a("a"),uKe=o("YosoConfig"),pKe=o(" (YOSO model)"),_Ke=l(),F(Mg.$$.fragment),bKe=l(),Eg=a("div"),F(xy.$$.fragment),vKe=l(),ste=a("p"),FKe=o("Register a new configuration for this class."),jqe=l(),Ti=a("h2"),Cg=a("a"),lte=a("span"),F($y.$$.fragment),TKe=l(),ite=a("span"),MKe=o("AutoTokenizer"),Dqe=l(),wo=a("div"),F(ky.$$.fragment),EKe=l(),Sy=a("p"),CKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),QS=a("a"),wKe=o("AutoTokenizer.from_pretrained()"),AKe=o(" class method."),yKe=l(),Ry=a("p"),LKe=o("This class cannot be instantiated directly using "),dte=a("code"),xKe=o("__init__()"),$Ke=o(" (throws an error)."),kKe=l(),Cr=a("div"),F(Py.$$.fragment),SKe=l(),cte=a("p"),RKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PKe=l(),Aa=a("p"),BKe=o("The tokenizer class to instantiate is selected based on the "),mte=a("code"),IKe=o("model_type"),qKe=o(` property of the config object (either
passed as an argument or loaded from `),fte=a("code"),NKe=o("pretrained_model_name_or_path"),jKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=a("code"),DKe=o("pretrained_model_name_or_path"),GKe=o(":"),OKe=l(),k=a("ul"),Sn=a("li"),hte=a("strong"),VKe=o("albert"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("AlbertTokenizer"),WKe=o(" or "),US=a("a"),QKe=o("AlbertTokenizerFast"),HKe=o(" (ALBERT model)"),UKe=l(),Rn=a("li"),ute=a("strong"),JKe=o("bart"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("BartTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("BartTokenizerFast"),oZe=o(" (BART model)"),rZe=l(),Pn=a("li"),pte=a("strong"),tZe=o("barthez"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("BarthezTokenizer"),sZe=o(" or "),ZS=a("a"),lZe=o("BarthezTokenizerFast"),iZe=o(" (BARThez model)"),dZe=l(),wg=a("li"),_te=a("strong"),cZe=o("bartpho"),mZe=o(" \u2014 "),eR=a("a"),fZe=o("BartphoTokenizer"),gZe=o(" (BARTpho model)"),hZe=l(),Bn=a("li"),bte=a("strong"),uZe=o("bert"),pZe=o(" \u2014 "),oR=a("a"),_Ze=o("BertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("BertTokenizerFast"),FZe=o(" (BERT model)"),TZe=l(),Ag=a("li"),vte=a("strong"),MZe=o("bert-generation"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("BertGenerationTokenizer"),wZe=o(" (Bert Generation model)"),AZe=l(),yg=a("li"),Fte=a("strong"),yZe=o("bert-japanese"),LZe=o(" \u2014 "),aR=a("a"),xZe=o("BertJapaneseTokenizer"),$Ze=o(" (BertJapanese model)"),kZe=l(),Lg=a("li"),Tte=a("strong"),SZe=o("bertweet"),RZe=o(" \u2014 "),nR=a("a"),PZe=o("BertweetTokenizer"),BZe=o(" (Bertweet model)"),IZe=l(),In=a("li"),Mte=a("strong"),qZe=o("big_bird"),NZe=o(" \u2014 "),sR=a("a"),jZe=o("BigBirdTokenizer"),DZe=o(" or "),lR=a("a"),GZe=o("BigBirdTokenizerFast"),OZe=o(" (BigBird model)"),VZe=l(),qn=a("li"),Ete=a("strong"),XZe=o("bigbird_pegasus"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("PegasusTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("PegasusTokenizerFast"),UZe=o(" (BigBirdPegasus model)"),JZe=l(),Nn=a("li"),Cte=a("strong"),YZe=o("blenderbot"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BlenderbotTokenizer"),eeo=o(" or "),mR=a("a"),oeo=o("BlenderbotTokenizerFast"),reo=o(" (Blenderbot model)"),teo=l(),xg=a("li"),wte=a("strong"),aeo=o("blenderbot-small"),neo=o(" \u2014 "),fR=a("a"),seo=o("BlenderbotSmallTokenizer"),leo=o(" (BlenderbotSmall model)"),ieo=l(),$g=a("li"),Ate=a("strong"),deo=o("byt5"),ceo=o(" \u2014 "),gR=a("a"),meo=o("ByT5Tokenizer"),feo=o(" (ByT5 model)"),geo=l(),jn=a("li"),yte=a("strong"),heo=o("camembert"),ueo=o(" \u2014 "),hR=a("a"),peo=o("CamembertTokenizer"),_eo=o(" or "),uR=a("a"),beo=o("CamembertTokenizerFast"),veo=o(" (CamemBERT model)"),Feo=l(),kg=a("li"),Lte=a("strong"),Teo=o("canine"),Meo=o(" \u2014 "),pR=a("a"),Eeo=o("CanineTokenizer"),Ceo=o(" (Canine model)"),weo=l(),Dn=a("li"),xte=a("strong"),Aeo=o("clip"),yeo=o(" \u2014 "),_R=a("a"),Leo=o("CLIPTokenizer"),xeo=o(" or "),bR=a("a"),$eo=o("CLIPTokenizerFast"),keo=o(" (CLIP model)"),Seo=l(),Gn=a("li"),$te=a("strong"),Reo=o("convbert"),Peo=o(" \u2014 "),vR=a("a"),Beo=o("ConvBertTokenizer"),Ieo=o(" or "),FR=a("a"),qeo=o("ConvBertTokenizerFast"),Neo=o(" (ConvBERT model)"),jeo=l(),On=a("li"),kte=a("strong"),Deo=o("cpm"),Geo=o(" \u2014 "),TR=a("a"),Oeo=o("CpmTokenizer"),Veo=o(" or "),MR=a("a"),Xeo=o("CpmTokenizerFast"),zeo=o(" (CPM model)"),Weo=l(),Sg=a("li"),Ste=a("strong"),Qeo=o("ctrl"),Heo=o(" \u2014 "),ER=a("a"),Ueo=o("CTRLTokenizer"),Jeo=o(" (CTRL model)"),Yeo=l(),Vn=a("li"),Rte=a("strong"),Keo=o("data2vec-text"),Zeo=o(" \u2014 "),CR=a("a"),eoo=o("RobertaTokenizer"),ooo=o(" or "),wR=a("a"),roo=o("RobertaTokenizerFast"),too=o(" (Data2VecText model)"),aoo=l(),Xn=a("li"),Pte=a("strong"),noo=o("deberta"),soo=o(" \u2014 "),AR=a("a"),loo=o("DebertaTokenizer"),ioo=o(" or "),yR=a("a"),doo=o("DebertaTokenizerFast"),coo=o(" (DeBERTa model)"),moo=l(),zn=a("li"),Bte=a("strong"),foo=o("deberta-v2"),goo=o(" \u2014 "),LR=a("a"),hoo=o("DebertaV2Tokenizer"),uoo=o(" or "),xR=a("a"),poo=o("DebertaV2TokenizerFast"),_oo=o(" (DeBERTa-v2 model)"),boo=l(),Wn=a("li"),Ite=a("strong"),voo=o("distilbert"),Foo=o(" \u2014 "),$R=a("a"),Too=o("DistilBertTokenizer"),Moo=o(" or "),kR=a("a"),Eoo=o("DistilBertTokenizerFast"),Coo=o(" (DistilBERT model)"),woo=l(),Qn=a("li"),qte=a("strong"),Aoo=o("dpr"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("DPRQuestionEncoderTokenizer"),xoo=o(" or "),RR=a("a"),$oo=o("DPRQuestionEncoderTokenizerFast"),koo=o(" (DPR model)"),Soo=l(),Hn=a("li"),Nte=a("strong"),Roo=o("electra"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("ElectraTokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("ElectraTokenizerFast"),Noo=o(" (ELECTRA model)"),joo=l(),Rg=a("li"),jte=a("strong"),Doo=o("flaubert"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("FlaubertTokenizer"),Voo=o(" (FlauBERT model)"),Xoo=l(),Un=a("li"),Dte=a("strong"),zoo=o("fnet"),Woo=o(" \u2014 "),qR=a("a"),Qoo=o("FNetTokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("FNetTokenizerFast"),Joo=o(" (FNet model)"),Yoo=l(),Pg=a("li"),Gte=a("strong"),Koo=o("fsmt"),Zoo=o(" \u2014 "),jR=a("a"),ero=o("FSMTTokenizer"),oro=o(" (FairSeq Machine-Translation model)"),rro=l(),Jn=a("li"),Ote=a("strong"),tro=o("funnel"),aro=o(" \u2014 "),DR=a("a"),nro=o("FunnelTokenizer"),sro=o(" or "),GR=a("a"),lro=o("FunnelTokenizerFast"),iro=o(" (Funnel Transformer model)"),dro=l(),Yn=a("li"),Vte=a("strong"),cro=o("gpt2"),mro=o(" \u2014 "),OR=a("a"),fro=o("GPT2Tokenizer"),gro=o(" or "),VR=a("a"),hro=o("GPT2TokenizerFast"),uro=o(" (OpenAI GPT-2 model)"),pro=l(),Kn=a("li"),Xte=a("strong"),_ro=o("gpt_neo"),bro=o(" \u2014 "),XR=a("a"),vro=o("GPT2Tokenizer"),Fro=o(" or "),zR=a("a"),Tro=o("GPT2TokenizerFast"),Mro=o(" (GPT Neo model)"),Ero=l(),Zn=a("li"),zte=a("strong"),Cro=o("gptj"),wro=o(" \u2014 "),WR=a("a"),Aro=o("GPT2Tokenizer"),yro=o(" or "),QR=a("a"),Lro=o("GPT2TokenizerFast"),xro=o(" (GPT-J model)"),$ro=l(),es=a("li"),Wte=a("strong"),kro=o("herbert"),Sro=o(" \u2014 "),HR=a("a"),Rro=o("HerbertTokenizer"),Pro=o(" or "),UR=a("a"),Bro=o("HerbertTokenizerFast"),Iro=o(" (HerBERT model)"),qro=l(),Bg=a("li"),Qte=a("strong"),Nro=o("hubert"),jro=o(" \u2014 "),JR=a("a"),Dro=o("Wav2Vec2CTCTokenizer"),Gro=o(" (Hubert model)"),Oro=l(),os=a("li"),Hte=a("strong"),Vro=o("ibert"),Xro=o(" \u2014 "),YR=a("a"),zro=o("RobertaTokenizer"),Wro=o(" or "),KR=a("a"),Qro=o("RobertaTokenizerFast"),Hro=o(" (I-BERT model)"),Uro=l(),rs=a("li"),Ute=a("strong"),Jro=o("layoutlm"),Yro=o(" \u2014 "),ZR=a("a"),Kro=o("LayoutLMTokenizer"),Zro=o(" or "),eP=a("a"),eto=o("LayoutLMTokenizerFast"),oto=o(" (LayoutLM model)"),rto=l(),ts=a("li"),Jte=a("strong"),tto=o("layoutlmv2"),ato=o(" \u2014 "),oP=a("a"),nto=o("LayoutLMv2Tokenizer"),sto=o(" or "),rP=a("a"),lto=o("LayoutLMv2TokenizerFast"),ito=o(" (LayoutLMv2 model)"),dto=l(),as=a("li"),Yte=a("strong"),cto=o("layoutlmv3"),mto=o(" \u2014 "),tP=a("a"),fto=o("LayoutLMv3Tokenizer"),gto=o(" or "),aP=a("a"),hto=o("LayoutLMv3TokenizerFast"),uto=o(" (LayoutLMv3 model)"),pto=l(),ns=a("li"),Kte=a("strong"),_to=o("layoutxlm"),bto=o(" \u2014 "),nP=a("a"),vto=o("LayoutXLMTokenizer"),Fto=o(" or "),sP=a("a"),Tto=o("LayoutXLMTokenizerFast"),Mto=o(" (LayoutXLM model)"),Eto=l(),ss=a("li"),Zte=a("strong"),Cto=o("led"),wto=o(" \u2014 "),lP=a("a"),Ato=o("LEDTokenizer"),yto=o(" or "),iP=a("a"),Lto=o("LEDTokenizerFast"),xto=o(" (LED model)"),$to=l(),ls=a("li"),eae=a("strong"),kto=o("longformer"),Sto=o(" \u2014 "),dP=a("a"),Rto=o("LongformerTokenizer"),Pto=o(" or "),cP=a("a"),Bto=o("LongformerTokenizerFast"),Ito=o(" (Longformer model)"),qto=l(),Ig=a("li"),oae=a("strong"),Nto=o("luke"),jto=o(" \u2014 "),mP=a("a"),Dto=o("LukeTokenizer"),Gto=o(" (LUKE model)"),Oto=l(),is=a("li"),rae=a("strong"),Vto=o("lxmert"),Xto=o(" \u2014 "),fP=a("a"),zto=o("LxmertTokenizer"),Wto=o(" or "),gP=a("a"),Qto=o("LxmertTokenizerFast"),Hto=o(" (LXMERT model)"),Uto=l(),qg=a("li"),tae=a("strong"),Jto=o("m2m_100"),Yto=o(" \u2014 "),hP=a("a"),Kto=o("M2M100Tokenizer"),Zto=o(" (M2M100 model)"),eao=l(),Ng=a("li"),aae=a("strong"),oao=o("marian"),rao=o(" \u2014 "),uP=a("a"),tao=o("MarianTokenizer"),aao=o(" (Marian model)"),nao=l(),ds=a("li"),nae=a("strong"),sao=o("mbart"),lao=o(" \u2014 "),pP=a("a"),iao=o("MBartTokenizer"),dao=o(" or "),_P=a("a"),cao=o("MBartTokenizerFast"),mao=o(" (mBART model)"),fao=l(),cs=a("li"),sae=a("strong"),gao=o("mbart50"),hao=o(" \u2014 "),bP=a("a"),uao=o("MBart50Tokenizer"),pao=o(" or "),vP=a("a"),_ao=o("MBart50TokenizerFast"),bao=o(" (mBART-50 model)"),vao=l(),ms=a("li"),lae=a("strong"),Fao=o("megatron-bert"),Tao=o(" \u2014 "),FP=a("a"),Mao=o("BertTokenizer"),Eao=o(" or "),TP=a("a"),Cao=o("BertTokenizerFast"),wao=o(" (MegatronBert model)"),Aao=l(),jg=a("li"),iae=a("strong"),yao=o("mluke"),Lao=o(" \u2014 "),MP=a("a"),xao=o("MLukeTokenizer"),$ao=o(" (mLUKE model)"),kao=l(),fs=a("li"),dae=a("strong"),Sao=o("mobilebert"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("MobileBertTokenizer"),Bao=o(" or "),CP=a("a"),Iao=o("MobileBertTokenizerFast"),qao=o(" (MobileBERT model)"),Nao=l(),gs=a("li"),cae=a("strong"),jao=o("mpnet"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("MPNetTokenizer"),Oao=o(" or "),AP=a("a"),Vao=o("MPNetTokenizerFast"),Xao=o(" (MPNet model)"),zao=l(),hs=a("li"),mae=a("strong"),Wao=o("mt5"),Qao=o(" \u2014 "),yP=a("a"),Hao=o("MT5Tokenizer"),Uao=o(" or "),LP=a("a"),Jao=o("MT5TokenizerFast"),Yao=o(" (mT5 model)"),Kao=l(),us=a("li"),fae=a("strong"),Zao=o("nystromformer"),eno=o(" \u2014 "),xP=a("a"),ono=o("AlbertTokenizer"),rno=o(" or "),$P=a("a"),tno=o("AlbertTokenizerFast"),ano=o(" (Nystromformer model)"),nno=l(),ps=a("li"),gae=a("strong"),sno=o("openai-gpt"),lno=o(" \u2014 "),kP=a("a"),ino=o("OpenAIGPTTokenizer"),dno=o(" or "),SP=a("a"),cno=o("OpenAIGPTTokenizerFast"),mno=o(" (OpenAI GPT model)"),fno=l(),Dg=a("li"),hae=a("strong"),gno=o("opt"),hno=o(" \u2014 "),RP=a("a"),uno=o("GPT2Tokenizer"),pno=o(" (OPT model)"),_no=l(),_s=a("li"),uae=a("strong"),bno=o("pegasus"),vno=o(" \u2014 "),PP=a("a"),Fno=o("PegasusTokenizer"),Tno=o(" or "),BP=a("a"),Mno=o("PegasusTokenizerFast"),Eno=o(" (Pegasus model)"),Cno=l(),Gg=a("li"),pae=a("strong"),wno=o("perceiver"),Ano=o(" \u2014 "),IP=a("a"),yno=o("PerceiverTokenizer"),Lno=o(" (Perceiver model)"),xno=l(),Og=a("li"),_ae=a("strong"),$no=o("phobert"),kno=o(" \u2014 "),qP=a("a"),Sno=o("PhobertTokenizer"),Rno=o(" (PhoBERT model)"),Pno=l(),Vg=a("li"),bae=a("strong"),Bno=o("plbart"),Ino=o(" \u2014 "),NP=a("a"),qno=o("PLBartTokenizer"),Nno=o(" (PLBart model)"),jno=l(),Xg=a("li"),vae=a("strong"),Dno=o("prophetnet"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("ProphetNetTokenizer"),Vno=o(" (ProphetNet model)"),Xno=l(),bs=a("li"),Fae=a("strong"),zno=o("qdqbert"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("BertTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("BertTokenizerFast"),Jno=o(" (QDQBert model)"),Yno=l(),zg=a("li"),Tae=a("strong"),Kno=o("rag"),Zno=o(" \u2014 "),OP=a("a"),eso=o("RagTokenizer"),oso=o(" (RAG model)"),rso=l(),vs=a("li"),Mae=a("strong"),tso=o("realm"),aso=o(" \u2014 "),VP=a("a"),nso=o("RealmTokenizer"),sso=o(" or "),XP=a("a"),lso=o("RealmTokenizerFast"),iso=o(" (Realm model)"),dso=l(),Fs=a("li"),Eae=a("strong"),cso=o("reformer"),mso=o(" \u2014 "),zP=a("a"),fso=o("ReformerTokenizer"),gso=o(" or "),WP=a("a"),hso=o("ReformerTokenizerFast"),uso=o(" (Reformer model)"),pso=l(),Ts=a("li"),Cae=a("strong"),_so=o("rembert"),bso=o(" \u2014 "),QP=a("a"),vso=o("RemBertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("RemBertTokenizerFast"),Mso=o(" (RemBERT model)"),Eso=l(),Ms=a("li"),wae=a("strong"),Cso=o("retribert"),wso=o(" \u2014 "),UP=a("a"),Aso=o("RetriBertTokenizer"),yso=o(" or "),JP=a("a"),Lso=o("RetriBertTokenizerFast"),xso=o(" (RetriBERT model)"),$so=l(),Es=a("li"),Aae=a("strong"),kso=o("roberta"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("RobertaTokenizer"),Pso=o(" or "),KP=a("a"),Bso=o("RobertaTokenizerFast"),Iso=o(" (RoBERTa model)"),qso=l(),Cs=a("li"),yae=a("strong"),Nso=o("roformer"),jso=o(" \u2014 "),ZP=a("a"),Dso=o("RoFormerTokenizer"),Gso=o(" or "),eB=a("a"),Oso=o("RoFormerTokenizerFast"),Vso=o(" (RoFormer model)"),Xso=l(),Wg=a("li"),Lae=a("strong"),zso=o("speech_to_text"),Wso=o(" \u2014 "),oB=a("a"),Qso=o("Speech2TextTokenizer"),Hso=o(" (Speech2Text model)"),Uso=l(),Qg=a("li"),xae=a("strong"),Jso=o("speech_to_text_2"),Yso=o(" \u2014 "),rB=a("a"),Kso=o("Speech2Text2Tokenizer"),Zso=o(" (Speech2Text2 model)"),elo=l(),ws=a("li"),$ae=a("strong"),olo=o("splinter"),rlo=o(" \u2014 "),tB=a("a"),tlo=o("SplinterTokenizer"),alo=o(" or "),aB=a("a"),nlo=o("SplinterTokenizerFast"),slo=o(" (Splinter model)"),llo=l(),As=a("li"),kae=a("strong"),ilo=o("squeezebert"),dlo=o(" \u2014 "),nB=a("a"),clo=o("SqueezeBertTokenizer"),mlo=o(" or "),sB=a("a"),flo=o("SqueezeBertTokenizerFast"),glo=o(" (SqueezeBERT model)"),hlo=l(),ys=a("li"),Sae=a("strong"),ulo=o("t5"),plo=o(" \u2014 "),lB=a("a"),_lo=o("T5Tokenizer"),blo=o(" or "),iB=a("a"),vlo=o("T5TokenizerFast"),Flo=o(" (T5 model)"),Tlo=l(),Hg=a("li"),Rae=a("strong"),Mlo=o("tapas"),Elo=o(" \u2014 "),dB=a("a"),Clo=o("TapasTokenizer"),wlo=o(" (TAPAS model)"),Alo=l(),Ug=a("li"),Pae=a("strong"),ylo=o("tapex"),Llo=o(" \u2014 "),cB=a("a"),xlo=o("TapexTokenizer"),$lo=o(" (TAPEX model)"),klo=l(),Jg=a("li"),Bae=a("strong"),Slo=o("transfo-xl"),Rlo=o(" \u2014 "),mB=a("a"),Plo=o("TransfoXLTokenizer"),Blo=o(" (Transformer-XL model)"),Ilo=l(),Ls=a("li"),Iae=a("strong"),qlo=o("visual_bert"),Nlo=o(" \u2014 "),fB=a("a"),jlo=o("BertTokenizer"),Dlo=o(" or "),gB=a("a"),Glo=o("BertTokenizerFast"),Olo=o(" (VisualBert model)"),Vlo=l(),Yg=a("li"),qae=a("strong"),Xlo=o("wav2vec2"),zlo=o(" \u2014 "),hB=a("a"),Wlo=o("Wav2Vec2CTCTokenizer"),Qlo=o(" (Wav2Vec2 model)"),Hlo=l(),Kg=a("li"),Nae=a("strong"),Ulo=o("wav2vec2-conformer"),Jlo=o(" \u2014 "),uB=a("a"),Ylo=o("Wav2Vec2CTCTokenizer"),Klo=o(" (Wav2Vec2-Conformer model)"),Zlo=l(),Zg=a("li"),jae=a("strong"),eio=o("wav2vec2_phoneme"),oio=o(" \u2014 "),pB=a("a"),rio=o("Wav2Vec2PhonemeCTCTokenizer"),tio=o(" (Wav2Vec2Phoneme model)"),aio=l(),xs=a("li"),Dae=a("strong"),nio=o("xglm"),sio=o(" \u2014 "),_B=a("a"),lio=o("XGLMTokenizer"),iio=o(" or "),bB=a("a"),dio=o("XGLMTokenizerFast"),cio=o(" (XGLM model)"),mio=l(),eh=a("li"),Gae=a("strong"),fio=o("xlm"),gio=o(" \u2014 "),vB=a("a"),hio=o("XLMTokenizer"),uio=o(" (XLM model)"),pio=l(),oh=a("li"),Oae=a("strong"),_io=o("xlm-prophetnet"),bio=o(" \u2014 "),FB=a("a"),vio=o("XLMProphetNetTokenizer"),Fio=o(" (XLMProphetNet model)"),Tio=l(),$s=a("li"),Vae=a("strong"),Mio=o("xlm-roberta"),Eio=o(" \u2014 "),TB=a("a"),Cio=o("XLMRobertaTokenizer"),wio=o(" or "),MB=a("a"),Aio=o("XLMRobertaTokenizerFast"),yio=o(" (XLM-RoBERTa model)"),Lio=l(),ks=a("li"),Xae=a("strong"),xio=o("xlm-roberta-xl"),$io=o(" \u2014 "),EB=a("a"),kio=o("RobertaTokenizer"),Sio=o(" or "),CB=a("a"),Rio=o("RobertaTokenizerFast"),Pio=o(" (XLM-RoBERTa-XL model)"),Bio=l(),Ss=a("li"),zae=a("strong"),Iio=o("xlnet"),qio=o(" \u2014 "),wB=a("a"),Nio=o("XLNetTokenizer"),jio=o(" or "),AB=a("a"),Dio=o("XLNetTokenizerFast"),Gio=o(" (XLNet model)"),Oio=l(),Rs=a("li"),Wae=a("strong"),Vio=o("yoso"),Xio=o(" \u2014 "),yB=a("a"),zio=o("AlbertTokenizer"),Wio=o(" or "),LB=a("a"),Qio=o("AlbertTokenizerFast"),Hio=o(" (YOSO model)"),Uio=l(),F(rh.$$.fragment),Jio=l(),th=a("div"),F(By.$$.fragment),Yio=l(),Qae=a("p"),Kio=o("Register a new tokenizer in this mapping."),Gqe=l(),Mi=a("h2"),ah=a("a"),Hae=a("span"),F(Iy.$$.fragment),Zio=l(),Uae=a("span"),edo=o("AutoFeatureExtractor"),Oqe=l(),Ao=a("div"),F(qy.$$.fragment),odo=l(),Ny=a("p"),rdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xB=a("a"),tdo=o("AutoFeatureExtractor.from_pretrained()"),ado=o(" class method."),ndo=l(),jy=a("p"),sdo=o("This class cannot be instantiated directly using "),Jae=a("code"),ldo=o("__init__()"),ido=o(" (throws an error)."),ddo=l(),He=a("div"),F(Dy.$$.fragment),cdo=l(),Yae=a("p"),mdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fdo=l(),ya=a("p"),gdo=o("The feature extractor class to instantiate is selected based on the "),Kae=a("code"),hdo=o("model_type"),udo=o(` property of the config object
(either passed as an argument or loaded from `),Zae=a("code"),pdo=o("pretrained_model_name_or_path"),_do=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ene=a("code"),bdo=o("pretrained_model_name_or_path"),vdo=o(":"),Fdo=l(),K=a("ul"),nh=a("li"),one=a("strong"),Tdo=o("beit"),Mdo=o(" \u2014 "),$B=a("a"),Edo=o("BeitFeatureExtractor"),Cdo=o(" (BEiT model)"),wdo=l(),sh=a("li"),rne=a("strong"),Ado=o("clip"),ydo=o(" \u2014 "),kB=a("a"),Ldo=o("CLIPFeatureExtractor"),xdo=o(" (CLIP model)"),$do=l(),lh=a("li"),tne=a("strong"),kdo=o("convnext"),Sdo=o(" \u2014 "),SB=a("a"),Rdo=o("ConvNextFeatureExtractor"),Pdo=o(" (ConvNext model)"),Bdo=l(),ih=a("li"),ane=a("strong"),Ido=o("cvt"),qdo=o(" \u2014 "),RB=a("a"),Ndo=o("ConvNextFeatureExtractor"),jdo=o(" (CvT model)"),Ddo=l(),dh=a("li"),nne=a("strong"),Gdo=o("data2vec-audio"),Odo=o(" \u2014 "),PB=a("a"),Vdo=o("Wav2Vec2FeatureExtractor"),Xdo=o(" (Data2VecAudio model)"),zdo=l(),ch=a("li"),sne=a("strong"),Wdo=o("data2vec-vision"),Qdo=o(" \u2014 "),BB=a("a"),Hdo=o("BeitFeatureExtractor"),Udo=o(" (Data2VecVision model)"),Jdo=l(),mh=a("li"),lne=a("strong"),Ydo=o("deit"),Kdo=o(" \u2014 "),IB=a("a"),Zdo=o("DeiTFeatureExtractor"),eco=o(" (DeiT model)"),oco=l(),fh=a("li"),ine=a("strong"),rco=o("detr"),tco=o(" \u2014 "),qB=a("a"),aco=o("DetrFeatureExtractor"),nco=o(" (DETR model)"),sco=l(),gh=a("li"),dne=a("strong"),lco=o("dpt"),ico=o(" \u2014 "),NB=a("a"),dco=o("DPTFeatureExtractor"),cco=o(" (DPT model)"),mco=l(),hh=a("li"),cne=a("strong"),fco=o("flava"),gco=o(" \u2014 "),jB=a("a"),hco=o("FlavaFeatureExtractor"),uco=o(" (Flava model)"),pco=l(),uh=a("li"),mne=a("strong"),_co=o("glpn"),bco=o(" \u2014 "),DB=a("a"),vco=o("GLPNFeatureExtractor"),Fco=o(" (GLPN model)"),Tco=l(),ph=a("li"),fne=a("strong"),Mco=o("hubert"),Eco=o(" \u2014 "),GB=a("a"),Cco=o("Wav2Vec2FeatureExtractor"),wco=o(" (Hubert model)"),Aco=l(),_h=a("li"),gne=a("strong"),yco=o("layoutlmv2"),Lco=o(" \u2014 "),OB=a("a"),xco=o("LayoutLMv2FeatureExtractor"),$co=o(" (LayoutLMv2 model)"),kco=l(),bh=a("li"),hne=a("strong"),Sco=o("layoutlmv3"),Rco=o(" \u2014 "),VB=a("a"),Pco=o("LayoutLMv3FeatureExtractor"),Bco=o(" (LayoutLMv3 model)"),Ico=l(),vh=a("li"),une=a("strong"),qco=o("maskformer"),Nco=o(" \u2014 "),XB=a("a"),jco=o("MaskFormerFeatureExtractor"),Dco=o(" (MaskFormer model)"),Gco=l(),Fh=a("li"),pne=a("strong"),Oco=o("perceiver"),Vco=o(" \u2014 "),zB=a("a"),Xco=o("PerceiverFeatureExtractor"),zco=o(" (Perceiver model)"),Wco=l(),Th=a("li"),_ne=a("strong"),Qco=o("poolformer"),Hco=o(" \u2014 "),WB=a("a"),Uco=o("PoolFormerFeatureExtractor"),Jco=o(" (PoolFormer model)"),Yco=l(),Mh=a("li"),bne=a("strong"),Kco=o("regnet"),Zco=o(" \u2014 "),QB=a("a"),emo=o("ConvNextFeatureExtractor"),omo=o(" (RegNet model)"),rmo=l(),Eh=a("li"),vne=a("strong"),tmo=o("resnet"),amo=o(" \u2014 "),HB=a("a"),nmo=o("ConvNextFeatureExtractor"),smo=o(" (ResNet model)"),lmo=l(),Ch=a("li"),Fne=a("strong"),imo=o("segformer"),dmo=o(" \u2014 "),UB=a("a"),cmo=o("SegformerFeatureExtractor"),mmo=o(" (SegFormer model)"),fmo=l(),wh=a("li"),Tne=a("strong"),gmo=o("speech_to_text"),hmo=o(" \u2014 "),JB=a("a"),umo=o("Speech2TextFeatureExtractor"),pmo=o(" (Speech2Text model)"),_mo=l(),Ah=a("li"),Mne=a("strong"),bmo=o("swin"),vmo=o(" \u2014 "),YB=a("a"),Fmo=o("ViTFeatureExtractor"),Tmo=o(" (Swin model)"),Mmo=l(),yh=a("li"),Ene=a("strong"),Emo=o("van"),Cmo=o(" \u2014 "),KB=a("a"),wmo=o("ConvNextFeatureExtractor"),Amo=o(" (VAN model)"),ymo=l(),Lh=a("li"),Cne=a("strong"),Lmo=o("vit"),xmo=o(" \u2014 "),ZB=a("a"),$mo=o("ViTFeatureExtractor"),kmo=o(" (ViT model)"),Smo=l(),xh=a("li"),wne=a("strong"),Rmo=o("vit_mae"),Pmo=o(" \u2014 "),eI=a("a"),Bmo=o("ViTFeatureExtractor"),Imo=o(" (ViTMAE model)"),qmo=l(),$h=a("li"),Ane=a("strong"),Nmo=o("wav2vec2"),jmo=o(" \u2014 "),oI=a("a"),Dmo=o("Wav2Vec2FeatureExtractor"),Gmo=o(" (Wav2Vec2 model)"),Omo=l(),kh=a("li"),yne=a("strong"),Vmo=o("wav2vec2-conformer"),Xmo=o(" \u2014 "),rI=a("a"),zmo=o("Wav2Vec2FeatureExtractor"),Wmo=o(" (Wav2Vec2-Conformer model)"),Qmo=l(),Sh=a("li"),Lne=a("strong"),Hmo=o("yolos"),Umo=o(" \u2014 "),tI=a("a"),Jmo=o("YolosFeatureExtractor"),Ymo=o(" (YOLOS model)"),Kmo=l(),F(Rh.$$.fragment),Zmo=l(),F(Ph.$$.fragment),efo=l(),Bh=a("div"),F(Gy.$$.fragment),ofo=l(),xne=a("p"),rfo=o("Register a new feature extractor for this class."),Vqe=l(),Ei=a("h2"),Ih=a("a"),$ne=a("span"),F(Oy.$$.fragment),tfo=l(),kne=a("span"),afo=o("AutoProcessor"),Xqe=l(),yo=a("div"),F(Vy.$$.fragment),nfo=l(),Xy=a("p"),sfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aI=a("a"),lfo=o("AutoProcessor.from_pretrained()"),ifo=o(" class method."),dfo=l(),zy=a("p"),cfo=o("This class cannot be instantiated directly using "),Sne=a("code"),mfo=o("__init__()"),ffo=o(" (throws an error)."),gfo=l(),Ue=a("div"),F(Wy.$$.fragment),hfo=l(),Rne=a("p"),ufo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pfo=l(),Ci=a("p"),_fo=o("The processor class to instantiate is selected based on the "),Pne=a("code"),bfo=o("model_type"),vfo=o(` property of the config object (either
passed as an argument or loaded from `),Bne=a("code"),Ffo=o("pretrained_model_name_or_path"),Tfo=o(" if possible):"),Mfo=l(),he=a("ul"),qh=a("li"),Ine=a("strong"),Efo=o("clip"),Cfo=o(" \u2014 "),nI=a("a"),wfo=o("CLIPProcessor"),Afo=o(" (CLIP model)"),yfo=l(),Nh=a("li"),qne=a("strong"),Lfo=o("flava"),xfo=o(" \u2014 "),Nne=a("code"),$fo=o("FLAVAProcessor"),kfo=o(" (Flava model)"),Sfo=l(),jh=a("li"),jne=a("strong"),Rfo=o("layoutlmv2"),Pfo=o(" \u2014 "),sI=a("a"),Bfo=o("LayoutLMv2Processor"),Ifo=o(" (LayoutLMv2 model)"),qfo=l(),Dh=a("li"),Dne=a("strong"),Nfo=o("layoutlmv3"),jfo=o(" \u2014 "),lI=a("a"),Dfo=o("LayoutLMv3Processor"),Gfo=o(" (LayoutLMv3 model)"),Ofo=l(),Gh=a("li"),Gne=a("strong"),Vfo=o("layoutxlm"),Xfo=o(" \u2014 "),iI=a("a"),zfo=o("LayoutXLMProcessor"),Wfo=o(" (LayoutXLM model)"),Qfo=l(),Oh=a("li"),One=a("strong"),Hfo=o("sew"),Ufo=o(" \u2014 "),dI=a("a"),Jfo=o("Wav2Vec2Processor"),Yfo=o(" (SEW model)"),Kfo=l(),Vh=a("li"),Vne=a("strong"),Zfo=o("sew-d"),ego=o(" \u2014 "),cI=a("a"),ogo=o("Wav2Vec2Processor"),rgo=o(" (SEW-D model)"),tgo=l(),Xh=a("li"),Xne=a("strong"),ago=o("speech_to_text"),ngo=o(" \u2014 "),mI=a("a"),sgo=o("Speech2TextProcessor"),lgo=o(" (Speech2Text model)"),igo=l(),zh=a("li"),zne=a("strong"),dgo=o("speech_to_text_2"),cgo=o(" \u2014 "),fI=a("a"),mgo=o("Speech2Text2Processor"),fgo=o(" (Speech2Text2 model)"),ggo=l(),Wh=a("li"),Wne=a("strong"),hgo=o("trocr"),ugo=o(" \u2014 "),gI=a("a"),pgo=o("TrOCRProcessor"),_go=o(" (TrOCR model)"),bgo=l(),Qh=a("li"),Qne=a("strong"),vgo=o("unispeech"),Fgo=o(" \u2014 "),hI=a("a"),Tgo=o("Wav2Vec2Processor"),Mgo=o(" (UniSpeech model)"),Ego=l(),Hh=a("li"),Hne=a("strong"),Cgo=o("unispeech-sat"),wgo=o(" \u2014 "),uI=a("a"),Ago=o("Wav2Vec2Processor"),ygo=o(" (UniSpeechSat model)"),Lgo=l(),Uh=a("li"),Une=a("strong"),xgo=o("vilt"),$go=o(" \u2014 "),pI=a("a"),kgo=o("ViltProcessor"),Sgo=o(" (ViLT model)"),Rgo=l(),Jh=a("li"),Jne=a("strong"),Pgo=o("vision-text-dual-encoder"),Bgo=o(" \u2014 "),_I=a("a"),Igo=o("VisionTextDualEncoderProcessor"),qgo=o(" (VisionTextDualEncoder model)"),Ngo=l(),Yh=a("li"),Yne=a("strong"),jgo=o("wav2vec2"),Dgo=o(" \u2014 "),bI=a("a"),Ggo=o("Wav2Vec2Processor"),Ogo=o(" (Wav2Vec2 model)"),Vgo=l(),Kh=a("li"),Kne=a("strong"),Xgo=o("wav2vec2-conformer"),zgo=o(" \u2014 "),vI=a("a"),Wgo=o("Wav2Vec2Processor"),Qgo=o(" (Wav2Vec2-Conformer model)"),Hgo=l(),Zh=a("li"),Zne=a("strong"),Ugo=o("wavlm"),Jgo=o(" \u2014 "),FI=a("a"),Ygo=o("Wav2Vec2Processor"),Kgo=o(" (WavLM model)"),Zgo=l(),F(eu.$$.fragment),eho=l(),F(ou.$$.fragment),oho=l(),ru=a("div"),F(Qy.$$.fragment),rho=l(),ese=a("p"),tho=o("Register a new processor for this class."),zqe=l(),wi=a("h2"),tu=a("a"),ose=a("span"),F(Hy.$$.fragment),aho=l(),rse=a("span"),nho=o("AutoModel"),Wqe=l(),Lo=a("div"),F(Uy.$$.fragment),sho=l(),Ai=a("p"),lho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TI=a("a"),iho=o("from_pretrained()"),dho=o(" class method or the "),MI=a("a"),cho=o("from_config()"),mho=o(` class
method.`),fho=l(),Jy=a("p"),gho=o("This class cannot be instantiated directly using "),tse=a("code"),hho=o("__init__()"),uho=o(" (throws an error)."),pho=l(),tt=a("div"),F(Yy.$$.fragment),_ho=l(),ase=a("p"),bho=o("Instantiates one of the base model classes of the library from a configuration."),vho=l(),yi=a("p"),Fho=o(`Note:
Loading a model from its configuration file does `),nse=a("strong"),Tho=o("not"),Mho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=a("a"),Eho=o("from_pretrained()"),Cho=o(" to load the model weights."),who=l(),F(au.$$.fragment),Aho=l(),Je=a("div"),F(Ky.$$.fragment),yho=l(),sse=a("p"),Lho=o("Instantiate one of the base model classes of the library from a pretrained model."),xho=l(),La=a("p"),$ho=o("The model class to instantiate is selected based on the "),lse=a("code"),kho=o("model_type"),Sho=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),Rho=o("pretrained_model_name_or_path"),Pho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),Bho=o("pretrained_model_name_or_path"),Iho=o(":"),qho=l(),x=a("ul"),nu=a("li"),cse=a("strong"),Nho=o("albert"),jho=o(" \u2014 "),CI=a("a"),Dho=o("AlbertModel"),Gho=o(" (ALBERT model)"),Oho=l(),su=a("li"),mse=a("strong"),Vho=o("bart"),Xho=o(" \u2014 "),wI=a("a"),zho=o("BartModel"),Who=o(" (BART model)"),Qho=l(),lu=a("li"),fse=a("strong"),Hho=o("beit"),Uho=o(" \u2014 "),AI=a("a"),Jho=o("BeitModel"),Yho=o(" (BEiT model)"),Kho=l(),iu=a("li"),gse=a("strong"),Zho=o("bert"),euo=o(" \u2014 "),yI=a("a"),ouo=o("BertModel"),ruo=o(" (BERT model)"),tuo=l(),du=a("li"),hse=a("strong"),auo=o("bert-generation"),nuo=o(" \u2014 "),LI=a("a"),suo=o("BertGenerationEncoder"),luo=o(" (Bert Generation model)"),iuo=l(),cu=a("li"),use=a("strong"),duo=o("big_bird"),cuo=o(" \u2014 "),xI=a("a"),muo=o("BigBirdModel"),fuo=o(" (BigBird model)"),guo=l(),mu=a("li"),pse=a("strong"),huo=o("bigbird_pegasus"),uuo=o(" \u2014 "),$I=a("a"),puo=o("BigBirdPegasusModel"),_uo=o(" (BigBirdPegasus model)"),buo=l(),fu=a("li"),_se=a("strong"),vuo=o("blenderbot"),Fuo=o(" \u2014 "),kI=a("a"),Tuo=o("BlenderbotModel"),Muo=o(" (Blenderbot model)"),Euo=l(),gu=a("li"),bse=a("strong"),Cuo=o("blenderbot-small"),wuo=o(" \u2014 "),SI=a("a"),Auo=o("BlenderbotSmallModel"),yuo=o(" (BlenderbotSmall model)"),Luo=l(),hu=a("li"),vse=a("strong"),xuo=o("camembert"),$uo=o(" \u2014 "),RI=a("a"),kuo=o("CamembertModel"),Suo=o(" (CamemBERT model)"),Ruo=l(),uu=a("li"),Fse=a("strong"),Puo=o("canine"),Buo=o(" \u2014 "),PI=a("a"),Iuo=o("CanineModel"),quo=o(" (Canine model)"),Nuo=l(),pu=a("li"),Tse=a("strong"),juo=o("clip"),Duo=o(" \u2014 "),BI=a("a"),Guo=o("CLIPModel"),Ouo=o(" (CLIP model)"),Vuo=l(),_u=a("li"),Mse=a("strong"),Xuo=o("convbert"),zuo=o(" \u2014 "),II=a("a"),Wuo=o("ConvBertModel"),Quo=o(" (ConvBERT model)"),Huo=l(),bu=a("li"),Ese=a("strong"),Uuo=o("convnext"),Juo=o(" \u2014 "),qI=a("a"),Yuo=o("ConvNextModel"),Kuo=o(" (ConvNext model)"),Zuo=l(),vu=a("li"),Cse=a("strong"),epo=o("ctrl"),opo=o(" \u2014 "),NI=a("a"),rpo=o("CTRLModel"),tpo=o(" (CTRL model)"),apo=l(),Fu=a("li"),wse=a("strong"),npo=o("cvt"),spo=o(" \u2014 "),jI=a("a"),lpo=o("CvtModel"),ipo=o(" (CvT model)"),dpo=l(),Tu=a("li"),Ase=a("strong"),cpo=o("data2vec-audio"),mpo=o(" \u2014 "),DI=a("a"),fpo=o("Data2VecAudioModel"),gpo=o(" (Data2VecAudio model)"),hpo=l(),Mu=a("li"),yse=a("strong"),upo=o("data2vec-text"),ppo=o(" \u2014 "),GI=a("a"),_po=o("Data2VecTextModel"),bpo=o(" (Data2VecText model)"),vpo=l(),Eu=a("li"),Lse=a("strong"),Fpo=o("data2vec-vision"),Tpo=o(" \u2014 "),OI=a("a"),Mpo=o("Data2VecVisionModel"),Epo=o(" (Data2VecVision model)"),Cpo=l(),Cu=a("li"),xse=a("strong"),wpo=o("deberta"),Apo=o(" \u2014 "),VI=a("a"),ypo=o("DebertaModel"),Lpo=o(" (DeBERTa model)"),xpo=l(),wu=a("li"),$se=a("strong"),$po=o("deberta-v2"),kpo=o(" \u2014 "),XI=a("a"),Spo=o("DebertaV2Model"),Rpo=o(" (DeBERTa-v2 model)"),Ppo=l(),Au=a("li"),kse=a("strong"),Bpo=o("decision_transformer"),Ipo=o(" \u2014 "),zI=a("a"),qpo=o("DecisionTransformerModel"),Npo=o(" (Decision Transformer model)"),jpo=l(),yu=a("li"),Sse=a("strong"),Dpo=o("deit"),Gpo=o(" \u2014 "),WI=a("a"),Opo=o("DeiTModel"),Vpo=o(" (DeiT model)"),Xpo=l(),Lu=a("li"),Rse=a("strong"),zpo=o("detr"),Wpo=o(" \u2014 "),QI=a("a"),Qpo=o("DetrModel"),Hpo=o(" (DETR model)"),Upo=l(),xu=a("li"),Pse=a("strong"),Jpo=o("distilbert"),Ypo=o(" \u2014 "),HI=a("a"),Kpo=o("DistilBertModel"),Zpo=o(" (DistilBERT model)"),e_o=l(),$u=a("li"),Bse=a("strong"),o_o=o("dpr"),r_o=o(" \u2014 "),UI=a("a"),t_o=o("DPRQuestionEncoder"),a_o=o(" (DPR model)"),n_o=l(),ku=a("li"),Ise=a("strong"),s_o=o("dpt"),l_o=o(" \u2014 "),JI=a("a"),i_o=o("DPTModel"),d_o=o(" (DPT model)"),c_o=l(),Su=a("li"),qse=a("strong"),m_o=o("electra"),f_o=o(" \u2014 "),YI=a("a"),g_o=o("ElectraModel"),h_o=o(" (ELECTRA model)"),u_o=l(),Ru=a("li"),Nse=a("strong"),p_o=o("flaubert"),__o=o(" \u2014 "),KI=a("a"),b_o=o("FlaubertModel"),v_o=o(" (FlauBERT model)"),F_o=l(),Pu=a("li"),jse=a("strong"),T_o=o("flava"),M_o=o(" \u2014 "),ZI=a("a"),E_o=o("FlavaModel"),C_o=o(" (Flava model)"),w_o=l(),Bu=a("li"),Dse=a("strong"),A_o=o("fnet"),y_o=o(" \u2014 "),eq=a("a"),L_o=o("FNetModel"),x_o=o(" (FNet model)"),$_o=l(),Iu=a("li"),Gse=a("strong"),k_o=o("fsmt"),S_o=o(" \u2014 "),oq=a("a"),R_o=o("FSMTModel"),P_o=o(" (FairSeq Machine-Translation model)"),B_o=l(),Ps=a("li"),Ose=a("strong"),I_o=o("funnel"),q_o=o(" \u2014 "),rq=a("a"),N_o=o("FunnelModel"),j_o=o(" or "),tq=a("a"),D_o=o("FunnelBaseModel"),G_o=o(" (Funnel Transformer model)"),O_o=l(),qu=a("li"),Vse=a("strong"),V_o=o("glpn"),X_o=o(" \u2014 "),aq=a("a"),z_o=o("GLPNModel"),W_o=o(" (GLPN model)"),Q_o=l(),Nu=a("li"),Xse=a("strong"),H_o=o("gpt2"),U_o=o(" \u2014 "),nq=a("a"),J_o=o("GPT2Model"),Y_o=o(" (OpenAI GPT-2 model)"),K_o=l(),ju=a("li"),zse=a("strong"),Z_o=o("gpt_neo"),ebo=o(" \u2014 "),sq=a("a"),obo=o("GPTNeoModel"),rbo=o(" (GPT Neo model)"),tbo=l(),Du=a("li"),Wse=a("strong"),abo=o("gptj"),nbo=o(" \u2014 "),lq=a("a"),sbo=o("GPTJModel"),lbo=o(" (GPT-J model)"),ibo=l(),Gu=a("li"),Qse=a("strong"),dbo=o("hubert"),cbo=o(" \u2014 "),iq=a("a"),mbo=o("HubertModel"),fbo=o(" (Hubert model)"),gbo=l(),Ou=a("li"),Hse=a("strong"),hbo=o("ibert"),ubo=o(" \u2014 "),dq=a("a"),pbo=o("IBertModel"),_bo=o(" (I-BERT model)"),bbo=l(),Vu=a("li"),Use=a("strong"),vbo=o("imagegpt"),Fbo=o(" \u2014 "),cq=a("a"),Tbo=o("ImageGPTModel"),Mbo=o(" (ImageGPT model)"),Ebo=l(),Xu=a("li"),Jse=a("strong"),Cbo=o("layoutlm"),wbo=o(" \u2014 "),mq=a("a"),Abo=o("LayoutLMModel"),ybo=o(" (LayoutLM model)"),Lbo=l(),zu=a("li"),Yse=a("strong"),xbo=o("layoutlmv2"),$bo=o(" \u2014 "),fq=a("a"),kbo=o("LayoutLMv2Model"),Sbo=o(" (LayoutLMv2 model)"),Rbo=l(),Wu=a("li"),Kse=a("strong"),Pbo=o("layoutlmv3"),Bbo=o(" \u2014 "),gq=a("a"),Ibo=o("LayoutLMv3Model"),qbo=o(" (LayoutLMv3 model)"),Nbo=l(),Qu=a("li"),Zse=a("strong"),jbo=o("led"),Dbo=o(" \u2014 "),hq=a("a"),Gbo=o("LEDModel"),Obo=o(" (LED model)"),Vbo=l(),Hu=a("li"),ele=a("strong"),Xbo=o("longformer"),zbo=o(" \u2014 "),uq=a("a"),Wbo=o("LongformerModel"),Qbo=o(" (Longformer model)"),Hbo=l(),Uu=a("li"),ole=a("strong"),Ubo=o("luke"),Jbo=o(" \u2014 "),pq=a("a"),Ybo=o("LukeModel"),Kbo=o(" (LUKE model)"),Zbo=l(),Ju=a("li"),rle=a("strong"),e2o=o("lxmert"),o2o=o(" \u2014 "),_q=a("a"),r2o=o("LxmertModel"),t2o=o(" (LXMERT model)"),a2o=l(),Yu=a("li"),tle=a("strong"),n2o=o("m2m_100"),s2o=o(" \u2014 "),bq=a("a"),l2o=o("M2M100Model"),i2o=o(" (M2M100 model)"),d2o=l(),Ku=a("li"),ale=a("strong"),c2o=o("marian"),m2o=o(" \u2014 "),vq=a("a"),f2o=o("MarianModel"),g2o=o(" (Marian model)"),h2o=l(),Zu=a("li"),nle=a("strong"),u2o=o("maskformer"),p2o=o(" \u2014 "),Fq=a("a"),_2o=o("MaskFormerModel"),b2o=o(" (MaskFormer model)"),v2o=l(),ep=a("li"),sle=a("strong"),F2o=o("mbart"),T2o=o(" \u2014 "),Tq=a("a"),M2o=o("MBartModel"),E2o=o(" (mBART model)"),C2o=l(),op=a("li"),lle=a("strong"),w2o=o("megatron-bert"),A2o=o(" \u2014 "),Mq=a("a"),y2o=o("MegatronBertModel"),L2o=o(" (MegatronBert model)"),x2o=l(),rp=a("li"),ile=a("strong"),$2o=o("mobilebert"),k2o=o(" \u2014 "),Eq=a("a"),S2o=o("MobileBertModel"),R2o=o(" (MobileBERT model)"),P2o=l(),tp=a("li"),dle=a("strong"),B2o=o("mpnet"),I2o=o(" \u2014 "),Cq=a("a"),q2o=o("MPNetModel"),N2o=o(" (MPNet model)"),j2o=l(),ap=a("li"),cle=a("strong"),D2o=o("mt5"),G2o=o(" \u2014 "),wq=a("a"),O2o=o("MT5Model"),V2o=o(" (mT5 model)"),X2o=l(),np=a("li"),mle=a("strong"),z2o=o("nystromformer"),W2o=o(" \u2014 "),Aq=a("a"),Q2o=o("NystromformerModel"),H2o=o(" (Nystromformer model)"),U2o=l(),sp=a("li"),fle=a("strong"),J2o=o("openai-gpt"),Y2o=o(" \u2014 "),yq=a("a"),K2o=o("OpenAIGPTModel"),Z2o=o(" (OpenAI GPT model)"),evo=l(),lp=a("li"),gle=a("strong"),ovo=o("opt"),rvo=o(" \u2014 "),Lq=a("a"),tvo=o("OPTModel"),avo=o(" (OPT model)"),nvo=l(),ip=a("li"),hle=a("strong"),svo=o("pegasus"),lvo=o(" \u2014 "),xq=a("a"),ivo=o("PegasusModel"),dvo=o(" (Pegasus model)"),cvo=l(),dp=a("li"),ule=a("strong"),mvo=o("perceiver"),fvo=o(" \u2014 "),$q=a("a"),gvo=o("PerceiverModel"),hvo=o(" (Perceiver model)"),uvo=l(),cp=a("li"),ple=a("strong"),pvo=o("plbart"),_vo=o(" \u2014 "),kq=a("a"),bvo=o("PLBartModel"),vvo=o(" (PLBart model)"),Fvo=l(),mp=a("li"),_le=a("strong"),Tvo=o("poolformer"),Mvo=o(" \u2014 "),Sq=a("a"),Evo=o("PoolFormerModel"),Cvo=o(" (PoolFormer model)"),wvo=l(),fp=a("li"),ble=a("strong"),Avo=o("prophetnet"),yvo=o(" \u2014 "),Rq=a("a"),Lvo=o("ProphetNetModel"),xvo=o(" (ProphetNet model)"),$vo=l(),gp=a("li"),vle=a("strong"),kvo=o("qdqbert"),Svo=o(" \u2014 "),Pq=a("a"),Rvo=o("QDQBertModel"),Pvo=o(" (QDQBert model)"),Bvo=l(),hp=a("li"),Fle=a("strong"),Ivo=o("reformer"),qvo=o(" \u2014 "),Bq=a("a"),Nvo=o("ReformerModel"),jvo=o(" (Reformer model)"),Dvo=l(),up=a("li"),Tle=a("strong"),Gvo=o("regnet"),Ovo=o(" \u2014 "),Iq=a("a"),Vvo=o("RegNetModel"),Xvo=o(" (RegNet model)"),zvo=l(),pp=a("li"),Mle=a("strong"),Wvo=o("rembert"),Qvo=o(" \u2014 "),qq=a("a"),Hvo=o("RemBertModel"),Uvo=o(" (RemBERT model)"),Jvo=l(),_p=a("li"),Ele=a("strong"),Yvo=o("resnet"),Kvo=o(" \u2014 "),Nq=a("a"),Zvo=o("ResNetModel"),eFo=o(" (ResNet model)"),oFo=l(),bp=a("li"),Cle=a("strong"),rFo=o("retribert"),tFo=o(" \u2014 "),jq=a("a"),aFo=o("RetriBertModel"),nFo=o(" (RetriBERT model)"),sFo=l(),vp=a("li"),wle=a("strong"),lFo=o("roberta"),iFo=o(" \u2014 "),Dq=a("a"),dFo=o("RobertaModel"),cFo=o(" (RoBERTa model)"),mFo=l(),Fp=a("li"),Ale=a("strong"),fFo=o("roformer"),gFo=o(" \u2014 "),Gq=a("a"),hFo=o("RoFormerModel"),uFo=o(" (RoFormer model)"),pFo=l(),Tp=a("li"),yle=a("strong"),_Fo=o("segformer"),bFo=o(" \u2014 "),Oq=a("a"),vFo=o("SegformerModel"),FFo=o(" (SegFormer model)"),TFo=l(),Mp=a("li"),Lle=a("strong"),MFo=o("sew"),EFo=o(" \u2014 "),Vq=a("a"),CFo=o("SEWModel"),wFo=o(" (SEW model)"),AFo=l(),Ep=a("li"),xle=a("strong"),yFo=o("sew-d"),LFo=o(" \u2014 "),Xq=a("a"),xFo=o("SEWDModel"),$Fo=o(" (SEW-D model)"),kFo=l(),Cp=a("li"),$le=a("strong"),SFo=o("speech_to_text"),RFo=o(" \u2014 "),zq=a("a"),PFo=o("Speech2TextModel"),BFo=o(" (Speech2Text model)"),IFo=l(),wp=a("li"),kle=a("strong"),qFo=o("splinter"),NFo=o(" \u2014 "),Wq=a("a"),jFo=o("SplinterModel"),DFo=o(" (Splinter model)"),GFo=l(),Ap=a("li"),Sle=a("strong"),OFo=o("squeezebert"),VFo=o(" \u2014 "),Qq=a("a"),XFo=o("SqueezeBertModel"),zFo=o(" (SqueezeBERT model)"),WFo=l(),yp=a("li"),Rle=a("strong"),QFo=o("swin"),HFo=o(" \u2014 "),Hq=a("a"),UFo=o("SwinModel"),JFo=o(" (Swin model)"),YFo=l(),Lp=a("li"),Ple=a("strong"),KFo=o("t5"),ZFo=o(" \u2014 "),Uq=a("a"),e1o=o("T5Model"),o1o=o(" (T5 model)"),r1o=l(),xp=a("li"),Ble=a("strong"),t1o=o("tapas"),a1o=o(" \u2014 "),Jq=a("a"),n1o=o("TapasModel"),s1o=o(" (TAPAS model)"),l1o=l(),$p=a("li"),Ile=a("strong"),i1o=o("trajectory_transformer"),d1o=o(" \u2014 "),Yq=a("a"),c1o=o("TrajectoryTransformerModel"),m1o=o(" (Trajectory Transformer model)"),f1o=l(),kp=a("li"),qle=a("strong"),g1o=o("transfo-xl"),h1o=o(" \u2014 "),Kq=a("a"),u1o=o("TransfoXLModel"),p1o=o(" (Transformer-XL model)"),_1o=l(),Sp=a("li"),Nle=a("strong"),b1o=o("unispeech"),v1o=o(" \u2014 "),Zq=a("a"),F1o=o("UniSpeechModel"),T1o=o(" (UniSpeech model)"),M1o=l(),Rp=a("li"),jle=a("strong"),E1o=o("unispeech-sat"),C1o=o(" \u2014 "),eN=a("a"),w1o=o("UniSpeechSatModel"),A1o=o(" (UniSpeechSat model)"),y1o=l(),Pp=a("li"),Dle=a("strong"),L1o=o("van"),x1o=o(" \u2014 "),oN=a("a"),$1o=o("VanModel"),k1o=o(" (VAN model)"),S1o=l(),Bp=a("li"),Gle=a("strong"),R1o=o("vilt"),P1o=o(" \u2014 "),rN=a("a"),B1o=o("ViltModel"),I1o=o(" (ViLT model)"),q1o=l(),Ip=a("li"),Ole=a("strong"),N1o=o("vision-text-dual-encoder"),j1o=o(" \u2014 "),tN=a("a"),D1o=o("VisionTextDualEncoderModel"),G1o=o(" (VisionTextDualEncoder model)"),O1o=l(),qp=a("li"),Vle=a("strong"),V1o=o("visual_bert"),X1o=o(" \u2014 "),aN=a("a"),z1o=o("VisualBertModel"),W1o=o(" (VisualBert model)"),Q1o=l(),Np=a("li"),Xle=a("strong"),H1o=o("vit"),U1o=o(" \u2014 "),nN=a("a"),J1o=o("ViTModel"),Y1o=o(" (ViT model)"),K1o=l(),jp=a("li"),zle=a("strong"),Z1o=o("vit_mae"),eTo=o(" \u2014 "),sN=a("a"),oTo=o("ViTMAEModel"),rTo=o(" (ViTMAE model)"),tTo=l(),Dp=a("li"),Wle=a("strong"),aTo=o("wav2vec2"),nTo=o(" \u2014 "),lN=a("a"),sTo=o("Wav2Vec2Model"),lTo=o(" (Wav2Vec2 model)"),iTo=l(),Gp=a("li"),Qle=a("strong"),dTo=o("wav2vec2-conformer"),cTo=o(" \u2014 "),iN=a("a"),mTo=o("Wav2Vec2ConformerModel"),fTo=o(" (Wav2Vec2-Conformer model)"),gTo=l(),Op=a("li"),Hle=a("strong"),hTo=o("wavlm"),uTo=o(" \u2014 "),dN=a("a"),pTo=o("WavLMModel"),_To=o(" (WavLM model)"),bTo=l(),Vp=a("li"),Ule=a("strong"),vTo=o("xglm"),FTo=o(" \u2014 "),cN=a("a"),TTo=o("XGLMModel"),MTo=o(" (XGLM model)"),ETo=l(),Xp=a("li"),Jle=a("strong"),CTo=o("xlm"),wTo=o(" \u2014 "),mN=a("a"),ATo=o("XLMModel"),yTo=o(" (XLM model)"),LTo=l(),zp=a("li"),Yle=a("strong"),xTo=o("xlm-prophetnet"),$To=o(" \u2014 "),fN=a("a"),kTo=o("XLMProphetNetModel"),STo=o(" (XLMProphetNet model)"),RTo=l(),Wp=a("li"),Kle=a("strong"),PTo=o("xlm-roberta"),BTo=o(" \u2014 "),gN=a("a"),ITo=o("XLMRobertaModel"),qTo=o(" (XLM-RoBERTa model)"),NTo=l(),Qp=a("li"),Zle=a("strong"),jTo=o("xlm-roberta-xl"),DTo=o(" \u2014 "),hN=a("a"),GTo=o("XLMRobertaXLModel"),OTo=o(" (XLM-RoBERTa-XL model)"),VTo=l(),Hp=a("li"),eie=a("strong"),XTo=o("xlnet"),zTo=o(" \u2014 "),uN=a("a"),WTo=o("XLNetModel"),QTo=o(" (XLNet model)"),HTo=l(),Up=a("li"),oie=a("strong"),UTo=o("yolos"),JTo=o(" \u2014 "),pN=a("a"),YTo=o("YolosModel"),KTo=o(" (YOLOS model)"),ZTo=l(),Jp=a("li"),rie=a("strong"),eMo=o("yoso"),oMo=o(" \u2014 "),_N=a("a"),rMo=o("YosoModel"),tMo=o(" (YOSO model)"),aMo=l(),Yp=a("p"),nMo=o("The model is set in evaluation mode by default using "),tie=a("code"),sMo=o("model.eval()"),lMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),iMo=o("model.train()"),dMo=l(),F(Kp.$$.fragment),Qqe=l(),Li=a("h2"),Zp=a("a"),nie=a("span"),F(Zy.$$.fragment),cMo=l(),sie=a("span"),mMo=o("AutoModelForPreTraining"),Hqe=l(),xo=a("div"),F(eL.$$.fragment),fMo=l(),xi=a("p"),gMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bN=a("a"),hMo=o("from_pretrained()"),uMo=o(" class method or the "),vN=a("a"),pMo=o("from_config()"),_Mo=o(` class
method.`),bMo=l(),oL=a("p"),vMo=o("This class cannot be instantiated directly using "),lie=a("code"),FMo=o("__init__()"),TMo=o(" (throws an error)."),MMo=l(),at=a("div"),F(rL.$$.fragment),EMo=l(),iie=a("p"),CMo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wMo=l(),$i=a("p"),AMo=o(`Note:
Loading a model from its configuration file does `),die=a("strong"),yMo=o("not"),LMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=a("a"),xMo=o("from_pretrained()"),$Mo=o(" to load the model weights."),kMo=l(),F(e_.$$.fragment),SMo=l(),Ye=a("div"),F(tL.$$.fragment),RMo=l(),cie=a("p"),PMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BMo=l(),xa=a("p"),IMo=o("The model class to instantiate is selected based on the "),mie=a("code"),qMo=o("model_type"),NMo=o(` property of the config object (either
passed as an argument or loaded from `),fie=a("code"),jMo=o("pretrained_model_name_or_path"),DMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=a("code"),GMo=o("pretrained_model_name_or_path"),OMo=o(":"),VMo=l(),G=a("ul"),o_=a("li"),hie=a("strong"),XMo=o("albert"),zMo=o(" \u2014 "),TN=a("a"),WMo=o("AlbertForPreTraining"),QMo=o(" (ALBERT model)"),HMo=l(),r_=a("li"),uie=a("strong"),UMo=o("bart"),JMo=o(" \u2014 "),MN=a("a"),YMo=o("BartForConditionalGeneration"),KMo=o(" (BART model)"),ZMo=l(),t_=a("li"),pie=a("strong"),e4o=o("bert"),o4o=o(" \u2014 "),EN=a("a"),r4o=o("BertForPreTraining"),t4o=o(" (BERT model)"),a4o=l(),a_=a("li"),_ie=a("strong"),n4o=o("big_bird"),s4o=o(" \u2014 "),CN=a("a"),l4o=o("BigBirdForPreTraining"),i4o=o(" (BigBird model)"),d4o=l(),n_=a("li"),bie=a("strong"),c4o=o("camembert"),m4o=o(" \u2014 "),wN=a("a"),f4o=o("CamembertForMaskedLM"),g4o=o(" (CamemBERT model)"),h4o=l(),s_=a("li"),vie=a("strong"),u4o=o("ctrl"),p4o=o(" \u2014 "),AN=a("a"),_4o=o("CTRLLMHeadModel"),b4o=o(" (CTRL model)"),v4o=l(),l_=a("li"),Fie=a("strong"),F4o=o("data2vec-text"),T4o=o(" \u2014 "),yN=a("a"),M4o=o("Data2VecTextForMaskedLM"),E4o=o(" (Data2VecText model)"),C4o=l(),i_=a("li"),Tie=a("strong"),w4o=o("deberta"),A4o=o(" \u2014 "),LN=a("a"),y4o=o("DebertaForMaskedLM"),L4o=o(" (DeBERTa model)"),x4o=l(),d_=a("li"),Mie=a("strong"),$4o=o("deberta-v2"),k4o=o(" \u2014 "),xN=a("a"),S4o=o("DebertaV2ForMaskedLM"),R4o=o(" (DeBERTa-v2 model)"),P4o=l(),c_=a("li"),Eie=a("strong"),B4o=o("distilbert"),I4o=o(" \u2014 "),$N=a("a"),q4o=o("DistilBertForMaskedLM"),N4o=o(" (DistilBERT model)"),j4o=l(),m_=a("li"),Cie=a("strong"),D4o=o("electra"),G4o=o(" \u2014 "),kN=a("a"),O4o=o("ElectraForPreTraining"),V4o=o(" (ELECTRA model)"),X4o=l(),f_=a("li"),wie=a("strong"),z4o=o("flaubert"),W4o=o(" \u2014 "),SN=a("a"),Q4o=o("FlaubertWithLMHeadModel"),H4o=o(" (FlauBERT model)"),U4o=l(),g_=a("li"),Aie=a("strong"),J4o=o("flava"),Y4o=o(" \u2014 "),RN=a("a"),K4o=o("FlavaForPreTraining"),Z4o=o(" (Flava model)"),eEo=l(),h_=a("li"),yie=a("strong"),oEo=o("fnet"),rEo=o(" \u2014 "),PN=a("a"),tEo=o("FNetForPreTraining"),aEo=o(" (FNet model)"),nEo=l(),u_=a("li"),Lie=a("strong"),sEo=o("fsmt"),lEo=o(" \u2014 "),BN=a("a"),iEo=o("FSMTForConditionalGeneration"),dEo=o(" (FairSeq Machine-Translation model)"),cEo=l(),p_=a("li"),xie=a("strong"),mEo=o("funnel"),fEo=o(" \u2014 "),IN=a("a"),gEo=o("FunnelForPreTraining"),hEo=o(" (Funnel Transformer model)"),uEo=l(),__=a("li"),$ie=a("strong"),pEo=o("gpt2"),_Eo=o(" \u2014 "),qN=a("a"),bEo=o("GPT2LMHeadModel"),vEo=o(" (OpenAI GPT-2 model)"),FEo=l(),b_=a("li"),kie=a("strong"),TEo=o("ibert"),MEo=o(" \u2014 "),NN=a("a"),EEo=o("IBertForMaskedLM"),CEo=o(" (I-BERT model)"),wEo=l(),v_=a("li"),Sie=a("strong"),AEo=o("layoutlm"),yEo=o(" \u2014 "),jN=a("a"),LEo=o("LayoutLMForMaskedLM"),xEo=o(" (LayoutLM model)"),$Eo=l(),F_=a("li"),Rie=a("strong"),kEo=o("longformer"),SEo=o(" \u2014 "),DN=a("a"),REo=o("LongformerForMaskedLM"),PEo=o(" (Longformer model)"),BEo=l(),T_=a("li"),Pie=a("strong"),IEo=o("lxmert"),qEo=o(" \u2014 "),GN=a("a"),NEo=o("LxmertForPreTraining"),jEo=o(" (LXMERT model)"),DEo=l(),M_=a("li"),Bie=a("strong"),GEo=o("megatron-bert"),OEo=o(" \u2014 "),ON=a("a"),VEo=o("MegatronBertForPreTraining"),XEo=o(" (MegatronBert model)"),zEo=l(),E_=a("li"),Iie=a("strong"),WEo=o("mobilebert"),QEo=o(" \u2014 "),VN=a("a"),HEo=o("MobileBertForPreTraining"),UEo=o(" (MobileBERT model)"),JEo=l(),C_=a("li"),qie=a("strong"),YEo=o("mpnet"),KEo=o(" \u2014 "),XN=a("a"),ZEo=o("MPNetForMaskedLM"),eCo=o(" (MPNet model)"),oCo=l(),w_=a("li"),Nie=a("strong"),rCo=o("openai-gpt"),tCo=o(" \u2014 "),zN=a("a"),aCo=o("OpenAIGPTLMHeadModel"),nCo=o(" (OpenAI GPT model)"),sCo=l(),A_=a("li"),jie=a("strong"),lCo=o("retribert"),iCo=o(" \u2014 "),WN=a("a"),dCo=o("RetriBertModel"),cCo=o(" (RetriBERT model)"),mCo=l(),y_=a("li"),Die=a("strong"),fCo=o("roberta"),gCo=o(" \u2014 "),QN=a("a"),hCo=o("RobertaForMaskedLM"),uCo=o(" (RoBERTa model)"),pCo=l(),L_=a("li"),Gie=a("strong"),_Co=o("splinter"),bCo=o(" \u2014 "),HN=a("a"),vCo=o("SplinterForPreTraining"),FCo=o(" (Splinter model)"),TCo=l(),x_=a("li"),Oie=a("strong"),MCo=o("squeezebert"),ECo=o(" \u2014 "),UN=a("a"),CCo=o("SqueezeBertForMaskedLM"),wCo=o(" (SqueezeBERT model)"),ACo=l(),$_=a("li"),Vie=a("strong"),yCo=o("t5"),LCo=o(" \u2014 "),JN=a("a"),xCo=o("T5ForConditionalGeneration"),$Co=o(" (T5 model)"),kCo=l(),k_=a("li"),Xie=a("strong"),SCo=o("tapas"),RCo=o(" \u2014 "),YN=a("a"),PCo=o("TapasForMaskedLM"),BCo=o(" (TAPAS model)"),ICo=l(),S_=a("li"),zie=a("strong"),qCo=o("transfo-xl"),NCo=o(" \u2014 "),KN=a("a"),jCo=o("TransfoXLLMHeadModel"),DCo=o(" (Transformer-XL model)"),GCo=l(),R_=a("li"),Wie=a("strong"),OCo=o("unispeech"),VCo=o(" \u2014 "),ZN=a("a"),XCo=o("UniSpeechForPreTraining"),zCo=o(" (UniSpeech model)"),WCo=l(),P_=a("li"),Qie=a("strong"),QCo=o("unispeech-sat"),HCo=o(" \u2014 "),ej=a("a"),UCo=o("UniSpeechSatForPreTraining"),JCo=o(" (UniSpeechSat model)"),YCo=l(),B_=a("li"),Hie=a("strong"),KCo=o("visual_bert"),ZCo=o(" \u2014 "),oj=a("a"),e5o=o("VisualBertForPreTraining"),o5o=o(" (VisualBert model)"),r5o=l(),I_=a("li"),Uie=a("strong"),t5o=o("vit_mae"),a5o=o(" \u2014 "),rj=a("a"),n5o=o("ViTMAEForPreTraining"),s5o=o(" (ViTMAE model)"),l5o=l(),q_=a("li"),Jie=a("strong"),i5o=o("wav2vec2"),d5o=o(" \u2014 "),tj=a("a"),c5o=o("Wav2Vec2ForPreTraining"),m5o=o(" (Wav2Vec2 model)"),f5o=l(),N_=a("li"),Yie=a("strong"),g5o=o("wav2vec2-conformer"),h5o=o(" \u2014 "),aj=a("a"),u5o=o("Wav2Vec2ConformerForPreTraining"),p5o=o(" (Wav2Vec2-Conformer model)"),_5o=l(),j_=a("li"),Kie=a("strong"),b5o=o("xlm"),v5o=o(" \u2014 "),nj=a("a"),F5o=o("XLMWithLMHeadModel"),T5o=o(" (XLM model)"),M5o=l(),D_=a("li"),Zie=a("strong"),E5o=o("xlm-roberta"),C5o=o(" \u2014 "),sj=a("a"),w5o=o("XLMRobertaForMaskedLM"),A5o=o(" (XLM-RoBERTa model)"),y5o=l(),G_=a("li"),ede=a("strong"),L5o=o("xlm-roberta-xl"),x5o=o(" \u2014 "),lj=a("a"),$5o=o("XLMRobertaXLForMaskedLM"),k5o=o(" (XLM-RoBERTa-XL model)"),S5o=l(),O_=a("li"),ode=a("strong"),R5o=o("xlnet"),P5o=o(" \u2014 "),ij=a("a"),B5o=o("XLNetLMHeadModel"),I5o=o(" (XLNet model)"),q5o=l(),V_=a("p"),N5o=o("The model is set in evaluation mode by default using "),rde=a("code"),j5o=o("model.eval()"),D5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),G5o=o("model.train()"),O5o=l(),F(X_.$$.fragment),Uqe=l(),ki=a("h2"),z_=a("a"),ade=a("span"),F(aL.$$.fragment),V5o=l(),nde=a("span"),X5o=o("AutoModelForCausalLM"),Jqe=l(),$o=a("div"),F(nL.$$.fragment),z5o=l(),Si=a("p"),W5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dj=a("a"),Q5o=o("from_pretrained()"),H5o=o(" class method or the "),cj=a("a"),U5o=o("from_config()"),J5o=o(` class
method.`),Y5o=l(),sL=a("p"),K5o=o("This class cannot be instantiated directly using "),sde=a("code"),Z5o=o("__init__()"),e3o=o(" (throws an error)."),o3o=l(),nt=a("div"),F(lL.$$.fragment),r3o=l(),lde=a("p"),t3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a3o=l(),Ri=a("p"),n3o=o(`Note:
Loading a model from its configuration file does `),ide=a("strong"),s3o=o("not"),l3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=a("a"),i3o=o("from_pretrained()"),d3o=o(" to load the model weights."),c3o=l(),F(W_.$$.fragment),m3o=l(),Ke=a("div"),F(iL.$$.fragment),f3o=l(),dde=a("p"),g3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h3o=l(),$a=a("p"),u3o=o("The model class to instantiate is selected based on the "),cde=a("code"),p3o=o("model_type"),_3o=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),b3o=o("pretrained_model_name_or_path"),v3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=a("code"),F3o=o("pretrained_model_name_or_path"),T3o=o(":"),M3o=l(),z=a("ul"),Q_=a("li"),gde=a("strong"),E3o=o("bart"),C3o=o(" \u2014 "),fj=a("a"),w3o=o("BartForCausalLM"),A3o=o(" (BART model)"),y3o=l(),H_=a("li"),hde=a("strong"),L3o=o("bert"),x3o=o(" \u2014 "),gj=a("a"),$3o=o("BertLMHeadModel"),k3o=o(" (BERT model)"),S3o=l(),U_=a("li"),ude=a("strong"),R3o=o("bert-generation"),P3o=o(" \u2014 "),hj=a("a"),B3o=o("BertGenerationDecoder"),I3o=o(" (Bert Generation model)"),q3o=l(),J_=a("li"),pde=a("strong"),N3o=o("big_bird"),j3o=o(" \u2014 "),uj=a("a"),D3o=o("BigBirdForCausalLM"),G3o=o(" (BigBird model)"),O3o=l(),Y_=a("li"),_de=a("strong"),V3o=o("bigbird_pegasus"),X3o=o(" \u2014 "),pj=a("a"),z3o=o("BigBirdPegasusForCausalLM"),W3o=o(" (BigBirdPegasus model)"),Q3o=l(),K_=a("li"),bde=a("strong"),H3o=o("blenderbot"),U3o=o(" \u2014 "),_j=a("a"),J3o=o("BlenderbotForCausalLM"),Y3o=o(" (Blenderbot model)"),K3o=l(),Z_=a("li"),vde=a("strong"),Z3o=o("blenderbot-small"),ewo=o(" \u2014 "),bj=a("a"),owo=o("BlenderbotSmallForCausalLM"),rwo=o(" (BlenderbotSmall model)"),two=l(),eb=a("li"),Fde=a("strong"),awo=o("camembert"),nwo=o(" \u2014 "),vj=a("a"),swo=o("CamembertForCausalLM"),lwo=o(" (CamemBERT model)"),iwo=l(),ob=a("li"),Tde=a("strong"),dwo=o("ctrl"),cwo=o(" \u2014 "),Fj=a("a"),mwo=o("CTRLLMHeadModel"),fwo=o(" (CTRL model)"),gwo=l(),rb=a("li"),Mde=a("strong"),hwo=o("data2vec-text"),uwo=o(" \u2014 "),Tj=a("a"),pwo=o("Data2VecTextForCausalLM"),_wo=o(" (Data2VecText model)"),bwo=l(),tb=a("li"),Ede=a("strong"),vwo=o("electra"),Fwo=o(" \u2014 "),Mj=a("a"),Two=o("ElectraForCausalLM"),Mwo=o(" (ELECTRA model)"),Ewo=l(),ab=a("li"),Cde=a("strong"),Cwo=o("gpt2"),wwo=o(" \u2014 "),Ej=a("a"),Awo=o("GPT2LMHeadModel"),ywo=o(" (OpenAI GPT-2 model)"),Lwo=l(),nb=a("li"),wde=a("strong"),xwo=o("gpt_neo"),$wo=o(" \u2014 "),Cj=a("a"),kwo=o("GPTNeoForCausalLM"),Swo=o(" (GPT Neo model)"),Rwo=l(),sb=a("li"),Ade=a("strong"),Pwo=o("gptj"),Bwo=o(" \u2014 "),wj=a("a"),Iwo=o("GPTJForCausalLM"),qwo=o(" (GPT-J model)"),Nwo=l(),lb=a("li"),yde=a("strong"),jwo=o("marian"),Dwo=o(" \u2014 "),Aj=a("a"),Gwo=o("MarianForCausalLM"),Owo=o(" (Marian model)"),Vwo=l(),ib=a("li"),Lde=a("strong"),Xwo=o("mbart"),zwo=o(" \u2014 "),yj=a("a"),Wwo=o("MBartForCausalLM"),Qwo=o(" (mBART model)"),Hwo=l(),db=a("li"),xde=a("strong"),Uwo=o("megatron-bert"),Jwo=o(" \u2014 "),Lj=a("a"),Ywo=o("MegatronBertForCausalLM"),Kwo=o(" (MegatronBert model)"),Zwo=l(),cb=a("li"),$de=a("strong"),e0o=o("openai-gpt"),o0o=o(" \u2014 "),xj=a("a"),r0o=o("OpenAIGPTLMHeadModel"),t0o=o(" (OpenAI GPT model)"),a0o=l(),mb=a("li"),kde=a("strong"),n0o=o("opt"),s0o=o(" \u2014 "),$j=a("a"),l0o=o("OPTForCausalLM"),i0o=o(" (OPT model)"),d0o=l(),fb=a("li"),Sde=a("strong"),c0o=o("pegasus"),m0o=o(" \u2014 "),kj=a("a"),f0o=o("PegasusForCausalLM"),g0o=o(" (Pegasus model)"),h0o=l(),gb=a("li"),Rde=a("strong"),u0o=o("plbart"),p0o=o(" \u2014 "),Sj=a("a"),_0o=o("PLBartForCausalLM"),b0o=o(" (PLBart model)"),v0o=l(),hb=a("li"),Pde=a("strong"),F0o=o("prophetnet"),T0o=o(" \u2014 "),Rj=a("a"),M0o=o("ProphetNetForCausalLM"),E0o=o(" (ProphetNet model)"),C0o=l(),ub=a("li"),Bde=a("strong"),w0o=o("qdqbert"),A0o=o(" \u2014 "),Pj=a("a"),y0o=o("QDQBertLMHeadModel"),L0o=o(" (QDQBert model)"),x0o=l(),pb=a("li"),Ide=a("strong"),$0o=o("reformer"),k0o=o(" \u2014 "),Bj=a("a"),S0o=o("ReformerModelWithLMHead"),R0o=o(" (Reformer model)"),P0o=l(),_b=a("li"),qde=a("strong"),B0o=o("rembert"),I0o=o(" \u2014 "),Ij=a("a"),q0o=o("RemBertForCausalLM"),N0o=o(" (RemBERT model)"),j0o=l(),bb=a("li"),Nde=a("strong"),D0o=o("roberta"),G0o=o(" \u2014 "),qj=a("a"),O0o=o("RobertaForCausalLM"),V0o=o(" (RoBERTa model)"),X0o=l(),vb=a("li"),jde=a("strong"),z0o=o("roformer"),W0o=o(" \u2014 "),Nj=a("a"),Q0o=o("RoFormerForCausalLM"),H0o=o(" (RoFormer model)"),U0o=l(),Fb=a("li"),Dde=a("strong"),J0o=o("speech_to_text_2"),Y0o=o(" \u2014 "),jj=a("a"),K0o=o("Speech2Text2ForCausalLM"),Z0o=o(" (Speech2Text2 model)"),eAo=l(),Tb=a("li"),Gde=a("strong"),oAo=o("transfo-xl"),rAo=o(" \u2014 "),Dj=a("a"),tAo=o("TransfoXLLMHeadModel"),aAo=o(" (Transformer-XL model)"),nAo=l(),Mb=a("li"),Ode=a("strong"),sAo=o("trocr"),lAo=o(" \u2014 "),Gj=a("a"),iAo=o("TrOCRForCausalLM"),dAo=o(" (TrOCR model)"),cAo=l(),Eb=a("li"),Vde=a("strong"),mAo=o("xglm"),fAo=o(" \u2014 "),Oj=a("a"),gAo=o("XGLMForCausalLM"),hAo=o(" (XGLM model)"),uAo=l(),Cb=a("li"),Xde=a("strong"),pAo=o("xlm"),_Ao=o(" \u2014 "),Vj=a("a"),bAo=o("XLMWithLMHeadModel"),vAo=o(" (XLM model)"),FAo=l(),wb=a("li"),zde=a("strong"),TAo=o("xlm-prophetnet"),MAo=o(" \u2014 "),Xj=a("a"),EAo=o("XLMProphetNetForCausalLM"),CAo=o(" (XLMProphetNet model)"),wAo=l(),Ab=a("li"),Wde=a("strong"),AAo=o("xlm-roberta"),yAo=o(" \u2014 "),zj=a("a"),LAo=o("XLMRobertaForCausalLM"),xAo=o(" (XLM-RoBERTa model)"),$Ao=l(),yb=a("li"),Qde=a("strong"),kAo=o("xlm-roberta-xl"),SAo=o(" \u2014 "),Wj=a("a"),RAo=o("XLMRobertaXLForCausalLM"),PAo=o(" (XLM-RoBERTa-XL model)"),BAo=l(),Lb=a("li"),Hde=a("strong"),IAo=o("xlnet"),qAo=o(" \u2014 "),Qj=a("a"),NAo=o("XLNetLMHeadModel"),jAo=o(" (XLNet model)"),DAo=l(),xb=a("p"),GAo=o("The model is set in evaluation mode by default using "),Ude=a("code"),OAo=o("model.eval()"),VAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=a("code"),XAo=o("model.train()"),zAo=l(),F($b.$$.fragment),Yqe=l(),Pi=a("h2"),kb=a("a"),Yde=a("span"),F(dL.$$.fragment),WAo=l(),Kde=a("span"),QAo=o("AutoModelForMaskedLM"),Kqe=l(),ko=a("div"),F(cL.$$.fragment),HAo=l(),Bi=a("p"),UAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hj=a("a"),JAo=o("from_pretrained()"),YAo=o(" class method or the "),Uj=a("a"),KAo=o("from_config()"),ZAo=o(` class
method.`),e6o=l(),mL=a("p"),o6o=o("This class cannot be instantiated directly using "),Zde=a("code"),r6o=o("__init__()"),t6o=o(" (throws an error)."),a6o=l(),st=a("div"),F(fL.$$.fragment),n6o=l(),ece=a("p"),s6o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l6o=l(),Ii=a("p"),i6o=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),d6o=o("not"),c6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=a("a"),m6o=o("from_pretrained()"),f6o=o(" to load the model weights."),g6o=l(),F(Sb.$$.fragment),h6o=l(),Ze=a("div"),F(gL.$$.fragment),u6o=l(),rce=a("p"),p6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_6o=l(),ka=a("p"),b6o=o("The model class to instantiate is selected based on the "),tce=a("code"),v6o=o("model_type"),F6o=o(` property of the config object (either
passed as an argument or loaded from `),ace=a("code"),T6o=o("pretrained_model_name_or_path"),M6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=a("code"),E6o=o("pretrained_model_name_or_path"),C6o=o(":"),w6o=l(),W=a("ul"),Rb=a("li"),sce=a("strong"),A6o=o("albert"),y6o=o(" \u2014 "),Yj=a("a"),L6o=o("AlbertForMaskedLM"),x6o=o(" (ALBERT model)"),$6o=l(),Pb=a("li"),lce=a("strong"),k6o=o("bart"),S6o=o(" \u2014 "),Kj=a("a"),R6o=o("BartForConditionalGeneration"),P6o=o(" (BART model)"),B6o=l(),Bb=a("li"),ice=a("strong"),I6o=o("bert"),q6o=o(" \u2014 "),Zj=a("a"),N6o=o("BertForMaskedLM"),j6o=o(" (BERT model)"),D6o=l(),Ib=a("li"),dce=a("strong"),G6o=o("big_bird"),O6o=o(" \u2014 "),eD=a("a"),V6o=o("BigBirdForMaskedLM"),X6o=o(" (BigBird model)"),z6o=l(),qb=a("li"),cce=a("strong"),W6o=o("camembert"),Q6o=o(" \u2014 "),oD=a("a"),H6o=o("CamembertForMaskedLM"),U6o=o(" (CamemBERT model)"),J6o=l(),Nb=a("li"),mce=a("strong"),Y6o=o("convbert"),K6o=o(" \u2014 "),rD=a("a"),Z6o=o("ConvBertForMaskedLM"),eyo=o(" (ConvBERT model)"),oyo=l(),jb=a("li"),fce=a("strong"),ryo=o("data2vec-text"),tyo=o(" \u2014 "),tD=a("a"),ayo=o("Data2VecTextForMaskedLM"),nyo=o(" (Data2VecText model)"),syo=l(),Db=a("li"),gce=a("strong"),lyo=o("deberta"),iyo=o(" \u2014 "),aD=a("a"),dyo=o("DebertaForMaskedLM"),cyo=o(" (DeBERTa model)"),myo=l(),Gb=a("li"),hce=a("strong"),fyo=o("deberta-v2"),gyo=o(" \u2014 "),nD=a("a"),hyo=o("DebertaV2ForMaskedLM"),uyo=o(" (DeBERTa-v2 model)"),pyo=l(),Ob=a("li"),uce=a("strong"),_yo=o("distilbert"),byo=o(" \u2014 "),sD=a("a"),vyo=o("DistilBertForMaskedLM"),Fyo=o(" (DistilBERT model)"),Tyo=l(),Vb=a("li"),pce=a("strong"),Myo=o("electra"),Eyo=o(" \u2014 "),lD=a("a"),Cyo=o("ElectraForMaskedLM"),wyo=o(" (ELECTRA model)"),Ayo=l(),Xb=a("li"),_ce=a("strong"),yyo=o("flaubert"),Lyo=o(" \u2014 "),iD=a("a"),xyo=o("FlaubertWithLMHeadModel"),$yo=o(" (FlauBERT model)"),kyo=l(),zb=a("li"),bce=a("strong"),Syo=o("fnet"),Ryo=o(" \u2014 "),dD=a("a"),Pyo=o("FNetForMaskedLM"),Byo=o(" (FNet model)"),Iyo=l(),Wb=a("li"),vce=a("strong"),qyo=o("funnel"),Nyo=o(" \u2014 "),cD=a("a"),jyo=o("FunnelForMaskedLM"),Dyo=o(" (Funnel Transformer model)"),Gyo=l(),Qb=a("li"),Fce=a("strong"),Oyo=o("ibert"),Vyo=o(" \u2014 "),mD=a("a"),Xyo=o("IBertForMaskedLM"),zyo=o(" (I-BERT model)"),Wyo=l(),Hb=a("li"),Tce=a("strong"),Qyo=o("layoutlm"),Hyo=o(" \u2014 "),fD=a("a"),Uyo=o("LayoutLMForMaskedLM"),Jyo=o(" (LayoutLM model)"),Yyo=l(),Ub=a("li"),Mce=a("strong"),Kyo=o("longformer"),Zyo=o(" \u2014 "),gD=a("a"),eLo=o("LongformerForMaskedLM"),oLo=o(" (Longformer model)"),rLo=l(),Jb=a("li"),Ece=a("strong"),tLo=o("mbart"),aLo=o(" \u2014 "),hD=a("a"),nLo=o("MBartForConditionalGeneration"),sLo=o(" (mBART model)"),lLo=l(),Yb=a("li"),Cce=a("strong"),iLo=o("megatron-bert"),dLo=o(" \u2014 "),uD=a("a"),cLo=o("MegatronBertForMaskedLM"),mLo=o(" (MegatronBert model)"),fLo=l(),Kb=a("li"),wce=a("strong"),gLo=o("mobilebert"),hLo=o(" \u2014 "),pD=a("a"),uLo=o("MobileBertForMaskedLM"),pLo=o(" (MobileBERT model)"),_Lo=l(),Zb=a("li"),Ace=a("strong"),bLo=o("mpnet"),vLo=o(" \u2014 "),_D=a("a"),FLo=o("MPNetForMaskedLM"),TLo=o(" (MPNet model)"),MLo=l(),e2=a("li"),yce=a("strong"),ELo=o("nystromformer"),CLo=o(" \u2014 "),bD=a("a"),wLo=o("NystromformerForMaskedLM"),ALo=o(" (Nystromformer model)"),yLo=l(),o2=a("li"),Lce=a("strong"),LLo=o("perceiver"),xLo=o(" \u2014 "),vD=a("a"),$Lo=o("PerceiverForMaskedLM"),kLo=o(" (Perceiver model)"),SLo=l(),r2=a("li"),xce=a("strong"),RLo=o("qdqbert"),PLo=o(" \u2014 "),FD=a("a"),BLo=o("QDQBertForMaskedLM"),ILo=o(" (QDQBert model)"),qLo=l(),t2=a("li"),$ce=a("strong"),NLo=o("reformer"),jLo=o(" \u2014 "),TD=a("a"),DLo=o("ReformerForMaskedLM"),GLo=o(" (Reformer model)"),OLo=l(),a2=a("li"),kce=a("strong"),VLo=o("rembert"),XLo=o(" \u2014 "),MD=a("a"),zLo=o("RemBertForMaskedLM"),WLo=o(" (RemBERT model)"),QLo=l(),n2=a("li"),Sce=a("strong"),HLo=o("roberta"),ULo=o(" \u2014 "),ED=a("a"),JLo=o("RobertaForMaskedLM"),YLo=o(" (RoBERTa model)"),KLo=l(),s2=a("li"),Rce=a("strong"),ZLo=o("roformer"),e8o=o(" \u2014 "),CD=a("a"),o8o=o("RoFormerForMaskedLM"),r8o=o(" (RoFormer model)"),t8o=l(),l2=a("li"),Pce=a("strong"),a8o=o("squeezebert"),n8o=o(" \u2014 "),wD=a("a"),s8o=o("SqueezeBertForMaskedLM"),l8o=o(" (SqueezeBERT model)"),i8o=l(),i2=a("li"),Bce=a("strong"),d8o=o("tapas"),c8o=o(" \u2014 "),AD=a("a"),m8o=o("TapasForMaskedLM"),f8o=o(" (TAPAS model)"),g8o=l(),d2=a("li"),Ice=a("strong"),h8o=o("wav2vec2"),u8o=o(" \u2014 "),qce=a("code"),p8o=o("Wav2Vec2ForMaskedLM"),_8o=o(" (Wav2Vec2 model)"),b8o=l(),c2=a("li"),Nce=a("strong"),v8o=o("xlm"),F8o=o(" \u2014 "),yD=a("a"),T8o=o("XLMWithLMHeadModel"),M8o=o(" (XLM model)"),E8o=l(),m2=a("li"),jce=a("strong"),C8o=o("xlm-roberta"),w8o=o(" \u2014 "),LD=a("a"),A8o=o("XLMRobertaForMaskedLM"),y8o=o(" (XLM-RoBERTa model)"),L8o=l(),f2=a("li"),Dce=a("strong"),x8o=o("xlm-roberta-xl"),$8o=o(" \u2014 "),xD=a("a"),k8o=o("XLMRobertaXLForMaskedLM"),S8o=o(" (XLM-RoBERTa-XL model)"),R8o=l(),g2=a("li"),Gce=a("strong"),P8o=o("yoso"),B8o=o(" \u2014 "),$D=a("a"),I8o=o("YosoForMaskedLM"),q8o=o(" (YOSO model)"),N8o=l(),h2=a("p"),j8o=o("The model is set in evaluation mode by default using "),Oce=a("code"),D8o=o("model.eval()"),G8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=a("code"),O8o=o("model.train()"),V8o=l(),F(u2.$$.fragment),Zqe=l(),qi=a("h2"),p2=a("a"),Xce=a("span"),F(hL.$$.fragment),X8o=l(),zce=a("span"),z8o=o("AutoModelForSeq2SeqLM"),eNe=l(),So=a("div"),F(uL.$$.fragment),W8o=l(),Ni=a("p"),Q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kD=a("a"),H8o=o("from_pretrained()"),U8o=o(" class method or the "),SD=a("a"),J8o=o("from_config()"),Y8o=o(` class
method.`),K8o=l(),pL=a("p"),Z8o=o("This class cannot be instantiated directly using "),Wce=a("code"),e7o=o("__init__()"),o7o=o(" (throws an error)."),r7o=l(),lt=a("div"),F(_L.$$.fragment),t7o=l(),Qce=a("p"),a7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n7o=l(),ji=a("p"),s7o=o(`Note:
Loading a model from its configuration file does `),Hce=a("strong"),l7o=o("not"),i7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=a("a"),d7o=o("from_pretrained()"),c7o=o(" to load the model weights."),m7o=l(),F(_2.$$.fragment),f7o=l(),eo=a("div"),F(bL.$$.fragment),g7o=l(),Uce=a("p"),h7o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u7o=l(),Sa=a("p"),p7o=o("The model class to instantiate is selected based on the "),Jce=a("code"),_7o=o("model_type"),b7o=o(` property of the config object (either
passed as an argument or loaded from `),Yce=a("code"),v7o=o("pretrained_model_name_or_path"),F7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=a("code"),T7o=o("pretrained_model_name_or_path"),M7o=o(":"),E7o=l(),pe=a("ul"),b2=a("li"),Zce=a("strong"),C7o=o("bart"),w7o=o(" \u2014 "),PD=a("a"),A7o=o("BartForConditionalGeneration"),y7o=o(" (BART model)"),L7o=l(),v2=a("li"),eme=a("strong"),x7o=o("bigbird_pegasus"),$7o=o(" \u2014 "),BD=a("a"),k7o=o("BigBirdPegasusForConditionalGeneration"),S7o=o(" (BigBirdPegasus model)"),R7o=l(),F2=a("li"),ome=a("strong"),P7o=o("blenderbot"),B7o=o(" \u2014 "),ID=a("a"),I7o=o("BlenderbotForConditionalGeneration"),q7o=o(" (Blenderbot model)"),N7o=l(),T2=a("li"),rme=a("strong"),j7o=o("blenderbot-small"),D7o=o(" \u2014 "),qD=a("a"),G7o=o("BlenderbotSmallForConditionalGeneration"),O7o=o(" (BlenderbotSmall model)"),V7o=l(),M2=a("li"),tme=a("strong"),X7o=o("encoder-decoder"),z7o=o(" \u2014 "),ND=a("a"),W7o=o("EncoderDecoderModel"),Q7o=o(" (Encoder decoder model)"),H7o=l(),E2=a("li"),ame=a("strong"),U7o=o("fsmt"),J7o=o(" \u2014 "),jD=a("a"),Y7o=o("FSMTForConditionalGeneration"),K7o=o(" (FairSeq Machine-Translation model)"),Z7o=l(),C2=a("li"),nme=a("strong"),e9o=o("led"),o9o=o(" \u2014 "),DD=a("a"),r9o=o("LEDForConditionalGeneration"),t9o=o(" (LED model)"),a9o=l(),w2=a("li"),sme=a("strong"),n9o=o("m2m_100"),s9o=o(" \u2014 "),GD=a("a"),l9o=o("M2M100ForConditionalGeneration"),i9o=o(" (M2M100 model)"),d9o=l(),A2=a("li"),lme=a("strong"),c9o=o("marian"),m9o=o(" \u2014 "),OD=a("a"),f9o=o("MarianMTModel"),g9o=o(" (Marian model)"),h9o=l(),y2=a("li"),ime=a("strong"),u9o=o("mbart"),p9o=o(" \u2014 "),VD=a("a"),_9o=o("MBartForConditionalGeneration"),b9o=o(" (mBART model)"),v9o=l(),L2=a("li"),dme=a("strong"),F9o=o("mt5"),T9o=o(" \u2014 "),XD=a("a"),M9o=o("MT5ForConditionalGeneration"),E9o=o(" (mT5 model)"),C9o=l(),x2=a("li"),cme=a("strong"),w9o=o("pegasus"),A9o=o(" \u2014 "),zD=a("a"),y9o=o("PegasusForConditionalGeneration"),L9o=o(" (Pegasus model)"),x9o=l(),$2=a("li"),mme=a("strong"),$9o=o("plbart"),k9o=o(" \u2014 "),WD=a("a"),S9o=o("PLBartForConditionalGeneration"),R9o=o(" (PLBart model)"),P9o=l(),k2=a("li"),fme=a("strong"),B9o=o("prophetnet"),I9o=o(" \u2014 "),QD=a("a"),q9o=o("ProphetNetForConditionalGeneration"),N9o=o(" (ProphetNet model)"),j9o=l(),S2=a("li"),gme=a("strong"),D9o=o("t5"),G9o=o(" \u2014 "),HD=a("a"),O9o=o("T5ForConditionalGeneration"),V9o=o(" (T5 model)"),X9o=l(),R2=a("li"),hme=a("strong"),z9o=o("xlm-prophetnet"),W9o=o(" \u2014 "),UD=a("a"),Q9o=o("XLMProphetNetForConditionalGeneration"),H9o=o(" (XLMProphetNet model)"),U9o=l(),P2=a("p"),J9o=o("The model is set in evaluation mode by default using "),ume=a("code"),Y9o=o("model.eval()"),K9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),Z9o=o("model.train()"),exo=l(),F(B2.$$.fragment),oNe=l(),Di=a("h2"),I2=a("a"),_me=a("span"),F(vL.$$.fragment),oxo=l(),bme=a("span"),rxo=o("AutoModelForSequenceClassification"),rNe=l(),Ro=a("div"),F(FL.$$.fragment),txo=l(),Gi=a("p"),axo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=a("a"),nxo=o("from_pretrained()"),sxo=o(" class method or the "),YD=a("a"),lxo=o("from_config()"),ixo=o(` class
method.`),dxo=l(),TL=a("p"),cxo=o("This class cannot be instantiated directly using "),vme=a("code"),mxo=o("__init__()"),fxo=o(" (throws an error)."),gxo=l(),it=a("div"),F(ML.$$.fragment),hxo=l(),Fme=a("p"),uxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pxo=l(),Oi=a("p"),_xo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),bxo=o("not"),vxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),Fxo=o("from_pretrained()"),Txo=o(" to load the model weights."),Mxo=l(),F(q2.$$.fragment),Exo=l(),oo=a("div"),F(EL.$$.fragment),Cxo=l(),Mme=a("p"),wxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Axo=l(),Ra=a("p"),yxo=o("The model class to instantiate is selected based on the "),Eme=a("code"),Lxo=o("model_type"),xxo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),$xo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),Sxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Pxo=l(),q=a("ul"),N2=a("li"),Ame=a("strong"),Bxo=o("albert"),Ixo=o(" \u2014 "),ZD=a("a"),qxo=o("AlbertForSequenceClassification"),Nxo=o(" (ALBERT model)"),jxo=l(),j2=a("li"),yme=a("strong"),Dxo=o("bart"),Gxo=o(" \u2014 "),eG=a("a"),Oxo=o("BartForSequenceClassification"),Vxo=o(" (BART model)"),Xxo=l(),D2=a("li"),Lme=a("strong"),zxo=o("bert"),Wxo=o(" \u2014 "),oG=a("a"),Qxo=o("BertForSequenceClassification"),Hxo=o(" (BERT model)"),Uxo=l(),G2=a("li"),xme=a("strong"),Jxo=o("big_bird"),Yxo=o(" \u2014 "),rG=a("a"),Kxo=o("BigBirdForSequenceClassification"),Zxo=o(" (BigBird model)"),e$o=l(),O2=a("li"),$me=a("strong"),o$o=o("bigbird_pegasus"),r$o=o(" \u2014 "),tG=a("a"),t$o=o("BigBirdPegasusForSequenceClassification"),a$o=o(" (BigBirdPegasus model)"),n$o=l(),V2=a("li"),kme=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),aG=a("a"),i$o=o("CamembertForSequenceClassification"),d$o=o(" (CamemBERT model)"),c$o=l(),X2=a("li"),Sme=a("strong"),m$o=o("canine"),f$o=o(" \u2014 "),nG=a("a"),g$o=o("CanineForSequenceClassification"),h$o=o(" (Canine model)"),u$o=l(),z2=a("li"),Rme=a("strong"),p$o=o("convbert"),_$o=o(" \u2014 "),sG=a("a"),b$o=o("ConvBertForSequenceClassification"),v$o=o(" (ConvBERT model)"),F$o=l(),W2=a("li"),Pme=a("strong"),T$o=o("ctrl"),M$o=o(" \u2014 "),lG=a("a"),E$o=o("CTRLForSequenceClassification"),C$o=o(" (CTRL model)"),w$o=l(),Q2=a("li"),Bme=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),iG=a("a"),L$o=o("Data2VecTextForSequenceClassification"),x$o=o(" (Data2VecText model)"),$$o=l(),H2=a("li"),Ime=a("strong"),k$o=o("deberta"),S$o=o(" \u2014 "),dG=a("a"),R$o=o("DebertaForSequenceClassification"),P$o=o(" (DeBERTa model)"),B$o=l(),U2=a("li"),qme=a("strong"),I$o=o("deberta-v2"),q$o=o(" \u2014 "),cG=a("a"),N$o=o("DebertaV2ForSequenceClassification"),j$o=o(" (DeBERTa-v2 model)"),D$o=l(),J2=a("li"),Nme=a("strong"),G$o=o("distilbert"),O$o=o(" \u2014 "),mG=a("a"),V$o=o("DistilBertForSequenceClassification"),X$o=o(" (DistilBERT model)"),z$o=l(),Y2=a("li"),jme=a("strong"),W$o=o("electra"),Q$o=o(" \u2014 "),fG=a("a"),H$o=o("ElectraForSequenceClassification"),U$o=o(" (ELECTRA model)"),J$o=l(),K2=a("li"),Dme=a("strong"),Y$o=o("flaubert"),K$o=o(" \u2014 "),gG=a("a"),Z$o=o("FlaubertForSequenceClassification"),eko=o(" (FlauBERT model)"),oko=l(),Z2=a("li"),Gme=a("strong"),rko=o("fnet"),tko=o(" \u2014 "),hG=a("a"),ako=o("FNetForSequenceClassification"),nko=o(" (FNet model)"),sko=l(),ev=a("li"),Ome=a("strong"),lko=o("funnel"),iko=o(" \u2014 "),uG=a("a"),dko=o("FunnelForSequenceClassification"),cko=o(" (Funnel Transformer model)"),mko=l(),ov=a("li"),Vme=a("strong"),fko=o("gpt2"),gko=o(" \u2014 "),pG=a("a"),hko=o("GPT2ForSequenceClassification"),uko=o(" (OpenAI GPT-2 model)"),pko=l(),rv=a("li"),Xme=a("strong"),_ko=o("gpt_neo"),bko=o(" \u2014 "),_G=a("a"),vko=o("GPTNeoForSequenceClassification"),Fko=o(" (GPT Neo model)"),Tko=l(),tv=a("li"),zme=a("strong"),Mko=o("gptj"),Eko=o(" \u2014 "),bG=a("a"),Cko=o("GPTJForSequenceClassification"),wko=o(" (GPT-J model)"),Ako=l(),av=a("li"),Wme=a("strong"),yko=o("ibert"),Lko=o(" \u2014 "),vG=a("a"),xko=o("IBertForSequenceClassification"),$ko=o(" (I-BERT model)"),kko=l(),nv=a("li"),Qme=a("strong"),Sko=o("layoutlm"),Rko=o(" \u2014 "),FG=a("a"),Pko=o("LayoutLMForSequenceClassification"),Bko=o(" (LayoutLM model)"),Iko=l(),sv=a("li"),Hme=a("strong"),qko=o("layoutlmv2"),Nko=o(" \u2014 "),TG=a("a"),jko=o("LayoutLMv2ForSequenceClassification"),Dko=o(" (LayoutLMv2 model)"),Gko=l(),lv=a("li"),Ume=a("strong"),Oko=o("layoutlmv3"),Vko=o(" \u2014 "),MG=a("a"),Xko=o("LayoutLMv3ForSequenceClassification"),zko=o(" (LayoutLMv3 model)"),Wko=l(),iv=a("li"),Jme=a("strong"),Qko=o("led"),Hko=o(" \u2014 "),EG=a("a"),Uko=o("LEDForSequenceClassification"),Jko=o(" (LED model)"),Yko=l(),dv=a("li"),Yme=a("strong"),Kko=o("longformer"),Zko=o(" \u2014 "),CG=a("a"),eSo=o("LongformerForSequenceClassification"),oSo=o(" (Longformer model)"),rSo=l(),cv=a("li"),Kme=a("strong"),tSo=o("mbart"),aSo=o(" \u2014 "),wG=a("a"),nSo=o("MBartForSequenceClassification"),sSo=o(" (mBART model)"),lSo=l(),mv=a("li"),Zme=a("strong"),iSo=o("megatron-bert"),dSo=o(" \u2014 "),AG=a("a"),cSo=o("MegatronBertForSequenceClassification"),mSo=o(" (MegatronBert model)"),fSo=l(),fv=a("li"),efe=a("strong"),gSo=o("mobilebert"),hSo=o(" \u2014 "),yG=a("a"),uSo=o("MobileBertForSequenceClassification"),pSo=o(" (MobileBERT model)"),_So=l(),gv=a("li"),ofe=a("strong"),bSo=o("mpnet"),vSo=o(" \u2014 "),LG=a("a"),FSo=o("MPNetForSequenceClassification"),TSo=o(" (MPNet model)"),MSo=l(),hv=a("li"),rfe=a("strong"),ESo=o("nystromformer"),CSo=o(" \u2014 "),xG=a("a"),wSo=o("NystromformerForSequenceClassification"),ASo=o(" (Nystromformer model)"),ySo=l(),uv=a("li"),tfe=a("strong"),LSo=o("openai-gpt"),xSo=o(" \u2014 "),$G=a("a"),$So=o("OpenAIGPTForSequenceClassification"),kSo=o(" (OpenAI GPT model)"),SSo=l(),pv=a("li"),afe=a("strong"),RSo=o("perceiver"),PSo=o(" \u2014 "),kG=a("a"),BSo=o("PerceiverForSequenceClassification"),ISo=o(" (Perceiver model)"),qSo=l(),_v=a("li"),nfe=a("strong"),NSo=o("plbart"),jSo=o(" \u2014 "),SG=a("a"),DSo=o("PLBartForSequenceClassification"),GSo=o(" (PLBart model)"),OSo=l(),bv=a("li"),sfe=a("strong"),VSo=o("qdqbert"),XSo=o(" \u2014 "),RG=a("a"),zSo=o("QDQBertForSequenceClassification"),WSo=o(" (QDQBert model)"),QSo=l(),vv=a("li"),lfe=a("strong"),HSo=o("reformer"),USo=o(" \u2014 "),PG=a("a"),JSo=o("ReformerForSequenceClassification"),YSo=o(" (Reformer model)"),KSo=l(),Fv=a("li"),ife=a("strong"),ZSo=o("rembert"),eRo=o(" \u2014 "),BG=a("a"),oRo=o("RemBertForSequenceClassification"),rRo=o(" (RemBERT model)"),tRo=l(),Tv=a("li"),dfe=a("strong"),aRo=o("roberta"),nRo=o(" \u2014 "),IG=a("a"),sRo=o("RobertaForSequenceClassification"),lRo=o(" (RoBERTa model)"),iRo=l(),Mv=a("li"),cfe=a("strong"),dRo=o("roformer"),cRo=o(" \u2014 "),qG=a("a"),mRo=o("RoFormerForSequenceClassification"),fRo=o(" (RoFormer model)"),gRo=l(),Ev=a("li"),mfe=a("strong"),hRo=o("squeezebert"),uRo=o(" \u2014 "),NG=a("a"),pRo=o("SqueezeBertForSequenceClassification"),_Ro=o(" (SqueezeBERT model)"),bRo=l(),Cv=a("li"),ffe=a("strong"),vRo=o("tapas"),FRo=o(" \u2014 "),jG=a("a"),TRo=o("TapasForSequenceClassification"),MRo=o(" (TAPAS model)"),ERo=l(),wv=a("li"),gfe=a("strong"),CRo=o("transfo-xl"),wRo=o(" \u2014 "),DG=a("a"),ARo=o("TransfoXLForSequenceClassification"),yRo=o(" (Transformer-XL model)"),LRo=l(),Av=a("li"),hfe=a("strong"),xRo=o("xlm"),$Ro=o(" \u2014 "),GG=a("a"),kRo=o("XLMForSequenceClassification"),SRo=o(" (XLM model)"),RRo=l(),yv=a("li"),ufe=a("strong"),PRo=o("xlm-roberta"),BRo=o(" \u2014 "),OG=a("a"),IRo=o("XLMRobertaForSequenceClassification"),qRo=o(" (XLM-RoBERTa model)"),NRo=l(),Lv=a("li"),pfe=a("strong"),jRo=o("xlm-roberta-xl"),DRo=o(" \u2014 "),VG=a("a"),GRo=o("XLMRobertaXLForSequenceClassification"),ORo=o(" (XLM-RoBERTa-XL model)"),VRo=l(),xv=a("li"),_fe=a("strong"),XRo=o("xlnet"),zRo=o(" \u2014 "),XG=a("a"),WRo=o("XLNetForSequenceClassification"),QRo=o(" (XLNet model)"),HRo=l(),$v=a("li"),bfe=a("strong"),URo=o("yoso"),JRo=o(" \u2014 "),zG=a("a"),YRo=o("YosoForSequenceClassification"),KRo=o(" (YOSO model)"),ZRo=l(),kv=a("p"),ePo=o("The model is set in evaluation mode by default using "),vfe=a("code"),oPo=o("model.eval()"),rPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),tPo=o("model.train()"),aPo=l(),F(Sv.$$.fragment),tNe=l(),Vi=a("h2"),Rv=a("a"),Tfe=a("span"),F(CL.$$.fragment),nPo=l(),Mfe=a("span"),sPo=o("AutoModelForMultipleChoice"),aNe=l(),Po=a("div"),F(wL.$$.fragment),lPo=l(),Xi=a("p"),iPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WG=a("a"),dPo=o("from_pretrained()"),cPo=o(" class method or the "),QG=a("a"),mPo=o("from_config()"),fPo=o(` class
method.`),gPo=l(),AL=a("p"),hPo=o("This class cannot be instantiated directly using "),Efe=a("code"),uPo=o("__init__()"),pPo=o(" (throws an error)."),_Po=l(),dt=a("div"),F(yL.$$.fragment),bPo=l(),Cfe=a("p"),vPo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FPo=l(),zi=a("p"),TPo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),MPo=o("not"),EPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),CPo=o("from_pretrained()"),wPo=o(" to load the model weights."),APo=l(),F(Pv.$$.fragment),yPo=l(),ro=a("div"),F(LL.$$.fragment),LPo=l(),Afe=a("p"),xPo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$Po=l(),Pa=a("p"),kPo=o("The model class to instantiate is selected based on the "),yfe=a("code"),SPo=o("model_type"),RPo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),PPo=o("pretrained_model_name_or_path"),BPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),IPo=o("pretrained_model_name_or_path"),qPo=o(":"),NPo=l(),Y=a("ul"),Bv=a("li"),$fe=a("strong"),jPo=o("albert"),DPo=o(" \u2014 "),UG=a("a"),GPo=o("AlbertForMultipleChoice"),OPo=o(" (ALBERT model)"),VPo=l(),Iv=a("li"),kfe=a("strong"),XPo=o("bert"),zPo=o(" \u2014 "),JG=a("a"),WPo=o("BertForMultipleChoice"),QPo=o(" (BERT model)"),HPo=l(),qv=a("li"),Sfe=a("strong"),UPo=o("big_bird"),JPo=o(" \u2014 "),YG=a("a"),YPo=o("BigBirdForMultipleChoice"),KPo=o(" (BigBird model)"),ZPo=l(),Nv=a("li"),Rfe=a("strong"),eBo=o("camembert"),oBo=o(" \u2014 "),KG=a("a"),rBo=o("CamembertForMultipleChoice"),tBo=o(" (CamemBERT model)"),aBo=l(),jv=a("li"),Pfe=a("strong"),nBo=o("canine"),sBo=o(" \u2014 "),ZG=a("a"),lBo=o("CanineForMultipleChoice"),iBo=o(" (Canine model)"),dBo=l(),Dv=a("li"),Bfe=a("strong"),cBo=o("convbert"),mBo=o(" \u2014 "),eO=a("a"),fBo=o("ConvBertForMultipleChoice"),gBo=o(" (ConvBERT model)"),hBo=l(),Gv=a("li"),Ife=a("strong"),uBo=o("data2vec-text"),pBo=o(" \u2014 "),oO=a("a"),_Bo=o("Data2VecTextForMultipleChoice"),bBo=o(" (Data2VecText model)"),vBo=l(),Ov=a("li"),qfe=a("strong"),FBo=o("deberta-v2"),TBo=o(" \u2014 "),rO=a("a"),MBo=o("DebertaV2ForMultipleChoice"),EBo=o(" (DeBERTa-v2 model)"),CBo=l(),Vv=a("li"),Nfe=a("strong"),wBo=o("distilbert"),ABo=o(" \u2014 "),tO=a("a"),yBo=o("DistilBertForMultipleChoice"),LBo=o(" (DistilBERT model)"),xBo=l(),Xv=a("li"),jfe=a("strong"),$Bo=o("electra"),kBo=o(" \u2014 "),aO=a("a"),SBo=o("ElectraForMultipleChoice"),RBo=o(" (ELECTRA model)"),PBo=l(),zv=a("li"),Dfe=a("strong"),BBo=o("flaubert"),IBo=o(" \u2014 "),nO=a("a"),qBo=o("FlaubertForMultipleChoice"),NBo=o(" (FlauBERT model)"),jBo=l(),Wv=a("li"),Gfe=a("strong"),DBo=o("fnet"),GBo=o(" \u2014 "),sO=a("a"),OBo=o("FNetForMultipleChoice"),VBo=o(" (FNet model)"),XBo=l(),Qv=a("li"),Ofe=a("strong"),zBo=o("funnel"),WBo=o(" \u2014 "),lO=a("a"),QBo=o("FunnelForMultipleChoice"),HBo=o(" (Funnel Transformer model)"),UBo=l(),Hv=a("li"),Vfe=a("strong"),JBo=o("ibert"),YBo=o(" \u2014 "),iO=a("a"),KBo=o("IBertForMultipleChoice"),ZBo=o(" (I-BERT model)"),eIo=l(),Uv=a("li"),Xfe=a("strong"),oIo=o("longformer"),rIo=o(" \u2014 "),dO=a("a"),tIo=o("LongformerForMultipleChoice"),aIo=o(" (Longformer model)"),nIo=l(),Jv=a("li"),zfe=a("strong"),sIo=o("megatron-bert"),lIo=o(" \u2014 "),cO=a("a"),iIo=o("MegatronBertForMultipleChoice"),dIo=o(" (MegatronBert model)"),cIo=l(),Yv=a("li"),Wfe=a("strong"),mIo=o("mobilebert"),fIo=o(" \u2014 "),mO=a("a"),gIo=o("MobileBertForMultipleChoice"),hIo=o(" (MobileBERT model)"),uIo=l(),Kv=a("li"),Qfe=a("strong"),pIo=o("mpnet"),_Io=o(" \u2014 "),fO=a("a"),bIo=o("MPNetForMultipleChoice"),vIo=o(" (MPNet model)"),FIo=l(),Zv=a("li"),Hfe=a("strong"),TIo=o("nystromformer"),MIo=o(" \u2014 "),gO=a("a"),EIo=o("NystromformerForMultipleChoice"),CIo=o(" (Nystromformer model)"),wIo=l(),eF=a("li"),Ufe=a("strong"),AIo=o("qdqbert"),yIo=o(" \u2014 "),hO=a("a"),LIo=o("QDQBertForMultipleChoice"),xIo=o(" (QDQBert model)"),$Io=l(),oF=a("li"),Jfe=a("strong"),kIo=o("rembert"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("RemBertForMultipleChoice"),PIo=o(" (RemBERT model)"),BIo=l(),rF=a("li"),Yfe=a("strong"),IIo=o("roberta"),qIo=o(" \u2014 "),pO=a("a"),NIo=o("RobertaForMultipleChoice"),jIo=o(" (RoBERTa model)"),DIo=l(),tF=a("li"),Kfe=a("strong"),GIo=o("roformer"),OIo=o(" \u2014 "),_O=a("a"),VIo=o("RoFormerForMultipleChoice"),XIo=o(" (RoFormer model)"),zIo=l(),aF=a("li"),Zfe=a("strong"),WIo=o("squeezebert"),QIo=o(" \u2014 "),bO=a("a"),HIo=o("SqueezeBertForMultipleChoice"),UIo=o(" (SqueezeBERT model)"),JIo=l(),nF=a("li"),ege=a("strong"),YIo=o("xlm"),KIo=o(" \u2014 "),vO=a("a"),ZIo=o("XLMForMultipleChoice"),eqo=o(" (XLM model)"),oqo=l(),sF=a("li"),oge=a("strong"),rqo=o("xlm-roberta"),tqo=o(" \u2014 "),FO=a("a"),aqo=o("XLMRobertaForMultipleChoice"),nqo=o(" (XLM-RoBERTa model)"),sqo=l(),lF=a("li"),rge=a("strong"),lqo=o("xlm-roberta-xl"),iqo=o(" \u2014 "),TO=a("a"),dqo=o("XLMRobertaXLForMultipleChoice"),cqo=o(" (XLM-RoBERTa-XL model)"),mqo=l(),iF=a("li"),tge=a("strong"),fqo=o("xlnet"),gqo=o(" \u2014 "),MO=a("a"),hqo=o("XLNetForMultipleChoice"),uqo=o(" (XLNet model)"),pqo=l(),dF=a("li"),age=a("strong"),_qo=o("yoso"),bqo=o(" \u2014 "),EO=a("a"),vqo=o("YosoForMultipleChoice"),Fqo=o(" (YOSO model)"),Tqo=l(),cF=a("p"),Mqo=o("The model is set in evaluation mode by default using "),nge=a("code"),Eqo=o("model.eval()"),Cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),wqo=o("model.train()"),Aqo=l(),F(mF.$$.fragment),nNe=l(),Wi=a("h2"),fF=a("a"),lge=a("span"),F(xL.$$.fragment),yqo=l(),ige=a("span"),Lqo=o("AutoModelForNextSentencePrediction"),sNe=l(),Bo=a("div"),F($L.$$.fragment),xqo=l(),Qi=a("p"),$qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CO=a("a"),kqo=o("from_pretrained()"),Sqo=o(" class method or the "),wO=a("a"),Rqo=o("from_config()"),Pqo=o(` class
method.`),Bqo=l(),kL=a("p"),Iqo=o("This class cannot be instantiated directly using "),dge=a("code"),qqo=o("__init__()"),Nqo=o(" (throws an error)."),jqo=l(),ct=a("div"),F(SL.$$.fragment),Dqo=l(),cge=a("p"),Gqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oqo=l(),Hi=a("p"),Vqo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),Xqo=o("not"),zqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),Wqo=o("from_pretrained()"),Qqo=o(" to load the model weights."),Hqo=l(),F(gF.$$.fragment),Uqo=l(),to=a("div"),F(RL.$$.fragment),Jqo=l(),fge=a("p"),Yqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kqo=l(),Ba=a("p"),Zqo=o("The model class to instantiate is selected based on the "),gge=a("code"),eNo=o("model_type"),oNo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),rNo=o("pretrained_model_name_or_path"),tNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),aNo=o("pretrained_model_name_or_path"),nNo=o(":"),sNo=l(),Yr=a("ul"),hF=a("li"),pge=a("strong"),lNo=o("bert"),iNo=o(" \u2014 "),yO=a("a"),dNo=o("BertForNextSentencePrediction"),cNo=o(" (BERT model)"),mNo=l(),uF=a("li"),_ge=a("strong"),fNo=o("fnet"),gNo=o(" \u2014 "),LO=a("a"),hNo=o("FNetForNextSentencePrediction"),uNo=o(" (FNet model)"),pNo=l(),pF=a("li"),bge=a("strong"),_No=o("megatron-bert"),bNo=o(" \u2014 "),xO=a("a"),vNo=o("MegatronBertForNextSentencePrediction"),FNo=o(" (MegatronBert model)"),TNo=l(),_F=a("li"),vge=a("strong"),MNo=o("mobilebert"),ENo=o(" \u2014 "),$O=a("a"),CNo=o("MobileBertForNextSentencePrediction"),wNo=o(" (MobileBERT model)"),ANo=l(),bF=a("li"),Fge=a("strong"),yNo=o("qdqbert"),LNo=o(" \u2014 "),kO=a("a"),xNo=o("QDQBertForNextSentencePrediction"),$No=o(" (QDQBert model)"),kNo=l(),vF=a("p"),SNo=o("The model is set in evaluation mode by default using "),Tge=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),BNo=o("model.train()"),INo=l(),F(FF.$$.fragment),lNe=l(),Ui=a("h2"),TF=a("a"),Ege=a("span"),F(PL.$$.fragment),qNo=l(),Cge=a("span"),NNo=o("AutoModelForTokenClassification"),iNe=l(),Io=a("div"),F(BL.$$.fragment),jNo=l(),Ji=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SO=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),RO=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),IL=a("p"),WNo=o("This class cannot be instantiated directly using "),wge=a("code"),QNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),mt=a("div"),F(qL.$$.fragment),JNo=l(),Age=a("p"),YNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KNo=l(),Yi=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),ejo=o("not"),ojo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),rjo=o("from_pretrained()"),tjo=o(" to load the model weights."),ajo=l(),F(MF.$$.fragment),njo=l(),ao=a("div"),F(NL.$$.fragment),sjo=l(),Lge=a("p"),ljo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ijo=l(),Ia=a("p"),djo=o("The model class to instantiate is selected based on the "),xge=a("code"),cjo=o("model_type"),mjo=o(` property of the config object (either
passed as an argument or loaded from `),$ge=a("code"),fjo=o("pretrained_model_name_or_path"),gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),hjo=o("pretrained_model_name_or_path"),ujo=o(":"),pjo=l(),H=a("ul"),EF=a("li"),Sge=a("strong"),_jo=o("albert"),bjo=o(" \u2014 "),BO=a("a"),vjo=o("AlbertForTokenClassification"),Fjo=o(" (ALBERT model)"),Tjo=l(),CF=a("li"),Rge=a("strong"),Mjo=o("bert"),Ejo=o(" \u2014 "),IO=a("a"),Cjo=o("BertForTokenClassification"),wjo=o(" (BERT model)"),Ajo=l(),wF=a("li"),Pge=a("strong"),yjo=o("big_bird"),Ljo=o(" \u2014 "),qO=a("a"),xjo=o("BigBirdForTokenClassification"),$jo=o(" (BigBird model)"),kjo=l(),AF=a("li"),Bge=a("strong"),Sjo=o("camembert"),Rjo=o(" \u2014 "),NO=a("a"),Pjo=o("CamembertForTokenClassification"),Bjo=o(" (CamemBERT model)"),Ijo=l(),yF=a("li"),Ige=a("strong"),qjo=o("canine"),Njo=o(" \u2014 "),jO=a("a"),jjo=o("CanineForTokenClassification"),Djo=o(" (Canine model)"),Gjo=l(),LF=a("li"),qge=a("strong"),Ojo=o("convbert"),Vjo=o(" \u2014 "),DO=a("a"),Xjo=o("ConvBertForTokenClassification"),zjo=o(" (ConvBERT model)"),Wjo=l(),xF=a("li"),Nge=a("strong"),Qjo=o("data2vec-text"),Hjo=o(" \u2014 "),GO=a("a"),Ujo=o("Data2VecTextForTokenClassification"),Jjo=o(" (Data2VecText model)"),Yjo=l(),$F=a("li"),jge=a("strong"),Kjo=o("deberta"),Zjo=o(" \u2014 "),OO=a("a"),eDo=o("DebertaForTokenClassification"),oDo=o(" (DeBERTa model)"),rDo=l(),kF=a("li"),Dge=a("strong"),tDo=o("deberta-v2"),aDo=o(" \u2014 "),VO=a("a"),nDo=o("DebertaV2ForTokenClassification"),sDo=o(" (DeBERTa-v2 model)"),lDo=l(),SF=a("li"),Gge=a("strong"),iDo=o("distilbert"),dDo=o(" \u2014 "),XO=a("a"),cDo=o("DistilBertForTokenClassification"),mDo=o(" (DistilBERT model)"),fDo=l(),RF=a("li"),Oge=a("strong"),gDo=o("electra"),hDo=o(" \u2014 "),zO=a("a"),uDo=o("ElectraForTokenClassification"),pDo=o(" (ELECTRA model)"),_Do=l(),PF=a("li"),Vge=a("strong"),bDo=o("flaubert"),vDo=o(" \u2014 "),WO=a("a"),FDo=o("FlaubertForTokenClassification"),TDo=o(" (FlauBERT model)"),MDo=l(),BF=a("li"),Xge=a("strong"),EDo=o("fnet"),CDo=o(" \u2014 "),QO=a("a"),wDo=o("FNetForTokenClassification"),ADo=o(" (FNet model)"),yDo=l(),IF=a("li"),zge=a("strong"),LDo=o("funnel"),xDo=o(" \u2014 "),HO=a("a"),$Do=o("FunnelForTokenClassification"),kDo=o(" (Funnel Transformer model)"),SDo=l(),qF=a("li"),Wge=a("strong"),RDo=o("gpt2"),PDo=o(" \u2014 "),UO=a("a"),BDo=o("GPT2ForTokenClassification"),IDo=o(" (OpenAI GPT-2 model)"),qDo=l(),NF=a("li"),Qge=a("strong"),NDo=o("ibert"),jDo=o(" \u2014 "),JO=a("a"),DDo=o("IBertForTokenClassification"),GDo=o(" (I-BERT model)"),ODo=l(),jF=a("li"),Hge=a("strong"),VDo=o("layoutlm"),XDo=o(" \u2014 "),YO=a("a"),zDo=o("LayoutLMForTokenClassification"),WDo=o(" (LayoutLM model)"),QDo=l(),DF=a("li"),Uge=a("strong"),HDo=o("layoutlmv2"),UDo=o(" \u2014 "),KO=a("a"),JDo=o("LayoutLMv2ForTokenClassification"),YDo=o(" (LayoutLMv2 model)"),KDo=l(),GF=a("li"),Jge=a("strong"),ZDo=o("layoutlmv3"),eGo=o(" \u2014 "),ZO=a("a"),oGo=o("LayoutLMv3ForTokenClassification"),rGo=o(" (LayoutLMv3 model)"),tGo=l(),OF=a("li"),Yge=a("strong"),aGo=o("longformer"),nGo=o(" \u2014 "),eV=a("a"),sGo=o("LongformerForTokenClassification"),lGo=o(" (Longformer model)"),iGo=l(),VF=a("li"),Kge=a("strong"),dGo=o("megatron-bert"),cGo=o(" \u2014 "),oV=a("a"),mGo=o("MegatronBertForTokenClassification"),fGo=o(" (MegatronBert model)"),gGo=l(),XF=a("li"),Zge=a("strong"),hGo=o("mobilebert"),uGo=o(" \u2014 "),rV=a("a"),pGo=o("MobileBertForTokenClassification"),_Go=o(" (MobileBERT model)"),bGo=l(),zF=a("li"),ehe=a("strong"),vGo=o("mpnet"),FGo=o(" \u2014 "),tV=a("a"),TGo=o("MPNetForTokenClassification"),MGo=o(" (MPNet model)"),EGo=l(),WF=a("li"),ohe=a("strong"),CGo=o("nystromformer"),wGo=o(" \u2014 "),aV=a("a"),AGo=o("NystromformerForTokenClassification"),yGo=o(" (Nystromformer model)"),LGo=l(),QF=a("li"),rhe=a("strong"),xGo=o("qdqbert"),$Go=o(" \u2014 "),nV=a("a"),kGo=o("QDQBertForTokenClassification"),SGo=o(" (QDQBert model)"),RGo=l(),HF=a("li"),the=a("strong"),PGo=o("rembert"),BGo=o(" \u2014 "),sV=a("a"),IGo=o("RemBertForTokenClassification"),qGo=o(" (RemBERT model)"),NGo=l(),UF=a("li"),ahe=a("strong"),jGo=o("roberta"),DGo=o(" \u2014 "),lV=a("a"),GGo=o("RobertaForTokenClassification"),OGo=o(" (RoBERTa model)"),VGo=l(),JF=a("li"),nhe=a("strong"),XGo=o("roformer"),zGo=o(" \u2014 "),iV=a("a"),WGo=o("RoFormerForTokenClassification"),QGo=o(" (RoFormer model)"),HGo=l(),YF=a("li"),she=a("strong"),UGo=o("squeezebert"),JGo=o(" \u2014 "),dV=a("a"),YGo=o("SqueezeBertForTokenClassification"),KGo=o(" (SqueezeBERT model)"),ZGo=l(),KF=a("li"),lhe=a("strong"),eOo=o("xlm"),oOo=o(" \u2014 "),cV=a("a"),rOo=o("XLMForTokenClassification"),tOo=o(" (XLM model)"),aOo=l(),ZF=a("li"),ihe=a("strong"),nOo=o("xlm-roberta"),sOo=o(" \u2014 "),mV=a("a"),lOo=o("XLMRobertaForTokenClassification"),iOo=o(" (XLM-RoBERTa model)"),dOo=l(),e1=a("li"),dhe=a("strong"),cOo=o("xlm-roberta-xl"),mOo=o(" \u2014 "),fV=a("a"),fOo=o("XLMRobertaXLForTokenClassification"),gOo=o(" (XLM-RoBERTa-XL model)"),hOo=l(),o1=a("li"),che=a("strong"),uOo=o("xlnet"),pOo=o(" \u2014 "),gV=a("a"),_Oo=o("XLNetForTokenClassification"),bOo=o(" (XLNet model)"),vOo=l(),r1=a("li"),mhe=a("strong"),FOo=o("yoso"),TOo=o(" \u2014 "),hV=a("a"),MOo=o("YosoForTokenClassification"),EOo=o(" (YOSO model)"),COo=l(),t1=a("p"),wOo=o("The model is set in evaluation mode by default using "),fhe=a("code"),AOo=o("model.eval()"),yOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),LOo=o("model.train()"),xOo=l(),F(a1.$$.fragment),dNe=l(),Ki=a("h2"),n1=a("a"),hhe=a("span"),F(jL.$$.fragment),$Oo=l(),uhe=a("span"),kOo=o("AutoModelForQuestionAnswering"),cNe=l(),qo=a("div"),F(DL.$$.fragment),SOo=l(),Zi=a("p"),ROo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uV=a("a"),POo=o("from_pretrained()"),BOo=o(" class method or the "),pV=a("a"),IOo=o("from_config()"),qOo=o(` class
method.`),NOo=l(),GL=a("p"),jOo=o("This class cannot be instantiated directly using "),phe=a("code"),DOo=o("__init__()"),GOo=o(" (throws an error)."),OOo=l(),ft=a("div"),F(OL.$$.fragment),VOo=l(),_he=a("p"),XOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zOo=l(),ed=a("p"),WOo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),QOo=o("not"),HOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),UOo=o("from_pretrained()"),JOo=o(" to load the model weights."),YOo=l(),F(s1.$$.fragment),KOo=l(),no=a("div"),F(VL.$$.fragment),ZOo=l(),vhe=a("p"),eVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oVo=l(),qa=a("p"),rVo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),tVo=o("model_type"),aVo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),nVo=o("pretrained_model_name_or_path"),sVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),lVo=o("pretrained_model_name_or_path"),iVo=o(":"),dVo=l(),V=a("ul"),l1=a("li"),Ehe=a("strong"),cVo=o("albert"),mVo=o(" \u2014 "),bV=a("a"),fVo=o("AlbertForQuestionAnswering"),gVo=o(" (ALBERT model)"),hVo=l(),i1=a("li"),Che=a("strong"),uVo=o("bart"),pVo=o(" \u2014 "),vV=a("a"),_Vo=o("BartForQuestionAnswering"),bVo=o(" (BART model)"),vVo=l(),d1=a("li"),whe=a("strong"),FVo=o("bert"),TVo=o(" \u2014 "),FV=a("a"),MVo=o("BertForQuestionAnswering"),EVo=o(" (BERT model)"),CVo=l(),c1=a("li"),Ahe=a("strong"),wVo=o("big_bird"),AVo=o(" \u2014 "),TV=a("a"),yVo=o("BigBirdForQuestionAnswering"),LVo=o(" (BigBird model)"),xVo=l(),m1=a("li"),yhe=a("strong"),$Vo=o("bigbird_pegasus"),kVo=o(" \u2014 "),MV=a("a"),SVo=o("BigBirdPegasusForQuestionAnswering"),RVo=o(" (BigBirdPegasus model)"),PVo=l(),f1=a("li"),Lhe=a("strong"),BVo=o("camembert"),IVo=o(" \u2014 "),EV=a("a"),qVo=o("CamembertForQuestionAnswering"),NVo=o(" (CamemBERT model)"),jVo=l(),g1=a("li"),xhe=a("strong"),DVo=o("canine"),GVo=o(" \u2014 "),CV=a("a"),OVo=o("CanineForQuestionAnswering"),VVo=o(" (Canine model)"),XVo=l(),h1=a("li"),$he=a("strong"),zVo=o("convbert"),WVo=o(" \u2014 "),wV=a("a"),QVo=o("ConvBertForQuestionAnswering"),HVo=o(" (ConvBERT model)"),UVo=l(),u1=a("li"),khe=a("strong"),JVo=o("data2vec-text"),YVo=o(" \u2014 "),AV=a("a"),KVo=o("Data2VecTextForQuestionAnswering"),ZVo=o(" (Data2VecText model)"),eXo=l(),p1=a("li"),She=a("strong"),oXo=o("deberta"),rXo=o(" \u2014 "),yV=a("a"),tXo=o("DebertaForQuestionAnswering"),aXo=o(" (DeBERTa model)"),nXo=l(),_1=a("li"),Rhe=a("strong"),sXo=o("deberta-v2"),lXo=o(" \u2014 "),LV=a("a"),iXo=o("DebertaV2ForQuestionAnswering"),dXo=o(" (DeBERTa-v2 model)"),cXo=l(),b1=a("li"),Phe=a("strong"),mXo=o("distilbert"),fXo=o(" \u2014 "),xV=a("a"),gXo=o("DistilBertForQuestionAnswering"),hXo=o(" (DistilBERT model)"),uXo=l(),v1=a("li"),Bhe=a("strong"),pXo=o("electra"),_Xo=o(" \u2014 "),$V=a("a"),bXo=o("ElectraForQuestionAnswering"),vXo=o(" (ELECTRA model)"),FXo=l(),F1=a("li"),Ihe=a("strong"),TXo=o("flaubert"),MXo=o(" \u2014 "),kV=a("a"),EXo=o("FlaubertForQuestionAnsweringSimple"),CXo=o(" (FlauBERT model)"),wXo=l(),T1=a("li"),qhe=a("strong"),AXo=o("fnet"),yXo=o(" \u2014 "),SV=a("a"),LXo=o("FNetForQuestionAnswering"),xXo=o(" (FNet model)"),$Xo=l(),M1=a("li"),Nhe=a("strong"),kXo=o("funnel"),SXo=o(" \u2014 "),RV=a("a"),RXo=o("FunnelForQuestionAnswering"),PXo=o(" (Funnel Transformer model)"),BXo=l(),E1=a("li"),jhe=a("strong"),IXo=o("gptj"),qXo=o(" \u2014 "),PV=a("a"),NXo=o("GPTJForQuestionAnswering"),jXo=o(" (GPT-J model)"),DXo=l(),C1=a("li"),Dhe=a("strong"),GXo=o("ibert"),OXo=o(" \u2014 "),BV=a("a"),VXo=o("IBertForQuestionAnswering"),XXo=o(" (I-BERT model)"),zXo=l(),w1=a("li"),Ghe=a("strong"),WXo=o("layoutlmv2"),QXo=o(" \u2014 "),IV=a("a"),HXo=o("LayoutLMv2ForQuestionAnswering"),UXo=o(" (LayoutLMv2 model)"),JXo=l(),A1=a("li"),Ohe=a("strong"),YXo=o("layoutlmv3"),KXo=o(" \u2014 "),qV=a("a"),ZXo=o("LayoutLMv3ForQuestionAnswering"),ezo=o(" (LayoutLMv3 model)"),ozo=l(),y1=a("li"),Vhe=a("strong"),rzo=o("led"),tzo=o(" \u2014 "),NV=a("a"),azo=o("LEDForQuestionAnswering"),nzo=o(" (LED model)"),szo=l(),L1=a("li"),Xhe=a("strong"),lzo=o("longformer"),izo=o(" \u2014 "),jV=a("a"),dzo=o("LongformerForQuestionAnswering"),czo=o(" (Longformer model)"),mzo=l(),x1=a("li"),zhe=a("strong"),fzo=o("lxmert"),gzo=o(" \u2014 "),DV=a("a"),hzo=o("LxmertForQuestionAnswering"),uzo=o(" (LXMERT model)"),pzo=l(),$1=a("li"),Whe=a("strong"),_zo=o("mbart"),bzo=o(" \u2014 "),GV=a("a"),vzo=o("MBartForQuestionAnswering"),Fzo=o(" (mBART model)"),Tzo=l(),k1=a("li"),Qhe=a("strong"),Mzo=o("megatron-bert"),Ezo=o(" \u2014 "),OV=a("a"),Czo=o("MegatronBertForQuestionAnswering"),wzo=o(" (MegatronBert model)"),Azo=l(),S1=a("li"),Hhe=a("strong"),yzo=o("mobilebert"),Lzo=o(" \u2014 "),VV=a("a"),xzo=o("MobileBertForQuestionAnswering"),$zo=o(" (MobileBERT model)"),kzo=l(),R1=a("li"),Uhe=a("strong"),Szo=o("mpnet"),Rzo=o(" \u2014 "),XV=a("a"),Pzo=o("MPNetForQuestionAnswering"),Bzo=o(" (MPNet model)"),Izo=l(),P1=a("li"),Jhe=a("strong"),qzo=o("nystromformer"),Nzo=o(" \u2014 "),zV=a("a"),jzo=o("NystromformerForQuestionAnswering"),Dzo=o(" (Nystromformer model)"),Gzo=l(),B1=a("li"),Yhe=a("strong"),Ozo=o("qdqbert"),Vzo=o(" \u2014 "),WV=a("a"),Xzo=o("QDQBertForQuestionAnswering"),zzo=o(" (QDQBert model)"),Wzo=l(),I1=a("li"),Khe=a("strong"),Qzo=o("reformer"),Hzo=o(" \u2014 "),QV=a("a"),Uzo=o("ReformerForQuestionAnswering"),Jzo=o(" (Reformer model)"),Yzo=l(),q1=a("li"),Zhe=a("strong"),Kzo=o("rembert"),Zzo=o(" \u2014 "),HV=a("a"),eWo=o("RemBertForQuestionAnswering"),oWo=o(" (RemBERT model)"),rWo=l(),N1=a("li"),eue=a("strong"),tWo=o("roberta"),aWo=o(" \u2014 "),UV=a("a"),nWo=o("RobertaForQuestionAnswering"),sWo=o(" (RoBERTa model)"),lWo=l(),j1=a("li"),oue=a("strong"),iWo=o("roformer"),dWo=o(" \u2014 "),JV=a("a"),cWo=o("RoFormerForQuestionAnswering"),mWo=o(" (RoFormer model)"),fWo=l(),D1=a("li"),rue=a("strong"),gWo=o("splinter"),hWo=o(" \u2014 "),YV=a("a"),uWo=o("SplinterForQuestionAnswering"),pWo=o(" (Splinter model)"),_Wo=l(),G1=a("li"),tue=a("strong"),bWo=o("squeezebert"),vWo=o(" \u2014 "),KV=a("a"),FWo=o("SqueezeBertForQuestionAnswering"),TWo=o(" (SqueezeBERT model)"),MWo=l(),O1=a("li"),aue=a("strong"),EWo=o("xlm"),CWo=o(" \u2014 "),ZV=a("a"),wWo=o("XLMForQuestionAnsweringSimple"),AWo=o(" (XLM model)"),yWo=l(),V1=a("li"),nue=a("strong"),LWo=o("xlm-roberta"),xWo=o(" \u2014 "),eX=a("a"),$Wo=o("XLMRobertaForQuestionAnswering"),kWo=o(" (XLM-RoBERTa model)"),SWo=l(),X1=a("li"),sue=a("strong"),RWo=o("xlm-roberta-xl"),PWo=o(" \u2014 "),oX=a("a"),BWo=o("XLMRobertaXLForQuestionAnswering"),IWo=o(" (XLM-RoBERTa-XL model)"),qWo=l(),z1=a("li"),lue=a("strong"),NWo=o("xlnet"),jWo=o(" \u2014 "),rX=a("a"),DWo=o("XLNetForQuestionAnsweringSimple"),GWo=o(" (XLNet model)"),OWo=l(),W1=a("li"),iue=a("strong"),VWo=o("yoso"),XWo=o(" \u2014 "),tX=a("a"),zWo=o("YosoForQuestionAnswering"),WWo=o(" (YOSO model)"),QWo=l(),Q1=a("p"),HWo=o("The model is set in evaluation mode by default using "),due=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),YWo=o("model.train()"),KWo=l(),F(H1.$$.fragment),mNe=l(),od=a("h2"),U1=a("a"),mue=a("span"),F(XL.$$.fragment),ZWo=l(),fue=a("span"),eQo=o("AutoModelForTableQuestionAnswering"),fNe=l(),No=a("div"),F(zL.$$.fragment),oQo=l(),rd=a("p"),rQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aX=a("a"),tQo=o("from_pretrained()"),aQo=o(" class method or the "),nX=a("a"),nQo=o("from_config()"),sQo=o(` class
method.`),lQo=l(),WL=a("p"),iQo=o("This class cannot be instantiated directly using "),gue=a("code"),dQo=o("__init__()"),cQo=o(" (throws an error)."),mQo=l(),gt=a("div"),F(QL.$$.fragment),fQo=l(),hue=a("p"),gQo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hQo=l(),td=a("p"),uQo=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),pQo=o("not"),_Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),bQo=o("from_pretrained()"),vQo=o(" to load the model weights."),FQo=l(),F(J1.$$.fragment),TQo=l(),so=a("div"),F(HL.$$.fragment),MQo=l(),pue=a("p"),EQo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CQo=l(),Na=a("p"),wQo=o("The model class to instantiate is selected based on the "),_ue=a("code"),AQo=o("model_type"),yQo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),LQo=o("pretrained_model_name_or_path"),xQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),$Qo=o("pretrained_model_name_or_path"),kQo=o(":"),SQo=l(),Fue=a("ul"),Y1=a("li"),Tue=a("strong"),RQo=o("tapas"),PQo=o(" \u2014 "),lX=a("a"),BQo=o("TapasForQuestionAnswering"),IQo=o(" (TAPAS model)"),qQo=l(),K1=a("p"),NQo=o("The model is set in evaluation mode by default using "),Mue=a("code"),jQo=o("model.eval()"),DQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),GQo=o("model.train()"),OQo=l(),F(Z1.$$.fragment),gNe=l(),ad=a("h2"),eT=a("a"),Cue=a("span"),F(UL.$$.fragment),VQo=l(),wue=a("span"),XQo=o("AutoModelForImageClassification"),hNe=l(),jo=a("div"),F(JL.$$.fragment),zQo=l(),nd=a("p"),WQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=a("a"),QQo=o("from_pretrained()"),HQo=o(" class method or the "),dX=a("a"),UQo=o("from_config()"),JQo=o(` class
method.`),YQo=l(),YL=a("p"),KQo=o("This class cannot be instantiated directly using "),Aue=a("code"),ZQo=o("__init__()"),eHo=o(" (throws an error)."),oHo=l(),ht=a("div"),F(KL.$$.fragment),rHo=l(),yue=a("p"),tHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aHo=l(),sd=a("p"),nHo=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),sHo=o("not"),lHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),iHo=o("from_pretrained()"),dHo=o(" to load the model weights."),cHo=l(),F(oT.$$.fragment),mHo=l(),lo=a("div"),F(ZL.$$.fragment),fHo=l(),xue=a("p"),gHo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hHo=l(),ja=a("p"),uHo=o("The model class to instantiate is selected based on the "),$ue=a("code"),pHo=o("model_type"),_Ho=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),bHo=o("pretrained_model_name_or_path"),vHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),FHo=o("pretrained_model_name_or_path"),THo=o(":"),MHo=l(),Fe=a("ul"),rT=a("li"),Rue=a("strong"),EHo=o("beit"),CHo=o(" \u2014 "),mX=a("a"),wHo=o("BeitForImageClassification"),AHo=o(" (BEiT model)"),yHo=l(),tT=a("li"),Pue=a("strong"),LHo=o("convnext"),xHo=o(" \u2014 "),fX=a("a"),$Ho=o("ConvNextForImageClassification"),kHo=o(" (ConvNext model)"),SHo=l(),aT=a("li"),Bue=a("strong"),RHo=o("cvt"),PHo=o(" \u2014 "),gX=a("a"),BHo=o("CvtForImageClassification"),IHo=o(" (CvT model)"),qHo=l(),nT=a("li"),Iue=a("strong"),NHo=o("data2vec-vision"),jHo=o(" \u2014 "),hX=a("a"),DHo=o("Data2VecVisionForImageClassification"),GHo=o(" (Data2VecVision model)"),OHo=l(),Bs=a("li"),que=a("strong"),VHo=o("deit"),XHo=o(" \u2014 "),uX=a("a"),zHo=o("DeiTForImageClassification"),WHo=o(" or "),pX=a("a"),QHo=o("DeiTForImageClassificationWithTeacher"),HHo=o(" (DeiT model)"),UHo=l(),sT=a("li"),Nue=a("strong"),JHo=o("imagegpt"),YHo=o(" \u2014 "),_X=a("a"),KHo=o("ImageGPTForImageClassification"),ZHo=o(" (ImageGPT model)"),eUo=l(),ut=a("li"),jue=a("strong"),oUo=o("perceiver"),rUo=o(" \u2014 "),bX=a("a"),tUo=o("PerceiverForImageClassificationLearned"),aUo=o(" or "),vX=a("a"),nUo=o("PerceiverForImageClassificationFourier"),sUo=o(" or "),FX=a("a"),lUo=o("PerceiverForImageClassificationConvProcessing"),iUo=o(" (Perceiver model)"),dUo=l(),lT=a("li"),Due=a("strong"),cUo=o("poolformer"),mUo=o(" \u2014 "),TX=a("a"),fUo=o("PoolFormerForImageClassification"),gUo=o(" (PoolFormer model)"),hUo=l(),iT=a("li"),Gue=a("strong"),uUo=o("regnet"),pUo=o(" \u2014 "),MX=a("a"),_Uo=o("RegNetForImageClassification"),bUo=o(" (RegNet model)"),vUo=l(),dT=a("li"),Oue=a("strong"),FUo=o("resnet"),TUo=o(" \u2014 "),EX=a("a"),MUo=o("ResNetForImageClassification"),EUo=o(" (ResNet model)"),CUo=l(),cT=a("li"),Vue=a("strong"),wUo=o("segformer"),AUo=o(" \u2014 "),CX=a("a"),yUo=o("SegformerForImageClassification"),LUo=o(" (SegFormer model)"),xUo=l(),mT=a("li"),Xue=a("strong"),$Uo=o("swin"),kUo=o(" \u2014 "),wX=a("a"),SUo=o("SwinForImageClassification"),RUo=o(" (Swin model)"),PUo=l(),fT=a("li"),zue=a("strong"),BUo=o("van"),IUo=o(" \u2014 "),AX=a("a"),qUo=o("VanForImageClassification"),NUo=o(" (VAN model)"),jUo=l(),gT=a("li"),Wue=a("strong"),DUo=o("vit"),GUo=o(" \u2014 "),yX=a("a"),OUo=o("ViTForImageClassification"),VUo=o(" (ViT model)"),XUo=l(),hT=a("p"),zUo=o("The model is set in evaluation mode by default using "),Que=a("code"),WUo=o("model.eval()"),QUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),HUo=o("model.train()"),UUo=l(),F(uT.$$.fragment),uNe=l(),ld=a("h2"),pT=a("a"),Uue=a("span"),F(e8.$$.fragment),JUo=l(),Jue=a("span"),YUo=o("AutoModelForVision2Seq"),pNe=l(),Do=a("div"),F(o8.$$.fragment),KUo=l(),id=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LX=a("a"),eJo=o("from_pretrained()"),oJo=o(" class method or the "),xX=a("a"),rJo=o("from_config()"),tJo=o(` class
method.`),aJo=l(),r8=a("p"),nJo=o("This class cannot be instantiated directly using "),Yue=a("code"),sJo=o("__init__()"),lJo=o(" (throws an error)."),iJo=l(),pt=a("div"),F(t8.$$.fragment),dJo=l(),Kue=a("p"),cJo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mJo=l(),dd=a("p"),fJo=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),gJo=o("not"),hJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),uJo=o("from_pretrained()"),pJo=o(" to load the model weights."),_Jo=l(),F(_T.$$.fragment),bJo=l(),io=a("div"),F(a8.$$.fragment),vJo=l(),epe=a("p"),FJo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TJo=l(),Da=a("p"),MJo=o("The model class to instantiate is selected based on the "),ope=a("code"),EJo=o("model_type"),CJo=o(` property of the config object (either
passed as an argument or loaded from `),rpe=a("code"),wJo=o("pretrained_model_name_or_path"),AJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=a("code"),yJo=o("pretrained_model_name_or_path"),LJo=o(":"),xJo=l(),ape=a("ul"),bT=a("li"),npe=a("strong"),$Jo=o("vision-encoder-decoder"),kJo=o(" \u2014 "),kX=a("a"),SJo=o("VisionEncoderDecoderModel"),RJo=o(" (Vision Encoder decoder model)"),PJo=l(),vT=a("p"),BJo=o("The model is set in evaluation mode by default using "),spe=a("code"),IJo=o("model.eval()"),qJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),NJo=o("model.train()"),jJo=l(),F(FT.$$.fragment),_Ne=l(),cd=a("h2"),TT=a("a"),ipe=a("span"),F(n8.$$.fragment),DJo=l(),dpe=a("span"),GJo=o("AutoModelForAudioClassification"),bNe=l(),Go=a("div"),F(s8.$$.fragment),OJo=l(),md=a("p"),VJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SX=a("a"),XJo=o("from_pretrained()"),zJo=o(" class method or the "),RX=a("a"),WJo=o("from_config()"),QJo=o(` class
method.`),HJo=l(),l8=a("p"),UJo=o("This class cannot be instantiated directly using "),cpe=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),_t=a("div"),F(i8.$$.fragment),ZJo=l(),mpe=a("p"),eYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oYo=l(),fd=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),nYo=o("from_pretrained()"),sYo=o(" to load the model weights."),lYo=l(),F(MT.$$.fragment),iYo=l(),co=a("div"),F(d8.$$.fragment),dYo=l(),gpe=a("p"),cYo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),mYo=l(),Ga=a("p"),fYo=o("The model class to instantiate is selected based on the "),hpe=a("code"),gYo=o("model_type"),hYo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),uYo=o("pretrained_model_name_or_path"),pYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=a("code"),_Yo=o("pretrained_model_name_or_path"),bYo=o(":"),vYo=l(),ke=a("ul"),ET=a("li"),_pe=a("strong"),FYo=o("data2vec-audio"),TYo=o(" \u2014 "),BX=a("a"),MYo=o("Data2VecAudioForSequenceClassification"),EYo=o(" (Data2VecAudio model)"),CYo=l(),CT=a("li"),bpe=a("strong"),wYo=o("hubert"),AYo=o(" \u2014 "),IX=a("a"),yYo=o("HubertForSequenceClassification"),LYo=o(" (Hubert model)"),xYo=l(),wT=a("li"),vpe=a("strong"),$Yo=o("sew"),kYo=o(" \u2014 "),qX=a("a"),SYo=o("SEWForSequenceClassification"),RYo=o(" (SEW model)"),PYo=l(),AT=a("li"),Fpe=a("strong"),BYo=o("sew-d"),IYo=o(" \u2014 "),NX=a("a"),qYo=o("SEWDForSequenceClassification"),NYo=o(" (SEW-D model)"),jYo=l(),yT=a("li"),Tpe=a("strong"),DYo=o("unispeech"),GYo=o(" \u2014 "),jX=a("a"),OYo=o("UniSpeechForSequenceClassification"),VYo=o(" (UniSpeech model)"),XYo=l(),LT=a("li"),Mpe=a("strong"),zYo=o("unispeech-sat"),WYo=o(" \u2014 "),DX=a("a"),QYo=o("UniSpeechSatForSequenceClassification"),HYo=o(" (UniSpeechSat model)"),UYo=l(),xT=a("li"),Epe=a("strong"),JYo=o("wav2vec2"),YYo=o(" \u2014 "),GX=a("a"),KYo=o("Wav2Vec2ForSequenceClassification"),ZYo=o(" (Wav2Vec2 model)"),eKo=l(),$T=a("li"),Cpe=a("strong"),oKo=o("wav2vec2-conformer"),rKo=o(" \u2014 "),OX=a("a"),tKo=o("Wav2Vec2ConformerForSequenceClassification"),aKo=o(" (Wav2Vec2-Conformer model)"),nKo=l(),kT=a("li"),wpe=a("strong"),sKo=o("wavlm"),lKo=o(" \u2014 "),VX=a("a"),iKo=o("WavLMForSequenceClassification"),dKo=o(" (WavLM model)"),cKo=l(),ST=a("p"),mKo=o("The model is set in evaluation mode by default using "),Ape=a("code"),fKo=o("model.eval()"),gKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),hKo=o("model.train()"),uKo=l(),F(RT.$$.fragment),vNe=l(),gd=a("h2"),PT=a("a"),Lpe=a("span"),F(c8.$$.fragment),pKo=l(),xpe=a("span"),_Ko=o("AutoModelForAudioFrameClassification"),FNe=l(),Oo=a("div"),F(m8.$$.fragment),bKo=l(),hd=a("p"),vKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XX=a("a"),FKo=o("from_pretrained()"),TKo=o(" class method or the "),zX=a("a"),MKo=o("from_config()"),EKo=o(` class
method.`),CKo=l(),f8=a("p"),wKo=o("This class cannot be instantiated directly using "),$pe=a("code"),AKo=o("__init__()"),yKo=o(" (throws an error)."),LKo=l(),bt=a("div"),F(g8.$$.fragment),xKo=l(),kpe=a("p"),$Ko=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kKo=l(),ud=a("p"),SKo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),RKo=o("not"),PKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),BKo=o("from_pretrained()"),IKo=o(" to load the model weights."),qKo=l(),F(BT.$$.fragment),NKo=l(),mo=a("div"),F(h8.$$.fragment),jKo=l(),Rpe=a("p"),DKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),GKo=l(),Oa=a("p"),OKo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),VKo=o("model_type"),XKo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),zKo=o("pretrained_model_name_or_path"),WKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),QKo=o("pretrained_model_name_or_path"),HKo=o(":"),UKo=l(),Kr=a("ul"),IT=a("li"),qpe=a("strong"),JKo=o("data2vec-audio"),YKo=o(" \u2014 "),QX=a("a"),KKo=o("Data2VecAudioForAudioFrameClassification"),ZKo=o(" (Data2VecAudio model)"),eZo=l(),qT=a("li"),Npe=a("strong"),oZo=o("unispeech-sat"),rZo=o(" \u2014 "),HX=a("a"),tZo=o("UniSpeechSatForAudioFrameClassification"),aZo=o(" (UniSpeechSat model)"),nZo=l(),NT=a("li"),jpe=a("strong"),sZo=o("wav2vec2"),lZo=o(" \u2014 "),UX=a("a"),iZo=o("Wav2Vec2ForAudioFrameClassification"),dZo=o(" (Wav2Vec2 model)"),cZo=l(),jT=a("li"),Dpe=a("strong"),mZo=o("wav2vec2-conformer"),fZo=o(" \u2014 "),JX=a("a"),gZo=o("Wav2Vec2ConformerForAudioFrameClassification"),hZo=o(" (Wav2Vec2-Conformer model)"),uZo=l(),DT=a("li"),Gpe=a("strong"),pZo=o("wavlm"),_Zo=o(" \u2014 "),YX=a("a"),bZo=o("WavLMForAudioFrameClassification"),vZo=o(" (WavLM model)"),FZo=l(),GT=a("p"),TZo=o("The model is set in evaluation mode by default using "),Ope=a("code"),MZo=o("model.eval()"),EZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),CZo=o("model.train()"),wZo=l(),F(OT.$$.fragment),TNe=l(),pd=a("h2"),VT=a("a"),Xpe=a("span"),F(u8.$$.fragment),AZo=l(),zpe=a("span"),yZo=o("AutoModelForCTC"),MNe=l(),Vo=a("div"),F(p8.$$.fragment),LZo=l(),_d=a("p"),xZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KX=a("a"),$Zo=o("from_pretrained()"),kZo=o(" class method or the "),ZX=a("a"),SZo=o("from_config()"),RZo=o(` class
method.`),PZo=l(),_8=a("p"),BZo=o("This class cannot be instantiated directly using "),Wpe=a("code"),IZo=o("__init__()"),qZo=o(" (throws an error)."),NZo=l(),vt=a("div"),F(b8.$$.fragment),jZo=l(),Qpe=a("p"),DZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),GZo=l(),bd=a("p"),OZo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),VZo=o("not"),XZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),zZo=o("from_pretrained()"),WZo=o(" to load the model weights."),QZo=l(),F(XT.$$.fragment),HZo=l(),fo=a("div"),F(v8.$$.fragment),UZo=l(),Upe=a("p"),JZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),YZo=l(),Va=a("p"),KZo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),Se=a("ul"),zT=a("li"),Zpe=a("strong"),ser=o("data2vec-audio"),ler=o(" \u2014 "),oz=a("a"),ier=o("Data2VecAudioForCTC"),der=o(" (Data2VecAudio model)"),cer=l(),WT=a("li"),e_e=a("strong"),mer=o("hubert"),fer=o(" \u2014 "),rz=a("a"),ger=o("HubertForCTC"),her=o(" (Hubert model)"),uer=l(),QT=a("li"),o_e=a("strong"),per=o("sew"),_er=o(" \u2014 "),tz=a("a"),ber=o("SEWForCTC"),ver=o(" (SEW model)"),Fer=l(),HT=a("li"),r_e=a("strong"),Ter=o("sew-d"),Mer=o(" \u2014 "),az=a("a"),Eer=o("SEWDForCTC"),Cer=o(" (SEW-D model)"),wer=l(),UT=a("li"),t_e=a("strong"),Aer=o("unispeech"),yer=o(" \u2014 "),nz=a("a"),Ler=o("UniSpeechForCTC"),xer=o(" (UniSpeech model)"),$er=l(),JT=a("li"),a_e=a("strong"),ker=o("unispeech-sat"),Ser=o(" \u2014 "),sz=a("a"),Rer=o("UniSpeechSatForCTC"),Per=o(" (UniSpeechSat model)"),Ber=l(),YT=a("li"),n_e=a("strong"),Ier=o("wav2vec2"),qer=o(" \u2014 "),lz=a("a"),Ner=o("Wav2Vec2ForCTC"),jer=o(" (Wav2Vec2 model)"),Der=l(),KT=a("li"),s_e=a("strong"),Ger=o("wav2vec2-conformer"),Oer=o(" \u2014 "),iz=a("a"),Ver=o("Wav2Vec2ConformerForCTC"),Xer=o(" (Wav2Vec2-Conformer model)"),zer=l(),ZT=a("li"),l_e=a("strong"),Wer=o("wavlm"),Qer=o(" \u2014 "),dz=a("a"),Her=o("WavLMForCTC"),Uer=o(" (WavLM model)"),Jer=l(),eM=a("p"),Yer=o("The model is set in evaluation mode by default using "),i_e=a("code"),Ker=o("model.eval()"),Zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),eor=o("model.train()"),oor=l(),F(oM.$$.fragment),ENe=l(),vd=a("h2"),rM=a("a"),c_e=a("span"),F(F8.$$.fragment),ror=l(),m_e=a("span"),tor=o("AutoModelForSpeechSeq2Seq"),CNe=l(),Xo=a("div"),F(T8.$$.fragment),aor=l(),Fd=a("p"),nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cz=a("a"),sor=o("from_pretrained()"),lor=o(" class method or the "),mz=a("a"),ior=o("from_config()"),dor=o(` class
method.`),cor=l(),M8=a("p"),mor=o("This class cannot be instantiated directly using "),f_e=a("code"),gor=o("__init__()"),hor=o(" (throws an error)."),uor=l(),Ft=a("div"),F(E8.$$.fragment),por=l(),g_e=a("p"),_or=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bor=l(),Td=a("p"),vor=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),For=o("not"),Tor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=a("a"),Mor=o("from_pretrained()"),Eor=o(" to load the model weights."),Cor=l(),F(tM.$$.fragment),wor=l(),go=a("div"),F(C8.$$.fragment),Aor=l(),u_e=a("p"),yor=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lor=l(),Xa=a("p"),xor=o("The model class to instantiate is selected based on the "),p_e=a("code"),$or=o("model_type"),kor=o(` property of the config object (either
passed as an argument or loaded from `),__e=a("code"),Sor=o("pretrained_model_name_or_path"),Ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),Por=o("pretrained_model_name_or_path"),Bor=o(":"),Ior=l(),w8=a("ul"),aM=a("li"),v_e=a("strong"),qor=o("speech-encoder-decoder"),Nor=o(" \u2014 "),gz=a("a"),jor=o("SpeechEncoderDecoderModel"),Dor=o(" (Speech Encoder decoder model)"),Gor=l(),nM=a("li"),F_e=a("strong"),Oor=o("speech_to_text"),Vor=o(" \u2014 "),hz=a("a"),Xor=o("Speech2TextForConditionalGeneration"),zor=o(" (Speech2Text model)"),Wor=l(),sM=a("p"),Qor=o("The model is set in evaluation mode by default using "),T_e=a("code"),Hor=o("model.eval()"),Uor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=a("code"),Jor=o("model.train()"),Yor=l(),F(lM.$$.fragment),wNe=l(),Md=a("h2"),iM=a("a"),E_e=a("span"),F(A8.$$.fragment),Kor=l(),C_e=a("span"),Zor=o("AutoModelForAudioXVector"),ANe=l(),zo=a("div"),F(y8.$$.fragment),err=l(),Ed=a("p"),orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uz=a("a"),rrr=o("from_pretrained()"),trr=o(" class method or the "),pz=a("a"),arr=o("from_config()"),nrr=o(` class
method.`),srr=l(),L8=a("p"),lrr=o("This class cannot be instantiated directly using "),w_e=a("code"),irr=o("__init__()"),drr=o(" (throws an error)."),crr=l(),Tt=a("div"),F(x8.$$.fragment),mrr=l(),A_e=a("p"),frr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),grr=l(),Cd=a("p"),hrr=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),urr=o("not"),prr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),_rr=o("from_pretrained()"),brr=o(" to load the model weights."),vrr=l(),F(dM.$$.fragment),Frr=l(),ho=a("div"),F($8.$$.fragment),Trr=l(),L_e=a("p"),Mrr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Err=l(),za=a("p"),Crr=o("The model class to instantiate is selected based on the "),x_e=a("code"),wrr=o("model_type"),Arr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),yrr=o("pretrained_model_name_or_path"),Lrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=a("code"),xrr=o("pretrained_model_name_or_path"),$rr=o(":"),krr=l(),Zr=a("ul"),cM=a("li"),S_e=a("strong"),Srr=o("data2vec-audio"),Rrr=o(" \u2014 "),bz=a("a"),Prr=o("Data2VecAudioForXVector"),Brr=o(" (Data2VecAudio model)"),Irr=l(),mM=a("li"),R_e=a("strong"),qrr=o("unispeech-sat"),Nrr=o(" \u2014 "),vz=a("a"),jrr=o("UniSpeechSatForXVector"),Drr=o(" (UniSpeechSat model)"),Grr=l(),fM=a("li"),P_e=a("strong"),Orr=o("wav2vec2"),Vrr=o(" \u2014 "),Fz=a("a"),Xrr=o("Wav2Vec2ForXVector"),zrr=o(" (Wav2Vec2 model)"),Wrr=l(),gM=a("li"),B_e=a("strong"),Qrr=o("wav2vec2-conformer"),Hrr=o(" \u2014 "),Tz=a("a"),Urr=o("Wav2Vec2ConformerForXVector"),Jrr=o(" (Wav2Vec2-Conformer model)"),Yrr=l(),hM=a("li"),I_e=a("strong"),Krr=o("wavlm"),Zrr=o(" \u2014 "),Mz=a("a"),etr=o("WavLMForXVector"),otr=o(" (WavLM model)"),rtr=l(),uM=a("p"),ttr=o("The model is set in evaluation mode by default using "),q_e=a("code"),atr=o("model.eval()"),ntr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),str=o("model.train()"),ltr=l(),F(pM.$$.fragment),yNe=l(),wd=a("h2"),_M=a("a"),j_e=a("span"),F(k8.$$.fragment),itr=l(),D_e=a("span"),dtr=o("AutoModelForMaskedImageModeling"),LNe=l(),Wo=a("div"),F(S8.$$.fragment),ctr=l(),Ad=a("p"),mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ez=a("a"),ftr=o("from_pretrained()"),gtr=o(" class method or the "),Cz=a("a"),htr=o("from_config()"),utr=o(` class
method.`),ptr=l(),R8=a("p"),_tr=o("This class cannot be instantiated directly using "),G_e=a("code"),btr=o("__init__()"),vtr=o(" (throws an error)."),Ftr=l(),Mt=a("div"),F(P8.$$.fragment),Ttr=l(),O_e=a("p"),Mtr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Etr=l(),yd=a("p"),Ctr=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),wtr=o("not"),Atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),ytr=o("from_pretrained()"),Ltr=o(" to load the model weights."),xtr=l(),F(bM.$$.fragment),$tr=l(),uo=a("div"),F(B8.$$.fragment),ktr=l(),X_e=a("p"),Str=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rtr=l(),Wa=a("p"),Ptr=o("The model class to instantiate is selected based on the "),z_e=a("code"),Btr=o("model_type"),Itr=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),qtr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),jtr=o("pretrained_model_name_or_path"),Dtr=o(":"),Gtr=l(),Ld=a("ul"),vM=a("li"),H_e=a("strong"),Otr=o("deit"),Vtr=o(" \u2014 "),Az=a("a"),Xtr=o("DeiTForMaskedImageModeling"),ztr=o(" (DeiT model)"),Wtr=l(),FM=a("li"),U_e=a("strong"),Qtr=o("swin"),Htr=o(" \u2014 "),yz=a("a"),Utr=o("SwinForMaskedImageModeling"),Jtr=o(" (Swin model)"),Ytr=l(),TM=a("li"),J_e=a("strong"),Ktr=o("vit"),Ztr=o(" \u2014 "),Lz=a("a"),ear=o("ViTForMaskedImageModeling"),oar=o(" (ViT model)"),rar=l(),MM=a("p"),tar=o("The model is set in evaluation mode by default using "),Y_e=a("code"),aar=o("model.eval()"),nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),sar=o("model.train()"),lar=l(),F(EM.$$.fragment),xNe=l(),xd=a("h2"),CM=a("a"),Z_e=a("span"),F(I8.$$.fragment),iar=l(),ebe=a("span"),dar=o("AutoModelForObjectDetection"),$Ne=l(),Qo=a("div"),F(q8.$$.fragment),car=l(),$d=a("p"),mar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),xz=a("a"),far=o("from_pretrained()"),gar=o(" class method or the "),$z=a("a"),har=o("from_config()"),uar=o(` class
method.`),par=l(),N8=a("p"),_ar=o("This class cannot be instantiated directly using "),obe=a("code"),bar=o("__init__()"),Far=o(" (throws an error)."),Tar=l(),Et=a("div"),F(j8.$$.fragment),Mar=l(),rbe=a("p"),Ear=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Car=l(),kd=a("p"),war=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),Aar=o("not"),yar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Lar=o("from_pretrained()"),xar=o(" to load the model weights."),$ar=l(),F(wM.$$.fragment),kar=l(),po=a("div"),F(D8.$$.fragment),Sar=l(),abe=a("p"),Rar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Par=l(),Qa=a("p"),Bar=o("The model class to instantiate is selected based on the "),nbe=a("code"),Iar=o("model_type"),qar=o(` property of the config object (either
passed as an argument or loaded from `),sbe=a("code"),Nar=o("pretrained_model_name_or_path"),jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=a("code"),Dar=o("pretrained_model_name_or_path"),Gar=o(":"),Oar=l(),G8=a("ul"),AM=a("li"),ibe=a("strong"),Var=o("detr"),Xar=o(" \u2014 "),Sz=a("a"),zar=o("DetrForObjectDetection"),War=o(" (DETR model)"),Qar=l(),yM=a("li"),dbe=a("strong"),Har=o("yolos"),Uar=o(" \u2014 "),Rz=a("a"),Jar=o("YolosForObjectDetection"),Yar=o(" (YOLOS model)"),Kar=l(),LM=a("p"),Zar=o("The model is set in evaluation mode by default using "),cbe=a("code"),enr=o("model.eval()"),onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),rnr=o("model.train()"),tnr=l(),F(xM.$$.fragment),kNe=l(),Sd=a("h2"),$M=a("a"),fbe=a("span"),F(O8.$$.fragment),anr=l(),gbe=a("span"),nnr=o("AutoModelForImageSegmentation"),SNe=l(),Ho=a("div"),F(V8.$$.fragment),snr=l(),Rd=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Pz=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),Bz=a("a"),cnr=o("from_config()"),mnr=o(` class
method.`),fnr=l(),X8=a("p"),gnr=o("This class cannot be instantiated directly using "),hbe=a("code"),hnr=o("__init__()"),unr=o(" (throws an error)."),pnr=l(),Ct=a("div"),F(z8.$$.fragment),_nr=l(),ube=a("p"),bnr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),vnr=l(),Pd=a("p"),Fnr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),F(kM.$$.fragment),Anr=l(),_o=a("div"),F(W8.$$.fragment),ynr=l(),_be=a("p"),Lnr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xnr=l(),Ha=a("p"),$nr=o("The model class to instantiate is selected based on the "),bbe=a("code"),knr=o("model_type"),Snr=o(` property of the config object (either
passed as an argument or loaded from `),vbe=a("code"),Rnr=o("pretrained_model_name_or_path"),Pnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Bnr=o("pretrained_model_name_or_path"),Inr=o(":"),qnr=l(),Tbe=a("ul"),SM=a("li"),Mbe=a("strong"),Nnr=o("detr"),jnr=o(" \u2014 "),qz=a("a"),Dnr=o("DetrForSegmentation"),Gnr=o(" (DETR model)"),Onr=l(),RM=a("p"),Vnr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),Xnr=o("model.eval()"),znr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),Wnr=o("model.train()"),Qnr=l(),F(PM.$$.fragment),RNe=l(),Bd=a("h2"),BM=a("a"),wbe=a("span"),F(Q8.$$.fragment),Hnr=l(),Abe=a("span"),Unr=o("AutoModelForSemanticSegmentation"),PNe=l(),Uo=a("div"),F(H8.$$.fragment),Jnr=l(),Id=a("p"),Ynr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nz=a("a"),Knr=o("from_pretrained()"),Znr=o(" class method or the "),jz=a("a"),esr=o("from_config()"),osr=o(` class
method.`),rsr=l(),U8=a("p"),tsr=o("This class cannot be instantiated directly using "),ybe=a("code"),asr=o("__init__()"),nsr=o(" (throws an error)."),ssr=l(),wt=a("div"),F(J8.$$.fragment),lsr=l(),Lbe=a("p"),isr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dsr=l(),qd=a("p"),csr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),msr=o("not"),fsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),gsr=o("from_pretrained()"),hsr=o(" to load the model weights."),usr=l(),F(IM.$$.fragment),psr=l(),bo=a("div"),F(Y8.$$.fragment),_sr=l(),$be=a("p"),bsr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),vsr=l(),Ua=a("p"),Fsr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Tsr=o("model_type"),Msr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),Esr=o("pretrained_model_name_or_path"),Csr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),wsr=o("pretrained_model_name_or_path"),Asr=o(":"),ysr=l(),Ja=a("ul"),qM=a("li"),Pbe=a("strong"),Lsr=o("beit"),xsr=o(" \u2014 "),Gz=a("a"),$sr=o("BeitForSemanticSegmentation"),ksr=o(" (BEiT model)"),Ssr=l(),NM=a("li"),Bbe=a("strong"),Rsr=o("data2vec-vision"),Psr=o(" \u2014 "),Oz=a("a"),Bsr=o("Data2VecVisionForSemanticSegmentation"),Isr=o(" (Data2VecVision model)"),qsr=l(),jM=a("li"),Ibe=a("strong"),Nsr=o("dpt"),jsr=o(" \u2014 "),Vz=a("a"),Dsr=o("DPTForSemanticSegmentation"),Gsr=o(" (DPT model)"),Osr=l(),DM=a("li"),qbe=a("strong"),Vsr=o("segformer"),Xsr=o(" \u2014 "),Xz=a("a"),zsr=o("SegformerForSemanticSegmentation"),Wsr=o(" (SegFormer model)"),Qsr=l(),GM=a("p"),Hsr=o("The model is set in evaluation mode by default using "),Nbe=a("code"),Usr=o("model.eval()"),Jsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=a("code"),Ysr=o("model.train()"),Ksr=l(),F(OM.$$.fragment),BNe=l(),Nd=a("h2"),VM=a("a"),Dbe=a("span"),F(K8.$$.fragment),Zsr=l(),Gbe=a("span"),elr=o("AutoModelForInstanceSegmentation"),INe=l(),Jo=a("div"),F(Z8.$$.fragment),olr=l(),jd=a("p"),rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zz=a("a"),tlr=o("from_pretrained()"),alr=o(" class method or the "),Wz=a("a"),nlr=o("from_config()"),slr=o(` class
method.`),llr=l(),e7=a("p"),ilr=o("This class cannot be instantiated directly using "),Obe=a("code"),dlr=o("__init__()"),clr=o(" (throws an error)."),mlr=l(),At=a("div"),F(o7.$$.fragment),flr=l(),Vbe=a("p"),glr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),hlr=l(),Dd=a("p"),ulr=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),plr=o("not"),_lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),blr=o("from_pretrained()"),vlr=o(" to load the model weights."),Flr=l(),F(XM.$$.fragment),Tlr=l(),vo=a("div"),F(r7.$$.fragment),Mlr=l(),zbe=a("p"),Elr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Clr=l(),Ya=a("p"),wlr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),Alr=o("model_type"),ylr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),Llr=o("pretrained_model_name_or_path"),xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(":"),Slr=l(),Ube=a("ul"),zM=a("li"),Jbe=a("strong"),Rlr=o("maskformer"),Plr=o(" \u2014 "),Hz=a("a"),Blr=o("MaskFormerForInstanceSegmentation"),Ilr=o(" (MaskFormer model)"),qlr=l(),WM=a("p"),Nlr=o("The model is set in evaluation mode by default using "),Ybe=a("code"),jlr=o("model.eval()"),Dlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=a("code"),Glr=o("model.train()"),Olr=l(),F(QM.$$.fragment),qNe=l(),Gd=a("h2"),HM=a("a"),Zbe=a("span"),F(t7.$$.fragment),Vlr=l(),e2e=a("span"),Xlr=o("TFAutoModel"),NNe=l(),Yo=a("div"),F(a7.$$.fragment),zlr=l(),Od=a("p"),Wlr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uz=a("a"),Qlr=o("from_pretrained()"),Hlr=o(" class method or the "),Jz=a("a"),Ulr=o("from_config()"),Jlr=o(` class
method.`),Ylr=l(),n7=a("p"),Klr=o("This class cannot be instantiated directly using "),o2e=a("code"),Zlr=o("__init__()"),eir=o(" (throws an error)."),oir=l(),yt=a("div"),F(s7.$$.fragment),rir=l(),r2e=a("p"),tir=o("Instantiates one of the base model classes of the library from a configuration."),air=l(),Vd=a("p"),nir=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),sir=o("not"),lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),iir=o("from_pretrained()"),dir=o(" to load the model weights."),cir=l(),F(UM.$$.fragment),mir=l(),wr=a("div"),F(l7.$$.fragment),fir=l(),a2e=a("p"),gir=o("Instantiate one of the base model classes of the library from a pretrained model."),hir=l(),Ka=a("p"),uir=o("The model class to instantiate is selected based on the "),n2e=a("code"),pir=o("model_type"),_ir=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(":"),Mir=l(),N=a("ul"),JM=a("li"),i2e=a("strong"),Eir=o("albert"),Cir=o(" \u2014 "),Kz=a("a"),wir=o("TFAlbertModel"),Air=o(" (ALBERT model)"),yir=l(),YM=a("li"),d2e=a("strong"),Lir=o("bart"),xir=o(" \u2014 "),Zz=a("a"),$ir=o("TFBartModel"),kir=o(" (BART model)"),Sir=l(),KM=a("li"),c2e=a("strong"),Rir=o("bert"),Pir=o(" \u2014 "),eW=a("a"),Bir=o("TFBertModel"),Iir=o(" (BERT model)"),qir=l(),ZM=a("li"),m2e=a("strong"),Nir=o("blenderbot"),jir=o(" \u2014 "),oW=a("a"),Dir=o("TFBlenderbotModel"),Gir=o(" (Blenderbot model)"),Oir=l(),e4=a("li"),f2e=a("strong"),Vir=o("blenderbot-small"),Xir=o(" \u2014 "),rW=a("a"),zir=o("TFBlenderbotSmallModel"),Wir=o(" (BlenderbotSmall model)"),Qir=l(),o4=a("li"),g2e=a("strong"),Hir=o("camembert"),Uir=o(" \u2014 "),tW=a("a"),Jir=o("TFCamembertModel"),Yir=o(" (CamemBERT model)"),Kir=l(),r4=a("li"),h2e=a("strong"),Zir=o("clip"),edr=o(" \u2014 "),aW=a("a"),odr=o("TFCLIPModel"),rdr=o(" (CLIP model)"),tdr=l(),t4=a("li"),u2e=a("strong"),adr=o("convbert"),ndr=o(" \u2014 "),nW=a("a"),sdr=o("TFConvBertModel"),ldr=o(" (ConvBERT model)"),idr=l(),a4=a("li"),p2e=a("strong"),ddr=o("convnext"),cdr=o(" \u2014 "),sW=a("a"),mdr=o("TFConvNextModel"),fdr=o(" (ConvNext model)"),gdr=l(),n4=a("li"),_2e=a("strong"),hdr=o("ctrl"),udr=o(" \u2014 "),lW=a("a"),pdr=o("TFCTRLModel"),_dr=o(" (CTRL model)"),bdr=l(),s4=a("li"),b2e=a("strong"),vdr=o("data2vec-vision"),Fdr=o(" \u2014 "),iW=a("a"),Tdr=o("TFData2VecVisionModel"),Mdr=o(" (Data2VecVision model)"),Edr=l(),l4=a("li"),v2e=a("strong"),Cdr=o("deberta"),wdr=o(" \u2014 "),dW=a("a"),Adr=o("TFDebertaModel"),ydr=o(" (DeBERTa model)"),Ldr=l(),i4=a("li"),F2e=a("strong"),xdr=o("deberta-v2"),$dr=o(" \u2014 "),cW=a("a"),kdr=o("TFDebertaV2Model"),Sdr=o(" (DeBERTa-v2 model)"),Rdr=l(),d4=a("li"),T2e=a("strong"),Pdr=o("distilbert"),Bdr=o(" \u2014 "),mW=a("a"),Idr=o("TFDistilBertModel"),qdr=o(" (DistilBERT model)"),Ndr=l(),c4=a("li"),M2e=a("strong"),jdr=o("dpr"),Ddr=o(" \u2014 "),fW=a("a"),Gdr=o("TFDPRQuestionEncoder"),Odr=o(" (DPR model)"),Vdr=l(),m4=a("li"),E2e=a("strong"),Xdr=o("electra"),zdr=o(" \u2014 "),gW=a("a"),Wdr=o("TFElectraModel"),Qdr=o(" (ELECTRA model)"),Hdr=l(),f4=a("li"),C2e=a("strong"),Udr=o("flaubert"),Jdr=o(" \u2014 "),hW=a("a"),Ydr=o("TFFlaubertModel"),Kdr=o(" (FlauBERT model)"),Zdr=l(),Is=a("li"),w2e=a("strong"),ecr=o("funnel"),ocr=o(" \u2014 "),uW=a("a"),rcr=o("TFFunnelModel"),tcr=o(" or "),pW=a("a"),acr=o("TFFunnelBaseModel"),ncr=o(" (Funnel Transformer model)"),scr=l(),g4=a("li"),A2e=a("strong"),lcr=o("gpt2"),icr=o(" \u2014 "),_W=a("a"),dcr=o("TFGPT2Model"),ccr=o(" (OpenAI GPT-2 model)"),mcr=l(),h4=a("li"),y2e=a("strong"),fcr=o("gptj"),gcr=o(" \u2014 "),bW=a("a"),hcr=o("TFGPTJModel"),ucr=o(" (GPT-J model)"),pcr=l(),u4=a("li"),L2e=a("strong"),_cr=o("hubert"),bcr=o(" \u2014 "),vW=a("a"),vcr=o("TFHubertModel"),Fcr=o(" (Hubert model)"),Tcr=l(),p4=a("li"),x2e=a("strong"),Mcr=o("layoutlm"),Ecr=o(" \u2014 "),FW=a("a"),Ccr=o("TFLayoutLMModel"),wcr=o(" (LayoutLM model)"),Acr=l(),_4=a("li"),$2e=a("strong"),ycr=o("led"),Lcr=o(" \u2014 "),TW=a("a"),xcr=o("TFLEDModel"),$cr=o(" (LED model)"),kcr=l(),b4=a("li"),k2e=a("strong"),Scr=o("longformer"),Rcr=o(" \u2014 "),MW=a("a"),Pcr=o("TFLongformerModel"),Bcr=o(" (Longformer model)"),Icr=l(),v4=a("li"),S2e=a("strong"),qcr=o("lxmert"),Ncr=o(" \u2014 "),EW=a("a"),jcr=o("TFLxmertModel"),Dcr=o(" (LXMERT model)"),Gcr=l(),F4=a("li"),R2e=a("strong"),Ocr=o("marian"),Vcr=o(" \u2014 "),CW=a("a"),Xcr=o("TFMarianModel"),zcr=o(" (Marian model)"),Wcr=l(),T4=a("li"),P2e=a("strong"),Qcr=o("mbart"),Hcr=o(" \u2014 "),wW=a("a"),Ucr=o("TFMBartModel"),Jcr=o(" (mBART model)"),Ycr=l(),M4=a("li"),B2e=a("strong"),Kcr=o("mobilebert"),Zcr=o(" \u2014 "),AW=a("a"),emr=o("TFMobileBertModel"),omr=o(" (MobileBERT model)"),rmr=l(),E4=a("li"),I2e=a("strong"),tmr=o("mpnet"),amr=o(" \u2014 "),yW=a("a"),nmr=o("TFMPNetModel"),smr=o(" (MPNet model)"),lmr=l(),C4=a("li"),q2e=a("strong"),imr=o("mt5"),dmr=o(" \u2014 "),LW=a("a"),cmr=o("TFMT5Model"),mmr=o(" (mT5 model)"),fmr=l(),w4=a("li"),N2e=a("strong"),gmr=o("openai-gpt"),hmr=o(" \u2014 "),xW=a("a"),umr=o("TFOpenAIGPTModel"),pmr=o(" (OpenAI GPT model)"),_mr=l(),A4=a("li"),j2e=a("strong"),bmr=o("pegasus"),vmr=o(" \u2014 "),$W=a("a"),Fmr=o("TFPegasusModel"),Tmr=o(" (Pegasus model)"),Mmr=l(),y4=a("li"),D2e=a("strong"),Emr=o("rembert"),Cmr=o(" \u2014 "),kW=a("a"),wmr=o("TFRemBertModel"),Amr=o(" (RemBERT model)"),ymr=l(),L4=a("li"),G2e=a("strong"),Lmr=o("roberta"),xmr=o(" \u2014 "),SW=a("a"),$mr=o("TFRobertaModel"),kmr=o(" (RoBERTa model)"),Smr=l(),x4=a("li"),O2e=a("strong"),Rmr=o("roformer"),Pmr=o(" \u2014 "),RW=a("a"),Bmr=o("TFRoFormerModel"),Imr=o(" (RoFormer model)"),qmr=l(),$4=a("li"),V2e=a("strong"),Nmr=o("speech_to_text"),jmr=o(" \u2014 "),PW=a("a"),Dmr=o("TFSpeech2TextModel"),Gmr=o(" (Speech2Text model)"),Omr=l(),k4=a("li"),X2e=a("strong"),Vmr=o("swin"),Xmr=o(" \u2014 "),BW=a("a"),zmr=o("TFSwinModel"),Wmr=o(" (Swin model)"),Qmr=l(),S4=a("li"),z2e=a("strong"),Hmr=o("t5"),Umr=o(" \u2014 "),IW=a("a"),Jmr=o("TFT5Model"),Ymr=o(" (T5 model)"),Kmr=l(),R4=a("li"),W2e=a("strong"),Zmr=o("tapas"),efr=o(" \u2014 "),qW=a("a"),ofr=o("TFTapasModel"),rfr=o(" (TAPAS model)"),tfr=l(),P4=a("li"),Q2e=a("strong"),afr=o("transfo-xl"),nfr=o(" \u2014 "),NW=a("a"),sfr=o("TFTransfoXLModel"),lfr=o(" (Transformer-XL model)"),ifr=l(),B4=a("li"),H2e=a("strong"),dfr=o("vit"),cfr=o(" \u2014 "),jW=a("a"),mfr=o("TFViTModel"),ffr=o(" (ViT model)"),gfr=l(),I4=a("li"),U2e=a("strong"),hfr=o("vit_mae"),ufr=o(" \u2014 "),DW=a("a"),pfr=o("TFViTMAEModel"),_fr=o(" (ViTMAE model)"),bfr=l(),q4=a("li"),J2e=a("strong"),vfr=o("wav2vec2"),Ffr=o(" \u2014 "),GW=a("a"),Tfr=o("TFWav2Vec2Model"),Mfr=o(" (Wav2Vec2 model)"),Efr=l(),N4=a("li"),Y2e=a("strong"),Cfr=o("xlm"),wfr=o(" \u2014 "),OW=a("a"),Afr=o("TFXLMModel"),yfr=o(" (XLM model)"),Lfr=l(),j4=a("li"),K2e=a("strong"),xfr=o("xlm-roberta"),$fr=o(" \u2014 "),VW=a("a"),kfr=o("TFXLMRobertaModel"),Sfr=o(" (XLM-RoBERTa model)"),Rfr=l(),D4=a("li"),Z2e=a("strong"),Pfr=o("xlnet"),Bfr=o(" \u2014 "),XW=a("a"),Ifr=o("TFXLNetModel"),qfr=o(" (XLNet model)"),Nfr=l(),F(G4.$$.fragment),jNe=l(),Xd=a("h2"),O4=a("a"),eve=a("span"),F(i7.$$.fragment),jfr=l(),ove=a("span"),Dfr=o("TFAutoModelForPreTraining"),DNe=l(),Ko=a("div"),F(d7.$$.fragment),Gfr=l(),zd=a("p"),Ofr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zW=a("a"),Vfr=o("from_pretrained()"),Xfr=o(" class method or the "),WW=a("a"),zfr=o("from_config()"),Wfr=o(` class
method.`),Qfr=l(),c7=a("p"),Hfr=o("This class cannot be instantiated directly using "),rve=a("code"),Ufr=o("__init__()"),Jfr=o(" (throws an error)."),Yfr=l(),Lt=a("div"),F(m7.$$.fragment),Kfr=l(),tve=a("p"),Zfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),egr=l(),Wd=a("p"),ogr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),rgr=o("not"),tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),agr=o("from_pretrained()"),ngr=o(" to load the model weights."),sgr=l(),F(V4.$$.fragment),lgr=l(),Ar=a("div"),F(f7.$$.fragment),igr=l(),nve=a("p"),dgr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cgr=l(),Za=a("p"),mgr=o("The model class to instantiate is selected based on the "),sve=a("code"),fgr=o("model_type"),ggr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),hgr=o("pretrained_model_name_or_path"),ugr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),pgr=o("pretrained_model_name_or_path"),_gr=o(":"),bgr=l(),se=a("ul"),X4=a("li"),dve=a("strong"),vgr=o("albert"),Fgr=o(" \u2014 "),HW=a("a"),Tgr=o("TFAlbertForPreTraining"),Mgr=o(" (ALBERT model)"),Egr=l(),z4=a("li"),cve=a("strong"),Cgr=o("bart"),wgr=o(" \u2014 "),UW=a("a"),Agr=o("TFBartForConditionalGeneration"),ygr=o(" (BART model)"),Lgr=l(),W4=a("li"),mve=a("strong"),xgr=o("bert"),$gr=o(" \u2014 "),JW=a("a"),kgr=o("TFBertForPreTraining"),Sgr=o(" (BERT model)"),Rgr=l(),Q4=a("li"),fve=a("strong"),Pgr=o("camembert"),Bgr=o(" \u2014 "),YW=a("a"),Igr=o("TFCamembertForMaskedLM"),qgr=o(" (CamemBERT model)"),Ngr=l(),H4=a("li"),gve=a("strong"),jgr=o("ctrl"),Dgr=o(" \u2014 "),KW=a("a"),Ggr=o("TFCTRLLMHeadModel"),Ogr=o(" (CTRL model)"),Vgr=l(),U4=a("li"),hve=a("strong"),Xgr=o("distilbert"),zgr=o(" \u2014 "),ZW=a("a"),Wgr=o("TFDistilBertForMaskedLM"),Qgr=o(" (DistilBERT model)"),Hgr=l(),J4=a("li"),uve=a("strong"),Ugr=o("electra"),Jgr=o(" \u2014 "),eQ=a("a"),Ygr=o("TFElectraForPreTraining"),Kgr=o(" (ELECTRA model)"),Zgr=l(),Y4=a("li"),pve=a("strong"),ehr=o("flaubert"),ohr=o(" \u2014 "),oQ=a("a"),rhr=o("TFFlaubertWithLMHeadModel"),thr=o(" (FlauBERT model)"),ahr=l(),K4=a("li"),_ve=a("strong"),nhr=o("funnel"),shr=o(" \u2014 "),rQ=a("a"),lhr=o("TFFunnelForPreTraining"),ihr=o(" (Funnel Transformer model)"),dhr=l(),Z4=a("li"),bve=a("strong"),chr=o("gpt2"),mhr=o(" \u2014 "),tQ=a("a"),fhr=o("TFGPT2LMHeadModel"),ghr=o(" (OpenAI GPT-2 model)"),hhr=l(),eE=a("li"),vve=a("strong"),uhr=o("layoutlm"),phr=o(" \u2014 "),aQ=a("a"),_hr=o("TFLayoutLMForMaskedLM"),bhr=o(" (LayoutLM model)"),vhr=l(),oE=a("li"),Fve=a("strong"),Fhr=o("lxmert"),Thr=o(" \u2014 "),nQ=a("a"),Mhr=o("TFLxmertForPreTraining"),Ehr=o(" (LXMERT model)"),Chr=l(),rE=a("li"),Tve=a("strong"),whr=o("mobilebert"),Ahr=o(" \u2014 "),sQ=a("a"),yhr=o("TFMobileBertForPreTraining"),Lhr=o(" (MobileBERT model)"),xhr=l(),tE=a("li"),Mve=a("strong"),$hr=o("mpnet"),khr=o(" \u2014 "),lQ=a("a"),Shr=o("TFMPNetForMaskedLM"),Rhr=o(" (MPNet model)"),Phr=l(),aE=a("li"),Eve=a("strong"),Bhr=o("openai-gpt"),Ihr=o(" \u2014 "),iQ=a("a"),qhr=o("TFOpenAIGPTLMHeadModel"),Nhr=o(" (OpenAI GPT model)"),jhr=l(),nE=a("li"),Cve=a("strong"),Dhr=o("roberta"),Ghr=o(" \u2014 "),dQ=a("a"),Ohr=o("TFRobertaForMaskedLM"),Vhr=o(" (RoBERTa model)"),Xhr=l(),sE=a("li"),wve=a("strong"),zhr=o("t5"),Whr=o(" \u2014 "),cQ=a("a"),Qhr=o("TFT5ForConditionalGeneration"),Hhr=o(" (T5 model)"),Uhr=l(),lE=a("li"),Ave=a("strong"),Jhr=o("tapas"),Yhr=o(" \u2014 "),mQ=a("a"),Khr=o("TFTapasForMaskedLM"),Zhr=o(" (TAPAS model)"),eur=l(),iE=a("li"),yve=a("strong"),our=o("transfo-xl"),rur=o(" \u2014 "),fQ=a("a"),tur=o("TFTransfoXLLMHeadModel"),aur=o(" (Transformer-XL model)"),nur=l(),dE=a("li"),Lve=a("strong"),sur=o("vit_mae"),lur=o(" \u2014 "),gQ=a("a"),iur=o("TFViTMAEForPreTraining"),dur=o(" (ViTMAE model)"),cur=l(),cE=a("li"),xve=a("strong"),mur=o("xlm"),fur=o(" \u2014 "),hQ=a("a"),gur=o("TFXLMWithLMHeadModel"),hur=o(" (XLM model)"),uur=l(),mE=a("li"),$ve=a("strong"),pur=o("xlm-roberta"),_ur=o(" \u2014 "),uQ=a("a"),bur=o("TFXLMRobertaForMaskedLM"),vur=o(" (XLM-RoBERTa model)"),Fur=l(),fE=a("li"),kve=a("strong"),Tur=o("xlnet"),Mur=o(" \u2014 "),pQ=a("a"),Eur=o("TFXLNetLMHeadModel"),Cur=o(" (XLNet model)"),wur=l(),F(gE.$$.fragment),GNe=l(),Qd=a("h2"),hE=a("a"),Sve=a("span"),F(g7.$$.fragment),Aur=l(),Rve=a("span"),yur=o("TFAutoModelForCausalLM"),ONe=l(),Zo=a("div"),F(h7.$$.fragment),Lur=l(),Hd=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=a("a"),$ur=o("from_pretrained()"),kur=o(" class method or the "),bQ=a("a"),Sur=o("from_config()"),Rur=o(` class
method.`),Pur=l(),u7=a("p"),Bur=o("This class cannot be instantiated directly using "),Pve=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),Nur=l(),xt=a("div"),F(p7.$$.fragment),jur=l(),Bve=a("p"),Dur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gur=l(),Ud=a("p"),Our=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),Vur=o("not"),Xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),zur=o("from_pretrained()"),Wur=o(" to load the model weights."),Qur=l(),F(uE.$$.fragment),Hur=l(),yr=a("div"),F(_7.$$.fragment),Uur=l(),qve=a("p"),Jur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yur=l(),en=a("p"),Kur=o("The model class to instantiate is selected based on the "),Nve=a("code"),Zur=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),Me=a("ul"),pE=a("li"),Gve=a("strong"),spr=o("bert"),lpr=o(" \u2014 "),FQ=a("a"),ipr=o("TFBertLMHeadModel"),dpr=o(" (BERT model)"),cpr=l(),_E=a("li"),Ove=a("strong"),mpr=o("camembert"),fpr=o(" \u2014 "),TQ=a("a"),gpr=o("TFCamembertForCausalLM"),hpr=o(" (CamemBERT model)"),upr=l(),bE=a("li"),Vve=a("strong"),ppr=o("ctrl"),_pr=o(" \u2014 "),MQ=a("a"),bpr=o("TFCTRLLMHeadModel"),vpr=o(" (CTRL model)"),Fpr=l(),vE=a("li"),Xve=a("strong"),Tpr=o("gpt2"),Mpr=o(" \u2014 "),EQ=a("a"),Epr=o("TFGPT2LMHeadModel"),Cpr=o(" (OpenAI GPT-2 model)"),wpr=l(),FE=a("li"),zve=a("strong"),Apr=o("gptj"),ypr=o(" \u2014 "),CQ=a("a"),Lpr=o("TFGPTJForCausalLM"),xpr=o(" (GPT-J model)"),$pr=l(),TE=a("li"),Wve=a("strong"),kpr=o("openai-gpt"),Spr=o(" \u2014 "),wQ=a("a"),Rpr=o("TFOpenAIGPTLMHeadModel"),Ppr=o(" (OpenAI GPT model)"),Bpr=l(),ME=a("li"),Qve=a("strong"),Ipr=o("rembert"),qpr=o(" \u2014 "),AQ=a("a"),Npr=o("TFRemBertForCausalLM"),jpr=o(" (RemBERT model)"),Dpr=l(),EE=a("li"),Hve=a("strong"),Gpr=o("roberta"),Opr=o(" \u2014 "),yQ=a("a"),Vpr=o("TFRobertaForCausalLM"),Xpr=o(" (RoBERTa model)"),zpr=l(),CE=a("li"),Uve=a("strong"),Wpr=o("roformer"),Qpr=o(" \u2014 "),LQ=a("a"),Hpr=o("TFRoFormerForCausalLM"),Upr=o(" (RoFormer model)"),Jpr=l(),wE=a("li"),Jve=a("strong"),Ypr=o("transfo-xl"),Kpr=o(" \u2014 "),xQ=a("a"),Zpr=o("TFTransfoXLLMHeadModel"),e_r=o(" (Transformer-XL model)"),o_r=l(),AE=a("li"),Yve=a("strong"),r_r=o("xlm"),t_r=o(" \u2014 "),$Q=a("a"),a_r=o("TFXLMWithLMHeadModel"),n_r=o(" (XLM model)"),s_r=l(),yE=a("li"),Kve=a("strong"),l_r=o("xlnet"),i_r=o(" \u2014 "),kQ=a("a"),d_r=o("TFXLNetLMHeadModel"),c_r=o(" (XLNet model)"),m_r=l(),F(LE.$$.fragment),VNe=l(),Jd=a("h2"),xE=a("a"),Zve=a("span"),F(b7.$$.fragment),f_r=l(),eFe=a("span"),g_r=o("TFAutoModelForImageClassification"),XNe=l(),er=a("div"),F(v7.$$.fragment),h_r=l(),Yd=a("p"),u_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=a("a"),p_r=o("from_pretrained()"),__r=o(" class method or the "),RQ=a("a"),b_r=o("from_config()"),v_r=o(` class
method.`),F_r=l(),F7=a("p"),T_r=o("This class cannot be instantiated directly using "),oFe=a("code"),M_r=o("__init__()"),E_r=o(" (throws an error)."),C_r=l(),$t=a("div"),F(T7.$$.fragment),w_r=l(),rFe=a("p"),A_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),y_r=l(),Kd=a("p"),L_r=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),x_r=o("not"),$_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),k_r=o("from_pretrained()"),S_r=o(" to load the model weights."),R_r=l(),F($E.$$.fragment),P_r=l(),Lr=a("div"),F(M7.$$.fragment),B_r=l(),aFe=a("p"),I_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),q_r=l(),on=a("p"),N_r=o("The model class to instantiate is selected based on the "),nFe=a("code"),j_r=o("model_type"),D_r=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),G_r=o("pretrained_model_name_or_path"),O_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),V_r=o("pretrained_model_name_or_path"),X_r=o(":"),z_r=l(),rn=a("ul"),kE=a("li"),iFe=a("strong"),W_r=o("convnext"),Q_r=o(" \u2014 "),BQ=a("a"),H_r=o("TFConvNextForImageClassification"),U_r=o(" (ConvNext model)"),J_r=l(),SE=a("li"),dFe=a("strong"),Y_r=o("data2vec-vision"),K_r=o(" \u2014 "),IQ=a("a"),Z_r=o("TFData2VecVisionForImageClassification"),ebr=o(" (Data2VecVision model)"),obr=l(),RE=a("li"),cFe=a("strong"),rbr=o("swin"),tbr=o(" \u2014 "),qQ=a("a"),abr=o("TFSwinForImageClassification"),nbr=o(" (Swin model)"),sbr=l(),PE=a("li"),mFe=a("strong"),lbr=o("vit"),ibr=o(" \u2014 "),NQ=a("a"),dbr=o("TFViTForImageClassification"),cbr=o(" (ViT model)"),mbr=l(),F(BE.$$.fragment),zNe=l(),Zd=a("h2"),IE=a("a"),fFe=a("span"),F(E7.$$.fragment),fbr=l(),gFe=a("span"),gbr=o("TFAutoModelForMaskedLM"),WNe=l(),or=a("div"),F(C7.$$.fragment),hbr=l(),ec=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=a("a"),pbr=o("from_pretrained()"),_br=o(" class method or the "),DQ=a("a"),bbr=o("from_config()"),vbr=o(` class
method.`),Fbr=l(),w7=a("p"),Tbr=o("This class cannot be instantiated directly using "),hFe=a("code"),Mbr=o("__init__()"),Ebr=o(" (throws an error)."),Cbr=l(),kt=a("div"),F(A7.$$.fragment),wbr=l(),uFe=a("p"),Abr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ybr=l(),oc=a("p"),Lbr=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),xbr=o("not"),$br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=a("a"),kbr=o("from_pretrained()"),Sbr=o(" to load the model weights."),Rbr=l(),F(qE.$$.fragment),Pbr=l(),xr=a("div"),F(y7.$$.fragment),Bbr=l(),_Fe=a("p"),Ibr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qbr=l(),tn=a("p"),Nbr=o("The model class to instantiate is selected based on the "),bFe=a("code"),jbr=o("model_type"),Dbr=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),Vbr=o("pretrained_model_name_or_path"),Xbr=o(":"),zbr=l(),ie=a("ul"),NE=a("li"),TFe=a("strong"),Wbr=o("albert"),Qbr=o(" \u2014 "),OQ=a("a"),Hbr=o("TFAlbertForMaskedLM"),Ubr=o(" (ALBERT model)"),Jbr=l(),jE=a("li"),MFe=a("strong"),Ybr=o("bert"),Kbr=o(" \u2014 "),VQ=a("a"),Zbr=o("TFBertForMaskedLM"),e2r=o(" (BERT model)"),o2r=l(),DE=a("li"),EFe=a("strong"),r2r=o("camembert"),t2r=o(" \u2014 "),XQ=a("a"),a2r=o("TFCamembertForMaskedLM"),n2r=o(" (CamemBERT model)"),s2r=l(),GE=a("li"),CFe=a("strong"),l2r=o("convbert"),i2r=o(" \u2014 "),zQ=a("a"),d2r=o("TFConvBertForMaskedLM"),c2r=o(" (ConvBERT model)"),m2r=l(),OE=a("li"),wFe=a("strong"),f2r=o("deberta"),g2r=o(" \u2014 "),WQ=a("a"),h2r=o("TFDebertaForMaskedLM"),u2r=o(" (DeBERTa model)"),p2r=l(),VE=a("li"),AFe=a("strong"),_2r=o("deberta-v2"),b2r=o(" \u2014 "),QQ=a("a"),v2r=o("TFDebertaV2ForMaskedLM"),F2r=o(" (DeBERTa-v2 model)"),T2r=l(),XE=a("li"),yFe=a("strong"),M2r=o("distilbert"),E2r=o(" \u2014 "),HQ=a("a"),C2r=o("TFDistilBertForMaskedLM"),w2r=o(" (DistilBERT model)"),A2r=l(),zE=a("li"),LFe=a("strong"),y2r=o("electra"),L2r=o(" \u2014 "),UQ=a("a"),x2r=o("TFElectraForMaskedLM"),$2r=o(" (ELECTRA model)"),k2r=l(),WE=a("li"),xFe=a("strong"),S2r=o("flaubert"),R2r=o(" \u2014 "),JQ=a("a"),P2r=o("TFFlaubertWithLMHeadModel"),B2r=o(" (FlauBERT model)"),I2r=l(),QE=a("li"),$Fe=a("strong"),q2r=o("funnel"),N2r=o(" \u2014 "),YQ=a("a"),j2r=o("TFFunnelForMaskedLM"),D2r=o(" (Funnel Transformer model)"),G2r=l(),HE=a("li"),kFe=a("strong"),O2r=o("layoutlm"),V2r=o(" \u2014 "),KQ=a("a"),X2r=o("TFLayoutLMForMaskedLM"),z2r=o(" (LayoutLM model)"),W2r=l(),UE=a("li"),SFe=a("strong"),Q2r=o("longformer"),H2r=o(" \u2014 "),ZQ=a("a"),U2r=o("TFLongformerForMaskedLM"),J2r=o(" (Longformer model)"),Y2r=l(),JE=a("li"),RFe=a("strong"),K2r=o("mobilebert"),Z2r=o(" \u2014 "),eH=a("a"),evr=o("TFMobileBertForMaskedLM"),ovr=o(" (MobileBERT model)"),rvr=l(),YE=a("li"),PFe=a("strong"),tvr=o("mpnet"),avr=o(" \u2014 "),oH=a("a"),nvr=o("TFMPNetForMaskedLM"),svr=o(" (MPNet model)"),lvr=l(),KE=a("li"),BFe=a("strong"),ivr=o("rembert"),dvr=o(" \u2014 "),rH=a("a"),cvr=o("TFRemBertForMaskedLM"),mvr=o(" (RemBERT model)"),fvr=l(),ZE=a("li"),IFe=a("strong"),gvr=o("roberta"),hvr=o(" \u2014 "),tH=a("a"),uvr=o("TFRobertaForMaskedLM"),pvr=o(" (RoBERTa model)"),_vr=l(),eC=a("li"),qFe=a("strong"),bvr=o("roformer"),vvr=o(" \u2014 "),aH=a("a"),Fvr=o("TFRoFormerForMaskedLM"),Tvr=o(" (RoFormer model)"),Mvr=l(),oC=a("li"),NFe=a("strong"),Evr=o("tapas"),Cvr=o(" \u2014 "),nH=a("a"),wvr=o("TFTapasForMaskedLM"),Avr=o(" (TAPAS model)"),yvr=l(),rC=a("li"),jFe=a("strong"),Lvr=o("xlm"),xvr=o(" \u2014 "),sH=a("a"),$vr=o("TFXLMWithLMHeadModel"),kvr=o(" (XLM model)"),Svr=l(),tC=a("li"),DFe=a("strong"),Rvr=o("xlm-roberta"),Pvr=o(" \u2014 "),lH=a("a"),Bvr=o("TFXLMRobertaForMaskedLM"),Ivr=o(" (XLM-RoBERTa model)"),qvr=l(),F(aC.$$.fragment),QNe=l(),rc=a("h2"),nC=a("a"),GFe=a("span"),F(L7.$$.fragment),Nvr=l(),OFe=a("span"),jvr=o("TFAutoModelForSeq2SeqLM"),HNe=l(),rr=a("div"),F(x7.$$.fragment),Dvr=l(),tc=a("p"),Gvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" class method or the "),dH=a("a"),Xvr=o("from_config()"),zvr=o(` class
method.`),Wvr=l(),$7=a("p"),Qvr=o("This class cannot be instantiated directly using "),VFe=a("code"),Hvr=o("__init__()"),Uvr=o(" (throws an error)."),Jvr=l(),St=a("div"),F(k7.$$.fragment),Yvr=l(),XFe=a("p"),Kvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zvr=l(),ac=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),tFr=o("from_pretrained()"),aFr=o(" to load the model weights."),nFr=l(),F(sC.$$.fragment),sFr=l(),$r=a("div"),F(S7.$$.fragment),lFr=l(),WFe=a("p"),iFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dFr=l(),an=a("p"),cFr=o("The model class to instantiate is selected based on the "),QFe=a("code"),mFr=o("model_type"),fFr=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),gFr=o("pretrained_model_name_or_path"),hFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),uFr=o("pretrained_model_name_or_path"),pFr=o(":"),_Fr=l(),ye=a("ul"),lC=a("li"),JFe=a("strong"),bFr=o("bart"),vFr=o(" \u2014 "),mH=a("a"),FFr=o("TFBartForConditionalGeneration"),TFr=o(" (BART model)"),MFr=l(),iC=a("li"),YFe=a("strong"),EFr=o("blenderbot"),CFr=o(" \u2014 "),fH=a("a"),wFr=o("TFBlenderbotForConditionalGeneration"),AFr=o(" (Blenderbot model)"),yFr=l(),dC=a("li"),KFe=a("strong"),LFr=o("blenderbot-small"),xFr=o(" \u2014 "),gH=a("a"),$Fr=o("TFBlenderbotSmallForConditionalGeneration"),kFr=o(" (BlenderbotSmall model)"),SFr=l(),cC=a("li"),ZFe=a("strong"),RFr=o("encoder-decoder"),PFr=o(" \u2014 "),hH=a("a"),BFr=o("TFEncoderDecoderModel"),IFr=o(" (Encoder decoder model)"),qFr=l(),mC=a("li"),e1e=a("strong"),NFr=o("led"),jFr=o(" \u2014 "),uH=a("a"),DFr=o("TFLEDForConditionalGeneration"),GFr=o(" (LED model)"),OFr=l(),fC=a("li"),o1e=a("strong"),VFr=o("marian"),XFr=o(" \u2014 "),pH=a("a"),zFr=o("TFMarianMTModel"),WFr=o(" (Marian model)"),QFr=l(),gC=a("li"),r1e=a("strong"),HFr=o("mbart"),UFr=o(" \u2014 "),_H=a("a"),JFr=o("TFMBartForConditionalGeneration"),YFr=o(" (mBART model)"),KFr=l(),hC=a("li"),t1e=a("strong"),ZFr=o("mt5"),e1r=o(" \u2014 "),bH=a("a"),o1r=o("TFMT5ForConditionalGeneration"),r1r=o(" (mT5 model)"),t1r=l(),uC=a("li"),a1e=a("strong"),a1r=o("pegasus"),n1r=o(" \u2014 "),vH=a("a"),s1r=o("TFPegasusForConditionalGeneration"),l1r=o(" (Pegasus model)"),i1r=l(),pC=a("li"),n1e=a("strong"),d1r=o("t5"),c1r=o(" \u2014 "),FH=a("a"),m1r=o("TFT5ForConditionalGeneration"),f1r=o(" (T5 model)"),g1r=l(),F(_C.$$.fragment),UNe=l(),nc=a("h2"),bC=a("a"),s1e=a("span"),F(R7.$$.fragment),h1r=l(),l1e=a("span"),u1r=o("TFAutoModelForSequenceClassification"),JNe=l(),tr=a("div"),F(P7.$$.fragment),p1r=l(),sc=a("p"),_1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TH=a("a"),b1r=o("from_pretrained()"),v1r=o(" class method or the "),MH=a("a"),F1r=o("from_config()"),T1r=o(` class
method.`),M1r=l(),B7=a("p"),E1r=o("This class cannot be instantiated directly using "),i1e=a("code"),C1r=o("__init__()"),w1r=o(" (throws an error)."),A1r=l(),Rt=a("div"),F(I7.$$.fragment),y1r=l(),d1e=a("p"),L1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),x1r=l(),lc=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),k1r=o("not"),S1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),R1r=o("from_pretrained()"),P1r=o(" to load the model weights."),B1r=l(),F(vC.$$.fragment),I1r=l(),kr=a("div"),F(q7.$$.fragment),q1r=l(),m1e=a("p"),N1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),j1r=l(),nn=a("p"),D1r=o("The model class to instantiate is selected based on the "),f1e=a("code"),G1r=o("model_type"),O1r=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),V1r=o("pretrained_model_name_or_path"),X1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),z1r=o("pretrained_model_name_or_path"),W1r=o(":"),Q1r=l(),oe=a("ul"),FC=a("li"),u1e=a("strong"),H1r=o("albert"),U1r=o(" \u2014 "),CH=a("a"),J1r=o("TFAlbertForSequenceClassification"),Y1r=o(" (ALBERT model)"),K1r=l(),TC=a("li"),p1e=a("strong"),Z1r=o("bert"),eTr=o(" \u2014 "),wH=a("a"),oTr=o("TFBertForSequenceClassification"),rTr=o(" (BERT model)"),tTr=l(),MC=a("li"),_1e=a("strong"),aTr=o("camembert"),nTr=o(" \u2014 "),AH=a("a"),sTr=o("TFCamembertForSequenceClassification"),lTr=o(" (CamemBERT model)"),iTr=l(),EC=a("li"),b1e=a("strong"),dTr=o("convbert"),cTr=o(" \u2014 "),yH=a("a"),mTr=o("TFConvBertForSequenceClassification"),fTr=o(" (ConvBERT model)"),gTr=l(),CC=a("li"),v1e=a("strong"),hTr=o("ctrl"),uTr=o(" \u2014 "),LH=a("a"),pTr=o("TFCTRLForSequenceClassification"),_Tr=o(" (CTRL model)"),bTr=l(),wC=a("li"),F1e=a("strong"),vTr=o("deberta"),FTr=o(" \u2014 "),xH=a("a"),TTr=o("TFDebertaForSequenceClassification"),MTr=o(" (DeBERTa model)"),ETr=l(),AC=a("li"),T1e=a("strong"),CTr=o("deberta-v2"),wTr=o(" \u2014 "),$H=a("a"),ATr=o("TFDebertaV2ForSequenceClassification"),yTr=o(" (DeBERTa-v2 model)"),LTr=l(),yC=a("li"),M1e=a("strong"),xTr=o("distilbert"),$Tr=o(" \u2014 "),kH=a("a"),kTr=o("TFDistilBertForSequenceClassification"),STr=o(" (DistilBERT model)"),RTr=l(),LC=a("li"),E1e=a("strong"),PTr=o("electra"),BTr=o(" \u2014 "),SH=a("a"),ITr=o("TFElectraForSequenceClassification"),qTr=o(" (ELECTRA model)"),NTr=l(),xC=a("li"),C1e=a("strong"),jTr=o("flaubert"),DTr=o(" \u2014 "),RH=a("a"),GTr=o("TFFlaubertForSequenceClassification"),OTr=o(" (FlauBERT model)"),VTr=l(),$C=a("li"),w1e=a("strong"),XTr=o("funnel"),zTr=o(" \u2014 "),PH=a("a"),WTr=o("TFFunnelForSequenceClassification"),QTr=o(" (Funnel Transformer model)"),HTr=l(),kC=a("li"),A1e=a("strong"),UTr=o("gpt2"),JTr=o(" \u2014 "),BH=a("a"),YTr=o("TFGPT2ForSequenceClassification"),KTr=o(" (OpenAI GPT-2 model)"),ZTr=l(),SC=a("li"),y1e=a("strong"),eMr=o("gptj"),oMr=o(" \u2014 "),IH=a("a"),rMr=o("TFGPTJForSequenceClassification"),tMr=o(" (GPT-J model)"),aMr=l(),RC=a("li"),L1e=a("strong"),nMr=o("layoutlm"),sMr=o(" \u2014 "),qH=a("a"),lMr=o("TFLayoutLMForSequenceClassification"),iMr=o(" (LayoutLM model)"),dMr=l(),PC=a("li"),x1e=a("strong"),cMr=o("longformer"),mMr=o(" \u2014 "),NH=a("a"),fMr=o("TFLongformerForSequenceClassification"),gMr=o(" (Longformer model)"),hMr=l(),BC=a("li"),$1e=a("strong"),uMr=o("mobilebert"),pMr=o(" \u2014 "),jH=a("a"),_Mr=o("TFMobileBertForSequenceClassification"),bMr=o(" (MobileBERT model)"),vMr=l(),IC=a("li"),k1e=a("strong"),FMr=o("mpnet"),TMr=o(" \u2014 "),DH=a("a"),MMr=o("TFMPNetForSequenceClassification"),EMr=o(" (MPNet model)"),CMr=l(),qC=a("li"),S1e=a("strong"),wMr=o("openai-gpt"),AMr=o(" \u2014 "),GH=a("a"),yMr=o("TFOpenAIGPTForSequenceClassification"),LMr=o(" (OpenAI GPT model)"),xMr=l(),NC=a("li"),R1e=a("strong"),$Mr=o("rembert"),kMr=o(" \u2014 "),OH=a("a"),SMr=o("TFRemBertForSequenceClassification"),RMr=o(" (RemBERT model)"),PMr=l(),jC=a("li"),P1e=a("strong"),BMr=o("roberta"),IMr=o(" \u2014 "),VH=a("a"),qMr=o("TFRobertaForSequenceClassification"),NMr=o(" (RoBERTa model)"),jMr=l(),DC=a("li"),B1e=a("strong"),DMr=o("roformer"),GMr=o(" \u2014 "),XH=a("a"),OMr=o("TFRoFormerForSequenceClassification"),VMr=o(" (RoFormer model)"),XMr=l(),GC=a("li"),I1e=a("strong"),zMr=o("tapas"),WMr=o(" \u2014 "),zH=a("a"),QMr=o("TFTapasForSequenceClassification"),HMr=o(" (TAPAS model)"),UMr=l(),OC=a("li"),q1e=a("strong"),JMr=o("transfo-xl"),YMr=o(" \u2014 "),WH=a("a"),KMr=o("TFTransfoXLForSequenceClassification"),ZMr=o(" (Transformer-XL model)"),e4r=l(),VC=a("li"),N1e=a("strong"),o4r=o("xlm"),r4r=o(" \u2014 "),QH=a("a"),t4r=o("TFXLMForSequenceClassification"),a4r=o(" (XLM model)"),n4r=l(),XC=a("li"),j1e=a("strong"),s4r=o("xlm-roberta"),l4r=o(" \u2014 "),HH=a("a"),i4r=o("TFXLMRobertaForSequenceClassification"),d4r=o(" (XLM-RoBERTa model)"),c4r=l(),zC=a("li"),D1e=a("strong"),m4r=o("xlnet"),f4r=o(" \u2014 "),UH=a("a"),g4r=o("TFXLNetForSequenceClassification"),h4r=o(" (XLNet model)"),u4r=l(),F(WC.$$.fragment),YNe=l(),ic=a("h2"),QC=a("a"),G1e=a("span"),F(N7.$$.fragment),p4r=l(),O1e=a("span"),_4r=o("TFAutoModelForMultipleChoice"),KNe=l(),ar=a("div"),F(j7.$$.fragment),b4r=l(),dc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JH=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),YH=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),D7=a("p"),w4r=o("This class cannot be instantiated directly using "),V1e=a("code"),A4r=o("__init__()"),y4r=o(" (throws an error)."),L4r=l(),Pt=a("div"),F(G7.$$.fragment),x4r=l(),X1e=a("p"),$4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k4r=l(),cc=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),R4r=o("not"),P4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),B4r=o("from_pretrained()"),I4r=o(" to load the model weights."),q4r=l(),F(HC.$$.fragment),N4r=l(),Sr=a("div"),F(O7.$$.fragment),j4r=l(),W1e=a("p"),D4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G4r=l(),sn=a("p"),O4r=o("The model class to instantiate is selected based on the "),Q1e=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),H1e=a("code"),z4r=o("pretrained_model_name_or_path"),W4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=a("code"),Q4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),ue=a("ul"),UC=a("li"),J1e=a("strong"),J4r=o("albert"),Y4r=o(" \u2014 "),ZH=a("a"),K4r=o("TFAlbertForMultipleChoice"),Z4r=o(" (ALBERT model)"),eEr=l(),JC=a("li"),Y1e=a("strong"),oEr=o("bert"),rEr=o(" \u2014 "),eU=a("a"),tEr=o("TFBertForMultipleChoice"),aEr=o(" (BERT model)"),nEr=l(),YC=a("li"),K1e=a("strong"),sEr=o("camembert"),lEr=o(" \u2014 "),oU=a("a"),iEr=o("TFCamembertForMultipleChoice"),dEr=o(" (CamemBERT model)"),cEr=l(),KC=a("li"),Z1e=a("strong"),mEr=o("convbert"),fEr=o(" \u2014 "),rU=a("a"),gEr=o("TFConvBertForMultipleChoice"),hEr=o(" (ConvBERT model)"),uEr=l(),ZC=a("li"),eTe=a("strong"),pEr=o("distilbert"),_Er=o(" \u2014 "),tU=a("a"),bEr=o("TFDistilBertForMultipleChoice"),vEr=o(" (DistilBERT model)"),FEr=l(),e5=a("li"),oTe=a("strong"),TEr=o("electra"),MEr=o(" \u2014 "),aU=a("a"),EEr=o("TFElectraForMultipleChoice"),CEr=o(" (ELECTRA model)"),wEr=l(),o5=a("li"),rTe=a("strong"),AEr=o("flaubert"),yEr=o(" \u2014 "),nU=a("a"),LEr=o("TFFlaubertForMultipleChoice"),xEr=o(" (FlauBERT model)"),$Er=l(),r5=a("li"),tTe=a("strong"),kEr=o("funnel"),SEr=o(" \u2014 "),sU=a("a"),REr=o("TFFunnelForMultipleChoice"),PEr=o(" (Funnel Transformer model)"),BEr=l(),t5=a("li"),aTe=a("strong"),IEr=o("longformer"),qEr=o(" \u2014 "),lU=a("a"),NEr=o("TFLongformerForMultipleChoice"),jEr=o(" (Longformer model)"),DEr=l(),a5=a("li"),nTe=a("strong"),GEr=o("mobilebert"),OEr=o(" \u2014 "),iU=a("a"),VEr=o("TFMobileBertForMultipleChoice"),XEr=o(" (MobileBERT model)"),zEr=l(),n5=a("li"),sTe=a("strong"),WEr=o("mpnet"),QEr=o(" \u2014 "),dU=a("a"),HEr=o("TFMPNetForMultipleChoice"),UEr=o(" (MPNet model)"),JEr=l(),s5=a("li"),lTe=a("strong"),YEr=o("rembert"),KEr=o(" \u2014 "),cU=a("a"),ZEr=o("TFRemBertForMultipleChoice"),eCr=o(" (RemBERT model)"),oCr=l(),l5=a("li"),iTe=a("strong"),rCr=o("roberta"),tCr=o(" \u2014 "),mU=a("a"),aCr=o("TFRobertaForMultipleChoice"),nCr=o(" (RoBERTa model)"),sCr=l(),i5=a("li"),dTe=a("strong"),lCr=o("roformer"),iCr=o(" \u2014 "),fU=a("a"),dCr=o("TFRoFormerForMultipleChoice"),cCr=o(" (RoFormer model)"),mCr=l(),d5=a("li"),cTe=a("strong"),fCr=o("xlm"),gCr=o(" \u2014 "),gU=a("a"),hCr=o("TFXLMForMultipleChoice"),uCr=o(" (XLM model)"),pCr=l(),c5=a("li"),mTe=a("strong"),_Cr=o("xlm-roberta"),bCr=o(" \u2014 "),hU=a("a"),vCr=o("TFXLMRobertaForMultipleChoice"),FCr=o(" (XLM-RoBERTa model)"),TCr=l(),m5=a("li"),fTe=a("strong"),MCr=o("xlnet"),ECr=o(" \u2014 "),uU=a("a"),CCr=o("TFXLNetForMultipleChoice"),wCr=o(" (XLNet model)"),ACr=l(),F(f5.$$.fragment),ZNe=l(),mc=a("h2"),g5=a("a"),gTe=a("span"),F(V7.$$.fragment),yCr=l(),hTe=a("span"),LCr=o("TFAutoModelForNextSentencePrediction"),eje=l(),nr=a("div"),F(X7.$$.fragment),xCr=l(),fc=a("p"),$Cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pU=a("a"),kCr=o("from_pretrained()"),SCr=o(" class method or the "),_U=a("a"),RCr=o("from_config()"),PCr=o(` class
method.`),BCr=l(),z7=a("p"),ICr=o("This class cannot be instantiated directly using "),uTe=a("code"),qCr=o("__init__()"),NCr=o(" (throws an error)."),jCr=l(),Bt=a("div"),F(W7.$$.fragment),DCr=l(),pTe=a("p"),GCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),OCr=l(),gc=a("p"),VCr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),XCr=o("not"),zCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),WCr=o("from_pretrained()"),QCr=o(" to load the model weights."),HCr=l(),F(h5.$$.fragment),UCr=l(),Rr=a("div"),F(Q7.$$.fragment),JCr=l(),bTe=a("p"),YCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KCr=l(),ln=a("p"),ZCr=o("The model class to instantiate is selected based on the "),vTe=a("code"),e5r=o("model_type"),o5r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),r5r=o("pretrained_model_name_or_path"),t5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(":"),s5r=l(),H7=a("ul"),u5=a("li"),MTe=a("strong"),l5r=o("bert"),i5r=o(" \u2014 "),vU=a("a"),d5r=o("TFBertForNextSentencePrediction"),c5r=o(" (BERT model)"),m5r=l(),p5=a("li"),ETe=a("strong"),f5r=o("mobilebert"),g5r=o(" \u2014 "),FU=a("a"),h5r=o("TFMobileBertForNextSentencePrediction"),u5r=o(" (MobileBERT model)"),p5r=l(),F(_5.$$.fragment),oje=l(),hc=a("h2"),b5=a("a"),CTe=a("span"),F(U7.$$.fragment),_5r=l(),wTe=a("span"),b5r=o("TFAutoModelForTableQuestionAnswering"),rje=l(),sr=a("div"),F(J7.$$.fragment),v5r=l(),uc=a("p"),F5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TU=a("a"),T5r=o("from_pretrained()"),M5r=o(" class method or the "),MU=a("a"),E5r=o("from_config()"),C5r=o(` class
method.`),w5r=l(),Y7=a("p"),A5r=o("This class cannot be instantiated directly using "),ATe=a("code"),y5r=o("__init__()"),L5r=o(" (throws an error)."),x5r=l(),It=a("div"),F(K7.$$.fragment),$5r=l(),yTe=a("p"),k5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),S5r=l(),pc=a("p"),R5r=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),P5r=o("not"),B5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),I5r=o("from_pretrained()"),q5r=o(" to load the model weights."),N5r=l(),F(v5.$$.fragment),j5r=l(),Pr=a("div"),F(Z7.$$.fragment),D5r=l(),xTe=a("p"),G5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),O5r=l(),dn=a("p"),V5r=o("The model class to instantiate is selected based on the "),$Te=a("code"),X5r=o("model_type"),z5r=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),W5r=o("pretrained_model_name_or_path"),Q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(":"),J5r=l(),RTe=a("ul"),F5=a("li"),PTe=a("strong"),Y5r=o("tapas"),K5r=o(" \u2014 "),CU=a("a"),Z5r=o("TFTapasForQuestionAnswering"),e3r=o(" (TAPAS model)"),o3r=l(),F(T5.$$.fragment),tje=l(),_c=a("h2"),M5=a("a"),BTe=a("span"),F(e9.$$.fragment),r3r=l(),ITe=a("span"),t3r=o("TFAutoModelForTokenClassification"),aje=l(),lr=a("div"),F(o9.$$.fragment),a3r=l(),bc=a("p"),n3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wU=a("a"),s3r=o("from_pretrained()"),l3r=o(" class method or the "),AU=a("a"),i3r=o("from_config()"),d3r=o(` class
method.`),c3r=l(),r9=a("p"),m3r=o("This class cannot be instantiated directly using "),qTe=a("code"),f3r=o("__init__()"),g3r=o(" (throws an error)."),h3r=l(),qt=a("div"),F(t9.$$.fragment),u3r=l(),NTe=a("p"),p3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_3r=l(),vc=a("p"),b3r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),v3r=o("not"),F3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),T3r=o("from_pretrained()"),M3r=o(" to load the model weights."),E3r=l(),F(E5.$$.fragment),C3r=l(),Br=a("div"),F(a9.$$.fragment),w3r=l(),DTe=a("p"),A3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y3r=l(),cn=a("p"),L3r=o("The model class to instantiate is selected based on the "),GTe=a("code"),x3r=o("model_type"),$3r=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),k3r=o("pretrained_model_name_or_path"),S3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),R3r=o("pretrained_model_name_or_path"),P3r=o(":"),B3r=l(),de=a("ul"),C5=a("li"),XTe=a("strong"),I3r=o("albert"),q3r=o(" \u2014 "),LU=a("a"),N3r=o("TFAlbertForTokenClassification"),j3r=o(" (ALBERT model)"),D3r=l(),w5=a("li"),zTe=a("strong"),G3r=o("bert"),O3r=o(" \u2014 "),xU=a("a"),V3r=o("TFBertForTokenClassification"),X3r=o(" (BERT model)"),z3r=l(),A5=a("li"),WTe=a("strong"),W3r=o("camembert"),Q3r=o(" \u2014 "),$U=a("a"),H3r=o("TFCamembertForTokenClassification"),U3r=o(" (CamemBERT model)"),J3r=l(),y5=a("li"),QTe=a("strong"),Y3r=o("convbert"),K3r=o(" \u2014 "),kU=a("a"),Z3r=o("TFConvBertForTokenClassification"),ewr=o(" (ConvBERT model)"),owr=l(),L5=a("li"),HTe=a("strong"),rwr=o("deberta"),twr=o(" \u2014 "),SU=a("a"),awr=o("TFDebertaForTokenClassification"),nwr=o(" (DeBERTa model)"),swr=l(),x5=a("li"),UTe=a("strong"),lwr=o("deberta-v2"),iwr=o(" \u2014 "),RU=a("a"),dwr=o("TFDebertaV2ForTokenClassification"),cwr=o(" (DeBERTa-v2 model)"),mwr=l(),$5=a("li"),JTe=a("strong"),fwr=o("distilbert"),gwr=o(" \u2014 "),PU=a("a"),hwr=o("TFDistilBertForTokenClassification"),uwr=o(" (DistilBERT model)"),pwr=l(),k5=a("li"),YTe=a("strong"),_wr=o("electra"),bwr=o(" \u2014 "),BU=a("a"),vwr=o("TFElectraForTokenClassification"),Fwr=o(" (ELECTRA model)"),Twr=l(),S5=a("li"),KTe=a("strong"),Mwr=o("flaubert"),Ewr=o(" \u2014 "),IU=a("a"),Cwr=o("TFFlaubertForTokenClassification"),wwr=o(" (FlauBERT model)"),Awr=l(),R5=a("li"),ZTe=a("strong"),ywr=o("funnel"),Lwr=o(" \u2014 "),qU=a("a"),xwr=o("TFFunnelForTokenClassification"),$wr=o(" (Funnel Transformer model)"),kwr=l(),P5=a("li"),eMe=a("strong"),Swr=o("layoutlm"),Rwr=o(" \u2014 "),NU=a("a"),Pwr=o("TFLayoutLMForTokenClassification"),Bwr=o(" (LayoutLM model)"),Iwr=l(),B5=a("li"),oMe=a("strong"),qwr=o("longformer"),Nwr=o(" \u2014 "),jU=a("a"),jwr=o("TFLongformerForTokenClassification"),Dwr=o(" (Longformer model)"),Gwr=l(),I5=a("li"),rMe=a("strong"),Owr=o("mobilebert"),Vwr=o(" \u2014 "),DU=a("a"),Xwr=o("TFMobileBertForTokenClassification"),zwr=o(" (MobileBERT model)"),Wwr=l(),q5=a("li"),tMe=a("strong"),Qwr=o("mpnet"),Hwr=o(" \u2014 "),GU=a("a"),Uwr=o("TFMPNetForTokenClassification"),Jwr=o(" (MPNet model)"),Ywr=l(),N5=a("li"),aMe=a("strong"),Kwr=o("rembert"),Zwr=o(" \u2014 "),OU=a("a"),e0r=o("TFRemBertForTokenClassification"),o0r=o(" (RemBERT model)"),r0r=l(),j5=a("li"),nMe=a("strong"),t0r=o("roberta"),a0r=o(" \u2014 "),VU=a("a"),n0r=o("TFRobertaForTokenClassification"),s0r=o(" (RoBERTa model)"),l0r=l(),D5=a("li"),sMe=a("strong"),i0r=o("roformer"),d0r=o(" \u2014 "),XU=a("a"),c0r=o("TFRoFormerForTokenClassification"),m0r=o(" (RoFormer model)"),f0r=l(),G5=a("li"),lMe=a("strong"),g0r=o("xlm"),h0r=o(" \u2014 "),zU=a("a"),u0r=o("TFXLMForTokenClassification"),p0r=o(" (XLM model)"),_0r=l(),O5=a("li"),iMe=a("strong"),b0r=o("xlm-roberta"),v0r=o(" \u2014 "),WU=a("a"),F0r=o("TFXLMRobertaForTokenClassification"),T0r=o(" (XLM-RoBERTa model)"),M0r=l(),V5=a("li"),dMe=a("strong"),E0r=o("xlnet"),C0r=o(" \u2014 "),QU=a("a"),w0r=o("TFXLNetForTokenClassification"),A0r=o(" (XLNet model)"),y0r=l(),F(X5.$$.fragment),nje=l(),Fc=a("h2"),z5=a("a"),cMe=a("span"),F(n9.$$.fragment),L0r=l(),mMe=a("span"),x0r=o("TFAutoModelForQuestionAnswering"),sje=l(),ir=a("div"),F(s9.$$.fragment),$0r=l(),Tc=a("p"),k0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HU=a("a"),S0r=o("from_pretrained()"),R0r=o(" class method or the "),UU=a("a"),P0r=o("from_config()"),B0r=o(` class
method.`),I0r=l(),l9=a("p"),q0r=o("This class cannot be instantiated directly using "),fMe=a("code"),N0r=o("__init__()"),j0r=o(" (throws an error)."),D0r=l(),Nt=a("div"),F(i9.$$.fragment),G0r=l(),gMe=a("p"),O0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),V0r=l(),Mc=a("p"),X0r=o(`Note:
Loading a model from its configuration file does `),hMe=a("strong"),z0r=o("not"),W0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),Q0r=o("from_pretrained()"),H0r=o(" to load the model weights."),U0r=l(),F(W5.$$.fragment),J0r=l(),Ir=a("div"),F(d9.$$.fragment),Y0r=l(),uMe=a("p"),K0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z0r=l(),mn=a("p"),eAr=o("The model class to instantiate is selected based on the "),pMe=a("code"),oAr=o("model_type"),rAr=o(` property of the config object (either
passed as an argument or loaded from `),_Me=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(":"),lAr=l(),ce=a("ul"),Q5=a("li"),vMe=a("strong"),iAr=o("albert"),dAr=o(" \u2014 "),YU=a("a"),cAr=o("TFAlbertForQuestionAnswering"),mAr=o(" (ALBERT model)"),fAr=l(),H5=a("li"),FMe=a("strong"),gAr=o("bert"),hAr=o(" \u2014 "),KU=a("a"),uAr=o("TFBertForQuestionAnswering"),pAr=o(" (BERT model)"),_Ar=l(),U5=a("li"),TMe=a("strong"),bAr=o("camembert"),vAr=o(" \u2014 "),ZU=a("a"),FAr=o("TFCamembertForQuestionAnswering"),TAr=o(" (CamemBERT model)"),MAr=l(),J5=a("li"),MMe=a("strong"),EAr=o("convbert"),CAr=o(" \u2014 "),eJ=a("a"),wAr=o("TFConvBertForQuestionAnswering"),AAr=o(" (ConvBERT model)"),yAr=l(),Y5=a("li"),EMe=a("strong"),LAr=o("deberta"),xAr=o(" \u2014 "),oJ=a("a"),$Ar=o("TFDebertaForQuestionAnswering"),kAr=o(" (DeBERTa model)"),SAr=l(),K5=a("li"),CMe=a("strong"),RAr=o("deberta-v2"),PAr=o(" \u2014 "),rJ=a("a"),BAr=o("TFDebertaV2ForQuestionAnswering"),IAr=o(" (DeBERTa-v2 model)"),qAr=l(),Z5=a("li"),wMe=a("strong"),NAr=o("distilbert"),jAr=o(" \u2014 "),tJ=a("a"),DAr=o("TFDistilBertForQuestionAnswering"),GAr=o(" (DistilBERT model)"),OAr=l(),e3=a("li"),AMe=a("strong"),VAr=o("electra"),XAr=o(" \u2014 "),aJ=a("a"),zAr=o("TFElectraForQuestionAnswering"),WAr=o(" (ELECTRA model)"),QAr=l(),o3=a("li"),yMe=a("strong"),HAr=o("flaubert"),UAr=o(" \u2014 "),nJ=a("a"),JAr=o("TFFlaubertForQuestionAnsweringSimple"),YAr=o(" (FlauBERT model)"),KAr=l(),r3=a("li"),LMe=a("strong"),ZAr=o("funnel"),e6r=o(" \u2014 "),sJ=a("a"),o6r=o("TFFunnelForQuestionAnswering"),r6r=o(" (Funnel Transformer model)"),t6r=l(),t3=a("li"),xMe=a("strong"),a6r=o("gptj"),n6r=o(" \u2014 "),lJ=a("a"),s6r=o("TFGPTJForQuestionAnswering"),l6r=o(" (GPT-J model)"),i6r=l(),a3=a("li"),$Me=a("strong"),d6r=o("longformer"),c6r=o(" \u2014 "),iJ=a("a"),m6r=o("TFLongformerForQuestionAnswering"),f6r=o(" (Longformer model)"),g6r=l(),n3=a("li"),kMe=a("strong"),h6r=o("mobilebert"),u6r=o(" \u2014 "),dJ=a("a"),p6r=o("TFMobileBertForQuestionAnswering"),_6r=o(" (MobileBERT model)"),b6r=l(),s3=a("li"),SMe=a("strong"),v6r=o("mpnet"),F6r=o(" \u2014 "),cJ=a("a"),T6r=o("TFMPNetForQuestionAnswering"),M6r=o(" (MPNet model)"),E6r=l(),l3=a("li"),RMe=a("strong"),C6r=o("rembert"),w6r=o(" \u2014 "),mJ=a("a"),A6r=o("TFRemBertForQuestionAnswering"),y6r=o(" (RemBERT model)"),L6r=l(),i3=a("li"),PMe=a("strong"),x6r=o("roberta"),$6r=o(" \u2014 "),fJ=a("a"),k6r=o("TFRobertaForQuestionAnswering"),S6r=o(" (RoBERTa model)"),R6r=l(),d3=a("li"),BMe=a("strong"),P6r=o("roformer"),B6r=o(" \u2014 "),gJ=a("a"),I6r=o("TFRoFormerForQuestionAnswering"),q6r=o(" (RoFormer model)"),N6r=l(),c3=a("li"),IMe=a("strong"),j6r=o("xlm"),D6r=o(" \u2014 "),hJ=a("a"),G6r=o("TFXLMForQuestionAnsweringSimple"),O6r=o(" (XLM model)"),V6r=l(),m3=a("li"),qMe=a("strong"),X6r=o("xlm-roberta"),z6r=o(" \u2014 "),uJ=a("a"),W6r=o("TFXLMRobertaForQuestionAnswering"),Q6r=o(" (XLM-RoBERTa model)"),H6r=l(),f3=a("li"),NMe=a("strong"),U6r=o("xlnet"),J6r=o(" \u2014 "),pJ=a("a"),Y6r=o("TFXLNetForQuestionAnsweringSimple"),K6r=o(" (XLNet model)"),Z6r=l(),F(g3.$$.fragment),lje=l(),Ec=a("h2"),h3=a("a"),jMe=a("span"),F(c9.$$.fragment),eyr=l(),DMe=a("span"),oyr=o("TFAutoModelForVision2Seq"),ije=l(),dr=a("div"),F(m9.$$.fragment),ryr=l(),Cc=a("p"),tyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_J=a("a"),ayr=o("from_pretrained()"),nyr=o(" class method or the "),bJ=a("a"),syr=o("from_config()"),lyr=o(` class
method.`),iyr=l(),f9=a("p"),dyr=o("This class cannot be instantiated directly using "),GMe=a("code"),cyr=o("__init__()"),myr=o(" (throws an error)."),fyr=l(),jt=a("div"),F(g9.$$.fragment),gyr=l(),OMe=a("p"),hyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uyr=l(),wc=a("p"),pyr=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),_yr=o("not"),byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),vyr=o("from_pretrained()"),Fyr=o(" to load the model weights."),Tyr=l(),F(u3.$$.fragment),Myr=l(),qr=a("div"),F(h9.$$.fragment),Eyr=l(),XMe=a("p"),Cyr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wyr=l(),fn=a("p"),Ayr=o("The model class to instantiate is selected based on the "),zMe=a("code"),yyr=o("model_type"),Lyr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),xyr=o("pretrained_model_name_or_path"),$yr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(":"),Ryr=l(),HMe=a("ul"),p3=a("li"),UMe=a("strong"),Pyr=o("vision-encoder-decoder"),Byr=o(" \u2014 "),FJ=a("a"),Iyr=o("TFVisionEncoderDecoderModel"),qyr=o(" (Vision Encoder decoder model)"),Nyr=l(),F(_3.$$.fragment),dje=l(),Ac=a("h2"),b3=a("a"),JMe=a("span"),F(u9.$$.fragment),jyr=l(),YMe=a("span"),Dyr=o("TFAutoModelForSpeechSeq2Seq"),cje=l(),cr=a("div"),F(p9.$$.fragment),Gyr=l(),yc=a("p"),Oyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TJ=a("a"),Vyr=o("from_pretrained()"),Xyr=o(" class method or the "),MJ=a("a"),zyr=o("from_config()"),Wyr=o(` class
method.`),Qyr=l(),_9=a("p"),Hyr=o("This class cannot be instantiated directly using "),KMe=a("code"),Uyr=o("__init__()"),Jyr=o(" (throws an error)."),Yyr=l(),Dt=a("div"),F(b9.$$.fragment),Kyr=l(),ZMe=a("p"),Zyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eLr=l(),Lc=a("p"),oLr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),rLr=o("not"),tLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),aLr=o("from_pretrained()"),nLr=o(" to load the model weights."),sLr=l(),F(v3.$$.fragment),lLr=l(),Nr=a("div"),F(v9.$$.fragment),iLr=l(),o4e=a("p"),dLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cLr=l(),gn=a("p"),mLr=o("The model class to instantiate is selected based on the "),r4e=a("code"),fLr=o("model_type"),gLr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),hLr=o("pretrained_model_name_or_path"),uLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),pLr=o("pretrained_model_name_or_path"),_Lr=o(":"),bLr=l(),n4e=a("ul"),F3=a("li"),s4e=a("strong"),vLr=o("speech_to_text"),FLr=o(" \u2014 "),CJ=a("a"),TLr=o("TFSpeech2TextForConditionalGeneration"),MLr=o(" (Speech2Text model)"),ELr=l(),F(T3.$$.fragment),mje=l(),xc=a("h2"),M3=a("a"),l4e=a("span"),F(F9.$$.fragment),CLr=l(),i4e=a("span"),wLr=o("FlaxAutoModel"),fje=l(),mr=a("div"),F(T9.$$.fragment),ALr=l(),$c=a("p"),yLr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wJ=a("a"),LLr=o("from_pretrained()"),xLr=o(" class method or the "),AJ=a("a"),$Lr=o("from_config()"),kLr=o(` class
method.`),SLr=l(),M9=a("p"),RLr=o("This class cannot be instantiated directly using "),d4e=a("code"),PLr=o("__init__()"),BLr=o(" (throws an error)."),ILr=l(),Gt=a("div"),F(E9.$$.fragment),qLr=l(),c4e=a("p"),NLr=o("Instantiates one of the base model classes of the library from a configuration."),jLr=l(),kc=a("p"),DLr=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),GLr=o("not"),OLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),VLr=o("from_pretrained()"),XLr=o(" to load the model weights."),zLr=l(),F(E3.$$.fragment),WLr=l(),jr=a("div"),F(C9.$$.fragment),QLr=l(),f4e=a("p"),HLr=o("Instantiate one of the base model classes of the library from a pretrained model."),ULr=l(),hn=a("p"),JLr=o("The model class to instantiate is selected based on the "),g4e=a("code"),YLr=o("model_type"),KLr=o(` property of the config object (either
passed as an argument or loaded from `),h4e=a("code"),ZLr=o("pretrained_model_name_or_path"),e8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(":"),t8r=l(),te=a("ul"),C3=a("li"),p4e=a("strong"),a8r=o("albert"),n8r=o(" \u2014 "),LJ=a("a"),s8r=o("FlaxAlbertModel"),l8r=o(" (ALBERT model)"),i8r=l(),w3=a("li"),_4e=a("strong"),d8r=o("bart"),c8r=o(" \u2014 "),xJ=a("a"),m8r=o("FlaxBartModel"),f8r=o(" (BART model)"),g8r=l(),A3=a("li"),b4e=a("strong"),h8r=o("beit"),u8r=o(" \u2014 "),$J=a("a"),p8r=o("FlaxBeitModel"),_8r=o(" (BEiT model)"),b8r=l(),y3=a("li"),v4e=a("strong"),v8r=o("bert"),F8r=o(" \u2014 "),kJ=a("a"),T8r=o("FlaxBertModel"),M8r=o(" (BERT model)"),E8r=l(),L3=a("li"),F4e=a("strong"),C8r=o("big_bird"),w8r=o(" \u2014 "),SJ=a("a"),A8r=o("FlaxBigBirdModel"),y8r=o(" (BigBird model)"),L8r=l(),x3=a("li"),T4e=a("strong"),x8r=o("blenderbot"),$8r=o(" \u2014 "),RJ=a("a"),k8r=o("FlaxBlenderbotModel"),S8r=o(" (Blenderbot model)"),R8r=l(),$3=a("li"),M4e=a("strong"),P8r=o("blenderbot-small"),B8r=o(" \u2014 "),PJ=a("a"),I8r=o("FlaxBlenderbotSmallModel"),q8r=o(" (BlenderbotSmall model)"),N8r=l(),k3=a("li"),E4e=a("strong"),j8r=o("clip"),D8r=o(" \u2014 "),BJ=a("a"),G8r=o("FlaxCLIPModel"),O8r=o(" (CLIP model)"),V8r=l(),S3=a("li"),C4e=a("strong"),X8r=o("distilbert"),z8r=o(" \u2014 "),IJ=a("a"),W8r=o("FlaxDistilBertModel"),Q8r=o(" (DistilBERT model)"),H8r=l(),R3=a("li"),w4e=a("strong"),U8r=o("electra"),J8r=o(" \u2014 "),qJ=a("a"),Y8r=o("FlaxElectraModel"),K8r=o(" (ELECTRA model)"),Z8r=l(),P3=a("li"),A4e=a("strong"),e7r=o("gpt2"),o7r=o(" \u2014 "),NJ=a("a"),r7r=o("FlaxGPT2Model"),t7r=o(" (OpenAI GPT-2 model)"),a7r=l(),B3=a("li"),y4e=a("strong"),n7r=o("gpt_neo"),s7r=o(" \u2014 "),jJ=a("a"),l7r=o("FlaxGPTNeoModel"),i7r=o(" (GPT Neo model)"),d7r=l(),I3=a("li"),L4e=a("strong"),c7r=o("gptj"),m7r=o(" \u2014 "),DJ=a("a"),f7r=o("FlaxGPTJModel"),g7r=o(" (GPT-J model)"),h7r=l(),q3=a("li"),x4e=a("strong"),u7r=o("marian"),p7r=o(" \u2014 "),GJ=a("a"),_7r=o("FlaxMarianModel"),b7r=o(" (Marian model)"),v7r=l(),N3=a("li"),$4e=a("strong"),F7r=o("mbart"),T7r=o(" \u2014 "),OJ=a("a"),M7r=o("FlaxMBartModel"),E7r=o(" (mBART model)"),C7r=l(),j3=a("li"),k4e=a("strong"),w7r=o("mt5"),A7r=o(" \u2014 "),VJ=a("a"),y7r=o("FlaxMT5Model"),L7r=o(" (mT5 model)"),x7r=l(),D3=a("li"),S4e=a("strong"),$7r=o("pegasus"),k7r=o(" \u2014 "),XJ=a("a"),S7r=o("FlaxPegasusModel"),R7r=o(" (Pegasus model)"),P7r=l(),G3=a("li"),R4e=a("strong"),B7r=o("roberta"),I7r=o(" \u2014 "),zJ=a("a"),q7r=o("FlaxRobertaModel"),N7r=o(" (RoBERTa model)"),j7r=l(),O3=a("li"),P4e=a("strong"),D7r=o("roformer"),G7r=o(" \u2014 "),WJ=a("a"),O7r=o("FlaxRoFormerModel"),V7r=o(" (RoFormer model)"),X7r=l(),V3=a("li"),B4e=a("strong"),z7r=o("t5"),W7r=o(" \u2014 "),QJ=a("a"),Q7r=o("FlaxT5Model"),H7r=o(" (T5 model)"),U7r=l(),X3=a("li"),I4e=a("strong"),J7r=o("vision-text-dual-encoder"),Y7r=o(" \u2014 "),HJ=a("a"),K7r=o("FlaxVisionTextDualEncoderModel"),Z7r=o(" (VisionTextDualEncoder model)"),e9r=l(),z3=a("li"),q4e=a("strong"),o9r=o("vit"),r9r=o(" \u2014 "),UJ=a("a"),t9r=o("FlaxViTModel"),a9r=o(" (ViT model)"),n9r=l(),W3=a("li"),N4e=a("strong"),s9r=o("wav2vec2"),l9r=o(" \u2014 "),JJ=a("a"),i9r=o("FlaxWav2Vec2Model"),d9r=o(" (Wav2Vec2 model)"),c9r=l(),Q3=a("li"),j4e=a("strong"),m9r=o("xglm"),f9r=o(" \u2014 "),YJ=a("a"),g9r=o("FlaxXGLMModel"),h9r=o(" (XGLM model)"),u9r=l(),H3=a("li"),D4e=a("strong"),p9r=o("xlm-roberta"),_9r=o(" \u2014 "),KJ=a("a"),b9r=o("FlaxXLMRobertaModel"),v9r=o(" (XLM-RoBERTa model)"),F9r=l(),F(U3.$$.fragment),gje=l(),Sc=a("h2"),J3=a("a"),G4e=a("span"),F(w9.$$.fragment),T9r=l(),O4e=a("span"),M9r=o("FlaxAutoModelForCausalLM"),hje=l(),fr=a("div"),F(A9.$$.fragment),E9r=l(),Rc=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=a("a"),w9r=o("from_pretrained()"),A9r=o(" class method or the "),eY=a("a"),y9r=o("from_config()"),L9r=o(` class
method.`),x9r=l(),y9=a("p"),$9r=o("This class cannot be instantiated directly using "),V4e=a("code"),k9r=o("__init__()"),S9r=o(" (throws an error)."),R9r=l(),Ot=a("div"),F(L9.$$.fragment),P9r=l(),X4e=a("p"),B9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),I9r=l(),Pc=a("p"),q9r=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),N9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),D9r=o("from_pretrained()"),G9r=o(" to load the model weights."),O9r=l(),F(Y3.$$.fragment),V9r=l(),Dr=a("div"),F(x9.$$.fragment),X9r=l(),W4e=a("p"),z9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W9r=l(),un=a("p"),Q9r=o("The model class to instantiate is selected based on the "),Q4e=a("code"),H9r=o("model_type"),U9r=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),exr=l(),Re=a("ul"),K3=a("li"),J4e=a("strong"),oxr=o("bart"),rxr=o(" \u2014 "),rY=a("a"),txr=o("FlaxBartForCausalLM"),axr=o(" (BART model)"),nxr=l(),Z3=a("li"),Y4e=a("strong"),sxr=o("bert"),lxr=o(" \u2014 "),tY=a("a"),ixr=o("FlaxBertForCausalLM"),dxr=o(" (BERT model)"),cxr=l(),ew=a("li"),K4e=a("strong"),mxr=o("big_bird"),fxr=o(" \u2014 "),aY=a("a"),gxr=o("FlaxBigBirdForCausalLM"),hxr=o(" (BigBird model)"),uxr=l(),ow=a("li"),Z4e=a("strong"),pxr=o("electra"),_xr=o(" \u2014 "),nY=a("a"),bxr=o("FlaxElectraForCausalLM"),vxr=o(" (ELECTRA model)"),Fxr=l(),rw=a("li"),eEe=a("strong"),Txr=o("gpt2"),Mxr=o(" \u2014 "),sY=a("a"),Exr=o("FlaxGPT2LMHeadModel"),Cxr=o(" (OpenAI GPT-2 model)"),wxr=l(),tw=a("li"),oEe=a("strong"),Axr=o("gpt_neo"),yxr=o(" \u2014 "),lY=a("a"),Lxr=o("FlaxGPTNeoForCausalLM"),xxr=o(" (GPT Neo model)"),$xr=l(),aw=a("li"),rEe=a("strong"),kxr=o("gptj"),Sxr=o(" \u2014 "),iY=a("a"),Rxr=o("FlaxGPTJForCausalLM"),Pxr=o(" (GPT-J model)"),Bxr=l(),nw=a("li"),tEe=a("strong"),Ixr=o("roberta"),qxr=o(" \u2014 "),dY=a("a"),Nxr=o("FlaxRobertaForCausalLM"),jxr=o(" (RoBERTa model)"),Dxr=l(),sw=a("li"),aEe=a("strong"),Gxr=o("xglm"),Oxr=o(" \u2014 "),cY=a("a"),Vxr=o("FlaxXGLMForCausalLM"),Xxr=o(" (XGLM model)"),zxr=l(),F(lw.$$.fragment),uje=l(),Bc=a("h2"),iw=a("a"),nEe=a("span"),F($9.$$.fragment),Wxr=l(),sEe=a("span"),Qxr=o("FlaxAutoModelForPreTraining"),pje=l(),gr=a("div"),F(k9.$$.fragment),Hxr=l(),Ic=a("p"),Uxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mY=a("a"),Jxr=o("from_pretrained()"),Yxr=o(" class method or the "),fY=a("a"),Kxr=o("from_config()"),Zxr=o(` class
method.`),e$r=l(),S9=a("p"),o$r=o("This class cannot be instantiated directly using "),lEe=a("code"),r$r=o("__init__()"),t$r=o(" (throws an error)."),a$r=l(),Vt=a("div"),F(R9.$$.fragment),n$r=l(),iEe=a("p"),s$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),l$r=l(),qc=a("p"),i$r=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),d$r=o("not"),c$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),m$r=o("from_pretrained()"),f$r=o(" to load the model weights."),g$r=l(),F(dw.$$.fragment),h$r=l(),Gr=a("div"),F(P9.$$.fragment),u$r=l(),cEe=a("p"),p$r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_$r=l(),pn=a("p"),b$r=o("The model class to instantiate is selected based on the "),mEe=a("code"),v$r=o("model_type"),F$r=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),T$r=o("pretrained_model_name_or_path"),M$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),E$r=o("pretrained_model_name_or_path"),C$r=o(":"),w$r=l(),Ee=a("ul"),cw=a("li"),hEe=a("strong"),A$r=o("albert"),y$r=o(" \u2014 "),hY=a("a"),L$r=o("FlaxAlbertForPreTraining"),x$r=o(" (ALBERT model)"),$$r=l(),mw=a("li"),uEe=a("strong"),k$r=o("bart"),S$r=o(" \u2014 "),uY=a("a"),R$r=o("FlaxBartForConditionalGeneration"),P$r=o(" (BART model)"),B$r=l(),fw=a("li"),pEe=a("strong"),I$r=o("bert"),q$r=o(" \u2014 "),pY=a("a"),N$r=o("FlaxBertForPreTraining"),j$r=o(" (BERT model)"),D$r=l(),gw=a("li"),_Ee=a("strong"),G$r=o("big_bird"),O$r=o(" \u2014 "),_Y=a("a"),V$r=o("FlaxBigBirdForPreTraining"),X$r=o(" (BigBird model)"),z$r=l(),hw=a("li"),bEe=a("strong"),W$r=o("electra"),Q$r=o(" \u2014 "),bY=a("a"),H$r=o("FlaxElectraForPreTraining"),U$r=o(" (ELECTRA model)"),J$r=l(),uw=a("li"),vEe=a("strong"),Y$r=o("mbart"),K$r=o(" \u2014 "),vY=a("a"),Z$r=o("FlaxMBartForConditionalGeneration"),ekr=o(" (mBART model)"),okr=l(),pw=a("li"),FEe=a("strong"),rkr=o("mt5"),tkr=o(" \u2014 "),FY=a("a"),akr=o("FlaxMT5ForConditionalGeneration"),nkr=o(" (mT5 model)"),skr=l(),_w=a("li"),TEe=a("strong"),lkr=o("roberta"),ikr=o(" \u2014 "),TY=a("a"),dkr=o("FlaxRobertaForMaskedLM"),ckr=o(" (RoBERTa model)"),mkr=l(),bw=a("li"),MEe=a("strong"),fkr=o("roformer"),gkr=o(" \u2014 "),MY=a("a"),hkr=o("FlaxRoFormerForMaskedLM"),ukr=o(" (RoFormer model)"),pkr=l(),vw=a("li"),EEe=a("strong"),_kr=o("t5"),bkr=o(" \u2014 "),EY=a("a"),vkr=o("FlaxT5ForConditionalGeneration"),Fkr=o(" (T5 model)"),Tkr=l(),Fw=a("li"),CEe=a("strong"),Mkr=o("wav2vec2"),Ekr=o(" \u2014 "),CY=a("a"),Ckr=o("FlaxWav2Vec2ForPreTraining"),wkr=o(" (Wav2Vec2 model)"),Akr=l(),Tw=a("li"),wEe=a("strong"),ykr=o("xlm-roberta"),Lkr=o(" \u2014 "),wY=a("a"),xkr=o("FlaxXLMRobertaForMaskedLM"),$kr=o(" (XLM-RoBERTa model)"),kkr=l(),F(Mw.$$.fragment),_je=l(),Nc=a("h2"),Ew=a("a"),AEe=a("span"),F(B9.$$.fragment),Skr=l(),yEe=a("span"),Rkr=o("FlaxAutoModelForMaskedLM"),bje=l(),hr=a("div"),F(I9.$$.fragment),Pkr=l(),jc=a("p"),Bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=a("a"),Ikr=o("from_pretrained()"),qkr=o(" class method or the "),yY=a("a"),Nkr=o("from_config()"),jkr=o(` class
method.`),Dkr=l(),q9=a("p"),Gkr=o("This class cannot be instantiated directly using "),LEe=a("code"),Okr=o("__init__()"),Vkr=o(" (throws an error)."),Xkr=l(),Xt=a("div"),F(N9.$$.fragment),zkr=l(),xEe=a("p"),Wkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qkr=l(),Dc=a("p"),Hkr=o(`Note:
Loading a model from its configuration file does `),$Ee=a("strong"),Ukr=o("not"),Jkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=a("a"),Ykr=o("from_pretrained()"),Kkr=o(" to load the model weights."),Zkr=l(),F(Cw.$$.fragment),eSr=l(),Or=a("div"),F(j9.$$.fragment),oSr=l(),kEe=a("p"),rSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tSr=l(),_n=a("p"),aSr=o("The model class to instantiate is selected based on the "),SEe=a("code"),nSr=o("model_type"),sSr=o(` property of the config object (either
passed as an argument or loaded from `),REe=a("code"),lSr=o("pretrained_model_name_or_path"),iSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),dSr=o("pretrained_model_name_or_path"),cSr=o(":"),mSr=l(),Le=a("ul"),ww=a("li"),BEe=a("strong"),fSr=o("albert"),gSr=o(" \u2014 "),xY=a("a"),hSr=o("FlaxAlbertForMaskedLM"),uSr=o(" (ALBERT model)"),pSr=l(),Aw=a("li"),IEe=a("strong"),_Sr=o("bart"),bSr=o(" \u2014 "),$Y=a("a"),vSr=o("FlaxBartForConditionalGeneration"),FSr=o(" (BART model)"),TSr=l(),yw=a("li"),qEe=a("strong"),MSr=o("bert"),ESr=o(" \u2014 "),kY=a("a"),CSr=o("FlaxBertForMaskedLM"),wSr=o(" (BERT model)"),ASr=l(),Lw=a("li"),NEe=a("strong"),ySr=o("big_bird"),LSr=o(" \u2014 "),SY=a("a"),xSr=o("FlaxBigBirdForMaskedLM"),$Sr=o(" (BigBird model)"),kSr=l(),xw=a("li"),jEe=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),RY=a("a"),PSr=o("FlaxDistilBertForMaskedLM"),BSr=o(" (DistilBERT model)"),ISr=l(),$w=a("li"),DEe=a("strong"),qSr=o("electra"),NSr=o(" \u2014 "),PY=a("a"),jSr=o("FlaxElectraForMaskedLM"),DSr=o(" (ELECTRA model)"),GSr=l(),kw=a("li"),GEe=a("strong"),OSr=o("mbart"),VSr=o(" \u2014 "),BY=a("a"),XSr=o("FlaxMBartForConditionalGeneration"),zSr=o(" (mBART model)"),WSr=l(),Sw=a("li"),OEe=a("strong"),QSr=o("roberta"),HSr=o(" \u2014 "),IY=a("a"),USr=o("FlaxRobertaForMaskedLM"),JSr=o(" (RoBERTa model)"),YSr=l(),Rw=a("li"),VEe=a("strong"),KSr=o("roformer"),ZSr=o(" \u2014 "),qY=a("a"),eRr=o("FlaxRoFormerForMaskedLM"),oRr=o(" (RoFormer model)"),rRr=l(),Pw=a("li"),XEe=a("strong"),tRr=o("xlm-roberta"),aRr=o(" \u2014 "),NY=a("a"),nRr=o("FlaxXLMRobertaForMaskedLM"),sRr=o(" (XLM-RoBERTa model)"),lRr=l(),F(Bw.$$.fragment),vje=l(),Gc=a("h2"),Iw=a("a"),zEe=a("span"),F(D9.$$.fragment),iRr=l(),WEe=a("span"),dRr=o("FlaxAutoModelForSeq2SeqLM"),Fje=l(),ur=a("div"),F(G9.$$.fragment),cRr=l(),Oc=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=a("a"),fRr=o("from_pretrained()"),gRr=o(" class method or the "),DY=a("a"),hRr=o("from_config()"),uRr=o(` class
method.`),pRr=l(),O9=a("p"),_Rr=o("This class cannot be instantiated directly using "),QEe=a("code"),bRr=o("__init__()"),vRr=o(" (throws an error)."),FRr=l(),zt=a("div"),F(V9.$$.fragment),TRr=l(),HEe=a("p"),MRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ERr=l(),Vc=a("p"),CRr=o(`Note:
Loading a model from its configuration file does `),UEe=a("strong"),wRr=o("not"),ARr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),yRr=o("from_pretrained()"),LRr=o(" to load the model weights."),xRr=l(),F(qw.$$.fragment),$Rr=l(),Vr=a("div"),F(X9.$$.fragment),kRr=l(),JEe=a("p"),SRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RRr=l(),bn=a("p"),PRr=o("The model class to instantiate is selected based on the "),YEe=a("code"),BRr=o("model_type"),IRr=o(` property of the config object (either
passed as an argument or loaded from `),KEe=a("code"),qRr=o("pretrained_model_name_or_path"),NRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=a("code"),jRr=o("pretrained_model_name_or_path"),DRr=o(":"),GRr=l(),Pe=a("ul"),Nw=a("li"),eCe=a("strong"),ORr=o("bart"),VRr=o(" \u2014 "),OY=a("a"),XRr=o("FlaxBartForConditionalGeneration"),zRr=o(" (BART model)"),WRr=l(),jw=a("li"),oCe=a("strong"),QRr=o("blenderbot"),HRr=o(" \u2014 "),VY=a("a"),URr=o("FlaxBlenderbotForConditionalGeneration"),JRr=o(" (Blenderbot model)"),YRr=l(),Dw=a("li"),rCe=a("strong"),KRr=o("blenderbot-small"),ZRr=o(" \u2014 "),XY=a("a"),ePr=o("FlaxBlenderbotSmallForConditionalGeneration"),oPr=o(" (BlenderbotSmall model)"),rPr=l(),Gw=a("li"),tCe=a("strong"),tPr=o("encoder-decoder"),aPr=o(" \u2014 "),zY=a("a"),nPr=o("FlaxEncoderDecoderModel"),sPr=o(" (Encoder decoder model)"),lPr=l(),Ow=a("li"),aCe=a("strong"),iPr=o("marian"),dPr=o(" \u2014 "),WY=a("a"),cPr=o("FlaxMarianMTModel"),mPr=o(" (Marian model)"),fPr=l(),Vw=a("li"),nCe=a("strong"),gPr=o("mbart"),hPr=o(" \u2014 "),QY=a("a"),uPr=o("FlaxMBartForConditionalGeneration"),pPr=o(" (mBART model)"),_Pr=l(),Xw=a("li"),sCe=a("strong"),bPr=o("mt5"),vPr=o(" \u2014 "),HY=a("a"),FPr=o("FlaxMT5ForConditionalGeneration"),TPr=o(" (mT5 model)"),MPr=l(),zw=a("li"),lCe=a("strong"),EPr=o("pegasus"),CPr=o(" \u2014 "),UY=a("a"),wPr=o("FlaxPegasusForConditionalGeneration"),APr=o(" (Pegasus model)"),yPr=l(),Ww=a("li"),iCe=a("strong"),LPr=o("t5"),xPr=o(" \u2014 "),JY=a("a"),$Pr=o("FlaxT5ForConditionalGeneration"),kPr=o(" (T5 model)"),SPr=l(),F(Qw.$$.fragment),Tje=l(),Xc=a("h2"),Hw=a("a"),dCe=a("span"),F(z9.$$.fragment),RPr=l(),cCe=a("span"),PPr=o("FlaxAutoModelForSequenceClassification"),Mje=l(),pr=a("div"),F(W9.$$.fragment),BPr=l(),zc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=a("a"),qPr=o("from_pretrained()"),NPr=o(" class method or the "),KY=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),Q9=a("p"),OPr=o("This class cannot be instantiated directly using "),mCe=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),Wt=a("div"),F(H9.$$.fragment),WPr=l(),fCe=a("p"),QPr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HPr=l(),Wc=a("p"),UPr=o(`Note:
Loading a model from its configuration file does `),gCe=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eBr=l(),F(Uw.$$.fragment),oBr=l(),Xr=a("div"),F(U9.$$.fragment),rBr=l(),hCe=a("p"),tBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aBr=l(),vn=a("p"),nBr=o("The model class to instantiate is selected based on the "),uCe=a("code"),sBr=o("model_type"),lBr=o(` property of the config object (either
passed as an argument or loaded from `),pCe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=a("code"),cBr=o("pretrained_model_name_or_path"),mBr=o(":"),fBr=l(),xe=a("ul"),Jw=a("li"),bCe=a("strong"),gBr=o("albert"),hBr=o(" \u2014 "),eK=a("a"),uBr=o("FlaxAlbertForSequenceClassification"),pBr=o(" (ALBERT model)"),_Br=l(),Yw=a("li"),vCe=a("strong"),bBr=o("bart"),vBr=o(" \u2014 "),oK=a("a"),FBr=o("FlaxBartForSequenceClassification"),TBr=o(" (BART model)"),MBr=l(),Kw=a("li"),FCe=a("strong"),EBr=o("bert"),CBr=o(" \u2014 "),rK=a("a"),wBr=o("FlaxBertForSequenceClassification"),ABr=o(" (BERT model)"),yBr=l(),Zw=a("li"),TCe=a("strong"),LBr=o("big_bird"),xBr=o(" \u2014 "),tK=a("a"),$Br=o("FlaxBigBirdForSequenceClassification"),kBr=o(" (BigBird model)"),SBr=l(),e0=a("li"),MCe=a("strong"),RBr=o("distilbert"),PBr=o(" \u2014 "),aK=a("a"),BBr=o("FlaxDistilBertForSequenceClassification"),IBr=o(" (DistilBERT model)"),qBr=l(),o0=a("li"),ECe=a("strong"),NBr=o("electra"),jBr=o(" \u2014 "),nK=a("a"),DBr=o("FlaxElectraForSequenceClassification"),GBr=o(" (ELECTRA model)"),OBr=l(),r0=a("li"),CCe=a("strong"),VBr=o("mbart"),XBr=o(" \u2014 "),sK=a("a"),zBr=o("FlaxMBartForSequenceClassification"),WBr=o(" (mBART model)"),QBr=l(),t0=a("li"),wCe=a("strong"),HBr=o("roberta"),UBr=o(" \u2014 "),lK=a("a"),JBr=o("FlaxRobertaForSequenceClassification"),YBr=o(" (RoBERTa model)"),KBr=l(),a0=a("li"),ACe=a("strong"),ZBr=o("roformer"),eIr=o(" \u2014 "),iK=a("a"),oIr=o("FlaxRoFormerForSequenceClassification"),rIr=o(" (RoFormer model)"),tIr=l(),n0=a("li"),yCe=a("strong"),aIr=o("xlm-roberta"),nIr=o(" \u2014 "),dK=a("a"),sIr=o("FlaxXLMRobertaForSequenceClassification"),lIr=o(" (XLM-RoBERTa model)"),iIr=l(),F(s0.$$.fragment),Eje=l(),Qc=a("h2"),l0=a("a"),LCe=a("span"),F(J9.$$.fragment),dIr=l(),xCe=a("span"),cIr=o("FlaxAutoModelForQuestionAnswering"),Cje=l(),_r=a("div"),F(Y9.$$.fragment),mIr=l(),Hc=a("p"),fIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),mK=a("a"),uIr=o("from_config()"),pIr=o(` class
method.`),_Ir=l(),K9=a("p"),bIr=o("This class cannot be instantiated directly using "),$Ce=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),Qt=a("div"),F(Z9.$$.fragment),MIr=l(),kCe=a("p"),EIr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),CIr=l(),Uc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),SCe=a("strong"),AIr=o("not"),yIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=a("a"),LIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(i0.$$.fragment),kIr=l(),zr=a("div"),F(ex.$$.fragment),SIr=l(),RCe=a("p"),RIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PIr=l(),Fn=a("p"),BIr=o("The model class to instantiate is selected based on the "),PCe=a("code"),IIr=o("model_type"),qIr=o(` property of the config object (either
passed as an argument or loaded from `),BCe=a("code"),NIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ICe=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),$e=a("ul"),d0=a("li"),qCe=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),gK=a("a"),zIr=o("FlaxAlbertForQuestionAnswering"),WIr=o(" (ALBERT model)"),QIr=l(),c0=a("li"),NCe=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),hK=a("a"),JIr=o("FlaxBartForQuestionAnswering"),YIr=o(" (BART model)"),KIr=l(),m0=a("li"),jCe=a("strong"),ZIr=o("bert"),eqr=o(" \u2014 "),uK=a("a"),oqr=o("FlaxBertForQuestionAnswering"),rqr=o(" (BERT model)"),tqr=l(),f0=a("li"),DCe=a("strong"),aqr=o("big_bird"),nqr=o(" \u2014 "),pK=a("a"),sqr=o("FlaxBigBirdForQuestionAnswering"),lqr=o(" (BigBird model)"),iqr=l(),g0=a("li"),GCe=a("strong"),dqr=o("distilbert"),cqr=o(" \u2014 "),_K=a("a"),mqr=o("FlaxDistilBertForQuestionAnswering"),fqr=o(" (DistilBERT model)"),gqr=l(),h0=a("li"),OCe=a("strong"),hqr=o("electra"),uqr=o(" \u2014 "),bK=a("a"),pqr=o("FlaxElectraForQuestionAnswering"),_qr=o(" (ELECTRA model)"),bqr=l(),u0=a("li"),VCe=a("strong"),vqr=o("mbart"),Fqr=o(" \u2014 "),vK=a("a"),Tqr=o("FlaxMBartForQuestionAnswering"),Mqr=o(" (mBART model)"),Eqr=l(),p0=a("li"),XCe=a("strong"),Cqr=o("roberta"),wqr=o(" \u2014 "),FK=a("a"),Aqr=o("FlaxRobertaForQuestionAnswering"),yqr=o(" (RoBERTa model)"),Lqr=l(),_0=a("li"),zCe=a("strong"),xqr=o("roformer"),$qr=o(" \u2014 "),TK=a("a"),kqr=o("FlaxRoFormerForQuestionAnswering"),Sqr=o(" (RoFormer model)"),Rqr=l(),b0=a("li"),WCe=a("strong"),Pqr=o("xlm-roberta"),Bqr=o(" \u2014 "),MK=a("a"),Iqr=o("FlaxXLMRobertaForQuestionAnswering"),qqr=o(" (XLM-RoBERTa model)"),Nqr=l(),F(v0.$$.fragment),wje=l(),Jc=a("h2"),F0=a("a"),QCe=a("span"),F(ox.$$.fragment),jqr=l(),HCe=a("span"),Dqr=o("FlaxAutoModelForTokenClassification"),Aje=l(),br=a("div"),F(rx.$$.fragment),Gqr=l(),Yc=a("p"),Oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=a("a"),Vqr=o("from_pretrained()"),Xqr=o(" class method or the "),CK=a("a"),zqr=o("from_config()"),Wqr=o(` class
method.`),Qqr=l(),tx=a("p"),Hqr=o("This class cannot be instantiated directly using "),UCe=a("code"),Uqr=o("__init__()"),Jqr=o(" (throws an error)."),Yqr=l(),Ht=a("div"),F(ax.$$.fragment),Kqr=l(),JCe=a("p"),Zqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eNr=l(),Kc=a("p"),oNr=o(`Note:
Loading a model from its configuration file does `),YCe=a("strong"),rNr=o("not"),tNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),aNr=o("from_pretrained()"),nNr=o(" to load the model weights."),sNr=l(),F(T0.$$.fragment),lNr=l(),Wr=a("div"),F(nx.$$.fragment),iNr=l(),KCe=a("p"),dNr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cNr=l(),Tn=a("p"),mNr=o("The model class to instantiate is selected based on the "),ZCe=a("code"),fNr=o("model_type"),gNr=o(` property of the config object (either
passed as an argument or loaded from `),e5e=a("code"),hNr=o("pretrained_model_name_or_path"),uNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=a("code"),pNr=o("pretrained_model_name_or_path"),_Nr=o(":"),bNr=l(),De=a("ul"),M0=a("li"),r5e=a("strong"),vNr=o("albert"),FNr=o(" \u2014 "),AK=a("a"),TNr=o("FlaxAlbertForTokenClassification"),MNr=o(" (ALBERT model)"),ENr=l(),E0=a("li"),t5e=a("strong"),CNr=o("bert"),wNr=o(" \u2014 "),yK=a("a"),ANr=o("FlaxBertForTokenClassification"),yNr=o(" (BERT model)"),LNr=l(),C0=a("li"),a5e=a("strong"),xNr=o("big_bird"),$Nr=o(" \u2014 "),LK=a("a"),kNr=o("FlaxBigBirdForTokenClassification"),SNr=o(" (BigBird model)"),RNr=l(),w0=a("li"),n5e=a("strong"),PNr=o("distilbert"),BNr=o(" \u2014 "),xK=a("a"),INr=o("FlaxDistilBertForTokenClassification"),qNr=o(" (DistilBERT model)"),NNr=l(),A0=a("li"),s5e=a("strong"),jNr=o("electra"),DNr=o(" \u2014 "),$K=a("a"),GNr=o("FlaxElectraForTokenClassification"),ONr=o(" (ELECTRA model)"),VNr=l(),y0=a("li"),l5e=a("strong"),XNr=o("roberta"),zNr=o(" \u2014 "),kK=a("a"),WNr=o("FlaxRobertaForTokenClassification"),QNr=o(" (RoBERTa model)"),HNr=l(),L0=a("li"),i5e=a("strong"),UNr=o("roformer"),JNr=o(" \u2014 "),SK=a("a"),YNr=o("FlaxRoFormerForTokenClassification"),KNr=o(" (RoFormer model)"),ZNr=l(),x0=a("li"),d5e=a("strong"),ejr=o("xlm-roberta"),ojr=o(" \u2014 "),RK=a("a"),rjr=o("FlaxXLMRobertaForTokenClassification"),tjr=o(" (XLM-RoBERTa model)"),ajr=l(),F($0.$$.fragment),yje=l(),Zc=a("h2"),k0=a("a"),c5e=a("span"),F(sx.$$.fragment),njr=l(),m5e=a("span"),sjr=o("FlaxAutoModelForMultipleChoice"),Lje=l(),vr=a("div"),F(lx.$$.fragment),ljr=l(),em=a("p"),ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=a("a"),djr=o("from_pretrained()"),cjr=o(" class method or the "),BK=a("a"),mjr=o("from_config()"),fjr=o(` class
method.`),gjr=l(),ix=a("p"),hjr=o("This class cannot be instantiated directly using "),f5e=a("code"),ujr=o("__init__()"),pjr=o(" (throws an error)."),_jr=l(),Ut=a("div"),F(dx.$$.fragment),bjr=l(),g5e=a("p"),vjr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fjr=l(),om=a("p"),Tjr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),Mjr=o("not"),Ejr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=a("a"),Cjr=o("from_pretrained()"),wjr=o(" to load the model weights."),Ajr=l(),F(S0.$$.fragment),yjr=l(),Qr=a("div"),F(cx.$$.fragment),Ljr=l(),u5e=a("p"),xjr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$jr=l(),Mn=a("p"),kjr=o("The model class to instantiate is selected based on the "),p5e=a("code"),Sjr=o("model_type"),Rjr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),Pjr=o("pretrained_model_name_or_path"),Bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),Ijr=o("pretrained_model_name_or_path"),qjr=o(":"),Njr=l(),Ge=a("ul"),R0=a("li"),v5e=a("strong"),jjr=o("albert"),Djr=o(" \u2014 "),qK=a("a"),Gjr=o("FlaxAlbertForMultipleChoice"),Ojr=o(" (ALBERT model)"),Vjr=l(),P0=a("li"),F5e=a("strong"),Xjr=o("bert"),zjr=o(" \u2014 "),NK=a("a"),Wjr=o("FlaxBertForMultipleChoice"),Qjr=o(" (BERT model)"),Hjr=l(),B0=a("li"),T5e=a("strong"),Ujr=o("big_bird"),Jjr=o(" \u2014 "),jK=a("a"),Yjr=o("FlaxBigBirdForMultipleChoice"),Kjr=o(" (BigBird model)"),Zjr=l(),I0=a("li"),M5e=a("strong"),eDr=o("distilbert"),oDr=o(" \u2014 "),DK=a("a"),rDr=o("FlaxDistilBertForMultipleChoice"),tDr=o(" (DistilBERT model)"),aDr=l(),q0=a("li"),E5e=a("strong"),nDr=o("electra"),sDr=o(" \u2014 "),GK=a("a"),lDr=o("FlaxElectraForMultipleChoice"),iDr=o(" (ELECTRA model)"),dDr=l(),N0=a("li"),C5e=a("strong"),cDr=o("roberta"),mDr=o(" \u2014 "),OK=a("a"),fDr=o("FlaxRobertaForMultipleChoice"),gDr=o(" (RoBERTa model)"),hDr=l(),j0=a("li"),w5e=a("strong"),uDr=o("roformer"),pDr=o(" \u2014 "),VK=a("a"),_Dr=o("FlaxRoFormerForMultipleChoice"),bDr=o(" (RoFormer model)"),vDr=l(),D0=a("li"),A5e=a("strong"),FDr=o("xlm-roberta"),TDr=o(" \u2014 "),XK=a("a"),MDr=o("FlaxXLMRobertaForMultipleChoice"),EDr=o(" (XLM-RoBERTa model)"),CDr=l(),F(G0.$$.fragment),xje=l(),rm=a("h2"),O0=a("a"),y5e=a("span"),F(mx.$$.fragment),wDr=l(),L5e=a("span"),ADr=o("FlaxAutoModelForNextSentencePrediction"),$je=l(),Fr=a("div"),F(fx.$$.fragment),yDr=l(),tm=a("p"),LDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=a("a"),xDr=o("from_pretrained()"),$Dr=o(" class method or the "),WK=a("a"),kDr=o("from_config()"),SDr=o(` class
method.`),RDr=l(),gx=a("p"),PDr=o("This class cannot be instantiated directly using "),x5e=a("code"),BDr=o("__init__()"),IDr=o(" (throws an error)."),qDr=l(),Jt=a("div"),F(hx.$$.fragment),NDr=l(),$5e=a("p"),jDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DDr=l(),am=a("p"),GDr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),ODr=o("not"),VDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),XDr=o("from_pretrained()"),zDr=o(" to load the model weights."),WDr=l(),F(V0.$$.fragment),QDr=l(),Hr=a("div"),F(ux.$$.fragment),HDr=l(),S5e=a("p"),UDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JDr=l(),En=a("p"),YDr=o("The model class to instantiate is selected based on the "),R5e=a("code"),KDr=o("model_type"),ZDr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),eGr=o("pretrained_model_name_or_path"),oGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(":"),aGr=l(),I5e=a("ul"),X0=a("li"),q5e=a("strong"),nGr=o("bert"),sGr=o(" \u2014 "),HK=a("a"),lGr=o("FlaxBertForNextSentencePrediction"),iGr=o(" (BERT model)"),dGr=l(),F(z0.$$.fragment),kje=l(),nm=a("h2"),W0=a("a"),N5e=a("span"),F(px.$$.fragment),cGr=l(),j5e=a("span"),mGr=o("FlaxAutoModelForImageClassification"),Sje=l(),Tr=a("div"),F(_x.$$.fragment),fGr=l(),sm=a("p"),gGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=a("a"),hGr=o("from_pretrained()"),uGr=o(" class method or the "),JK=a("a"),pGr=o("from_config()"),_Gr=o(` class
method.`),bGr=l(),bx=a("p"),vGr=o("This class cannot be instantiated directly using "),D5e=a("code"),FGr=o("__init__()"),TGr=o(" (throws an error)."),MGr=l(),Yt=a("div"),F(vx.$$.fragment),EGr=l(),G5e=a("p"),CGr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wGr=l(),lm=a("p"),AGr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),yGr=o("not"),LGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=a("a"),xGr=o("from_pretrained()"),$Gr=o(" to load the model weights."),kGr=l(),F(Q0.$$.fragment),SGr=l(),Ur=a("div"),F(Fx.$$.fragment),RGr=l(),V5e=a("p"),PGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BGr=l(),Cn=a("p"),IGr=o("The model class to instantiate is selected based on the "),X5e=a("code"),qGr=o("model_type"),NGr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),jGr=o("pretrained_model_name_or_path"),DGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(":"),VGr=l(),Tx=a("ul"),H0=a("li"),Q5e=a("strong"),XGr=o("beit"),zGr=o(" \u2014 "),KK=a("a"),WGr=o("FlaxBeitForImageClassification"),QGr=o(" (BEiT model)"),HGr=l(),U0=a("li"),H5e=a("strong"),UGr=o("vit"),JGr=o(" \u2014 "),ZK=a("a"),YGr=o("FlaxViTForImageClassification"),KGr=o(" (ViT model)"),ZGr=l(),F(J0.$$.fragment),Rje=l(),im=a("h2"),Y0=a("a"),U5e=a("span"),F(Mx.$$.fragment),eOr=l(),J5e=a("span"),oOr=o("FlaxAutoModelForVision2Seq"),Pje=l(),Mr=a("div"),F(Ex.$$.fragment),rOr=l(),dm=a("p"),tOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=a("a"),aOr=o("from_pretrained()"),nOr=o(" class method or the "),oZ=a("a"),sOr=o("from_config()"),lOr=o(` class
method.`),iOr=l(),Cx=a("p"),dOr=o("This class cannot be instantiated directly using "),Y5e=a("code"),cOr=o("__init__()"),mOr=o(" (throws an error)."),fOr=l(),Kt=a("div"),F(wx.$$.fragment),gOr=l(),K5e=a("p"),hOr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uOr=l(),cm=a("p"),pOr=o(`Note:
Loading a model from its configuration file does `),Z5e=a("strong"),_Or=o("not"),bOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),vOr=o("from_pretrained()"),FOr=o(" to load the model weights."),TOr=l(),F(K0.$$.fragment),MOr=l(),Jr=a("div"),F(Ax.$$.fragment),EOr=l(),e3e=a("p"),COr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),wOr=l(),wn=a("p"),AOr=o("The model class to instantiate is selected based on the "),o3e=a("code"),yOr=o("model_type"),LOr=o(` property of the config object (either
passed as an argument or loaded from `),r3e=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=a("code"),kOr=o("pretrained_model_name_or_path"),SOr=o(":"),ROr=l(),a3e=a("ul"),Z0=a("li"),n3e=a("strong"),POr=o("vision-encoder-decoder"),BOr=o(" \u2014 "),tZ=a("a"),IOr=o("FlaxVisionEncoderDecoderModel"),qOr=o(" (Vision Encoder decoder model)"),NOr=l(),F(eA.$$.fragment),this.h()},l(m){const _=ixt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var yx=s(u);f=n(yx,"A",{id:!0,class:!0,href:!0});var s3e=s(f);p=n(s3e,"SPAN",{});var l3e=s(p);T(d.$$.fragment,l3e),l3e.forEach(t),s3e.forEach(t),h=i(yx),Mo=n(yx,"SPAN",{});var i3e=s(Mo);mi=r(i3e,"Auto Classes"),i3e.forEach(t),yx.forEach(t),hm=i(m),rt=n(m,"P",{});var Lx=s(rt);fi=r(Lx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Lx,"CODE",{});var d3e=s(gi);by=r(d3e,"from_pretrained()"),d3e.forEach(t),um=r(Lx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Lx.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var c3e=s(yn);vy=r(c3e,"AutoConfig"),c3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var m3e=s(xn);Fy=r(m3e,"AutoModel"),m3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var f3e=s($n);Ty=r(f3e,"AutoTokenizer"),f3e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),pm=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var xx=s(Ae);D$=r(xx,"will create a model that is an instance of "),_i=n(xx,"A",{href:!0});var g3e=s(_i);G$=r(g3e,"BertModel"),g3e.forEach(t),O$=r(xx,"."),xx.forEach(t),Eo=i(m),wa=n(m,"P",{});var $x=s(wa);V$=r($x,"There is one class of "),_m=n($x,"CODE",{});var h3e=s(_m);X$=r(h3e,"AutoModel"),h3e.forEach(t),VGe=r($x," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$x.forEach(t),Sqe=i(m),bi=n(m,"H2",{class:!0});var kx=s(bi);bm=n(kx,"A",{id:!0,class:!0,href:!0});var u3e=s(bm);Jee=n(u3e,"SPAN",{});var p3e=s(Jee);T(My.$$.fragment,p3e),p3e.forEach(t),u3e.forEach(t),XGe=i(kx),Yee=n(kx,"SPAN",{});var _3e=s(Yee);zGe=r(_3e,"Extending the Auto Classes"),_3e.forEach(t),kx.forEach(t),Rqe=i(m),kn=n(m,"P",{});var mm=s(kn);WGe=r(mm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kee=n(mm,"CODE",{});var b3e=s(Kee);QGe=r(b3e,"NewModel"),b3e.forEach(t),HGe=r(mm,", make sure you have a "),Zee=n(mm,"CODE",{});var v3e=s(Zee);UGe=r(v3e,"NewModelConfig"),v3e.forEach(t),JGe=r(mm,` then you can add those to the auto
classes like this:`),mm.forEach(t),Pqe=i(m),T(Ey.$$.fragment,m),Bqe=i(m),z$=n(m,"P",{});var F3e=s(z$);YGe=r(F3e,"You will then be able to use the auto classes like you would usually do!"),F3e.forEach(t),Iqe=i(m),T(vm.$$.fragment,m),qqe=i(m),vi=n(m,"H2",{class:!0});var Sx=s(vi);Fm=n(Sx,"A",{id:!0,class:!0,href:!0});var T3e=s(Fm);eoe=n(T3e,"SPAN",{});var M3e=s(eoe);T(Cy.$$.fragment,M3e),M3e.forEach(t),T3e.forEach(t),KGe=i(Sx),ooe=n(Sx,"SPAN",{});var E3e=s(ooe);ZGe=r(E3e,"AutoConfig"),E3e.forEach(t),Sx.forEach(t),Nqe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(wy.$$.fragment,et),eOe=i(et),Ay=n(et,"P",{});var Rx=s(Ay);oOe=r(Rx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W$=n(Rx,"A",{href:!0});var C3e=s(W$);rOe=r(C3e,"from_pretrained()"),C3e.forEach(t),tOe=r(Rx," class method."),Rx.forEach(t),aOe=i(et),yy=n(et,"P",{});var Px=s(yy);nOe=r(Px,"This class cannot be instantiated directly using "),roe=n(Px,"CODE",{});var w3e=s(roe);sOe=r(w3e,"__init__()"),w3e.forEach(t),lOe=r(Px," (throws an error)."),Px.forEach(t),iOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Ly.$$.fragment,ot),dOe=i(ot),toe=n(ot,"P",{});var A3e=s(toe);cOe=r(A3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),A3e.forEach(t),mOe=i(ot),Fi=n(ot,"P",{});var fm=s(Fi);fOe=r(fm,"The configuration class to instantiate is selected based on the "),aoe=n(fm,"CODE",{});var y3e=s(aoe);gOe=r(y3e,"model_type"),y3e.forEach(t),hOe=r(fm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),noe=n(fm,"CODE",{});var L3e=s(noe);uOe=r(L3e,"pretrained_model_name_or_path"),L3e.forEach(t),pOe=r(fm,":"),fm.forEach(t),_Oe=i(ot),A=n(ot,"UL",{});var y=s(A);Tm=n(y,"LI",{});var oA=s(Tm);soe=n(oA,"STRONG",{});var x3e=s(soe);bOe=r(x3e,"albert"),x3e.forEach(t),vOe=r(oA," \u2014 "),Q$=n(oA,"A",{href:!0});var $3e=s(Q$);FOe=r($3e,"AlbertConfig"),$3e.forEach(t),TOe=r(oA," (ALBERT model)"),oA.forEach(t),MOe=i(y),Mm=n(y,"LI",{});var rA=s(Mm);loe=n(rA,"STRONG",{});var k3e=s(loe);EOe=r(k3e,"bart"),k3e.forEach(t),COe=r(rA," \u2014 "),H$=n(rA,"A",{href:!0});var S3e=s(H$);wOe=r(S3e,"BartConfig"),S3e.forEach(t),AOe=r(rA," (BART model)"),rA.forEach(t),yOe=i(y),Em=n(y,"LI",{});var tA=s(Em);ioe=n(tA,"STRONG",{});var R3e=s(ioe);LOe=r(R3e,"beit"),R3e.forEach(t),xOe=r(tA," \u2014 "),U$=n(tA,"A",{href:!0});var P3e=s(U$);$Oe=r(P3e,"BeitConfig"),P3e.forEach(t),kOe=r(tA," (BEiT model)"),tA.forEach(t),SOe=i(y),Cm=n(y,"LI",{});var aA=s(Cm);doe=n(aA,"STRONG",{});var B3e=s(doe);ROe=r(B3e,"bert"),B3e.forEach(t),POe=r(aA," \u2014 "),J$=n(aA,"A",{href:!0});var I3e=s(J$);BOe=r(I3e,"BertConfig"),I3e.forEach(t),IOe=r(aA," (BERT model)"),aA.forEach(t),qOe=i(y),wm=n(y,"LI",{});var nA=s(wm);coe=n(nA,"STRONG",{});var q3e=s(coe);NOe=r(q3e,"bert-generation"),q3e.forEach(t),jOe=r(nA," \u2014 "),Y$=n(nA,"A",{href:!0});var N3e=s(Y$);DOe=r(N3e,"BertGenerationConfig"),N3e.forEach(t),GOe=r(nA," (Bert Generation model)"),nA.forEach(t),OOe=i(y),Am=n(y,"LI",{});var sA=s(Am);moe=n(sA,"STRONG",{});var j3e=s(moe);VOe=r(j3e,"big_bird"),j3e.forEach(t),XOe=r(sA," \u2014 "),K$=n(sA,"A",{href:!0});var D3e=s(K$);zOe=r(D3e,"BigBirdConfig"),D3e.forEach(t),WOe=r(sA," (BigBird model)"),sA.forEach(t),QOe=i(y),ym=n(y,"LI",{});var lA=s(ym);foe=n(lA,"STRONG",{});var G3e=s(foe);HOe=r(G3e,"bigbird_pegasus"),G3e.forEach(t),UOe=r(lA," \u2014 "),Z$=n(lA,"A",{href:!0});var O3e=s(Z$);JOe=r(O3e,"BigBirdPegasusConfig"),O3e.forEach(t),YOe=r(lA," (BigBirdPegasus model)"),lA.forEach(t),KOe=i(y),Lm=n(y,"LI",{});var iA=s(Lm);goe=n(iA,"STRONG",{});var V3e=s(goe);ZOe=r(V3e,"blenderbot"),V3e.forEach(t),eVe=r(iA," \u2014 "),ek=n(iA,"A",{href:!0});var X3e=s(ek);oVe=r(X3e,"BlenderbotConfig"),X3e.forEach(t),rVe=r(iA," (Blenderbot model)"),iA.forEach(t),tVe=i(y),xm=n(y,"LI",{});var dA=s(xm);hoe=n(dA,"STRONG",{});var z3e=s(hoe);aVe=r(z3e,"blenderbot-small"),z3e.forEach(t),nVe=r(dA," \u2014 "),ok=n(dA,"A",{href:!0});var W3e=s(ok);sVe=r(W3e,"BlenderbotSmallConfig"),W3e.forEach(t),lVe=r(dA," (BlenderbotSmall model)"),dA.forEach(t),iVe=i(y),$m=n(y,"LI",{});var cA=s($m);uoe=n(cA,"STRONG",{});var Q3e=s(uoe);dVe=r(Q3e,"camembert"),Q3e.forEach(t),cVe=r(cA," \u2014 "),rk=n(cA,"A",{href:!0});var H3e=s(rk);mVe=r(H3e,"CamembertConfig"),H3e.forEach(t),fVe=r(cA," (CamemBERT model)"),cA.forEach(t),gVe=i(y),km=n(y,"LI",{});var mA=s(km);poe=n(mA,"STRONG",{});var U3e=s(poe);hVe=r(U3e,"canine"),U3e.forEach(t),uVe=r(mA," \u2014 "),tk=n(mA,"A",{href:!0});var J3e=s(tk);pVe=r(J3e,"CanineConfig"),J3e.forEach(t),_Ve=r(mA," (Canine model)"),mA.forEach(t),bVe=i(y),Sm=n(y,"LI",{});var fA=s(Sm);_oe=n(fA,"STRONG",{});var Y3e=s(_oe);vVe=r(Y3e,"clip"),Y3e.forEach(t),FVe=r(fA," \u2014 "),ak=n(fA,"A",{href:!0});var K3e=s(ak);TVe=r(K3e,"CLIPConfig"),K3e.forEach(t),MVe=r(fA," (CLIP model)"),fA.forEach(t),EVe=i(y),Rm=n(y,"LI",{});var gA=s(Rm);boe=n(gA,"STRONG",{});var Z3e=s(boe);CVe=r(Z3e,"convbert"),Z3e.forEach(t),wVe=r(gA," \u2014 "),nk=n(gA,"A",{href:!0});var ewe=s(nk);AVe=r(ewe,"ConvBertConfig"),ewe.forEach(t),yVe=r(gA," (ConvBERT model)"),gA.forEach(t),LVe=i(y),Pm=n(y,"LI",{});var hA=s(Pm);voe=n(hA,"STRONG",{});var owe=s(voe);xVe=r(owe,"convnext"),owe.forEach(t),$Ve=r(hA," \u2014 "),sk=n(hA,"A",{href:!0});var rwe=s(sk);kVe=r(rwe,"ConvNextConfig"),rwe.forEach(t),SVe=r(hA," (ConvNext model)"),hA.forEach(t),RVe=i(y),Bm=n(y,"LI",{});var uA=s(Bm);Foe=n(uA,"STRONG",{});var twe=s(Foe);PVe=r(twe,"ctrl"),twe.forEach(t),BVe=r(uA," \u2014 "),lk=n(uA,"A",{href:!0});var awe=s(lk);IVe=r(awe,"CTRLConfig"),awe.forEach(t),qVe=r(uA," (CTRL model)"),uA.forEach(t),NVe=i(y),Im=n(y,"LI",{});var pA=s(Im);Toe=n(pA,"STRONG",{});var nwe=s(Toe);jVe=r(nwe,"cvt"),nwe.forEach(t),DVe=r(pA," \u2014 "),ik=n(pA,"A",{href:!0});var swe=s(ik);GVe=r(swe,"CvtConfig"),swe.forEach(t),OVe=r(pA," (CvT model)"),pA.forEach(t),VVe=i(y),qm=n(y,"LI",{});var _A=s(qm);Moe=n(_A,"STRONG",{});var lwe=s(Moe);XVe=r(lwe,"data2vec-audio"),lwe.forEach(t),zVe=r(_A," \u2014 "),dk=n(_A,"A",{href:!0});var iwe=s(dk);WVe=r(iwe,"Data2VecAudioConfig"),iwe.forEach(t),QVe=r(_A," (Data2VecAudio model)"),_A.forEach(t),HVe=i(y),Nm=n(y,"LI",{});var bA=s(Nm);Eoe=n(bA,"STRONG",{});var dwe=s(Eoe);UVe=r(dwe,"data2vec-text"),dwe.forEach(t),JVe=r(bA," \u2014 "),ck=n(bA,"A",{href:!0});var cwe=s(ck);YVe=r(cwe,"Data2VecTextConfig"),cwe.forEach(t),KVe=r(bA," (Data2VecText model)"),bA.forEach(t),ZVe=i(y),jm=n(y,"LI",{});var vA=s(jm);Coe=n(vA,"STRONG",{});var mwe=s(Coe);eXe=r(mwe,"data2vec-vision"),mwe.forEach(t),oXe=r(vA," \u2014 "),mk=n(vA,"A",{href:!0});var fwe=s(mk);rXe=r(fwe,"Data2VecVisionConfig"),fwe.forEach(t),tXe=r(vA," (Data2VecVision model)"),vA.forEach(t),aXe=i(y),Dm=n(y,"LI",{});var FA=s(Dm);woe=n(FA,"STRONG",{});var gwe=s(woe);nXe=r(gwe,"deberta"),gwe.forEach(t),sXe=r(FA," \u2014 "),fk=n(FA,"A",{href:!0});var hwe=s(fk);lXe=r(hwe,"DebertaConfig"),hwe.forEach(t),iXe=r(FA," (DeBERTa model)"),FA.forEach(t),dXe=i(y),Gm=n(y,"LI",{});var TA=s(Gm);Aoe=n(TA,"STRONG",{});var uwe=s(Aoe);cXe=r(uwe,"deberta-v2"),uwe.forEach(t),mXe=r(TA," \u2014 "),gk=n(TA,"A",{href:!0});var pwe=s(gk);fXe=r(pwe,"DebertaV2Config"),pwe.forEach(t),gXe=r(TA," (DeBERTa-v2 model)"),TA.forEach(t),hXe=i(y),Om=n(y,"LI",{});var MA=s(Om);yoe=n(MA,"STRONG",{});var _we=s(yoe);uXe=r(_we,"decision_transformer"),_we.forEach(t),pXe=r(MA," \u2014 "),hk=n(MA,"A",{href:!0});var bwe=s(hk);_Xe=r(bwe,"DecisionTransformerConfig"),bwe.forEach(t),bXe=r(MA," (Decision Transformer model)"),MA.forEach(t),vXe=i(y),Vm=n(y,"LI",{});var EA=s(Vm);Loe=n(EA,"STRONG",{});var vwe=s(Loe);FXe=r(vwe,"deit"),vwe.forEach(t),TXe=r(EA," \u2014 "),uk=n(EA,"A",{href:!0});var DOr=s(uk);MXe=r(DOr,"DeiTConfig"),DOr.forEach(t),EXe=r(EA," (DeiT model)"),EA.forEach(t),CXe=i(y),Xm=n(y,"LI",{});var Fwe=s(Xm);xoe=n(Fwe,"STRONG",{});var GOr=s(xoe);wXe=r(GOr,"detr"),GOr.forEach(t),AXe=r(Fwe," \u2014 "),pk=n(Fwe,"A",{href:!0});var OOr=s(pk);yXe=r(OOr,"DetrConfig"),OOr.forEach(t),LXe=r(Fwe," (DETR model)"),Fwe.forEach(t),xXe=i(y),zm=n(y,"LI",{});var Twe=s(zm);$oe=n(Twe,"STRONG",{});var VOr=s($oe);$Xe=r(VOr,"distilbert"),VOr.forEach(t),kXe=r(Twe," \u2014 "),_k=n(Twe,"A",{href:!0});var XOr=s(_k);SXe=r(XOr,"DistilBertConfig"),XOr.forEach(t),RXe=r(Twe," (DistilBERT model)"),Twe.forEach(t),PXe=i(y),Wm=n(y,"LI",{});var Mwe=s(Wm);koe=n(Mwe,"STRONG",{});var zOr=s(koe);BXe=r(zOr,"dpr"),zOr.forEach(t),IXe=r(Mwe," \u2014 "),bk=n(Mwe,"A",{href:!0});var WOr=s(bk);qXe=r(WOr,"DPRConfig"),WOr.forEach(t),NXe=r(Mwe," (DPR model)"),Mwe.forEach(t),jXe=i(y),Qm=n(y,"LI",{});var Ewe=s(Qm);Soe=n(Ewe,"STRONG",{});var QOr=s(Soe);DXe=r(QOr,"dpt"),QOr.forEach(t),GXe=r(Ewe," \u2014 "),vk=n(Ewe,"A",{href:!0});var HOr=s(vk);OXe=r(HOr,"DPTConfig"),HOr.forEach(t),VXe=r(Ewe," (DPT model)"),Ewe.forEach(t),XXe=i(y),Hm=n(y,"LI",{});var Cwe=s(Hm);Roe=n(Cwe,"STRONG",{});var UOr=s(Roe);zXe=r(UOr,"electra"),UOr.forEach(t),WXe=r(Cwe," \u2014 "),Fk=n(Cwe,"A",{href:!0});var JOr=s(Fk);QXe=r(JOr,"ElectraConfig"),JOr.forEach(t),HXe=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),UXe=i(y),Um=n(y,"LI",{});var wwe=s(Um);Poe=n(wwe,"STRONG",{});var YOr=s(Poe);JXe=r(YOr,"encoder-decoder"),YOr.forEach(t),YXe=r(wwe," \u2014 "),Tk=n(wwe,"A",{href:!0});var KOr=s(Tk);KXe=r(KOr,"EncoderDecoderConfig"),KOr.forEach(t),ZXe=r(wwe," (Encoder decoder model)"),wwe.forEach(t),eze=i(y),Jm=n(y,"LI",{});var Awe=s(Jm);Boe=n(Awe,"STRONG",{});var ZOr=s(Boe);oze=r(ZOr,"flaubert"),ZOr.forEach(t),rze=r(Awe," \u2014 "),Mk=n(Awe,"A",{href:!0});var eVr=s(Mk);tze=r(eVr,"FlaubertConfig"),eVr.forEach(t),aze=r(Awe," (FlauBERT model)"),Awe.forEach(t),nze=i(y),Ym=n(y,"LI",{});var ywe=s(Ym);Ioe=n(ywe,"STRONG",{});var oVr=s(Ioe);sze=r(oVr,"flava"),oVr.forEach(t),lze=r(ywe," \u2014 "),Ek=n(ywe,"A",{href:!0});var rVr=s(Ek);ize=r(rVr,"FlavaConfig"),rVr.forEach(t),dze=r(ywe," (Flava model)"),ywe.forEach(t),cze=i(y),Km=n(y,"LI",{});var Lwe=s(Km);qoe=n(Lwe,"STRONG",{});var tVr=s(qoe);mze=r(tVr,"fnet"),tVr.forEach(t),fze=r(Lwe," \u2014 "),Ck=n(Lwe,"A",{href:!0});var aVr=s(Ck);gze=r(aVr,"FNetConfig"),aVr.forEach(t),hze=r(Lwe," (FNet model)"),Lwe.forEach(t),uze=i(y),Zm=n(y,"LI",{});var xwe=s(Zm);Noe=n(xwe,"STRONG",{});var nVr=s(Noe);pze=r(nVr,"fsmt"),nVr.forEach(t),_ze=r(xwe," \u2014 "),wk=n(xwe,"A",{href:!0});var sVr=s(wk);bze=r(sVr,"FSMTConfig"),sVr.forEach(t),vze=r(xwe," (FairSeq Machine-Translation model)"),xwe.forEach(t),Fze=i(y),ef=n(y,"LI",{});var $we=s(ef);joe=n($we,"STRONG",{});var lVr=s(joe);Tze=r(lVr,"funnel"),lVr.forEach(t),Mze=r($we," \u2014 "),Ak=n($we,"A",{href:!0});var iVr=s(Ak);Eze=r(iVr,"FunnelConfig"),iVr.forEach(t),Cze=r($we," (Funnel Transformer model)"),$we.forEach(t),wze=i(y),of=n(y,"LI",{});var kwe=s(of);Doe=n(kwe,"STRONG",{});var dVr=s(Doe);Aze=r(dVr,"glpn"),dVr.forEach(t),yze=r(kwe," \u2014 "),yk=n(kwe,"A",{href:!0});var cVr=s(yk);Lze=r(cVr,"GLPNConfig"),cVr.forEach(t),xze=r(kwe," (GLPN model)"),kwe.forEach(t),$ze=i(y),rf=n(y,"LI",{});var Swe=s(rf);Goe=n(Swe,"STRONG",{});var mVr=s(Goe);kze=r(mVr,"gpt2"),mVr.forEach(t),Sze=r(Swe," \u2014 "),Lk=n(Swe,"A",{href:!0});var fVr=s(Lk);Rze=r(fVr,"GPT2Config"),fVr.forEach(t),Pze=r(Swe," (OpenAI GPT-2 model)"),Swe.forEach(t),Bze=i(y),tf=n(y,"LI",{});var Rwe=s(tf);Ooe=n(Rwe,"STRONG",{});var gVr=s(Ooe);Ize=r(gVr,"gpt_neo"),gVr.forEach(t),qze=r(Rwe," \u2014 "),xk=n(Rwe,"A",{href:!0});var hVr=s(xk);Nze=r(hVr,"GPTNeoConfig"),hVr.forEach(t),jze=r(Rwe," (GPT Neo model)"),Rwe.forEach(t),Dze=i(y),af=n(y,"LI",{});var Pwe=s(af);Voe=n(Pwe,"STRONG",{});var uVr=s(Voe);Gze=r(uVr,"gptj"),uVr.forEach(t),Oze=r(Pwe," \u2014 "),$k=n(Pwe,"A",{href:!0});var pVr=s($k);Vze=r(pVr,"GPTJConfig"),pVr.forEach(t),Xze=r(Pwe," (GPT-J model)"),Pwe.forEach(t),zze=i(y),nf=n(y,"LI",{});var Bwe=s(nf);Xoe=n(Bwe,"STRONG",{});var _Vr=s(Xoe);Wze=r(_Vr,"hubert"),_Vr.forEach(t),Qze=r(Bwe," \u2014 "),kk=n(Bwe,"A",{href:!0});var bVr=s(kk);Hze=r(bVr,"HubertConfig"),bVr.forEach(t),Uze=r(Bwe," (Hubert model)"),Bwe.forEach(t),Jze=i(y),sf=n(y,"LI",{});var Iwe=s(sf);zoe=n(Iwe,"STRONG",{});var vVr=s(zoe);Yze=r(vVr,"ibert"),vVr.forEach(t),Kze=r(Iwe," \u2014 "),Sk=n(Iwe,"A",{href:!0});var FVr=s(Sk);Zze=r(FVr,"IBertConfig"),FVr.forEach(t),eWe=r(Iwe," (I-BERT model)"),Iwe.forEach(t),oWe=i(y),lf=n(y,"LI",{});var qwe=s(lf);Woe=n(qwe,"STRONG",{});var TVr=s(Woe);rWe=r(TVr,"imagegpt"),TVr.forEach(t),tWe=r(qwe," \u2014 "),Rk=n(qwe,"A",{href:!0});var MVr=s(Rk);aWe=r(MVr,"ImageGPTConfig"),MVr.forEach(t),nWe=r(qwe," (ImageGPT model)"),qwe.forEach(t),sWe=i(y),df=n(y,"LI",{});var Nwe=s(df);Qoe=n(Nwe,"STRONG",{});var EVr=s(Qoe);lWe=r(EVr,"layoutlm"),EVr.forEach(t),iWe=r(Nwe," \u2014 "),Pk=n(Nwe,"A",{href:!0});var CVr=s(Pk);dWe=r(CVr,"LayoutLMConfig"),CVr.forEach(t),cWe=r(Nwe," (LayoutLM model)"),Nwe.forEach(t),mWe=i(y),cf=n(y,"LI",{});var jwe=s(cf);Hoe=n(jwe,"STRONG",{});var wVr=s(Hoe);fWe=r(wVr,"layoutlmv2"),wVr.forEach(t),gWe=r(jwe," \u2014 "),Bk=n(jwe,"A",{href:!0});var AVr=s(Bk);hWe=r(AVr,"LayoutLMv2Config"),AVr.forEach(t),uWe=r(jwe," (LayoutLMv2 model)"),jwe.forEach(t),pWe=i(y),mf=n(y,"LI",{});var Dwe=s(mf);Uoe=n(Dwe,"STRONG",{});var yVr=s(Uoe);_We=r(yVr,"layoutlmv3"),yVr.forEach(t),bWe=r(Dwe," \u2014 "),Ik=n(Dwe,"A",{href:!0});var LVr=s(Ik);vWe=r(LVr,"LayoutLMv3Config"),LVr.forEach(t),FWe=r(Dwe," (LayoutLMv3 model)"),Dwe.forEach(t),TWe=i(y),ff=n(y,"LI",{});var Gwe=s(ff);Joe=n(Gwe,"STRONG",{});var xVr=s(Joe);MWe=r(xVr,"led"),xVr.forEach(t),EWe=r(Gwe," \u2014 "),qk=n(Gwe,"A",{href:!0});var $Vr=s(qk);CWe=r($Vr,"LEDConfig"),$Vr.forEach(t),wWe=r(Gwe," (LED model)"),Gwe.forEach(t),AWe=i(y),gf=n(y,"LI",{});var Owe=s(gf);Yoe=n(Owe,"STRONG",{});var kVr=s(Yoe);yWe=r(kVr,"longformer"),kVr.forEach(t),LWe=r(Owe," \u2014 "),Nk=n(Owe,"A",{href:!0});var SVr=s(Nk);xWe=r(SVr,"LongformerConfig"),SVr.forEach(t),$We=r(Owe," (Longformer model)"),Owe.forEach(t),kWe=i(y),hf=n(y,"LI",{});var Vwe=s(hf);Koe=n(Vwe,"STRONG",{});var RVr=s(Koe);SWe=r(RVr,"luke"),RVr.forEach(t),RWe=r(Vwe," \u2014 "),jk=n(Vwe,"A",{href:!0});var PVr=s(jk);PWe=r(PVr,"LukeConfig"),PVr.forEach(t),BWe=r(Vwe," (LUKE model)"),Vwe.forEach(t),IWe=i(y),uf=n(y,"LI",{});var Xwe=s(uf);Zoe=n(Xwe,"STRONG",{});var BVr=s(Zoe);qWe=r(BVr,"lxmert"),BVr.forEach(t),NWe=r(Xwe," \u2014 "),Dk=n(Xwe,"A",{href:!0});var IVr=s(Dk);jWe=r(IVr,"LxmertConfig"),IVr.forEach(t),DWe=r(Xwe," (LXMERT model)"),Xwe.forEach(t),GWe=i(y),pf=n(y,"LI",{});var zwe=s(pf);ere=n(zwe,"STRONG",{});var qVr=s(ere);OWe=r(qVr,"m2m_100"),qVr.forEach(t),VWe=r(zwe," \u2014 "),Gk=n(zwe,"A",{href:!0});var NVr=s(Gk);XWe=r(NVr,"M2M100Config"),NVr.forEach(t),zWe=r(zwe," (M2M100 model)"),zwe.forEach(t),WWe=i(y),_f=n(y,"LI",{});var Wwe=s(_f);ore=n(Wwe,"STRONG",{});var jVr=s(ore);QWe=r(jVr,"marian"),jVr.forEach(t),HWe=r(Wwe," \u2014 "),Ok=n(Wwe,"A",{href:!0});var DVr=s(Ok);UWe=r(DVr,"MarianConfig"),DVr.forEach(t),JWe=r(Wwe," (Marian model)"),Wwe.forEach(t),YWe=i(y),bf=n(y,"LI",{});var Qwe=s(bf);rre=n(Qwe,"STRONG",{});var GVr=s(rre);KWe=r(GVr,"maskformer"),GVr.forEach(t),ZWe=r(Qwe," \u2014 "),Vk=n(Qwe,"A",{href:!0});var OVr=s(Vk);eQe=r(OVr,"MaskFormerConfig"),OVr.forEach(t),oQe=r(Qwe," (MaskFormer model)"),Qwe.forEach(t),rQe=i(y),vf=n(y,"LI",{});var Hwe=s(vf);tre=n(Hwe,"STRONG",{});var VVr=s(tre);tQe=r(VVr,"mbart"),VVr.forEach(t),aQe=r(Hwe," \u2014 "),Xk=n(Hwe,"A",{href:!0});var XVr=s(Xk);nQe=r(XVr,"MBartConfig"),XVr.forEach(t),sQe=r(Hwe," (mBART model)"),Hwe.forEach(t),lQe=i(y),Ff=n(y,"LI",{});var Uwe=s(Ff);are=n(Uwe,"STRONG",{});var zVr=s(are);iQe=r(zVr,"megatron-bert"),zVr.forEach(t),dQe=r(Uwe," \u2014 "),zk=n(Uwe,"A",{href:!0});var WVr=s(zk);cQe=r(WVr,"MegatronBertConfig"),WVr.forEach(t),mQe=r(Uwe," (MegatronBert model)"),Uwe.forEach(t),fQe=i(y),Tf=n(y,"LI",{});var Jwe=s(Tf);nre=n(Jwe,"STRONG",{});var QVr=s(nre);gQe=r(QVr,"mobilebert"),QVr.forEach(t),hQe=r(Jwe," \u2014 "),Wk=n(Jwe,"A",{href:!0});var HVr=s(Wk);uQe=r(HVr,"MobileBertConfig"),HVr.forEach(t),pQe=r(Jwe," (MobileBERT model)"),Jwe.forEach(t),_Qe=i(y),Mf=n(y,"LI",{});var Ywe=s(Mf);sre=n(Ywe,"STRONG",{});var UVr=s(sre);bQe=r(UVr,"mpnet"),UVr.forEach(t),vQe=r(Ywe," \u2014 "),Qk=n(Ywe,"A",{href:!0});var JVr=s(Qk);FQe=r(JVr,"MPNetConfig"),JVr.forEach(t),TQe=r(Ywe," (MPNet model)"),Ywe.forEach(t),MQe=i(y),Ef=n(y,"LI",{});var Kwe=s(Ef);lre=n(Kwe,"STRONG",{});var YVr=s(lre);EQe=r(YVr,"mt5"),YVr.forEach(t),CQe=r(Kwe," \u2014 "),Hk=n(Kwe,"A",{href:!0});var KVr=s(Hk);wQe=r(KVr,"MT5Config"),KVr.forEach(t),AQe=r(Kwe," (mT5 model)"),Kwe.forEach(t),yQe=i(y),Cf=n(y,"LI",{});var Zwe=s(Cf);ire=n(Zwe,"STRONG",{});var ZVr=s(ire);LQe=r(ZVr,"nystromformer"),ZVr.forEach(t),xQe=r(Zwe," \u2014 "),Uk=n(Zwe,"A",{href:!0});var eXr=s(Uk);$Qe=r(eXr,"NystromformerConfig"),eXr.forEach(t),kQe=r(Zwe," (Nystromformer model)"),Zwe.forEach(t),SQe=i(y),wf=n(y,"LI",{});var e0e=s(wf);dre=n(e0e,"STRONG",{});var oXr=s(dre);RQe=r(oXr,"openai-gpt"),oXr.forEach(t),PQe=r(e0e," \u2014 "),Jk=n(e0e,"A",{href:!0});var rXr=s(Jk);BQe=r(rXr,"OpenAIGPTConfig"),rXr.forEach(t),IQe=r(e0e," (OpenAI GPT model)"),e0e.forEach(t),qQe=i(y),Af=n(y,"LI",{});var o0e=s(Af);cre=n(o0e,"STRONG",{});var tXr=s(cre);NQe=r(tXr,"opt"),tXr.forEach(t),jQe=r(o0e," \u2014 "),Yk=n(o0e,"A",{href:!0});var aXr=s(Yk);DQe=r(aXr,"OPTConfig"),aXr.forEach(t),GQe=r(o0e," (OPT model)"),o0e.forEach(t),OQe=i(y),yf=n(y,"LI",{});var r0e=s(yf);mre=n(r0e,"STRONG",{});var nXr=s(mre);VQe=r(nXr,"pegasus"),nXr.forEach(t),XQe=r(r0e," \u2014 "),Kk=n(r0e,"A",{href:!0});var sXr=s(Kk);zQe=r(sXr,"PegasusConfig"),sXr.forEach(t),WQe=r(r0e," (Pegasus model)"),r0e.forEach(t),QQe=i(y),Lf=n(y,"LI",{});var t0e=s(Lf);fre=n(t0e,"STRONG",{});var lXr=s(fre);HQe=r(lXr,"perceiver"),lXr.forEach(t),UQe=r(t0e," \u2014 "),Zk=n(t0e,"A",{href:!0});var iXr=s(Zk);JQe=r(iXr,"PerceiverConfig"),iXr.forEach(t),YQe=r(t0e," (Perceiver model)"),t0e.forEach(t),KQe=i(y),xf=n(y,"LI",{});var a0e=s(xf);gre=n(a0e,"STRONG",{});var dXr=s(gre);ZQe=r(dXr,"plbart"),dXr.forEach(t),eHe=r(a0e," \u2014 "),eS=n(a0e,"A",{href:!0});var cXr=s(eS);oHe=r(cXr,"PLBartConfig"),cXr.forEach(t),rHe=r(a0e," (PLBart model)"),a0e.forEach(t),tHe=i(y),$f=n(y,"LI",{});var n0e=s($f);hre=n(n0e,"STRONG",{});var mXr=s(hre);aHe=r(mXr,"poolformer"),mXr.forEach(t),nHe=r(n0e," \u2014 "),oS=n(n0e,"A",{href:!0});var fXr=s(oS);sHe=r(fXr,"PoolFormerConfig"),fXr.forEach(t),lHe=r(n0e," (PoolFormer model)"),n0e.forEach(t),iHe=i(y),kf=n(y,"LI",{});var s0e=s(kf);ure=n(s0e,"STRONG",{});var gXr=s(ure);dHe=r(gXr,"prophetnet"),gXr.forEach(t),cHe=r(s0e," \u2014 "),rS=n(s0e,"A",{href:!0});var hXr=s(rS);mHe=r(hXr,"ProphetNetConfig"),hXr.forEach(t),fHe=r(s0e," (ProphetNet model)"),s0e.forEach(t),gHe=i(y),Sf=n(y,"LI",{});var l0e=s(Sf);pre=n(l0e,"STRONG",{});var uXr=s(pre);hHe=r(uXr,"qdqbert"),uXr.forEach(t),uHe=r(l0e," \u2014 "),tS=n(l0e,"A",{href:!0});var pXr=s(tS);pHe=r(pXr,"QDQBertConfig"),pXr.forEach(t),_He=r(l0e," (QDQBert model)"),l0e.forEach(t),bHe=i(y),Rf=n(y,"LI",{});var i0e=s(Rf);_re=n(i0e,"STRONG",{});var _Xr=s(_re);vHe=r(_Xr,"rag"),_Xr.forEach(t),FHe=r(i0e," \u2014 "),aS=n(i0e,"A",{href:!0});var bXr=s(aS);THe=r(bXr,"RagConfig"),bXr.forEach(t),MHe=r(i0e," (RAG model)"),i0e.forEach(t),EHe=i(y),Pf=n(y,"LI",{});var d0e=s(Pf);bre=n(d0e,"STRONG",{});var vXr=s(bre);CHe=r(vXr,"realm"),vXr.forEach(t),wHe=r(d0e," \u2014 "),nS=n(d0e,"A",{href:!0});var FXr=s(nS);AHe=r(FXr,"RealmConfig"),FXr.forEach(t),yHe=r(d0e," (Realm model)"),d0e.forEach(t),LHe=i(y),Bf=n(y,"LI",{});var c0e=s(Bf);vre=n(c0e,"STRONG",{});var TXr=s(vre);xHe=r(TXr,"reformer"),TXr.forEach(t),$He=r(c0e," \u2014 "),sS=n(c0e,"A",{href:!0});var MXr=s(sS);kHe=r(MXr,"ReformerConfig"),MXr.forEach(t),SHe=r(c0e," (Reformer model)"),c0e.forEach(t),RHe=i(y),If=n(y,"LI",{});var m0e=s(If);Fre=n(m0e,"STRONG",{});var EXr=s(Fre);PHe=r(EXr,"regnet"),EXr.forEach(t),BHe=r(m0e," \u2014 "),lS=n(m0e,"A",{href:!0});var CXr=s(lS);IHe=r(CXr,"RegNetConfig"),CXr.forEach(t),qHe=r(m0e," (RegNet model)"),m0e.forEach(t),NHe=i(y),qf=n(y,"LI",{});var f0e=s(qf);Tre=n(f0e,"STRONG",{});var wXr=s(Tre);jHe=r(wXr,"rembert"),wXr.forEach(t),DHe=r(f0e," \u2014 "),iS=n(f0e,"A",{href:!0});var AXr=s(iS);GHe=r(AXr,"RemBertConfig"),AXr.forEach(t),OHe=r(f0e," (RemBERT model)"),f0e.forEach(t),VHe=i(y),Nf=n(y,"LI",{});var g0e=s(Nf);Mre=n(g0e,"STRONG",{});var yXr=s(Mre);XHe=r(yXr,"resnet"),yXr.forEach(t),zHe=r(g0e," \u2014 "),dS=n(g0e,"A",{href:!0});var LXr=s(dS);WHe=r(LXr,"ResNetConfig"),LXr.forEach(t),QHe=r(g0e," (ResNet model)"),g0e.forEach(t),HHe=i(y),jf=n(y,"LI",{});var h0e=s(jf);Ere=n(h0e,"STRONG",{});var xXr=s(Ere);UHe=r(xXr,"retribert"),xXr.forEach(t),JHe=r(h0e," \u2014 "),cS=n(h0e,"A",{href:!0});var $Xr=s(cS);YHe=r($Xr,"RetriBertConfig"),$Xr.forEach(t),KHe=r(h0e," (RetriBERT model)"),h0e.forEach(t),ZHe=i(y),Df=n(y,"LI",{});var u0e=s(Df);Cre=n(u0e,"STRONG",{});var kXr=s(Cre);eUe=r(kXr,"roberta"),kXr.forEach(t),oUe=r(u0e," \u2014 "),mS=n(u0e,"A",{href:!0});var SXr=s(mS);rUe=r(SXr,"RobertaConfig"),SXr.forEach(t),tUe=r(u0e," (RoBERTa model)"),u0e.forEach(t),aUe=i(y),Gf=n(y,"LI",{});var p0e=s(Gf);wre=n(p0e,"STRONG",{});var RXr=s(wre);nUe=r(RXr,"roformer"),RXr.forEach(t),sUe=r(p0e," \u2014 "),fS=n(p0e,"A",{href:!0});var PXr=s(fS);lUe=r(PXr,"RoFormerConfig"),PXr.forEach(t),iUe=r(p0e," (RoFormer model)"),p0e.forEach(t),dUe=i(y),Of=n(y,"LI",{});var _0e=s(Of);Are=n(_0e,"STRONG",{});var BXr=s(Are);cUe=r(BXr,"segformer"),BXr.forEach(t),mUe=r(_0e," \u2014 "),gS=n(_0e,"A",{href:!0});var IXr=s(gS);fUe=r(IXr,"SegformerConfig"),IXr.forEach(t),gUe=r(_0e," (SegFormer model)"),_0e.forEach(t),hUe=i(y),Vf=n(y,"LI",{});var b0e=s(Vf);yre=n(b0e,"STRONG",{});var qXr=s(yre);uUe=r(qXr,"sew"),qXr.forEach(t),pUe=r(b0e," \u2014 "),hS=n(b0e,"A",{href:!0});var NXr=s(hS);_Ue=r(NXr,"SEWConfig"),NXr.forEach(t),bUe=r(b0e," (SEW model)"),b0e.forEach(t),vUe=i(y),Xf=n(y,"LI",{});var v0e=s(Xf);Lre=n(v0e,"STRONG",{});var jXr=s(Lre);FUe=r(jXr,"sew-d"),jXr.forEach(t),TUe=r(v0e," \u2014 "),uS=n(v0e,"A",{href:!0});var DXr=s(uS);MUe=r(DXr,"SEWDConfig"),DXr.forEach(t),EUe=r(v0e," (SEW-D model)"),v0e.forEach(t),CUe=i(y),zf=n(y,"LI",{});var F0e=s(zf);xre=n(F0e,"STRONG",{});var GXr=s(xre);wUe=r(GXr,"speech-encoder-decoder"),GXr.forEach(t),AUe=r(F0e," \u2014 "),pS=n(F0e,"A",{href:!0});var OXr=s(pS);yUe=r(OXr,"SpeechEncoderDecoderConfig"),OXr.forEach(t),LUe=r(F0e," (Speech Encoder decoder model)"),F0e.forEach(t),xUe=i(y),Wf=n(y,"LI",{});var T0e=s(Wf);$re=n(T0e,"STRONG",{});var VXr=s($re);$Ue=r(VXr,"speech_to_text"),VXr.forEach(t),kUe=r(T0e," \u2014 "),_S=n(T0e,"A",{href:!0});var XXr=s(_S);SUe=r(XXr,"Speech2TextConfig"),XXr.forEach(t),RUe=r(T0e," (Speech2Text model)"),T0e.forEach(t),PUe=i(y),Qf=n(y,"LI",{});var M0e=s(Qf);kre=n(M0e,"STRONG",{});var zXr=s(kre);BUe=r(zXr,"speech_to_text_2"),zXr.forEach(t),IUe=r(M0e," \u2014 "),bS=n(M0e,"A",{href:!0});var WXr=s(bS);qUe=r(WXr,"Speech2Text2Config"),WXr.forEach(t),NUe=r(M0e," (Speech2Text2 model)"),M0e.forEach(t),jUe=i(y),Hf=n(y,"LI",{});var E0e=s(Hf);Sre=n(E0e,"STRONG",{});var QXr=s(Sre);DUe=r(QXr,"splinter"),QXr.forEach(t),GUe=r(E0e," \u2014 "),vS=n(E0e,"A",{href:!0});var HXr=s(vS);OUe=r(HXr,"SplinterConfig"),HXr.forEach(t),VUe=r(E0e," (Splinter model)"),E0e.forEach(t),XUe=i(y),Uf=n(y,"LI",{});var C0e=s(Uf);Rre=n(C0e,"STRONG",{});var UXr=s(Rre);zUe=r(UXr,"squeezebert"),UXr.forEach(t),WUe=r(C0e," \u2014 "),FS=n(C0e,"A",{href:!0});var JXr=s(FS);QUe=r(JXr,"SqueezeBertConfig"),JXr.forEach(t),HUe=r(C0e," (SqueezeBERT model)"),C0e.forEach(t),UUe=i(y),Jf=n(y,"LI",{});var w0e=s(Jf);Pre=n(w0e,"STRONG",{});var YXr=s(Pre);JUe=r(YXr,"swin"),YXr.forEach(t),YUe=r(w0e," \u2014 "),TS=n(w0e,"A",{href:!0});var KXr=s(TS);KUe=r(KXr,"SwinConfig"),KXr.forEach(t),ZUe=r(w0e," (Swin model)"),w0e.forEach(t),eJe=i(y),Yf=n(y,"LI",{});var A0e=s(Yf);Bre=n(A0e,"STRONG",{});var ZXr=s(Bre);oJe=r(ZXr,"t5"),ZXr.forEach(t),rJe=r(A0e," \u2014 "),MS=n(A0e,"A",{href:!0});var ezr=s(MS);tJe=r(ezr,"T5Config"),ezr.forEach(t),aJe=r(A0e," (T5 model)"),A0e.forEach(t),nJe=i(y),Kf=n(y,"LI",{});var y0e=s(Kf);Ire=n(y0e,"STRONG",{});var ozr=s(Ire);sJe=r(ozr,"tapas"),ozr.forEach(t),lJe=r(y0e," \u2014 "),ES=n(y0e,"A",{href:!0});var rzr=s(ES);iJe=r(rzr,"TapasConfig"),rzr.forEach(t),dJe=r(y0e," (TAPAS model)"),y0e.forEach(t),cJe=i(y),Zf=n(y,"LI",{});var L0e=s(Zf);qre=n(L0e,"STRONG",{});var tzr=s(qre);mJe=r(tzr,"trajectory_transformer"),tzr.forEach(t),fJe=r(L0e," \u2014 "),CS=n(L0e,"A",{href:!0});var azr=s(CS);gJe=r(azr,"TrajectoryTransformerConfig"),azr.forEach(t),hJe=r(L0e," (Trajectory Transformer model)"),L0e.forEach(t),uJe=i(y),eg=n(y,"LI",{});var x0e=s(eg);Nre=n(x0e,"STRONG",{});var nzr=s(Nre);pJe=r(nzr,"transfo-xl"),nzr.forEach(t),_Je=r(x0e," \u2014 "),wS=n(x0e,"A",{href:!0});var szr=s(wS);bJe=r(szr,"TransfoXLConfig"),szr.forEach(t),vJe=r(x0e," (Transformer-XL model)"),x0e.forEach(t),FJe=i(y),og=n(y,"LI",{});var $0e=s(og);jre=n($0e,"STRONG",{});var lzr=s(jre);TJe=r(lzr,"trocr"),lzr.forEach(t),MJe=r($0e," \u2014 "),AS=n($0e,"A",{href:!0});var izr=s(AS);EJe=r(izr,"TrOCRConfig"),izr.forEach(t),CJe=r($0e," (TrOCR model)"),$0e.forEach(t),wJe=i(y),rg=n(y,"LI",{});var k0e=s(rg);Dre=n(k0e,"STRONG",{});var dzr=s(Dre);AJe=r(dzr,"unispeech"),dzr.forEach(t),yJe=r(k0e," \u2014 "),yS=n(k0e,"A",{href:!0});var czr=s(yS);LJe=r(czr,"UniSpeechConfig"),czr.forEach(t),xJe=r(k0e," (UniSpeech model)"),k0e.forEach(t),$Je=i(y),tg=n(y,"LI",{});var S0e=s(tg);Gre=n(S0e,"STRONG",{});var mzr=s(Gre);kJe=r(mzr,"unispeech-sat"),mzr.forEach(t),SJe=r(S0e," \u2014 "),LS=n(S0e,"A",{href:!0});var fzr=s(LS);RJe=r(fzr,"UniSpeechSatConfig"),fzr.forEach(t),PJe=r(S0e," (UniSpeechSat model)"),S0e.forEach(t),BJe=i(y),ag=n(y,"LI",{});var R0e=s(ag);Ore=n(R0e,"STRONG",{});var gzr=s(Ore);IJe=r(gzr,"van"),gzr.forEach(t),qJe=r(R0e," \u2014 "),xS=n(R0e,"A",{href:!0});var hzr=s(xS);NJe=r(hzr,"VanConfig"),hzr.forEach(t),jJe=r(R0e," (VAN model)"),R0e.forEach(t),DJe=i(y),ng=n(y,"LI",{});var P0e=s(ng);Vre=n(P0e,"STRONG",{});var uzr=s(Vre);GJe=r(uzr,"vilt"),uzr.forEach(t),OJe=r(P0e," \u2014 "),$S=n(P0e,"A",{href:!0});var pzr=s($S);VJe=r(pzr,"ViltConfig"),pzr.forEach(t),XJe=r(P0e," (ViLT model)"),P0e.forEach(t),zJe=i(y),sg=n(y,"LI",{});var B0e=s(sg);Xre=n(B0e,"STRONG",{});var _zr=s(Xre);WJe=r(_zr,"vision-encoder-decoder"),_zr.forEach(t),QJe=r(B0e," \u2014 "),kS=n(B0e,"A",{href:!0});var bzr=s(kS);HJe=r(bzr,"VisionEncoderDecoderConfig"),bzr.forEach(t),UJe=r(B0e," (Vision Encoder decoder model)"),B0e.forEach(t),JJe=i(y),lg=n(y,"LI",{});var I0e=s(lg);zre=n(I0e,"STRONG",{});var vzr=s(zre);YJe=r(vzr,"vision-text-dual-encoder"),vzr.forEach(t),KJe=r(I0e," \u2014 "),SS=n(I0e,"A",{href:!0});var Fzr=s(SS);ZJe=r(Fzr,"VisionTextDualEncoderConfig"),Fzr.forEach(t),eYe=r(I0e," (VisionTextDualEncoder model)"),I0e.forEach(t),oYe=i(y),ig=n(y,"LI",{});var q0e=s(ig);Wre=n(q0e,"STRONG",{});var Tzr=s(Wre);rYe=r(Tzr,"visual_bert"),Tzr.forEach(t),tYe=r(q0e," \u2014 "),RS=n(q0e,"A",{href:!0});var Mzr=s(RS);aYe=r(Mzr,"VisualBertConfig"),Mzr.forEach(t),nYe=r(q0e," (VisualBert model)"),q0e.forEach(t),sYe=i(y),dg=n(y,"LI",{});var N0e=s(dg);Qre=n(N0e,"STRONG",{});var Ezr=s(Qre);lYe=r(Ezr,"vit"),Ezr.forEach(t),iYe=r(N0e," \u2014 "),PS=n(N0e,"A",{href:!0});var Czr=s(PS);dYe=r(Czr,"ViTConfig"),Czr.forEach(t),cYe=r(N0e," (ViT model)"),N0e.forEach(t),mYe=i(y),cg=n(y,"LI",{});var j0e=s(cg);Hre=n(j0e,"STRONG",{});var wzr=s(Hre);fYe=r(wzr,"vit_mae"),wzr.forEach(t),gYe=r(j0e," \u2014 "),BS=n(j0e,"A",{href:!0});var Azr=s(BS);hYe=r(Azr,"ViTMAEConfig"),Azr.forEach(t),uYe=r(j0e," (ViTMAE model)"),j0e.forEach(t),pYe=i(y),mg=n(y,"LI",{});var D0e=s(mg);Ure=n(D0e,"STRONG",{});var yzr=s(Ure);_Ye=r(yzr,"wav2vec2"),yzr.forEach(t),bYe=r(D0e," \u2014 "),IS=n(D0e,"A",{href:!0});var Lzr=s(IS);vYe=r(Lzr,"Wav2Vec2Config"),Lzr.forEach(t),FYe=r(D0e," (Wav2Vec2 model)"),D0e.forEach(t),TYe=i(y),fg=n(y,"LI",{});var G0e=s(fg);Jre=n(G0e,"STRONG",{});var xzr=s(Jre);MYe=r(xzr,"wav2vec2-conformer"),xzr.forEach(t),EYe=r(G0e," \u2014 "),qS=n(G0e,"A",{href:!0});var $zr=s(qS);CYe=r($zr,"Wav2Vec2ConformerConfig"),$zr.forEach(t),wYe=r(G0e," (Wav2Vec2-Conformer model)"),G0e.forEach(t),AYe=i(y),gg=n(y,"LI",{});var O0e=s(gg);Yre=n(O0e,"STRONG",{});var kzr=s(Yre);yYe=r(kzr,"wavlm"),kzr.forEach(t),LYe=r(O0e," \u2014 "),NS=n(O0e,"A",{href:!0});var Szr=s(NS);xYe=r(Szr,"WavLMConfig"),Szr.forEach(t),$Ye=r(O0e," (WavLM model)"),O0e.forEach(t),kYe=i(y),hg=n(y,"LI",{});var V0e=s(hg);Kre=n(V0e,"STRONG",{});var Rzr=s(Kre);SYe=r(Rzr,"xglm"),Rzr.forEach(t),RYe=r(V0e," \u2014 "),jS=n(V0e,"A",{href:!0});var Pzr=s(jS);PYe=r(Pzr,"XGLMConfig"),Pzr.forEach(t),BYe=r(V0e," (XGLM model)"),V0e.forEach(t),IYe=i(y),ug=n(y,"LI",{});var X0e=s(ug);Zre=n(X0e,"STRONG",{});var Bzr=s(Zre);qYe=r(Bzr,"xlm"),Bzr.forEach(t),NYe=r(X0e," \u2014 "),DS=n(X0e,"A",{href:!0});var Izr=s(DS);jYe=r(Izr,"XLMConfig"),Izr.forEach(t),DYe=r(X0e," (XLM model)"),X0e.forEach(t),GYe=i(y),pg=n(y,"LI",{});var z0e=s(pg);ete=n(z0e,"STRONG",{});var qzr=s(ete);OYe=r(qzr,"xlm-prophetnet"),qzr.forEach(t),VYe=r(z0e," \u2014 "),GS=n(z0e,"A",{href:!0});var Nzr=s(GS);XYe=r(Nzr,"XLMProphetNetConfig"),Nzr.forEach(t),zYe=r(z0e," (XLMProphetNet model)"),z0e.forEach(t),WYe=i(y),_g=n(y,"LI",{});var W0e=s(_g);ote=n(W0e,"STRONG",{});var jzr=s(ote);QYe=r(jzr,"xlm-roberta"),jzr.forEach(t),HYe=r(W0e," \u2014 "),OS=n(W0e,"A",{href:!0});var Dzr=s(OS);UYe=r(Dzr,"XLMRobertaConfig"),Dzr.forEach(t),JYe=r(W0e," (XLM-RoBERTa model)"),W0e.forEach(t),YYe=i(y),bg=n(y,"LI",{});var Q0e=s(bg);rte=n(Q0e,"STRONG",{});var Gzr=s(rte);KYe=r(Gzr,"xlm-roberta-xl"),Gzr.forEach(t),ZYe=r(Q0e," \u2014 "),VS=n(Q0e,"A",{href:!0});var Ozr=s(VS);eKe=r(Ozr,"XLMRobertaXLConfig"),Ozr.forEach(t),oKe=r(Q0e," (XLM-RoBERTa-XL model)"),Q0e.forEach(t),rKe=i(y),vg=n(y,"LI",{});var H0e=s(vg);tte=n(H0e,"STRONG",{});var Vzr=s(tte);tKe=r(Vzr,"xlnet"),Vzr.forEach(t),aKe=r(H0e," \u2014 "),XS=n(H0e,"A",{href:!0});var Xzr=s(XS);nKe=r(Xzr,"XLNetConfig"),Xzr.forEach(t),sKe=r(H0e," (XLNet model)"),H0e.forEach(t),lKe=i(y),Fg=n(y,"LI",{});var U0e=s(Fg);ate=n(U0e,"STRONG",{});var zzr=s(ate);iKe=r(zzr,"yolos"),zzr.forEach(t),dKe=r(U0e," \u2014 "),zS=n(U0e,"A",{href:!0});var Wzr=s(zS);cKe=r(Wzr,"YolosConfig"),Wzr.forEach(t),mKe=r(U0e," (YOLOS model)"),U0e.forEach(t),fKe=i(y),Tg=n(y,"LI",{});var J0e=s(Tg);nte=n(J0e,"STRONG",{});var Qzr=s(nte);gKe=r(Qzr,"yoso"),Qzr.forEach(t),hKe=r(J0e," \u2014 "),WS=n(J0e,"A",{href:!0});var Hzr=s(WS);uKe=r(Hzr,"YosoConfig"),Hzr.forEach(t),pKe=r(J0e," (YOSO model)"),J0e.forEach(t),y.forEach(t),_Ke=i(ot),T(Mg.$$.fragment,ot),ot.forEach(t),bKe=i(et),Eg=n(et,"DIV",{class:!0});var Ije=s(Eg);T(xy.$$.fragment,Ije),vKe=i(Ije),ste=n(Ije,"P",{});var Uzr=s(ste);FKe=r(Uzr,"Register a new configuration for this class."),Uzr.forEach(t),Ije.forEach(t),et.forEach(t),jqe=i(m),Ti=n(m,"H2",{class:!0});var qje=s(Ti);Cg=n(qje,"A",{id:!0,class:!0,href:!0});var Jzr=s(Cg);lte=n(Jzr,"SPAN",{});var Yzr=s(lte);T($y.$$.fragment,Yzr),Yzr.forEach(t),Jzr.forEach(t),TKe=i(qje),ite=n(qje,"SPAN",{});var Kzr=s(ite);MKe=r(Kzr,"AutoTokenizer"),Kzr.forEach(t),qje.forEach(t),Dqe=i(m),wo=n(m,"DIV",{class:!0});var qs=s(wo);T(ky.$$.fragment,qs),EKe=i(qs),Sy=n(qs,"P",{});var Nje=s(Sy);CKe=r(Nje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),QS=n(Nje,"A",{href:!0});var Zzr=s(QS);wKe=r(Zzr,"AutoTokenizer.from_pretrained()"),Zzr.forEach(t),AKe=r(Nje," class method."),Nje.forEach(t),yKe=i(qs),Ry=n(qs,"P",{});var jje=s(Ry);LKe=r(jje,"This class cannot be instantiated directly using "),dte=n(jje,"CODE",{});var eWr=s(dte);xKe=r(eWr,"__init__()"),eWr.forEach(t),$Ke=r(jje," (throws an error)."),jje.forEach(t),kKe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(Py.$$.fragment,Ns),SKe=i(Ns),cte=n(Ns,"P",{});var oWr=s(cte);RKe=r(oWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oWr.forEach(t),PKe=i(Ns),Aa=n(Ns,"P",{});var CA=s(Aa);BKe=r(CA,"The tokenizer class to instantiate is selected based on the "),mte=n(CA,"CODE",{});var rWr=s(mte);IKe=r(rWr,"model_type"),rWr.forEach(t),qKe=r(CA,` property of the config object (either
passed as an argument or loaded from `),fte=n(CA,"CODE",{});var tWr=s(fte);NKe=r(tWr,"pretrained_model_name_or_path"),tWr.forEach(t),jKe=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gte=n(CA,"CODE",{});var aWr=s(gte);DKe=r(aWr,"pretrained_model_name_or_path"),aWr.forEach(t),GKe=r(CA,":"),CA.forEach(t),OKe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Bx=s(Sn);hte=n(Bx,"STRONG",{});var nWr=s(hte);VKe=r(nWr,"albert"),nWr.forEach(t),XKe=r(Bx," \u2014 "),HS=n(Bx,"A",{href:!0});var sWr=s(HS);zKe=r(sWr,"AlbertTokenizer"),sWr.forEach(t),WKe=r(Bx," or "),US=n(Bx,"A",{href:!0});var lWr=s(US);QKe=r(lWr,"AlbertTokenizerFast"),lWr.forEach(t),HKe=r(Bx," (ALBERT model)"),Bx.forEach(t),UKe=i(S),Rn=n(S,"LI",{});var Ix=s(Rn);ute=n(Ix,"STRONG",{});var iWr=s(ute);JKe=r(iWr,"bart"),iWr.forEach(t),YKe=r(Ix," \u2014 "),JS=n(Ix,"A",{href:!0});var dWr=s(JS);KKe=r(dWr,"BartTokenizer"),dWr.forEach(t),ZKe=r(Ix," or "),YS=n(Ix,"A",{href:!0});var cWr=s(YS);eZe=r(cWr,"BartTokenizerFast"),cWr.forEach(t),oZe=r(Ix," (BART model)"),Ix.forEach(t),rZe=i(S),Pn=n(S,"LI",{});var qx=s(Pn);pte=n(qx,"STRONG",{});var mWr=s(pte);tZe=r(mWr,"barthez"),mWr.forEach(t),aZe=r(qx," \u2014 "),KS=n(qx,"A",{href:!0});var fWr=s(KS);nZe=r(fWr,"BarthezTokenizer"),fWr.forEach(t),sZe=r(qx," or "),ZS=n(qx,"A",{href:!0});var gWr=s(ZS);lZe=r(gWr,"BarthezTokenizerFast"),gWr.forEach(t),iZe=r(qx," (BARThez model)"),qx.forEach(t),dZe=i(S),wg=n(S,"LI",{});var Y0e=s(wg);_te=n(Y0e,"STRONG",{});var hWr=s(_te);cZe=r(hWr,"bartpho"),hWr.forEach(t),mZe=r(Y0e," \u2014 "),eR=n(Y0e,"A",{href:!0});var uWr=s(eR);fZe=r(uWr,"BartphoTokenizer"),uWr.forEach(t),gZe=r(Y0e," (BARTpho model)"),Y0e.forEach(t),hZe=i(S),Bn=n(S,"LI",{});var Nx=s(Bn);bte=n(Nx,"STRONG",{});var pWr=s(bte);uZe=r(pWr,"bert"),pWr.forEach(t),pZe=r(Nx," \u2014 "),oR=n(Nx,"A",{href:!0});var _Wr=s(oR);_Ze=r(_Wr,"BertTokenizer"),_Wr.forEach(t),bZe=r(Nx," or "),rR=n(Nx,"A",{href:!0});var bWr=s(rR);vZe=r(bWr,"BertTokenizerFast"),bWr.forEach(t),FZe=r(Nx," (BERT model)"),Nx.forEach(t),TZe=i(S),Ag=n(S,"LI",{});var K0e=s(Ag);vte=n(K0e,"STRONG",{});var vWr=s(vte);MZe=r(vWr,"bert-generation"),vWr.forEach(t),EZe=r(K0e," \u2014 "),tR=n(K0e,"A",{href:!0});var FWr=s(tR);CZe=r(FWr,"BertGenerationTokenizer"),FWr.forEach(t),wZe=r(K0e," (Bert Generation model)"),K0e.forEach(t),AZe=i(S),yg=n(S,"LI",{});var Z0e=s(yg);Fte=n(Z0e,"STRONG",{});var TWr=s(Fte);yZe=r(TWr,"bert-japanese"),TWr.forEach(t),LZe=r(Z0e," \u2014 "),aR=n(Z0e,"A",{href:!0});var MWr=s(aR);xZe=r(MWr,"BertJapaneseTokenizer"),MWr.forEach(t),$Ze=r(Z0e," (BertJapanese model)"),Z0e.forEach(t),kZe=i(S),Lg=n(S,"LI",{});var eAe=s(Lg);Tte=n(eAe,"STRONG",{});var EWr=s(Tte);SZe=r(EWr,"bertweet"),EWr.forEach(t),RZe=r(eAe," \u2014 "),nR=n(eAe,"A",{href:!0});var CWr=s(nR);PZe=r(CWr,"BertweetTokenizer"),CWr.forEach(t),BZe=r(eAe," (Bertweet model)"),eAe.forEach(t),IZe=i(S),In=n(S,"LI",{});var jx=s(In);Mte=n(jx,"STRONG",{});var wWr=s(Mte);qZe=r(wWr,"big_bird"),wWr.forEach(t),NZe=r(jx," \u2014 "),sR=n(jx,"A",{href:!0});var AWr=s(sR);jZe=r(AWr,"BigBirdTokenizer"),AWr.forEach(t),DZe=r(jx," or "),lR=n(jx,"A",{href:!0});var yWr=s(lR);GZe=r(yWr,"BigBirdTokenizerFast"),yWr.forEach(t),OZe=r(jx," (BigBird model)"),jx.forEach(t),VZe=i(S),qn=n(S,"LI",{});var Dx=s(qn);Ete=n(Dx,"STRONG",{});var LWr=s(Ete);XZe=r(LWr,"bigbird_pegasus"),LWr.forEach(t),zZe=r(Dx," \u2014 "),iR=n(Dx,"A",{href:!0});var xWr=s(iR);WZe=r(xWr,"PegasusTokenizer"),xWr.forEach(t),QZe=r(Dx," or "),dR=n(Dx,"A",{href:!0});var $Wr=s(dR);HZe=r($Wr,"PegasusTokenizerFast"),$Wr.forEach(t),UZe=r(Dx," (BigBirdPegasus model)"),Dx.forEach(t),JZe=i(S),Nn=n(S,"LI",{});var Gx=s(Nn);Cte=n(Gx,"STRONG",{});var kWr=s(Cte);YZe=r(kWr,"blenderbot"),kWr.forEach(t),KZe=r(Gx," \u2014 "),cR=n(Gx,"A",{href:!0});var SWr=s(cR);ZZe=r(SWr,"BlenderbotTokenizer"),SWr.forEach(t),eeo=r(Gx," or "),mR=n(Gx,"A",{href:!0});var RWr=s(mR);oeo=r(RWr,"BlenderbotTokenizerFast"),RWr.forEach(t),reo=r(Gx," (Blenderbot model)"),Gx.forEach(t),teo=i(S),xg=n(S,"LI",{});var oAe=s(xg);wte=n(oAe,"STRONG",{});var PWr=s(wte);aeo=r(PWr,"blenderbot-small"),PWr.forEach(t),neo=r(oAe," \u2014 "),fR=n(oAe,"A",{href:!0});var BWr=s(fR);seo=r(BWr,"BlenderbotSmallTokenizer"),BWr.forEach(t),leo=r(oAe," (BlenderbotSmall model)"),oAe.forEach(t),ieo=i(S),$g=n(S,"LI",{});var rAe=s($g);Ate=n(rAe,"STRONG",{});var IWr=s(Ate);deo=r(IWr,"byt5"),IWr.forEach(t),ceo=r(rAe," \u2014 "),gR=n(rAe,"A",{href:!0});var qWr=s(gR);meo=r(qWr,"ByT5Tokenizer"),qWr.forEach(t),feo=r(rAe," (ByT5 model)"),rAe.forEach(t),geo=i(S),jn=n(S,"LI",{});var Ox=s(jn);yte=n(Ox,"STRONG",{});var NWr=s(yte);heo=r(NWr,"camembert"),NWr.forEach(t),ueo=r(Ox," \u2014 "),hR=n(Ox,"A",{href:!0});var jWr=s(hR);peo=r(jWr,"CamembertTokenizer"),jWr.forEach(t),_eo=r(Ox," or "),uR=n(Ox,"A",{href:!0});var DWr=s(uR);beo=r(DWr,"CamembertTokenizerFast"),DWr.forEach(t),veo=r(Ox," (CamemBERT model)"),Ox.forEach(t),Feo=i(S),kg=n(S,"LI",{});var tAe=s(kg);Lte=n(tAe,"STRONG",{});var GWr=s(Lte);Teo=r(GWr,"canine"),GWr.forEach(t),Meo=r(tAe," \u2014 "),pR=n(tAe,"A",{href:!0});var OWr=s(pR);Eeo=r(OWr,"CanineTokenizer"),OWr.forEach(t),Ceo=r(tAe," (Canine model)"),tAe.forEach(t),weo=i(S),Dn=n(S,"LI",{});var Vx=s(Dn);xte=n(Vx,"STRONG",{});var VWr=s(xte);Aeo=r(VWr,"clip"),VWr.forEach(t),yeo=r(Vx," \u2014 "),_R=n(Vx,"A",{href:!0});var XWr=s(_R);Leo=r(XWr,"CLIPTokenizer"),XWr.forEach(t),xeo=r(Vx," or "),bR=n(Vx,"A",{href:!0});var zWr=s(bR);$eo=r(zWr,"CLIPTokenizerFast"),zWr.forEach(t),keo=r(Vx," (CLIP model)"),Vx.forEach(t),Seo=i(S),Gn=n(S,"LI",{});var Xx=s(Gn);$te=n(Xx,"STRONG",{});var WWr=s($te);Reo=r(WWr,"convbert"),WWr.forEach(t),Peo=r(Xx," \u2014 "),vR=n(Xx,"A",{href:!0});var QWr=s(vR);Beo=r(QWr,"ConvBertTokenizer"),QWr.forEach(t),Ieo=r(Xx," or "),FR=n(Xx,"A",{href:!0});var HWr=s(FR);qeo=r(HWr,"ConvBertTokenizerFast"),HWr.forEach(t),Neo=r(Xx," (ConvBERT model)"),Xx.forEach(t),jeo=i(S),On=n(S,"LI",{});var zx=s(On);kte=n(zx,"STRONG",{});var UWr=s(kte);Deo=r(UWr,"cpm"),UWr.forEach(t),Geo=r(zx," \u2014 "),TR=n(zx,"A",{href:!0});var JWr=s(TR);Oeo=r(JWr,"CpmTokenizer"),JWr.forEach(t),Veo=r(zx," or "),MR=n(zx,"A",{href:!0});var YWr=s(MR);Xeo=r(YWr,"CpmTokenizerFast"),YWr.forEach(t),zeo=r(zx," (CPM model)"),zx.forEach(t),Weo=i(S),Sg=n(S,"LI",{});var aAe=s(Sg);Ste=n(aAe,"STRONG",{});var KWr=s(Ste);Qeo=r(KWr,"ctrl"),KWr.forEach(t),Heo=r(aAe," \u2014 "),ER=n(aAe,"A",{href:!0});var ZWr=s(ER);Ueo=r(ZWr,"CTRLTokenizer"),ZWr.forEach(t),Jeo=r(aAe," (CTRL model)"),aAe.forEach(t),Yeo=i(S),Vn=n(S,"LI",{});var Wx=s(Vn);Rte=n(Wx,"STRONG",{});var eQr=s(Rte);Keo=r(eQr,"data2vec-text"),eQr.forEach(t),Zeo=r(Wx," \u2014 "),CR=n(Wx,"A",{href:!0});var oQr=s(CR);eoo=r(oQr,"RobertaTokenizer"),oQr.forEach(t),ooo=r(Wx," or "),wR=n(Wx,"A",{href:!0});var rQr=s(wR);roo=r(rQr,"RobertaTokenizerFast"),rQr.forEach(t),too=r(Wx," (Data2VecText model)"),Wx.forEach(t),aoo=i(S),Xn=n(S,"LI",{});var Qx=s(Xn);Pte=n(Qx,"STRONG",{});var tQr=s(Pte);noo=r(tQr,"deberta"),tQr.forEach(t),soo=r(Qx," \u2014 "),AR=n(Qx,"A",{href:!0});var aQr=s(AR);loo=r(aQr,"DebertaTokenizer"),aQr.forEach(t),ioo=r(Qx," or "),yR=n(Qx,"A",{href:!0});var nQr=s(yR);doo=r(nQr,"DebertaTokenizerFast"),nQr.forEach(t),coo=r(Qx," (DeBERTa model)"),Qx.forEach(t),moo=i(S),zn=n(S,"LI",{});var Hx=s(zn);Bte=n(Hx,"STRONG",{});var sQr=s(Bte);foo=r(sQr,"deberta-v2"),sQr.forEach(t),goo=r(Hx," \u2014 "),LR=n(Hx,"A",{href:!0});var lQr=s(LR);hoo=r(lQr,"DebertaV2Tokenizer"),lQr.forEach(t),uoo=r(Hx," or "),xR=n(Hx,"A",{href:!0});var iQr=s(xR);poo=r(iQr,"DebertaV2TokenizerFast"),iQr.forEach(t),_oo=r(Hx," (DeBERTa-v2 model)"),Hx.forEach(t),boo=i(S),Wn=n(S,"LI",{});var Ux=s(Wn);Ite=n(Ux,"STRONG",{});var dQr=s(Ite);voo=r(dQr,"distilbert"),dQr.forEach(t),Foo=r(Ux," \u2014 "),$R=n(Ux,"A",{href:!0});var cQr=s($R);Too=r(cQr,"DistilBertTokenizer"),cQr.forEach(t),Moo=r(Ux," or "),kR=n(Ux,"A",{href:!0});var mQr=s(kR);Eoo=r(mQr,"DistilBertTokenizerFast"),mQr.forEach(t),Coo=r(Ux," (DistilBERT model)"),Ux.forEach(t),woo=i(S),Qn=n(S,"LI",{});var Jx=s(Qn);qte=n(Jx,"STRONG",{});var fQr=s(qte);Aoo=r(fQr,"dpr"),fQr.forEach(t),yoo=r(Jx," \u2014 "),SR=n(Jx,"A",{href:!0});var gQr=s(SR);Loo=r(gQr,"DPRQuestionEncoderTokenizer"),gQr.forEach(t),xoo=r(Jx," or "),RR=n(Jx,"A",{href:!0});var hQr=s(RR);$oo=r(hQr,"DPRQuestionEncoderTokenizerFast"),hQr.forEach(t),koo=r(Jx," (DPR model)"),Jx.forEach(t),Soo=i(S),Hn=n(S,"LI",{});var Yx=s(Hn);Nte=n(Yx,"STRONG",{});var uQr=s(Nte);Roo=r(uQr,"electra"),uQr.forEach(t),Poo=r(Yx," \u2014 "),PR=n(Yx,"A",{href:!0});var pQr=s(PR);Boo=r(pQr,"ElectraTokenizer"),pQr.forEach(t),Ioo=r(Yx," or "),BR=n(Yx,"A",{href:!0});var _Qr=s(BR);qoo=r(_Qr,"ElectraTokenizerFast"),_Qr.forEach(t),Noo=r(Yx," (ELECTRA model)"),Yx.forEach(t),joo=i(S),Rg=n(S,"LI",{});var nAe=s(Rg);jte=n(nAe,"STRONG",{});var bQr=s(jte);Doo=r(bQr,"flaubert"),bQr.forEach(t),Goo=r(nAe," \u2014 "),IR=n(nAe,"A",{href:!0});var vQr=s(IR);Ooo=r(vQr,"FlaubertTokenizer"),vQr.forEach(t),Voo=r(nAe," (FlauBERT model)"),nAe.forEach(t),Xoo=i(S),Un=n(S,"LI",{});var Kx=s(Un);Dte=n(Kx,"STRONG",{});var FQr=s(Dte);zoo=r(FQr,"fnet"),FQr.forEach(t),Woo=r(Kx," \u2014 "),qR=n(Kx,"A",{href:!0});var TQr=s(qR);Qoo=r(TQr,"FNetTokenizer"),TQr.forEach(t),Hoo=r(Kx," or "),NR=n(Kx,"A",{href:!0});var MQr=s(NR);Uoo=r(MQr,"FNetTokenizerFast"),MQr.forEach(t),Joo=r(Kx," (FNet model)"),Kx.forEach(t),Yoo=i(S),Pg=n(S,"LI",{});var sAe=s(Pg);Gte=n(sAe,"STRONG",{});var EQr=s(Gte);Koo=r(EQr,"fsmt"),EQr.forEach(t),Zoo=r(sAe," \u2014 "),jR=n(sAe,"A",{href:!0});var CQr=s(jR);ero=r(CQr,"FSMTTokenizer"),CQr.forEach(t),oro=r(sAe," (FairSeq Machine-Translation model)"),sAe.forEach(t),rro=i(S),Jn=n(S,"LI",{});var Zx=s(Jn);Ote=n(Zx,"STRONG",{});var wQr=s(Ote);tro=r(wQr,"funnel"),wQr.forEach(t),aro=r(Zx," \u2014 "),DR=n(Zx,"A",{href:!0});var AQr=s(DR);nro=r(AQr,"FunnelTokenizer"),AQr.forEach(t),sro=r(Zx," or "),GR=n(Zx,"A",{href:!0});var yQr=s(GR);lro=r(yQr,"FunnelTokenizerFast"),yQr.forEach(t),iro=r(Zx," (Funnel Transformer model)"),Zx.forEach(t),dro=i(S),Yn=n(S,"LI",{});var e$=s(Yn);Vte=n(e$,"STRONG",{});var LQr=s(Vte);cro=r(LQr,"gpt2"),LQr.forEach(t),mro=r(e$," \u2014 "),OR=n(e$,"A",{href:!0});var xQr=s(OR);fro=r(xQr,"GPT2Tokenizer"),xQr.forEach(t),gro=r(e$," or "),VR=n(e$,"A",{href:!0});var $Qr=s(VR);hro=r($Qr,"GPT2TokenizerFast"),$Qr.forEach(t),uro=r(e$," (OpenAI GPT-2 model)"),e$.forEach(t),pro=i(S),Kn=n(S,"LI",{});var o$=s(Kn);Xte=n(o$,"STRONG",{});var kQr=s(Xte);_ro=r(kQr,"gpt_neo"),kQr.forEach(t),bro=r(o$," \u2014 "),XR=n(o$,"A",{href:!0});var SQr=s(XR);vro=r(SQr,"GPT2Tokenizer"),SQr.forEach(t),Fro=r(o$," or "),zR=n(o$,"A",{href:!0});var RQr=s(zR);Tro=r(RQr,"GPT2TokenizerFast"),RQr.forEach(t),Mro=r(o$," (GPT Neo model)"),o$.forEach(t),Ero=i(S),Zn=n(S,"LI",{});var r$=s(Zn);zte=n(r$,"STRONG",{});var PQr=s(zte);Cro=r(PQr,"gptj"),PQr.forEach(t),wro=r(r$," \u2014 "),WR=n(r$,"A",{href:!0});var BQr=s(WR);Aro=r(BQr,"GPT2Tokenizer"),BQr.forEach(t),yro=r(r$," or "),QR=n(r$,"A",{href:!0});var IQr=s(QR);Lro=r(IQr,"GPT2TokenizerFast"),IQr.forEach(t),xro=r(r$," (GPT-J model)"),r$.forEach(t),$ro=i(S),es=n(S,"LI",{});var t$=s(es);Wte=n(t$,"STRONG",{});var qQr=s(Wte);kro=r(qQr,"herbert"),qQr.forEach(t),Sro=r(t$," \u2014 "),HR=n(t$,"A",{href:!0});var NQr=s(HR);Rro=r(NQr,"HerbertTokenizer"),NQr.forEach(t),Pro=r(t$," or "),UR=n(t$,"A",{href:!0});var jQr=s(UR);Bro=r(jQr,"HerbertTokenizerFast"),jQr.forEach(t),Iro=r(t$," (HerBERT model)"),t$.forEach(t),qro=i(S),Bg=n(S,"LI",{});var lAe=s(Bg);Qte=n(lAe,"STRONG",{});var DQr=s(Qte);Nro=r(DQr,"hubert"),DQr.forEach(t),jro=r(lAe," \u2014 "),JR=n(lAe,"A",{href:!0});var GQr=s(JR);Dro=r(GQr,"Wav2Vec2CTCTokenizer"),GQr.forEach(t),Gro=r(lAe," (Hubert model)"),lAe.forEach(t),Oro=i(S),os=n(S,"LI",{});var a$=s(os);Hte=n(a$,"STRONG",{});var OQr=s(Hte);Vro=r(OQr,"ibert"),OQr.forEach(t),Xro=r(a$," \u2014 "),YR=n(a$,"A",{href:!0});var VQr=s(YR);zro=r(VQr,"RobertaTokenizer"),VQr.forEach(t),Wro=r(a$," or "),KR=n(a$,"A",{href:!0});var XQr=s(KR);Qro=r(XQr,"RobertaTokenizerFast"),XQr.forEach(t),Hro=r(a$," (I-BERT model)"),a$.forEach(t),Uro=i(S),rs=n(S,"LI",{});var n$=s(rs);Ute=n(n$,"STRONG",{});var zQr=s(Ute);Jro=r(zQr,"layoutlm"),zQr.forEach(t),Yro=r(n$," \u2014 "),ZR=n(n$,"A",{href:!0});var WQr=s(ZR);Kro=r(WQr,"LayoutLMTokenizer"),WQr.forEach(t),Zro=r(n$," or "),eP=n(n$,"A",{href:!0});var QQr=s(eP);eto=r(QQr,"LayoutLMTokenizerFast"),QQr.forEach(t),oto=r(n$," (LayoutLM model)"),n$.forEach(t),rto=i(S),ts=n(S,"LI",{});var s$=s(ts);Jte=n(s$,"STRONG",{});var HQr=s(Jte);tto=r(HQr,"layoutlmv2"),HQr.forEach(t),ato=r(s$," \u2014 "),oP=n(s$,"A",{href:!0});var UQr=s(oP);nto=r(UQr,"LayoutLMv2Tokenizer"),UQr.forEach(t),sto=r(s$," or "),rP=n(s$,"A",{href:!0});var JQr=s(rP);lto=r(JQr,"LayoutLMv2TokenizerFast"),JQr.forEach(t),ito=r(s$," (LayoutLMv2 model)"),s$.forEach(t),dto=i(S),as=n(S,"LI",{});var l$=s(as);Yte=n(l$,"STRONG",{});var YQr=s(Yte);cto=r(YQr,"layoutlmv3"),YQr.forEach(t),mto=r(l$," \u2014 "),tP=n(l$,"A",{href:!0});var KQr=s(tP);fto=r(KQr,"LayoutLMv3Tokenizer"),KQr.forEach(t),gto=r(l$," or "),aP=n(l$,"A",{href:!0});var ZQr=s(aP);hto=r(ZQr,"LayoutLMv3TokenizerFast"),ZQr.forEach(t),uto=r(l$," (LayoutLMv3 model)"),l$.forEach(t),pto=i(S),ns=n(S,"LI",{});var i$=s(ns);Kte=n(i$,"STRONG",{});var eHr=s(Kte);_to=r(eHr,"layoutxlm"),eHr.forEach(t),bto=r(i$," \u2014 "),nP=n(i$,"A",{href:!0});var oHr=s(nP);vto=r(oHr,"LayoutXLMTokenizer"),oHr.forEach(t),Fto=r(i$," or "),sP=n(i$,"A",{href:!0});var rHr=s(sP);Tto=r(rHr,"LayoutXLMTokenizerFast"),rHr.forEach(t),Mto=r(i$," (LayoutXLM model)"),i$.forEach(t),Eto=i(S),ss=n(S,"LI",{});var d$=s(ss);Zte=n(d$,"STRONG",{});var tHr=s(Zte);Cto=r(tHr,"led"),tHr.forEach(t),wto=r(d$," \u2014 "),lP=n(d$,"A",{href:!0});var aHr=s(lP);Ato=r(aHr,"LEDTokenizer"),aHr.forEach(t),yto=r(d$," or "),iP=n(d$,"A",{href:!0});var nHr=s(iP);Lto=r(nHr,"LEDTokenizerFast"),nHr.forEach(t),xto=r(d$," (LED model)"),d$.forEach(t),$to=i(S),ls=n(S,"LI",{});var c$=s(ls);eae=n(c$,"STRONG",{});var sHr=s(eae);kto=r(sHr,"longformer"),sHr.forEach(t),Sto=r(c$," \u2014 "),dP=n(c$,"A",{href:!0});var lHr=s(dP);Rto=r(lHr,"LongformerTokenizer"),lHr.forEach(t),Pto=r(c$," or "),cP=n(c$,"A",{href:!0});var iHr=s(cP);Bto=r(iHr,"LongformerTokenizerFast"),iHr.forEach(t),Ito=r(c$," (Longformer model)"),c$.forEach(t),qto=i(S),Ig=n(S,"LI",{});var iAe=s(Ig);oae=n(iAe,"STRONG",{});var dHr=s(oae);Nto=r(dHr,"luke"),dHr.forEach(t),jto=r(iAe," \u2014 "),mP=n(iAe,"A",{href:!0});var cHr=s(mP);Dto=r(cHr,"LukeTokenizer"),cHr.forEach(t),Gto=r(iAe," (LUKE model)"),iAe.forEach(t),Oto=i(S),is=n(S,"LI",{});var m$=s(is);rae=n(m$,"STRONG",{});var mHr=s(rae);Vto=r(mHr,"lxmert"),mHr.forEach(t),Xto=r(m$," \u2014 "),fP=n(m$,"A",{href:!0});var fHr=s(fP);zto=r(fHr,"LxmertTokenizer"),fHr.forEach(t),Wto=r(m$," or "),gP=n(m$,"A",{href:!0});var gHr=s(gP);Qto=r(gHr,"LxmertTokenizerFast"),gHr.forEach(t),Hto=r(m$," (LXMERT model)"),m$.forEach(t),Uto=i(S),qg=n(S,"LI",{});var dAe=s(qg);tae=n(dAe,"STRONG",{});var hHr=s(tae);Jto=r(hHr,"m2m_100"),hHr.forEach(t),Yto=r(dAe," \u2014 "),hP=n(dAe,"A",{href:!0});var uHr=s(hP);Kto=r(uHr,"M2M100Tokenizer"),uHr.forEach(t),Zto=r(dAe," (M2M100 model)"),dAe.forEach(t),eao=i(S),Ng=n(S,"LI",{});var cAe=s(Ng);aae=n(cAe,"STRONG",{});var pHr=s(aae);oao=r(pHr,"marian"),pHr.forEach(t),rao=r(cAe," \u2014 "),uP=n(cAe,"A",{href:!0});var _Hr=s(uP);tao=r(_Hr,"MarianTokenizer"),_Hr.forEach(t),aao=r(cAe," (Marian model)"),cAe.forEach(t),nao=i(S),ds=n(S,"LI",{});var f$=s(ds);nae=n(f$,"STRONG",{});var bHr=s(nae);sao=r(bHr,"mbart"),bHr.forEach(t),lao=r(f$," \u2014 "),pP=n(f$,"A",{href:!0});var vHr=s(pP);iao=r(vHr,"MBartTokenizer"),vHr.forEach(t),dao=r(f$," or "),_P=n(f$,"A",{href:!0});var FHr=s(_P);cao=r(FHr,"MBartTokenizerFast"),FHr.forEach(t),mao=r(f$," (mBART model)"),f$.forEach(t),fao=i(S),cs=n(S,"LI",{});var g$=s(cs);sae=n(g$,"STRONG",{});var THr=s(sae);gao=r(THr,"mbart50"),THr.forEach(t),hao=r(g$," \u2014 "),bP=n(g$,"A",{href:!0});var MHr=s(bP);uao=r(MHr,"MBart50Tokenizer"),MHr.forEach(t),pao=r(g$," or "),vP=n(g$,"A",{href:!0});var EHr=s(vP);_ao=r(EHr,"MBart50TokenizerFast"),EHr.forEach(t),bao=r(g$," (mBART-50 model)"),g$.forEach(t),vao=i(S),ms=n(S,"LI",{});var h$=s(ms);lae=n(h$,"STRONG",{});var CHr=s(lae);Fao=r(CHr,"megatron-bert"),CHr.forEach(t),Tao=r(h$," \u2014 "),FP=n(h$,"A",{href:!0});var wHr=s(FP);Mao=r(wHr,"BertTokenizer"),wHr.forEach(t),Eao=r(h$," or "),TP=n(h$,"A",{href:!0});var AHr=s(TP);Cao=r(AHr,"BertTokenizerFast"),AHr.forEach(t),wao=r(h$," (MegatronBert model)"),h$.forEach(t),Aao=i(S),jg=n(S,"LI",{});var mAe=s(jg);iae=n(mAe,"STRONG",{});var yHr=s(iae);yao=r(yHr,"mluke"),yHr.forEach(t),Lao=r(mAe," \u2014 "),MP=n(mAe,"A",{href:!0});var LHr=s(MP);xao=r(LHr,"MLukeTokenizer"),LHr.forEach(t),$ao=r(mAe," (mLUKE model)"),mAe.forEach(t),kao=i(S),fs=n(S,"LI",{});var u$=s(fs);dae=n(u$,"STRONG",{});var xHr=s(dae);Sao=r(xHr,"mobilebert"),xHr.forEach(t),Rao=r(u$," \u2014 "),EP=n(u$,"A",{href:!0});var $Hr=s(EP);Pao=r($Hr,"MobileBertTokenizer"),$Hr.forEach(t),Bao=r(u$," or "),CP=n(u$,"A",{href:!0});var kHr=s(CP);Iao=r(kHr,"MobileBertTokenizerFast"),kHr.forEach(t),qao=r(u$," (MobileBERT model)"),u$.forEach(t),Nao=i(S),gs=n(S,"LI",{});var p$=s(gs);cae=n(p$,"STRONG",{});var SHr=s(cae);jao=r(SHr,"mpnet"),SHr.forEach(t),Dao=r(p$," \u2014 "),wP=n(p$,"A",{href:!0});var RHr=s(wP);Gao=r(RHr,"MPNetTokenizer"),RHr.forEach(t),Oao=r(p$," or "),AP=n(p$,"A",{href:!0});var PHr=s(AP);Vao=r(PHr,"MPNetTokenizerFast"),PHr.forEach(t),Xao=r(p$," (MPNet model)"),p$.forEach(t),zao=i(S),hs=n(S,"LI",{});var _$=s(hs);mae=n(_$,"STRONG",{});var BHr=s(mae);Wao=r(BHr,"mt5"),BHr.forEach(t),Qao=r(_$," \u2014 "),yP=n(_$,"A",{href:!0});var IHr=s(yP);Hao=r(IHr,"MT5Tokenizer"),IHr.forEach(t),Uao=r(_$," or "),LP=n(_$,"A",{href:!0});var qHr=s(LP);Jao=r(qHr,"MT5TokenizerFast"),qHr.forEach(t),Yao=r(_$," (mT5 model)"),_$.forEach(t),Kao=i(S),us=n(S,"LI",{});var b$=s(us);fae=n(b$,"STRONG",{});var NHr=s(fae);Zao=r(NHr,"nystromformer"),NHr.forEach(t),eno=r(b$," \u2014 "),xP=n(b$,"A",{href:!0});var jHr=s(xP);ono=r(jHr,"AlbertTokenizer"),jHr.forEach(t),rno=r(b$," or "),$P=n(b$,"A",{href:!0});var DHr=s($P);tno=r(DHr,"AlbertTokenizerFast"),DHr.forEach(t),ano=r(b$," (Nystromformer model)"),b$.forEach(t),nno=i(S),ps=n(S,"LI",{});var v$=s(ps);gae=n(v$,"STRONG",{});var GHr=s(gae);sno=r(GHr,"openai-gpt"),GHr.forEach(t),lno=r(v$," \u2014 "),kP=n(v$,"A",{href:!0});var OHr=s(kP);ino=r(OHr,"OpenAIGPTTokenizer"),OHr.forEach(t),dno=r(v$," or "),SP=n(v$,"A",{href:!0});var VHr=s(SP);cno=r(VHr,"OpenAIGPTTokenizerFast"),VHr.forEach(t),mno=r(v$," (OpenAI GPT model)"),v$.forEach(t),fno=i(S),Dg=n(S,"LI",{});var fAe=s(Dg);hae=n(fAe,"STRONG",{});var XHr=s(hae);gno=r(XHr,"opt"),XHr.forEach(t),hno=r(fAe," \u2014 "),RP=n(fAe,"A",{href:!0});var zHr=s(RP);uno=r(zHr,"GPT2Tokenizer"),zHr.forEach(t),pno=r(fAe," (OPT model)"),fAe.forEach(t),_no=i(S),_s=n(S,"LI",{});var F$=s(_s);uae=n(F$,"STRONG",{});var WHr=s(uae);bno=r(WHr,"pegasus"),WHr.forEach(t),vno=r(F$," \u2014 "),PP=n(F$,"A",{href:!0});var QHr=s(PP);Fno=r(QHr,"PegasusTokenizer"),QHr.forEach(t),Tno=r(F$," or "),BP=n(F$,"A",{href:!0});var HHr=s(BP);Mno=r(HHr,"PegasusTokenizerFast"),HHr.forEach(t),Eno=r(F$," (Pegasus model)"),F$.forEach(t),Cno=i(S),Gg=n(S,"LI",{});var gAe=s(Gg);pae=n(gAe,"STRONG",{});var UHr=s(pae);wno=r(UHr,"perceiver"),UHr.forEach(t),Ano=r(gAe," \u2014 "),IP=n(gAe,"A",{href:!0});var JHr=s(IP);yno=r(JHr,"PerceiverTokenizer"),JHr.forEach(t),Lno=r(gAe," (Perceiver model)"),gAe.forEach(t),xno=i(S),Og=n(S,"LI",{});var hAe=s(Og);_ae=n(hAe,"STRONG",{});var YHr=s(_ae);$no=r(YHr,"phobert"),YHr.forEach(t),kno=r(hAe," \u2014 "),qP=n(hAe,"A",{href:!0});var KHr=s(qP);Sno=r(KHr,"PhobertTokenizer"),KHr.forEach(t),Rno=r(hAe," (PhoBERT model)"),hAe.forEach(t),Pno=i(S),Vg=n(S,"LI",{});var uAe=s(Vg);bae=n(uAe,"STRONG",{});var ZHr=s(bae);Bno=r(ZHr,"plbart"),ZHr.forEach(t),Ino=r(uAe," \u2014 "),NP=n(uAe,"A",{href:!0});var eUr=s(NP);qno=r(eUr,"PLBartTokenizer"),eUr.forEach(t),Nno=r(uAe," (PLBart model)"),uAe.forEach(t),jno=i(S),Xg=n(S,"LI",{});var pAe=s(Xg);vae=n(pAe,"STRONG",{});var oUr=s(vae);Dno=r(oUr,"prophetnet"),oUr.forEach(t),Gno=r(pAe," \u2014 "),jP=n(pAe,"A",{href:!0});var rUr=s(jP);Ono=r(rUr,"ProphetNetTokenizer"),rUr.forEach(t),Vno=r(pAe," (ProphetNet model)"),pAe.forEach(t),Xno=i(S),bs=n(S,"LI",{});var T$=s(bs);Fae=n(T$,"STRONG",{});var tUr=s(Fae);zno=r(tUr,"qdqbert"),tUr.forEach(t),Wno=r(T$," \u2014 "),DP=n(T$,"A",{href:!0});var aUr=s(DP);Qno=r(aUr,"BertTokenizer"),aUr.forEach(t),Hno=r(T$," or "),GP=n(T$,"A",{href:!0});var nUr=s(GP);Uno=r(nUr,"BertTokenizerFast"),nUr.forEach(t),Jno=r(T$," (QDQBert model)"),T$.forEach(t),Yno=i(S),zg=n(S,"LI",{});var _Ae=s(zg);Tae=n(_Ae,"STRONG",{});var sUr=s(Tae);Kno=r(sUr,"rag"),sUr.forEach(t),Zno=r(_Ae," \u2014 "),OP=n(_Ae,"A",{href:!0});var lUr=s(OP);eso=r(lUr,"RagTokenizer"),lUr.forEach(t),oso=r(_Ae," (RAG model)"),_Ae.forEach(t),rso=i(S),vs=n(S,"LI",{});var M$=s(vs);Mae=n(M$,"STRONG",{});var iUr=s(Mae);tso=r(iUr,"realm"),iUr.forEach(t),aso=r(M$," \u2014 "),VP=n(M$,"A",{href:!0});var dUr=s(VP);nso=r(dUr,"RealmTokenizer"),dUr.forEach(t),sso=r(M$," or "),XP=n(M$,"A",{href:!0});var cUr=s(XP);lso=r(cUr,"RealmTokenizerFast"),cUr.forEach(t),iso=r(M$," (Realm model)"),M$.forEach(t),dso=i(S),Fs=n(S,"LI",{});var E$=s(Fs);Eae=n(E$,"STRONG",{});var mUr=s(Eae);cso=r(mUr,"reformer"),mUr.forEach(t),mso=r(E$," \u2014 "),zP=n(E$,"A",{href:!0});var fUr=s(zP);fso=r(fUr,"ReformerTokenizer"),fUr.forEach(t),gso=r(E$," or "),WP=n(E$,"A",{href:!0});var gUr=s(WP);hso=r(gUr,"ReformerTokenizerFast"),gUr.forEach(t),uso=r(E$," (Reformer model)"),E$.forEach(t),pso=i(S),Ts=n(S,"LI",{});var C$=s(Ts);Cae=n(C$,"STRONG",{});var hUr=s(Cae);_so=r(hUr,"rembert"),hUr.forEach(t),bso=r(C$," \u2014 "),QP=n(C$,"A",{href:!0});var uUr=s(QP);vso=r(uUr,"RemBertTokenizer"),uUr.forEach(t),Fso=r(C$," or "),HP=n(C$,"A",{href:!0});var pUr=s(HP);Tso=r(pUr,"RemBertTokenizerFast"),pUr.forEach(t),Mso=r(C$," (RemBERT model)"),C$.forEach(t),Eso=i(S),Ms=n(S,"LI",{});var w$=s(Ms);wae=n(w$,"STRONG",{});var _Ur=s(wae);Cso=r(_Ur,"retribert"),_Ur.forEach(t),wso=r(w$," \u2014 "),UP=n(w$,"A",{href:!0});var bUr=s(UP);Aso=r(bUr,"RetriBertTokenizer"),bUr.forEach(t),yso=r(w$," or "),JP=n(w$,"A",{href:!0});var vUr=s(JP);Lso=r(vUr,"RetriBertTokenizerFast"),vUr.forEach(t),xso=r(w$," (RetriBERT model)"),w$.forEach(t),$so=i(S),Es=n(S,"LI",{});var A$=s(Es);Aae=n(A$,"STRONG",{});var FUr=s(Aae);kso=r(FUr,"roberta"),FUr.forEach(t),Sso=r(A$," \u2014 "),YP=n(A$,"A",{href:!0});var TUr=s(YP);Rso=r(TUr,"RobertaTokenizer"),TUr.forEach(t),Pso=r(A$," or "),KP=n(A$,"A",{href:!0});var MUr=s(KP);Bso=r(MUr,"RobertaTokenizerFast"),MUr.forEach(t),Iso=r(A$," (RoBERTa model)"),A$.forEach(t),qso=i(S),Cs=n(S,"LI",{});var y$=s(Cs);yae=n(y$,"STRONG",{});var EUr=s(yae);Nso=r(EUr,"roformer"),EUr.forEach(t),jso=r(y$," \u2014 "),ZP=n(y$,"A",{href:!0});var CUr=s(ZP);Dso=r(CUr,"RoFormerTokenizer"),CUr.forEach(t),Gso=r(y$," or "),eB=n(y$,"A",{href:!0});var wUr=s(eB);Oso=r(wUr,"RoFormerTokenizerFast"),wUr.forEach(t),Vso=r(y$," (RoFormer model)"),y$.forEach(t),Xso=i(S),Wg=n(S,"LI",{});var bAe=s(Wg);Lae=n(bAe,"STRONG",{});var AUr=s(Lae);zso=r(AUr,"speech_to_text"),AUr.forEach(t),Wso=r(bAe," \u2014 "),oB=n(bAe,"A",{href:!0});var yUr=s(oB);Qso=r(yUr,"Speech2TextTokenizer"),yUr.forEach(t),Hso=r(bAe," (Speech2Text model)"),bAe.forEach(t),Uso=i(S),Qg=n(S,"LI",{});var vAe=s(Qg);xae=n(vAe,"STRONG",{});var LUr=s(xae);Jso=r(LUr,"speech_to_text_2"),LUr.forEach(t),Yso=r(vAe," \u2014 "),rB=n(vAe,"A",{href:!0});var xUr=s(rB);Kso=r(xUr,"Speech2Text2Tokenizer"),xUr.forEach(t),Zso=r(vAe," (Speech2Text2 model)"),vAe.forEach(t),elo=i(S),ws=n(S,"LI",{});var L$=s(ws);$ae=n(L$,"STRONG",{});var $Ur=s($ae);olo=r($Ur,"splinter"),$Ur.forEach(t),rlo=r(L$," \u2014 "),tB=n(L$,"A",{href:!0});var kUr=s(tB);tlo=r(kUr,"SplinterTokenizer"),kUr.forEach(t),alo=r(L$," or "),aB=n(L$,"A",{href:!0});var SUr=s(aB);nlo=r(SUr,"SplinterTokenizerFast"),SUr.forEach(t),slo=r(L$," (Splinter model)"),L$.forEach(t),llo=i(S),As=n(S,"LI",{});var x$=s(As);kae=n(x$,"STRONG",{});var RUr=s(kae);ilo=r(RUr,"squeezebert"),RUr.forEach(t),dlo=r(x$," \u2014 "),nB=n(x$,"A",{href:!0});var PUr=s(nB);clo=r(PUr,"SqueezeBertTokenizer"),PUr.forEach(t),mlo=r(x$," or "),sB=n(x$,"A",{href:!0});var BUr=s(sB);flo=r(BUr,"SqueezeBertTokenizerFast"),BUr.forEach(t),glo=r(x$," (SqueezeBERT model)"),x$.forEach(t),hlo=i(S),ys=n(S,"LI",{});var $$=s(ys);Sae=n($$,"STRONG",{});var IUr=s(Sae);ulo=r(IUr,"t5"),IUr.forEach(t),plo=r($$," \u2014 "),lB=n($$,"A",{href:!0});var qUr=s(lB);_lo=r(qUr,"T5Tokenizer"),qUr.forEach(t),blo=r($$," or "),iB=n($$,"A",{href:!0});var NUr=s(iB);vlo=r(NUr,"T5TokenizerFast"),NUr.forEach(t),Flo=r($$," (T5 model)"),$$.forEach(t),Tlo=i(S),Hg=n(S,"LI",{});var FAe=s(Hg);Rae=n(FAe,"STRONG",{});var jUr=s(Rae);Mlo=r(jUr,"tapas"),jUr.forEach(t),Elo=r(FAe," \u2014 "),dB=n(FAe,"A",{href:!0});var DUr=s(dB);Clo=r(DUr,"TapasTokenizer"),DUr.forEach(t),wlo=r(FAe," (TAPAS model)"),FAe.forEach(t),Alo=i(S),Ug=n(S,"LI",{});var TAe=s(Ug);Pae=n(TAe,"STRONG",{});var GUr=s(Pae);ylo=r(GUr,"tapex"),GUr.forEach(t),Llo=r(TAe," \u2014 "),cB=n(TAe,"A",{href:!0});var OUr=s(cB);xlo=r(OUr,"TapexTokenizer"),OUr.forEach(t),$lo=r(TAe," (TAPEX model)"),TAe.forEach(t),klo=i(S),Jg=n(S,"LI",{});var MAe=s(Jg);Bae=n(MAe,"STRONG",{});var VUr=s(Bae);Slo=r(VUr,"transfo-xl"),VUr.forEach(t),Rlo=r(MAe," \u2014 "),mB=n(MAe,"A",{href:!0});var XUr=s(mB);Plo=r(XUr,"TransfoXLTokenizer"),XUr.forEach(t),Blo=r(MAe," (Transformer-XL model)"),MAe.forEach(t),Ilo=i(S),Ls=n(S,"LI",{});var k$=s(Ls);Iae=n(k$,"STRONG",{});var zUr=s(Iae);qlo=r(zUr,"visual_bert"),zUr.forEach(t),Nlo=r(k$," \u2014 "),fB=n(k$,"A",{href:!0});var WUr=s(fB);jlo=r(WUr,"BertTokenizer"),WUr.forEach(t),Dlo=r(k$," or "),gB=n(k$,"A",{href:!0});var QUr=s(gB);Glo=r(QUr,"BertTokenizerFast"),QUr.forEach(t),Olo=r(k$," (VisualBert model)"),k$.forEach(t),Vlo=i(S),Yg=n(S,"LI",{});var EAe=s(Yg);qae=n(EAe,"STRONG",{});var HUr=s(qae);Xlo=r(HUr,"wav2vec2"),HUr.forEach(t),zlo=r(EAe," \u2014 "),hB=n(EAe,"A",{href:!0});var UUr=s(hB);Wlo=r(UUr,"Wav2Vec2CTCTokenizer"),UUr.forEach(t),Qlo=r(EAe," (Wav2Vec2 model)"),EAe.forEach(t),Hlo=i(S),Kg=n(S,"LI",{});var CAe=s(Kg);Nae=n(CAe,"STRONG",{});var JUr=s(Nae);Ulo=r(JUr,"wav2vec2-conformer"),JUr.forEach(t),Jlo=r(CAe," \u2014 "),uB=n(CAe,"A",{href:!0});var YUr=s(uB);Ylo=r(YUr,"Wav2Vec2CTCTokenizer"),YUr.forEach(t),Klo=r(CAe," (Wav2Vec2-Conformer model)"),CAe.forEach(t),Zlo=i(S),Zg=n(S,"LI",{});var wAe=s(Zg);jae=n(wAe,"STRONG",{});var KUr=s(jae);eio=r(KUr,"wav2vec2_phoneme"),KUr.forEach(t),oio=r(wAe," \u2014 "),pB=n(wAe,"A",{href:!0});var ZUr=s(pB);rio=r(ZUr,"Wav2Vec2PhonemeCTCTokenizer"),ZUr.forEach(t),tio=r(wAe," (Wav2Vec2Phoneme model)"),wAe.forEach(t),aio=i(S),xs=n(S,"LI",{});var S$=s(xs);Dae=n(S$,"STRONG",{});var eJr=s(Dae);nio=r(eJr,"xglm"),eJr.forEach(t),sio=r(S$," \u2014 "),_B=n(S$,"A",{href:!0});var oJr=s(_B);lio=r(oJr,"XGLMTokenizer"),oJr.forEach(t),iio=r(S$," or "),bB=n(S$,"A",{href:!0});var rJr=s(bB);dio=r(rJr,"XGLMTokenizerFast"),rJr.forEach(t),cio=r(S$," (XGLM model)"),S$.forEach(t),mio=i(S),eh=n(S,"LI",{});var AAe=s(eh);Gae=n(AAe,"STRONG",{});var tJr=s(Gae);fio=r(tJr,"xlm"),tJr.forEach(t),gio=r(AAe," \u2014 "),vB=n(AAe,"A",{href:!0});var aJr=s(vB);hio=r(aJr,"XLMTokenizer"),aJr.forEach(t),uio=r(AAe," (XLM model)"),AAe.forEach(t),pio=i(S),oh=n(S,"LI",{});var yAe=s(oh);Oae=n(yAe,"STRONG",{});var nJr=s(Oae);_io=r(nJr,"xlm-prophetnet"),nJr.forEach(t),bio=r(yAe," \u2014 "),FB=n(yAe,"A",{href:!0});var sJr=s(FB);vio=r(sJr,"XLMProphetNetTokenizer"),sJr.forEach(t),Fio=r(yAe," (XLMProphetNet model)"),yAe.forEach(t),Tio=i(S),$s=n(S,"LI",{});var R$=s($s);Vae=n(R$,"STRONG",{});var lJr=s(Vae);Mio=r(lJr,"xlm-roberta"),lJr.forEach(t),Eio=r(R$," \u2014 "),TB=n(R$,"A",{href:!0});var iJr=s(TB);Cio=r(iJr,"XLMRobertaTokenizer"),iJr.forEach(t),wio=r(R$," or "),MB=n(R$,"A",{href:!0});var dJr=s(MB);Aio=r(dJr,"XLMRobertaTokenizerFast"),dJr.forEach(t),yio=r(R$," (XLM-RoBERTa model)"),R$.forEach(t),Lio=i(S),ks=n(S,"LI",{});var P$=s(ks);Xae=n(P$,"STRONG",{});var cJr=s(Xae);xio=r(cJr,"xlm-roberta-xl"),cJr.forEach(t),$io=r(P$," \u2014 "),EB=n(P$,"A",{href:!0});var mJr=s(EB);kio=r(mJr,"RobertaTokenizer"),mJr.forEach(t),Sio=r(P$," or "),CB=n(P$,"A",{href:!0});var fJr=s(CB);Rio=r(fJr,"RobertaTokenizerFast"),fJr.forEach(t),Pio=r(P$," (XLM-RoBERTa-XL model)"),P$.forEach(t),Bio=i(S),Ss=n(S,"LI",{});var B$=s(Ss);zae=n(B$,"STRONG",{});var gJr=s(zae);Iio=r(gJr,"xlnet"),gJr.forEach(t),qio=r(B$," \u2014 "),wB=n(B$,"A",{href:!0});var hJr=s(wB);Nio=r(hJr,"XLNetTokenizer"),hJr.forEach(t),jio=r(B$," or "),AB=n(B$,"A",{href:!0});var uJr=s(AB);Dio=r(uJr,"XLNetTokenizerFast"),uJr.forEach(t),Gio=r(B$," (XLNet model)"),B$.forEach(t),Oio=i(S),Rs=n(S,"LI",{});var I$=s(Rs);Wae=n(I$,"STRONG",{});var pJr=s(Wae);Vio=r(pJr,"yoso"),pJr.forEach(t),Xio=r(I$," \u2014 "),yB=n(I$,"A",{href:!0});var _Jr=s(yB);zio=r(_Jr,"AlbertTokenizer"),_Jr.forEach(t),Wio=r(I$," or "),LB=n(I$,"A",{href:!0});var bJr=s(LB);Qio=r(bJr,"AlbertTokenizerFast"),bJr.forEach(t),Hio=r(I$," (YOSO model)"),I$.forEach(t),S.forEach(t),Uio=i(Ns),T(rh.$$.fragment,Ns),Ns.forEach(t),Jio=i(qs),th=n(qs,"DIV",{class:!0});var Dje=s(th);T(By.$$.fragment,Dje),Yio=i(Dje),Qae=n(Dje,"P",{});var vJr=s(Qae);Kio=r(vJr,"Register a new tokenizer in this mapping."),vJr.forEach(t),Dje.forEach(t),qs.forEach(t),Gqe=i(m),Mi=n(m,"H2",{class:!0});var Gje=s(Mi);ah=n(Gje,"A",{id:!0,class:!0,href:!0});var FJr=s(ah);Hae=n(FJr,"SPAN",{});var TJr=s(Hae);T(Iy.$$.fragment,TJr),TJr.forEach(t),FJr.forEach(t),Zio=i(Gje),Uae=n(Gje,"SPAN",{});var MJr=s(Uae);edo=r(MJr,"AutoFeatureExtractor"),MJr.forEach(t),Gje.forEach(t),Oqe=i(m),Ao=n(m,"DIV",{class:!0});var js=s(Ao);T(qy.$$.fragment,js),odo=i(js),Ny=n(js,"P",{});var Oje=s(Ny);rdo=r(Oje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),xB=n(Oje,"A",{href:!0});var EJr=s(xB);tdo=r(EJr,"AutoFeatureExtractor.from_pretrained()"),EJr.forEach(t),ado=r(Oje," class method."),Oje.forEach(t),ndo=i(js),jy=n(js,"P",{});var Vje=s(jy);sdo=r(Vje,"This class cannot be instantiated directly using "),Jae=n(Vje,"CODE",{});var CJr=s(Jae);ldo=r(CJr,"__init__()"),CJr.forEach(t),ido=r(Vje," (throws an error)."),Vje.forEach(t),ddo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Dy.$$.fragment,Zt),cdo=i(Zt),Yae=n(Zt,"P",{});var wJr=s(Yae);mdo=r(wJr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wJr.forEach(t),fdo=i(Zt),ya=n(Zt,"P",{});var wA=s(ya);gdo=r(wA,"The feature extractor class to instantiate is selected based on the "),Kae=n(wA,"CODE",{});var AJr=s(Kae);hdo=r(AJr,"model_type"),AJr.forEach(t),udo=r(wA,` property of the config object
(either passed as an argument or loaded from `),Zae=n(wA,"CODE",{});var yJr=s(Zae);pdo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),_do=r(wA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ene=n(wA,"CODE",{});var LJr=s(ene);bdo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),vdo=r(wA,":"),wA.forEach(t),Fdo=i(Zt),K=n(Zt,"UL",{});var ee=s(K);nh=n(ee,"LI",{});var LAe=s(nh);one=n(LAe,"STRONG",{});var xJr=s(one);Tdo=r(xJr,"beit"),xJr.forEach(t),Mdo=r(LAe," \u2014 "),$B=n(LAe,"A",{href:!0});var $Jr=s($B);Edo=r($Jr,"BeitFeatureExtractor"),$Jr.forEach(t),Cdo=r(LAe," (BEiT model)"),LAe.forEach(t),wdo=i(ee),sh=n(ee,"LI",{});var xAe=s(sh);rne=n(xAe,"STRONG",{});var kJr=s(rne);Ado=r(kJr,"clip"),kJr.forEach(t),ydo=r(xAe," \u2014 "),kB=n(xAe,"A",{href:!0});var SJr=s(kB);Ldo=r(SJr,"CLIPFeatureExtractor"),SJr.forEach(t),xdo=r(xAe," (CLIP model)"),xAe.forEach(t),$do=i(ee),lh=n(ee,"LI",{});var $Ae=s(lh);tne=n($Ae,"STRONG",{});var RJr=s(tne);kdo=r(RJr,"convnext"),RJr.forEach(t),Sdo=r($Ae," \u2014 "),SB=n($Ae,"A",{href:!0});var PJr=s(SB);Rdo=r(PJr,"ConvNextFeatureExtractor"),PJr.forEach(t),Pdo=r($Ae," (ConvNext model)"),$Ae.forEach(t),Bdo=i(ee),ih=n(ee,"LI",{});var kAe=s(ih);ane=n(kAe,"STRONG",{});var BJr=s(ane);Ido=r(BJr,"cvt"),BJr.forEach(t),qdo=r(kAe," \u2014 "),RB=n(kAe,"A",{href:!0});var IJr=s(RB);Ndo=r(IJr,"ConvNextFeatureExtractor"),IJr.forEach(t),jdo=r(kAe," (CvT model)"),kAe.forEach(t),Ddo=i(ee),dh=n(ee,"LI",{});var SAe=s(dh);nne=n(SAe,"STRONG",{});var qJr=s(nne);Gdo=r(qJr,"data2vec-audio"),qJr.forEach(t),Odo=r(SAe," \u2014 "),PB=n(SAe,"A",{href:!0});var NJr=s(PB);Vdo=r(NJr,"Wav2Vec2FeatureExtractor"),NJr.forEach(t),Xdo=r(SAe," (Data2VecAudio model)"),SAe.forEach(t),zdo=i(ee),ch=n(ee,"LI",{});var RAe=s(ch);sne=n(RAe,"STRONG",{});var jJr=s(sne);Wdo=r(jJr,"data2vec-vision"),jJr.forEach(t),Qdo=r(RAe," \u2014 "),BB=n(RAe,"A",{href:!0});var DJr=s(BB);Hdo=r(DJr,"BeitFeatureExtractor"),DJr.forEach(t),Udo=r(RAe," (Data2VecVision model)"),RAe.forEach(t),Jdo=i(ee),mh=n(ee,"LI",{});var PAe=s(mh);lne=n(PAe,"STRONG",{});var GJr=s(lne);Ydo=r(GJr,"deit"),GJr.forEach(t),Kdo=r(PAe," \u2014 "),IB=n(PAe,"A",{href:!0});var OJr=s(IB);Zdo=r(OJr,"DeiTFeatureExtractor"),OJr.forEach(t),eco=r(PAe," (DeiT model)"),PAe.forEach(t),oco=i(ee),fh=n(ee,"LI",{});var BAe=s(fh);ine=n(BAe,"STRONG",{});var VJr=s(ine);rco=r(VJr,"detr"),VJr.forEach(t),tco=r(BAe," \u2014 "),qB=n(BAe,"A",{href:!0});var XJr=s(qB);aco=r(XJr,"DetrFeatureExtractor"),XJr.forEach(t),nco=r(BAe," (DETR model)"),BAe.forEach(t),sco=i(ee),gh=n(ee,"LI",{});var IAe=s(gh);dne=n(IAe,"STRONG",{});var zJr=s(dne);lco=r(zJr,"dpt"),zJr.forEach(t),ico=r(IAe," \u2014 "),NB=n(IAe,"A",{href:!0});var WJr=s(NB);dco=r(WJr,"DPTFeatureExtractor"),WJr.forEach(t),cco=r(IAe," (DPT model)"),IAe.forEach(t),mco=i(ee),hh=n(ee,"LI",{});var qAe=s(hh);cne=n(qAe,"STRONG",{});var QJr=s(cne);fco=r(QJr,"flava"),QJr.forEach(t),gco=r(qAe," \u2014 "),jB=n(qAe,"A",{href:!0});var HJr=s(jB);hco=r(HJr,"FlavaFeatureExtractor"),HJr.forEach(t),uco=r(qAe," (Flava model)"),qAe.forEach(t),pco=i(ee),uh=n(ee,"LI",{});var NAe=s(uh);mne=n(NAe,"STRONG",{});var UJr=s(mne);_co=r(UJr,"glpn"),UJr.forEach(t),bco=r(NAe," \u2014 "),DB=n(NAe,"A",{href:!0});var JJr=s(DB);vco=r(JJr,"GLPNFeatureExtractor"),JJr.forEach(t),Fco=r(NAe," (GLPN model)"),NAe.forEach(t),Tco=i(ee),ph=n(ee,"LI",{});var jAe=s(ph);fne=n(jAe,"STRONG",{});var YJr=s(fne);Mco=r(YJr,"hubert"),YJr.forEach(t),Eco=r(jAe," \u2014 "),GB=n(jAe,"A",{href:!0});var KJr=s(GB);Cco=r(KJr,"Wav2Vec2FeatureExtractor"),KJr.forEach(t),wco=r(jAe," (Hubert model)"),jAe.forEach(t),Aco=i(ee),_h=n(ee,"LI",{});var DAe=s(_h);gne=n(DAe,"STRONG",{});var ZJr=s(gne);yco=r(ZJr,"layoutlmv2"),ZJr.forEach(t),Lco=r(DAe," \u2014 "),OB=n(DAe,"A",{href:!0});var eYr=s(OB);xco=r(eYr,"LayoutLMv2FeatureExtractor"),eYr.forEach(t),$co=r(DAe," (LayoutLMv2 model)"),DAe.forEach(t),kco=i(ee),bh=n(ee,"LI",{});var GAe=s(bh);hne=n(GAe,"STRONG",{});var oYr=s(hne);Sco=r(oYr,"layoutlmv3"),oYr.forEach(t),Rco=r(GAe," \u2014 "),VB=n(GAe,"A",{href:!0});var rYr=s(VB);Pco=r(rYr,"LayoutLMv3FeatureExtractor"),rYr.forEach(t),Bco=r(GAe," (LayoutLMv3 model)"),GAe.forEach(t),Ico=i(ee),vh=n(ee,"LI",{});var OAe=s(vh);une=n(OAe,"STRONG",{});var tYr=s(une);qco=r(tYr,"maskformer"),tYr.forEach(t),Nco=r(OAe," \u2014 "),XB=n(OAe,"A",{href:!0});var aYr=s(XB);jco=r(aYr,"MaskFormerFeatureExtractor"),aYr.forEach(t),Dco=r(OAe," (MaskFormer model)"),OAe.forEach(t),Gco=i(ee),Fh=n(ee,"LI",{});var VAe=s(Fh);pne=n(VAe,"STRONG",{});var nYr=s(pne);Oco=r(nYr,"perceiver"),nYr.forEach(t),Vco=r(VAe," \u2014 "),zB=n(VAe,"A",{href:!0});var sYr=s(zB);Xco=r(sYr,"PerceiverFeatureExtractor"),sYr.forEach(t),zco=r(VAe," (Perceiver model)"),VAe.forEach(t),Wco=i(ee),Th=n(ee,"LI",{});var XAe=s(Th);_ne=n(XAe,"STRONG",{});var lYr=s(_ne);Qco=r(lYr,"poolformer"),lYr.forEach(t),Hco=r(XAe," \u2014 "),WB=n(XAe,"A",{href:!0});var iYr=s(WB);Uco=r(iYr,"PoolFormerFeatureExtractor"),iYr.forEach(t),Jco=r(XAe," (PoolFormer model)"),XAe.forEach(t),Yco=i(ee),Mh=n(ee,"LI",{});var zAe=s(Mh);bne=n(zAe,"STRONG",{});var dYr=s(bne);Kco=r(dYr,"regnet"),dYr.forEach(t),Zco=r(zAe," \u2014 "),QB=n(zAe,"A",{href:!0});var cYr=s(QB);emo=r(cYr,"ConvNextFeatureExtractor"),cYr.forEach(t),omo=r(zAe," (RegNet model)"),zAe.forEach(t),rmo=i(ee),Eh=n(ee,"LI",{});var WAe=s(Eh);vne=n(WAe,"STRONG",{});var mYr=s(vne);tmo=r(mYr,"resnet"),mYr.forEach(t),amo=r(WAe," \u2014 "),HB=n(WAe,"A",{href:!0});var fYr=s(HB);nmo=r(fYr,"ConvNextFeatureExtractor"),fYr.forEach(t),smo=r(WAe," (ResNet model)"),WAe.forEach(t),lmo=i(ee),Ch=n(ee,"LI",{});var QAe=s(Ch);Fne=n(QAe,"STRONG",{});var gYr=s(Fne);imo=r(gYr,"segformer"),gYr.forEach(t),dmo=r(QAe," \u2014 "),UB=n(QAe,"A",{href:!0});var hYr=s(UB);cmo=r(hYr,"SegformerFeatureExtractor"),hYr.forEach(t),mmo=r(QAe," (SegFormer model)"),QAe.forEach(t),fmo=i(ee),wh=n(ee,"LI",{});var HAe=s(wh);Tne=n(HAe,"STRONG",{});var uYr=s(Tne);gmo=r(uYr,"speech_to_text"),uYr.forEach(t),hmo=r(HAe," \u2014 "),JB=n(HAe,"A",{href:!0});var pYr=s(JB);umo=r(pYr,"Speech2TextFeatureExtractor"),pYr.forEach(t),pmo=r(HAe," (Speech2Text model)"),HAe.forEach(t),_mo=i(ee),Ah=n(ee,"LI",{});var UAe=s(Ah);Mne=n(UAe,"STRONG",{});var _Yr=s(Mne);bmo=r(_Yr,"swin"),_Yr.forEach(t),vmo=r(UAe," \u2014 "),YB=n(UAe,"A",{href:!0});var bYr=s(YB);Fmo=r(bYr,"ViTFeatureExtractor"),bYr.forEach(t),Tmo=r(UAe," (Swin model)"),UAe.forEach(t),Mmo=i(ee),yh=n(ee,"LI",{});var JAe=s(yh);Ene=n(JAe,"STRONG",{});var vYr=s(Ene);Emo=r(vYr,"van"),vYr.forEach(t),Cmo=r(JAe," \u2014 "),KB=n(JAe,"A",{href:!0});var FYr=s(KB);wmo=r(FYr,"ConvNextFeatureExtractor"),FYr.forEach(t),Amo=r(JAe," (VAN model)"),JAe.forEach(t),ymo=i(ee),Lh=n(ee,"LI",{});var YAe=s(Lh);Cne=n(YAe,"STRONG",{});var TYr=s(Cne);Lmo=r(TYr,"vit"),TYr.forEach(t),xmo=r(YAe," \u2014 "),ZB=n(YAe,"A",{href:!0});var MYr=s(ZB);$mo=r(MYr,"ViTFeatureExtractor"),MYr.forEach(t),kmo=r(YAe," (ViT model)"),YAe.forEach(t),Smo=i(ee),xh=n(ee,"LI",{});var KAe=s(xh);wne=n(KAe,"STRONG",{});var EYr=s(wne);Rmo=r(EYr,"vit_mae"),EYr.forEach(t),Pmo=r(KAe," \u2014 "),eI=n(KAe,"A",{href:!0});var CYr=s(eI);Bmo=r(CYr,"ViTFeatureExtractor"),CYr.forEach(t),Imo=r(KAe," (ViTMAE model)"),KAe.forEach(t),qmo=i(ee),$h=n(ee,"LI",{});var ZAe=s($h);Ane=n(ZAe,"STRONG",{});var wYr=s(Ane);Nmo=r(wYr,"wav2vec2"),wYr.forEach(t),jmo=r(ZAe," \u2014 "),oI=n(ZAe,"A",{href:!0});var AYr=s(oI);Dmo=r(AYr,"Wav2Vec2FeatureExtractor"),AYr.forEach(t),Gmo=r(ZAe," (Wav2Vec2 model)"),ZAe.forEach(t),Omo=i(ee),kh=n(ee,"LI",{});var e6e=s(kh);yne=n(e6e,"STRONG",{});var yYr=s(yne);Vmo=r(yYr,"wav2vec2-conformer"),yYr.forEach(t),Xmo=r(e6e," \u2014 "),rI=n(e6e,"A",{href:!0});var LYr=s(rI);zmo=r(LYr,"Wav2Vec2FeatureExtractor"),LYr.forEach(t),Wmo=r(e6e," (Wav2Vec2-Conformer model)"),e6e.forEach(t),Qmo=i(ee),Sh=n(ee,"LI",{});var o6e=s(Sh);Lne=n(o6e,"STRONG",{});var xYr=s(Lne);Hmo=r(xYr,"yolos"),xYr.forEach(t),Umo=r(o6e," \u2014 "),tI=n(o6e,"A",{href:!0});var $Yr=s(tI);Jmo=r($Yr,"YolosFeatureExtractor"),$Yr.forEach(t),Ymo=r(o6e," (YOLOS model)"),o6e.forEach(t),ee.forEach(t),Kmo=i(Zt),T(Rh.$$.fragment,Zt),Zmo=i(Zt),T(Ph.$$.fragment,Zt),Zt.forEach(t),efo=i(js),Bh=n(js,"DIV",{class:!0});var Xje=s(Bh);T(Gy.$$.fragment,Xje),ofo=i(Xje),xne=n(Xje,"P",{});var kYr=s(xne);rfo=r(kYr,"Register a new feature extractor for this class."),kYr.forEach(t),Xje.forEach(t),js.forEach(t),Vqe=i(m),Ei=n(m,"H2",{class:!0});var zje=s(Ei);Ih=n(zje,"A",{id:!0,class:!0,href:!0});var SYr=s(Ih);$ne=n(SYr,"SPAN",{});var RYr=s($ne);T(Oy.$$.fragment,RYr),RYr.forEach(t),SYr.forEach(t),tfo=i(zje),kne=n(zje,"SPAN",{});var PYr=s(kne);afo=r(PYr,"AutoProcessor"),PYr.forEach(t),zje.forEach(t),Xqe=i(m),yo=n(m,"DIV",{class:!0});var Ds=s(yo);T(Vy.$$.fragment,Ds),nfo=i(Ds),Xy=n(Ds,"P",{});var Wje=s(Xy);sfo=r(Wje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aI=n(Wje,"A",{href:!0});var BYr=s(aI);lfo=r(BYr,"AutoProcessor.from_pretrained()"),BYr.forEach(t),ifo=r(Wje," class method."),Wje.forEach(t),dfo=i(Ds),zy=n(Ds,"P",{});var Qje=s(zy);cfo=r(Qje,"This class cannot be instantiated directly using "),Sne=n(Qje,"CODE",{});var IYr=s(Sne);mfo=r(IYr,"__init__()"),IYr.forEach(t),ffo=r(Qje," (throws an error)."),Qje.forEach(t),gfo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Wy.$$.fragment,ea),hfo=i(ea),Rne=n(ea,"P",{});var qYr=s(Rne);ufo=r(qYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qYr.forEach(t),pfo=i(ea),Ci=n(ea,"P",{});var aZ=s(Ci);_fo=r(aZ,"The processor class to instantiate is selected based on the "),Pne=n(aZ,"CODE",{});var NYr=s(Pne);bfo=r(NYr,"model_type"),NYr.forEach(t),vfo=r(aZ,` property of the config object (either
passed as an argument or loaded from `),Bne=n(aZ,"CODE",{});var jYr=s(Bne);Ffo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),Tfo=r(aZ," if possible):"),aZ.forEach(t),Mfo=i(ea),he=n(ea,"UL",{});var _e=s(he);qh=n(_e,"LI",{});var r6e=s(qh);Ine=n(r6e,"STRONG",{});var DYr=s(Ine);Efo=r(DYr,"clip"),DYr.forEach(t),Cfo=r(r6e," \u2014 "),nI=n(r6e,"A",{href:!0});var GYr=s(nI);wfo=r(GYr,"CLIPProcessor"),GYr.forEach(t),Afo=r(r6e," (CLIP model)"),r6e.forEach(t),yfo=i(_e),Nh=n(_e,"LI",{});var t6e=s(Nh);qne=n(t6e,"STRONG",{});var OYr=s(qne);Lfo=r(OYr,"flava"),OYr.forEach(t),xfo=r(t6e," \u2014 "),Nne=n(t6e,"CODE",{});var VYr=s(Nne);$fo=r(VYr,"FLAVAProcessor"),VYr.forEach(t),kfo=r(t6e," (Flava model)"),t6e.forEach(t),Sfo=i(_e),jh=n(_e,"LI",{});var a6e=s(jh);jne=n(a6e,"STRONG",{});var XYr=s(jne);Rfo=r(XYr,"layoutlmv2"),XYr.forEach(t),Pfo=r(a6e," \u2014 "),sI=n(a6e,"A",{href:!0});var zYr=s(sI);Bfo=r(zYr,"LayoutLMv2Processor"),zYr.forEach(t),Ifo=r(a6e," (LayoutLMv2 model)"),a6e.forEach(t),qfo=i(_e),Dh=n(_e,"LI",{});var n6e=s(Dh);Dne=n(n6e,"STRONG",{});var WYr=s(Dne);Nfo=r(WYr,"layoutlmv3"),WYr.forEach(t),jfo=r(n6e," \u2014 "),lI=n(n6e,"A",{href:!0});var QYr=s(lI);Dfo=r(QYr,"LayoutLMv3Processor"),QYr.forEach(t),Gfo=r(n6e," (LayoutLMv3 model)"),n6e.forEach(t),Ofo=i(_e),Gh=n(_e,"LI",{});var s6e=s(Gh);Gne=n(s6e,"STRONG",{});var HYr=s(Gne);Vfo=r(HYr,"layoutxlm"),HYr.forEach(t),Xfo=r(s6e," \u2014 "),iI=n(s6e,"A",{href:!0});var UYr=s(iI);zfo=r(UYr,"LayoutXLMProcessor"),UYr.forEach(t),Wfo=r(s6e," (LayoutXLM model)"),s6e.forEach(t),Qfo=i(_e),Oh=n(_e,"LI",{});var l6e=s(Oh);One=n(l6e,"STRONG",{});var JYr=s(One);Hfo=r(JYr,"sew"),JYr.forEach(t),Ufo=r(l6e," \u2014 "),dI=n(l6e,"A",{href:!0});var YYr=s(dI);Jfo=r(YYr,"Wav2Vec2Processor"),YYr.forEach(t),Yfo=r(l6e," (SEW model)"),l6e.forEach(t),Kfo=i(_e),Vh=n(_e,"LI",{});var i6e=s(Vh);Vne=n(i6e,"STRONG",{});var KYr=s(Vne);Zfo=r(KYr,"sew-d"),KYr.forEach(t),ego=r(i6e," \u2014 "),cI=n(i6e,"A",{href:!0});var ZYr=s(cI);ogo=r(ZYr,"Wav2Vec2Processor"),ZYr.forEach(t),rgo=r(i6e," (SEW-D model)"),i6e.forEach(t),tgo=i(_e),Xh=n(_e,"LI",{});var d6e=s(Xh);Xne=n(d6e,"STRONG",{});var eKr=s(Xne);ago=r(eKr,"speech_to_text"),eKr.forEach(t),ngo=r(d6e," \u2014 "),mI=n(d6e,"A",{href:!0});var oKr=s(mI);sgo=r(oKr,"Speech2TextProcessor"),oKr.forEach(t),lgo=r(d6e," (Speech2Text model)"),d6e.forEach(t),igo=i(_e),zh=n(_e,"LI",{});var c6e=s(zh);zne=n(c6e,"STRONG",{});var rKr=s(zne);dgo=r(rKr,"speech_to_text_2"),rKr.forEach(t),cgo=r(c6e," \u2014 "),fI=n(c6e,"A",{href:!0});var tKr=s(fI);mgo=r(tKr,"Speech2Text2Processor"),tKr.forEach(t),fgo=r(c6e," (Speech2Text2 model)"),c6e.forEach(t),ggo=i(_e),Wh=n(_e,"LI",{});var m6e=s(Wh);Wne=n(m6e,"STRONG",{});var aKr=s(Wne);hgo=r(aKr,"trocr"),aKr.forEach(t),ugo=r(m6e," \u2014 "),gI=n(m6e,"A",{href:!0});var nKr=s(gI);pgo=r(nKr,"TrOCRProcessor"),nKr.forEach(t),_go=r(m6e," (TrOCR model)"),m6e.forEach(t),bgo=i(_e),Qh=n(_e,"LI",{});var f6e=s(Qh);Qne=n(f6e,"STRONG",{});var sKr=s(Qne);vgo=r(sKr,"unispeech"),sKr.forEach(t),Fgo=r(f6e," \u2014 "),hI=n(f6e,"A",{href:!0});var lKr=s(hI);Tgo=r(lKr,"Wav2Vec2Processor"),lKr.forEach(t),Mgo=r(f6e," (UniSpeech model)"),f6e.forEach(t),Ego=i(_e),Hh=n(_e,"LI",{});var g6e=s(Hh);Hne=n(g6e,"STRONG",{});var iKr=s(Hne);Cgo=r(iKr,"unispeech-sat"),iKr.forEach(t),wgo=r(g6e," \u2014 "),uI=n(g6e,"A",{href:!0});var dKr=s(uI);Ago=r(dKr,"Wav2Vec2Processor"),dKr.forEach(t),ygo=r(g6e," (UniSpeechSat model)"),g6e.forEach(t),Lgo=i(_e),Uh=n(_e,"LI",{});var h6e=s(Uh);Une=n(h6e,"STRONG",{});var cKr=s(Une);xgo=r(cKr,"vilt"),cKr.forEach(t),$go=r(h6e," \u2014 "),pI=n(h6e,"A",{href:!0});var mKr=s(pI);kgo=r(mKr,"ViltProcessor"),mKr.forEach(t),Sgo=r(h6e," (ViLT model)"),h6e.forEach(t),Rgo=i(_e),Jh=n(_e,"LI",{});var u6e=s(Jh);Jne=n(u6e,"STRONG",{});var fKr=s(Jne);Pgo=r(fKr,"vision-text-dual-encoder"),fKr.forEach(t),Bgo=r(u6e," \u2014 "),_I=n(u6e,"A",{href:!0});var gKr=s(_I);Igo=r(gKr,"VisionTextDualEncoderProcessor"),gKr.forEach(t),qgo=r(u6e," (VisionTextDualEncoder model)"),u6e.forEach(t),Ngo=i(_e),Yh=n(_e,"LI",{});var p6e=s(Yh);Yne=n(p6e,"STRONG",{});var hKr=s(Yne);jgo=r(hKr,"wav2vec2"),hKr.forEach(t),Dgo=r(p6e," \u2014 "),bI=n(p6e,"A",{href:!0});var uKr=s(bI);Ggo=r(uKr,"Wav2Vec2Processor"),uKr.forEach(t),Ogo=r(p6e," (Wav2Vec2 model)"),p6e.forEach(t),Vgo=i(_e),Kh=n(_e,"LI",{});var _6e=s(Kh);Kne=n(_6e,"STRONG",{});var pKr=s(Kne);Xgo=r(pKr,"wav2vec2-conformer"),pKr.forEach(t),zgo=r(_6e," \u2014 "),vI=n(_6e,"A",{href:!0});var _Kr=s(vI);Wgo=r(_Kr,"Wav2Vec2Processor"),_Kr.forEach(t),Qgo=r(_6e," (Wav2Vec2-Conformer model)"),_6e.forEach(t),Hgo=i(_e),Zh=n(_e,"LI",{});var b6e=s(Zh);Zne=n(b6e,"STRONG",{});var bKr=s(Zne);Ugo=r(bKr,"wavlm"),bKr.forEach(t),Jgo=r(b6e," \u2014 "),FI=n(b6e,"A",{href:!0});var vKr=s(FI);Ygo=r(vKr,"Wav2Vec2Processor"),vKr.forEach(t),Kgo=r(b6e," (WavLM model)"),b6e.forEach(t),_e.forEach(t),Zgo=i(ea),T(eu.$$.fragment,ea),eho=i(ea),T(ou.$$.fragment,ea),ea.forEach(t),oho=i(Ds),ru=n(Ds,"DIV",{class:!0});var Hje=s(ru);T(Qy.$$.fragment,Hje),rho=i(Hje),ese=n(Hje,"P",{});var FKr=s(ese);tho=r(FKr,"Register a new processor for this class."),FKr.forEach(t),Hje.forEach(t),Ds.forEach(t),zqe=i(m),wi=n(m,"H2",{class:!0});var Uje=s(wi);tu=n(Uje,"A",{id:!0,class:!0,href:!0});var TKr=s(tu);ose=n(TKr,"SPAN",{});var MKr=s(ose);T(Hy.$$.fragment,MKr),MKr.forEach(t),TKr.forEach(t),aho=i(Uje),rse=n(Uje,"SPAN",{});var EKr=s(rse);nho=r(EKr,"AutoModel"),EKr.forEach(t),Uje.forEach(t),Wqe=i(m),Lo=n(m,"DIV",{class:!0});var Gs=s(Lo);T(Uy.$$.fragment,Gs),sho=i(Gs),Ai=n(Gs,"P",{});var nZ=s(Ai);lho=r(nZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TI=n(nZ,"A",{href:!0});var CKr=s(TI);iho=r(CKr,"from_pretrained()"),CKr.forEach(t),dho=r(nZ," class method or the "),MI=n(nZ,"A",{href:!0});var wKr=s(MI);cho=r(wKr,"from_config()"),wKr.forEach(t),mho=r(nZ,` class
method.`),nZ.forEach(t),fho=i(Gs),Jy=n(Gs,"P",{});var Jje=s(Jy);gho=r(Jje,"This class cannot be instantiated directly using "),tse=n(Jje,"CODE",{});var AKr=s(tse);hho=r(AKr,"__init__()"),AKr.forEach(t),uho=r(Jje," (throws an error)."),Jje.forEach(t),pho=i(Gs),tt=n(Gs,"DIV",{class:!0});var AA=s(tt);T(Yy.$$.fragment,AA),_ho=i(AA),ase=n(AA,"P",{});var yKr=s(ase);bho=r(yKr,"Instantiates one of the base model classes of the library from a configuration."),yKr.forEach(t),vho=i(AA),yi=n(AA,"P",{});var sZ=s(yi);Fho=r(sZ,`Note:
Loading a model from its configuration file does `),nse=n(sZ,"STRONG",{});var LKr=s(nse);Tho=r(LKr,"not"),LKr.forEach(t),Mho=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EI=n(sZ,"A",{href:!0});var xKr=s(EI);Eho=r(xKr,"from_pretrained()"),xKr.forEach(t),Cho=r(sZ," to load the model weights."),sZ.forEach(t),who=i(AA),T(au.$$.fragment,AA),AA.forEach(t),Aho=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(Ky.$$.fragment,oa),yho=i(oa),sse=n(oa,"P",{});var $Kr=s(sse);Lho=r($Kr,"Instantiate one of the base model classes of the library from a pretrained model."),$Kr.forEach(t),xho=i(oa),La=n(oa,"P",{});var yA=s(La);$ho=r(yA,"The model class to instantiate is selected based on the "),lse=n(yA,"CODE",{});var kKr=s(lse);kho=r(kKr,"model_type"),kKr.forEach(t),Sho=r(yA,` property of the config object (either
passed as an argument or loaded from `),ise=n(yA,"CODE",{});var SKr=s(ise);Rho=r(SKr,"pretrained_model_name_or_path"),SKr.forEach(t),Pho=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(yA,"CODE",{});var RKr=s(dse);Bho=r(RKr,"pretrained_model_name_or_path"),RKr.forEach(t),Iho=r(yA,":"),yA.forEach(t),qho=i(oa),x=n(oa,"UL",{});var $=s(x);nu=n($,"LI",{});var v6e=s(nu);cse=n(v6e,"STRONG",{});var PKr=s(cse);Nho=r(PKr,"albert"),PKr.forEach(t),jho=r(v6e," \u2014 "),CI=n(v6e,"A",{href:!0});var BKr=s(CI);Dho=r(BKr,"AlbertModel"),BKr.forEach(t),Gho=r(v6e," (ALBERT model)"),v6e.forEach(t),Oho=i($),su=n($,"LI",{});var F6e=s(su);mse=n(F6e,"STRONG",{});var IKr=s(mse);Vho=r(IKr,"bart"),IKr.forEach(t),Xho=r(F6e," \u2014 "),wI=n(F6e,"A",{href:!0});var qKr=s(wI);zho=r(qKr,"BartModel"),qKr.forEach(t),Who=r(F6e," (BART model)"),F6e.forEach(t),Qho=i($),lu=n($,"LI",{});var T6e=s(lu);fse=n(T6e,"STRONG",{});var NKr=s(fse);Hho=r(NKr,"beit"),NKr.forEach(t),Uho=r(T6e," \u2014 "),AI=n(T6e,"A",{href:!0});var jKr=s(AI);Jho=r(jKr,"BeitModel"),jKr.forEach(t),Yho=r(T6e," (BEiT model)"),T6e.forEach(t),Kho=i($),iu=n($,"LI",{});var M6e=s(iu);gse=n(M6e,"STRONG",{});var DKr=s(gse);Zho=r(DKr,"bert"),DKr.forEach(t),euo=r(M6e," \u2014 "),yI=n(M6e,"A",{href:!0});var GKr=s(yI);ouo=r(GKr,"BertModel"),GKr.forEach(t),ruo=r(M6e," (BERT model)"),M6e.forEach(t),tuo=i($),du=n($,"LI",{});var E6e=s(du);hse=n(E6e,"STRONG",{});var OKr=s(hse);auo=r(OKr,"bert-generation"),OKr.forEach(t),nuo=r(E6e," \u2014 "),LI=n(E6e,"A",{href:!0});var VKr=s(LI);suo=r(VKr,"BertGenerationEncoder"),VKr.forEach(t),luo=r(E6e," (Bert Generation model)"),E6e.forEach(t),iuo=i($),cu=n($,"LI",{});var C6e=s(cu);use=n(C6e,"STRONG",{});var XKr=s(use);duo=r(XKr,"big_bird"),XKr.forEach(t),cuo=r(C6e," \u2014 "),xI=n(C6e,"A",{href:!0});var zKr=s(xI);muo=r(zKr,"BigBirdModel"),zKr.forEach(t),fuo=r(C6e," (BigBird model)"),C6e.forEach(t),guo=i($),mu=n($,"LI",{});var w6e=s(mu);pse=n(w6e,"STRONG",{});var WKr=s(pse);huo=r(WKr,"bigbird_pegasus"),WKr.forEach(t),uuo=r(w6e," \u2014 "),$I=n(w6e,"A",{href:!0});var QKr=s($I);puo=r(QKr,"BigBirdPegasusModel"),QKr.forEach(t),_uo=r(w6e," (BigBirdPegasus model)"),w6e.forEach(t),buo=i($),fu=n($,"LI",{});var A6e=s(fu);_se=n(A6e,"STRONG",{});var HKr=s(_se);vuo=r(HKr,"blenderbot"),HKr.forEach(t),Fuo=r(A6e," \u2014 "),kI=n(A6e,"A",{href:!0});var UKr=s(kI);Tuo=r(UKr,"BlenderbotModel"),UKr.forEach(t),Muo=r(A6e," (Blenderbot model)"),A6e.forEach(t),Euo=i($),gu=n($,"LI",{});var y6e=s(gu);bse=n(y6e,"STRONG",{});var JKr=s(bse);Cuo=r(JKr,"blenderbot-small"),JKr.forEach(t),wuo=r(y6e," \u2014 "),SI=n(y6e,"A",{href:!0});var YKr=s(SI);Auo=r(YKr,"BlenderbotSmallModel"),YKr.forEach(t),yuo=r(y6e," (BlenderbotSmall model)"),y6e.forEach(t),Luo=i($),hu=n($,"LI",{});var L6e=s(hu);vse=n(L6e,"STRONG",{});var KKr=s(vse);xuo=r(KKr,"camembert"),KKr.forEach(t),$uo=r(L6e," \u2014 "),RI=n(L6e,"A",{href:!0});var ZKr=s(RI);kuo=r(ZKr,"CamembertModel"),ZKr.forEach(t),Suo=r(L6e," (CamemBERT model)"),L6e.forEach(t),Ruo=i($),uu=n($,"LI",{});var x6e=s(uu);Fse=n(x6e,"STRONG",{});var eZr=s(Fse);Puo=r(eZr,"canine"),eZr.forEach(t),Buo=r(x6e," \u2014 "),PI=n(x6e,"A",{href:!0});var oZr=s(PI);Iuo=r(oZr,"CanineModel"),oZr.forEach(t),quo=r(x6e," (Canine model)"),x6e.forEach(t),Nuo=i($),pu=n($,"LI",{});var $6e=s(pu);Tse=n($6e,"STRONG",{});var rZr=s(Tse);juo=r(rZr,"clip"),rZr.forEach(t),Duo=r($6e," \u2014 "),BI=n($6e,"A",{href:!0});var tZr=s(BI);Guo=r(tZr,"CLIPModel"),tZr.forEach(t),Ouo=r($6e," (CLIP model)"),$6e.forEach(t),Vuo=i($),_u=n($,"LI",{});var k6e=s(_u);Mse=n(k6e,"STRONG",{});var aZr=s(Mse);Xuo=r(aZr,"convbert"),aZr.forEach(t),zuo=r(k6e," \u2014 "),II=n(k6e,"A",{href:!0});var nZr=s(II);Wuo=r(nZr,"ConvBertModel"),nZr.forEach(t),Quo=r(k6e," (ConvBERT model)"),k6e.forEach(t),Huo=i($),bu=n($,"LI",{});var S6e=s(bu);Ese=n(S6e,"STRONG",{});var sZr=s(Ese);Uuo=r(sZr,"convnext"),sZr.forEach(t),Juo=r(S6e," \u2014 "),qI=n(S6e,"A",{href:!0});var lZr=s(qI);Yuo=r(lZr,"ConvNextModel"),lZr.forEach(t),Kuo=r(S6e," (ConvNext model)"),S6e.forEach(t),Zuo=i($),vu=n($,"LI",{});var R6e=s(vu);Cse=n(R6e,"STRONG",{});var iZr=s(Cse);epo=r(iZr,"ctrl"),iZr.forEach(t),opo=r(R6e," \u2014 "),NI=n(R6e,"A",{href:!0});var dZr=s(NI);rpo=r(dZr,"CTRLModel"),dZr.forEach(t),tpo=r(R6e," (CTRL model)"),R6e.forEach(t),apo=i($),Fu=n($,"LI",{});var P6e=s(Fu);wse=n(P6e,"STRONG",{});var cZr=s(wse);npo=r(cZr,"cvt"),cZr.forEach(t),spo=r(P6e," \u2014 "),jI=n(P6e,"A",{href:!0});var mZr=s(jI);lpo=r(mZr,"CvtModel"),mZr.forEach(t),ipo=r(P6e," (CvT model)"),P6e.forEach(t),dpo=i($),Tu=n($,"LI",{});var B6e=s(Tu);Ase=n(B6e,"STRONG",{});var fZr=s(Ase);cpo=r(fZr,"data2vec-audio"),fZr.forEach(t),mpo=r(B6e," \u2014 "),DI=n(B6e,"A",{href:!0});var gZr=s(DI);fpo=r(gZr,"Data2VecAudioModel"),gZr.forEach(t),gpo=r(B6e," (Data2VecAudio model)"),B6e.forEach(t),hpo=i($),Mu=n($,"LI",{});var I6e=s(Mu);yse=n(I6e,"STRONG",{});var hZr=s(yse);upo=r(hZr,"data2vec-text"),hZr.forEach(t),ppo=r(I6e," \u2014 "),GI=n(I6e,"A",{href:!0});var uZr=s(GI);_po=r(uZr,"Data2VecTextModel"),uZr.forEach(t),bpo=r(I6e," (Data2VecText model)"),I6e.forEach(t),vpo=i($),Eu=n($,"LI",{});var q6e=s(Eu);Lse=n(q6e,"STRONG",{});var pZr=s(Lse);Fpo=r(pZr,"data2vec-vision"),pZr.forEach(t),Tpo=r(q6e," \u2014 "),OI=n(q6e,"A",{href:!0});var _Zr=s(OI);Mpo=r(_Zr,"Data2VecVisionModel"),_Zr.forEach(t),Epo=r(q6e," (Data2VecVision model)"),q6e.forEach(t),Cpo=i($),Cu=n($,"LI",{});var N6e=s(Cu);xse=n(N6e,"STRONG",{});var bZr=s(xse);wpo=r(bZr,"deberta"),bZr.forEach(t),Apo=r(N6e," \u2014 "),VI=n(N6e,"A",{href:!0});var vZr=s(VI);ypo=r(vZr,"DebertaModel"),vZr.forEach(t),Lpo=r(N6e," (DeBERTa model)"),N6e.forEach(t),xpo=i($),wu=n($,"LI",{});var j6e=s(wu);$se=n(j6e,"STRONG",{});var FZr=s($se);$po=r(FZr,"deberta-v2"),FZr.forEach(t),kpo=r(j6e," \u2014 "),XI=n(j6e,"A",{href:!0});var TZr=s(XI);Spo=r(TZr,"DebertaV2Model"),TZr.forEach(t),Rpo=r(j6e," (DeBERTa-v2 model)"),j6e.forEach(t),Ppo=i($),Au=n($,"LI",{});var D6e=s(Au);kse=n(D6e,"STRONG",{});var MZr=s(kse);Bpo=r(MZr,"decision_transformer"),MZr.forEach(t),Ipo=r(D6e," \u2014 "),zI=n(D6e,"A",{href:!0});var EZr=s(zI);qpo=r(EZr,"DecisionTransformerModel"),EZr.forEach(t),Npo=r(D6e," (Decision Transformer model)"),D6e.forEach(t),jpo=i($),yu=n($,"LI",{});var G6e=s(yu);Sse=n(G6e,"STRONG",{});var CZr=s(Sse);Dpo=r(CZr,"deit"),CZr.forEach(t),Gpo=r(G6e," \u2014 "),WI=n(G6e,"A",{href:!0});var wZr=s(WI);Opo=r(wZr,"DeiTModel"),wZr.forEach(t),Vpo=r(G6e," (DeiT model)"),G6e.forEach(t),Xpo=i($),Lu=n($,"LI",{});var O6e=s(Lu);Rse=n(O6e,"STRONG",{});var AZr=s(Rse);zpo=r(AZr,"detr"),AZr.forEach(t),Wpo=r(O6e," \u2014 "),QI=n(O6e,"A",{href:!0});var yZr=s(QI);Qpo=r(yZr,"DetrModel"),yZr.forEach(t),Hpo=r(O6e," (DETR model)"),O6e.forEach(t),Upo=i($),xu=n($,"LI",{});var V6e=s(xu);Pse=n(V6e,"STRONG",{});var LZr=s(Pse);Jpo=r(LZr,"distilbert"),LZr.forEach(t),Ypo=r(V6e," \u2014 "),HI=n(V6e,"A",{href:!0});var xZr=s(HI);Kpo=r(xZr,"DistilBertModel"),xZr.forEach(t),Zpo=r(V6e," (DistilBERT model)"),V6e.forEach(t),e_o=i($),$u=n($,"LI",{});var X6e=s($u);Bse=n(X6e,"STRONG",{});var $Zr=s(Bse);o_o=r($Zr,"dpr"),$Zr.forEach(t),r_o=r(X6e," \u2014 "),UI=n(X6e,"A",{href:!0});var kZr=s(UI);t_o=r(kZr,"DPRQuestionEncoder"),kZr.forEach(t),a_o=r(X6e," (DPR model)"),X6e.forEach(t),n_o=i($),ku=n($,"LI",{});var z6e=s(ku);Ise=n(z6e,"STRONG",{});var SZr=s(Ise);s_o=r(SZr,"dpt"),SZr.forEach(t),l_o=r(z6e," \u2014 "),JI=n(z6e,"A",{href:!0});var RZr=s(JI);i_o=r(RZr,"DPTModel"),RZr.forEach(t),d_o=r(z6e," (DPT model)"),z6e.forEach(t),c_o=i($),Su=n($,"LI",{});var W6e=s(Su);qse=n(W6e,"STRONG",{});var PZr=s(qse);m_o=r(PZr,"electra"),PZr.forEach(t),f_o=r(W6e," \u2014 "),YI=n(W6e,"A",{href:!0});var BZr=s(YI);g_o=r(BZr,"ElectraModel"),BZr.forEach(t),h_o=r(W6e," (ELECTRA model)"),W6e.forEach(t),u_o=i($),Ru=n($,"LI",{});var Q6e=s(Ru);Nse=n(Q6e,"STRONG",{});var IZr=s(Nse);p_o=r(IZr,"flaubert"),IZr.forEach(t),__o=r(Q6e," \u2014 "),KI=n(Q6e,"A",{href:!0});var qZr=s(KI);b_o=r(qZr,"FlaubertModel"),qZr.forEach(t),v_o=r(Q6e," (FlauBERT model)"),Q6e.forEach(t),F_o=i($),Pu=n($,"LI",{});var H6e=s(Pu);jse=n(H6e,"STRONG",{});var NZr=s(jse);T_o=r(NZr,"flava"),NZr.forEach(t),M_o=r(H6e," \u2014 "),ZI=n(H6e,"A",{href:!0});var jZr=s(ZI);E_o=r(jZr,"FlavaModel"),jZr.forEach(t),C_o=r(H6e," (Flava model)"),H6e.forEach(t),w_o=i($),Bu=n($,"LI",{});var U6e=s(Bu);Dse=n(U6e,"STRONG",{});var DZr=s(Dse);A_o=r(DZr,"fnet"),DZr.forEach(t),y_o=r(U6e," \u2014 "),eq=n(U6e,"A",{href:!0});var GZr=s(eq);L_o=r(GZr,"FNetModel"),GZr.forEach(t),x_o=r(U6e," (FNet model)"),U6e.forEach(t),$_o=i($),Iu=n($,"LI",{});var J6e=s(Iu);Gse=n(J6e,"STRONG",{});var OZr=s(Gse);k_o=r(OZr,"fsmt"),OZr.forEach(t),S_o=r(J6e," \u2014 "),oq=n(J6e,"A",{href:!0});var VZr=s(oq);R_o=r(VZr,"FSMTModel"),VZr.forEach(t),P_o=r(J6e," (FairSeq Machine-Translation model)"),J6e.forEach(t),B_o=i($),Ps=n($,"LI",{});var q$=s(Ps);Ose=n(q$,"STRONG",{});var XZr=s(Ose);I_o=r(XZr,"funnel"),XZr.forEach(t),q_o=r(q$," \u2014 "),rq=n(q$,"A",{href:!0});var zZr=s(rq);N_o=r(zZr,"FunnelModel"),zZr.forEach(t),j_o=r(q$," or "),tq=n(q$,"A",{href:!0});var WZr=s(tq);D_o=r(WZr,"FunnelBaseModel"),WZr.forEach(t),G_o=r(q$," (Funnel Transformer model)"),q$.forEach(t),O_o=i($),qu=n($,"LI",{});var Y6e=s(qu);Vse=n(Y6e,"STRONG",{});var QZr=s(Vse);V_o=r(QZr,"glpn"),QZr.forEach(t),X_o=r(Y6e," \u2014 "),aq=n(Y6e,"A",{href:!0});var HZr=s(aq);z_o=r(HZr,"GLPNModel"),HZr.forEach(t),W_o=r(Y6e," (GLPN model)"),Y6e.forEach(t),Q_o=i($),Nu=n($,"LI",{});var K6e=s(Nu);Xse=n(K6e,"STRONG",{});var UZr=s(Xse);H_o=r(UZr,"gpt2"),UZr.forEach(t),U_o=r(K6e," \u2014 "),nq=n(K6e,"A",{href:!0});var JZr=s(nq);J_o=r(JZr,"GPT2Model"),JZr.forEach(t),Y_o=r(K6e," (OpenAI GPT-2 model)"),K6e.forEach(t),K_o=i($),ju=n($,"LI",{});var Z6e=s(ju);zse=n(Z6e,"STRONG",{});var YZr=s(zse);Z_o=r(YZr,"gpt_neo"),YZr.forEach(t),ebo=r(Z6e," \u2014 "),sq=n(Z6e,"A",{href:!0});var KZr=s(sq);obo=r(KZr,"GPTNeoModel"),KZr.forEach(t),rbo=r(Z6e," (GPT Neo model)"),Z6e.forEach(t),tbo=i($),Du=n($,"LI",{});var eye=s(Du);Wse=n(eye,"STRONG",{});var ZZr=s(Wse);abo=r(ZZr,"gptj"),ZZr.forEach(t),nbo=r(eye," \u2014 "),lq=n(eye,"A",{href:!0});var eet=s(lq);sbo=r(eet,"GPTJModel"),eet.forEach(t),lbo=r(eye," (GPT-J model)"),eye.forEach(t),ibo=i($),Gu=n($,"LI",{});var oye=s(Gu);Qse=n(oye,"STRONG",{});var oet=s(Qse);dbo=r(oet,"hubert"),oet.forEach(t),cbo=r(oye," \u2014 "),iq=n(oye,"A",{href:!0});var ret=s(iq);mbo=r(ret,"HubertModel"),ret.forEach(t),fbo=r(oye," (Hubert model)"),oye.forEach(t),gbo=i($),Ou=n($,"LI",{});var rye=s(Ou);Hse=n(rye,"STRONG",{});var tet=s(Hse);hbo=r(tet,"ibert"),tet.forEach(t),ubo=r(rye," \u2014 "),dq=n(rye,"A",{href:!0});var aet=s(dq);pbo=r(aet,"IBertModel"),aet.forEach(t),_bo=r(rye," (I-BERT model)"),rye.forEach(t),bbo=i($),Vu=n($,"LI",{});var tye=s(Vu);Use=n(tye,"STRONG",{});var net=s(Use);vbo=r(net,"imagegpt"),net.forEach(t),Fbo=r(tye," \u2014 "),cq=n(tye,"A",{href:!0});var set=s(cq);Tbo=r(set,"ImageGPTModel"),set.forEach(t),Mbo=r(tye," (ImageGPT model)"),tye.forEach(t),Ebo=i($),Xu=n($,"LI",{});var aye=s(Xu);Jse=n(aye,"STRONG",{});var iet=s(Jse);Cbo=r(iet,"layoutlm"),iet.forEach(t),wbo=r(aye," \u2014 "),mq=n(aye,"A",{href:!0});var det=s(mq);Abo=r(det,"LayoutLMModel"),det.forEach(t),ybo=r(aye," (LayoutLM model)"),aye.forEach(t),Lbo=i($),zu=n($,"LI",{});var nye=s(zu);Yse=n(nye,"STRONG",{});var cet=s(Yse);xbo=r(cet,"layoutlmv2"),cet.forEach(t),$bo=r(nye," \u2014 "),fq=n(nye,"A",{href:!0});var met=s(fq);kbo=r(met,"LayoutLMv2Model"),met.forEach(t),Sbo=r(nye," (LayoutLMv2 model)"),nye.forEach(t),Rbo=i($),Wu=n($,"LI",{});var sye=s(Wu);Kse=n(sye,"STRONG",{});var fet=s(Kse);Pbo=r(fet,"layoutlmv3"),fet.forEach(t),Bbo=r(sye," \u2014 "),gq=n(sye,"A",{href:!0});var get=s(gq);Ibo=r(get,"LayoutLMv3Model"),get.forEach(t),qbo=r(sye," (LayoutLMv3 model)"),sye.forEach(t),Nbo=i($),Qu=n($,"LI",{});var lye=s(Qu);Zse=n(lye,"STRONG",{});var het=s(Zse);jbo=r(het,"led"),het.forEach(t),Dbo=r(lye," \u2014 "),hq=n(lye,"A",{href:!0});var uet=s(hq);Gbo=r(uet,"LEDModel"),uet.forEach(t),Obo=r(lye," (LED model)"),lye.forEach(t),Vbo=i($),Hu=n($,"LI",{});var iye=s(Hu);ele=n(iye,"STRONG",{});var pet=s(ele);Xbo=r(pet,"longformer"),pet.forEach(t),zbo=r(iye," \u2014 "),uq=n(iye,"A",{href:!0});var _et=s(uq);Wbo=r(_et,"LongformerModel"),_et.forEach(t),Qbo=r(iye," (Longformer model)"),iye.forEach(t),Hbo=i($),Uu=n($,"LI",{});var dye=s(Uu);ole=n(dye,"STRONG",{});var bet=s(ole);Ubo=r(bet,"luke"),bet.forEach(t),Jbo=r(dye," \u2014 "),pq=n(dye,"A",{href:!0});var vet=s(pq);Ybo=r(vet,"LukeModel"),vet.forEach(t),Kbo=r(dye," (LUKE model)"),dye.forEach(t),Zbo=i($),Ju=n($,"LI",{});var cye=s(Ju);rle=n(cye,"STRONG",{});var Fet=s(rle);e2o=r(Fet,"lxmert"),Fet.forEach(t),o2o=r(cye," \u2014 "),_q=n(cye,"A",{href:!0});var Tet=s(_q);r2o=r(Tet,"LxmertModel"),Tet.forEach(t),t2o=r(cye," (LXMERT model)"),cye.forEach(t),a2o=i($),Yu=n($,"LI",{});var mye=s(Yu);tle=n(mye,"STRONG",{});var Met=s(tle);n2o=r(Met,"m2m_100"),Met.forEach(t),s2o=r(mye," \u2014 "),bq=n(mye,"A",{href:!0});var Eet=s(bq);l2o=r(Eet,"M2M100Model"),Eet.forEach(t),i2o=r(mye," (M2M100 model)"),mye.forEach(t),d2o=i($),Ku=n($,"LI",{});var fye=s(Ku);ale=n(fye,"STRONG",{});var Cet=s(ale);c2o=r(Cet,"marian"),Cet.forEach(t),m2o=r(fye," \u2014 "),vq=n(fye,"A",{href:!0});var wet=s(vq);f2o=r(wet,"MarianModel"),wet.forEach(t),g2o=r(fye," (Marian model)"),fye.forEach(t),h2o=i($),Zu=n($,"LI",{});var gye=s(Zu);nle=n(gye,"STRONG",{});var Aet=s(nle);u2o=r(Aet,"maskformer"),Aet.forEach(t),p2o=r(gye," \u2014 "),Fq=n(gye,"A",{href:!0});var yet=s(Fq);_2o=r(yet,"MaskFormerModel"),yet.forEach(t),b2o=r(gye," (MaskFormer model)"),gye.forEach(t),v2o=i($),ep=n($,"LI",{});var hye=s(ep);sle=n(hye,"STRONG",{});var Let=s(sle);F2o=r(Let,"mbart"),Let.forEach(t),T2o=r(hye," \u2014 "),Tq=n(hye,"A",{href:!0});var xet=s(Tq);M2o=r(xet,"MBartModel"),xet.forEach(t),E2o=r(hye," (mBART model)"),hye.forEach(t),C2o=i($),op=n($,"LI",{});var uye=s(op);lle=n(uye,"STRONG",{});var $et=s(lle);w2o=r($et,"megatron-bert"),$et.forEach(t),A2o=r(uye," \u2014 "),Mq=n(uye,"A",{href:!0});var ket=s(Mq);y2o=r(ket,"MegatronBertModel"),ket.forEach(t),L2o=r(uye," (MegatronBert model)"),uye.forEach(t),x2o=i($),rp=n($,"LI",{});var pye=s(rp);ile=n(pye,"STRONG",{});var Set=s(ile);$2o=r(Set,"mobilebert"),Set.forEach(t),k2o=r(pye," \u2014 "),Eq=n(pye,"A",{href:!0});var Ret=s(Eq);S2o=r(Ret,"MobileBertModel"),Ret.forEach(t),R2o=r(pye," (MobileBERT model)"),pye.forEach(t),P2o=i($),tp=n($,"LI",{});var _ye=s(tp);dle=n(_ye,"STRONG",{});var Pet=s(dle);B2o=r(Pet,"mpnet"),Pet.forEach(t),I2o=r(_ye," \u2014 "),Cq=n(_ye,"A",{href:!0});var Bet=s(Cq);q2o=r(Bet,"MPNetModel"),Bet.forEach(t),N2o=r(_ye," (MPNet model)"),_ye.forEach(t),j2o=i($),ap=n($,"LI",{});var bye=s(ap);cle=n(bye,"STRONG",{});var Iet=s(cle);D2o=r(Iet,"mt5"),Iet.forEach(t),G2o=r(bye," \u2014 "),wq=n(bye,"A",{href:!0});var qet=s(wq);O2o=r(qet,"MT5Model"),qet.forEach(t),V2o=r(bye," (mT5 model)"),bye.forEach(t),X2o=i($),np=n($,"LI",{});var vye=s(np);mle=n(vye,"STRONG",{});var Net=s(mle);z2o=r(Net,"nystromformer"),Net.forEach(t),W2o=r(vye," \u2014 "),Aq=n(vye,"A",{href:!0});var jet=s(Aq);Q2o=r(jet,"NystromformerModel"),jet.forEach(t),H2o=r(vye," (Nystromformer model)"),vye.forEach(t),U2o=i($),sp=n($,"LI",{});var Fye=s(sp);fle=n(Fye,"STRONG",{});var Det=s(fle);J2o=r(Det,"openai-gpt"),Det.forEach(t),Y2o=r(Fye," \u2014 "),yq=n(Fye,"A",{href:!0});var Get=s(yq);K2o=r(Get,"OpenAIGPTModel"),Get.forEach(t),Z2o=r(Fye," (OpenAI GPT model)"),Fye.forEach(t),evo=i($),lp=n($,"LI",{});var Tye=s(lp);gle=n(Tye,"STRONG",{});var Oet=s(gle);ovo=r(Oet,"opt"),Oet.forEach(t),rvo=r(Tye," \u2014 "),Lq=n(Tye,"A",{href:!0});var Vet=s(Lq);tvo=r(Vet,"OPTModel"),Vet.forEach(t),avo=r(Tye," (OPT model)"),Tye.forEach(t),nvo=i($),ip=n($,"LI",{});var Mye=s(ip);hle=n(Mye,"STRONG",{});var Xet=s(hle);svo=r(Xet,"pegasus"),Xet.forEach(t),lvo=r(Mye," \u2014 "),xq=n(Mye,"A",{href:!0});var zet=s(xq);ivo=r(zet,"PegasusModel"),zet.forEach(t),dvo=r(Mye," (Pegasus model)"),Mye.forEach(t),cvo=i($),dp=n($,"LI",{});var Eye=s(dp);ule=n(Eye,"STRONG",{});var Wet=s(ule);mvo=r(Wet,"perceiver"),Wet.forEach(t),fvo=r(Eye," \u2014 "),$q=n(Eye,"A",{href:!0});var Qet=s($q);gvo=r(Qet,"PerceiverModel"),Qet.forEach(t),hvo=r(Eye," (Perceiver model)"),Eye.forEach(t),uvo=i($),cp=n($,"LI",{});var Cye=s(cp);ple=n(Cye,"STRONG",{});var Het=s(ple);pvo=r(Het,"plbart"),Het.forEach(t),_vo=r(Cye," \u2014 "),kq=n(Cye,"A",{href:!0});var Uet=s(kq);bvo=r(Uet,"PLBartModel"),Uet.forEach(t),vvo=r(Cye," (PLBart model)"),Cye.forEach(t),Fvo=i($),mp=n($,"LI",{});var wye=s(mp);_le=n(wye,"STRONG",{});var Jet=s(_le);Tvo=r(Jet,"poolformer"),Jet.forEach(t),Mvo=r(wye," \u2014 "),Sq=n(wye,"A",{href:!0});var Yet=s(Sq);Evo=r(Yet,"PoolFormerModel"),Yet.forEach(t),Cvo=r(wye," (PoolFormer model)"),wye.forEach(t),wvo=i($),fp=n($,"LI",{});var Aye=s(fp);ble=n(Aye,"STRONG",{});var Ket=s(ble);Avo=r(Ket,"prophetnet"),Ket.forEach(t),yvo=r(Aye," \u2014 "),Rq=n(Aye,"A",{href:!0});var Zet=s(Rq);Lvo=r(Zet,"ProphetNetModel"),Zet.forEach(t),xvo=r(Aye," (ProphetNet model)"),Aye.forEach(t),$vo=i($),gp=n($,"LI",{});var yye=s(gp);vle=n(yye,"STRONG",{});var eot=s(vle);kvo=r(eot,"qdqbert"),eot.forEach(t),Svo=r(yye," \u2014 "),Pq=n(yye,"A",{href:!0});var oot=s(Pq);Rvo=r(oot,"QDQBertModel"),oot.forEach(t),Pvo=r(yye," (QDQBert model)"),yye.forEach(t),Bvo=i($),hp=n($,"LI",{});var Lye=s(hp);Fle=n(Lye,"STRONG",{});var rot=s(Fle);Ivo=r(rot,"reformer"),rot.forEach(t),qvo=r(Lye," \u2014 "),Bq=n(Lye,"A",{href:!0});var tot=s(Bq);Nvo=r(tot,"ReformerModel"),tot.forEach(t),jvo=r(Lye," (Reformer model)"),Lye.forEach(t),Dvo=i($),up=n($,"LI",{});var xye=s(up);Tle=n(xye,"STRONG",{});var aot=s(Tle);Gvo=r(aot,"regnet"),aot.forEach(t),Ovo=r(xye," \u2014 "),Iq=n(xye,"A",{href:!0});var not=s(Iq);Vvo=r(not,"RegNetModel"),not.forEach(t),Xvo=r(xye," (RegNet model)"),xye.forEach(t),zvo=i($),pp=n($,"LI",{});var $ye=s(pp);Mle=n($ye,"STRONG",{});var sot=s(Mle);Wvo=r(sot,"rembert"),sot.forEach(t),Qvo=r($ye," \u2014 "),qq=n($ye,"A",{href:!0});var lot=s(qq);Hvo=r(lot,"RemBertModel"),lot.forEach(t),Uvo=r($ye," (RemBERT model)"),$ye.forEach(t),Jvo=i($),_p=n($,"LI",{});var kye=s(_p);Ele=n(kye,"STRONG",{});var iot=s(Ele);Yvo=r(iot,"resnet"),iot.forEach(t),Kvo=r(kye," \u2014 "),Nq=n(kye,"A",{href:!0});var dot=s(Nq);Zvo=r(dot,"ResNetModel"),dot.forEach(t),eFo=r(kye," (ResNet model)"),kye.forEach(t),oFo=i($),bp=n($,"LI",{});var Sye=s(bp);Cle=n(Sye,"STRONG",{});var cot=s(Cle);rFo=r(cot,"retribert"),cot.forEach(t),tFo=r(Sye," \u2014 "),jq=n(Sye,"A",{href:!0});var mot=s(jq);aFo=r(mot,"RetriBertModel"),mot.forEach(t),nFo=r(Sye," (RetriBERT model)"),Sye.forEach(t),sFo=i($),vp=n($,"LI",{});var Rye=s(vp);wle=n(Rye,"STRONG",{});var fot=s(wle);lFo=r(fot,"roberta"),fot.forEach(t),iFo=r(Rye," \u2014 "),Dq=n(Rye,"A",{href:!0});var got=s(Dq);dFo=r(got,"RobertaModel"),got.forEach(t),cFo=r(Rye," (RoBERTa model)"),Rye.forEach(t),mFo=i($),Fp=n($,"LI",{});var Pye=s(Fp);Ale=n(Pye,"STRONG",{});var hot=s(Ale);fFo=r(hot,"roformer"),hot.forEach(t),gFo=r(Pye," \u2014 "),Gq=n(Pye,"A",{href:!0});var uot=s(Gq);hFo=r(uot,"RoFormerModel"),uot.forEach(t),uFo=r(Pye," (RoFormer model)"),Pye.forEach(t),pFo=i($),Tp=n($,"LI",{});var Bye=s(Tp);yle=n(Bye,"STRONG",{});var pot=s(yle);_Fo=r(pot,"segformer"),pot.forEach(t),bFo=r(Bye," \u2014 "),Oq=n(Bye,"A",{href:!0});var _ot=s(Oq);vFo=r(_ot,"SegformerModel"),_ot.forEach(t),FFo=r(Bye," (SegFormer model)"),Bye.forEach(t),TFo=i($),Mp=n($,"LI",{});var Iye=s(Mp);Lle=n(Iye,"STRONG",{});var bot=s(Lle);MFo=r(bot,"sew"),bot.forEach(t),EFo=r(Iye," \u2014 "),Vq=n(Iye,"A",{href:!0});var vot=s(Vq);CFo=r(vot,"SEWModel"),vot.forEach(t),wFo=r(Iye," (SEW model)"),Iye.forEach(t),AFo=i($),Ep=n($,"LI",{});var qye=s(Ep);xle=n(qye,"STRONG",{});var Fot=s(xle);yFo=r(Fot,"sew-d"),Fot.forEach(t),LFo=r(qye," \u2014 "),Xq=n(qye,"A",{href:!0});var Tot=s(Xq);xFo=r(Tot,"SEWDModel"),Tot.forEach(t),$Fo=r(qye," (SEW-D model)"),qye.forEach(t),kFo=i($),Cp=n($,"LI",{});var Nye=s(Cp);$le=n(Nye,"STRONG",{});var Mot=s($le);SFo=r(Mot,"speech_to_text"),Mot.forEach(t),RFo=r(Nye," \u2014 "),zq=n(Nye,"A",{href:!0});var Eot=s(zq);PFo=r(Eot,"Speech2TextModel"),Eot.forEach(t),BFo=r(Nye," (Speech2Text model)"),Nye.forEach(t),IFo=i($),wp=n($,"LI",{});var jye=s(wp);kle=n(jye,"STRONG",{});var Cot=s(kle);qFo=r(Cot,"splinter"),Cot.forEach(t),NFo=r(jye," \u2014 "),Wq=n(jye,"A",{href:!0});var wot=s(Wq);jFo=r(wot,"SplinterModel"),wot.forEach(t),DFo=r(jye," (Splinter model)"),jye.forEach(t),GFo=i($),Ap=n($,"LI",{});var Dye=s(Ap);Sle=n(Dye,"STRONG",{});var Aot=s(Sle);OFo=r(Aot,"squeezebert"),Aot.forEach(t),VFo=r(Dye," \u2014 "),Qq=n(Dye,"A",{href:!0});var yot=s(Qq);XFo=r(yot,"SqueezeBertModel"),yot.forEach(t),zFo=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),WFo=i($),yp=n($,"LI",{});var Gye=s(yp);Rle=n(Gye,"STRONG",{});var Lot=s(Rle);QFo=r(Lot,"swin"),Lot.forEach(t),HFo=r(Gye," \u2014 "),Hq=n(Gye,"A",{href:!0});var xot=s(Hq);UFo=r(xot,"SwinModel"),xot.forEach(t),JFo=r(Gye," (Swin model)"),Gye.forEach(t),YFo=i($),Lp=n($,"LI",{});var Oye=s(Lp);Ple=n(Oye,"STRONG",{});var $ot=s(Ple);KFo=r($ot,"t5"),$ot.forEach(t),ZFo=r(Oye," \u2014 "),Uq=n(Oye,"A",{href:!0});var kot=s(Uq);e1o=r(kot,"T5Model"),kot.forEach(t),o1o=r(Oye," (T5 model)"),Oye.forEach(t),r1o=i($),xp=n($,"LI",{});var Vye=s(xp);Ble=n(Vye,"STRONG",{});var Sot=s(Ble);t1o=r(Sot,"tapas"),Sot.forEach(t),a1o=r(Vye," \u2014 "),Jq=n(Vye,"A",{href:!0});var Rot=s(Jq);n1o=r(Rot,"TapasModel"),Rot.forEach(t),s1o=r(Vye," (TAPAS model)"),Vye.forEach(t),l1o=i($),$p=n($,"LI",{});var Xye=s($p);Ile=n(Xye,"STRONG",{});var Pot=s(Ile);i1o=r(Pot,"trajectory_transformer"),Pot.forEach(t),d1o=r(Xye," \u2014 "),Yq=n(Xye,"A",{href:!0});var Bot=s(Yq);c1o=r(Bot,"TrajectoryTransformerModel"),Bot.forEach(t),m1o=r(Xye," (Trajectory Transformer model)"),Xye.forEach(t),f1o=i($),kp=n($,"LI",{});var zye=s(kp);qle=n(zye,"STRONG",{});var Iot=s(qle);g1o=r(Iot,"transfo-xl"),Iot.forEach(t),h1o=r(zye," \u2014 "),Kq=n(zye,"A",{href:!0});var qot=s(Kq);u1o=r(qot,"TransfoXLModel"),qot.forEach(t),p1o=r(zye," (Transformer-XL model)"),zye.forEach(t),_1o=i($),Sp=n($,"LI",{});var Wye=s(Sp);Nle=n(Wye,"STRONG",{});var Not=s(Nle);b1o=r(Not,"unispeech"),Not.forEach(t),v1o=r(Wye," \u2014 "),Zq=n(Wye,"A",{href:!0});var jot=s(Zq);F1o=r(jot,"UniSpeechModel"),jot.forEach(t),T1o=r(Wye," (UniSpeech model)"),Wye.forEach(t),M1o=i($),Rp=n($,"LI",{});var Qye=s(Rp);jle=n(Qye,"STRONG",{});var Dot=s(jle);E1o=r(Dot,"unispeech-sat"),Dot.forEach(t),C1o=r(Qye," \u2014 "),eN=n(Qye,"A",{href:!0});var Got=s(eN);w1o=r(Got,"UniSpeechSatModel"),Got.forEach(t),A1o=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),y1o=i($),Pp=n($,"LI",{});var Hye=s(Pp);Dle=n(Hye,"STRONG",{});var Oot=s(Dle);L1o=r(Oot,"van"),Oot.forEach(t),x1o=r(Hye," \u2014 "),oN=n(Hye,"A",{href:!0});var Vot=s(oN);$1o=r(Vot,"VanModel"),Vot.forEach(t),k1o=r(Hye," (VAN model)"),Hye.forEach(t),S1o=i($),Bp=n($,"LI",{});var Uye=s(Bp);Gle=n(Uye,"STRONG",{});var Xot=s(Gle);R1o=r(Xot,"vilt"),Xot.forEach(t),P1o=r(Uye," \u2014 "),rN=n(Uye,"A",{href:!0});var zot=s(rN);B1o=r(zot,"ViltModel"),zot.forEach(t),I1o=r(Uye," (ViLT model)"),Uye.forEach(t),q1o=i($),Ip=n($,"LI",{});var Jye=s(Ip);Ole=n(Jye,"STRONG",{});var Wot=s(Ole);N1o=r(Wot,"vision-text-dual-encoder"),Wot.forEach(t),j1o=r(Jye," \u2014 "),tN=n(Jye,"A",{href:!0});var Qot=s(tN);D1o=r(Qot,"VisionTextDualEncoderModel"),Qot.forEach(t),G1o=r(Jye," (VisionTextDualEncoder model)"),Jye.forEach(t),O1o=i($),qp=n($,"LI",{});var Yye=s(qp);Vle=n(Yye,"STRONG",{});var Hot=s(Vle);V1o=r(Hot,"visual_bert"),Hot.forEach(t),X1o=r(Yye," \u2014 "),aN=n(Yye,"A",{href:!0});var Uot=s(aN);z1o=r(Uot,"VisualBertModel"),Uot.forEach(t),W1o=r(Yye," (VisualBert model)"),Yye.forEach(t),Q1o=i($),Np=n($,"LI",{});var Kye=s(Np);Xle=n(Kye,"STRONG",{});var Jot=s(Xle);H1o=r(Jot,"vit"),Jot.forEach(t),U1o=r(Kye," \u2014 "),nN=n(Kye,"A",{href:!0});var Yot=s(nN);J1o=r(Yot,"ViTModel"),Yot.forEach(t),Y1o=r(Kye," (ViT model)"),Kye.forEach(t),K1o=i($),jp=n($,"LI",{});var Zye=s(jp);zle=n(Zye,"STRONG",{});var Kot=s(zle);Z1o=r(Kot,"vit_mae"),Kot.forEach(t),eTo=r(Zye," \u2014 "),sN=n(Zye,"A",{href:!0});var Zot=s(sN);oTo=r(Zot,"ViTMAEModel"),Zot.forEach(t),rTo=r(Zye," (ViTMAE model)"),Zye.forEach(t),tTo=i($),Dp=n($,"LI",{});var eLe=s(Dp);Wle=n(eLe,"STRONG",{});var ert=s(Wle);aTo=r(ert,"wav2vec2"),ert.forEach(t),nTo=r(eLe," \u2014 "),lN=n(eLe,"A",{href:!0});var ort=s(lN);sTo=r(ort,"Wav2Vec2Model"),ort.forEach(t),lTo=r(eLe," (Wav2Vec2 model)"),eLe.forEach(t),iTo=i($),Gp=n($,"LI",{});var oLe=s(Gp);Qle=n(oLe,"STRONG",{});var rrt=s(Qle);dTo=r(rrt,"wav2vec2-conformer"),rrt.forEach(t),cTo=r(oLe," \u2014 "),iN=n(oLe,"A",{href:!0});var trt=s(iN);mTo=r(trt,"Wav2Vec2ConformerModel"),trt.forEach(t),fTo=r(oLe," (Wav2Vec2-Conformer model)"),oLe.forEach(t),gTo=i($),Op=n($,"LI",{});var rLe=s(Op);Hle=n(rLe,"STRONG",{});var art=s(Hle);hTo=r(art,"wavlm"),art.forEach(t),uTo=r(rLe," \u2014 "),dN=n(rLe,"A",{href:!0});var nrt=s(dN);pTo=r(nrt,"WavLMModel"),nrt.forEach(t),_To=r(rLe," (WavLM model)"),rLe.forEach(t),bTo=i($),Vp=n($,"LI",{});var tLe=s(Vp);Ule=n(tLe,"STRONG",{});var srt=s(Ule);vTo=r(srt,"xglm"),srt.forEach(t),FTo=r(tLe," \u2014 "),cN=n(tLe,"A",{href:!0});var lrt=s(cN);TTo=r(lrt,"XGLMModel"),lrt.forEach(t),MTo=r(tLe," (XGLM model)"),tLe.forEach(t),ETo=i($),Xp=n($,"LI",{});var aLe=s(Xp);Jle=n(aLe,"STRONG",{});var irt=s(Jle);CTo=r(irt,"xlm"),irt.forEach(t),wTo=r(aLe," \u2014 "),mN=n(aLe,"A",{href:!0});var drt=s(mN);ATo=r(drt,"XLMModel"),drt.forEach(t),yTo=r(aLe," (XLM model)"),aLe.forEach(t),LTo=i($),zp=n($,"LI",{});var nLe=s(zp);Yle=n(nLe,"STRONG",{});var crt=s(Yle);xTo=r(crt,"xlm-prophetnet"),crt.forEach(t),$To=r(nLe," \u2014 "),fN=n(nLe,"A",{href:!0});var mrt=s(fN);kTo=r(mrt,"XLMProphetNetModel"),mrt.forEach(t),STo=r(nLe," (XLMProphetNet model)"),nLe.forEach(t),RTo=i($),Wp=n($,"LI",{});var sLe=s(Wp);Kle=n(sLe,"STRONG",{});var frt=s(Kle);PTo=r(frt,"xlm-roberta"),frt.forEach(t),BTo=r(sLe," \u2014 "),gN=n(sLe,"A",{href:!0});var grt=s(gN);ITo=r(grt,"XLMRobertaModel"),grt.forEach(t),qTo=r(sLe," (XLM-RoBERTa model)"),sLe.forEach(t),NTo=i($),Qp=n($,"LI",{});var lLe=s(Qp);Zle=n(lLe,"STRONG",{});var hrt=s(Zle);jTo=r(hrt,"xlm-roberta-xl"),hrt.forEach(t),DTo=r(lLe," \u2014 "),hN=n(lLe,"A",{href:!0});var urt=s(hN);GTo=r(urt,"XLMRobertaXLModel"),urt.forEach(t),OTo=r(lLe," (XLM-RoBERTa-XL model)"),lLe.forEach(t),VTo=i($),Hp=n($,"LI",{});var iLe=s(Hp);eie=n(iLe,"STRONG",{});var prt=s(eie);XTo=r(prt,"xlnet"),prt.forEach(t),zTo=r(iLe," \u2014 "),uN=n(iLe,"A",{href:!0});var _rt=s(uN);WTo=r(_rt,"XLNetModel"),_rt.forEach(t),QTo=r(iLe," (XLNet model)"),iLe.forEach(t),HTo=i($),Up=n($,"LI",{});var dLe=s(Up);oie=n(dLe,"STRONG",{});var brt=s(oie);UTo=r(brt,"yolos"),brt.forEach(t),JTo=r(dLe," \u2014 "),pN=n(dLe,"A",{href:!0});var vrt=s(pN);YTo=r(vrt,"YolosModel"),vrt.forEach(t),KTo=r(dLe," (YOLOS model)"),dLe.forEach(t),ZTo=i($),Jp=n($,"LI",{});var cLe=s(Jp);rie=n(cLe,"STRONG",{});var Frt=s(rie);eMo=r(Frt,"yoso"),Frt.forEach(t),oMo=r(cLe," \u2014 "),_N=n(cLe,"A",{href:!0});var Trt=s(_N);rMo=r(Trt,"YosoModel"),Trt.forEach(t),tMo=r(cLe," (YOSO model)"),cLe.forEach(t),$.forEach(t),aMo=i(oa),Yp=n(oa,"P",{});var mLe=s(Yp);nMo=r(mLe,"The model is set in evaluation mode by default using "),tie=n(mLe,"CODE",{});var Mrt=s(tie);sMo=r(Mrt,"model.eval()"),Mrt.forEach(t),lMo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(mLe,"CODE",{});var Ert=s(aie);iMo=r(Ert,"model.train()"),Ert.forEach(t),mLe.forEach(t),dMo=i(oa),T(Kp.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Qqe=i(m),Li=n(m,"H2",{class:!0});var Yje=s(Li);Zp=n(Yje,"A",{id:!0,class:!0,href:!0});var Crt=s(Zp);nie=n(Crt,"SPAN",{});var wrt=s(nie);T(Zy.$$.fragment,wrt),wrt.forEach(t),Crt.forEach(t),cMo=i(Yje),sie=n(Yje,"SPAN",{});var Art=s(sie);mMo=r(Art,"AutoModelForPreTraining"),Art.forEach(t),Yje.forEach(t),Hqe=i(m),xo=n(m,"DIV",{class:!0});var Os=s(xo);T(eL.$$.fragment,Os),fMo=i(Os),xi=n(Os,"P",{});var lZ=s(xi);gMo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bN=n(lZ,"A",{href:!0});var yrt=s(bN);hMo=r(yrt,"from_pretrained()"),yrt.forEach(t),uMo=r(lZ," class method or the "),vN=n(lZ,"A",{href:!0});var Lrt=s(vN);pMo=r(Lrt,"from_config()"),Lrt.forEach(t),_Mo=r(lZ,` class
method.`),lZ.forEach(t),bMo=i(Os),oL=n(Os,"P",{});var Kje=s(oL);vMo=r(Kje,"This class cannot be instantiated directly using "),lie=n(Kje,"CODE",{});var xrt=s(lie);FMo=r(xrt,"__init__()"),xrt.forEach(t),TMo=r(Kje," (throws an error)."),Kje.forEach(t),MMo=i(Os),at=n(Os,"DIV",{class:!0});var LA=s(at);T(rL.$$.fragment,LA),EMo=i(LA),iie=n(LA,"P",{});var $rt=s(iie);CMo=r($rt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$rt.forEach(t),wMo=i(LA),$i=n(LA,"P",{});var iZ=s($i);AMo=r(iZ,`Note:
Loading a model from its configuration file does `),die=n(iZ,"STRONG",{});var krt=s(die);yMo=r(krt,"not"),krt.forEach(t),LMo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FN=n(iZ,"A",{href:!0});var Srt=s(FN);xMo=r(Srt,"from_pretrained()"),Srt.forEach(t),$Mo=r(iZ," to load the model weights."),iZ.forEach(t),kMo=i(LA),T(e_.$$.fragment,LA),LA.forEach(t),SMo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(tL.$$.fragment,ra),RMo=i(ra),cie=n(ra,"P",{});var Rrt=s(cie);PMo=r(Rrt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rrt.forEach(t),BMo=i(ra),xa=n(ra,"P",{});var xA=s(xa);IMo=r(xA,"The model class to instantiate is selected based on the "),mie=n(xA,"CODE",{});var Prt=s(mie);qMo=r(Prt,"model_type"),Prt.forEach(t),NMo=r(xA,` property of the config object (either
passed as an argument or loaded from `),fie=n(xA,"CODE",{});var Brt=s(fie);jMo=r(Brt,"pretrained_model_name_or_path"),Brt.forEach(t),DMo=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gie=n(xA,"CODE",{});var Irt=s(gie);GMo=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),OMo=r(xA,":"),xA.forEach(t),VMo=i(ra),G=n(ra,"UL",{});var O=s(G);o_=n(O,"LI",{});var fLe=s(o_);hie=n(fLe,"STRONG",{});var qrt=s(hie);XMo=r(qrt,"albert"),qrt.forEach(t),zMo=r(fLe," \u2014 "),TN=n(fLe,"A",{href:!0});var Nrt=s(TN);WMo=r(Nrt,"AlbertForPreTraining"),Nrt.forEach(t),QMo=r(fLe," (ALBERT model)"),fLe.forEach(t),HMo=i(O),r_=n(O,"LI",{});var gLe=s(r_);uie=n(gLe,"STRONG",{});var jrt=s(uie);UMo=r(jrt,"bart"),jrt.forEach(t),JMo=r(gLe," \u2014 "),MN=n(gLe,"A",{href:!0});var Drt=s(MN);YMo=r(Drt,"BartForConditionalGeneration"),Drt.forEach(t),KMo=r(gLe," (BART model)"),gLe.forEach(t),ZMo=i(O),t_=n(O,"LI",{});var hLe=s(t_);pie=n(hLe,"STRONG",{});var Grt=s(pie);e4o=r(Grt,"bert"),Grt.forEach(t),o4o=r(hLe," \u2014 "),EN=n(hLe,"A",{href:!0});var Ort=s(EN);r4o=r(Ort,"BertForPreTraining"),Ort.forEach(t),t4o=r(hLe," (BERT model)"),hLe.forEach(t),a4o=i(O),a_=n(O,"LI",{});var uLe=s(a_);_ie=n(uLe,"STRONG",{});var Vrt=s(_ie);n4o=r(Vrt,"big_bird"),Vrt.forEach(t),s4o=r(uLe," \u2014 "),CN=n(uLe,"A",{href:!0});var Xrt=s(CN);l4o=r(Xrt,"BigBirdForPreTraining"),Xrt.forEach(t),i4o=r(uLe," (BigBird model)"),uLe.forEach(t),d4o=i(O),n_=n(O,"LI",{});var pLe=s(n_);bie=n(pLe,"STRONG",{});var zrt=s(bie);c4o=r(zrt,"camembert"),zrt.forEach(t),m4o=r(pLe," \u2014 "),wN=n(pLe,"A",{href:!0});var Wrt=s(wN);f4o=r(Wrt,"CamembertForMaskedLM"),Wrt.forEach(t),g4o=r(pLe," (CamemBERT model)"),pLe.forEach(t),h4o=i(O),s_=n(O,"LI",{});var _Le=s(s_);vie=n(_Le,"STRONG",{});var Qrt=s(vie);u4o=r(Qrt,"ctrl"),Qrt.forEach(t),p4o=r(_Le," \u2014 "),AN=n(_Le,"A",{href:!0});var Hrt=s(AN);_4o=r(Hrt,"CTRLLMHeadModel"),Hrt.forEach(t),b4o=r(_Le," (CTRL model)"),_Le.forEach(t),v4o=i(O),l_=n(O,"LI",{});var bLe=s(l_);Fie=n(bLe,"STRONG",{});var Urt=s(Fie);F4o=r(Urt,"data2vec-text"),Urt.forEach(t),T4o=r(bLe," \u2014 "),yN=n(bLe,"A",{href:!0});var Jrt=s(yN);M4o=r(Jrt,"Data2VecTextForMaskedLM"),Jrt.forEach(t),E4o=r(bLe," (Data2VecText model)"),bLe.forEach(t),C4o=i(O),i_=n(O,"LI",{});var vLe=s(i_);Tie=n(vLe,"STRONG",{});var Yrt=s(Tie);w4o=r(Yrt,"deberta"),Yrt.forEach(t),A4o=r(vLe," \u2014 "),LN=n(vLe,"A",{href:!0});var Krt=s(LN);y4o=r(Krt,"DebertaForMaskedLM"),Krt.forEach(t),L4o=r(vLe," (DeBERTa model)"),vLe.forEach(t),x4o=i(O),d_=n(O,"LI",{});var FLe=s(d_);Mie=n(FLe,"STRONG",{});var Zrt=s(Mie);$4o=r(Zrt,"deberta-v2"),Zrt.forEach(t),k4o=r(FLe," \u2014 "),xN=n(FLe,"A",{href:!0});var ett=s(xN);S4o=r(ett,"DebertaV2ForMaskedLM"),ett.forEach(t),R4o=r(FLe," (DeBERTa-v2 model)"),FLe.forEach(t),P4o=i(O),c_=n(O,"LI",{});var TLe=s(c_);Eie=n(TLe,"STRONG",{});var ott=s(Eie);B4o=r(ott,"distilbert"),ott.forEach(t),I4o=r(TLe," \u2014 "),$N=n(TLe,"A",{href:!0});var rtt=s($N);q4o=r(rtt,"DistilBertForMaskedLM"),rtt.forEach(t),N4o=r(TLe," (DistilBERT model)"),TLe.forEach(t),j4o=i(O),m_=n(O,"LI",{});var MLe=s(m_);Cie=n(MLe,"STRONG",{});var ttt=s(Cie);D4o=r(ttt,"electra"),ttt.forEach(t),G4o=r(MLe," \u2014 "),kN=n(MLe,"A",{href:!0});var att=s(kN);O4o=r(att,"ElectraForPreTraining"),att.forEach(t),V4o=r(MLe," (ELECTRA model)"),MLe.forEach(t),X4o=i(O),f_=n(O,"LI",{});var ELe=s(f_);wie=n(ELe,"STRONG",{});var ntt=s(wie);z4o=r(ntt,"flaubert"),ntt.forEach(t),W4o=r(ELe," \u2014 "),SN=n(ELe,"A",{href:!0});var stt=s(SN);Q4o=r(stt,"FlaubertWithLMHeadModel"),stt.forEach(t),H4o=r(ELe," (FlauBERT model)"),ELe.forEach(t),U4o=i(O),g_=n(O,"LI",{});var CLe=s(g_);Aie=n(CLe,"STRONG",{});var ltt=s(Aie);J4o=r(ltt,"flava"),ltt.forEach(t),Y4o=r(CLe," \u2014 "),RN=n(CLe,"A",{href:!0});var itt=s(RN);K4o=r(itt,"FlavaForPreTraining"),itt.forEach(t),Z4o=r(CLe," (Flava model)"),CLe.forEach(t),eEo=i(O),h_=n(O,"LI",{});var wLe=s(h_);yie=n(wLe,"STRONG",{});var dtt=s(yie);oEo=r(dtt,"fnet"),dtt.forEach(t),rEo=r(wLe," \u2014 "),PN=n(wLe,"A",{href:!0});var ctt=s(PN);tEo=r(ctt,"FNetForPreTraining"),ctt.forEach(t),aEo=r(wLe," (FNet model)"),wLe.forEach(t),nEo=i(O),u_=n(O,"LI",{});var ALe=s(u_);Lie=n(ALe,"STRONG",{});var mtt=s(Lie);sEo=r(mtt,"fsmt"),mtt.forEach(t),lEo=r(ALe," \u2014 "),BN=n(ALe,"A",{href:!0});var ftt=s(BN);iEo=r(ftt,"FSMTForConditionalGeneration"),ftt.forEach(t),dEo=r(ALe," (FairSeq Machine-Translation model)"),ALe.forEach(t),cEo=i(O),p_=n(O,"LI",{});var yLe=s(p_);xie=n(yLe,"STRONG",{});var gtt=s(xie);mEo=r(gtt,"funnel"),gtt.forEach(t),fEo=r(yLe," \u2014 "),IN=n(yLe,"A",{href:!0});var htt=s(IN);gEo=r(htt,"FunnelForPreTraining"),htt.forEach(t),hEo=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),uEo=i(O),__=n(O,"LI",{});var LLe=s(__);$ie=n(LLe,"STRONG",{});var utt=s($ie);pEo=r(utt,"gpt2"),utt.forEach(t),_Eo=r(LLe," \u2014 "),qN=n(LLe,"A",{href:!0});var ptt=s(qN);bEo=r(ptt,"GPT2LMHeadModel"),ptt.forEach(t),vEo=r(LLe," (OpenAI GPT-2 model)"),LLe.forEach(t),FEo=i(O),b_=n(O,"LI",{});var xLe=s(b_);kie=n(xLe,"STRONG",{});var _tt=s(kie);TEo=r(_tt,"ibert"),_tt.forEach(t),MEo=r(xLe," \u2014 "),NN=n(xLe,"A",{href:!0});var btt=s(NN);EEo=r(btt,"IBertForMaskedLM"),btt.forEach(t),CEo=r(xLe," (I-BERT model)"),xLe.forEach(t),wEo=i(O),v_=n(O,"LI",{});var $Le=s(v_);Sie=n($Le,"STRONG",{});var vtt=s(Sie);AEo=r(vtt,"layoutlm"),vtt.forEach(t),yEo=r($Le," \u2014 "),jN=n($Le,"A",{href:!0});var Ftt=s(jN);LEo=r(Ftt,"LayoutLMForMaskedLM"),Ftt.forEach(t),xEo=r($Le," (LayoutLM model)"),$Le.forEach(t),$Eo=i(O),F_=n(O,"LI",{});var kLe=s(F_);Rie=n(kLe,"STRONG",{});var Ttt=s(Rie);kEo=r(Ttt,"longformer"),Ttt.forEach(t),SEo=r(kLe," \u2014 "),DN=n(kLe,"A",{href:!0});var Mtt=s(DN);REo=r(Mtt,"LongformerForMaskedLM"),Mtt.forEach(t),PEo=r(kLe," (Longformer model)"),kLe.forEach(t),BEo=i(O),T_=n(O,"LI",{});var SLe=s(T_);Pie=n(SLe,"STRONG",{});var Ett=s(Pie);IEo=r(Ett,"lxmert"),Ett.forEach(t),qEo=r(SLe," \u2014 "),GN=n(SLe,"A",{href:!0});var Ctt=s(GN);NEo=r(Ctt,"LxmertForPreTraining"),Ctt.forEach(t),jEo=r(SLe," (LXMERT model)"),SLe.forEach(t),DEo=i(O),M_=n(O,"LI",{});var RLe=s(M_);Bie=n(RLe,"STRONG",{});var wtt=s(Bie);GEo=r(wtt,"megatron-bert"),wtt.forEach(t),OEo=r(RLe," \u2014 "),ON=n(RLe,"A",{href:!0});var Att=s(ON);VEo=r(Att,"MegatronBertForPreTraining"),Att.forEach(t),XEo=r(RLe," (MegatronBert model)"),RLe.forEach(t),zEo=i(O),E_=n(O,"LI",{});var PLe=s(E_);Iie=n(PLe,"STRONG",{});var ytt=s(Iie);WEo=r(ytt,"mobilebert"),ytt.forEach(t),QEo=r(PLe," \u2014 "),VN=n(PLe,"A",{href:!0});var Ltt=s(VN);HEo=r(Ltt,"MobileBertForPreTraining"),Ltt.forEach(t),UEo=r(PLe," (MobileBERT model)"),PLe.forEach(t),JEo=i(O),C_=n(O,"LI",{});var BLe=s(C_);qie=n(BLe,"STRONG",{});var xtt=s(qie);YEo=r(xtt,"mpnet"),xtt.forEach(t),KEo=r(BLe," \u2014 "),XN=n(BLe,"A",{href:!0});var $tt=s(XN);ZEo=r($tt,"MPNetForMaskedLM"),$tt.forEach(t),eCo=r(BLe," (MPNet model)"),BLe.forEach(t),oCo=i(O),w_=n(O,"LI",{});var ILe=s(w_);Nie=n(ILe,"STRONG",{});var ktt=s(Nie);rCo=r(ktt,"openai-gpt"),ktt.forEach(t),tCo=r(ILe," \u2014 "),zN=n(ILe,"A",{href:!0});var Stt=s(zN);aCo=r(Stt,"OpenAIGPTLMHeadModel"),Stt.forEach(t),nCo=r(ILe," (OpenAI GPT model)"),ILe.forEach(t),sCo=i(O),A_=n(O,"LI",{});var qLe=s(A_);jie=n(qLe,"STRONG",{});var Rtt=s(jie);lCo=r(Rtt,"retribert"),Rtt.forEach(t),iCo=r(qLe," \u2014 "),WN=n(qLe,"A",{href:!0});var Ptt=s(WN);dCo=r(Ptt,"RetriBertModel"),Ptt.forEach(t),cCo=r(qLe," (RetriBERT model)"),qLe.forEach(t),mCo=i(O),y_=n(O,"LI",{});var NLe=s(y_);Die=n(NLe,"STRONG",{});var Btt=s(Die);fCo=r(Btt,"roberta"),Btt.forEach(t),gCo=r(NLe," \u2014 "),QN=n(NLe,"A",{href:!0});var Itt=s(QN);hCo=r(Itt,"RobertaForMaskedLM"),Itt.forEach(t),uCo=r(NLe," (RoBERTa model)"),NLe.forEach(t),pCo=i(O),L_=n(O,"LI",{});var jLe=s(L_);Gie=n(jLe,"STRONG",{});var qtt=s(Gie);_Co=r(qtt,"splinter"),qtt.forEach(t),bCo=r(jLe," \u2014 "),HN=n(jLe,"A",{href:!0});var Ntt=s(HN);vCo=r(Ntt,"SplinterForPreTraining"),Ntt.forEach(t),FCo=r(jLe," (Splinter model)"),jLe.forEach(t),TCo=i(O),x_=n(O,"LI",{});var DLe=s(x_);Oie=n(DLe,"STRONG",{});var jtt=s(Oie);MCo=r(jtt,"squeezebert"),jtt.forEach(t),ECo=r(DLe," \u2014 "),UN=n(DLe,"A",{href:!0});var Dtt=s(UN);CCo=r(Dtt,"SqueezeBertForMaskedLM"),Dtt.forEach(t),wCo=r(DLe," (SqueezeBERT model)"),DLe.forEach(t),ACo=i(O),$_=n(O,"LI",{});var GLe=s($_);Vie=n(GLe,"STRONG",{});var Gtt=s(Vie);yCo=r(Gtt,"t5"),Gtt.forEach(t),LCo=r(GLe," \u2014 "),JN=n(GLe,"A",{href:!0});var Ott=s(JN);xCo=r(Ott,"T5ForConditionalGeneration"),Ott.forEach(t),$Co=r(GLe," (T5 model)"),GLe.forEach(t),kCo=i(O),k_=n(O,"LI",{});var OLe=s(k_);Xie=n(OLe,"STRONG",{});var Vtt=s(Xie);SCo=r(Vtt,"tapas"),Vtt.forEach(t),RCo=r(OLe," \u2014 "),YN=n(OLe,"A",{href:!0});var Xtt=s(YN);PCo=r(Xtt,"TapasForMaskedLM"),Xtt.forEach(t),BCo=r(OLe," (TAPAS model)"),OLe.forEach(t),ICo=i(O),S_=n(O,"LI",{});var VLe=s(S_);zie=n(VLe,"STRONG",{});var ztt=s(zie);qCo=r(ztt,"transfo-xl"),ztt.forEach(t),NCo=r(VLe," \u2014 "),KN=n(VLe,"A",{href:!0});var Wtt=s(KN);jCo=r(Wtt,"TransfoXLLMHeadModel"),Wtt.forEach(t),DCo=r(VLe," (Transformer-XL model)"),VLe.forEach(t),GCo=i(O),R_=n(O,"LI",{});var XLe=s(R_);Wie=n(XLe,"STRONG",{});var Qtt=s(Wie);OCo=r(Qtt,"unispeech"),Qtt.forEach(t),VCo=r(XLe," \u2014 "),ZN=n(XLe,"A",{href:!0});var Htt=s(ZN);XCo=r(Htt,"UniSpeechForPreTraining"),Htt.forEach(t),zCo=r(XLe," (UniSpeech model)"),XLe.forEach(t),WCo=i(O),P_=n(O,"LI",{});var zLe=s(P_);Qie=n(zLe,"STRONG",{});var Utt=s(Qie);QCo=r(Utt,"unispeech-sat"),Utt.forEach(t),HCo=r(zLe," \u2014 "),ej=n(zLe,"A",{href:!0});var Jtt=s(ej);UCo=r(Jtt,"UniSpeechSatForPreTraining"),Jtt.forEach(t),JCo=r(zLe," (UniSpeechSat model)"),zLe.forEach(t),YCo=i(O),B_=n(O,"LI",{});var WLe=s(B_);Hie=n(WLe,"STRONG",{});var Ytt=s(Hie);KCo=r(Ytt,"visual_bert"),Ytt.forEach(t),ZCo=r(WLe," \u2014 "),oj=n(WLe,"A",{href:!0});var Ktt=s(oj);e5o=r(Ktt,"VisualBertForPreTraining"),Ktt.forEach(t),o5o=r(WLe," (VisualBert model)"),WLe.forEach(t),r5o=i(O),I_=n(O,"LI",{});var QLe=s(I_);Uie=n(QLe,"STRONG",{});var Ztt=s(Uie);t5o=r(Ztt,"vit_mae"),Ztt.forEach(t),a5o=r(QLe," \u2014 "),rj=n(QLe,"A",{href:!0});var eat=s(rj);n5o=r(eat,"ViTMAEForPreTraining"),eat.forEach(t),s5o=r(QLe," (ViTMAE model)"),QLe.forEach(t),l5o=i(O),q_=n(O,"LI",{});var HLe=s(q_);Jie=n(HLe,"STRONG",{});var oat=s(Jie);i5o=r(oat,"wav2vec2"),oat.forEach(t),d5o=r(HLe," \u2014 "),tj=n(HLe,"A",{href:!0});var rat=s(tj);c5o=r(rat,"Wav2Vec2ForPreTraining"),rat.forEach(t),m5o=r(HLe," (Wav2Vec2 model)"),HLe.forEach(t),f5o=i(O),N_=n(O,"LI",{});var ULe=s(N_);Yie=n(ULe,"STRONG",{});var tat=s(Yie);g5o=r(tat,"wav2vec2-conformer"),tat.forEach(t),h5o=r(ULe," \u2014 "),aj=n(ULe,"A",{href:!0});var aat=s(aj);u5o=r(aat,"Wav2Vec2ConformerForPreTraining"),aat.forEach(t),p5o=r(ULe," (Wav2Vec2-Conformer model)"),ULe.forEach(t),_5o=i(O),j_=n(O,"LI",{});var JLe=s(j_);Kie=n(JLe,"STRONG",{});var nat=s(Kie);b5o=r(nat,"xlm"),nat.forEach(t),v5o=r(JLe," \u2014 "),nj=n(JLe,"A",{href:!0});var sat=s(nj);F5o=r(sat,"XLMWithLMHeadModel"),sat.forEach(t),T5o=r(JLe," (XLM model)"),JLe.forEach(t),M5o=i(O),D_=n(O,"LI",{});var YLe=s(D_);Zie=n(YLe,"STRONG",{});var lat=s(Zie);E5o=r(lat,"xlm-roberta"),lat.forEach(t),C5o=r(YLe," \u2014 "),sj=n(YLe,"A",{href:!0});var iat=s(sj);w5o=r(iat,"XLMRobertaForMaskedLM"),iat.forEach(t),A5o=r(YLe," (XLM-RoBERTa model)"),YLe.forEach(t),y5o=i(O),G_=n(O,"LI",{});var KLe=s(G_);ede=n(KLe,"STRONG",{});var dat=s(ede);L5o=r(dat,"xlm-roberta-xl"),dat.forEach(t),x5o=r(KLe," \u2014 "),lj=n(KLe,"A",{href:!0});var cat=s(lj);$5o=r(cat,"XLMRobertaXLForMaskedLM"),cat.forEach(t),k5o=r(KLe," (XLM-RoBERTa-XL model)"),KLe.forEach(t),S5o=i(O),O_=n(O,"LI",{});var ZLe=s(O_);ode=n(ZLe,"STRONG",{});var mat=s(ode);R5o=r(mat,"xlnet"),mat.forEach(t),P5o=r(ZLe," \u2014 "),ij=n(ZLe,"A",{href:!0});var fat=s(ij);B5o=r(fat,"XLNetLMHeadModel"),fat.forEach(t),I5o=r(ZLe," (XLNet model)"),ZLe.forEach(t),O.forEach(t),q5o=i(ra),V_=n(ra,"P",{});var e8e=s(V_);N5o=r(e8e,"The model is set in evaluation mode by default using "),rde=n(e8e,"CODE",{});var gat=s(rde);j5o=r(gat,"model.eval()"),gat.forEach(t),D5o=r(e8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(e8e,"CODE",{});var hat=s(tde);G5o=r(hat,"model.train()"),hat.forEach(t),e8e.forEach(t),O5o=i(ra),T(X_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Uqe=i(m),ki=n(m,"H2",{class:!0});var Zje=s(ki);z_=n(Zje,"A",{id:!0,class:!0,href:!0});var uat=s(z_);ade=n(uat,"SPAN",{});var pat=s(ade);T(aL.$$.fragment,pat),pat.forEach(t),uat.forEach(t),V5o=i(Zje),nde=n(Zje,"SPAN",{});var _at=s(nde);X5o=r(_at,"AutoModelForCausalLM"),_at.forEach(t),Zje.forEach(t),Jqe=i(m),$o=n(m,"DIV",{class:!0});var Vs=s($o);T(nL.$$.fragment,Vs),z5o=i(Vs),Si=n(Vs,"P",{});var dZ=s(Si);W5o=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dj=n(dZ,"A",{href:!0});var bat=s(dj);Q5o=r(bat,"from_pretrained()"),bat.forEach(t),H5o=r(dZ," class method or the "),cj=n(dZ,"A",{href:!0});var vat=s(cj);U5o=r(vat,"from_config()"),vat.forEach(t),J5o=r(dZ,` class
method.`),dZ.forEach(t),Y5o=i(Vs),sL=n(Vs,"P",{});var eDe=s(sL);K5o=r(eDe,"This class cannot be instantiated directly using "),sde=n(eDe,"CODE",{});var Fat=s(sde);Z5o=r(Fat,"__init__()"),Fat.forEach(t),e3o=r(eDe," (throws an error)."),eDe.forEach(t),o3o=i(Vs),nt=n(Vs,"DIV",{class:!0});var $A=s(nt);T(lL.$$.fragment,$A),r3o=i($A),lde=n($A,"P",{});var Tat=s(lde);t3o=r(Tat,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Tat.forEach(t),a3o=i($A),Ri=n($A,"P",{});var cZ=s(Ri);n3o=r(cZ,`Note:
Loading a model from its configuration file does `),ide=n(cZ,"STRONG",{});var Mat=s(ide);s3o=r(Mat,"not"),Mat.forEach(t),l3o=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=n(cZ,"A",{href:!0});var Eat=s(mj);i3o=r(Eat,"from_pretrained()"),Eat.forEach(t),d3o=r(cZ," to load the model weights."),cZ.forEach(t),c3o=i($A),T(W_.$$.fragment,$A),$A.forEach(t),m3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(iL.$$.fragment,ta),f3o=i(ta),dde=n(ta,"P",{});var Cat=s(dde);g3o=r(Cat,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Cat.forEach(t),h3o=i(ta),$a=n(ta,"P",{});var kA=s($a);u3o=r(kA,"The model class to instantiate is selected based on the "),cde=n(kA,"CODE",{});var wat=s(cde);p3o=r(wat,"model_type"),wat.forEach(t),_3o=r(kA,` property of the config object (either
passed as an argument or loaded from `),mde=n(kA,"CODE",{});var Aat=s(mde);b3o=r(Aat,"pretrained_model_name_or_path"),Aat.forEach(t),v3o=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=n(kA,"CODE",{});var yat=s(fde);F3o=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),T3o=r(kA,":"),kA.forEach(t),M3o=i(ta),z=n(ta,"UL",{});var Q=s(z);Q_=n(Q,"LI",{});var o8e=s(Q_);gde=n(o8e,"STRONG",{});var Lat=s(gde);E3o=r(Lat,"bart"),Lat.forEach(t),C3o=r(o8e," \u2014 "),fj=n(o8e,"A",{href:!0});var xat=s(fj);w3o=r(xat,"BartForCausalLM"),xat.forEach(t),A3o=r(o8e," (BART model)"),o8e.forEach(t),y3o=i(Q),H_=n(Q,"LI",{});var r8e=s(H_);hde=n(r8e,"STRONG",{});var $at=s(hde);L3o=r($at,"bert"),$at.forEach(t),x3o=r(r8e," \u2014 "),gj=n(r8e,"A",{href:!0});var kat=s(gj);$3o=r(kat,"BertLMHeadModel"),kat.forEach(t),k3o=r(r8e," (BERT model)"),r8e.forEach(t),S3o=i(Q),U_=n(Q,"LI",{});var t8e=s(U_);ude=n(t8e,"STRONG",{});var Sat=s(ude);R3o=r(Sat,"bert-generation"),Sat.forEach(t),P3o=r(t8e," \u2014 "),hj=n(t8e,"A",{href:!0});var Rat=s(hj);B3o=r(Rat,"BertGenerationDecoder"),Rat.forEach(t),I3o=r(t8e," (Bert Generation model)"),t8e.forEach(t),q3o=i(Q),J_=n(Q,"LI",{});var a8e=s(J_);pde=n(a8e,"STRONG",{});var Pat=s(pde);N3o=r(Pat,"big_bird"),Pat.forEach(t),j3o=r(a8e," \u2014 "),uj=n(a8e,"A",{href:!0});var Bat=s(uj);D3o=r(Bat,"BigBirdForCausalLM"),Bat.forEach(t),G3o=r(a8e," (BigBird model)"),a8e.forEach(t),O3o=i(Q),Y_=n(Q,"LI",{});var n8e=s(Y_);_de=n(n8e,"STRONG",{});var Iat=s(_de);V3o=r(Iat,"bigbird_pegasus"),Iat.forEach(t),X3o=r(n8e," \u2014 "),pj=n(n8e,"A",{href:!0});var qat=s(pj);z3o=r(qat,"BigBirdPegasusForCausalLM"),qat.forEach(t),W3o=r(n8e," (BigBirdPegasus model)"),n8e.forEach(t),Q3o=i(Q),K_=n(Q,"LI",{});var s8e=s(K_);bde=n(s8e,"STRONG",{});var Nat=s(bde);H3o=r(Nat,"blenderbot"),Nat.forEach(t),U3o=r(s8e," \u2014 "),_j=n(s8e,"A",{href:!0});var jat=s(_j);J3o=r(jat,"BlenderbotForCausalLM"),jat.forEach(t),Y3o=r(s8e," (Blenderbot model)"),s8e.forEach(t),K3o=i(Q),Z_=n(Q,"LI",{});var l8e=s(Z_);vde=n(l8e,"STRONG",{});var Dat=s(vde);Z3o=r(Dat,"blenderbot-small"),Dat.forEach(t),ewo=r(l8e," \u2014 "),bj=n(l8e,"A",{href:!0});var Gat=s(bj);owo=r(Gat,"BlenderbotSmallForCausalLM"),Gat.forEach(t),rwo=r(l8e," (BlenderbotSmall model)"),l8e.forEach(t),two=i(Q),eb=n(Q,"LI",{});var i8e=s(eb);Fde=n(i8e,"STRONG",{});var Oat=s(Fde);awo=r(Oat,"camembert"),Oat.forEach(t),nwo=r(i8e," \u2014 "),vj=n(i8e,"A",{href:!0});var Vat=s(vj);swo=r(Vat,"CamembertForCausalLM"),Vat.forEach(t),lwo=r(i8e," (CamemBERT model)"),i8e.forEach(t),iwo=i(Q),ob=n(Q,"LI",{});var d8e=s(ob);Tde=n(d8e,"STRONG",{});var Xat=s(Tde);dwo=r(Xat,"ctrl"),Xat.forEach(t),cwo=r(d8e," \u2014 "),Fj=n(d8e,"A",{href:!0});var zat=s(Fj);mwo=r(zat,"CTRLLMHeadModel"),zat.forEach(t),fwo=r(d8e," (CTRL model)"),d8e.forEach(t),gwo=i(Q),rb=n(Q,"LI",{});var c8e=s(rb);Mde=n(c8e,"STRONG",{});var Wat=s(Mde);hwo=r(Wat,"data2vec-text"),Wat.forEach(t),uwo=r(c8e," \u2014 "),Tj=n(c8e,"A",{href:!0});var Qat=s(Tj);pwo=r(Qat,"Data2VecTextForCausalLM"),Qat.forEach(t),_wo=r(c8e," (Data2VecText model)"),c8e.forEach(t),bwo=i(Q),tb=n(Q,"LI",{});var m8e=s(tb);Ede=n(m8e,"STRONG",{});var Hat=s(Ede);vwo=r(Hat,"electra"),Hat.forEach(t),Fwo=r(m8e," \u2014 "),Mj=n(m8e,"A",{href:!0});var Uat=s(Mj);Two=r(Uat,"ElectraForCausalLM"),Uat.forEach(t),Mwo=r(m8e," (ELECTRA model)"),m8e.forEach(t),Ewo=i(Q),ab=n(Q,"LI",{});var f8e=s(ab);Cde=n(f8e,"STRONG",{});var Jat=s(Cde);Cwo=r(Jat,"gpt2"),Jat.forEach(t),wwo=r(f8e," \u2014 "),Ej=n(f8e,"A",{href:!0});var Yat=s(Ej);Awo=r(Yat,"GPT2LMHeadModel"),Yat.forEach(t),ywo=r(f8e," (OpenAI GPT-2 model)"),f8e.forEach(t),Lwo=i(Q),nb=n(Q,"LI",{});var g8e=s(nb);wde=n(g8e,"STRONG",{});var Kat=s(wde);xwo=r(Kat,"gpt_neo"),Kat.forEach(t),$wo=r(g8e," \u2014 "),Cj=n(g8e,"A",{href:!0});var Zat=s(Cj);kwo=r(Zat,"GPTNeoForCausalLM"),Zat.forEach(t),Swo=r(g8e," (GPT Neo model)"),g8e.forEach(t),Rwo=i(Q),sb=n(Q,"LI",{});var h8e=s(sb);Ade=n(h8e,"STRONG",{});var ent=s(Ade);Pwo=r(ent,"gptj"),ent.forEach(t),Bwo=r(h8e," \u2014 "),wj=n(h8e,"A",{href:!0});var ont=s(wj);Iwo=r(ont,"GPTJForCausalLM"),ont.forEach(t),qwo=r(h8e," (GPT-J model)"),h8e.forEach(t),Nwo=i(Q),lb=n(Q,"LI",{});var u8e=s(lb);yde=n(u8e,"STRONG",{});var rnt=s(yde);jwo=r(rnt,"marian"),rnt.forEach(t),Dwo=r(u8e," \u2014 "),Aj=n(u8e,"A",{href:!0});var tnt=s(Aj);Gwo=r(tnt,"MarianForCausalLM"),tnt.forEach(t),Owo=r(u8e," (Marian model)"),u8e.forEach(t),Vwo=i(Q),ib=n(Q,"LI",{});var p8e=s(ib);Lde=n(p8e,"STRONG",{});var ant=s(Lde);Xwo=r(ant,"mbart"),ant.forEach(t),zwo=r(p8e," \u2014 "),yj=n(p8e,"A",{href:!0});var nnt=s(yj);Wwo=r(nnt,"MBartForCausalLM"),nnt.forEach(t),Qwo=r(p8e," (mBART model)"),p8e.forEach(t),Hwo=i(Q),db=n(Q,"LI",{});var _8e=s(db);xde=n(_8e,"STRONG",{});var snt=s(xde);Uwo=r(snt,"megatron-bert"),snt.forEach(t),Jwo=r(_8e," \u2014 "),Lj=n(_8e,"A",{href:!0});var lnt=s(Lj);Ywo=r(lnt,"MegatronBertForCausalLM"),lnt.forEach(t),Kwo=r(_8e," (MegatronBert model)"),_8e.forEach(t),Zwo=i(Q),cb=n(Q,"LI",{});var b8e=s(cb);$de=n(b8e,"STRONG",{});var int=s($de);e0o=r(int,"openai-gpt"),int.forEach(t),o0o=r(b8e," \u2014 "),xj=n(b8e,"A",{href:!0});var dnt=s(xj);r0o=r(dnt,"OpenAIGPTLMHeadModel"),dnt.forEach(t),t0o=r(b8e," (OpenAI GPT model)"),b8e.forEach(t),a0o=i(Q),mb=n(Q,"LI",{});var v8e=s(mb);kde=n(v8e,"STRONG",{});var cnt=s(kde);n0o=r(cnt,"opt"),cnt.forEach(t),s0o=r(v8e," \u2014 "),$j=n(v8e,"A",{href:!0});var mnt=s($j);l0o=r(mnt,"OPTForCausalLM"),mnt.forEach(t),i0o=r(v8e," (OPT model)"),v8e.forEach(t),d0o=i(Q),fb=n(Q,"LI",{});var F8e=s(fb);Sde=n(F8e,"STRONG",{});var fnt=s(Sde);c0o=r(fnt,"pegasus"),fnt.forEach(t),m0o=r(F8e," \u2014 "),kj=n(F8e,"A",{href:!0});var gnt=s(kj);f0o=r(gnt,"PegasusForCausalLM"),gnt.forEach(t),g0o=r(F8e," (Pegasus model)"),F8e.forEach(t),h0o=i(Q),gb=n(Q,"LI",{});var T8e=s(gb);Rde=n(T8e,"STRONG",{});var hnt=s(Rde);u0o=r(hnt,"plbart"),hnt.forEach(t),p0o=r(T8e," \u2014 "),Sj=n(T8e,"A",{href:!0});var unt=s(Sj);_0o=r(unt,"PLBartForCausalLM"),unt.forEach(t),b0o=r(T8e," (PLBart model)"),T8e.forEach(t),v0o=i(Q),hb=n(Q,"LI",{});var M8e=s(hb);Pde=n(M8e,"STRONG",{});var pnt=s(Pde);F0o=r(pnt,"prophetnet"),pnt.forEach(t),T0o=r(M8e," \u2014 "),Rj=n(M8e,"A",{href:!0});var _nt=s(Rj);M0o=r(_nt,"ProphetNetForCausalLM"),_nt.forEach(t),E0o=r(M8e," (ProphetNet model)"),M8e.forEach(t),C0o=i(Q),ub=n(Q,"LI",{});var E8e=s(ub);Bde=n(E8e,"STRONG",{});var bnt=s(Bde);w0o=r(bnt,"qdqbert"),bnt.forEach(t),A0o=r(E8e," \u2014 "),Pj=n(E8e,"A",{href:!0});var vnt=s(Pj);y0o=r(vnt,"QDQBertLMHeadModel"),vnt.forEach(t),L0o=r(E8e," (QDQBert model)"),E8e.forEach(t),x0o=i(Q),pb=n(Q,"LI",{});var C8e=s(pb);Ide=n(C8e,"STRONG",{});var Fnt=s(Ide);$0o=r(Fnt,"reformer"),Fnt.forEach(t),k0o=r(C8e," \u2014 "),Bj=n(C8e,"A",{href:!0});var Tnt=s(Bj);S0o=r(Tnt,"ReformerModelWithLMHead"),Tnt.forEach(t),R0o=r(C8e," (Reformer model)"),C8e.forEach(t),P0o=i(Q),_b=n(Q,"LI",{});var w8e=s(_b);qde=n(w8e,"STRONG",{});var Mnt=s(qde);B0o=r(Mnt,"rembert"),Mnt.forEach(t),I0o=r(w8e," \u2014 "),Ij=n(w8e,"A",{href:!0});var Ent=s(Ij);q0o=r(Ent,"RemBertForCausalLM"),Ent.forEach(t),N0o=r(w8e," (RemBERT model)"),w8e.forEach(t),j0o=i(Q),bb=n(Q,"LI",{});var A8e=s(bb);Nde=n(A8e,"STRONG",{});var Cnt=s(Nde);D0o=r(Cnt,"roberta"),Cnt.forEach(t),G0o=r(A8e," \u2014 "),qj=n(A8e,"A",{href:!0});var wnt=s(qj);O0o=r(wnt,"RobertaForCausalLM"),wnt.forEach(t),V0o=r(A8e," (RoBERTa model)"),A8e.forEach(t),X0o=i(Q),vb=n(Q,"LI",{});var y8e=s(vb);jde=n(y8e,"STRONG",{});var Ant=s(jde);z0o=r(Ant,"roformer"),Ant.forEach(t),W0o=r(y8e," \u2014 "),Nj=n(y8e,"A",{href:!0});var ynt=s(Nj);Q0o=r(ynt,"RoFormerForCausalLM"),ynt.forEach(t),H0o=r(y8e," (RoFormer model)"),y8e.forEach(t),U0o=i(Q),Fb=n(Q,"LI",{});var L8e=s(Fb);Dde=n(L8e,"STRONG",{});var Lnt=s(Dde);J0o=r(Lnt,"speech_to_text_2"),Lnt.forEach(t),Y0o=r(L8e," \u2014 "),jj=n(L8e,"A",{href:!0});var xnt=s(jj);K0o=r(xnt,"Speech2Text2ForCausalLM"),xnt.forEach(t),Z0o=r(L8e," (Speech2Text2 model)"),L8e.forEach(t),eAo=i(Q),Tb=n(Q,"LI",{});var x8e=s(Tb);Gde=n(x8e,"STRONG",{});var $nt=s(Gde);oAo=r($nt,"transfo-xl"),$nt.forEach(t),rAo=r(x8e," \u2014 "),Dj=n(x8e,"A",{href:!0});var knt=s(Dj);tAo=r(knt,"TransfoXLLMHeadModel"),knt.forEach(t),aAo=r(x8e," (Transformer-XL model)"),x8e.forEach(t),nAo=i(Q),Mb=n(Q,"LI",{});var $8e=s(Mb);Ode=n($8e,"STRONG",{});var Snt=s(Ode);sAo=r(Snt,"trocr"),Snt.forEach(t),lAo=r($8e," \u2014 "),Gj=n($8e,"A",{href:!0});var Rnt=s(Gj);iAo=r(Rnt,"TrOCRForCausalLM"),Rnt.forEach(t),dAo=r($8e," (TrOCR model)"),$8e.forEach(t),cAo=i(Q),Eb=n(Q,"LI",{});var k8e=s(Eb);Vde=n(k8e,"STRONG",{});var Pnt=s(Vde);mAo=r(Pnt,"xglm"),Pnt.forEach(t),fAo=r(k8e," \u2014 "),Oj=n(k8e,"A",{href:!0});var Bnt=s(Oj);gAo=r(Bnt,"XGLMForCausalLM"),Bnt.forEach(t),hAo=r(k8e," (XGLM model)"),k8e.forEach(t),uAo=i(Q),Cb=n(Q,"LI",{});var S8e=s(Cb);Xde=n(S8e,"STRONG",{});var Int=s(Xde);pAo=r(Int,"xlm"),Int.forEach(t),_Ao=r(S8e," \u2014 "),Vj=n(S8e,"A",{href:!0});var qnt=s(Vj);bAo=r(qnt,"XLMWithLMHeadModel"),qnt.forEach(t),vAo=r(S8e," (XLM model)"),S8e.forEach(t),FAo=i(Q),wb=n(Q,"LI",{});var R8e=s(wb);zde=n(R8e,"STRONG",{});var Nnt=s(zde);TAo=r(Nnt,"xlm-prophetnet"),Nnt.forEach(t),MAo=r(R8e," \u2014 "),Xj=n(R8e,"A",{href:!0});var jnt=s(Xj);EAo=r(jnt,"XLMProphetNetForCausalLM"),jnt.forEach(t),CAo=r(R8e," (XLMProphetNet model)"),R8e.forEach(t),wAo=i(Q),Ab=n(Q,"LI",{});var P8e=s(Ab);Wde=n(P8e,"STRONG",{});var Dnt=s(Wde);AAo=r(Dnt,"xlm-roberta"),Dnt.forEach(t),yAo=r(P8e," \u2014 "),zj=n(P8e,"A",{href:!0});var Gnt=s(zj);LAo=r(Gnt,"XLMRobertaForCausalLM"),Gnt.forEach(t),xAo=r(P8e," (XLM-RoBERTa model)"),P8e.forEach(t),$Ao=i(Q),yb=n(Q,"LI",{});var B8e=s(yb);Qde=n(B8e,"STRONG",{});var Ont=s(Qde);kAo=r(Ont,"xlm-roberta-xl"),Ont.forEach(t),SAo=r(B8e," \u2014 "),Wj=n(B8e,"A",{href:!0});var Vnt=s(Wj);RAo=r(Vnt,"XLMRobertaXLForCausalLM"),Vnt.forEach(t),PAo=r(B8e," (XLM-RoBERTa-XL model)"),B8e.forEach(t),BAo=i(Q),Lb=n(Q,"LI",{});var I8e=s(Lb);Hde=n(I8e,"STRONG",{});var Xnt=s(Hde);IAo=r(Xnt,"xlnet"),Xnt.forEach(t),qAo=r(I8e," \u2014 "),Qj=n(I8e,"A",{href:!0});var znt=s(Qj);NAo=r(znt,"XLNetLMHeadModel"),znt.forEach(t),jAo=r(I8e," (XLNet model)"),I8e.forEach(t),Q.forEach(t),DAo=i(ta),xb=n(ta,"P",{});var q8e=s(xb);GAo=r(q8e,"The model is set in evaluation mode by default using "),Ude=n(q8e,"CODE",{});var Wnt=s(Ude);OAo=r(Wnt,"model.eval()"),Wnt.forEach(t),VAo=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jde=n(q8e,"CODE",{});var Qnt=s(Jde);XAo=r(Qnt,"model.train()"),Qnt.forEach(t),q8e.forEach(t),zAo=i(ta),T($b.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Yqe=i(m),Pi=n(m,"H2",{class:!0});var oDe=s(Pi);kb=n(oDe,"A",{id:!0,class:!0,href:!0});var Hnt=s(kb);Yde=n(Hnt,"SPAN",{});var Unt=s(Yde);T(dL.$$.fragment,Unt),Unt.forEach(t),Hnt.forEach(t),WAo=i(oDe),Kde=n(oDe,"SPAN",{});var Jnt=s(Kde);QAo=r(Jnt,"AutoModelForMaskedLM"),Jnt.forEach(t),oDe.forEach(t),Kqe=i(m),ko=n(m,"DIV",{class:!0});var Xs=s(ko);T(cL.$$.fragment,Xs),HAo=i(Xs),Bi=n(Xs,"P",{});var mZ=s(Bi);UAo=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Hj=n(mZ,"A",{href:!0});var Ynt=s(Hj);JAo=r(Ynt,"from_pretrained()"),Ynt.forEach(t),YAo=r(mZ," class method or the "),Uj=n(mZ,"A",{href:!0});var Knt=s(Uj);KAo=r(Knt,"from_config()"),Knt.forEach(t),ZAo=r(mZ,` class
method.`),mZ.forEach(t),e6o=i(Xs),mL=n(Xs,"P",{});var rDe=s(mL);o6o=r(rDe,"This class cannot be instantiated directly using "),Zde=n(rDe,"CODE",{});var Znt=s(Zde);r6o=r(Znt,"__init__()"),Znt.forEach(t),t6o=r(rDe," (throws an error)."),rDe.forEach(t),a6o=i(Xs),st=n(Xs,"DIV",{class:!0});var SA=s(st);T(fL.$$.fragment,SA),n6o=i(SA),ece=n(SA,"P",{});var est=s(ece);s6o=r(est,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),est.forEach(t),l6o=i(SA),Ii=n(SA,"P",{});var fZ=s(Ii);i6o=r(fZ,`Note:
Loading a model from its configuration file does `),oce=n(fZ,"STRONG",{});var ost=s(oce);d6o=r(ost,"not"),ost.forEach(t),c6o=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=n(fZ,"A",{href:!0});var rst=s(Jj);m6o=r(rst,"from_pretrained()"),rst.forEach(t),f6o=r(fZ," to load the model weights."),fZ.forEach(t),g6o=i(SA),T(Sb.$$.fragment,SA),SA.forEach(t),h6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(gL.$$.fragment,aa),u6o=i(aa),rce=n(aa,"P",{});var tst=s(rce);p6o=r(tst,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tst.forEach(t),_6o=i(aa),ka=n(aa,"P",{});var RA=s(ka);b6o=r(RA,"The model class to instantiate is selected based on the "),tce=n(RA,"CODE",{});var ast=s(tce);v6o=r(ast,"model_type"),ast.forEach(t),F6o=r(RA,` property of the config object (either
passed as an argument or loaded from `),ace=n(RA,"CODE",{});var nst=s(ace);T6o=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),M6o=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nce=n(RA,"CODE",{});var sst=s(nce);E6o=r(sst,"pretrained_model_name_or_path"),sst.forEach(t),C6o=r(RA,":"),RA.forEach(t),w6o=i(aa),W=n(aa,"UL",{});var U=s(W);Rb=n(U,"LI",{});var N8e=s(Rb);sce=n(N8e,"STRONG",{});var lst=s(sce);A6o=r(lst,"albert"),lst.forEach(t),y6o=r(N8e," \u2014 "),Yj=n(N8e,"A",{href:!0});var ist=s(Yj);L6o=r(ist,"AlbertForMaskedLM"),ist.forEach(t),x6o=r(N8e," (ALBERT model)"),N8e.forEach(t),$6o=i(U),Pb=n(U,"LI",{});var j8e=s(Pb);lce=n(j8e,"STRONG",{});var dst=s(lce);k6o=r(dst,"bart"),dst.forEach(t),S6o=r(j8e," \u2014 "),Kj=n(j8e,"A",{href:!0});var cst=s(Kj);R6o=r(cst,"BartForConditionalGeneration"),cst.forEach(t),P6o=r(j8e," (BART model)"),j8e.forEach(t),B6o=i(U),Bb=n(U,"LI",{});var D8e=s(Bb);ice=n(D8e,"STRONG",{});var mst=s(ice);I6o=r(mst,"bert"),mst.forEach(t),q6o=r(D8e," \u2014 "),Zj=n(D8e,"A",{href:!0});var fst=s(Zj);N6o=r(fst,"BertForMaskedLM"),fst.forEach(t),j6o=r(D8e," (BERT model)"),D8e.forEach(t),D6o=i(U),Ib=n(U,"LI",{});var G8e=s(Ib);dce=n(G8e,"STRONG",{});var gst=s(dce);G6o=r(gst,"big_bird"),gst.forEach(t),O6o=r(G8e," \u2014 "),eD=n(G8e,"A",{href:!0});var hst=s(eD);V6o=r(hst,"BigBirdForMaskedLM"),hst.forEach(t),X6o=r(G8e," (BigBird model)"),G8e.forEach(t),z6o=i(U),qb=n(U,"LI",{});var O8e=s(qb);cce=n(O8e,"STRONG",{});var ust=s(cce);W6o=r(ust,"camembert"),ust.forEach(t),Q6o=r(O8e," \u2014 "),oD=n(O8e,"A",{href:!0});var pst=s(oD);H6o=r(pst,"CamembertForMaskedLM"),pst.forEach(t),U6o=r(O8e," (CamemBERT model)"),O8e.forEach(t),J6o=i(U),Nb=n(U,"LI",{});var V8e=s(Nb);mce=n(V8e,"STRONG",{});var _st=s(mce);Y6o=r(_st,"convbert"),_st.forEach(t),K6o=r(V8e," \u2014 "),rD=n(V8e,"A",{href:!0});var bst=s(rD);Z6o=r(bst,"ConvBertForMaskedLM"),bst.forEach(t),eyo=r(V8e," (ConvBERT model)"),V8e.forEach(t),oyo=i(U),jb=n(U,"LI",{});var X8e=s(jb);fce=n(X8e,"STRONG",{});var vst=s(fce);ryo=r(vst,"data2vec-text"),vst.forEach(t),tyo=r(X8e," \u2014 "),tD=n(X8e,"A",{href:!0});var Fst=s(tD);ayo=r(Fst,"Data2VecTextForMaskedLM"),Fst.forEach(t),nyo=r(X8e," (Data2VecText model)"),X8e.forEach(t),syo=i(U),Db=n(U,"LI",{});var z8e=s(Db);gce=n(z8e,"STRONG",{});var Tst=s(gce);lyo=r(Tst,"deberta"),Tst.forEach(t),iyo=r(z8e," \u2014 "),aD=n(z8e,"A",{href:!0});var Mst=s(aD);dyo=r(Mst,"DebertaForMaskedLM"),Mst.forEach(t),cyo=r(z8e," (DeBERTa model)"),z8e.forEach(t),myo=i(U),Gb=n(U,"LI",{});var W8e=s(Gb);hce=n(W8e,"STRONG",{});var Est=s(hce);fyo=r(Est,"deberta-v2"),Est.forEach(t),gyo=r(W8e," \u2014 "),nD=n(W8e,"A",{href:!0});var Cst=s(nD);hyo=r(Cst,"DebertaV2ForMaskedLM"),Cst.forEach(t),uyo=r(W8e," (DeBERTa-v2 model)"),W8e.forEach(t),pyo=i(U),Ob=n(U,"LI",{});var Q8e=s(Ob);uce=n(Q8e,"STRONG",{});var wst=s(uce);_yo=r(wst,"distilbert"),wst.forEach(t),byo=r(Q8e," \u2014 "),sD=n(Q8e,"A",{href:!0});var Ast=s(sD);vyo=r(Ast,"DistilBertForMaskedLM"),Ast.forEach(t),Fyo=r(Q8e," (DistilBERT model)"),Q8e.forEach(t),Tyo=i(U),Vb=n(U,"LI",{});var H8e=s(Vb);pce=n(H8e,"STRONG",{});var yst=s(pce);Myo=r(yst,"electra"),yst.forEach(t),Eyo=r(H8e," \u2014 "),lD=n(H8e,"A",{href:!0});var Lst=s(lD);Cyo=r(Lst,"ElectraForMaskedLM"),Lst.forEach(t),wyo=r(H8e," (ELECTRA model)"),H8e.forEach(t),Ayo=i(U),Xb=n(U,"LI",{});var U8e=s(Xb);_ce=n(U8e,"STRONG",{});var xst=s(_ce);yyo=r(xst,"flaubert"),xst.forEach(t),Lyo=r(U8e," \u2014 "),iD=n(U8e,"A",{href:!0});var $st=s(iD);xyo=r($st,"FlaubertWithLMHeadModel"),$st.forEach(t),$yo=r(U8e," (FlauBERT model)"),U8e.forEach(t),kyo=i(U),zb=n(U,"LI",{});var J8e=s(zb);bce=n(J8e,"STRONG",{});var kst=s(bce);Syo=r(kst,"fnet"),kst.forEach(t),Ryo=r(J8e," \u2014 "),dD=n(J8e,"A",{href:!0});var Sst=s(dD);Pyo=r(Sst,"FNetForMaskedLM"),Sst.forEach(t),Byo=r(J8e," (FNet model)"),J8e.forEach(t),Iyo=i(U),Wb=n(U,"LI",{});var Y8e=s(Wb);vce=n(Y8e,"STRONG",{});var Rst=s(vce);qyo=r(Rst,"funnel"),Rst.forEach(t),Nyo=r(Y8e," \u2014 "),cD=n(Y8e,"A",{href:!0});var Pst=s(cD);jyo=r(Pst,"FunnelForMaskedLM"),Pst.forEach(t),Dyo=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),Gyo=i(U),Qb=n(U,"LI",{});var K8e=s(Qb);Fce=n(K8e,"STRONG",{});var Bst=s(Fce);Oyo=r(Bst,"ibert"),Bst.forEach(t),Vyo=r(K8e," \u2014 "),mD=n(K8e,"A",{href:!0});var Ist=s(mD);Xyo=r(Ist,"IBertForMaskedLM"),Ist.forEach(t),zyo=r(K8e," (I-BERT model)"),K8e.forEach(t),Wyo=i(U),Hb=n(U,"LI",{});var Z8e=s(Hb);Tce=n(Z8e,"STRONG",{});var qst=s(Tce);Qyo=r(qst,"layoutlm"),qst.forEach(t),Hyo=r(Z8e," \u2014 "),fD=n(Z8e,"A",{href:!0});var Nst=s(fD);Uyo=r(Nst,"LayoutLMForMaskedLM"),Nst.forEach(t),Jyo=r(Z8e," (LayoutLM model)"),Z8e.forEach(t),Yyo=i(U),Ub=n(U,"LI",{});var e7e=s(Ub);Mce=n(e7e,"STRONG",{});var jst=s(Mce);Kyo=r(jst,"longformer"),jst.forEach(t),Zyo=r(e7e," \u2014 "),gD=n(e7e,"A",{href:!0});var Dst=s(gD);eLo=r(Dst,"LongformerForMaskedLM"),Dst.forEach(t),oLo=r(e7e," (Longformer model)"),e7e.forEach(t),rLo=i(U),Jb=n(U,"LI",{});var o7e=s(Jb);Ece=n(o7e,"STRONG",{});var Gst=s(Ece);tLo=r(Gst,"mbart"),Gst.forEach(t),aLo=r(o7e," \u2014 "),hD=n(o7e,"A",{href:!0});var Ost=s(hD);nLo=r(Ost,"MBartForConditionalGeneration"),Ost.forEach(t),sLo=r(o7e," (mBART model)"),o7e.forEach(t),lLo=i(U),Yb=n(U,"LI",{});var r7e=s(Yb);Cce=n(r7e,"STRONG",{});var Vst=s(Cce);iLo=r(Vst,"megatron-bert"),Vst.forEach(t),dLo=r(r7e," \u2014 "),uD=n(r7e,"A",{href:!0});var Xst=s(uD);cLo=r(Xst,"MegatronBertForMaskedLM"),Xst.forEach(t),mLo=r(r7e," (MegatronBert model)"),r7e.forEach(t),fLo=i(U),Kb=n(U,"LI",{});var t7e=s(Kb);wce=n(t7e,"STRONG",{});var zst=s(wce);gLo=r(zst,"mobilebert"),zst.forEach(t),hLo=r(t7e," \u2014 "),pD=n(t7e,"A",{href:!0});var Wst=s(pD);uLo=r(Wst,"MobileBertForMaskedLM"),Wst.forEach(t),pLo=r(t7e," (MobileBERT model)"),t7e.forEach(t),_Lo=i(U),Zb=n(U,"LI",{});var a7e=s(Zb);Ace=n(a7e,"STRONG",{});var Qst=s(Ace);bLo=r(Qst,"mpnet"),Qst.forEach(t),vLo=r(a7e," \u2014 "),_D=n(a7e,"A",{href:!0});var Hst=s(_D);FLo=r(Hst,"MPNetForMaskedLM"),Hst.forEach(t),TLo=r(a7e," (MPNet model)"),a7e.forEach(t),MLo=i(U),e2=n(U,"LI",{});var n7e=s(e2);yce=n(n7e,"STRONG",{});var Ust=s(yce);ELo=r(Ust,"nystromformer"),Ust.forEach(t),CLo=r(n7e," \u2014 "),bD=n(n7e,"A",{href:!0});var Jst=s(bD);wLo=r(Jst,"NystromformerForMaskedLM"),Jst.forEach(t),ALo=r(n7e," (Nystromformer model)"),n7e.forEach(t),yLo=i(U),o2=n(U,"LI",{});var s7e=s(o2);Lce=n(s7e,"STRONG",{});var Yst=s(Lce);LLo=r(Yst,"perceiver"),Yst.forEach(t),xLo=r(s7e," \u2014 "),vD=n(s7e,"A",{href:!0});var Kst=s(vD);$Lo=r(Kst,"PerceiverForMaskedLM"),Kst.forEach(t),kLo=r(s7e," (Perceiver model)"),s7e.forEach(t),SLo=i(U),r2=n(U,"LI",{});var l7e=s(r2);xce=n(l7e,"STRONG",{});var Zst=s(xce);RLo=r(Zst,"qdqbert"),Zst.forEach(t),PLo=r(l7e," \u2014 "),FD=n(l7e,"A",{href:!0});var elt=s(FD);BLo=r(elt,"QDQBertForMaskedLM"),elt.forEach(t),ILo=r(l7e," (QDQBert model)"),l7e.forEach(t),qLo=i(U),t2=n(U,"LI",{});var i7e=s(t2);$ce=n(i7e,"STRONG",{});var olt=s($ce);NLo=r(olt,"reformer"),olt.forEach(t),jLo=r(i7e," \u2014 "),TD=n(i7e,"A",{href:!0});var rlt=s(TD);DLo=r(rlt,"ReformerForMaskedLM"),rlt.forEach(t),GLo=r(i7e," (Reformer model)"),i7e.forEach(t),OLo=i(U),a2=n(U,"LI",{});var d7e=s(a2);kce=n(d7e,"STRONG",{});var tlt=s(kce);VLo=r(tlt,"rembert"),tlt.forEach(t),XLo=r(d7e," \u2014 "),MD=n(d7e,"A",{href:!0});var alt=s(MD);zLo=r(alt,"RemBertForMaskedLM"),alt.forEach(t),WLo=r(d7e," (RemBERT model)"),d7e.forEach(t),QLo=i(U),n2=n(U,"LI",{});var c7e=s(n2);Sce=n(c7e,"STRONG",{});var nlt=s(Sce);HLo=r(nlt,"roberta"),nlt.forEach(t),ULo=r(c7e," \u2014 "),ED=n(c7e,"A",{href:!0});var slt=s(ED);JLo=r(slt,"RobertaForMaskedLM"),slt.forEach(t),YLo=r(c7e," (RoBERTa model)"),c7e.forEach(t),KLo=i(U),s2=n(U,"LI",{});var m7e=s(s2);Rce=n(m7e,"STRONG",{});var llt=s(Rce);ZLo=r(llt,"roformer"),llt.forEach(t),e8o=r(m7e," \u2014 "),CD=n(m7e,"A",{href:!0});var ilt=s(CD);o8o=r(ilt,"RoFormerForMaskedLM"),ilt.forEach(t),r8o=r(m7e," (RoFormer model)"),m7e.forEach(t),t8o=i(U),l2=n(U,"LI",{});var f7e=s(l2);Pce=n(f7e,"STRONG",{});var dlt=s(Pce);a8o=r(dlt,"squeezebert"),dlt.forEach(t),n8o=r(f7e," \u2014 "),wD=n(f7e,"A",{href:!0});var clt=s(wD);s8o=r(clt,"SqueezeBertForMaskedLM"),clt.forEach(t),l8o=r(f7e," (SqueezeBERT model)"),f7e.forEach(t),i8o=i(U),i2=n(U,"LI",{});var g7e=s(i2);Bce=n(g7e,"STRONG",{});var mlt=s(Bce);d8o=r(mlt,"tapas"),mlt.forEach(t),c8o=r(g7e," \u2014 "),AD=n(g7e,"A",{href:!0});var flt=s(AD);m8o=r(flt,"TapasForMaskedLM"),flt.forEach(t),f8o=r(g7e," (TAPAS model)"),g7e.forEach(t),g8o=i(U),d2=n(U,"LI",{});var h7e=s(d2);Ice=n(h7e,"STRONG",{});var glt=s(Ice);h8o=r(glt,"wav2vec2"),glt.forEach(t),u8o=r(h7e," \u2014 "),qce=n(h7e,"CODE",{});var hlt=s(qce);p8o=r(hlt,"Wav2Vec2ForMaskedLM"),hlt.forEach(t),_8o=r(h7e," (Wav2Vec2 model)"),h7e.forEach(t),b8o=i(U),c2=n(U,"LI",{});var u7e=s(c2);Nce=n(u7e,"STRONG",{});var ult=s(Nce);v8o=r(ult,"xlm"),ult.forEach(t),F8o=r(u7e," \u2014 "),yD=n(u7e,"A",{href:!0});var plt=s(yD);T8o=r(plt,"XLMWithLMHeadModel"),plt.forEach(t),M8o=r(u7e," (XLM model)"),u7e.forEach(t),E8o=i(U),m2=n(U,"LI",{});var p7e=s(m2);jce=n(p7e,"STRONG",{});var _lt=s(jce);C8o=r(_lt,"xlm-roberta"),_lt.forEach(t),w8o=r(p7e," \u2014 "),LD=n(p7e,"A",{href:!0});var blt=s(LD);A8o=r(blt,"XLMRobertaForMaskedLM"),blt.forEach(t),y8o=r(p7e," (XLM-RoBERTa model)"),p7e.forEach(t),L8o=i(U),f2=n(U,"LI",{});var _7e=s(f2);Dce=n(_7e,"STRONG",{});var vlt=s(Dce);x8o=r(vlt,"xlm-roberta-xl"),vlt.forEach(t),$8o=r(_7e," \u2014 "),xD=n(_7e,"A",{href:!0});var Flt=s(xD);k8o=r(Flt,"XLMRobertaXLForMaskedLM"),Flt.forEach(t),S8o=r(_7e," (XLM-RoBERTa-XL model)"),_7e.forEach(t),R8o=i(U),g2=n(U,"LI",{});var b7e=s(g2);Gce=n(b7e,"STRONG",{});var Tlt=s(Gce);P8o=r(Tlt,"yoso"),Tlt.forEach(t),B8o=r(b7e," \u2014 "),$D=n(b7e,"A",{href:!0});var Mlt=s($D);I8o=r(Mlt,"YosoForMaskedLM"),Mlt.forEach(t),q8o=r(b7e," (YOSO model)"),b7e.forEach(t),U.forEach(t),N8o=i(aa),h2=n(aa,"P",{});var v7e=s(h2);j8o=r(v7e,"The model is set in evaluation mode by default using "),Oce=n(v7e,"CODE",{});var Elt=s(Oce);D8o=r(Elt,"model.eval()"),Elt.forEach(t),G8o=r(v7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vce=n(v7e,"CODE",{});var Clt=s(Vce);O8o=r(Clt,"model.train()"),Clt.forEach(t),v7e.forEach(t),V8o=i(aa),T(u2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Zqe=i(m),qi=n(m,"H2",{class:!0});var tDe=s(qi);p2=n(tDe,"A",{id:!0,class:!0,href:!0});var wlt=s(p2);Xce=n(wlt,"SPAN",{});var Alt=s(Xce);T(hL.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),X8o=i(tDe),zce=n(tDe,"SPAN",{});var ylt=s(zce);z8o=r(ylt,"AutoModelForSeq2SeqLM"),ylt.forEach(t),tDe.forEach(t),eNe=i(m),So=n(m,"DIV",{class:!0});var zs=s(So);T(uL.$$.fragment,zs),W8o=i(zs),Ni=n(zs,"P",{});var gZ=s(Ni);Q8o=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kD=n(gZ,"A",{href:!0});var Llt=s(kD);H8o=r(Llt,"from_pretrained()"),Llt.forEach(t),U8o=r(gZ," class method or the "),SD=n(gZ,"A",{href:!0});var xlt=s(SD);J8o=r(xlt,"from_config()"),xlt.forEach(t),Y8o=r(gZ,` class
method.`),gZ.forEach(t),K8o=i(zs),pL=n(zs,"P",{});var aDe=s(pL);Z8o=r(aDe,"This class cannot be instantiated directly using "),Wce=n(aDe,"CODE",{});var $lt=s(Wce);e7o=r($lt,"__init__()"),$lt.forEach(t),o7o=r(aDe," (throws an error)."),aDe.forEach(t),r7o=i(zs),lt=n(zs,"DIV",{class:!0});var PA=s(lt);T(_L.$$.fragment,PA),t7o=i(PA),Qce=n(PA,"P",{});var klt=s(Qce);a7o=r(klt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),klt.forEach(t),n7o=i(PA),ji=n(PA,"P",{});var hZ=s(ji);s7o=r(hZ,`Note:
Loading a model from its configuration file does `),Hce=n(hZ,"STRONG",{});var Slt=s(Hce);l7o=r(Slt,"not"),Slt.forEach(t),i7o=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=n(hZ,"A",{href:!0});var Rlt=s(RD);d7o=r(Rlt,"from_pretrained()"),Rlt.forEach(t),c7o=r(hZ," to load the model weights."),hZ.forEach(t),m7o=i(PA),T(_2.$$.fragment,PA),PA.forEach(t),f7o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(bL.$$.fragment,na),g7o=i(na),Uce=n(na,"P",{});var Plt=s(Uce);h7o=r(Plt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Plt.forEach(t),u7o=i(na),Sa=n(na,"P",{});var BA=s(Sa);p7o=r(BA,"The model class to instantiate is selected based on the "),Jce=n(BA,"CODE",{});var Blt=s(Jce);_7o=r(Blt,"model_type"),Blt.forEach(t),b7o=r(BA,` property of the config object (either
passed as an argument or loaded from `),Yce=n(BA,"CODE",{});var Ilt=s(Yce);v7o=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),F7o=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kce=n(BA,"CODE",{});var qlt=s(Kce);T7o=r(qlt,"pretrained_model_name_or_path"),qlt.forEach(t),M7o=r(BA,":"),BA.forEach(t),E7o=i(na),pe=n(na,"UL",{});var ve=s(pe);b2=n(ve,"LI",{});var F7e=s(b2);Zce=n(F7e,"STRONG",{});var Nlt=s(Zce);C7o=r(Nlt,"bart"),Nlt.forEach(t),w7o=r(F7e," \u2014 "),PD=n(F7e,"A",{href:!0});var jlt=s(PD);A7o=r(jlt,"BartForConditionalGeneration"),jlt.forEach(t),y7o=r(F7e," (BART model)"),F7e.forEach(t),L7o=i(ve),v2=n(ve,"LI",{});var T7e=s(v2);eme=n(T7e,"STRONG",{});var Dlt=s(eme);x7o=r(Dlt,"bigbird_pegasus"),Dlt.forEach(t),$7o=r(T7e," \u2014 "),BD=n(T7e,"A",{href:!0});var Glt=s(BD);k7o=r(Glt,"BigBirdPegasusForConditionalGeneration"),Glt.forEach(t),S7o=r(T7e," (BigBirdPegasus model)"),T7e.forEach(t),R7o=i(ve),F2=n(ve,"LI",{});var M7e=s(F2);ome=n(M7e,"STRONG",{});var Olt=s(ome);P7o=r(Olt,"blenderbot"),Olt.forEach(t),B7o=r(M7e," \u2014 "),ID=n(M7e,"A",{href:!0});var Vlt=s(ID);I7o=r(Vlt,"BlenderbotForConditionalGeneration"),Vlt.forEach(t),q7o=r(M7e," (Blenderbot model)"),M7e.forEach(t),N7o=i(ve),T2=n(ve,"LI",{});var E7e=s(T2);rme=n(E7e,"STRONG",{});var Xlt=s(rme);j7o=r(Xlt,"blenderbot-small"),Xlt.forEach(t),D7o=r(E7e," \u2014 "),qD=n(E7e,"A",{href:!0});var zlt=s(qD);G7o=r(zlt,"BlenderbotSmallForConditionalGeneration"),zlt.forEach(t),O7o=r(E7e," (BlenderbotSmall model)"),E7e.forEach(t),V7o=i(ve),M2=n(ve,"LI",{});var C7e=s(M2);tme=n(C7e,"STRONG",{});var Wlt=s(tme);X7o=r(Wlt,"encoder-decoder"),Wlt.forEach(t),z7o=r(C7e," \u2014 "),ND=n(C7e,"A",{href:!0});var Qlt=s(ND);W7o=r(Qlt,"EncoderDecoderModel"),Qlt.forEach(t),Q7o=r(C7e," (Encoder decoder model)"),C7e.forEach(t),H7o=i(ve),E2=n(ve,"LI",{});var w7e=s(E2);ame=n(w7e,"STRONG",{});var Hlt=s(ame);U7o=r(Hlt,"fsmt"),Hlt.forEach(t),J7o=r(w7e," \u2014 "),jD=n(w7e,"A",{href:!0});var Ult=s(jD);Y7o=r(Ult,"FSMTForConditionalGeneration"),Ult.forEach(t),K7o=r(w7e," (FairSeq Machine-Translation model)"),w7e.forEach(t),Z7o=i(ve),C2=n(ve,"LI",{});var A7e=s(C2);nme=n(A7e,"STRONG",{});var Jlt=s(nme);e9o=r(Jlt,"led"),Jlt.forEach(t),o9o=r(A7e," \u2014 "),DD=n(A7e,"A",{href:!0});var Ylt=s(DD);r9o=r(Ylt,"LEDForConditionalGeneration"),Ylt.forEach(t),t9o=r(A7e," (LED model)"),A7e.forEach(t),a9o=i(ve),w2=n(ve,"LI",{});var y7e=s(w2);sme=n(y7e,"STRONG",{});var Klt=s(sme);n9o=r(Klt,"m2m_100"),Klt.forEach(t),s9o=r(y7e," \u2014 "),GD=n(y7e,"A",{href:!0});var Zlt=s(GD);l9o=r(Zlt,"M2M100ForConditionalGeneration"),Zlt.forEach(t),i9o=r(y7e," (M2M100 model)"),y7e.forEach(t),d9o=i(ve),A2=n(ve,"LI",{});var L7e=s(A2);lme=n(L7e,"STRONG",{});var eit=s(lme);c9o=r(eit,"marian"),eit.forEach(t),m9o=r(L7e," \u2014 "),OD=n(L7e,"A",{href:!0});var oit=s(OD);f9o=r(oit,"MarianMTModel"),oit.forEach(t),g9o=r(L7e," (Marian model)"),L7e.forEach(t),h9o=i(ve),y2=n(ve,"LI",{});var x7e=s(y2);ime=n(x7e,"STRONG",{});var rit=s(ime);u9o=r(rit,"mbart"),rit.forEach(t),p9o=r(x7e," \u2014 "),VD=n(x7e,"A",{href:!0});var tit=s(VD);_9o=r(tit,"MBartForConditionalGeneration"),tit.forEach(t),b9o=r(x7e," (mBART model)"),x7e.forEach(t),v9o=i(ve),L2=n(ve,"LI",{});var $7e=s(L2);dme=n($7e,"STRONG",{});var ait=s(dme);F9o=r(ait,"mt5"),ait.forEach(t),T9o=r($7e," \u2014 "),XD=n($7e,"A",{href:!0});var nit=s(XD);M9o=r(nit,"MT5ForConditionalGeneration"),nit.forEach(t),E9o=r($7e," (mT5 model)"),$7e.forEach(t),C9o=i(ve),x2=n(ve,"LI",{});var k7e=s(x2);cme=n(k7e,"STRONG",{});var sit=s(cme);w9o=r(sit,"pegasus"),sit.forEach(t),A9o=r(k7e," \u2014 "),zD=n(k7e,"A",{href:!0});var lit=s(zD);y9o=r(lit,"PegasusForConditionalGeneration"),lit.forEach(t),L9o=r(k7e," (Pegasus model)"),k7e.forEach(t),x9o=i(ve),$2=n(ve,"LI",{});var S7e=s($2);mme=n(S7e,"STRONG",{});var iit=s(mme);$9o=r(iit,"plbart"),iit.forEach(t),k9o=r(S7e," \u2014 "),WD=n(S7e,"A",{href:!0});var dit=s(WD);S9o=r(dit,"PLBartForConditionalGeneration"),dit.forEach(t),R9o=r(S7e," (PLBart model)"),S7e.forEach(t),P9o=i(ve),k2=n(ve,"LI",{});var R7e=s(k2);fme=n(R7e,"STRONG",{});var cit=s(fme);B9o=r(cit,"prophetnet"),cit.forEach(t),I9o=r(R7e," \u2014 "),QD=n(R7e,"A",{href:!0});var mit=s(QD);q9o=r(mit,"ProphetNetForConditionalGeneration"),mit.forEach(t),N9o=r(R7e," (ProphetNet model)"),R7e.forEach(t),j9o=i(ve),S2=n(ve,"LI",{});var P7e=s(S2);gme=n(P7e,"STRONG",{});var fit=s(gme);D9o=r(fit,"t5"),fit.forEach(t),G9o=r(P7e," \u2014 "),HD=n(P7e,"A",{href:!0});var git=s(HD);O9o=r(git,"T5ForConditionalGeneration"),git.forEach(t),V9o=r(P7e," (T5 model)"),P7e.forEach(t),X9o=i(ve),R2=n(ve,"LI",{});var B7e=s(R2);hme=n(B7e,"STRONG",{});var hit=s(hme);z9o=r(hit,"xlm-prophetnet"),hit.forEach(t),W9o=r(B7e," \u2014 "),UD=n(B7e,"A",{href:!0});var uit=s(UD);Q9o=r(uit,"XLMProphetNetForConditionalGeneration"),uit.forEach(t),H9o=r(B7e," (XLMProphetNet model)"),B7e.forEach(t),ve.forEach(t),U9o=i(na),P2=n(na,"P",{});var I7e=s(P2);J9o=r(I7e,"The model is set in evaluation mode by default using "),ume=n(I7e,"CODE",{});var pit=s(ume);Y9o=r(pit,"model.eval()"),pit.forEach(t),K9o=r(I7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(I7e,"CODE",{});var _it=s(pme);Z9o=r(_it,"model.train()"),_it.forEach(t),I7e.forEach(t),exo=i(na),T(B2.$$.fragment,na),na.forEach(t),zs.forEach(t),oNe=i(m),Di=n(m,"H2",{class:!0});var nDe=s(Di);I2=n(nDe,"A",{id:!0,class:!0,href:!0});var bit=s(I2);_me=n(bit,"SPAN",{});var vit=s(_me);T(vL.$$.fragment,vit),vit.forEach(t),bit.forEach(t),oxo=i(nDe),bme=n(nDe,"SPAN",{});var Fit=s(bme);rxo=r(Fit,"AutoModelForSequenceClassification"),Fit.forEach(t),nDe.forEach(t),rNe=i(m),Ro=n(m,"DIV",{class:!0});var Ws=s(Ro);T(FL.$$.fragment,Ws),txo=i(Ws),Gi=n(Ws,"P",{});var uZ=s(Gi);axo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),JD=n(uZ,"A",{href:!0});var Tit=s(JD);nxo=r(Tit,"from_pretrained()"),Tit.forEach(t),sxo=r(uZ," class method or the "),YD=n(uZ,"A",{href:!0});var Mit=s(YD);lxo=r(Mit,"from_config()"),Mit.forEach(t),ixo=r(uZ,` class
method.`),uZ.forEach(t),dxo=i(Ws),TL=n(Ws,"P",{});var sDe=s(TL);cxo=r(sDe,"This class cannot be instantiated directly using "),vme=n(sDe,"CODE",{});var Eit=s(vme);mxo=r(Eit,"__init__()"),Eit.forEach(t),fxo=r(sDe," (throws an error)."),sDe.forEach(t),gxo=i(Ws),it=n(Ws,"DIV",{class:!0});var IA=s(it);T(ML.$$.fragment,IA),hxo=i(IA),Fme=n(IA,"P",{});var Cit=s(Fme);uxo=r(Cit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cit.forEach(t),pxo=i(IA),Oi=n(IA,"P",{});var pZ=s(Oi);_xo=r(pZ,`Note:
Loading a model from its configuration file does `),Tme=n(pZ,"STRONG",{});var wit=s(Tme);bxo=r(wit,"not"),wit.forEach(t),vxo=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(pZ,"A",{href:!0});var Ait=s(KD);Fxo=r(Ait,"from_pretrained()"),Ait.forEach(t),Txo=r(pZ," to load the model weights."),pZ.forEach(t),Mxo=i(IA),T(q2.$$.fragment,IA),IA.forEach(t),Exo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(EL.$$.fragment,sa),Cxo=i(sa),Mme=n(sa,"P",{});var yit=s(Mme);wxo=r(yit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yit.forEach(t),Axo=i(sa),Ra=n(sa,"P",{});var qA=s(Ra);yxo=r(qA,"The model class to instantiate is selected based on the "),Eme=n(qA,"CODE",{});var Lit=s(Eme);Lxo=r(Lit,"model_type"),Lit.forEach(t),xxo=r(qA,` property of the config object (either
passed as an argument or loaded from `),Cme=n(qA,"CODE",{});var xit=s(Cme);$xo=r(xit,"pretrained_model_name_or_path"),xit.forEach(t),kxo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(qA,"CODE",{});var $it=s(wme);Sxo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),Rxo=r(qA,":"),qA.forEach(t),Pxo=i(sa),q=n(sa,"UL",{});var j=s(q);N2=n(j,"LI",{});var q7e=s(N2);Ame=n(q7e,"STRONG",{});var kit=s(Ame);Bxo=r(kit,"albert"),kit.forEach(t),Ixo=r(q7e," \u2014 "),ZD=n(q7e,"A",{href:!0});var Sit=s(ZD);qxo=r(Sit,"AlbertForSequenceClassification"),Sit.forEach(t),Nxo=r(q7e," (ALBERT model)"),q7e.forEach(t),jxo=i(j),j2=n(j,"LI",{});var N7e=s(j2);yme=n(N7e,"STRONG",{});var Rit=s(yme);Dxo=r(Rit,"bart"),Rit.forEach(t),Gxo=r(N7e," \u2014 "),eG=n(N7e,"A",{href:!0});var Pit=s(eG);Oxo=r(Pit,"BartForSequenceClassification"),Pit.forEach(t),Vxo=r(N7e," (BART model)"),N7e.forEach(t),Xxo=i(j),D2=n(j,"LI",{});var j7e=s(D2);Lme=n(j7e,"STRONG",{});var Bit=s(Lme);zxo=r(Bit,"bert"),Bit.forEach(t),Wxo=r(j7e," \u2014 "),oG=n(j7e,"A",{href:!0});var Iit=s(oG);Qxo=r(Iit,"BertForSequenceClassification"),Iit.forEach(t),Hxo=r(j7e," (BERT model)"),j7e.forEach(t),Uxo=i(j),G2=n(j,"LI",{});var D7e=s(G2);xme=n(D7e,"STRONG",{});var qit=s(xme);Jxo=r(qit,"big_bird"),qit.forEach(t),Yxo=r(D7e," \u2014 "),rG=n(D7e,"A",{href:!0});var Nit=s(rG);Kxo=r(Nit,"BigBirdForSequenceClassification"),Nit.forEach(t),Zxo=r(D7e," (BigBird model)"),D7e.forEach(t),e$o=i(j),O2=n(j,"LI",{});var G7e=s(O2);$me=n(G7e,"STRONG",{});var jit=s($me);o$o=r(jit,"bigbird_pegasus"),jit.forEach(t),r$o=r(G7e," \u2014 "),tG=n(G7e,"A",{href:!0});var Dit=s(tG);t$o=r(Dit,"BigBirdPegasusForSequenceClassification"),Dit.forEach(t),a$o=r(G7e," (BigBirdPegasus model)"),G7e.forEach(t),n$o=i(j),V2=n(j,"LI",{});var O7e=s(V2);kme=n(O7e,"STRONG",{});var Git=s(kme);s$o=r(Git,"camembert"),Git.forEach(t),l$o=r(O7e," \u2014 "),aG=n(O7e,"A",{href:!0});var Oit=s(aG);i$o=r(Oit,"CamembertForSequenceClassification"),Oit.forEach(t),d$o=r(O7e," (CamemBERT model)"),O7e.forEach(t),c$o=i(j),X2=n(j,"LI",{});var V7e=s(X2);Sme=n(V7e,"STRONG",{});var Vit=s(Sme);m$o=r(Vit,"canine"),Vit.forEach(t),f$o=r(V7e," \u2014 "),nG=n(V7e,"A",{href:!0});var Xit=s(nG);g$o=r(Xit,"CanineForSequenceClassification"),Xit.forEach(t),h$o=r(V7e," (Canine model)"),V7e.forEach(t),u$o=i(j),z2=n(j,"LI",{});var X7e=s(z2);Rme=n(X7e,"STRONG",{});var zit=s(Rme);p$o=r(zit,"convbert"),zit.forEach(t),_$o=r(X7e," \u2014 "),sG=n(X7e,"A",{href:!0});var Wit=s(sG);b$o=r(Wit,"ConvBertForSequenceClassification"),Wit.forEach(t),v$o=r(X7e," (ConvBERT model)"),X7e.forEach(t),F$o=i(j),W2=n(j,"LI",{});var z7e=s(W2);Pme=n(z7e,"STRONG",{});var Qit=s(Pme);T$o=r(Qit,"ctrl"),Qit.forEach(t),M$o=r(z7e," \u2014 "),lG=n(z7e,"A",{href:!0});var Hit=s(lG);E$o=r(Hit,"CTRLForSequenceClassification"),Hit.forEach(t),C$o=r(z7e," (CTRL model)"),z7e.forEach(t),w$o=i(j),Q2=n(j,"LI",{});var W7e=s(Q2);Bme=n(W7e,"STRONG",{});var Uit=s(Bme);A$o=r(Uit,"data2vec-text"),Uit.forEach(t),y$o=r(W7e," \u2014 "),iG=n(W7e,"A",{href:!0});var Jit=s(iG);L$o=r(Jit,"Data2VecTextForSequenceClassification"),Jit.forEach(t),x$o=r(W7e," (Data2VecText model)"),W7e.forEach(t),$$o=i(j),H2=n(j,"LI",{});var Q7e=s(H2);Ime=n(Q7e,"STRONG",{});var Yit=s(Ime);k$o=r(Yit,"deberta"),Yit.forEach(t),S$o=r(Q7e," \u2014 "),dG=n(Q7e,"A",{href:!0});var Kit=s(dG);R$o=r(Kit,"DebertaForSequenceClassification"),Kit.forEach(t),P$o=r(Q7e," (DeBERTa model)"),Q7e.forEach(t),B$o=i(j),U2=n(j,"LI",{});var H7e=s(U2);qme=n(H7e,"STRONG",{});var Zit=s(qme);I$o=r(Zit,"deberta-v2"),Zit.forEach(t),q$o=r(H7e," \u2014 "),cG=n(H7e,"A",{href:!0});var edt=s(cG);N$o=r(edt,"DebertaV2ForSequenceClassification"),edt.forEach(t),j$o=r(H7e," (DeBERTa-v2 model)"),H7e.forEach(t),D$o=i(j),J2=n(j,"LI",{});var U7e=s(J2);Nme=n(U7e,"STRONG",{});var odt=s(Nme);G$o=r(odt,"distilbert"),odt.forEach(t),O$o=r(U7e," \u2014 "),mG=n(U7e,"A",{href:!0});var rdt=s(mG);V$o=r(rdt,"DistilBertForSequenceClassification"),rdt.forEach(t),X$o=r(U7e," (DistilBERT model)"),U7e.forEach(t),z$o=i(j),Y2=n(j,"LI",{});var J7e=s(Y2);jme=n(J7e,"STRONG",{});var tdt=s(jme);W$o=r(tdt,"electra"),tdt.forEach(t),Q$o=r(J7e," \u2014 "),fG=n(J7e,"A",{href:!0});var adt=s(fG);H$o=r(adt,"ElectraForSequenceClassification"),adt.forEach(t),U$o=r(J7e," (ELECTRA model)"),J7e.forEach(t),J$o=i(j),K2=n(j,"LI",{});var Y7e=s(K2);Dme=n(Y7e,"STRONG",{});var ndt=s(Dme);Y$o=r(ndt,"flaubert"),ndt.forEach(t),K$o=r(Y7e," \u2014 "),gG=n(Y7e,"A",{href:!0});var sdt=s(gG);Z$o=r(sdt,"FlaubertForSequenceClassification"),sdt.forEach(t),eko=r(Y7e," (FlauBERT model)"),Y7e.forEach(t),oko=i(j),Z2=n(j,"LI",{});var K7e=s(Z2);Gme=n(K7e,"STRONG",{});var ldt=s(Gme);rko=r(ldt,"fnet"),ldt.forEach(t),tko=r(K7e," \u2014 "),hG=n(K7e,"A",{href:!0});var idt=s(hG);ako=r(idt,"FNetForSequenceClassification"),idt.forEach(t),nko=r(K7e," (FNet model)"),K7e.forEach(t),sko=i(j),ev=n(j,"LI",{});var Z7e=s(ev);Ome=n(Z7e,"STRONG",{});var ddt=s(Ome);lko=r(ddt,"funnel"),ddt.forEach(t),iko=r(Z7e," \u2014 "),uG=n(Z7e,"A",{href:!0});var cdt=s(uG);dko=r(cdt,"FunnelForSequenceClassification"),cdt.forEach(t),cko=r(Z7e," (Funnel Transformer model)"),Z7e.forEach(t),mko=i(j),ov=n(j,"LI",{});var e9e=s(ov);Vme=n(e9e,"STRONG",{});var mdt=s(Vme);fko=r(mdt,"gpt2"),mdt.forEach(t),gko=r(e9e," \u2014 "),pG=n(e9e,"A",{href:!0});var fdt=s(pG);hko=r(fdt,"GPT2ForSequenceClassification"),fdt.forEach(t),uko=r(e9e," (OpenAI GPT-2 model)"),e9e.forEach(t),pko=i(j),rv=n(j,"LI",{});var o9e=s(rv);Xme=n(o9e,"STRONG",{});var gdt=s(Xme);_ko=r(gdt,"gpt_neo"),gdt.forEach(t),bko=r(o9e," \u2014 "),_G=n(o9e,"A",{href:!0});var hdt=s(_G);vko=r(hdt,"GPTNeoForSequenceClassification"),hdt.forEach(t),Fko=r(o9e," (GPT Neo model)"),o9e.forEach(t),Tko=i(j),tv=n(j,"LI",{});var r9e=s(tv);zme=n(r9e,"STRONG",{});var udt=s(zme);Mko=r(udt,"gptj"),udt.forEach(t),Eko=r(r9e," \u2014 "),bG=n(r9e,"A",{href:!0});var pdt=s(bG);Cko=r(pdt,"GPTJForSequenceClassification"),pdt.forEach(t),wko=r(r9e," (GPT-J model)"),r9e.forEach(t),Ako=i(j),av=n(j,"LI",{});var t9e=s(av);Wme=n(t9e,"STRONG",{});var _dt=s(Wme);yko=r(_dt,"ibert"),_dt.forEach(t),Lko=r(t9e," \u2014 "),vG=n(t9e,"A",{href:!0});var bdt=s(vG);xko=r(bdt,"IBertForSequenceClassification"),bdt.forEach(t),$ko=r(t9e," (I-BERT model)"),t9e.forEach(t),kko=i(j),nv=n(j,"LI",{});var a9e=s(nv);Qme=n(a9e,"STRONG",{});var vdt=s(Qme);Sko=r(vdt,"layoutlm"),vdt.forEach(t),Rko=r(a9e," \u2014 "),FG=n(a9e,"A",{href:!0});var Fdt=s(FG);Pko=r(Fdt,"LayoutLMForSequenceClassification"),Fdt.forEach(t),Bko=r(a9e," (LayoutLM model)"),a9e.forEach(t),Iko=i(j),sv=n(j,"LI",{});var n9e=s(sv);Hme=n(n9e,"STRONG",{});var Tdt=s(Hme);qko=r(Tdt,"layoutlmv2"),Tdt.forEach(t),Nko=r(n9e," \u2014 "),TG=n(n9e,"A",{href:!0});var Mdt=s(TG);jko=r(Mdt,"LayoutLMv2ForSequenceClassification"),Mdt.forEach(t),Dko=r(n9e," (LayoutLMv2 model)"),n9e.forEach(t),Gko=i(j),lv=n(j,"LI",{});var s9e=s(lv);Ume=n(s9e,"STRONG",{});var Edt=s(Ume);Oko=r(Edt,"layoutlmv3"),Edt.forEach(t),Vko=r(s9e," \u2014 "),MG=n(s9e,"A",{href:!0});var Cdt=s(MG);Xko=r(Cdt,"LayoutLMv3ForSequenceClassification"),Cdt.forEach(t),zko=r(s9e," (LayoutLMv3 model)"),s9e.forEach(t),Wko=i(j),iv=n(j,"LI",{});var l9e=s(iv);Jme=n(l9e,"STRONG",{});var wdt=s(Jme);Qko=r(wdt,"led"),wdt.forEach(t),Hko=r(l9e," \u2014 "),EG=n(l9e,"A",{href:!0});var Adt=s(EG);Uko=r(Adt,"LEDForSequenceClassification"),Adt.forEach(t),Jko=r(l9e," (LED model)"),l9e.forEach(t),Yko=i(j),dv=n(j,"LI",{});var i9e=s(dv);Yme=n(i9e,"STRONG",{});var ydt=s(Yme);Kko=r(ydt,"longformer"),ydt.forEach(t),Zko=r(i9e," \u2014 "),CG=n(i9e,"A",{href:!0});var Ldt=s(CG);eSo=r(Ldt,"LongformerForSequenceClassification"),Ldt.forEach(t),oSo=r(i9e," (Longformer model)"),i9e.forEach(t),rSo=i(j),cv=n(j,"LI",{});var d9e=s(cv);Kme=n(d9e,"STRONG",{});var xdt=s(Kme);tSo=r(xdt,"mbart"),xdt.forEach(t),aSo=r(d9e," \u2014 "),wG=n(d9e,"A",{href:!0});var $dt=s(wG);nSo=r($dt,"MBartForSequenceClassification"),$dt.forEach(t),sSo=r(d9e," (mBART model)"),d9e.forEach(t),lSo=i(j),mv=n(j,"LI",{});var c9e=s(mv);Zme=n(c9e,"STRONG",{});var kdt=s(Zme);iSo=r(kdt,"megatron-bert"),kdt.forEach(t),dSo=r(c9e," \u2014 "),AG=n(c9e,"A",{href:!0});var Sdt=s(AG);cSo=r(Sdt,"MegatronBertForSequenceClassification"),Sdt.forEach(t),mSo=r(c9e," (MegatronBert model)"),c9e.forEach(t),fSo=i(j),fv=n(j,"LI",{});var m9e=s(fv);efe=n(m9e,"STRONG",{});var Rdt=s(efe);gSo=r(Rdt,"mobilebert"),Rdt.forEach(t),hSo=r(m9e," \u2014 "),yG=n(m9e,"A",{href:!0});var Pdt=s(yG);uSo=r(Pdt,"MobileBertForSequenceClassification"),Pdt.forEach(t),pSo=r(m9e," (MobileBERT model)"),m9e.forEach(t),_So=i(j),gv=n(j,"LI",{});var f9e=s(gv);ofe=n(f9e,"STRONG",{});var Bdt=s(ofe);bSo=r(Bdt,"mpnet"),Bdt.forEach(t),vSo=r(f9e," \u2014 "),LG=n(f9e,"A",{href:!0});var Idt=s(LG);FSo=r(Idt,"MPNetForSequenceClassification"),Idt.forEach(t),TSo=r(f9e," (MPNet model)"),f9e.forEach(t),MSo=i(j),hv=n(j,"LI",{});var g9e=s(hv);rfe=n(g9e,"STRONG",{});var qdt=s(rfe);ESo=r(qdt,"nystromformer"),qdt.forEach(t),CSo=r(g9e," \u2014 "),xG=n(g9e,"A",{href:!0});var Ndt=s(xG);wSo=r(Ndt,"NystromformerForSequenceClassification"),Ndt.forEach(t),ASo=r(g9e," (Nystromformer model)"),g9e.forEach(t),ySo=i(j),uv=n(j,"LI",{});var h9e=s(uv);tfe=n(h9e,"STRONG",{});var jdt=s(tfe);LSo=r(jdt,"openai-gpt"),jdt.forEach(t),xSo=r(h9e," \u2014 "),$G=n(h9e,"A",{href:!0});var Ddt=s($G);$So=r(Ddt,"OpenAIGPTForSequenceClassification"),Ddt.forEach(t),kSo=r(h9e," (OpenAI GPT model)"),h9e.forEach(t),SSo=i(j),pv=n(j,"LI",{});var u9e=s(pv);afe=n(u9e,"STRONG",{});var Gdt=s(afe);RSo=r(Gdt,"perceiver"),Gdt.forEach(t),PSo=r(u9e," \u2014 "),kG=n(u9e,"A",{href:!0});var Odt=s(kG);BSo=r(Odt,"PerceiverForSequenceClassification"),Odt.forEach(t),ISo=r(u9e," (Perceiver model)"),u9e.forEach(t),qSo=i(j),_v=n(j,"LI",{});var p9e=s(_v);nfe=n(p9e,"STRONG",{});var Vdt=s(nfe);NSo=r(Vdt,"plbart"),Vdt.forEach(t),jSo=r(p9e," \u2014 "),SG=n(p9e,"A",{href:!0});var Xdt=s(SG);DSo=r(Xdt,"PLBartForSequenceClassification"),Xdt.forEach(t),GSo=r(p9e," (PLBart model)"),p9e.forEach(t),OSo=i(j),bv=n(j,"LI",{});var _9e=s(bv);sfe=n(_9e,"STRONG",{});var zdt=s(sfe);VSo=r(zdt,"qdqbert"),zdt.forEach(t),XSo=r(_9e," \u2014 "),RG=n(_9e,"A",{href:!0});var Wdt=s(RG);zSo=r(Wdt,"QDQBertForSequenceClassification"),Wdt.forEach(t),WSo=r(_9e," (QDQBert model)"),_9e.forEach(t),QSo=i(j),vv=n(j,"LI",{});var b9e=s(vv);lfe=n(b9e,"STRONG",{});var Qdt=s(lfe);HSo=r(Qdt,"reformer"),Qdt.forEach(t),USo=r(b9e," \u2014 "),PG=n(b9e,"A",{href:!0});var Hdt=s(PG);JSo=r(Hdt,"ReformerForSequenceClassification"),Hdt.forEach(t),YSo=r(b9e," (Reformer model)"),b9e.forEach(t),KSo=i(j),Fv=n(j,"LI",{});var v9e=s(Fv);ife=n(v9e,"STRONG",{});var Udt=s(ife);ZSo=r(Udt,"rembert"),Udt.forEach(t),eRo=r(v9e," \u2014 "),BG=n(v9e,"A",{href:!0});var Jdt=s(BG);oRo=r(Jdt,"RemBertForSequenceClassification"),Jdt.forEach(t),rRo=r(v9e," (RemBERT model)"),v9e.forEach(t),tRo=i(j),Tv=n(j,"LI",{});var F9e=s(Tv);dfe=n(F9e,"STRONG",{});var Ydt=s(dfe);aRo=r(Ydt,"roberta"),Ydt.forEach(t),nRo=r(F9e," \u2014 "),IG=n(F9e,"A",{href:!0});var Kdt=s(IG);sRo=r(Kdt,"RobertaForSequenceClassification"),Kdt.forEach(t),lRo=r(F9e," (RoBERTa model)"),F9e.forEach(t),iRo=i(j),Mv=n(j,"LI",{});var T9e=s(Mv);cfe=n(T9e,"STRONG",{});var Zdt=s(cfe);dRo=r(Zdt,"roformer"),Zdt.forEach(t),cRo=r(T9e," \u2014 "),qG=n(T9e,"A",{href:!0});var ect=s(qG);mRo=r(ect,"RoFormerForSequenceClassification"),ect.forEach(t),fRo=r(T9e," (RoFormer model)"),T9e.forEach(t),gRo=i(j),Ev=n(j,"LI",{});var M9e=s(Ev);mfe=n(M9e,"STRONG",{});var oct=s(mfe);hRo=r(oct,"squeezebert"),oct.forEach(t),uRo=r(M9e," \u2014 "),NG=n(M9e,"A",{href:!0});var rct=s(NG);pRo=r(rct,"SqueezeBertForSequenceClassification"),rct.forEach(t),_Ro=r(M9e," (SqueezeBERT model)"),M9e.forEach(t),bRo=i(j),Cv=n(j,"LI",{});var E9e=s(Cv);ffe=n(E9e,"STRONG",{});var tct=s(ffe);vRo=r(tct,"tapas"),tct.forEach(t),FRo=r(E9e," \u2014 "),jG=n(E9e,"A",{href:!0});var act=s(jG);TRo=r(act,"TapasForSequenceClassification"),act.forEach(t),MRo=r(E9e," (TAPAS model)"),E9e.forEach(t),ERo=i(j),wv=n(j,"LI",{});var C9e=s(wv);gfe=n(C9e,"STRONG",{});var nct=s(gfe);CRo=r(nct,"transfo-xl"),nct.forEach(t),wRo=r(C9e," \u2014 "),DG=n(C9e,"A",{href:!0});var sct=s(DG);ARo=r(sct,"TransfoXLForSequenceClassification"),sct.forEach(t),yRo=r(C9e," (Transformer-XL model)"),C9e.forEach(t),LRo=i(j),Av=n(j,"LI",{});var w9e=s(Av);hfe=n(w9e,"STRONG",{});var lct=s(hfe);xRo=r(lct,"xlm"),lct.forEach(t),$Ro=r(w9e," \u2014 "),GG=n(w9e,"A",{href:!0});var ict=s(GG);kRo=r(ict,"XLMForSequenceClassification"),ict.forEach(t),SRo=r(w9e," (XLM model)"),w9e.forEach(t),RRo=i(j),yv=n(j,"LI",{});var A9e=s(yv);ufe=n(A9e,"STRONG",{});var dct=s(ufe);PRo=r(dct,"xlm-roberta"),dct.forEach(t),BRo=r(A9e," \u2014 "),OG=n(A9e,"A",{href:!0});var cct=s(OG);IRo=r(cct,"XLMRobertaForSequenceClassification"),cct.forEach(t),qRo=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),NRo=i(j),Lv=n(j,"LI",{});var y9e=s(Lv);pfe=n(y9e,"STRONG",{});var mct=s(pfe);jRo=r(mct,"xlm-roberta-xl"),mct.forEach(t),DRo=r(y9e," \u2014 "),VG=n(y9e,"A",{href:!0});var fct=s(VG);GRo=r(fct,"XLMRobertaXLForSequenceClassification"),fct.forEach(t),ORo=r(y9e," (XLM-RoBERTa-XL model)"),y9e.forEach(t),VRo=i(j),xv=n(j,"LI",{});var L9e=s(xv);_fe=n(L9e,"STRONG",{});var gct=s(_fe);XRo=r(gct,"xlnet"),gct.forEach(t),zRo=r(L9e," \u2014 "),XG=n(L9e,"A",{href:!0});var hct=s(XG);WRo=r(hct,"XLNetForSequenceClassification"),hct.forEach(t),QRo=r(L9e," (XLNet model)"),L9e.forEach(t),HRo=i(j),$v=n(j,"LI",{});var x9e=s($v);bfe=n(x9e,"STRONG",{});var uct=s(bfe);URo=r(uct,"yoso"),uct.forEach(t),JRo=r(x9e," \u2014 "),zG=n(x9e,"A",{href:!0});var pct=s(zG);YRo=r(pct,"YosoForSequenceClassification"),pct.forEach(t),KRo=r(x9e," (YOSO model)"),x9e.forEach(t),j.forEach(t),ZRo=i(sa),kv=n(sa,"P",{});var $9e=s(kv);ePo=r($9e,"The model is set in evaluation mode by default using "),vfe=n($9e,"CODE",{});var _ct=s(vfe);oPo=r(_ct,"model.eval()"),_ct.forEach(t),rPo=r($9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n($9e,"CODE",{});var bct=s(Ffe);tPo=r(bct,"model.train()"),bct.forEach(t),$9e.forEach(t),aPo=i(sa),T(Sv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),tNe=i(m),Vi=n(m,"H2",{class:!0});var lDe=s(Vi);Rv=n(lDe,"A",{id:!0,class:!0,href:!0});var vct=s(Rv);Tfe=n(vct,"SPAN",{});var Fct=s(Tfe);T(CL.$$.fragment,Fct),Fct.forEach(t),vct.forEach(t),nPo=i(lDe),Mfe=n(lDe,"SPAN",{});var Tct=s(Mfe);sPo=r(Tct,"AutoModelForMultipleChoice"),Tct.forEach(t),lDe.forEach(t),aNe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(wL.$$.fragment,Qs),lPo=i(Qs),Xi=n(Qs,"P",{});var _Z=s(Xi);iPo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WG=n(_Z,"A",{href:!0});var Mct=s(WG);dPo=r(Mct,"from_pretrained()"),Mct.forEach(t),cPo=r(_Z," class method or the "),QG=n(_Z,"A",{href:!0});var Ect=s(QG);mPo=r(Ect,"from_config()"),Ect.forEach(t),fPo=r(_Z,` class
method.`),_Z.forEach(t),gPo=i(Qs),AL=n(Qs,"P",{});var iDe=s(AL);hPo=r(iDe,"This class cannot be instantiated directly using "),Efe=n(iDe,"CODE",{});var Cct=s(Efe);uPo=r(Cct,"__init__()"),Cct.forEach(t),pPo=r(iDe," (throws an error)."),iDe.forEach(t),_Po=i(Qs),dt=n(Qs,"DIV",{class:!0});var NA=s(dt);T(yL.$$.fragment,NA),bPo=i(NA),Cfe=n(NA,"P",{});var wct=s(Cfe);vPo=r(wct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wct.forEach(t),FPo=i(NA),zi=n(NA,"P",{});var bZ=s(zi);TPo=r(bZ,`Note:
Loading a model from its configuration file does `),wfe=n(bZ,"STRONG",{});var Act=s(wfe);MPo=r(Act,"not"),Act.forEach(t),EPo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(bZ,"A",{href:!0});var yct=s(HG);CPo=r(yct,"from_pretrained()"),yct.forEach(t),wPo=r(bZ," to load the model weights."),bZ.forEach(t),APo=i(NA),T(Pv.$$.fragment,NA),NA.forEach(t),yPo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(LL.$$.fragment,la),LPo=i(la),Afe=n(la,"P",{});var Lct=s(Afe);xPo=r(Lct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lct.forEach(t),$Po=i(la),Pa=n(la,"P",{});var jA=s(Pa);kPo=r(jA,"The model class to instantiate is selected based on the "),yfe=n(jA,"CODE",{});var xct=s(yfe);SPo=r(xct,"model_type"),xct.forEach(t),RPo=r(jA,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(jA,"CODE",{});var $ct=s(Lfe);PPo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),BPo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(jA,"CODE",{});var kct=s(xfe);IPo=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),qPo=r(jA,":"),jA.forEach(t),NPo=i(la),Y=n(la,"UL",{});var Z=s(Y);Bv=n(Z,"LI",{});var k9e=s(Bv);$fe=n(k9e,"STRONG",{});var Sct=s($fe);jPo=r(Sct,"albert"),Sct.forEach(t),DPo=r(k9e," \u2014 "),UG=n(k9e,"A",{href:!0});var Rct=s(UG);GPo=r(Rct,"AlbertForMultipleChoice"),Rct.forEach(t),OPo=r(k9e," (ALBERT model)"),k9e.forEach(t),VPo=i(Z),Iv=n(Z,"LI",{});var S9e=s(Iv);kfe=n(S9e,"STRONG",{});var Pct=s(kfe);XPo=r(Pct,"bert"),Pct.forEach(t),zPo=r(S9e," \u2014 "),JG=n(S9e,"A",{href:!0});var Bct=s(JG);WPo=r(Bct,"BertForMultipleChoice"),Bct.forEach(t),QPo=r(S9e," (BERT model)"),S9e.forEach(t),HPo=i(Z),qv=n(Z,"LI",{});var R9e=s(qv);Sfe=n(R9e,"STRONG",{});var Ict=s(Sfe);UPo=r(Ict,"big_bird"),Ict.forEach(t),JPo=r(R9e," \u2014 "),YG=n(R9e,"A",{href:!0});var qct=s(YG);YPo=r(qct,"BigBirdForMultipleChoice"),qct.forEach(t),KPo=r(R9e," (BigBird model)"),R9e.forEach(t),ZPo=i(Z),Nv=n(Z,"LI",{});var P9e=s(Nv);Rfe=n(P9e,"STRONG",{});var Nct=s(Rfe);eBo=r(Nct,"camembert"),Nct.forEach(t),oBo=r(P9e," \u2014 "),KG=n(P9e,"A",{href:!0});var jct=s(KG);rBo=r(jct,"CamembertForMultipleChoice"),jct.forEach(t),tBo=r(P9e," (CamemBERT model)"),P9e.forEach(t),aBo=i(Z),jv=n(Z,"LI",{});var B9e=s(jv);Pfe=n(B9e,"STRONG",{});var Dct=s(Pfe);nBo=r(Dct,"canine"),Dct.forEach(t),sBo=r(B9e," \u2014 "),ZG=n(B9e,"A",{href:!0});var Gct=s(ZG);lBo=r(Gct,"CanineForMultipleChoice"),Gct.forEach(t),iBo=r(B9e," (Canine model)"),B9e.forEach(t),dBo=i(Z),Dv=n(Z,"LI",{});var I9e=s(Dv);Bfe=n(I9e,"STRONG",{});var Oct=s(Bfe);cBo=r(Oct,"convbert"),Oct.forEach(t),mBo=r(I9e," \u2014 "),eO=n(I9e,"A",{href:!0});var Vct=s(eO);fBo=r(Vct,"ConvBertForMultipleChoice"),Vct.forEach(t),gBo=r(I9e," (ConvBERT model)"),I9e.forEach(t),hBo=i(Z),Gv=n(Z,"LI",{});var q9e=s(Gv);Ife=n(q9e,"STRONG",{});var Xct=s(Ife);uBo=r(Xct,"data2vec-text"),Xct.forEach(t),pBo=r(q9e," \u2014 "),oO=n(q9e,"A",{href:!0});var zct=s(oO);_Bo=r(zct,"Data2VecTextForMultipleChoice"),zct.forEach(t),bBo=r(q9e," (Data2VecText model)"),q9e.forEach(t),vBo=i(Z),Ov=n(Z,"LI",{});var N9e=s(Ov);qfe=n(N9e,"STRONG",{});var Wct=s(qfe);FBo=r(Wct,"deberta-v2"),Wct.forEach(t),TBo=r(N9e," \u2014 "),rO=n(N9e,"A",{href:!0});var Qct=s(rO);MBo=r(Qct,"DebertaV2ForMultipleChoice"),Qct.forEach(t),EBo=r(N9e," (DeBERTa-v2 model)"),N9e.forEach(t),CBo=i(Z),Vv=n(Z,"LI",{});var j9e=s(Vv);Nfe=n(j9e,"STRONG",{});var Hct=s(Nfe);wBo=r(Hct,"distilbert"),Hct.forEach(t),ABo=r(j9e," \u2014 "),tO=n(j9e,"A",{href:!0});var Uct=s(tO);yBo=r(Uct,"DistilBertForMultipleChoice"),Uct.forEach(t),LBo=r(j9e," (DistilBERT model)"),j9e.forEach(t),xBo=i(Z),Xv=n(Z,"LI",{});var D9e=s(Xv);jfe=n(D9e,"STRONG",{});var Jct=s(jfe);$Bo=r(Jct,"electra"),Jct.forEach(t),kBo=r(D9e," \u2014 "),aO=n(D9e,"A",{href:!0});var Yct=s(aO);SBo=r(Yct,"ElectraForMultipleChoice"),Yct.forEach(t),RBo=r(D9e," (ELECTRA model)"),D9e.forEach(t),PBo=i(Z),zv=n(Z,"LI",{});var G9e=s(zv);Dfe=n(G9e,"STRONG",{});var Kct=s(Dfe);BBo=r(Kct,"flaubert"),Kct.forEach(t),IBo=r(G9e," \u2014 "),nO=n(G9e,"A",{href:!0});var Zct=s(nO);qBo=r(Zct,"FlaubertForMultipleChoice"),Zct.forEach(t),NBo=r(G9e," (FlauBERT model)"),G9e.forEach(t),jBo=i(Z),Wv=n(Z,"LI",{});var O9e=s(Wv);Gfe=n(O9e,"STRONG",{});var emt=s(Gfe);DBo=r(emt,"fnet"),emt.forEach(t),GBo=r(O9e," \u2014 "),sO=n(O9e,"A",{href:!0});var omt=s(sO);OBo=r(omt,"FNetForMultipleChoice"),omt.forEach(t),VBo=r(O9e," (FNet model)"),O9e.forEach(t),XBo=i(Z),Qv=n(Z,"LI",{});var V9e=s(Qv);Ofe=n(V9e,"STRONG",{});var rmt=s(Ofe);zBo=r(rmt,"funnel"),rmt.forEach(t),WBo=r(V9e," \u2014 "),lO=n(V9e,"A",{href:!0});var tmt=s(lO);QBo=r(tmt,"FunnelForMultipleChoice"),tmt.forEach(t),HBo=r(V9e," (Funnel Transformer model)"),V9e.forEach(t),UBo=i(Z),Hv=n(Z,"LI",{});var X9e=s(Hv);Vfe=n(X9e,"STRONG",{});var amt=s(Vfe);JBo=r(amt,"ibert"),amt.forEach(t),YBo=r(X9e," \u2014 "),iO=n(X9e,"A",{href:!0});var nmt=s(iO);KBo=r(nmt,"IBertForMultipleChoice"),nmt.forEach(t),ZBo=r(X9e," (I-BERT model)"),X9e.forEach(t),eIo=i(Z),Uv=n(Z,"LI",{});var z9e=s(Uv);Xfe=n(z9e,"STRONG",{});var smt=s(Xfe);oIo=r(smt,"longformer"),smt.forEach(t),rIo=r(z9e," \u2014 "),dO=n(z9e,"A",{href:!0});var lmt=s(dO);tIo=r(lmt,"LongformerForMultipleChoice"),lmt.forEach(t),aIo=r(z9e," (Longformer model)"),z9e.forEach(t),nIo=i(Z),Jv=n(Z,"LI",{});var W9e=s(Jv);zfe=n(W9e,"STRONG",{});var imt=s(zfe);sIo=r(imt,"megatron-bert"),imt.forEach(t),lIo=r(W9e," \u2014 "),cO=n(W9e,"A",{href:!0});var dmt=s(cO);iIo=r(dmt,"MegatronBertForMultipleChoice"),dmt.forEach(t),dIo=r(W9e," (MegatronBert model)"),W9e.forEach(t),cIo=i(Z),Yv=n(Z,"LI",{});var Q9e=s(Yv);Wfe=n(Q9e,"STRONG",{});var cmt=s(Wfe);mIo=r(cmt,"mobilebert"),cmt.forEach(t),fIo=r(Q9e," \u2014 "),mO=n(Q9e,"A",{href:!0});var mmt=s(mO);gIo=r(mmt,"MobileBertForMultipleChoice"),mmt.forEach(t),hIo=r(Q9e," (MobileBERT model)"),Q9e.forEach(t),uIo=i(Z),Kv=n(Z,"LI",{});var H9e=s(Kv);Qfe=n(H9e,"STRONG",{});var fmt=s(Qfe);pIo=r(fmt,"mpnet"),fmt.forEach(t),_Io=r(H9e," \u2014 "),fO=n(H9e,"A",{href:!0});var gmt=s(fO);bIo=r(gmt,"MPNetForMultipleChoice"),gmt.forEach(t),vIo=r(H9e," (MPNet model)"),H9e.forEach(t),FIo=i(Z),Zv=n(Z,"LI",{});var U9e=s(Zv);Hfe=n(U9e,"STRONG",{});var hmt=s(Hfe);TIo=r(hmt,"nystromformer"),hmt.forEach(t),MIo=r(U9e," \u2014 "),gO=n(U9e,"A",{href:!0});var umt=s(gO);EIo=r(umt,"NystromformerForMultipleChoice"),umt.forEach(t),CIo=r(U9e," (Nystromformer model)"),U9e.forEach(t),wIo=i(Z),eF=n(Z,"LI",{});var J9e=s(eF);Ufe=n(J9e,"STRONG",{});var pmt=s(Ufe);AIo=r(pmt,"qdqbert"),pmt.forEach(t),yIo=r(J9e," \u2014 "),hO=n(J9e,"A",{href:!0});var _mt=s(hO);LIo=r(_mt,"QDQBertForMultipleChoice"),_mt.forEach(t),xIo=r(J9e," (QDQBert model)"),J9e.forEach(t),$Io=i(Z),oF=n(Z,"LI",{});var Y9e=s(oF);Jfe=n(Y9e,"STRONG",{});var bmt=s(Jfe);kIo=r(bmt,"rembert"),bmt.forEach(t),SIo=r(Y9e," \u2014 "),uO=n(Y9e,"A",{href:!0});var vmt=s(uO);RIo=r(vmt,"RemBertForMultipleChoice"),vmt.forEach(t),PIo=r(Y9e," (RemBERT model)"),Y9e.forEach(t),BIo=i(Z),rF=n(Z,"LI",{});var K9e=s(rF);Yfe=n(K9e,"STRONG",{});var Fmt=s(Yfe);IIo=r(Fmt,"roberta"),Fmt.forEach(t),qIo=r(K9e," \u2014 "),pO=n(K9e,"A",{href:!0});var Tmt=s(pO);NIo=r(Tmt,"RobertaForMultipleChoice"),Tmt.forEach(t),jIo=r(K9e," (RoBERTa model)"),K9e.forEach(t),DIo=i(Z),tF=n(Z,"LI",{});var Z9e=s(tF);Kfe=n(Z9e,"STRONG",{});var Mmt=s(Kfe);GIo=r(Mmt,"roformer"),Mmt.forEach(t),OIo=r(Z9e," \u2014 "),_O=n(Z9e,"A",{href:!0});var Emt=s(_O);VIo=r(Emt,"RoFormerForMultipleChoice"),Emt.forEach(t),XIo=r(Z9e," (RoFormer model)"),Z9e.forEach(t),zIo=i(Z),aF=n(Z,"LI",{});var exe=s(aF);Zfe=n(exe,"STRONG",{});var Cmt=s(Zfe);WIo=r(Cmt,"squeezebert"),Cmt.forEach(t),QIo=r(exe," \u2014 "),bO=n(exe,"A",{href:!0});var wmt=s(bO);HIo=r(wmt,"SqueezeBertForMultipleChoice"),wmt.forEach(t),UIo=r(exe," (SqueezeBERT model)"),exe.forEach(t),JIo=i(Z),nF=n(Z,"LI",{});var oxe=s(nF);ege=n(oxe,"STRONG",{});var Amt=s(ege);YIo=r(Amt,"xlm"),Amt.forEach(t),KIo=r(oxe," \u2014 "),vO=n(oxe,"A",{href:!0});var ymt=s(vO);ZIo=r(ymt,"XLMForMultipleChoice"),ymt.forEach(t),eqo=r(oxe," (XLM model)"),oxe.forEach(t),oqo=i(Z),sF=n(Z,"LI",{});var rxe=s(sF);oge=n(rxe,"STRONG",{});var Lmt=s(oge);rqo=r(Lmt,"xlm-roberta"),Lmt.forEach(t),tqo=r(rxe," \u2014 "),FO=n(rxe,"A",{href:!0});var xmt=s(FO);aqo=r(xmt,"XLMRobertaForMultipleChoice"),xmt.forEach(t),nqo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),sqo=i(Z),lF=n(Z,"LI",{});var txe=s(lF);rge=n(txe,"STRONG",{});var $mt=s(rge);lqo=r($mt,"xlm-roberta-xl"),$mt.forEach(t),iqo=r(txe," \u2014 "),TO=n(txe,"A",{href:!0});var kmt=s(TO);dqo=r(kmt,"XLMRobertaXLForMultipleChoice"),kmt.forEach(t),cqo=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),mqo=i(Z),iF=n(Z,"LI",{});var axe=s(iF);tge=n(axe,"STRONG",{});var Smt=s(tge);fqo=r(Smt,"xlnet"),Smt.forEach(t),gqo=r(axe," \u2014 "),MO=n(axe,"A",{href:!0});var Rmt=s(MO);hqo=r(Rmt,"XLNetForMultipleChoice"),Rmt.forEach(t),uqo=r(axe," (XLNet model)"),axe.forEach(t),pqo=i(Z),dF=n(Z,"LI",{});var nxe=s(dF);age=n(nxe,"STRONG",{});var Pmt=s(age);_qo=r(Pmt,"yoso"),Pmt.forEach(t),bqo=r(nxe," \u2014 "),EO=n(nxe,"A",{href:!0});var Bmt=s(EO);vqo=r(Bmt,"YosoForMultipleChoice"),Bmt.forEach(t),Fqo=r(nxe," (YOSO model)"),nxe.forEach(t),Z.forEach(t),Tqo=i(la),cF=n(la,"P",{});var sxe=s(cF);Mqo=r(sxe,"The model is set in evaluation mode by default using "),nge=n(sxe,"CODE",{});var Imt=s(nge);Eqo=r(Imt,"model.eval()"),Imt.forEach(t),Cqo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(sxe,"CODE",{});var qmt=s(sge);wqo=r(qmt,"model.train()"),qmt.forEach(t),sxe.forEach(t),Aqo=i(la),T(mF.$$.fragment,la),la.forEach(t),Qs.forEach(t),nNe=i(m),Wi=n(m,"H2",{class:!0});var dDe=s(Wi);fF=n(dDe,"A",{id:!0,class:!0,href:!0});var Nmt=s(fF);lge=n(Nmt,"SPAN",{});var jmt=s(lge);T(xL.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),yqo=i(dDe),ige=n(dDe,"SPAN",{});var Dmt=s(ige);Lqo=r(Dmt,"AutoModelForNextSentencePrediction"),Dmt.forEach(t),dDe.forEach(t),sNe=i(m),Bo=n(m,"DIV",{class:!0});var Hs=s(Bo);T($L.$$.fragment,Hs),xqo=i(Hs),Qi=n(Hs,"P",{});var vZ=s(Qi);$qo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CO=n(vZ,"A",{href:!0});var Gmt=s(CO);kqo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Sqo=r(vZ," class method or the "),wO=n(vZ,"A",{href:!0});var Omt=s(wO);Rqo=r(Omt,"from_config()"),Omt.forEach(t),Pqo=r(vZ,` class
method.`),vZ.forEach(t),Bqo=i(Hs),kL=n(Hs,"P",{});var cDe=s(kL);Iqo=r(cDe,"This class cannot be instantiated directly using "),dge=n(cDe,"CODE",{});var Vmt=s(dge);qqo=r(Vmt,"__init__()"),Vmt.forEach(t),Nqo=r(cDe," (throws an error)."),cDe.forEach(t),jqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var DA=s(ct);T(SL.$$.fragment,DA),Dqo=i(DA),cge=n(DA,"P",{});var Xmt=s(cge);Gqo=r(Xmt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xmt.forEach(t),Oqo=i(DA),Hi=n(DA,"P",{});var FZ=s(Hi);Vqo=r(FZ,`Note:
Loading a model from its configuration file does `),mge=n(FZ,"STRONG",{});var zmt=s(mge);Xqo=r(zmt,"not"),zmt.forEach(t),zqo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(FZ,"A",{href:!0});var Wmt=s(AO);Wqo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),Qqo=r(FZ," to load the model weights."),FZ.forEach(t),Hqo=i(DA),T(gF.$$.fragment,DA),DA.forEach(t),Uqo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(RL.$$.fragment,ia),Jqo=i(ia),fge=n(ia,"P",{});var Qmt=s(fge);Yqo=r(Qmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qmt.forEach(t),Kqo=i(ia),Ba=n(ia,"P",{});var GA=s(Ba);Zqo=r(GA,"The model class to instantiate is selected based on the "),gge=n(GA,"CODE",{});var Hmt=s(gge);eNo=r(Hmt,"model_type"),Hmt.forEach(t),oNo=r(GA,` property of the config object (either
passed as an argument or loaded from `),hge=n(GA,"CODE",{});var Umt=s(hge);rNo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),tNo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(GA,"CODE",{});var Jmt=s(uge);aNo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),nNo=r(GA,":"),GA.forEach(t),sNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);hF=n(Us,"LI",{});var lxe=s(hF);pge=n(lxe,"STRONG",{});var Ymt=s(pge);lNo=r(Ymt,"bert"),Ymt.forEach(t),iNo=r(lxe," \u2014 "),yO=n(lxe,"A",{href:!0});var Kmt=s(yO);dNo=r(Kmt,"BertForNextSentencePrediction"),Kmt.forEach(t),cNo=r(lxe," (BERT model)"),lxe.forEach(t),mNo=i(Us),uF=n(Us,"LI",{});var ixe=s(uF);_ge=n(ixe,"STRONG",{});var Zmt=s(_ge);fNo=r(Zmt,"fnet"),Zmt.forEach(t),gNo=r(ixe," \u2014 "),LO=n(ixe,"A",{href:!0});var eft=s(LO);hNo=r(eft,"FNetForNextSentencePrediction"),eft.forEach(t),uNo=r(ixe," (FNet model)"),ixe.forEach(t),pNo=i(Us),pF=n(Us,"LI",{});var dxe=s(pF);bge=n(dxe,"STRONG",{});var oft=s(bge);_No=r(oft,"megatron-bert"),oft.forEach(t),bNo=r(dxe," \u2014 "),xO=n(dxe,"A",{href:!0});var rft=s(xO);vNo=r(rft,"MegatronBertForNextSentencePrediction"),rft.forEach(t),FNo=r(dxe," (MegatronBert model)"),dxe.forEach(t),TNo=i(Us),_F=n(Us,"LI",{});var cxe=s(_F);vge=n(cxe,"STRONG",{});var tft=s(vge);MNo=r(tft,"mobilebert"),tft.forEach(t),ENo=r(cxe," \u2014 "),$O=n(cxe,"A",{href:!0});var aft=s($O);CNo=r(aft,"MobileBertForNextSentencePrediction"),aft.forEach(t),wNo=r(cxe," (MobileBERT model)"),cxe.forEach(t),ANo=i(Us),bF=n(Us,"LI",{});var mxe=s(bF);Fge=n(mxe,"STRONG",{});var nft=s(Fge);yNo=r(nft,"qdqbert"),nft.forEach(t),LNo=r(mxe," \u2014 "),kO=n(mxe,"A",{href:!0});var sft=s(kO);xNo=r(sft,"QDQBertForNextSentencePrediction"),sft.forEach(t),$No=r(mxe," (QDQBert model)"),mxe.forEach(t),Us.forEach(t),kNo=i(ia),vF=n(ia,"P",{});var fxe=s(vF);SNo=r(fxe,"The model is set in evaluation mode by default using "),Tge=n(fxe,"CODE",{});var lft=s(Tge);RNo=r(lft,"model.eval()"),lft.forEach(t),PNo=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(fxe,"CODE",{});var ift=s(Mge);BNo=r(ift,"model.train()"),ift.forEach(t),fxe.forEach(t),INo=i(ia),T(FF.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),lNe=i(m),Ui=n(m,"H2",{class:!0});var mDe=s(Ui);TF=n(mDe,"A",{id:!0,class:!0,href:!0});var dft=s(TF);Ege=n(dft,"SPAN",{});var cft=s(Ege);T(PL.$$.fragment,cft),cft.forEach(t),dft.forEach(t),qNo=i(mDe),Cge=n(mDe,"SPAN",{});var mft=s(Cge);NNo=r(mft,"AutoModelForTokenClassification"),mft.forEach(t),mDe.forEach(t),iNe=i(m),Io=n(m,"DIV",{class:!0});var Js=s(Io);T(BL.$$.fragment,Js),jNo=i(Js),Ji=n(Js,"P",{});var TZ=s(Ji);DNo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),SO=n(TZ,"A",{href:!0});var fft=s(SO);GNo=r(fft,"from_pretrained()"),fft.forEach(t),ONo=r(TZ," class method or the "),RO=n(TZ,"A",{href:!0});var gft=s(RO);VNo=r(gft,"from_config()"),gft.forEach(t),XNo=r(TZ,` class
method.`),TZ.forEach(t),zNo=i(Js),IL=n(Js,"P",{});var fDe=s(IL);WNo=r(fDe,"This class cannot be instantiated directly using "),wge=n(fDe,"CODE",{});var hft=s(wge);QNo=r(hft,"__init__()"),hft.forEach(t),HNo=r(fDe," (throws an error)."),fDe.forEach(t),UNo=i(Js),mt=n(Js,"DIV",{class:!0});var OA=s(mt);T(qL.$$.fragment,OA),JNo=i(OA),Age=n(OA,"P",{});var uft=s(Age);YNo=r(uft,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uft.forEach(t),KNo=i(OA),Yi=n(OA,"P",{});var MZ=s(Yi);ZNo=r(MZ,`Note:
Loading a model from its configuration file does `),yge=n(MZ,"STRONG",{});var pft=s(yge);ejo=r(pft,"not"),pft.forEach(t),ojo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(MZ,"A",{href:!0});var _ft=s(PO);rjo=r(_ft,"from_pretrained()"),_ft.forEach(t),tjo=r(MZ," to load the model weights."),MZ.forEach(t),ajo=i(OA),T(MF.$$.fragment,OA),OA.forEach(t),njo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(NL.$$.fragment,da),sjo=i(da),Lge=n(da,"P",{});var bft=s(Lge);ljo=r(bft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bft.forEach(t),ijo=i(da),Ia=n(da,"P",{});var VA=s(Ia);djo=r(VA,"The model class to instantiate is selected based on the "),xge=n(VA,"CODE",{});var vft=s(xge);cjo=r(vft,"model_type"),vft.forEach(t),mjo=r(VA,` property of the config object (either
passed as an argument or loaded from `),$ge=n(VA,"CODE",{});var Fft=s($ge);fjo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),gjo=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(VA,"CODE",{});var Tft=s(kge);hjo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),ujo=r(VA,":"),VA.forEach(t),pjo=i(da),H=n(da,"UL",{});var J=s(H);EF=n(J,"LI",{});var gxe=s(EF);Sge=n(gxe,"STRONG",{});var Mft=s(Sge);_jo=r(Mft,"albert"),Mft.forEach(t),bjo=r(gxe," \u2014 "),BO=n(gxe,"A",{href:!0});var Eft=s(BO);vjo=r(Eft,"AlbertForTokenClassification"),Eft.forEach(t),Fjo=r(gxe," (ALBERT model)"),gxe.forEach(t),Tjo=i(J),CF=n(J,"LI",{});var hxe=s(CF);Rge=n(hxe,"STRONG",{});var Cft=s(Rge);Mjo=r(Cft,"bert"),Cft.forEach(t),Ejo=r(hxe," \u2014 "),IO=n(hxe,"A",{href:!0});var wft=s(IO);Cjo=r(wft,"BertForTokenClassification"),wft.forEach(t),wjo=r(hxe," (BERT model)"),hxe.forEach(t),Ajo=i(J),wF=n(J,"LI",{});var uxe=s(wF);Pge=n(uxe,"STRONG",{});var Aft=s(Pge);yjo=r(Aft,"big_bird"),Aft.forEach(t),Ljo=r(uxe," \u2014 "),qO=n(uxe,"A",{href:!0});var yft=s(qO);xjo=r(yft,"BigBirdForTokenClassification"),yft.forEach(t),$jo=r(uxe," (BigBird model)"),uxe.forEach(t),kjo=i(J),AF=n(J,"LI",{});var pxe=s(AF);Bge=n(pxe,"STRONG",{});var Lft=s(Bge);Sjo=r(Lft,"camembert"),Lft.forEach(t),Rjo=r(pxe," \u2014 "),NO=n(pxe,"A",{href:!0});var xft=s(NO);Pjo=r(xft,"CamembertForTokenClassification"),xft.forEach(t),Bjo=r(pxe," (CamemBERT model)"),pxe.forEach(t),Ijo=i(J),yF=n(J,"LI",{});var _xe=s(yF);Ige=n(_xe,"STRONG",{});var $ft=s(Ige);qjo=r($ft,"canine"),$ft.forEach(t),Njo=r(_xe," \u2014 "),jO=n(_xe,"A",{href:!0});var kft=s(jO);jjo=r(kft,"CanineForTokenClassification"),kft.forEach(t),Djo=r(_xe," (Canine model)"),_xe.forEach(t),Gjo=i(J),LF=n(J,"LI",{});var bxe=s(LF);qge=n(bxe,"STRONG",{});var Sft=s(qge);Ojo=r(Sft,"convbert"),Sft.forEach(t),Vjo=r(bxe," \u2014 "),DO=n(bxe,"A",{href:!0});var Rft=s(DO);Xjo=r(Rft,"ConvBertForTokenClassification"),Rft.forEach(t),zjo=r(bxe," (ConvBERT model)"),bxe.forEach(t),Wjo=i(J),xF=n(J,"LI",{});var vxe=s(xF);Nge=n(vxe,"STRONG",{});var Pft=s(Nge);Qjo=r(Pft,"data2vec-text"),Pft.forEach(t),Hjo=r(vxe," \u2014 "),GO=n(vxe,"A",{href:!0});var Bft=s(GO);Ujo=r(Bft,"Data2VecTextForTokenClassification"),Bft.forEach(t),Jjo=r(vxe," (Data2VecText model)"),vxe.forEach(t),Yjo=i(J),$F=n(J,"LI",{});var Fxe=s($F);jge=n(Fxe,"STRONG",{});var Ift=s(jge);Kjo=r(Ift,"deberta"),Ift.forEach(t),Zjo=r(Fxe," \u2014 "),OO=n(Fxe,"A",{href:!0});var qft=s(OO);eDo=r(qft,"DebertaForTokenClassification"),qft.forEach(t),oDo=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),rDo=i(J),kF=n(J,"LI",{});var Txe=s(kF);Dge=n(Txe,"STRONG",{});var Nft=s(Dge);tDo=r(Nft,"deberta-v2"),Nft.forEach(t),aDo=r(Txe," \u2014 "),VO=n(Txe,"A",{href:!0});var jft=s(VO);nDo=r(jft,"DebertaV2ForTokenClassification"),jft.forEach(t),sDo=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),lDo=i(J),SF=n(J,"LI",{});var Mxe=s(SF);Gge=n(Mxe,"STRONG",{});var Dft=s(Gge);iDo=r(Dft,"distilbert"),Dft.forEach(t),dDo=r(Mxe," \u2014 "),XO=n(Mxe,"A",{href:!0});var Gft=s(XO);cDo=r(Gft,"DistilBertForTokenClassification"),Gft.forEach(t),mDo=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),fDo=i(J),RF=n(J,"LI",{});var Exe=s(RF);Oge=n(Exe,"STRONG",{});var Oft=s(Oge);gDo=r(Oft,"electra"),Oft.forEach(t),hDo=r(Exe," \u2014 "),zO=n(Exe,"A",{href:!0});var Vft=s(zO);uDo=r(Vft,"ElectraForTokenClassification"),Vft.forEach(t),pDo=r(Exe," (ELECTRA model)"),Exe.forEach(t),_Do=i(J),PF=n(J,"LI",{});var Cxe=s(PF);Vge=n(Cxe,"STRONG",{});var Xft=s(Vge);bDo=r(Xft,"flaubert"),Xft.forEach(t),vDo=r(Cxe," \u2014 "),WO=n(Cxe,"A",{href:!0});var zft=s(WO);FDo=r(zft,"FlaubertForTokenClassification"),zft.forEach(t),TDo=r(Cxe," (FlauBERT model)"),Cxe.forEach(t),MDo=i(J),BF=n(J,"LI",{});var wxe=s(BF);Xge=n(wxe,"STRONG",{});var Wft=s(Xge);EDo=r(Wft,"fnet"),Wft.forEach(t),CDo=r(wxe," \u2014 "),QO=n(wxe,"A",{href:!0});var Qft=s(QO);wDo=r(Qft,"FNetForTokenClassification"),Qft.forEach(t),ADo=r(wxe," (FNet model)"),wxe.forEach(t),yDo=i(J),IF=n(J,"LI",{});var Axe=s(IF);zge=n(Axe,"STRONG",{});var Hft=s(zge);LDo=r(Hft,"funnel"),Hft.forEach(t),xDo=r(Axe," \u2014 "),HO=n(Axe,"A",{href:!0});var Uft=s(HO);$Do=r(Uft,"FunnelForTokenClassification"),Uft.forEach(t),kDo=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),SDo=i(J),qF=n(J,"LI",{});var yxe=s(qF);Wge=n(yxe,"STRONG",{});var Jft=s(Wge);RDo=r(Jft,"gpt2"),Jft.forEach(t),PDo=r(yxe," \u2014 "),UO=n(yxe,"A",{href:!0});var Yft=s(UO);BDo=r(Yft,"GPT2ForTokenClassification"),Yft.forEach(t),IDo=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),qDo=i(J),NF=n(J,"LI",{});var Lxe=s(NF);Qge=n(Lxe,"STRONG",{});var Kft=s(Qge);NDo=r(Kft,"ibert"),Kft.forEach(t),jDo=r(Lxe," \u2014 "),JO=n(Lxe,"A",{href:!0});var Zft=s(JO);DDo=r(Zft,"IBertForTokenClassification"),Zft.forEach(t),GDo=r(Lxe," (I-BERT model)"),Lxe.forEach(t),ODo=i(J),jF=n(J,"LI",{});var xxe=s(jF);Hge=n(xxe,"STRONG",{});var egt=s(Hge);VDo=r(egt,"layoutlm"),egt.forEach(t),XDo=r(xxe," \u2014 "),YO=n(xxe,"A",{href:!0});var ogt=s(YO);zDo=r(ogt,"LayoutLMForTokenClassification"),ogt.forEach(t),WDo=r(xxe," (LayoutLM model)"),xxe.forEach(t),QDo=i(J),DF=n(J,"LI",{});var $xe=s(DF);Uge=n($xe,"STRONG",{});var rgt=s(Uge);HDo=r(rgt,"layoutlmv2"),rgt.forEach(t),UDo=r($xe," \u2014 "),KO=n($xe,"A",{href:!0});var tgt=s(KO);JDo=r(tgt,"LayoutLMv2ForTokenClassification"),tgt.forEach(t),YDo=r($xe," (LayoutLMv2 model)"),$xe.forEach(t),KDo=i(J),GF=n(J,"LI",{});var kxe=s(GF);Jge=n(kxe,"STRONG",{});var agt=s(Jge);ZDo=r(agt,"layoutlmv3"),agt.forEach(t),eGo=r(kxe," \u2014 "),ZO=n(kxe,"A",{href:!0});var ngt=s(ZO);oGo=r(ngt,"LayoutLMv3ForTokenClassification"),ngt.forEach(t),rGo=r(kxe," (LayoutLMv3 model)"),kxe.forEach(t),tGo=i(J),OF=n(J,"LI",{});var Sxe=s(OF);Yge=n(Sxe,"STRONG",{});var sgt=s(Yge);aGo=r(sgt,"longformer"),sgt.forEach(t),nGo=r(Sxe," \u2014 "),eV=n(Sxe,"A",{href:!0});var lgt=s(eV);sGo=r(lgt,"LongformerForTokenClassification"),lgt.forEach(t),lGo=r(Sxe," (Longformer model)"),Sxe.forEach(t),iGo=i(J),VF=n(J,"LI",{});var Rxe=s(VF);Kge=n(Rxe,"STRONG",{});var igt=s(Kge);dGo=r(igt,"megatron-bert"),igt.forEach(t),cGo=r(Rxe," \u2014 "),oV=n(Rxe,"A",{href:!0});var dgt=s(oV);mGo=r(dgt,"MegatronBertForTokenClassification"),dgt.forEach(t),fGo=r(Rxe," (MegatronBert model)"),Rxe.forEach(t),gGo=i(J),XF=n(J,"LI",{});var Pxe=s(XF);Zge=n(Pxe,"STRONG",{});var cgt=s(Zge);hGo=r(cgt,"mobilebert"),cgt.forEach(t),uGo=r(Pxe," \u2014 "),rV=n(Pxe,"A",{href:!0});var mgt=s(rV);pGo=r(mgt,"MobileBertForTokenClassification"),mgt.forEach(t),_Go=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),bGo=i(J),zF=n(J,"LI",{});var Bxe=s(zF);ehe=n(Bxe,"STRONG",{});var fgt=s(ehe);vGo=r(fgt,"mpnet"),fgt.forEach(t),FGo=r(Bxe," \u2014 "),tV=n(Bxe,"A",{href:!0});var ggt=s(tV);TGo=r(ggt,"MPNetForTokenClassification"),ggt.forEach(t),MGo=r(Bxe," (MPNet model)"),Bxe.forEach(t),EGo=i(J),WF=n(J,"LI",{});var Ixe=s(WF);ohe=n(Ixe,"STRONG",{});var hgt=s(ohe);CGo=r(hgt,"nystromformer"),hgt.forEach(t),wGo=r(Ixe," \u2014 "),aV=n(Ixe,"A",{href:!0});var ugt=s(aV);AGo=r(ugt,"NystromformerForTokenClassification"),ugt.forEach(t),yGo=r(Ixe," (Nystromformer model)"),Ixe.forEach(t),LGo=i(J),QF=n(J,"LI",{});var qxe=s(QF);rhe=n(qxe,"STRONG",{});var pgt=s(rhe);xGo=r(pgt,"qdqbert"),pgt.forEach(t),$Go=r(qxe," \u2014 "),nV=n(qxe,"A",{href:!0});var _gt=s(nV);kGo=r(_gt,"QDQBertForTokenClassification"),_gt.forEach(t),SGo=r(qxe," (QDQBert model)"),qxe.forEach(t),RGo=i(J),HF=n(J,"LI",{});var Nxe=s(HF);the=n(Nxe,"STRONG",{});var bgt=s(the);PGo=r(bgt,"rembert"),bgt.forEach(t),BGo=r(Nxe," \u2014 "),sV=n(Nxe,"A",{href:!0});var vgt=s(sV);IGo=r(vgt,"RemBertForTokenClassification"),vgt.forEach(t),qGo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),NGo=i(J),UF=n(J,"LI",{});var jxe=s(UF);ahe=n(jxe,"STRONG",{});var Fgt=s(ahe);jGo=r(Fgt,"roberta"),Fgt.forEach(t),DGo=r(jxe," \u2014 "),lV=n(jxe,"A",{href:!0});var Tgt=s(lV);GGo=r(Tgt,"RobertaForTokenClassification"),Tgt.forEach(t),OGo=r(jxe," (RoBERTa model)"),jxe.forEach(t),VGo=i(J),JF=n(J,"LI",{});var Dxe=s(JF);nhe=n(Dxe,"STRONG",{});var Mgt=s(nhe);XGo=r(Mgt,"roformer"),Mgt.forEach(t),zGo=r(Dxe," \u2014 "),iV=n(Dxe,"A",{href:!0});var Egt=s(iV);WGo=r(Egt,"RoFormerForTokenClassification"),Egt.forEach(t),QGo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),HGo=i(J),YF=n(J,"LI",{});var Gxe=s(YF);she=n(Gxe,"STRONG",{});var Cgt=s(she);UGo=r(Cgt,"squeezebert"),Cgt.forEach(t),JGo=r(Gxe," \u2014 "),dV=n(Gxe,"A",{href:!0});var wgt=s(dV);YGo=r(wgt,"SqueezeBertForTokenClassification"),wgt.forEach(t),KGo=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),ZGo=i(J),KF=n(J,"LI",{});var Oxe=s(KF);lhe=n(Oxe,"STRONG",{});var Agt=s(lhe);eOo=r(Agt,"xlm"),Agt.forEach(t),oOo=r(Oxe," \u2014 "),cV=n(Oxe,"A",{href:!0});var ygt=s(cV);rOo=r(ygt,"XLMForTokenClassification"),ygt.forEach(t),tOo=r(Oxe," (XLM model)"),Oxe.forEach(t),aOo=i(J),ZF=n(J,"LI",{});var Vxe=s(ZF);ihe=n(Vxe,"STRONG",{});var Lgt=s(ihe);nOo=r(Lgt,"xlm-roberta"),Lgt.forEach(t),sOo=r(Vxe," \u2014 "),mV=n(Vxe,"A",{href:!0});var xgt=s(mV);lOo=r(xgt,"XLMRobertaForTokenClassification"),xgt.forEach(t),iOo=r(Vxe," (XLM-RoBERTa model)"),Vxe.forEach(t),dOo=i(J),e1=n(J,"LI",{});var Xxe=s(e1);dhe=n(Xxe,"STRONG",{});var $gt=s(dhe);cOo=r($gt,"xlm-roberta-xl"),$gt.forEach(t),mOo=r(Xxe," \u2014 "),fV=n(Xxe,"A",{href:!0});var kgt=s(fV);fOo=r(kgt,"XLMRobertaXLForTokenClassification"),kgt.forEach(t),gOo=r(Xxe," (XLM-RoBERTa-XL model)"),Xxe.forEach(t),hOo=i(J),o1=n(J,"LI",{});var zxe=s(o1);che=n(zxe,"STRONG",{});var Sgt=s(che);uOo=r(Sgt,"xlnet"),Sgt.forEach(t),pOo=r(zxe," \u2014 "),gV=n(zxe,"A",{href:!0});var Rgt=s(gV);_Oo=r(Rgt,"XLNetForTokenClassification"),Rgt.forEach(t),bOo=r(zxe," (XLNet model)"),zxe.forEach(t),vOo=i(J),r1=n(J,"LI",{});var Wxe=s(r1);mhe=n(Wxe,"STRONG",{});var Pgt=s(mhe);FOo=r(Pgt,"yoso"),Pgt.forEach(t),TOo=r(Wxe," \u2014 "),hV=n(Wxe,"A",{href:!0});var Bgt=s(hV);MOo=r(Bgt,"YosoForTokenClassification"),Bgt.forEach(t),EOo=r(Wxe," (YOSO model)"),Wxe.forEach(t),J.forEach(t),COo=i(da),t1=n(da,"P",{});var Qxe=s(t1);wOo=r(Qxe,"The model is set in evaluation mode by default using "),fhe=n(Qxe,"CODE",{});var Igt=s(fhe);AOo=r(Igt,"model.eval()"),Igt.forEach(t),yOo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(Qxe,"CODE",{});var qgt=s(ghe);LOo=r(qgt,"model.train()"),qgt.forEach(t),Qxe.forEach(t),xOo=i(da),T(a1.$$.fragment,da),da.forEach(t),Js.forEach(t),dNe=i(m),Ki=n(m,"H2",{class:!0});var gDe=s(Ki);n1=n(gDe,"A",{id:!0,class:!0,href:!0});var Ngt=s(n1);hhe=n(Ngt,"SPAN",{});var jgt=s(hhe);T(jL.$$.fragment,jgt),jgt.forEach(t),Ngt.forEach(t),$Oo=i(gDe),uhe=n(gDe,"SPAN",{});var Dgt=s(uhe);kOo=r(Dgt,"AutoModelForQuestionAnswering"),Dgt.forEach(t),gDe.forEach(t),cNe=i(m),qo=n(m,"DIV",{class:!0});var Ys=s(qo);T(DL.$$.fragment,Ys),SOo=i(Ys),Zi=n(Ys,"P",{});var EZ=s(Zi);ROo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uV=n(EZ,"A",{href:!0});var Ggt=s(uV);POo=r(Ggt,"from_pretrained()"),Ggt.forEach(t),BOo=r(EZ," class method or the "),pV=n(EZ,"A",{href:!0});var Ogt=s(pV);IOo=r(Ogt,"from_config()"),Ogt.forEach(t),qOo=r(EZ,` class
method.`),EZ.forEach(t),NOo=i(Ys),GL=n(Ys,"P",{});var hDe=s(GL);jOo=r(hDe,"This class cannot be instantiated directly using "),phe=n(hDe,"CODE",{});var Vgt=s(phe);DOo=r(Vgt,"__init__()"),Vgt.forEach(t),GOo=r(hDe," (throws an error)."),hDe.forEach(t),OOo=i(Ys),ft=n(Ys,"DIV",{class:!0});var XA=s(ft);T(OL.$$.fragment,XA),VOo=i(XA),_he=n(XA,"P",{});var Xgt=s(_he);XOo=r(Xgt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xgt.forEach(t),zOo=i(XA),ed=n(XA,"P",{});var CZ=s(ed);WOo=r(CZ,`Note:
Loading a model from its configuration file does `),bhe=n(CZ,"STRONG",{});var zgt=s(bhe);QOo=r(zgt,"not"),zgt.forEach(t),HOo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(CZ,"A",{href:!0});var Wgt=s(_V);UOo=r(Wgt,"from_pretrained()"),Wgt.forEach(t),JOo=r(CZ," to load the model weights."),CZ.forEach(t),YOo=i(XA),T(s1.$$.fragment,XA),XA.forEach(t),KOo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(VL.$$.fragment,ca),ZOo=i(ca),vhe=n(ca,"P",{});var Qgt=s(vhe);eVo=r(Qgt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qgt.forEach(t),oVo=i(ca),qa=n(ca,"P",{});var zA=s(qa);rVo=r(zA,"The model class to instantiate is selected based on the "),Fhe=n(zA,"CODE",{});var Hgt=s(Fhe);tVo=r(Hgt,"model_type"),Hgt.forEach(t),aVo=r(zA,` property of the config object (either
passed as an argument or loaded from `),The=n(zA,"CODE",{});var Ugt=s(The);nVo=r(Ugt,"pretrained_model_name_or_path"),Ugt.forEach(t),sVo=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(zA,"CODE",{});var Jgt=s(Mhe);lVo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),iVo=r(zA,":"),zA.forEach(t),dVo=i(ca),V=n(ca,"UL",{});var X=s(V);l1=n(X,"LI",{});var Hxe=s(l1);Ehe=n(Hxe,"STRONG",{});var Ygt=s(Ehe);cVo=r(Ygt,"albert"),Ygt.forEach(t),mVo=r(Hxe," \u2014 "),bV=n(Hxe,"A",{href:!0});var Kgt=s(bV);fVo=r(Kgt,"AlbertForQuestionAnswering"),Kgt.forEach(t),gVo=r(Hxe," (ALBERT model)"),Hxe.forEach(t),hVo=i(X),i1=n(X,"LI",{});var Uxe=s(i1);Che=n(Uxe,"STRONG",{});var Zgt=s(Che);uVo=r(Zgt,"bart"),Zgt.forEach(t),pVo=r(Uxe," \u2014 "),vV=n(Uxe,"A",{href:!0});var eht=s(vV);_Vo=r(eht,"BartForQuestionAnswering"),eht.forEach(t),bVo=r(Uxe," (BART model)"),Uxe.forEach(t),vVo=i(X),d1=n(X,"LI",{});var Jxe=s(d1);whe=n(Jxe,"STRONG",{});var oht=s(whe);FVo=r(oht,"bert"),oht.forEach(t),TVo=r(Jxe," \u2014 "),FV=n(Jxe,"A",{href:!0});var rht=s(FV);MVo=r(rht,"BertForQuestionAnswering"),rht.forEach(t),EVo=r(Jxe," (BERT model)"),Jxe.forEach(t),CVo=i(X),c1=n(X,"LI",{});var Yxe=s(c1);Ahe=n(Yxe,"STRONG",{});var tht=s(Ahe);wVo=r(tht,"big_bird"),tht.forEach(t),AVo=r(Yxe," \u2014 "),TV=n(Yxe,"A",{href:!0});var aht=s(TV);yVo=r(aht,"BigBirdForQuestionAnswering"),aht.forEach(t),LVo=r(Yxe," (BigBird model)"),Yxe.forEach(t),xVo=i(X),m1=n(X,"LI",{});var Kxe=s(m1);yhe=n(Kxe,"STRONG",{});var nht=s(yhe);$Vo=r(nht,"bigbird_pegasus"),nht.forEach(t),kVo=r(Kxe," \u2014 "),MV=n(Kxe,"A",{href:!0});var sht=s(MV);SVo=r(sht,"BigBirdPegasusForQuestionAnswering"),sht.forEach(t),RVo=r(Kxe," (BigBirdPegasus model)"),Kxe.forEach(t),PVo=i(X),f1=n(X,"LI",{});var Zxe=s(f1);Lhe=n(Zxe,"STRONG",{});var lht=s(Lhe);BVo=r(lht,"camembert"),lht.forEach(t),IVo=r(Zxe," \u2014 "),EV=n(Zxe,"A",{href:!0});var iht=s(EV);qVo=r(iht,"CamembertForQuestionAnswering"),iht.forEach(t),NVo=r(Zxe," (CamemBERT model)"),Zxe.forEach(t),jVo=i(X),g1=n(X,"LI",{});var e$e=s(g1);xhe=n(e$e,"STRONG",{});var dht=s(xhe);DVo=r(dht,"canine"),dht.forEach(t),GVo=r(e$e," \u2014 "),CV=n(e$e,"A",{href:!0});var cht=s(CV);OVo=r(cht,"CanineForQuestionAnswering"),cht.forEach(t),VVo=r(e$e," (Canine model)"),e$e.forEach(t),XVo=i(X),h1=n(X,"LI",{});var o$e=s(h1);$he=n(o$e,"STRONG",{});var mht=s($he);zVo=r(mht,"convbert"),mht.forEach(t),WVo=r(o$e," \u2014 "),wV=n(o$e,"A",{href:!0});var fht=s(wV);QVo=r(fht,"ConvBertForQuestionAnswering"),fht.forEach(t),HVo=r(o$e," (ConvBERT model)"),o$e.forEach(t),UVo=i(X),u1=n(X,"LI",{});var r$e=s(u1);khe=n(r$e,"STRONG",{});var ght=s(khe);JVo=r(ght,"data2vec-text"),ght.forEach(t),YVo=r(r$e," \u2014 "),AV=n(r$e,"A",{href:!0});var hht=s(AV);KVo=r(hht,"Data2VecTextForQuestionAnswering"),hht.forEach(t),ZVo=r(r$e," (Data2VecText model)"),r$e.forEach(t),eXo=i(X),p1=n(X,"LI",{});var t$e=s(p1);She=n(t$e,"STRONG",{});var uht=s(She);oXo=r(uht,"deberta"),uht.forEach(t),rXo=r(t$e," \u2014 "),yV=n(t$e,"A",{href:!0});var pht=s(yV);tXo=r(pht,"DebertaForQuestionAnswering"),pht.forEach(t),aXo=r(t$e," (DeBERTa model)"),t$e.forEach(t),nXo=i(X),_1=n(X,"LI",{});var a$e=s(_1);Rhe=n(a$e,"STRONG",{});var _ht=s(Rhe);sXo=r(_ht,"deberta-v2"),_ht.forEach(t),lXo=r(a$e," \u2014 "),LV=n(a$e,"A",{href:!0});var bht=s(LV);iXo=r(bht,"DebertaV2ForQuestionAnswering"),bht.forEach(t),dXo=r(a$e," (DeBERTa-v2 model)"),a$e.forEach(t),cXo=i(X),b1=n(X,"LI",{});var n$e=s(b1);Phe=n(n$e,"STRONG",{});var vht=s(Phe);mXo=r(vht,"distilbert"),vht.forEach(t),fXo=r(n$e," \u2014 "),xV=n(n$e,"A",{href:!0});var Fht=s(xV);gXo=r(Fht,"DistilBertForQuestionAnswering"),Fht.forEach(t),hXo=r(n$e," (DistilBERT model)"),n$e.forEach(t),uXo=i(X),v1=n(X,"LI",{});var s$e=s(v1);Bhe=n(s$e,"STRONG",{});var Tht=s(Bhe);pXo=r(Tht,"electra"),Tht.forEach(t),_Xo=r(s$e," \u2014 "),$V=n(s$e,"A",{href:!0});var Mht=s($V);bXo=r(Mht,"ElectraForQuestionAnswering"),Mht.forEach(t),vXo=r(s$e," (ELECTRA model)"),s$e.forEach(t),FXo=i(X),F1=n(X,"LI",{});var l$e=s(F1);Ihe=n(l$e,"STRONG",{});var Eht=s(Ihe);TXo=r(Eht,"flaubert"),Eht.forEach(t),MXo=r(l$e," \u2014 "),kV=n(l$e,"A",{href:!0});var Cht=s(kV);EXo=r(Cht,"FlaubertForQuestionAnsweringSimple"),Cht.forEach(t),CXo=r(l$e," (FlauBERT model)"),l$e.forEach(t),wXo=i(X),T1=n(X,"LI",{});var i$e=s(T1);qhe=n(i$e,"STRONG",{});var wht=s(qhe);AXo=r(wht,"fnet"),wht.forEach(t),yXo=r(i$e," \u2014 "),SV=n(i$e,"A",{href:!0});var Aht=s(SV);LXo=r(Aht,"FNetForQuestionAnswering"),Aht.forEach(t),xXo=r(i$e," (FNet model)"),i$e.forEach(t),$Xo=i(X),M1=n(X,"LI",{});var d$e=s(M1);Nhe=n(d$e,"STRONG",{});var yht=s(Nhe);kXo=r(yht,"funnel"),yht.forEach(t),SXo=r(d$e," \u2014 "),RV=n(d$e,"A",{href:!0});var Lht=s(RV);RXo=r(Lht,"FunnelForQuestionAnswering"),Lht.forEach(t),PXo=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),BXo=i(X),E1=n(X,"LI",{});var c$e=s(E1);jhe=n(c$e,"STRONG",{});var xht=s(jhe);IXo=r(xht,"gptj"),xht.forEach(t),qXo=r(c$e," \u2014 "),PV=n(c$e,"A",{href:!0});var $ht=s(PV);NXo=r($ht,"GPTJForQuestionAnswering"),$ht.forEach(t),jXo=r(c$e," (GPT-J model)"),c$e.forEach(t),DXo=i(X),C1=n(X,"LI",{});var m$e=s(C1);Dhe=n(m$e,"STRONG",{});var kht=s(Dhe);GXo=r(kht,"ibert"),kht.forEach(t),OXo=r(m$e," \u2014 "),BV=n(m$e,"A",{href:!0});var Sht=s(BV);VXo=r(Sht,"IBertForQuestionAnswering"),Sht.forEach(t),XXo=r(m$e," (I-BERT model)"),m$e.forEach(t),zXo=i(X),w1=n(X,"LI",{});var f$e=s(w1);Ghe=n(f$e,"STRONG",{});var Rht=s(Ghe);WXo=r(Rht,"layoutlmv2"),Rht.forEach(t),QXo=r(f$e," \u2014 "),IV=n(f$e,"A",{href:!0});var Pht=s(IV);HXo=r(Pht,"LayoutLMv2ForQuestionAnswering"),Pht.forEach(t),UXo=r(f$e," (LayoutLMv2 model)"),f$e.forEach(t),JXo=i(X),A1=n(X,"LI",{});var g$e=s(A1);Ohe=n(g$e,"STRONG",{});var Bht=s(Ohe);YXo=r(Bht,"layoutlmv3"),Bht.forEach(t),KXo=r(g$e," \u2014 "),qV=n(g$e,"A",{href:!0});var Iht=s(qV);ZXo=r(Iht,"LayoutLMv3ForQuestionAnswering"),Iht.forEach(t),ezo=r(g$e," (LayoutLMv3 model)"),g$e.forEach(t),ozo=i(X),y1=n(X,"LI",{});var h$e=s(y1);Vhe=n(h$e,"STRONG",{});var qht=s(Vhe);rzo=r(qht,"led"),qht.forEach(t),tzo=r(h$e," \u2014 "),NV=n(h$e,"A",{href:!0});var Nht=s(NV);azo=r(Nht,"LEDForQuestionAnswering"),Nht.forEach(t),nzo=r(h$e," (LED model)"),h$e.forEach(t),szo=i(X),L1=n(X,"LI",{});var u$e=s(L1);Xhe=n(u$e,"STRONG",{});var jht=s(Xhe);lzo=r(jht,"longformer"),jht.forEach(t),izo=r(u$e," \u2014 "),jV=n(u$e,"A",{href:!0});var Dht=s(jV);dzo=r(Dht,"LongformerForQuestionAnswering"),Dht.forEach(t),czo=r(u$e," (Longformer model)"),u$e.forEach(t),mzo=i(X),x1=n(X,"LI",{});var p$e=s(x1);zhe=n(p$e,"STRONG",{});var Ght=s(zhe);fzo=r(Ght,"lxmert"),Ght.forEach(t),gzo=r(p$e," \u2014 "),DV=n(p$e,"A",{href:!0});var Oht=s(DV);hzo=r(Oht,"LxmertForQuestionAnswering"),Oht.forEach(t),uzo=r(p$e," (LXMERT model)"),p$e.forEach(t),pzo=i(X),$1=n(X,"LI",{});var _$e=s($1);Whe=n(_$e,"STRONG",{});var Vht=s(Whe);_zo=r(Vht,"mbart"),Vht.forEach(t),bzo=r(_$e," \u2014 "),GV=n(_$e,"A",{href:!0});var Xht=s(GV);vzo=r(Xht,"MBartForQuestionAnswering"),Xht.forEach(t),Fzo=r(_$e," (mBART model)"),_$e.forEach(t),Tzo=i(X),k1=n(X,"LI",{});var b$e=s(k1);Qhe=n(b$e,"STRONG",{});var zht=s(Qhe);Mzo=r(zht,"megatron-bert"),zht.forEach(t),Ezo=r(b$e," \u2014 "),OV=n(b$e,"A",{href:!0});var Wht=s(OV);Czo=r(Wht,"MegatronBertForQuestionAnswering"),Wht.forEach(t),wzo=r(b$e," (MegatronBert model)"),b$e.forEach(t),Azo=i(X),S1=n(X,"LI",{});var v$e=s(S1);Hhe=n(v$e,"STRONG",{});var Qht=s(Hhe);yzo=r(Qht,"mobilebert"),Qht.forEach(t),Lzo=r(v$e," \u2014 "),VV=n(v$e,"A",{href:!0});var Hht=s(VV);xzo=r(Hht,"MobileBertForQuestionAnswering"),Hht.forEach(t),$zo=r(v$e," (MobileBERT model)"),v$e.forEach(t),kzo=i(X),R1=n(X,"LI",{});var F$e=s(R1);Uhe=n(F$e,"STRONG",{});var Uht=s(Uhe);Szo=r(Uht,"mpnet"),Uht.forEach(t),Rzo=r(F$e," \u2014 "),XV=n(F$e,"A",{href:!0});var Jht=s(XV);Pzo=r(Jht,"MPNetForQuestionAnswering"),Jht.forEach(t),Bzo=r(F$e," (MPNet model)"),F$e.forEach(t),Izo=i(X),P1=n(X,"LI",{});var T$e=s(P1);Jhe=n(T$e,"STRONG",{});var Yht=s(Jhe);qzo=r(Yht,"nystromformer"),Yht.forEach(t),Nzo=r(T$e," \u2014 "),zV=n(T$e,"A",{href:!0});var Kht=s(zV);jzo=r(Kht,"NystromformerForQuestionAnswering"),Kht.forEach(t),Dzo=r(T$e," (Nystromformer model)"),T$e.forEach(t),Gzo=i(X),B1=n(X,"LI",{});var M$e=s(B1);Yhe=n(M$e,"STRONG",{});var Zht=s(Yhe);Ozo=r(Zht,"qdqbert"),Zht.forEach(t),Vzo=r(M$e," \u2014 "),WV=n(M$e,"A",{href:!0});var eut=s(WV);Xzo=r(eut,"QDQBertForQuestionAnswering"),eut.forEach(t),zzo=r(M$e," (QDQBert model)"),M$e.forEach(t),Wzo=i(X),I1=n(X,"LI",{});var E$e=s(I1);Khe=n(E$e,"STRONG",{});var out=s(Khe);Qzo=r(out,"reformer"),out.forEach(t),Hzo=r(E$e," \u2014 "),QV=n(E$e,"A",{href:!0});var rut=s(QV);Uzo=r(rut,"ReformerForQuestionAnswering"),rut.forEach(t),Jzo=r(E$e," (Reformer model)"),E$e.forEach(t),Yzo=i(X),q1=n(X,"LI",{});var C$e=s(q1);Zhe=n(C$e,"STRONG",{});var tut=s(Zhe);Kzo=r(tut,"rembert"),tut.forEach(t),Zzo=r(C$e," \u2014 "),HV=n(C$e,"A",{href:!0});var aut=s(HV);eWo=r(aut,"RemBertForQuestionAnswering"),aut.forEach(t),oWo=r(C$e," (RemBERT model)"),C$e.forEach(t),rWo=i(X),N1=n(X,"LI",{});var w$e=s(N1);eue=n(w$e,"STRONG",{});var nut=s(eue);tWo=r(nut,"roberta"),nut.forEach(t),aWo=r(w$e," \u2014 "),UV=n(w$e,"A",{href:!0});var sut=s(UV);nWo=r(sut,"RobertaForQuestionAnswering"),sut.forEach(t),sWo=r(w$e," (RoBERTa model)"),w$e.forEach(t),lWo=i(X),j1=n(X,"LI",{});var A$e=s(j1);oue=n(A$e,"STRONG",{});var lut=s(oue);iWo=r(lut,"roformer"),lut.forEach(t),dWo=r(A$e," \u2014 "),JV=n(A$e,"A",{href:!0});var iut=s(JV);cWo=r(iut,"RoFormerForQuestionAnswering"),iut.forEach(t),mWo=r(A$e," (RoFormer model)"),A$e.forEach(t),fWo=i(X),D1=n(X,"LI",{});var y$e=s(D1);rue=n(y$e,"STRONG",{});var dut=s(rue);gWo=r(dut,"splinter"),dut.forEach(t),hWo=r(y$e," \u2014 "),YV=n(y$e,"A",{href:!0});var cut=s(YV);uWo=r(cut,"SplinterForQuestionAnswering"),cut.forEach(t),pWo=r(y$e," (Splinter model)"),y$e.forEach(t),_Wo=i(X),G1=n(X,"LI",{});var L$e=s(G1);tue=n(L$e,"STRONG",{});var mut=s(tue);bWo=r(mut,"squeezebert"),mut.forEach(t),vWo=r(L$e," \u2014 "),KV=n(L$e,"A",{href:!0});var fut=s(KV);FWo=r(fut,"SqueezeBertForQuestionAnswering"),fut.forEach(t),TWo=r(L$e," (SqueezeBERT model)"),L$e.forEach(t),MWo=i(X),O1=n(X,"LI",{});var x$e=s(O1);aue=n(x$e,"STRONG",{});var gut=s(aue);EWo=r(gut,"xlm"),gut.forEach(t),CWo=r(x$e," \u2014 "),ZV=n(x$e,"A",{href:!0});var hut=s(ZV);wWo=r(hut,"XLMForQuestionAnsweringSimple"),hut.forEach(t),AWo=r(x$e," (XLM model)"),x$e.forEach(t),yWo=i(X),V1=n(X,"LI",{});var $$e=s(V1);nue=n($$e,"STRONG",{});var uut=s(nue);LWo=r(uut,"xlm-roberta"),uut.forEach(t),xWo=r($$e," \u2014 "),eX=n($$e,"A",{href:!0});var put=s(eX);$Wo=r(put,"XLMRobertaForQuestionAnswering"),put.forEach(t),kWo=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),SWo=i(X),X1=n(X,"LI",{});var k$e=s(X1);sue=n(k$e,"STRONG",{});var _ut=s(sue);RWo=r(_ut,"xlm-roberta-xl"),_ut.forEach(t),PWo=r(k$e," \u2014 "),oX=n(k$e,"A",{href:!0});var but=s(oX);BWo=r(but,"XLMRobertaXLForQuestionAnswering"),but.forEach(t),IWo=r(k$e," (XLM-RoBERTa-XL model)"),k$e.forEach(t),qWo=i(X),z1=n(X,"LI",{});var S$e=s(z1);lue=n(S$e,"STRONG",{});var vut=s(lue);NWo=r(vut,"xlnet"),vut.forEach(t),jWo=r(S$e," \u2014 "),rX=n(S$e,"A",{href:!0});var Fut=s(rX);DWo=r(Fut,"XLNetForQuestionAnsweringSimple"),Fut.forEach(t),GWo=r(S$e," (XLNet model)"),S$e.forEach(t),OWo=i(X),W1=n(X,"LI",{});var R$e=s(W1);iue=n(R$e,"STRONG",{});var Tut=s(iue);VWo=r(Tut,"yoso"),Tut.forEach(t),XWo=r(R$e," \u2014 "),tX=n(R$e,"A",{href:!0});var Mut=s(tX);zWo=r(Mut,"YosoForQuestionAnswering"),Mut.forEach(t),WWo=r(R$e," (YOSO model)"),R$e.forEach(t),X.forEach(t),QWo=i(ca),Q1=n(ca,"P",{});var P$e=s(Q1);HWo=r(P$e,"The model is set in evaluation mode by default using "),due=n(P$e,"CODE",{});var Eut=s(due);UWo=r(Eut,"model.eval()"),Eut.forEach(t),JWo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(P$e,"CODE",{});var Cut=s(cue);YWo=r(Cut,"model.train()"),Cut.forEach(t),P$e.forEach(t),KWo=i(ca),T(H1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),mNe=i(m),od=n(m,"H2",{class:!0});var uDe=s(od);U1=n(uDe,"A",{id:!0,class:!0,href:!0});var wut=s(U1);mue=n(wut,"SPAN",{});var Aut=s(mue);T(XL.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),ZWo=i(uDe),fue=n(uDe,"SPAN",{});var yut=s(fue);eQo=r(yut,"AutoModelForTableQuestionAnswering"),yut.forEach(t),uDe.forEach(t),fNe=i(m),No=n(m,"DIV",{class:!0});var Ks=s(No);T(zL.$$.fragment,Ks),oQo=i(Ks),rd=n(Ks,"P",{});var wZ=s(rd);rQo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aX=n(wZ,"A",{href:!0});var Lut=s(aX);tQo=r(Lut,"from_pretrained()"),Lut.forEach(t),aQo=r(wZ," class method or the "),nX=n(wZ,"A",{href:!0});var xut=s(nX);nQo=r(xut,"from_config()"),xut.forEach(t),sQo=r(wZ,` class
method.`),wZ.forEach(t),lQo=i(Ks),WL=n(Ks,"P",{});var pDe=s(WL);iQo=r(pDe,"This class cannot be instantiated directly using "),gue=n(pDe,"CODE",{});var $ut=s(gue);dQo=r($ut,"__init__()"),$ut.forEach(t),cQo=r(pDe," (throws an error)."),pDe.forEach(t),mQo=i(Ks),gt=n(Ks,"DIV",{class:!0});var WA=s(gt);T(QL.$$.fragment,WA),fQo=i(WA),hue=n(WA,"P",{});var kut=s(hue);gQo=r(kut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),kut.forEach(t),hQo=i(WA),td=n(WA,"P",{});var AZ=s(td);uQo=r(AZ,`Note:
Loading a model from its configuration file does `),uue=n(AZ,"STRONG",{});var Sut=s(uue);pQo=r(Sut,"not"),Sut.forEach(t),_Qo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(AZ,"A",{href:!0});var Rut=s(sX);bQo=r(Rut,"from_pretrained()"),Rut.forEach(t),vQo=r(AZ," to load the model weights."),AZ.forEach(t),FQo=i(WA),T(J1.$$.fragment,WA),WA.forEach(t),TQo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(HL.$$.fragment,ma),MQo=i(ma),pue=n(ma,"P",{});var Put=s(pue);EQo=r(Put,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Put.forEach(t),CQo=i(ma),Na=n(ma,"P",{});var QA=s(Na);wQo=r(QA,"The model class to instantiate is selected based on the "),_ue=n(QA,"CODE",{});var But=s(_ue);AQo=r(But,"model_type"),But.forEach(t),yQo=r(QA,` property of the config object (either
passed as an argument or loaded from `),bue=n(QA,"CODE",{});var Iut=s(bue);LQo=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),xQo=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(QA,"CODE",{});var qut=s(vue);$Qo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),kQo=r(QA,":"),QA.forEach(t),SQo=i(ma),Fue=n(ma,"UL",{});var Nut=s(Fue);Y1=n(Nut,"LI",{});var B$e=s(Y1);Tue=n(B$e,"STRONG",{});var jut=s(Tue);RQo=r(jut,"tapas"),jut.forEach(t),PQo=r(B$e," \u2014 "),lX=n(B$e,"A",{href:!0});var Dut=s(lX);BQo=r(Dut,"TapasForQuestionAnswering"),Dut.forEach(t),IQo=r(B$e," (TAPAS model)"),B$e.forEach(t),Nut.forEach(t),qQo=i(ma),K1=n(ma,"P",{});var I$e=s(K1);NQo=r(I$e,"The model is set in evaluation mode by default using "),Mue=n(I$e,"CODE",{});var Gut=s(Mue);jQo=r(Gut,"model.eval()"),Gut.forEach(t),DQo=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(I$e,"CODE",{});var Out=s(Eue);GQo=r(Out,"model.train()"),Out.forEach(t),I$e.forEach(t),OQo=i(ma),T(Z1.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),gNe=i(m),ad=n(m,"H2",{class:!0});var _De=s(ad);eT=n(_De,"A",{id:!0,class:!0,href:!0});var Vut=s(eT);Cue=n(Vut,"SPAN",{});var Xut=s(Cue);T(UL.$$.fragment,Xut),Xut.forEach(t),Vut.forEach(t),VQo=i(_De),wue=n(_De,"SPAN",{});var zut=s(wue);XQo=r(zut,"AutoModelForImageClassification"),zut.forEach(t),_De.forEach(t),hNe=i(m),jo=n(m,"DIV",{class:!0});var Zs=s(jo);T(JL.$$.fragment,Zs),zQo=i(Zs),nd=n(Zs,"P",{});var yZ=s(nd);WQo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=n(yZ,"A",{href:!0});var Wut=s(iX);QQo=r(Wut,"from_pretrained()"),Wut.forEach(t),HQo=r(yZ," class method or the "),dX=n(yZ,"A",{href:!0});var Qut=s(dX);UQo=r(Qut,"from_config()"),Qut.forEach(t),JQo=r(yZ,` class
method.`),yZ.forEach(t),YQo=i(Zs),YL=n(Zs,"P",{});var bDe=s(YL);KQo=r(bDe,"This class cannot be instantiated directly using "),Aue=n(bDe,"CODE",{});var Hut=s(Aue);ZQo=r(Hut,"__init__()"),Hut.forEach(t),eHo=r(bDe," (throws an error)."),bDe.forEach(t),oHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var HA=s(ht);T(KL.$$.fragment,HA),rHo=i(HA),yue=n(HA,"P",{});var Uut=s(yue);tHo=r(Uut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Uut.forEach(t),aHo=i(HA),sd=n(HA,"P",{});var LZ=s(sd);nHo=r(LZ,`Note:
Loading a model from its configuration file does `),Lue=n(LZ,"STRONG",{});var Jut=s(Lue);sHo=r(Jut,"not"),Jut.forEach(t),lHo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(LZ,"A",{href:!0});var Yut=s(cX);iHo=r(Yut,"from_pretrained()"),Yut.forEach(t),dHo=r(LZ," to load the model weights."),LZ.forEach(t),cHo=i(HA),T(oT.$$.fragment,HA),HA.forEach(t),mHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(ZL.$$.fragment,fa),fHo=i(fa),xue=n(fa,"P",{});var Kut=s(xue);gHo=r(Kut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kut.forEach(t),hHo=i(fa),ja=n(fa,"P",{});var UA=s(ja);uHo=r(UA,"The model class to instantiate is selected based on the "),$ue=n(UA,"CODE",{});var Zut=s($ue);pHo=r(Zut,"model_type"),Zut.forEach(t),_Ho=r(UA,` property of the config object (either
passed as an argument or loaded from `),kue=n(UA,"CODE",{});var ept=s(kue);bHo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),vHo=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(UA,"CODE",{});var opt=s(Sue);FHo=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),THo=r(UA,":"),UA.forEach(t),MHo=i(fa),Fe=n(fa,"UL",{});var Te=s(Fe);rT=n(Te,"LI",{});var q$e=s(rT);Rue=n(q$e,"STRONG",{});var rpt=s(Rue);EHo=r(rpt,"beit"),rpt.forEach(t),CHo=r(q$e," \u2014 "),mX=n(q$e,"A",{href:!0});var tpt=s(mX);wHo=r(tpt,"BeitForImageClassification"),tpt.forEach(t),AHo=r(q$e," (BEiT model)"),q$e.forEach(t),yHo=i(Te),tT=n(Te,"LI",{});var N$e=s(tT);Pue=n(N$e,"STRONG",{});var apt=s(Pue);LHo=r(apt,"convnext"),apt.forEach(t),xHo=r(N$e," \u2014 "),fX=n(N$e,"A",{href:!0});var npt=s(fX);$Ho=r(npt,"ConvNextForImageClassification"),npt.forEach(t),kHo=r(N$e," (ConvNext model)"),N$e.forEach(t),SHo=i(Te),aT=n(Te,"LI",{});var j$e=s(aT);Bue=n(j$e,"STRONG",{});var spt=s(Bue);RHo=r(spt,"cvt"),spt.forEach(t),PHo=r(j$e," \u2014 "),gX=n(j$e,"A",{href:!0});var lpt=s(gX);BHo=r(lpt,"CvtForImageClassification"),lpt.forEach(t),IHo=r(j$e," (CvT model)"),j$e.forEach(t),qHo=i(Te),nT=n(Te,"LI",{});var D$e=s(nT);Iue=n(D$e,"STRONG",{});var ipt=s(Iue);NHo=r(ipt,"data2vec-vision"),ipt.forEach(t),jHo=r(D$e," \u2014 "),hX=n(D$e,"A",{href:!0});var dpt=s(hX);DHo=r(dpt,"Data2VecVisionForImageClassification"),dpt.forEach(t),GHo=r(D$e," (Data2VecVision model)"),D$e.forEach(t),OHo=i(Te),Bs=n(Te,"LI",{});var N$=s(Bs);que=n(N$,"STRONG",{});var cpt=s(que);VHo=r(cpt,"deit"),cpt.forEach(t),XHo=r(N$," \u2014 "),uX=n(N$,"A",{href:!0});var mpt=s(uX);zHo=r(mpt,"DeiTForImageClassification"),mpt.forEach(t),WHo=r(N$," or "),pX=n(N$,"A",{href:!0});var fpt=s(pX);QHo=r(fpt,"DeiTForImageClassificationWithTeacher"),fpt.forEach(t),HHo=r(N$," (DeiT model)"),N$.forEach(t),UHo=i(Te),sT=n(Te,"LI",{});var G$e=s(sT);Nue=n(G$e,"STRONG",{});var gpt=s(Nue);JHo=r(gpt,"imagegpt"),gpt.forEach(t),YHo=r(G$e," \u2014 "),_X=n(G$e,"A",{href:!0});var hpt=s(_X);KHo=r(hpt,"ImageGPTForImageClassification"),hpt.forEach(t),ZHo=r(G$e," (ImageGPT model)"),G$e.forEach(t),eUo=i(Te),ut=n(Te,"LI",{});var gm=s(ut);jue=n(gm,"STRONG",{});var upt=s(jue);oUo=r(upt,"perceiver"),upt.forEach(t),rUo=r(gm," \u2014 "),bX=n(gm,"A",{href:!0});var ppt=s(bX);tUo=r(ppt,"PerceiverForImageClassificationLearned"),ppt.forEach(t),aUo=r(gm," or "),vX=n(gm,"A",{href:!0});var _pt=s(vX);nUo=r(_pt,"PerceiverForImageClassificationFourier"),_pt.forEach(t),sUo=r(gm," or "),FX=n(gm,"A",{href:!0});var bpt=s(FX);lUo=r(bpt,"PerceiverForImageClassificationConvProcessing"),bpt.forEach(t),iUo=r(gm," (Perceiver model)"),gm.forEach(t),dUo=i(Te),lT=n(Te,"LI",{});var O$e=s(lT);Due=n(O$e,"STRONG",{});var vpt=s(Due);cUo=r(vpt,"poolformer"),vpt.forEach(t),mUo=r(O$e," \u2014 "),TX=n(O$e,"A",{href:!0});var Fpt=s(TX);fUo=r(Fpt,"PoolFormerForImageClassification"),Fpt.forEach(t),gUo=r(O$e," (PoolFormer model)"),O$e.forEach(t),hUo=i(Te),iT=n(Te,"LI",{});var V$e=s(iT);Gue=n(V$e,"STRONG",{});var Tpt=s(Gue);uUo=r(Tpt,"regnet"),Tpt.forEach(t),pUo=r(V$e," \u2014 "),MX=n(V$e,"A",{href:!0});var Mpt=s(MX);_Uo=r(Mpt,"RegNetForImageClassification"),Mpt.forEach(t),bUo=r(V$e," (RegNet model)"),V$e.forEach(t),vUo=i(Te),dT=n(Te,"LI",{});var X$e=s(dT);Oue=n(X$e,"STRONG",{});var Ept=s(Oue);FUo=r(Ept,"resnet"),Ept.forEach(t),TUo=r(X$e," \u2014 "),EX=n(X$e,"A",{href:!0});var Cpt=s(EX);MUo=r(Cpt,"ResNetForImageClassification"),Cpt.forEach(t),EUo=r(X$e," (ResNet model)"),X$e.forEach(t),CUo=i(Te),cT=n(Te,"LI",{});var z$e=s(cT);Vue=n(z$e,"STRONG",{});var wpt=s(Vue);wUo=r(wpt,"segformer"),wpt.forEach(t),AUo=r(z$e," \u2014 "),CX=n(z$e,"A",{href:!0});var Apt=s(CX);yUo=r(Apt,"SegformerForImageClassification"),Apt.forEach(t),LUo=r(z$e," (SegFormer model)"),z$e.forEach(t),xUo=i(Te),mT=n(Te,"LI",{});var W$e=s(mT);Xue=n(W$e,"STRONG",{});var ypt=s(Xue);$Uo=r(ypt,"swin"),ypt.forEach(t),kUo=r(W$e," \u2014 "),wX=n(W$e,"A",{href:!0});var Lpt=s(wX);SUo=r(Lpt,"SwinForImageClassification"),Lpt.forEach(t),RUo=r(W$e," (Swin model)"),W$e.forEach(t),PUo=i(Te),fT=n(Te,"LI",{});var Q$e=s(fT);zue=n(Q$e,"STRONG",{});var xpt=s(zue);BUo=r(xpt,"van"),xpt.forEach(t),IUo=r(Q$e," \u2014 "),AX=n(Q$e,"A",{href:!0});var $pt=s(AX);qUo=r($pt,"VanForImageClassification"),$pt.forEach(t),NUo=r(Q$e," (VAN model)"),Q$e.forEach(t),jUo=i(Te),gT=n(Te,"LI",{});var H$e=s(gT);Wue=n(H$e,"STRONG",{});var kpt=s(Wue);DUo=r(kpt,"vit"),kpt.forEach(t),GUo=r(H$e," \u2014 "),yX=n(H$e,"A",{href:!0});var Spt=s(yX);OUo=r(Spt,"ViTForImageClassification"),Spt.forEach(t),VUo=r(H$e," (ViT model)"),H$e.forEach(t),Te.forEach(t),XUo=i(fa),hT=n(fa,"P",{});var U$e=s(hT);zUo=r(U$e,"The model is set in evaluation mode by default using "),Que=n(U$e,"CODE",{});var Rpt=s(Que);WUo=r(Rpt,"model.eval()"),Rpt.forEach(t),QUo=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(U$e,"CODE",{});var Ppt=s(Hue);HUo=r(Ppt,"model.train()"),Ppt.forEach(t),U$e.forEach(t),UUo=i(fa),T(uT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),uNe=i(m),ld=n(m,"H2",{class:!0});var vDe=s(ld);pT=n(vDe,"A",{id:!0,class:!0,href:!0});var Bpt=s(pT);Uue=n(Bpt,"SPAN",{});var Ipt=s(Uue);T(e8.$$.fragment,Ipt),Ipt.forEach(t),Bpt.forEach(t),JUo=i(vDe),Jue=n(vDe,"SPAN",{});var qpt=s(Jue);YUo=r(qpt,"AutoModelForVision2Seq"),qpt.forEach(t),vDe.forEach(t),pNe=i(m),Do=n(m,"DIV",{class:!0});var el=s(Do);T(o8.$$.fragment,el),KUo=i(el),id=n(el,"P",{});var xZ=s(id);ZUo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LX=n(xZ,"A",{href:!0});var Npt=s(LX);eJo=r(Npt,"from_pretrained()"),Npt.forEach(t),oJo=r(xZ," class method or the "),xX=n(xZ,"A",{href:!0});var jpt=s(xX);rJo=r(jpt,"from_config()"),jpt.forEach(t),tJo=r(xZ,` class
method.`),xZ.forEach(t),aJo=i(el),r8=n(el,"P",{});var FDe=s(r8);nJo=r(FDe,"This class cannot be instantiated directly using "),Yue=n(FDe,"CODE",{});var Dpt=s(Yue);sJo=r(Dpt,"__init__()"),Dpt.forEach(t),lJo=r(FDe," (throws an error)."),FDe.forEach(t),iJo=i(el),pt=n(el,"DIV",{class:!0});var JA=s(pt);T(t8.$$.fragment,JA),dJo=i(JA),Kue=n(JA,"P",{});var Gpt=s(Kue);cJo=r(Gpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gpt.forEach(t),mJo=i(JA),dd=n(JA,"P",{});var $Z=s(dd);fJo=r($Z,`Note:
Loading a model from its configuration file does `),Zue=n($Z,"STRONG",{});var Opt=s(Zue);gJo=r(Opt,"not"),Opt.forEach(t),hJo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n($Z,"A",{href:!0});var Vpt=s($X);uJo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),pJo=r($Z," to load the model weights."),$Z.forEach(t),_Jo=i(JA),T(_T.$$.fragment,JA),JA.forEach(t),bJo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(a8.$$.fragment,ga),vJo=i(ga),epe=n(ga,"P",{});var Xpt=s(epe);FJo=r(Xpt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xpt.forEach(t),TJo=i(ga),Da=n(ga,"P",{});var YA=s(Da);MJo=r(YA,"The model class to instantiate is selected based on the "),ope=n(YA,"CODE",{});var zpt=s(ope);EJo=r(zpt,"model_type"),zpt.forEach(t),CJo=r(YA,` property of the config object (either
passed as an argument or loaded from `),rpe=n(YA,"CODE",{});var Wpt=s(rpe);wJo=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),AJo=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tpe=n(YA,"CODE",{});var Qpt=s(tpe);yJo=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),LJo=r(YA,":"),YA.forEach(t),xJo=i(ga),ape=n(ga,"UL",{});var Hpt=s(ape);bT=n(Hpt,"LI",{});var J$e=s(bT);npe=n(J$e,"STRONG",{});var Upt=s(npe);$Jo=r(Upt,"vision-encoder-decoder"),Upt.forEach(t),kJo=r(J$e," \u2014 "),kX=n(J$e,"A",{href:!0});var Jpt=s(kX);SJo=r(Jpt,"VisionEncoderDecoderModel"),Jpt.forEach(t),RJo=r(J$e," (Vision Encoder decoder model)"),J$e.forEach(t),Hpt.forEach(t),PJo=i(ga),vT=n(ga,"P",{});var Y$e=s(vT);BJo=r(Y$e,"The model is set in evaluation mode by default using "),spe=n(Y$e,"CODE",{});var Ypt=s(spe);IJo=r(Ypt,"model.eval()"),Ypt.forEach(t),qJo=r(Y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(Y$e,"CODE",{});var Kpt=s(lpe);NJo=r(Kpt,"model.train()"),Kpt.forEach(t),Y$e.forEach(t),jJo=i(ga),T(FT.$$.fragment,ga),ga.forEach(t),el.forEach(t),_Ne=i(m),cd=n(m,"H2",{class:!0});var TDe=s(cd);TT=n(TDe,"A",{id:!0,class:!0,href:!0});var Zpt=s(TT);ipe=n(Zpt,"SPAN",{});var e_t=s(ipe);T(n8.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),DJo=i(TDe),dpe=n(TDe,"SPAN",{});var o_t=s(dpe);GJo=r(o_t,"AutoModelForAudioClassification"),o_t.forEach(t),TDe.forEach(t),bNe=i(m),Go=n(m,"DIV",{class:!0});var ol=s(Go);T(s8.$$.fragment,ol),OJo=i(ol),md=n(ol,"P",{});var kZ=s(md);VJo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),SX=n(kZ,"A",{href:!0});var r_t=s(SX);XJo=r(r_t,"from_pretrained()"),r_t.forEach(t),zJo=r(kZ," class method or the "),RX=n(kZ,"A",{href:!0});var t_t=s(RX);WJo=r(t_t,"from_config()"),t_t.forEach(t),QJo=r(kZ,` class
method.`),kZ.forEach(t),HJo=i(ol),l8=n(ol,"P",{});var MDe=s(l8);UJo=r(MDe,"This class cannot be instantiated directly using "),cpe=n(MDe,"CODE",{});var a_t=s(cpe);JJo=r(a_t,"__init__()"),a_t.forEach(t),YJo=r(MDe," (throws an error)."),MDe.forEach(t),KJo=i(ol),_t=n(ol,"DIV",{class:!0});var KA=s(_t);T(i8.$$.fragment,KA),ZJo=i(KA),mpe=n(KA,"P",{});var n_t=s(mpe);eYo=r(n_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),n_t.forEach(t),oYo=i(KA),fd=n(KA,"P",{});var SZ=s(fd);rYo=r(SZ,`Note:
Loading a model from its configuration file does `),fpe=n(SZ,"STRONG",{});var s_t=s(fpe);tYo=r(s_t,"not"),s_t.forEach(t),aYo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(SZ,"A",{href:!0});var l_t=s(PX);nYo=r(l_t,"from_pretrained()"),l_t.forEach(t),sYo=r(SZ," to load the model weights."),SZ.forEach(t),lYo=i(KA),T(MT.$$.fragment,KA),KA.forEach(t),iYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(d8.$$.fragment,ha),dYo=i(ha),gpe=n(ha,"P",{});var i_t=s(gpe);cYo=r(i_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),i_t.forEach(t),mYo=i(ha),Ga=n(ha,"P",{});var ZA=s(Ga);fYo=r(ZA,"The model class to instantiate is selected based on the "),hpe=n(ZA,"CODE",{});var d_t=s(hpe);gYo=r(d_t,"model_type"),d_t.forEach(t),hYo=r(ZA,` property of the config object (either
passed as an argument or loaded from `),upe=n(ZA,"CODE",{});var c_t=s(upe);uYo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),pYo=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ppe=n(ZA,"CODE",{});var m_t=s(ppe);_Yo=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),bYo=r(ZA,":"),ZA.forEach(t),vYo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);ET=n(Oe,"LI",{});var K$e=s(ET);_pe=n(K$e,"STRONG",{});var f_t=s(_pe);FYo=r(f_t,"data2vec-audio"),f_t.forEach(t),TYo=r(K$e," \u2014 "),BX=n(K$e,"A",{href:!0});var g_t=s(BX);MYo=r(g_t,"Data2VecAudioForSequenceClassification"),g_t.forEach(t),EYo=r(K$e," (Data2VecAudio model)"),K$e.forEach(t),CYo=i(Oe),CT=n(Oe,"LI",{});var Z$e=s(CT);bpe=n(Z$e,"STRONG",{});var h_t=s(bpe);wYo=r(h_t,"hubert"),h_t.forEach(t),AYo=r(Z$e," \u2014 "),IX=n(Z$e,"A",{href:!0});var u_t=s(IX);yYo=r(u_t,"HubertForSequenceClassification"),u_t.forEach(t),LYo=r(Z$e," (Hubert model)"),Z$e.forEach(t),xYo=i(Oe),wT=n(Oe,"LI",{});var eke=s(wT);vpe=n(eke,"STRONG",{});var p_t=s(vpe);$Yo=r(p_t,"sew"),p_t.forEach(t),kYo=r(eke," \u2014 "),qX=n(eke,"A",{href:!0});var __t=s(qX);SYo=r(__t,"SEWForSequenceClassification"),__t.forEach(t),RYo=r(eke," (SEW model)"),eke.forEach(t),PYo=i(Oe),AT=n(Oe,"LI",{});var oke=s(AT);Fpe=n(oke,"STRONG",{});var b_t=s(Fpe);BYo=r(b_t,"sew-d"),b_t.forEach(t),IYo=r(oke," \u2014 "),NX=n(oke,"A",{href:!0});var v_t=s(NX);qYo=r(v_t,"SEWDForSequenceClassification"),v_t.forEach(t),NYo=r(oke," (SEW-D model)"),oke.forEach(t),jYo=i(Oe),yT=n(Oe,"LI",{});var rke=s(yT);Tpe=n(rke,"STRONG",{});var F_t=s(Tpe);DYo=r(F_t,"unispeech"),F_t.forEach(t),GYo=r(rke," \u2014 "),jX=n(rke,"A",{href:!0});var T_t=s(jX);OYo=r(T_t,"UniSpeechForSequenceClassification"),T_t.forEach(t),VYo=r(rke," (UniSpeech model)"),rke.forEach(t),XYo=i(Oe),LT=n(Oe,"LI",{});var tke=s(LT);Mpe=n(tke,"STRONG",{});var M_t=s(Mpe);zYo=r(M_t,"unispeech-sat"),M_t.forEach(t),WYo=r(tke," \u2014 "),DX=n(tke,"A",{href:!0});var E_t=s(DX);QYo=r(E_t,"UniSpeechSatForSequenceClassification"),E_t.forEach(t),HYo=r(tke," (UniSpeechSat model)"),tke.forEach(t),UYo=i(Oe),xT=n(Oe,"LI",{});var ake=s(xT);Epe=n(ake,"STRONG",{});var C_t=s(Epe);JYo=r(C_t,"wav2vec2"),C_t.forEach(t),YYo=r(ake," \u2014 "),GX=n(ake,"A",{href:!0});var w_t=s(GX);KYo=r(w_t,"Wav2Vec2ForSequenceClassification"),w_t.forEach(t),ZYo=r(ake," (Wav2Vec2 model)"),ake.forEach(t),eKo=i(Oe),$T=n(Oe,"LI",{});var nke=s($T);Cpe=n(nke,"STRONG",{});var A_t=s(Cpe);oKo=r(A_t,"wav2vec2-conformer"),A_t.forEach(t),rKo=r(nke," \u2014 "),OX=n(nke,"A",{href:!0});var y_t=s(OX);tKo=r(y_t,"Wav2Vec2ConformerForSequenceClassification"),y_t.forEach(t),aKo=r(nke," (Wav2Vec2-Conformer model)"),nke.forEach(t),nKo=i(Oe),kT=n(Oe,"LI",{});var ske=s(kT);wpe=n(ske,"STRONG",{});var L_t=s(wpe);sKo=r(L_t,"wavlm"),L_t.forEach(t),lKo=r(ske," \u2014 "),VX=n(ske,"A",{href:!0});var x_t=s(VX);iKo=r(x_t,"WavLMForSequenceClassification"),x_t.forEach(t),dKo=r(ske," (WavLM model)"),ske.forEach(t),Oe.forEach(t),cKo=i(ha),ST=n(ha,"P",{});var lke=s(ST);mKo=r(lke,"The model is set in evaluation mode by default using "),Ape=n(lke,"CODE",{});var $_t=s(Ape);fKo=r($_t,"model.eval()"),$_t.forEach(t),gKo=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(lke,"CODE",{});var k_t=s(ype);hKo=r(k_t,"model.train()"),k_t.forEach(t),lke.forEach(t),uKo=i(ha),T(RT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),vNe=i(m),gd=n(m,"H2",{class:!0});var EDe=s(gd);PT=n(EDe,"A",{id:!0,class:!0,href:!0});var S_t=s(PT);Lpe=n(S_t,"SPAN",{});var R_t=s(Lpe);T(c8.$$.fragment,R_t),R_t.forEach(t),S_t.forEach(t),pKo=i(EDe),xpe=n(EDe,"SPAN",{});var P_t=s(xpe);_Ko=r(P_t,"AutoModelForAudioFrameClassification"),P_t.forEach(t),EDe.forEach(t),FNe=i(m),Oo=n(m,"DIV",{class:!0});var rl=s(Oo);T(m8.$$.fragment,rl),bKo=i(rl),hd=n(rl,"P",{});var RZ=s(hd);vKo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),XX=n(RZ,"A",{href:!0});var B_t=s(XX);FKo=r(B_t,"from_pretrained()"),B_t.forEach(t),TKo=r(RZ," class method or the "),zX=n(RZ,"A",{href:!0});var I_t=s(zX);MKo=r(I_t,"from_config()"),I_t.forEach(t),EKo=r(RZ,` class
method.`),RZ.forEach(t),CKo=i(rl),f8=n(rl,"P",{});var CDe=s(f8);wKo=r(CDe,"This class cannot be instantiated directly using "),$pe=n(CDe,"CODE",{});var q_t=s($pe);AKo=r(q_t,"__init__()"),q_t.forEach(t),yKo=r(CDe," (throws an error)."),CDe.forEach(t),LKo=i(rl),bt=n(rl,"DIV",{class:!0});var e6=s(bt);T(g8.$$.fragment,e6),xKo=i(e6),kpe=n(e6,"P",{});var N_t=s(kpe);$Ko=r(N_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),N_t.forEach(t),kKo=i(e6),ud=n(e6,"P",{});var PZ=s(ud);SKo=r(PZ,`Note:
Loading a model from its configuration file does `),Spe=n(PZ,"STRONG",{});var j_t=s(Spe);RKo=r(j_t,"not"),j_t.forEach(t),PKo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(PZ,"A",{href:!0});var D_t=s(WX);BKo=r(D_t,"from_pretrained()"),D_t.forEach(t),IKo=r(PZ," to load the model weights."),PZ.forEach(t),qKo=i(e6),T(BT.$$.fragment,e6),e6.forEach(t),NKo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(h8.$$.fragment,ua),jKo=i(ua),Rpe=n(ua,"P",{});var G_t=s(Rpe);DKo=r(G_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),G_t.forEach(t),GKo=i(ua),Oa=n(ua,"P",{});var o6=s(Oa);OKo=r(o6,"The model class to instantiate is selected based on the "),Ppe=n(o6,"CODE",{});var O_t=s(Ppe);VKo=r(O_t,"model_type"),O_t.forEach(t),XKo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(o6,"CODE",{});var V_t=s(Bpe);zKo=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),WKo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(o6,"CODE",{});var X_t=s(Ipe);QKo=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),HKo=r(o6,":"),o6.forEach(t),UKo=i(ua),Kr=n(ua,"UL",{});var tl=s(Kr);IT=n(tl,"LI",{});var ike=s(IT);qpe=n(ike,"STRONG",{});var z_t=s(qpe);JKo=r(z_t,"data2vec-audio"),z_t.forEach(t),YKo=r(ike," \u2014 "),QX=n(ike,"A",{href:!0});var W_t=s(QX);KKo=r(W_t,"Data2VecAudioForAudioFrameClassification"),W_t.forEach(t),ZKo=r(ike," (Data2VecAudio model)"),ike.forEach(t),eZo=i(tl),qT=n(tl,"LI",{});var dke=s(qT);Npe=n(dke,"STRONG",{});var Q_t=s(Npe);oZo=r(Q_t,"unispeech-sat"),Q_t.forEach(t),rZo=r(dke," \u2014 "),HX=n(dke,"A",{href:!0});var H_t=s(HX);tZo=r(H_t,"UniSpeechSatForAudioFrameClassification"),H_t.forEach(t),aZo=r(dke," (UniSpeechSat model)"),dke.forEach(t),nZo=i(tl),NT=n(tl,"LI",{});var cke=s(NT);jpe=n(cke,"STRONG",{});var U_t=s(jpe);sZo=r(U_t,"wav2vec2"),U_t.forEach(t),lZo=r(cke," \u2014 "),UX=n(cke,"A",{href:!0});var J_t=s(UX);iZo=r(J_t,"Wav2Vec2ForAudioFrameClassification"),J_t.forEach(t),dZo=r(cke," (Wav2Vec2 model)"),cke.forEach(t),cZo=i(tl),jT=n(tl,"LI",{});var mke=s(jT);Dpe=n(mke,"STRONG",{});var Y_t=s(Dpe);mZo=r(Y_t,"wav2vec2-conformer"),Y_t.forEach(t),fZo=r(mke," \u2014 "),JX=n(mke,"A",{href:!0});var K_t=s(JX);gZo=r(K_t,"Wav2Vec2ConformerForAudioFrameClassification"),K_t.forEach(t),hZo=r(mke," (Wav2Vec2-Conformer model)"),mke.forEach(t),uZo=i(tl),DT=n(tl,"LI",{});var fke=s(DT);Gpe=n(fke,"STRONG",{});var Z_t=s(Gpe);pZo=r(Z_t,"wavlm"),Z_t.forEach(t),_Zo=r(fke," \u2014 "),YX=n(fke,"A",{href:!0});var ebt=s(YX);bZo=r(ebt,"WavLMForAudioFrameClassification"),ebt.forEach(t),vZo=r(fke," (WavLM model)"),fke.forEach(t),tl.forEach(t),FZo=i(ua),GT=n(ua,"P",{});var gke=s(GT);TZo=r(gke,"The model is set in evaluation mode by default using "),Ope=n(gke,"CODE",{});var obt=s(Ope);MZo=r(obt,"model.eval()"),obt.forEach(t),EZo=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(gke,"CODE",{});var rbt=s(Vpe);CZo=r(rbt,"model.train()"),rbt.forEach(t),gke.forEach(t),wZo=i(ua),T(OT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),TNe=i(m),pd=n(m,"H2",{class:!0});var wDe=s(pd);VT=n(wDe,"A",{id:!0,class:!0,href:!0});var tbt=s(VT);Xpe=n(tbt,"SPAN",{});var abt=s(Xpe);T(u8.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),AZo=i(wDe),zpe=n(wDe,"SPAN",{});var nbt=s(zpe);yZo=r(nbt,"AutoModelForCTC"),nbt.forEach(t),wDe.forEach(t),MNe=i(m),Vo=n(m,"DIV",{class:!0});var al=s(Vo);T(p8.$$.fragment,al),LZo=i(al),_d=n(al,"P",{});var BZ=s(_d);xZo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),KX=n(BZ,"A",{href:!0});var sbt=s(KX);$Zo=r(sbt,"from_pretrained()"),sbt.forEach(t),kZo=r(BZ," class method or the "),ZX=n(BZ,"A",{href:!0});var lbt=s(ZX);SZo=r(lbt,"from_config()"),lbt.forEach(t),RZo=r(BZ,` class
method.`),BZ.forEach(t),PZo=i(al),_8=n(al,"P",{});var ADe=s(_8);BZo=r(ADe,"This class cannot be instantiated directly using "),Wpe=n(ADe,"CODE",{});var ibt=s(Wpe);IZo=r(ibt,"__init__()"),ibt.forEach(t),qZo=r(ADe," (throws an error)."),ADe.forEach(t),NZo=i(al),vt=n(al,"DIV",{class:!0});var r6=s(vt);T(b8.$$.fragment,r6),jZo=i(r6),Qpe=n(r6,"P",{});var dbt=s(Qpe);DZo=r(dbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dbt.forEach(t),GZo=i(r6),bd=n(r6,"P",{});var IZ=s(bd);OZo=r(IZ,`Note:
Loading a model from its configuration file does `),Hpe=n(IZ,"STRONG",{});var cbt=s(Hpe);VZo=r(cbt,"not"),cbt.forEach(t),XZo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(IZ,"A",{href:!0});var mbt=s(ez);zZo=r(mbt,"from_pretrained()"),mbt.forEach(t),WZo=r(IZ," to load the model weights."),IZ.forEach(t),QZo=i(r6),T(XT.$$.fragment,r6),r6.forEach(t),HZo=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(v8.$$.fragment,pa),UZo=i(pa),Upe=n(pa,"P",{});var fbt=s(Upe);JZo=r(fbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fbt.forEach(t),YZo=i(pa),Va=n(pa,"P",{});var t6=s(Va);KZo=r(t6,"The model class to instantiate is selected based on the "),Jpe=n(t6,"CODE",{});var gbt=s(Jpe);ZZo=r(gbt,"model_type"),gbt.forEach(t),eer=r(t6,` property of the config object (either
passed as an argument or loaded from `),Ype=n(t6,"CODE",{});var hbt=s(Ype);oer=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),rer=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(t6,"CODE",{});var ubt=s(Kpe);ter=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),aer=r(t6,":"),t6.forEach(t),ner=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);zT=n(Ve,"LI",{});var hke=s(zT);Zpe=n(hke,"STRONG",{});var pbt=s(Zpe);ser=r(pbt,"data2vec-audio"),pbt.forEach(t),ler=r(hke," \u2014 "),oz=n(hke,"A",{href:!0});var _bt=s(oz);ier=r(_bt,"Data2VecAudioForCTC"),_bt.forEach(t),der=r(hke," (Data2VecAudio model)"),hke.forEach(t),cer=i(Ve),WT=n(Ve,"LI",{});var uke=s(WT);e_e=n(uke,"STRONG",{});var bbt=s(e_e);mer=r(bbt,"hubert"),bbt.forEach(t),fer=r(uke," \u2014 "),rz=n(uke,"A",{href:!0});var vbt=s(rz);ger=r(vbt,"HubertForCTC"),vbt.forEach(t),her=r(uke," (Hubert model)"),uke.forEach(t),uer=i(Ve),QT=n(Ve,"LI",{});var pke=s(QT);o_e=n(pke,"STRONG",{});var Fbt=s(o_e);per=r(Fbt,"sew"),Fbt.forEach(t),_er=r(pke," \u2014 "),tz=n(pke,"A",{href:!0});var Tbt=s(tz);ber=r(Tbt,"SEWForCTC"),Tbt.forEach(t),ver=r(pke," (SEW model)"),pke.forEach(t),Fer=i(Ve),HT=n(Ve,"LI",{});var _ke=s(HT);r_e=n(_ke,"STRONG",{});var Mbt=s(r_e);Ter=r(Mbt,"sew-d"),Mbt.forEach(t),Mer=r(_ke," \u2014 "),az=n(_ke,"A",{href:!0});var Ebt=s(az);Eer=r(Ebt,"SEWDForCTC"),Ebt.forEach(t),Cer=r(_ke," (SEW-D model)"),_ke.forEach(t),wer=i(Ve),UT=n(Ve,"LI",{});var bke=s(UT);t_e=n(bke,"STRONG",{});var Cbt=s(t_e);Aer=r(Cbt,"unispeech"),Cbt.forEach(t),yer=r(bke," \u2014 "),nz=n(bke,"A",{href:!0});var wbt=s(nz);Ler=r(wbt,"UniSpeechForCTC"),wbt.forEach(t),xer=r(bke," (UniSpeech model)"),bke.forEach(t),$er=i(Ve),JT=n(Ve,"LI",{});var vke=s(JT);a_e=n(vke,"STRONG",{});var Abt=s(a_e);ker=r(Abt,"unispeech-sat"),Abt.forEach(t),Ser=r(vke," \u2014 "),sz=n(vke,"A",{href:!0});var ybt=s(sz);Rer=r(ybt,"UniSpeechSatForCTC"),ybt.forEach(t),Per=r(vke," (UniSpeechSat model)"),vke.forEach(t),Ber=i(Ve),YT=n(Ve,"LI",{});var Fke=s(YT);n_e=n(Fke,"STRONG",{});var Lbt=s(n_e);Ier=r(Lbt,"wav2vec2"),Lbt.forEach(t),qer=r(Fke," \u2014 "),lz=n(Fke,"A",{href:!0});var xbt=s(lz);Ner=r(xbt,"Wav2Vec2ForCTC"),xbt.forEach(t),jer=r(Fke," (Wav2Vec2 model)"),Fke.forEach(t),Der=i(Ve),KT=n(Ve,"LI",{});var Tke=s(KT);s_e=n(Tke,"STRONG",{});var $bt=s(s_e);Ger=r($bt,"wav2vec2-conformer"),$bt.forEach(t),Oer=r(Tke," \u2014 "),iz=n(Tke,"A",{href:!0});var kbt=s(iz);Ver=r(kbt,"Wav2Vec2ConformerForCTC"),kbt.forEach(t),Xer=r(Tke," (Wav2Vec2-Conformer model)"),Tke.forEach(t),zer=i(Ve),ZT=n(Ve,"LI",{});var Mke=s(ZT);l_e=n(Mke,"STRONG",{});var Sbt=s(l_e);Wer=r(Sbt,"wavlm"),Sbt.forEach(t),Qer=r(Mke," \u2014 "),dz=n(Mke,"A",{href:!0});var Rbt=s(dz);Her=r(Rbt,"WavLMForCTC"),Rbt.forEach(t),Uer=r(Mke," (WavLM model)"),Mke.forEach(t),Ve.forEach(t),Jer=i(pa),eM=n(pa,"P",{});var Eke=s(eM);Yer=r(Eke,"The model is set in evaluation mode by default using "),i_e=n(Eke,"CODE",{});var Pbt=s(i_e);Ker=r(Pbt,"model.eval()"),Pbt.forEach(t),Zer=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(Eke,"CODE",{});var Bbt=s(d_e);eor=r(Bbt,"model.train()"),Bbt.forEach(t),Eke.forEach(t),oor=i(pa),T(oM.$$.fragment,pa),pa.forEach(t),al.forEach(t),ENe=i(m),vd=n(m,"H2",{class:!0});var yDe=s(vd);rM=n(yDe,"A",{id:!0,class:!0,href:!0});var Ibt=s(rM);c_e=n(Ibt,"SPAN",{});var qbt=s(c_e);T(F8.$$.fragment,qbt),qbt.forEach(t),Ibt.forEach(t),ror=i(yDe),m_e=n(yDe,"SPAN",{});var Nbt=s(m_e);tor=r(Nbt,"AutoModelForSpeechSeq2Seq"),Nbt.forEach(t),yDe.forEach(t),CNe=i(m),Xo=n(m,"DIV",{class:!0});var nl=s(Xo);T(T8.$$.fragment,nl),aor=i(nl),Fd=n(nl,"P",{});var qZ=s(Fd);nor=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cz=n(qZ,"A",{href:!0});var jbt=s(cz);sor=r(jbt,"from_pretrained()"),jbt.forEach(t),lor=r(qZ," class method or the "),mz=n(qZ,"A",{href:!0});var Dbt=s(mz);ior=r(Dbt,"from_config()"),Dbt.forEach(t),dor=r(qZ,` class
method.`),qZ.forEach(t),cor=i(nl),M8=n(nl,"P",{});var LDe=s(M8);mor=r(LDe,"This class cannot be instantiated directly using "),f_e=n(LDe,"CODE",{});var Gbt=s(f_e);gor=r(Gbt,"__init__()"),Gbt.forEach(t),hor=r(LDe," (throws an error)."),LDe.forEach(t),uor=i(nl),Ft=n(nl,"DIV",{class:!0});var a6=s(Ft);T(E8.$$.fragment,a6),por=i(a6),g_e=n(a6,"P",{});var Obt=s(g_e);_or=r(Obt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Obt.forEach(t),bor=i(a6),Td=n(a6,"P",{});var NZ=s(Td);vor=r(NZ,`Note:
Loading a model from its configuration file does `),h_e=n(NZ,"STRONG",{});var Vbt=s(h_e);For=r(Vbt,"not"),Vbt.forEach(t),Tor=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fz=n(NZ,"A",{href:!0});var Xbt=s(fz);Mor=r(Xbt,"from_pretrained()"),Xbt.forEach(t),Eor=r(NZ," to load the model weights."),NZ.forEach(t),Cor=i(a6),T(tM.$$.fragment,a6),a6.forEach(t),wor=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(C8.$$.fragment,_a),Aor=i(_a),u_e=n(_a,"P",{});var zbt=s(u_e);yor=r(zbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zbt.forEach(t),Lor=i(_a),Xa=n(_a,"P",{});var n6=s(Xa);xor=r(n6,"The model class to instantiate is selected based on the "),p_e=n(n6,"CODE",{});var Wbt=s(p_e);$or=r(Wbt,"model_type"),Wbt.forEach(t),kor=r(n6,` property of the config object (either
passed as an argument or loaded from `),__e=n(n6,"CODE",{});var Qbt=s(__e);Sor=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),Ror=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(n6,"CODE",{});var Hbt=s(b_e);Por=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),Bor=r(n6,":"),n6.forEach(t),Ior=i(_a),w8=n(_a,"UL",{});var xDe=s(w8);aM=n(xDe,"LI",{});var Cke=s(aM);v_e=n(Cke,"STRONG",{});var Ubt=s(v_e);qor=r(Ubt,"speech-encoder-decoder"),Ubt.forEach(t),Nor=r(Cke," \u2014 "),gz=n(Cke,"A",{href:!0});var Jbt=s(gz);jor=r(Jbt,"SpeechEncoderDecoderModel"),Jbt.forEach(t),Dor=r(Cke," (Speech Encoder decoder model)"),Cke.forEach(t),Gor=i(xDe),nM=n(xDe,"LI",{});var wke=s(nM);F_e=n(wke,"STRONG",{});var Ybt=s(F_e);Oor=r(Ybt,"speech_to_text"),Ybt.forEach(t),Vor=r(wke," \u2014 "),hz=n(wke,"A",{href:!0});var Kbt=s(hz);Xor=r(Kbt,"Speech2TextForConditionalGeneration"),Kbt.forEach(t),zor=r(wke," (Speech2Text model)"),wke.forEach(t),xDe.forEach(t),Wor=i(_a),sM=n(_a,"P",{});var Ake=s(sM);Qor=r(Ake,"The model is set in evaluation mode by default using "),T_e=n(Ake,"CODE",{});var Zbt=s(T_e);Hor=r(Zbt,"model.eval()"),Zbt.forEach(t),Uor=r(Ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),M_e=n(Ake,"CODE",{});var e2t=s(M_e);Jor=r(e2t,"model.train()"),e2t.forEach(t),Ake.forEach(t),Yor=i(_a),T(lM.$$.fragment,_a),_a.forEach(t),nl.forEach(t),wNe=i(m),Md=n(m,"H2",{class:!0});var $De=s(Md);iM=n($De,"A",{id:!0,class:!0,href:!0});var o2t=s(iM);E_e=n(o2t,"SPAN",{});var r2t=s(E_e);T(A8.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),Kor=i($De),C_e=n($De,"SPAN",{});var t2t=s(C_e);Zor=r(t2t,"AutoModelForAudioXVector"),t2t.forEach(t),$De.forEach(t),ANe=i(m),zo=n(m,"DIV",{class:!0});var sl=s(zo);T(y8.$$.fragment,sl),err=i(sl),Ed=n(sl,"P",{});var jZ=s(Ed);orr=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),uz=n(jZ,"A",{href:!0});var a2t=s(uz);rrr=r(a2t,"from_pretrained()"),a2t.forEach(t),trr=r(jZ," class method or the "),pz=n(jZ,"A",{href:!0});var n2t=s(pz);arr=r(n2t,"from_config()"),n2t.forEach(t),nrr=r(jZ,` class
method.`),jZ.forEach(t),srr=i(sl),L8=n(sl,"P",{});var kDe=s(L8);lrr=r(kDe,"This class cannot be instantiated directly using "),w_e=n(kDe,"CODE",{});var s2t=s(w_e);irr=r(s2t,"__init__()"),s2t.forEach(t),drr=r(kDe," (throws an error)."),kDe.forEach(t),crr=i(sl),Tt=n(sl,"DIV",{class:!0});var s6=s(Tt);T(x8.$$.fragment,s6),mrr=i(s6),A_e=n(s6,"P",{});var l2t=s(A_e);frr=r(l2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),l2t.forEach(t),grr=i(s6),Cd=n(s6,"P",{});var DZ=s(Cd);hrr=r(DZ,`Note:
Loading a model from its configuration file does `),y_e=n(DZ,"STRONG",{});var i2t=s(y_e);urr=r(i2t,"not"),i2t.forEach(t),prr=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(DZ,"A",{href:!0});var d2t=s(_z);_rr=r(d2t,"from_pretrained()"),d2t.forEach(t),brr=r(DZ," to load the model weights."),DZ.forEach(t),vrr=i(s6),T(dM.$$.fragment,s6),s6.forEach(t),Frr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T($8.$$.fragment,ba),Trr=i(ba),L_e=n(ba,"P",{});var c2t=s(L_e);Mrr=r(c2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),c2t.forEach(t),Err=i(ba),za=n(ba,"P",{});var l6=s(za);Crr=r(l6,"The model class to instantiate is selected based on the "),x_e=n(l6,"CODE",{});var m2t=s(x_e);wrr=r(m2t,"model_type"),m2t.forEach(t),Arr=r(l6,` property of the config object (either
passed as an argument or loaded from `),$_e=n(l6,"CODE",{});var f2t=s($_e);yrr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),Lrr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k_e=n(l6,"CODE",{});var g2t=s(k_e);xrr=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),$rr=r(l6,":"),l6.forEach(t),krr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);cM=n(ll,"LI",{});var yke=s(cM);S_e=n(yke,"STRONG",{});var h2t=s(S_e);Srr=r(h2t,"data2vec-audio"),h2t.forEach(t),Rrr=r(yke," \u2014 "),bz=n(yke,"A",{href:!0});var u2t=s(bz);Prr=r(u2t,"Data2VecAudioForXVector"),u2t.forEach(t),Brr=r(yke," (Data2VecAudio model)"),yke.forEach(t),Irr=i(ll),mM=n(ll,"LI",{});var Lke=s(mM);R_e=n(Lke,"STRONG",{});var p2t=s(R_e);qrr=r(p2t,"unispeech-sat"),p2t.forEach(t),Nrr=r(Lke," \u2014 "),vz=n(Lke,"A",{href:!0});var _2t=s(vz);jrr=r(_2t,"UniSpeechSatForXVector"),_2t.forEach(t),Drr=r(Lke," (UniSpeechSat model)"),Lke.forEach(t),Grr=i(ll),fM=n(ll,"LI",{});var xke=s(fM);P_e=n(xke,"STRONG",{});var b2t=s(P_e);Orr=r(b2t,"wav2vec2"),b2t.forEach(t),Vrr=r(xke," \u2014 "),Fz=n(xke,"A",{href:!0});var v2t=s(Fz);Xrr=r(v2t,"Wav2Vec2ForXVector"),v2t.forEach(t),zrr=r(xke," (Wav2Vec2 model)"),xke.forEach(t),Wrr=i(ll),gM=n(ll,"LI",{});var $ke=s(gM);B_e=n($ke,"STRONG",{});var F2t=s(B_e);Qrr=r(F2t,"wav2vec2-conformer"),F2t.forEach(t),Hrr=r($ke," \u2014 "),Tz=n($ke,"A",{href:!0});var T2t=s(Tz);Urr=r(T2t,"Wav2Vec2ConformerForXVector"),T2t.forEach(t),Jrr=r($ke," (Wav2Vec2-Conformer model)"),$ke.forEach(t),Yrr=i(ll),hM=n(ll,"LI",{});var kke=s(hM);I_e=n(kke,"STRONG",{});var M2t=s(I_e);Krr=r(M2t,"wavlm"),M2t.forEach(t),Zrr=r(kke," \u2014 "),Mz=n(kke,"A",{href:!0});var E2t=s(Mz);etr=r(E2t,"WavLMForXVector"),E2t.forEach(t),otr=r(kke," (WavLM model)"),kke.forEach(t),ll.forEach(t),rtr=i(ba),uM=n(ba,"P",{});var Ske=s(uM);ttr=r(Ske,"The model is set in evaluation mode by default using "),q_e=n(Ske,"CODE",{});var C2t=s(q_e);atr=r(C2t,"model.eval()"),C2t.forEach(t),ntr=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(Ske,"CODE",{});var w2t=s(N_e);str=r(w2t,"model.train()"),w2t.forEach(t),Ske.forEach(t),ltr=i(ba),T(pM.$$.fragment,ba),ba.forEach(t),sl.forEach(t),yNe=i(m),wd=n(m,"H2",{class:!0});var SDe=s(wd);_M=n(SDe,"A",{id:!0,class:!0,href:!0});var A2t=s(_M);j_e=n(A2t,"SPAN",{});var y2t=s(j_e);T(k8.$$.fragment,y2t),y2t.forEach(t),A2t.forEach(t),itr=i(SDe),D_e=n(SDe,"SPAN",{});var L2t=s(D_e);dtr=r(L2t,"AutoModelForMaskedImageModeling"),L2t.forEach(t),SDe.forEach(t),LNe=i(m),Wo=n(m,"DIV",{class:!0});var il=s(Wo);T(S8.$$.fragment,il),ctr=i(il),Ad=n(il,"P",{});var GZ=s(Ad);mtr=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Ez=n(GZ,"A",{href:!0});var x2t=s(Ez);ftr=r(x2t,"from_pretrained()"),x2t.forEach(t),gtr=r(GZ," class method or the "),Cz=n(GZ,"A",{href:!0});var $2t=s(Cz);htr=r($2t,"from_config()"),$2t.forEach(t),utr=r(GZ,` class
method.`),GZ.forEach(t),ptr=i(il),R8=n(il,"P",{});var RDe=s(R8);_tr=r(RDe,"This class cannot be instantiated directly using "),G_e=n(RDe,"CODE",{});var k2t=s(G_e);btr=r(k2t,"__init__()"),k2t.forEach(t),vtr=r(RDe," (throws an error)."),RDe.forEach(t),Ftr=i(il),Mt=n(il,"DIV",{class:!0});var i6=s(Mt);T(P8.$$.fragment,i6),Ttr=i(i6),O_e=n(i6,"P",{});var S2t=s(O_e);Mtr=r(S2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),S2t.forEach(t),Etr=i(i6),yd=n(i6,"P",{});var OZ=s(yd);Ctr=r(OZ,`Note:
Loading a model from its configuration file does `),V_e=n(OZ,"STRONG",{});var R2t=s(V_e);wtr=r(R2t,"not"),R2t.forEach(t),Atr=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(OZ,"A",{href:!0});var P2t=s(wz);ytr=r(P2t,"from_pretrained()"),P2t.forEach(t),Ltr=r(OZ," to load the model weights."),OZ.forEach(t),xtr=i(i6),T(bM.$$.fragment,i6),i6.forEach(t),$tr=i(il),uo=n(il,"DIV",{class:!0});var va=s(uo);T(B8.$$.fragment,va),ktr=i(va),X_e=n(va,"P",{});var B2t=s(X_e);Str=r(B2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),B2t.forEach(t),Rtr=i(va),Wa=n(va,"P",{});var d6=s(Wa);Ptr=r(d6,"The model class to instantiate is selected based on the "),z_e=n(d6,"CODE",{});var I2t=s(z_e);Btr=r(I2t,"model_type"),I2t.forEach(t),Itr=r(d6,` property of the config object (either
passed as an argument or loaded from `),W_e=n(d6,"CODE",{});var q2t=s(W_e);qtr=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),Ntr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(d6,"CODE",{});var N2t=s(Q_e);jtr=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),Dtr=r(d6,":"),d6.forEach(t),Gtr=i(va),Ld=n(va,"UL",{});var VZ=s(Ld);vM=n(VZ,"LI",{});var Rke=s(vM);H_e=n(Rke,"STRONG",{});var j2t=s(H_e);Otr=r(j2t,"deit"),j2t.forEach(t),Vtr=r(Rke," \u2014 "),Az=n(Rke,"A",{href:!0});var D2t=s(Az);Xtr=r(D2t,"DeiTForMaskedImageModeling"),D2t.forEach(t),ztr=r(Rke," (DeiT model)"),Rke.forEach(t),Wtr=i(VZ),FM=n(VZ,"LI",{});var Pke=s(FM);U_e=n(Pke,"STRONG",{});var G2t=s(U_e);Qtr=r(G2t,"swin"),G2t.forEach(t),Htr=r(Pke," \u2014 "),yz=n(Pke,"A",{href:!0});var O2t=s(yz);Utr=r(O2t,"SwinForMaskedImageModeling"),O2t.forEach(t),Jtr=r(Pke," (Swin model)"),Pke.forEach(t),Ytr=i(VZ),TM=n(VZ,"LI",{});var Bke=s(TM);J_e=n(Bke,"STRONG",{});var V2t=s(J_e);Ktr=r(V2t,"vit"),V2t.forEach(t),Ztr=r(Bke," \u2014 "),Lz=n(Bke,"A",{href:!0});var X2t=s(Lz);ear=r(X2t,"ViTForMaskedImageModeling"),X2t.forEach(t),oar=r(Bke," (ViT model)"),Bke.forEach(t),VZ.forEach(t),rar=i(va),MM=n(va,"P",{});var Ike=s(MM);tar=r(Ike,"The model is set in evaluation mode by default using "),Y_e=n(Ike,"CODE",{});var z2t=s(Y_e);aar=r(z2t,"model.eval()"),z2t.forEach(t),nar=r(Ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(Ike,"CODE",{});var W2t=s(K_e);sar=r(W2t,"model.train()"),W2t.forEach(t),Ike.forEach(t),lar=i(va),T(EM.$$.fragment,va),va.forEach(t),il.forEach(t),xNe=i(m),xd=n(m,"H2",{class:!0});var PDe=s(xd);CM=n(PDe,"A",{id:!0,class:!0,href:!0});var Q2t=s(CM);Z_e=n(Q2t,"SPAN",{});var H2t=s(Z_e);T(I8.$$.fragment,H2t),H2t.forEach(t),Q2t.forEach(t),iar=i(PDe),ebe=n(PDe,"SPAN",{});var U2t=s(ebe);dar=r(U2t,"AutoModelForObjectDetection"),U2t.forEach(t),PDe.forEach(t),$Ne=i(m),Qo=n(m,"DIV",{class:!0});var dl=s(Qo);T(q8.$$.fragment,dl),car=i(dl),$d=n(dl,"P",{});var XZ=s($d);mar=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),xz=n(XZ,"A",{href:!0});var J2t=s(xz);far=r(J2t,"from_pretrained()"),J2t.forEach(t),gar=r(XZ," class method or the "),$z=n(XZ,"A",{href:!0});var Y2t=s($z);har=r(Y2t,"from_config()"),Y2t.forEach(t),uar=r(XZ,` class
method.`),XZ.forEach(t),par=i(dl),N8=n(dl,"P",{});var BDe=s(N8);_ar=r(BDe,"This class cannot be instantiated directly using "),obe=n(BDe,"CODE",{});var K2t=s(obe);bar=r(K2t,"__init__()"),K2t.forEach(t),Far=r(BDe," (throws an error)."),BDe.forEach(t),Tar=i(dl),Et=n(dl,"DIV",{class:!0});var c6=s(Et);T(j8.$$.fragment,c6),Mar=i(c6),rbe=n(c6,"P",{});var Z2t=s(rbe);Ear=r(Z2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Z2t.forEach(t),Car=i(c6),kd=n(c6,"P",{});var zZ=s(kd);war=r(zZ,`Note:
Loading a model from its configuration file does `),tbe=n(zZ,"STRONG",{});var evt=s(tbe);Aar=r(evt,"not"),evt.forEach(t),yar=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(zZ,"A",{href:!0});var ovt=s(kz);Lar=r(ovt,"from_pretrained()"),ovt.forEach(t),xar=r(zZ," to load the model weights."),zZ.forEach(t),$ar=i(c6),T(wM.$$.fragment,c6),c6.forEach(t),kar=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(D8.$$.fragment,Fa),Sar=i(Fa),abe=n(Fa,"P",{});var rvt=s(abe);Rar=r(rvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),rvt.forEach(t),Par=i(Fa),Qa=n(Fa,"P",{});var m6=s(Qa);Bar=r(m6,"The model class to instantiate is selected based on the "),nbe=n(m6,"CODE",{});var tvt=s(nbe);Iar=r(tvt,"model_type"),tvt.forEach(t),qar=r(m6,` property of the config object (either
passed as an argument or loaded from `),sbe=n(m6,"CODE",{});var avt=s(sbe);Nar=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),jar=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lbe=n(m6,"CODE",{});var nvt=s(lbe);Dar=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),Gar=r(m6,":"),m6.forEach(t),Oar=i(Fa),G8=n(Fa,"UL",{});var IDe=s(G8);AM=n(IDe,"LI",{});var qke=s(AM);ibe=n(qke,"STRONG",{});var svt=s(ibe);Var=r(svt,"detr"),svt.forEach(t),Xar=r(qke," \u2014 "),Sz=n(qke,"A",{href:!0});var lvt=s(Sz);zar=r(lvt,"DetrForObjectDetection"),lvt.forEach(t),War=r(qke," (DETR model)"),qke.forEach(t),Qar=i(IDe),yM=n(IDe,"LI",{});var Nke=s(yM);dbe=n(Nke,"STRONG",{});var ivt=s(dbe);Har=r(ivt,"yolos"),ivt.forEach(t),Uar=r(Nke," \u2014 "),Rz=n(Nke,"A",{href:!0});var dvt=s(Rz);Jar=r(dvt,"YolosForObjectDetection"),dvt.forEach(t),Yar=r(Nke," (YOLOS model)"),Nke.forEach(t),IDe.forEach(t),Kar=i(Fa),LM=n(Fa,"P",{});var jke=s(LM);Zar=r(jke,"The model is set in evaluation mode by default using "),cbe=n(jke,"CODE",{});var cvt=s(cbe);enr=r(cvt,"model.eval()"),cvt.forEach(t),onr=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(jke,"CODE",{});var mvt=s(mbe);rnr=r(mvt,"model.train()"),mvt.forEach(t),jke.forEach(t),tnr=i(Fa),T(xM.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),kNe=i(m),Sd=n(m,"H2",{class:!0});var qDe=s(Sd);$M=n(qDe,"A",{id:!0,class:!0,href:!0});var fvt=s($M);fbe=n(fvt,"SPAN",{});var gvt=s(fbe);T(O8.$$.fragment,gvt),gvt.forEach(t),fvt.forEach(t),anr=i(qDe),gbe=n(qDe,"SPAN",{});var hvt=s(gbe);nnr=r(hvt,"AutoModelForImageSegmentation"),hvt.forEach(t),qDe.forEach(t),SNe=i(m),Ho=n(m,"DIV",{class:!0});var cl=s(Ho);T(V8.$$.fragment,cl),snr=i(cl),Rd=n(cl,"P",{});var WZ=s(Rd);lnr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Pz=n(WZ,"A",{href:!0});var uvt=s(Pz);inr=r(uvt,"from_pretrained()"),uvt.forEach(t),dnr=r(WZ," class method or the "),Bz=n(WZ,"A",{href:!0});var pvt=s(Bz);cnr=r(pvt,"from_config()"),pvt.forEach(t),mnr=r(WZ,` class
method.`),WZ.forEach(t),fnr=i(cl),X8=n(cl,"P",{});var NDe=s(X8);gnr=r(NDe,"This class cannot be instantiated directly using "),hbe=n(NDe,"CODE",{});var _vt=s(hbe);hnr=r(_vt,"__init__()"),_vt.forEach(t),unr=r(NDe," (throws an error)."),NDe.forEach(t),pnr=i(cl),Ct=n(cl,"DIV",{class:!0});var f6=s(Ct);T(z8.$$.fragment,f6),_nr=i(f6),ube=n(f6,"P",{});var bvt=s(ube);bnr=r(bvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bvt.forEach(t),vnr=i(f6),Pd=n(f6,"P",{});var QZ=s(Pd);Fnr=r(QZ,`Note:
Loading a model from its configuration file does `),pbe=n(QZ,"STRONG",{});var vvt=s(pbe);Tnr=r(vvt,"not"),vvt.forEach(t),Mnr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(QZ,"A",{href:!0});var Fvt=s(Iz);Enr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),Cnr=r(QZ," to load the model weights."),QZ.forEach(t),wnr=i(f6),T(kM.$$.fragment,f6),f6.forEach(t),Anr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(W8.$$.fragment,Ta),ynr=i(Ta),_be=n(Ta,"P",{});var Tvt=s(_be);Lnr=r(Tvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Tvt.forEach(t),xnr=i(Ta),Ha=n(Ta,"P",{});var g6=s(Ha);$nr=r(g6,"The model class to instantiate is selected based on the "),bbe=n(g6,"CODE",{});var Mvt=s(bbe);knr=r(Mvt,"model_type"),Mvt.forEach(t),Snr=r(g6,` property of the config object (either
passed as an argument or loaded from `),vbe=n(g6,"CODE",{});var Evt=s(vbe);Rnr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),Pnr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(g6,"CODE",{});var Cvt=s(Fbe);Bnr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),Inr=r(g6,":"),g6.forEach(t),qnr=i(Ta),Tbe=n(Ta,"UL",{});var wvt=s(Tbe);SM=n(wvt,"LI",{});var Dke=s(SM);Mbe=n(Dke,"STRONG",{});var Avt=s(Mbe);Nnr=r(Avt,"detr"),Avt.forEach(t),jnr=r(Dke," \u2014 "),qz=n(Dke,"A",{href:!0});var yvt=s(qz);Dnr=r(yvt,"DetrForSegmentation"),yvt.forEach(t),Gnr=r(Dke," (DETR model)"),Dke.forEach(t),wvt.forEach(t),Onr=i(Ta),RM=n(Ta,"P",{});var Gke=s(RM);Vnr=r(Gke,"The model is set in evaluation mode by default using "),Ebe=n(Gke,"CODE",{});var Lvt=s(Ebe);Xnr=r(Lvt,"model.eval()"),Lvt.forEach(t),znr=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n(Gke,"CODE",{});var xvt=s(Cbe);Wnr=r(xvt,"model.train()"),xvt.forEach(t),Gke.forEach(t),Qnr=i(Ta),T(PM.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),RNe=i(m),Bd=n(m,"H2",{class:!0});var jDe=s(Bd);BM=n(jDe,"A",{id:!0,class:!0,href:!0});var $vt=s(BM);wbe=n($vt,"SPAN",{});var kvt=s(wbe);T(Q8.$$.fragment,kvt),kvt.forEach(t),$vt.forEach(t),Hnr=i(jDe),Abe=n(jDe,"SPAN",{});var Svt=s(Abe);Unr=r(Svt,"AutoModelForSemanticSegmentation"),Svt.forEach(t),jDe.forEach(t),PNe=i(m),Uo=n(m,"DIV",{class:!0});var ml=s(Uo);T(H8.$$.fragment,ml),Jnr=i(ml),Id=n(ml,"P",{});var HZ=s(Id);Ynr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Nz=n(HZ,"A",{href:!0});var Rvt=s(Nz);Knr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),Znr=r(HZ," class method or the "),jz=n(HZ,"A",{href:!0});var Pvt=s(jz);esr=r(Pvt,"from_config()"),Pvt.forEach(t),osr=r(HZ,` class
method.`),HZ.forEach(t),rsr=i(ml),U8=n(ml,"P",{});var DDe=s(U8);tsr=r(DDe,"This class cannot be instantiated directly using "),ybe=n(DDe,"CODE",{});var Bvt=s(ybe);asr=r(Bvt,"__init__()"),Bvt.forEach(t),nsr=r(DDe," (throws an error)."),DDe.forEach(t),ssr=i(ml),wt=n(ml,"DIV",{class:!0});var h6=s(wt);T(J8.$$.fragment,h6),lsr=i(h6),Lbe=n(h6,"P",{});var Ivt=s(Lbe);isr=r(Ivt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ivt.forEach(t),dsr=i(h6),qd=n(h6,"P",{});var UZ=s(qd);csr=r(UZ,`Note:
Loading a model from its configuration file does `),xbe=n(UZ,"STRONG",{});var qvt=s(xbe);msr=r(qvt,"not"),qvt.forEach(t),fsr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(UZ,"A",{href:!0});var Nvt=s(Dz);gsr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),hsr=r(UZ," to load the model weights."),UZ.forEach(t),usr=i(h6),T(IM.$$.fragment,h6),h6.forEach(t),psr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(Y8.$$.fragment,Ma),_sr=i(Ma),$be=n(Ma,"P",{});var jvt=s($be);bsr=r(jvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jvt.forEach(t),vsr=i(Ma),Ua=n(Ma,"P",{});var u6=s(Ua);Fsr=r(u6,"The model class to instantiate is selected based on the "),kbe=n(u6,"CODE",{});var Dvt=s(kbe);Tsr=r(Dvt,"model_type"),Dvt.forEach(t),Msr=r(u6,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(u6,"CODE",{});var Gvt=s(Sbe);Esr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),Csr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(u6,"CODE",{});var Ovt=s(Rbe);wsr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),Asr=r(u6,":"),u6.forEach(t),ysr=i(Ma),Ja=n(Ma,"UL",{});var p6=s(Ja);qM=n(p6,"LI",{});var Oke=s(qM);Pbe=n(Oke,"STRONG",{});var Vvt=s(Pbe);Lsr=r(Vvt,"beit"),Vvt.forEach(t),xsr=r(Oke," \u2014 "),Gz=n(Oke,"A",{href:!0});var Xvt=s(Gz);$sr=r(Xvt,"BeitForSemanticSegmentation"),Xvt.forEach(t),ksr=r(Oke," (BEiT model)"),Oke.forEach(t),Ssr=i(p6),NM=n(p6,"LI",{});var Vke=s(NM);Bbe=n(Vke,"STRONG",{});var zvt=s(Bbe);Rsr=r(zvt,"data2vec-vision"),zvt.forEach(t),Psr=r(Vke," \u2014 "),Oz=n(Vke,"A",{href:!0});var Wvt=s(Oz);Bsr=r(Wvt,"Data2VecVisionForSemanticSegmentation"),Wvt.forEach(t),Isr=r(Vke," (Data2VecVision model)"),Vke.forEach(t),qsr=i(p6),jM=n(p6,"LI",{});var Xke=s(jM);Ibe=n(Xke,"STRONG",{});var Qvt=s(Ibe);Nsr=r(Qvt,"dpt"),Qvt.forEach(t),jsr=r(Xke," \u2014 "),Vz=n(Xke,"A",{href:!0});var Hvt=s(Vz);Dsr=r(Hvt,"DPTForSemanticSegmentation"),Hvt.forEach(t),Gsr=r(Xke," (DPT model)"),Xke.forEach(t),Osr=i(p6),DM=n(p6,"LI",{});var zke=s(DM);qbe=n(zke,"STRONG",{});var Uvt=s(qbe);Vsr=r(Uvt,"segformer"),Uvt.forEach(t),Xsr=r(zke," \u2014 "),Xz=n(zke,"A",{href:!0});var Jvt=s(Xz);zsr=r(Jvt,"SegformerForSemanticSegmentation"),Jvt.forEach(t),Wsr=r(zke," (SegFormer model)"),zke.forEach(t),p6.forEach(t),Qsr=i(Ma),GM=n(Ma,"P",{});var Wke=s(GM);Hsr=r(Wke,"The model is set in evaluation mode by default using "),Nbe=n(Wke,"CODE",{});var Yvt=s(Nbe);Usr=r(Yvt,"model.eval()"),Yvt.forEach(t),Jsr=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jbe=n(Wke,"CODE",{});var Kvt=s(jbe);Ysr=r(Kvt,"model.train()"),Kvt.forEach(t),Wke.forEach(t),Ksr=i(Ma),T(OM.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),BNe=i(m),Nd=n(m,"H2",{class:!0});var GDe=s(Nd);VM=n(GDe,"A",{id:!0,class:!0,href:!0});var Zvt=s(VM);Dbe=n(Zvt,"SPAN",{});var eFt=s(Dbe);T(K8.$$.fragment,eFt),eFt.forEach(t),Zvt.forEach(t),Zsr=i(GDe),Gbe=n(GDe,"SPAN",{});var oFt=s(Gbe);elr=r(oFt,"AutoModelForInstanceSegmentation"),oFt.forEach(t),GDe.forEach(t),INe=i(m),Jo=n(m,"DIV",{class:!0});var fl=s(Jo);T(Z8.$$.fragment,fl),olr=i(fl),jd=n(fl,"P",{});var JZ=s(jd);rlr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),zz=n(JZ,"A",{href:!0});var rFt=s(zz);tlr=r(rFt,"from_pretrained()"),rFt.forEach(t),alr=r(JZ," class method or the "),Wz=n(JZ,"A",{href:!0});var tFt=s(Wz);nlr=r(tFt,"from_config()"),tFt.forEach(t),slr=r(JZ,` class
method.`),JZ.forEach(t),llr=i(fl),e7=n(fl,"P",{});var ODe=s(e7);ilr=r(ODe,"This class cannot be instantiated directly using "),Obe=n(ODe,"CODE",{});var aFt=s(Obe);dlr=r(aFt,"__init__()"),aFt.forEach(t),clr=r(ODe," (throws an error)."),ODe.forEach(t),mlr=i(fl),At=n(fl,"DIV",{class:!0});var _6=s(At);T(o7.$$.fragment,_6),flr=i(_6),Vbe=n(_6,"P",{});var nFt=s(Vbe);glr=r(nFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nFt.forEach(t),hlr=i(_6),Dd=n(_6,"P",{});var YZ=s(Dd);ulr=r(YZ,`Note:
Loading a model from its configuration file does `),Xbe=n(YZ,"STRONG",{});var sFt=s(Xbe);plr=r(sFt,"not"),sFt.forEach(t),_lr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(YZ,"A",{href:!0});var lFt=s(Qz);blr=r(lFt,"from_pretrained()"),lFt.forEach(t),vlr=r(YZ," to load the model weights."),YZ.forEach(t),Flr=i(_6),T(XM.$$.fragment,_6),_6.forEach(t),Tlr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(r7.$$.fragment,Ea),Mlr=i(Ea),zbe=n(Ea,"P",{});var iFt=s(zbe);Elr=r(iFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),iFt.forEach(t),Clr=i(Ea),Ya=n(Ea,"P",{});var b6=s(Ya);wlr=r(b6,"The model class to instantiate is selected based on the "),Wbe=n(b6,"CODE",{});var dFt=s(Wbe);Alr=r(dFt,"model_type"),dFt.forEach(t),ylr=r(b6,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(b6,"CODE",{});var cFt=s(Qbe);Llr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),xlr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(b6,"CODE",{});var mFt=s(Hbe);$lr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),klr=r(b6,":"),b6.forEach(t),Slr=i(Ea),Ube=n(Ea,"UL",{});var fFt=s(Ube);zM=n(fFt,"LI",{});var Qke=s(zM);Jbe=n(Qke,"STRONG",{});var gFt=s(Jbe);Rlr=r(gFt,"maskformer"),gFt.forEach(t),Plr=r(Qke," \u2014 "),Hz=n(Qke,"A",{href:!0});var hFt=s(Hz);Blr=r(hFt,"MaskFormerForInstanceSegmentation"),hFt.forEach(t),Ilr=r(Qke," (MaskFormer model)"),Qke.forEach(t),fFt.forEach(t),qlr=i(Ea),WM=n(Ea,"P",{});var Hke=s(WM);Nlr=r(Hke,"The model is set in evaluation mode by default using "),Ybe=n(Hke,"CODE",{});var uFt=s(Ybe);jlr=r(uFt,"model.eval()"),uFt.forEach(t),Dlr=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kbe=n(Hke,"CODE",{});var pFt=s(Kbe);Glr=r(pFt,"model.train()"),pFt.forEach(t),Hke.forEach(t),Olr=i(Ea),T(QM.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),qNe=i(m),Gd=n(m,"H2",{class:!0});var VDe=s(Gd);HM=n(VDe,"A",{id:!0,class:!0,href:!0});var _Ft=s(HM);Zbe=n(_Ft,"SPAN",{});var bFt=s(Zbe);T(t7.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),Vlr=i(VDe),e2e=n(VDe,"SPAN",{});var vFt=s(e2e);Xlr=r(vFt,"TFAutoModel"),vFt.forEach(t),VDe.forEach(t),NNe=i(m),Yo=n(m,"DIV",{class:!0});var gl=s(Yo);T(a7.$$.fragment,gl),zlr=i(gl),Od=n(gl,"P",{});var KZ=s(Od);Wlr=r(KZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Uz=n(KZ,"A",{href:!0});var FFt=s(Uz);Qlr=r(FFt,"from_pretrained()"),FFt.forEach(t),Hlr=r(KZ," class method or the "),Jz=n(KZ,"A",{href:!0});var TFt=s(Jz);Ulr=r(TFt,"from_config()"),TFt.forEach(t),Jlr=r(KZ,` class
method.`),KZ.forEach(t),Ylr=i(gl),n7=n(gl,"P",{});var XDe=s(n7);Klr=r(XDe,"This class cannot be instantiated directly using "),o2e=n(XDe,"CODE",{});var MFt=s(o2e);Zlr=r(MFt,"__init__()"),MFt.forEach(t),eir=r(XDe," (throws an error)."),XDe.forEach(t),oir=i(gl),yt=n(gl,"DIV",{class:!0});var v6=s(yt);T(s7.$$.fragment,v6),rir=i(v6),r2e=n(v6,"P",{});var EFt=s(r2e);tir=r(EFt,"Instantiates one of the base model classes of the library from a configuration."),EFt.forEach(t),air=i(v6),Vd=n(v6,"P",{});var ZZ=s(Vd);nir=r(ZZ,`Note:
Loading a model from its configuration file does `),t2e=n(ZZ,"STRONG",{});var CFt=s(t2e);sir=r(CFt,"not"),CFt.forEach(t),lir=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(ZZ,"A",{href:!0});var wFt=s(Yz);iir=r(wFt,"from_pretrained()"),wFt.forEach(t),dir=r(ZZ," to load the model weights."),ZZ.forEach(t),cir=i(v6),T(UM.$$.fragment,v6),v6.forEach(t),mir=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(l7.$$.fragment,hl),fir=i(hl),a2e=n(hl,"P",{});var AFt=s(a2e);gir=r(AFt,"Instantiate one of the base model classes of the library from a pretrained model."),AFt.forEach(t),hir=i(hl),Ka=n(hl,"P",{});var F6=s(Ka);uir=r(F6,"The model class to instantiate is selected based on the "),n2e=n(F6,"CODE",{});var yFt=s(n2e);pir=r(yFt,"model_type"),yFt.forEach(t),_ir=r(F6,` property of the config object (either
passed as an argument or loaded from `),s2e=n(F6,"CODE",{});var LFt=s(s2e);bir=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),vir=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(F6,"CODE",{});var xFt=s(l2e);Fir=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),Tir=r(F6,":"),F6.forEach(t),Mir=i(hl),N=n(hl,"UL",{});var D=s(N);JM=n(D,"LI",{});var Uke=s(JM);i2e=n(Uke,"STRONG",{});var $Ft=s(i2e);Eir=r($Ft,"albert"),$Ft.forEach(t),Cir=r(Uke," \u2014 "),Kz=n(Uke,"A",{href:!0});var kFt=s(Kz);wir=r(kFt,"TFAlbertModel"),kFt.forEach(t),Air=r(Uke," (ALBERT model)"),Uke.forEach(t),yir=i(D),YM=n(D,"LI",{});var Jke=s(YM);d2e=n(Jke,"STRONG",{});var SFt=s(d2e);Lir=r(SFt,"bart"),SFt.forEach(t),xir=r(Jke," \u2014 "),Zz=n(Jke,"A",{href:!0});var RFt=s(Zz);$ir=r(RFt,"TFBartModel"),RFt.forEach(t),kir=r(Jke," (BART model)"),Jke.forEach(t),Sir=i(D),KM=n(D,"LI",{});var Yke=s(KM);c2e=n(Yke,"STRONG",{});var PFt=s(c2e);Rir=r(PFt,"bert"),PFt.forEach(t),Pir=r(Yke," \u2014 "),eW=n(Yke,"A",{href:!0});var BFt=s(eW);Bir=r(BFt,"TFBertModel"),BFt.forEach(t),Iir=r(Yke," (BERT model)"),Yke.forEach(t),qir=i(D),ZM=n(D,"LI",{});var Kke=s(ZM);m2e=n(Kke,"STRONG",{});var IFt=s(m2e);Nir=r(IFt,"blenderbot"),IFt.forEach(t),jir=r(Kke," \u2014 "),oW=n(Kke,"A",{href:!0});var qFt=s(oW);Dir=r(qFt,"TFBlenderbotModel"),qFt.forEach(t),Gir=r(Kke," (Blenderbot model)"),Kke.forEach(t),Oir=i(D),e4=n(D,"LI",{});var Zke=s(e4);f2e=n(Zke,"STRONG",{});var NFt=s(f2e);Vir=r(NFt,"blenderbot-small"),NFt.forEach(t),Xir=r(Zke," \u2014 "),rW=n(Zke,"A",{href:!0});var jFt=s(rW);zir=r(jFt,"TFBlenderbotSmallModel"),jFt.forEach(t),Wir=r(Zke," (BlenderbotSmall model)"),Zke.forEach(t),Qir=i(D),o4=n(D,"LI",{});var eSe=s(o4);g2e=n(eSe,"STRONG",{});var DFt=s(g2e);Hir=r(DFt,"camembert"),DFt.forEach(t),Uir=r(eSe," \u2014 "),tW=n(eSe,"A",{href:!0});var GFt=s(tW);Jir=r(GFt,"TFCamembertModel"),GFt.forEach(t),Yir=r(eSe," (CamemBERT model)"),eSe.forEach(t),Kir=i(D),r4=n(D,"LI",{});var oSe=s(r4);h2e=n(oSe,"STRONG",{});var OFt=s(h2e);Zir=r(OFt,"clip"),OFt.forEach(t),edr=r(oSe," \u2014 "),aW=n(oSe,"A",{href:!0});var VFt=s(aW);odr=r(VFt,"TFCLIPModel"),VFt.forEach(t),rdr=r(oSe," (CLIP model)"),oSe.forEach(t),tdr=i(D),t4=n(D,"LI",{});var rSe=s(t4);u2e=n(rSe,"STRONG",{});var XFt=s(u2e);adr=r(XFt,"convbert"),XFt.forEach(t),ndr=r(rSe," \u2014 "),nW=n(rSe,"A",{href:!0});var zFt=s(nW);sdr=r(zFt,"TFConvBertModel"),zFt.forEach(t),ldr=r(rSe," (ConvBERT model)"),rSe.forEach(t),idr=i(D),a4=n(D,"LI",{});var tSe=s(a4);p2e=n(tSe,"STRONG",{});var WFt=s(p2e);ddr=r(WFt,"convnext"),WFt.forEach(t),cdr=r(tSe," \u2014 "),sW=n(tSe,"A",{href:!0});var QFt=s(sW);mdr=r(QFt,"TFConvNextModel"),QFt.forEach(t),fdr=r(tSe," (ConvNext model)"),tSe.forEach(t),gdr=i(D),n4=n(D,"LI",{});var aSe=s(n4);_2e=n(aSe,"STRONG",{});var HFt=s(_2e);hdr=r(HFt,"ctrl"),HFt.forEach(t),udr=r(aSe," \u2014 "),lW=n(aSe,"A",{href:!0});var UFt=s(lW);pdr=r(UFt,"TFCTRLModel"),UFt.forEach(t),_dr=r(aSe," (CTRL model)"),aSe.forEach(t),bdr=i(D),s4=n(D,"LI",{});var nSe=s(s4);b2e=n(nSe,"STRONG",{});var JFt=s(b2e);vdr=r(JFt,"data2vec-vision"),JFt.forEach(t),Fdr=r(nSe," \u2014 "),iW=n(nSe,"A",{href:!0});var YFt=s(iW);Tdr=r(YFt,"TFData2VecVisionModel"),YFt.forEach(t),Mdr=r(nSe," (Data2VecVision model)"),nSe.forEach(t),Edr=i(D),l4=n(D,"LI",{});var sSe=s(l4);v2e=n(sSe,"STRONG",{});var KFt=s(v2e);Cdr=r(KFt,"deberta"),KFt.forEach(t),wdr=r(sSe," \u2014 "),dW=n(sSe,"A",{href:!0});var ZFt=s(dW);Adr=r(ZFt,"TFDebertaModel"),ZFt.forEach(t),ydr=r(sSe," (DeBERTa model)"),sSe.forEach(t),Ldr=i(D),i4=n(D,"LI",{});var lSe=s(i4);F2e=n(lSe,"STRONG",{});var e1t=s(F2e);xdr=r(e1t,"deberta-v2"),e1t.forEach(t),$dr=r(lSe," \u2014 "),cW=n(lSe,"A",{href:!0});var o1t=s(cW);kdr=r(o1t,"TFDebertaV2Model"),o1t.forEach(t),Sdr=r(lSe," (DeBERTa-v2 model)"),lSe.forEach(t),Rdr=i(D),d4=n(D,"LI",{});var iSe=s(d4);T2e=n(iSe,"STRONG",{});var r1t=s(T2e);Pdr=r(r1t,"distilbert"),r1t.forEach(t),Bdr=r(iSe," \u2014 "),mW=n(iSe,"A",{href:!0});var t1t=s(mW);Idr=r(t1t,"TFDistilBertModel"),t1t.forEach(t),qdr=r(iSe," (DistilBERT model)"),iSe.forEach(t),Ndr=i(D),c4=n(D,"LI",{});var dSe=s(c4);M2e=n(dSe,"STRONG",{});var a1t=s(M2e);jdr=r(a1t,"dpr"),a1t.forEach(t),Ddr=r(dSe," \u2014 "),fW=n(dSe,"A",{href:!0});var n1t=s(fW);Gdr=r(n1t,"TFDPRQuestionEncoder"),n1t.forEach(t),Odr=r(dSe," (DPR model)"),dSe.forEach(t),Vdr=i(D),m4=n(D,"LI",{});var cSe=s(m4);E2e=n(cSe,"STRONG",{});var s1t=s(E2e);Xdr=r(s1t,"electra"),s1t.forEach(t),zdr=r(cSe," \u2014 "),gW=n(cSe,"A",{href:!0});var l1t=s(gW);Wdr=r(l1t,"TFElectraModel"),l1t.forEach(t),Qdr=r(cSe," (ELECTRA model)"),cSe.forEach(t),Hdr=i(D),f4=n(D,"LI",{});var mSe=s(f4);C2e=n(mSe,"STRONG",{});var i1t=s(C2e);Udr=r(i1t,"flaubert"),i1t.forEach(t),Jdr=r(mSe," \u2014 "),hW=n(mSe,"A",{href:!0});var d1t=s(hW);Ydr=r(d1t,"TFFlaubertModel"),d1t.forEach(t),Kdr=r(mSe," (FlauBERT model)"),mSe.forEach(t),Zdr=i(D),Is=n(D,"LI",{});var j$=s(Is);w2e=n(j$,"STRONG",{});var c1t=s(w2e);ecr=r(c1t,"funnel"),c1t.forEach(t),ocr=r(j$," \u2014 "),uW=n(j$,"A",{href:!0});var m1t=s(uW);rcr=r(m1t,"TFFunnelModel"),m1t.forEach(t),tcr=r(j$," or "),pW=n(j$,"A",{href:!0});var f1t=s(pW);acr=r(f1t,"TFFunnelBaseModel"),f1t.forEach(t),ncr=r(j$," (Funnel Transformer model)"),j$.forEach(t),scr=i(D),g4=n(D,"LI",{});var fSe=s(g4);A2e=n(fSe,"STRONG",{});var g1t=s(A2e);lcr=r(g1t,"gpt2"),g1t.forEach(t),icr=r(fSe," \u2014 "),_W=n(fSe,"A",{href:!0});var h1t=s(_W);dcr=r(h1t,"TFGPT2Model"),h1t.forEach(t),ccr=r(fSe," (OpenAI GPT-2 model)"),fSe.forEach(t),mcr=i(D),h4=n(D,"LI",{});var gSe=s(h4);y2e=n(gSe,"STRONG",{});var u1t=s(y2e);fcr=r(u1t,"gptj"),u1t.forEach(t),gcr=r(gSe," \u2014 "),bW=n(gSe,"A",{href:!0});var p1t=s(bW);hcr=r(p1t,"TFGPTJModel"),p1t.forEach(t),ucr=r(gSe," (GPT-J model)"),gSe.forEach(t),pcr=i(D),u4=n(D,"LI",{});var hSe=s(u4);L2e=n(hSe,"STRONG",{});var _1t=s(L2e);_cr=r(_1t,"hubert"),_1t.forEach(t),bcr=r(hSe," \u2014 "),vW=n(hSe,"A",{href:!0});var b1t=s(vW);vcr=r(b1t,"TFHubertModel"),b1t.forEach(t),Fcr=r(hSe," (Hubert model)"),hSe.forEach(t),Tcr=i(D),p4=n(D,"LI",{});var uSe=s(p4);x2e=n(uSe,"STRONG",{});var v1t=s(x2e);Mcr=r(v1t,"layoutlm"),v1t.forEach(t),Ecr=r(uSe," \u2014 "),FW=n(uSe,"A",{href:!0});var F1t=s(FW);Ccr=r(F1t,"TFLayoutLMModel"),F1t.forEach(t),wcr=r(uSe," (LayoutLM model)"),uSe.forEach(t),Acr=i(D),_4=n(D,"LI",{});var pSe=s(_4);$2e=n(pSe,"STRONG",{});var T1t=s($2e);ycr=r(T1t,"led"),T1t.forEach(t),Lcr=r(pSe," \u2014 "),TW=n(pSe,"A",{href:!0});var M1t=s(TW);xcr=r(M1t,"TFLEDModel"),M1t.forEach(t),$cr=r(pSe," (LED model)"),pSe.forEach(t),kcr=i(D),b4=n(D,"LI",{});var _Se=s(b4);k2e=n(_Se,"STRONG",{});var E1t=s(k2e);Scr=r(E1t,"longformer"),E1t.forEach(t),Rcr=r(_Se," \u2014 "),MW=n(_Se,"A",{href:!0});var C1t=s(MW);Pcr=r(C1t,"TFLongformerModel"),C1t.forEach(t),Bcr=r(_Se," (Longformer model)"),_Se.forEach(t),Icr=i(D),v4=n(D,"LI",{});var bSe=s(v4);S2e=n(bSe,"STRONG",{});var w1t=s(S2e);qcr=r(w1t,"lxmert"),w1t.forEach(t),Ncr=r(bSe," \u2014 "),EW=n(bSe,"A",{href:!0});var A1t=s(EW);jcr=r(A1t,"TFLxmertModel"),A1t.forEach(t),Dcr=r(bSe," (LXMERT model)"),bSe.forEach(t),Gcr=i(D),F4=n(D,"LI",{});var vSe=s(F4);R2e=n(vSe,"STRONG",{});var y1t=s(R2e);Ocr=r(y1t,"marian"),y1t.forEach(t),Vcr=r(vSe," \u2014 "),CW=n(vSe,"A",{href:!0});var L1t=s(CW);Xcr=r(L1t,"TFMarianModel"),L1t.forEach(t),zcr=r(vSe," (Marian model)"),vSe.forEach(t),Wcr=i(D),T4=n(D,"LI",{});var FSe=s(T4);P2e=n(FSe,"STRONG",{});var x1t=s(P2e);Qcr=r(x1t,"mbart"),x1t.forEach(t),Hcr=r(FSe," \u2014 "),wW=n(FSe,"A",{href:!0});var $1t=s(wW);Ucr=r($1t,"TFMBartModel"),$1t.forEach(t),Jcr=r(FSe," (mBART model)"),FSe.forEach(t),Ycr=i(D),M4=n(D,"LI",{});var TSe=s(M4);B2e=n(TSe,"STRONG",{});var k1t=s(B2e);Kcr=r(k1t,"mobilebert"),k1t.forEach(t),Zcr=r(TSe," \u2014 "),AW=n(TSe,"A",{href:!0});var S1t=s(AW);emr=r(S1t,"TFMobileBertModel"),S1t.forEach(t),omr=r(TSe," (MobileBERT model)"),TSe.forEach(t),rmr=i(D),E4=n(D,"LI",{});var MSe=s(E4);I2e=n(MSe,"STRONG",{});var R1t=s(I2e);tmr=r(R1t,"mpnet"),R1t.forEach(t),amr=r(MSe," \u2014 "),yW=n(MSe,"A",{href:!0});var P1t=s(yW);nmr=r(P1t,"TFMPNetModel"),P1t.forEach(t),smr=r(MSe," (MPNet model)"),MSe.forEach(t),lmr=i(D),C4=n(D,"LI",{});var ESe=s(C4);q2e=n(ESe,"STRONG",{});var B1t=s(q2e);imr=r(B1t,"mt5"),B1t.forEach(t),dmr=r(ESe," \u2014 "),LW=n(ESe,"A",{href:!0});var I1t=s(LW);cmr=r(I1t,"TFMT5Model"),I1t.forEach(t),mmr=r(ESe," (mT5 model)"),ESe.forEach(t),fmr=i(D),w4=n(D,"LI",{});var CSe=s(w4);N2e=n(CSe,"STRONG",{});var q1t=s(N2e);gmr=r(q1t,"openai-gpt"),q1t.forEach(t),hmr=r(CSe," \u2014 "),xW=n(CSe,"A",{href:!0});var N1t=s(xW);umr=r(N1t,"TFOpenAIGPTModel"),N1t.forEach(t),pmr=r(CSe," (OpenAI GPT model)"),CSe.forEach(t),_mr=i(D),A4=n(D,"LI",{});var wSe=s(A4);j2e=n(wSe,"STRONG",{});var j1t=s(j2e);bmr=r(j1t,"pegasus"),j1t.forEach(t),vmr=r(wSe," \u2014 "),$W=n(wSe,"A",{href:!0});var D1t=s($W);Fmr=r(D1t,"TFPegasusModel"),D1t.forEach(t),Tmr=r(wSe," (Pegasus model)"),wSe.forEach(t),Mmr=i(D),y4=n(D,"LI",{});var ASe=s(y4);D2e=n(ASe,"STRONG",{});var G1t=s(D2e);Emr=r(G1t,"rembert"),G1t.forEach(t),Cmr=r(ASe," \u2014 "),kW=n(ASe,"A",{href:!0});var O1t=s(kW);wmr=r(O1t,"TFRemBertModel"),O1t.forEach(t),Amr=r(ASe," (RemBERT model)"),ASe.forEach(t),ymr=i(D),L4=n(D,"LI",{});var ySe=s(L4);G2e=n(ySe,"STRONG",{});var V1t=s(G2e);Lmr=r(V1t,"roberta"),V1t.forEach(t),xmr=r(ySe," \u2014 "),SW=n(ySe,"A",{href:!0});var X1t=s(SW);$mr=r(X1t,"TFRobertaModel"),X1t.forEach(t),kmr=r(ySe," (RoBERTa model)"),ySe.forEach(t),Smr=i(D),x4=n(D,"LI",{});var LSe=s(x4);O2e=n(LSe,"STRONG",{});var z1t=s(O2e);Rmr=r(z1t,"roformer"),z1t.forEach(t),Pmr=r(LSe," \u2014 "),RW=n(LSe,"A",{href:!0});var W1t=s(RW);Bmr=r(W1t,"TFRoFormerModel"),W1t.forEach(t),Imr=r(LSe," (RoFormer model)"),LSe.forEach(t),qmr=i(D),$4=n(D,"LI",{});var xSe=s($4);V2e=n(xSe,"STRONG",{});var Q1t=s(V2e);Nmr=r(Q1t,"speech_to_text"),Q1t.forEach(t),jmr=r(xSe," \u2014 "),PW=n(xSe,"A",{href:!0});var H1t=s(PW);Dmr=r(H1t,"TFSpeech2TextModel"),H1t.forEach(t),Gmr=r(xSe," (Speech2Text model)"),xSe.forEach(t),Omr=i(D),k4=n(D,"LI",{});var $Se=s(k4);X2e=n($Se,"STRONG",{});var U1t=s(X2e);Vmr=r(U1t,"swin"),U1t.forEach(t),Xmr=r($Se," \u2014 "),BW=n($Se,"A",{href:!0});var J1t=s(BW);zmr=r(J1t,"TFSwinModel"),J1t.forEach(t),Wmr=r($Se," (Swin model)"),$Se.forEach(t),Qmr=i(D),S4=n(D,"LI",{});var kSe=s(S4);z2e=n(kSe,"STRONG",{});var Y1t=s(z2e);Hmr=r(Y1t,"t5"),Y1t.forEach(t),Umr=r(kSe," \u2014 "),IW=n(kSe,"A",{href:!0});var K1t=s(IW);Jmr=r(K1t,"TFT5Model"),K1t.forEach(t),Ymr=r(kSe," (T5 model)"),kSe.forEach(t),Kmr=i(D),R4=n(D,"LI",{});var SSe=s(R4);W2e=n(SSe,"STRONG",{});var Z1t=s(W2e);Zmr=r(Z1t,"tapas"),Z1t.forEach(t),efr=r(SSe," \u2014 "),qW=n(SSe,"A",{href:!0});var eTt=s(qW);ofr=r(eTt,"TFTapasModel"),eTt.forEach(t),rfr=r(SSe," (TAPAS model)"),SSe.forEach(t),tfr=i(D),P4=n(D,"LI",{});var RSe=s(P4);Q2e=n(RSe,"STRONG",{});var oTt=s(Q2e);afr=r(oTt,"transfo-xl"),oTt.forEach(t),nfr=r(RSe," \u2014 "),NW=n(RSe,"A",{href:!0});var rTt=s(NW);sfr=r(rTt,"TFTransfoXLModel"),rTt.forEach(t),lfr=r(RSe," (Transformer-XL model)"),RSe.forEach(t),ifr=i(D),B4=n(D,"LI",{});var PSe=s(B4);H2e=n(PSe,"STRONG",{});var tTt=s(H2e);dfr=r(tTt,"vit"),tTt.forEach(t),cfr=r(PSe," \u2014 "),jW=n(PSe,"A",{href:!0});var aTt=s(jW);mfr=r(aTt,"TFViTModel"),aTt.forEach(t),ffr=r(PSe," (ViT model)"),PSe.forEach(t),gfr=i(D),I4=n(D,"LI",{});var BSe=s(I4);U2e=n(BSe,"STRONG",{});var nTt=s(U2e);hfr=r(nTt,"vit_mae"),nTt.forEach(t),ufr=r(BSe," \u2014 "),DW=n(BSe,"A",{href:!0});var sTt=s(DW);pfr=r(sTt,"TFViTMAEModel"),sTt.forEach(t),_fr=r(BSe," (ViTMAE model)"),BSe.forEach(t),bfr=i(D),q4=n(D,"LI",{});var ISe=s(q4);J2e=n(ISe,"STRONG",{});var lTt=s(J2e);vfr=r(lTt,"wav2vec2"),lTt.forEach(t),Ffr=r(ISe," \u2014 "),GW=n(ISe,"A",{href:!0});var iTt=s(GW);Tfr=r(iTt,"TFWav2Vec2Model"),iTt.forEach(t),Mfr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),Efr=i(D),N4=n(D,"LI",{});var qSe=s(N4);Y2e=n(qSe,"STRONG",{});var dTt=s(Y2e);Cfr=r(dTt,"xlm"),dTt.forEach(t),wfr=r(qSe," \u2014 "),OW=n(qSe,"A",{href:!0});var cTt=s(OW);Afr=r(cTt,"TFXLMModel"),cTt.forEach(t),yfr=r(qSe," (XLM model)"),qSe.forEach(t),Lfr=i(D),j4=n(D,"LI",{});var NSe=s(j4);K2e=n(NSe,"STRONG",{});var mTt=s(K2e);xfr=r(mTt,"xlm-roberta"),mTt.forEach(t),$fr=r(NSe," \u2014 "),VW=n(NSe,"A",{href:!0});var fTt=s(VW);kfr=r(fTt,"TFXLMRobertaModel"),fTt.forEach(t),Sfr=r(NSe," (XLM-RoBERTa model)"),NSe.forEach(t),Rfr=i(D),D4=n(D,"LI",{});var jSe=s(D4);Z2e=n(jSe,"STRONG",{});var gTt=s(Z2e);Pfr=r(gTt,"xlnet"),gTt.forEach(t),Bfr=r(jSe," \u2014 "),XW=n(jSe,"A",{href:!0});var hTt=s(XW);Ifr=r(hTt,"TFXLNetModel"),hTt.forEach(t),qfr=r(jSe," (XLNet model)"),jSe.forEach(t),D.forEach(t),Nfr=i(hl),T(G4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),jNe=i(m),Xd=n(m,"H2",{class:!0});var zDe=s(Xd);O4=n(zDe,"A",{id:!0,class:!0,href:!0});var uTt=s(O4);eve=n(uTt,"SPAN",{});var pTt=s(eve);T(i7.$$.fragment,pTt),pTt.forEach(t),uTt.forEach(t),jfr=i(zDe),ove=n(zDe,"SPAN",{});var _Tt=s(ove);Dfr=r(_Tt,"TFAutoModelForPreTraining"),_Tt.forEach(t),zDe.forEach(t),DNe=i(m),Ko=n(m,"DIV",{class:!0});var ul=s(Ko);T(d7.$$.fragment,ul),Gfr=i(ul),zd=n(ul,"P",{});var eee=s(zd);Ofr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zW=n(eee,"A",{href:!0});var bTt=s(zW);Vfr=r(bTt,"from_pretrained()"),bTt.forEach(t),Xfr=r(eee," class method or the "),WW=n(eee,"A",{href:!0});var vTt=s(WW);zfr=r(vTt,"from_config()"),vTt.forEach(t),Wfr=r(eee,` class
method.`),eee.forEach(t),Qfr=i(ul),c7=n(ul,"P",{});var WDe=s(c7);Hfr=r(WDe,"This class cannot be instantiated directly using "),rve=n(WDe,"CODE",{});var FTt=s(rve);Ufr=r(FTt,"__init__()"),FTt.forEach(t),Jfr=r(WDe," (throws an error)."),WDe.forEach(t),Yfr=i(ul),Lt=n(ul,"DIV",{class:!0});var T6=s(Lt);T(m7.$$.fragment,T6),Kfr=i(T6),tve=n(T6,"P",{});var TTt=s(tve);Zfr=r(TTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TTt.forEach(t),egr=i(T6),Wd=n(T6,"P",{});var oee=s(Wd);ogr=r(oee,`Note:
Loading a model from its configuration file does `),ave=n(oee,"STRONG",{});var MTt=s(ave);rgr=r(MTt,"not"),MTt.forEach(t),tgr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(oee,"A",{href:!0});var ETt=s(QW);agr=r(ETt,"from_pretrained()"),ETt.forEach(t),ngr=r(oee," to load the model weights."),oee.forEach(t),sgr=i(T6),T(V4.$$.fragment,T6),T6.forEach(t),lgr=i(ul),Ar=n(ul,"DIV",{class:!0});var pl=s(Ar);T(f7.$$.fragment,pl),igr=i(pl),nve=n(pl,"P",{});var CTt=s(nve);dgr=r(CTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CTt.forEach(t),cgr=i(pl),Za=n(pl,"P",{});var M6=s(Za);mgr=r(M6,"The model class to instantiate is selected based on the "),sve=n(M6,"CODE",{});var wTt=s(sve);fgr=r(wTt,"model_type"),wTt.forEach(t),ggr=r(M6,` property of the config object (either
passed as an argument or loaded from `),lve=n(M6,"CODE",{});var ATt=s(lve);hgr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),ugr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(M6,"CODE",{});var yTt=s(ive);pgr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),_gr=r(M6,":"),M6.forEach(t),bgr=i(pl),se=n(pl,"UL",{});var le=s(se);X4=n(le,"LI",{});var DSe=s(X4);dve=n(DSe,"STRONG",{});var LTt=s(dve);vgr=r(LTt,"albert"),LTt.forEach(t),Fgr=r(DSe," \u2014 "),HW=n(DSe,"A",{href:!0});var xTt=s(HW);Tgr=r(xTt,"TFAlbertForPreTraining"),xTt.forEach(t),Mgr=r(DSe," (ALBERT model)"),DSe.forEach(t),Egr=i(le),z4=n(le,"LI",{});var GSe=s(z4);cve=n(GSe,"STRONG",{});var $Tt=s(cve);Cgr=r($Tt,"bart"),$Tt.forEach(t),wgr=r(GSe," \u2014 "),UW=n(GSe,"A",{href:!0});var kTt=s(UW);Agr=r(kTt,"TFBartForConditionalGeneration"),kTt.forEach(t),ygr=r(GSe," (BART model)"),GSe.forEach(t),Lgr=i(le),W4=n(le,"LI",{});var OSe=s(W4);mve=n(OSe,"STRONG",{});var STt=s(mve);xgr=r(STt,"bert"),STt.forEach(t),$gr=r(OSe," \u2014 "),JW=n(OSe,"A",{href:!0});var RTt=s(JW);kgr=r(RTt,"TFBertForPreTraining"),RTt.forEach(t),Sgr=r(OSe," (BERT model)"),OSe.forEach(t),Rgr=i(le),Q4=n(le,"LI",{});var VSe=s(Q4);fve=n(VSe,"STRONG",{});var PTt=s(fve);Pgr=r(PTt,"camembert"),PTt.forEach(t),Bgr=r(VSe," \u2014 "),YW=n(VSe,"A",{href:!0});var BTt=s(YW);Igr=r(BTt,"TFCamembertForMaskedLM"),BTt.forEach(t),qgr=r(VSe," (CamemBERT model)"),VSe.forEach(t),Ngr=i(le),H4=n(le,"LI",{});var XSe=s(H4);gve=n(XSe,"STRONG",{});var ITt=s(gve);jgr=r(ITt,"ctrl"),ITt.forEach(t),Dgr=r(XSe," \u2014 "),KW=n(XSe,"A",{href:!0});var qTt=s(KW);Ggr=r(qTt,"TFCTRLLMHeadModel"),qTt.forEach(t),Ogr=r(XSe," (CTRL model)"),XSe.forEach(t),Vgr=i(le),U4=n(le,"LI",{});var zSe=s(U4);hve=n(zSe,"STRONG",{});var NTt=s(hve);Xgr=r(NTt,"distilbert"),NTt.forEach(t),zgr=r(zSe," \u2014 "),ZW=n(zSe,"A",{href:!0});var jTt=s(ZW);Wgr=r(jTt,"TFDistilBertForMaskedLM"),jTt.forEach(t),Qgr=r(zSe," (DistilBERT model)"),zSe.forEach(t),Hgr=i(le),J4=n(le,"LI",{});var WSe=s(J4);uve=n(WSe,"STRONG",{});var DTt=s(uve);Ugr=r(DTt,"electra"),DTt.forEach(t),Jgr=r(WSe," \u2014 "),eQ=n(WSe,"A",{href:!0});var GTt=s(eQ);Ygr=r(GTt,"TFElectraForPreTraining"),GTt.forEach(t),Kgr=r(WSe," (ELECTRA model)"),WSe.forEach(t),Zgr=i(le),Y4=n(le,"LI",{});var QSe=s(Y4);pve=n(QSe,"STRONG",{});var OTt=s(pve);ehr=r(OTt,"flaubert"),OTt.forEach(t),ohr=r(QSe," \u2014 "),oQ=n(QSe,"A",{href:!0});var VTt=s(oQ);rhr=r(VTt,"TFFlaubertWithLMHeadModel"),VTt.forEach(t),thr=r(QSe," (FlauBERT model)"),QSe.forEach(t),ahr=i(le),K4=n(le,"LI",{});var HSe=s(K4);_ve=n(HSe,"STRONG",{});var XTt=s(_ve);nhr=r(XTt,"funnel"),XTt.forEach(t),shr=r(HSe," \u2014 "),rQ=n(HSe,"A",{href:!0});var zTt=s(rQ);lhr=r(zTt,"TFFunnelForPreTraining"),zTt.forEach(t),ihr=r(HSe," (Funnel Transformer model)"),HSe.forEach(t),dhr=i(le),Z4=n(le,"LI",{});var USe=s(Z4);bve=n(USe,"STRONG",{});var WTt=s(bve);chr=r(WTt,"gpt2"),WTt.forEach(t),mhr=r(USe," \u2014 "),tQ=n(USe,"A",{href:!0});var QTt=s(tQ);fhr=r(QTt,"TFGPT2LMHeadModel"),QTt.forEach(t),ghr=r(USe," (OpenAI GPT-2 model)"),USe.forEach(t),hhr=i(le),eE=n(le,"LI",{});var JSe=s(eE);vve=n(JSe,"STRONG",{});var HTt=s(vve);uhr=r(HTt,"layoutlm"),HTt.forEach(t),phr=r(JSe," \u2014 "),aQ=n(JSe,"A",{href:!0});var UTt=s(aQ);_hr=r(UTt,"TFLayoutLMForMaskedLM"),UTt.forEach(t),bhr=r(JSe," (LayoutLM model)"),JSe.forEach(t),vhr=i(le),oE=n(le,"LI",{});var YSe=s(oE);Fve=n(YSe,"STRONG",{});var JTt=s(Fve);Fhr=r(JTt,"lxmert"),JTt.forEach(t),Thr=r(YSe," \u2014 "),nQ=n(YSe,"A",{href:!0});var YTt=s(nQ);Mhr=r(YTt,"TFLxmertForPreTraining"),YTt.forEach(t),Ehr=r(YSe," (LXMERT model)"),YSe.forEach(t),Chr=i(le),rE=n(le,"LI",{});var KSe=s(rE);Tve=n(KSe,"STRONG",{});var KTt=s(Tve);whr=r(KTt,"mobilebert"),KTt.forEach(t),Ahr=r(KSe," \u2014 "),sQ=n(KSe,"A",{href:!0});var ZTt=s(sQ);yhr=r(ZTt,"TFMobileBertForPreTraining"),ZTt.forEach(t),Lhr=r(KSe," (MobileBERT model)"),KSe.forEach(t),xhr=i(le),tE=n(le,"LI",{});var ZSe=s(tE);Mve=n(ZSe,"STRONG",{});var eMt=s(Mve);$hr=r(eMt,"mpnet"),eMt.forEach(t),khr=r(ZSe," \u2014 "),lQ=n(ZSe,"A",{href:!0});var oMt=s(lQ);Shr=r(oMt,"TFMPNetForMaskedLM"),oMt.forEach(t),Rhr=r(ZSe," (MPNet model)"),ZSe.forEach(t),Phr=i(le),aE=n(le,"LI",{});var eRe=s(aE);Eve=n(eRe,"STRONG",{});var rMt=s(Eve);Bhr=r(rMt,"openai-gpt"),rMt.forEach(t),Ihr=r(eRe," \u2014 "),iQ=n(eRe,"A",{href:!0});var tMt=s(iQ);qhr=r(tMt,"TFOpenAIGPTLMHeadModel"),tMt.forEach(t),Nhr=r(eRe," (OpenAI GPT model)"),eRe.forEach(t),jhr=i(le),nE=n(le,"LI",{});var oRe=s(nE);Cve=n(oRe,"STRONG",{});var aMt=s(Cve);Dhr=r(aMt,"roberta"),aMt.forEach(t),Ghr=r(oRe," \u2014 "),dQ=n(oRe,"A",{href:!0});var nMt=s(dQ);Ohr=r(nMt,"TFRobertaForMaskedLM"),nMt.forEach(t),Vhr=r(oRe," (RoBERTa model)"),oRe.forEach(t),Xhr=i(le),sE=n(le,"LI",{});var rRe=s(sE);wve=n(rRe,"STRONG",{});var sMt=s(wve);zhr=r(sMt,"t5"),sMt.forEach(t),Whr=r(rRe," \u2014 "),cQ=n(rRe,"A",{href:!0});var lMt=s(cQ);Qhr=r(lMt,"TFT5ForConditionalGeneration"),lMt.forEach(t),Hhr=r(rRe," (T5 model)"),rRe.forEach(t),Uhr=i(le),lE=n(le,"LI",{});var tRe=s(lE);Ave=n(tRe,"STRONG",{});var iMt=s(Ave);Jhr=r(iMt,"tapas"),iMt.forEach(t),Yhr=r(tRe," \u2014 "),mQ=n(tRe,"A",{href:!0});var dMt=s(mQ);Khr=r(dMt,"TFTapasForMaskedLM"),dMt.forEach(t),Zhr=r(tRe," (TAPAS model)"),tRe.forEach(t),eur=i(le),iE=n(le,"LI",{});var aRe=s(iE);yve=n(aRe,"STRONG",{});var cMt=s(yve);our=r(cMt,"transfo-xl"),cMt.forEach(t),rur=r(aRe," \u2014 "),fQ=n(aRe,"A",{href:!0});var mMt=s(fQ);tur=r(mMt,"TFTransfoXLLMHeadModel"),mMt.forEach(t),aur=r(aRe," (Transformer-XL model)"),aRe.forEach(t),nur=i(le),dE=n(le,"LI",{});var nRe=s(dE);Lve=n(nRe,"STRONG",{});var fMt=s(Lve);sur=r(fMt,"vit_mae"),fMt.forEach(t),lur=r(nRe," \u2014 "),gQ=n(nRe,"A",{href:!0});var gMt=s(gQ);iur=r(gMt,"TFViTMAEForPreTraining"),gMt.forEach(t),dur=r(nRe," (ViTMAE model)"),nRe.forEach(t),cur=i(le),cE=n(le,"LI",{});var sRe=s(cE);xve=n(sRe,"STRONG",{});var hMt=s(xve);mur=r(hMt,"xlm"),hMt.forEach(t),fur=r(sRe," \u2014 "),hQ=n(sRe,"A",{href:!0});var uMt=s(hQ);gur=r(uMt,"TFXLMWithLMHeadModel"),uMt.forEach(t),hur=r(sRe," (XLM model)"),sRe.forEach(t),uur=i(le),mE=n(le,"LI",{});var lRe=s(mE);$ve=n(lRe,"STRONG",{});var pMt=s($ve);pur=r(pMt,"xlm-roberta"),pMt.forEach(t),_ur=r(lRe," \u2014 "),uQ=n(lRe,"A",{href:!0});var _Mt=s(uQ);bur=r(_Mt,"TFXLMRobertaForMaskedLM"),_Mt.forEach(t),vur=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),Fur=i(le),fE=n(le,"LI",{});var iRe=s(fE);kve=n(iRe,"STRONG",{});var bMt=s(kve);Tur=r(bMt,"xlnet"),bMt.forEach(t),Mur=r(iRe," \u2014 "),pQ=n(iRe,"A",{href:!0});var vMt=s(pQ);Eur=r(vMt,"TFXLNetLMHeadModel"),vMt.forEach(t),Cur=r(iRe," (XLNet model)"),iRe.forEach(t),le.forEach(t),wur=i(pl),T(gE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),GNe=i(m),Qd=n(m,"H2",{class:!0});var QDe=s(Qd);hE=n(QDe,"A",{id:!0,class:!0,href:!0});var FMt=s(hE);Sve=n(FMt,"SPAN",{});var TMt=s(Sve);T(g7.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),Aur=i(QDe),Rve=n(QDe,"SPAN",{});var MMt=s(Rve);yur=r(MMt,"TFAutoModelForCausalLM"),MMt.forEach(t),QDe.forEach(t),ONe=i(m),Zo=n(m,"DIV",{class:!0});var _l=s(Zo);T(h7.$$.fragment,_l),Lur=i(_l),Hd=n(_l,"P",{});var ree=s(Hd);xur=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_Q=n(ree,"A",{href:!0});var EMt=s(_Q);$ur=r(EMt,"from_pretrained()"),EMt.forEach(t),kur=r(ree," class method or the "),bQ=n(ree,"A",{href:!0});var CMt=s(bQ);Sur=r(CMt,"from_config()"),CMt.forEach(t),Rur=r(ree,` class
method.`),ree.forEach(t),Pur=i(_l),u7=n(_l,"P",{});var HDe=s(u7);Bur=r(HDe,"This class cannot be instantiated directly using "),Pve=n(HDe,"CODE",{});var wMt=s(Pve);Iur=r(wMt,"__init__()"),wMt.forEach(t),qur=r(HDe," (throws an error)."),HDe.forEach(t),Nur=i(_l),xt=n(_l,"DIV",{class:!0});var E6=s(xt);T(p7.$$.fragment,E6),jur=i(E6),Bve=n(E6,"P",{});var AMt=s(Bve);Dur=r(AMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AMt.forEach(t),Gur=i(E6),Ud=n(E6,"P",{});var tee=s(Ud);Our=r(tee,`Note:
Loading a model from its configuration file does `),Ive=n(tee,"STRONG",{});var yMt=s(Ive);Vur=r(yMt,"not"),yMt.forEach(t),Xur=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(tee,"A",{href:!0});var LMt=s(vQ);zur=r(LMt,"from_pretrained()"),LMt.forEach(t),Wur=r(tee," to load the model weights."),tee.forEach(t),Qur=i(E6),T(uE.$$.fragment,E6),E6.forEach(t),Hur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(_7.$$.fragment,bl),Uur=i(bl),qve=n(bl,"P",{});var xMt=s(qve);Jur=r(xMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xMt.forEach(t),Yur=i(bl),en=n(bl,"P",{});var C6=s(en);Kur=r(C6,"The model class to instantiate is selected based on the "),Nve=n(C6,"CODE",{});var $Mt=s(Nve);Zur=r($Mt,"model_type"),$Mt.forEach(t),epr=r(C6,` property of the config object (either
passed as an argument or loaded from `),jve=n(C6,"CODE",{});var kMt=s(jve);opr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),rpr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(C6,"CODE",{});var SMt=s(Dve);tpr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),apr=r(C6,":"),C6.forEach(t),npr=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);pE=n(Ce,"LI",{});var dRe=s(pE);Gve=n(dRe,"STRONG",{});var RMt=s(Gve);spr=r(RMt,"bert"),RMt.forEach(t),lpr=r(dRe," \u2014 "),FQ=n(dRe,"A",{href:!0});var PMt=s(FQ);ipr=r(PMt,"TFBertLMHeadModel"),PMt.forEach(t),dpr=r(dRe," (BERT model)"),dRe.forEach(t),cpr=i(Ce),_E=n(Ce,"LI",{});var cRe=s(_E);Ove=n(cRe,"STRONG",{});var BMt=s(Ove);mpr=r(BMt,"camembert"),BMt.forEach(t),fpr=r(cRe," \u2014 "),TQ=n(cRe,"A",{href:!0});var IMt=s(TQ);gpr=r(IMt,"TFCamembertForCausalLM"),IMt.forEach(t),hpr=r(cRe," (CamemBERT model)"),cRe.forEach(t),upr=i(Ce),bE=n(Ce,"LI",{});var mRe=s(bE);Vve=n(mRe,"STRONG",{});var qMt=s(Vve);ppr=r(qMt,"ctrl"),qMt.forEach(t),_pr=r(mRe," \u2014 "),MQ=n(mRe,"A",{href:!0});var NMt=s(MQ);bpr=r(NMt,"TFCTRLLMHeadModel"),NMt.forEach(t),vpr=r(mRe," (CTRL model)"),mRe.forEach(t),Fpr=i(Ce),vE=n(Ce,"LI",{});var fRe=s(vE);Xve=n(fRe,"STRONG",{});var jMt=s(Xve);Tpr=r(jMt,"gpt2"),jMt.forEach(t),Mpr=r(fRe," \u2014 "),EQ=n(fRe,"A",{href:!0});var DMt=s(EQ);Epr=r(DMt,"TFGPT2LMHeadModel"),DMt.forEach(t),Cpr=r(fRe," (OpenAI GPT-2 model)"),fRe.forEach(t),wpr=i(Ce),FE=n(Ce,"LI",{});var gRe=s(FE);zve=n(gRe,"STRONG",{});var GMt=s(zve);Apr=r(GMt,"gptj"),GMt.forEach(t),ypr=r(gRe," \u2014 "),CQ=n(gRe,"A",{href:!0});var OMt=s(CQ);Lpr=r(OMt,"TFGPTJForCausalLM"),OMt.forEach(t),xpr=r(gRe," (GPT-J model)"),gRe.forEach(t),$pr=i(Ce),TE=n(Ce,"LI",{});var hRe=s(TE);Wve=n(hRe,"STRONG",{});var VMt=s(Wve);kpr=r(VMt,"openai-gpt"),VMt.forEach(t),Spr=r(hRe," \u2014 "),wQ=n(hRe,"A",{href:!0});var XMt=s(wQ);Rpr=r(XMt,"TFOpenAIGPTLMHeadModel"),XMt.forEach(t),Ppr=r(hRe," (OpenAI GPT model)"),hRe.forEach(t),Bpr=i(Ce),ME=n(Ce,"LI",{});var uRe=s(ME);Qve=n(uRe,"STRONG",{});var zMt=s(Qve);Ipr=r(zMt,"rembert"),zMt.forEach(t),qpr=r(uRe," \u2014 "),AQ=n(uRe,"A",{href:!0});var WMt=s(AQ);Npr=r(WMt,"TFRemBertForCausalLM"),WMt.forEach(t),jpr=r(uRe," (RemBERT model)"),uRe.forEach(t),Dpr=i(Ce),EE=n(Ce,"LI",{});var pRe=s(EE);Hve=n(pRe,"STRONG",{});var QMt=s(Hve);Gpr=r(QMt,"roberta"),QMt.forEach(t),Opr=r(pRe," \u2014 "),yQ=n(pRe,"A",{href:!0});var HMt=s(yQ);Vpr=r(HMt,"TFRobertaForCausalLM"),HMt.forEach(t),Xpr=r(pRe," (RoBERTa model)"),pRe.forEach(t),zpr=i(Ce),CE=n(Ce,"LI",{});var _Re=s(CE);Uve=n(_Re,"STRONG",{});var UMt=s(Uve);Wpr=r(UMt,"roformer"),UMt.forEach(t),Qpr=r(_Re," \u2014 "),LQ=n(_Re,"A",{href:!0});var JMt=s(LQ);Hpr=r(JMt,"TFRoFormerForCausalLM"),JMt.forEach(t),Upr=r(_Re," (RoFormer model)"),_Re.forEach(t),Jpr=i(Ce),wE=n(Ce,"LI",{});var bRe=s(wE);Jve=n(bRe,"STRONG",{});var YMt=s(Jve);Ypr=r(YMt,"transfo-xl"),YMt.forEach(t),Kpr=r(bRe," \u2014 "),xQ=n(bRe,"A",{href:!0});var KMt=s(xQ);Zpr=r(KMt,"TFTransfoXLLMHeadModel"),KMt.forEach(t),e_r=r(bRe," (Transformer-XL model)"),bRe.forEach(t),o_r=i(Ce),AE=n(Ce,"LI",{});var vRe=s(AE);Yve=n(vRe,"STRONG",{});var ZMt=s(Yve);r_r=r(ZMt,"xlm"),ZMt.forEach(t),t_r=r(vRe," \u2014 "),$Q=n(vRe,"A",{href:!0});var e4t=s($Q);a_r=r(e4t,"TFXLMWithLMHeadModel"),e4t.forEach(t),n_r=r(vRe," (XLM model)"),vRe.forEach(t),s_r=i(Ce),yE=n(Ce,"LI",{});var FRe=s(yE);Kve=n(FRe,"STRONG",{});var o4t=s(Kve);l_r=r(o4t,"xlnet"),o4t.forEach(t),i_r=r(FRe," \u2014 "),kQ=n(FRe,"A",{href:!0});var r4t=s(kQ);d_r=r(r4t,"TFXLNetLMHeadModel"),r4t.forEach(t),c_r=r(FRe," (XLNet model)"),FRe.forEach(t),Ce.forEach(t),m_r=i(bl),T(LE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),VNe=i(m),Jd=n(m,"H2",{class:!0});var UDe=s(Jd);xE=n(UDe,"A",{id:!0,class:!0,href:!0});var t4t=s(xE);Zve=n(t4t,"SPAN",{});var a4t=s(Zve);T(b7.$$.fragment,a4t),a4t.forEach(t),t4t.forEach(t),f_r=i(UDe),eFe=n(UDe,"SPAN",{});var n4t=s(eFe);g_r=r(n4t,"TFAutoModelForImageClassification"),n4t.forEach(t),UDe.forEach(t),XNe=i(m),er=n(m,"DIV",{class:!0});var vl=s(er);T(v7.$$.fragment,vl),h_r=i(vl),Yd=n(vl,"P",{});var aee=s(Yd);u_r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=n(aee,"A",{href:!0});var s4t=s(SQ);p_r=r(s4t,"from_pretrained()"),s4t.forEach(t),__r=r(aee," class method or the "),RQ=n(aee,"A",{href:!0});var l4t=s(RQ);b_r=r(l4t,"from_config()"),l4t.forEach(t),v_r=r(aee,` class
method.`),aee.forEach(t),F_r=i(vl),F7=n(vl,"P",{});var JDe=s(F7);T_r=r(JDe,"This class cannot be instantiated directly using "),oFe=n(JDe,"CODE",{});var i4t=s(oFe);M_r=r(i4t,"__init__()"),i4t.forEach(t),E_r=r(JDe," (throws an error)."),JDe.forEach(t),C_r=i(vl),$t=n(vl,"DIV",{class:!0});var w6=s($t);T(T7.$$.fragment,w6),w_r=i(w6),rFe=n(w6,"P",{});var d4t=s(rFe);A_r=r(d4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d4t.forEach(t),y_r=i(w6),Kd=n(w6,"P",{});var nee=s(Kd);L_r=r(nee,`Note:
Loading a model from its configuration file does `),tFe=n(nee,"STRONG",{});var c4t=s(tFe);x_r=r(c4t,"not"),c4t.forEach(t),$_r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(nee,"A",{href:!0});var m4t=s(PQ);k_r=r(m4t,"from_pretrained()"),m4t.forEach(t),S_r=r(nee," to load the model weights."),nee.forEach(t),R_r=i(w6),T($E.$$.fragment,w6),w6.forEach(t),P_r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(M7.$$.fragment,Fl),B_r=i(Fl),aFe=n(Fl,"P",{});var f4t=s(aFe);I_r=r(f4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),f4t.forEach(t),q_r=i(Fl),on=n(Fl,"P",{});var A6=s(on);N_r=r(A6,"The model class to instantiate is selected based on the "),nFe=n(A6,"CODE",{});var g4t=s(nFe);j_r=r(g4t,"model_type"),g4t.forEach(t),D_r=r(A6,` property of the config object (either
passed as an argument or loaded from `),sFe=n(A6,"CODE",{});var h4t=s(sFe);G_r=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),O_r=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(A6,"CODE",{});var u4t=s(lFe);V_r=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),X_r=r(A6,":"),A6.forEach(t),z_r=i(Fl),rn=n(Fl,"UL",{});var y6=s(rn);kE=n(y6,"LI",{});var TRe=s(kE);iFe=n(TRe,"STRONG",{});var p4t=s(iFe);W_r=r(p4t,"convnext"),p4t.forEach(t),Q_r=r(TRe," \u2014 "),BQ=n(TRe,"A",{href:!0});var _4t=s(BQ);H_r=r(_4t,"TFConvNextForImageClassification"),_4t.forEach(t),U_r=r(TRe," (ConvNext model)"),TRe.forEach(t),J_r=i(y6),SE=n(y6,"LI",{});var MRe=s(SE);dFe=n(MRe,"STRONG",{});var b4t=s(dFe);Y_r=r(b4t,"data2vec-vision"),b4t.forEach(t),K_r=r(MRe," \u2014 "),IQ=n(MRe,"A",{href:!0});var v4t=s(IQ);Z_r=r(v4t,"TFData2VecVisionForImageClassification"),v4t.forEach(t),ebr=r(MRe," (Data2VecVision model)"),MRe.forEach(t),obr=i(y6),RE=n(y6,"LI",{});var ERe=s(RE);cFe=n(ERe,"STRONG",{});var F4t=s(cFe);rbr=r(F4t,"swin"),F4t.forEach(t),tbr=r(ERe," \u2014 "),qQ=n(ERe,"A",{href:!0});var T4t=s(qQ);abr=r(T4t,"TFSwinForImageClassification"),T4t.forEach(t),nbr=r(ERe," (Swin model)"),ERe.forEach(t),sbr=i(y6),PE=n(y6,"LI",{});var CRe=s(PE);mFe=n(CRe,"STRONG",{});var M4t=s(mFe);lbr=r(M4t,"vit"),M4t.forEach(t),ibr=r(CRe," \u2014 "),NQ=n(CRe,"A",{href:!0});var E4t=s(NQ);dbr=r(E4t,"TFViTForImageClassification"),E4t.forEach(t),cbr=r(CRe," (ViT model)"),CRe.forEach(t),y6.forEach(t),mbr=i(Fl),T(BE.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),zNe=i(m),Zd=n(m,"H2",{class:!0});var YDe=s(Zd);IE=n(YDe,"A",{id:!0,class:!0,href:!0});var C4t=s(IE);fFe=n(C4t,"SPAN",{});var w4t=s(fFe);T(E7.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),fbr=i(YDe),gFe=n(YDe,"SPAN",{});var A4t=s(gFe);gbr=r(A4t,"TFAutoModelForMaskedLM"),A4t.forEach(t),YDe.forEach(t),WNe=i(m),or=n(m,"DIV",{class:!0});var Tl=s(or);T(C7.$$.fragment,Tl),hbr=i(Tl),ec=n(Tl,"P",{});var see=s(ec);ubr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jQ=n(see,"A",{href:!0});var y4t=s(jQ);pbr=r(y4t,"from_pretrained()"),y4t.forEach(t),_br=r(see," class method or the "),DQ=n(see,"A",{href:!0});var L4t=s(DQ);bbr=r(L4t,"from_config()"),L4t.forEach(t),vbr=r(see,` class
method.`),see.forEach(t),Fbr=i(Tl),w7=n(Tl,"P",{});var KDe=s(w7);Tbr=r(KDe,"This class cannot be instantiated directly using "),hFe=n(KDe,"CODE",{});var x4t=s(hFe);Mbr=r(x4t,"__init__()"),x4t.forEach(t),Ebr=r(KDe," (throws an error)."),KDe.forEach(t),Cbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var L6=s(kt);T(A7.$$.fragment,L6),wbr=i(L6),uFe=n(L6,"P",{});var $4t=s(uFe);Abr=r($4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$4t.forEach(t),ybr=i(L6),oc=n(L6,"P",{});var lee=s(oc);Lbr=r(lee,`Note:
Loading a model from its configuration file does `),pFe=n(lee,"STRONG",{});var k4t=s(pFe);xbr=r(k4t,"not"),k4t.forEach(t),$br=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GQ=n(lee,"A",{href:!0});var S4t=s(GQ);kbr=r(S4t,"from_pretrained()"),S4t.forEach(t),Sbr=r(lee," to load the model weights."),lee.forEach(t),Rbr=i(L6),T(qE.$$.fragment,L6),L6.forEach(t),Pbr=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(y7.$$.fragment,Ml),Bbr=i(Ml),_Fe=n(Ml,"P",{});var R4t=s(_Fe);Ibr=r(R4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R4t.forEach(t),qbr=i(Ml),tn=n(Ml,"P",{});var x6=s(tn);Nbr=r(x6,"The model class to instantiate is selected based on the "),bFe=n(x6,"CODE",{});var P4t=s(bFe);jbr=r(P4t,"model_type"),P4t.forEach(t),Dbr=r(x6,` property of the config object (either
passed as an argument or loaded from `),vFe=n(x6,"CODE",{});var B4t=s(vFe);Gbr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),Obr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(x6,"CODE",{});var I4t=s(FFe);Vbr=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),Xbr=r(x6,":"),x6.forEach(t),zbr=i(Ml),ie=n(Ml,"UL",{});var me=s(ie);NE=n(me,"LI",{});var wRe=s(NE);TFe=n(wRe,"STRONG",{});var q4t=s(TFe);Wbr=r(q4t,"albert"),q4t.forEach(t),Qbr=r(wRe," \u2014 "),OQ=n(wRe,"A",{href:!0});var N4t=s(OQ);Hbr=r(N4t,"TFAlbertForMaskedLM"),N4t.forEach(t),Ubr=r(wRe," (ALBERT model)"),wRe.forEach(t),Jbr=i(me),jE=n(me,"LI",{});var ARe=s(jE);MFe=n(ARe,"STRONG",{});var j4t=s(MFe);Ybr=r(j4t,"bert"),j4t.forEach(t),Kbr=r(ARe," \u2014 "),VQ=n(ARe,"A",{href:!0});var D4t=s(VQ);Zbr=r(D4t,"TFBertForMaskedLM"),D4t.forEach(t),e2r=r(ARe," (BERT model)"),ARe.forEach(t),o2r=i(me),DE=n(me,"LI",{});var yRe=s(DE);EFe=n(yRe,"STRONG",{});var G4t=s(EFe);r2r=r(G4t,"camembert"),G4t.forEach(t),t2r=r(yRe," \u2014 "),XQ=n(yRe,"A",{href:!0});var O4t=s(XQ);a2r=r(O4t,"TFCamembertForMaskedLM"),O4t.forEach(t),n2r=r(yRe," (CamemBERT model)"),yRe.forEach(t),s2r=i(me),GE=n(me,"LI",{});var LRe=s(GE);CFe=n(LRe,"STRONG",{});var V4t=s(CFe);l2r=r(V4t,"convbert"),V4t.forEach(t),i2r=r(LRe," \u2014 "),zQ=n(LRe,"A",{href:!0});var X4t=s(zQ);d2r=r(X4t,"TFConvBertForMaskedLM"),X4t.forEach(t),c2r=r(LRe," (ConvBERT model)"),LRe.forEach(t),m2r=i(me),OE=n(me,"LI",{});var xRe=s(OE);wFe=n(xRe,"STRONG",{});var z4t=s(wFe);f2r=r(z4t,"deberta"),z4t.forEach(t),g2r=r(xRe," \u2014 "),WQ=n(xRe,"A",{href:!0});var W4t=s(WQ);h2r=r(W4t,"TFDebertaForMaskedLM"),W4t.forEach(t),u2r=r(xRe," (DeBERTa model)"),xRe.forEach(t),p2r=i(me),VE=n(me,"LI",{});var $Re=s(VE);AFe=n($Re,"STRONG",{});var Q4t=s(AFe);_2r=r(Q4t,"deberta-v2"),Q4t.forEach(t),b2r=r($Re," \u2014 "),QQ=n($Re,"A",{href:!0});var H4t=s(QQ);v2r=r(H4t,"TFDebertaV2ForMaskedLM"),H4t.forEach(t),F2r=r($Re," (DeBERTa-v2 model)"),$Re.forEach(t),T2r=i(me),XE=n(me,"LI",{});var kRe=s(XE);yFe=n(kRe,"STRONG",{});var U4t=s(yFe);M2r=r(U4t,"distilbert"),U4t.forEach(t),E2r=r(kRe," \u2014 "),HQ=n(kRe,"A",{href:!0});var J4t=s(HQ);C2r=r(J4t,"TFDistilBertForMaskedLM"),J4t.forEach(t),w2r=r(kRe," (DistilBERT model)"),kRe.forEach(t),A2r=i(me),zE=n(me,"LI",{});var SRe=s(zE);LFe=n(SRe,"STRONG",{});var Y4t=s(LFe);y2r=r(Y4t,"electra"),Y4t.forEach(t),L2r=r(SRe," \u2014 "),UQ=n(SRe,"A",{href:!0});var K4t=s(UQ);x2r=r(K4t,"TFElectraForMaskedLM"),K4t.forEach(t),$2r=r(SRe," (ELECTRA model)"),SRe.forEach(t),k2r=i(me),WE=n(me,"LI",{});var RRe=s(WE);xFe=n(RRe,"STRONG",{});var Z4t=s(xFe);S2r=r(Z4t,"flaubert"),Z4t.forEach(t),R2r=r(RRe," \u2014 "),JQ=n(RRe,"A",{href:!0});var eEt=s(JQ);P2r=r(eEt,"TFFlaubertWithLMHeadModel"),eEt.forEach(t),B2r=r(RRe," (FlauBERT model)"),RRe.forEach(t),I2r=i(me),QE=n(me,"LI",{});var PRe=s(QE);$Fe=n(PRe,"STRONG",{});var oEt=s($Fe);q2r=r(oEt,"funnel"),oEt.forEach(t),N2r=r(PRe," \u2014 "),YQ=n(PRe,"A",{href:!0});var rEt=s(YQ);j2r=r(rEt,"TFFunnelForMaskedLM"),rEt.forEach(t),D2r=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),G2r=i(me),HE=n(me,"LI",{});var BRe=s(HE);kFe=n(BRe,"STRONG",{});var tEt=s(kFe);O2r=r(tEt,"layoutlm"),tEt.forEach(t),V2r=r(BRe," \u2014 "),KQ=n(BRe,"A",{href:!0});var aEt=s(KQ);X2r=r(aEt,"TFLayoutLMForMaskedLM"),aEt.forEach(t),z2r=r(BRe," (LayoutLM model)"),BRe.forEach(t),W2r=i(me),UE=n(me,"LI",{});var IRe=s(UE);SFe=n(IRe,"STRONG",{});var nEt=s(SFe);Q2r=r(nEt,"longformer"),nEt.forEach(t),H2r=r(IRe," \u2014 "),ZQ=n(IRe,"A",{href:!0});var sEt=s(ZQ);U2r=r(sEt,"TFLongformerForMaskedLM"),sEt.forEach(t),J2r=r(IRe," (Longformer model)"),IRe.forEach(t),Y2r=i(me),JE=n(me,"LI",{});var qRe=s(JE);RFe=n(qRe,"STRONG",{});var lEt=s(RFe);K2r=r(lEt,"mobilebert"),lEt.forEach(t),Z2r=r(qRe," \u2014 "),eH=n(qRe,"A",{href:!0});var iEt=s(eH);evr=r(iEt,"TFMobileBertForMaskedLM"),iEt.forEach(t),ovr=r(qRe," (MobileBERT model)"),qRe.forEach(t),rvr=i(me),YE=n(me,"LI",{});var NRe=s(YE);PFe=n(NRe,"STRONG",{});var dEt=s(PFe);tvr=r(dEt,"mpnet"),dEt.forEach(t),avr=r(NRe," \u2014 "),oH=n(NRe,"A",{href:!0});var cEt=s(oH);nvr=r(cEt,"TFMPNetForMaskedLM"),cEt.forEach(t),svr=r(NRe," (MPNet model)"),NRe.forEach(t),lvr=i(me),KE=n(me,"LI",{});var jRe=s(KE);BFe=n(jRe,"STRONG",{});var mEt=s(BFe);ivr=r(mEt,"rembert"),mEt.forEach(t),dvr=r(jRe," \u2014 "),rH=n(jRe,"A",{href:!0});var fEt=s(rH);cvr=r(fEt,"TFRemBertForMaskedLM"),fEt.forEach(t),mvr=r(jRe," (RemBERT model)"),jRe.forEach(t),fvr=i(me),ZE=n(me,"LI",{});var DRe=s(ZE);IFe=n(DRe,"STRONG",{});var gEt=s(IFe);gvr=r(gEt,"roberta"),gEt.forEach(t),hvr=r(DRe," \u2014 "),tH=n(DRe,"A",{href:!0});var hEt=s(tH);uvr=r(hEt,"TFRobertaForMaskedLM"),hEt.forEach(t),pvr=r(DRe," (RoBERTa model)"),DRe.forEach(t),_vr=i(me),eC=n(me,"LI",{});var GRe=s(eC);qFe=n(GRe,"STRONG",{});var uEt=s(qFe);bvr=r(uEt,"roformer"),uEt.forEach(t),vvr=r(GRe," \u2014 "),aH=n(GRe,"A",{href:!0});var pEt=s(aH);Fvr=r(pEt,"TFRoFormerForMaskedLM"),pEt.forEach(t),Tvr=r(GRe," (RoFormer model)"),GRe.forEach(t),Mvr=i(me),oC=n(me,"LI",{});var ORe=s(oC);NFe=n(ORe,"STRONG",{});var _Et=s(NFe);Evr=r(_Et,"tapas"),_Et.forEach(t),Cvr=r(ORe," \u2014 "),nH=n(ORe,"A",{href:!0});var bEt=s(nH);wvr=r(bEt,"TFTapasForMaskedLM"),bEt.forEach(t),Avr=r(ORe," (TAPAS model)"),ORe.forEach(t),yvr=i(me),rC=n(me,"LI",{});var VRe=s(rC);jFe=n(VRe,"STRONG",{});var vEt=s(jFe);Lvr=r(vEt,"xlm"),vEt.forEach(t),xvr=r(VRe," \u2014 "),sH=n(VRe,"A",{href:!0});var FEt=s(sH);$vr=r(FEt,"TFXLMWithLMHeadModel"),FEt.forEach(t),kvr=r(VRe," (XLM model)"),VRe.forEach(t),Svr=i(me),tC=n(me,"LI",{});var XRe=s(tC);DFe=n(XRe,"STRONG",{});var TEt=s(DFe);Rvr=r(TEt,"xlm-roberta"),TEt.forEach(t),Pvr=r(XRe," \u2014 "),lH=n(XRe,"A",{href:!0});var MEt=s(lH);Bvr=r(MEt,"TFXLMRobertaForMaskedLM"),MEt.forEach(t),Ivr=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),me.forEach(t),qvr=i(Ml),T(aC.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),QNe=i(m),rc=n(m,"H2",{class:!0});var ZDe=s(rc);nC=n(ZDe,"A",{id:!0,class:!0,href:!0});var EEt=s(nC);GFe=n(EEt,"SPAN",{});var CEt=s(GFe);T(L7.$$.fragment,CEt),CEt.forEach(t),EEt.forEach(t),Nvr=i(ZDe),OFe=n(ZDe,"SPAN",{});var wEt=s(OFe);jvr=r(wEt,"TFAutoModelForSeq2SeqLM"),wEt.forEach(t),ZDe.forEach(t),HNe=i(m),rr=n(m,"DIV",{class:!0});var El=s(rr);T(x7.$$.fragment,El),Dvr=i(El),tc=n(El,"P",{});var iee=s(tc);Gvr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=n(iee,"A",{href:!0});var AEt=s(iH);Ovr=r(AEt,"from_pretrained()"),AEt.forEach(t),Vvr=r(iee," class method or the "),dH=n(iee,"A",{href:!0});var yEt=s(dH);Xvr=r(yEt,"from_config()"),yEt.forEach(t),zvr=r(iee,` class
method.`),iee.forEach(t),Wvr=i(El),$7=n(El,"P",{});var eGe=s($7);Qvr=r(eGe,"This class cannot be instantiated directly using "),VFe=n(eGe,"CODE",{});var LEt=s(VFe);Hvr=r(LEt,"__init__()"),LEt.forEach(t),Uvr=r(eGe," (throws an error)."),eGe.forEach(t),Jvr=i(El),St=n(El,"DIV",{class:!0});var $6=s(St);T(k7.$$.fragment,$6),Yvr=i($6),XFe=n($6,"P",{});var xEt=s(XFe);Kvr=r(xEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xEt.forEach(t),Zvr=i($6),ac=n($6,"P",{});var dee=s(ac);eFr=r(dee,`Note:
Loading a model from its configuration file does `),zFe=n(dee,"STRONG",{});var $Et=s(zFe);oFr=r($Et,"not"),$Et.forEach(t),rFr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(dee,"A",{href:!0});var kEt=s(cH);tFr=r(kEt,"from_pretrained()"),kEt.forEach(t),aFr=r(dee," to load the model weights."),dee.forEach(t),nFr=i($6),T(sC.$$.fragment,$6),$6.forEach(t),sFr=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(S7.$$.fragment,Cl),lFr=i(Cl),WFe=n(Cl,"P",{});var SEt=s(WFe);iFr=r(SEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SEt.forEach(t),dFr=i(Cl),an=n(Cl,"P",{});var k6=s(an);cFr=r(k6,"The model class to instantiate is selected based on the "),QFe=n(k6,"CODE",{});var REt=s(QFe);mFr=r(REt,"model_type"),REt.forEach(t),fFr=r(k6,` property of the config object (either
passed as an argument or loaded from `),HFe=n(k6,"CODE",{});var PEt=s(HFe);gFr=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),hFr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(k6,"CODE",{});var BEt=s(UFe);uFr=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),pFr=r(k6,":"),k6.forEach(t),_Fr=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);lC=n(Be,"LI",{});var zRe=s(lC);JFe=n(zRe,"STRONG",{});var IEt=s(JFe);bFr=r(IEt,"bart"),IEt.forEach(t),vFr=r(zRe," \u2014 "),mH=n(zRe,"A",{href:!0});var qEt=s(mH);FFr=r(qEt,"TFBartForConditionalGeneration"),qEt.forEach(t),TFr=r(zRe," (BART model)"),zRe.forEach(t),MFr=i(Be),iC=n(Be,"LI",{});var WRe=s(iC);YFe=n(WRe,"STRONG",{});var NEt=s(YFe);EFr=r(NEt,"blenderbot"),NEt.forEach(t),CFr=r(WRe," \u2014 "),fH=n(WRe,"A",{href:!0});var jEt=s(fH);wFr=r(jEt,"TFBlenderbotForConditionalGeneration"),jEt.forEach(t),AFr=r(WRe," (Blenderbot model)"),WRe.forEach(t),yFr=i(Be),dC=n(Be,"LI",{});var QRe=s(dC);KFe=n(QRe,"STRONG",{});var DEt=s(KFe);LFr=r(DEt,"blenderbot-small"),DEt.forEach(t),xFr=r(QRe," \u2014 "),gH=n(QRe,"A",{href:!0});var GEt=s(gH);$Fr=r(GEt,"TFBlenderbotSmallForConditionalGeneration"),GEt.forEach(t),kFr=r(QRe," (BlenderbotSmall model)"),QRe.forEach(t),SFr=i(Be),cC=n(Be,"LI",{});var HRe=s(cC);ZFe=n(HRe,"STRONG",{});var OEt=s(ZFe);RFr=r(OEt,"encoder-decoder"),OEt.forEach(t),PFr=r(HRe," \u2014 "),hH=n(HRe,"A",{href:!0});var VEt=s(hH);BFr=r(VEt,"TFEncoderDecoderModel"),VEt.forEach(t),IFr=r(HRe," (Encoder decoder model)"),HRe.forEach(t),qFr=i(Be),mC=n(Be,"LI",{});var URe=s(mC);e1e=n(URe,"STRONG",{});var XEt=s(e1e);NFr=r(XEt,"led"),XEt.forEach(t),jFr=r(URe," \u2014 "),uH=n(URe,"A",{href:!0});var zEt=s(uH);DFr=r(zEt,"TFLEDForConditionalGeneration"),zEt.forEach(t),GFr=r(URe," (LED model)"),URe.forEach(t),OFr=i(Be),fC=n(Be,"LI",{});var JRe=s(fC);o1e=n(JRe,"STRONG",{});var WEt=s(o1e);VFr=r(WEt,"marian"),WEt.forEach(t),XFr=r(JRe," \u2014 "),pH=n(JRe,"A",{href:!0});var QEt=s(pH);zFr=r(QEt,"TFMarianMTModel"),QEt.forEach(t),WFr=r(JRe," (Marian model)"),JRe.forEach(t),QFr=i(Be),gC=n(Be,"LI",{});var YRe=s(gC);r1e=n(YRe,"STRONG",{});var HEt=s(r1e);HFr=r(HEt,"mbart"),HEt.forEach(t),UFr=r(YRe," \u2014 "),_H=n(YRe,"A",{href:!0});var UEt=s(_H);JFr=r(UEt,"TFMBartForConditionalGeneration"),UEt.forEach(t),YFr=r(YRe," (mBART model)"),YRe.forEach(t),KFr=i(Be),hC=n(Be,"LI",{});var KRe=s(hC);t1e=n(KRe,"STRONG",{});var JEt=s(t1e);ZFr=r(JEt,"mt5"),JEt.forEach(t),e1r=r(KRe," \u2014 "),bH=n(KRe,"A",{href:!0});var YEt=s(bH);o1r=r(YEt,"TFMT5ForConditionalGeneration"),YEt.forEach(t),r1r=r(KRe," (mT5 model)"),KRe.forEach(t),t1r=i(Be),uC=n(Be,"LI",{});var ZRe=s(uC);a1e=n(ZRe,"STRONG",{});var KEt=s(a1e);a1r=r(KEt,"pegasus"),KEt.forEach(t),n1r=r(ZRe," \u2014 "),vH=n(ZRe,"A",{href:!0});var ZEt=s(vH);s1r=r(ZEt,"TFPegasusForConditionalGeneration"),ZEt.forEach(t),l1r=r(ZRe," (Pegasus model)"),ZRe.forEach(t),i1r=i(Be),pC=n(Be,"LI",{});var ePe=s(pC);n1e=n(ePe,"STRONG",{});var eCt=s(n1e);d1r=r(eCt,"t5"),eCt.forEach(t),c1r=r(ePe," \u2014 "),FH=n(ePe,"A",{href:!0});var oCt=s(FH);m1r=r(oCt,"TFT5ForConditionalGeneration"),oCt.forEach(t),f1r=r(ePe," (T5 model)"),ePe.forEach(t),Be.forEach(t),g1r=i(Cl),T(_C.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),UNe=i(m),nc=n(m,"H2",{class:!0});var oGe=s(nc);bC=n(oGe,"A",{id:!0,class:!0,href:!0});var rCt=s(bC);s1e=n(rCt,"SPAN",{});var tCt=s(s1e);T(R7.$$.fragment,tCt),tCt.forEach(t),rCt.forEach(t),h1r=i(oGe),l1e=n(oGe,"SPAN",{});var aCt=s(l1e);u1r=r(aCt,"TFAutoModelForSequenceClassification"),aCt.forEach(t),oGe.forEach(t),JNe=i(m),tr=n(m,"DIV",{class:!0});var wl=s(tr);T(P7.$$.fragment,wl),p1r=i(wl),sc=n(wl,"P",{});var cee=s(sc);_1r=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TH=n(cee,"A",{href:!0});var nCt=s(TH);b1r=r(nCt,"from_pretrained()"),nCt.forEach(t),v1r=r(cee," class method or the "),MH=n(cee,"A",{href:!0});var sCt=s(MH);F1r=r(sCt,"from_config()"),sCt.forEach(t),T1r=r(cee,` class
method.`),cee.forEach(t),M1r=i(wl),B7=n(wl,"P",{});var rGe=s(B7);E1r=r(rGe,"This class cannot be instantiated directly using "),i1e=n(rGe,"CODE",{});var lCt=s(i1e);C1r=r(lCt,"__init__()"),lCt.forEach(t),w1r=r(rGe," (throws an error)."),rGe.forEach(t),A1r=i(wl),Rt=n(wl,"DIV",{class:!0});var S6=s(Rt);T(I7.$$.fragment,S6),y1r=i(S6),d1e=n(S6,"P",{});var iCt=s(d1e);L1r=r(iCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iCt.forEach(t),x1r=i(S6),lc=n(S6,"P",{});var mee=s(lc);$1r=r(mee,`Note:
Loading a model from its configuration file does `),c1e=n(mee,"STRONG",{});var dCt=s(c1e);k1r=r(dCt,"not"),dCt.forEach(t),S1r=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(mee,"A",{href:!0});var cCt=s(EH);R1r=r(cCt,"from_pretrained()"),cCt.forEach(t),P1r=r(mee," to load the model weights."),mee.forEach(t),B1r=i(S6),T(vC.$$.fragment,S6),S6.forEach(t),I1r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(q7.$$.fragment,Al),q1r=i(Al),m1e=n(Al,"P",{});var mCt=s(m1e);N1r=r(mCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mCt.forEach(t),j1r=i(Al),nn=n(Al,"P",{});var R6=s(nn);D1r=r(R6,"The model class to instantiate is selected based on the "),f1e=n(R6,"CODE",{});var fCt=s(f1e);G1r=r(fCt,"model_type"),fCt.forEach(t),O1r=r(R6,` property of the config object (either
passed as an argument or loaded from `),g1e=n(R6,"CODE",{});var gCt=s(g1e);V1r=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),X1r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(R6,"CODE",{});var hCt=s(h1e);z1r=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),W1r=r(R6,":"),R6.forEach(t),Q1r=i(Al),oe=n(Al,"UL",{});var ae=s(oe);FC=n(ae,"LI",{});var oPe=s(FC);u1e=n(oPe,"STRONG",{});var uCt=s(u1e);H1r=r(uCt,"albert"),uCt.forEach(t),U1r=r(oPe," \u2014 "),CH=n(oPe,"A",{href:!0});var pCt=s(CH);J1r=r(pCt,"TFAlbertForSequenceClassification"),pCt.forEach(t),Y1r=r(oPe," (ALBERT model)"),oPe.forEach(t),K1r=i(ae),TC=n(ae,"LI",{});var rPe=s(TC);p1e=n(rPe,"STRONG",{});var _Ct=s(p1e);Z1r=r(_Ct,"bert"),_Ct.forEach(t),eTr=r(rPe," \u2014 "),wH=n(rPe,"A",{href:!0});var bCt=s(wH);oTr=r(bCt,"TFBertForSequenceClassification"),bCt.forEach(t),rTr=r(rPe," (BERT model)"),rPe.forEach(t),tTr=i(ae),MC=n(ae,"LI",{});var tPe=s(MC);_1e=n(tPe,"STRONG",{});var vCt=s(_1e);aTr=r(vCt,"camembert"),vCt.forEach(t),nTr=r(tPe," \u2014 "),AH=n(tPe,"A",{href:!0});var FCt=s(AH);sTr=r(FCt,"TFCamembertForSequenceClassification"),FCt.forEach(t),lTr=r(tPe," (CamemBERT model)"),tPe.forEach(t),iTr=i(ae),EC=n(ae,"LI",{});var aPe=s(EC);b1e=n(aPe,"STRONG",{});var TCt=s(b1e);dTr=r(TCt,"convbert"),TCt.forEach(t),cTr=r(aPe," \u2014 "),yH=n(aPe,"A",{href:!0});var MCt=s(yH);mTr=r(MCt,"TFConvBertForSequenceClassification"),MCt.forEach(t),fTr=r(aPe," (ConvBERT model)"),aPe.forEach(t),gTr=i(ae),CC=n(ae,"LI",{});var nPe=s(CC);v1e=n(nPe,"STRONG",{});var ECt=s(v1e);hTr=r(ECt,"ctrl"),ECt.forEach(t),uTr=r(nPe," \u2014 "),LH=n(nPe,"A",{href:!0});var CCt=s(LH);pTr=r(CCt,"TFCTRLForSequenceClassification"),CCt.forEach(t),_Tr=r(nPe," (CTRL model)"),nPe.forEach(t),bTr=i(ae),wC=n(ae,"LI",{});var sPe=s(wC);F1e=n(sPe,"STRONG",{});var wCt=s(F1e);vTr=r(wCt,"deberta"),wCt.forEach(t),FTr=r(sPe," \u2014 "),xH=n(sPe,"A",{href:!0});var ACt=s(xH);TTr=r(ACt,"TFDebertaForSequenceClassification"),ACt.forEach(t),MTr=r(sPe," (DeBERTa model)"),sPe.forEach(t),ETr=i(ae),AC=n(ae,"LI",{});var lPe=s(AC);T1e=n(lPe,"STRONG",{});var yCt=s(T1e);CTr=r(yCt,"deberta-v2"),yCt.forEach(t),wTr=r(lPe," \u2014 "),$H=n(lPe,"A",{href:!0});var LCt=s($H);ATr=r(LCt,"TFDebertaV2ForSequenceClassification"),LCt.forEach(t),yTr=r(lPe," (DeBERTa-v2 model)"),lPe.forEach(t),LTr=i(ae),yC=n(ae,"LI",{});var iPe=s(yC);M1e=n(iPe,"STRONG",{});var xCt=s(M1e);xTr=r(xCt,"distilbert"),xCt.forEach(t),$Tr=r(iPe," \u2014 "),kH=n(iPe,"A",{href:!0});var $Ct=s(kH);kTr=r($Ct,"TFDistilBertForSequenceClassification"),$Ct.forEach(t),STr=r(iPe," (DistilBERT model)"),iPe.forEach(t),RTr=i(ae),LC=n(ae,"LI",{});var dPe=s(LC);E1e=n(dPe,"STRONG",{});var kCt=s(E1e);PTr=r(kCt,"electra"),kCt.forEach(t),BTr=r(dPe," \u2014 "),SH=n(dPe,"A",{href:!0});var SCt=s(SH);ITr=r(SCt,"TFElectraForSequenceClassification"),SCt.forEach(t),qTr=r(dPe," (ELECTRA model)"),dPe.forEach(t),NTr=i(ae),xC=n(ae,"LI",{});var cPe=s(xC);C1e=n(cPe,"STRONG",{});var RCt=s(C1e);jTr=r(RCt,"flaubert"),RCt.forEach(t),DTr=r(cPe," \u2014 "),RH=n(cPe,"A",{href:!0});var PCt=s(RH);GTr=r(PCt,"TFFlaubertForSequenceClassification"),PCt.forEach(t),OTr=r(cPe," (FlauBERT model)"),cPe.forEach(t),VTr=i(ae),$C=n(ae,"LI",{});var mPe=s($C);w1e=n(mPe,"STRONG",{});var BCt=s(w1e);XTr=r(BCt,"funnel"),BCt.forEach(t),zTr=r(mPe," \u2014 "),PH=n(mPe,"A",{href:!0});var ICt=s(PH);WTr=r(ICt,"TFFunnelForSequenceClassification"),ICt.forEach(t),QTr=r(mPe," (Funnel Transformer model)"),mPe.forEach(t),HTr=i(ae),kC=n(ae,"LI",{});var fPe=s(kC);A1e=n(fPe,"STRONG",{});var qCt=s(A1e);UTr=r(qCt,"gpt2"),qCt.forEach(t),JTr=r(fPe," \u2014 "),BH=n(fPe,"A",{href:!0});var NCt=s(BH);YTr=r(NCt,"TFGPT2ForSequenceClassification"),NCt.forEach(t),KTr=r(fPe," (OpenAI GPT-2 model)"),fPe.forEach(t),ZTr=i(ae),SC=n(ae,"LI",{});var gPe=s(SC);y1e=n(gPe,"STRONG",{});var jCt=s(y1e);eMr=r(jCt,"gptj"),jCt.forEach(t),oMr=r(gPe," \u2014 "),IH=n(gPe,"A",{href:!0});var DCt=s(IH);rMr=r(DCt,"TFGPTJForSequenceClassification"),DCt.forEach(t),tMr=r(gPe," (GPT-J model)"),gPe.forEach(t),aMr=i(ae),RC=n(ae,"LI",{});var hPe=s(RC);L1e=n(hPe,"STRONG",{});var GCt=s(L1e);nMr=r(GCt,"layoutlm"),GCt.forEach(t),sMr=r(hPe," \u2014 "),qH=n(hPe,"A",{href:!0});var OCt=s(qH);lMr=r(OCt,"TFLayoutLMForSequenceClassification"),OCt.forEach(t),iMr=r(hPe," (LayoutLM model)"),hPe.forEach(t),dMr=i(ae),PC=n(ae,"LI",{});var uPe=s(PC);x1e=n(uPe,"STRONG",{});var VCt=s(x1e);cMr=r(VCt,"longformer"),VCt.forEach(t),mMr=r(uPe," \u2014 "),NH=n(uPe,"A",{href:!0});var XCt=s(NH);fMr=r(XCt,"TFLongformerForSequenceClassification"),XCt.forEach(t),gMr=r(uPe," (Longformer model)"),uPe.forEach(t),hMr=i(ae),BC=n(ae,"LI",{});var pPe=s(BC);$1e=n(pPe,"STRONG",{});var zCt=s($1e);uMr=r(zCt,"mobilebert"),zCt.forEach(t),pMr=r(pPe," \u2014 "),jH=n(pPe,"A",{href:!0});var WCt=s(jH);_Mr=r(WCt,"TFMobileBertForSequenceClassification"),WCt.forEach(t),bMr=r(pPe," (MobileBERT model)"),pPe.forEach(t),vMr=i(ae),IC=n(ae,"LI",{});var _Pe=s(IC);k1e=n(_Pe,"STRONG",{});var QCt=s(k1e);FMr=r(QCt,"mpnet"),QCt.forEach(t),TMr=r(_Pe," \u2014 "),DH=n(_Pe,"A",{href:!0});var HCt=s(DH);MMr=r(HCt,"TFMPNetForSequenceClassification"),HCt.forEach(t),EMr=r(_Pe," (MPNet model)"),_Pe.forEach(t),CMr=i(ae),qC=n(ae,"LI",{});var bPe=s(qC);S1e=n(bPe,"STRONG",{});var UCt=s(S1e);wMr=r(UCt,"openai-gpt"),UCt.forEach(t),AMr=r(bPe," \u2014 "),GH=n(bPe,"A",{href:!0});var JCt=s(GH);yMr=r(JCt,"TFOpenAIGPTForSequenceClassification"),JCt.forEach(t),LMr=r(bPe," (OpenAI GPT model)"),bPe.forEach(t),xMr=i(ae),NC=n(ae,"LI",{});var vPe=s(NC);R1e=n(vPe,"STRONG",{});var YCt=s(R1e);$Mr=r(YCt,"rembert"),YCt.forEach(t),kMr=r(vPe," \u2014 "),OH=n(vPe,"A",{href:!0});var KCt=s(OH);SMr=r(KCt,"TFRemBertForSequenceClassification"),KCt.forEach(t),RMr=r(vPe," (RemBERT model)"),vPe.forEach(t),PMr=i(ae),jC=n(ae,"LI",{});var FPe=s(jC);P1e=n(FPe,"STRONG",{});var ZCt=s(P1e);BMr=r(ZCt,"roberta"),ZCt.forEach(t),IMr=r(FPe," \u2014 "),VH=n(FPe,"A",{href:!0});var e5t=s(VH);qMr=r(e5t,"TFRobertaForSequenceClassification"),e5t.forEach(t),NMr=r(FPe," (RoBERTa model)"),FPe.forEach(t),jMr=i(ae),DC=n(ae,"LI",{});var TPe=s(DC);B1e=n(TPe,"STRONG",{});var o5t=s(B1e);DMr=r(o5t,"roformer"),o5t.forEach(t),GMr=r(TPe," \u2014 "),XH=n(TPe,"A",{href:!0});var r5t=s(XH);OMr=r(r5t,"TFRoFormerForSequenceClassification"),r5t.forEach(t),VMr=r(TPe," (RoFormer model)"),TPe.forEach(t),XMr=i(ae),GC=n(ae,"LI",{});var MPe=s(GC);I1e=n(MPe,"STRONG",{});var t5t=s(I1e);zMr=r(t5t,"tapas"),t5t.forEach(t),WMr=r(MPe," \u2014 "),zH=n(MPe,"A",{href:!0});var a5t=s(zH);QMr=r(a5t,"TFTapasForSequenceClassification"),a5t.forEach(t),HMr=r(MPe," (TAPAS model)"),MPe.forEach(t),UMr=i(ae),OC=n(ae,"LI",{});var EPe=s(OC);q1e=n(EPe,"STRONG",{});var n5t=s(q1e);JMr=r(n5t,"transfo-xl"),n5t.forEach(t),YMr=r(EPe," \u2014 "),WH=n(EPe,"A",{href:!0});var s5t=s(WH);KMr=r(s5t,"TFTransfoXLForSequenceClassification"),s5t.forEach(t),ZMr=r(EPe," (Transformer-XL model)"),EPe.forEach(t),e4r=i(ae),VC=n(ae,"LI",{});var CPe=s(VC);N1e=n(CPe,"STRONG",{});var l5t=s(N1e);o4r=r(l5t,"xlm"),l5t.forEach(t),r4r=r(CPe," \u2014 "),QH=n(CPe,"A",{href:!0});var i5t=s(QH);t4r=r(i5t,"TFXLMForSequenceClassification"),i5t.forEach(t),a4r=r(CPe," (XLM model)"),CPe.forEach(t),n4r=i(ae),XC=n(ae,"LI",{});var wPe=s(XC);j1e=n(wPe,"STRONG",{});var d5t=s(j1e);s4r=r(d5t,"xlm-roberta"),d5t.forEach(t),l4r=r(wPe," \u2014 "),HH=n(wPe,"A",{href:!0});var c5t=s(HH);i4r=r(c5t,"TFXLMRobertaForSequenceClassification"),c5t.forEach(t),d4r=r(wPe," (XLM-RoBERTa model)"),wPe.forEach(t),c4r=i(ae),zC=n(ae,"LI",{});var APe=s(zC);D1e=n(APe,"STRONG",{});var m5t=s(D1e);m4r=r(m5t,"xlnet"),m5t.forEach(t),f4r=r(APe," \u2014 "),UH=n(APe,"A",{href:!0});var f5t=s(UH);g4r=r(f5t,"TFXLNetForSequenceClassification"),f5t.forEach(t),h4r=r(APe," (XLNet model)"),APe.forEach(t),ae.forEach(t),u4r=i(Al),T(WC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),YNe=i(m),ic=n(m,"H2",{class:!0});var tGe=s(ic);QC=n(tGe,"A",{id:!0,class:!0,href:!0});var g5t=s(QC);G1e=n(g5t,"SPAN",{});var h5t=s(G1e);T(N7.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),p4r=i(tGe),O1e=n(tGe,"SPAN",{});var u5t=s(O1e);_4r=r(u5t,"TFAutoModelForMultipleChoice"),u5t.forEach(t),tGe.forEach(t),KNe=i(m),ar=n(m,"DIV",{class:!0});var yl=s(ar);T(j7.$$.fragment,yl),b4r=i(yl),dc=n(yl,"P",{});var fee=s(dc);v4r=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JH=n(fee,"A",{href:!0});var p5t=s(JH);F4r=r(p5t,"from_pretrained()"),p5t.forEach(t),T4r=r(fee," class method or the "),YH=n(fee,"A",{href:!0});var _5t=s(YH);M4r=r(_5t,"from_config()"),_5t.forEach(t),E4r=r(fee,` class
method.`),fee.forEach(t),C4r=i(yl),D7=n(yl,"P",{});var aGe=s(D7);w4r=r(aGe,"This class cannot be instantiated directly using "),V1e=n(aGe,"CODE",{});var b5t=s(V1e);A4r=r(b5t,"__init__()"),b5t.forEach(t),y4r=r(aGe," (throws an error)."),aGe.forEach(t),L4r=i(yl),Pt=n(yl,"DIV",{class:!0});var P6=s(Pt);T(G7.$$.fragment,P6),x4r=i(P6),X1e=n(P6,"P",{});var v5t=s(X1e);$4r=r(v5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v5t.forEach(t),k4r=i(P6),cc=n(P6,"P",{});var gee=s(cc);S4r=r(gee,`Note:
Loading a model from its configuration file does `),z1e=n(gee,"STRONG",{});var F5t=s(z1e);R4r=r(F5t,"not"),F5t.forEach(t),P4r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(gee,"A",{href:!0});var T5t=s(KH);B4r=r(T5t,"from_pretrained()"),T5t.forEach(t),I4r=r(gee," to load the model weights."),gee.forEach(t),q4r=i(P6),T(HC.$$.fragment,P6),P6.forEach(t),N4r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(O7.$$.fragment,Ll),j4r=i(Ll),W1e=n(Ll,"P",{});var M5t=s(W1e);D4r=r(M5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M5t.forEach(t),G4r=i(Ll),sn=n(Ll,"P",{});var B6=s(sn);O4r=r(B6,"The model class to instantiate is selected based on the "),Q1e=n(B6,"CODE",{});var E5t=s(Q1e);V4r=r(E5t,"model_type"),E5t.forEach(t),X4r=r(B6,` property of the config object (either
passed as an argument or loaded from `),H1e=n(B6,"CODE",{});var C5t=s(H1e);z4r=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),W4r=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U1e=n(B6,"CODE",{});var w5t=s(U1e);Q4r=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),H4r=r(B6,":"),B6.forEach(t),U4r=i(Ll),ue=n(Ll,"UL",{});var be=s(ue);UC=n(be,"LI",{});var yPe=s(UC);J1e=n(yPe,"STRONG",{});var A5t=s(J1e);J4r=r(A5t,"albert"),A5t.forEach(t),Y4r=r(yPe," \u2014 "),ZH=n(yPe,"A",{href:!0});var y5t=s(ZH);K4r=r(y5t,"TFAlbertForMultipleChoice"),y5t.forEach(t),Z4r=r(yPe," (ALBERT model)"),yPe.forEach(t),eEr=i(be),JC=n(be,"LI",{});var LPe=s(JC);Y1e=n(LPe,"STRONG",{});var L5t=s(Y1e);oEr=r(L5t,"bert"),L5t.forEach(t),rEr=r(LPe," \u2014 "),eU=n(LPe,"A",{href:!0});var x5t=s(eU);tEr=r(x5t,"TFBertForMultipleChoice"),x5t.forEach(t),aEr=r(LPe," (BERT model)"),LPe.forEach(t),nEr=i(be),YC=n(be,"LI",{});var xPe=s(YC);K1e=n(xPe,"STRONG",{});var $5t=s(K1e);sEr=r($5t,"camembert"),$5t.forEach(t),lEr=r(xPe," \u2014 "),oU=n(xPe,"A",{href:!0});var k5t=s(oU);iEr=r(k5t,"TFCamembertForMultipleChoice"),k5t.forEach(t),dEr=r(xPe," (CamemBERT model)"),xPe.forEach(t),cEr=i(be),KC=n(be,"LI",{});var $Pe=s(KC);Z1e=n($Pe,"STRONG",{});var S5t=s(Z1e);mEr=r(S5t,"convbert"),S5t.forEach(t),fEr=r($Pe," \u2014 "),rU=n($Pe,"A",{href:!0});var R5t=s(rU);gEr=r(R5t,"TFConvBertForMultipleChoice"),R5t.forEach(t),hEr=r($Pe," (ConvBERT model)"),$Pe.forEach(t),uEr=i(be),ZC=n(be,"LI",{});var kPe=s(ZC);eTe=n(kPe,"STRONG",{});var P5t=s(eTe);pEr=r(P5t,"distilbert"),P5t.forEach(t),_Er=r(kPe," \u2014 "),tU=n(kPe,"A",{href:!0});var B5t=s(tU);bEr=r(B5t,"TFDistilBertForMultipleChoice"),B5t.forEach(t),vEr=r(kPe," (DistilBERT model)"),kPe.forEach(t),FEr=i(be),e5=n(be,"LI",{});var SPe=s(e5);oTe=n(SPe,"STRONG",{});var I5t=s(oTe);TEr=r(I5t,"electra"),I5t.forEach(t),MEr=r(SPe," \u2014 "),aU=n(SPe,"A",{href:!0});var q5t=s(aU);EEr=r(q5t,"TFElectraForMultipleChoice"),q5t.forEach(t),CEr=r(SPe," (ELECTRA model)"),SPe.forEach(t),wEr=i(be),o5=n(be,"LI",{});var RPe=s(o5);rTe=n(RPe,"STRONG",{});var N5t=s(rTe);AEr=r(N5t,"flaubert"),N5t.forEach(t),yEr=r(RPe," \u2014 "),nU=n(RPe,"A",{href:!0});var j5t=s(nU);LEr=r(j5t,"TFFlaubertForMultipleChoice"),j5t.forEach(t),xEr=r(RPe," (FlauBERT model)"),RPe.forEach(t),$Er=i(be),r5=n(be,"LI",{});var PPe=s(r5);tTe=n(PPe,"STRONG",{});var D5t=s(tTe);kEr=r(D5t,"funnel"),D5t.forEach(t),SEr=r(PPe," \u2014 "),sU=n(PPe,"A",{href:!0});var G5t=s(sU);REr=r(G5t,"TFFunnelForMultipleChoice"),G5t.forEach(t),PEr=r(PPe," (Funnel Transformer model)"),PPe.forEach(t),BEr=i(be),t5=n(be,"LI",{});var BPe=s(t5);aTe=n(BPe,"STRONG",{});var O5t=s(aTe);IEr=r(O5t,"longformer"),O5t.forEach(t),qEr=r(BPe," \u2014 "),lU=n(BPe,"A",{href:!0});var V5t=s(lU);NEr=r(V5t,"TFLongformerForMultipleChoice"),V5t.forEach(t),jEr=r(BPe," (Longformer model)"),BPe.forEach(t),DEr=i(be),a5=n(be,"LI",{});var IPe=s(a5);nTe=n(IPe,"STRONG",{});var X5t=s(nTe);GEr=r(X5t,"mobilebert"),X5t.forEach(t),OEr=r(IPe," \u2014 "),iU=n(IPe,"A",{href:!0});var z5t=s(iU);VEr=r(z5t,"TFMobileBertForMultipleChoice"),z5t.forEach(t),XEr=r(IPe," (MobileBERT model)"),IPe.forEach(t),zEr=i(be),n5=n(be,"LI",{});var qPe=s(n5);sTe=n(qPe,"STRONG",{});var W5t=s(sTe);WEr=r(W5t,"mpnet"),W5t.forEach(t),QEr=r(qPe," \u2014 "),dU=n(qPe,"A",{href:!0});var Q5t=s(dU);HEr=r(Q5t,"TFMPNetForMultipleChoice"),Q5t.forEach(t),UEr=r(qPe," (MPNet model)"),qPe.forEach(t),JEr=i(be),s5=n(be,"LI",{});var NPe=s(s5);lTe=n(NPe,"STRONG",{});var H5t=s(lTe);YEr=r(H5t,"rembert"),H5t.forEach(t),KEr=r(NPe," \u2014 "),cU=n(NPe,"A",{href:!0});var U5t=s(cU);ZEr=r(U5t,"TFRemBertForMultipleChoice"),U5t.forEach(t),eCr=r(NPe," (RemBERT model)"),NPe.forEach(t),oCr=i(be),l5=n(be,"LI",{});var jPe=s(l5);iTe=n(jPe,"STRONG",{});var J5t=s(iTe);rCr=r(J5t,"roberta"),J5t.forEach(t),tCr=r(jPe," \u2014 "),mU=n(jPe,"A",{href:!0});var Y5t=s(mU);aCr=r(Y5t,"TFRobertaForMultipleChoice"),Y5t.forEach(t),nCr=r(jPe," (RoBERTa model)"),jPe.forEach(t),sCr=i(be),i5=n(be,"LI",{});var DPe=s(i5);dTe=n(DPe,"STRONG",{});var K5t=s(dTe);lCr=r(K5t,"roformer"),K5t.forEach(t),iCr=r(DPe," \u2014 "),fU=n(DPe,"A",{href:!0});var Z5t=s(fU);dCr=r(Z5t,"TFRoFormerForMultipleChoice"),Z5t.forEach(t),cCr=r(DPe," (RoFormer model)"),DPe.forEach(t),mCr=i(be),d5=n(be,"LI",{});var GPe=s(d5);cTe=n(GPe,"STRONG",{});var e3t=s(cTe);fCr=r(e3t,"xlm"),e3t.forEach(t),gCr=r(GPe," \u2014 "),gU=n(GPe,"A",{href:!0});var o3t=s(gU);hCr=r(o3t,"TFXLMForMultipleChoice"),o3t.forEach(t),uCr=r(GPe," (XLM model)"),GPe.forEach(t),pCr=i(be),c5=n(be,"LI",{});var OPe=s(c5);mTe=n(OPe,"STRONG",{});var r3t=s(mTe);_Cr=r(r3t,"xlm-roberta"),r3t.forEach(t),bCr=r(OPe," \u2014 "),hU=n(OPe,"A",{href:!0});var t3t=s(hU);vCr=r(t3t,"TFXLMRobertaForMultipleChoice"),t3t.forEach(t),FCr=r(OPe," (XLM-RoBERTa model)"),OPe.forEach(t),TCr=i(be),m5=n(be,"LI",{});var VPe=s(m5);fTe=n(VPe,"STRONG",{});var a3t=s(fTe);MCr=r(a3t,"xlnet"),a3t.forEach(t),ECr=r(VPe," \u2014 "),uU=n(VPe,"A",{href:!0});var n3t=s(uU);CCr=r(n3t,"TFXLNetForMultipleChoice"),n3t.forEach(t),wCr=r(VPe," (XLNet model)"),VPe.forEach(t),be.forEach(t),ACr=i(Ll),T(f5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),ZNe=i(m),mc=n(m,"H2",{class:!0});var nGe=s(mc);g5=n(nGe,"A",{id:!0,class:!0,href:!0});var s3t=s(g5);gTe=n(s3t,"SPAN",{});var l3t=s(gTe);T(V7.$$.fragment,l3t),l3t.forEach(t),s3t.forEach(t),yCr=i(nGe),hTe=n(nGe,"SPAN",{});var i3t=s(hTe);LCr=r(i3t,"TFAutoModelForNextSentencePrediction"),i3t.forEach(t),nGe.forEach(t),eje=i(m),nr=n(m,"DIV",{class:!0});var xl=s(nr);T(X7.$$.fragment,xl),xCr=i(xl),fc=n(xl,"P",{});var hee=s(fc);$Cr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),pU=n(hee,"A",{href:!0});var d3t=s(pU);kCr=r(d3t,"from_pretrained()"),d3t.forEach(t),SCr=r(hee," class method or the "),_U=n(hee,"A",{href:!0});var c3t=s(_U);RCr=r(c3t,"from_config()"),c3t.forEach(t),PCr=r(hee,` class
method.`),hee.forEach(t),BCr=i(xl),z7=n(xl,"P",{});var sGe=s(z7);ICr=r(sGe,"This class cannot be instantiated directly using "),uTe=n(sGe,"CODE",{});var m3t=s(uTe);qCr=r(m3t,"__init__()"),m3t.forEach(t),NCr=r(sGe," (throws an error)."),sGe.forEach(t),jCr=i(xl),Bt=n(xl,"DIV",{class:!0});var I6=s(Bt);T(W7.$$.fragment,I6),DCr=i(I6),pTe=n(I6,"P",{});var f3t=s(pTe);GCr=r(f3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f3t.forEach(t),OCr=i(I6),gc=n(I6,"P",{});var uee=s(gc);VCr=r(uee,`Note:
Loading a model from its configuration file does `),_Te=n(uee,"STRONG",{});var g3t=s(_Te);XCr=r(g3t,"not"),g3t.forEach(t),zCr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(uee,"A",{href:!0});var h3t=s(bU);WCr=r(h3t,"from_pretrained()"),h3t.forEach(t),QCr=r(uee," to load the model weights."),uee.forEach(t),HCr=i(I6),T(h5.$$.fragment,I6),I6.forEach(t),UCr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(Q7.$$.fragment,$l),JCr=i($l),bTe=n($l,"P",{});var u3t=s(bTe);YCr=r(u3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u3t.forEach(t),KCr=i($l),ln=n($l,"P",{});var q6=s(ln);ZCr=r(q6,"The model class to instantiate is selected based on the "),vTe=n(q6,"CODE",{});var p3t=s(vTe);e5r=r(p3t,"model_type"),p3t.forEach(t),o5r=r(q6,` property of the config object (either
passed as an argument or loaded from `),FTe=n(q6,"CODE",{});var _3t=s(FTe);r5r=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),t5r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(q6,"CODE",{});var b3t=s(TTe);a5r=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),n5r=r(q6,":"),q6.forEach(t),s5r=i($l),H7=n($l,"UL",{});var lGe=s(H7);u5=n(lGe,"LI",{});var XPe=s(u5);MTe=n(XPe,"STRONG",{});var v3t=s(MTe);l5r=r(v3t,"bert"),v3t.forEach(t),i5r=r(XPe," \u2014 "),vU=n(XPe,"A",{href:!0});var F3t=s(vU);d5r=r(F3t,"TFBertForNextSentencePrediction"),F3t.forEach(t),c5r=r(XPe," (BERT model)"),XPe.forEach(t),m5r=i(lGe),p5=n(lGe,"LI",{});var zPe=s(p5);ETe=n(zPe,"STRONG",{});var T3t=s(ETe);f5r=r(T3t,"mobilebert"),T3t.forEach(t),g5r=r(zPe," \u2014 "),FU=n(zPe,"A",{href:!0});var M3t=s(FU);h5r=r(M3t,"TFMobileBertForNextSentencePrediction"),M3t.forEach(t),u5r=r(zPe," (MobileBERT model)"),zPe.forEach(t),lGe.forEach(t),p5r=i($l),T(_5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),oje=i(m),hc=n(m,"H2",{class:!0});var iGe=s(hc);b5=n(iGe,"A",{id:!0,class:!0,href:!0});var E3t=s(b5);CTe=n(E3t,"SPAN",{});var C3t=s(CTe);T(U7.$$.fragment,C3t),C3t.forEach(t),E3t.forEach(t),_5r=i(iGe),wTe=n(iGe,"SPAN",{});var w3t=s(wTe);b5r=r(w3t,"TFAutoModelForTableQuestionAnswering"),w3t.forEach(t),iGe.forEach(t),rje=i(m),sr=n(m,"DIV",{class:!0});var kl=s(sr);T(J7.$$.fragment,kl),v5r=i(kl),uc=n(kl,"P",{});var pee=s(uc);F5r=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TU=n(pee,"A",{href:!0});var A3t=s(TU);T5r=r(A3t,"from_pretrained()"),A3t.forEach(t),M5r=r(pee," class method or the "),MU=n(pee,"A",{href:!0});var y3t=s(MU);E5r=r(y3t,"from_config()"),y3t.forEach(t),C5r=r(pee,` class
method.`),pee.forEach(t),w5r=i(kl),Y7=n(kl,"P",{});var dGe=s(Y7);A5r=r(dGe,"This class cannot be instantiated directly using "),ATe=n(dGe,"CODE",{});var L3t=s(ATe);y5r=r(L3t,"__init__()"),L3t.forEach(t),L5r=r(dGe," (throws an error)."),dGe.forEach(t),x5r=i(kl),It=n(kl,"DIV",{class:!0});var N6=s(It);T(K7.$$.fragment,N6),$5r=i(N6),yTe=n(N6,"P",{});var x3t=s(yTe);k5r=r(x3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x3t.forEach(t),S5r=i(N6),pc=n(N6,"P",{});var _ee=s(pc);R5r=r(_ee,`Note:
Loading a model from its configuration file does `),LTe=n(_ee,"STRONG",{});var $3t=s(LTe);P5r=r($3t,"not"),$3t.forEach(t),B5r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(_ee,"A",{href:!0});var k3t=s(EU);I5r=r(k3t,"from_pretrained()"),k3t.forEach(t),q5r=r(_ee," to load the model weights."),_ee.forEach(t),N5r=i(N6),T(v5.$$.fragment,N6),N6.forEach(t),j5r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(Z7.$$.fragment,Sl),D5r=i(Sl),xTe=n(Sl,"P",{});var S3t=s(xTe);G5r=r(S3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S3t.forEach(t),O5r=i(Sl),dn=n(Sl,"P",{});var j6=s(dn);V5r=r(j6,"The model class to instantiate is selected based on the "),$Te=n(j6,"CODE",{});var R3t=s($Te);X5r=r(R3t,"model_type"),R3t.forEach(t),z5r=r(j6,` property of the config object (either
passed as an argument or loaded from `),kTe=n(j6,"CODE",{});var P3t=s(kTe);W5r=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),Q5r=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(j6,"CODE",{});var B3t=s(STe);H5r=r(B3t,"pretrained_model_name_or_path"),B3t.forEach(t),U5r=r(j6,":"),j6.forEach(t),J5r=i(Sl),RTe=n(Sl,"UL",{});var I3t=s(RTe);F5=n(I3t,"LI",{});var WPe=s(F5);PTe=n(WPe,"STRONG",{});var q3t=s(PTe);Y5r=r(q3t,"tapas"),q3t.forEach(t),K5r=r(WPe," \u2014 "),CU=n(WPe,"A",{href:!0});var N3t=s(CU);Z5r=r(N3t,"TFTapasForQuestionAnswering"),N3t.forEach(t),e3r=r(WPe," (TAPAS model)"),WPe.forEach(t),I3t.forEach(t),o3r=i(Sl),T(T5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),tje=i(m),_c=n(m,"H2",{class:!0});var cGe=s(_c);M5=n(cGe,"A",{id:!0,class:!0,href:!0});var j3t=s(M5);BTe=n(j3t,"SPAN",{});var D3t=s(BTe);T(e9.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),r3r=i(cGe),ITe=n(cGe,"SPAN",{});var G3t=s(ITe);t3r=r(G3t,"TFAutoModelForTokenClassification"),G3t.forEach(t),cGe.forEach(t),aje=i(m),lr=n(m,"DIV",{class:!0});var Rl=s(lr);T(o9.$$.fragment,Rl),a3r=i(Rl),bc=n(Rl,"P",{});var bee=s(bc);n3r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wU=n(bee,"A",{href:!0});var O3t=s(wU);s3r=r(O3t,"from_pretrained()"),O3t.forEach(t),l3r=r(bee," class method or the "),AU=n(bee,"A",{href:!0});var V3t=s(AU);i3r=r(V3t,"from_config()"),V3t.forEach(t),d3r=r(bee,` class
method.`),bee.forEach(t),c3r=i(Rl),r9=n(Rl,"P",{});var mGe=s(r9);m3r=r(mGe,"This class cannot be instantiated directly using "),qTe=n(mGe,"CODE",{});var X3t=s(qTe);f3r=r(X3t,"__init__()"),X3t.forEach(t),g3r=r(mGe," (throws an error)."),mGe.forEach(t),h3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var D6=s(qt);T(t9.$$.fragment,D6),u3r=i(D6),NTe=n(D6,"P",{});var z3t=s(NTe);p3r=r(z3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z3t.forEach(t),_3r=i(D6),vc=n(D6,"P",{});var vee=s(vc);b3r=r(vee,`Note:
Loading a model from its configuration file does `),jTe=n(vee,"STRONG",{});var W3t=s(jTe);v3r=r(W3t,"not"),W3t.forEach(t),F3r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(vee,"A",{href:!0});var Q3t=s(yU);T3r=r(Q3t,"from_pretrained()"),Q3t.forEach(t),M3r=r(vee," to load the model weights."),vee.forEach(t),E3r=i(D6),T(E5.$$.fragment,D6),D6.forEach(t),C3r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(a9.$$.fragment,Pl),w3r=i(Pl),DTe=n(Pl,"P",{});var H3t=s(DTe);A3r=r(H3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H3t.forEach(t),y3r=i(Pl),cn=n(Pl,"P",{});var G6=s(cn);L3r=r(G6,"The model class to instantiate is selected based on the "),GTe=n(G6,"CODE",{});var U3t=s(GTe);x3r=r(U3t,"model_type"),U3t.forEach(t),$3r=r(G6,` property of the config object (either
passed as an argument or loaded from `),OTe=n(G6,"CODE",{});var J3t=s(OTe);k3r=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),S3r=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(G6,"CODE",{});var Y3t=s(VTe);R3r=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),P3r=r(G6,":"),G6.forEach(t),B3r=i(Pl),de=n(Pl,"UL",{});var fe=s(de);C5=n(fe,"LI",{});var QPe=s(C5);XTe=n(QPe,"STRONG",{});var K3t=s(XTe);I3r=r(K3t,"albert"),K3t.forEach(t),q3r=r(QPe," \u2014 "),LU=n(QPe,"A",{href:!0});var Z3t=s(LU);N3r=r(Z3t,"TFAlbertForTokenClassification"),Z3t.forEach(t),j3r=r(QPe," (ALBERT model)"),QPe.forEach(t),D3r=i(fe),w5=n(fe,"LI",{});var HPe=s(w5);zTe=n(HPe,"STRONG",{});var ewt=s(zTe);G3r=r(ewt,"bert"),ewt.forEach(t),O3r=r(HPe," \u2014 "),xU=n(HPe,"A",{href:!0});var owt=s(xU);V3r=r(owt,"TFBertForTokenClassification"),owt.forEach(t),X3r=r(HPe," (BERT model)"),HPe.forEach(t),z3r=i(fe),A5=n(fe,"LI",{});var UPe=s(A5);WTe=n(UPe,"STRONG",{});var rwt=s(WTe);W3r=r(rwt,"camembert"),rwt.forEach(t),Q3r=r(UPe," \u2014 "),$U=n(UPe,"A",{href:!0});var twt=s($U);H3r=r(twt,"TFCamembertForTokenClassification"),twt.forEach(t),U3r=r(UPe," (CamemBERT model)"),UPe.forEach(t),J3r=i(fe),y5=n(fe,"LI",{});var JPe=s(y5);QTe=n(JPe,"STRONG",{});var awt=s(QTe);Y3r=r(awt,"convbert"),awt.forEach(t),K3r=r(JPe," \u2014 "),kU=n(JPe,"A",{href:!0});var nwt=s(kU);Z3r=r(nwt,"TFConvBertForTokenClassification"),nwt.forEach(t),ewr=r(JPe," (ConvBERT model)"),JPe.forEach(t),owr=i(fe),L5=n(fe,"LI",{});var YPe=s(L5);HTe=n(YPe,"STRONG",{});var swt=s(HTe);rwr=r(swt,"deberta"),swt.forEach(t),twr=r(YPe," \u2014 "),SU=n(YPe,"A",{href:!0});var lwt=s(SU);awr=r(lwt,"TFDebertaForTokenClassification"),lwt.forEach(t),nwr=r(YPe," (DeBERTa model)"),YPe.forEach(t),swr=i(fe),x5=n(fe,"LI",{});var KPe=s(x5);UTe=n(KPe,"STRONG",{});var iwt=s(UTe);lwr=r(iwt,"deberta-v2"),iwt.forEach(t),iwr=r(KPe," \u2014 "),RU=n(KPe,"A",{href:!0});var dwt=s(RU);dwr=r(dwt,"TFDebertaV2ForTokenClassification"),dwt.forEach(t),cwr=r(KPe," (DeBERTa-v2 model)"),KPe.forEach(t),mwr=i(fe),$5=n(fe,"LI",{});var ZPe=s($5);JTe=n(ZPe,"STRONG",{});var cwt=s(JTe);fwr=r(cwt,"distilbert"),cwt.forEach(t),gwr=r(ZPe," \u2014 "),PU=n(ZPe,"A",{href:!0});var mwt=s(PU);hwr=r(mwt,"TFDistilBertForTokenClassification"),mwt.forEach(t),uwr=r(ZPe," (DistilBERT model)"),ZPe.forEach(t),pwr=i(fe),k5=n(fe,"LI",{});var eBe=s(k5);YTe=n(eBe,"STRONG",{});var fwt=s(YTe);_wr=r(fwt,"electra"),fwt.forEach(t),bwr=r(eBe," \u2014 "),BU=n(eBe,"A",{href:!0});var gwt=s(BU);vwr=r(gwt,"TFElectraForTokenClassification"),gwt.forEach(t),Fwr=r(eBe," (ELECTRA model)"),eBe.forEach(t),Twr=i(fe),S5=n(fe,"LI",{});var oBe=s(S5);KTe=n(oBe,"STRONG",{});var hwt=s(KTe);Mwr=r(hwt,"flaubert"),hwt.forEach(t),Ewr=r(oBe," \u2014 "),IU=n(oBe,"A",{href:!0});var uwt=s(IU);Cwr=r(uwt,"TFFlaubertForTokenClassification"),uwt.forEach(t),wwr=r(oBe," (FlauBERT model)"),oBe.forEach(t),Awr=i(fe),R5=n(fe,"LI",{});var rBe=s(R5);ZTe=n(rBe,"STRONG",{});var pwt=s(ZTe);ywr=r(pwt,"funnel"),pwt.forEach(t),Lwr=r(rBe," \u2014 "),qU=n(rBe,"A",{href:!0});var _wt=s(qU);xwr=r(_wt,"TFFunnelForTokenClassification"),_wt.forEach(t),$wr=r(rBe," (Funnel Transformer model)"),rBe.forEach(t),kwr=i(fe),P5=n(fe,"LI",{});var tBe=s(P5);eMe=n(tBe,"STRONG",{});var bwt=s(eMe);Swr=r(bwt,"layoutlm"),bwt.forEach(t),Rwr=r(tBe," \u2014 "),NU=n(tBe,"A",{href:!0});var vwt=s(NU);Pwr=r(vwt,"TFLayoutLMForTokenClassification"),vwt.forEach(t),Bwr=r(tBe," (LayoutLM model)"),tBe.forEach(t),Iwr=i(fe),B5=n(fe,"LI",{});var aBe=s(B5);oMe=n(aBe,"STRONG",{});var Fwt=s(oMe);qwr=r(Fwt,"longformer"),Fwt.forEach(t),Nwr=r(aBe," \u2014 "),jU=n(aBe,"A",{href:!0});var Twt=s(jU);jwr=r(Twt,"TFLongformerForTokenClassification"),Twt.forEach(t),Dwr=r(aBe," (Longformer model)"),aBe.forEach(t),Gwr=i(fe),I5=n(fe,"LI",{});var nBe=s(I5);rMe=n(nBe,"STRONG",{});var Mwt=s(rMe);Owr=r(Mwt,"mobilebert"),Mwt.forEach(t),Vwr=r(nBe," \u2014 "),DU=n(nBe,"A",{href:!0});var Ewt=s(DU);Xwr=r(Ewt,"TFMobileBertForTokenClassification"),Ewt.forEach(t),zwr=r(nBe," (MobileBERT model)"),nBe.forEach(t),Wwr=i(fe),q5=n(fe,"LI",{});var sBe=s(q5);tMe=n(sBe,"STRONG",{});var Cwt=s(tMe);Qwr=r(Cwt,"mpnet"),Cwt.forEach(t),Hwr=r(sBe," \u2014 "),GU=n(sBe,"A",{href:!0});var wwt=s(GU);Uwr=r(wwt,"TFMPNetForTokenClassification"),wwt.forEach(t),Jwr=r(sBe," (MPNet model)"),sBe.forEach(t),Ywr=i(fe),N5=n(fe,"LI",{});var lBe=s(N5);aMe=n(lBe,"STRONG",{});var Awt=s(aMe);Kwr=r(Awt,"rembert"),Awt.forEach(t),Zwr=r(lBe," \u2014 "),OU=n(lBe,"A",{href:!0});var ywt=s(OU);e0r=r(ywt,"TFRemBertForTokenClassification"),ywt.forEach(t),o0r=r(lBe," (RemBERT model)"),lBe.forEach(t),r0r=i(fe),j5=n(fe,"LI",{});var iBe=s(j5);nMe=n(iBe,"STRONG",{});var Lwt=s(nMe);t0r=r(Lwt,"roberta"),Lwt.forEach(t),a0r=r(iBe," \u2014 "),VU=n(iBe,"A",{href:!0});var xwt=s(VU);n0r=r(xwt,"TFRobertaForTokenClassification"),xwt.forEach(t),s0r=r(iBe," (RoBERTa model)"),iBe.forEach(t),l0r=i(fe),D5=n(fe,"LI",{});var dBe=s(D5);sMe=n(dBe,"STRONG",{});var $wt=s(sMe);i0r=r($wt,"roformer"),$wt.forEach(t),d0r=r(dBe," \u2014 "),XU=n(dBe,"A",{href:!0});var kwt=s(XU);c0r=r(kwt,"TFRoFormerForTokenClassification"),kwt.forEach(t),m0r=r(dBe," (RoFormer model)"),dBe.forEach(t),f0r=i(fe),G5=n(fe,"LI",{});var cBe=s(G5);lMe=n(cBe,"STRONG",{});var Swt=s(lMe);g0r=r(Swt,"xlm"),Swt.forEach(t),h0r=r(cBe," \u2014 "),zU=n(cBe,"A",{href:!0});var Rwt=s(zU);u0r=r(Rwt,"TFXLMForTokenClassification"),Rwt.forEach(t),p0r=r(cBe," (XLM model)"),cBe.forEach(t),_0r=i(fe),O5=n(fe,"LI",{});var mBe=s(O5);iMe=n(mBe,"STRONG",{});var Pwt=s(iMe);b0r=r(Pwt,"xlm-roberta"),Pwt.forEach(t),v0r=r(mBe," \u2014 "),WU=n(mBe,"A",{href:!0});var Bwt=s(WU);F0r=r(Bwt,"TFXLMRobertaForTokenClassification"),Bwt.forEach(t),T0r=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),M0r=i(fe),V5=n(fe,"LI",{});var fBe=s(V5);dMe=n(fBe,"STRONG",{});var Iwt=s(dMe);E0r=r(Iwt,"xlnet"),Iwt.forEach(t),C0r=r(fBe," \u2014 "),QU=n(fBe,"A",{href:!0});var qwt=s(QU);w0r=r(qwt,"TFXLNetForTokenClassification"),qwt.forEach(t),A0r=r(fBe," (XLNet model)"),fBe.forEach(t),fe.forEach(t),y0r=i(Pl),T(X5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),nje=i(m),Fc=n(m,"H2",{class:!0});var fGe=s(Fc);z5=n(fGe,"A",{id:!0,class:!0,href:!0});var Nwt=s(z5);cMe=n(Nwt,"SPAN",{});var jwt=s(cMe);T(n9.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),L0r=i(fGe),mMe=n(fGe,"SPAN",{});var Dwt=s(mMe);x0r=r(Dwt,"TFAutoModelForQuestionAnswering"),Dwt.forEach(t),fGe.forEach(t),sje=i(m),ir=n(m,"DIV",{class:!0});var Bl=s(ir);T(s9.$$.fragment,Bl),$0r=i(Bl),Tc=n(Bl,"P",{});var Fee=s(Tc);k0r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HU=n(Fee,"A",{href:!0});var Gwt=s(HU);S0r=r(Gwt,"from_pretrained()"),Gwt.forEach(t),R0r=r(Fee," class method or the "),UU=n(Fee,"A",{href:!0});var Owt=s(UU);P0r=r(Owt,"from_config()"),Owt.forEach(t),B0r=r(Fee,` class
method.`),Fee.forEach(t),I0r=i(Bl),l9=n(Bl,"P",{});var gGe=s(l9);q0r=r(gGe,"This class cannot be instantiated directly using "),fMe=n(gGe,"CODE",{});var Vwt=s(fMe);N0r=r(Vwt,"__init__()"),Vwt.forEach(t),j0r=r(gGe," (throws an error)."),gGe.forEach(t),D0r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var O6=s(Nt);T(i9.$$.fragment,O6),G0r=i(O6),gMe=n(O6,"P",{});var Xwt=s(gMe);O0r=r(Xwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Xwt.forEach(t),V0r=i(O6),Mc=n(O6,"P",{});var Tee=s(Mc);X0r=r(Tee,`Note:
Loading a model from its configuration file does `),hMe=n(Tee,"STRONG",{});var zwt=s(hMe);z0r=r(zwt,"not"),zwt.forEach(t),W0r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(Tee,"A",{href:!0});var Wwt=s(JU);Q0r=r(Wwt,"from_pretrained()"),Wwt.forEach(t),H0r=r(Tee," to load the model weights."),Tee.forEach(t),U0r=i(O6),T(W5.$$.fragment,O6),O6.forEach(t),J0r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(d9.$$.fragment,Il),Y0r=i(Il),uMe=n(Il,"P",{});var Qwt=s(uMe);K0r=r(Qwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qwt.forEach(t),Z0r=i(Il),mn=n(Il,"P",{});var V6=s(mn);eAr=r(V6,"The model class to instantiate is selected based on the "),pMe=n(V6,"CODE",{});var Hwt=s(pMe);oAr=r(Hwt,"model_type"),Hwt.forEach(t),rAr=r(V6,` property of the config object (either
passed as an argument or loaded from `),_Me=n(V6,"CODE",{});var Uwt=s(_Me);tAr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),aAr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bMe=n(V6,"CODE",{});var Jwt=s(bMe);nAr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),sAr=r(V6,":"),V6.forEach(t),lAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);Q5=n(ge,"LI",{});var gBe=s(Q5);vMe=n(gBe,"STRONG",{});var Ywt=s(vMe);iAr=r(Ywt,"albert"),Ywt.forEach(t),dAr=r(gBe," \u2014 "),YU=n(gBe,"A",{href:!0});var Kwt=s(YU);cAr=r(Kwt,"TFAlbertForQuestionAnswering"),Kwt.forEach(t),mAr=r(gBe," (ALBERT model)"),gBe.forEach(t),fAr=i(ge),H5=n(ge,"LI",{});var hBe=s(H5);FMe=n(hBe,"STRONG",{});var Zwt=s(FMe);gAr=r(Zwt,"bert"),Zwt.forEach(t),hAr=r(hBe," \u2014 "),KU=n(hBe,"A",{href:!0});var e0t=s(KU);uAr=r(e0t,"TFBertForQuestionAnswering"),e0t.forEach(t),pAr=r(hBe," (BERT model)"),hBe.forEach(t),_Ar=i(ge),U5=n(ge,"LI",{});var uBe=s(U5);TMe=n(uBe,"STRONG",{});var o0t=s(TMe);bAr=r(o0t,"camembert"),o0t.forEach(t),vAr=r(uBe," \u2014 "),ZU=n(uBe,"A",{href:!0});var r0t=s(ZU);FAr=r(r0t,"TFCamembertForQuestionAnswering"),r0t.forEach(t),TAr=r(uBe," (CamemBERT model)"),uBe.forEach(t),MAr=i(ge),J5=n(ge,"LI",{});var pBe=s(J5);MMe=n(pBe,"STRONG",{});var t0t=s(MMe);EAr=r(t0t,"convbert"),t0t.forEach(t),CAr=r(pBe," \u2014 "),eJ=n(pBe,"A",{href:!0});var a0t=s(eJ);wAr=r(a0t,"TFConvBertForQuestionAnswering"),a0t.forEach(t),AAr=r(pBe," (ConvBERT model)"),pBe.forEach(t),yAr=i(ge),Y5=n(ge,"LI",{});var _Be=s(Y5);EMe=n(_Be,"STRONG",{});var n0t=s(EMe);LAr=r(n0t,"deberta"),n0t.forEach(t),xAr=r(_Be," \u2014 "),oJ=n(_Be,"A",{href:!0});var s0t=s(oJ);$Ar=r(s0t,"TFDebertaForQuestionAnswering"),s0t.forEach(t),kAr=r(_Be," (DeBERTa model)"),_Be.forEach(t),SAr=i(ge),K5=n(ge,"LI",{});var bBe=s(K5);CMe=n(bBe,"STRONG",{});var l0t=s(CMe);RAr=r(l0t,"deberta-v2"),l0t.forEach(t),PAr=r(bBe," \u2014 "),rJ=n(bBe,"A",{href:!0});var i0t=s(rJ);BAr=r(i0t,"TFDebertaV2ForQuestionAnswering"),i0t.forEach(t),IAr=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),qAr=i(ge),Z5=n(ge,"LI",{});var vBe=s(Z5);wMe=n(vBe,"STRONG",{});var d0t=s(wMe);NAr=r(d0t,"distilbert"),d0t.forEach(t),jAr=r(vBe," \u2014 "),tJ=n(vBe,"A",{href:!0});var c0t=s(tJ);DAr=r(c0t,"TFDistilBertForQuestionAnswering"),c0t.forEach(t),GAr=r(vBe," (DistilBERT model)"),vBe.forEach(t),OAr=i(ge),e3=n(ge,"LI",{});var FBe=s(e3);AMe=n(FBe,"STRONG",{});var m0t=s(AMe);VAr=r(m0t,"electra"),m0t.forEach(t),XAr=r(FBe," \u2014 "),aJ=n(FBe,"A",{href:!0});var f0t=s(aJ);zAr=r(f0t,"TFElectraForQuestionAnswering"),f0t.forEach(t),WAr=r(FBe," (ELECTRA model)"),FBe.forEach(t),QAr=i(ge),o3=n(ge,"LI",{});var TBe=s(o3);yMe=n(TBe,"STRONG",{});var g0t=s(yMe);HAr=r(g0t,"flaubert"),g0t.forEach(t),UAr=r(TBe," \u2014 "),nJ=n(TBe,"A",{href:!0});var h0t=s(nJ);JAr=r(h0t,"TFFlaubertForQuestionAnsweringSimple"),h0t.forEach(t),YAr=r(TBe," (FlauBERT model)"),TBe.forEach(t),KAr=i(ge),r3=n(ge,"LI",{});var MBe=s(r3);LMe=n(MBe,"STRONG",{});var u0t=s(LMe);ZAr=r(u0t,"funnel"),u0t.forEach(t),e6r=r(MBe," \u2014 "),sJ=n(MBe,"A",{href:!0});var p0t=s(sJ);o6r=r(p0t,"TFFunnelForQuestionAnswering"),p0t.forEach(t),r6r=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),t6r=i(ge),t3=n(ge,"LI",{});var EBe=s(t3);xMe=n(EBe,"STRONG",{});var _0t=s(xMe);a6r=r(_0t,"gptj"),_0t.forEach(t),n6r=r(EBe," \u2014 "),lJ=n(EBe,"A",{href:!0});var b0t=s(lJ);s6r=r(b0t,"TFGPTJForQuestionAnswering"),b0t.forEach(t),l6r=r(EBe," (GPT-J model)"),EBe.forEach(t),i6r=i(ge),a3=n(ge,"LI",{});var CBe=s(a3);$Me=n(CBe,"STRONG",{});var v0t=s($Me);d6r=r(v0t,"longformer"),v0t.forEach(t),c6r=r(CBe," \u2014 "),iJ=n(CBe,"A",{href:!0});var F0t=s(iJ);m6r=r(F0t,"TFLongformerForQuestionAnswering"),F0t.forEach(t),f6r=r(CBe," (Longformer model)"),CBe.forEach(t),g6r=i(ge),n3=n(ge,"LI",{});var wBe=s(n3);kMe=n(wBe,"STRONG",{});var T0t=s(kMe);h6r=r(T0t,"mobilebert"),T0t.forEach(t),u6r=r(wBe," \u2014 "),dJ=n(wBe,"A",{href:!0});var M0t=s(dJ);p6r=r(M0t,"TFMobileBertForQuestionAnswering"),M0t.forEach(t),_6r=r(wBe," (MobileBERT model)"),wBe.forEach(t),b6r=i(ge),s3=n(ge,"LI",{});var ABe=s(s3);SMe=n(ABe,"STRONG",{});var E0t=s(SMe);v6r=r(E0t,"mpnet"),E0t.forEach(t),F6r=r(ABe," \u2014 "),cJ=n(ABe,"A",{href:!0});var C0t=s(cJ);T6r=r(C0t,"TFMPNetForQuestionAnswering"),C0t.forEach(t),M6r=r(ABe," (MPNet model)"),ABe.forEach(t),E6r=i(ge),l3=n(ge,"LI",{});var yBe=s(l3);RMe=n(yBe,"STRONG",{});var w0t=s(RMe);C6r=r(w0t,"rembert"),w0t.forEach(t),w6r=r(yBe," \u2014 "),mJ=n(yBe,"A",{href:!0});var A0t=s(mJ);A6r=r(A0t,"TFRemBertForQuestionAnswering"),A0t.forEach(t),y6r=r(yBe," (RemBERT model)"),yBe.forEach(t),L6r=i(ge),i3=n(ge,"LI",{});var LBe=s(i3);PMe=n(LBe,"STRONG",{});var y0t=s(PMe);x6r=r(y0t,"roberta"),y0t.forEach(t),$6r=r(LBe," \u2014 "),fJ=n(LBe,"A",{href:!0});var L0t=s(fJ);k6r=r(L0t,"TFRobertaForQuestionAnswering"),L0t.forEach(t),S6r=r(LBe," (RoBERTa model)"),LBe.forEach(t),R6r=i(ge),d3=n(ge,"LI",{});var xBe=s(d3);BMe=n(xBe,"STRONG",{});var x0t=s(BMe);P6r=r(x0t,"roformer"),x0t.forEach(t),B6r=r(xBe," \u2014 "),gJ=n(xBe,"A",{href:!0});var $0t=s(gJ);I6r=r($0t,"TFRoFormerForQuestionAnswering"),$0t.forEach(t),q6r=r(xBe," (RoFormer model)"),xBe.forEach(t),N6r=i(ge),c3=n(ge,"LI",{});var $Be=s(c3);IMe=n($Be,"STRONG",{});var k0t=s(IMe);j6r=r(k0t,"xlm"),k0t.forEach(t),D6r=r($Be," \u2014 "),hJ=n($Be,"A",{href:!0});var S0t=s(hJ);G6r=r(S0t,"TFXLMForQuestionAnsweringSimple"),S0t.forEach(t),O6r=r($Be," (XLM model)"),$Be.forEach(t),V6r=i(ge),m3=n(ge,"LI",{});var kBe=s(m3);qMe=n(kBe,"STRONG",{});var R0t=s(qMe);X6r=r(R0t,"xlm-roberta"),R0t.forEach(t),z6r=r(kBe," \u2014 "),uJ=n(kBe,"A",{href:!0});var P0t=s(uJ);W6r=r(P0t,"TFXLMRobertaForQuestionAnswering"),P0t.forEach(t),Q6r=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),H6r=i(ge),f3=n(ge,"LI",{});var SBe=s(f3);NMe=n(SBe,"STRONG",{});var B0t=s(NMe);U6r=r(B0t,"xlnet"),B0t.forEach(t),J6r=r(SBe," \u2014 "),pJ=n(SBe,"A",{href:!0});var I0t=s(pJ);Y6r=r(I0t,"TFXLNetForQuestionAnsweringSimple"),I0t.forEach(t),K6r=r(SBe," (XLNet model)"),SBe.forEach(t),ge.forEach(t),Z6r=i(Il),T(g3.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),lje=i(m),Ec=n(m,"H2",{class:!0});var hGe=s(Ec);h3=n(hGe,"A",{id:!0,class:!0,href:!0});var q0t=s(h3);jMe=n(q0t,"SPAN",{});var N0t=s(jMe);T(c9.$$.fragment,N0t),N0t.forEach(t),q0t.forEach(t),eyr=i(hGe),DMe=n(hGe,"SPAN",{});var j0t=s(DMe);oyr=r(j0t,"TFAutoModelForVision2Seq"),j0t.forEach(t),hGe.forEach(t),ije=i(m),dr=n(m,"DIV",{class:!0});var ql=s(dr);T(m9.$$.fragment,ql),ryr=i(ql),Cc=n(ql,"P",{});var Mee=s(Cc);tyr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_J=n(Mee,"A",{href:!0});var D0t=s(_J);ayr=r(D0t,"from_pretrained()"),D0t.forEach(t),nyr=r(Mee," class method or the "),bJ=n(Mee,"A",{href:!0});var G0t=s(bJ);syr=r(G0t,"from_config()"),G0t.forEach(t),lyr=r(Mee,` class
method.`),Mee.forEach(t),iyr=i(ql),f9=n(ql,"P",{});var uGe=s(f9);dyr=r(uGe,"This class cannot be instantiated directly using "),GMe=n(uGe,"CODE",{});var O0t=s(GMe);cyr=r(O0t,"__init__()"),O0t.forEach(t),myr=r(uGe," (throws an error)."),uGe.forEach(t),fyr=i(ql),jt=n(ql,"DIV",{class:!0});var X6=s(jt);T(g9.$$.fragment,X6),gyr=i(X6),OMe=n(X6,"P",{});var V0t=s(OMe);hyr=r(V0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),V0t.forEach(t),uyr=i(X6),wc=n(X6,"P",{});var Eee=s(wc);pyr=r(Eee,`Note:
Loading a model from its configuration file does `),VMe=n(Eee,"STRONG",{});var X0t=s(VMe);_yr=r(X0t,"not"),X0t.forEach(t),byr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(Eee,"A",{href:!0});var z0t=s(vJ);vyr=r(z0t,"from_pretrained()"),z0t.forEach(t),Fyr=r(Eee," to load the model weights."),Eee.forEach(t),Tyr=i(X6),T(u3.$$.fragment,X6),X6.forEach(t),Myr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(h9.$$.fragment,Nl),Eyr=i(Nl),XMe=n(Nl,"P",{});var W0t=s(XMe);Cyr=r(W0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W0t.forEach(t),wyr=i(Nl),fn=n(Nl,"P",{});var z6=s(fn);Ayr=r(z6,"The model class to instantiate is selected based on the "),zMe=n(z6,"CODE",{});var Q0t=s(zMe);yyr=r(Q0t,"model_type"),Q0t.forEach(t),Lyr=r(z6,` property of the config object (either
passed as an argument or loaded from `),WMe=n(z6,"CODE",{});var H0t=s(WMe);xyr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),$yr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(z6,"CODE",{});var U0t=s(QMe);kyr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),Syr=r(z6,":"),z6.forEach(t),Ryr=i(Nl),HMe=n(Nl,"UL",{});var J0t=s(HMe);p3=n(J0t,"LI",{});var RBe=s(p3);UMe=n(RBe,"STRONG",{});var Y0t=s(UMe);Pyr=r(Y0t,"vision-encoder-decoder"),Y0t.forEach(t),Byr=r(RBe," \u2014 "),FJ=n(RBe,"A",{href:!0});var K0t=s(FJ);Iyr=r(K0t,"TFVisionEncoderDecoderModel"),K0t.forEach(t),qyr=r(RBe," (Vision Encoder decoder model)"),RBe.forEach(t),J0t.forEach(t),Nyr=i(Nl),T(_3.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),dje=i(m),Ac=n(m,"H2",{class:!0});var pGe=s(Ac);b3=n(pGe,"A",{id:!0,class:!0,href:!0});var Z0t=s(b3);JMe=n(Z0t,"SPAN",{});var eAt=s(JMe);T(u9.$$.fragment,eAt),eAt.forEach(t),Z0t.forEach(t),jyr=i(pGe),YMe=n(pGe,"SPAN",{});var oAt=s(YMe);Dyr=r(oAt,"TFAutoModelForSpeechSeq2Seq"),oAt.forEach(t),pGe.forEach(t),cje=i(m),cr=n(m,"DIV",{class:!0});var jl=s(cr);T(p9.$$.fragment,jl),Gyr=i(jl),yc=n(jl,"P",{});var Cee=s(yc);Oyr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TJ=n(Cee,"A",{href:!0});var rAt=s(TJ);Vyr=r(rAt,"from_pretrained()"),rAt.forEach(t),Xyr=r(Cee," class method or the "),MJ=n(Cee,"A",{href:!0});var tAt=s(MJ);zyr=r(tAt,"from_config()"),tAt.forEach(t),Wyr=r(Cee,` class
method.`),Cee.forEach(t),Qyr=i(jl),_9=n(jl,"P",{});var _Ge=s(_9);Hyr=r(_Ge,"This class cannot be instantiated directly using "),KMe=n(_Ge,"CODE",{});var aAt=s(KMe);Uyr=r(aAt,"__init__()"),aAt.forEach(t),Jyr=r(_Ge," (throws an error)."),_Ge.forEach(t),Yyr=i(jl),Dt=n(jl,"DIV",{class:!0});var W6=s(Dt);T(b9.$$.fragment,W6),Kyr=i(W6),ZMe=n(W6,"P",{});var nAt=s(ZMe);Zyr=r(nAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nAt.forEach(t),eLr=i(W6),Lc=n(W6,"P",{});var wee=s(Lc);oLr=r(wee,`Note:
Loading a model from its configuration file does `),e4e=n(wee,"STRONG",{});var sAt=s(e4e);rLr=r(sAt,"not"),sAt.forEach(t),tLr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(wee,"A",{href:!0});var lAt=s(EJ);aLr=r(lAt,"from_pretrained()"),lAt.forEach(t),nLr=r(wee," to load the model weights."),wee.forEach(t),sLr=i(W6),T(v3.$$.fragment,W6),W6.forEach(t),lLr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(v9.$$.fragment,Dl),iLr=i(Dl),o4e=n(Dl,"P",{});var iAt=s(o4e);dLr=r(iAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iAt.forEach(t),cLr=i(Dl),gn=n(Dl,"P",{});var Q6=s(gn);mLr=r(Q6,"The model class to instantiate is selected based on the "),r4e=n(Q6,"CODE",{});var dAt=s(r4e);fLr=r(dAt,"model_type"),dAt.forEach(t),gLr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),t4e=n(Q6,"CODE",{});var cAt=s(t4e);hLr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),uLr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(Q6,"CODE",{});var mAt=s(a4e);pLr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),_Lr=r(Q6,":"),Q6.forEach(t),bLr=i(Dl),n4e=n(Dl,"UL",{});var fAt=s(n4e);F3=n(fAt,"LI",{});var PBe=s(F3);s4e=n(PBe,"STRONG",{});var gAt=s(s4e);vLr=r(gAt,"speech_to_text"),gAt.forEach(t),FLr=r(PBe," \u2014 "),CJ=n(PBe,"A",{href:!0});var hAt=s(CJ);TLr=r(hAt,"TFSpeech2TextForConditionalGeneration"),hAt.forEach(t),MLr=r(PBe," (Speech2Text model)"),PBe.forEach(t),fAt.forEach(t),ELr=i(Dl),T(T3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),mje=i(m),xc=n(m,"H2",{class:!0});var bGe=s(xc);M3=n(bGe,"A",{id:!0,class:!0,href:!0});var uAt=s(M3);l4e=n(uAt,"SPAN",{});var pAt=s(l4e);T(F9.$$.fragment,pAt),pAt.forEach(t),uAt.forEach(t),CLr=i(bGe),i4e=n(bGe,"SPAN",{});var _At=s(i4e);wLr=r(_At,"FlaxAutoModel"),_At.forEach(t),bGe.forEach(t),fje=i(m),mr=n(m,"DIV",{class:!0});var Gl=s(mr);T(T9.$$.fragment,Gl),ALr=i(Gl),$c=n(Gl,"P",{});var Aee=s($c);yLr=r(Aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wJ=n(Aee,"A",{href:!0});var bAt=s(wJ);LLr=r(bAt,"from_pretrained()"),bAt.forEach(t),xLr=r(Aee," class method or the "),AJ=n(Aee,"A",{href:!0});var vAt=s(AJ);$Lr=r(vAt,"from_config()"),vAt.forEach(t),kLr=r(Aee,` class
method.`),Aee.forEach(t),SLr=i(Gl),M9=n(Gl,"P",{});var vGe=s(M9);RLr=r(vGe,"This class cannot be instantiated directly using "),d4e=n(vGe,"CODE",{});var FAt=s(d4e);PLr=r(FAt,"__init__()"),FAt.forEach(t),BLr=r(vGe," (throws an error)."),vGe.forEach(t),ILr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var H6=s(Gt);T(E9.$$.fragment,H6),qLr=i(H6),c4e=n(H6,"P",{});var TAt=s(c4e);NLr=r(TAt,"Instantiates one of the base model classes of the library from a configuration."),TAt.forEach(t),jLr=i(H6),kc=n(H6,"P",{});var yee=s(kc);DLr=r(yee,`Note:
Loading a model from its configuration file does `),m4e=n(yee,"STRONG",{});var MAt=s(m4e);GLr=r(MAt,"not"),MAt.forEach(t),OLr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(yee,"A",{href:!0});var EAt=s(yJ);VLr=r(EAt,"from_pretrained()"),EAt.forEach(t),XLr=r(yee," to load the model weights."),yee.forEach(t),zLr=i(H6),T(E3.$$.fragment,H6),H6.forEach(t),WLr=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(C9.$$.fragment,Ol),QLr=i(Ol),f4e=n(Ol,"P",{});var CAt=s(f4e);HLr=r(CAt,"Instantiate one of the base model classes of the library from a pretrained model."),CAt.forEach(t),ULr=i(Ol),hn=n(Ol,"P",{});var U6=s(hn);JLr=r(U6,"The model class to instantiate is selected based on the "),g4e=n(U6,"CODE",{});var wAt=s(g4e);YLr=r(wAt,"model_type"),wAt.forEach(t),KLr=r(U6,` property of the config object (either
passed as an argument or loaded from `),h4e=n(U6,"CODE",{});var AAt=s(h4e);ZLr=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),e8r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u4e=n(U6,"CODE",{});var yAt=s(u4e);o8r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),r8r=r(U6,":"),U6.forEach(t),t8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);C3=n(ne,"LI",{});var BBe=s(C3);p4e=n(BBe,"STRONG",{});var LAt=s(p4e);a8r=r(LAt,"albert"),LAt.forEach(t),n8r=r(BBe," \u2014 "),LJ=n(BBe,"A",{href:!0});var xAt=s(LJ);s8r=r(xAt,"FlaxAlbertModel"),xAt.forEach(t),l8r=r(BBe," (ALBERT model)"),BBe.forEach(t),i8r=i(ne),w3=n(ne,"LI",{});var IBe=s(w3);_4e=n(IBe,"STRONG",{});var $At=s(_4e);d8r=r($At,"bart"),$At.forEach(t),c8r=r(IBe," \u2014 "),xJ=n(IBe,"A",{href:!0});var kAt=s(xJ);m8r=r(kAt,"FlaxBartModel"),kAt.forEach(t),f8r=r(IBe," (BART model)"),IBe.forEach(t),g8r=i(ne),A3=n(ne,"LI",{});var qBe=s(A3);b4e=n(qBe,"STRONG",{});var SAt=s(b4e);h8r=r(SAt,"beit"),SAt.forEach(t),u8r=r(qBe," \u2014 "),$J=n(qBe,"A",{href:!0});var RAt=s($J);p8r=r(RAt,"FlaxBeitModel"),RAt.forEach(t),_8r=r(qBe," (BEiT model)"),qBe.forEach(t),b8r=i(ne),y3=n(ne,"LI",{});var NBe=s(y3);v4e=n(NBe,"STRONG",{});var PAt=s(v4e);v8r=r(PAt,"bert"),PAt.forEach(t),F8r=r(NBe," \u2014 "),kJ=n(NBe,"A",{href:!0});var BAt=s(kJ);T8r=r(BAt,"FlaxBertModel"),BAt.forEach(t),M8r=r(NBe," (BERT model)"),NBe.forEach(t),E8r=i(ne),L3=n(ne,"LI",{});var jBe=s(L3);F4e=n(jBe,"STRONG",{});var IAt=s(F4e);C8r=r(IAt,"big_bird"),IAt.forEach(t),w8r=r(jBe," \u2014 "),SJ=n(jBe,"A",{href:!0});var qAt=s(SJ);A8r=r(qAt,"FlaxBigBirdModel"),qAt.forEach(t),y8r=r(jBe," (BigBird model)"),jBe.forEach(t),L8r=i(ne),x3=n(ne,"LI",{});var DBe=s(x3);T4e=n(DBe,"STRONG",{});var NAt=s(T4e);x8r=r(NAt,"blenderbot"),NAt.forEach(t),$8r=r(DBe," \u2014 "),RJ=n(DBe,"A",{href:!0});var jAt=s(RJ);k8r=r(jAt,"FlaxBlenderbotModel"),jAt.forEach(t),S8r=r(DBe," (Blenderbot model)"),DBe.forEach(t),R8r=i(ne),$3=n(ne,"LI",{});var GBe=s($3);M4e=n(GBe,"STRONG",{});var DAt=s(M4e);P8r=r(DAt,"blenderbot-small"),DAt.forEach(t),B8r=r(GBe," \u2014 "),PJ=n(GBe,"A",{href:!0});var GAt=s(PJ);I8r=r(GAt,"FlaxBlenderbotSmallModel"),GAt.forEach(t),q8r=r(GBe," (BlenderbotSmall model)"),GBe.forEach(t),N8r=i(ne),k3=n(ne,"LI",{});var OBe=s(k3);E4e=n(OBe,"STRONG",{});var OAt=s(E4e);j8r=r(OAt,"clip"),OAt.forEach(t),D8r=r(OBe," \u2014 "),BJ=n(OBe,"A",{href:!0});var VAt=s(BJ);G8r=r(VAt,"FlaxCLIPModel"),VAt.forEach(t),O8r=r(OBe," (CLIP model)"),OBe.forEach(t),V8r=i(ne),S3=n(ne,"LI",{});var VBe=s(S3);C4e=n(VBe,"STRONG",{});var XAt=s(C4e);X8r=r(XAt,"distilbert"),XAt.forEach(t),z8r=r(VBe," \u2014 "),IJ=n(VBe,"A",{href:!0});var zAt=s(IJ);W8r=r(zAt,"FlaxDistilBertModel"),zAt.forEach(t),Q8r=r(VBe," (DistilBERT model)"),VBe.forEach(t),H8r=i(ne),R3=n(ne,"LI",{});var XBe=s(R3);w4e=n(XBe,"STRONG",{});var WAt=s(w4e);U8r=r(WAt,"electra"),WAt.forEach(t),J8r=r(XBe," \u2014 "),qJ=n(XBe,"A",{href:!0});var QAt=s(qJ);Y8r=r(QAt,"FlaxElectraModel"),QAt.forEach(t),K8r=r(XBe," (ELECTRA model)"),XBe.forEach(t),Z8r=i(ne),P3=n(ne,"LI",{});var zBe=s(P3);A4e=n(zBe,"STRONG",{});var HAt=s(A4e);e7r=r(HAt,"gpt2"),HAt.forEach(t),o7r=r(zBe," \u2014 "),NJ=n(zBe,"A",{href:!0});var UAt=s(NJ);r7r=r(UAt,"FlaxGPT2Model"),UAt.forEach(t),t7r=r(zBe," (OpenAI GPT-2 model)"),zBe.forEach(t),a7r=i(ne),B3=n(ne,"LI",{});var WBe=s(B3);y4e=n(WBe,"STRONG",{});var JAt=s(y4e);n7r=r(JAt,"gpt_neo"),JAt.forEach(t),s7r=r(WBe," \u2014 "),jJ=n(WBe,"A",{href:!0});var YAt=s(jJ);l7r=r(YAt,"FlaxGPTNeoModel"),YAt.forEach(t),i7r=r(WBe," (GPT Neo model)"),WBe.forEach(t),d7r=i(ne),I3=n(ne,"LI",{});var QBe=s(I3);L4e=n(QBe,"STRONG",{});var KAt=s(L4e);c7r=r(KAt,"gptj"),KAt.forEach(t),m7r=r(QBe," \u2014 "),DJ=n(QBe,"A",{href:!0});var ZAt=s(DJ);f7r=r(ZAt,"FlaxGPTJModel"),ZAt.forEach(t),g7r=r(QBe," (GPT-J model)"),QBe.forEach(t),h7r=i(ne),q3=n(ne,"LI",{});var HBe=s(q3);x4e=n(HBe,"STRONG",{});var e6t=s(x4e);u7r=r(e6t,"marian"),e6t.forEach(t),p7r=r(HBe," \u2014 "),GJ=n(HBe,"A",{href:!0});var o6t=s(GJ);_7r=r(o6t,"FlaxMarianModel"),o6t.forEach(t),b7r=r(HBe," (Marian model)"),HBe.forEach(t),v7r=i(ne),N3=n(ne,"LI",{});var UBe=s(N3);$4e=n(UBe,"STRONG",{});var r6t=s($4e);F7r=r(r6t,"mbart"),r6t.forEach(t),T7r=r(UBe," \u2014 "),OJ=n(UBe,"A",{href:!0});var t6t=s(OJ);M7r=r(t6t,"FlaxMBartModel"),t6t.forEach(t),E7r=r(UBe," (mBART model)"),UBe.forEach(t),C7r=i(ne),j3=n(ne,"LI",{});var JBe=s(j3);k4e=n(JBe,"STRONG",{});var a6t=s(k4e);w7r=r(a6t,"mt5"),a6t.forEach(t),A7r=r(JBe," \u2014 "),VJ=n(JBe,"A",{href:!0});var n6t=s(VJ);y7r=r(n6t,"FlaxMT5Model"),n6t.forEach(t),L7r=r(JBe," (mT5 model)"),JBe.forEach(t),x7r=i(ne),D3=n(ne,"LI",{});var YBe=s(D3);S4e=n(YBe,"STRONG",{});var s6t=s(S4e);$7r=r(s6t,"pegasus"),s6t.forEach(t),k7r=r(YBe," \u2014 "),XJ=n(YBe,"A",{href:!0});var l6t=s(XJ);S7r=r(l6t,"FlaxPegasusModel"),l6t.forEach(t),R7r=r(YBe," (Pegasus model)"),YBe.forEach(t),P7r=i(ne),G3=n(ne,"LI",{});var KBe=s(G3);R4e=n(KBe,"STRONG",{});var i6t=s(R4e);B7r=r(i6t,"roberta"),i6t.forEach(t),I7r=r(KBe," \u2014 "),zJ=n(KBe,"A",{href:!0});var d6t=s(zJ);q7r=r(d6t,"FlaxRobertaModel"),d6t.forEach(t),N7r=r(KBe," (RoBERTa model)"),KBe.forEach(t),j7r=i(ne),O3=n(ne,"LI",{});var ZBe=s(O3);P4e=n(ZBe,"STRONG",{});var c6t=s(P4e);D7r=r(c6t,"roformer"),c6t.forEach(t),G7r=r(ZBe," \u2014 "),WJ=n(ZBe,"A",{href:!0});var m6t=s(WJ);O7r=r(m6t,"FlaxRoFormerModel"),m6t.forEach(t),V7r=r(ZBe," (RoFormer model)"),ZBe.forEach(t),X7r=i(ne),V3=n(ne,"LI",{});var eIe=s(V3);B4e=n(eIe,"STRONG",{});var f6t=s(B4e);z7r=r(f6t,"t5"),f6t.forEach(t),W7r=r(eIe," \u2014 "),QJ=n(eIe,"A",{href:!0});var g6t=s(QJ);Q7r=r(g6t,"FlaxT5Model"),g6t.forEach(t),H7r=r(eIe," (T5 model)"),eIe.forEach(t),U7r=i(ne),X3=n(ne,"LI",{});var oIe=s(X3);I4e=n(oIe,"STRONG",{});var h6t=s(I4e);J7r=r(h6t,"vision-text-dual-encoder"),h6t.forEach(t),Y7r=r(oIe," \u2014 "),HJ=n(oIe,"A",{href:!0});var u6t=s(HJ);K7r=r(u6t,"FlaxVisionTextDualEncoderModel"),u6t.forEach(t),Z7r=r(oIe," (VisionTextDualEncoder model)"),oIe.forEach(t),e9r=i(ne),z3=n(ne,"LI",{});var rIe=s(z3);q4e=n(rIe,"STRONG",{});var p6t=s(q4e);o9r=r(p6t,"vit"),p6t.forEach(t),r9r=r(rIe," \u2014 "),UJ=n(rIe,"A",{href:!0});var _6t=s(UJ);t9r=r(_6t,"FlaxViTModel"),_6t.forEach(t),a9r=r(rIe," (ViT model)"),rIe.forEach(t),n9r=i(ne),W3=n(ne,"LI",{});var tIe=s(W3);N4e=n(tIe,"STRONG",{});var b6t=s(N4e);s9r=r(b6t,"wav2vec2"),b6t.forEach(t),l9r=r(tIe," \u2014 "),JJ=n(tIe,"A",{href:!0});var v6t=s(JJ);i9r=r(v6t,"FlaxWav2Vec2Model"),v6t.forEach(t),d9r=r(tIe," (Wav2Vec2 model)"),tIe.forEach(t),c9r=i(ne),Q3=n(ne,"LI",{});var aIe=s(Q3);j4e=n(aIe,"STRONG",{});var F6t=s(j4e);m9r=r(F6t,"xglm"),F6t.forEach(t),f9r=r(aIe," \u2014 "),YJ=n(aIe,"A",{href:!0});var T6t=s(YJ);g9r=r(T6t,"FlaxXGLMModel"),T6t.forEach(t),h9r=r(aIe," (XGLM model)"),aIe.forEach(t),u9r=i(ne),H3=n(ne,"LI",{});var nIe=s(H3);D4e=n(nIe,"STRONG",{});var M6t=s(D4e);p9r=r(M6t,"xlm-roberta"),M6t.forEach(t),_9r=r(nIe," \u2014 "),KJ=n(nIe,"A",{href:!0});var E6t=s(KJ);b9r=r(E6t,"FlaxXLMRobertaModel"),E6t.forEach(t),v9r=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),ne.forEach(t),F9r=i(Ol),T(U3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),gje=i(m),Sc=n(m,"H2",{class:!0});var FGe=s(Sc);J3=n(FGe,"A",{id:!0,class:!0,href:!0});var C6t=s(J3);G4e=n(C6t,"SPAN",{});var w6t=s(G4e);T(w9.$$.fragment,w6t),w6t.forEach(t),C6t.forEach(t),T9r=i(FGe),O4e=n(FGe,"SPAN",{});var A6t=s(O4e);M9r=r(A6t,"FlaxAutoModelForCausalLM"),A6t.forEach(t),FGe.forEach(t),hje=i(m),fr=n(m,"DIV",{class:!0});var Vl=s(fr);T(A9.$$.fragment,Vl),E9r=i(Vl),Rc=n(Vl,"P",{});var Lee=s(Rc);C9r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZJ=n(Lee,"A",{href:!0});var y6t=s(ZJ);w9r=r(y6t,"from_pretrained()"),y6t.forEach(t),A9r=r(Lee," class method or the "),eY=n(Lee,"A",{href:!0});var L6t=s(eY);y9r=r(L6t,"from_config()"),L6t.forEach(t),L9r=r(Lee,` class
method.`),Lee.forEach(t),x9r=i(Vl),y9=n(Vl,"P",{});var TGe=s(y9);$9r=r(TGe,"This class cannot be instantiated directly using "),V4e=n(TGe,"CODE",{});var x6t=s(V4e);k9r=r(x6t,"__init__()"),x6t.forEach(t),S9r=r(TGe," (throws an error)."),TGe.forEach(t),R9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var J6=s(Ot);T(L9.$$.fragment,J6),P9r=i(J6),X4e=n(J6,"P",{});var $6t=s(X4e);B9r=r($6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$6t.forEach(t),I9r=i(J6),Pc=n(J6,"P",{});var xee=s(Pc);q9r=r(xee,`Note:
Loading a model from its configuration file does `),z4e=n(xee,"STRONG",{});var k6t=s(z4e);N9r=r(k6t,"not"),k6t.forEach(t),j9r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(xee,"A",{href:!0});var S6t=s(oY);D9r=r(S6t,"from_pretrained()"),S6t.forEach(t),G9r=r(xee," to load the model weights."),xee.forEach(t),O9r=i(J6),T(Y3.$$.fragment,J6),J6.forEach(t),V9r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(x9.$$.fragment,Xl),X9r=i(Xl),W4e=n(Xl,"P",{});var R6t=s(W4e);z9r=r(R6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R6t.forEach(t),W9r=i(Xl),un=n(Xl,"P",{});var Y6=s(un);Q9r=r(Y6,"The model class to instantiate is selected based on the "),Q4e=n(Y6,"CODE",{});var P6t=s(Q4e);H9r=r(P6t,"model_type"),P6t.forEach(t),U9r=r(Y6,` property of the config object (either
passed as an argument or loaded from `),H4e=n(Y6,"CODE",{});var B6t=s(H4e);J9r=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),Y9r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(Y6,"CODE",{});var I6t=s(U4e);K9r=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Z9r=r(Y6,":"),Y6.forEach(t),exr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);K3=n(Xe,"LI",{});var sIe=s(K3);J4e=n(sIe,"STRONG",{});var q6t=s(J4e);oxr=r(q6t,"bart"),q6t.forEach(t),rxr=r(sIe," \u2014 "),rY=n(sIe,"A",{href:!0});var N6t=s(rY);txr=r(N6t,"FlaxBartForCausalLM"),N6t.forEach(t),axr=r(sIe," (BART model)"),sIe.forEach(t),nxr=i(Xe),Z3=n(Xe,"LI",{});var lIe=s(Z3);Y4e=n(lIe,"STRONG",{});var j6t=s(Y4e);sxr=r(j6t,"bert"),j6t.forEach(t),lxr=r(lIe," \u2014 "),tY=n(lIe,"A",{href:!0});var D6t=s(tY);ixr=r(D6t,"FlaxBertForCausalLM"),D6t.forEach(t),dxr=r(lIe," (BERT model)"),lIe.forEach(t),cxr=i(Xe),ew=n(Xe,"LI",{});var iIe=s(ew);K4e=n(iIe,"STRONG",{});var G6t=s(K4e);mxr=r(G6t,"big_bird"),G6t.forEach(t),fxr=r(iIe," \u2014 "),aY=n(iIe,"A",{href:!0});var O6t=s(aY);gxr=r(O6t,"FlaxBigBirdForCausalLM"),O6t.forEach(t),hxr=r(iIe," (BigBird model)"),iIe.forEach(t),uxr=i(Xe),ow=n(Xe,"LI",{});var dIe=s(ow);Z4e=n(dIe,"STRONG",{});var V6t=s(Z4e);pxr=r(V6t,"electra"),V6t.forEach(t),_xr=r(dIe," \u2014 "),nY=n(dIe,"A",{href:!0});var X6t=s(nY);bxr=r(X6t,"FlaxElectraForCausalLM"),X6t.forEach(t),vxr=r(dIe," (ELECTRA model)"),dIe.forEach(t),Fxr=i(Xe),rw=n(Xe,"LI",{});var cIe=s(rw);eEe=n(cIe,"STRONG",{});var z6t=s(eEe);Txr=r(z6t,"gpt2"),z6t.forEach(t),Mxr=r(cIe," \u2014 "),sY=n(cIe,"A",{href:!0});var W6t=s(sY);Exr=r(W6t,"FlaxGPT2LMHeadModel"),W6t.forEach(t),Cxr=r(cIe," (OpenAI GPT-2 model)"),cIe.forEach(t),wxr=i(Xe),tw=n(Xe,"LI",{});var mIe=s(tw);oEe=n(mIe,"STRONG",{});var Q6t=s(oEe);Axr=r(Q6t,"gpt_neo"),Q6t.forEach(t),yxr=r(mIe," \u2014 "),lY=n(mIe,"A",{href:!0});var H6t=s(lY);Lxr=r(H6t,"FlaxGPTNeoForCausalLM"),H6t.forEach(t),xxr=r(mIe," (GPT Neo model)"),mIe.forEach(t),$xr=i(Xe),aw=n(Xe,"LI",{});var fIe=s(aw);rEe=n(fIe,"STRONG",{});var U6t=s(rEe);kxr=r(U6t,"gptj"),U6t.forEach(t),Sxr=r(fIe," \u2014 "),iY=n(fIe,"A",{href:!0});var J6t=s(iY);Rxr=r(J6t,"FlaxGPTJForCausalLM"),J6t.forEach(t),Pxr=r(fIe," (GPT-J model)"),fIe.forEach(t),Bxr=i(Xe),nw=n(Xe,"LI",{});var gIe=s(nw);tEe=n(gIe,"STRONG",{});var Y6t=s(tEe);Ixr=r(Y6t,"roberta"),Y6t.forEach(t),qxr=r(gIe," \u2014 "),dY=n(gIe,"A",{href:!0});var K6t=s(dY);Nxr=r(K6t,"FlaxRobertaForCausalLM"),K6t.forEach(t),jxr=r(gIe," (RoBERTa model)"),gIe.forEach(t),Dxr=i(Xe),sw=n(Xe,"LI",{});var hIe=s(sw);aEe=n(hIe,"STRONG",{});var Z6t=s(aEe);Gxr=r(Z6t,"xglm"),Z6t.forEach(t),Oxr=r(hIe," \u2014 "),cY=n(hIe,"A",{href:!0});var eyt=s(cY);Vxr=r(eyt,"FlaxXGLMForCausalLM"),eyt.forEach(t),Xxr=r(hIe," (XGLM model)"),hIe.forEach(t),Xe.forEach(t),zxr=i(Xl),T(lw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),uje=i(m),Bc=n(m,"H2",{class:!0});var MGe=s(Bc);iw=n(MGe,"A",{id:!0,class:!0,href:!0});var oyt=s(iw);nEe=n(oyt,"SPAN",{});var ryt=s(nEe);T($9.$$.fragment,ryt),ryt.forEach(t),oyt.forEach(t),Wxr=i(MGe),sEe=n(MGe,"SPAN",{});var tyt=s(sEe);Qxr=r(tyt,"FlaxAutoModelForPreTraining"),tyt.forEach(t),MGe.forEach(t),pje=i(m),gr=n(m,"DIV",{class:!0});var zl=s(gr);T(k9.$$.fragment,zl),Hxr=i(zl),Ic=n(zl,"P",{});var $ee=s(Ic);Uxr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),mY=n($ee,"A",{href:!0});var ayt=s(mY);Jxr=r(ayt,"from_pretrained()"),ayt.forEach(t),Yxr=r($ee," class method or the "),fY=n($ee,"A",{href:!0});var nyt=s(fY);Kxr=r(nyt,"from_config()"),nyt.forEach(t),Zxr=r($ee,` class
method.`),$ee.forEach(t),e$r=i(zl),S9=n(zl,"P",{});var EGe=s(S9);o$r=r(EGe,"This class cannot be instantiated directly using "),lEe=n(EGe,"CODE",{});var syt=s(lEe);r$r=r(syt,"__init__()"),syt.forEach(t),t$r=r(EGe," (throws an error)."),EGe.forEach(t),a$r=i(zl),Vt=n(zl,"DIV",{class:!0});var K6=s(Vt);T(R9.$$.fragment,K6),n$r=i(K6),iEe=n(K6,"P",{});var lyt=s(iEe);s$r=r(lyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lyt.forEach(t),l$r=i(K6),qc=n(K6,"P",{});var kee=s(qc);i$r=r(kee,`Note:
Loading a model from its configuration file does `),dEe=n(kee,"STRONG",{});var iyt=s(dEe);d$r=r(iyt,"not"),iyt.forEach(t),c$r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(kee,"A",{href:!0});var dyt=s(gY);m$r=r(dyt,"from_pretrained()"),dyt.forEach(t),f$r=r(kee," to load the model weights."),kee.forEach(t),g$r=i(K6),T(dw.$$.fragment,K6),K6.forEach(t),h$r=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(P9.$$.fragment,Wl),u$r=i(Wl),cEe=n(Wl,"P",{});var cyt=s(cEe);p$r=r(cyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cyt.forEach(t),_$r=i(Wl),pn=n(Wl,"P",{});var Z6=s(pn);b$r=r(Z6,"The model class to instantiate is selected based on the "),mEe=n(Z6,"CODE",{});var myt=s(mEe);v$r=r(myt,"model_type"),myt.forEach(t),F$r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),fEe=n(Z6,"CODE",{});var fyt=s(fEe);T$r=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),M$r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(Z6,"CODE",{});var gyt=s(gEe);E$r=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),C$r=r(Z6,":"),Z6.forEach(t),w$r=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);cw=n(we,"LI",{});var uIe=s(cw);hEe=n(uIe,"STRONG",{});var hyt=s(hEe);A$r=r(hyt,"albert"),hyt.forEach(t),y$r=r(uIe," \u2014 "),hY=n(uIe,"A",{href:!0});var uyt=s(hY);L$r=r(uyt,"FlaxAlbertForPreTraining"),uyt.forEach(t),x$r=r(uIe," (ALBERT model)"),uIe.forEach(t),$$r=i(we),mw=n(we,"LI",{});var pIe=s(mw);uEe=n(pIe,"STRONG",{});var pyt=s(uEe);k$r=r(pyt,"bart"),pyt.forEach(t),S$r=r(pIe," \u2014 "),uY=n(pIe,"A",{href:!0});var _yt=s(uY);R$r=r(_yt,"FlaxBartForConditionalGeneration"),_yt.forEach(t),P$r=r(pIe," (BART model)"),pIe.forEach(t),B$r=i(we),fw=n(we,"LI",{});var _Ie=s(fw);pEe=n(_Ie,"STRONG",{});var byt=s(pEe);I$r=r(byt,"bert"),byt.forEach(t),q$r=r(_Ie," \u2014 "),pY=n(_Ie,"A",{href:!0});var vyt=s(pY);N$r=r(vyt,"FlaxBertForPreTraining"),vyt.forEach(t),j$r=r(_Ie," (BERT model)"),_Ie.forEach(t),D$r=i(we),gw=n(we,"LI",{});var bIe=s(gw);_Ee=n(bIe,"STRONG",{});var Fyt=s(_Ee);G$r=r(Fyt,"big_bird"),Fyt.forEach(t),O$r=r(bIe," \u2014 "),_Y=n(bIe,"A",{href:!0});var Tyt=s(_Y);V$r=r(Tyt,"FlaxBigBirdForPreTraining"),Tyt.forEach(t),X$r=r(bIe," (BigBird model)"),bIe.forEach(t),z$r=i(we),hw=n(we,"LI",{});var vIe=s(hw);bEe=n(vIe,"STRONG",{});var Myt=s(bEe);W$r=r(Myt,"electra"),Myt.forEach(t),Q$r=r(vIe," \u2014 "),bY=n(vIe,"A",{href:!0});var Eyt=s(bY);H$r=r(Eyt,"FlaxElectraForPreTraining"),Eyt.forEach(t),U$r=r(vIe," (ELECTRA model)"),vIe.forEach(t),J$r=i(we),uw=n(we,"LI",{});var FIe=s(uw);vEe=n(FIe,"STRONG",{});var Cyt=s(vEe);Y$r=r(Cyt,"mbart"),Cyt.forEach(t),K$r=r(FIe," \u2014 "),vY=n(FIe,"A",{href:!0});var wyt=s(vY);Z$r=r(wyt,"FlaxMBartForConditionalGeneration"),wyt.forEach(t),ekr=r(FIe," (mBART model)"),FIe.forEach(t),okr=i(we),pw=n(we,"LI",{});var TIe=s(pw);FEe=n(TIe,"STRONG",{});var Ayt=s(FEe);rkr=r(Ayt,"mt5"),Ayt.forEach(t),tkr=r(TIe," \u2014 "),FY=n(TIe,"A",{href:!0});var yyt=s(FY);akr=r(yyt,"FlaxMT5ForConditionalGeneration"),yyt.forEach(t),nkr=r(TIe," (mT5 model)"),TIe.forEach(t),skr=i(we),_w=n(we,"LI",{});var MIe=s(_w);TEe=n(MIe,"STRONG",{});var Lyt=s(TEe);lkr=r(Lyt,"roberta"),Lyt.forEach(t),ikr=r(MIe," \u2014 "),TY=n(MIe,"A",{href:!0});var xyt=s(TY);dkr=r(xyt,"FlaxRobertaForMaskedLM"),xyt.forEach(t),ckr=r(MIe," (RoBERTa model)"),MIe.forEach(t),mkr=i(we),bw=n(we,"LI",{});var EIe=s(bw);MEe=n(EIe,"STRONG",{});var $yt=s(MEe);fkr=r($yt,"roformer"),$yt.forEach(t),gkr=r(EIe," \u2014 "),MY=n(EIe,"A",{href:!0});var kyt=s(MY);hkr=r(kyt,"FlaxRoFormerForMaskedLM"),kyt.forEach(t),ukr=r(EIe," (RoFormer model)"),EIe.forEach(t),pkr=i(we),vw=n(we,"LI",{});var CIe=s(vw);EEe=n(CIe,"STRONG",{});var Syt=s(EEe);_kr=r(Syt,"t5"),Syt.forEach(t),bkr=r(CIe," \u2014 "),EY=n(CIe,"A",{href:!0});var Ryt=s(EY);vkr=r(Ryt,"FlaxT5ForConditionalGeneration"),Ryt.forEach(t),Fkr=r(CIe," (T5 model)"),CIe.forEach(t),Tkr=i(we),Fw=n(we,"LI",{});var wIe=s(Fw);CEe=n(wIe,"STRONG",{});var Pyt=s(CEe);Mkr=r(Pyt,"wav2vec2"),Pyt.forEach(t),Ekr=r(wIe," \u2014 "),CY=n(wIe,"A",{href:!0});var Byt=s(CY);Ckr=r(Byt,"FlaxWav2Vec2ForPreTraining"),Byt.forEach(t),wkr=r(wIe," (Wav2Vec2 model)"),wIe.forEach(t),Akr=i(we),Tw=n(we,"LI",{});var AIe=s(Tw);wEe=n(AIe,"STRONG",{});var Iyt=s(wEe);ykr=r(Iyt,"xlm-roberta"),Iyt.forEach(t),Lkr=r(AIe," \u2014 "),wY=n(AIe,"A",{href:!0});var qyt=s(wY);xkr=r(qyt,"FlaxXLMRobertaForMaskedLM"),qyt.forEach(t),$kr=r(AIe," (XLM-RoBERTa model)"),AIe.forEach(t),we.forEach(t),kkr=i(Wl),T(Mw.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),_je=i(m),Nc=n(m,"H2",{class:!0});var CGe=s(Nc);Ew=n(CGe,"A",{id:!0,class:!0,href:!0});var Nyt=s(Ew);AEe=n(Nyt,"SPAN",{});var jyt=s(AEe);T(B9.$$.fragment,jyt),jyt.forEach(t),Nyt.forEach(t),Skr=i(CGe),yEe=n(CGe,"SPAN",{});var Dyt=s(yEe);Rkr=r(Dyt,"FlaxAutoModelForMaskedLM"),Dyt.forEach(t),CGe.forEach(t),bje=i(m),hr=n(m,"DIV",{class:!0});var Ql=s(hr);T(I9.$$.fragment,Ql),Pkr=i(Ql),jc=n(Ql,"P",{});var See=s(jc);Bkr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AY=n(See,"A",{href:!0});var Gyt=s(AY);Ikr=r(Gyt,"from_pretrained()"),Gyt.forEach(t),qkr=r(See," class method or the "),yY=n(See,"A",{href:!0});var Oyt=s(yY);Nkr=r(Oyt,"from_config()"),Oyt.forEach(t),jkr=r(See,` class
method.`),See.forEach(t),Dkr=i(Ql),q9=n(Ql,"P",{});var wGe=s(q9);Gkr=r(wGe,"This class cannot be instantiated directly using "),LEe=n(wGe,"CODE",{});var Vyt=s(LEe);Okr=r(Vyt,"__init__()"),Vyt.forEach(t),Vkr=r(wGe," (throws an error)."),wGe.forEach(t),Xkr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var ey=s(Xt);T(N9.$$.fragment,ey),zkr=i(ey),xEe=n(ey,"P",{});var Xyt=s(xEe);Wkr=r(Xyt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Xyt.forEach(t),Qkr=i(ey),Dc=n(ey,"P",{});var Ree=s(Dc);Hkr=r(Ree,`Note:
Loading a model from its configuration file does `),$Ee=n(Ree,"STRONG",{});var zyt=s($Ee);Ukr=r(zyt,"not"),zyt.forEach(t),Jkr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),LY=n(Ree,"A",{href:!0});var Wyt=s(LY);Ykr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),Kkr=r(Ree," to load the model weights."),Ree.forEach(t),Zkr=i(ey),T(Cw.$$.fragment,ey),ey.forEach(t),eSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(j9.$$.fragment,Hl),oSr=i(Hl),kEe=n(Hl,"P",{});var Qyt=s(kEe);rSr=r(Qyt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qyt.forEach(t),tSr=i(Hl),_n=n(Hl,"P",{});var oy=s(_n);aSr=r(oy,"The model class to instantiate is selected based on the "),SEe=n(oy,"CODE",{});var Hyt=s(SEe);nSr=r(Hyt,"model_type"),Hyt.forEach(t),sSr=r(oy,` property of the config object (either
passed as an argument or loaded from `),REe=n(oy,"CODE",{});var Uyt=s(REe);lSr=r(Uyt,"pretrained_model_name_or_path"),Uyt.forEach(t),iSr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(oy,"CODE",{});var Jyt=s(PEe);dSr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),cSr=r(oy,":"),oy.forEach(t),mSr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);ww=n(Ie,"LI",{});var yIe=s(ww);BEe=n(yIe,"STRONG",{});var Yyt=s(BEe);fSr=r(Yyt,"albert"),Yyt.forEach(t),gSr=r(yIe," \u2014 "),xY=n(yIe,"A",{href:!0});var Kyt=s(xY);hSr=r(Kyt,"FlaxAlbertForMaskedLM"),Kyt.forEach(t),uSr=r(yIe," (ALBERT model)"),yIe.forEach(t),pSr=i(Ie),Aw=n(Ie,"LI",{});var LIe=s(Aw);IEe=n(LIe,"STRONG",{});var Zyt=s(IEe);_Sr=r(Zyt,"bart"),Zyt.forEach(t),bSr=r(LIe," \u2014 "),$Y=n(LIe,"A",{href:!0});var eLt=s($Y);vSr=r(eLt,"FlaxBartForConditionalGeneration"),eLt.forEach(t),FSr=r(LIe," (BART model)"),LIe.forEach(t),TSr=i(Ie),yw=n(Ie,"LI",{});var xIe=s(yw);qEe=n(xIe,"STRONG",{});var oLt=s(qEe);MSr=r(oLt,"bert"),oLt.forEach(t),ESr=r(xIe," \u2014 "),kY=n(xIe,"A",{href:!0});var rLt=s(kY);CSr=r(rLt,"FlaxBertForMaskedLM"),rLt.forEach(t),wSr=r(xIe," (BERT model)"),xIe.forEach(t),ASr=i(Ie),Lw=n(Ie,"LI",{});var $Ie=s(Lw);NEe=n($Ie,"STRONG",{});var tLt=s(NEe);ySr=r(tLt,"big_bird"),tLt.forEach(t),LSr=r($Ie," \u2014 "),SY=n($Ie,"A",{href:!0});var aLt=s(SY);xSr=r(aLt,"FlaxBigBirdForMaskedLM"),aLt.forEach(t),$Sr=r($Ie," (BigBird model)"),$Ie.forEach(t),kSr=i(Ie),xw=n(Ie,"LI",{});var kIe=s(xw);jEe=n(kIe,"STRONG",{});var nLt=s(jEe);SSr=r(nLt,"distilbert"),nLt.forEach(t),RSr=r(kIe," \u2014 "),RY=n(kIe,"A",{href:!0});var sLt=s(RY);PSr=r(sLt,"FlaxDistilBertForMaskedLM"),sLt.forEach(t),BSr=r(kIe," (DistilBERT model)"),kIe.forEach(t),ISr=i(Ie),$w=n(Ie,"LI",{});var SIe=s($w);DEe=n(SIe,"STRONG",{});var lLt=s(DEe);qSr=r(lLt,"electra"),lLt.forEach(t),NSr=r(SIe," \u2014 "),PY=n(SIe,"A",{href:!0});var iLt=s(PY);jSr=r(iLt,"FlaxElectraForMaskedLM"),iLt.forEach(t),DSr=r(SIe," (ELECTRA model)"),SIe.forEach(t),GSr=i(Ie),kw=n(Ie,"LI",{});var RIe=s(kw);GEe=n(RIe,"STRONG",{});var dLt=s(GEe);OSr=r(dLt,"mbart"),dLt.forEach(t),VSr=r(RIe," \u2014 "),BY=n(RIe,"A",{href:!0});var cLt=s(BY);XSr=r(cLt,"FlaxMBartForConditionalGeneration"),cLt.forEach(t),zSr=r(RIe," (mBART model)"),RIe.forEach(t),WSr=i(Ie),Sw=n(Ie,"LI",{});var PIe=s(Sw);OEe=n(PIe,"STRONG",{});var mLt=s(OEe);QSr=r(mLt,"roberta"),mLt.forEach(t),HSr=r(PIe," \u2014 "),IY=n(PIe,"A",{href:!0});var fLt=s(IY);USr=r(fLt,"FlaxRobertaForMaskedLM"),fLt.forEach(t),JSr=r(PIe," (RoBERTa model)"),PIe.forEach(t),YSr=i(Ie),Rw=n(Ie,"LI",{});var BIe=s(Rw);VEe=n(BIe,"STRONG",{});var gLt=s(VEe);KSr=r(gLt,"roformer"),gLt.forEach(t),ZSr=r(BIe," \u2014 "),qY=n(BIe,"A",{href:!0});var hLt=s(qY);eRr=r(hLt,"FlaxRoFormerForMaskedLM"),hLt.forEach(t),oRr=r(BIe," (RoFormer model)"),BIe.forEach(t),rRr=i(Ie),Pw=n(Ie,"LI",{});var IIe=s(Pw);XEe=n(IIe,"STRONG",{});var uLt=s(XEe);tRr=r(uLt,"xlm-roberta"),uLt.forEach(t),aRr=r(IIe," \u2014 "),NY=n(IIe,"A",{href:!0});var pLt=s(NY);nRr=r(pLt,"FlaxXLMRobertaForMaskedLM"),pLt.forEach(t),sRr=r(IIe," (XLM-RoBERTa model)"),IIe.forEach(t),Ie.forEach(t),lRr=i(Hl),T(Bw.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),vje=i(m),Gc=n(m,"H2",{class:!0});var AGe=s(Gc);Iw=n(AGe,"A",{id:!0,class:!0,href:!0});var _Lt=s(Iw);zEe=n(_Lt,"SPAN",{});var bLt=s(zEe);T(D9.$$.fragment,bLt),bLt.forEach(t),_Lt.forEach(t),iRr=i(AGe),WEe=n(AGe,"SPAN",{});var vLt=s(WEe);dRr=r(vLt,"FlaxAutoModelForSeq2SeqLM"),vLt.forEach(t),AGe.forEach(t),Fje=i(m),ur=n(m,"DIV",{class:!0});var Ul=s(ur);T(G9.$$.fragment,Ul),cRr=i(Ul),Oc=n(Ul,"P",{});var Pee=s(Oc);mRr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jY=n(Pee,"A",{href:!0});var FLt=s(jY);fRr=r(FLt,"from_pretrained()"),FLt.forEach(t),gRr=r(Pee," class method or the "),DY=n(Pee,"A",{href:!0});var TLt=s(DY);hRr=r(TLt,"from_config()"),TLt.forEach(t),uRr=r(Pee,` class
method.`),Pee.forEach(t),pRr=i(Ul),O9=n(Ul,"P",{});var yGe=s(O9);_Rr=r(yGe,"This class cannot be instantiated directly using "),QEe=n(yGe,"CODE",{});var MLt=s(QEe);bRr=r(MLt,"__init__()"),MLt.forEach(t),vRr=r(yGe," (throws an error)."),yGe.forEach(t),FRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var ry=s(zt);T(V9.$$.fragment,ry),TRr=i(ry),HEe=n(ry,"P",{});var ELt=s(HEe);MRr=r(ELt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ELt.forEach(t),ERr=i(ry),Vc=n(ry,"P",{});var Bee=s(Vc);CRr=r(Bee,`Note:
Loading a model from its configuration file does `),UEe=n(Bee,"STRONG",{});var CLt=s(UEe);wRr=r(CLt,"not"),CLt.forEach(t),ARr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(Bee,"A",{href:!0});var wLt=s(GY);yRr=r(wLt,"from_pretrained()"),wLt.forEach(t),LRr=r(Bee," to load the model weights."),Bee.forEach(t),xRr=i(ry),T(qw.$$.fragment,ry),ry.forEach(t),$Rr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(X9.$$.fragment,Jl),kRr=i(Jl),JEe=n(Jl,"P",{});var ALt=s(JEe);SRr=r(ALt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ALt.forEach(t),RRr=i(Jl),bn=n(Jl,"P",{});var ty=s(bn);PRr=r(ty,"The model class to instantiate is selected based on the "),YEe=n(ty,"CODE",{});var yLt=s(YEe);BRr=r(yLt,"model_type"),yLt.forEach(t),IRr=r(ty,` property of the config object (either
passed as an argument or loaded from `),KEe=n(ty,"CODE",{});var LLt=s(KEe);qRr=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),NRr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZEe=n(ty,"CODE",{});var xLt=s(ZEe);jRr=r(xLt,"pretrained_model_name_or_path"),xLt.forEach(t),DRr=r(ty,":"),ty.forEach(t),GRr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);Nw=n(ze,"LI",{});var qIe=s(Nw);eCe=n(qIe,"STRONG",{});var $Lt=s(eCe);ORr=r($Lt,"bart"),$Lt.forEach(t),VRr=r(qIe," \u2014 "),OY=n(qIe,"A",{href:!0});var kLt=s(OY);XRr=r(kLt,"FlaxBartForConditionalGeneration"),kLt.forEach(t),zRr=r(qIe," (BART model)"),qIe.forEach(t),WRr=i(ze),jw=n(ze,"LI",{});var NIe=s(jw);oCe=n(NIe,"STRONG",{});var SLt=s(oCe);QRr=r(SLt,"blenderbot"),SLt.forEach(t),HRr=r(NIe," \u2014 "),VY=n(NIe,"A",{href:!0});var RLt=s(VY);URr=r(RLt,"FlaxBlenderbotForConditionalGeneration"),RLt.forEach(t),JRr=r(NIe," (Blenderbot model)"),NIe.forEach(t),YRr=i(ze),Dw=n(ze,"LI",{});var jIe=s(Dw);rCe=n(jIe,"STRONG",{});var PLt=s(rCe);KRr=r(PLt,"blenderbot-small"),PLt.forEach(t),ZRr=r(jIe," \u2014 "),XY=n(jIe,"A",{href:!0});var BLt=s(XY);ePr=r(BLt,"FlaxBlenderbotSmallForConditionalGeneration"),BLt.forEach(t),oPr=r(jIe," (BlenderbotSmall model)"),jIe.forEach(t),rPr=i(ze),Gw=n(ze,"LI",{});var DIe=s(Gw);tCe=n(DIe,"STRONG",{});var ILt=s(tCe);tPr=r(ILt,"encoder-decoder"),ILt.forEach(t),aPr=r(DIe," \u2014 "),zY=n(DIe,"A",{href:!0});var qLt=s(zY);nPr=r(qLt,"FlaxEncoderDecoderModel"),qLt.forEach(t),sPr=r(DIe," (Encoder decoder model)"),DIe.forEach(t),lPr=i(ze),Ow=n(ze,"LI",{});var GIe=s(Ow);aCe=n(GIe,"STRONG",{});var NLt=s(aCe);iPr=r(NLt,"marian"),NLt.forEach(t),dPr=r(GIe," \u2014 "),WY=n(GIe,"A",{href:!0});var jLt=s(WY);cPr=r(jLt,"FlaxMarianMTModel"),jLt.forEach(t),mPr=r(GIe," (Marian model)"),GIe.forEach(t),fPr=i(ze),Vw=n(ze,"LI",{});var OIe=s(Vw);nCe=n(OIe,"STRONG",{});var DLt=s(nCe);gPr=r(DLt,"mbart"),DLt.forEach(t),hPr=r(OIe," \u2014 "),QY=n(OIe,"A",{href:!0});var GLt=s(QY);uPr=r(GLt,"FlaxMBartForConditionalGeneration"),GLt.forEach(t),pPr=r(OIe," (mBART model)"),OIe.forEach(t),_Pr=i(ze),Xw=n(ze,"LI",{});var VIe=s(Xw);sCe=n(VIe,"STRONG",{});var OLt=s(sCe);bPr=r(OLt,"mt5"),OLt.forEach(t),vPr=r(VIe," \u2014 "),HY=n(VIe,"A",{href:!0});var VLt=s(HY);FPr=r(VLt,"FlaxMT5ForConditionalGeneration"),VLt.forEach(t),TPr=r(VIe," (mT5 model)"),VIe.forEach(t),MPr=i(ze),zw=n(ze,"LI",{});var XIe=s(zw);lCe=n(XIe,"STRONG",{});var XLt=s(lCe);EPr=r(XLt,"pegasus"),XLt.forEach(t),CPr=r(XIe," \u2014 "),UY=n(XIe,"A",{href:!0});var zLt=s(UY);wPr=r(zLt,"FlaxPegasusForConditionalGeneration"),zLt.forEach(t),APr=r(XIe," (Pegasus model)"),XIe.forEach(t),yPr=i(ze),Ww=n(ze,"LI",{});var zIe=s(Ww);iCe=n(zIe,"STRONG",{});var WLt=s(iCe);LPr=r(WLt,"t5"),WLt.forEach(t),xPr=r(zIe," \u2014 "),JY=n(zIe,"A",{href:!0});var QLt=s(JY);$Pr=r(QLt,"FlaxT5ForConditionalGeneration"),QLt.forEach(t),kPr=r(zIe," (T5 model)"),zIe.forEach(t),ze.forEach(t),SPr=i(Jl),T(Qw.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Tje=i(m),Xc=n(m,"H2",{class:!0});var LGe=s(Xc);Hw=n(LGe,"A",{id:!0,class:!0,href:!0});var HLt=s(Hw);dCe=n(HLt,"SPAN",{});var ULt=s(dCe);T(z9.$$.fragment,ULt),ULt.forEach(t),HLt.forEach(t),RPr=i(LGe),cCe=n(LGe,"SPAN",{});var JLt=s(cCe);PPr=r(JLt,"FlaxAutoModelForSequenceClassification"),JLt.forEach(t),LGe.forEach(t),Mje=i(m),pr=n(m,"DIV",{class:!0});var Yl=s(pr);T(W9.$$.fragment,Yl),BPr=i(Yl),zc=n(Yl,"P",{});var Iee=s(zc);IPr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YY=n(Iee,"A",{href:!0});var YLt=s(YY);qPr=r(YLt,"from_pretrained()"),YLt.forEach(t),NPr=r(Iee," class method or the "),KY=n(Iee,"A",{href:!0});var KLt=s(KY);jPr=r(KLt,"from_config()"),KLt.forEach(t),DPr=r(Iee,` class
method.`),Iee.forEach(t),GPr=i(Yl),Q9=n(Yl,"P",{});var xGe=s(Q9);OPr=r(xGe,"This class cannot be instantiated directly using "),mCe=n(xGe,"CODE",{});var ZLt=s(mCe);VPr=r(ZLt,"__init__()"),ZLt.forEach(t),XPr=r(xGe," (throws an error)."),xGe.forEach(t),zPr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var ay=s(Wt);T(H9.$$.fragment,ay),WPr=i(ay),fCe=n(ay,"P",{});var e8t=s(fCe);QPr=r(e8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e8t.forEach(t),HPr=i(ay),Wc=n(ay,"P",{});var qee=s(Wc);UPr=r(qee,`Note:
Loading a model from its configuration file does `),gCe=n(qee,"STRONG",{});var o8t=s(gCe);JPr=r(o8t,"not"),o8t.forEach(t),YPr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(qee,"A",{href:!0});var r8t=s(ZY);KPr=r(r8t,"from_pretrained()"),r8t.forEach(t),ZPr=r(qee," to load the model weights."),qee.forEach(t),eBr=i(ay),T(Uw.$$.fragment,ay),ay.forEach(t),oBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(U9.$$.fragment,Kl),rBr=i(Kl),hCe=n(Kl,"P",{});var t8t=s(hCe);tBr=r(t8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),t8t.forEach(t),aBr=i(Kl),vn=n(Kl,"P",{});var ny=s(vn);nBr=r(ny,"The model class to instantiate is selected based on the "),uCe=n(ny,"CODE",{});var a8t=s(uCe);sBr=r(a8t,"model_type"),a8t.forEach(t),lBr=r(ny,` property of the config object (either
passed as an argument or loaded from `),pCe=n(ny,"CODE",{});var n8t=s(pCe);iBr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),dBr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Ce=n(ny,"CODE",{});var s8t=s(_Ce);cBr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),mBr=r(ny,":"),ny.forEach(t),fBr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);Jw=n(qe,"LI",{});var WIe=s(Jw);bCe=n(WIe,"STRONG",{});var l8t=s(bCe);gBr=r(l8t,"albert"),l8t.forEach(t),hBr=r(WIe," \u2014 "),eK=n(WIe,"A",{href:!0});var i8t=s(eK);uBr=r(i8t,"FlaxAlbertForSequenceClassification"),i8t.forEach(t),pBr=r(WIe," (ALBERT model)"),WIe.forEach(t),_Br=i(qe),Yw=n(qe,"LI",{});var QIe=s(Yw);vCe=n(QIe,"STRONG",{});var d8t=s(vCe);bBr=r(d8t,"bart"),d8t.forEach(t),vBr=r(QIe," \u2014 "),oK=n(QIe,"A",{href:!0});var c8t=s(oK);FBr=r(c8t,"FlaxBartForSequenceClassification"),c8t.forEach(t),TBr=r(QIe," (BART model)"),QIe.forEach(t),MBr=i(qe),Kw=n(qe,"LI",{});var HIe=s(Kw);FCe=n(HIe,"STRONG",{});var m8t=s(FCe);EBr=r(m8t,"bert"),m8t.forEach(t),CBr=r(HIe," \u2014 "),rK=n(HIe,"A",{href:!0});var f8t=s(rK);wBr=r(f8t,"FlaxBertForSequenceClassification"),f8t.forEach(t),ABr=r(HIe," (BERT model)"),HIe.forEach(t),yBr=i(qe),Zw=n(qe,"LI",{});var UIe=s(Zw);TCe=n(UIe,"STRONG",{});var g8t=s(TCe);LBr=r(g8t,"big_bird"),g8t.forEach(t),xBr=r(UIe," \u2014 "),tK=n(UIe,"A",{href:!0});var h8t=s(tK);$Br=r(h8t,"FlaxBigBirdForSequenceClassification"),h8t.forEach(t),kBr=r(UIe," (BigBird model)"),UIe.forEach(t),SBr=i(qe),e0=n(qe,"LI",{});var JIe=s(e0);MCe=n(JIe,"STRONG",{});var u8t=s(MCe);RBr=r(u8t,"distilbert"),u8t.forEach(t),PBr=r(JIe," \u2014 "),aK=n(JIe,"A",{href:!0});var p8t=s(aK);BBr=r(p8t,"FlaxDistilBertForSequenceClassification"),p8t.forEach(t),IBr=r(JIe," (DistilBERT model)"),JIe.forEach(t),qBr=i(qe),o0=n(qe,"LI",{});var YIe=s(o0);ECe=n(YIe,"STRONG",{});var _8t=s(ECe);NBr=r(_8t,"electra"),_8t.forEach(t),jBr=r(YIe," \u2014 "),nK=n(YIe,"A",{href:!0});var b8t=s(nK);DBr=r(b8t,"FlaxElectraForSequenceClassification"),b8t.forEach(t),GBr=r(YIe," (ELECTRA model)"),YIe.forEach(t),OBr=i(qe),r0=n(qe,"LI",{});var KIe=s(r0);CCe=n(KIe,"STRONG",{});var v8t=s(CCe);VBr=r(v8t,"mbart"),v8t.forEach(t),XBr=r(KIe," \u2014 "),sK=n(KIe,"A",{href:!0});var F8t=s(sK);zBr=r(F8t,"FlaxMBartForSequenceClassification"),F8t.forEach(t),WBr=r(KIe," (mBART model)"),KIe.forEach(t),QBr=i(qe),t0=n(qe,"LI",{});var ZIe=s(t0);wCe=n(ZIe,"STRONG",{});var T8t=s(wCe);HBr=r(T8t,"roberta"),T8t.forEach(t),UBr=r(ZIe," \u2014 "),lK=n(ZIe,"A",{href:!0});var M8t=s(lK);JBr=r(M8t,"FlaxRobertaForSequenceClassification"),M8t.forEach(t),YBr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),KBr=i(qe),a0=n(qe,"LI",{});var eqe=s(a0);ACe=n(eqe,"STRONG",{});var E8t=s(ACe);ZBr=r(E8t,"roformer"),E8t.forEach(t),eIr=r(eqe," \u2014 "),iK=n(eqe,"A",{href:!0});var C8t=s(iK);oIr=r(C8t,"FlaxRoFormerForSequenceClassification"),C8t.forEach(t),rIr=r(eqe," (RoFormer model)"),eqe.forEach(t),tIr=i(qe),n0=n(qe,"LI",{});var oqe=s(n0);yCe=n(oqe,"STRONG",{});var w8t=s(yCe);aIr=r(w8t,"xlm-roberta"),w8t.forEach(t),nIr=r(oqe," \u2014 "),dK=n(oqe,"A",{href:!0});var A8t=s(dK);sIr=r(A8t,"FlaxXLMRobertaForSequenceClassification"),A8t.forEach(t),lIr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),qe.forEach(t),iIr=i(Kl),T(s0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Eje=i(m),Qc=n(m,"H2",{class:!0});var $Ge=s(Qc);l0=n($Ge,"A",{id:!0,class:!0,href:!0});var y8t=s(l0);LCe=n(y8t,"SPAN",{});var L8t=s(LCe);T(J9.$$.fragment,L8t),L8t.forEach(t),y8t.forEach(t),dIr=i($Ge),xCe=n($Ge,"SPAN",{});var x8t=s(xCe);cIr=r(x8t,"FlaxAutoModelForQuestionAnswering"),x8t.forEach(t),$Ge.forEach(t),Cje=i(m),_r=n(m,"DIV",{class:!0});var Zl=s(_r);T(Y9.$$.fragment,Zl),mIr=i(Zl),Hc=n(Zl,"P",{});var Nee=s(Hc);fIr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cK=n(Nee,"A",{href:!0});var $8t=s(cK);gIr=r($8t,"from_pretrained()"),$8t.forEach(t),hIr=r(Nee," class method or the "),mK=n(Nee,"A",{href:!0});var k8t=s(mK);uIr=r(k8t,"from_config()"),k8t.forEach(t),pIr=r(Nee,` class
method.`),Nee.forEach(t),_Ir=i(Zl),K9=n(Zl,"P",{});var kGe=s(K9);bIr=r(kGe,"This class cannot be instantiated directly using "),$Ce=n(kGe,"CODE",{});var S8t=s($Ce);vIr=r(S8t,"__init__()"),S8t.forEach(t),FIr=r(kGe," (throws an error)."),kGe.forEach(t),TIr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var sy=s(Qt);T(Z9.$$.fragment,sy),MIr=i(sy),kCe=n(sy,"P",{});var R8t=s(kCe);EIr=r(R8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R8t.forEach(t),CIr=i(sy),Uc=n(sy,"P",{});var jee=s(Uc);wIr=r(jee,`Note:
Loading a model from its configuration file does `),SCe=n(jee,"STRONG",{});var P8t=s(SCe);AIr=r(P8t,"not"),P8t.forEach(t),yIr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fK=n(jee,"A",{href:!0});var B8t=s(fK);LIr=r(B8t,"from_pretrained()"),B8t.forEach(t),xIr=r(jee," to load the model weights."),jee.forEach(t),$Ir=i(sy),T(i0.$$.fragment,sy),sy.forEach(t),kIr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(ex.$$.fragment,ei),SIr=i(ei),RCe=n(ei,"P",{});var I8t=s(RCe);RIr=r(I8t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I8t.forEach(t),PIr=i(ei),Fn=n(ei,"P",{});var ly=s(Fn);BIr=r(ly,"The model class to instantiate is selected based on the "),PCe=n(ly,"CODE",{});var q8t=s(PCe);IIr=r(q8t,"model_type"),q8t.forEach(t),qIr=r(ly,` property of the config object (either
passed as an argument or loaded from `),BCe=n(ly,"CODE",{});var N8t=s(BCe);NIr=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),jIr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ICe=n(ly,"CODE",{});var j8t=s(ICe);DIr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),GIr=r(ly,":"),ly.forEach(t),OIr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);d0=n(Ne,"LI",{});var rqe=s(d0);qCe=n(rqe,"STRONG",{});var D8t=s(qCe);VIr=r(D8t,"albert"),D8t.forEach(t),XIr=r(rqe," \u2014 "),gK=n(rqe,"A",{href:!0});var G8t=s(gK);zIr=r(G8t,"FlaxAlbertForQuestionAnswering"),G8t.forEach(t),WIr=r(rqe," (ALBERT model)"),rqe.forEach(t),QIr=i(Ne),c0=n(Ne,"LI",{});var tqe=s(c0);NCe=n(tqe,"STRONG",{});var O8t=s(NCe);HIr=r(O8t,"bart"),O8t.forEach(t),UIr=r(tqe," \u2014 "),hK=n(tqe,"A",{href:!0});var V8t=s(hK);JIr=r(V8t,"FlaxBartForQuestionAnswering"),V8t.forEach(t),YIr=r(tqe," (BART model)"),tqe.forEach(t),KIr=i(Ne),m0=n(Ne,"LI",{});var aqe=s(m0);jCe=n(aqe,"STRONG",{});var X8t=s(jCe);ZIr=r(X8t,"bert"),X8t.forEach(t),eqr=r(aqe," \u2014 "),uK=n(aqe,"A",{href:!0});var z8t=s(uK);oqr=r(z8t,"FlaxBertForQuestionAnswering"),z8t.forEach(t),rqr=r(aqe," (BERT model)"),aqe.forEach(t),tqr=i(Ne),f0=n(Ne,"LI",{});var nqe=s(f0);DCe=n(nqe,"STRONG",{});var W8t=s(DCe);aqr=r(W8t,"big_bird"),W8t.forEach(t),nqr=r(nqe," \u2014 "),pK=n(nqe,"A",{href:!0});var Q8t=s(pK);sqr=r(Q8t,"FlaxBigBirdForQuestionAnswering"),Q8t.forEach(t),lqr=r(nqe," (BigBird model)"),nqe.forEach(t),iqr=i(Ne),g0=n(Ne,"LI",{});var sqe=s(g0);GCe=n(sqe,"STRONG",{});var H8t=s(GCe);dqr=r(H8t,"distilbert"),H8t.forEach(t),cqr=r(sqe," \u2014 "),_K=n(sqe,"A",{href:!0});var U8t=s(_K);mqr=r(U8t,"FlaxDistilBertForQuestionAnswering"),U8t.forEach(t),fqr=r(sqe," (DistilBERT model)"),sqe.forEach(t),gqr=i(Ne),h0=n(Ne,"LI",{});var lqe=s(h0);OCe=n(lqe,"STRONG",{});var J8t=s(OCe);hqr=r(J8t,"electra"),J8t.forEach(t),uqr=r(lqe," \u2014 "),bK=n(lqe,"A",{href:!0});var Y8t=s(bK);pqr=r(Y8t,"FlaxElectraForQuestionAnswering"),Y8t.forEach(t),_qr=r(lqe," (ELECTRA model)"),lqe.forEach(t),bqr=i(Ne),u0=n(Ne,"LI",{});var iqe=s(u0);VCe=n(iqe,"STRONG",{});var K8t=s(VCe);vqr=r(K8t,"mbart"),K8t.forEach(t),Fqr=r(iqe," \u2014 "),vK=n(iqe,"A",{href:!0});var Z8t=s(vK);Tqr=r(Z8t,"FlaxMBartForQuestionAnswering"),Z8t.forEach(t),Mqr=r(iqe," (mBART model)"),iqe.forEach(t),Eqr=i(Ne),p0=n(Ne,"LI",{});var dqe=s(p0);XCe=n(dqe,"STRONG",{});var e7t=s(XCe);Cqr=r(e7t,"roberta"),e7t.forEach(t),wqr=r(dqe," \u2014 "),FK=n(dqe,"A",{href:!0});var o7t=s(FK);Aqr=r(o7t,"FlaxRobertaForQuestionAnswering"),o7t.forEach(t),yqr=r(dqe," (RoBERTa model)"),dqe.forEach(t),Lqr=i(Ne),_0=n(Ne,"LI",{});var cqe=s(_0);zCe=n(cqe,"STRONG",{});var r7t=s(zCe);xqr=r(r7t,"roformer"),r7t.forEach(t),$qr=r(cqe," \u2014 "),TK=n(cqe,"A",{href:!0});var t7t=s(TK);kqr=r(t7t,"FlaxRoFormerForQuestionAnswering"),t7t.forEach(t),Sqr=r(cqe," (RoFormer model)"),cqe.forEach(t),Rqr=i(Ne),b0=n(Ne,"LI",{});var mqe=s(b0);WCe=n(mqe,"STRONG",{});var a7t=s(WCe);Pqr=r(a7t,"xlm-roberta"),a7t.forEach(t),Bqr=r(mqe," \u2014 "),MK=n(mqe,"A",{href:!0});var n7t=s(MK);Iqr=r(n7t,"FlaxXLMRobertaForQuestionAnswering"),n7t.forEach(t),qqr=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),Ne.forEach(t),Nqr=i(ei),T(v0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),wje=i(m),Jc=n(m,"H2",{class:!0});var SGe=s(Jc);F0=n(SGe,"A",{id:!0,class:!0,href:!0});var s7t=s(F0);QCe=n(s7t,"SPAN",{});var l7t=s(QCe);T(ox.$$.fragment,l7t),l7t.forEach(t),s7t.forEach(t),jqr=i(SGe),HCe=n(SGe,"SPAN",{});var i7t=s(HCe);Dqr=r(i7t,"FlaxAutoModelForTokenClassification"),i7t.forEach(t),SGe.forEach(t),Aje=i(m),br=n(m,"DIV",{class:!0});var oi=s(br);T(rx.$$.fragment,oi),Gqr=i(oi),Yc=n(oi,"P",{});var Dee=s(Yc);Oqr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),EK=n(Dee,"A",{href:!0});var d7t=s(EK);Vqr=r(d7t,"from_pretrained()"),d7t.forEach(t),Xqr=r(Dee," class method or the "),CK=n(Dee,"A",{href:!0});var c7t=s(CK);zqr=r(c7t,"from_config()"),c7t.forEach(t),Wqr=r(Dee,` class
method.`),Dee.forEach(t),Qqr=i(oi),tx=n(oi,"P",{});var RGe=s(tx);Hqr=r(RGe,"This class cannot be instantiated directly using "),UCe=n(RGe,"CODE",{});var m7t=s(UCe);Uqr=r(m7t,"__init__()"),m7t.forEach(t),Jqr=r(RGe," (throws an error)."),RGe.forEach(t),Yqr=i(oi),Ht=n(oi,"DIV",{class:!0});var iy=s(Ht);T(ax.$$.fragment,iy),Kqr=i(iy),JCe=n(iy,"P",{});var f7t=s(JCe);Zqr=r(f7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),f7t.forEach(t),eNr=i(iy),Kc=n(iy,"P",{});var Gee=s(Kc);oNr=r(Gee,`Note:
Loading a model from its configuration file does `),YCe=n(Gee,"STRONG",{});var g7t=s(YCe);rNr=r(g7t,"not"),g7t.forEach(t),tNr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Gee,"A",{href:!0});var h7t=s(wK);aNr=r(h7t,"from_pretrained()"),h7t.forEach(t),nNr=r(Gee," to load the model weights."),Gee.forEach(t),sNr=i(iy),T(T0.$$.fragment,iy),iy.forEach(t),lNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(nx.$$.fragment,ri),iNr=i(ri),KCe=n(ri,"P",{});var u7t=s(KCe);dNr=r(u7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u7t.forEach(t),cNr=i(ri),Tn=n(ri,"P",{});var dy=s(Tn);mNr=r(dy,"The model class to instantiate is selected based on the "),ZCe=n(dy,"CODE",{});var p7t=s(ZCe);fNr=r(p7t,"model_type"),p7t.forEach(t),gNr=r(dy,` property of the config object (either
passed as an argument or loaded from `),e5e=n(dy,"CODE",{});var _7t=s(e5e);hNr=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),uNr=r(dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=n(dy,"CODE",{});var b7t=s(o5e);pNr=r(b7t,"pretrained_model_name_or_path"),b7t.forEach(t),_Nr=r(dy,":"),dy.forEach(t),bNr=i(ri),De=n(ri,"UL",{});var Fo=s(De);M0=n(Fo,"LI",{});var fqe=s(M0);r5e=n(fqe,"STRONG",{});var v7t=s(r5e);vNr=r(v7t,"albert"),v7t.forEach(t),FNr=r(fqe," \u2014 "),AK=n(fqe,"A",{href:!0});var F7t=s(AK);TNr=r(F7t,"FlaxAlbertForTokenClassification"),F7t.forEach(t),MNr=r(fqe," (ALBERT model)"),fqe.forEach(t),ENr=i(Fo),E0=n(Fo,"LI",{});var gqe=s(E0);t5e=n(gqe,"STRONG",{});var T7t=s(t5e);CNr=r(T7t,"bert"),T7t.forEach(t),wNr=r(gqe," \u2014 "),yK=n(gqe,"A",{href:!0});var M7t=s(yK);ANr=r(M7t,"FlaxBertForTokenClassification"),M7t.forEach(t),yNr=r(gqe," (BERT model)"),gqe.forEach(t),LNr=i(Fo),C0=n(Fo,"LI",{});var hqe=s(C0);a5e=n(hqe,"STRONG",{});var E7t=s(a5e);xNr=r(E7t,"big_bird"),E7t.forEach(t),$Nr=r(hqe," \u2014 "),LK=n(hqe,"A",{href:!0});var C7t=s(LK);kNr=r(C7t,"FlaxBigBirdForTokenClassification"),C7t.forEach(t),SNr=r(hqe," (BigBird model)"),hqe.forEach(t),RNr=i(Fo),w0=n(Fo,"LI",{});var uqe=s(w0);n5e=n(uqe,"STRONG",{});var w7t=s(n5e);PNr=r(w7t,"distilbert"),w7t.forEach(t),BNr=r(uqe," \u2014 "),xK=n(uqe,"A",{href:!0});var A7t=s(xK);INr=r(A7t,"FlaxDistilBertForTokenClassification"),A7t.forEach(t),qNr=r(uqe," (DistilBERT model)"),uqe.forEach(t),NNr=i(Fo),A0=n(Fo,"LI",{});var pqe=s(A0);s5e=n(pqe,"STRONG",{});var y7t=s(s5e);jNr=r(y7t,"electra"),y7t.forEach(t),DNr=r(pqe," \u2014 "),$K=n(pqe,"A",{href:!0});var L7t=s($K);GNr=r(L7t,"FlaxElectraForTokenClassification"),L7t.forEach(t),ONr=r(pqe," (ELECTRA model)"),pqe.forEach(t),VNr=i(Fo),y0=n(Fo,"LI",{});var _qe=s(y0);l5e=n(_qe,"STRONG",{});var x7t=s(l5e);XNr=r(x7t,"roberta"),x7t.forEach(t),zNr=r(_qe," \u2014 "),kK=n(_qe,"A",{href:!0});var $7t=s(kK);WNr=r($7t,"FlaxRobertaForTokenClassification"),$7t.forEach(t),QNr=r(_qe," (RoBERTa model)"),_qe.forEach(t),HNr=i(Fo),L0=n(Fo,"LI",{});var bqe=s(L0);i5e=n(bqe,"STRONG",{});var k7t=s(i5e);UNr=r(k7t,"roformer"),k7t.forEach(t),JNr=r(bqe," \u2014 "),SK=n(bqe,"A",{href:!0});var S7t=s(SK);YNr=r(S7t,"FlaxRoFormerForTokenClassification"),S7t.forEach(t),KNr=r(bqe," (RoFormer model)"),bqe.forEach(t),ZNr=i(Fo),x0=n(Fo,"LI",{});var vqe=s(x0);d5e=n(vqe,"STRONG",{});var R7t=s(d5e);ejr=r(R7t,"xlm-roberta"),R7t.forEach(t),ojr=r(vqe," \u2014 "),RK=n(vqe,"A",{href:!0});var P7t=s(RK);rjr=r(P7t,"FlaxXLMRobertaForTokenClassification"),P7t.forEach(t),tjr=r(vqe," (XLM-RoBERTa model)"),vqe.forEach(t),Fo.forEach(t),ajr=i(ri),T($0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),yje=i(m),Zc=n(m,"H2",{class:!0});var PGe=s(Zc);k0=n(PGe,"A",{id:!0,class:!0,href:!0});var B7t=s(k0);c5e=n(B7t,"SPAN",{});var I7t=s(c5e);T(sx.$$.fragment,I7t),I7t.forEach(t),B7t.forEach(t),njr=i(PGe),m5e=n(PGe,"SPAN",{});var q7t=s(m5e);sjr=r(q7t,"FlaxAutoModelForMultipleChoice"),q7t.forEach(t),PGe.forEach(t),Lje=i(m),vr=n(m,"DIV",{class:!0});var ti=s(vr);T(lx.$$.fragment,ti),ljr=i(ti),em=n(ti,"P",{});var Oee=s(em);ijr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),PK=n(Oee,"A",{href:!0});var N7t=s(PK);djr=r(N7t,"from_pretrained()"),N7t.forEach(t),cjr=r(Oee," class method or the "),BK=n(Oee,"A",{href:!0});var j7t=s(BK);mjr=r(j7t,"from_config()"),j7t.forEach(t),fjr=r(Oee,` class
method.`),Oee.forEach(t),gjr=i(ti),ix=n(ti,"P",{});var BGe=s(ix);hjr=r(BGe,"This class cannot be instantiated directly using "),f5e=n(BGe,"CODE",{});var D7t=s(f5e);ujr=r(D7t,"__init__()"),D7t.forEach(t),pjr=r(BGe," (throws an error)."),BGe.forEach(t),_jr=i(ti),Ut=n(ti,"DIV",{class:!0});var cy=s(Ut);T(dx.$$.fragment,cy),bjr=i(cy),g5e=n(cy,"P",{});var G7t=s(g5e);vjr=r(G7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),G7t.forEach(t),Fjr=i(cy),om=n(cy,"P",{});var Vee=s(om);Tjr=r(Vee,`Note:
Loading a model from its configuration file does `),h5e=n(Vee,"STRONG",{});var O7t=s(h5e);Mjr=r(O7t,"not"),O7t.forEach(t),Ejr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IK=n(Vee,"A",{href:!0});var V7t=s(IK);Cjr=r(V7t,"from_pretrained()"),V7t.forEach(t),wjr=r(Vee," to load the model weights."),Vee.forEach(t),Ajr=i(cy),T(S0.$$.fragment,cy),cy.forEach(t),yjr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(cx.$$.fragment,ai),Ljr=i(ai),u5e=n(ai,"P",{});var X7t=s(u5e);xjr=r(X7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X7t.forEach(t),$jr=i(ai),Mn=n(ai,"P",{});var my=s(Mn);kjr=r(my,"The model class to instantiate is selected based on the "),p5e=n(my,"CODE",{});var z7t=s(p5e);Sjr=r(z7t,"model_type"),z7t.forEach(t),Rjr=r(my,` property of the config object (either
passed as an argument or loaded from `),_5e=n(my,"CODE",{});var W7t=s(_5e);Pjr=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),Bjr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(my,"CODE",{});var Q7t=s(b5e);Ijr=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),qjr=r(my,":"),my.forEach(t),Njr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);R0=n(To,"LI",{});var Fqe=s(R0);v5e=n(Fqe,"STRONG",{});var H7t=s(v5e);jjr=r(H7t,"albert"),H7t.forEach(t),Djr=r(Fqe," \u2014 "),qK=n(Fqe,"A",{href:!0});var U7t=s(qK);Gjr=r(U7t,"FlaxAlbertForMultipleChoice"),U7t.forEach(t),Ojr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),Vjr=i(To),P0=n(To,"LI",{});var Tqe=s(P0);F5e=n(Tqe,"STRONG",{});var J7t=s(F5e);Xjr=r(J7t,"bert"),J7t.forEach(t),zjr=r(Tqe," \u2014 "),NK=n(Tqe,"A",{href:!0});var Y7t=s(NK);Wjr=r(Y7t,"FlaxBertForMultipleChoice"),Y7t.forEach(t),Qjr=r(Tqe," (BERT model)"),Tqe.forEach(t),Hjr=i(To),B0=n(To,"LI",{});var Mqe=s(B0);T5e=n(Mqe,"STRONG",{});var K7t=s(T5e);Ujr=r(K7t,"big_bird"),K7t.forEach(t),Jjr=r(Mqe," \u2014 "),jK=n(Mqe,"A",{href:!0});var Z7t=s(jK);Yjr=r(Z7t,"FlaxBigBirdForMultipleChoice"),Z7t.forEach(t),Kjr=r(Mqe," (BigBird model)"),Mqe.forEach(t),Zjr=i(To),I0=n(To,"LI",{});var Eqe=s(I0);M5e=n(Eqe,"STRONG",{});var e9t=s(M5e);eDr=r(e9t,"distilbert"),e9t.forEach(t),oDr=r(Eqe," \u2014 "),DK=n(Eqe,"A",{href:!0});var o9t=s(DK);rDr=r(o9t,"FlaxDistilBertForMultipleChoice"),o9t.forEach(t),tDr=r(Eqe," (DistilBERT model)"),Eqe.forEach(t),aDr=i(To),q0=n(To,"LI",{});var Cqe=s(q0);E5e=n(Cqe,"STRONG",{});var r9t=s(E5e);nDr=r(r9t,"electra"),r9t.forEach(t),sDr=r(Cqe," \u2014 "),GK=n(Cqe,"A",{href:!0});var t9t=s(GK);lDr=r(t9t,"FlaxElectraForMultipleChoice"),t9t.forEach(t),iDr=r(Cqe," (ELECTRA model)"),Cqe.forEach(t),dDr=i(To),N0=n(To,"LI",{});var wqe=s(N0);C5e=n(wqe,"STRONG",{});var a9t=s(C5e);cDr=r(a9t,"roberta"),a9t.forEach(t),mDr=r(wqe," \u2014 "),OK=n(wqe,"A",{href:!0});var n9t=s(OK);fDr=r(n9t,"FlaxRobertaForMultipleChoice"),n9t.forEach(t),gDr=r(wqe," (RoBERTa model)"),wqe.forEach(t),hDr=i(To),j0=n(To,"LI",{});var Aqe=s(j0);w5e=n(Aqe,"STRONG",{});var s9t=s(w5e);uDr=r(s9t,"roformer"),s9t.forEach(t),pDr=r(Aqe," \u2014 "),VK=n(Aqe,"A",{href:!0});var l9t=s(VK);_Dr=r(l9t,"FlaxRoFormerForMultipleChoice"),l9t.forEach(t),bDr=r(Aqe," (RoFormer model)"),Aqe.forEach(t),vDr=i(To),D0=n(To,"LI",{});var yqe=s(D0);A5e=n(yqe,"STRONG",{});var i9t=s(A5e);FDr=r(i9t,"xlm-roberta"),i9t.forEach(t),TDr=r(yqe," \u2014 "),XK=n(yqe,"A",{href:!0});var d9t=s(XK);MDr=r(d9t,"FlaxXLMRobertaForMultipleChoice"),d9t.forEach(t),EDr=r(yqe," (XLM-RoBERTa model)"),yqe.forEach(t),To.forEach(t),CDr=i(ai),T(G0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),xje=i(m),rm=n(m,"H2",{class:!0});var IGe=s(rm);O0=n(IGe,"A",{id:!0,class:!0,href:!0});var c9t=s(O0);y5e=n(c9t,"SPAN",{});var m9t=s(y5e);T(mx.$$.fragment,m9t),m9t.forEach(t),c9t.forEach(t),wDr=i(IGe),L5e=n(IGe,"SPAN",{});var f9t=s(L5e);ADr=r(f9t,"FlaxAutoModelForNextSentencePrediction"),f9t.forEach(t),IGe.forEach(t),$je=i(m),Fr=n(m,"DIV",{class:!0});var ni=s(Fr);T(fx.$$.fragment,ni),yDr=i(ni),tm=n(ni,"P",{});var Xee=s(tm);LDr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),zK=n(Xee,"A",{href:!0});var g9t=s(zK);xDr=r(g9t,"from_pretrained()"),g9t.forEach(t),$Dr=r(Xee," class method or the "),WK=n(Xee,"A",{href:!0});var h9t=s(WK);kDr=r(h9t,"from_config()"),h9t.forEach(t),SDr=r(Xee,` class
method.`),Xee.forEach(t),RDr=i(ni),gx=n(ni,"P",{});var qGe=s(gx);PDr=r(qGe,"This class cannot be instantiated directly using "),x5e=n(qGe,"CODE",{});var u9t=s(x5e);BDr=r(u9t,"__init__()"),u9t.forEach(t),IDr=r(qGe," (throws an error)."),qGe.forEach(t),qDr=i(ni),Jt=n(ni,"DIV",{class:!0});var fy=s(Jt);T(hx.$$.fragment,fy),NDr=i(fy),$5e=n(fy,"P",{});var p9t=s($5e);jDr=r(p9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p9t.forEach(t),DDr=i(fy),am=n(fy,"P",{});var zee=s(am);GDr=r(zee,`Note:
Loading a model from its configuration file does `),k5e=n(zee,"STRONG",{});var _9t=s(k5e);ODr=r(_9t,"not"),_9t.forEach(t),VDr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(zee,"A",{href:!0});var b9t=s(QK);XDr=r(b9t,"from_pretrained()"),b9t.forEach(t),zDr=r(zee," to load the model weights."),zee.forEach(t),WDr=i(fy),T(V0.$$.fragment,fy),fy.forEach(t),QDr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(ux.$$.fragment,si),HDr=i(si),S5e=n(si,"P",{});var v9t=s(S5e);UDr=r(v9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v9t.forEach(t),JDr=i(si),En=n(si,"P",{});var gy=s(En);YDr=r(gy,"The model class to instantiate is selected based on the "),R5e=n(gy,"CODE",{});var F9t=s(R5e);KDr=r(F9t,"model_type"),F9t.forEach(t),ZDr=r(gy,` property of the config object (either
passed as an argument or loaded from `),P5e=n(gy,"CODE",{});var T9t=s(P5e);eGr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),oGr=r(gy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(gy,"CODE",{});var M9t=s(B5e);rGr=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),tGr=r(gy,":"),gy.forEach(t),aGr=i(si),I5e=n(si,"UL",{});var E9t=s(I5e);X0=n(E9t,"LI",{});var Lqe=s(X0);q5e=n(Lqe,"STRONG",{});var C9t=s(q5e);nGr=r(C9t,"bert"),C9t.forEach(t),sGr=r(Lqe," \u2014 "),HK=n(Lqe,"A",{href:!0});var w9t=s(HK);lGr=r(w9t,"FlaxBertForNextSentencePrediction"),w9t.forEach(t),iGr=r(Lqe," (BERT model)"),Lqe.forEach(t),E9t.forEach(t),dGr=i(si),T(z0.$$.fragment,si),si.forEach(t),ni.forEach(t),kje=i(m),nm=n(m,"H2",{class:!0});var NGe=s(nm);W0=n(NGe,"A",{id:!0,class:!0,href:!0});var A9t=s(W0);N5e=n(A9t,"SPAN",{});var y9t=s(N5e);T(px.$$.fragment,y9t),y9t.forEach(t),A9t.forEach(t),cGr=i(NGe),j5e=n(NGe,"SPAN",{});var L9t=s(j5e);mGr=r(L9t,"FlaxAutoModelForImageClassification"),L9t.forEach(t),NGe.forEach(t),Sje=i(m),Tr=n(m,"DIV",{class:!0});var li=s(Tr);T(_x.$$.fragment,li),fGr=i(li),sm=n(li,"P",{});var Wee=s(sm);gGr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UK=n(Wee,"A",{href:!0});var x9t=s(UK);hGr=r(x9t,"from_pretrained()"),x9t.forEach(t),uGr=r(Wee," class method or the "),JK=n(Wee,"A",{href:!0});var $9t=s(JK);pGr=r($9t,"from_config()"),$9t.forEach(t),_Gr=r(Wee,` class
method.`),Wee.forEach(t),bGr=i(li),bx=n(li,"P",{});var jGe=s(bx);vGr=r(jGe,"This class cannot be instantiated directly using "),D5e=n(jGe,"CODE",{});var k9t=s(D5e);FGr=r(k9t,"__init__()"),k9t.forEach(t),TGr=r(jGe," (throws an error)."),jGe.forEach(t),MGr=i(li),Yt=n(li,"DIV",{class:!0});var hy=s(Yt);T(vx.$$.fragment,hy),EGr=i(hy),G5e=n(hy,"P",{});var S9t=s(G5e);CGr=r(S9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S9t.forEach(t),wGr=i(hy),lm=n(hy,"P",{});var Qee=s(lm);AGr=r(Qee,`Note:
Loading a model from its configuration file does `),O5e=n(Qee,"STRONG",{});var R9t=s(O5e);yGr=r(R9t,"not"),R9t.forEach(t),LGr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YK=n(Qee,"A",{href:!0});var P9t=s(YK);xGr=r(P9t,"from_pretrained()"),P9t.forEach(t),$Gr=r(Qee," to load the model weights."),Qee.forEach(t),kGr=i(hy),T(Q0.$$.fragment,hy),hy.forEach(t),SGr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(Fx.$$.fragment,ii),RGr=i(ii),V5e=n(ii,"P",{});var B9t=s(V5e);PGr=r(B9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B9t.forEach(t),BGr=i(ii),Cn=n(ii,"P",{});var uy=s(Cn);IGr=r(uy,"The model class to instantiate is selected based on the "),X5e=n(uy,"CODE",{});var I9t=s(X5e);qGr=r(I9t,"model_type"),I9t.forEach(t),NGr=r(uy,` property of the config object (either
passed as an argument or loaded from `),z5e=n(uy,"CODE",{});var q9t=s(z5e);jGr=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),DGr=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(uy,"CODE",{});var N9t=s(W5e);GGr=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),OGr=r(uy,":"),uy.forEach(t),VGr=i(ii),Tx=n(ii,"UL",{});var DGe=s(Tx);H0=n(DGe,"LI",{});var xqe=s(H0);Q5e=n(xqe,"STRONG",{});var j9t=s(Q5e);XGr=r(j9t,"beit"),j9t.forEach(t),zGr=r(xqe," \u2014 "),KK=n(xqe,"A",{href:!0});var D9t=s(KK);WGr=r(D9t,"FlaxBeitForImageClassification"),D9t.forEach(t),QGr=r(xqe," (BEiT model)"),xqe.forEach(t),HGr=i(DGe),U0=n(DGe,"LI",{});var $qe=s(U0);H5e=n($qe,"STRONG",{});var G9t=s(H5e);UGr=r(G9t,"vit"),G9t.forEach(t),JGr=r($qe," \u2014 "),ZK=n($qe,"A",{href:!0});var O9t=s(ZK);YGr=r(O9t,"FlaxViTForImageClassification"),O9t.forEach(t),KGr=r($qe," (ViT model)"),$qe.forEach(t),DGe.forEach(t),ZGr=i(ii),T(J0.$$.fragment,ii),ii.forEach(t),li.forEach(t),Rje=i(m),im=n(m,"H2",{class:!0});var GGe=s(im);Y0=n(GGe,"A",{id:!0,class:!0,href:!0});var V9t=s(Y0);U5e=n(V9t,"SPAN",{});var X9t=s(U5e);T(Mx.$$.fragment,X9t),X9t.forEach(t),V9t.forEach(t),eOr=i(GGe),J5e=n(GGe,"SPAN",{});var z9t=s(J5e);oOr=r(z9t,"FlaxAutoModelForVision2Seq"),z9t.forEach(t),GGe.forEach(t),Pje=i(m),Mr=n(m,"DIV",{class:!0});var di=s(Mr);T(Ex.$$.fragment,di),rOr=i(di),dm=n(di,"P",{});var Hee=s(dm);tOr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eZ=n(Hee,"A",{href:!0});var W9t=s(eZ);aOr=r(W9t,"from_pretrained()"),W9t.forEach(t),nOr=r(Hee," class method or the "),oZ=n(Hee,"A",{href:!0});var Q9t=s(oZ);sOr=r(Q9t,"from_config()"),Q9t.forEach(t),lOr=r(Hee,` class
method.`),Hee.forEach(t),iOr=i(di),Cx=n(di,"P",{});var OGe=s(Cx);dOr=r(OGe,"This class cannot be instantiated directly using "),Y5e=n(OGe,"CODE",{});var H9t=s(Y5e);cOr=r(H9t,"__init__()"),H9t.forEach(t),mOr=r(OGe," (throws an error)."),OGe.forEach(t),fOr=i(di),Kt=n(di,"DIV",{class:!0});var py=s(Kt);T(wx.$$.fragment,py),gOr=i(py),K5e=n(py,"P",{});var U9t=s(K5e);hOr=r(U9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U9t.forEach(t),uOr=i(py),cm=n(py,"P",{});var Uee=s(cm);pOr=r(Uee,`Note:
Loading a model from its configuration file does `),Z5e=n(Uee,"STRONG",{});var J9t=s(Z5e);_Or=r(J9t,"not"),J9t.forEach(t),bOr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(Uee,"A",{href:!0});var Y9t=s(rZ);vOr=r(Y9t,"from_pretrained()"),Y9t.forEach(t),FOr=r(Uee," to load the model weights."),Uee.forEach(t),TOr=i(py),T(K0.$$.fragment,py),py.forEach(t),MOr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ax.$$.fragment,ci),EOr=i(ci),e3e=n(ci,"P",{});var K9t=s(e3e);COr=r(K9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K9t.forEach(t),wOr=i(ci),wn=n(ci,"P",{});var _y=s(wn);AOr=r(_y,"The model class to instantiate is selected based on the "),o3e=n(_y,"CODE",{});var Z9t=s(o3e);yOr=r(Z9t,"model_type"),Z9t.forEach(t),LOr=r(_y,` property of the config object (either
passed as an argument or loaded from `),r3e=n(_y,"CODE",{});var ext=s(r3e);xOr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),$Or=r(_y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=n(_y,"CODE",{});var oxt=s(t3e);kOr=r(oxt,"pretrained_model_name_or_path"),oxt.forEach(t),SOr=r(_y,":"),_y.forEach(t),ROr=i(ci),a3e=n(ci,"UL",{});var rxt=s(a3e);Z0=n(rxt,"LI",{});var kqe=s(Z0);n3e=n(kqe,"STRONG",{});var txt=s(n3e);POr=r(txt,"vision-encoder-decoder"),txt.forEach(t),BOr=r(kqe," \u2014 "),tZ=n(kqe,"A",{href:!0});var axt=s(tZ);IOr=r(axt,"FlaxVisionEncoderDecoderModel"),axt.forEach(t),qOr=r(kqe," (Vision Encoder decoder model)"),kqe.forEach(t),rxt.forEach(t),NOr=i(ci),T(eA.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ikt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(bm,"id","extending-the-auto-classes"),c(bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bm,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Fm,"id","transformers.AutoConfig"),c(Fm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fm,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(W$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Q$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(K$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(hk,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(xk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c($k,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ik,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(qk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Ok,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(Uk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(vS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(ES,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c($S,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoTokenizer"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(QS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(HS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(JS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(KS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(eR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(oR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(tR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(aR,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(iR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(fR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(gR,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(pR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(bR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ER,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(PR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(qR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(nP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(sP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(lP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(iP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(dP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(cP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(mP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(hP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(pP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(bP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(vP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(FP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(TP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(MP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(wP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(yP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(xP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(IP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(OP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(zP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(QP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(UP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(YP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(yB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(xB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c($B,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(IB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(qB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(NB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(jB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(DB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(GB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ih,"id","transformers.AutoProcessor"),c(Ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ih,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(aI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(sI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(lI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(iI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(dI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(fI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(_I,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(bI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tu,"id","transformers.AutoModel"),c(tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tu,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(TI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(wI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(AI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(yI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(LI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(xI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c($I,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(kI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(SI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(RI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(PI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(BI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(II,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(qI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(NI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(jI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(DI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(GI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(OI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(VI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(XI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(zI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(WI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(QI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(HI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(UI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(JI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(YI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(KI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(eq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(oq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(rq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(tq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(aq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(nq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(sq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(lq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(iq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(dq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(cq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(mq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(fq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(gq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(hq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(uq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(pq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(_q,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(vq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(wq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Aq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(yq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(xq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c($q,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(kq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(qq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(jq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(zq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Jq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(eN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(oN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(rN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(tN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(aN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(nN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(sN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(lN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(iN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(dN,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(cN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(mN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(fN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(gN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(hN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(uN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(pN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(_N,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zp,"id","transformers.AutoModelForPreTraining"),c(Zp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zp,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(bN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(MN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(EN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(CN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(wN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(AN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(LN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($N,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(SN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(RN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(PN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(BN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(IN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(qN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(NN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(jN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(DN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(GN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(ON,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(VN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(XN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(zN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(WN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(QN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(HN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(UN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(JN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(YN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(KN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(ej,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(oj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ij,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForCausalLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(dj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(gj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(hj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(uj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(pj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_j,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Mj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(wj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(yj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($j,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(kj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Ij,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(qj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kb,"id","transformers.AutoModelForMaskedLM"),c(kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kb,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(Hj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Zj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(eD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(mD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(uD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(pD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(_D,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(bD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(vD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(TD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ED,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(CD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(wD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(xD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c($D,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForSeq2SeqLM"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(kD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(BD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ID,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(qD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ND,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(jD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(DD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(GD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(OD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(VD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(zD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(QD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(HD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(UD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForSequenceClassification"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(JD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c($G,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rv,"id","transformers.AutoModelForMultipleChoice"),c(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rv,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(WG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(JG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(YG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(KG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(ZG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(eO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(oO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(rO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(tO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(aO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(nO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(sO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(lO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(iO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(dO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(cO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(mO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(fO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(gO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(hO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(uO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(pO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(_O,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(bO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(vO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(FO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(TO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(MO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(EO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForNextSentencePrediction"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(LO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(xO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c($O,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(kO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForTokenClassification"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(SO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(WO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(HO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(UO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n1,"id","transformers.AutoModelForQuestionAnswering"),c(n1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n1,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(vV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(FV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(TV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(MV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(EV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(CV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(wV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(AV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(yV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(LV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(xV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c($V,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(kV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(SV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(RV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(BV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(IV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(qV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(NV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(WV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(QV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U1,"id","transformers.AutoModelForTableQuestionAnswering"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForImageClassification"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(_X,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(vX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(FX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(TX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pT,"id","transformers.AutoModelForVision2Seq"),c(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pT,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(LX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForAudioClassification"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(VX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForAudioFrameClassification"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(HX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(UX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.AutoModelForCTC"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(rz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(tz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(az,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(nz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(sz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(lz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(iz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(dz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(hz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iM,"id","transformers.AutoModelForAudioXVector"),c(iM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iM,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(vz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Fz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Tz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Mz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.AutoModelForMaskedImageModeling"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(yz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Lz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.AutoModelForObjectDetection"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Rz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.AutoModelForImageSegmentation"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.AutoModelForSemanticSegmentation"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Oz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Vz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Xz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.AutoModelForInstanceSegmentation"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModel"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(Zz,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(eW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(oW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(rW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(tW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(aW,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(nW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(sW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(lW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(iW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(dW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(cW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(mW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(fW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(hW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(uW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(pW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(_W,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(vW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(FW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(TW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(MW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(EW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(CW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(wW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(AW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(LW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(xW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c($W,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(kW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(SW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(RW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(PW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(BW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(IW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(qW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(NW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(DW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(GW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(OW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(VW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(XW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.TFAutoModelForPreTraining"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(UW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(YW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(KW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(oQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(tQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(sQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(lQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(dQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(mQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(hQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForCausalLM"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($Q,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.TFAutoModelForImageClassification"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForMaskedLM"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(jQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(YQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(gH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hH,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(uH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(pH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(_H,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(bH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(vH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.TFAutoModelForSequenceClassification"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(wH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(LH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c($H,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(NH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(jH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(DH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForMultipleChoice"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(mU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(fU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(uU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(FU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForTokenClassification"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c($U,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.TFAutoModelForQuestionAnswering"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(HU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(KU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(ZU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(eJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(oJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(sJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(iJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(mJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(uJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(pJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.TFAutoModelForVision2Seq"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M3,"id","transformers.FlaxAutoModel"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c($J,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(kJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(PJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(BJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(NJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(OJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(HJ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(YJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForCausalLM"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(tY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(aY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(nY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(sY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(lY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(iY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(dY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(cY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForPreTraining"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(uY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(_Y,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(bY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(vY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(TY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(MY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(EY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(CY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.FlaxAutoModelForMaskedLM"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(AY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c($Y,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(SY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(RY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(PY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(BY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(VY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(XY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(zY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(WY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(QY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(HY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(UY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(JY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(hK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(uK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(pK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(_K,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(bK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(vK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(FK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(TK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(MK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.FlaxAutoModelForTokenClassification"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(xK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c($K,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(kK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(SK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(RK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(NK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(jK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(DK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(GK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(OK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(VK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(XK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rm,"class","relative group"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForImageClassification"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForImageClassification"),c(nm,"class","relative group"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.FlaxAutoModelForVision2Seq"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(im,"class","relative group"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,mi),b(m,hm,_),b(m,rt,_),e(rt,fi),e(rt,gi),e(gi,by),e(rt,um),b(m,je,_),b(m,We,_),e(We,hi),e(We,yn),e(yn,vy),e(We,Ln),e(We,xn),e(xn,Fy),e(We,ui),e(We,$n),e($n,Ty),e(We,pi),b(m,pm,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,D$),e(Ae,_i),e(_i,G$),e(Ae,O$),b(m,Eo,_),b(m,wa,_),e(wa,V$),e(wa,_m),e(_m,X$),e(wa,VGe),b(m,Sqe,_),b(m,bi,_),e(bi,bm),e(bm,Jee),M(My,Jee,null),e(bi,XGe),e(bi,Yee),e(Yee,zGe),b(m,Rqe,_),b(m,kn,_),e(kn,WGe),e(kn,Kee),e(Kee,QGe),e(kn,HGe),e(kn,Zee),e(Zee,UGe),e(kn,JGe),b(m,Pqe,_),M(Ey,m,_),b(m,Bqe,_),b(m,z$,_),e(z$,YGe),b(m,Iqe,_),M(vm,m,_),b(m,qqe,_),b(m,vi,_),e(vi,Fm),e(Fm,eoe),M(Cy,eoe,null),e(vi,KGe),e(vi,ooe),e(ooe,ZGe),b(m,Nqe,_),b(m,Co,_),M(wy,Co,null),e(Co,eOe),e(Co,Ay),e(Ay,oOe),e(Ay,W$),e(W$,rOe),e(Ay,tOe),e(Co,aOe),e(Co,yy),e(yy,nOe),e(yy,roe),e(roe,sOe),e(yy,lOe),e(Co,iOe),e(Co,Er),M(Ly,Er,null),e(Er,dOe),e(Er,toe),e(toe,cOe),e(Er,mOe),e(Er,Fi),e(Fi,fOe),e(Fi,aoe),e(aoe,gOe),e(Fi,hOe),e(Fi,noe),e(noe,uOe),e(Fi,pOe),e(Er,_Oe),e(Er,A),e(A,Tm),e(Tm,soe),e(soe,bOe),e(Tm,vOe),e(Tm,Q$),e(Q$,FOe),e(Tm,TOe),e(A,MOe),e(A,Mm),e(Mm,loe),e(loe,EOe),e(Mm,COe),e(Mm,H$),e(H$,wOe),e(Mm,AOe),e(A,yOe),e(A,Em),e(Em,ioe),e(ioe,LOe),e(Em,xOe),e(Em,U$),e(U$,$Oe),e(Em,kOe),e(A,SOe),e(A,Cm),e(Cm,doe),e(doe,ROe),e(Cm,POe),e(Cm,J$),e(J$,BOe),e(Cm,IOe),e(A,qOe),e(A,wm),e(wm,coe),e(coe,NOe),e(wm,jOe),e(wm,Y$),e(Y$,DOe),e(wm,GOe),e(A,OOe),e(A,Am),e(Am,moe),e(moe,VOe),e(Am,XOe),e(Am,K$),e(K$,zOe),e(Am,WOe),e(A,QOe),e(A,ym),e(ym,foe),e(foe,HOe),e(ym,UOe),e(ym,Z$),e(Z$,JOe),e(ym,YOe),e(A,KOe),e(A,Lm),e(Lm,goe),e(goe,ZOe),e(Lm,eVe),e(Lm,ek),e(ek,oVe),e(Lm,rVe),e(A,tVe),e(A,xm),e(xm,hoe),e(hoe,aVe),e(xm,nVe),e(xm,ok),e(ok,sVe),e(xm,lVe),e(A,iVe),e(A,$m),e($m,uoe),e(uoe,dVe),e($m,cVe),e($m,rk),e(rk,mVe),e($m,fVe),e(A,gVe),e(A,km),e(km,poe),e(poe,hVe),e(km,uVe),e(km,tk),e(tk,pVe),e(km,_Ve),e(A,bVe),e(A,Sm),e(Sm,_oe),e(_oe,vVe),e(Sm,FVe),e(Sm,ak),e(ak,TVe),e(Sm,MVe),e(A,EVe),e(A,Rm),e(Rm,boe),e(boe,CVe),e(Rm,wVe),e(Rm,nk),e(nk,AVe),e(Rm,yVe),e(A,LVe),e(A,Pm),e(Pm,voe),e(voe,xVe),e(Pm,$Ve),e(Pm,sk),e(sk,kVe),e(Pm,SVe),e(A,RVe),e(A,Bm),e(Bm,Foe),e(Foe,PVe),e(Bm,BVe),e(Bm,lk),e(lk,IVe),e(Bm,qVe),e(A,NVe),e(A,Im),e(Im,Toe),e(Toe,jVe),e(Im,DVe),e(Im,ik),e(ik,GVe),e(Im,OVe),e(A,VVe),e(A,qm),e(qm,Moe),e(Moe,XVe),e(qm,zVe),e(qm,dk),e(dk,WVe),e(qm,QVe),e(A,HVe),e(A,Nm),e(Nm,Eoe),e(Eoe,UVe),e(Nm,JVe),e(Nm,ck),e(ck,YVe),e(Nm,KVe),e(A,ZVe),e(A,jm),e(jm,Coe),e(Coe,eXe),e(jm,oXe),e(jm,mk),e(mk,rXe),e(jm,tXe),e(A,aXe),e(A,Dm),e(Dm,woe),e(woe,nXe),e(Dm,sXe),e(Dm,fk),e(fk,lXe),e(Dm,iXe),e(A,dXe),e(A,Gm),e(Gm,Aoe),e(Aoe,cXe),e(Gm,mXe),e(Gm,gk),e(gk,fXe),e(Gm,gXe),e(A,hXe),e(A,Om),e(Om,yoe),e(yoe,uXe),e(Om,pXe),e(Om,hk),e(hk,_Xe),e(Om,bXe),e(A,vXe),e(A,Vm),e(Vm,Loe),e(Loe,FXe),e(Vm,TXe),e(Vm,uk),e(uk,MXe),e(Vm,EXe),e(A,CXe),e(A,Xm),e(Xm,xoe),e(xoe,wXe),e(Xm,AXe),e(Xm,pk),e(pk,yXe),e(Xm,LXe),e(A,xXe),e(A,zm),e(zm,$oe),e($oe,$Xe),e(zm,kXe),e(zm,_k),e(_k,SXe),e(zm,RXe),e(A,PXe),e(A,Wm),e(Wm,koe),e(koe,BXe),e(Wm,IXe),e(Wm,bk),e(bk,qXe),e(Wm,NXe),e(A,jXe),e(A,Qm),e(Qm,Soe),e(Soe,DXe),e(Qm,GXe),e(Qm,vk),e(vk,OXe),e(Qm,VXe),e(A,XXe),e(A,Hm),e(Hm,Roe),e(Roe,zXe),e(Hm,WXe),e(Hm,Fk),e(Fk,QXe),e(Hm,HXe),e(A,UXe),e(A,Um),e(Um,Poe),e(Poe,JXe),e(Um,YXe),e(Um,Tk),e(Tk,KXe),e(Um,ZXe),e(A,eze),e(A,Jm),e(Jm,Boe),e(Boe,oze),e(Jm,rze),e(Jm,Mk),e(Mk,tze),e(Jm,aze),e(A,nze),e(A,Ym),e(Ym,Ioe),e(Ioe,sze),e(Ym,lze),e(Ym,Ek),e(Ek,ize),e(Ym,dze),e(A,cze),e(A,Km),e(Km,qoe),e(qoe,mze),e(Km,fze),e(Km,Ck),e(Ck,gze),e(Km,hze),e(A,uze),e(A,Zm),e(Zm,Noe),e(Noe,pze),e(Zm,_ze),e(Zm,wk),e(wk,bze),e(Zm,vze),e(A,Fze),e(A,ef),e(ef,joe),e(joe,Tze),e(ef,Mze),e(ef,Ak),e(Ak,Eze),e(ef,Cze),e(A,wze),e(A,of),e(of,Doe),e(Doe,Aze),e(of,yze),e(of,yk),e(yk,Lze),e(of,xze),e(A,$ze),e(A,rf),e(rf,Goe),e(Goe,kze),e(rf,Sze),e(rf,Lk),e(Lk,Rze),e(rf,Pze),e(A,Bze),e(A,tf),e(tf,Ooe),e(Ooe,Ize),e(tf,qze),e(tf,xk),e(xk,Nze),e(tf,jze),e(A,Dze),e(A,af),e(af,Voe),e(Voe,Gze),e(af,Oze),e(af,$k),e($k,Vze),e(af,Xze),e(A,zze),e(A,nf),e(nf,Xoe),e(Xoe,Wze),e(nf,Qze),e(nf,kk),e(kk,Hze),e(nf,Uze),e(A,Jze),e(A,sf),e(sf,zoe),e(zoe,Yze),e(sf,Kze),e(sf,Sk),e(Sk,Zze),e(sf,eWe),e(A,oWe),e(A,lf),e(lf,Woe),e(Woe,rWe),e(lf,tWe),e(lf,Rk),e(Rk,aWe),e(lf,nWe),e(A,sWe),e(A,df),e(df,Qoe),e(Qoe,lWe),e(df,iWe),e(df,Pk),e(Pk,dWe),e(df,cWe),e(A,mWe),e(A,cf),e(cf,Hoe),e(Hoe,fWe),e(cf,gWe),e(cf,Bk),e(Bk,hWe),e(cf,uWe),e(A,pWe),e(A,mf),e(mf,Uoe),e(Uoe,_We),e(mf,bWe),e(mf,Ik),e(Ik,vWe),e(mf,FWe),e(A,TWe),e(A,ff),e(ff,Joe),e(Joe,MWe),e(ff,EWe),e(ff,qk),e(qk,CWe),e(ff,wWe),e(A,AWe),e(A,gf),e(gf,Yoe),e(Yoe,yWe),e(gf,LWe),e(gf,Nk),e(Nk,xWe),e(gf,$We),e(A,kWe),e(A,hf),e(hf,Koe),e(Koe,SWe),e(hf,RWe),e(hf,jk),e(jk,PWe),e(hf,BWe),e(A,IWe),e(A,uf),e(uf,Zoe),e(Zoe,qWe),e(uf,NWe),e(uf,Dk),e(Dk,jWe),e(uf,DWe),e(A,GWe),e(A,pf),e(pf,ere),e(ere,OWe),e(pf,VWe),e(pf,Gk),e(Gk,XWe),e(pf,zWe),e(A,WWe),e(A,_f),e(_f,ore),e(ore,QWe),e(_f,HWe),e(_f,Ok),e(Ok,UWe),e(_f,JWe),e(A,YWe),e(A,bf),e(bf,rre),e(rre,KWe),e(bf,ZWe),e(bf,Vk),e(Vk,eQe),e(bf,oQe),e(A,rQe),e(A,vf),e(vf,tre),e(tre,tQe),e(vf,aQe),e(vf,Xk),e(Xk,nQe),e(vf,sQe),e(A,lQe),e(A,Ff),e(Ff,are),e(are,iQe),e(Ff,dQe),e(Ff,zk),e(zk,cQe),e(Ff,mQe),e(A,fQe),e(A,Tf),e(Tf,nre),e(nre,gQe),e(Tf,hQe),e(Tf,Wk),e(Wk,uQe),e(Tf,pQe),e(A,_Qe),e(A,Mf),e(Mf,sre),e(sre,bQe),e(Mf,vQe),e(Mf,Qk),e(Qk,FQe),e(Mf,TQe),e(A,MQe),e(A,Ef),e(Ef,lre),e(lre,EQe),e(Ef,CQe),e(Ef,Hk),e(Hk,wQe),e(Ef,AQe),e(A,yQe),e(A,Cf),e(Cf,ire),e(ire,LQe),e(Cf,xQe),e(Cf,Uk),e(Uk,$Qe),e(Cf,kQe),e(A,SQe),e(A,wf),e(wf,dre),e(dre,RQe),e(wf,PQe),e(wf,Jk),e(Jk,BQe),e(wf,IQe),e(A,qQe),e(A,Af),e(Af,cre),e(cre,NQe),e(Af,jQe),e(Af,Yk),e(Yk,DQe),e(Af,GQe),e(A,OQe),e(A,yf),e(yf,mre),e(mre,VQe),e(yf,XQe),e(yf,Kk),e(Kk,zQe),e(yf,WQe),e(A,QQe),e(A,Lf),e(Lf,fre),e(fre,HQe),e(Lf,UQe),e(Lf,Zk),e(Zk,JQe),e(Lf,YQe),e(A,KQe),e(A,xf),e(xf,gre),e(gre,ZQe),e(xf,eHe),e(xf,eS),e(eS,oHe),e(xf,rHe),e(A,tHe),e(A,$f),e($f,hre),e(hre,aHe),e($f,nHe),e($f,oS),e(oS,sHe),e($f,lHe),e(A,iHe),e(A,kf),e(kf,ure),e(ure,dHe),e(kf,cHe),e(kf,rS),e(rS,mHe),e(kf,fHe),e(A,gHe),e(A,Sf),e(Sf,pre),e(pre,hHe),e(Sf,uHe),e(Sf,tS),e(tS,pHe),e(Sf,_He),e(A,bHe),e(A,Rf),e(Rf,_re),e(_re,vHe),e(Rf,FHe),e(Rf,aS),e(aS,THe),e(Rf,MHe),e(A,EHe),e(A,Pf),e(Pf,bre),e(bre,CHe),e(Pf,wHe),e(Pf,nS),e(nS,AHe),e(Pf,yHe),e(A,LHe),e(A,Bf),e(Bf,vre),e(vre,xHe),e(Bf,$He),e(Bf,sS),e(sS,kHe),e(Bf,SHe),e(A,RHe),e(A,If),e(If,Fre),e(Fre,PHe),e(If,BHe),e(If,lS),e(lS,IHe),e(If,qHe),e(A,NHe),e(A,qf),e(qf,Tre),e(Tre,jHe),e(qf,DHe),e(qf,iS),e(iS,GHe),e(qf,OHe),e(A,VHe),e(A,Nf),e(Nf,Mre),e(Mre,XHe),e(Nf,zHe),e(Nf,dS),e(dS,WHe),e(Nf,QHe),e(A,HHe),e(A,jf),e(jf,Ere),e(Ere,UHe),e(jf,JHe),e(jf,cS),e(cS,YHe),e(jf,KHe),e(A,ZHe),e(A,Df),e(Df,Cre),e(Cre,eUe),e(Df,oUe),e(Df,mS),e(mS,rUe),e(Df,tUe),e(A,aUe),e(A,Gf),e(Gf,wre),e(wre,nUe),e(Gf,sUe),e(Gf,fS),e(fS,lUe),e(Gf,iUe),e(A,dUe),e(A,Of),e(Of,Are),e(Are,cUe),e(Of,mUe),e(Of,gS),e(gS,fUe),e(Of,gUe),e(A,hUe),e(A,Vf),e(Vf,yre),e(yre,uUe),e(Vf,pUe),e(Vf,hS),e(hS,_Ue),e(Vf,bUe),e(A,vUe),e(A,Xf),e(Xf,Lre),e(Lre,FUe),e(Xf,TUe),e(Xf,uS),e(uS,MUe),e(Xf,EUe),e(A,CUe),e(A,zf),e(zf,xre),e(xre,wUe),e(zf,AUe),e(zf,pS),e(pS,yUe),e(zf,LUe),e(A,xUe),e(A,Wf),e(Wf,$re),e($re,$Ue),e(Wf,kUe),e(Wf,_S),e(_S,SUe),e(Wf,RUe),e(A,PUe),e(A,Qf),e(Qf,kre),e(kre,BUe),e(Qf,IUe),e(Qf,bS),e(bS,qUe),e(Qf,NUe),e(A,jUe),e(A,Hf),e(Hf,Sre),e(Sre,DUe),e(Hf,GUe),e(Hf,vS),e(vS,OUe),e(Hf,VUe),e(A,XUe),e(A,Uf),e(Uf,Rre),e(Rre,zUe),e(Uf,WUe),e(Uf,FS),e(FS,QUe),e(Uf,HUe),e(A,UUe),e(A,Jf),e(Jf,Pre),e(Pre,JUe),e(Jf,YUe),e(Jf,TS),e(TS,KUe),e(Jf,ZUe),e(A,eJe),e(A,Yf),e(Yf,Bre),e(Bre,oJe),e(Yf,rJe),e(Yf,MS),e(MS,tJe),e(Yf,aJe),e(A,nJe),e(A,Kf),e(Kf,Ire),e(Ire,sJe),e(Kf,lJe),e(Kf,ES),e(ES,iJe),e(Kf,dJe),e(A,cJe),e(A,Zf),e(Zf,qre),e(qre,mJe),e(Zf,fJe),e(Zf,CS),e(CS,gJe),e(Zf,hJe),e(A,uJe),e(A,eg),e(eg,Nre),e(Nre,pJe),e(eg,_Je),e(eg,wS),e(wS,bJe),e(eg,vJe),e(A,FJe),e(A,og),e(og,jre),e(jre,TJe),e(og,MJe),e(og,AS),e(AS,EJe),e(og,CJe),e(A,wJe),e(A,rg),e(rg,Dre),e(Dre,AJe),e(rg,yJe),e(rg,yS),e(yS,LJe),e(rg,xJe),e(A,$Je),e(A,tg),e(tg,Gre),e(Gre,kJe),e(tg,SJe),e(tg,LS),e(LS,RJe),e(tg,PJe),e(A,BJe),e(A,ag),e(ag,Ore),e(Ore,IJe),e(ag,qJe),e(ag,xS),e(xS,NJe),e(ag,jJe),e(A,DJe),e(A,ng),e(ng,Vre),e(Vre,GJe),e(ng,OJe),e(ng,$S),e($S,VJe),e(ng,XJe),e(A,zJe),e(A,sg),e(sg,Xre),e(Xre,WJe),e(sg,QJe),e(sg,kS),e(kS,HJe),e(sg,UJe),e(A,JJe),e(A,lg),e(lg,zre),e(zre,YJe),e(lg,KJe),e(lg,SS),e(SS,ZJe),e(lg,eYe),e(A,oYe),e(A,ig),e(ig,Wre),e(Wre,rYe),e(ig,tYe),e(ig,RS),e(RS,aYe),e(ig,nYe),e(A,sYe),e(A,dg),e(dg,Qre),e(Qre,lYe),e(dg,iYe),e(dg,PS),e(PS,dYe),e(dg,cYe),e(A,mYe),e(A,cg),e(cg,Hre),e(Hre,fYe),e(cg,gYe),e(cg,BS),e(BS,hYe),e(cg,uYe),e(A,pYe),e(A,mg),e(mg,Ure),e(Ure,_Ye),e(mg,bYe),e(mg,IS),e(IS,vYe),e(mg,FYe),e(A,TYe),e(A,fg),e(fg,Jre),e(Jre,MYe),e(fg,EYe),e(fg,qS),e(qS,CYe),e(fg,wYe),e(A,AYe),e(A,gg),e(gg,Yre),e(Yre,yYe),e(gg,LYe),e(gg,NS),e(NS,xYe),e(gg,$Ye),e(A,kYe),e(A,hg),e(hg,Kre),e(Kre,SYe),e(hg,RYe),e(hg,jS),e(jS,PYe),e(hg,BYe),e(A,IYe),e(A,ug),e(ug,Zre),e(Zre,qYe),e(ug,NYe),e(ug,DS),e(DS,jYe),e(ug,DYe),e(A,GYe),e(A,pg),e(pg,ete),e(ete,OYe),e(pg,VYe),e(pg,GS),e(GS,XYe),e(pg,zYe),e(A,WYe),e(A,_g),e(_g,ote),e(ote,QYe),e(_g,HYe),e(_g,OS),e(OS,UYe),e(_g,JYe),e(A,YYe),e(A,bg),e(bg,rte),e(rte,KYe),e(bg,ZYe),e(bg,VS),e(VS,eKe),e(bg,oKe),e(A,rKe),e(A,vg),e(vg,tte),e(tte,tKe),e(vg,aKe),e(vg,XS),e(XS,nKe),e(vg,sKe),e(A,lKe),e(A,Fg),e(Fg,ate),e(ate,iKe),e(Fg,dKe),e(Fg,zS),e(zS,cKe),e(Fg,mKe),e(A,fKe),e(A,Tg),e(Tg,nte),e(nte,gKe),e(Tg,hKe),e(Tg,WS),e(WS,uKe),e(Tg,pKe),e(Er,_Ke),M(Mg,Er,null),e(Co,bKe),e(Co,Eg),M(xy,Eg,null),e(Eg,vKe),e(Eg,ste),e(ste,FKe),b(m,jqe,_),b(m,Ti,_),e(Ti,Cg),e(Cg,lte),M($y,lte,null),e(Ti,TKe),e(Ti,ite),e(ite,MKe),b(m,Dqe,_),b(m,wo,_),M(ky,wo,null),e(wo,EKe),e(wo,Sy),e(Sy,CKe),e(Sy,QS),e(QS,wKe),e(Sy,AKe),e(wo,yKe),e(wo,Ry),e(Ry,LKe),e(Ry,dte),e(dte,xKe),e(Ry,$Ke),e(wo,kKe),e(wo,Cr),M(Py,Cr,null),e(Cr,SKe),e(Cr,cte),e(cte,RKe),e(Cr,PKe),e(Cr,Aa),e(Aa,BKe),e(Aa,mte),e(mte,IKe),e(Aa,qKe),e(Aa,fte),e(fte,NKe),e(Aa,jKe),e(Aa,gte),e(gte,DKe),e(Aa,GKe),e(Cr,OKe),e(Cr,k),e(k,Sn),e(Sn,hte),e(hte,VKe),e(Sn,XKe),e(Sn,HS),e(HS,zKe),e(Sn,WKe),e(Sn,US),e(US,QKe),e(Sn,HKe),e(k,UKe),e(k,Rn),e(Rn,ute),e(ute,JKe),e(Rn,YKe),e(Rn,JS),e(JS,KKe),e(Rn,ZKe),e(Rn,YS),e(YS,eZe),e(Rn,oZe),e(k,rZe),e(k,Pn),e(Pn,pte),e(pte,tZe),e(Pn,aZe),e(Pn,KS),e(KS,nZe),e(Pn,sZe),e(Pn,ZS),e(ZS,lZe),e(Pn,iZe),e(k,dZe),e(k,wg),e(wg,_te),e(_te,cZe),e(wg,mZe),e(wg,eR),e(eR,fZe),e(wg,gZe),e(k,hZe),e(k,Bn),e(Bn,bte),e(bte,uZe),e(Bn,pZe),e(Bn,oR),e(oR,_Ze),e(Bn,bZe),e(Bn,rR),e(rR,vZe),e(Bn,FZe),e(k,TZe),e(k,Ag),e(Ag,vte),e(vte,MZe),e(Ag,EZe),e(Ag,tR),e(tR,CZe),e(Ag,wZe),e(k,AZe),e(k,yg),e(yg,Fte),e(Fte,yZe),e(yg,LZe),e(yg,aR),e(aR,xZe),e(yg,$Ze),e(k,kZe),e(k,Lg),e(Lg,Tte),e(Tte,SZe),e(Lg,RZe),e(Lg,nR),e(nR,PZe),e(Lg,BZe),e(k,IZe),e(k,In),e(In,Mte),e(Mte,qZe),e(In,NZe),e(In,sR),e(sR,jZe),e(In,DZe),e(In,lR),e(lR,GZe),e(In,OZe),e(k,VZe),e(k,qn),e(qn,Ete),e(Ete,XZe),e(qn,zZe),e(qn,iR),e(iR,WZe),e(qn,QZe),e(qn,dR),e(dR,HZe),e(qn,UZe),e(k,JZe),e(k,Nn),e(Nn,Cte),e(Cte,YZe),e(Nn,KZe),e(Nn,cR),e(cR,ZZe),e(Nn,eeo),e(Nn,mR),e(mR,oeo),e(Nn,reo),e(k,teo),e(k,xg),e(xg,wte),e(wte,aeo),e(xg,neo),e(xg,fR),e(fR,seo),e(xg,leo),e(k,ieo),e(k,$g),e($g,Ate),e(Ate,deo),e($g,ceo),e($g,gR),e(gR,meo),e($g,feo),e(k,geo),e(k,jn),e(jn,yte),e(yte,heo),e(jn,ueo),e(jn,hR),e(hR,peo),e(jn,_eo),e(jn,uR),e(uR,beo),e(jn,veo),e(k,Feo),e(k,kg),e(kg,Lte),e(Lte,Teo),e(kg,Meo),e(kg,pR),e(pR,Eeo),e(kg,Ceo),e(k,weo),e(k,Dn),e(Dn,xte),e(xte,Aeo),e(Dn,yeo),e(Dn,_R),e(_R,Leo),e(Dn,xeo),e(Dn,bR),e(bR,$eo),e(Dn,keo),e(k,Seo),e(k,Gn),e(Gn,$te),e($te,Reo),e(Gn,Peo),e(Gn,vR),e(vR,Beo),e(Gn,Ieo),e(Gn,FR),e(FR,qeo),e(Gn,Neo),e(k,jeo),e(k,On),e(On,kte),e(kte,Deo),e(On,Geo),e(On,TR),e(TR,Oeo),e(On,Veo),e(On,MR),e(MR,Xeo),e(On,zeo),e(k,Weo),e(k,Sg),e(Sg,Ste),e(Ste,Qeo),e(Sg,Heo),e(Sg,ER),e(ER,Ueo),e(Sg,Jeo),e(k,Yeo),e(k,Vn),e(Vn,Rte),e(Rte,Keo),e(Vn,Zeo),e(Vn,CR),e(CR,eoo),e(Vn,ooo),e(Vn,wR),e(wR,roo),e(Vn,too),e(k,aoo),e(k,Xn),e(Xn,Pte),e(Pte,noo),e(Xn,soo),e(Xn,AR),e(AR,loo),e(Xn,ioo),e(Xn,yR),e(yR,doo),e(Xn,coo),e(k,moo),e(k,zn),e(zn,Bte),e(Bte,foo),e(zn,goo),e(zn,LR),e(LR,hoo),e(zn,uoo),e(zn,xR),e(xR,poo),e(zn,_oo),e(k,boo),e(k,Wn),e(Wn,Ite),e(Ite,voo),e(Wn,Foo),e(Wn,$R),e($R,Too),e(Wn,Moo),e(Wn,kR),e(kR,Eoo),e(Wn,Coo),e(k,woo),e(k,Qn),e(Qn,qte),e(qte,Aoo),e(Qn,yoo),e(Qn,SR),e(SR,Loo),e(Qn,xoo),e(Qn,RR),e(RR,$oo),e(Qn,koo),e(k,Soo),e(k,Hn),e(Hn,Nte),e(Nte,Roo),e(Hn,Poo),e(Hn,PR),e(PR,Boo),e(Hn,Ioo),e(Hn,BR),e(BR,qoo),e(Hn,Noo),e(k,joo),e(k,Rg),e(Rg,jte),e(jte,Doo),e(Rg,Goo),e(Rg,IR),e(IR,Ooo),e(Rg,Voo),e(k,Xoo),e(k,Un),e(Un,Dte),e(Dte,zoo),e(Un,Woo),e(Un,qR),e(qR,Qoo),e(Un,Hoo),e(Un,NR),e(NR,Uoo),e(Un,Joo),e(k,Yoo),e(k,Pg),e(Pg,Gte),e(Gte,Koo),e(Pg,Zoo),e(Pg,jR),e(jR,ero),e(Pg,oro),e(k,rro),e(k,Jn),e(Jn,Ote),e(Ote,tro),e(Jn,aro),e(Jn,DR),e(DR,nro),e(Jn,sro),e(Jn,GR),e(GR,lro),e(Jn,iro),e(k,dro),e(k,Yn),e(Yn,Vte),e(Vte,cro),e(Yn,mro),e(Yn,OR),e(OR,fro),e(Yn,gro),e(Yn,VR),e(VR,hro),e(Yn,uro),e(k,pro),e(k,Kn),e(Kn,Xte),e(Xte,_ro),e(Kn,bro),e(Kn,XR),e(XR,vro),e(Kn,Fro),e(Kn,zR),e(zR,Tro),e(Kn,Mro),e(k,Ero),e(k,Zn),e(Zn,zte),e(zte,Cro),e(Zn,wro),e(Zn,WR),e(WR,Aro),e(Zn,yro),e(Zn,QR),e(QR,Lro),e(Zn,xro),e(k,$ro),e(k,es),e(es,Wte),e(Wte,kro),e(es,Sro),e(es,HR),e(HR,Rro),e(es,Pro),e(es,UR),e(UR,Bro),e(es,Iro),e(k,qro),e(k,Bg),e(Bg,Qte),e(Qte,Nro),e(Bg,jro),e(Bg,JR),e(JR,Dro),e(Bg,Gro),e(k,Oro),e(k,os),e(os,Hte),e(Hte,Vro),e(os,Xro),e(os,YR),e(YR,zro),e(os,Wro),e(os,KR),e(KR,Qro),e(os,Hro),e(k,Uro),e(k,rs),e(rs,Ute),e(Ute,Jro),e(rs,Yro),e(rs,ZR),e(ZR,Kro),e(rs,Zro),e(rs,eP),e(eP,eto),e(rs,oto),e(k,rto),e(k,ts),e(ts,Jte),e(Jte,tto),e(ts,ato),e(ts,oP),e(oP,nto),e(ts,sto),e(ts,rP),e(rP,lto),e(ts,ito),e(k,dto),e(k,as),e(as,Yte),e(Yte,cto),e(as,mto),e(as,tP),e(tP,fto),e(as,gto),e(as,aP),e(aP,hto),e(as,uto),e(k,pto),e(k,ns),e(ns,Kte),e(Kte,_to),e(ns,bto),e(ns,nP),e(nP,vto),e(ns,Fto),e(ns,sP),e(sP,Tto),e(ns,Mto),e(k,Eto),e(k,ss),e(ss,Zte),e(Zte,Cto),e(ss,wto),e(ss,lP),e(lP,Ato),e(ss,yto),e(ss,iP),e(iP,Lto),e(ss,xto),e(k,$to),e(k,ls),e(ls,eae),e(eae,kto),e(ls,Sto),e(ls,dP),e(dP,Rto),e(ls,Pto),e(ls,cP),e(cP,Bto),e(ls,Ito),e(k,qto),e(k,Ig),e(Ig,oae),e(oae,Nto),e(Ig,jto),e(Ig,mP),e(mP,Dto),e(Ig,Gto),e(k,Oto),e(k,is),e(is,rae),e(rae,Vto),e(is,Xto),e(is,fP),e(fP,zto),e(is,Wto),e(is,gP),e(gP,Qto),e(is,Hto),e(k,Uto),e(k,qg),e(qg,tae),e(tae,Jto),e(qg,Yto),e(qg,hP),e(hP,Kto),e(qg,Zto),e(k,eao),e(k,Ng),e(Ng,aae),e(aae,oao),e(Ng,rao),e(Ng,uP),e(uP,tao),e(Ng,aao),e(k,nao),e(k,ds),e(ds,nae),e(nae,sao),e(ds,lao),e(ds,pP),e(pP,iao),e(ds,dao),e(ds,_P),e(_P,cao),e(ds,mao),e(k,fao),e(k,cs),e(cs,sae),e(sae,gao),e(cs,hao),e(cs,bP),e(bP,uao),e(cs,pao),e(cs,vP),e(vP,_ao),e(cs,bao),e(k,vao),e(k,ms),e(ms,lae),e(lae,Fao),e(ms,Tao),e(ms,FP),e(FP,Mao),e(ms,Eao),e(ms,TP),e(TP,Cao),e(ms,wao),e(k,Aao),e(k,jg),e(jg,iae),e(iae,yao),e(jg,Lao),e(jg,MP),e(MP,xao),e(jg,$ao),e(k,kao),e(k,fs),e(fs,dae),e(dae,Sao),e(fs,Rao),e(fs,EP),e(EP,Pao),e(fs,Bao),e(fs,CP),e(CP,Iao),e(fs,qao),e(k,Nao),e(k,gs),e(gs,cae),e(cae,jao),e(gs,Dao),e(gs,wP),e(wP,Gao),e(gs,Oao),e(gs,AP),e(AP,Vao),e(gs,Xao),e(k,zao),e(k,hs),e(hs,mae),e(mae,Wao),e(hs,Qao),e(hs,yP),e(yP,Hao),e(hs,Uao),e(hs,LP),e(LP,Jao),e(hs,Yao),e(k,Kao),e(k,us),e(us,fae),e(fae,Zao),e(us,eno),e(us,xP),e(xP,ono),e(us,rno),e(us,$P),e($P,tno),e(us,ano),e(k,nno),e(k,ps),e(ps,gae),e(gae,sno),e(ps,lno),e(ps,kP),e(kP,ino),e(ps,dno),e(ps,SP),e(SP,cno),e(ps,mno),e(k,fno),e(k,Dg),e(Dg,hae),e(hae,gno),e(Dg,hno),e(Dg,RP),e(RP,uno),e(Dg,pno),e(k,_no),e(k,_s),e(_s,uae),e(uae,bno),e(_s,vno),e(_s,PP),e(PP,Fno),e(_s,Tno),e(_s,BP),e(BP,Mno),e(_s,Eno),e(k,Cno),e(k,Gg),e(Gg,pae),e(pae,wno),e(Gg,Ano),e(Gg,IP),e(IP,yno),e(Gg,Lno),e(k,xno),e(k,Og),e(Og,_ae),e(_ae,$no),e(Og,kno),e(Og,qP),e(qP,Sno),e(Og,Rno),e(k,Pno),e(k,Vg),e(Vg,bae),e(bae,Bno),e(Vg,Ino),e(Vg,NP),e(NP,qno),e(Vg,Nno),e(k,jno),e(k,Xg),e(Xg,vae),e(vae,Dno),e(Xg,Gno),e(Xg,jP),e(jP,Ono),e(Xg,Vno),e(k,Xno),e(k,bs),e(bs,Fae),e(Fae,zno),e(bs,Wno),e(bs,DP),e(DP,Qno),e(bs,Hno),e(bs,GP),e(GP,Uno),e(bs,Jno),e(k,Yno),e(k,zg),e(zg,Tae),e(Tae,Kno),e(zg,Zno),e(zg,OP),e(OP,eso),e(zg,oso),e(k,rso),e(k,vs),e(vs,Mae),e(Mae,tso),e(vs,aso),e(vs,VP),e(VP,nso),e(vs,sso),e(vs,XP),e(XP,lso),e(vs,iso),e(k,dso),e(k,Fs),e(Fs,Eae),e(Eae,cso),e(Fs,mso),e(Fs,zP),e(zP,fso),e(Fs,gso),e(Fs,WP),e(WP,hso),e(Fs,uso),e(k,pso),e(k,Ts),e(Ts,Cae),e(Cae,_so),e(Ts,bso),e(Ts,QP),e(QP,vso),e(Ts,Fso),e(Ts,HP),e(HP,Tso),e(Ts,Mso),e(k,Eso),e(k,Ms),e(Ms,wae),e(wae,Cso),e(Ms,wso),e(Ms,UP),e(UP,Aso),e(Ms,yso),e(Ms,JP),e(JP,Lso),e(Ms,xso),e(k,$so),e(k,Es),e(Es,Aae),e(Aae,kso),e(Es,Sso),e(Es,YP),e(YP,Rso),e(Es,Pso),e(Es,KP),e(KP,Bso),e(Es,Iso),e(k,qso),e(k,Cs),e(Cs,yae),e(yae,Nso),e(Cs,jso),e(Cs,ZP),e(ZP,Dso),e(Cs,Gso),e(Cs,eB),e(eB,Oso),e(Cs,Vso),e(k,Xso),e(k,Wg),e(Wg,Lae),e(Lae,zso),e(Wg,Wso),e(Wg,oB),e(oB,Qso),e(Wg,Hso),e(k,Uso),e(k,Qg),e(Qg,xae),e(xae,Jso),e(Qg,Yso),e(Qg,rB),e(rB,Kso),e(Qg,Zso),e(k,elo),e(k,ws),e(ws,$ae),e($ae,olo),e(ws,rlo),e(ws,tB),e(tB,tlo),e(ws,alo),e(ws,aB),e(aB,nlo),e(ws,slo),e(k,llo),e(k,As),e(As,kae),e(kae,ilo),e(As,dlo),e(As,nB),e(nB,clo),e(As,mlo),e(As,sB),e(sB,flo),e(As,glo),e(k,hlo),e(k,ys),e(ys,Sae),e(Sae,ulo),e(ys,plo),e(ys,lB),e(lB,_lo),e(ys,blo),e(ys,iB),e(iB,vlo),e(ys,Flo),e(k,Tlo),e(k,Hg),e(Hg,Rae),e(Rae,Mlo),e(Hg,Elo),e(Hg,dB),e(dB,Clo),e(Hg,wlo),e(k,Alo),e(k,Ug),e(Ug,Pae),e(Pae,ylo),e(Ug,Llo),e(Ug,cB),e(cB,xlo),e(Ug,$lo),e(k,klo),e(k,Jg),e(Jg,Bae),e(Bae,Slo),e(Jg,Rlo),e(Jg,mB),e(mB,Plo),e(Jg,Blo),e(k,Ilo),e(k,Ls),e(Ls,Iae),e(Iae,qlo),e(Ls,Nlo),e(Ls,fB),e(fB,jlo),e(Ls,Dlo),e(Ls,gB),e(gB,Glo),e(Ls,Olo),e(k,Vlo),e(k,Yg),e(Yg,qae),e(qae,Xlo),e(Yg,zlo),e(Yg,hB),e(hB,Wlo),e(Yg,Qlo),e(k,Hlo),e(k,Kg),e(Kg,Nae),e(Nae,Ulo),e(Kg,Jlo),e(Kg,uB),e(uB,Ylo),e(Kg,Klo),e(k,Zlo),e(k,Zg),e(Zg,jae),e(jae,eio),e(Zg,oio),e(Zg,pB),e(pB,rio),e(Zg,tio),e(k,aio),e(k,xs),e(xs,Dae),e(Dae,nio),e(xs,sio),e(xs,_B),e(_B,lio),e(xs,iio),e(xs,bB),e(bB,dio),e(xs,cio),e(k,mio),e(k,eh),e(eh,Gae),e(Gae,fio),e(eh,gio),e(eh,vB),e(vB,hio),e(eh,uio),e(k,pio),e(k,oh),e(oh,Oae),e(Oae,_io),e(oh,bio),e(oh,FB),e(FB,vio),e(oh,Fio),e(k,Tio),e(k,$s),e($s,Vae),e(Vae,Mio),e($s,Eio),e($s,TB),e(TB,Cio),e($s,wio),e($s,MB),e(MB,Aio),e($s,yio),e(k,Lio),e(k,ks),e(ks,Xae),e(Xae,xio),e(ks,$io),e(ks,EB),e(EB,kio),e(ks,Sio),e(ks,CB),e(CB,Rio),e(ks,Pio),e(k,Bio),e(k,Ss),e(Ss,zae),e(zae,Iio),e(Ss,qio),e(Ss,wB),e(wB,Nio),e(Ss,jio),e(Ss,AB),e(AB,Dio),e(Ss,Gio),e(k,Oio),e(k,Rs),e(Rs,Wae),e(Wae,Vio),e(Rs,Xio),e(Rs,yB),e(yB,zio),e(Rs,Wio),e(Rs,LB),e(LB,Qio),e(Rs,Hio),e(Cr,Uio),M(rh,Cr,null),e(wo,Jio),e(wo,th),M(By,th,null),e(th,Yio),e(th,Qae),e(Qae,Kio),b(m,Gqe,_),b(m,Mi,_),e(Mi,ah),e(ah,Hae),M(Iy,Hae,null),e(Mi,Zio),e(Mi,Uae),e(Uae,edo),b(m,Oqe,_),b(m,Ao,_),M(qy,Ao,null),e(Ao,odo),e(Ao,Ny),e(Ny,rdo),e(Ny,xB),e(xB,tdo),e(Ny,ado),e(Ao,ndo),e(Ao,jy),e(jy,sdo),e(jy,Jae),e(Jae,ldo),e(jy,ido),e(Ao,ddo),e(Ao,He),M(Dy,He,null),e(He,cdo),e(He,Yae),e(Yae,mdo),e(He,fdo),e(He,ya),e(ya,gdo),e(ya,Kae),e(Kae,hdo),e(ya,udo),e(ya,Zae),e(Zae,pdo),e(ya,_do),e(ya,ene),e(ene,bdo),e(ya,vdo),e(He,Fdo),e(He,K),e(K,nh),e(nh,one),e(one,Tdo),e(nh,Mdo),e(nh,$B),e($B,Edo),e(nh,Cdo),e(K,wdo),e(K,sh),e(sh,rne),e(rne,Ado),e(sh,ydo),e(sh,kB),e(kB,Ldo),e(sh,xdo),e(K,$do),e(K,lh),e(lh,tne),e(tne,kdo),e(lh,Sdo),e(lh,SB),e(SB,Rdo),e(lh,Pdo),e(K,Bdo),e(K,ih),e(ih,ane),e(ane,Ido),e(ih,qdo),e(ih,RB),e(RB,Ndo),e(ih,jdo),e(K,Ddo),e(K,dh),e(dh,nne),e(nne,Gdo),e(dh,Odo),e(dh,PB),e(PB,Vdo),e(dh,Xdo),e(K,zdo),e(K,ch),e(ch,sne),e(sne,Wdo),e(ch,Qdo),e(ch,BB),e(BB,Hdo),e(ch,Udo),e(K,Jdo),e(K,mh),e(mh,lne),e(lne,Ydo),e(mh,Kdo),e(mh,IB),e(IB,Zdo),e(mh,eco),e(K,oco),e(K,fh),e(fh,ine),e(ine,rco),e(fh,tco),e(fh,qB),e(qB,aco),e(fh,nco),e(K,sco),e(K,gh),e(gh,dne),e(dne,lco),e(gh,ico),e(gh,NB),e(NB,dco),e(gh,cco),e(K,mco),e(K,hh),e(hh,cne),e(cne,fco),e(hh,gco),e(hh,jB),e(jB,hco),e(hh,uco),e(K,pco),e(K,uh),e(uh,mne),e(mne,_co),e(uh,bco),e(uh,DB),e(DB,vco),e(uh,Fco),e(K,Tco),e(K,ph),e(ph,fne),e(fne,Mco),e(ph,Eco),e(ph,GB),e(GB,Cco),e(ph,wco),e(K,Aco),e(K,_h),e(_h,gne),e(gne,yco),e(_h,Lco),e(_h,OB),e(OB,xco),e(_h,$co),e(K,kco),e(K,bh),e(bh,hne),e(hne,Sco),e(bh,Rco),e(bh,VB),e(VB,Pco),e(bh,Bco),e(K,Ico),e(K,vh),e(vh,une),e(une,qco),e(vh,Nco),e(vh,XB),e(XB,jco),e(vh,Dco),e(K,Gco),e(K,Fh),e(Fh,pne),e(pne,Oco),e(Fh,Vco),e(Fh,zB),e(zB,Xco),e(Fh,zco),e(K,Wco),e(K,Th),e(Th,_ne),e(_ne,Qco),e(Th,Hco),e(Th,WB),e(WB,Uco),e(Th,Jco),e(K,Yco),e(K,Mh),e(Mh,bne),e(bne,Kco),e(Mh,Zco),e(Mh,QB),e(QB,emo),e(Mh,omo),e(K,rmo),e(K,Eh),e(Eh,vne),e(vne,tmo),e(Eh,amo),e(Eh,HB),e(HB,nmo),e(Eh,smo),e(K,lmo),e(K,Ch),e(Ch,Fne),e(Fne,imo),e(Ch,dmo),e(Ch,UB),e(UB,cmo),e(Ch,mmo),e(K,fmo),e(K,wh),e(wh,Tne),e(Tne,gmo),e(wh,hmo),e(wh,JB),e(JB,umo),e(wh,pmo),e(K,_mo),e(K,Ah),e(Ah,Mne),e(Mne,bmo),e(Ah,vmo),e(Ah,YB),e(YB,Fmo),e(Ah,Tmo),e(K,Mmo),e(K,yh),e(yh,Ene),e(Ene,Emo),e(yh,Cmo),e(yh,KB),e(KB,wmo),e(yh,Amo),e(K,ymo),e(K,Lh),e(Lh,Cne),e(Cne,Lmo),e(Lh,xmo),e(Lh,ZB),e(ZB,$mo),e(Lh,kmo),e(K,Smo),e(K,xh),e(xh,wne),e(wne,Rmo),e(xh,Pmo),e(xh,eI),e(eI,Bmo),e(xh,Imo),e(K,qmo),e(K,$h),e($h,Ane),e(Ane,Nmo),e($h,jmo),e($h,oI),e(oI,Dmo),e($h,Gmo),e(K,Omo),e(K,kh),e(kh,yne),e(yne,Vmo),e(kh,Xmo),e(kh,rI),e(rI,zmo),e(kh,Wmo),e(K,Qmo),e(K,Sh),e(Sh,Lne),e(Lne,Hmo),e(Sh,Umo),e(Sh,tI),e(tI,Jmo),e(Sh,Ymo),e(He,Kmo),M(Rh,He,null),e(He,Zmo),M(Ph,He,null),e(Ao,efo),e(Ao,Bh),M(Gy,Bh,null),e(Bh,ofo),e(Bh,xne),e(xne,rfo),b(m,Vqe,_),b(m,Ei,_),e(Ei,Ih),e(Ih,$ne),M(Oy,$ne,null),e(Ei,tfo),e(Ei,kne),e(kne,afo),b(m,Xqe,_),b(m,yo,_),M(Vy,yo,null),e(yo,nfo),e(yo,Xy),e(Xy,sfo),e(Xy,aI),e(aI,lfo),e(Xy,ifo),e(yo,dfo),e(yo,zy),e(zy,cfo),e(zy,Sne),e(Sne,mfo),e(zy,ffo),e(yo,gfo),e(yo,Ue),M(Wy,Ue,null),e(Ue,hfo),e(Ue,Rne),e(Rne,ufo),e(Ue,pfo),e(Ue,Ci),e(Ci,_fo),e(Ci,Pne),e(Pne,bfo),e(Ci,vfo),e(Ci,Bne),e(Bne,Ffo),e(Ci,Tfo),e(Ue,Mfo),e(Ue,he),e(he,qh),e(qh,Ine),e(Ine,Efo),e(qh,Cfo),e(qh,nI),e(nI,wfo),e(qh,Afo),e(he,yfo),e(he,Nh),e(Nh,qne),e(qne,Lfo),e(Nh,xfo),e(Nh,Nne),e(Nne,$fo),e(Nh,kfo),e(he,Sfo),e(he,jh),e(jh,jne),e(jne,Rfo),e(jh,Pfo),e(jh,sI),e(sI,Bfo),e(jh,Ifo),e(he,qfo),e(he,Dh),e(Dh,Dne),e(Dne,Nfo),e(Dh,jfo),e(Dh,lI),e(lI,Dfo),e(Dh,Gfo),e(he,Ofo),e(he,Gh),e(Gh,Gne),e(Gne,Vfo),e(Gh,Xfo),e(Gh,iI),e(iI,zfo),e(Gh,Wfo),e(he,Qfo),e(he,Oh),e(Oh,One),e(One,Hfo),e(Oh,Ufo),e(Oh,dI),e(dI,Jfo),e(Oh,Yfo),e(he,Kfo),e(he,Vh),e(Vh,Vne),e(Vne,Zfo),e(Vh,ego),e(Vh,cI),e(cI,ogo),e(Vh,rgo),e(he,tgo),e(he,Xh),e(Xh,Xne),e(Xne,ago),e(Xh,ngo),e(Xh,mI),e(mI,sgo),e(Xh,lgo),e(he,igo),e(he,zh),e(zh,zne),e(zne,dgo),e(zh,cgo),e(zh,fI),e(fI,mgo),e(zh,fgo),e(he,ggo),e(he,Wh),e(Wh,Wne),e(Wne,hgo),e(Wh,ugo),e(Wh,gI),e(gI,pgo),e(Wh,_go),e(he,bgo),e(he,Qh),e(Qh,Qne),e(Qne,vgo),e(Qh,Fgo),e(Qh,hI),e(hI,Tgo),e(Qh,Mgo),e(he,Ego),e(he,Hh),e(Hh,Hne),e(Hne,Cgo),e(Hh,wgo),e(Hh,uI),e(uI,Ago),e(Hh,ygo),e(he,Lgo),e(he,Uh),e(Uh,Une),e(Une,xgo),e(Uh,$go),e(Uh,pI),e(pI,kgo),e(Uh,Sgo),e(he,Rgo),e(he,Jh),e(Jh,Jne),e(Jne,Pgo),e(Jh,Bgo),e(Jh,_I),e(_I,Igo),e(Jh,qgo),e(he,Ngo),e(he,Yh),e(Yh,Yne),e(Yne,jgo),e(Yh,Dgo),e(Yh,bI),e(bI,Ggo),e(Yh,Ogo),e(he,Vgo),e(he,Kh),e(Kh,Kne),e(Kne,Xgo),e(Kh,zgo),e(Kh,vI),e(vI,Wgo),e(Kh,Qgo),e(he,Hgo),e(he,Zh),e(Zh,Zne),e(Zne,Ugo),e(Zh,Jgo),e(Zh,FI),e(FI,Ygo),e(Zh,Kgo),e(Ue,Zgo),M(eu,Ue,null),e(Ue,eho),M(ou,Ue,null),e(yo,oho),e(yo,ru),M(Qy,ru,null),e(ru,rho),e(ru,ese),e(ese,tho),b(m,zqe,_),b(m,wi,_),e(wi,tu),e(tu,ose),M(Hy,ose,null),e(wi,aho),e(wi,rse),e(rse,nho),b(m,Wqe,_),b(m,Lo,_),M(Uy,Lo,null),e(Lo,sho),e(Lo,Ai),e(Ai,lho),e(Ai,TI),e(TI,iho),e(Ai,dho),e(Ai,MI),e(MI,cho),e(Ai,mho),e(Lo,fho),e(Lo,Jy),e(Jy,gho),e(Jy,tse),e(tse,hho),e(Jy,uho),e(Lo,pho),e(Lo,tt),M(Yy,tt,null),e(tt,_ho),e(tt,ase),e(ase,bho),e(tt,vho),e(tt,yi),e(yi,Fho),e(yi,nse),e(nse,Tho),e(yi,Mho),e(yi,EI),e(EI,Eho),e(yi,Cho),e(tt,who),M(au,tt,null),e(Lo,Aho),e(Lo,Je),M(Ky,Je,null),e(Je,yho),e(Je,sse),e(sse,Lho),e(Je,xho),e(Je,La),e(La,$ho),e(La,lse),e(lse,kho),e(La,Sho),e(La,ise),e(ise,Rho),e(La,Pho),e(La,dse),e(dse,Bho),e(La,Iho),e(Je,qho),e(Je,x),e(x,nu),e(nu,cse),e(cse,Nho),e(nu,jho),e(nu,CI),e(CI,Dho),e(nu,Gho),e(x,Oho),e(x,su),e(su,mse),e(mse,Vho),e(su,Xho),e(su,wI),e(wI,zho),e(su,Who),e(x,Qho),e(x,lu),e(lu,fse),e(fse,Hho),e(lu,Uho),e(lu,AI),e(AI,Jho),e(lu,Yho),e(x,Kho),e(x,iu),e(iu,gse),e(gse,Zho),e(iu,euo),e(iu,yI),e(yI,ouo),e(iu,ruo),e(x,tuo),e(x,du),e(du,hse),e(hse,auo),e(du,nuo),e(du,LI),e(LI,suo),e(du,luo),e(x,iuo),e(x,cu),e(cu,use),e(use,duo),e(cu,cuo),e(cu,xI),e(xI,muo),e(cu,fuo),e(x,guo),e(x,mu),e(mu,pse),e(pse,huo),e(mu,uuo),e(mu,$I),e($I,puo),e(mu,_uo),e(x,buo),e(x,fu),e(fu,_se),e(_se,vuo),e(fu,Fuo),e(fu,kI),e(kI,Tuo),e(fu,Muo),e(x,Euo),e(x,gu),e(gu,bse),e(bse,Cuo),e(gu,wuo),e(gu,SI),e(SI,Auo),e(gu,yuo),e(x,Luo),e(x,hu),e(hu,vse),e(vse,xuo),e(hu,$uo),e(hu,RI),e(RI,kuo),e(hu,Suo),e(x,Ruo),e(x,uu),e(uu,Fse),e(Fse,Puo),e(uu,Buo),e(uu,PI),e(PI,Iuo),e(uu,quo),e(x,Nuo),e(x,pu),e(pu,Tse),e(Tse,juo),e(pu,Duo),e(pu,BI),e(BI,Guo),e(pu,Ouo),e(x,Vuo),e(x,_u),e(_u,Mse),e(Mse,Xuo),e(_u,zuo),e(_u,II),e(II,Wuo),e(_u,Quo),e(x,Huo),e(x,bu),e(bu,Ese),e(Ese,Uuo),e(bu,Juo),e(bu,qI),e(qI,Yuo),e(bu,Kuo),e(x,Zuo),e(x,vu),e(vu,Cse),e(Cse,epo),e(vu,opo),e(vu,NI),e(NI,rpo),e(vu,tpo),e(x,apo),e(x,Fu),e(Fu,wse),e(wse,npo),e(Fu,spo),e(Fu,jI),e(jI,lpo),e(Fu,ipo),e(x,dpo),e(x,Tu),e(Tu,Ase),e(Ase,cpo),e(Tu,mpo),e(Tu,DI),e(DI,fpo),e(Tu,gpo),e(x,hpo),e(x,Mu),e(Mu,yse),e(yse,upo),e(Mu,ppo),e(Mu,GI),e(GI,_po),e(Mu,bpo),e(x,vpo),e(x,Eu),e(Eu,Lse),e(Lse,Fpo),e(Eu,Tpo),e(Eu,OI),e(OI,Mpo),e(Eu,Epo),e(x,Cpo),e(x,Cu),e(Cu,xse),e(xse,wpo),e(Cu,Apo),e(Cu,VI),e(VI,ypo),e(Cu,Lpo),e(x,xpo),e(x,wu),e(wu,$se),e($se,$po),e(wu,kpo),e(wu,XI),e(XI,Spo),e(wu,Rpo),e(x,Ppo),e(x,Au),e(Au,kse),e(kse,Bpo),e(Au,Ipo),e(Au,zI),e(zI,qpo),e(Au,Npo),e(x,jpo),e(x,yu),e(yu,Sse),e(Sse,Dpo),e(yu,Gpo),e(yu,WI),e(WI,Opo),e(yu,Vpo),e(x,Xpo),e(x,Lu),e(Lu,Rse),e(Rse,zpo),e(Lu,Wpo),e(Lu,QI),e(QI,Qpo),e(Lu,Hpo),e(x,Upo),e(x,xu),e(xu,Pse),e(Pse,Jpo),e(xu,Ypo),e(xu,HI),e(HI,Kpo),e(xu,Zpo),e(x,e_o),e(x,$u),e($u,Bse),e(Bse,o_o),e($u,r_o),e($u,UI),e(UI,t_o),e($u,a_o),e(x,n_o),e(x,ku),e(ku,Ise),e(Ise,s_o),e(ku,l_o),e(ku,JI),e(JI,i_o),e(ku,d_o),e(x,c_o),e(x,Su),e(Su,qse),e(qse,m_o),e(Su,f_o),e(Su,YI),e(YI,g_o),e(Su,h_o),e(x,u_o),e(x,Ru),e(Ru,Nse),e(Nse,p_o),e(Ru,__o),e(Ru,KI),e(KI,b_o),e(Ru,v_o),e(x,F_o),e(x,Pu),e(Pu,jse),e(jse,T_o),e(Pu,M_o),e(Pu,ZI),e(ZI,E_o),e(Pu,C_o),e(x,w_o),e(x,Bu),e(Bu,Dse),e(Dse,A_o),e(Bu,y_o),e(Bu,eq),e(eq,L_o),e(Bu,x_o),e(x,$_o),e(x,Iu),e(Iu,Gse),e(Gse,k_o),e(Iu,S_o),e(Iu,oq),e(oq,R_o),e(Iu,P_o),e(x,B_o),e(x,Ps),e(Ps,Ose),e(Ose,I_o),e(Ps,q_o),e(Ps,rq),e(rq,N_o),e(Ps,j_o),e(Ps,tq),e(tq,D_o),e(Ps,G_o),e(x,O_o),e(x,qu),e(qu,Vse),e(Vse,V_o),e(qu,X_o),e(qu,aq),e(aq,z_o),e(qu,W_o),e(x,Q_o),e(x,Nu),e(Nu,Xse),e(Xse,H_o),e(Nu,U_o),e(Nu,nq),e(nq,J_o),e(Nu,Y_o),e(x,K_o),e(x,ju),e(ju,zse),e(zse,Z_o),e(ju,ebo),e(ju,sq),e(sq,obo),e(ju,rbo),e(x,tbo),e(x,Du),e(Du,Wse),e(Wse,abo),e(Du,nbo),e(Du,lq),e(lq,sbo),e(Du,lbo),e(x,ibo),e(x,Gu),e(Gu,Qse),e(Qse,dbo),e(Gu,cbo),e(Gu,iq),e(iq,mbo),e(Gu,fbo),e(x,gbo),e(x,Ou),e(Ou,Hse),e(Hse,hbo),e(Ou,ubo),e(Ou,dq),e(dq,pbo),e(Ou,_bo),e(x,bbo),e(x,Vu),e(Vu,Use),e(Use,vbo),e(Vu,Fbo),e(Vu,cq),e(cq,Tbo),e(Vu,Mbo),e(x,Ebo),e(x,Xu),e(Xu,Jse),e(Jse,Cbo),e(Xu,wbo),e(Xu,mq),e(mq,Abo),e(Xu,ybo),e(x,Lbo),e(x,zu),e(zu,Yse),e(Yse,xbo),e(zu,$bo),e(zu,fq),e(fq,kbo),e(zu,Sbo),e(x,Rbo),e(x,Wu),e(Wu,Kse),e(Kse,Pbo),e(Wu,Bbo),e(Wu,gq),e(gq,Ibo),e(Wu,qbo),e(x,Nbo),e(x,Qu),e(Qu,Zse),e(Zse,jbo),e(Qu,Dbo),e(Qu,hq),e(hq,Gbo),e(Qu,Obo),e(x,Vbo),e(x,Hu),e(Hu,ele),e(ele,Xbo),e(Hu,zbo),e(Hu,uq),e(uq,Wbo),e(Hu,Qbo),e(x,Hbo),e(x,Uu),e(Uu,ole),e(ole,Ubo),e(Uu,Jbo),e(Uu,pq),e(pq,Ybo),e(Uu,Kbo),e(x,Zbo),e(x,Ju),e(Ju,rle),e(rle,e2o),e(Ju,o2o),e(Ju,_q),e(_q,r2o),e(Ju,t2o),e(x,a2o),e(x,Yu),e(Yu,tle),e(tle,n2o),e(Yu,s2o),e(Yu,bq),e(bq,l2o),e(Yu,i2o),e(x,d2o),e(x,Ku),e(Ku,ale),e(ale,c2o),e(Ku,m2o),e(Ku,vq),e(vq,f2o),e(Ku,g2o),e(x,h2o),e(x,Zu),e(Zu,nle),e(nle,u2o),e(Zu,p2o),e(Zu,Fq),e(Fq,_2o),e(Zu,b2o),e(x,v2o),e(x,ep),e(ep,sle),e(sle,F2o),e(ep,T2o),e(ep,Tq),e(Tq,M2o),e(ep,E2o),e(x,C2o),e(x,op),e(op,lle),e(lle,w2o),e(op,A2o),e(op,Mq),e(Mq,y2o),e(op,L2o),e(x,x2o),e(x,rp),e(rp,ile),e(ile,$2o),e(rp,k2o),e(rp,Eq),e(Eq,S2o),e(rp,R2o),e(x,P2o),e(x,tp),e(tp,dle),e(dle,B2o),e(tp,I2o),e(tp,Cq),e(Cq,q2o),e(tp,N2o),e(x,j2o),e(x,ap),e(ap,cle),e(cle,D2o),e(ap,G2o),e(ap,wq),e(wq,O2o),e(ap,V2o),e(x,X2o),e(x,np),e(np,mle),e(mle,z2o),e(np,W2o),e(np,Aq),e(Aq,Q2o),e(np,H2o),e(x,U2o),e(x,sp),e(sp,fle),e(fle,J2o),e(sp,Y2o),e(sp,yq),e(yq,K2o),e(sp,Z2o),e(x,evo),e(x,lp),e(lp,gle),e(gle,ovo),e(lp,rvo),e(lp,Lq),e(Lq,tvo),e(lp,avo),e(x,nvo),e(x,ip),e(ip,hle),e(hle,svo),e(ip,lvo),e(ip,xq),e(xq,ivo),e(ip,dvo),e(x,cvo),e(x,dp),e(dp,ule),e(ule,mvo),e(dp,fvo),e(dp,$q),e($q,gvo),e(dp,hvo),e(x,uvo),e(x,cp),e(cp,ple),e(ple,pvo),e(cp,_vo),e(cp,kq),e(kq,bvo),e(cp,vvo),e(x,Fvo),e(x,mp),e(mp,_le),e(_le,Tvo),e(mp,Mvo),e(mp,Sq),e(Sq,Evo),e(mp,Cvo),e(x,wvo),e(x,fp),e(fp,ble),e(ble,Avo),e(fp,yvo),e(fp,Rq),e(Rq,Lvo),e(fp,xvo),e(x,$vo),e(x,gp),e(gp,vle),e(vle,kvo),e(gp,Svo),e(gp,Pq),e(Pq,Rvo),e(gp,Pvo),e(x,Bvo),e(x,hp),e(hp,Fle),e(Fle,Ivo),e(hp,qvo),e(hp,Bq),e(Bq,Nvo),e(hp,jvo),e(x,Dvo),e(x,up),e(up,Tle),e(Tle,Gvo),e(up,Ovo),e(up,Iq),e(Iq,Vvo),e(up,Xvo),e(x,zvo),e(x,pp),e(pp,Mle),e(Mle,Wvo),e(pp,Qvo),e(pp,qq),e(qq,Hvo),e(pp,Uvo),e(x,Jvo),e(x,_p),e(_p,Ele),e(Ele,Yvo),e(_p,Kvo),e(_p,Nq),e(Nq,Zvo),e(_p,eFo),e(x,oFo),e(x,bp),e(bp,Cle),e(Cle,rFo),e(bp,tFo),e(bp,jq),e(jq,aFo),e(bp,nFo),e(x,sFo),e(x,vp),e(vp,wle),e(wle,lFo),e(vp,iFo),e(vp,Dq),e(Dq,dFo),e(vp,cFo),e(x,mFo),e(x,Fp),e(Fp,Ale),e(Ale,fFo),e(Fp,gFo),e(Fp,Gq),e(Gq,hFo),e(Fp,uFo),e(x,pFo),e(x,Tp),e(Tp,yle),e(yle,_Fo),e(Tp,bFo),e(Tp,Oq),e(Oq,vFo),e(Tp,FFo),e(x,TFo),e(x,Mp),e(Mp,Lle),e(Lle,MFo),e(Mp,EFo),e(Mp,Vq),e(Vq,CFo),e(Mp,wFo),e(x,AFo),e(x,Ep),e(Ep,xle),e(xle,yFo),e(Ep,LFo),e(Ep,Xq),e(Xq,xFo),e(Ep,$Fo),e(x,kFo),e(x,Cp),e(Cp,$le),e($le,SFo),e(Cp,RFo),e(Cp,zq),e(zq,PFo),e(Cp,BFo),e(x,IFo),e(x,wp),e(wp,kle),e(kle,qFo),e(wp,NFo),e(wp,Wq),e(Wq,jFo),e(wp,DFo),e(x,GFo),e(x,Ap),e(Ap,Sle),e(Sle,OFo),e(Ap,VFo),e(Ap,Qq),e(Qq,XFo),e(Ap,zFo),e(x,WFo),e(x,yp),e(yp,Rle),e(Rle,QFo),e(yp,HFo),e(yp,Hq),e(Hq,UFo),e(yp,JFo),e(x,YFo),e(x,Lp),e(Lp,Ple),e(Ple,KFo),e(Lp,ZFo),e(Lp,Uq),e(Uq,e1o),e(Lp,o1o),e(x,r1o),e(x,xp),e(xp,Ble),e(Ble,t1o),e(xp,a1o),e(xp,Jq),e(Jq,n1o),e(xp,s1o),e(x,l1o),e(x,$p),e($p,Ile),e(Ile,i1o),e($p,d1o),e($p,Yq),e(Yq,c1o),e($p,m1o),e(x,f1o),e(x,kp),e(kp,qle),e(qle,g1o),e(kp,h1o),e(kp,Kq),e(Kq,u1o),e(kp,p1o),e(x,_1o),e(x,Sp),e(Sp,Nle),e(Nle,b1o),e(Sp,v1o),e(Sp,Zq),e(Zq,F1o),e(Sp,T1o),e(x,M1o),e(x,Rp),e(Rp,jle),e(jle,E1o),e(Rp,C1o),e(Rp,eN),e(eN,w1o),e(Rp,A1o),e(x,y1o),e(x,Pp),e(Pp,Dle),e(Dle,L1o),e(Pp,x1o),e(Pp,oN),e(oN,$1o),e(Pp,k1o),e(x,S1o),e(x,Bp),e(Bp,Gle),e(Gle,R1o),e(Bp,P1o),e(Bp,rN),e(rN,B1o),e(Bp,I1o),e(x,q1o),e(x,Ip),e(Ip,Ole),e(Ole,N1o),e(Ip,j1o),e(Ip,tN),e(tN,D1o),e(Ip,G1o),e(x,O1o),e(x,qp),e(qp,Vle),e(Vle,V1o),e(qp,X1o),e(qp,aN),e(aN,z1o),e(qp,W1o),e(x,Q1o),e(x,Np),e(Np,Xle),e(Xle,H1o),e(Np,U1o),e(Np,nN),e(nN,J1o),e(Np,Y1o),e(x,K1o),e(x,jp),e(jp,zle),e(zle,Z1o),e(jp,eTo),e(jp,sN),e(sN,oTo),e(jp,rTo),e(x,tTo),e(x,Dp),e(Dp,Wle),e(Wle,aTo),e(Dp,nTo),e(Dp,lN),e(lN,sTo),e(Dp,lTo),e(x,iTo),e(x,Gp),e(Gp,Qle),e(Qle,dTo),e(Gp,cTo),e(Gp,iN),e(iN,mTo),e(Gp,fTo),e(x,gTo),e(x,Op),e(Op,Hle),e(Hle,hTo),e(Op,uTo),e(Op,dN),e(dN,pTo),e(Op,_To),e(x,bTo),e(x,Vp),e(Vp,Ule),e(Ule,vTo),e(Vp,FTo),e(Vp,cN),e(cN,TTo),e(Vp,MTo),e(x,ETo),e(x,Xp),e(Xp,Jle),e(Jle,CTo),e(Xp,wTo),e(Xp,mN),e(mN,ATo),e(Xp,yTo),e(x,LTo),e(x,zp),e(zp,Yle),e(Yle,xTo),e(zp,$To),e(zp,fN),e(fN,kTo),e(zp,STo),e(x,RTo),e(x,Wp),e(Wp,Kle),e(Kle,PTo),e(Wp,BTo),e(Wp,gN),e(gN,ITo),e(Wp,qTo),e(x,NTo),e(x,Qp),e(Qp,Zle),e(Zle,jTo),e(Qp,DTo),e(Qp,hN),e(hN,GTo),e(Qp,OTo),e(x,VTo),e(x,Hp),e(Hp,eie),e(eie,XTo),e(Hp,zTo),e(Hp,uN),e(uN,WTo),e(Hp,QTo),e(x,HTo),e(x,Up),e(Up,oie),e(oie,UTo),e(Up,JTo),e(Up,pN),e(pN,YTo),e(Up,KTo),e(x,ZTo),e(x,Jp),e(Jp,rie),e(rie,eMo),e(Jp,oMo),e(Jp,_N),e(_N,rMo),e(Jp,tMo),e(Je,aMo),e(Je,Yp),e(Yp,nMo),e(Yp,tie),e(tie,sMo),e(Yp,lMo),e(Yp,aie),e(aie,iMo),e(Je,dMo),M(Kp,Je,null),b(m,Qqe,_),b(m,Li,_),e(Li,Zp),e(Zp,nie),M(Zy,nie,null),e(Li,cMo),e(Li,sie),e(sie,mMo),b(m,Hqe,_),b(m,xo,_),M(eL,xo,null),e(xo,fMo),e(xo,xi),e(xi,gMo),e(xi,bN),e(bN,hMo),e(xi,uMo),e(xi,vN),e(vN,pMo),e(xi,_Mo),e(xo,bMo),e(xo,oL),e(oL,vMo),e(oL,lie),e(lie,FMo),e(oL,TMo),e(xo,MMo),e(xo,at),M(rL,at,null),e(at,EMo),e(at,iie),e(iie,CMo),e(at,wMo),e(at,$i),e($i,AMo),e($i,die),e(die,yMo),e($i,LMo),e($i,FN),e(FN,xMo),e($i,$Mo),e(at,kMo),M(e_,at,null),e(xo,SMo),e(xo,Ye),M(tL,Ye,null),e(Ye,RMo),e(Ye,cie),e(cie,PMo),e(Ye,BMo),e(Ye,xa),e(xa,IMo),e(xa,mie),e(mie,qMo),e(xa,NMo),e(xa,fie),e(fie,jMo),e(xa,DMo),e(xa,gie),e(gie,GMo),e(xa,OMo),e(Ye,VMo),e(Ye,G),e(G,o_),e(o_,hie),e(hie,XMo),e(o_,zMo),e(o_,TN),e(TN,WMo),e(o_,QMo),e(G,HMo),e(G,r_),e(r_,uie),e(uie,UMo),e(r_,JMo),e(r_,MN),e(MN,YMo),e(r_,KMo),e(G,ZMo),e(G,t_),e(t_,pie),e(pie,e4o),e(t_,o4o),e(t_,EN),e(EN,r4o),e(t_,t4o),e(G,a4o),e(G,a_),e(a_,_ie),e(_ie,n4o),e(a_,s4o),e(a_,CN),e(CN,l4o),e(a_,i4o),e(G,d4o),e(G,n_),e(n_,bie),e(bie,c4o),e(n_,m4o),e(n_,wN),e(wN,f4o),e(n_,g4o),e(G,h4o),e(G,s_),e(s_,vie),e(vie,u4o),e(s_,p4o),e(s_,AN),e(AN,_4o),e(s_,b4o),e(G,v4o),e(G,l_),e(l_,Fie),e(Fie,F4o),e(l_,T4o),e(l_,yN),e(yN,M4o),e(l_,E4o),e(G,C4o),e(G,i_),e(i_,Tie),e(Tie,w4o),e(i_,A4o),e(i_,LN),e(LN,y4o),e(i_,L4o),e(G,x4o),e(G,d_),e(d_,Mie),e(Mie,$4o),e(d_,k4o),e(d_,xN),e(xN,S4o),e(d_,R4o),e(G,P4o),e(G,c_),e(c_,Eie),e(Eie,B4o),e(c_,I4o),e(c_,$N),e($N,q4o),e(c_,N4o),e(G,j4o),e(G,m_),e(m_,Cie),e(Cie,D4o),e(m_,G4o),e(m_,kN),e(kN,O4o),e(m_,V4o),e(G,X4o),e(G,f_),e(f_,wie),e(wie,z4o),e(f_,W4o),e(f_,SN),e(SN,Q4o),e(f_,H4o),e(G,U4o),e(G,g_),e(g_,Aie),e(Aie,J4o),e(g_,Y4o),e(g_,RN),e(RN,K4o),e(g_,Z4o),e(G,eEo),e(G,h_),e(h_,yie),e(yie,oEo),e(h_,rEo),e(h_,PN),e(PN,tEo),e(h_,aEo),e(G,nEo),e(G,u_),e(u_,Lie),e(Lie,sEo),e(u_,lEo),e(u_,BN),e(BN,iEo),e(u_,dEo),e(G,cEo),e(G,p_),e(p_,xie),e(xie,mEo),e(p_,fEo),e(p_,IN),e(IN,gEo),e(p_,hEo),e(G,uEo),e(G,__),e(__,$ie),e($ie,pEo),e(__,_Eo),e(__,qN),e(qN,bEo),e(__,vEo),e(G,FEo),e(G,b_),e(b_,kie),e(kie,TEo),e(b_,MEo),e(b_,NN),e(NN,EEo),e(b_,CEo),e(G,wEo),e(G,v_),e(v_,Sie),e(Sie,AEo),e(v_,yEo),e(v_,jN),e(jN,LEo),e(v_,xEo),e(G,$Eo),e(G,F_),e(F_,Rie),e(Rie,kEo),e(F_,SEo),e(F_,DN),e(DN,REo),e(F_,PEo),e(G,BEo),e(G,T_),e(T_,Pie),e(Pie,IEo),e(T_,qEo),e(T_,GN),e(GN,NEo),e(T_,jEo),e(G,DEo),e(G,M_),e(M_,Bie),e(Bie,GEo),e(M_,OEo),e(M_,ON),e(ON,VEo),e(M_,XEo),e(G,zEo),e(G,E_),e(E_,Iie),e(Iie,WEo),e(E_,QEo),e(E_,VN),e(VN,HEo),e(E_,UEo),e(G,JEo),e(G,C_),e(C_,qie),e(qie,YEo),e(C_,KEo),e(C_,XN),e(XN,ZEo),e(C_,eCo),e(G,oCo),e(G,w_),e(w_,Nie),e(Nie,rCo),e(w_,tCo),e(w_,zN),e(zN,aCo),e(w_,nCo),e(G,sCo),e(G,A_),e(A_,jie),e(jie,lCo),e(A_,iCo),e(A_,WN),e(WN,dCo),e(A_,cCo),e(G,mCo),e(G,y_),e(y_,Die),e(Die,fCo),e(y_,gCo),e(y_,QN),e(QN,hCo),e(y_,uCo),e(G,pCo),e(G,L_),e(L_,Gie),e(Gie,_Co),e(L_,bCo),e(L_,HN),e(HN,vCo),e(L_,FCo),e(G,TCo),e(G,x_),e(x_,Oie),e(Oie,MCo),e(x_,ECo),e(x_,UN),e(UN,CCo),e(x_,wCo),e(G,ACo),e(G,$_),e($_,Vie),e(Vie,yCo),e($_,LCo),e($_,JN),e(JN,xCo),e($_,$Co),e(G,kCo),e(G,k_),e(k_,Xie),e(Xie,SCo),e(k_,RCo),e(k_,YN),e(YN,PCo),e(k_,BCo),e(G,ICo),e(G,S_),e(S_,zie),e(zie,qCo),e(S_,NCo),e(S_,KN),e(KN,jCo),e(S_,DCo),e(G,GCo),e(G,R_),e(R_,Wie),e(Wie,OCo),e(R_,VCo),e(R_,ZN),e(ZN,XCo),e(R_,zCo),e(G,WCo),e(G,P_),e(P_,Qie),e(Qie,QCo),e(P_,HCo),e(P_,ej),e(ej,UCo),e(P_,JCo),e(G,YCo),e(G,B_),e(B_,Hie),e(Hie,KCo),e(B_,ZCo),e(B_,oj),e(oj,e5o),e(B_,o5o),e(G,r5o),e(G,I_),e(I_,Uie),e(Uie,t5o),e(I_,a5o),e(I_,rj),e(rj,n5o),e(I_,s5o),e(G,l5o),e(G,q_),e(q_,Jie),e(Jie,i5o),e(q_,d5o),e(q_,tj),e(tj,c5o),e(q_,m5o),e(G,f5o),e(G,N_),e(N_,Yie),e(Yie,g5o),e(N_,h5o),e(N_,aj),e(aj,u5o),e(N_,p5o),e(G,_5o),e(G,j_),e(j_,Kie),e(Kie,b5o),e(j_,v5o),e(j_,nj),e(nj,F5o),e(j_,T5o),e(G,M5o),e(G,D_),e(D_,Zie),e(Zie,E5o),e(D_,C5o),e(D_,sj),e(sj,w5o),e(D_,A5o),e(G,y5o),e(G,G_),e(G_,ede),e(ede,L5o),e(G_,x5o),e(G_,lj),e(lj,$5o),e(G_,k5o),e(G,S5o),e(G,O_),e(O_,ode),e(ode,R5o),e(O_,P5o),e(O_,ij),e(ij,B5o),e(O_,I5o),e(Ye,q5o),e(Ye,V_),e(V_,N5o),e(V_,rde),e(rde,j5o),e(V_,D5o),e(V_,tde),e(tde,G5o),e(Ye,O5o),M(X_,Ye,null),b(m,Uqe,_),b(m,ki,_),e(ki,z_),e(z_,ade),M(aL,ade,null),e(ki,V5o),e(ki,nde),e(nde,X5o),b(m,Jqe,_),b(m,$o,_),M(nL,$o,null),e($o,z5o),e($o,Si),e(Si,W5o),e(Si,dj),e(dj,Q5o),e(Si,H5o),e(Si,cj),e(cj,U5o),e(Si,J5o),e($o,Y5o),e($o,sL),e(sL,K5o),e(sL,sde),e(sde,Z5o),e(sL,e3o),e($o,o3o),e($o,nt),M(lL,nt,null),e(nt,r3o),e(nt,lde),e(lde,t3o),e(nt,a3o),e(nt,Ri),e(Ri,n3o),e(Ri,ide),e(ide,s3o),e(Ri,l3o),e(Ri,mj),e(mj,i3o),e(Ri,d3o),e(nt,c3o),M(W_,nt,null),e($o,m3o),e($o,Ke),M(iL,Ke,null),e(Ke,f3o),e(Ke,dde),e(dde,g3o),e(Ke,h3o),e(Ke,$a),e($a,u3o),e($a,cde),e(cde,p3o),e($a,_3o),e($a,mde),e(mde,b3o),e($a,v3o),e($a,fde),e(fde,F3o),e($a,T3o),e(Ke,M3o),e(Ke,z),e(z,Q_),e(Q_,gde),e(gde,E3o),e(Q_,C3o),e(Q_,fj),e(fj,w3o),e(Q_,A3o),e(z,y3o),e(z,H_),e(H_,hde),e(hde,L3o),e(H_,x3o),e(H_,gj),e(gj,$3o),e(H_,k3o),e(z,S3o),e(z,U_),e(U_,ude),e(ude,R3o),e(U_,P3o),e(U_,hj),e(hj,B3o),e(U_,I3o),e(z,q3o),e(z,J_),e(J_,pde),e(pde,N3o),e(J_,j3o),e(J_,uj),e(uj,D3o),e(J_,G3o),e(z,O3o),e(z,Y_),e(Y_,_de),e(_de,V3o),e(Y_,X3o),e(Y_,pj),e(pj,z3o),e(Y_,W3o),e(z,Q3o),e(z,K_),e(K_,bde),e(bde,H3o),e(K_,U3o),e(K_,_j),e(_j,J3o),e(K_,Y3o),e(z,K3o),e(z,Z_),e(Z_,vde),e(vde,Z3o),e(Z_,ewo),e(Z_,bj),e(bj,owo),e(Z_,rwo),e(z,two),e(z,eb),e(eb,Fde),e(Fde,awo),e(eb,nwo),e(eb,vj),e(vj,swo),e(eb,lwo),e(z,iwo),e(z,ob),e(ob,Tde),e(Tde,dwo),e(ob,cwo),e(ob,Fj),e(Fj,mwo),e(ob,fwo),e(z,gwo),e(z,rb),e(rb,Mde),e(Mde,hwo),e(rb,uwo),e(rb,Tj),e(Tj,pwo),e(rb,_wo),e(z,bwo),e(z,tb),e(tb,Ede),e(Ede,vwo),e(tb,Fwo),e(tb,Mj),e(Mj,Two),e(tb,Mwo),e(z,Ewo),e(z,ab),e(ab,Cde),e(Cde,Cwo),e(ab,wwo),e(ab,Ej),e(Ej,Awo),e(ab,ywo),e(z,Lwo),e(z,nb),e(nb,wde),e(wde,xwo),e(nb,$wo),e(nb,Cj),e(Cj,kwo),e(nb,Swo),e(z,Rwo),e(z,sb),e(sb,Ade),e(Ade,Pwo),e(sb,Bwo),e(sb,wj),e(wj,Iwo),e(sb,qwo),e(z,Nwo),e(z,lb),e(lb,yde),e(yde,jwo),e(lb,Dwo),e(lb,Aj),e(Aj,Gwo),e(lb,Owo),e(z,Vwo),e(z,ib),e(ib,Lde),e(Lde,Xwo),e(ib,zwo),e(ib,yj),e(yj,Wwo),e(ib,Qwo),e(z,Hwo),e(z,db),e(db,xde),e(xde,Uwo),e(db,Jwo),e(db,Lj),e(Lj,Ywo),e(db,Kwo),e(z,Zwo),e(z,cb),e(cb,$de),e($de,e0o),e(cb,o0o),e(cb,xj),e(xj,r0o),e(cb,t0o),e(z,a0o),e(z,mb),e(mb,kde),e(kde,n0o),e(mb,s0o),e(mb,$j),e($j,l0o),e(mb,i0o),e(z,d0o),e(z,fb),e(fb,Sde),e(Sde,c0o),e(fb,m0o),e(fb,kj),e(kj,f0o),e(fb,g0o),e(z,h0o),e(z,gb),e(gb,Rde),e(Rde,u0o),e(gb,p0o),e(gb,Sj),e(Sj,_0o),e(gb,b0o),e(z,v0o),e(z,hb),e(hb,Pde),e(Pde,F0o),e(hb,T0o),e(hb,Rj),e(Rj,M0o),e(hb,E0o),e(z,C0o),e(z,ub),e(ub,Bde),e(Bde,w0o),e(ub,A0o),e(ub,Pj),e(Pj,y0o),e(ub,L0o),e(z,x0o),e(z,pb),e(pb,Ide),e(Ide,$0o),e(pb,k0o),e(pb,Bj),e(Bj,S0o),e(pb,R0o),e(z,P0o),e(z,_b),e(_b,qde),e(qde,B0o),e(_b,I0o),e(_b,Ij),e(Ij,q0o),e(_b,N0o),e(z,j0o),e(z,bb),e(bb,Nde),e(Nde,D0o),e(bb,G0o),e(bb,qj),e(qj,O0o),e(bb,V0o),e(z,X0o),e(z,vb),e(vb,jde),e(jde,z0o),e(vb,W0o),e(vb,Nj),e(Nj,Q0o),e(vb,H0o),e(z,U0o),e(z,Fb),e(Fb,Dde),e(Dde,J0o),e(Fb,Y0o),e(Fb,jj),e(jj,K0o),e(Fb,Z0o),e(z,eAo),e(z,Tb),e(Tb,Gde),e(Gde,oAo),e(Tb,rAo),e(Tb,Dj),e(Dj,tAo),e(Tb,aAo),e(z,nAo),e(z,Mb),e(Mb,Ode),e(Ode,sAo),e(Mb,lAo),e(Mb,Gj),e(Gj,iAo),e(Mb,dAo),e(z,cAo),e(z,Eb),e(Eb,Vde),e(Vde,mAo),e(Eb,fAo),e(Eb,Oj),e(Oj,gAo),e(Eb,hAo),e(z,uAo),e(z,Cb),e(Cb,Xde),e(Xde,pAo),e(Cb,_Ao),e(Cb,Vj),e(Vj,bAo),e(Cb,vAo),e(z,FAo),e(z,wb),e(wb,zde),e(zde,TAo),e(wb,MAo),e(wb,Xj),e(Xj,EAo),e(wb,CAo),e(z,wAo),e(z,Ab),e(Ab,Wde),e(Wde,AAo),e(Ab,yAo),e(Ab,zj),e(zj,LAo),e(Ab,xAo),e(z,$Ao),e(z,yb),e(yb,Qde),e(Qde,kAo),e(yb,SAo),e(yb,Wj),e(Wj,RAo),e(yb,PAo),e(z,BAo),e(z,Lb),e(Lb,Hde),e(Hde,IAo),e(Lb,qAo),e(Lb,Qj),e(Qj,NAo),e(Lb,jAo),e(Ke,DAo),e(Ke,xb),e(xb,GAo),e(xb,Ude),e(Ude,OAo),e(xb,VAo),e(xb,Jde),e(Jde,XAo),e(Ke,zAo),M($b,Ke,null),b(m,Yqe,_),b(m,Pi,_),e(Pi,kb),e(kb,Yde),M(dL,Yde,null),e(Pi,WAo),e(Pi,Kde),e(Kde,QAo),b(m,Kqe,_),b(m,ko,_),M(cL,ko,null),e(ko,HAo),e(ko,Bi),e(Bi,UAo),e(Bi,Hj),e(Hj,JAo),e(Bi,YAo),e(Bi,Uj),e(Uj,KAo),e(Bi,ZAo),e(ko,e6o),e(ko,mL),e(mL,o6o),e(mL,Zde),e(Zde,r6o),e(mL,t6o),e(ko,a6o),e(ko,st),M(fL,st,null),e(st,n6o),e(st,ece),e(ece,s6o),e(st,l6o),e(st,Ii),e(Ii,i6o),e(Ii,oce),e(oce,d6o),e(Ii,c6o),e(Ii,Jj),e(Jj,m6o),e(Ii,f6o),e(st,g6o),M(Sb,st,null),e(ko,h6o),e(ko,Ze),M(gL,Ze,null),e(Ze,u6o),e(Ze,rce),e(rce,p6o),e(Ze,_6o),e(Ze,ka),e(ka,b6o),e(ka,tce),e(tce,v6o),e(ka,F6o),e(ka,ace),e(ace,T6o),e(ka,M6o),e(ka,nce),e(nce,E6o),e(ka,C6o),e(Ze,w6o),e(Ze,W),e(W,Rb),e(Rb,sce),e(sce,A6o),e(Rb,y6o),e(Rb,Yj),e(Yj,L6o),e(Rb,x6o),e(W,$6o),e(W,Pb),e(Pb,lce),e(lce,k6o),e(Pb,S6o),e(Pb,Kj),e(Kj,R6o),e(Pb,P6o),e(W,B6o),e(W,Bb),e(Bb,ice),e(ice,I6o),e(Bb,q6o),e(Bb,Zj),e(Zj,N6o),e(Bb,j6o),e(W,D6o),e(W,Ib),e(Ib,dce),e(dce,G6o),e(Ib,O6o),e(Ib,eD),e(eD,V6o),e(Ib,X6o),e(W,z6o),e(W,qb),e(qb,cce),e(cce,W6o),e(qb,Q6o),e(qb,oD),e(oD,H6o),e(qb,U6o),e(W,J6o),e(W,Nb),e(Nb,mce),e(mce,Y6o),e(Nb,K6o),e(Nb,rD),e(rD,Z6o),e(Nb,eyo),e(W,oyo),e(W,jb),e(jb,fce),e(fce,ryo),e(jb,tyo),e(jb,tD),e(tD,ayo),e(jb,nyo),e(W,syo),e(W,Db),e(Db,gce),e(gce,lyo),e(Db,iyo),e(Db,aD),e(aD,dyo),e(Db,cyo),e(W,myo),e(W,Gb),e(Gb,hce),e(hce,fyo),e(Gb,gyo),e(Gb,nD),e(nD,hyo),e(Gb,uyo),e(W,pyo),e(W,Ob),e(Ob,uce),e(uce,_yo),e(Ob,byo),e(Ob,sD),e(sD,vyo),e(Ob,Fyo),e(W,Tyo),e(W,Vb),e(Vb,pce),e(pce,Myo),e(Vb,Eyo),e(Vb,lD),e(lD,Cyo),e(Vb,wyo),e(W,Ayo),e(W,Xb),e(Xb,_ce),e(_ce,yyo),e(Xb,Lyo),e(Xb,iD),e(iD,xyo),e(Xb,$yo),e(W,kyo),e(W,zb),e(zb,bce),e(bce,Syo),e(zb,Ryo),e(zb,dD),e(dD,Pyo),e(zb,Byo),e(W,Iyo),e(W,Wb),e(Wb,vce),e(vce,qyo),e(Wb,Nyo),e(Wb,cD),e(cD,jyo),e(Wb,Dyo),e(W,Gyo),e(W,Qb),e(Qb,Fce),e(Fce,Oyo),e(Qb,Vyo),e(Qb,mD),e(mD,Xyo),e(Qb,zyo),e(W,Wyo),e(W,Hb),e(Hb,Tce),e(Tce,Qyo),e(Hb,Hyo),e(Hb,fD),e(fD,Uyo),e(Hb,Jyo),e(W,Yyo),e(W,Ub),e(Ub,Mce),e(Mce,Kyo),e(Ub,Zyo),e(Ub,gD),e(gD,eLo),e(Ub,oLo),e(W,rLo),e(W,Jb),e(Jb,Ece),e(Ece,tLo),e(Jb,aLo),e(Jb,hD),e(hD,nLo),e(Jb,sLo),e(W,lLo),e(W,Yb),e(Yb,Cce),e(Cce,iLo),e(Yb,dLo),e(Yb,uD),e(uD,cLo),e(Yb,mLo),e(W,fLo),e(W,Kb),e(Kb,wce),e(wce,gLo),e(Kb,hLo),e(Kb,pD),e(pD,uLo),e(Kb,pLo),e(W,_Lo),e(W,Zb),e(Zb,Ace),e(Ace,bLo),e(Zb,vLo),e(Zb,_D),e(_D,FLo),e(Zb,TLo),e(W,MLo),e(W,e2),e(e2,yce),e(yce,ELo),e(e2,CLo),e(e2,bD),e(bD,wLo),e(e2,ALo),e(W,yLo),e(W,o2),e(o2,Lce),e(Lce,LLo),e(o2,xLo),e(o2,vD),e(vD,$Lo),e(o2,kLo),e(W,SLo),e(W,r2),e(r2,xce),e(xce,RLo),e(r2,PLo),e(r2,FD),e(FD,BLo),e(r2,ILo),e(W,qLo),e(W,t2),e(t2,$ce),e($ce,NLo),e(t2,jLo),e(t2,TD),e(TD,DLo),e(t2,GLo),e(W,OLo),e(W,a2),e(a2,kce),e(kce,VLo),e(a2,XLo),e(a2,MD),e(MD,zLo),e(a2,WLo),e(W,QLo),e(W,n2),e(n2,Sce),e(Sce,HLo),e(n2,ULo),e(n2,ED),e(ED,JLo),e(n2,YLo),e(W,KLo),e(W,s2),e(s2,Rce),e(Rce,ZLo),e(s2,e8o),e(s2,CD),e(CD,o8o),e(s2,r8o),e(W,t8o),e(W,l2),e(l2,Pce),e(Pce,a8o),e(l2,n8o),e(l2,wD),e(wD,s8o),e(l2,l8o),e(W,i8o),e(W,i2),e(i2,Bce),e(Bce,d8o),e(i2,c8o),e(i2,AD),e(AD,m8o),e(i2,f8o),e(W,g8o),e(W,d2),e(d2,Ice),e(Ice,h8o),e(d2,u8o),e(d2,qce),e(qce,p8o),e(d2,_8o),e(W,b8o),e(W,c2),e(c2,Nce),e(Nce,v8o),e(c2,F8o),e(c2,yD),e(yD,T8o),e(c2,M8o),e(W,E8o),e(W,m2),e(m2,jce),e(jce,C8o),e(m2,w8o),e(m2,LD),e(LD,A8o),e(m2,y8o),e(W,L8o),e(W,f2),e(f2,Dce),e(Dce,x8o),e(f2,$8o),e(f2,xD),e(xD,k8o),e(f2,S8o),e(W,R8o),e(W,g2),e(g2,Gce),e(Gce,P8o),e(g2,B8o),e(g2,$D),e($D,I8o),e(g2,q8o),e(Ze,N8o),e(Ze,h2),e(h2,j8o),e(h2,Oce),e(Oce,D8o),e(h2,G8o),e(h2,Vce),e(Vce,O8o),e(Ze,V8o),M(u2,Ze,null),b(m,Zqe,_),b(m,qi,_),e(qi,p2),e(p2,Xce),M(hL,Xce,null),e(qi,X8o),e(qi,zce),e(zce,z8o),b(m,eNe,_),b(m,So,_),M(uL,So,null),e(So,W8o),e(So,Ni),e(Ni,Q8o),e(Ni,kD),e(kD,H8o),e(Ni,U8o),e(Ni,SD),e(SD,J8o),e(Ni,Y8o),e(So,K8o),e(So,pL),e(pL,Z8o),e(pL,Wce),e(Wce,e7o),e(pL,o7o),e(So,r7o),e(So,lt),M(_L,lt,null),e(lt,t7o),e(lt,Qce),e(Qce,a7o),e(lt,n7o),e(lt,ji),e(ji,s7o),e(ji,Hce),e(Hce,l7o),e(ji,i7o),e(ji,RD),e(RD,d7o),e(ji,c7o),e(lt,m7o),M(_2,lt,null),e(So,f7o),e(So,eo),M(bL,eo,null),e(eo,g7o),e(eo,Uce),e(Uce,h7o),e(eo,u7o),e(eo,Sa),e(Sa,p7o),e(Sa,Jce),e(Jce,_7o),e(Sa,b7o),e(Sa,Yce),e(Yce,v7o),e(Sa,F7o),e(Sa,Kce),e(Kce,T7o),e(Sa,M7o),e(eo,E7o),e(eo,pe),e(pe,b2),e(b2,Zce),e(Zce,C7o),e(b2,w7o),e(b2,PD),e(PD,A7o),e(b2,y7o),e(pe,L7o),e(pe,v2),e(v2,eme),e(eme,x7o),e(v2,$7o),e(v2,BD),e(BD,k7o),e(v2,S7o),e(pe,R7o),e(pe,F2),e(F2,ome),e(ome,P7o),e(F2,B7o),e(F2,ID),e(ID,I7o),e(F2,q7o),e(pe,N7o),e(pe,T2),e(T2,rme),e(rme,j7o),e(T2,D7o),e(T2,qD),e(qD,G7o),e(T2,O7o),e(pe,V7o),e(pe,M2),e(M2,tme),e(tme,X7o),e(M2,z7o),e(M2,ND),e(ND,W7o),e(M2,Q7o),e(pe,H7o),e(pe,E2),e(E2,ame),e(ame,U7o),e(E2,J7o),e(E2,jD),e(jD,Y7o),e(E2,K7o),e(pe,Z7o),e(pe,C2),e(C2,nme),e(nme,e9o),e(C2,o9o),e(C2,DD),e(DD,r9o),e(C2,t9o),e(pe,a9o),e(pe,w2),e(w2,sme),e(sme,n9o),e(w2,s9o),e(w2,GD),e(GD,l9o),e(w2,i9o),e(pe,d9o),e(pe,A2),e(A2,lme),e(lme,c9o),e(A2,m9o),e(A2,OD),e(OD,f9o),e(A2,g9o),e(pe,h9o),e(pe,y2),e(y2,ime),e(ime,u9o),e(y2,p9o),e(y2,VD),e(VD,_9o),e(y2,b9o),e(pe,v9o),e(pe,L2),e(L2,dme),e(dme,F9o),e(L2,T9o),e(L2,XD),e(XD,M9o),e(L2,E9o),e(pe,C9o),e(pe,x2),e(x2,cme),e(cme,w9o),e(x2,A9o),e(x2,zD),e(zD,y9o),e(x2,L9o),e(pe,x9o),e(pe,$2),e($2,mme),e(mme,$9o),e($2,k9o),e($2,WD),e(WD,S9o),e($2,R9o),e(pe,P9o),e(pe,k2),e(k2,fme),e(fme,B9o),e(k2,I9o),e(k2,QD),e(QD,q9o),e(k2,N9o),e(pe,j9o),e(pe,S2),e(S2,gme),e(gme,D9o),e(S2,G9o),e(S2,HD),e(HD,O9o),e(S2,V9o),e(pe,X9o),e(pe,R2),e(R2,hme),e(hme,z9o),e(R2,W9o),e(R2,UD),e(UD,Q9o),e(R2,H9o),e(eo,U9o),e(eo,P2),e(P2,J9o),e(P2,ume),e(ume,Y9o),e(P2,K9o),e(P2,pme),e(pme,Z9o),e(eo,exo),M(B2,eo,null),b(m,oNe,_),b(m,Di,_),e(Di,I2),e(I2,_me),M(vL,_me,null),e(Di,oxo),e(Di,bme),e(bme,rxo),b(m,rNe,_),b(m,Ro,_),M(FL,Ro,null),e(Ro,txo),e(Ro,Gi),e(Gi,axo),e(Gi,JD),e(JD,nxo),e(Gi,sxo),e(Gi,YD),e(YD,lxo),e(Gi,ixo),e(Ro,dxo),e(Ro,TL),e(TL,cxo),e(TL,vme),e(vme,mxo),e(TL,fxo),e(Ro,gxo),e(Ro,it),M(ML,it,null),e(it,hxo),e(it,Fme),e(Fme,uxo),e(it,pxo),e(it,Oi),e(Oi,_xo),e(Oi,Tme),e(Tme,bxo),e(Oi,vxo),e(Oi,KD),e(KD,Fxo),e(Oi,Txo),e(it,Mxo),M(q2,it,null),e(Ro,Exo),e(Ro,oo),M(EL,oo,null),e(oo,Cxo),e(oo,Mme),e(Mme,wxo),e(oo,Axo),e(oo,Ra),e(Ra,yxo),e(Ra,Eme),e(Eme,Lxo),e(Ra,xxo),e(Ra,Cme),e(Cme,$xo),e(Ra,kxo),e(Ra,wme),e(wme,Sxo),e(Ra,Rxo),e(oo,Pxo),e(oo,q),e(q,N2),e(N2,Ame),e(Ame,Bxo),e(N2,Ixo),e(N2,ZD),e(ZD,qxo),e(N2,Nxo),e(q,jxo),e(q,j2),e(j2,yme),e(yme,Dxo),e(j2,Gxo),e(j2,eG),e(eG,Oxo),e(j2,Vxo),e(q,Xxo),e(q,D2),e(D2,Lme),e(Lme,zxo),e(D2,Wxo),e(D2,oG),e(oG,Qxo),e(D2,Hxo),e(q,Uxo),e(q,G2),e(G2,xme),e(xme,Jxo),e(G2,Yxo),e(G2,rG),e(rG,Kxo),e(G2,Zxo),e(q,e$o),e(q,O2),e(O2,$me),e($me,o$o),e(O2,r$o),e(O2,tG),e(tG,t$o),e(O2,a$o),e(q,n$o),e(q,V2),e(V2,kme),e(kme,s$o),e(V2,l$o),e(V2,aG),e(aG,i$o),e(V2,d$o),e(q,c$o),e(q,X2),e(X2,Sme),e(Sme,m$o),e(X2,f$o),e(X2,nG),e(nG,g$o),e(X2,h$o),e(q,u$o),e(q,z2),e(z2,Rme),e(Rme,p$o),e(z2,_$o),e(z2,sG),e(sG,b$o),e(z2,v$o),e(q,F$o),e(q,W2),e(W2,Pme),e(Pme,T$o),e(W2,M$o),e(W2,lG),e(lG,E$o),e(W2,C$o),e(q,w$o),e(q,Q2),e(Q2,Bme),e(Bme,A$o),e(Q2,y$o),e(Q2,iG),e(iG,L$o),e(Q2,x$o),e(q,$$o),e(q,H2),e(H2,Ime),e(Ime,k$o),e(H2,S$o),e(H2,dG),e(dG,R$o),e(H2,P$o),e(q,B$o),e(q,U2),e(U2,qme),e(qme,I$o),e(U2,q$o),e(U2,cG),e(cG,N$o),e(U2,j$o),e(q,D$o),e(q,J2),e(J2,Nme),e(Nme,G$o),e(J2,O$o),e(J2,mG),e(mG,V$o),e(J2,X$o),e(q,z$o),e(q,Y2),e(Y2,jme),e(jme,W$o),e(Y2,Q$o),e(Y2,fG),e(fG,H$o),e(Y2,U$o),e(q,J$o),e(q,K2),e(K2,Dme),e(Dme,Y$o),e(K2,K$o),e(K2,gG),e(gG,Z$o),e(K2,eko),e(q,oko),e(q,Z2),e(Z2,Gme),e(Gme,rko),e(Z2,tko),e(Z2,hG),e(hG,ako),e(Z2,nko),e(q,sko),e(q,ev),e(ev,Ome),e(Ome,lko),e(ev,iko),e(ev,uG),e(uG,dko),e(ev,cko),e(q,mko),e(q,ov),e(ov,Vme),e(Vme,fko),e(ov,gko),e(ov,pG),e(pG,hko),e(ov,uko),e(q,pko),e(q,rv),e(rv,Xme),e(Xme,_ko),e(rv,bko),e(rv,_G),e(_G,vko),e(rv,Fko),e(q,Tko),e(q,tv),e(tv,zme),e(zme,Mko),e(tv,Eko),e(tv,bG),e(bG,Cko),e(tv,wko),e(q,Ako),e(q,av),e(av,Wme),e(Wme,yko),e(av,Lko),e(av,vG),e(vG,xko),e(av,$ko),e(q,kko),e(q,nv),e(nv,Qme),e(Qme,Sko),e(nv,Rko),e(nv,FG),e(FG,Pko),e(nv,Bko),e(q,Iko),e(q,sv),e(sv,Hme),e(Hme,qko),e(sv,Nko),e(sv,TG),e(TG,jko),e(sv,Dko),e(q,Gko),e(q,lv),e(lv,Ume),e(Ume,Oko),e(lv,Vko),e(lv,MG),e(MG,Xko),e(lv,zko),e(q,Wko),e(q,iv),e(iv,Jme),e(Jme,Qko),e(iv,Hko),e(iv,EG),e(EG,Uko),e(iv,Jko),e(q,Yko),e(q,dv),e(dv,Yme),e(Yme,Kko),e(dv,Zko),e(dv,CG),e(CG,eSo),e(dv,oSo),e(q,rSo),e(q,cv),e(cv,Kme),e(Kme,tSo),e(cv,aSo),e(cv,wG),e(wG,nSo),e(cv,sSo),e(q,lSo),e(q,mv),e(mv,Zme),e(Zme,iSo),e(mv,dSo),e(mv,AG),e(AG,cSo),e(mv,mSo),e(q,fSo),e(q,fv),e(fv,efe),e(efe,gSo),e(fv,hSo),e(fv,yG),e(yG,uSo),e(fv,pSo),e(q,_So),e(q,gv),e(gv,ofe),e(ofe,bSo),e(gv,vSo),e(gv,LG),e(LG,FSo),e(gv,TSo),e(q,MSo),e(q,hv),e(hv,rfe),e(rfe,ESo),e(hv,CSo),e(hv,xG),e(xG,wSo),e(hv,ASo),e(q,ySo),e(q,uv),e(uv,tfe),e(tfe,LSo),e(uv,xSo),e(uv,$G),e($G,$So),e(uv,kSo),e(q,SSo),e(q,pv),e(pv,afe),e(afe,RSo),e(pv,PSo),e(pv,kG),e(kG,BSo),e(pv,ISo),e(q,qSo),e(q,_v),e(_v,nfe),e(nfe,NSo),e(_v,jSo),e(_v,SG),e(SG,DSo),e(_v,GSo),e(q,OSo),e(q,bv),e(bv,sfe),e(sfe,VSo),e(bv,XSo),e(bv,RG),e(RG,zSo),e(bv,WSo),e(q,QSo),e(q,vv),e(vv,lfe),e(lfe,HSo),e(vv,USo),e(vv,PG),e(PG,JSo),e(vv,YSo),e(q,KSo),e(q,Fv),e(Fv,ife),e(ife,ZSo),e(Fv,eRo),e(Fv,BG),e(BG,oRo),e(Fv,rRo),e(q,tRo),e(q,Tv),e(Tv,dfe),e(dfe,aRo),e(Tv,nRo),e(Tv,IG),e(IG,sRo),e(Tv,lRo),e(q,iRo),e(q,Mv),e(Mv,cfe),e(cfe,dRo),e(Mv,cRo),e(Mv,qG),e(qG,mRo),e(Mv,fRo),e(q,gRo),e(q,Ev),e(Ev,mfe),e(mfe,hRo),e(Ev,uRo),e(Ev,NG),e(NG,pRo),e(Ev,_Ro),e(q,bRo),e(q,Cv),e(Cv,ffe),e(ffe,vRo),e(Cv,FRo),e(Cv,jG),e(jG,TRo),e(Cv,MRo),e(q,ERo),e(q,wv),e(wv,gfe),e(gfe,CRo),e(wv,wRo),e(wv,DG),e(DG,ARo),e(wv,yRo),e(q,LRo),e(q,Av),e(Av,hfe),e(hfe,xRo),e(Av,$Ro),e(Av,GG),e(GG,kRo),e(Av,SRo),e(q,RRo),e(q,yv),e(yv,ufe),e(ufe,PRo),e(yv,BRo),e(yv,OG),e(OG,IRo),e(yv,qRo),e(q,NRo),e(q,Lv),e(Lv,pfe),e(pfe,jRo),e(Lv,DRo),e(Lv,VG),e(VG,GRo),e(Lv,ORo),e(q,VRo),e(q,xv),e(xv,_fe),e(_fe,XRo),e(xv,zRo),e(xv,XG),e(XG,WRo),e(xv,QRo),e(q,HRo),e(q,$v),e($v,bfe),e(bfe,URo),e($v,JRo),e($v,zG),e(zG,YRo),e($v,KRo),e(oo,ZRo),e(oo,kv),e(kv,ePo),e(kv,vfe),e(vfe,oPo),e(kv,rPo),e(kv,Ffe),e(Ffe,tPo),e(oo,aPo),M(Sv,oo,null),b(m,tNe,_),b(m,Vi,_),e(Vi,Rv),e(Rv,Tfe),M(CL,Tfe,null),e(Vi,nPo),e(Vi,Mfe),e(Mfe,sPo),b(m,aNe,_),b(m,Po,_),M(wL,Po,null),e(Po,lPo),e(Po,Xi),e(Xi,iPo),e(Xi,WG),e(WG,dPo),e(Xi,cPo),e(Xi,QG),e(QG,mPo),e(Xi,fPo),e(Po,gPo),e(Po,AL),e(AL,hPo),e(AL,Efe),e(Efe,uPo),e(AL,pPo),e(Po,_Po),e(Po,dt),M(yL,dt,null),e(dt,bPo),e(dt,Cfe),e(Cfe,vPo),e(dt,FPo),e(dt,zi),e(zi,TPo),e(zi,wfe),e(wfe,MPo),e(zi,EPo),e(zi,HG),e(HG,CPo),e(zi,wPo),e(dt,APo),M(Pv,dt,null),e(Po,yPo),e(Po,ro),M(LL,ro,null),e(ro,LPo),e(ro,Afe),e(Afe,xPo),e(ro,$Po),e(ro,Pa),e(Pa,kPo),e(Pa,yfe),e(yfe,SPo),e(Pa,RPo),e(Pa,Lfe),e(Lfe,PPo),e(Pa,BPo),e(Pa,xfe),e(xfe,IPo),e(Pa,qPo),e(ro,NPo),e(ro,Y),e(Y,Bv),e(Bv,$fe),e($fe,jPo),e(Bv,DPo),e(Bv,UG),e(UG,GPo),e(Bv,OPo),e(Y,VPo),e(Y,Iv),e(Iv,kfe),e(kfe,XPo),e(Iv,zPo),e(Iv,JG),e(JG,WPo),e(Iv,QPo),e(Y,HPo),e(Y,qv),e(qv,Sfe),e(Sfe,UPo),e(qv,JPo),e(qv,YG),e(YG,YPo),e(qv,KPo),e(Y,ZPo),e(Y,Nv),e(Nv,Rfe),e(Rfe,eBo),e(Nv,oBo),e(Nv,KG),e(KG,rBo),e(Nv,tBo),e(Y,aBo),e(Y,jv),e(jv,Pfe),e(Pfe,nBo),e(jv,sBo),e(jv,ZG),e(ZG,lBo),e(jv,iBo),e(Y,dBo),e(Y,Dv),e(Dv,Bfe),e(Bfe,cBo),e(Dv,mBo),e(Dv,eO),e(eO,fBo),e(Dv,gBo),e(Y,hBo),e(Y,Gv),e(Gv,Ife),e(Ife,uBo),e(Gv,pBo),e(Gv,oO),e(oO,_Bo),e(Gv,bBo),e(Y,vBo),e(Y,Ov),e(Ov,qfe),e(qfe,FBo),e(Ov,TBo),e(Ov,rO),e(rO,MBo),e(Ov,EBo),e(Y,CBo),e(Y,Vv),e(Vv,Nfe),e(Nfe,wBo),e(Vv,ABo),e(Vv,tO),e(tO,yBo),e(Vv,LBo),e(Y,xBo),e(Y,Xv),e(Xv,jfe),e(jfe,$Bo),e(Xv,kBo),e(Xv,aO),e(aO,SBo),e(Xv,RBo),e(Y,PBo),e(Y,zv),e(zv,Dfe),e(Dfe,BBo),e(zv,IBo),e(zv,nO),e(nO,qBo),e(zv,NBo),e(Y,jBo),e(Y,Wv),e(Wv,Gfe),e(Gfe,DBo),e(Wv,GBo),e(Wv,sO),e(sO,OBo),e(Wv,VBo),e(Y,XBo),e(Y,Qv),e(Qv,Ofe),e(Ofe,zBo),e(Qv,WBo),e(Qv,lO),e(lO,QBo),e(Qv,HBo),e(Y,UBo),e(Y,Hv),e(Hv,Vfe),e(Vfe,JBo),e(Hv,YBo),e(Hv,iO),e(iO,KBo),e(Hv,ZBo),e(Y,eIo),e(Y,Uv),e(Uv,Xfe),e(Xfe,oIo),e(Uv,rIo),e(Uv,dO),e(dO,tIo),e(Uv,aIo),e(Y,nIo),e(Y,Jv),e(Jv,zfe),e(zfe,sIo),e(Jv,lIo),e(Jv,cO),e(cO,iIo),e(Jv,dIo),e(Y,cIo),e(Y,Yv),e(Yv,Wfe),e(Wfe,mIo),e(Yv,fIo),e(Yv,mO),e(mO,gIo),e(Yv,hIo),e(Y,uIo),e(Y,Kv),e(Kv,Qfe),e(Qfe,pIo),e(Kv,_Io),e(Kv,fO),e(fO,bIo),e(Kv,vIo),e(Y,FIo),e(Y,Zv),e(Zv,Hfe),e(Hfe,TIo),e(Zv,MIo),e(Zv,gO),e(gO,EIo),e(Zv,CIo),e(Y,wIo),e(Y,eF),e(eF,Ufe),e(Ufe,AIo),e(eF,yIo),e(eF,hO),e(hO,LIo),e(eF,xIo),e(Y,$Io),e(Y,oF),e(oF,Jfe),e(Jfe,kIo),e(oF,SIo),e(oF,uO),e(uO,RIo),e(oF,PIo),e(Y,BIo),e(Y,rF),e(rF,Yfe),e(Yfe,IIo),e(rF,qIo),e(rF,pO),e(pO,NIo),e(rF,jIo),e(Y,DIo),e(Y,tF),e(tF,Kfe),e(Kfe,GIo),e(tF,OIo),e(tF,_O),e(_O,VIo),e(tF,XIo),e(Y,zIo),e(Y,aF),e(aF,Zfe),e(Zfe,WIo),e(aF,QIo),e(aF,bO),e(bO,HIo),e(aF,UIo),e(Y,JIo),e(Y,nF),e(nF,ege),e(ege,YIo),e(nF,KIo),e(nF,vO),e(vO,ZIo),e(nF,eqo),e(Y,oqo),e(Y,sF),e(sF,oge),e(oge,rqo),e(sF,tqo),e(sF,FO),e(FO,aqo),e(sF,nqo),e(Y,sqo),e(Y,lF),e(lF,rge),e(rge,lqo),e(lF,iqo),e(lF,TO),e(TO,dqo),e(lF,cqo),e(Y,mqo),e(Y,iF),e(iF,tge),e(tge,fqo),e(iF,gqo),e(iF,MO),e(MO,hqo),e(iF,uqo),e(Y,pqo),e(Y,dF),e(dF,age),e(age,_qo),e(dF,bqo),e(dF,EO),e(EO,vqo),e(dF,Fqo),e(ro,Tqo),e(ro,cF),e(cF,Mqo),e(cF,nge),e(nge,Eqo),e(cF,Cqo),e(cF,sge),e(sge,wqo),e(ro,Aqo),M(mF,ro,null),b(m,nNe,_),b(m,Wi,_),e(Wi,fF),e(fF,lge),M(xL,lge,null),e(Wi,yqo),e(Wi,ige),e(ige,Lqo),b(m,sNe,_),b(m,Bo,_),M($L,Bo,null),e(Bo,xqo),e(Bo,Qi),e(Qi,$qo),e(Qi,CO),e(CO,kqo),e(Qi,Sqo),e(Qi,wO),e(wO,Rqo),e(Qi,Pqo),e(Bo,Bqo),e(Bo,kL),e(kL,Iqo),e(kL,dge),e(dge,qqo),e(kL,Nqo),e(Bo,jqo),e(Bo,ct),M(SL,ct,null),e(ct,Dqo),e(ct,cge),e(cge,Gqo),e(ct,Oqo),e(ct,Hi),e(Hi,Vqo),e(Hi,mge),e(mge,Xqo),e(Hi,zqo),e(Hi,AO),e(AO,Wqo),e(Hi,Qqo),e(ct,Hqo),M(gF,ct,null),e(Bo,Uqo),e(Bo,to),M(RL,to,null),e(to,Jqo),e(to,fge),e(fge,Yqo),e(to,Kqo),e(to,Ba),e(Ba,Zqo),e(Ba,gge),e(gge,eNo),e(Ba,oNo),e(Ba,hge),e(hge,rNo),e(Ba,tNo),e(Ba,uge),e(uge,aNo),e(Ba,nNo),e(to,sNo),e(to,Yr),e(Yr,hF),e(hF,pge),e(pge,lNo),e(hF,iNo),e(hF,yO),e(yO,dNo),e(hF,cNo),e(Yr,mNo),e(Yr,uF),e(uF,_ge),e(_ge,fNo),e(uF,gNo),e(uF,LO),e(LO,hNo),e(uF,uNo),e(Yr,pNo),e(Yr,pF),e(pF,bge),e(bge,_No),e(pF,bNo),e(pF,xO),e(xO,vNo),e(pF,FNo),e(Yr,TNo),e(Yr,_F),e(_F,vge),e(vge,MNo),e(_F,ENo),e(_F,$O),e($O,CNo),e(_F,wNo),e(Yr,ANo),e(Yr,bF),e(bF,Fge),e(Fge,yNo),e(bF,LNo),e(bF,kO),e(kO,xNo),e(bF,$No),e(to,kNo),e(to,vF),e(vF,SNo),e(vF,Tge),e(Tge,RNo),e(vF,PNo),e(vF,Mge),e(Mge,BNo),e(to,INo),M(FF,to,null),b(m,lNe,_),b(m,Ui,_),e(Ui,TF),e(TF,Ege),M(PL,Ege,null),e(Ui,qNo),e(Ui,Cge),e(Cge,NNo),b(m,iNe,_),b(m,Io,_),M(BL,Io,null),e(Io,jNo),e(Io,Ji),e(Ji,DNo),e(Ji,SO),e(SO,GNo),e(Ji,ONo),e(Ji,RO),e(RO,VNo),e(Ji,XNo),e(Io,zNo),e(Io,IL),e(IL,WNo),e(IL,wge),e(wge,QNo),e(IL,HNo),e(Io,UNo),e(Io,mt),M(qL,mt,null),e(mt,JNo),e(mt,Age),e(Age,YNo),e(mt,KNo),e(mt,Yi),e(Yi,ZNo),e(Yi,yge),e(yge,ejo),e(Yi,ojo),e(Yi,PO),e(PO,rjo),e(Yi,tjo),e(mt,ajo),M(MF,mt,null),e(Io,njo),e(Io,ao),M(NL,ao,null),e(ao,sjo),e(ao,Lge),e(Lge,ljo),e(ao,ijo),e(ao,Ia),e(Ia,djo),e(Ia,xge),e(xge,cjo),e(Ia,mjo),e(Ia,$ge),e($ge,fjo),e(Ia,gjo),e(Ia,kge),e(kge,hjo),e(Ia,ujo),e(ao,pjo),e(ao,H),e(H,EF),e(EF,Sge),e(Sge,_jo),e(EF,bjo),e(EF,BO),e(BO,vjo),e(EF,Fjo),e(H,Tjo),e(H,CF),e(CF,Rge),e(Rge,Mjo),e(CF,Ejo),e(CF,IO),e(IO,Cjo),e(CF,wjo),e(H,Ajo),e(H,wF),e(wF,Pge),e(Pge,yjo),e(wF,Ljo),e(wF,qO),e(qO,xjo),e(wF,$jo),e(H,kjo),e(H,AF),e(AF,Bge),e(Bge,Sjo),e(AF,Rjo),e(AF,NO),e(NO,Pjo),e(AF,Bjo),e(H,Ijo),e(H,yF),e(yF,Ige),e(Ige,qjo),e(yF,Njo),e(yF,jO),e(jO,jjo),e(yF,Djo),e(H,Gjo),e(H,LF),e(LF,qge),e(qge,Ojo),e(LF,Vjo),e(LF,DO),e(DO,Xjo),e(LF,zjo),e(H,Wjo),e(H,xF),e(xF,Nge),e(Nge,Qjo),e(xF,Hjo),e(xF,GO),e(GO,Ujo),e(xF,Jjo),e(H,Yjo),e(H,$F),e($F,jge),e(jge,Kjo),e($F,Zjo),e($F,OO),e(OO,eDo),e($F,oDo),e(H,rDo),e(H,kF),e(kF,Dge),e(Dge,tDo),e(kF,aDo),e(kF,VO),e(VO,nDo),e(kF,sDo),e(H,lDo),e(H,SF),e(SF,Gge),e(Gge,iDo),e(SF,dDo),e(SF,XO),e(XO,cDo),e(SF,mDo),e(H,fDo),e(H,RF),e(RF,Oge),e(Oge,gDo),e(RF,hDo),e(RF,zO),e(zO,uDo),e(RF,pDo),e(H,_Do),e(H,PF),e(PF,Vge),e(Vge,bDo),e(PF,vDo),e(PF,WO),e(WO,FDo),e(PF,TDo),e(H,MDo),e(H,BF),e(BF,Xge),e(Xge,EDo),e(BF,CDo),e(BF,QO),e(QO,wDo),e(BF,ADo),e(H,yDo),e(H,IF),e(IF,zge),e(zge,LDo),e(IF,xDo),e(IF,HO),e(HO,$Do),e(IF,kDo),e(H,SDo),e(H,qF),e(qF,Wge),e(Wge,RDo),e(qF,PDo),e(qF,UO),e(UO,BDo),e(qF,IDo),e(H,qDo),e(H,NF),e(NF,Qge),e(Qge,NDo),e(NF,jDo),e(NF,JO),e(JO,DDo),e(NF,GDo),e(H,ODo),e(H,jF),e(jF,Hge),e(Hge,VDo),e(jF,XDo),e(jF,YO),e(YO,zDo),e(jF,WDo),e(H,QDo),e(H,DF),e(DF,Uge),e(Uge,HDo),e(DF,UDo),e(DF,KO),e(KO,JDo),e(DF,YDo),e(H,KDo),e(H,GF),e(GF,Jge),e(Jge,ZDo),e(GF,eGo),e(GF,ZO),e(ZO,oGo),e(GF,rGo),e(H,tGo),e(H,OF),e(OF,Yge),e(Yge,aGo),e(OF,nGo),e(OF,eV),e(eV,sGo),e(OF,lGo),e(H,iGo),e(H,VF),e(VF,Kge),e(Kge,dGo),e(VF,cGo),e(VF,oV),e(oV,mGo),e(VF,fGo),e(H,gGo),e(H,XF),e(XF,Zge),e(Zge,hGo),e(XF,uGo),e(XF,rV),e(rV,pGo),e(XF,_Go),e(H,bGo),e(H,zF),e(zF,ehe),e(ehe,vGo),e(zF,FGo),e(zF,tV),e(tV,TGo),e(zF,MGo),e(H,EGo),e(H,WF),e(WF,ohe),e(ohe,CGo),e(WF,wGo),e(WF,aV),e(aV,AGo),e(WF,yGo),e(H,LGo),e(H,QF),e(QF,rhe),e(rhe,xGo),e(QF,$Go),e(QF,nV),e(nV,kGo),e(QF,SGo),e(H,RGo),e(H,HF),e(HF,the),e(the,PGo),e(HF,BGo),e(HF,sV),e(sV,IGo),e(HF,qGo),e(H,NGo),e(H,UF),e(UF,ahe),e(ahe,jGo),e(UF,DGo),e(UF,lV),e(lV,GGo),e(UF,OGo),e(H,VGo),e(H,JF),e(JF,nhe),e(nhe,XGo),e(JF,zGo),e(JF,iV),e(iV,WGo),e(JF,QGo),e(H,HGo),e(H,YF),e(YF,she),e(she,UGo),e(YF,JGo),e(YF,dV),e(dV,YGo),e(YF,KGo),e(H,ZGo),e(H,KF),e(KF,lhe),e(lhe,eOo),e(KF,oOo),e(KF,cV),e(cV,rOo),e(KF,tOo),e(H,aOo),e(H,ZF),e(ZF,ihe),e(ihe,nOo),e(ZF,sOo),e(ZF,mV),e(mV,lOo),e(ZF,iOo),e(H,dOo),e(H,e1),e(e1,dhe),e(dhe,cOo),e(e1,mOo),e(e1,fV),e(fV,fOo),e(e1,gOo),e(H,hOo),e(H,o1),e(o1,che),e(che,uOo),e(o1,pOo),e(o1,gV),e(gV,_Oo),e(o1,bOo),e(H,vOo),e(H,r1),e(r1,mhe),e(mhe,FOo),e(r1,TOo),e(r1,hV),e(hV,MOo),e(r1,EOo),e(ao,COo),e(ao,t1),e(t1,wOo),e(t1,fhe),e(fhe,AOo),e(t1,yOo),e(t1,ghe),e(ghe,LOo),e(ao,xOo),M(a1,ao,null),b(m,dNe,_),b(m,Ki,_),e(Ki,n1),e(n1,hhe),M(jL,hhe,null),e(Ki,$Oo),e(Ki,uhe),e(uhe,kOo),b(m,cNe,_),b(m,qo,_),M(DL,qo,null),e(qo,SOo),e(qo,Zi),e(Zi,ROo),e(Zi,uV),e(uV,POo),e(Zi,BOo),e(Zi,pV),e(pV,IOo),e(Zi,qOo),e(qo,NOo),e(qo,GL),e(GL,jOo),e(GL,phe),e(phe,DOo),e(GL,GOo),e(qo,OOo),e(qo,ft),M(OL,ft,null),e(ft,VOo),e(ft,_he),e(_he,XOo),e(ft,zOo),e(ft,ed),e(ed,WOo),e(ed,bhe),e(bhe,QOo),e(ed,HOo),e(ed,_V),e(_V,UOo),e(ed,JOo),e(ft,YOo),M(s1,ft,null),e(qo,KOo),e(qo,no),M(VL,no,null),e(no,ZOo),e(no,vhe),e(vhe,eVo),e(no,oVo),e(no,qa),e(qa,rVo),e(qa,Fhe),e(Fhe,tVo),e(qa,aVo),e(qa,The),e(The,nVo),e(qa,sVo),e(qa,Mhe),e(Mhe,lVo),e(qa,iVo),e(no,dVo),e(no,V),e(V,l1),e(l1,Ehe),e(Ehe,cVo),e(l1,mVo),e(l1,bV),e(bV,fVo),e(l1,gVo),e(V,hVo),e(V,i1),e(i1,Che),e(Che,uVo),e(i1,pVo),e(i1,vV),e(vV,_Vo),e(i1,bVo),e(V,vVo),e(V,d1),e(d1,whe),e(whe,FVo),e(d1,TVo),e(d1,FV),e(FV,MVo),e(d1,EVo),e(V,CVo),e(V,c1),e(c1,Ahe),e(Ahe,wVo),e(c1,AVo),e(c1,TV),e(TV,yVo),e(c1,LVo),e(V,xVo),e(V,m1),e(m1,yhe),e(yhe,$Vo),e(m1,kVo),e(m1,MV),e(MV,SVo),e(m1,RVo),e(V,PVo),e(V,f1),e(f1,Lhe),e(Lhe,BVo),e(f1,IVo),e(f1,EV),e(EV,qVo),e(f1,NVo),e(V,jVo),e(V,g1),e(g1,xhe),e(xhe,DVo),e(g1,GVo),e(g1,CV),e(CV,OVo),e(g1,VVo),e(V,XVo),e(V,h1),e(h1,$he),e($he,zVo),e(h1,WVo),e(h1,wV),e(wV,QVo),e(h1,HVo),e(V,UVo),e(V,u1),e(u1,khe),e(khe,JVo),e(u1,YVo),e(u1,AV),e(AV,KVo),e(u1,ZVo),e(V,eXo),e(V,p1),e(p1,She),e(She,oXo),e(p1,rXo),e(p1,yV),e(yV,tXo),e(p1,aXo),e(V,nXo),e(V,_1),e(_1,Rhe),e(Rhe,sXo),e(_1,lXo),e(_1,LV),e(LV,iXo),e(_1,dXo),e(V,cXo),e(V,b1),e(b1,Phe),e(Phe,mXo),e(b1,fXo),e(b1,xV),e(xV,gXo),e(b1,hXo),e(V,uXo),e(V,v1),e(v1,Bhe),e(Bhe,pXo),e(v1,_Xo),e(v1,$V),e($V,bXo),e(v1,vXo),e(V,FXo),e(V,F1),e(F1,Ihe),e(Ihe,TXo),e(F1,MXo),e(F1,kV),e(kV,EXo),e(F1,CXo),e(V,wXo),e(V,T1),e(T1,qhe),e(qhe,AXo),e(T1,yXo),e(T1,SV),e(SV,LXo),e(T1,xXo),e(V,$Xo),e(V,M1),e(M1,Nhe),e(Nhe,kXo),e(M1,SXo),e(M1,RV),e(RV,RXo),e(M1,PXo),e(V,BXo),e(V,E1),e(E1,jhe),e(jhe,IXo),e(E1,qXo),e(E1,PV),e(PV,NXo),e(E1,jXo),e(V,DXo),e(V,C1),e(C1,Dhe),e(Dhe,GXo),e(C1,OXo),e(C1,BV),e(BV,VXo),e(C1,XXo),e(V,zXo),e(V,w1),e(w1,Ghe),e(Ghe,WXo),e(w1,QXo),e(w1,IV),e(IV,HXo),e(w1,UXo),e(V,JXo),e(V,A1),e(A1,Ohe),e(Ohe,YXo),e(A1,KXo),e(A1,qV),e(qV,ZXo),e(A1,ezo),e(V,ozo),e(V,y1),e(y1,Vhe),e(Vhe,rzo),e(y1,tzo),e(y1,NV),e(NV,azo),e(y1,nzo),e(V,szo),e(V,L1),e(L1,Xhe),e(Xhe,lzo),e(L1,izo),e(L1,jV),e(jV,dzo),e(L1,czo),e(V,mzo),e(V,x1),e(x1,zhe),e(zhe,fzo),e(x1,gzo),e(x1,DV),e(DV,hzo),e(x1,uzo),e(V,pzo),e(V,$1),e($1,Whe),e(Whe,_zo),e($1,bzo),e($1,GV),e(GV,vzo),e($1,Fzo),e(V,Tzo),e(V,k1),e(k1,Qhe),e(Qhe,Mzo),e(k1,Ezo),e(k1,OV),e(OV,Czo),e(k1,wzo),e(V,Azo),e(V,S1),e(S1,Hhe),e(Hhe,yzo),e(S1,Lzo),e(S1,VV),e(VV,xzo),e(S1,$zo),e(V,kzo),e(V,R1),e(R1,Uhe),e(Uhe,Szo),e(R1,Rzo),e(R1,XV),e(XV,Pzo),e(R1,Bzo),e(V,Izo),e(V,P1),e(P1,Jhe),e(Jhe,qzo),e(P1,Nzo),e(P1,zV),e(zV,jzo),e(P1,Dzo),e(V,Gzo),e(V,B1),e(B1,Yhe),e(Yhe,Ozo),e(B1,Vzo),e(B1,WV),e(WV,Xzo),e(B1,zzo),e(V,Wzo),e(V,I1),e(I1,Khe),e(Khe,Qzo),e(I1,Hzo),e(I1,QV),e(QV,Uzo),e(I1,Jzo),e(V,Yzo),e(V,q1),e(q1,Zhe),e(Zhe,Kzo),e(q1,Zzo),e(q1,HV),e(HV,eWo),e(q1,oWo),e(V,rWo),e(V,N1),e(N1,eue),e(eue,tWo),e(N1,aWo),e(N1,UV),e(UV,nWo),e(N1,sWo),e(V,lWo),e(V,j1),e(j1,oue),e(oue,iWo),e(j1,dWo),e(j1,JV),e(JV,cWo),e(j1,mWo),e(V,fWo),e(V,D1),e(D1,rue),e(rue,gWo),e(D1,hWo),e(D1,YV),e(YV,uWo),e(D1,pWo),e(V,_Wo),e(V,G1),e(G1,tue),e(tue,bWo),e(G1,vWo),e(G1,KV),e(KV,FWo),e(G1,TWo),e(V,MWo),e(V,O1),e(O1,aue),e(aue,EWo),e(O1,CWo),e(O1,ZV),e(ZV,wWo),e(O1,AWo),e(V,yWo),e(V,V1),e(V1,nue),e(nue,LWo),e(V1,xWo),e(V1,eX),e(eX,$Wo),e(V1,kWo),e(V,SWo),e(V,X1),e(X1,sue),e(sue,RWo),e(X1,PWo),e(X1,oX),e(oX,BWo),e(X1,IWo),e(V,qWo),e(V,z1),e(z1,lue),e(lue,NWo),e(z1,jWo),e(z1,rX),e(rX,DWo),e(z1,GWo),e(V,OWo),e(V,W1),e(W1,iue),e(iue,VWo),e(W1,XWo),e(W1,tX),e(tX,zWo),e(W1,WWo),e(no,QWo),e(no,Q1),e(Q1,HWo),e(Q1,due),e(due,UWo),e(Q1,JWo),e(Q1,cue),e(cue,YWo),e(no,KWo),M(H1,no,null),b(m,mNe,_),b(m,od,_),e(od,U1),e(U1,mue),M(XL,mue,null),e(od,ZWo),e(od,fue),e(fue,eQo),b(m,fNe,_),b(m,No,_),M(zL,No,null),e(No,oQo),e(No,rd),e(rd,rQo),e(rd,aX),e(aX,tQo),e(rd,aQo),e(rd,nX),e(nX,nQo),e(rd,sQo),e(No,lQo),e(No,WL),e(WL,iQo),e(WL,gue),e(gue,dQo),e(WL,cQo),e(No,mQo),e(No,gt),M(QL,gt,null),e(gt,fQo),e(gt,hue),e(hue,gQo),e(gt,hQo),e(gt,td),e(td,uQo),e(td,uue),e(uue,pQo),e(td,_Qo),e(td,sX),e(sX,bQo),e(td,vQo),e(gt,FQo),M(J1,gt,null),e(No,TQo),e(No,so),M(HL,so,null),e(so,MQo),e(so,pue),e(pue,EQo),e(so,CQo),e(so,Na),e(Na,wQo),e(Na,_ue),e(_ue,AQo),e(Na,yQo),e(Na,bue),e(bue,LQo),e(Na,xQo),e(Na,vue),e(vue,$Qo),e(Na,kQo),e(so,SQo),e(so,Fue),e(Fue,Y1),e(Y1,Tue),e(Tue,RQo),e(Y1,PQo),e(Y1,lX),e(lX,BQo),e(Y1,IQo),e(so,qQo),e(so,K1),e(K1,NQo),e(K1,Mue),e(Mue,jQo),e(K1,DQo),e(K1,Eue),e(Eue,GQo),e(so,OQo),M(Z1,so,null),b(m,gNe,_),b(m,ad,_),e(ad,eT),e(eT,Cue),M(UL,Cue,null),e(ad,VQo),e(ad,wue),e(wue,XQo),b(m,hNe,_),b(m,jo,_),M(JL,jo,null),e(jo,zQo),e(jo,nd),e(nd,WQo),e(nd,iX),e(iX,QQo),e(nd,HQo),e(nd,dX),e(dX,UQo),e(nd,JQo),e(jo,YQo),e(jo,YL),e(YL,KQo),e(YL,Aue),e(Aue,ZQo),e(YL,eHo),e(jo,oHo),e(jo,ht),M(KL,ht,null),e(ht,rHo),e(ht,yue),e(yue,tHo),e(ht,aHo),e(ht,sd),e(sd,nHo),e(sd,Lue),e(Lue,sHo),e(sd,lHo),e(sd,cX),e(cX,iHo),e(sd,dHo),e(ht,cHo),M(oT,ht,null),e(jo,mHo),e(jo,lo),M(ZL,lo,null),e(lo,fHo),e(lo,xue),e(xue,gHo),e(lo,hHo),e(lo,ja),e(ja,uHo),e(ja,$ue),e($ue,pHo),e(ja,_Ho),e(ja,kue),e(kue,bHo),e(ja,vHo),e(ja,Sue),e(Sue,FHo),e(ja,THo),e(lo,MHo),e(lo,Fe),e(Fe,rT),e(rT,Rue),e(Rue,EHo),e(rT,CHo),e(rT,mX),e(mX,wHo),e(rT,AHo),e(Fe,yHo),e(Fe,tT),e(tT,Pue),e(Pue,LHo),e(tT,xHo),e(tT,fX),e(fX,$Ho),e(tT,kHo),e(Fe,SHo),e(Fe,aT),e(aT,Bue),e(Bue,RHo),e(aT,PHo),e(aT,gX),e(gX,BHo),e(aT,IHo),e(Fe,qHo),e(Fe,nT),e(nT,Iue),e(Iue,NHo),e(nT,jHo),e(nT,hX),e(hX,DHo),e(nT,GHo),e(Fe,OHo),e(Fe,Bs),e(Bs,que),e(que,VHo),e(Bs,XHo),e(Bs,uX),e(uX,zHo),e(Bs,WHo),e(Bs,pX),e(pX,QHo),e(Bs,HHo),e(Fe,UHo),e(Fe,sT),e(sT,Nue),e(Nue,JHo),e(sT,YHo),e(sT,_X),e(_X,KHo),e(sT,ZHo),e(Fe,eUo),e(Fe,ut),e(ut,jue),e(jue,oUo),e(ut,rUo),e(ut,bX),e(bX,tUo),e(ut,aUo),e(ut,vX),e(vX,nUo),e(ut,sUo),e(ut,FX),e(FX,lUo),e(ut,iUo),e(Fe,dUo),e(Fe,lT),e(lT,Due),e(Due,cUo),e(lT,mUo),e(lT,TX),e(TX,fUo),e(lT,gUo),e(Fe,hUo),e(Fe,iT),e(iT,Gue),e(Gue,uUo),e(iT,pUo),e(iT,MX),e(MX,_Uo),e(iT,bUo),e(Fe,vUo),e(Fe,dT),e(dT,Oue),e(Oue,FUo),e(dT,TUo),e(dT,EX),e(EX,MUo),e(dT,EUo),e(Fe,CUo),e(Fe,cT),e(cT,Vue),e(Vue,wUo),e(cT,AUo),e(cT,CX),e(CX,yUo),e(cT,LUo),e(Fe,xUo),e(Fe,mT),e(mT,Xue),e(Xue,$Uo),e(mT,kUo),e(mT,wX),e(wX,SUo),e(mT,RUo),e(Fe,PUo),e(Fe,fT),e(fT,zue),e(zue,BUo),e(fT,IUo),e(fT,AX),e(AX,qUo),e(fT,NUo),e(Fe,jUo),e(Fe,gT),e(gT,Wue),e(Wue,DUo),e(gT,GUo),e(gT,yX),e(yX,OUo),e(gT,VUo),e(lo,XUo),e(lo,hT),e(hT,zUo),e(hT,Que),e(Que,WUo),e(hT,QUo),e(hT,Hue),e(Hue,HUo),e(lo,UUo),M(uT,lo,null),b(m,uNe,_),b(m,ld,_),e(ld,pT),e(pT,Uue),M(e8,Uue,null),e(ld,JUo),e(ld,Jue),e(Jue,YUo),b(m,pNe,_),b(m,Do,_),M(o8,Do,null),e(Do,KUo),e(Do,id),e(id,ZUo),e(id,LX),e(LX,eJo),e(id,oJo),e(id,xX),e(xX,rJo),e(id,tJo),e(Do,aJo),e(Do,r8),e(r8,nJo),e(r8,Yue),e(Yue,sJo),e(r8,lJo),e(Do,iJo),e(Do,pt),M(t8,pt,null),e(pt,dJo),e(pt,Kue),e(Kue,cJo),e(pt,mJo),e(pt,dd),e(dd,fJo),e(dd,Zue),e(Zue,gJo),e(dd,hJo),e(dd,$X),e($X,uJo),e(dd,pJo),e(pt,_Jo),M(_T,pt,null),e(Do,bJo),e(Do,io),M(a8,io,null),e(io,vJo),e(io,epe),e(epe,FJo),e(io,TJo),e(io,Da),e(Da,MJo),e(Da,ope),e(ope,EJo),e(Da,CJo),e(Da,rpe),e(rpe,wJo),e(Da,AJo),e(Da,tpe),e(tpe,yJo),e(Da,LJo),e(io,xJo),e(io,ape),e(ape,bT),e(bT,npe),e(npe,$Jo),e(bT,kJo),e(bT,kX),e(kX,SJo),e(bT,RJo),e(io,PJo),e(io,vT),e(vT,BJo),e(vT,spe),e(spe,IJo),e(vT,qJo),e(vT,lpe),e(lpe,NJo),e(io,jJo),M(FT,io,null),b(m,_Ne,_),b(m,cd,_),e(cd,TT),e(TT,ipe),M(n8,ipe,null),e(cd,DJo),e(cd,dpe),e(dpe,GJo),b(m,bNe,_),b(m,Go,_),M(s8,Go,null),e(Go,OJo),e(Go,md),e(md,VJo),e(md,SX),e(SX,XJo),e(md,zJo),e(md,RX),e(RX,WJo),e(md,QJo),e(Go,HJo),e(Go,l8),e(l8,UJo),e(l8,cpe),e(cpe,JJo),e(l8,YJo),e(Go,KJo),e(Go,_t),M(i8,_t,null),e(_t,ZJo),e(_t,mpe),e(mpe,eYo),e(_t,oYo),e(_t,fd),e(fd,rYo),e(fd,fpe),e(fpe,tYo),e(fd,aYo),e(fd,PX),e(PX,nYo),e(fd,sYo),e(_t,lYo),M(MT,_t,null),e(Go,iYo),e(Go,co),M(d8,co,null),e(co,dYo),e(co,gpe),e(gpe,cYo),e(co,mYo),e(co,Ga),e(Ga,fYo),e(Ga,hpe),e(hpe,gYo),e(Ga,hYo),e(Ga,upe),e(upe,uYo),e(Ga,pYo),e(Ga,ppe),e(ppe,_Yo),e(Ga,bYo),e(co,vYo),e(co,ke),e(ke,ET),e(ET,_pe),e(_pe,FYo),e(ET,TYo),e(ET,BX),e(BX,MYo),e(ET,EYo),e(ke,CYo),e(ke,CT),e(CT,bpe),e(bpe,wYo),e(CT,AYo),e(CT,IX),e(IX,yYo),e(CT,LYo),e(ke,xYo),e(ke,wT),e(wT,vpe),e(vpe,$Yo),e(wT,kYo),e(wT,qX),e(qX,SYo),e(wT,RYo),e(ke,PYo),e(ke,AT),e(AT,Fpe),e(Fpe,BYo),e(AT,IYo),e(AT,NX),e(NX,qYo),e(AT,NYo),e(ke,jYo),e(ke,yT),e(yT,Tpe),e(Tpe,DYo),e(yT,GYo),e(yT,jX),e(jX,OYo),e(yT,VYo),e(ke,XYo),e(ke,LT),e(LT,Mpe),e(Mpe,zYo),e(LT,WYo),e(LT,DX),e(DX,QYo),e(LT,HYo),e(ke,UYo),e(ke,xT),e(xT,Epe),e(Epe,JYo),e(xT,YYo),e(xT,GX),e(GX,KYo),e(xT,ZYo),e(ke,eKo),e(ke,$T),e($T,Cpe),e(Cpe,oKo),e($T,rKo),e($T,OX),e(OX,tKo),e($T,aKo),e(ke,nKo),e(ke,kT),e(kT,wpe),e(wpe,sKo),e(kT,lKo),e(kT,VX),e(VX,iKo),e(kT,dKo),e(co,cKo),e(co,ST),e(ST,mKo),e(ST,Ape),e(Ape,fKo),e(ST,gKo),e(ST,ype),e(ype,hKo),e(co,uKo),M(RT,co,null),b(m,vNe,_),b(m,gd,_),e(gd,PT),e(PT,Lpe),M(c8,Lpe,null),e(gd,pKo),e(gd,xpe),e(xpe,_Ko),b(m,FNe,_),b(m,Oo,_),M(m8,Oo,null),e(Oo,bKo),e(Oo,hd),e(hd,vKo),e(hd,XX),e(XX,FKo),e(hd,TKo),e(hd,zX),e(zX,MKo),e(hd,EKo),e(Oo,CKo),e(Oo,f8),e(f8,wKo),e(f8,$pe),e($pe,AKo),e(f8,yKo),e(Oo,LKo),e(Oo,bt),M(g8,bt,null),e(bt,xKo),e(bt,kpe),e(kpe,$Ko),e(bt,kKo),e(bt,ud),e(ud,SKo),e(ud,Spe),e(Spe,RKo),e(ud,PKo),e(ud,WX),e(WX,BKo),e(ud,IKo),e(bt,qKo),M(BT,bt,null),e(Oo,NKo),e(Oo,mo),M(h8,mo,null),e(mo,jKo),e(mo,Rpe),e(Rpe,DKo),e(mo,GKo),e(mo,Oa),e(Oa,OKo),e(Oa,Ppe),e(Ppe,VKo),e(Oa,XKo),e(Oa,Bpe),e(Bpe,zKo),e(Oa,WKo),e(Oa,Ipe),e(Ipe,QKo),e(Oa,HKo),e(mo,UKo),e(mo,Kr),e(Kr,IT),e(IT,qpe),e(qpe,JKo),e(IT,YKo),e(IT,QX),e(QX,KKo),e(IT,ZKo),e(Kr,eZo),e(Kr,qT),e(qT,Npe),e(Npe,oZo),e(qT,rZo),e(qT,HX),e(HX,tZo),e(qT,aZo),e(Kr,nZo),e(Kr,NT),e(NT,jpe),e(jpe,sZo),e(NT,lZo),e(NT,UX),e(UX,iZo),e(NT,dZo),e(Kr,cZo),e(Kr,jT),e(jT,Dpe),e(Dpe,mZo),e(jT,fZo),e(jT,JX),e(JX,gZo),e(jT,hZo),e(Kr,uZo),e(Kr,DT),e(DT,Gpe),e(Gpe,pZo),e(DT,_Zo),e(DT,YX),e(YX,bZo),e(DT,vZo),e(mo,FZo),e(mo,GT),e(GT,TZo),e(GT,Ope),e(Ope,MZo),e(GT,EZo),e(GT,Vpe),e(Vpe,CZo),e(mo,wZo),M(OT,mo,null),b(m,TNe,_),b(m,pd,_),e(pd,VT),e(VT,Xpe),M(u8,Xpe,null),e(pd,AZo),e(pd,zpe),e(zpe,yZo),b(m,MNe,_),b(m,Vo,_),M(p8,Vo,null),e(Vo,LZo),e(Vo,_d),e(_d,xZo),e(_d,KX),e(KX,$Zo),e(_d,kZo),e(_d,ZX),e(ZX,SZo),e(_d,RZo),e(Vo,PZo),e(Vo,_8),e(_8,BZo),e(_8,Wpe),e(Wpe,IZo),e(_8,qZo),e(Vo,NZo),e(Vo,vt),M(b8,vt,null),e(vt,jZo),e(vt,Qpe),e(Qpe,DZo),e(vt,GZo),e(vt,bd),e(bd,OZo),e(bd,Hpe),e(Hpe,VZo),e(bd,XZo),e(bd,ez),e(ez,zZo),e(bd,WZo),e(vt,QZo),M(XT,vt,null),e(Vo,HZo),e(Vo,fo),M(v8,fo,null),e(fo,UZo),e(fo,Upe),e(Upe,JZo),e(fo,YZo),e(fo,Va),e(Va,KZo),e(Va,Jpe),e(Jpe,ZZo),e(Va,eer),e(Va,Ype),e(Ype,oer),e(Va,rer),e(Va,Kpe),e(Kpe,ter),e(Va,aer),e(fo,ner),e(fo,Se),e(Se,zT),e(zT,Zpe),e(Zpe,ser),e(zT,ler),e(zT,oz),e(oz,ier),e(zT,der),e(Se,cer),e(Se,WT),e(WT,e_e),e(e_e,mer),e(WT,fer),e(WT,rz),e(rz,ger),e(WT,her),e(Se,uer),e(Se,QT),e(QT,o_e),e(o_e,per),e(QT,_er),e(QT,tz),e(tz,ber),e(QT,ver),e(Se,Fer),e(Se,HT),e(HT,r_e),e(r_e,Ter),e(HT,Mer),e(HT,az),e(az,Eer),e(HT,Cer),e(Se,wer),e(Se,UT),e(UT,t_e),e(t_e,Aer),e(UT,yer),e(UT,nz),e(nz,Ler),e(UT,xer),e(Se,$er),e(Se,JT),e(JT,a_e),e(a_e,ker),e(JT,Ser),e(JT,sz),e(sz,Rer),e(JT,Per),e(Se,Ber),e(Se,YT),e(YT,n_e),e(n_e,Ier),e(YT,qer),e(YT,lz),e(lz,Ner),e(YT,jer),e(Se,Der),e(Se,KT),e(KT,s_e),e(s_e,Ger),e(KT,Oer),e(KT,iz),e(iz,Ver),e(KT,Xer),e(Se,zer),e(Se,ZT),e(ZT,l_e),e(l_e,Wer),e(ZT,Qer),e(ZT,dz),e(dz,Her),e(ZT,Uer),e(fo,Jer),e(fo,eM),e(eM,Yer),e(eM,i_e),e(i_e,Ker),e(eM,Zer),e(eM,d_e),e(d_e,eor),e(fo,oor),M(oM,fo,null),b(m,ENe,_),b(m,vd,_),e(vd,rM),e(rM,c_e),M(F8,c_e,null),e(vd,ror),e(vd,m_e),e(m_e,tor),b(m,CNe,_),b(m,Xo,_),M(T8,Xo,null),e(Xo,aor),e(Xo,Fd),e(Fd,nor),e(Fd,cz),e(cz,sor),e(Fd,lor),e(Fd,mz),e(mz,ior),e(Fd,dor),e(Xo,cor),e(Xo,M8),e(M8,mor),e(M8,f_e),e(f_e,gor),e(M8,hor),e(Xo,uor),e(Xo,Ft),M(E8,Ft,null),e(Ft,por),e(Ft,g_e),e(g_e,_or),e(Ft,bor),e(Ft,Td),e(Td,vor),e(Td,h_e),e(h_e,For),e(Td,Tor),e(Td,fz),e(fz,Mor),e(Td,Eor),e(Ft,Cor),M(tM,Ft,null),e(Xo,wor),e(Xo,go),M(C8,go,null),e(go,Aor),e(go,u_e),e(u_e,yor),e(go,Lor),e(go,Xa),e(Xa,xor),e(Xa,p_e),e(p_e,$or),e(Xa,kor),e(Xa,__e),e(__e,Sor),e(Xa,Ror),e(Xa,b_e),e(b_e,Por),e(Xa,Bor),e(go,Ior),e(go,w8),e(w8,aM),e(aM,v_e),e(v_e,qor),e(aM,Nor),e(aM,gz),e(gz,jor),e(aM,Dor),e(w8,Gor),e(w8,nM),e(nM,F_e),e(F_e,Oor),e(nM,Vor),e(nM,hz),e(hz,Xor),e(nM,zor),e(go,Wor),e(go,sM),e(sM,Qor),e(sM,T_e),e(T_e,Hor),e(sM,Uor),e(sM,M_e),e(M_e,Jor),e(go,Yor),M(lM,go,null),b(m,wNe,_),b(m,Md,_),e(Md,iM),e(iM,E_e),M(A8,E_e,null),e(Md,Kor),e(Md,C_e),e(C_e,Zor),b(m,ANe,_),b(m,zo,_),M(y8,zo,null),e(zo,err),e(zo,Ed),e(Ed,orr),e(Ed,uz),e(uz,rrr),e(Ed,trr),e(Ed,pz),e(pz,arr),e(Ed,nrr),e(zo,srr),e(zo,L8),e(L8,lrr),e(L8,w_e),e(w_e,irr),e(L8,drr),e(zo,crr),e(zo,Tt),M(x8,Tt,null),e(Tt,mrr),e(Tt,A_e),e(A_e,frr),e(Tt,grr),e(Tt,Cd),e(Cd,hrr),e(Cd,y_e),e(y_e,urr),e(Cd,prr),e(Cd,_z),e(_z,_rr),e(Cd,brr),e(Tt,vrr),M(dM,Tt,null),e(zo,Frr),e(zo,ho),M($8,ho,null),e(ho,Trr),e(ho,L_e),e(L_e,Mrr),e(ho,Err),e(ho,za),e(za,Crr),e(za,x_e),e(x_e,wrr),e(za,Arr),e(za,$_e),e($_e,yrr),e(za,Lrr),e(za,k_e),e(k_e,xrr),e(za,$rr),e(ho,krr),e(ho,Zr),e(Zr,cM),e(cM,S_e),e(S_e,Srr),e(cM,Rrr),e(cM,bz),e(bz,Prr),e(cM,Brr),e(Zr,Irr),e(Zr,mM),e(mM,R_e),e(R_e,qrr),e(mM,Nrr),e(mM,vz),e(vz,jrr),e(mM,Drr),e(Zr,Grr),e(Zr,fM),e(fM,P_e),e(P_e,Orr),e(fM,Vrr),e(fM,Fz),e(Fz,Xrr),e(fM,zrr),e(Zr,Wrr),e(Zr,gM),e(gM,B_e),e(B_e,Qrr),e(gM,Hrr),e(gM,Tz),e(Tz,Urr),e(gM,Jrr),e(Zr,Yrr),e(Zr,hM),e(hM,I_e),e(I_e,Krr),e(hM,Zrr),e(hM,Mz),e(Mz,etr),e(hM,otr),e(ho,rtr),e(ho,uM),e(uM,ttr),e(uM,q_e),e(q_e,atr),e(uM,ntr),e(uM,N_e),e(N_e,str),e(ho,ltr),M(pM,ho,null),b(m,yNe,_),b(m,wd,_),e(wd,_M),e(_M,j_e),M(k8,j_e,null),e(wd,itr),e(wd,D_e),e(D_e,dtr),b(m,LNe,_),b(m,Wo,_),M(S8,Wo,null),e(Wo,ctr),e(Wo,Ad),e(Ad,mtr),e(Ad,Ez),e(Ez,ftr),e(Ad,gtr),e(Ad,Cz),e(Cz,htr),e(Ad,utr),e(Wo,ptr),e(Wo,R8),e(R8,_tr),e(R8,G_e),e(G_e,btr),e(R8,vtr),e(Wo,Ftr),e(Wo,Mt),M(P8,Mt,null),e(Mt,Ttr),e(Mt,O_e),e(O_e,Mtr),e(Mt,Etr),e(Mt,yd),e(yd,Ctr),e(yd,V_e),e(V_e,wtr),e(yd,Atr),e(yd,wz),e(wz,ytr),e(yd,Ltr),e(Mt,xtr),M(bM,Mt,null),e(Wo,$tr),e(Wo,uo),M(B8,uo,null),e(uo,ktr),e(uo,X_e),e(X_e,Str),e(uo,Rtr),e(uo,Wa),e(Wa,Ptr),e(Wa,z_e),e(z_e,Btr),e(Wa,Itr),e(Wa,W_e),e(W_e,qtr),e(Wa,Ntr),e(Wa,Q_e),e(Q_e,jtr),e(Wa,Dtr),e(uo,Gtr),e(uo,Ld),e(Ld,vM),e(vM,H_e),e(H_e,Otr),e(vM,Vtr),e(vM,Az),e(Az,Xtr),e(vM,ztr),e(Ld,Wtr),e(Ld,FM),e(FM,U_e),e(U_e,Qtr),e(FM,Htr),e(FM,yz),e(yz,Utr),e(FM,Jtr),e(Ld,Ytr),e(Ld,TM),e(TM,J_e),e(J_e,Ktr),e(TM,Ztr),e(TM,Lz),e(Lz,ear),e(TM,oar),e(uo,rar),e(uo,MM),e(MM,tar),e(MM,Y_e),e(Y_e,aar),e(MM,nar),e(MM,K_e),e(K_e,sar),e(uo,lar),M(EM,uo,null),b(m,xNe,_),b(m,xd,_),e(xd,CM),e(CM,Z_e),M(I8,Z_e,null),e(xd,iar),e(xd,ebe),e(ebe,dar),b(m,$Ne,_),b(m,Qo,_),M(q8,Qo,null),e(Qo,car),e(Qo,$d),e($d,mar),e($d,xz),e(xz,far),e($d,gar),e($d,$z),e($z,har),e($d,uar),e(Qo,par),e(Qo,N8),e(N8,_ar),e(N8,obe),e(obe,bar),e(N8,Far),e(Qo,Tar),e(Qo,Et),M(j8,Et,null),e(Et,Mar),e(Et,rbe),e(rbe,Ear),e(Et,Car),e(Et,kd),e(kd,war),e(kd,tbe),e(tbe,Aar),e(kd,yar),e(kd,kz),e(kz,Lar),e(kd,xar),e(Et,$ar),M(wM,Et,null),e(Qo,kar),e(Qo,po),M(D8,po,null),e(po,Sar),e(po,abe),e(abe,Rar),e(po,Par),e(po,Qa),e(Qa,Bar),e(Qa,nbe),e(nbe,Iar),e(Qa,qar),e(Qa,sbe),e(sbe,Nar),e(Qa,jar),e(Qa,lbe),e(lbe,Dar),e(Qa,Gar),e(po,Oar),e(po,G8),e(G8,AM),e(AM,ibe),e(ibe,Var),e(AM,Xar),e(AM,Sz),e(Sz,zar),e(AM,War),e(G8,Qar),e(G8,yM),e(yM,dbe),e(dbe,Har),e(yM,Uar),e(yM,Rz),e(Rz,Jar),e(yM,Yar),e(po,Kar),e(po,LM),e(LM,Zar),e(LM,cbe),e(cbe,enr),e(LM,onr),e(LM,mbe),e(mbe,rnr),e(po,tnr),M(xM,po,null),b(m,kNe,_),b(m,Sd,_),e(Sd,$M),e($M,fbe),M(O8,fbe,null),e(Sd,anr),e(Sd,gbe),e(gbe,nnr),b(m,SNe,_),b(m,Ho,_),M(V8,Ho,null),e(Ho,snr),e(Ho,Rd),e(Rd,lnr),e(Rd,Pz),e(Pz,inr),e(Rd,dnr),e(Rd,Bz),e(Bz,cnr),e(Rd,mnr),e(Ho,fnr),e(Ho,X8),e(X8,gnr),e(X8,hbe),e(hbe,hnr),e(X8,unr),e(Ho,pnr),e(Ho,Ct),M(z8,Ct,null),e(Ct,_nr),e(Ct,ube),e(ube,bnr),e(Ct,vnr),e(Ct,Pd),e(Pd,Fnr),e(Pd,pbe),e(pbe,Tnr),e(Pd,Mnr),e(Pd,Iz),e(Iz,Enr),e(Pd,Cnr),e(Ct,wnr),M(kM,Ct,null),e(Ho,Anr),e(Ho,_o),M(W8,_o,null),e(_o,ynr),e(_o,_be),e(_be,Lnr),e(_o,xnr),e(_o,Ha),e(Ha,$nr),e(Ha,bbe),e(bbe,knr),e(Ha,Snr),e(Ha,vbe),e(vbe,Rnr),e(Ha,Pnr),e(Ha,Fbe),e(Fbe,Bnr),e(Ha,Inr),e(_o,qnr),e(_o,Tbe),e(Tbe,SM),e(SM,Mbe),e(Mbe,Nnr),e(SM,jnr),e(SM,qz),e(qz,Dnr),e(SM,Gnr),e(_o,Onr),e(_o,RM),e(RM,Vnr),e(RM,Ebe),e(Ebe,Xnr),e(RM,znr),e(RM,Cbe),e(Cbe,Wnr),e(_o,Qnr),M(PM,_o,null),b(m,RNe,_),b(m,Bd,_),e(Bd,BM),e(BM,wbe),M(Q8,wbe,null),e(Bd,Hnr),e(Bd,Abe),e(Abe,Unr),b(m,PNe,_),b(m,Uo,_),M(H8,Uo,null),e(Uo,Jnr),e(Uo,Id),e(Id,Ynr),e(Id,Nz),e(Nz,Knr),e(Id,Znr),e(Id,jz),e(jz,esr),e(Id,osr),e(Uo,rsr),e(Uo,U8),e(U8,tsr),e(U8,ybe),e(ybe,asr),e(U8,nsr),e(Uo,ssr),e(Uo,wt),M(J8,wt,null),e(wt,lsr),e(wt,Lbe),e(Lbe,isr),e(wt,dsr),e(wt,qd),e(qd,csr),e(qd,xbe),e(xbe,msr),e(qd,fsr),e(qd,Dz),e(Dz,gsr),e(qd,hsr),e(wt,usr),M(IM,wt,null),e(Uo,psr),e(Uo,bo),M(Y8,bo,null),e(bo,_sr),e(bo,$be),e($be,bsr),e(bo,vsr),e(bo,Ua),e(Ua,Fsr),e(Ua,kbe),e(kbe,Tsr),e(Ua,Msr),e(Ua,Sbe),e(Sbe,Esr),e(Ua,Csr),e(Ua,Rbe),e(Rbe,wsr),e(Ua,Asr),e(bo,ysr),e(bo,Ja),e(Ja,qM),e(qM,Pbe),e(Pbe,Lsr),e(qM,xsr),e(qM,Gz),e(Gz,$sr),e(qM,ksr),e(Ja,Ssr),e(Ja,NM),e(NM,Bbe),e(Bbe,Rsr),e(NM,Psr),e(NM,Oz),e(Oz,Bsr),e(NM,Isr),e(Ja,qsr),e(Ja,jM),e(jM,Ibe),e(Ibe,Nsr),e(jM,jsr),e(jM,Vz),e(Vz,Dsr),e(jM,Gsr),e(Ja,Osr),e(Ja,DM),e(DM,qbe),e(qbe,Vsr),e(DM,Xsr),e(DM,Xz),e(Xz,zsr),e(DM,Wsr),e(bo,Qsr),e(bo,GM),e(GM,Hsr),e(GM,Nbe),e(Nbe,Usr),e(GM,Jsr),e(GM,jbe),e(jbe,Ysr),e(bo,Ksr),M(OM,bo,null),b(m,BNe,_),b(m,Nd,_),e(Nd,VM),e(VM,Dbe),M(K8,Dbe,null),e(Nd,Zsr),e(Nd,Gbe),e(Gbe,elr),b(m,INe,_),b(m,Jo,_),M(Z8,Jo,null),e(Jo,olr),e(Jo,jd),e(jd,rlr),e(jd,zz),e(zz,tlr),e(jd,alr),e(jd,Wz),e(Wz,nlr),e(jd,slr),e(Jo,llr),e(Jo,e7),e(e7,ilr),e(e7,Obe),e(Obe,dlr),e(e7,clr),e(Jo,mlr),e(Jo,At),M(o7,At,null),e(At,flr),e(At,Vbe),e(Vbe,glr),e(At,hlr),e(At,Dd),e(Dd,ulr),e(Dd,Xbe),e(Xbe,plr),e(Dd,_lr),e(Dd,Qz),e(Qz,blr),e(Dd,vlr),e(At,Flr),M(XM,At,null),e(Jo,Tlr),e(Jo,vo),M(r7,vo,null),e(vo,Mlr),e(vo,zbe),e(zbe,Elr),e(vo,Clr),e(vo,Ya),e(Ya,wlr),e(Ya,Wbe),e(Wbe,Alr),e(Ya,ylr),e(Ya,Qbe),e(Qbe,Llr),e(Ya,xlr),e(Ya,Hbe),e(Hbe,$lr),e(Ya,klr),e(vo,Slr),e(vo,Ube),e(Ube,zM),e(zM,Jbe),e(Jbe,Rlr),e(zM,Plr),e(zM,Hz),e(Hz,Blr),e(zM,Ilr),e(vo,qlr),e(vo,WM),e(WM,Nlr),e(WM,Ybe),e(Ybe,jlr),e(WM,Dlr),e(WM,Kbe),e(Kbe,Glr),e(vo,Olr),M(QM,vo,null),b(m,qNe,_),b(m,Gd,_),e(Gd,HM),e(HM,Zbe),M(t7,Zbe,null),e(Gd,Vlr),e(Gd,e2e),e(e2e,Xlr),b(m,NNe,_),b(m,Yo,_),M(a7,Yo,null),e(Yo,zlr),e(Yo,Od),e(Od,Wlr),e(Od,Uz),e(Uz,Qlr),e(Od,Hlr),e(Od,Jz),e(Jz,Ulr),e(Od,Jlr),e(Yo,Ylr),e(Yo,n7),e(n7,Klr),e(n7,o2e),e(o2e,Zlr),e(n7,eir),e(Yo,oir),e(Yo,yt),M(s7,yt,null),e(yt,rir),e(yt,r2e),e(r2e,tir),e(yt,air),e(yt,Vd),e(Vd,nir),e(Vd,t2e),e(t2e,sir),e(Vd,lir),e(Vd,Yz),e(Yz,iir),e(Vd,dir),e(yt,cir),M(UM,yt,null),e(Yo,mir),e(Yo,wr),M(l7,wr,null),e(wr,fir),e(wr,a2e),e(a2e,gir),e(wr,hir),e(wr,Ka),e(Ka,uir),e(Ka,n2e),e(n2e,pir),e(Ka,_ir),e(Ka,s2e),e(s2e,bir),e(Ka,vir),e(Ka,l2e),e(l2e,Fir),e(Ka,Tir),e(wr,Mir),e(wr,N),e(N,JM),e(JM,i2e),e(i2e,Eir),e(JM,Cir),e(JM,Kz),e(Kz,wir),e(JM,Air),e(N,yir),e(N,YM),e(YM,d2e),e(d2e,Lir),e(YM,xir),e(YM,Zz),e(Zz,$ir),e(YM,kir),e(N,Sir),e(N,KM),e(KM,c2e),e(c2e,Rir),e(KM,Pir),e(KM,eW),e(eW,Bir),e(KM,Iir),e(N,qir),e(N,ZM),e(ZM,m2e),e(m2e,Nir),e(ZM,jir),e(ZM,oW),e(oW,Dir),e(ZM,Gir),e(N,Oir),e(N,e4),e(e4,f2e),e(f2e,Vir),e(e4,Xir),e(e4,rW),e(rW,zir),e(e4,Wir),e(N,Qir),e(N,o4),e(o4,g2e),e(g2e,Hir),e(o4,Uir),e(o4,tW),e(tW,Jir),e(o4,Yir),e(N,Kir),e(N,r4),e(r4,h2e),e(h2e,Zir),e(r4,edr),e(r4,aW),e(aW,odr),e(r4,rdr),e(N,tdr),e(N,t4),e(t4,u2e),e(u2e,adr),e(t4,ndr),e(t4,nW),e(nW,sdr),e(t4,ldr),e(N,idr),e(N,a4),e(a4,p2e),e(p2e,ddr),e(a4,cdr),e(a4,sW),e(sW,mdr),e(a4,fdr),e(N,gdr),e(N,n4),e(n4,_2e),e(_2e,hdr),e(n4,udr),e(n4,lW),e(lW,pdr),e(n4,_dr),e(N,bdr),e(N,s4),e(s4,b2e),e(b2e,vdr),e(s4,Fdr),e(s4,iW),e(iW,Tdr),e(s4,Mdr),e(N,Edr),e(N,l4),e(l4,v2e),e(v2e,Cdr),e(l4,wdr),e(l4,dW),e(dW,Adr),e(l4,ydr),e(N,Ldr),e(N,i4),e(i4,F2e),e(F2e,xdr),e(i4,$dr),e(i4,cW),e(cW,kdr),e(i4,Sdr),e(N,Rdr),e(N,d4),e(d4,T2e),e(T2e,Pdr),e(d4,Bdr),e(d4,mW),e(mW,Idr),e(d4,qdr),e(N,Ndr),e(N,c4),e(c4,M2e),e(M2e,jdr),e(c4,Ddr),e(c4,fW),e(fW,Gdr),e(c4,Odr),e(N,Vdr),e(N,m4),e(m4,E2e),e(E2e,Xdr),e(m4,zdr),e(m4,gW),e(gW,Wdr),e(m4,Qdr),e(N,Hdr),e(N,f4),e(f4,C2e),e(C2e,Udr),e(f4,Jdr),e(f4,hW),e(hW,Ydr),e(f4,Kdr),e(N,Zdr),e(N,Is),e(Is,w2e),e(w2e,ecr),e(Is,ocr),e(Is,uW),e(uW,rcr),e(Is,tcr),e(Is,pW),e(pW,acr),e(Is,ncr),e(N,scr),e(N,g4),e(g4,A2e),e(A2e,lcr),e(g4,icr),e(g4,_W),e(_W,dcr),e(g4,ccr),e(N,mcr),e(N,h4),e(h4,y2e),e(y2e,fcr),e(h4,gcr),e(h4,bW),e(bW,hcr),e(h4,ucr),e(N,pcr),e(N,u4),e(u4,L2e),e(L2e,_cr),e(u4,bcr),e(u4,vW),e(vW,vcr),e(u4,Fcr),e(N,Tcr),e(N,p4),e(p4,x2e),e(x2e,Mcr),e(p4,Ecr),e(p4,FW),e(FW,Ccr),e(p4,wcr),e(N,Acr),e(N,_4),e(_4,$2e),e($2e,ycr),e(_4,Lcr),e(_4,TW),e(TW,xcr),e(_4,$cr),e(N,kcr),e(N,b4),e(b4,k2e),e(k2e,Scr),e(b4,Rcr),e(b4,MW),e(MW,Pcr),e(b4,Bcr),e(N,Icr),e(N,v4),e(v4,S2e),e(S2e,qcr),e(v4,Ncr),e(v4,EW),e(EW,jcr),e(v4,Dcr),e(N,Gcr),e(N,F4),e(F4,R2e),e(R2e,Ocr),e(F4,Vcr),e(F4,CW),e(CW,Xcr),e(F4,zcr),e(N,Wcr),e(N,T4),e(T4,P2e),e(P2e,Qcr),e(T4,Hcr),e(T4,wW),e(wW,Ucr),e(T4,Jcr),e(N,Ycr),e(N,M4),e(M4,B2e),e(B2e,Kcr),e(M4,Zcr),e(M4,AW),e(AW,emr),e(M4,omr),e(N,rmr),e(N,E4),e(E4,I2e),e(I2e,tmr),e(E4,amr),e(E4,yW),e(yW,nmr),e(E4,smr),e(N,lmr),e(N,C4),e(C4,q2e),e(q2e,imr),e(C4,dmr),e(C4,LW),e(LW,cmr),e(C4,mmr),e(N,fmr),e(N,w4),e(w4,N2e),e(N2e,gmr),e(w4,hmr),e(w4,xW),e(xW,umr),e(w4,pmr),e(N,_mr),e(N,A4),e(A4,j2e),e(j2e,bmr),e(A4,vmr),e(A4,$W),e($W,Fmr),e(A4,Tmr),e(N,Mmr),e(N,y4),e(y4,D2e),e(D2e,Emr),e(y4,Cmr),e(y4,kW),e(kW,wmr),e(y4,Amr),e(N,ymr),e(N,L4),e(L4,G2e),e(G2e,Lmr),e(L4,xmr),e(L4,SW),e(SW,$mr),e(L4,kmr),e(N,Smr),e(N,x4),e(x4,O2e),e(O2e,Rmr),e(x4,Pmr),e(x4,RW),e(RW,Bmr),e(x4,Imr),e(N,qmr),e(N,$4),e($4,V2e),e(V2e,Nmr),e($4,jmr),e($4,PW),e(PW,Dmr),e($4,Gmr),e(N,Omr),e(N,k4),e(k4,X2e),e(X2e,Vmr),e(k4,Xmr),e(k4,BW),e(BW,zmr),e(k4,Wmr),e(N,Qmr),e(N,S4),e(S4,z2e),e(z2e,Hmr),e(S4,Umr),e(S4,IW),e(IW,Jmr),e(S4,Ymr),e(N,Kmr),e(N,R4),e(R4,W2e),e(W2e,Zmr),e(R4,efr),e(R4,qW),e(qW,ofr),e(R4,rfr),e(N,tfr),e(N,P4),e(P4,Q2e),e(Q2e,afr),e(P4,nfr),e(P4,NW),e(NW,sfr),e(P4,lfr),e(N,ifr),e(N,B4),e(B4,H2e),e(H2e,dfr),e(B4,cfr),e(B4,jW),e(jW,mfr),e(B4,ffr),e(N,gfr),e(N,I4),e(I4,U2e),e(U2e,hfr),e(I4,ufr),e(I4,DW),e(DW,pfr),e(I4,_fr),e(N,bfr),e(N,q4),e(q4,J2e),e(J2e,vfr),e(q4,Ffr),e(q4,GW),e(GW,Tfr),e(q4,Mfr),e(N,Efr),e(N,N4),e(N4,Y2e),e(Y2e,Cfr),e(N4,wfr),e(N4,OW),e(OW,Afr),e(N4,yfr),e(N,Lfr),e(N,j4),e(j4,K2e),e(K2e,xfr),e(j4,$fr),e(j4,VW),e(VW,kfr),e(j4,Sfr),e(N,Rfr),e(N,D4),e(D4,Z2e),e(Z2e,Pfr),e(D4,Bfr),e(D4,XW),e(XW,Ifr),e(D4,qfr),e(wr,Nfr),M(G4,wr,null),b(m,jNe,_),b(m,Xd,_),e(Xd,O4),e(O4,eve),M(i7,eve,null),e(Xd,jfr),e(Xd,ove),e(ove,Dfr),b(m,DNe,_),b(m,Ko,_),M(d7,Ko,null),e(Ko,Gfr),e(Ko,zd),e(zd,Ofr),e(zd,zW),e(zW,Vfr),e(zd,Xfr),e(zd,WW),e(WW,zfr),e(zd,Wfr),e(Ko,Qfr),e(Ko,c7),e(c7,Hfr),e(c7,rve),e(rve,Ufr),e(c7,Jfr),e(Ko,Yfr),e(Ko,Lt),M(m7,Lt,null),e(Lt,Kfr),e(Lt,tve),e(tve,Zfr),e(Lt,egr),e(Lt,Wd),e(Wd,ogr),e(Wd,ave),e(ave,rgr),e(Wd,tgr),e(Wd,QW),e(QW,agr),e(Wd,ngr),e(Lt,sgr),M(V4,Lt,null),e(Ko,lgr),e(Ko,Ar),M(f7,Ar,null),e(Ar,igr),e(Ar,nve),e(nve,dgr),e(Ar,cgr),e(Ar,Za),e(Za,mgr),e(Za,sve),e(sve,fgr),e(Za,ggr),e(Za,lve),e(lve,hgr),e(Za,ugr),e(Za,ive),e(ive,pgr),e(Za,_gr),e(Ar,bgr),e(Ar,se),e(se,X4),e(X4,dve),e(dve,vgr),e(X4,Fgr),e(X4,HW),e(HW,Tgr),e(X4,Mgr),e(se,Egr),e(se,z4),e(z4,cve),e(cve,Cgr),e(z4,wgr),e(z4,UW),e(UW,Agr),e(z4,ygr),e(se,Lgr),e(se,W4),e(W4,mve),e(mve,xgr),e(W4,$gr),e(W4,JW),e(JW,kgr),e(W4,Sgr),e(se,Rgr),e(se,Q4),e(Q4,fve),e(fve,Pgr),e(Q4,Bgr),e(Q4,YW),e(YW,Igr),e(Q4,qgr),e(se,Ngr),e(se,H4),e(H4,gve),e(gve,jgr),e(H4,Dgr),e(H4,KW),e(KW,Ggr),e(H4,Ogr),e(se,Vgr),e(se,U4),e(U4,hve),e(hve,Xgr),e(U4,zgr),e(U4,ZW),e(ZW,Wgr),e(U4,Qgr),e(se,Hgr),e(se,J4),e(J4,uve),e(uve,Ugr),e(J4,Jgr),e(J4,eQ),e(eQ,Ygr),e(J4,Kgr),e(se,Zgr),e(se,Y4),e(Y4,pve),e(pve,ehr),e(Y4,ohr),e(Y4,oQ),e(oQ,rhr),e(Y4,thr),e(se,ahr),e(se,K4),e(K4,_ve),e(_ve,nhr),e(K4,shr),e(K4,rQ),e(rQ,lhr),e(K4,ihr),e(se,dhr),e(se,Z4),e(Z4,bve),e(bve,chr),e(Z4,mhr),e(Z4,tQ),e(tQ,fhr),e(Z4,ghr),e(se,hhr),e(se,eE),e(eE,vve),e(vve,uhr),e(eE,phr),e(eE,aQ),e(aQ,_hr),e(eE,bhr),e(se,vhr),e(se,oE),e(oE,Fve),e(Fve,Fhr),e(oE,Thr),e(oE,nQ),e(nQ,Mhr),e(oE,Ehr),e(se,Chr),e(se,rE),e(rE,Tve),e(Tve,whr),e(rE,Ahr),e(rE,sQ),e(sQ,yhr),e(rE,Lhr),e(se,xhr),e(se,tE),e(tE,Mve),e(Mve,$hr),e(tE,khr),e(tE,lQ),e(lQ,Shr),e(tE,Rhr),e(se,Phr),e(se,aE),e(aE,Eve),e(Eve,Bhr),e(aE,Ihr),e(aE,iQ),e(iQ,qhr),e(aE,Nhr),e(se,jhr),e(se,nE),e(nE,Cve),e(Cve,Dhr),e(nE,Ghr),e(nE,dQ),e(dQ,Ohr),e(nE,Vhr),e(se,Xhr),e(se,sE),e(sE,wve),e(wve,zhr),e(sE,Whr),e(sE,cQ),e(cQ,Qhr),e(sE,Hhr),e(se,Uhr),e(se,lE),e(lE,Ave),e(Ave,Jhr),e(lE,Yhr),e(lE,mQ),e(mQ,Khr),e(lE,Zhr),e(se,eur),e(se,iE),e(iE,yve),e(yve,our),e(iE,rur),e(iE,fQ),e(fQ,tur),e(iE,aur),e(se,nur),e(se,dE),e(dE,Lve),e(Lve,sur),e(dE,lur),e(dE,gQ),e(gQ,iur),e(dE,dur),e(se,cur),e(se,cE),e(cE,xve),e(xve,mur),e(cE,fur),e(cE,hQ),e(hQ,gur),e(cE,hur),e(se,uur),e(se,mE),e(mE,$ve),e($ve,pur),e(mE,_ur),e(mE,uQ),e(uQ,bur),e(mE,vur),e(se,Fur),e(se,fE),e(fE,kve),e(kve,Tur),e(fE,Mur),e(fE,pQ),e(pQ,Eur),e(fE,Cur),e(Ar,wur),M(gE,Ar,null),b(m,GNe,_),b(m,Qd,_),e(Qd,hE),e(hE,Sve),M(g7,Sve,null),e(Qd,Aur),e(Qd,Rve),e(Rve,yur),b(m,ONe,_),b(m,Zo,_),M(h7,Zo,null),e(Zo,Lur),e(Zo,Hd),e(Hd,xur),e(Hd,_Q),e(_Q,$ur),e(Hd,kur),e(Hd,bQ),e(bQ,Sur),e(Hd,Rur),e(Zo,Pur),e(Zo,u7),e(u7,Bur),e(u7,Pve),e(Pve,Iur),e(u7,qur),e(Zo,Nur),e(Zo,xt),M(p7,xt,null),e(xt,jur),e(xt,Bve),e(Bve,Dur),e(xt,Gur),e(xt,Ud),e(Ud,Our),e(Ud,Ive),e(Ive,Vur),e(Ud,Xur),e(Ud,vQ),e(vQ,zur),e(Ud,Wur),e(xt,Qur),M(uE,xt,null),e(Zo,Hur),e(Zo,yr),M(_7,yr,null),e(yr,Uur),e(yr,qve),e(qve,Jur),e(yr,Yur),e(yr,en),e(en,Kur),e(en,Nve),e(Nve,Zur),e(en,epr),e(en,jve),e(jve,opr),e(en,rpr),e(en,Dve),e(Dve,tpr),e(en,apr),e(yr,npr),e(yr,Me),e(Me,pE),e(pE,Gve),e(Gve,spr),e(pE,lpr),e(pE,FQ),e(FQ,ipr),e(pE,dpr),e(Me,cpr),e(Me,_E),e(_E,Ove),e(Ove,mpr),e(_E,fpr),e(_E,TQ),e(TQ,gpr),e(_E,hpr),e(Me,upr),e(Me,bE),e(bE,Vve),e(Vve,ppr),e(bE,_pr),e(bE,MQ),e(MQ,bpr),e(bE,vpr),e(Me,Fpr),e(Me,vE),e(vE,Xve),e(Xve,Tpr),e(vE,Mpr),e(vE,EQ),e(EQ,Epr),e(vE,Cpr),e(Me,wpr),e(Me,FE),e(FE,zve),e(zve,Apr),e(FE,ypr),e(FE,CQ),e(CQ,Lpr),e(FE,xpr),e(Me,$pr),e(Me,TE),e(TE,Wve),e(Wve,kpr),e(TE,Spr),e(TE,wQ),e(wQ,Rpr),e(TE,Ppr),e(Me,Bpr),e(Me,ME),e(ME,Qve),e(Qve,Ipr),e(ME,qpr),e(ME,AQ),e(AQ,Npr),e(ME,jpr),e(Me,Dpr),e(Me,EE),e(EE,Hve),e(Hve,Gpr),e(EE,Opr),e(EE,yQ),e(yQ,Vpr),e(EE,Xpr),e(Me,zpr),e(Me,CE),e(CE,Uve),e(Uve,Wpr),e(CE,Qpr),e(CE,LQ),e(LQ,Hpr),e(CE,Upr),e(Me,Jpr),e(Me,wE),e(wE,Jve),e(Jve,Ypr),e(wE,Kpr),e(wE,xQ),e(xQ,Zpr),e(wE,e_r),e(Me,o_r),e(Me,AE),e(AE,Yve),e(Yve,r_r),e(AE,t_r),e(AE,$Q),e($Q,a_r),e(AE,n_r),e(Me,s_r),e(Me,yE),e(yE,Kve),e(Kve,l_r),e(yE,i_r),e(yE,kQ),e(kQ,d_r),e(yE,c_r),e(yr,m_r),M(LE,yr,null),b(m,VNe,_),b(m,Jd,_),e(Jd,xE),e(xE,Zve),M(b7,Zve,null),e(Jd,f_r),e(Jd,eFe),e(eFe,g_r),b(m,XNe,_),b(m,er,_),M(v7,er,null),e(er,h_r),e(er,Yd),e(Yd,u_r),e(Yd,SQ),e(SQ,p_r),e(Yd,__r),e(Yd,RQ),e(RQ,b_r),e(Yd,v_r),e(er,F_r),e(er,F7),e(F7,T_r),e(F7,oFe),e(oFe,M_r),e(F7,E_r),e(er,C_r),e(er,$t),M(T7,$t,null),e($t,w_r),e($t,rFe),e(rFe,A_r),e($t,y_r),e($t,Kd),e(Kd,L_r),e(Kd,tFe),e(tFe,x_r),e(Kd,$_r),e(Kd,PQ),e(PQ,k_r),e(Kd,S_r),e($t,R_r),M($E,$t,null),e(er,P_r),e(er,Lr),M(M7,Lr,null),e(Lr,B_r),e(Lr,aFe),e(aFe,I_r),e(Lr,q_r),e(Lr,on),e(on,N_r),e(on,nFe),e(nFe,j_r),e(on,D_r),e(on,sFe),e(sFe,G_r),e(on,O_r),e(on,lFe),e(lFe,V_r),e(on,X_r),e(Lr,z_r),e(Lr,rn),e(rn,kE),e(kE,iFe),e(iFe,W_r),e(kE,Q_r),e(kE,BQ),e(BQ,H_r),e(kE,U_r),e(rn,J_r),e(rn,SE),e(SE,dFe),e(dFe,Y_r),e(SE,K_r),e(SE,IQ),e(IQ,Z_r),e(SE,ebr),e(rn,obr),e(rn,RE),e(RE,cFe),e(cFe,rbr),e(RE,tbr),e(RE,qQ),e(qQ,abr),e(RE,nbr),e(rn,sbr),e(rn,PE),e(PE,mFe),e(mFe,lbr),e(PE,ibr),e(PE,NQ),e(NQ,dbr),e(PE,cbr),e(Lr,mbr),M(BE,Lr,null),b(m,zNe,_),b(m,Zd,_),e(Zd,IE),e(IE,fFe),M(E7,fFe,null),e(Zd,fbr),e(Zd,gFe),e(gFe,gbr),b(m,WNe,_),b(m,or,_),M(C7,or,null),e(or,hbr),e(or,ec),e(ec,ubr),e(ec,jQ),e(jQ,pbr),e(ec,_br),e(ec,DQ),e(DQ,bbr),e(ec,vbr),e(or,Fbr),e(or,w7),e(w7,Tbr),e(w7,hFe),e(hFe,Mbr),e(w7,Ebr),e(or,Cbr),e(or,kt),M(A7,kt,null),e(kt,wbr),e(kt,uFe),e(uFe,Abr),e(kt,ybr),e(kt,oc),e(oc,Lbr),e(oc,pFe),e(pFe,xbr),e(oc,$br),e(oc,GQ),e(GQ,kbr),e(oc,Sbr),e(kt,Rbr),M(qE,kt,null),e(or,Pbr),e(or,xr),M(y7,xr,null),e(xr,Bbr),e(xr,_Fe),e(_Fe,Ibr),e(xr,qbr),e(xr,tn),e(tn,Nbr),e(tn,bFe),e(bFe,jbr),e(tn,Dbr),e(tn,vFe),e(vFe,Gbr),e(tn,Obr),e(tn,FFe),e(FFe,Vbr),e(tn,Xbr),e(xr,zbr),e(xr,ie),e(ie,NE),e(NE,TFe),e(TFe,Wbr),e(NE,Qbr),e(NE,OQ),e(OQ,Hbr),e(NE,Ubr),e(ie,Jbr),e(ie,jE),e(jE,MFe),e(MFe,Ybr),e(jE,Kbr),e(jE,VQ),e(VQ,Zbr),e(jE,e2r),e(ie,o2r),e(ie,DE),e(DE,EFe),e(EFe,r2r),e(DE,t2r),e(DE,XQ),e(XQ,a2r),e(DE,n2r),e(ie,s2r),e(ie,GE),e(GE,CFe),e(CFe,l2r),e(GE,i2r),e(GE,zQ),e(zQ,d2r),e(GE,c2r),e(ie,m2r),e(ie,OE),e(OE,wFe),e(wFe,f2r),e(OE,g2r),e(OE,WQ),e(WQ,h2r),e(OE,u2r),e(ie,p2r),e(ie,VE),e(VE,AFe),e(AFe,_2r),e(VE,b2r),e(VE,QQ),e(QQ,v2r),e(VE,F2r),e(ie,T2r),e(ie,XE),e(XE,yFe),e(yFe,M2r),e(XE,E2r),e(XE,HQ),e(HQ,C2r),e(XE,w2r),e(ie,A2r),e(ie,zE),e(zE,LFe),e(LFe,y2r),e(zE,L2r),e(zE,UQ),e(UQ,x2r),e(zE,$2r),e(ie,k2r),e(ie,WE),e(WE,xFe),e(xFe,S2r),e(WE,R2r),e(WE,JQ),e(JQ,P2r),e(WE,B2r),e(ie,I2r),e(ie,QE),e(QE,$Fe),e($Fe,q2r),e(QE,N2r),e(QE,YQ),e(YQ,j2r),e(QE,D2r),e(ie,G2r),e(ie,HE),e(HE,kFe),e(kFe,O2r),e(HE,V2r),e(HE,KQ),e(KQ,X2r),e(HE,z2r),e(ie,W2r),e(ie,UE),e(UE,SFe),e(SFe,Q2r),e(UE,H2r),e(UE,ZQ),e(ZQ,U2r),e(UE,J2r),e(ie,Y2r),e(ie,JE),e(JE,RFe),e(RFe,K2r),e(JE,Z2r),e(JE,eH),e(eH,evr),e(JE,ovr),e(ie,rvr),e(ie,YE),e(YE,PFe),e(PFe,tvr),e(YE,avr),e(YE,oH),e(oH,nvr),e(YE,svr),e(ie,lvr),e(ie,KE),e(KE,BFe),e(BFe,ivr),e(KE,dvr),e(KE,rH),e(rH,cvr),e(KE,mvr),e(ie,fvr),e(ie,ZE),e(ZE,IFe),e(IFe,gvr),e(ZE,hvr),e(ZE,tH),e(tH,uvr),e(ZE,pvr),e(ie,_vr),e(ie,eC),e(eC,qFe),e(qFe,bvr),e(eC,vvr),e(eC,aH),e(aH,Fvr),e(eC,Tvr),e(ie,Mvr),e(ie,oC),e(oC,NFe),e(NFe,Evr),e(oC,Cvr),e(oC,nH),e(nH,wvr),e(oC,Avr),e(ie,yvr),e(ie,rC),e(rC,jFe),e(jFe,Lvr),e(rC,xvr),e(rC,sH),e(sH,$vr),e(rC,kvr),e(ie,Svr),e(ie,tC),e(tC,DFe),e(DFe,Rvr),e(tC,Pvr),e(tC,lH),e(lH,Bvr),e(tC,Ivr),e(xr,qvr),M(aC,xr,null),b(m,QNe,_),b(m,rc,_),e(rc,nC),e(nC,GFe),M(L7,GFe,null),e(rc,Nvr),e(rc,OFe),e(OFe,jvr),b(m,HNe,_),b(m,rr,_),M(x7,rr,null),e(rr,Dvr),e(rr,tc),e(tc,Gvr),e(tc,iH),e(iH,Ovr),e(tc,Vvr),e(tc,dH),e(dH,Xvr),e(tc,zvr),e(rr,Wvr),e(rr,$7),e($7,Qvr),e($7,VFe),e(VFe,Hvr),e($7,Uvr),e(rr,Jvr),e(rr,St),M(k7,St,null),e(St,Yvr),e(St,XFe),e(XFe,Kvr),e(St,Zvr),e(St,ac),e(ac,eFr),e(ac,zFe),e(zFe,oFr),e(ac,rFr),e(ac,cH),e(cH,tFr),e(ac,aFr),e(St,nFr),M(sC,St,null),e(rr,sFr),e(rr,$r),M(S7,$r,null),e($r,lFr),e($r,WFe),e(WFe,iFr),e($r,dFr),e($r,an),e(an,cFr),e(an,QFe),e(QFe,mFr),e(an,fFr),e(an,HFe),e(HFe,gFr),e(an,hFr),e(an,UFe),e(UFe,uFr),e(an,pFr),e($r,_Fr),e($r,ye),e(ye,lC),e(lC,JFe),e(JFe,bFr),e(lC,vFr),e(lC,mH),e(mH,FFr),e(lC,TFr),e(ye,MFr),e(ye,iC),e(iC,YFe),e(YFe,EFr),e(iC,CFr),e(iC,fH),e(fH,wFr),e(iC,AFr),e(ye,yFr),e(ye,dC),e(dC,KFe),e(KFe,LFr),e(dC,xFr),e(dC,gH),e(gH,$Fr),e(dC,kFr),e(ye,SFr),e(ye,cC),e(cC,ZFe),e(ZFe,RFr),e(cC,PFr),e(cC,hH),e(hH,BFr),e(cC,IFr),e(ye,qFr),e(ye,mC),e(mC,e1e),e(e1e,NFr),e(mC,jFr),e(mC,uH),e(uH,DFr),e(mC,GFr),e(ye,OFr),e(ye,fC),e(fC,o1e),e(o1e,VFr),e(fC,XFr),e(fC,pH),e(pH,zFr),e(fC,WFr),e(ye,QFr),e(ye,gC),e(gC,r1e),e(r1e,HFr),e(gC,UFr),e(gC,_H),e(_H,JFr),e(gC,YFr),e(ye,KFr),e(ye,hC),e(hC,t1e),e(t1e,ZFr),e(hC,e1r),e(hC,bH),e(bH,o1r),e(hC,r1r),e(ye,t1r),e(ye,uC),e(uC,a1e),e(a1e,a1r),e(uC,n1r),e(uC,vH),e(vH,s1r),e(uC,l1r),e(ye,i1r),e(ye,pC),e(pC,n1e),e(n1e,d1r),e(pC,c1r),e(pC,FH),e(FH,m1r),e(pC,f1r),e($r,g1r),M(_C,$r,null),b(m,UNe,_),b(m,nc,_),e(nc,bC),e(bC,s1e),M(R7,s1e,null),e(nc,h1r),e(nc,l1e),e(l1e,u1r),b(m,JNe,_),b(m,tr,_),M(P7,tr,null),e(tr,p1r),e(tr,sc),e(sc,_1r),e(sc,TH),e(TH,b1r),e(sc,v1r),e(sc,MH),e(MH,F1r),e(sc,T1r),e(tr,M1r),e(tr,B7),e(B7,E1r),e(B7,i1e),e(i1e,C1r),e(B7,w1r),e(tr,A1r),e(tr,Rt),M(I7,Rt,null),e(Rt,y1r),e(Rt,d1e),e(d1e,L1r),e(Rt,x1r),e(Rt,lc),e(lc,$1r),e(lc,c1e),e(c1e,k1r),e(lc,S1r),e(lc,EH),e(EH,R1r),e(lc,P1r),e(Rt,B1r),M(vC,Rt,null),e(tr,I1r),e(tr,kr),M(q7,kr,null),e(kr,q1r),e(kr,m1e),e(m1e,N1r),e(kr,j1r),e(kr,nn),e(nn,D1r),e(nn,f1e),e(f1e,G1r),e(nn,O1r),e(nn,g1e),e(g1e,V1r),e(nn,X1r),e(nn,h1e),e(h1e,z1r),e(nn,W1r),e(kr,Q1r),e(kr,oe),e(oe,FC),e(FC,u1e),e(u1e,H1r),e(FC,U1r),e(FC,CH),e(CH,J1r),e(FC,Y1r),e(oe,K1r),e(oe,TC),e(TC,p1e),e(p1e,Z1r),e(TC,eTr),e(TC,wH),e(wH,oTr),e(TC,rTr),e(oe,tTr),e(oe,MC),e(MC,_1e),e(_1e,aTr),e(MC,nTr),e(MC,AH),e(AH,sTr),e(MC,lTr),e(oe,iTr),e(oe,EC),e(EC,b1e),e(b1e,dTr),e(EC,cTr),e(EC,yH),e(yH,mTr),e(EC,fTr),e(oe,gTr),e(oe,CC),e(CC,v1e),e(v1e,hTr),e(CC,uTr),e(CC,LH),e(LH,pTr),e(CC,_Tr),e(oe,bTr),e(oe,wC),e(wC,F1e),e(F1e,vTr),e(wC,FTr),e(wC,xH),e(xH,TTr),e(wC,MTr),e(oe,ETr),e(oe,AC),e(AC,T1e),e(T1e,CTr),e(AC,wTr),e(AC,$H),e($H,ATr),e(AC,yTr),e(oe,LTr),e(oe,yC),e(yC,M1e),e(M1e,xTr),e(yC,$Tr),e(yC,kH),e(kH,kTr),e(yC,STr),e(oe,RTr),e(oe,LC),e(LC,E1e),e(E1e,PTr),e(LC,BTr),e(LC,SH),e(SH,ITr),e(LC,qTr),e(oe,NTr),e(oe,xC),e(xC,C1e),e(C1e,jTr),e(xC,DTr),e(xC,RH),e(RH,GTr),e(xC,OTr),e(oe,VTr),e(oe,$C),e($C,w1e),e(w1e,XTr),e($C,zTr),e($C,PH),e(PH,WTr),e($C,QTr),e(oe,HTr),e(oe,kC),e(kC,A1e),e(A1e,UTr),e(kC,JTr),e(kC,BH),e(BH,YTr),e(kC,KTr),e(oe,ZTr),e(oe,SC),e(SC,y1e),e(y1e,eMr),e(SC,oMr),e(SC,IH),e(IH,rMr),e(SC,tMr),e(oe,aMr),e(oe,RC),e(RC,L1e),e(L1e,nMr),e(RC,sMr),e(RC,qH),e(qH,lMr),e(RC,iMr),e(oe,dMr),e(oe,PC),e(PC,x1e),e(x1e,cMr),e(PC,mMr),e(PC,NH),e(NH,fMr),e(PC,gMr),e(oe,hMr),e(oe,BC),e(BC,$1e),e($1e,uMr),e(BC,pMr),e(BC,jH),e(jH,_Mr),e(BC,bMr),e(oe,vMr),e(oe,IC),e(IC,k1e),e(k1e,FMr),e(IC,TMr),e(IC,DH),e(DH,MMr),e(IC,EMr),e(oe,CMr),e(oe,qC),e(qC,S1e),e(S1e,wMr),e(qC,AMr),e(qC,GH),e(GH,yMr),e(qC,LMr),e(oe,xMr),e(oe,NC),e(NC,R1e),e(R1e,$Mr),e(NC,kMr),e(NC,OH),e(OH,SMr),e(NC,RMr),e(oe,PMr),e(oe,jC),e(jC,P1e),e(P1e,BMr),e(jC,IMr),e(jC,VH),e(VH,qMr),e(jC,NMr),e(oe,jMr),e(oe,DC),e(DC,B1e),e(B1e,DMr),e(DC,GMr),e(DC,XH),e(XH,OMr),e(DC,VMr),e(oe,XMr),e(oe,GC),e(GC,I1e),e(I1e,zMr),e(GC,WMr),e(GC,zH),e(zH,QMr),e(GC,HMr),e(oe,UMr),e(oe,OC),e(OC,q1e),e(q1e,JMr),e(OC,YMr),e(OC,WH),e(WH,KMr),e(OC,ZMr),e(oe,e4r),e(oe,VC),e(VC,N1e),e(N1e,o4r),e(VC,r4r),e(VC,QH),e(QH,t4r),e(VC,a4r),e(oe,n4r),e(oe,XC),e(XC,j1e),e(j1e,s4r),e(XC,l4r),e(XC,HH),e(HH,i4r),e(XC,d4r),e(oe,c4r),e(oe,zC),e(zC,D1e),e(D1e,m4r),e(zC,f4r),e(zC,UH),e(UH,g4r),e(zC,h4r),e(kr,u4r),M(WC,kr,null),b(m,YNe,_),b(m,ic,_),e(ic,QC),e(QC,G1e),M(N7,G1e,null),e(ic,p4r),e(ic,O1e),e(O1e,_4r),b(m,KNe,_),b(m,ar,_),M(j7,ar,null),e(ar,b4r),e(ar,dc),e(dc,v4r),e(dc,JH),e(JH,F4r),e(dc,T4r),e(dc,YH),e(YH,M4r),e(dc,E4r),e(ar,C4r),e(ar,D7),e(D7,w4r),e(D7,V1e),e(V1e,A4r),e(D7,y4r),e(ar,L4r),e(ar,Pt),M(G7,Pt,null),e(Pt,x4r),e(Pt,X1e),e(X1e,$4r),e(Pt,k4r),e(Pt,cc),e(cc,S4r),e(cc,z1e),e(z1e,R4r),e(cc,P4r),e(cc,KH),e(KH,B4r),e(cc,I4r),e(Pt,q4r),M(HC,Pt,null),e(ar,N4r),e(ar,Sr),M(O7,Sr,null),e(Sr,j4r),e(Sr,W1e),e(W1e,D4r),e(Sr,G4r),e(Sr,sn),e(sn,O4r),e(sn,Q1e),e(Q1e,V4r),e(sn,X4r),e(sn,H1e),e(H1e,z4r),e(sn,W4r),e(sn,U1e),e(U1e,Q4r),e(sn,H4r),e(Sr,U4r),e(Sr,ue),e(ue,UC),e(UC,J1e),e(J1e,J4r),e(UC,Y4r),e(UC,ZH),e(ZH,K4r),e(UC,Z4r),e(ue,eEr),e(ue,JC),e(JC,Y1e),e(Y1e,oEr),e(JC,rEr),e(JC,eU),e(eU,tEr),e(JC,aEr),e(ue,nEr),e(ue,YC),e(YC,K1e),e(K1e,sEr),e(YC,lEr),e(YC,oU),e(oU,iEr),e(YC,dEr),e(ue,cEr),e(ue,KC),e(KC,Z1e),e(Z1e,mEr),e(KC,fEr),e(KC,rU),e(rU,gEr),e(KC,hEr),e(ue,uEr),e(ue,ZC),e(ZC,eTe),e(eTe,pEr),e(ZC,_Er),e(ZC,tU),e(tU,bEr),e(ZC,vEr),e(ue,FEr),e(ue,e5),e(e5,oTe),e(oTe,TEr),e(e5,MEr),e(e5,aU),e(aU,EEr),e(e5,CEr),e(ue,wEr),e(ue,o5),e(o5,rTe),e(rTe,AEr),e(o5,yEr),e(o5,nU),e(nU,LEr),e(o5,xEr),e(ue,$Er),e(ue,r5),e(r5,tTe),e(tTe,kEr),e(r5,SEr),e(r5,sU),e(sU,REr),e(r5,PEr),e(ue,BEr),e(ue,t5),e(t5,aTe),e(aTe,IEr),e(t5,qEr),e(t5,lU),e(lU,NEr),e(t5,jEr),e(ue,DEr),e(ue,a5),e(a5,nTe),e(nTe,GEr),e(a5,OEr),e(a5,iU),e(iU,VEr),e(a5,XEr),e(ue,zEr),e(ue,n5),e(n5,sTe),e(sTe,WEr),e(n5,QEr),e(n5,dU),e(dU,HEr),e(n5,UEr),e(ue,JEr),e(ue,s5),e(s5,lTe),e(lTe,YEr),e(s5,KEr),e(s5,cU),e(cU,ZEr),e(s5,eCr),e(ue,oCr),e(ue,l5),e(l5,iTe),e(iTe,rCr),e(l5,tCr),e(l5,mU),e(mU,aCr),e(l5,nCr),e(ue,sCr),e(ue,i5),e(i5,dTe),e(dTe,lCr),e(i5,iCr),e(i5,fU),e(fU,dCr),e(i5,cCr),e(ue,mCr),e(ue,d5),e(d5,cTe),e(cTe,fCr),e(d5,gCr),e(d5,gU),e(gU,hCr),e(d5,uCr),e(ue,pCr),e(ue,c5),e(c5,mTe),e(mTe,_Cr),e(c5,bCr),e(c5,hU),e(hU,vCr),e(c5,FCr),e(ue,TCr),e(ue,m5),e(m5,fTe),e(fTe,MCr),e(m5,ECr),e(m5,uU),e(uU,CCr),e(m5,wCr),e(Sr,ACr),M(f5,Sr,null),b(m,ZNe,_),b(m,mc,_),e(mc,g5),e(g5,gTe),M(V7,gTe,null),e(mc,yCr),e(mc,hTe),e(hTe,LCr),b(m,eje,_),b(m,nr,_),M(X7,nr,null),e(nr,xCr),e(nr,fc),e(fc,$Cr),e(fc,pU),e(pU,kCr),e(fc,SCr),e(fc,_U),e(_U,RCr),e(fc,PCr),e(nr,BCr),e(nr,z7),e(z7,ICr),e(z7,uTe),e(uTe,qCr),e(z7,NCr),e(nr,jCr),e(nr,Bt),M(W7,Bt,null),e(Bt,DCr),e(Bt,pTe),e(pTe,GCr),e(Bt,OCr),e(Bt,gc),e(gc,VCr),e(gc,_Te),e(_Te,XCr),e(gc,zCr),e(gc,bU),e(bU,WCr),e(gc,QCr),e(Bt,HCr),M(h5,Bt,null),e(nr,UCr),e(nr,Rr),M(Q7,Rr,null),e(Rr,JCr),e(Rr,bTe),e(bTe,YCr),e(Rr,KCr),e(Rr,ln),e(ln,ZCr),e(ln,vTe),e(vTe,e5r),e(ln,o5r),e(ln,FTe),e(FTe,r5r),e(ln,t5r),e(ln,TTe),e(TTe,a5r),e(ln,n5r),e(Rr,s5r),e(Rr,H7),e(H7,u5),e(u5,MTe),e(MTe,l5r),e(u5,i5r),e(u5,vU),e(vU,d5r),e(u5,c5r),e(H7,m5r),e(H7,p5),e(p5,ETe),e(ETe,f5r),e(p5,g5r),e(p5,FU),e(FU,h5r),e(p5,u5r),e(Rr,p5r),M(_5,Rr,null),b(m,oje,_),b(m,hc,_),e(hc,b5),e(b5,CTe),M(U7,CTe,null),e(hc,_5r),e(hc,wTe),e(wTe,b5r),b(m,rje,_),b(m,sr,_),M(J7,sr,null),e(sr,v5r),e(sr,uc),e(uc,F5r),e(uc,TU),e(TU,T5r),e(uc,M5r),e(uc,MU),e(MU,E5r),e(uc,C5r),e(sr,w5r),e(sr,Y7),e(Y7,A5r),e(Y7,ATe),e(ATe,y5r),e(Y7,L5r),e(sr,x5r),e(sr,It),M(K7,It,null),e(It,$5r),e(It,yTe),e(yTe,k5r),e(It,S5r),e(It,pc),e(pc,R5r),e(pc,LTe),e(LTe,P5r),e(pc,B5r),e(pc,EU),e(EU,I5r),e(pc,q5r),e(It,N5r),M(v5,It,null),e(sr,j5r),e(sr,Pr),M(Z7,Pr,null),e(Pr,D5r),e(Pr,xTe),e(xTe,G5r),e(Pr,O5r),e(Pr,dn),e(dn,V5r),e(dn,$Te),e($Te,X5r),e(dn,z5r),e(dn,kTe),e(kTe,W5r),e(dn,Q5r),e(dn,STe),e(STe,H5r),e(dn,U5r),e(Pr,J5r),e(Pr,RTe),e(RTe,F5),e(F5,PTe),e(PTe,Y5r),e(F5,K5r),e(F5,CU),e(CU,Z5r),e(F5,e3r),e(Pr,o3r),M(T5,Pr,null),b(m,tje,_),b(m,_c,_),e(_c,M5),e(M5,BTe),M(e9,BTe,null),e(_c,r3r),e(_c,ITe),e(ITe,t3r),b(m,aje,_),b(m,lr,_),M(o9,lr,null),e(lr,a3r),e(lr,bc),e(bc,n3r),e(bc,wU),e(wU,s3r),e(bc,l3r),e(bc,AU),e(AU,i3r),e(bc,d3r),e(lr,c3r),e(lr,r9),e(r9,m3r),e(r9,qTe),e(qTe,f3r),e(r9,g3r),e(lr,h3r),e(lr,qt),M(t9,qt,null),e(qt,u3r),e(qt,NTe),e(NTe,p3r),e(qt,_3r),e(qt,vc),e(vc,b3r),e(vc,jTe),e(jTe,v3r),e(vc,F3r),e(vc,yU),e(yU,T3r),e(vc,M3r),e(qt,E3r),M(E5,qt,null),e(lr,C3r),e(lr,Br),M(a9,Br,null),e(Br,w3r),e(Br,DTe),e(DTe,A3r),e(Br,y3r),e(Br,cn),e(cn,L3r),e(cn,GTe),e(GTe,x3r),e(cn,$3r),e(cn,OTe),e(OTe,k3r),e(cn,S3r),e(cn,VTe),e(VTe,R3r),e(cn,P3r),e(Br,B3r),e(Br,de),e(de,C5),e(C5,XTe),e(XTe,I3r),e(C5,q3r),e(C5,LU),e(LU,N3r),e(C5,j3r),e(de,D3r),e(de,w5),e(w5,zTe),e(zTe,G3r),e(w5,O3r),e(w5,xU),e(xU,V3r),e(w5,X3r),e(de,z3r),e(de,A5),e(A5,WTe),e(WTe,W3r),e(A5,Q3r),e(A5,$U),e($U,H3r),e(A5,U3r),e(de,J3r),e(de,y5),e(y5,QTe),e(QTe,Y3r),e(y5,K3r),e(y5,kU),e(kU,Z3r),e(y5,ewr),e(de,owr),e(de,L5),e(L5,HTe),e(HTe,rwr),e(L5,twr),e(L5,SU),e(SU,awr),e(L5,nwr),e(de,swr),e(de,x5),e(x5,UTe),e(UTe,lwr),e(x5,iwr),e(x5,RU),e(RU,dwr),e(x5,cwr),e(de,mwr),e(de,$5),e($5,JTe),e(JTe,fwr),e($5,gwr),e($5,PU),e(PU,hwr),e($5,uwr),e(de,pwr),e(de,k5),e(k5,YTe),e(YTe,_wr),e(k5,bwr),e(k5,BU),e(BU,vwr),e(k5,Fwr),e(de,Twr),e(de,S5),e(S5,KTe),e(KTe,Mwr),e(S5,Ewr),e(S5,IU),e(IU,Cwr),e(S5,wwr),e(de,Awr),e(de,R5),e(R5,ZTe),e(ZTe,ywr),e(R5,Lwr),e(R5,qU),e(qU,xwr),e(R5,$wr),e(de,kwr),e(de,P5),e(P5,eMe),e(eMe,Swr),e(P5,Rwr),e(P5,NU),e(NU,Pwr),e(P5,Bwr),e(de,Iwr),e(de,B5),e(B5,oMe),e(oMe,qwr),e(B5,Nwr),e(B5,jU),e(jU,jwr),e(B5,Dwr),e(de,Gwr),e(de,I5),e(I5,rMe),e(rMe,Owr),e(I5,Vwr),e(I5,DU),e(DU,Xwr),e(I5,zwr),e(de,Wwr),e(de,q5),e(q5,tMe),e(tMe,Qwr),e(q5,Hwr),e(q5,GU),e(GU,Uwr),e(q5,Jwr),e(de,Ywr),e(de,N5),e(N5,aMe),e(aMe,Kwr),e(N5,Zwr),e(N5,OU),e(OU,e0r),e(N5,o0r),e(de,r0r),e(de,j5),e(j5,nMe),e(nMe,t0r),e(j5,a0r),e(j5,VU),e(VU,n0r),e(j5,s0r),e(de,l0r),e(de,D5),e(D5,sMe),e(sMe,i0r),e(D5,d0r),e(D5,XU),e(XU,c0r),e(D5,m0r),e(de,f0r),e(de,G5),e(G5,lMe),e(lMe,g0r),e(G5,h0r),e(G5,zU),e(zU,u0r),e(G5,p0r),e(de,_0r),e(de,O5),e(O5,iMe),e(iMe,b0r),e(O5,v0r),e(O5,WU),e(WU,F0r),e(O5,T0r),e(de,M0r),e(de,V5),e(V5,dMe),e(dMe,E0r),e(V5,C0r),e(V5,QU),e(QU,w0r),e(V5,A0r),e(Br,y0r),M(X5,Br,null),b(m,nje,_),b(m,Fc,_),e(Fc,z5),e(z5,cMe),M(n9,cMe,null),e(Fc,L0r),e(Fc,mMe),e(mMe,x0r),b(m,sje,_),b(m,ir,_),M(s9,ir,null),e(ir,$0r),e(ir,Tc),e(Tc,k0r),e(Tc,HU),e(HU,S0r),e(Tc,R0r),e(Tc,UU),e(UU,P0r),e(Tc,B0r),e(ir,I0r),e(ir,l9),e(l9,q0r),e(l9,fMe),e(fMe,N0r),e(l9,j0r),e(ir,D0r),e(ir,Nt),M(i9,Nt,null),e(Nt,G0r),e(Nt,gMe),e(gMe,O0r),e(Nt,V0r),e(Nt,Mc),e(Mc,X0r),e(Mc,hMe),e(hMe,z0r),e(Mc,W0r),e(Mc,JU),e(JU,Q0r),e(Mc,H0r),e(Nt,U0r),M(W5,Nt,null),e(ir,J0r),e(ir,Ir),M(d9,Ir,null),e(Ir,Y0r),e(Ir,uMe),e(uMe,K0r),e(Ir,Z0r),e(Ir,mn),e(mn,eAr),e(mn,pMe),e(pMe,oAr),e(mn,rAr),e(mn,_Me),e(_Me,tAr),e(mn,aAr),e(mn,bMe),e(bMe,nAr),e(mn,sAr),e(Ir,lAr),e(Ir,ce),e(ce,Q5),e(Q5,vMe),e(vMe,iAr),e(Q5,dAr),e(Q5,YU),e(YU,cAr),e(Q5,mAr),e(ce,fAr),e(ce,H5),e(H5,FMe),e(FMe,gAr),e(H5,hAr),e(H5,KU),e(KU,uAr),e(H5,pAr),e(ce,_Ar),e(ce,U5),e(U5,TMe),e(TMe,bAr),e(U5,vAr),e(U5,ZU),e(ZU,FAr),e(U5,TAr),e(ce,MAr),e(ce,J5),e(J5,MMe),e(MMe,EAr),e(J5,CAr),e(J5,eJ),e(eJ,wAr),e(J5,AAr),e(ce,yAr),e(ce,Y5),e(Y5,EMe),e(EMe,LAr),e(Y5,xAr),e(Y5,oJ),e(oJ,$Ar),e(Y5,kAr),e(ce,SAr),e(ce,K5),e(K5,CMe),e(CMe,RAr),e(K5,PAr),e(K5,rJ),e(rJ,BAr),e(K5,IAr),e(ce,qAr),e(ce,Z5),e(Z5,wMe),e(wMe,NAr),e(Z5,jAr),e(Z5,tJ),e(tJ,DAr),e(Z5,GAr),e(ce,OAr),e(ce,e3),e(e3,AMe),e(AMe,VAr),e(e3,XAr),e(e3,aJ),e(aJ,zAr),e(e3,WAr),e(ce,QAr),e(ce,o3),e(o3,yMe),e(yMe,HAr),e(o3,UAr),e(o3,nJ),e(nJ,JAr),e(o3,YAr),e(ce,KAr),e(ce,r3),e(r3,LMe),e(LMe,ZAr),e(r3,e6r),e(r3,sJ),e(sJ,o6r),e(r3,r6r),e(ce,t6r),e(ce,t3),e(t3,xMe),e(xMe,a6r),e(t3,n6r),e(t3,lJ),e(lJ,s6r),e(t3,l6r),e(ce,i6r),e(ce,a3),e(a3,$Me),e($Me,d6r),e(a3,c6r),e(a3,iJ),e(iJ,m6r),e(a3,f6r),e(ce,g6r),e(ce,n3),e(n3,kMe),e(kMe,h6r),e(n3,u6r),e(n3,dJ),e(dJ,p6r),e(n3,_6r),e(ce,b6r),e(ce,s3),e(s3,SMe),e(SMe,v6r),e(s3,F6r),e(s3,cJ),e(cJ,T6r),e(s3,M6r),e(ce,E6r),e(ce,l3),e(l3,RMe),e(RMe,C6r),e(l3,w6r),e(l3,mJ),e(mJ,A6r),e(l3,y6r),e(ce,L6r),e(ce,i3),e(i3,PMe),e(PMe,x6r),e(i3,$6r),e(i3,fJ),e(fJ,k6r),e(i3,S6r),e(ce,R6r),e(ce,d3),e(d3,BMe),e(BMe,P6r),e(d3,B6r),e(d3,gJ),e(gJ,I6r),e(d3,q6r),e(ce,N6r),e(ce,c3),e(c3,IMe),e(IMe,j6r),e(c3,D6r),e(c3,hJ),e(hJ,G6r),e(c3,O6r),e(ce,V6r),e(ce,m3),e(m3,qMe),e(qMe,X6r),e(m3,z6r),e(m3,uJ),e(uJ,W6r),e(m3,Q6r),e(ce,H6r),e(ce,f3),e(f3,NMe),e(NMe,U6r),e(f3,J6r),e(f3,pJ),e(pJ,Y6r),e(f3,K6r),e(Ir,Z6r),M(g3,Ir,null),b(m,lje,_),b(m,Ec,_),e(Ec,h3),e(h3,jMe),M(c9,jMe,null),e(Ec,eyr),e(Ec,DMe),e(DMe,oyr),b(m,ije,_),b(m,dr,_),M(m9,dr,null),e(dr,ryr),e(dr,Cc),e(Cc,tyr),e(Cc,_J),e(_J,ayr),e(Cc,nyr),e(Cc,bJ),e(bJ,syr),e(Cc,lyr),e(dr,iyr),e(dr,f9),e(f9,dyr),e(f9,GMe),e(GMe,cyr),e(f9,myr),e(dr,fyr),e(dr,jt),M(g9,jt,null),e(jt,gyr),e(jt,OMe),e(OMe,hyr),e(jt,uyr),e(jt,wc),e(wc,pyr),e(wc,VMe),e(VMe,_yr),e(wc,byr),e(wc,vJ),e(vJ,vyr),e(wc,Fyr),e(jt,Tyr),M(u3,jt,null),e(dr,Myr),e(dr,qr),M(h9,qr,null),e(qr,Eyr),e(qr,XMe),e(XMe,Cyr),e(qr,wyr),e(qr,fn),e(fn,Ayr),e(fn,zMe),e(zMe,yyr),e(fn,Lyr),e(fn,WMe),e(WMe,xyr),e(fn,$yr),e(fn,QMe),e(QMe,kyr),e(fn,Syr),e(qr,Ryr),e(qr,HMe),e(HMe,p3),e(p3,UMe),e(UMe,Pyr),e(p3,Byr),e(p3,FJ),e(FJ,Iyr),e(p3,qyr),e(qr,Nyr),M(_3,qr,null),b(m,dje,_),b(m,Ac,_),e(Ac,b3),e(b3,JMe),M(u9,JMe,null),e(Ac,jyr),e(Ac,YMe),e(YMe,Dyr),b(m,cje,_),b(m,cr,_),M(p9,cr,null),e(cr,Gyr),e(cr,yc),e(yc,Oyr),e(yc,TJ),e(TJ,Vyr),e(yc,Xyr),e(yc,MJ),e(MJ,zyr),e(yc,Wyr),e(cr,Qyr),e(cr,_9),e(_9,Hyr),e(_9,KMe),e(KMe,Uyr),e(_9,Jyr),e(cr,Yyr),e(cr,Dt),M(b9,Dt,null),e(Dt,Kyr),e(Dt,ZMe),e(ZMe,Zyr),e(Dt,eLr),e(Dt,Lc),e(Lc,oLr),e(Lc,e4e),e(e4e,rLr),e(Lc,tLr),e(Lc,EJ),e(EJ,aLr),e(Lc,nLr),e(Dt,sLr),M(v3,Dt,null),e(cr,lLr),e(cr,Nr),M(v9,Nr,null),e(Nr,iLr),e(Nr,o4e),e(o4e,dLr),e(Nr,cLr),e(Nr,gn),e(gn,mLr),e(gn,r4e),e(r4e,fLr),e(gn,gLr),e(gn,t4e),e(t4e,hLr),e(gn,uLr),e(gn,a4e),e(a4e,pLr),e(gn,_Lr),e(Nr,bLr),e(Nr,n4e),e(n4e,F3),e(F3,s4e),e(s4e,vLr),e(F3,FLr),e(F3,CJ),e(CJ,TLr),e(F3,MLr),e(Nr,ELr),M(T3,Nr,null),b(m,mje,_),b(m,xc,_),e(xc,M3),e(M3,l4e),M(F9,l4e,null),e(xc,CLr),e(xc,i4e),e(i4e,wLr),b(m,fje,_),b(m,mr,_),M(T9,mr,null),e(mr,ALr),e(mr,$c),e($c,yLr),e($c,wJ),e(wJ,LLr),e($c,xLr),e($c,AJ),e(AJ,$Lr),e($c,kLr),e(mr,SLr),e(mr,M9),e(M9,RLr),e(M9,d4e),e(d4e,PLr),e(M9,BLr),e(mr,ILr),e(mr,Gt),M(E9,Gt,null),e(Gt,qLr),e(Gt,c4e),e(c4e,NLr),e(Gt,jLr),e(Gt,kc),e(kc,DLr),e(kc,m4e),e(m4e,GLr),e(kc,OLr),e(kc,yJ),e(yJ,VLr),e(kc,XLr),e(Gt,zLr),M(E3,Gt,null),e(mr,WLr),e(mr,jr),M(C9,jr,null),e(jr,QLr),e(jr,f4e),e(f4e,HLr),e(jr,ULr),e(jr,hn),e(hn,JLr),e(hn,g4e),e(g4e,YLr),e(hn,KLr),e(hn,h4e),e(h4e,ZLr),e(hn,e8r),e(hn,u4e),e(u4e,o8r),e(hn,r8r),e(jr,t8r),e(jr,te),e(te,C3),e(C3,p4e),e(p4e,a8r),e(C3,n8r),e(C3,LJ),e(LJ,s8r),e(C3,l8r),e(te,i8r),e(te,w3),e(w3,_4e),e(_4e,d8r),e(w3,c8r),e(w3,xJ),e(xJ,m8r),e(w3,f8r),e(te,g8r),e(te,A3),e(A3,b4e),e(b4e,h8r),e(A3,u8r),e(A3,$J),e($J,p8r),e(A3,_8r),e(te,b8r),e(te,y3),e(y3,v4e),e(v4e,v8r),e(y3,F8r),e(y3,kJ),e(kJ,T8r),e(y3,M8r),e(te,E8r),e(te,L3),e(L3,F4e),e(F4e,C8r),e(L3,w8r),e(L3,SJ),e(SJ,A8r),e(L3,y8r),e(te,L8r),e(te,x3),e(x3,T4e),e(T4e,x8r),e(x3,$8r),e(x3,RJ),e(RJ,k8r),e(x3,S8r),e(te,R8r),e(te,$3),e($3,M4e),e(M4e,P8r),e($3,B8r),e($3,PJ),e(PJ,I8r),e($3,q8r),e(te,N8r),e(te,k3),e(k3,E4e),e(E4e,j8r),e(k3,D8r),e(k3,BJ),e(BJ,G8r),e(k3,O8r),e(te,V8r),e(te,S3),e(S3,C4e),e(C4e,X8r),e(S3,z8r),e(S3,IJ),e(IJ,W8r),e(S3,Q8r),e(te,H8r),e(te,R3),e(R3,w4e),e(w4e,U8r),e(R3,J8r),e(R3,qJ),e(qJ,Y8r),e(R3,K8r),e(te,Z8r),e(te,P3),e(P3,A4e),e(A4e,e7r),e(P3,o7r),e(P3,NJ),e(NJ,r7r),e(P3,t7r),e(te,a7r),e(te,B3),e(B3,y4e),e(y4e,n7r),e(B3,s7r),e(B3,jJ),e(jJ,l7r),e(B3,i7r),e(te,d7r),e(te,I3),e(I3,L4e),e(L4e,c7r),e(I3,m7r),e(I3,DJ),e(DJ,f7r),e(I3,g7r),e(te,h7r),e(te,q3),e(q3,x4e),e(x4e,u7r),e(q3,p7r),e(q3,GJ),e(GJ,_7r),e(q3,b7r),e(te,v7r),e(te,N3),e(N3,$4e),e($4e,F7r),e(N3,T7r),e(N3,OJ),e(OJ,M7r),e(N3,E7r),e(te,C7r),e(te,j3),e(j3,k4e),e(k4e,w7r),e(j3,A7r),e(j3,VJ),e(VJ,y7r),e(j3,L7r),e(te,x7r),e(te,D3),e(D3,S4e),e(S4e,$7r),e(D3,k7r),e(D3,XJ),e(XJ,S7r),e(D3,R7r),e(te,P7r),e(te,G3),e(G3,R4e),e(R4e,B7r),e(G3,I7r),e(G3,zJ),e(zJ,q7r),e(G3,N7r),e(te,j7r),e(te,O3),e(O3,P4e),e(P4e,D7r),e(O3,G7r),e(O3,WJ),e(WJ,O7r),e(O3,V7r),e(te,X7r),e(te,V3),e(V3,B4e),e(B4e,z7r),e(V3,W7r),e(V3,QJ),e(QJ,Q7r),e(V3,H7r),e(te,U7r),e(te,X3),e(X3,I4e),e(I4e,J7r),e(X3,Y7r),e(X3,HJ),e(HJ,K7r),e(X3,Z7r),e(te,e9r),e(te,z3),e(z3,q4e),e(q4e,o9r),e(z3,r9r),e(z3,UJ),e(UJ,t9r),e(z3,a9r),e(te,n9r),e(te,W3),e(W3,N4e),e(N4e,s9r),e(W3,l9r),e(W3,JJ),e(JJ,i9r),e(W3,d9r),e(te,c9r),e(te,Q3),e(Q3,j4e),e(j4e,m9r),e(Q3,f9r),e(Q3,YJ),e(YJ,g9r),e(Q3,h9r),e(te,u9r),e(te,H3),e(H3,D4e),e(D4e,p9r),e(H3,_9r),e(H3,KJ),e(KJ,b9r),e(H3,v9r),e(jr,F9r),M(U3,jr,null),b(m,gje,_),b(m,Sc,_),e(Sc,J3),e(J3,G4e),M(w9,G4e,null),e(Sc,T9r),e(Sc,O4e),e(O4e,M9r),b(m,hje,_),b(m,fr,_),M(A9,fr,null),e(fr,E9r),e(fr,Rc),e(Rc,C9r),e(Rc,ZJ),e(ZJ,w9r),e(Rc,A9r),e(Rc,eY),e(eY,y9r),e(Rc,L9r),e(fr,x9r),e(fr,y9),e(y9,$9r),e(y9,V4e),e(V4e,k9r),e(y9,S9r),e(fr,R9r),e(fr,Ot),M(L9,Ot,null),e(Ot,P9r),e(Ot,X4e),e(X4e,B9r),e(Ot,I9r),e(Ot,Pc),e(Pc,q9r),e(Pc,z4e),e(z4e,N9r),e(Pc,j9r),e(Pc,oY),e(oY,D9r),e(Pc,G9r),e(Ot,O9r),M(Y3,Ot,null),e(fr,V9r),e(fr,Dr),M(x9,Dr,null),e(Dr,X9r),e(Dr,W4e),e(W4e,z9r),e(Dr,W9r),e(Dr,un),e(un,Q9r),e(un,Q4e),e(Q4e,H9r),e(un,U9r),e(un,H4e),e(H4e,J9r),e(un,Y9r),e(un,U4e),e(U4e,K9r),e(un,Z9r),e(Dr,exr),e(Dr,Re),e(Re,K3),e(K3,J4e),e(J4e,oxr),e(K3,rxr),e(K3,rY),e(rY,txr),e(K3,axr),e(Re,nxr),e(Re,Z3),e(Z3,Y4e),e(Y4e,sxr),e(Z3,lxr),e(Z3,tY),e(tY,ixr),e(Z3,dxr),e(Re,cxr),e(Re,ew),e(ew,K4e),e(K4e,mxr),e(ew,fxr),e(ew,aY),e(aY,gxr),e(ew,hxr),e(Re,uxr),e(Re,ow),e(ow,Z4e),e(Z4e,pxr),e(ow,_xr),e(ow,nY),e(nY,bxr),e(ow,vxr),e(Re,Fxr),e(Re,rw),e(rw,eEe),e(eEe,Txr),e(rw,Mxr),e(rw,sY),e(sY,Exr),e(rw,Cxr),e(Re,wxr),e(Re,tw),e(tw,oEe),e(oEe,Axr),e(tw,yxr),e(tw,lY),e(lY,Lxr),e(tw,xxr),e(Re,$xr),e(Re,aw),e(aw,rEe),e(rEe,kxr),e(aw,Sxr),e(aw,iY),e(iY,Rxr),e(aw,Pxr),e(Re,Bxr),e(Re,nw),e(nw,tEe),e(tEe,Ixr),e(nw,qxr),e(nw,dY),e(dY,Nxr),e(nw,jxr),e(Re,Dxr),e(Re,sw),e(sw,aEe),e(aEe,Gxr),e(sw,Oxr),e(sw,cY),e(cY,Vxr),e(sw,Xxr),e(Dr,zxr),M(lw,Dr,null),b(m,uje,_),b(m,Bc,_),e(Bc,iw),e(iw,nEe),M($9,nEe,null),e(Bc,Wxr),e(Bc,sEe),e(sEe,Qxr),b(m,pje,_),b(m,gr,_),M(k9,gr,null),e(gr,Hxr),e(gr,Ic),e(Ic,Uxr),e(Ic,mY),e(mY,Jxr),e(Ic,Yxr),e(Ic,fY),e(fY,Kxr),e(Ic,Zxr),e(gr,e$r),e(gr,S9),e(S9,o$r),e(S9,lEe),e(lEe,r$r),e(S9,t$r),e(gr,a$r),e(gr,Vt),M(R9,Vt,null),e(Vt,n$r),e(Vt,iEe),e(iEe,s$r),e(Vt,l$r),e(Vt,qc),e(qc,i$r),e(qc,dEe),e(dEe,d$r),e(qc,c$r),e(qc,gY),e(gY,m$r),e(qc,f$r),e(Vt,g$r),M(dw,Vt,null),e(gr,h$r),e(gr,Gr),M(P9,Gr,null),e(Gr,u$r),e(Gr,cEe),e(cEe,p$r),e(Gr,_$r),e(Gr,pn),e(pn,b$r),e(pn,mEe),e(mEe,v$r),e(pn,F$r),e(pn,fEe),e(fEe,T$r),e(pn,M$r),e(pn,gEe),e(gEe,E$r),e(pn,C$r),e(Gr,w$r),e(Gr,Ee),e(Ee,cw),e(cw,hEe),e(hEe,A$r),e(cw,y$r),e(cw,hY),e(hY,L$r),e(cw,x$r),e(Ee,$$r),e(Ee,mw),e(mw,uEe),e(uEe,k$r),e(mw,S$r),e(mw,uY),e(uY,R$r),e(mw,P$r),e(Ee,B$r),e(Ee,fw),e(fw,pEe),e(pEe,I$r),e(fw,q$r),e(fw,pY),e(pY,N$r),e(fw,j$r),e(Ee,D$r),e(Ee,gw),e(gw,_Ee),e(_Ee,G$r),e(gw,O$r),e(gw,_Y),e(_Y,V$r),e(gw,X$r),e(Ee,z$r),e(Ee,hw),e(hw,bEe),e(bEe,W$r),e(hw,Q$r),e(hw,bY),e(bY,H$r),e(hw,U$r),e(Ee,J$r),e(Ee,uw),e(uw,vEe),e(vEe,Y$r),e(uw,K$r),e(uw,vY),e(vY,Z$r),e(uw,ekr),e(Ee,okr),e(Ee,pw),e(pw,FEe),e(FEe,rkr),e(pw,tkr),e(pw,FY),e(FY,akr),e(pw,nkr),e(Ee,skr),e(Ee,_w),e(_w,TEe),e(TEe,lkr),e(_w,ikr),e(_w,TY),e(TY,dkr),e(_w,ckr),e(Ee,mkr),e(Ee,bw),e(bw,MEe),e(MEe,fkr),e(bw,gkr),e(bw,MY),e(MY,hkr),e(bw,ukr),e(Ee,pkr),e(Ee,vw),e(vw,EEe),e(EEe,_kr),e(vw,bkr),e(vw,EY),e(EY,vkr),e(vw,Fkr),e(Ee,Tkr),e(Ee,Fw),e(Fw,CEe),e(CEe,Mkr),e(Fw,Ekr),e(Fw,CY),e(CY,Ckr),e(Fw,wkr),e(Ee,Akr),e(Ee,Tw),e(Tw,wEe),e(wEe,ykr),e(Tw,Lkr),e(Tw,wY),e(wY,xkr),e(Tw,$kr),e(Gr,kkr),M(Mw,Gr,null),b(m,_je,_),b(m,Nc,_),e(Nc,Ew),e(Ew,AEe),M(B9,AEe,null),e(Nc,Skr),e(Nc,yEe),e(yEe,Rkr),b(m,bje,_),b(m,hr,_),M(I9,hr,null),e(hr,Pkr),e(hr,jc),e(jc,Bkr),e(jc,AY),e(AY,Ikr),e(jc,qkr),e(jc,yY),e(yY,Nkr),e(jc,jkr),e(hr,Dkr),e(hr,q9),e(q9,Gkr),e(q9,LEe),e(LEe,Okr),e(q9,Vkr),e(hr,Xkr),e(hr,Xt),M(N9,Xt,null),e(Xt,zkr),e(Xt,xEe),e(xEe,Wkr),e(Xt,Qkr),e(Xt,Dc),e(Dc,Hkr),e(Dc,$Ee),e($Ee,Ukr),e(Dc,Jkr),e(Dc,LY),e(LY,Ykr),e(Dc,Kkr),e(Xt,Zkr),M(Cw,Xt,null),e(hr,eSr),e(hr,Or),M(j9,Or,null),e(Or,oSr),e(Or,kEe),e(kEe,rSr),e(Or,tSr),e(Or,_n),e(_n,aSr),e(_n,SEe),e(SEe,nSr),e(_n,sSr),e(_n,REe),e(REe,lSr),e(_n,iSr),e(_n,PEe),e(PEe,dSr),e(_n,cSr),e(Or,mSr),e(Or,Le),e(Le,ww),e(ww,BEe),e(BEe,fSr),e(ww,gSr),e(ww,xY),e(xY,hSr),e(ww,uSr),e(Le,pSr),e(Le,Aw),e(Aw,IEe),e(IEe,_Sr),e(Aw,bSr),e(Aw,$Y),e($Y,vSr),e(Aw,FSr),e(Le,TSr),e(Le,yw),e(yw,qEe),e(qEe,MSr),e(yw,ESr),e(yw,kY),e(kY,CSr),e(yw,wSr),e(Le,ASr),e(Le,Lw),e(Lw,NEe),e(NEe,ySr),e(Lw,LSr),e(Lw,SY),e(SY,xSr),e(Lw,$Sr),e(Le,kSr),e(Le,xw),e(xw,jEe),e(jEe,SSr),e(xw,RSr),e(xw,RY),e(RY,PSr),e(xw,BSr),e(Le,ISr),e(Le,$w),e($w,DEe),e(DEe,qSr),e($w,NSr),e($w,PY),e(PY,jSr),e($w,DSr),e(Le,GSr),e(Le,kw),e(kw,GEe),e(GEe,OSr),e(kw,VSr),e(kw,BY),e(BY,XSr),e(kw,zSr),e(Le,WSr),e(Le,Sw),e(Sw,OEe),e(OEe,QSr),e(Sw,HSr),e(Sw,IY),e(IY,USr),e(Sw,JSr),e(Le,YSr),e(Le,Rw),e(Rw,VEe),e(VEe,KSr),e(Rw,ZSr),e(Rw,qY),e(qY,eRr),e(Rw,oRr),e(Le,rRr),e(Le,Pw),e(Pw,XEe),e(XEe,tRr),e(Pw,aRr),e(Pw,NY),e(NY,nRr),e(Pw,sRr),e(Or,lRr),M(Bw,Or,null),b(m,vje,_),b(m,Gc,_),e(Gc,Iw),e(Iw,zEe),M(D9,zEe,null),e(Gc,iRr),e(Gc,WEe),e(WEe,dRr),b(m,Fje,_),b(m,ur,_),M(G9,ur,null),e(ur,cRr),e(ur,Oc),e(Oc,mRr),e(Oc,jY),e(jY,fRr),e(Oc,gRr),e(Oc,DY),e(DY,hRr),e(Oc,uRr),e(ur,pRr),e(ur,O9),e(O9,_Rr),e(O9,QEe),e(QEe,bRr),e(O9,vRr),e(ur,FRr),e(ur,zt),M(V9,zt,null),e(zt,TRr),e(zt,HEe),e(HEe,MRr),e(zt,ERr),e(zt,Vc),e(Vc,CRr),e(Vc,UEe),e(UEe,wRr),e(Vc,ARr),e(Vc,GY),e(GY,yRr),e(Vc,LRr),e(zt,xRr),M(qw,zt,null),e(ur,$Rr),e(ur,Vr),M(X9,Vr,null),e(Vr,kRr),e(Vr,JEe),e(JEe,SRr),e(Vr,RRr),e(Vr,bn),e(bn,PRr),e(bn,YEe),e(YEe,BRr),e(bn,IRr),e(bn,KEe),e(KEe,qRr),e(bn,NRr),e(bn,ZEe),e(ZEe,jRr),e(bn,DRr),e(Vr,GRr),e(Vr,Pe),e(Pe,Nw),e(Nw,eCe),e(eCe,ORr),e(Nw,VRr),e(Nw,OY),e(OY,XRr),e(Nw,zRr),e(Pe,WRr),e(Pe,jw),e(jw,oCe),e(oCe,QRr),e(jw,HRr),e(jw,VY),e(VY,URr),e(jw,JRr),e(Pe,YRr),e(Pe,Dw),e(Dw,rCe),e(rCe,KRr),e(Dw,ZRr),e(Dw,XY),e(XY,ePr),e(Dw,oPr),e(Pe,rPr),e(Pe,Gw),e(Gw,tCe),e(tCe,tPr),e(Gw,aPr),e(Gw,zY),e(zY,nPr),e(Gw,sPr),e(Pe,lPr),e(Pe,Ow),e(Ow,aCe),e(aCe,iPr),e(Ow,dPr),e(Ow,WY),e(WY,cPr),e(Ow,mPr),e(Pe,fPr),e(Pe,Vw),e(Vw,nCe),e(nCe,gPr),e(Vw,hPr),e(Vw,QY),e(QY,uPr),e(Vw,pPr),e(Pe,_Pr),e(Pe,Xw),e(Xw,sCe),e(sCe,bPr),e(Xw,vPr),e(Xw,HY),e(HY,FPr),e(Xw,TPr),e(Pe,MPr),e(Pe,zw),e(zw,lCe),e(lCe,EPr),e(zw,CPr),e(zw,UY),e(UY,wPr),e(zw,APr),e(Pe,yPr),e(Pe,Ww),e(Ww,iCe),e(iCe,LPr),e(Ww,xPr),e(Ww,JY),e(JY,$Pr),e(Ww,kPr),e(Vr,SPr),M(Qw,Vr,null),b(m,Tje,_),b(m,Xc,_),e(Xc,Hw),e(Hw,dCe),M(z9,dCe,null),e(Xc,RPr),e(Xc,cCe),e(cCe,PPr),b(m,Mje,_),b(m,pr,_),M(W9,pr,null),e(pr,BPr),e(pr,zc),e(zc,IPr),e(zc,YY),e(YY,qPr),e(zc,NPr),e(zc,KY),e(KY,jPr),e(zc,DPr),e(pr,GPr),e(pr,Q9),e(Q9,OPr),e(Q9,mCe),e(mCe,VPr),e(Q9,XPr),e(pr,zPr),e(pr,Wt),M(H9,Wt,null),e(Wt,WPr),e(Wt,fCe),e(fCe,QPr),e(Wt,HPr),e(Wt,Wc),e(Wc,UPr),e(Wc,gCe),e(gCe,JPr),e(Wc,YPr),e(Wc,ZY),e(ZY,KPr),e(Wc,ZPr),e(Wt,eBr),M(Uw,Wt,null),e(pr,oBr),e(pr,Xr),M(U9,Xr,null),e(Xr,rBr),e(Xr,hCe),e(hCe,tBr),e(Xr,aBr),e(Xr,vn),e(vn,nBr),e(vn,uCe),e(uCe,sBr),e(vn,lBr),e(vn,pCe),e(pCe,iBr),e(vn,dBr),e(vn,_Ce),e(_Ce,cBr),e(vn,mBr),e(Xr,fBr),e(Xr,xe),e(xe,Jw),e(Jw,bCe),e(bCe,gBr),e(Jw,hBr),e(Jw,eK),e(eK,uBr),e(Jw,pBr),e(xe,_Br),e(xe,Yw),e(Yw,vCe),e(vCe,bBr),e(Yw,vBr),e(Yw,oK),e(oK,FBr),e(Yw,TBr),e(xe,MBr),e(xe,Kw),e(Kw,FCe),e(FCe,EBr),e(Kw,CBr),e(Kw,rK),e(rK,wBr),e(Kw,ABr),e(xe,yBr),e(xe,Zw),e(Zw,TCe),e(TCe,LBr),e(Zw,xBr),e(Zw,tK),e(tK,$Br),e(Zw,kBr),e(xe,SBr),e(xe,e0),e(e0,MCe),e(MCe,RBr),e(e0,PBr),e(e0,aK),e(aK,BBr),e(e0,IBr),e(xe,qBr),e(xe,o0),e(o0,ECe),e(ECe,NBr),e(o0,jBr),e(o0,nK),e(nK,DBr),e(o0,GBr),e(xe,OBr),e(xe,r0),e(r0,CCe),e(CCe,VBr),e(r0,XBr),e(r0,sK),e(sK,zBr),e(r0,WBr),e(xe,QBr),e(xe,t0),e(t0,wCe),e(wCe,HBr),e(t0,UBr),e(t0,lK),e(lK,JBr),e(t0,YBr),e(xe,KBr),e(xe,a0),e(a0,ACe),e(ACe,ZBr),e(a0,eIr),e(a0,iK),e(iK,oIr),e(a0,rIr),e(xe,tIr),e(xe,n0),e(n0,yCe),e(yCe,aIr),e(n0,nIr),e(n0,dK),e(dK,sIr),e(n0,lIr),e(Xr,iIr),M(s0,Xr,null),b(m,Eje,_),b(m,Qc,_),e(Qc,l0),e(l0,LCe),M(J9,LCe,null),e(Qc,dIr),e(Qc,xCe),e(xCe,cIr),b(m,Cje,_),b(m,_r,_),M(Y9,_r,null),e(_r,mIr),e(_r,Hc),e(Hc,fIr),e(Hc,cK),e(cK,gIr),e(Hc,hIr),e(Hc,mK),e(mK,uIr),e(Hc,pIr),e(_r,_Ir),e(_r,K9),e(K9,bIr),e(K9,$Ce),e($Ce,vIr),e(K9,FIr),e(_r,TIr),e(_r,Qt),M(Z9,Qt,null),e(Qt,MIr),e(Qt,kCe),e(kCe,EIr),e(Qt,CIr),e(Qt,Uc),e(Uc,wIr),e(Uc,SCe),e(SCe,AIr),e(Uc,yIr),e(Uc,fK),e(fK,LIr),e(Uc,xIr),e(Qt,$Ir),M(i0,Qt,null),e(_r,kIr),e(_r,zr),M(ex,zr,null),e(zr,SIr),e(zr,RCe),e(RCe,RIr),e(zr,PIr),e(zr,Fn),e(Fn,BIr),e(Fn,PCe),e(PCe,IIr),e(Fn,qIr),e(Fn,BCe),e(BCe,NIr),e(Fn,jIr),e(Fn,ICe),e(ICe,DIr),e(Fn,GIr),e(zr,OIr),e(zr,$e),e($e,d0),e(d0,qCe),e(qCe,VIr),e(d0,XIr),e(d0,gK),e(gK,zIr),e(d0,WIr),e($e,QIr),e($e,c0),e(c0,NCe),e(NCe,HIr),e(c0,UIr),e(c0,hK),e(hK,JIr),e(c0,YIr),e($e,KIr),e($e,m0),e(m0,jCe),e(jCe,ZIr),e(m0,eqr),e(m0,uK),e(uK,oqr),e(m0,rqr),e($e,tqr),e($e,f0),e(f0,DCe),e(DCe,aqr),e(f0,nqr),e(f0,pK),e(pK,sqr),e(f0,lqr),e($e,iqr),e($e,g0),e(g0,GCe),e(GCe,dqr),e(g0,cqr),e(g0,_K),e(_K,mqr),e(g0,fqr),e($e,gqr),e($e,h0),e(h0,OCe),e(OCe,hqr),e(h0,uqr),e(h0,bK),e(bK,pqr),e(h0,_qr),e($e,bqr),e($e,u0),e(u0,VCe),e(VCe,vqr),e(u0,Fqr),e(u0,vK),e(vK,Tqr),e(u0,Mqr),e($e,Eqr),e($e,p0),e(p0,XCe),e(XCe,Cqr),e(p0,wqr),e(p0,FK),e(FK,Aqr),e(p0,yqr),e($e,Lqr),e($e,_0),e(_0,zCe),e(zCe,xqr),e(_0,$qr),e(_0,TK),e(TK,kqr),e(_0,Sqr),e($e,Rqr),e($e,b0),e(b0,WCe),e(WCe,Pqr),e(b0,Bqr),e(b0,MK),e(MK,Iqr),e(b0,qqr),e(zr,Nqr),M(v0,zr,null),b(m,wje,_),b(m,Jc,_),e(Jc,F0),e(F0,QCe),M(ox,QCe,null),e(Jc,jqr),e(Jc,HCe),e(HCe,Dqr),b(m,Aje,_),b(m,br,_),M(rx,br,null),e(br,Gqr),e(br,Yc),e(Yc,Oqr),e(Yc,EK),e(EK,Vqr),e(Yc,Xqr),e(Yc,CK),e(CK,zqr),e(Yc,Wqr),e(br,Qqr),e(br,tx),e(tx,Hqr),e(tx,UCe),e(UCe,Uqr),e(tx,Jqr),e(br,Yqr),e(br,Ht),M(ax,Ht,null),e(Ht,Kqr),e(Ht,JCe),e(JCe,Zqr),e(Ht,eNr),e(Ht,Kc),e(Kc,oNr),e(Kc,YCe),e(YCe,rNr),e(Kc,tNr),e(Kc,wK),e(wK,aNr),e(Kc,nNr),e(Ht,sNr),M(T0,Ht,null),e(br,lNr),e(br,Wr),M(nx,Wr,null),e(Wr,iNr),e(Wr,KCe),e(KCe,dNr),e(Wr,cNr),e(Wr,Tn),e(Tn,mNr),e(Tn,ZCe),e(ZCe,fNr),e(Tn,gNr),e(Tn,e5e),e(e5e,hNr),e(Tn,uNr),e(Tn,o5e),e(o5e,pNr),e(Tn,_Nr),e(Wr,bNr),e(Wr,De),e(De,M0),e(M0,r5e),e(r5e,vNr),e(M0,FNr),e(M0,AK),e(AK,TNr),e(M0,MNr),e(De,ENr),e(De,E0),e(E0,t5e),e(t5e,CNr),e(E0,wNr),e(E0,yK),e(yK,ANr),e(E0,yNr),e(De,LNr),e(De,C0),e(C0,a5e),e(a5e,xNr),e(C0,$Nr),e(C0,LK),e(LK,kNr),e(C0,SNr),e(De,RNr),e(De,w0),e(w0,n5e),e(n5e,PNr),e(w0,BNr),e(w0,xK),e(xK,INr),e(w0,qNr),e(De,NNr),e(De,A0),e(A0,s5e),e(s5e,jNr),e(A0,DNr),e(A0,$K),e($K,GNr),e(A0,ONr),e(De,VNr),e(De,y0),e(y0,l5e),e(l5e,XNr),e(y0,zNr),e(y0,kK),e(kK,WNr),e(y0,QNr),e(De,HNr),e(De,L0),e(L0,i5e),e(i5e,UNr),e(L0,JNr),e(L0,SK),e(SK,YNr),e(L0,KNr),e(De,ZNr),e(De,x0),e(x0,d5e),e(d5e,ejr),e(x0,ojr),e(x0,RK),e(RK,rjr),e(x0,tjr),e(Wr,ajr),M($0,Wr,null),b(m,yje,_),b(m,Zc,_),e(Zc,k0),e(k0,c5e),M(sx,c5e,null),e(Zc,njr),e(Zc,m5e),e(m5e,sjr),b(m,Lje,_),b(m,vr,_),M(lx,vr,null),e(vr,ljr),e(vr,em),e(em,ijr),e(em,PK),e(PK,djr),e(em,cjr),e(em,BK),e(BK,mjr),e(em,fjr),e(vr,gjr),e(vr,ix),e(ix,hjr),e(ix,f5e),e(f5e,ujr),e(ix,pjr),e(vr,_jr),e(vr,Ut),M(dx,Ut,null),e(Ut,bjr),e(Ut,g5e),e(g5e,vjr),e(Ut,Fjr),e(Ut,om),e(om,Tjr),e(om,h5e),e(h5e,Mjr),e(om,Ejr),e(om,IK),e(IK,Cjr),e(om,wjr),e(Ut,Ajr),M(S0,Ut,null),e(vr,yjr),e(vr,Qr),M(cx,Qr,null),e(Qr,Ljr),e(Qr,u5e),e(u5e,xjr),e(Qr,$jr),e(Qr,Mn),e(Mn,kjr),e(Mn,p5e),e(p5e,Sjr),e(Mn,Rjr),e(Mn,_5e),e(_5e,Pjr),e(Mn,Bjr),e(Mn,b5e),e(b5e,Ijr),e(Mn,qjr),e(Qr,Njr),e(Qr,Ge),e(Ge,R0),e(R0,v5e),e(v5e,jjr),e(R0,Djr),e(R0,qK),e(qK,Gjr),e(R0,Ojr),e(Ge,Vjr),e(Ge,P0),e(P0,F5e),e(F5e,Xjr),e(P0,zjr),e(P0,NK),e(NK,Wjr),e(P0,Qjr),e(Ge,Hjr),e(Ge,B0),e(B0,T5e),e(T5e,Ujr),e(B0,Jjr),e(B0,jK),e(jK,Yjr),e(B0,Kjr),e(Ge,Zjr),e(Ge,I0),e(I0,M5e),e(M5e,eDr),e(I0,oDr),e(I0,DK),e(DK,rDr),e(I0,tDr),e(Ge,aDr),e(Ge,q0),e(q0,E5e),e(E5e,nDr),e(q0,sDr),e(q0,GK),e(GK,lDr),e(q0,iDr),e(Ge,dDr),e(Ge,N0),e(N0,C5e),e(C5e,cDr),e(N0,mDr),e(N0,OK),e(OK,fDr),e(N0,gDr),e(Ge,hDr),e(Ge,j0),e(j0,w5e),e(w5e,uDr),e(j0,pDr),e(j0,VK),e(VK,_Dr),e(j0,bDr),e(Ge,vDr),e(Ge,D0),e(D0,A5e),e(A5e,FDr),e(D0,TDr),e(D0,XK),e(XK,MDr),e(D0,EDr),e(Qr,CDr),M(G0,Qr,null),b(m,xje,_),b(m,rm,_),e(rm,O0),e(O0,y5e),M(mx,y5e,null),e(rm,wDr),e(rm,L5e),e(L5e,ADr),b(m,$je,_),b(m,Fr,_),M(fx,Fr,null),e(Fr,yDr),e(Fr,tm),e(tm,LDr),e(tm,zK),e(zK,xDr),e(tm,$Dr),e(tm,WK),e(WK,kDr),e(tm,SDr),e(Fr,RDr),e(Fr,gx),e(gx,PDr),e(gx,x5e),e(x5e,BDr),e(gx,IDr),e(Fr,qDr),e(Fr,Jt),M(hx,Jt,null),e(Jt,NDr),e(Jt,$5e),e($5e,jDr),e(Jt,DDr),e(Jt,am),e(am,GDr),e(am,k5e),e(k5e,ODr),e(am,VDr),e(am,QK),e(QK,XDr),e(am,zDr),e(Jt,WDr),M(V0,Jt,null),e(Fr,QDr),e(Fr,Hr),M(ux,Hr,null),e(Hr,HDr),e(Hr,S5e),e(S5e,UDr),e(Hr,JDr),e(Hr,En),e(En,YDr),e(En,R5e),e(R5e,KDr),e(En,ZDr),e(En,P5e),e(P5e,eGr),e(En,oGr),e(En,B5e),e(B5e,rGr),e(En,tGr),e(Hr,aGr),e(Hr,I5e),e(I5e,X0),e(X0,q5e),e(q5e,nGr),e(X0,sGr),e(X0,HK),e(HK,lGr),e(X0,iGr),e(Hr,dGr),M(z0,Hr,null),b(m,kje,_),b(m,nm,_),e(nm,W0),e(W0,N5e),M(px,N5e,null),e(nm,cGr),e(nm,j5e),e(j5e,mGr),b(m,Sje,_),b(m,Tr,_),M(_x,Tr,null),e(Tr,fGr),e(Tr,sm),e(sm,gGr),e(sm,UK),e(UK,hGr),e(sm,uGr),e(sm,JK),e(JK,pGr),e(sm,_Gr),e(Tr,bGr),e(Tr,bx),e(bx,vGr),e(bx,D5e),e(D5e,FGr),e(bx,TGr),e(Tr,MGr),e(Tr,Yt),M(vx,Yt,null),e(Yt,EGr),e(Yt,G5e),e(G5e,CGr),e(Yt,wGr),e(Yt,lm),e(lm,AGr),e(lm,O5e),e(O5e,yGr),e(lm,LGr),e(lm,YK),e(YK,xGr),e(lm,$Gr),e(Yt,kGr),M(Q0,Yt,null),e(Tr,SGr),e(Tr,Ur),M(Fx,Ur,null),e(Ur,RGr),e(Ur,V5e),e(V5e,PGr),e(Ur,BGr),e(Ur,Cn),e(Cn,IGr),e(Cn,X5e),e(X5e,qGr),e(Cn,NGr),e(Cn,z5e),e(z5e,jGr),e(Cn,DGr),e(Cn,W5e),e(W5e,GGr),e(Cn,OGr),e(Ur,VGr),e(Ur,Tx),e(Tx,H0),e(H0,Q5e),e(Q5e,XGr),e(H0,zGr),e(H0,KK),e(KK,WGr),e(H0,QGr),e(Tx,HGr),e(Tx,U0),e(U0,H5e),e(H5e,UGr),e(U0,JGr),e(U0,ZK),e(ZK,YGr),e(U0,KGr),e(Ur,ZGr),M(J0,Ur,null),b(m,Rje,_),b(m,im,_),e(im,Y0),e(Y0,U5e),M(Mx,U5e,null),e(im,eOr),e(im,J5e),e(J5e,oOr),b(m,Pje,_),b(m,Mr,_),M(Ex,Mr,null),e(Mr,rOr),e(Mr,dm),e(dm,tOr),e(dm,eZ),e(eZ,aOr),e(dm,nOr),e(dm,oZ),e(oZ,sOr),e(dm,lOr),e(Mr,iOr),e(Mr,Cx),e(Cx,dOr),e(Cx,Y5e),e(Y5e,cOr),e(Cx,mOr),e(Mr,fOr),e(Mr,Kt),M(wx,Kt,null),e(Kt,gOr),e(Kt,K5e),e(K5e,hOr),e(Kt,uOr),e(Kt,cm),e(cm,pOr),e(cm,Z5e),e(Z5e,_Or),e(cm,bOr),e(cm,rZ),e(rZ,vOr),e(cm,FOr),e(Kt,TOr),M(K0,Kt,null),e(Mr,MOr),e(Mr,Jr),M(Ax,Jr,null),e(Jr,EOr),e(Jr,e3e),e(e3e,COr),e(Jr,wOr),e(Jr,wn),e(wn,AOr),e(wn,o3e),e(o3e,yOr),e(wn,LOr),e(wn,r3e),e(r3e,xOr),e(wn,$Or),e(wn,t3e),e(t3e,kOr),e(wn,SOr),e(Jr,ROr),e(Jr,a3e),e(a3e,Z0),e(Z0,n3e),e(n3e,POr),e(Z0,BOr),e(Z0,tZ),e(tZ,IOr),e(Z0,qOr),e(Jr,NOr),M(eA,Jr,null),Bje=!0},p(m,[_]){const yx={};_&2&&(yx.$$scope={dirty:_,ctx:m}),vm.$set(yx);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:m}),Mg.$set(s3e);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:m}),rh.$set(l3e);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:m}),Rh.$set(i3e);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:m}),Ph.$set(Lx);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:m}),eu.$set(d3e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),ou.$set(An);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:m}),au.$set(c3e);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:m}),Kp.$set(m3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:m}),e_.$set(f3e);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:m}),X_.$set(xx);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:m}),W_.$set(g3e);const $x={};_&2&&($x.$$scope={dirty:_,ctx:m}),$b.$set($x);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:m}),Sb.$set(h3e);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:m}),u2.$set(kx);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:m}),_2.$set(u3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:m}),B2.$set(p3e);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:m}),q2.$set(_3e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),Sv.$set(mm);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:m}),Pv.$set(b3e);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:m}),mF.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:m}),gF.$set(F3e);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:m}),FF.$set(Sx);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),MF.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),a1.$set(M3e);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),s1.$set(E3e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),H1.$set(et);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:m}),J1.$set(Rx);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),Z1.$set(C3e);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:m}),oT.$set(Px);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),uT.$set(w3e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),_T.$set(ot);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),FT.$set(A3e);const fm={};_&2&&(fm.$$scope={dirty:_,ctx:m}),MT.$set(fm);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:m}),RT.$set(y3e);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:m}),BT.$set(L3e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),OT.$set(y);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:m}),XT.$set(oA);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:m}),oM.$set(x3e);const $3e={};_&2&&($3e.$$scope={dirty:_,ctx:m}),tM.$set($3e);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:m}),lM.$set(rA);const k3e={};_&2&&(k3e.$$scope={dirty:_,ctx:m}),dM.$set(k3e);const S3e={};_&2&&(S3e.$$scope={dirty:_,ctx:m}),pM.$set(S3e);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:m}),bM.$set(tA);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:m}),EM.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:m}),wM.$set(P3e);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:m}),xM.$set(aA);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:m}),kM.$set(B3e);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:m}),PM.$set(I3e);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:m}),IM.$set(nA);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:m}),OM.$set(q3e);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:m}),XM.$set(N3e);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:m}),QM.$set(sA);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:m}),UM.$set(j3e);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:m}),G4.$set(D3e);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:m}),V4.$set(lA);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:m}),gE.$set(G3e);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:m}),uE.$set(O3e);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:m}),LE.$set(iA);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:m}),$E.$set(V3e);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:m}),BE.$set(X3e);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:m}),qE.$set(dA);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:m}),aC.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:m}),sC.$set(W3e);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:m}),_C.$set(cA);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:m}),vC.$set(Q3e);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:m}),WC.$set(H3e);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:m}),HC.$set(mA);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:m}),f5.$set(U3e);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:m}),h5.$set(J3e);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:m}),_5.$set(fA);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:m}),v5.$set(Y3e);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:m}),T5.$set(K3e);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:m}),E5.$set(gA);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:m}),X5.$set(Z3e);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:m}),W5.$set(ewe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:m}),g3.$set(hA);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:m}),u3.$set(owe);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:m}),_3.$set(rwe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:m}),v3.$set(uA);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:m}),T3.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:m}),E3.$set(awe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:m}),U3.$set(pA);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:m}),Y3.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:m}),lw.$set(swe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:m}),dw.$set(_A);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:m}),Mw.$set(lwe);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:m}),Cw.$set(iwe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:m}),Bw.$set(bA);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:m}),qw.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:m}),Qw.$set(cwe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:m}),Uw.$set(vA);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:m}),s0.$set(mwe);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:m}),i0.$set(fwe);const FA={};_&2&&(FA.$$scope={dirty:_,ctx:m}),v0.$set(FA);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:m}),T0.$set(gwe);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:m}),$0.$set(hwe);const TA={};_&2&&(TA.$$scope={dirty:_,ctx:m}),S0.$set(TA);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:m}),G0.$set(uwe);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:m}),V0.$set(pwe);const MA={};_&2&&(MA.$$scope={dirty:_,ctx:m}),z0.$set(MA);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:m}),Q0.$set(_we);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:m}),J0.$set(bwe);const EA={};_&2&&(EA.$$scope={dirty:_,ctx:m}),K0.$set(EA);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:m}),eA.$set(vwe)},i(m){Bje||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(vm.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(Ly.$$.fragment,m),E(Mg.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Py.$$.fragment,m),E(rh.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(qy.$$.fragment,m),E(Dy.$$.fragment,m),E(Rh.$$.fragment,m),E(Ph.$$.fragment,m),E(Gy.$$.fragment,m),E(Oy.$$.fragment,m),E(Vy.$$.fragment,m),E(Wy.$$.fragment,m),E(eu.$$.fragment,m),E(ou.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(au.$$.fragment,m),E(Ky.$$.fragment,m),E(Kp.$$.fragment,m),E(Zy.$$.fragment,m),E(eL.$$.fragment,m),E(rL.$$.fragment,m),E(e_.$$.fragment,m),E(tL.$$.fragment,m),E(X_.$$.fragment,m),E(aL.$$.fragment,m),E(nL.$$.fragment,m),E(lL.$$.fragment,m),E(W_.$$.fragment,m),E(iL.$$.fragment,m),E($b.$$.fragment,m),E(dL.$$.fragment,m),E(cL.$$.fragment,m),E(fL.$$.fragment,m),E(Sb.$$.fragment,m),E(gL.$$.fragment,m),E(u2.$$.fragment,m),E(hL.$$.fragment,m),E(uL.$$.fragment,m),E(_L.$$.fragment,m),E(_2.$$.fragment,m),E(bL.$$.fragment,m),E(B2.$$.fragment,m),E(vL.$$.fragment,m),E(FL.$$.fragment,m),E(ML.$$.fragment,m),E(q2.$$.fragment,m),E(EL.$$.fragment,m),E(Sv.$$.fragment,m),E(CL.$$.fragment,m),E(wL.$$.fragment,m),E(yL.$$.fragment,m),E(Pv.$$.fragment,m),E(LL.$$.fragment,m),E(mF.$$.fragment,m),E(xL.$$.fragment,m),E($L.$$.fragment,m),E(SL.$$.fragment,m),E(gF.$$.fragment,m),E(RL.$$.fragment,m),E(FF.$$.fragment,m),E(PL.$$.fragment,m),E(BL.$$.fragment,m),E(qL.$$.fragment,m),E(MF.$$.fragment,m),E(NL.$$.fragment,m),E(a1.$$.fragment,m),E(jL.$$.fragment,m),E(DL.$$.fragment,m),E(OL.$$.fragment,m),E(s1.$$.fragment,m),E(VL.$$.fragment,m),E(H1.$$.fragment,m),E(XL.$$.fragment,m),E(zL.$$.fragment,m),E(QL.$$.fragment,m),E(J1.$$.fragment,m),E(HL.$$.fragment,m),E(Z1.$$.fragment,m),E(UL.$$.fragment,m),E(JL.$$.fragment,m),E(KL.$$.fragment,m),E(oT.$$.fragment,m),E(ZL.$$.fragment,m),E(uT.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(_T.$$.fragment,m),E(a8.$$.fragment,m),E(FT.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(MT.$$.fragment,m),E(d8.$$.fragment,m),E(RT.$$.fragment,m),E(c8.$$.fragment,m),E(m8.$$.fragment,m),E(g8.$$.fragment,m),E(BT.$$.fragment,m),E(h8.$$.fragment,m),E(OT.$$.fragment,m),E(u8.$$.fragment,m),E(p8.$$.fragment,m),E(b8.$$.fragment,m),E(XT.$$.fragment,m),E(v8.$$.fragment,m),E(oM.$$.fragment,m),E(F8.$$.fragment,m),E(T8.$$.fragment,m),E(E8.$$.fragment,m),E(tM.$$.fragment,m),E(C8.$$.fragment,m),E(lM.$$.fragment,m),E(A8.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E(dM.$$.fragment,m),E($8.$$.fragment,m),E(pM.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(bM.$$.fragment,m),E(B8.$$.fragment,m),E(EM.$$.fragment,m),E(I8.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(wM.$$.fragment,m),E(D8.$$.fragment,m),E(xM.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(kM.$$.fragment,m),E(W8.$$.fragment,m),E(PM.$$.fragment,m),E(Q8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(IM.$$.fragment,m),E(Y8.$$.fragment,m),E(OM.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o7.$$.fragment,m),E(XM.$$.fragment,m),E(r7.$$.fragment,m),E(QM.$$.fragment,m),E(t7.$$.fragment,m),E(a7.$$.fragment,m),E(s7.$$.fragment,m),E(UM.$$.fragment,m),E(l7.$$.fragment,m),E(G4.$$.fragment,m),E(i7.$$.fragment,m),E(d7.$$.fragment,m),E(m7.$$.fragment,m),E(V4.$$.fragment,m),E(f7.$$.fragment,m),E(gE.$$.fragment,m),E(g7.$$.fragment,m),E(h7.$$.fragment,m),E(p7.$$.fragment,m),E(uE.$$.fragment,m),E(_7.$$.fragment,m),E(LE.$$.fragment,m),E(b7.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E($E.$$.fragment,m),E(M7.$$.fragment,m),E(BE.$$.fragment,m),E(E7.$$.fragment,m),E(C7.$$.fragment,m),E(A7.$$.fragment,m),E(qE.$$.fragment,m),E(y7.$$.fragment,m),E(aC.$$.fragment,m),E(L7.$$.fragment,m),E(x7.$$.fragment,m),E(k7.$$.fragment,m),E(sC.$$.fragment,m),E(S7.$$.fragment,m),E(_C.$$.fragment,m),E(R7.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(vC.$$.fragment,m),E(q7.$$.fragment,m),E(WC.$$.fragment,m),E(N7.$$.fragment,m),E(j7.$$.fragment,m),E(G7.$$.fragment,m),E(HC.$$.fragment,m),E(O7.$$.fragment,m),E(f5.$$.fragment,m),E(V7.$$.fragment,m),E(X7.$$.fragment,m),E(W7.$$.fragment,m),E(h5.$$.fragment,m),E(Q7.$$.fragment,m),E(_5.$$.fragment,m),E(U7.$$.fragment,m),E(J7.$$.fragment,m),E(K7.$$.fragment,m),E(v5.$$.fragment,m),E(Z7.$$.fragment,m),E(T5.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E(E5.$$.fragment,m),E(a9.$$.fragment,m),E(X5.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(W5.$$.fragment,m),E(d9.$$.fragment,m),E(g3.$$.fragment,m),E(c9.$$.fragment,m),E(m9.$$.fragment,m),E(g9.$$.fragment,m),E(u3.$$.fragment,m),E(h9.$$.fragment,m),E(_3.$$.fragment,m),E(u9.$$.fragment,m),E(p9.$$.fragment,m),E(b9.$$.fragment,m),E(v3.$$.fragment,m),E(v9.$$.fragment,m),E(T3.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(E9.$$.fragment,m),E(E3.$$.fragment,m),E(C9.$$.fragment,m),E(U3.$$.fragment,m),E(w9.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(Y3.$$.fragment,m),E(x9.$$.fragment,m),E(lw.$$.fragment,m),E($9.$$.fragment,m),E(k9.$$.fragment,m),E(R9.$$.fragment,m),E(dw.$$.fragment,m),E(P9.$$.fragment,m),E(Mw.$$.fragment,m),E(B9.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(Cw.$$.fragment,m),E(j9.$$.fragment,m),E(Bw.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(qw.$$.fragment,m),E(X9.$$.fragment,m),E(Qw.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(Uw.$$.fragment,m),E(U9.$$.fragment,m),E(s0.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(i0.$$.fragment,m),E(ex.$$.fragment,m),E(v0.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(T0.$$.fragment,m),E(nx.$$.fragment,m),E($0.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(S0.$$.fragment,m),E(cx.$$.fragment,m),E(G0.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(V0.$$.fragment,m),E(ux.$$.fragment,m),E(z0.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(Q0.$$.fragment,m),E(Fx.$$.fragment,m),E(J0.$$.fragment,m),E(Mx.$$.fragment,m),E(Ex.$$.fragment,m),E(wx.$$.fragment,m),E(K0.$$.fragment,m),E(Ax.$$.fragment,m),E(eA.$$.fragment,m),Bje=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(vm.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(Ly.$$.fragment,m),C(Mg.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Py.$$.fragment,m),C(rh.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(qy.$$.fragment,m),C(Dy.$$.fragment,m),C(Rh.$$.fragment,m),C(Ph.$$.fragment,m),C(Gy.$$.fragment,m),C(Oy.$$.fragment,m),C(Vy.$$.fragment,m),C(Wy.$$.fragment,m),C(eu.$$.fragment,m),C(ou.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(au.$$.fragment,m),C(Ky.$$.fragment,m),C(Kp.$$.fragment,m),C(Zy.$$.fragment,m),C(eL.$$.fragment,m),C(rL.$$.fragment,m),C(e_.$$.fragment,m),C(tL.$$.fragment,m),C(X_.$$.fragment,m),C(aL.$$.fragment,m),C(nL.$$.fragment,m),C(lL.$$.fragment,m),C(W_.$$.fragment,m),C(iL.$$.fragment,m),C($b.$$.fragment,m),C(dL.$$.fragment,m),C(cL.$$.fragment,m),C(fL.$$.fragment,m),C(Sb.$$.fragment,m),C(gL.$$.fragment,m),C(u2.$$.fragment,m),C(hL.$$.fragment,m),C(uL.$$.fragment,m),C(_L.$$.fragment,m),C(_2.$$.fragment,m),C(bL.$$.fragment,m),C(B2.$$.fragment,m),C(vL.$$.fragment,m),C(FL.$$.fragment,m),C(ML.$$.fragment,m),C(q2.$$.fragment,m),C(EL.$$.fragment,m),C(Sv.$$.fragment,m),C(CL.$$.fragment,m),C(wL.$$.fragment,m),C(yL.$$.fragment,m),C(Pv.$$.fragment,m),C(LL.$$.fragment,m),C(mF.$$.fragment,m),C(xL.$$.fragment,m),C($L.$$.fragment,m),C(SL.$$.fragment,m),C(gF.$$.fragment,m),C(RL.$$.fragment,m),C(FF.$$.fragment,m),C(PL.$$.fragment,m),C(BL.$$.fragment,m),C(qL.$$.fragment,m),C(MF.$$.fragment,m),C(NL.$$.fragment,m),C(a1.$$.fragment,m),C(jL.$$.fragment,m),C(DL.$$.fragment,m),C(OL.$$.fragment,m),C(s1.$$.fragment,m),C(VL.$$.fragment,m),C(H1.$$.fragment,m),C(XL.$$.fragment,m),C(zL.$$.fragment,m),C(QL.$$.fragment,m),C(J1.$$.fragment,m),C(HL.$$.fragment,m),C(Z1.$$.fragment,m),C(UL.$$.fragment,m),C(JL.$$.fragment,m),C(KL.$$.fragment,m),C(oT.$$.fragment,m),C(ZL.$$.fragment,m),C(uT.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(_T.$$.fragment,m),C(a8.$$.fragment,m),C(FT.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(MT.$$.fragment,m),C(d8.$$.fragment,m),C(RT.$$.fragment,m),C(c8.$$.fragment,m),C(m8.$$.fragment,m),C(g8.$$.fragment,m),C(BT.$$.fragment,m),C(h8.$$.fragment,m),C(OT.$$.fragment,m),C(u8.$$.fragment,m),C(p8.$$.fragment,m),C(b8.$$.fragment,m),C(XT.$$.fragment,m),C(v8.$$.fragment,m),C(oM.$$.fragment,m),C(F8.$$.fragment,m),C(T8.$$.fragment,m),C(E8.$$.fragment,m),C(tM.$$.fragment,m),C(C8.$$.fragment,m),C(lM.$$.fragment,m),C(A8.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C(dM.$$.fragment,m),C($8.$$.fragment,m),C(pM.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(bM.$$.fragment,m),C(B8.$$.fragment,m),C(EM.$$.fragment,m),C(I8.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(wM.$$.fragment,m),C(D8.$$.fragment,m),C(xM.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(kM.$$.fragment,m),C(W8.$$.fragment,m),C(PM.$$.fragment,m),C(Q8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(IM.$$.fragment,m),C(Y8.$$.fragment,m),C(OM.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o7.$$.fragment,m),C(XM.$$.fragment,m),C(r7.$$.fragment,m),C(QM.$$.fragment,m),C(t7.$$.fragment,m),C(a7.$$.fragment,m),C(s7.$$.fragment,m),C(UM.$$.fragment,m),C(l7.$$.fragment,m),C(G4.$$.fragment,m),C(i7.$$.fragment,m),C(d7.$$.fragment,m),C(m7.$$.fragment,m),C(V4.$$.fragment,m),C(f7.$$.fragment,m),C(gE.$$.fragment,m),C(g7.$$.fragment,m),C(h7.$$.fragment,m),C(p7.$$.fragment,m),C(uE.$$.fragment,m),C(_7.$$.fragment,m),C(LE.$$.fragment,m),C(b7.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C($E.$$.fragment,m),C(M7.$$.fragment,m),C(BE.$$.fragment,m),C(E7.$$.fragment,m),C(C7.$$.fragment,m),C(A7.$$.fragment,m),C(qE.$$.fragment,m),C(y7.$$.fragment,m),C(aC.$$.fragment,m),C(L7.$$.fragment,m),C(x7.$$.fragment,m),C(k7.$$.fragment,m),C(sC.$$.fragment,m),C(S7.$$.fragment,m),C(_C.$$.fragment,m),C(R7.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(vC.$$.fragment,m),C(q7.$$.fragment,m),C(WC.$$.fragment,m),C(N7.$$.fragment,m),C(j7.$$.fragment,m),C(G7.$$.fragment,m),C(HC.$$.fragment,m),C(O7.$$.fragment,m),C(f5.$$.fragment,m),C(V7.$$.fragment,m),C(X7.$$.fragment,m),C(W7.$$.fragment,m),C(h5.$$.fragment,m),C(Q7.$$.fragment,m),C(_5.$$.fragment,m),C(U7.$$.fragment,m),C(J7.$$.fragment,m),C(K7.$$.fragment,m),C(v5.$$.fragment,m),C(Z7.$$.fragment,m),C(T5.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C(E5.$$.fragment,m),C(a9.$$.fragment,m),C(X5.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(W5.$$.fragment,m),C(d9.$$.fragment,m),C(g3.$$.fragment,m),C(c9.$$.fragment,m),C(m9.$$.fragment,m),C(g9.$$.fragment,m),C(u3.$$.fragment,m),C(h9.$$.fragment,m),C(_3.$$.fragment,m),C(u9.$$.fragment,m),C(p9.$$.fragment,m),C(b9.$$.fragment,m),C(v3.$$.fragment,m),C(v9.$$.fragment,m),C(T3.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(E9.$$.fragment,m),C(E3.$$.fragment,m),C(C9.$$.fragment,m),C(U3.$$.fragment,m),C(w9.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(Y3.$$.fragment,m),C(x9.$$.fragment,m),C(lw.$$.fragment,m),C($9.$$.fragment,m),C(k9.$$.fragment,m),C(R9.$$.fragment,m),C(dw.$$.fragment,m),C(P9.$$.fragment,m),C(Mw.$$.fragment,m),C(B9.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(Cw.$$.fragment,m),C(j9.$$.fragment,m),C(Bw.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(qw.$$.fragment,m),C(X9.$$.fragment,m),C(Qw.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(Uw.$$.fragment,m),C(U9.$$.fragment,m),C(s0.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(i0.$$.fragment,m),C(ex.$$.fragment,m),C(v0.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(T0.$$.fragment,m),C(nx.$$.fragment,m),C($0.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(S0.$$.fragment,m),C(cx.$$.fragment,m),C(G0.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(V0.$$.fragment,m),C(ux.$$.fragment,m),C(z0.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(Q0.$$.fragment,m),C(Fx.$$.fragment,m),C(J0.$$.fragment,m),C(Mx.$$.fragment,m),C(Ex.$$.fragment,m),C(wx.$$.fragment,m),C(K0.$$.fragment,m),C(Ax.$$.fragment,m),C(eA.$$.fragment,m),Bje=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(hm),m&&t(rt),m&&t(je),m&&t(We),m&&t(pm),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(Sqe),m&&t(bi),w(My),m&&t(Rqe),m&&t(kn),m&&t(Pqe),w(Ey,m),m&&t(Bqe),m&&t(z$),m&&t(Iqe),w(vm,m),m&&t(qqe),m&&t(vi),w(Cy),m&&t(Nqe),m&&t(Co),w(wy),w(Ly),w(Mg),w(xy),m&&t(jqe),m&&t(Ti),w($y),m&&t(Dqe),m&&t(wo),w(ky),w(Py),w(rh),w(By),m&&t(Gqe),m&&t(Mi),w(Iy),m&&t(Oqe),m&&t(Ao),w(qy),w(Dy),w(Rh),w(Ph),w(Gy),m&&t(Vqe),m&&t(Ei),w(Oy),m&&t(Xqe),m&&t(yo),w(Vy),w(Wy),w(eu),w(ou),w(Qy),m&&t(zqe),m&&t(wi),w(Hy),m&&t(Wqe),m&&t(Lo),w(Uy),w(Yy),w(au),w(Ky),w(Kp),m&&t(Qqe),m&&t(Li),w(Zy),m&&t(Hqe),m&&t(xo),w(eL),w(rL),w(e_),w(tL),w(X_),m&&t(Uqe),m&&t(ki),w(aL),m&&t(Jqe),m&&t($o),w(nL),w(lL),w(W_),w(iL),w($b),m&&t(Yqe),m&&t(Pi),w(dL),m&&t(Kqe),m&&t(ko),w(cL),w(fL),w(Sb),w(gL),w(u2),m&&t(Zqe),m&&t(qi),w(hL),m&&t(eNe),m&&t(So),w(uL),w(_L),w(_2),w(bL),w(B2),m&&t(oNe),m&&t(Di),w(vL),m&&t(rNe),m&&t(Ro),w(FL),w(ML),w(q2),w(EL),w(Sv),m&&t(tNe),m&&t(Vi),w(CL),m&&t(aNe),m&&t(Po),w(wL),w(yL),w(Pv),w(LL),w(mF),m&&t(nNe),m&&t(Wi),w(xL),m&&t(sNe),m&&t(Bo),w($L),w(SL),w(gF),w(RL),w(FF),m&&t(lNe),m&&t(Ui),w(PL),m&&t(iNe),m&&t(Io),w(BL),w(qL),w(MF),w(NL),w(a1),m&&t(dNe),m&&t(Ki),w(jL),m&&t(cNe),m&&t(qo),w(DL),w(OL),w(s1),w(VL),w(H1),m&&t(mNe),m&&t(od),w(XL),m&&t(fNe),m&&t(No),w(zL),w(QL),w(J1),w(HL),w(Z1),m&&t(gNe),m&&t(ad),w(UL),m&&t(hNe),m&&t(jo),w(JL),w(KL),w(oT),w(ZL),w(uT),m&&t(uNe),m&&t(ld),w(e8),m&&t(pNe),m&&t(Do),w(o8),w(t8),w(_T),w(a8),w(FT),m&&t(_Ne),m&&t(cd),w(n8),m&&t(bNe),m&&t(Go),w(s8),w(i8),w(MT),w(d8),w(RT),m&&t(vNe),m&&t(gd),w(c8),m&&t(FNe),m&&t(Oo),w(m8),w(g8),w(BT),w(h8),w(OT),m&&t(TNe),m&&t(pd),w(u8),m&&t(MNe),m&&t(Vo),w(p8),w(b8),w(XT),w(v8),w(oM),m&&t(ENe),m&&t(vd),w(F8),m&&t(CNe),m&&t(Xo),w(T8),w(E8),w(tM),w(C8),w(lM),m&&t(wNe),m&&t(Md),w(A8),m&&t(ANe),m&&t(zo),w(y8),w(x8),w(dM),w($8),w(pM),m&&t(yNe),m&&t(wd),w(k8),m&&t(LNe),m&&t(Wo),w(S8),w(P8),w(bM),w(B8),w(EM),m&&t(xNe),m&&t(xd),w(I8),m&&t($Ne),m&&t(Qo),w(q8),w(j8),w(wM),w(D8),w(xM),m&&t(kNe),m&&t(Sd),w(O8),m&&t(SNe),m&&t(Ho),w(V8),w(z8),w(kM),w(W8),w(PM),m&&t(RNe),m&&t(Bd),w(Q8),m&&t(PNe),m&&t(Uo),w(H8),w(J8),w(IM),w(Y8),w(OM),m&&t(BNe),m&&t(Nd),w(K8),m&&t(INe),m&&t(Jo),w(Z8),w(o7),w(XM),w(r7),w(QM),m&&t(qNe),m&&t(Gd),w(t7),m&&t(NNe),m&&t(Yo),w(a7),w(s7),w(UM),w(l7),w(G4),m&&t(jNe),m&&t(Xd),w(i7),m&&t(DNe),m&&t(Ko),w(d7),w(m7),w(V4),w(f7),w(gE),m&&t(GNe),m&&t(Qd),w(g7),m&&t(ONe),m&&t(Zo),w(h7),w(p7),w(uE),w(_7),w(LE),m&&t(VNe),m&&t(Jd),w(b7),m&&t(XNe),m&&t(er),w(v7),w(T7),w($E),w(M7),w(BE),m&&t(zNe),m&&t(Zd),w(E7),m&&t(WNe),m&&t(or),w(C7),w(A7),w(qE),w(y7),w(aC),m&&t(QNe),m&&t(rc),w(L7),m&&t(HNe),m&&t(rr),w(x7),w(k7),w(sC),w(S7),w(_C),m&&t(UNe),m&&t(nc),w(R7),m&&t(JNe),m&&t(tr),w(P7),w(I7),w(vC),w(q7),w(WC),m&&t(YNe),m&&t(ic),w(N7),m&&t(KNe),m&&t(ar),w(j7),w(G7),w(HC),w(O7),w(f5),m&&t(ZNe),m&&t(mc),w(V7),m&&t(eje),m&&t(nr),w(X7),w(W7),w(h5),w(Q7),w(_5),m&&t(oje),m&&t(hc),w(U7),m&&t(rje),m&&t(sr),w(J7),w(K7),w(v5),w(Z7),w(T5),m&&t(tje),m&&t(_c),w(e9),m&&t(aje),m&&t(lr),w(o9),w(t9),w(E5),w(a9),w(X5),m&&t(nje),m&&t(Fc),w(n9),m&&t(sje),m&&t(ir),w(s9),w(i9),w(W5),w(d9),w(g3),m&&t(lje),m&&t(Ec),w(c9),m&&t(ije),m&&t(dr),w(m9),w(g9),w(u3),w(h9),w(_3),m&&t(dje),m&&t(Ac),w(u9),m&&t(cje),m&&t(cr),w(p9),w(b9),w(v3),w(v9),w(T3),m&&t(mje),m&&t(xc),w(F9),m&&t(fje),m&&t(mr),w(T9),w(E9),w(E3),w(C9),w(U3),m&&t(gje),m&&t(Sc),w(w9),m&&t(hje),m&&t(fr),w(A9),w(L9),w(Y3),w(x9),w(lw),m&&t(uje),m&&t(Bc),w($9),m&&t(pje),m&&t(gr),w(k9),w(R9),w(dw),w(P9),w(Mw),m&&t(_je),m&&t(Nc),w(B9),m&&t(bje),m&&t(hr),w(I9),w(N9),w(Cw),w(j9),w(Bw),m&&t(vje),m&&t(Gc),w(D9),m&&t(Fje),m&&t(ur),w(G9),w(V9),w(qw),w(X9),w(Qw),m&&t(Tje),m&&t(Xc),w(z9),m&&t(Mje),m&&t(pr),w(W9),w(H9),w(Uw),w(U9),w(s0),m&&t(Eje),m&&t(Qc),w(J9),m&&t(Cje),m&&t(_r),w(Y9),w(Z9),w(i0),w(ex),w(v0),m&&t(wje),m&&t(Jc),w(ox),m&&t(Aje),m&&t(br),w(rx),w(ax),w(T0),w(nx),w($0),m&&t(yje),m&&t(Zc),w(sx),m&&t(Lje),m&&t(vr),w(lx),w(dx),w(S0),w(cx),w(G0),m&&t(xje),m&&t(rm),w(mx),m&&t($je),m&&t(Fr),w(fx),w(hx),w(V0),w(ux),w(z0),m&&t(kje),m&&t(nm),w(px),m&&t(Sje),m&&t(Tr),w(_x),w(vx),w(Q0),w(Fx),w(J0),m&&t(Rje),m&&t(im),w(Mx),m&&t(Pje),m&&t(Mr),w(Ex),w(wx),w(K0),w(Ax),w(eA)}}}const ikt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function dkt(L){return dxt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class pkt extends nxt{constructor(g){super();sxt(this,g,dkt,lkt,lxt,{})}}export{pkt as default,ikt as metadata};
