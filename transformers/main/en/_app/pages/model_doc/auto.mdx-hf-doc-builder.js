import{S as J$t,i as Y$t,s as K$t,e as a,k as l,w as F,t as o,M as Z$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ekt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as fXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function okt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,yy,um,De,We,hi,yn,Ly,Ln,xn,xy,ui,$n,$y,pi,pm,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),hm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),gi=o('"new-model"'),yy=o(")."),um=l(),De=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),Ly=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),xy=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),$y=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),pm=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var U$=s(u);f=r(U$,"NewModelConfig"),U$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var J$=s(mi);hm=r(J$,"model_type"),J$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var Y$=s(fi);gi=r(Y$,'"new-model"'),Y$.forEach(t),yy=r(Ae,")."),Ae.forEach(t),um=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),Ly=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var K$=s(Ln);xn=r(K$,"PreTrainedModel"),K$.forEach(t),xy=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var _m=s(ui);$n=r(_m,"config_class"),_m.forEach(t),$y=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var Z$=s(pi);pm=r(Z$,"NewModelConfig"),Z$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,hm),e(g,rt),e(g,fi),e(fi,gi),e(g,yy),b(Qe,um,Ae),b(Qe,De,Ae),e(De,We),e(De,hi),e(hi,yn),e(De,Ly),e(De,Ln),e(Ln,xn),e(De,xy),e(De,ui),e(ui,$n),e(De,$y),e(De,pi),e(pi,pm),e(De,Ca)},d(Qe){Qe&&t(g),Qe&&t(um),Qe&&t(De)}}}function rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function akt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function skt(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function lkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ikt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ckt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ukt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _kt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ekt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ckt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Akt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ykt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $kt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Skt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ikt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Okt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ukt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ykt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zkt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _St(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ESt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ASt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ySt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $St(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ISt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function USt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YSt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KSt(L){let g,v,u,f,p,d,h,Mo,mi,hm,rt,fi,gi,yy,um,De,We,hi,yn,Ly,Ln,xn,xy,ui,$n,$y,pi,pm,Ca,Qe,Ae,U$,_i,J$,Y$,Eo,wa,K$,_m,Z$,wOe,hqe,bi,bm,hoe,ky,AOe,uoe,yOe,uqe,kn,LOe,poe,xOe,$Oe,_oe,kOe,SOe,pqe,Sy,_qe,ek,ROe,bqe,vm,vqe,vi,Fm,boe,Ry,POe,voe,BOe,Fqe,Co,Py,IOe,By,NOe,ok,qOe,jOe,DOe,Iy,GOe,Foe,OOe,VOe,XOe,Er,Ny,zOe,Toe,WOe,QOe,Fi,HOe,Moe,UOe,JOe,Eoe,YOe,KOe,ZOe,A,Tm,Coe,eVe,oVe,rk,rVe,tVe,aVe,Mm,woe,nVe,sVe,tk,lVe,iVe,dVe,Em,Aoe,cVe,mVe,ak,fVe,gVe,hVe,Cm,yoe,uVe,pVe,nk,_Ve,bVe,vVe,wm,Loe,FVe,TVe,sk,MVe,EVe,CVe,Am,xoe,wVe,AVe,lk,yVe,LVe,xVe,ym,$oe,$Ve,kVe,ik,SVe,RVe,PVe,Lm,koe,BVe,IVe,dk,NVe,qVe,jVe,xm,Soe,DVe,GVe,ck,OVe,VVe,XVe,$m,Roe,zVe,WVe,mk,QVe,HVe,UVe,km,Poe,JVe,YVe,fk,KVe,ZVe,eXe,Sm,Boe,oXe,rXe,gk,tXe,aXe,nXe,Rm,Ioe,sXe,lXe,hk,iXe,dXe,cXe,Pm,Noe,mXe,fXe,uk,gXe,hXe,uXe,Bm,qoe,pXe,_Xe,pk,bXe,vXe,FXe,Im,joe,TXe,MXe,_k,EXe,CXe,wXe,Nm,Doe,AXe,yXe,bk,LXe,xXe,$Xe,qm,Goe,kXe,SXe,vk,RXe,PXe,BXe,jm,Ooe,IXe,NXe,Fk,qXe,jXe,DXe,Dm,Voe,GXe,OXe,Tk,VXe,XXe,zXe,Gm,Xoe,WXe,QXe,Mk,HXe,UXe,JXe,Om,zoe,YXe,KXe,Ek,ZXe,eze,oze,Vm,Woe,rze,tze,Ck,aze,nze,sze,Xm,Qoe,lze,ize,wk,dze,cze,mze,zm,Hoe,fze,gze,Ak,hze,uze,pze,Wm,Uoe,_ze,bze,yk,vze,Fze,Tze,Qm,Joe,Mze,Eze,Lk,Cze,wze,Aze,Hm,Yoe,yze,Lze,xk,xze,$ze,kze,Um,Koe,Sze,Rze,$k,Pze,Bze,Ize,Jm,Zoe,Nze,qze,kk,jze,Dze,Gze,Ym,ere,Oze,Vze,Sk,Xze,zze,Wze,Km,ore,Qze,Hze,Rk,Uze,Jze,Yze,Zm,rre,Kze,Zze,Pk,eWe,oWe,rWe,ef,tre,tWe,aWe,Bk,nWe,sWe,lWe,of,are,iWe,dWe,Ik,cWe,mWe,fWe,rf,nre,gWe,hWe,Nk,uWe,pWe,_We,tf,sre,bWe,vWe,qk,FWe,TWe,MWe,af,lre,EWe,CWe,jk,wWe,AWe,yWe,nf,ire,LWe,xWe,Dk,$We,kWe,SWe,sf,dre,RWe,PWe,Gk,BWe,IWe,NWe,lf,cre,qWe,jWe,Ok,DWe,GWe,OWe,df,mre,VWe,XWe,Vk,zWe,WWe,QWe,cf,fre,HWe,UWe,Xk,JWe,YWe,KWe,mf,gre,ZWe,eQe,zk,oQe,rQe,tQe,ff,hre,aQe,nQe,Wk,sQe,lQe,iQe,gf,ure,dQe,cQe,Qk,mQe,fQe,gQe,hf,pre,hQe,uQe,Hk,pQe,_Qe,bQe,uf,_re,vQe,FQe,Uk,TQe,MQe,EQe,pf,bre,CQe,wQe,Jk,AQe,yQe,LQe,_f,vre,xQe,$Qe,Yk,kQe,SQe,RQe,bf,Fre,PQe,BQe,Kk,IQe,NQe,qQe,vf,Tre,jQe,DQe,Zk,GQe,OQe,VQe,Ff,Mre,XQe,zQe,eS,WQe,QQe,HQe,Tf,Ere,UQe,JQe,oS,YQe,KQe,ZQe,Mf,Cre,eHe,oHe,rS,rHe,tHe,aHe,Ef,wre,nHe,sHe,tS,lHe,iHe,dHe,Cf,Are,cHe,mHe,aS,fHe,gHe,hHe,wf,yre,uHe,pHe,nS,_He,bHe,vHe,Af,Lre,FHe,THe,sS,MHe,EHe,CHe,yf,xre,wHe,AHe,lS,yHe,LHe,xHe,Lf,$re,$He,kHe,iS,SHe,RHe,PHe,xf,kre,BHe,IHe,dS,NHe,qHe,jHe,$f,Sre,DHe,GHe,cS,OHe,VHe,XHe,kf,Rre,zHe,WHe,mS,QHe,HHe,UHe,Sf,Pre,JHe,YHe,fS,KHe,ZHe,eUe,Rf,Bre,oUe,rUe,gS,tUe,aUe,nUe,Pf,Ire,sUe,lUe,hS,iUe,dUe,cUe,Bf,Nre,mUe,fUe,uS,gUe,hUe,uUe,If,qre,pUe,_Ue,pS,bUe,vUe,FUe,Nf,jre,TUe,MUe,_S,EUe,CUe,wUe,qf,Dre,AUe,yUe,bS,LUe,xUe,$Ue,jf,Gre,kUe,SUe,vS,RUe,PUe,BUe,Df,Ore,IUe,NUe,FS,qUe,jUe,DUe,Gf,Vre,GUe,OUe,TS,VUe,XUe,zUe,Of,Xre,WUe,QUe,MS,HUe,UUe,JUe,Vf,zre,YUe,KUe,ES,ZUe,eJe,oJe,Xf,Wre,rJe,tJe,CS,aJe,nJe,sJe,zf,Qre,lJe,iJe,wS,dJe,cJe,mJe,Wf,Hre,fJe,gJe,AS,hJe,uJe,pJe,Qf,Ure,_Je,bJe,yS,vJe,FJe,TJe,Hf,Jre,MJe,EJe,LS,CJe,wJe,AJe,Uf,Yre,yJe,LJe,xS,xJe,$Je,kJe,Jf,Kre,SJe,RJe,$S,PJe,BJe,IJe,Yf,Zre,NJe,qJe,kS,jJe,DJe,GJe,Kf,ete,OJe,VJe,SS,XJe,zJe,WJe,Zf,ote,QJe,HJe,RS,UJe,JJe,YJe,eg,rte,KJe,ZJe,PS,eYe,oYe,rYe,og,tte,tYe,aYe,BS,nYe,sYe,lYe,rg,ate,iYe,dYe,IS,cYe,mYe,fYe,tg,nte,gYe,hYe,NS,uYe,pYe,_Ye,ag,ste,bYe,vYe,qS,FYe,TYe,MYe,ng,lte,EYe,CYe,jS,wYe,AYe,yYe,sg,ite,LYe,xYe,DS,$Ye,kYe,SYe,lg,dte,RYe,PYe,GS,BYe,IYe,NYe,ig,cte,qYe,jYe,OS,DYe,GYe,OYe,dg,mte,VYe,XYe,VS,zYe,WYe,QYe,cg,fte,HYe,UYe,XS,JYe,YYe,KYe,mg,gte,ZYe,eKe,zS,oKe,rKe,tKe,fg,hte,aKe,nKe,WS,sKe,lKe,iKe,gg,ute,dKe,cKe,QS,mKe,fKe,gKe,hg,pte,hKe,uKe,HS,pKe,_Ke,bKe,ug,_te,vKe,FKe,US,TKe,MKe,EKe,pg,bte,CKe,wKe,JS,AKe,yKe,LKe,_g,vte,xKe,$Ke,YS,kKe,SKe,RKe,bg,Fte,PKe,BKe,KS,IKe,NKe,qKe,vg,Tte,jKe,DKe,ZS,GKe,OKe,VKe,Fg,Mte,XKe,zKe,eR,WKe,QKe,HKe,Tg,Ete,UKe,JKe,oR,YKe,KKe,ZKe,Mg,Cte,eZe,oZe,rR,rZe,tZe,aZe,Eg,nZe,Cg,qy,sZe,wte,lZe,Tqe,Ti,wg,Ate,jy,iZe,yte,dZe,Mqe,wo,Dy,cZe,Gy,mZe,tR,fZe,gZe,hZe,Oy,uZe,Lte,pZe,_Ze,bZe,Cr,Vy,vZe,xte,FZe,TZe,Aa,MZe,$te,EZe,CZe,kte,wZe,AZe,Ste,yZe,LZe,xZe,k,Sn,Rte,$Ze,kZe,aR,SZe,RZe,nR,PZe,BZe,IZe,Rn,Pte,NZe,qZe,sR,jZe,DZe,lR,GZe,OZe,VZe,Pn,Bte,XZe,zZe,iR,WZe,QZe,dR,HZe,UZe,JZe,Ag,Ite,YZe,KZe,cR,ZZe,eeo,oeo,Bn,Nte,reo,teo,mR,aeo,neo,fR,seo,leo,ieo,yg,qte,deo,ceo,gR,meo,feo,geo,Lg,jte,heo,ueo,hR,peo,_eo,beo,xg,Dte,veo,Feo,uR,Teo,Meo,Eeo,In,Gte,Ceo,weo,pR,Aeo,yeo,_R,Leo,xeo,$eo,Nn,Ote,keo,Seo,bR,Reo,Peo,vR,Beo,Ieo,Neo,qn,Vte,qeo,jeo,FR,Deo,Geo,TR,Oeo,Veo,Xeo,$g,Xte,zeo,Weo,MR,Qeo,Heo,Ueo,kg,zte,Jeo,Yeo,ER,Keo,Zeo,eoo,jn,Wte,ooo,roo,CR,too,aoo,wR,noo,soo,loo,Sg,Qte,ioo,doo,AR,coo,moo,foo,Dn,Hte,goo,hoo,yR,uoo,poo,LR,_oo,boo,voo,Gn,Ute,Foo,Too,xR,Moo,Eoo,$R,Coo,woo,Aoo,On,Jte,yoo,Loo,kR,xoo,$oo,SR,koo,Soo,Roo,Rg,Yte,Poo,Boo,RR,Ioo,Noo,qoo,Vn,Kte,joo,Doo,PR,Goo,Ooo,BR,Voo,Xoo,zoo,Xn,Zte,Woo,Qoo,IR,Hoo,Uoo,NR,Joo,Yoo,Koo,zn,eae,Zoo,ero,qR,oro,rro,jR,tro,aro,nro,Wn,oae,sro,lro,DR,iro,dro,GR,cro,mro,fro,Qn,rae,gro,hro,OR,uro,pro,VR,_ro,bro,vro,Hn,tae,Fro,Tro,XR,Mro,Ero,zR,Cro,wro,Aro,Pg,aae,yro,Lro,WR,xro,$ro,kro,Un,nae,Sro,Rro,QR,Pro,Bro,HR,Iro,Nro,qro,Bg,sae,jro,Dro,UR,Gro,Oro,Vro,Jn,lae,Xro,zro,JR,Wro,Qro,YR,Hro,Uro,Jro,Yn,iae,Yro,Kro,KR,Zro,eto,ZR,oto,rto,tto,Kn,dae,ato,nto,eP,sto,lto,oP,ito,dto,cto,Ig,cae,mto,fto,rP,gto,hto,uto,Zn,mae,pto,_to,tP,bto,vto,aP,Fto,Tto,Mto,es,fae,Eto,Cto,nP,wto,Ato,sP,yto,Lto,xto,Ng,gae,$to,kto,lP,Sto,Rto,Pto,os,hae,Bto,Ito,iP,Nto,qto,dP,jto,Dto,Gto,rs,uae,Oto,Vto,cP,Xto,zto,mP,Wto,Qto,Hto,ts,pae,Uto,Jto,fP,Yto,Kto,gP,Zto,eao,oao,as,_ae,rao,tao,hP,aao,nao,uP,sao,lao,iao,ns,bae,dao,cao,pP,mao,fao,_P,gao,hao,uao,ss,vae,pao,_ao,bP,bao,vao,vP,Fao,Tao,Mao,ls,Fae,Eao,Cao,FP,wao,Aao,TP,yao,Lao,xao,qg,Tae,$ao,kao,MP,Sao,Rao,Pao,is,Mae,Bao,Iao,EP,Nao,qao,CP,jao,Dao,Gao,jg,Eae,Oao,Vao,wP,Xao,zao,Wao,Dg,Cae,Qao,Hao,AP,Uao,Jao,Yao,ds,wae,Kao,Zao,yP,eno,ono,LP,rno,tno,ano,cs,Aae,nno,sno,xP,lno,ino,$P,dno,cno,mno,ms,yae,fno,gno,kP,hno,uno,SP,pno,_no,bno,Gg,Lae,vno,Fno,RP,Tno,Mno,Eno,fs,xae,Cno,wno,PP,Ano,yno,BP,Lno,xno,$no,gs,$ae,kno,Sno,IP,Rno,Pno,NP,Bno,Ino,Nno,hs,kae,qno,jno,qP,Dno,Gno,jP,Ono,Vno,Xno,us,Sae,zno,Wno,DP,Qno,Hno,GP,Uno,Jno,Yno,ps,Rae,Kno,Zno,OP,eso,oso,VP,rso,tso,aso,Og,Pae,nso,sso,XP,lso,iso,dso,_s,Bae,cso,mso,zP,fso,gso,WP,hso,uso,pso,Vg,Iae,_so,bso,QP,vso,Fso,Tso,Xg,Nae,Mso,Eso,HP,Cso,wso,Aso,zg,qae,yso,Lso,UP,xso,$so,kso,Wg,jae,Sso,Rso,JP,Pso,Bso,Iso,bs,Dae,Nso,qso,YP,jso,Dso,KP,Gso,Oso,Vso,Qg,Gae,Xso,zso,ZP,Wso,Qso,Hso,vs,Oae,Uso,Jso,eB,Yso,Kso,oB,Zso,elo,olo,Fs,Vae,rlo,tlo,rB,alo,nlo,tB,slo,llo,ilo,Ts,Xae,dlo,clo,aB,mlo,flo,nB,glo,hlo,ulo,Ms,zae,plo,_lo,sB,blo,vlo,lB,Flo,Tlo,Mlo,Es,Wae,Elo,Clo,iB,wlo,Alo,dB,ylo,Llo,xlo,Cs,Qae,$lo,klo,cB,Slo,Rlo,mB,Plo,Blo,Ilo,Hg,Hae,Nlo,qlo,fB,jlo,Dlo,Glo,Ug,Uae,Olo,Vlo,gB,Xlo,zlo,Wlo,ws,Jae,Qlo,Hlo,hB,Ulo,Jlo,uB,Ylo,Klo,Zlo,As,Yae,eio,oio,pB,rio,tio,_B,aio,nio,sio,ys,Kae,lio,iio,bB,dio,cio,vB,mio,fio,gio,Jg,Zae,hio,uio,FB,pio,_io,bio,Yg,ene,vio,Fio,TB,Tio,Mio,Eio,Kg,one,Cio,wio,MB,Aio,yio,Lio,Ls,rne,xio,$io,EB,kio,Sio,CB,Rio,Pio,Bio,Zg,tne,Iio,Nio,wB,qio,jio,Dio,eh,ane,Gio,Oio,AB,Vio,Xio,zio,oh,nne,Wio,Qio,yB,Hio,Uio,Jio,xs,sne,Yio,Kio,LB,Zio,edo,xB,odo,rdo,tdo,rh,lne,ado,ndo,$B,sdo,ldo,ido,th,ine,ddo,cdo,kB,mdo,fdo,gdo,$s,dne,hdo,udo,SB,pdo,_do,RB,bdo,vdo,Fdo,ks,cne,Tdo,Mdo,PB,Edo,Cdo,BB,wdo,Ado,ydo,Ss,mne,Ldo,xdo,IB,$do,kdo,NB,Sdo,Rdo,Pdo,Rs,fne,Bdo,Ido,qB,Ndo,qdo,jB,jdo,Ddo,Gdo,ah,Odo,nh,Xy,Vdo,gne,Xdo,Eqe,Mi,sh,hne,zy,zdo,une,Wdo,Cqe,Ao,Wy,Qdo,Qy,Hdo,DB,Udo,Jdo,Ydo,Hy,Kdo,pne,Zdo,eco,oco,He,Uy,rco,_ne,tco,aco,ya,nco,bne,sco,lco,vne,ico,dco,Fne,cco,mco,fco,Y,lh,Tne,gco,hco,GB,uco,pco,_co,ih,Mne,bco,vco,OB,Fco,Tco,Mco,dh,Ene,Eco,Cco,VB,wco,Aco,yco,ch,Cne,Lco,xco,XB,$co,kco,Sco,mh,wne,Rco,Pco,zB,Bco,Ico,Nco,fh,Ane,qco,jco,WB,Dco,Gco,Oco,gh,yne,Vco,Xco,QB,zco,Wco,Qco,hh,Lne,Hco,Uco,HB,Jco,Yco,Kco,uh,xne,Zco,emo,UB,omo,rmo,tmo,ph,$ne,amo,nmo,JB,smo,lmo,imo,_h,kne,dmo,cmo,YB,mmo,fmo,gmo,bh,Sne,hmo,umo,KB,pmo,_mo,bmo,vh,Rne,vmo,Fmo,ZB,Tmo,Mmo,Emo,Fh,Pne,Cmo,wmo,eI,Amo,ymo,Lmo,Th,Bne,xmo,$mo,oI,kmo,Smo,Rmo,Mh,Ine,Pmo,Bmo,rI,Imo,Nmo,qmo,Eh,Nne,jmo,Dmo,tI,Gmo,Omo,Vmo,Ch,qne,Xmo,zmo,aI,Wmo,Qmo,Hmo,wh,jne,Umo,Jmo,nI,Ymo,Kmo,Zmo,Ah,Dne,efo,ofo,sI,rfo,tfo,afo,yh,Gne,nfo,sfo,lI,lfo,ifo,dfo,Lh,One,cfo,mfo,iI,ffo,gfo,hfo,xh,Vne,ufo,pfo,dI,_fo,bfo,vfo,$h,Xne,Ffo,Tfo,cI,Mfo,Efo,Cfo,kh,zne,wfo,Afo,mI,yfo,Lfo,xfo,Sh,Wne,$fo,kfo,fI,Sfo,Rfo,Pfo,Rh,Qne,Bfo,Ifo,gI,Nfo,qfo,jfo,Ph,Hne,Dfo,Gfo,hI,Ofo,Vfo,Xfo,Bh,Une,zfo,Wfo,uI,Qfo,Hfo,Ufo,Ih,Jfo,Nh,Yfo,qh,Jy,Kfo,Jne,Zfo,wqe,Ei,jh,Yne,Yy,ego,Kne,ogo,Aqe,yo,Ky,rgo,Zy,tgo,pI,ago,ngo,sgo,eL,lgo,Zne,igo,dgo,cgo,Ue,oL,mgo,ese,fgo,ggo,Ci,hgo,ose,ugo,pgo,rse,_go,bgo,vgo,he,Dh,tse,Fgo,Tgo,_I,Mgo,Ego,Cgo,Gh,ase,wgo,Ago,nse,ygo,Lgo,xgo,Oh,sse,$go,kgo,bI,Sgo,Rgo,Pgo,Vh,lse,Bgo,Igo,vI,Ngo,qgo,jgo,Xh,ise,Dgo,Ggo,FI,Ogo,Vgo,Xgo,zh,dse,zgo,Wgo,TI,Qgo,Hgo,Ugo,Wh,cse,Jgo,Ygo,MI,Kgo,Zgo,eho,Qh,mse,oho,rho,EI,tho,aho,nho,Hh,fse,sho,lho,CI,iho,dho,cho,Uh,gse,mho,fho,wI,gho,hho,uho,Jh,hse,pho,_ho,AI,bho,vho,Fho,Yh,use,Tho,Mho,yI,Eho,Cho,who,Kh,pse,Aho,yho,LI,Lho,xho,$ho,Zh,_se,kho,Sho,xI,Rho,Pho,Bho,eu,bse,Iho,Nho,$I,qho,jho,Dho,ou,vse,Gho,Oho,kI,Vho,Xho,zho,ru,Fse,Who,Qho,SI,Hho,Uho,Jho,tu,Yho,au,Kho,nu,rL,Zho,Tse,euo,yqe,wi,su,Mse,tL,ouo,Ese,ruo,Lqe,Lo,aL,tuo,Ai,auo,RI,nuo,suo,PI,luo,iuo,duo,nL,cuo,Cse,muo,fuo,guo,tt,sL,huo,wse,uuo,puo,yi,_uo,Ase,buo,vuo,BI,Fuo,Tuo,Muo,lu,Euo,Je,lL,Cuo,yse,wuo,Auo,La,yuo,Lse,Luo,xuo,xse,$uo,kuo,$se,Suo,Ruo,Puo,x,iu,kse,Buo,Iuo,II,Nuo,quo,juo,du,Sse,Duo,Guo,NI,Ouo,Vuo,Xuo,cu,Rse,zuo,Wuo,qI,Quo,Huo,Uuo,mu,Pse,Juo,Yuo,jI,Kuo,Zuo,epo,fu,Bse,opo,rpo,DI,tpo,apo,npo,gu,Ise,spo,lpo,GI,ipo,dpo,cpo,hu,Nse,mpo,fpo,OI,gpo,hpo,upo,uu,qse,ppo,_po,VI,bpo,vpo,Fpo,pu,jse,Tpo,Mpo,XI,Epo,Cpo,wpo,_u,Dse,Apo,ypo,zI,Lpo,xpo,$po,bu,Gse,kpo,Spo,WI,Rpo,Ppo,Bpo,vu,Ose,Ipo,Npo,QI,qpo,jpo,Dpo,Fu,Vse,Gpo,Opo,HI,Vpo,Xpo,zpo,Tu,Xse,Wpo,Qpo,UI,Hpo,Upo,Jpo,Mu,zse,Ypo,Kpo,JI,Zpo,e_o,o_o,Eu,Wse,r_o,t_o,YI,a_o,n_o,s_o,Cu,Qse,l_o,i_o,KI,d_o,c_o,m_o,wu,Hse,f_o,g_o,ZI,h_o,u_o,p_o,Au,Use,__o,b_o,eN,v_o,F_o,T_o,yu,Jse,M_o,E_o,oN,C_o,w_o,A_o,Lu,Yse,y_o,L_o,rN,x_o,$_o,k_o,xu,Kse,S_o,R_o,tN,P_o,B_o,I_o,$u,Zse,N_o,q_o,aN,j_o,D_o,G_o,ku,ele,O_o,V_o,nN,X_o,z_o,W_o,Su,ole,Q_o,H_o,sN,U_o,J_o,Y_o,Ru,rle,K_o,Z_o,lN,ebo,obo,rbo,Pu,tle,tbo,abo,iN,nbo,sbo,lbo,Bu,ale,ibo,dbo,dN,cbo,mbo,fbo,Iu,nle,gbo,hbo,cN,ubo,pbo,_bo,Nu,sle,bbo,vbo,mN,Fbo,Tbo,Mbo,qu,lle,Ebo,Cbo,fN,wbo,Abo,ybo,ju,ile,Lbo,xbo,gN,$bo,kbo,Sbo,Ps,dle,Rbo,Pbo,hN,Bbo,Ibo,uN,Nbo,qbo,jbo,Du,cle,Dbo,Gbo,pN,Obo,Vbo,Xbo,Gu,mle,zbo,Wbo,_N,Qbo,Hbo,Ubo,Ou,fle,Jbo,Ybo,bN,Kbo,Zbo,e2o,Vu,gle,o2o,r2o,vN,t2o,a2o,n2o,Xu,hle,s2o,l2o,FN,i2o,d2o,c2o,zu,ule,m2o,f2o,TN,g2o,h2o,u2o,Wu,ple,p2o,_2o,MN,b2o,v2o,F2o,Qu,_le,T2o,M2o,EN,E2o,C2o,w2o,Hu,ble,A2o,y2o,CN,L2o,x2o,$2o,Uu,vle,k2o,S2o,wN,R2o,P2o,B2o,Ju,Fle,I2o,N2o,AN,q2o,j2o,D2o,Yu,Tle,G2o,O2o,yN,V2o,X2o,z2o,Ku,Mle,W2o,Q2o,LN,H2o,U2o,J2o,Zu,Ele,Y2o,K2o,xN,Z2o,evo,ovo,ep,Cle,rvo,tvo,$N,avo,nvo,svo,op,wle,lvo,ivo,kN,dvo,cvo,mvo,rp,Ale,fvo,gvo,SN,hvo,uvo,pvo,tp,yle,_vo,bvo,RN,vvo,Fvo,Tvo,ap,Lle,Mvo,Evo,PN,Cvo,wvo,Avo,np,xle,yvo,Lvo,BN,xvo,$vo,kvo,sp,$le,Svo,Rvo,IN,Pvo,Bvo,Ivo,lp,kle,Nvo,qvo,NN,jvo,Dvo,Gvo,ip,Sle,Ovo,Vvo,qN,Xvo,zvo,Wvo,dp,Rle,Qvo,Hvo,jN,Uvo,Jvo,Yvo,cp,Ple,Kvo,Zvo,DN,eFo,oFo,rFo,mp,Ble,tFo,aFo,GN,nFo,sFo,lFo,fp,Ile,iFo,dFo,ON,cFo,mFo,fFo,gp,Nle,gFo,hFo,VN,uFo,pFo,_Fo,hp,qle,bFo,vFo,XN,FFo,TFo,MFo,up,jle,EFo,CFo,zN,wFo,AFo,yFo,pp,Dle,LFo,xFo,WN,$Fo,kFo,SFo,_p,Gle,RFo,PFo,QN,BFo,IFo,NFo,bp,Ole,qFo,jFo,HN,DFo,GFo,OFo,vp,Vle,VFo,XFo,UN,zFo,WFo,QFo,Fp,Xle,HFo,UFo,JN,JFo,YFo,KFo,Tp,zle,ZFo,e1o,YN,o1o,r1o,t1o,Mp,Wle,a1o,n1o,KN,s1o,l1o,i1o,Ep,Qle,d1o,c1o,ZN,m1o,f1o,g1o,Cp,Hle,h1o,u1o,eq,p1o,_1o,b1o,wp,Ule,v1o,F1o,oq,T1o,M1o,E1o,Ap,Jle,C1o,w1o,rq,A1o,y1o,L1o,yp,Yle,x1o,$1o,tq,k1o,S1o,R1o,Lp,Kle,P1o,B1o,aq,I1o,N1o,q1o,xp,Zle,j1o,D1o,nq,G1o,O1o,V1o,$p,eie,X1o,z1o,sq,W1o,Q1o,H1o,kp,oie,U1o,J1o,lq,Y1o,K1o,Z1o,Sp,rie,eTo,oTo,iq,rTo,tTo,aTo,Rp,tie,nTo,sTo,dq,lTo,iTo,dTo,Pp,aie,cTo,mTo,cq,fTo,gTo,hTo,Bp,nie,uTo,pTo,mq,_To,bTo,vTo,Ip,sie,FTo,TTo,fq,MTo,ETo,CTo,Np,lie,wTo,ATo,gq,yTo,LTo,xTo,qp,iie,$To,kTo,hq,STo,RTo,PTo,jp,die,BTo,ITo,uq,NTo,qTo,jTo,Dp,cie,DTo,GTo,pq,OTo,VTo,XTo,Gp,mie,zTo,WTo,_q,QTo,HTo,UTo,Op,fie,JTo,YTo,bq,KTo,ZTo,eMo,Vp,gie,oMo,rMo,vq,tMo,aMo,nMo,Xp,hie,sMo,lMo,Fq,iMo,dMo,cMo,zp,uie,mMo,fMo,Tq,gMo,hMo,uMo,Wp,pie,pMo,_Mo,Mq,bMo,vMo,FMo,Qp,_ie,TMo,MMo,Eq,EMo,CMo,wMo,Hp,bie,AMo,yMo,Cq,LMo,xMo,$Mo,Up,vie,kMo,SMo,wq,RMo,PMo,BMo,Jp,Fie,IMo,NMo,Aq,qMo,jMo,DMo,Yp,Tie,GMo,OMo,yq,VMo,XMo,zMo,Kp,Mie,WMo,QMo,Lq,HMo,UMo,JMo,Zp,Eie,YMo,KMo,xq,ZMo,e4o,o4o,e_,Cie,r4o,t4o,$q,a4o,n4o,s4o,o_,l4o,wie,i4o,d4o,Aie,c4o,m4o,r_,xqe,Li,t_,yie,iL,f4o,Lie,g4o,$qe,xo,dL,h4o,xi,u4o,kq,p4o,_4o,Sq,b4o,v4o,F4o,cL,T4o,xie,M4o,E4o,C4o,at,mL,w4o,$ie,A4o,y4o,$i,L4o,kie,x4o,$4o,Rq,k4o,S4o,R4o,a_,P4o,Ye,fL,B4o,Sie,I4o,N4o,xa,q4o,Rie,j4o,D4o,Pie,G4o,O4o,Bie,V4o,X4o,z4o,G,n_,Iie,W4o,Q4o,Pq,H4o,U4o,J4o,s_,Nie,Y4o,K4o,Bq,Z4o,eEo,oEo,l_,qie,rEo,tEo,Iq,aEo,nEo,sEo,i_,jie,lEo,iEo,Nq,dEo,cEo,mEo,d_,Die,fEo,gEo,qq,hEo,uEo,pEo,c_,Gie,_Eo,bEo,jq,vEo,FEo,TEo,m_,Oie,MEo,EEo,Dq,CEo,wEo,AEo,f_,Vie,yEo,LEo,Gq,xEo,$Eo,kEo,g_,Xie,SEo,REo,Oq,PEo,BEo,IEo,h_,zie,NEo,qEo,Vq,jEo,DEo,GEo,u_,Wie,OEo,VEo,Xq,XEo,zEo,WEo,p_,Qie,QEo,HEo,zq,UEo,JEo,YEo,__,Hie,KEo,ZEo,Wq,eCo,oCo,rCo,b_,Uie,tCo,aCo,Qq,nCo,sCo,lCo,v_,Jie,iCo,dCo,Hq,cCo,mCo,fCo,F_,Yie,gCo,hCo,Uq,uCo,pCo,_Co,T_,Kie,bCo,vCo,Jq,FCo,TCo,MCo,M_,Zie,ECo,CCo,Yq,wCo,ACo,yCo,E_,ede,LCo,xCo,Kq,$Co,kCo,SCo,C_,ode,RCo,PCo,Zq,BCo,ICo,NCo,w_,rde,qCo,jCo,ej,DCo,GCo,OCo,A_,tde,VCo,XCo,oj,zCo,WCo,QCo,y_,ade,HCo,UCo,rj,JCo,YCo,KCo,L_,nde,ZCo,e5o,tj,o5o,r5o,t5o,x_,sde,a5o,n5o,aj,s5o,l5o,i5o,$_,lde,d5o,c5o,nj,m5o,f5o,g5o,k_,ide,h5o,u5o,sj,p5o,_5o,b5o,S_,dde,v5o,F5o,lj,T5o,M5o,E5o,R_,cde,C5o,w5o,ij,A5o,y5o,L5o,P_,mde,x5o,$5o,dj,k5o,S5o,R5o,B_,fde,P5o,B5o,cj,I5o,N5o,q5o,I_,gde,j5o,D5o,mj,G5o,O5o,V5o,N_,hde,X5o,z5o,fj,W5o,Q5o,H5o,q_,ude,U5o,J5o,gj,Y5o,K5o,Z5o,j_,pde,e3o,o3o,hj,r3o,t3o,a3o,D_,_de,n3o,s3o,uj,l3o,i3o,d3o,G_,bde,c3o,m3o,pj,f3o,g3o,h3o,O_,vde,u3o,p3o,_j,_3o,b3o,v3o,V_,Fde,F3o,T3o,bj,M3o,E3o,C3o,X_,Tde,w3o,A3o,vj,y3o,L3o,x3o,z_,Mde,$3o,k3o,Fj,S3o,R3o,P3o,W_,Ede,B3o,I3o,Tj,N3o,q3o,j3o,Q_,D3o,Cde,G3o,O3o,wde,V3o,X3o,H_,kqe,ki,U_,Ade,gL,z3o,yde,W3o,Sqe,$o,hL,Q3o,Si,H3o,Mj,U3o,J3o,Ej,Y3o,K3o,Z3o,uL,ewo,Lde,owo,rwo,two,nt,pL,awo,xde,nwo,swo,Ri,lwo,$de,iwo,dwo,Cj,cwo,mwo,fwo,J_,gwo,Ke,_L,hwo,kde,uwo,pwo,$a,_wo,Sde,bwo,vwo,Rde,Fwo,Two,Pde,Mwo,Ewo,Cwo,z,Y_,Bde,wwo,Awo,wj,ywo,Lwo,xwo,K_,Ide,$wo,kwo,Aj,Swo,Rwo,Pwo,Z_,Nde,Bwo,Iwo,yj,Nwo,qwo,jwo,eb,qde,Dwo,Gwo,Lj,Owo,Vwo,Xwo,ob,jde,zwo,Wwo,xj,Qwo,Hwo,Uwo,rb,Dde,Jwo,Ywo,$j,Kwo,Zwo,e0o,tb,Gde,o0o,r0o,kj,t0o,a0o,n0o,ab,Ode,s0o,l0o,Sj,i0o,d0o,c0o,nb,Vde,m0o,f0o,Rj,g0o,h0o,u0o,sb,Xde,p0o,_0o,Pj,b0o,v0o,F0o,lb,zde,T0o,M0o,Bj,E0o,C0o,w0o,ib,Wde,A0o,y0o,Ij,L0o,x0o,$0o,db,Qde,k0o,S0o,Nj,R0o,P0o,B0o,cb,Hde,I0o,N0o,qj,q0o,j0o,D0o,mb,Ude,G0o,O0o,jj,V0o,X0o,z0o,fb,Jde,W0o,Q0o,Dj,H0o,U0o,J0o,gb,Yde,Y0o,K0o,Gj,Z0o,e6o,o6o,hb,Kde,r6o,t6o,Oj,a6o,n6o,s6o,ub,Zde,l6o,i6o,Vj,d6o,c6o,m6o,pb,ece,f6o,g6o,Xj,h6o,u6o,p6o,_b,oce,_6o,b6o,zj,v6o,F6o,T6o,bb,rce,M6o,E6o,Wj,C6o,w6o,A6o,vb,tce,y6o,L6o,Qj,x6o,$6o,k6o,Fb,ace,S6o,R6o,Hj,P6o,B6o,I6o,Tb,nce,N6o,q6o,Uj,j6o,D6o,G6o,Mb,sce,O6o,V6o,Jj,X6o,z6o,W6o,Eb,lce,Q6o,H6o,Yj,U6o,J6o,Y6o,Cb,ice,K6o,Z6o,Kj,eAo,oAo,rAo,wb,dce,tAo,aAo,Zj,nAo,sAo,lAo,Ab,cce,iAo,dAo,eD,cAo,mAo,fAo,yb,mce,gAo,hAo,oD,uAo,pAo,_Ao,Lb,fce,bAo,vAo,rD,FAo,TAo,MAo,xb,gce,EAo,CAo,tD,wAo,AAo,yAo,$b,hce,LAo,xAo,aD,$Ao,kAo,SAo,kb,uce,RAo,PAo,nD,BAo,IAo,NAo,Sb,pce,qAo,jAo,sD,DAo,GAo,OAo,Rb,_ce,VAo,XAo,lD,zAo,WAo,QAo,Pb,HAo,bce,UAo,JAo,vce,YAo,KAo,Bb,Rqe,Pi,Ib,Fce,bL,ZAo,Tce,eyo,Pqe,ko,vL,oyo,Bi,ryo,iD,tyo,ayo,dD,nyo,syo,lyo,FL,iyo,Mce,dyo,cyo,myo,st,TL,fyo,Ece,gyo,hyo,Ii,uyo,Cce,pyo,_yo,cD,byo,vyo,Fyo,Nb,Tyo,Ze,ML,Myo,wce,Eyo,Cyo,ka,wyo,Ace,Ayo,yyo,yce,Lyo,xyo,Lce,$yo,kyo,Syo,Q,qb,xce,Ryo,Pyo,mD,Byo,Iyo,Nyo,jb,$ce,qyo,jyo,fD,Dyo,Gyo,Oyo,Db,kce,Vyo,Xyo,gD,zyo,Wyo,Qyo,Gb,Sce,Hyo,Uyo,hD,Jyo,Yyo,Kyo,Ob,Rce,Zyo,eLo,uD,oLo,rLo,tLo,Vb,Pce,aLo,nLo,pD,sLo,lLo,iLo,Xb,Bce,dLo,cLo,_D,mLo,fLo,gLo,zb,Ice,hLo,uLo,bD,pLo,_Lo,bLo,Wb,Nce,vLo,FLo,vD,TLo,MLo,ELo,Qb,qce,CLo,wLo,FD,ALo,yLo,LLo,Hb,jce,xLo,$Lo,TD,kLo,SLo,RLo,Ub,Dce,PLo,BLo,MD,ILo,NLo,qLo,Jb,Gce,jLo,DLo,ED,GLo,OLo,VLo,Yb,Oce,XLo,zLo,CD,WLo,QLo,HLo,Kb,Vce,ULo,JLo,wD,YLo,KLo,ZLo,Zb,Xce,e8o,o8o,AD,r8o,t8o,a8o,e2,zce,n8o,s8o,yD,l8o,i8o,d8o,o2,Wce,c8o,m8o,LD,f8o,g8o,h8o,r2,Qce,u8o,p8o,xD,_8o,b8o,v8o,t2,Hce,F8o,T8o,$D,M8o,E8o,C8o,a2,Uce,w8o,A8o,kD,y8o,L8o,x8o,n2,Jce,$8o,k8o,SD,S8o,R8o,P8o,s2,Yce,B8o,I8o,RD,N8o,q8o,j8o,l2,Kce,D8o,G8o,PD,O8o,V8o,X8o,i2,Zce,z8o,W8o,BD,Q8o,H8o,U8o,d2,eme,J8o,Y8o,ID,K8o,Z8o,e7o,c2,ome,o7o,r7o,ND,t7o,a7o,n7o,m2,rme,s7o,l7o,qD,i7o,d7o,c7o,f2,tme,m7o,f7o,jD,g7o,h7o,u7o,g2,ame,p7o,_7o,DD,b7o,v7o,F7o,h2,nme,T7o,M7o,sme,E7o,C7o,w7o,u2,lme,A7o,y7o,GD,L7o,x7o,$7o,p2,ime,k7o,S7o,OD,R7o,P7o,B7o,_2,dme,I7o,N7o,VD,q7o,j7o,D7o,b2,cme,G7o,O7o,XD,V7o,X7o,z7o,v2,W7o,mme,Q7o,H7o,fme,U7o,J7o,F2,Bqe,Ni,T2,gme,EL,Y7o,hme,K7o,Iqe,So,CL,Z7o,qi,e9o,zD,o9o,r9o,WD,t9o,a9o,n9o,wL,s9o,ume,l9o,i9o,d9o,lt,AL,c9o,pme,m9o,f9o,ji,g9o,_me,h9o,u9o,QD,p9o,_9o,b9o,M2,v9o,eo,yL,F9o,bme,T9o,M9o,Sa,E9o,vme,C9o,w9o,Fme,A9o,y9o,Tme,L9o,x9o,$9o,pe,E2,Mme,k9o,S9o,HD,R9o,P9o,B9o,C2,Eme,I9o,N9o,UD,q9o,j9o,D9o,w2,Cme,G9o,O9o,JD,V9o,X9o,z9o,A2,wme,W9o,Q9o,YD,H9o,U9o,J9o,y2,Ame,Y9o,K9o,KD,Z9o,exo,oxo,L2,yme,rxo,txo,ZD,axo,nxo,sxo,x2,Lme,lxo,ixo,eG,dxo,cxo,mxo,$2,xme,fxo,gxo,oG,hxo,uxo,pxo,k2,$me,_xo,bxo,rG,vxo,Fxo,Txo,S2,kme,Mxo,Exo,tG,Cxo,wxo,Axo,R2,Sme,yxo,Lxo,aG,xxo,$xo,kxo,P2,Rme,Sxo,Rxo,nG,Pxo,Bxo,Ixo,B2,Pme,Nxo,qxo,sG,jxo,Dxo,Gxo,I2,Bme,Oxo,Vxo,lG,Xxo,zxo,Wxo,N2,Ime,Qxo,Hxo,iG,Uxo,Jxo,Yxo,q2,Nme,Kxo,Zxo,dG,e$o,o$o,r$o,j2,t$o,qme,a$o,n$o,jme,s$o,l$o,D2,Nqe,Di,G2,Dme,LL,i$o,Gme,d$o,qqe,Ro,xL,c$o,Gi,m$o,cG,f$o,g$o,mG,h$o,u$o,p$o,$L,_$o,Ome,b$o,v$o,F$o,it,kL,T$o,Vme,M$o,E$o,Oi,C$o,Xme,w$o,A$o,fG,y$o,L$o,x$o,O2,$$o,oo,SL,k$o,zme,S$o,R$o,Ra,P$o,Wme,B$o,I$o,Qme,N$o,q$o,Hme,j$o,D$o,G$o,N,V2,Ume,O$o,V$o,gG,X$o,z$o,W$o,X2,Jme,Q$o,H$o,hG,U$o,J$o,Y$o,z2,Yme,K$o,Z$o,uG,eko,oko,rko,W2,Kme,tko,ako,pG,nko,sko,lko,Q2,Zme,iko,dko,_G,cko,mko,fko,H2,efe,gko,hko,bG,uko,pko,_ko,U2,ofe,bko,vko,vG,Fko,Tko,Mko,J2,rfe,Eko,Cko,FG,wko,Ako,yko,Y2,tfe,Lko,xko,TG,$ko,kko,Sko,K2,afe,Rko,Pko,MG,Bko,Iko,Nko,Z2,nfe,qko,jko,EG,Dko,Gko,Oko,ev,sfe,Vko,Xko,CG,zko,Wko,Qko,ov,lfe,Hko,Uko,wG,Jko,Yko,Kko,rv,ife,Zko,eSo,AG,oSo,rSo,tSo,tv,dfe,aSo,nSo,yG,sSo,lSo,iSo,av,cfe,dSo,cSo,LG,mSo,fSo,gSo,nv,mfe,hSo,uSo,xG,pSo,_So,bSo,sv,ffe,vSo,FSo,$G,TSo,MSo,ESo,lv,gfe,CSo,wSo,kG,ASo,ySo,LSo,iv,hfe,xSo,$So,SG,kSo,SSo,RSo,dv,ufe,PSo,BSo,RG,ISo,NSo,qSo,cv,pfe,jSo,DSo,PG,GSo,OSo,VSo,mv,_fe,XSo,zSo,BG,WSo,QSo,HSo,fv,bfe,USo,JSo,IG,YSo,KSo,ZSo,gv,vfe,eRo,oRo,NG,rRo,tRo,aRo,hv,Ffe,nRo,sRo,qG,lRo,iRo,dRo,uv,Tfe,cRo,mRo,jG,fRo,gRo,hRo,pv,Mfe,uRo,pRo,DG,_Ro,bRo,vRo,_v,Efe,FRo,TRo,GG,MRo,ERo,CRo,bv,Cfe,wRo,ARo,OG,yRo,LRo,xRo,vv,wfe,$Ro,kRo,VG,SRo,RRo,PRo,Fv,Afe,BRo,IRo,XG,NRo,qRo,jRo,Tv,yfe,DRo,GRo,zG,ORo,VRo,XRo,Mv,Lfe,zRo,WRo,WG,QRo,HRo,URo,Ev,xfe,JRo,YRo,QG,KRo,ZRo,ePo,Cv,$fe,oPo,rPo,HG,tPo,aPo,nPo,wv,kfe,sPo,lPo,UG,iPo,dPo,cPo,Av,Sfe,mPo,fPo,JG,gPo,hPo,uPo,yv,Rfe,pPo,_Po,YG,bPo,vPo,FPo,Lv,Pfe,TPo,MPo,KG,EPo,CPo,wPo,xv,Bfe,APo,yPo,ZG,LPo,xPo,$Po,$v,Ife,kPo,SPo,eO,RPo,PPo,BPo,kv,Nfe,IPo,NPo,oO,qPo,jPo,DPo,Sv,qfe,GPo,OPo,rO,VPo,XPo,zPo,Rv,jfe,WPo,QPo,tO,HPo,UPo,JPo,Pv,Dfe,YPo,KPo,aO,ZPo,eBo,oBo,Bv,Gfe,rBo,tBo,nO,aBo,nBo,sBo,Iv,lBo,Ofe,iBo,dBo,Vfe,cBo,mBo,Nv,jqe,Vi,qv,Xfe,RL,fBo,zfe,gBo,Dqe,Po,PL,hBo,Xi,uBo,sO,pBo,_Bo,lO,bBo,vBo,FBo,BL,TBo,Wfe,MBo,EBo,CBo,dt,IL,wBo,Qfe,ABo,yBo,zi,LBo,Hfe,xBo,$Bo,iO,kBo,SBo,RBo,jv,PBo,ro,NL,BBo,Ufe,IBo,NBo,Pa,qBo,Jfe,jBo,DBo,Yfe,GBo,OBo,Kfe,VBo,XBo,zBo,K,Dv,Zfe,WBo,QBo,dO,HBo,UBo,JBo,Gv,ege,YBo,KBo,cO,ZBo,eIo,oIo,Ov,oge,rIo,tIo,mO,aIo,nIo,sIo,Vv,rge,lIo,iIo,fO,dIo,cIo,mIo,Xv,tge,fIo,gIo,gO,hIo,uIo,pIo,zv,age,_Io,bIo,hO,vIo,FIo,TIo,Wv,nge,MIo,EIo,uO,CIo,wIo,AIo,Qv,sge,yIo,LIo,pO,xIo,$Io,kIo,Hv,lge,SIo,RIo,_O,PIo,BIo,IIo,Uv,ige,NIo,qIo,bO,jIo,DIo,GIo,Jv,dge,OIo,VIo,vO,XIo,zIo,WIo,Yv,cge,QIo,HIo,FO,UIo,JIo,YIo,Kv,mge,KIo,ZIo,TO,eNo,oNo,rNo,Zv,fge,tNo,aNo,MO,nNo,sNo,lNo,eF,gge,iNo,dNo,EO,cNo,mNo,fNo,oF,hge,gNo,hNo,CO,uNo,pNo,_No,rF,uge,bNo,vNo,wO,FNo,TNo,MNo,tF,pge,ENo,CNo,AO,wNo,ANo,yNo,aF,_ge,LNo,xNo,yO,$No,kNo,SNo,nF,bge,RNo,PNo,LO,BNo,INo,NNo,sF,vge,qNo,jNo,xO,DNo,GNo,ONo,lF,Fge,VNo,XNo,$O,zNo,WNo,QNo,iF,Tge,HNo,UNo,kO,JNo,YNo,KNo,dF,Mge,ZNo,eqo,SO,oqo,rqo,tqo,cF,Ege,aqo,nqo,RO,sqo,lqo,iqo,mF,Cge,dqo,cqo,PO,mqo,fqo,gqo,fF,wge,hqo,uqo,BO,pqo,_qo,bqo,gF,Age,vqo,Fqo,IO,Tqo,Mqo,Eqo,hF,yge,Cqo,wqo,NO,Aqo,yqo,Lqo,uF,xqo,Lge,$qo,kqo,xge,Sqo,Rqo,pF,Gqe,Wi,_F,$ge,qL,Pqo,kge,Bqo,Oqe,Bo,jL,Iqo,Qi,Nqo,qO,qqo,jqo,jO,Dqo,Gqo,Oqo,DL,Vqo,Sge,Xqo,zqo,Wqo,ct,GL,Qqo,Rge,Hqo,Uqo,Hi,Jqo,Pge,Yqo,Kqo,DO,Zqo,ejo,ojo,bF,rjo,to,OL,tjo,Bge,ajo,njo,Ba,sjo,Ige,ljo,ijo,Nge,djo,cjo,qge,mjo,fjo,gjo,Yr,vF,jge,hjo,ujo,GO,pjo,_jo,bjo,FF,Dge,vjo,Fjo,OO,Tjo,Mjo,Ejo,TF,Gge,Cjo,wjo,VO,Ajo,yjo,Ljo,MF,Oge,xjo,$jo,XO,kjo,Sjo,Rjo,EF,Vge,Pjo,Bjo,zO,Ijo,Njo,qjo,CF,jjo,Xge,Djo,Gjo,zge,Ojo,Vjo,wF,Vqe,Ui,AF,Wge,VL,Xjo,Qge,zjo,Xqe,Io,XL,Wjo,Ji,Qjo,WO,Hjo,Ujo,QO,Jjo,Yjo,Kjo,zL,Zjo,Hge,eDo,oDo,rDo,mt,WL,tDo,Uge,aDo,nDo,Yi,sDo,Jge,lDo,iDo,HO,dDo,cDo,mDo,yF,fDo,ao,QL,gDo,Yge,hDo,uDo,Ia,pDo,Kge,_Do,bDo,Zge,vDo,FDo,ehe,TDo,MDo,EDo,H,LF,ohe,CDo,wDo,UO,ADo,yDo,LDo,xF,rhe,xDo,$Do,JO,kDo,SDo,RDo,$F,the,PDo,BDo,YO,IDo,NDo,qDo,kF,ahe,jDo,DDo,KO,GDo,ODo,VDo,SF,nhe,XDo,zDo,ZO,WDo,QDo,HDo,RF,she,UDo,JDo,eV,YDo,KDo,ZDo,PF,lhe,eGo,oGo,oV,rGo,tGo,aGo,BF,ihe,nGo,sGo,rV,lGo,iGo,dGo,IF,dhe,cGo,mGo,tV,fGo,gGo,hGo,NF,che,uGo,pGo,aV,_Go,bGo,vGo,qF,mhe,FGo,TGo,nV,MGo,EGo,CGo,jF,fhe,wGo,AGo,sV,yGo,LGo,xGo,DF,ghe,$Go,kGo,lV,SGo,RGo,PGo,GF,hhe,BGo,IGo,iV,NGo,qGo,jGo,OF,uhe,DGo,GGo,dV,OGo,VGo,XGo,VF,phe,zGo,WGo,cV,QGo,HGo,UGo,XF,_he,JGo,YGo,mV,KGo,ZGo,eOo,zF,bhe,oOo,rOo,fV,tOo,aOo,nOo,WF,vhe,sOo,lOo,gV,iOo,dOo,cOo,QF,Fhe,mOo,fOo,hV,gOo,hOo,uOo,HF,The,pOo,_Oo,uV,bOo,vOo,FOo,UF,Mhe,TOo,MOo,pV,EOo,COo,wOo,JF,Ehe,AOo,yOo,_V,LOo,xOo,$Oo,YF,Che,kOo,SOo,bV,ROo,POo,BOo,KF,whe,IOo,NOo,vV,qOo,jOo,DOo,ZF,Ahe,GOo,OOo,FV,VOo,XOo,zOo,e1,yhe,WOo,QOo,TV,HOo,UOo,JOo,o1,Lhe,YOo,KOo,MV,ZOo,eVo,oVo,r1,xhe,rVo,tVo,EV,aVo,nVo,sVo,t1,$he,lVo,iVo,CV,dVo,cVo,mVo,a1,khe,fVo,gVo,wV,hVo,uVo,pVo,n1,She,_Vo,bVo,AV,vVo,FVo,TVo,s1,Rhe,MVo,EVo,yV,CVo,wVo,AVo,l1,Phe,yVo,LVo,LV,xVo,$Vo,kVo,i1,SVo,Bhe,RVo,PVo,Ihe,BVo,IVo,d1,zqe,Ki,c1,Nhe,HL,NVo,qhe,qVo,Wqe,No,UL,jVo,Zi,DVo,xV,GVo,OVo,$V,VVo,XVo,zVo,JL,WVo,jhe,QVo,HVo,UVo,ft,YL,JVo,Dhe,YVo,KVo,ed,ZVo,Ghe,eXo,oXo,kV,rXo,tXo,aXo,m1,nXo,no,KL,sXo,Ohe,lXo,iXo,Na,dXo,Vhe,cXo,mXo,Xhe,fXo,gXo,zhe,hXo,uXo,pXo,V,f1,Whe,_Xo,bXo,SV,vXo,FXo,TXo,g1,Qhe,MXo,EXo,RV,CXo,wXo,AXo,h1,Hhe,yXo,LXo,PV,xXo,$Xo,kXo,u1,Uhe,SXo,RXo,BV,PXo,BXo,IXo,p1,Jhe,NXo,qXo,IV,jXo,DXo,GXo,_1,Yhe,OXo,VXo,NV,XXo,zXo,WXo,b1,Khe,QXo,HXo,qV,UXo,JXo,YXo,v1,Zhe,KXo,ZXo,jV,ezo,ozo,rzo,F1,eue,tzo,azo,DV,nzo,szo,lzo,T1,oue,izo,dzo,GV,czo,mzo,fzo,M1,rue,gzo,hzo,OV,uzo,pzo,_zo,E1,tue,bzo,vzo,VV,Fzo,Tzo,Mzo,C1,aue,Ezo,Czo,XV,wzo,Azo,yzo,w1,nue,Lzo,xzo,zV,$zo,kzo,Szo,A1,sue,Rzo,Pzo,WV,Bzo,Izo,Nzo,y1,lue,qzo,jzo,QV,Dzo,Gzo,Ozo,L1,iue,Vzo,Xzo,HV,zzo,Wzo,Qzo,x1,due,Hzo,Uzo,UV,Jzo,Yzo,Kzo,$1,cue,Zzo,eWo,JV,oWo,rWo,tWo,k1,mue,aWo,nWo,YV,sWo,lWo,iWo,S1,fue,dWo,cWo,KV,mWo,fWo,gWo,R1,gue,hWo,uWo,ZV,pWo,_Wo,bWo,P1,hue,vWo,FWo,eX,TWo,MWo,EWo,B1,uue,CWo,wWo,oX,AWo,yWo,LWo,I1,pue,xWo,$Wo,rX,kWo,SWo,RWo,N1,_ue,PWo,BWo,tX,IWo,NWo,qWo,q1,bue,jWo,DWo,aX,GWo,OWo,VWo,j1,vue,XWo,zWo,nX,WWo,QWo,HWo,D1,Fue,UWo,JWo,sX,YWo,KWo,ZWo,G1,Tue,eQo,oQo,lX,rQo,tQo,aQo,O1,Mue,nQo,sQo,iX,lQo,iQo,dQo,V1,Eue,cQo,mQo,dX,fQo,gQo,hQo,X1,Cue,uQo,pQo,cX,_Qo,bQo,vQo,z1,wue,FQo,TQo,mX,MQo,EQo,CQo,W1,Aue,wQo,AQo,fX,yQo,LQo,xQo,Q1,yue,$Qo,kQo,gX,SQo,RQo,PQo,H1,Lue,BQo,IQo,hX,NQo,qQo,jQo,U1,xue,DQo,GQo,uX,OQo,VQo,XQo,J1,$ue,zQo,WQo,pX,QQo,HQo,UQo,Y1,kue,JQo,YQo,_X,KQo,ZQo,eHo,K1,oHo,Sue,rHo,tHo,Rue,aHo,nHo,Z1,Qqe,od,eT,Pue,ZL,sHo,Bue,lHo,Hqe,qo,e8,iHo,rd,dHo,bX,cHo,mHo,vX,fHo,gHo,hHo,o8,uHo,Iue,pHo,_Ho,bHo,gt,r8,vHo,Nue,FHo,THo,td,MHo,que,EHo,CHo,FX,wHo,AHo,yHo,oT,LHo,so,t8,xHo,jue,$Ho,kHo,qa,SHo,Due,RHo,PHo,Gue,BHo,IHo,Oue,NHo,qHo,jHo,Vue,rT,Xue,DHo,GHo,TX,OHo,VHo,XHo,tT,zHo,zue,WHo,QHo,Wue,HHo,UHo,aT,Uqe,ad,nT,Que,a8,JHo,Hue,YHo,Jqe,jo,n8,KHo,nd,ZHo,MX,eUo,oUo,EX,rUo,tUo,aUo,s8,nUo,Uue,sUo,lUo,iUo,ht,l8,dUo,Jue,cUo,mUo,sd,fUo,Yue,gUo,hUo,CX,uUo,pUo,_Uo,sT,bUo,lo,i8,vUo,Kue,FUo,TUo,ja,MUo,Zue,EUo,CUo,epe,wUo,AUo,ope,yUo,LUo,xUo,Fe,lT,rpe,$Uo,kUo,wX,SUo,RUo,PUo,iT,tpe,BUo,IUo,AX,NUo,qUo,jUo,dT,ape,DUo,GUo,yX,OUo,VUo,XUo,cT,npe,zUo,WUo,LX,QUo,HUo,UUo,Bs,spe,JUo,YUo,xX,KUo,ZUo,$X,eJo,oJo,rJo,mT,lpe,tJo,aJo,kX,nJo,sJo,lJo,ut,ipe,iJo,dJo,SX,cJo,mJo,RX,fJo,gJo,PX,hJo,uJo,pJo,fT,dpe,_Jo,bJo,BX,vJo,FJo,TJo,gT,cpe,MJo,EJo,IX,CJo,wJo,AJo,hT,mpe,yJo,LJo,NX,xJo,$Jo,kJo,uT,fpe,SJo,RJo,qX,PJo,BJo,IJo,pT,gpe,NJo,qJo,jX,jJo,DJo,GJo,_T,hpe,OJo,VJo,DX,XJo,zJo,WJo,bT,upe,QJo,HJo,GX,UJo,JJo,YJo,vT,KJo,ppe,ZJo,eYo,_pe,oYo,rYo,FT,Yqe,ld,TT,bpe,d8,tYo,vpe,aYo,Kqe,Do,c8,nYo,id,sYo,OX,lYo,iYo,VX,dYo,cYo,mYo,m8,fYo,Fpe,gYo,hYo,uYo,pt,f8,pYo,Tpe,_Yo,bYo,dd,vYo,Mpe,FYo,TYo,XX,MYo,EYo,CYo,MT,wYo,io,g8,AYo,Epe,yYo,LYo,Da,xYo,Cpe,$Yo,kYo,wpe,SYo,RYo,Ape,PYo,BYo,IYo,ype,ET,Lpe,NYo,qYo,zX,jYo,DYo,GYo,CT,OYo,xpe,VYo,XYo,$pe,zYo,WYo,wT,Zqe,cd,AT,kpe,h8,QYo,Spe,HYo,eje,Go,u8,UYo,md,JYo,WX,YYo,KYo,QX,ZYo,eKo,oKo,p8,rKo,Rpe,tKo,aKo,nKo,_t,_8,sKo,Ppe,lKo,iKo,fd,dKo,Bpe,cKo,mKo,HX,fKo,gKo,hKo,yT,uKo,co,b8,pKo,Ipe,_Ko,bKo,Ga,vKo,Npe,FKo,TKo,qpe,MKo,EKo,jpe,CKo,wKo,AKo,Se,LT,Dpe,yKo,LKo,UX,xKo,$Ko,kKo,xT,Gpe,SKo,RKo,JX,PKo,BKo,IKo,$T,Ope,NKo,qKo,YX,jKo,DKo,GKo,kT,Vpe,OKo,VKo,KX,XKo,zKo,WKo,ST,Xpe,QKo,HKo,ZX,UKo,JKo,YKo,RT,zpe,KKo,ZKo,ez,eZo,oZo,rZo,PT,Wpe,tZo,aZo,oz,nZo,sZo,lZo,BT,Qpe,iZo,dZo,rz,cZo,mZo,fZo,IT,Hpe,gZo,hZo,tz,uZo,pZo,_Zo,NT,bZo,Upe,vZo,FZo,Jpe,TZo,MZo,qT,oje,gd,jT,Ype,v8,EZo,Kpe,CZo,rje,Oo,F8,wZo,hd,AZo,az,yZo,LZo,nz,xZo,$Zo,kZo,T8,SZo,Zpe,RZo,PZo,BZo,bt,M8,IZo,e_e,NZo,qZo,ud,jZo,o_e,DZo,GZo,sz,OZo,VZo,XZo,DT,zZo,mo,E8,WZo,r_e,QZo,HZo,Oa,UZo,t_e,JZo,YZo,a_e,KZo,ZZo,n_e,eer,oer,rer,Kr,GT,s_e,ter,aer,lz,ner,ser,ler,OT,l_e,ier,der,iz,cer,mer,fer,VT,i_e,ger,her,dz,uer,per,_er,XT,d_e,ber,ver,cz,Fer,Ter,Mer,zT,c_e,Eer,Cer,mz,wer,Aer,yer,WT,Ler,m_e,xer,$er,f_e,ker,Ser,QT,tje,pd,HT,g_e,C8,Rer,h_e,Per,aje,Vo,w8,Ber,_d,Ier,fz,Ner,qer,gz,jer,Der,Ger,A8,Oer,u_e,Ver,Xer,zer,vt,y8,Wer,p_e,Qer,Her,bd,Uer,__e,Jer,Yer,hz,Ker,Zer,eor,UT,oor,fo,L8,ror,b_e,tor,aor,Va,nor,v_e,sor,lor,F_e,ior,dor,T_e,cor,mor,gor,Re,JT,M_e,hor,uor,uz,por,_or,bor,YT,E_e,vor,For,pz,Tor,Mor,Eor,KT,C_e,Cor,wor,_z,Aor,yor,Lor,ZT,w_e,xor,$or,bz,kor,Sor,Ror,eM,A_e,Por,Bor,vz,Ior,Nor,qor,oM,y_e,jor,Dor,Fz,Gor,Oor,Vor,rM,L_e,Xor,zor,Tz,Wor,Qor,Hor,tM,x_e,Uor,Jor,Mz,Yor,Kor,Zor,aM,$_e,err,orr,Ez,rrr,trr,arr,nM,nrr,k_e,srr,lrr,S_e,irr,drr,sM,nje,vd,lM,R_e,x8,crr,P_e,mrr,sje,Xo,$8,frr,Fd,grr,Cz,hrr,urr,wz,prr,_rr,brr,k8,vrr,B_e,Frr,Trr,Mrr,Ft,S8,Err,I_e,Crr,wrr,Td,Arr,N_e,yrr,Lrr,Az,xrr,$rr,krr,iM,Srr,go,R8,Rrr,q_e,Prr,Brr,Xa,Irr,j_e,Nrr,qrr,D_e,jrr,Drr,G_e,Grr,Orr,Vrr,P8,dM,O_e,Xrr,zrr,yz,Wrr,Qrr,Hrr,cM,V_e,Urr,Jrr,Lz,Yrr,Krr,Zrr,mM,etr,X_e,otr,rtr,z_e,ttr,atr,fM,lje,Md,gM,W_e,B8,ntr,Q_e,str,ije,zo,I8,ltr,Ed,itr,xz,dtr,ctr,$z,mtr,ftr,gtr,N8,htr,H_e,utr,ptr,_tr,Tt,q8,btr,U_e,vtr,Ftr,Cd,Ttr,J_e,Mtr,Etr,kz,Ctr,wtr,Atr,hM,ytr,ho,j8,Ltr,Y_e,xtr,$tr,za,ktr,K_e,Str,Rtr,Z_e,Ptr,Btr,ebe,Itr,Ntr,qtr,Zr,uM,obe,jtr,Dtr,Sz,Gtr,Otr,Vtr,pM,rbe,Xtr,ztr,Rz,Wtr,Qtr,Htr,_M,tbe,Utr,Jtr,Pz,Ytr,Ktr,Ztr,bM,abe,ear,oar,Bz,rar,tar,aar,vM,nbe,nar,sar,Iz,lar,iar,dar,FM,car,sbe,mar,far,lbe,gar,har,TM,dje,wd,MM,ibe,D8,uar,dbe,par,cje,Wo,G8,_ar,Ad,bar,Nz,Far,Tar,qz,Mar,Ear,Car,O8,war,cbe,Aar,yar,Lar,Mt,V8,xar,mbe,$ar,kar,yd,Sar,fbe,Rar,Par,jz,Bar,Iar,Nar,EM,qar,uo,X8,jar,gbe,Dar,Gar,Wa,Oar,hbe,Var,Xar,ube,zar,War,pbe,Qar,Har,Uar,Ld,CM,_be,Jar,Yar,Dz,Kar,Zar,enr,wM,bbe,onr,rnr,Gz,tnr,anr,nnr,AM,vbe,snr,lnr,Oz,inr,dnr,cnr,yM,mnr,Fbe,fnr,gnr,Tbe,hnr,unr,LM,mje,xd,xM,Mbe,z8,pnr,Ebe,_nr,fje,Qo,W8,bnr,$d,vnr,Vz,Fnr,Tnr,Xz,Mnr,Enr,Cnr,Q8,wnr,Cbe,Anr,ynr,Lnr,Et,H8,xnr,wbe,$nr,knr,kd,Snr,Abe,Rnr,Pnr,zz,Bnr,Inr,Nnr,$M,qnr,po,U8,jnr,ybe,Dnr,Gnr,Qa,Onr,Lbe,Vnr,Xnr,xbe,znr,Wnr,$be,Qnr,Hnr,Unr,J8,kM,kbe,Jnr,Ynr,Wz,Knr,Znr,esr,SM,Sbe,osr,rsr,Qz,tsr,asr,nsr,RM,ssr,Rbe,lsr,isr,Pbe,dsr,csr,PM,gje,Sd,BM,Bbe,Y8,msr,Ibe,fsr,hje,Ho,K8,gsr,Rd,hsr,Hz,usr,psr,Uz,_sr,bsr,vsr,Z8,Fsr,Nbe,Tsr,Msr,Esr,Ct,e7,Csr,qbe,wsr,Asr,Pd,ysr,jbe,Lsr,xsr,Jz,$sr,ksr,Ssr,IM,Rsr,_o,o7,Psr,Dbe,Bsr,Isr,Ha,Nsr,Gbe,qsr,jsr,Obe,Dsr,Gsr,Vbe,Osr,Vsr,Xsr,Xbe,NM,zbe,zsr,Wsr,Yz,Qsr,Hsr,Usr,qM,Jsr,Wbe,Ysr,Ksr,Qbe,Zsr,elr,jM,uje,Bd,DM,Hbe,r7,olr,Ube,rlr,pje,Uo,t7,tlr,Id,alr,Kz,nlr,slr,Zz,llr,ilr,dlr,a7,clr,Jbe,mlr,flr,glr,wt,n7,hlr,Ybe,ulr,plr,Nd,_lr,Kbe,blr,vlr,eW,Flr,Tlr,Mlr,GM,Elr,bo,s7,Clr,Zbe,wlr,Alr,Ua,ylr,e2e,Llr,xlr,o2e,$lr,klr,r2e,Slr,Rlr,Plr,Ja,OM,t2e,Blr,Ilr,oW,Nlr,qlr,jlr,VM,a2e,Dlr,Glr,rW,Olr,Vlr,Xlr,XM,n2e,zlr,Wlr,tW,Qlr,Hlr,Ulr,zM,s2e,Jlr,Ylr,aW,Klr,Zlr,eir,WM,oir,l2e,rir,tir,i2e,air,nir,QM,_je,qd,HM,d2e,l7,sir,c2e,lir,bje,Jo,i7,iir,jd,dir,nW,cir,mir,sW,fir,gir,hir,d7,uir,m2e,pir,_ir,bir,At,c7,vir,f2e,Fir,Tir,Dd,Mir,g2e,Eir,Cir,lW,wir,Air,yir,UM,Lir,vo,m7,xir,h2e,$ir,kir,Ya,Sir,u2e,Rir,Pir,p2e,Bir,Iir,_2e,Nir,qir,jir,b2e,JM,v2e,Dir,Gir,iW,Oir,Vir,Xir,YM,zir,F2e,Wir,Qir,T2e,Hir,Uir,KM,vje,Gd,ZM,M2e,f7,Jir,E2e,Yir,Fje,Yo,g7,Kir,Od,Zir,dW,edr,odr,cW,rdr,tdr,adr,h7,ndr,C2e,sdr,ldr,idr,yt,u7,ddr,w2e,cdr,mdr,Vd,fdr,A2e,gdr,hdr,mW,udr,pdr,_dr,e4,bdr,wr,p7,vdr,y2e,Fdr,Tdr,Ka,Mdr,L2e,Edr,Cdr,x2e,wdr,Adr,$2e,ydr,Ldr,xdr,q,o4,k2e,$dr,kdr,fW,Sdr,Rdr,Pdr,r4,S2e,Bdr,Idr,gW,Ndr,qdr,jdr,t4,R2e,Ddr,Gdr,hW,Odr,Vdr,Xdr,a4,P2e,zdr,Wdr,uW,Qdr,Hdr,Udr,n4,B2e,Jdr,Ydr,pW,Kdr,Zdr,ecr,s4,I2e,ocr,rcr,_W,tcr,acr,ncr,l4,N2e,scr,lcr,bW,icr,dcr,ccr,i4,q2e,mcr,fcr,vW,gcr,hcr,ucr,d4,j2e,pcr,_cr,FW,bcr,vcr,Fcr,c4,D2e,Tcr,Mcr,TW,Ecr,Ccr,wcr,m4,G2e,Acr,ycr,MW,Lcr,xcr,$cr,f4,O2e,kcr,Scr,EW,Rcr,Pcr,Bcr,g4,V2e,Icr,Ncr,CW,qcr,jcr,Dcr,h4,X2e,Gcr,Ocr,wW,Vcr,Xcr,zcr,u4,z2e,Wcr,Qcr,AW,Hcr,Ucr,Jcr,p4,W2e,Ycr,Kcr,yW,Zcr,emr,omr,_4,Q2e,rmr,tmr,LW,amr,nmr,smr,Is,H2e,lmr,imr,xW,dmr,cmr,$W,mmr,fmr,gmr,b4,U2e,hmr,umr,kW,pmr,_mr,bmr,v4,J2e,vmr,Fmr,SW,Tmr,Mmr,Emr,F4,Y2e,Cmr,wmr,RW,Amr,ymr,Lmr,T4,K2e,xmr,$mr,PW,kmr,Smr,Rmr,M4,Z2e,Pmr,Bmr,BW,Imr,Nmr,qmr,E4,eve,jmr,Dmr,IW,Gmr,Omr,Vmr,C4,ove,Xmr,zmr,NW,Wmr,Qmr,Hmr,w4,rve,Umr,Jmr,qW,Ymr,Kmr,Zmr,A4,tve,efr,ofr,jW,rfr,tfr,afr,y4,ave,nfr,sfr,DW,lfr,ifr,dfr,L4,nve,cfr,mfr,GW,ffr,gfr,hfr,x4,sve,ufr,pfr,OW,_fr,bfr,vfr,$4,lve,Ffr,Tfr,VW,Mfr,Efr,Cfr,k4,ive,wfr,Afr,XW,yfr,Lfr,xfr,S4,dve,$fr,kfr,zW,Sfr,Rfr,Pfr,R4,cve,Bfr,Ifr,WW,Nfr,qfr,jfr,P4,mve,Dfr,Gfr,QW,Ofr,Vfr,Xfr,B4,fve,zfr,Wfr,HW,Qfr,Hfr,Ufr,I4,gve,Jfr,Yfr,UW,Kfr,Zfr,egr,N4,hve,ogr,rgr,JW,tgr,agr,ngr,q4,uve,sgr,lgr,YW,igr,dgr,cgr,j4,pve,mgr,fgr,KW,ggr,hgr,ugr,D4,_ve,pgr,_gr,ZW,bgr,vgr,Fgr,G4,bve,Tgr,Mgr,eQ,Egr,Cgr,wgr,O4,vve,Agr,ygr,oQ,Lgr,xgr,$gr,V4,Fve,kgr,Sgr,rQ,Rgr,Pgr,Bgr,X4,Tve,Igr,Ngr,tQ,qgr,jgr,Dgr,z4,Mve,Ggr,Ogr,aQ,Vgr,Xgr,zgr,W4,Eve,Wgr,Qgr,nQ,Hgr,Ugr,Jgr,Q4,Tje,Xd,H4,Cve,_7,Ygr,wve,Kgr,Mje,Ko,b7,Zgr,zd,ehr,sQ,ohr,rhr,lQ,thr,ahr,nhr,v7,shr,Ave,lhr,ihr,dhr,Lt,F7,chr,yve,mhr,fhr,Wd,ghr,Lve,hhr,uhr,iQ,phr,_hr,bhr,U4,vhr,Ar,T7,Fhr,xve,Thr,Mhr,Za,Ehr,$ve,Chr,whr,kve,Ahr,yhr,Sve,Lhr,xhr,$hr,se,J4,Rve,khr,Shr,dQ,Rhr,Phr,Bhr,Y4,Pve,Ihr,Nhr,cQ,qhr,jhr,Dhr,K4,Bve,Ghr,Ohr,mQ,Vhr,Xhr,zhr,Z4,Ive,Whr,Qhr,fQ,Hhr,Uhr,Jhr,eE,Nve,Yhr,Khr,gQ,Zhr,eur,our,oE,qve,rur,tur,hQ,aur,nur,sur,rE,jve,lur,iur,uQ,dur,cur,mur,tE,Dve,fur,gur,pQ,hur,uur,pur,aE,Gve,_ur,bur,_Q,vur,Fur,Tur,nE,Ove,Mur,Eur,bQ,Cur,wur,Aur,sE,Vve,yur,Lur,vQ,xur,$ur,kur,lE,Xve,Sur,Rur,FQ,Pur,Bur,Iur,iE,zve,Nur,qur,TQ,jur,Dur,Gur,dE,Wve,Our,Vur,MQ,Xur,zur,Wur,cE,Qve,Qur,Hur,EQ,Uur,Jur,Yur,mE,Hve,Kur,Zur,CQ,epr,opr,rpr,fE,Uve,tpr,apr,wQ,npr,spr,lpr,gE,Jve,ipr,dpr,AQ,cpr,mpr,fpr,hE,Yve,gpr,hpr,yQ,upr,ppr,_pr,uE,Kve,bpr,vpr,LQ,Fpr,Tpr,Mpr,pE,Zve,Epr,Cpr,xQ,wpr,Apr,ypr,_E,eFe,Lpr,xpr,$Q,$pr,kpr,Spr,bE,oFe,Rpr,Ppr,kQ,Bpr,Ipr,Npr,vE,Eje,Qd,FE,rFe,M7,qpr,tFe,jpr,Cje,Zo,E7,Dpr,Hd,Gpr,SQ,Opr,Vpr,RQ,Xpr,zpr,Wpr,C7,Qpr,aFe,Hpr,Upr,Jpr,xt,w7,Ypr,nFe,Kpr,Zpr,Ud,e_r,sFe,o_r,r_r,PQ,t_r,a_r,n_r,TE,s_r,yr,A7,l_r,lFe,i_r,d_r,en,c_r,iFe,m_r,f_r,dFe,g_r,h_r,cFe,u_r,p_r,__r,Te,ME,mFe,b_r,v_r,BQ,F_r,T_r,M_r,EE,fFe,E_r,C_r,IQ,w_r,A_r,y_r,CE,gFe,L_r,x_r,NQ,$_r,k_r,S_r,wE,hFe,R_r,P_r,qQ,B_r,I_r,N_r,AE,uFe,q_r,j_r,jQ,D_r,G_r,O_r,yE,pFe,V_r,X_r,DQ,z_r,W_r,Q_r,LE,_Fe,H_r,U_r,GQ,J_r,Y_r,K_r,xE,bFe,Z_r,ebr,OQ,obr,rbr,tbr,$E,vFe,abr,nbr,VQ,sbr,lbr,ibr,kE,FFe,dbr,cbr,XQ,mbr,fbr,gbr,SE,TFe,hbr,ubr,zQ,pbr,_br,bbr,RE,MFe,vbr,Fbr,WQ,Tbr,Mbr,Ebr,PE,EFe,Cbr,wbr,QQ,Abr,ybr,Lbr,BE,wje,Jd,IE,CFe,y7,xbr,wFe,$br,Aje,er,L7,kbr,Yd,Sbr,HQ,Rbr,Pbr,UQ,Bbr,Ibr,Nbr,x7,qbr,AFe,jbr,Dbr,Gbr,$t,$7,Obr,yFe,Vbr,Xbr,Kd,zbr,LFe,Wbr,Qbr,JQ,Hbr,Ubr,Jbr,NE,Ybr,Lr,k7,Kbr,xFe,Zbr,e2r,on,o2r,$Fe,r2r,t2r,kFe,a2r,n2r,SFe,s2r,l2r,i2r,rn,qE,RFe,d2r,c2r,YQ,m2r,f2r,g2r,jE,PFe,h2r,u2r,KQ,p2r,_2r,b2r,DE,BFe,v2r,F2r,ZQ,T2r,M2r,E2r,GE,IFe,C2r,w2r,eH,A2r,y2r,L2r,OE,yje,Zd,VE,NFe,S7,x2r,qFe,$2r,Lje,or,R7,k2r,ec,S2r,oH,R2r,P2r,rH,B2r,I2r,N2r,P7,q2r,jFe,j2r,D2r,G2r,kt,B7,O2r,DFe,V2r,X2r,oc,z2r,GFe,W2r,Q2r,tH,H2r,U2r,J2r,XE,Y2r,xr,I7,K2r,OFe,Z2r,evr,tn,ovr,VFe,rvr,tvr,XFe,avr,nvr,zFe,svr,lvr,ivr,ie,zE,WFe,dvr,cvr,aH,mvr,fvr,gvr,WE,QFe,hvr,uvr,nH,pvr,_vr,bvr,QE,HFe,vvr,Fvr,sH,Tvr,Mvr,Evr,HE,UFe,Cvr,wvr,lH,Avr,yvr,Lvr,UE,JFe,xvr,$vr,iH,kvr,Svr,Rvr,JE,YFe,Pvr,Bvr,dH,Ivr,Nvr,qvr,YE,KFe,jvr,Dvr,cH,Gvr,Ovr,Vvr,KE,ZFe,Xvr,zvr,mH,Wvr,Qvr,Hvr,ZE,e1e,Uvr,Jvr,fH,Yvr,Kvr,Zvr,eC,o1e,eFr,oFr,gH,rFr,tFr,aFr,oC,r1e,nFr,sFr,hH,lFr,iFr,dFr,rC,t1e,cFr,mFr,uH,fFr,gFr,hFr,tC,a1e,uFr,pFr,pH,_Fr,bFr,vFr,aC,n1e,FFr,TFr,_H,MFr,EFr,CFr,nC,s1e,wFr,AFr,bH,yFr,LFr,xFr,sC,l1e,$Fr,kFr,vH,SFr,RFr,PFr,lC,i1e,BFr,IFr,FH,NFr,qFr,jFr,iC,d1e,DFr,GFr,TH,OFr,VFr,XFr,dC,c1e,zFr,WFr,MH,QFr,HFr,UFr,cC,m1e,JFr,YFr,EH,KFr,ZFr,e1r,mC,xje,rc,fC,f1e,N7,o1r,g1e,r1r,$je,rr,q7,t1r,tc,a1r,CH,n1r,s1r,wH,l1r,i1r,d1r,j7,c1r,h1e,m1r,f1r,g1r,St,D7,h1r,u1e,u1r,p1r,ac,_1r,p1e,b1r,v1r,AH,F1r,T1r,M1r,gC,E1r,$r,G7,C1r,_1e,w1r,A1r,an,y1r,b1e,L1r,x1r,v1e,$1r,k1r,F1e,S1r,R1r,P1r,ye,hC,T1e,B1r,I1r,yH,N1r,q1r,j1r,uC,M1e,D1r,G1r,LH,O1r,V1r,X1r,pC,E1e,z1r,W1r,xH,Q1r,H1r,U1r,_C,C1e,J1r,Y1r,$H,K1r,Z1r,eTr,bC,w1e,oTr,rTr,kH,tTr,aTr,nTr,vC,A1e,sTr,lTr,SH,iTr,dTr,cTr,FC,y1e,mTr,fTr,RH,gTr,hTr,uTr,TC,L1e,pTr,_Tr,PH,bTr,vTr,FTr,MC,x1e,TTr,MTr,BH,ETr,CTr,wTr,EC,$1e,ATr,yTr,IH,LTr,xTr,$Tr,CC,kje,nc,wC,k1e,O7,kTr,S1e,STr,Sje,tr,V7,RTr,sc,PTr,NH,BTr,ITr,qH,NTr,qTr,jTr,X7,DTr,R1e,GTr,OTr,VTr,Rt,z7,XTr,P1e,zTr,WTr,lc,QTr,B1e,HTr,UTr,jH,JTr,YTr,KTr,AC,ZTr,kr,W7,eMr,I1e,oMr,rMr,nn,tMr,N1e,aMr,nMr,q1e,sMr,lMr,j1e,iMr,dMr,cMr,oe,yC,D1e,mMr,fMr,DH,gMr,hMr,uMr,LC,G1e,pMr,_Mr,GH,bMr,vMr,FMr,xC,O1e,TMr,MMr,OH,EMr,CMr,wMr,$C,V1e,AMr,yMr,VH,LMr,xMr,$Mr,kC,X1e,kMr,SMr,XH,RMr,PMr,BMr,SC,z1e,IMr,NMr,zH,qMr,jMr,DMr,RC,W1e,GMr,OMr,WH,VMr,XMr,zMr,PC,Q1e,WMr,QMr,QH,HMr,UMr,JMr,BC,H1e,YMr,KMr,HH,ZMr,e4r,o4r,IC,U1e,r4r,t4r,UH,a4r,n4r,s4r,NC,J1e,l4r,i4r,JH,d4r,c4r,m4r,qC,Y1e,f4r,g4r,YH,h4r,u4r,p4r,jC,K1e,_4r,b4r,KH,v4r,F4r,T4r,DC,Z1e,M4r,E4r,ZH,C4r,w4r,A4r,GC,eTe,y4r,L4r,eU,x4r,$4r,k4r,OC,oTe,S4r,R4r,oU,P4r,B4r,I4r,VC,rTe,N4r,q4r,rU,j4r,D4r,G4r,XC,tTe,O4r,V4r,tU,X4r,z4r,W4r,zC,aTe,Q4r,H4r,aU,U4r,J4r,Y4r,WC,nTe,K4r,Z4r,nU,eEr,oEr,rEr,QC,sTe,tEr,aEr,sU,nEr,sEr,lEr,HC,lTe,iEr,dEr,lU,cEr,mEr,fEr,UC,iTe,gEr,hEr,iU,uEr,pEr,_Er,JC,dTe,bEr,vEr,dU,FEr,TEr,MEr,YC,cTe,EEr,CEr,cU,wEr,AEr,yEr,KC,mTe,LEr,xEr,mU,$Er,kEr,SEr,ZC,Rje,ic,e5,fTe,Q7,REr,gTe,PEr,Pje,ar,H7,BEr,dc,IEr,fU,NEr,qEr,gU,jEr,DEr,GEr,U7,OEr,hTe,VEr,XEr,zEr,Pt,J7,WEr,uTe,QEr,HEr,cc,UEr,pTe,JEr,YEr,hU,KEr,ZEr,eCr,o5,oCr,Sr,Y7,rCr,_Te,tCr,aCr,sn,nCr,bTe,sCr,lCr,vTe,iCr,dCr,FTe,cCr,mCr,fCr,ue,r5,TTe,gCr,hCr,uU,uCr,pCr,_Cr,t5,MTe,bCr,vCr,pU,FCr,TCr,MCr,a5,ETe,ECr,CCr,_U,wCr,ACr,yCr,n5,CTe,LCr,xCr,bU,$Cr,kCr,SCr,s5,wTe,RCr,PCr,vU,BCr,ICr,NCr,l5,ATe,qCr,jCr,FU,DCr,GCr,OCr,i5,yTe,VCr,XCr,TU,zCr,WCr,QCr,d5,LTe,HCr,UCr,MU,JCr,YCr,KCr,c5,xTe,ZCr,e5r,EU,o5r,r5r,t5r,m5,$Te,a5r,n5r,CU,s5r,l5r,i5r,f5,kTe,d5r,c5r,wU,m5r,f5r,g5r,g5,STe,h5r,u5r,AU,p5r,_5r,b5r,h5,RTe,v5r,F5r,yU,T5r,M5r,E5r,u5,PTe,C5r,w5r,LU,A5r,y5r,L5r,p5,BTe,x5r,$5r,xU,k5r,S5r,R5r,_5,ITe,P5r,B5r,$U,I5r,N5r,q5r,b5,NTe,j5r,D5r,kU,G5r,O5r,V5r,v5,Bje,mc,F5,qTe,K7,X5r,jTe,z5r,Ije,nr,Z7,W5r,fc,Q5r,SU,H5r,U5r,RU,J5r,Y5r,K5r,e9,Z5r,DTe,e3r,o3r,r3r,Bt,o9,t3r,GTe,a3r,n3r,gc,s3r,OTe,l3r,i3r,PU,d3r,c3r,m3r,T5,f3r,Rr,r9,g3r,VTe,h3r,u3r,ln,p3r,XTe,_3r,b3r,zTe,v3r,F3r,WTe,T3r,M3r,E3r,t9,M5,QTe,C3r,w3r,BU,A3r,y3r,L3r,E5,HTe,x3r,$3r,IU,k3r,S3r,R3r,C5,Nje,hc,w5,UTe,a9,P3r,JTe,B3r,qje,sr,n9,I3r,uc,N3r,NU,q3r,j3r,qU,D3r,G3r,O3r,s9,V3r,YTe,X3r,z3r,W3r,It,l9,Q3r,KTe,H3r,U3r,pc,J3r,ZTe,Y3r,K3r,jU,Z3r,ewr,owr,A5,rwr,Pr,i9,twr,eMe,awr,nwr,dn,swr,oMe,lwr,iwr,rMe,dwr,cwr,tMe,mwr,fwr,gwr,aMe,y5,nMe,hwr,uwr,DU,pwr,_wr,bwr,L5,jje,_c,x5,sMe,d9,vwr,lMe,Fwr,Dje,lr,c9,Twr,bc,Mwr,GU,Ewr,Cwr,OU,wwr,Awr,ywr,m9,Lwr,iMe,xwr,$wr,kwr,Nt,f9,Swr,dMe,Rwr,Pwr,vc,Bwr,cMe,Iwr,Nwr,VU,qwr,jwr,Dwr,$5,Gwr,Br,g9,Owr,mMe,Vwr,Xwr,cn,zwr,fMe,Wwr,Qwr,gMe,Hwr,Uwr,hMe,Jwr,Ywr,Kwr,de,k5,uMe,Zwr,e0r,XU,o0r,r0r,t0r,S5,pMe,a0r,n0r,zU,s0r,l0r,i0r,R5,_Me,d0r,c0r,WU,m0r,f0r,g0r,P5,bMe,h0r,u0r,QU,p0r,_0r,b0r,B5,vMe,v0r,F0r,HU,T0r,M0r,E0r,I5,FMe,C0r,w0r,UU,A0r,y0r,L0r,N5,TMe,x0r,$0r,JU,k0r,S0r,R0r,q5,MMe,P0r,B0r,YU,I0r,N0r,q0r,j5,EMe,j0r,D0r,KU,G0r,O0r,V0r,D5,CMe,X0r,z0r,ZU,W0r,Q0r,H0r,G5,wMe,U0r,J0r,eJ,Y0r,K0r,Z0r,O5,AMe,e6r,o6r,oJ,r6r,t6r,a6r,V5,yMe,n6r,s6r,rJ,l6r,i6r,d6r,X5,LMe,c6r,m6r,tJ,f6r,g6r,h6r,z5,xMe,u6r,p6r,aJ,_6r,b6r,v6r,W5,$Me,F6r,T6r,nJ,M6r,E6r,C6r,Q5,kMe,w6r,A6r,sJ,y6r,L6r,x6r,H5,SMe,$6r,k6r,lJ,S6r,R6r,P6r,U5,RMe,B6r,I6r,iJ,N6r,q6r,j6r,J5,PMe,D6r,G6r,dJ,O6r,V6r,X6r,Y5,Gje,Fc,K5,BMe,h9,z6r,IMe,W6r,Oje,ir,u9,Q6r,Tc,H6r,cJ,U6r,J6r,mJ,Y6r,K6r,Z6r,p9,eAr,NMe,oAr,rAr,tAr,qt,_9,aAr,qMe,nAr,sAr,Mc,lAr,jMe,iAr,dAr,fJ,cAr,mAr,fAr,Z5,gAr,Ir,b9,hAr,DMe,uAr,pAr,mn,_Ar,GMe,bAr,vAr,OMe,FAr,TAr,VMe,MAr,EAr,CAr,ce,e3,XMe,wAr,AAr,gJ,yAr,LAr,xAr,o3,zMe,$Ar,kAr,hJ,SAr,RAr,PAr,r3,WMe,BAr,IAr,uJ,NAr,qAr,jAr,t3,QMe,DAr,GAr,pJ,OAr,VAr,XAr,a3,HMe,zAr,WAr,_J,QAr,HAr,UAr,n3,UMe,JAr,YAr,bJ,KAr,ZAr,eyr,s3,JMe,oyr,ryr,vJ,tyr,ayr,nyr,l3,YMe,syr,lyr,FJ,iyr,dyr,cyr,i3,KMe,myr,fyr,TJ,gyr,hyr,uyr,d3,ZMe,pyr,_yr,MJ,byr,vyr,Fyr,c3,e4e,Tyr,Myr,EJ,Eyr,Cyr,wyr,m3,o4e,Ayr,yyr,CJ,Lyr,xyr,$yr,f3,r4e,kyr,Syr,wJ,Ryr,Pyr,Byr,g3,t4e,Iyr,Nyr,AJ,qyr,jyr,Dyr,h3,a4e,Gyr,Oyr,yJ,Vyr,Xyr,zyr,u3,n4e,Wyr,Qyr,LJ,Hyr,Uyr,Jyr,p3,s4e,Yyr,Kyr,xJ,Zyr,eLr,oLr,_3,l4e,rLr,tLr,$J,aLr,nLr,sLr,b3,i4e,lLr,iLr,kJ,dLr,cLr,mLr,v3,d4e,fLr,gLr,SJ,hLr,uLr,pLr,F3,Vje,Ec,T3,c4e,v9,_Lr,m4e,bLr,Xje,dr,F9,vLr,Cc,FLr,RJ,TLr,MLr,PJ,ELr,CLr,wLr,T9,ALr,f4e,yLr,LLr,xLr,jt,M9,$Lr,g4e,kLr,SLr,wc,RLr,h4e,PLr,BLr,BJ,ILr,NLr,qLr,M3,jLr,Nr,E9,DLr,u4e,GLr,OLr,fn,VLr,p4e,XLr,zLr,_4e,WLr,QLr,b4e,HLr,ULr,JLr,v4e,E3,F4e,YLr,KLr,IJ,ZLr,e8r,o8r,C3,zje,Ac,w3,T4e,C9,r8r,M4e,t8r,Wje,cr,w9,a8r,yc,n8r,NJ,s8r,l8r,qJ,i8r,d8r,c8r,A9,m8r,E4e,f8r,g8r,h8r,Dt,y9,u8r,C4e,p8r,_8r,Lc,b8r,w4e,v8r,F8r,jJ,T8r,M8r,E8r,A3,C8r,qr,L9,w8r,A4e,A8r,y8r,gn,L8r,y4e,x8r,$8r,L4e,k8r,S8r,x4e,R8r,P8r,B8r,$4e,y3,k4e,I8r,N8r,DJ,q8r,j8r,D8r,L3,Qje,xc,x3,S4e,x9,G8r,R4e,O8r,Hje,mr,$9,V8r,$c,X8r,GJ,z8r,W8r,OJ,Q8r,H8r,U8r,k9,J8r,P4e,Y8r,K8r,Z8r,Gt,S9,e7r,B4e,o7r,r7r,kc,t7r,I4e,a7r,n7r,VJ,s7r,l7r,i7r,$3,d7r,jr,R9,c7r,N4e,m7r,f7r,hn,g7r,q4e,h7r,u7r,j4e,p7r,_7r,D4e,b7r,v7r,F7r,re,k3,G4e,T7r,M7r,XJ,E7r,C7r,w7r,S3,O4e,A7r,y7r,zJ,L7r,x7r,$7r,R3,V4e,k7r,S7r,WJ,R7r,P7r,B7r,P3,X4e,I7r,N7r,QJ,q7r,j7r,D7r,B3,z4e,G7r,O7r,HJ,V7r,X7r,z7r,I3,W4e,W7r,Q7r,UJ,H7r,U7r,J7r,N3,Q4e,Y7r,K7r,JJ,Z7r,e9r,o9r,q3,H4e,r9r,t9r,YJ,a9r,n9r,s9r,j3,U4e,l9r,i9r,KJ,d9r,c9r,m9r,D3,J4e,f9r,g9r,ZJ,h9r,u9r,p9r,G3,Y4e,_9r,b9r,eY,v9r,F9r,T9r,O3,K4e,M9r,E9r,oY,C9r,w9r,A9r,V3,Z4e,y9r,L9r,rY,x9r,$9r,k9r,X3,eEe,S9r,R9r,tY,P9r,B9r,I9r,z3,oEe,N9r,q9r,aY,j9r,D9r,G9r,W3,rEe,O9r,V9r,nY,X9r,z9r,W9r,Q3,tEe,Q9r,H9r,sY,U9r,J9r,Y9r,H3,aEe,K9r,Z9r,lY,exr,oxr,rxr,U3,nEe,txr,axr,iY,nxr,sxr,lxr,J3,sEe,ixr,dxr,dY,cxr,mxr,fxr,Y3,lEe,gxr,hxr,cY,uxr,pxr,_xr,K3,iEe,bxr,vxr,mY,Fxr,Txr,Mxr,Z3,dEe,Exr,Cxr,fY,wxr,Axr,yxr,ew,cEe,Lxr,xxr,gY,$xr,kxr,Sxr,ow,mEe,Rxr,Pxr,hY,Bxr,Ixr,Nxr,rw,fEe,qxr,jxr,uY,Dxr,Gxr,Oxr,tw,Uje,Sc,aw,gEe,P9,Vxr,hEe,Xxr,Jje,fr,B9,zxr,Rc,Wxr,pY,Qxr,Hxr,_Y,Uxr,Jxr,Yxr,I9,Kxr,uEe,Zxr,e$r,o$r,Ot,N9,r$r,pEe,t$r,a$r,Pc,n$r,_Ee,s$r,l$r,bY,i$r,d$r,c$r,nw,m$r,Dr,q9,f$r,bEe,g$r,h$r,un,u$r,vEe,p$r,_$r,FEe,b$r,v$r,TEe,F$r,T$r,M$r,Le,sw,MEe,E$r,C$r,vY,w$r,A$r,y$r,lw,EEe,L$r,x$r,FY,$$r,k$r,S$r,iw,CEe,R$r,P$r,TY,B$r,I$r,N$r,dw,wEe,q$r,j$r,MY,D$r,G$r,O$r,cw,AEe,V$r,X$r,EY,z$r,W$r,Q$r,mw,yEe,H$r,U$r,CY,J$r,Y$r,K$r,fw,LEe,Z$r,ekr,wY,okr,rkr,tkr,gw,xEe,akr,nkr,AY,skr,lkr,ikr,hw,$Ee,dkr,ckr,yY,mkr,fkr,gkr,uw,kEe,hkr,ukr,LY,pkr,_kr,bkr,pw,Yje,Bc,_w,SEe,j9,vkr,REe,Fkr,Kje,gr,D9,Tkr,Ic,Mkr,xY,Ekr,Ckr,$Y,wkr,Akr,ykr,G9,Lkr,PEe,xkr,$kr,kkr,Vt,O9,Skr,BEe,Rkr,Pkr,Nc,Bkr,IEe,Ikr,Nkr,kY,qkr,jkr,Dkr,bw,Gkr,Gr,V9,Okr,NEe,Vkr,Xkr,pn,zkr,qEe,Wkr,Qkr,jEe,Hkr,Ukr,DEe,Jkr,Ykr,Kkr,Ee,vw,GEe,Zkr,eSr,SY,oSr,rSr,tSr,Fw,OEe,aSr,nSr,RY,sSr,lSr,iSr,Tw,VEe,dSr,cSr,PY,mSr,fSr,gSr,Mw,XEe,hSr,uSr,BY,pSr,_Sr,bSr,Ew,zEe,vSr,FSr,IY,TSr,MSr,ESr,Cw,WEe,CSr,wSr,NY,ASr,ySr,LSr,ww,QEe,xSr,$Sr,qY,kSr,SSr,RSr,Aw,HEe,PSr,BSr,jY,ISr,NSr,qSr,yw,UEe,jSr,DSr,DY,GSr,OSr,VSr,Lw,JEe,XSr,zSr,GY,WSr,QSr,HSr,xw,YEe,USr,JSr,OY,YSr,KSr,ZSr,$w,KEe,eRr,oRr,VY,rRr,tRr,aRr,kw,Zje,qc,Sw,ZEe,X9,nRr,eCe,sRr,eDe,hr,z9,lRr,jc,iRr,XY,dRr,cRr,zY,mRr,fRr,gRr,W9,hRr,oCe,uRr,pRr,_Rr,Xt,Q9,bRr,rCe,vRr,FRr,Dc,TRr,tCe,MRr,ERr,WY,CRr,wRr,ARr,Rw,yRr,Or,H9,LRr,aCe,xRr,$Rr,_n,kRr,nCe,SRr,RRr,sCe,PRr,BRr,lCe,IRr,NRr,qRr,xe,Pw,iCe,jRr,DRr,QY,GRr,ORr,VRr,Bw,dCe,XRr,zRr,HY,WRr,QRr,HRr,Iw,cCe,URr,JRr,UY,YRr,KRr,ZRr,Nw,mCe,ePr,oPr,JY,rPr,tPr,aPr,qw,fCe,nPr,sPr,YY,lPr,iPr,dPr,jw,gCe,cPr,mPr,KY,fPr,gPr,hPr,Dw,hCe,uPr,pPr,ZY,_Pr,bPr,vPr,Gw,uCe,FPr,TPr,eK,MPr,EPr,CPr,Ow,pCe,wPr,APr,oK,yPr,LPr,xPr,Vw,_Ce,$Pr,kPr,rK,SPr,RPr,PPr,Xw,oDe,Gc,zw,bCe,U9,BPr,vCe,IPr,rDe,ur,J9,NPr,Oc,qPr,tK,jPr,DPr,aK,GPr,OPr,VPr,Y9,XPr,FCe,zPr,WPr,QPr,zt,K9,HPr,TCe,UPr,JPr,Vc,YPr,MCe,KPr,ZPr,nK,eBr,oBr,rBr,Ww,tBr,Vr,Z9,aBr,ECe,nBr,sBr,bn,lBr,CCe,iBr,dBr,wCe,cBr,mBr,ACe,fBr,gBr,hBr,Pe,Qw,yCe,uBr,pBr,sK,_Br,bBr,vBr,Hw,LCe,FBr,TBr,lK,MBr,EBr,CBr,Uw,xCe,wBr,ABr,iK,yBr,LBr,xBr,Jw,$Ce,$Br,kBr,dK,SBr,RBr,PBr,Yw,kCe,BBr,IBr,cK,NBr,qBr,jBr,Kw,SCe,DBr,GBr,mK,OBr,VBr,XBr,Zw,RCe,zBr,WBr,fK,QBr,HBr,UBr,e0,PCe,JBr,YBr,gK,KBr,ZBr,eIr,o0,BCe,oIr,rIr,hK,tIr,aIr,nIr,r0,tDe,Xc,t0,ICe,ex,sIr,NCe,lIr,aDe,pr,ox,iIr,zc,dIr,uK,cIr,mIr,pK,fIr,gIr,hIr,rx,uIr,qCe,pIr,_Ir,bIr,Wt,tx,vIr,jCe,FIr,TIr,Wc,MIr,DCe,EIr,CIr,_K,wIr,AIr,yIr,a0,LIr,Xr,ax,xIr,GCe,$Ir,kIr,vn,SIr,OCe,RIr,PIr,VCe,BIr,IIr,XCe,NIr,qIr,jIr,$e,n0,zCe,DIr,GIr,bK,OIr,VIr,XIr,s0,WCe,zIr,WIr,vK,QIr,HIr,UIr,l0,QCe,JIr,YIr,FK,KIr,ZIr,eNr,i0,HCe,oNr,rNr,TK,tNr,aNr,nNr,d0,UCe,sNr,lNr,MK,iNr,dNr,cNr,c0,JCe,mNr,fNr,EK,gNr,hNr,uNr,m0,YCe,pNr,_Nr,CK,bNr,vNr,FNr,f0,KCe,TNr,MNr,wK,ENr,CNr,wNr,g0,ZCe,ANr,yNr,AK,LNr,xNr,$Nr,h0,e5e,kNr,SNr,yK,RNr,PNr,BNr,u0,nDe,Qc,p0,o5e,nx,INr,r5e,NNr,sDe,_r,sx,qNr,Hc,jNr,LK,DNr,GNr,xK,ONr,VNr,XNr,lx,zNr,t5e,WNr,QNr,HNr,Qt,ix,UNr,a5e,JNr,YNr,Uc,KNr,n5e,ZNr,eqr,$K,oqr,rqr,tqr,_0,aqr,zr,dx,nqr,s5e,sqr,lqr,Fn,iqr,l5e,dqr,cqr,i5e,mqr,fqr,d5e,gqr,hqr,uqr,ke,b0,c5e,pqr,_qr,kK,bqr,vqr,Fqr,v0,m5e,Tqr,Mqr,SK,Eqr,Cqr,wqr,F0,f5e,Aqr,yqr,RK,Lqr,xqr,$qr,T0,g5e,kqr,Sqr,PK,Rqr,Pqr,Bqr,M0,h5e,Iqr,Nqr,BK,qqr,jqr,Dqr,E0,u5e,Gqr,Oqr,IK,Vqr,Xqr,zqr,C0,p5e,Wqr,Qqr,NK,Hqr,Uqr,Jqr,w0,_5e,Yqr,Kqr,qK,Zqr,ejr,ojr,A0,b5e,rjr,tjr,jK,ajr,njr,sjr,y0,v5e,ljr,ijr,DK,djr,cjr,mjr,L0,lDe,Jc,x0,F5e,cx,fjr,T5e,gjr,iDe,br,mx,hjr,Yc,ujr,GK,pjr,_jr,OK,bjr,vjr,Fjr,fx,Tjr,M5e,Mjr,Ejr,Cjr,Ht,gx,wjr,E5e,Ajr,yjr,Kc,Ljr,C5e,xjr,$jr,VK,kjr,Sjr,Rjr,$0,Pjr,Wr,hx,Bjr,w5e,Ijr,Njr,Tn,qjr,A5e,jjr,Djr,y5e,Gjr,Ojr,L5e,Vjr,Xjr,zjr,Ge,k0,x5e,Wjr,Qjr,XK,Hjr,Ujr,Jjr,S0,$5e,Yjr,Kjr,zK,Zjr,eDr,oDr,R0,k5e,rDr,tDr,WK,aDr,nDr,sDr,P0,S5e,lDr,iDr,QK,dDr,cDr,mDr,B0,R5e,fDr,gDr,HK,hDr,uDr,pDr,I0,P5e,_Dr,bDr,UK,vDr,FDr,TDr,N0,B5e,MDr,EDr,JK,CDr,wDr,ADr,q0,I5e,yDr,LDr,YK,xDr,$Dr,kDr,j0,dDe,Zc,D0,N5e,ux,SDr,q5e,RDr,cDe,vr,px,PDr,em,BDr,KK,IDr,NDr,ZK,qDr,jDr,DDr,_x,GDr,j5e,ODr,VDr,XDr,Ut,bx,zDr,D5e,WDr,QDr,om,HDr,G5e,UDr,JDr,eZ,YDr,KDr,ZDr,G0,eGr,Qr,vx,oGr,O5e,rGr,tGr,Mn,aGr,V5e,nGr,sGr,X5e,lGr,iGr,z5e,dGr,cGr,mGr,Oe,O0,W5e,fGr,gGr,oZ,hGr,uGr,pGr,V0,Q5e,_Gr,bGr,rZ,vGr,FGr,TGr,X0,H5e,MGr,EGr,tZ,CGr,wGr,AGr,z0,U5e,yGr,LGr,aZ,xGr,$Gr,kGr,W0,J5e,SGr,RGr,nZ,PGr,BGr,IGr,Q0,Y5e,NGr,qGr,sZ,jGr,DGr,GGr,H0,K5e,OGr,VGr,lZ,XGr,zGr,WGr,U0,Z5e,QGr,HGr,iZ,UGr,JGr,YGr,J0,mDe,rm,Y0,e3e,Fx,KGr,o3e,ZGr,fDe,Fr,Tx,eOr,tm,oOr,dZ,rOr,tOr,cZ,aOr,nOr,sOr,Mx,lOr,r3e,iOr,dOr,cOr,Jt,Ex,mOr,t3e,fOr,gOr,am,hOr,a3e,uOr,pOr,mZ,_Or,bOr,vOr,K0,FOr,Hr,Cx,TOr,n3e,MOr,EOr,En,COr,s3e,wOr,AOr,l3e,yOr,LOr,i3e,xOr,$Or,kOr,d3e,Z0,c3e,SOr,ROr,fZ,POr,BOr,IOr,e6,gDe,nm,o6,m3e,wx,NOr,f3e,qOr,hDe,Tr,Ax,jOr,sm,DOr,gZ,GOr,OOr,hZ,VOr,XOr,zOr,yx,WOr,g3e,QOr,HOr,UOr,Yt,Lx,JOr,h3e,YOr,KOr,lm,ZOr,u3e,eVr,oVr,uZ,rVr,tVr,aVr,r6,nVr,Ur,xx,sVr,p3e,lVr,iVr,Cn,dVr,_3e,cVr,mVr,b3e,fVr,gVr,v3e,hVr,uVr,pVr,$x,t6,F3e,_Vr,bVr,pZ,vVr,FVr,TVr,a6,T3e,MVr,EVr,_Z,CVr,wVr,AVr,n6,uDe,im,s6,M3e,kx,yVr,E3e,LVr,pDe,Mr,Sx,xVr,dm,$Vr,bZ,kVr,SVr,vZ,RVr,PVr,BVr,Rx,IVr,C3e,NVr,qVr,jVr,Kt,Px,DVr,w3e,GVr,OVr,cm,VVr,A3e,XVr,zVr,FZ,WVr,QVr,HVr,l6,UVr,Jr,Bx,JVr,y3e,YVr,KVr,wn,ZVr,L3e,eXr,oXr,x3e,rXr,tXr,$3e,aXr,nXr,sXr,k3e,i6,S3e,lXr,iXr,TZ,dXr,cXr,mXr,d6,_De;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),ky=new te({}),Sy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vm=new fXr({props:{warning:!0,$$slots:{default:[okt]},$$scope:{ctx:L}}}),Ry=new te({}),Py=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L584"}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L730"}}),jy=new te({}),Dy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L390"}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L603"}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new fXr({props:{$$slots:{default:[akt]},$$scope:{ctx:L}}}),Nh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Yy=new te({}),Ky=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),tu=new fXr({props:{$$slots:{default:[skt]},$$scope:{ctx:L}}}),au=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),tL=new te({}),aL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),sL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),iL=new te({}),dL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),gL=new te({}),hL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L758"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),bL=new te({}),vL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L765"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Nb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),EL=new te({}),CL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L772"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),LL=new te({}),xL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L781"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),RL=new te({}),PL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),qL=new te({}),jL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L822"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),VL=new te({}),XL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),HL=new te({}),UL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L790"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),ZL=new te({}),e8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L797"}}),r8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),a8=new te({}),n8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L831"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),d8=new te({}),c8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L870"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),h8=new te({}),u8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),_8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),v8=new te({}),F8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),M8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),C8=new te({}),w8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),y8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),x8=new te({}),$8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),S8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B8=new te({}),I8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D8=new te({}),G8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),V8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z8=new te({}),W8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L863"}}),H8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L838"}}),e7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),o7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),r7=new te({}),t7=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L845"}}),n7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),s7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),l7=new te({}),i7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),c7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),f7=new te({}),g7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),u7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),_7=new te({}),b7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),F7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),T7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),M7=new te({}),E7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),w7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),A7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),y7=new te({}),L7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),$7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),k7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),S7=new te({}),R7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),B7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),I7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),N7=new te({}),q7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),D7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),G7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),O7=new te({}),V7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),z7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Q7=new te({}),H7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),J7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),K7=new te({}),Z7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),a9=new te({}),n9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),l9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),d9=new te({}),c9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),h9=new te({}),u9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),_9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),v9=new te({}),F9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),C9=new te({}),w9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),x9=new te({}),$9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),S9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),P9=new te({}),B9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),j9=new te({}),D9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),O9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),X9=new te({}),z9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),U9=new te({}),J9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),K9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),ex=new te({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),nx=new te({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),cx=new te({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),ux=new te({}),px=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),Fx=new te({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),wx=new te({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),kx=new te({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),hm=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),yy=o("from_pretrained()"),um=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),Ly=o("AutoConfig"),Ln=o(", "),xn=a("a"),xy=o("AutoModel"),ui=o(`, and
`),$n=a("a"),$y=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),pm=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),U$=o("will create a model that is an instance of "),_i=a("a"),J$=o("BertModel"),Y$=o("."),Eo=l(),wa=a("p"),K$=o("There is one class of "),_m=a("code"),Z$=o("AutoModel"),wOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),hqe=l(),bi=a("h2"),bm=a("a"),hoe=a("span"),F(ky.$$.fragment),AOe=l(),uoe=a("span"),yOe=o("Extending the Auto Classes"),uqe=l(),kn=a("p"),LOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),poe=a("code"),xOe=o("NewModel"),$Oe=o(", make sure you have a "),_oe=a("code"),kOe=o("NewModelConfig"),SOe=o(` then you can add those to the auto
classes like this:`),pqe=l(),F(Sy.$$.fragment),_qe=l(),ek=a("p"),ROe=o("You will then be able to use the auto classes like you would usually do!"),bqe=l(),F(vm.$$.fragment),vqe=l(),vi=a("h2"),Fm=a("a"),boe=a("span"),F(Ry.$$.fragment),POe=l(),voe=a("span"),BOe=o("AutoConfig"),Fqe=l(),Co=a("div"),F(Py.$$.fragment),IOe=l(),By=a("p"),NOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=a("a"),qOe=o("from_pretrained()"),jOe=o(" class method."),DOe=l(),Iy=a("p"),GOe=o("This class cannot be instantiated directly using "),Foe=a("code"),OOe=o("__init__()"),VOe=o(" (throws an error)."),XOe=l(),Er=a("div"),F(Ny.$$.fragment),zOe=l(),Toe=a("p"),WOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),QOe=l(),Fi=a("p"),HOe=o("The configuration class to instantiate is selected based on the "),Moe=a("code"),UOe=o("model_type"),JOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eoe=a("code"),YOe=o("pretrained_model_name_or_path"),KOe=o(":"),ZOe=l(),A=a("ul"),Tm=a("li"),Coe=a("strong"),eVe=o("albert"),oVe=o(" \u2014 "),rk=a("a"),rVe=o("AlbertConfig"),tVe=o(" (ALBERT model)"),aVe=l(),Mm=a("li"),woe=a("strong"),nVe=o("bart"),sVe=o(" \u2014 "),tk=a("a"),lVe=o("BartConfig"),iVe=o(" (BART model)"),dVe=l(),Em=a("li"),Aoe=a("strong"),cVe=o("beit"),mVe=o(" \u2014 "),ak=a("a"),fVe=o("BeitConfig"),gVe=o(" (BEiT model)"),hVe=l(),Cm=a("li"),yoe=a("strong"),uVe=o("bert"),pVe=o(" \u2014 "),nk=a("a"),_Ve=o("BertConfig"),bVe=o(" (BERT model)"),vVe=l(),wm=a("li"),Loe=a("strong"),FVe=o("bert-generation"),TVe=o(" \u2014 "),sk=a("a"),MVe=o("BertGenerationConfig"),EVe=o(" (Bert Generation model)"),CVe=l(),Am=a("li"),xoe=a("strong"),wVe=o("big_bird"),AVe=o(" \u2014 "),lk=a("a"),yVe=o("BigBirdConfig"),LVe=o(" (BigBird model)"),xVe=l(),ym=a("li"),$oe=a("strong"),$Ve=o("bigbird_pegasus"),kVe=o(" \u2014 "),ik=a("a"),SVe=o("BigBirdPegasusConfig"),RVe=o(" (BigBirdPegasus model)"),PVe=l(),Lm=a("li"),koe=a("strong"),BVe=o("blenderbot"),IVe=o(" \u2014 "),dk=a("a"),NVe=o("BlenderbotConfig"),qVe=o(" (Blenderbot model)"),jVe=l(),xm=a("li"),Soe=a("strong"),DVe=o("blenderbot-small"),GVe=o(" \u2014 "),ck=a("a"),OVe=o("BlenderbotSmallConfig"),VVe=o(" (BlenderbotSmall model)"),XVe=l(),$m=a("li"),Roe=a("strong"),zVe=o("camembert"),WVe=o(" \u2014 "),mk=a("a"),QVe=o("CamembertConfig"),HVe=o(" (CamemBERT model)"),UVe=l(),km=a("li"),Poe=a("strong"),JVe=o("canine"),YVe=o(" \u2014 "),fk=a("a"),KVe=o("CanineConfig"),ZVe=o(" (Canine model)"),eXe=l(),Sm=a("li"),Boe=a("strong"),oXe=o("clip"),rXe=o(" \u2014 "),gk=a("a"),tXe=o("CLIPConfig"),aXe=o(" (CLIP model)"),nXe=l(),Rm=a("li"),Ioe=a("strong"),sXe=o("convbert"),lXe=o(" \u2014 "),hk=a("a"),iXe=o("ConvBertConfig"),dXe=o(" (ConvBERT model)"),cXe=l(),Pm=a("li"),Noe=a("strong"),mXe=o("convnext"),fXe=o(" \u2014 "),uk=a("a"),gXe=o("ConvNextConfig"),hXe=o(" (ConvNext model)"),uXe=l(),Bm=a("li"),qoe=a("strong"),pXe=o("ctrl"),_Xe=o(" \u2014 "),pk=a("a"),bXe=o("CTRLConfig"),vXe=o(" (CTRL model)"),FXe=l(),Im=a("li"),joe=a("strong"),TXe=o("cvt"),MXe=o(" \u2014 "),_k=a("a"),EXe=o("CvtConfig"),CXe=o(" (CvT model)"),wXe=l(),Nm=a("li"),Doe=a("strong"),AXe=o("data2vec-audio"),yXe=o(" \u2014 "),bk=a("a"),LXe=o("Data2VecAudioConfig"),xXe=o(" (Data2VecAudio model)"),$Xe=l(),qm=a("li"),Goe=a("strong"),kXe=o("data2vec-text"),SXe=o(" \u2014 "),vk=a("a"),RXe=o("Data2VecTextConfig"),PXe=o(" (Data2VecText model)"),BXe=l(),jm=a("li"),Ooe=a("strong"),IXe=o("data2vec-vision"),NXe=o(" \u2014 "),Fk=a("a"),qXe=o("Data2VecVisionConfig"),jXe=o(" (Data2VecVision model)"),DXe=l(),Dm=a("li"),Voe=a("strong"),GXe=o("deberta"),OXe=o(" \u2014 "),Tk=a("a"),VXe=o("DebertaConfig"),XXe=o(" (DeBERTa model)"),zXe=l(),Gm=a("li"),Xoe=a("strong"),WXe=o("deberta-v2"),QXe=o(" \u2014 "),Mk=a("a"),HXe=o("DebertaV2Config"),UXe=o(" (DeBERTa-v2 model)"),JXe=l(),Om=a("li"),zoe=a("strong"),YXe=o("decision_transformer"),KXe=o(" \u2014 "),Ek=a("a"),ZXe=o("DecisionTransformerConfig"),eze=o(" (Decision Transformer model)"),oze=l(),Vm=a("li"),Woe=a("strong"),rze=o("deit"),tze=o(" \u2014 "),Ck=a("a"),aze=o("DeiTConfig"),nze=o(" (DeiT model)"),sze=l(),Xm=a("li"),Qoe=a("strong"),lze=o("detr"),ize=o(" \u2014 "),wk=a("a"),dze=o("DetrConfig"),cze=o(" (DETR model)"),mze=l(),zm=a("li"),Hoe=a("strong"),fze=o("distilbert"),gze=o(" \u2014 "),Ak=a("a"),hze=o("DistilBertConfig"),uze=o(" (DistilBERT model)"),pze=l(),Wm=a("li"),Uoe=a("strong"),_ze=o("dpr"),bze=o(" \u2014 "),yk=a("a"),vze=o("DPRConfig"),Fze=o(" (DPR model)"),Tze=l(),Qm=a("li"),Joe=a("strong"),Mze=o("dpt"),Eze=o(" \u2014 "),Lk=a("a"),Cze=o("DPTConfig"),wze=o(" (DPT model)"),Aze=l(),Hm=a("li"),Yoe=a("strong"),yze=o("electra"),Lze=o(" \u2014 "),xk=a("a"),xze=o("ElectraConfig"),$ze=o(" (ELECTRA model)"),kze=l(),Um=a("li"),Koe=a("strong"),Sze=o("encoder-decoder"),Rze=o(" \u2014 "),$k=a("a"),Pze=o("EncoderDecoderConfig"),Bze=o(" (Encoder decoder model)"),Ize=l(),Jm=a("li"),Zoe=a("strong"),Nze=o("flaubert"),qze=o(" \u2014 "),kk=a("a"),jze=o("FlaubertConfig"),Dze=o(" (FlauBERT model)"),Gze=l(),Ym=a("li"),ere=a("strong"),Oze=o("flava"),Vze=o(" \u2014 "),Sk=a("a"),Xze=o("FlavaConfig"),zze=o(" (Flava model)"),Wze=l(),Km=a("li"),ore=a("strong"),Qze=o("fnet"),Hze=o(" \u2014 "),Rk=a("a"),Uze=o("FNetConfig"),Jze=o(" (FNet model)"),Yze=l(),Zm=a("li"),rre=a("strong"),Kze=o("fsmt"),Zze=o(" \u2014 "),Pk=a("a"),eWe=o("FSMTConfig"),oWe=o(" (FairSeq Machine-Translation model)"),rWe=l(),ef=a("li"),tre=a("strong"),tWe=o("funnel"),aWe=o(" \u2014 "),Bk=a("a"),nWe=o("FunnelConfig"),sWe=o(" (Funnel Transformer model)"),lWe=l(),of=a("li"),are=a("strong"),iWe=o("glpn"),dWe=o(" \u2014 "),Ik=a("a"),cWe=o("GLPNConfig"),mWe=o(" (GLPN model)"),fWe=l(),rf=a("li"),nre=a("strong"),gWe=o("gpt2"),hWe=o(" \u2014 "),Nk=a("a"),uWe=o("GPT2Config"),pWe=o(" (OpenAI GPT-2 model)"),_We=l(),tf=a("li"),sre=a("strong"),bWe=o("gpt_neo"),vWe=o(" \u2014 "),qk=a("a"),FWe=o("GPTNeoConfig"),TWe=o(" (GPT Neo model)"),MWe=l(),af=a("li"),lre=a("strong"),EWe=o("gpt_neox"),CWe=o(" \u2014 "),jk=a("a"),wWe=o("GPTNeoXConfig"),AWe=o(" (GPT NeoX model)"),yWe=l(),nf=a("li"),ire=a("strong"),LWe=o("gptj"),xWe=o(" \u2014 "),Dk=a("a"),$We=o("GPTJConfig"),kWe=o(" (GPT-J model)"),SWe=l(),sf=a("li"),dre=a("strong"),RWe=o("hubert"),PWe=o(" \u2014 "),Gk=a("a"),BWe=o("HubertConfig"),IWe=o(" (Hubert model)"),NWe=l(),lf=a("li"),cre=a("strong"),qWe=o("ibert"),jWe=o(" \u2014 "),Ok=a("a"),DWe=o("IBertConfig"),GWe=o(" (I-BERT model)"),OWe=l(),df=a("li"),mre=a("strong"),VWe=o("imagegpt"),XWe=o(" \u2014 "),Vk=a("a"),zWe=o("ImageGPTConfig"),WWe=o(" (ImageGPT model)"),QWe=l(),cf=a("li"),fre=a("strong"),HWe=o("layoutlm"),UWe=o(" \u2014 "),Xk=a("a"),JWe=o("LayoutLMConfig"),YWe=o(" (LayoutLM model)"),KWe=l(),mf=a("li"),gre=a("strong"),ZWe=o("layoutlmv2"),eQe=o(" \u2014 "),zk=a("a"),oQe=o("LayoutLMv2Config"),rQe=o(" (LayoutLMv2 model)"),tQe=l(),ff=a("li"),hre=a("strong"),aQe=o("layoutlmv3"),nQe=o(" \u2014 "),Wk=a("a"),sQe=o("LayoutLMv3Config"),lQe=o(" (LayoutLMv3 model)"),iQe=l(),gf=a("li"),ure=a("strong"),dQe=o("led"),cQe=o(" \u2014 "),Qk=a("a"),mQe=o("LEDConfig"),fQe=o(" (LED model)"),gQe=l(),hf=a("li"),pre=a("strong"),hQe=o("longformer"),uQe=o(" \u2014 "),Hk=a("a"),pQe=o("LongformerConfig"),_Qe=o(" (Longformer model)"),bQe=l(),uf=a("li"),_re=a("strong"),vQe=o("luke"),FQe=o(" \u2014 "),Uk=a("a"),TQe=o("LukeConfig"),MQe=o(" (LUKE model)"),EQe=l(),pf=a("li"),bre=a("strong"),CQe=o("lxmert"),wQe=o(" \u2014 "),Jk=a("a"),AQe=o("LxmertConfig"),yQe=o(" (LXMERT model)"),LQe=l(),_f=a("li"),vre=a("strong"),xQe=o("m2m_100"),$Qe=o(" \u2014 "),Yk=a("a"),kQe=o("M2M100Config"),SQe=o(" (M2M100 model)"),RQe=l(),bf=a("li"),Fre=a("strong"),PQe=o("marian"),BQe=o(" \u2014 "),Kk=a("a"),IQe=o("MarianConfig"),NQe=o(" (Marian model)"),qQe=l(),vf=a("li"),Tre=a("strong"),jQe=o("maskformer"),DQe=o(" \u2014 "),Zk=a("a"),GQe=o("MaskFormerConfig"),OQe=o(" (MaskFormer model)"),VQe=l(),Ff=a("li"),Mre=a("strong"),XQe=o("mbart"),zQe=o(" \u2014 "),eS=a("a"),WQe=o("MBartConfig"),QQe=o(" (mBART model)"),HQe=l(),Tf=a("li"),Ere=a("strong"),UQe=o("megatron-bert"),JQe=o(" \u2014 "),oS=a("a"),YQe=o("MegatronBertConfig"),KQe=o(" (MegatronBert model)"),ZQe=l(),Mf=a("li"),Cre=a("strong"),eHe=o("mobilebert"),oHe=o(" \u2014 "),rS=a("a"),rHe=o("MobileBertConfig"),tHe=o(" (MobileBERT model)"),aHe=l(),Ef=a("li"),wre=a("strong"),nHe=o("mpnet"),sHe=o(" \u2014 "),tS=a("a"),lHe=o("MPNetConfig"),iHe=o(" (MPNet model)"),dHe=l(),Cf=a("li"),Are=a("strong"),cHe=o("mt5"),mHe=o(" \u2014 "),aS=a("a"),fHe=o("MT5Config"),gHe=o(" (mT5 model)"),hHe=l(),wf=a("li"),yre=a("strong"),uHe=o("nystromformer"),pHe=o(" \u2014 "),nS=a("a"),_He=o("NystromformerConfig"),bHe=o(" (Nystromformer model)"),vHe=l(),Af=a("li"),Lre=a("strong"),FHe=o("openai-gpt"),THe=o(" \u2014 "),sS=a("a"),MHe=o("OpenAIGPTConfig"),EHe=o(" (OpenAI GPT model)"),CHe=l(),yf=a("li"),xre=a("strong"),wHe=o("opt"),AHe=o(" \u2014 "),lS=a("a"),yHe=o("OPTConfig"),LHe=o(" (OPT model)"),xHe=l(),Lf=a("li"),$re=a("strong"),$He=o("pegasus"),kHe=o(" \u2014 "),iS=a("a"),SHe=o("PegasusConfig"),RHe=o(" (Pegasus model)"),PHe=l(),xf=a("li"),kre=a("strong"),BHe=o("perceiver"),IHe=o(" \u2014 "),dS=a("a"),NHe=o("PerceiverConfig"),qHe=o(" (Perceiver model)"),jHe=l(),$f=a("li"),Sre=a("strong"),DHe=o("plbart"),GHe=o(" \u2014 "),cS=a("a"),OHe=o("PLBartConfig"),VHe=o(" (PLBart model)"),XHe=l(),kf=a("li"),Rre=a("strong"),zHe=o("poolformer"),WHe=o(" \u2014 "),mS=a("a"),QHe=o("PoolFormerConfig"),HHe=o(" (PoolFormer model)"),UHe=l(),Sf=a("li"),Pre=a("strong"),JHe=o("prophetnet"),YHe=o(" \u2014 "),fS=a("a"),KHe=o("ProphetNetConfig"),ZHe=o(" (ProphetNet model)"),eUe=l(),Rf=a("li"),Bre=a("strong"),oUe=o("qdqbert"),rUe=o(" \u2014 "),gS=a("a"),tUe=o("QDQBertConfig"),aUe=o(" (QDQBert model)"),nUe=l(),Pf=a("li"),Ire=a("strong"),sUe=o("rag"),lUe=o(" \u2014 "),hS=a("a"),iUe=o("RagConfig"),dUe=o(" (RAG model)"),cUe=l(),Bf=a("li"),Nre=a("strong"),mUe=o("realm"),fUe=o(" \u2014 "),uS=a("a"),gUe=o("RealmConfig"),hUe=o(" (Realm model)"),uUe=l(),If=a("li"),qre=a("strong"),pUe=o("reformer"),_Ue=o(" \u2014 "),pS=a("a"),bUe=o("ReformerConfig"),vUe=o(" (Reformer model)"),FUe=l(),Nf=a("li"),jre=a("strong"),TUe=o("regnet"),MUe=o(" \u2014 "),_S=a("a"),EUe=o("RegNetConfig"),CUe=o(" (RegNet model)"),wUe=l(),qf=a("li"),Dre=a("strong"),AUe=o("rembert"),yUe=o(" \u2014 "),bS=a("a"),LUe=o("RemBertConfig"),xUe=o(" (RemBERT model)"),$Ue=l(),jf=a("li"),Gre=a("strong"),kUe=o("resnet"),SUe=o(" \u2014 "),vS=a("a"),RUe=o("ResNetConfig"),PUe=o(" (ResNet model)"),BUe=l(),Df=a("li"),Ore=a("strong"),IUe=o("retribert"),NUe=o(" \u2014 "),FS=a("a"),qUe=o("RetriBertConfig"),jUe=o(" (RetriBERT model)"),DUe=l(),Gf=a("li"),Vre=a("strong"),GUe=o("roberta"),OUe=o(" \u2014 "),TS=a("a"),VUe=o("RobertaConfig"),XUe=o(" (RoBERTa model)"),zUe=l(),Of=a("li"),Xre=a("strong"),WUe=o("roformer"),QUe=o(" \u2014 "),MS=a("a"),HUe=o("RoFormerConfig"),UUe=o(" (RoFormer model)"),JUe=l(),Vf=a("li"),zre=a("strong"),YUe=o("segformer"),KUe=o(" \u2014 "),ES=a("a"),ZUe=o("SegformerConfig"),eJe=o(" (SegFormer model)"),oJe=l(),Xf=a("li"),Wre=a("strong"),rJe=o("sew"),tJe=o(" \u2014 "),CS=a("a"),aJe=o("SEWConfig"),nJe=o(" (SEW model)"),sJe=l(),zf=a("li"),Qre=a("strong"),lJe=o("sew-d"),iJe=o(" \u2014 "),wS=a("a"),dJe=o("SEWDConfig"),cJe=o(" (SEW-D model)"),mJe=l(),Wf=a("li"),Hre=a("strong"),fJe=o("speech-encoder-decoder"),gJe=o(" \u2014 "),AS=a("a"),hJe=o("SpeechEncoderDecoderConfig"),uJe=o(" (Speech Encoder decoder model)"),pJe=l(),Qf=a("li"),Ure=a("strong"),_Je=o("speech_to_text"),bJe=o(" \u2014 "),yS=a("a"),vJe=o("Speech2TextConfig"),FJe=o(" (Speech2Text model)"),TJe=l(),Hf=a("li"),Jre=a("strong"),MJe=o("speech_to_text_2"),EJe=o(" \u2014 "),LS=a("a"),CJe=o("Speech2Text2Config"),wJe=o(" (Speech2Text2 model)"),AJe=l(),Uf=a("li"),Yre=a("strong"),yJe=o("splinter"),LJe=o(" \u2014 "),xS=a("a"),xJe=o("SplinterConfig"),$Je=o(" (Splinter model)"),kJe=l(),Jf=a("li"),Kre=a("strong"),SJe=o("squeezebert"),RJe=o(" \u2014 "),$S=a("a"),PJe=o("SqueezeBertConfig"),BJe=o(" (SqueezeBERT model)"),IJe=l(),Yf=a("li"),Zre=a("strong"),NJe=o("swin"),qJe=o(" \u2014 "),kS=a("a"),jJe=o("SwinConfig"),DJe=o(" (Swin model)"),GJe=l(),Kf=a("li"),ete=a("strong"),OJe=o("t5"),VJe=o(" \u2014 "),SS=a("a"),XJe=o("T5Config"),zJe=o(" (T5 model)"),WJe=l(),Zf=a("li"),ote=a("strong"),QJe=o("tapas"),HJe=o(" \u2014 "),RS=a("a"),UJe=o("TapasConfig"),JJe=o(" (TAPAS model)"),YJe=l(),eg=a("li"),rte=a("strong"),KJe=o("trajectory_transformer"),ZJe=o(" \u2014 "),PS=a("a"),eYe=o("TrajectoryTransformerConfig"),oYe=o(" (Trajectory Transformer model)"),rYe=l(),og=a("li"),tte=a("strong"),tYe=o("transfo-xl"),aYe=o(" \u2014 "),BS=a("a"),nYe=o("TransfoXLConfig"),sYe=o(" (Transformer-XL model)"),lYe=l(),rg=a("li"),ate=a("strong"),iYe=o("trocr"),dYe=o(" \u2014 "),IS=a("a"),cYe=o("TrOCRConfig"),mYe=o(" (TrOCR model)"),fYe=l(),tg=a("li"),nte=a("strong"),gYe=o("unispeech"),hYe=o(" \u2014 "),NS=a("a"),uYe=o("UniSpeechConfig"),pYe=o(" (UniSpeech model)"),_Ye=l(),ag=a("li"),ste=a("strong"),bYe=o("unispeech-sat"),vYe=o(" \u2014 "),qS=a("a"),FYe=o("UniSpeechSatConfig"),TYe=o(" (UniSpeechSat model)"),MYe=l(),ng=a("li"),lte=a("strong"),EYe=o("van"),CYe=o(" \u2014 "),jS=a("a"),wYe=o("VanConfig"),AYe=o(" (VAN model)"),yYe=l(),sg=a("li"),ite=a("strong"),LYe=o("vilt"),xYe=o(" \u2014 "),DS=a("a"),$Ye=o("ViltConfig"),kYe=o(" (ViLT model)"),SYe=l(),lg=a("li"),dte=a("strong"),RYe=o("vision-encoder-decoder"),PYe=o(" \u2014 "),GS=a("a"),BYe=o("VisionEncoderDecoderConfig"),IYe=o(" (Vision Encoder decoder model)"),NYe=l(),ig=a("li"),cte=a("strong"),qYe=o("vision-text-dual-encoder"),jYe=o(" \u2014 "),OS=a("a"),DYe=o("VisionTextDualEncoderConfig"),GYe=o(" (VisionTextDualEncoder model)"),OYe=l(),dg=a("li"),mte=a("strong"),VYe=o("visual_bert"),XYe=o(" \u2014 "),VS=a("a"),zYe=o("VisualBertConfig"),WYe=o(" (VisualBert model)"),QYe=l(),cg=a("li"),fte=a("strong"),HYe=o("vit"),UYe=o(" \u2014 "),XS=a("a"),JYe=o("ViTConfig"),YYe=o(" (ViT model)"),KYe=l(),mg=a("li"),gte=a("strong"),ZYe=o("vit_mae"),eKe=o(" \u2014 "),zS=a("a"),oKe=o("ViTMAEConfig"),rKe=o(" (ViTMAE model)"),tKe=l(),fg=a("li"),hte=a("strong"),aKe=o("wav2vec2"),nKe=o(" \u2014 "),WS=a("a"),sKe=o("Wav2Vec2Config"),lKe=o(" (Wav2Vec2 model)"),iKe=l(),gg=a("li"),ute=a("strong"),dKe=o("wav2vec2-conformer"),cKe=o(" \u2014 "),QS=a("a"),mKe=o("Wav2Vec2ConformerConfig"),fKe=o(" (Wav2Vec2-Conformer model)"),gKe=l(),hg=a("li"),pte=a("strong"),hKe=o("wavlm"),uKe=o(" \u2014 "),HS=a("a"),pKe=o("WavLMConfig"),_Ke=o(" (WavLM model)"),bKe=l(),ug=a("li"),_te=a("strong"),vKe=o("xglm"),FKe=o(" \u2014 "),US=a("a"),TKe=o("XGLMConfig"),MKe=o(" (XGLM model)"),EKe=l(),pg=a("li"),bte=a("strong"),CKe=o("xlm"),wKe=o(" \u2014 "),JS=a("a"),AKe=o("XLMConfig"),yKe=o(" (XLM model)"),LKe=l(),_g=a("li"),vte=a("strong"),xKe=o("xlm-prophetnet"),$Ke=o(" \u2014 "),YS=a("a"),kKe=o("XLMProphetNetConfig"),SKe=o(" (XLMProphetNet model)"),RKe=l(),bg=a("li"),Fte=a("strong"),PKe=o("xlm-roberta"),BKe=o(" \u2014 "),KS=a("a"),IKe=o("XLMRobertaConfig"),NKe=o(" (XLM-RoBERTa model)"),qKe=l(),vg=a("li"),Tte=a("strong"),jKe=o("xlm-roberta-xl"),DKe=o(" \u2014 "),ZS=a("a"),GKe=o("XLMRobertaXLConfig"),OKe=o(" (XLM-RoBERTa-XL model)"),VKe=l(),Fg=a("li"),Mte=a("strong"),XKe=o("xlnet"),zKe=o(" \u2014 "),eR=a("a"),WKe=o("XLNetConfig"),QKe=o(" (XLNet model)"),HKe=l(),Tg=a("li"),Ete=a("strong"),UKe=o("yolos"),JKe=o(" \u2014 "),oR=a("a"),YKe=o("YolosConfig"),KKe=o(" (YOLOS model)"),ZKe=l(),Mg=a("li"),Cte=a("strong"),eZe=o("yoso"),oZe=o(" \u2014 "),rR=a("a"),rZe=o("YosoConfig"),tZe=o(" (YOSO model)"),aZe=l(),F(Eg.$$.fragment),nZe=l(),Cg=a("div"),F(qy.$$.fragment),sZe=l(),wte=a("p"),lZe=o("Register a new configuration for this class."),Tqe=l(),Ti=a("h2"),wg=a("a"),Ate=a("span"),F(jy.$$.fragment),iZe=l(),yte=a("span"),dZe=o("AutoTokenizer"),Mqe=l(),wo=a("div"),F(Dy.$$.fragment),cZe=l(),Gy=a("p"),mZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tR=a("a"),fZe=o("AutoTokenizer.from_pretrained()"),gZe=o(" class method."),hZe=l(),Oy=a("p"),uZe=o("This class cannot be instantiated directly using "),Lte=a("code"),pZe=o("__init__()"),_Ze=o(" (throws an error)."),bZe=l(),Cr=a("div"),F(Vy.$$.fragment),vZe=l(),xte=a("p"),FZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TZe=l(),Aa=a("p"),MZe=o("The tokenizer class to instantiate is selected based on the "),$te=a("code"),EZe=o("model_type"),CZe=o(` property of the config object (either
passed as an argument or loaded from `),kte=a("code"),wZe=o("pretrained_model_name_or_path"),AZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=a("code"),yZe=o("pretrained_model_name_or_path"),LZe=o(":"),xZe=l(),k=a("ul"),Sn=a("li"),Rte=a("strong"),$Ze=o("albert"),kZe=o(" \u2014 "),aR=a("a"),SZe=o("AlbertTokenizer"),RZe=o(" or "),nR=a("a"),PZe=o("AlbertTokenizerFast"),BZe=o(" (ALBERT model)"),IZe=l(),Rn=a("li"),Pte=a("strong"),NZe=o("bart"),qZe=o(" \u2014 "),sR=a("a"),jZe=o("BartTokenizer"),DZe=o(" or "),lR=a("a"),GZe=o("BartTokenizerFast"),OZe=o(" (BART model)"),VZe=l(),Pn=a("li"),Bte=a("strong"),XZe=o("barthez"),zZe=o(" \u2014 "),iR=a("a"),WZe=o("BarthezTokenizer"),QZe=o(" or "),dR=a("a"),HZe=o("BarthezTokenizerFast"),UZe=o(" (BARThez model)"),JZe=l(),Ag=a("li"),Ite=a("strong"),YZe=o("bartpho"),KZe=o(" \u2014 "),cR=a("a"),ZZe=o("BartphoTokenizer"),eeo=o(" (BARTpho model)"),oeo=l(),Bn=a("li"),Nte=a("strong"),reo=o("bert"),teo=o(" \u2014 "),mR=a("a"),aeo=o("BertTokenizer"),neo=o(" or "),fR=a("a"),seo=o("BertTokenizerFast"),leo=o(" (BERT model)"),ieo=l(),yg=a("li"),qte=a("strong"),deo=o("bert-generation"),ceo=o(" \u2014 "),gR=a("a"),meo=o("BertGenerationTokenizer"),feo=o(" (Bert Generation model)"),geo=l(),Lg=a("li"),jte=a("strong"),heo=o("bert-japanese"),ueo=o(" \u2014 "),hR=a("a"),peo=o("BertJapaneseTokenizer"),_eo=o(" (BertJapanese model)"),beo=l(),xg=a("li"),Dte=a("strong"),veo=o("bertweet"),Feo=o(" \u2014 "),uR=a("a"),Teo=o("BertweetTokenizer"),Meo=o(" (Bertweet model)"),Eeo=l(),In=a("li"),Gte=a("strong"),Ceo=o("big_bird"),weo=o(" \u2014 "),pR=a("a"),Aeo=o("BigBirdTokenizer"),yeo=o(" or "),_R=a("a"),Leo=o("BigBirdTokenizerFast"),xeo=o(" (BigBird model)"),$eo=l(),Nn=a("li"),Ote=a("strong"),keo=o("bigbird_pegasus"),Seo=o(" \u2014 "),bR=a("a"),Reo=o("PegasusTokenizer"),Peo=o(" or "),vR=a("a"),Beo=o("PegasusTokenizerFast"),Ieo=o(" (BigBirdPegasus model)"),Neo=l(),qn=a("li"),Vte=a("strong"),qeo=o("blenderbot"),jeo=o(" \u2014 "),FR=a("a"),Deo=o("BlenderbotTokenizer"),Geo=o(" or "),TR=a("a"),Oeo=o("BlenderbotTokenizerFast"),Veo=o(" (Blenderbot model)"),Xeo=l(),$g=a("li"),Xte=a("strong"),zeo=o("blenderbot-small"),Weo=o(" \u2014 "),MR=a("a"),Qeo=o("BlenderbotSmallTokenizer"),Heo=o(" (BlenderbotSmall model)"),Ueo=l(),kg=a("li"),zte=a("strong"),Jeo=o("byt5"),Yeo=o(" \u2014 "),ER=a("a"),Keo=o("ByT5Tokenizer"),Zeo=o(" (ByT5 model)"),eoo=l(),jn=a("li"),Wte=a("strong"),ooo=o("camembert"),roo=o(" \u2014 "),CR=a("a"),too=o("CamembertTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("CamembertTokenizerFast"),soo=o(" (CamemBERT model)"),loo=l(),Sg=a("li"),Qte=a("strong"),ioo=o("canine"),doo=o(" \u2014 "),AR=a("a"),coo=o("CanineTokenizer"),moo=o(" (Canine model)"),foo=l(),Dn=a("li"),Hte=a("strong"),goo=o("clip"),hoo=o(" \u2014 "),yR=a("a"),uoo=o("CLIPTokenizer"),poo=o(" or "),LR=a("a"),_oo=o("CLIPTokenizerFast"),boo=o(" (CLIP model)"),voo=l(),Gn=a("li"),Ute=a("strong"),Foo=o("convbert"),Too=o(" \u2014 "),xR=a("a"),Moo=o("ConvBertTokenizer"),Eoo=o(" or "),$R=a("a"),Coo=o("ConvBertTokenizerFast"),woo=o(" (ConvBERT model)"),Aoo=l(),On=a("li"),Jte=a("strong"),yoo=o("cpm"),Loo=o(" \u2014 "),kR=a("a"),xoo=o("CpmTokenizer"),$oo=o(" or "),SR=a("a"),koo=o("CpmTokenizerFast"),Soo=o(" (CPM model)"),Roo=l(),Rg=a("li"),Yte=a("strong"),Poo=o("ctrl"),Boo=o(" \u2014 "),RR=a("a"),Ioo=o("CTRLTokenizer"),Noo=o(" (CTRL model)"),qoo=l(),Vn=a("li"),Kte=a("strong"),joo=o("data2vec-text"),Doo=o(" \u2014 "),PR=a("a"),Goo=o("RobertaTokenizer"),Ooo=o(" or "),BR=a("a"),Voo=o("RobertaTokenizerFast"),Xoo=o(" (Data2VecText model)"),zoo=l(),Xn=a("li"),Zte=a("strong"),Woo=o("deberta"),Qoo=o(" \u2014 "),IR=a("a"),Hoo=o("DebertaTokenizer"),Uoo=o(" or "),NR=a("a"),Joo=o("DebertaTokenizerFast"),Yoo=o(" (DeBERTa model)"),Koo=l(),zn=a("li"),eae=a("strong"),Zoo=o("deberta-v2"),ero=o(" \u2014 "),qR=a("a"),oro=o("DebertaV2Tokenizer"),rro=o(" or "),jR=a("a"),tro=o("DebertaV2TokenizerFast"),aro=o(" (DeBERTa-v2 model)"),nro=l(),Wn=a("li"),oae=a("strong"),sro=o("distilbert"),lro=o(" \u2014 "),DR=a("a"),iro=o("DistilBertTokenizer"),dro=o(" or "),GR=a("a"),cro=o("DistilBertTokenizerFast"),mro=o(" (DistilBERT model)"),fro=l(),Qn=a("li"),rae=a("strong"),gro=o("dpr"),hro=o(" \u2014 "),OR=a("a"),uro=o("DPRQuestionEncoderTokenizer"),pro=o(" or "),VR=a("a"),_ro=o("DPRQuestionEncoderTokenizerFast"),bro=o(" (DPR model)"),vro=l(),Hn=a("li"),tae=a("strong"),Fro=o("electra"),Tro=o(" \u2014 "),XR=a("a"),Mro=o("ElectraTokenizer"),Ero=o(" or "),zR=a("a"),Cro=o("ElectraTokenizerFast"),wro=o(" (ELECTRA model)"),Aro=l(),Pg=a("li"),aae=a("strong"),yro=o("flaubert"),Lro=o(" \u2014 "),WR=a("a"),xro=o("FlaubertTokenizer"),$ro=o(" (FlauBERT model)"),kro=l(),Un=a("li"),nae=a("strong"),Sro=o("fnet"),Rro=o(" \u2014 "),QR=a("a"),Pro=o("FNetTokenizer"),Bro=o(" or "),HR=a("a"),Iro=o("FNetTokenizerFast"),Nro=o(" (FNet model)"),qro=l(),Bg=a("li"),sae=a("strong"),jro=o("fsmt"),Dro=o(" \u2014 "),UR=a("a"),Gro=o("FSMTTokenizer"),Oro=o(" (FairSeq Machine-Translation model)"),Vro=l(),Jn=a("li"),lae=a("strong"),Xro=o("funnel"),zro=o(" \u2014 "),JR=a("a"),Wro=o("FunnelTokenizer"),Qro=o(" or "),YR=a("a"),Hro=o("FunnelTokenizerFast"),Uro=o(" (Funnel Transformer model)"),Jro=l(),Yn=a("li"),iae=a("strong"),Yro=o("gpt2"),Kro=o(" \u2014 "),KR=a("a"),Zro=o("GPT2Tokenizer"),eto=o(" or "),ZR=a("a"),oto=o("GPT2TokenizerFast"),rto=o(" (OpenAI GPT-2 model)"),tto=l(),Kn=a("li"),dae=a("strong"),ato=o("gpt_neo"),nto=o(" \u2014 "),eP=a("a"),sto=o("GPT2Tokenizer"),lto=o(" or "),oP=a("a"),ito=o("GPT2TokenizerFast"),dto=o(" (GPT Neo model)"),cto=l(),Ig=a("li"),cae=a("strong"),mto=o("gpt_neox"),fto=o(" \u2014 "),rP=a("a"),gto=o("GPTNeoXTokenizerFast"),hto=o(" (GPT NeoX model)"),uto=l(),Zn=a("li"),mae=a("strong"),pto=o("gptj"),_to=o(" \u2014 "),tP=a("a"),bto=o("GPT2Tokenizer"),vto=o(" or "),aP=a("a"),Fto=o("GPT2TokenizerFast"),Tto=o(" (GPT-J model)"),Mto=l(),es=a("li"),fae=a("strong"),Eto=o("herbert"),Cto=o(" \u2014 "),nP=a("a"),wto=o("HerbertTokenizer"),Ato=o(" or "),sP=a("a"),yto=o("HerbertTokenizerFast"),Lto=o(" (HerBERT model)"),xto=l(),Ng=a("li"),gae=a("strong"),$to=o("hubert"),kto=o(" \u2014 "),lP=a("a"),Sto=o("Wav2Vec2CTCTokenizer"),Rto=o(" (Hubert model)"),Pto=l(),os=a("li"),hae=a("strong"),Bto=o("ibert"),Ito=o(" \u2014 "),iP=a("a"),Nto=o("RobertaTokenizer"),qto=o(" or "),dP=a("a"),jto=o("RobertaTokenizerFast"),Dto=o(" (I-BERT model)"),Gto=l(),rs=a("li"),uae=a("strong"),Oto=o("layoutlm"),Vto=o(" \u2014 "),cP=a("a"),Xto=o("LayoutLMTokenizer"),zto=o(" or "),mP=a("a"),Wto=o("LayoutLMTokenizerFast"),Qto=o(" (LayoutLM model)"),Hto=l(),ts=a("li"),pae=a("strong"),Uto=o("layoutlmv2"),Jto=o(" \u2014 "),fP=a("a"),Yto=o("LayoutLMv2Tokenizer"),Kto=o(" or "),gP=a("a"),Zto=o("LayoutLMv2TokenizerFast"),eao=o(" (LayoutLMv2 model)"),oao=l(),as=a("li"),_ae=a("strong"),rao=o("layoutlmv3"),tao=o(" \u2014 "),hP=a("a"),aao=o("LayoutLMv3Tokenizer"),nao=o(" or "),uP=a("a"),sao=o("LayoutLMv3TokenizerFast"),lao=o(" (LayoutLMv3 model)"),iao=l(),ns=a("li"),bae=a("strong"),dao=o("layoutxlm"),cao=o(" \u2014 "),pP=a("a"),mao=o("LayoutXLMTokenizer"),fao=o(" or "),_P=a("a"),gao=o("LayoutXLMTokenizerFast"),hao=o(" (LayoutXLM model)"),uao=l(),ss=a("li"),vae=a("strong"),pao=o("led"),_ao=o(" \u2014 "),bP=a("a"),bao=o("LEDTokenizer"),vao=o(" or "),vP=a("a"),Fao=o("LEDTokenizerFast"),Tao=o(" (LED model)"),Mao=l(),ls=a("li"),Fae=a("strong"),Eao=o("longformer"),Cao=o(" \u2014 "),FP=a("a"),wao=o("LongformerTokenizer"),Aao=o(" or "),TP=a("a"),yao=o("LongformerTokenizerFast"),Lao=o(" (Longformer model)"),xao=l(),qg=a("li"),Tae=a("strong"),$ao=o("luke"),kao=o(" \u2014 "),MP=a("a"),Sao=o("LukeTokenizer"),Rao=o(" (LUKE model)"),Pao=l(),is=a("li"),Mae=a("strong"),Bao=o("lxmert"),Iao=o(" \u2014 "),EP=a("a"),Nao=o("LxmertTokenizer"),qao=o(" or "),CP=a("a"),jao=o("LxmertTokenizerFast"),Dao=o(" (LXMERT model)"),Gao=l(),jg=a("li"),Eae=a("strong"),Oao=o("m2m_100"),Vao=o(" \u2014 "),wP=a("a"),Xao=o("M2M100Tokenizer"),zao=o(" (M2M100 model)"),Wao=l(),Dg=a("li"),Cae=a("strong"),Qao=o("marian"),Hao=o(" \u2014 "),AP=a("a"),Uao=o("MarianTokenizer"),Jao=o(" (Marian model)"),Yao=l(),ds=a("li"),wae=a("strong"),Kao=o("mbart"),Zao=o(" \u2014 "),yP=a("a"),eno=o("MBartTokenizer"),ono=o(" or "),LP=a("a"),rno=o("MBartTokenizerFast"),tno=o(" (mBART model)"),ano=l(),cs=a("li"),Aae=a("strong"),nno=o("mbart50"),sno=o(" \u2014 "),xP=a("a"),lno=o("MBart50Tokenizer"),ino=o(" or "),$P=a("a"),dno=o("MBart50TokenizerFast"),cno=o(" (mBART-50 model)"),mno=l(),ms=a("li"),yae=a("strong"),fno=o("megatron-bert"),gno=o(" \u2014 "),kP=a("a"),hno=o("BertTokenizer"),uno=o(" or "),SP=a("a"),pno=o("BertTokenizerFast"),_no=o(" (MegatronBert model)"),bno=l(),Gg=a("li"),Lae=a("strong"),vno=o("mluke"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("MLukeTokenizer"),Mno=o(" (mLUKE model)"),Eno=l(),fs=a("li"),xae=a("strong"),Cno=o("mobilebert"),wno=o(" \u2014 "),PP=a("a"),Ano=o("MobileBertTokenizer"),yno=o(" or "),BP=a("a"),Lno=o("MobileBertTokenizerFast"),xno=o(" (MobileBERT model)"),$no=l(),gs=a("li"),$ae=a("strong"),kno=o("mpnet"),Sno=o(" \u2014 "),IP=a("a"),Rno=o("MPNetTokenizer"),Pno=o(" or "),NP=a("a"),Bno=o("MPNetTokenizerFast"),Ino=o(" (MPNet model)"),Nno=l(),hs=a("li"),kae=a("strong"),qno=o("mt5"),jno=o(" \u2014 "),qP=a("a"),Dno=o("MT5Tokenizer"),Gno=o(" or "),jP=a("a"),Ono=o("MT5TokenizerFast"),Vno=o(" (mT5 model)"),Xno=l(),us=a("li"),Sae=a("strong"),zno=o("nystromformer"),Wno=o(" \u2014 "),DP=a("a"),Qno=o("AlbertTokenizer"),Hno=o(" or "),GP=a("a"),Uno=o("AlbertTokenizerFast"),Jno=o(" (Nystromformer model)"),Yno=l(),ps=a("li"),Rae=a("strong"),Kno=o("openai-gpt"),Zno=o(" \u2014 "),OP=a("a"),eso=o("OpenAIGPTTokenizer"),oso=o(" or "),VP=a("a"),rso=o("OpenAIGPTTokenizerFast"),tso=o(" (OpenAI GPT model)"),aso=l(),Og=a("li"),Pae=a("strong"),nso=o("opt"),sso=o(" \u2014 "),XP=a("a"),lso=o("GPT2Tokenizer"),iso=o(" (OPT model)"),dso=l(),_s=a("li"),Bae=a("strong"),cso=o("pegasus"),mso=o(" \u2014 "),zP=a("a"),fso=o("PegasusTokenizer"),gso=o(" or "),WP=a("a"),hso=o("PegasusTokenizerFast"),uso=o(" (Pegasus model)"),pso=l(),Vg=a("li"),Iae=a("strong"),_so=o("perceiver"),bso=o(" \u2014 "),QP=a("a"),vso=o("PerceiverTokenizer"),Fso=o(" (Perceiver model)"),Tso=l(),Xg=a("li"),Nae=a("strong"),Mso=o("phobert"),Eso=o(" \u2014 "),HP=a("a"),Cso=o("PhobertTokenizer"),wso=o(" (PhoBERT model)"),Aso=l(),zg=a("li"),qae=a("strong"),yso=o("plbart"),Lso=o(" \u2014 "),UP=a("a"),xso=o("PLBartTokenizer"),$so=o(" (PLBart model)"),kso=l(),Wg=a("li"),jae=a("strong"),Sso=o("prophetnet"),Rso=o(" \u2014 "),JP=a("a"),Pso=o("ProphetNetTokenizer"),Bso=o(" (ProphetNet model)"),Iso=l(),bs=a("li"),Dae=a("strong"),Nso=o("qdqbert"),qso=o(" \u2014 "),YP=a("a"),jso=o("BertTokenizer"),Dso=o(" or "),KP=a("a"),Gso=o("BertTokenizerFast"),Oso=o(" (QDQBert model)"),Vso=l(),Qg=a("li"),Gae=a("strong"),Xso=o("rag"),zso=o(" \u2014 "),ZP=a("a"),Wso=o("RagTokenizer"),Qso=o(" (RAG model)"),Hso=l(),vs=a("li"),Oae=a("strong"),Uso=o("realm"),Jso=o(" \u2014 "),eB=a("a"),Yso=o("RealmTokenizer"),Kso=o(" or "),oB=a("a"),Zso=o("RealmTokenizerFast"),elo=o(" (Realm model)"),olo=l(),Fs=a("li"),Vae=a("strong"),rlo=o("reformer"),tlo=o(" \u2014 "),rB=a("a"),alo=o("ReformerTokenizer"),nlo=o(" or "),tB=a("a"),slo=o("ReformerTokenizerFast"),llo=o(" (Reformer model)"),ilo=l(),Ts=a("li"),Xae=a("strong"),dlo=o("rembert"),clo=o(" \u2014 "),aB=a("a"),mlo=o("RemBertTokenizer"),flo=o(" or "),nB=a("a"),glo=o("RemBertTokenizerFast"),hlo=o(" (RemBERT model)"),ulo=l(),Ms=a("li"),zae=a("strong"),plo=o("retribert"),_lo=o(" \u2014 "),sB=a("a"),blo=o("RetriBertTokenizer"),vlo=o(" or "),lB=a("a"),Flo=o("RetriBertTokenizerFast"),Tlo=o(" (RetriBERT model)"),Mlo=l(),Es=a("li"),Wae=a("strong"),Elo=o("roberta"),Clo=o(" \u2014 "),iB=a("a"),wlo=o("RobertaTokenizer"),Alo=o(" or "),dB=a("a"),ylo=o("RobertaTokenizerFast"),Llo=o(" (RoBERTa model)"),xlo=l(),Cs=a("li"),Qae=a("strong"),$lo=o("roformer"),klo=o(" \u2014 "),cB=a("a"),Slo=o("RoFormerTokenizer"),Rlo=o(" or "),mB=a("a"),Plo=o("RoFormerTokenizerFast"),Blo=o(" (RoFormer model)"),Ilo=l(),Hg=a("li"),Hae=a("strong"),Nlo=o("speech_to_text"),qlo=o(" \u2014 "),fB=a("a"),jlo=o("Speech2TextTokenizer"),Dlo=o(" (Speech2Text model)"),Glo=l(),Ug=a("li"),Uae=a("strong"),Olo=o("speech_to_text_2"),Vlo=o(" \u2014 "),gB=a("a"),Xlo=o("Speech2Text2Tokenizer"),zlo=o(" (Speech2Text2 model)"),Wlo=l(),ws=a("li"),Jae=a("strong"),Qlo=o("splinter"),Hlo=o(" \u2014 "),hB=a("a"),Ulo=o("SplinterTokenizer"),Jlo=o(" or "),uB=a("a"),Ylo=o("SplinterTokenizerFast"),Klo=o(" (Splinter model)"),Zlo=l(),As=a("li"),Yae=a("strong"),eio=o("squeezebert"),oio=o(" \u2014 "),pB=a("a"),rio=o("SqueezeBertTokenizer"),tio=o(" or "),_B=a("a"),aio=o("SqueezeBertTokenizerFast"),nio=o(" (SqueezeBERT model)"),sio=l(),ys=a("li"),Kae=a("strong"),lio=o("t5"),iio=o(" \u2014 "),bB=a("a"),dio=o("T5Tokenizer"),cio=o(" or "),vB=a("a"),mio=o("T5TokenizerFast"),fio=o(" (T5 model)"),gio=l(),Jg=a("li"),Zae=a("strong"),hio=o("tapas"),uio=o(" \u2014 "),FB=a("a"),pio=o("TapasTokenizer"),_io=o(" (TAPAS model)"),bio=l(),Yg=a("li"),ene=a("strong"),vio=o("tapex"),Fio=o(" \u2014 "),TB=a("a"),Tio=o("TapexTokenizer"),Mio=o(" (TAPEX model)"),Eio=l(),Kg=a("li"),one=a("strong"),Cio=o("transfo-xl"),wio=o(" \u2014 "),MB=a("a"),Aio=o("TransfoXLTokenizer"),yio=o(" (Transformer-XL model)"),Lio=l(),Ls=a("li"),rne=a("strong"),xio=o("visual_bert"),$io=o(" \u2014 "),EB=a("a"),kio=o("BertTokenizer"),Sio=o(" or "),CB=a("a"),Rio=o("BertTokenizerFast"),Pio=o(" (VisualBert model)"),Bio=l(),Zg=a("li"),tne=a("strong"),Iio=o("wav2vec2"),Nio=o(" \u2014 "),wB=a("a"),qio=o("Wav2Vec2CTCTokenizer"),jio=o(" (Wav2Vec2 model)"),Dio=l(),eh=a("li"),ane=a("strong"),Gio=o("wav2vec2-conformer"),Oio=o(" \u2014 "),AB=a("a"),Vio=o("Wav2Vec2CTCTokenizer"),Xio=o(" (Wav2Vec2-Conformer model)"),zio=l(),oh=a("li"),nne=a("strong"),Wio=o("wav2vec2_phoneme"),Qio=o(" \u2014 "),yB=a("a"),Hio=o("Wav2Vec2PhonemeCTCTokenizer"),Uio=o(" (Wav2Vec2Phoneme model)"),Jio=l(),xs=a("li"),sne=a("strong"),Yio=o("xglm"),Kio=o(" \u2014 "),LB=a("a"),Zio=o("XGLMTokenizer"),edo=o(" or "),xB=a("a"),odo=o("XGLMTokenizerFast"),rdo=o(" (XGLM model)"),tdo=l(),rh=a("li"),lne=a("strong"),ado=o("xlm"),ndo=o(" \u2014 "),$B=a("a"),sdo=o("XLMTokenizer"),ldo=o(" (XLM model)"),ido=l(),th=a("li"),ine=a("strong"),ddo=o("xlm-prophetnet"),cdo=o(" \u2014 "),kB=a("a"),mdo=o("XLMProphetNetTokenizer"),fdo=o(" (XLMProphetNet model)"),gdo=l(),$s=a("li"),dne=a("strong"),hdo=o("xlm-roberta"),udo=o(" \u2014 "),SB=a("a"),pdo=o("XLMRobertaTokenizer"),_do=o(" or "),RB=a("a"),bdo=o("XLMRobertaTokenizerFast"),vdo=o(" (XLM-RoBERTa model)"),Fdo=l(),ks=a("li"),cne=a("strong"),Tdo=o("xlm-roberta-xl"),Mdo=o(" \u2014 "),PB=a("a"),Edo=o("RobertaTokenizer"),Cdo=o(" or "),BB=a("a"),wdo=o("RobertaTokenizerFast"),Ado=o(" (XLM-RoBERTa-XL model)"),ydo=l(),Ss=a("li"),mne=a("strong"),Ldo=o("xlnet"),xdo=o(" \u2014 "),IB=a("a"),$do=o("XLNetTokenizer"),kdo=o(" or "),NB=a("a"),Sdo=o("XLNetTokenizerFast"),Rdo=o(" (XLNet model)"),Pdo=l(),Rs=a("li"),fne=a("strong"),Bdo=o("yoso"),Ido=o(" \u2014 "),qB=a("a"),Ndo=o("AlbertTokenizer"),qdo=o(" or "),jB=a("a"),jdo=o("AlbertTokenizerFast"),Ddo=o(" (YOSO model)"),Gdo=l(),F(ah.$$.fragment),Odo=l(),nh=a("div"),F(Xy.$$.fragment),Vdo=l(),gne=a("p"),Xdo=o("Register a new tokenizer in this mapping."),Eqe=l(),Mi=a("h2"),sh=a("a"),hne=a("span"),F(zy.$$.fragment),zdo=l(),une=a("span"),Wdo=o("AutoFeatureExtractor"),Cqe=l(),Ao=a("div"),F(Wy.$$.fragment),Qdo=l(),Qy=a("p"),Hdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DB=a("a"),Udo=o("AutoFeatureExtractor.from_pretrained()"),Jdo=o(" class method."),Ydo=l(),Hy=a("p"),Kdo=o("This class cannot be instantiated directly using "),pne=a("code"),Zdo=o("__init__()"),eco=o(" (throws an error)."),oco=l(),He=a("div"),F(Uy.$$.fragment),rco=l(),_ne=a("p"),tco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aco=l(),ya=a("p"),nco=o("The feature extractor class to instantiate is selected based on the "),bne=a("code"),sco=o("model_type"),lco=o(` property of the config object
(either passed as an argument or loaded from `),vne=a("code"),ico=o("pretrained_model_name_or_path"),dco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fne=a("code"),cco=o("pretrained_model_name_or_path"),mco=o(":"),fco=l(),Y=a("ul"),lh=a("li"),Tne=a("strong"),gco=o("beit"),hco=o(" \u2014 "),GB=a("a"),uco=o("BeitFeatureExtractor"),pco=o(" (BEiT model)"),_co=l(),ih=a("li"),Mne=a("strong"),bco=o("clip"),vco=o(" \u2014 "),OB=a("a"),Fco=o("CLIPFeatureExtractor"),Tco=o(" (CLIP model)"),Mco=l(),dh=a("li"),Ene=a("strong"),Eco=o("convnext"),Cco=o(" \u2014 "),VB=a("a"),wco=o("ConvNextFeatureExtractor"),Aco=o(" (ConvNext model)"),yco=l(),ch=a("li"),Cne=a("strong"),Lco=o("cvt"),xco=o(" \u2014 "),XB=a("a"),$co=o("ConvNextFeatureExtractor"),kco=o(" (CvT model)"),Sco=l(),mh=a("li"),wne=a("strong"),Rco=o("data2vec-audio"),Pco=o(" \u2014 "),zB=a("a"),Bco=o("Wav2Vec2FeatureExtractor"),Ico=o(" (Data2VecAudio model)"),Nco=l(),fh=a("li"),Ane=a("strong"),qco=o("data2vec-vision"),jco=o(" \u2014 "),WB=a("a"),Dco=o("BeitFeatureExtractor"),Gco=o(" (Data2VecVision model)"),Oco=l(),gh=a("li"),yne=a("strong"),Vco=o("deit"),Xco=o(" \u2014 "),QB=a("a"),zco=o("DeiTFeatureExtractor"),Wco=o(" (DeiT model)"),Qco=l(),hh=a("li"),Lne=a("strong"),Hco=o("detr"),Uco=o(" \u2014 "),HB=a("a"),Jco=o("DetrFeatureExtractor"),Yco=o(" (DETR model)"),Kco=l(),uh=a("li"),xne=a("strong"),Zco=o("dpt"),emo=o(" \u2014 "),UB=a("a"),omo=o("DPTFeatureExtractor"),rmo=o(" (DPT model)"),tmo=l(),ph=a("li"),$ne=a("strong"),amo=o("flava"),nmo=o(" \u2014 "),JB=a("a"),smo=o("FlavaFeatureExtractor"),lmo=o(" (Flava model)"),imo=l(),_h=a("li"),kne=a("strong"),dmo=o("glpn"),cmo=o(" \u2014 "),YB=a("a"),mmo=o("GLPNFeatureExtractor"),fmo=o(" (GLPN model)"),gmo=l(),bh=a("li"),Sne=a("strong"),hmo=o("hubert"),umo=o(" \u2014 "),KB=a("a"),pmo=o("Wav2Vec2FeatureExtractor"),_mo=o(" (Hubert model)"),bmo=l(),vh=a("li"),Rne=a("strong"),vmo=o("imagegpt"),Fmo=o(" \u2014 "),ZB=a("a"),Tmo=o("ImageGPTFeatureExtractor"),Mmo=o(" (ImageGPT model)"),Emo=l(),Fh=a("li"),Pne=a("strong"),Cmo=o("layoutlmv2"),wmo=o(" \u2014 "),eI=a("a"),Amo=o("LayoutLMv2FeatureExtractor"),ymo=o(" (LayoutLMv2 model)"),Lmo=l(),Th=a("li"),Bne=a("strong"),xmo=o("layoutlmv3"),$mo=o(" \u2014 "),oI=a("a"),kmo=o("LayoutLMv3FeatureExtractor"),Smo=o(" (LayoutLMv3 model)"),Rmo=l(),Mh=a("li"),Ine=a("strong"),Pmo=o("maskformer"),Bmo=o(" \u2014 "),rI=a("a"),Imo=o("MaskFormerFeatureExtractor"),Nmo=o(" (MaskFormer model)"),qmo=l(),Eh=a("li"),Nne=a("strong"),jmo=o("perceiver"),Dmo=o(" \u2014 "),tI=a("a"),Gmo=o("PerceiverFeatureExtractor"),Omo=o(" (Perceiver model)"),Vmo=l(),Ch=a("li"),qne=a("strong"),Xmo=o("poolformer"),zmo=o(" \u2014 "),aI=a("a"),Wmo=o("PoolFormerFeatureExtractor"),Qmo=o(" (PoolFormer model)"),Hmo=l(),wh=a("li"),jne=a("strong"),Umo=o("regnet"),Jmo=o(" \u2014 "),nI=a("a"),Ymo=o("ConvNextFeatureExtractor"),Kmo=o(" (RegNet model)"),Zmo=l(),Ah=a("li"),Dne=a("strong"),efo=o("resnet"),ofo=o(" \u2014 "),sI=a("a"),rfo=o("ConvNextFeatureExtractor"),tfo=o(" (ResNet model)"),afo=l(),yh=a("li"),Gne=a("strong"),nfo=o("segformer"),sfo=o(" \u2014 "),lI=a("a"),lfo=o("SegformerFeatureExtractor"),ifo=o(" (SegFormer model)"),dfo=l(),Lh=a("li"),One=a("strong"),cfo=o("speech_to_text"),mfo=o(" \u2014 "),iI=a("a"),ffo=o("Speech2TextFeatureExtractor"),gfo=o(" (Speech2Text model)"),hfo=l(),xh=a("li"),Vne=a("strong"),ufo=o("swin"),pfo=o(" \u2014 "),dI=a("a"),_fo=o("ViTFeatureExtractor"),bfo=o(" (Swin model)"),vfo=l(),$h=a("li"),Xne=a("strong"),Ffo=o("van"),Tfo=o(" \u2014 "),cI=a("a"),Mfo=o("ConvNextFeatureExtractor"),Efo=o(" (VAN model)"),Cfo=l(),kh=a("li"),zne=a("strong"),wfo=o("vit"),Afo=o(" \u2014 "),mI=a("a"),yfo=o("ViTFeatureExtractor"),Lfo=o(" (ViT model)"),xfo=l(),Sh=a("li"),Wne=a("strong"),$fo=o("vit_mae"),kfo=o(" \u2014 "),fI=a("a"),Sfo=o("ViTFeatureExtractor"),Rfo=o(" (ViTMAE model)"),Pfo=l(),Rh=a("li"),Qne=a("strong"),Bfo=o("wav2vec2"),Ifo=o(" \u2014 "),gI=a("a"),Nfo=o("Wav2Vec2FeatureExtractor"),qfo=o(" (Wav2Vec2 model)"),jfo=l(),Ph=a("li"),Hne=a("strong"),Dfo=o("wav2vec2-conformer"),Gfo=o(" \u2014 "),hI=a("a"),Ofo=o("Wav2Vec2FeatureExtractor"),Vfo=o(" (Wav2Vec2-Conformer model)"),Xfo=l(),Bh=a("li"),Une=a("strong"),zfo=o("yolos"),Wfo=o(" \u2014 "),uI=a("a"),Qfo=o("YolosFeatureExtractor"),Hfo=o(" (YOLOS model)"),Ufo=l(),F(Ih.$$.fragment),Jfo=l(),F(Nh.$$.fragment),Yfo=l(),qh=a("div"),F(Jy.$$.fragment),Kfo=l(),Jne=a("p"),Zfo=o("Register a new feature extractor for this class."),wqe=l(),Ei=a("h2"),jh=a("a"),Yne=a("span"),F(Yy.$$.fragment),ego=l(),Kne=a("span"),ogo=o("AutoProcessor"),Aqe=l(),yo=a("div"),F(Ky.$$.fragment),rgo=l(),Zy=a("p"),tgo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pI=a("a"),ago=o("AutoProcessor.from_pretrained()"),ngo=o(" class method."),sgo=l(),eL=a("p"),lgo=o("This class cannot be instantiated directly using "),Zne=a("code"),igo=o("__init__()"),dgo=o(" (throws an error)."),cgo=l(),Ue=a("div"),F(oL.$$.fragment),mgo=l(),ese=a("p"),fgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ggo=l(),Ci=a("p"),hgo=o("The processor class to instantiate is selected based on the "),ose=a("code"),ugo=o("model_type"),pgo=o(` property of the config object (either
passed as an argument or loaded from `),rse=a("code"),_go=o("pretrained_model_name_or_path"),bgo=o(" if possible):"),vgo=l(),he=a("ul"),Dh=a("li"),tse=a("strong"),Fgo=o("clip"),Tgo=o(" \u2014 "),_I=a("a"),Mgo=o("CLIPProcessor"),Ego=o(" (CLIP model)"),Cgo=l(),Gh=a("li"),ase=a("strong"),wgo=o("flava"),Ago=o(" \u2014 "),nse=a("code"),ygo=o("FLAVAProcessor"),Lgo=o(" (Flava model)"),xgo=l(),Oh=a("li"),sse=a("strong"),$go=o("layoutlmv2"),kgo=o(" \u2014 "),bI=a("a"),Sgo=o("LayoutLMv2Processor"),Rgo=o(" (LayoutLMv2 model)"),Pgo=l(),Vh=a("li"),lse=a("strong"),Bgo=o("layoutlmv3"),Igo=o(" \u2014 "),vI=a("a"),Ngo=o("LayoutLMv3Processor"),qgo=o(" (LayoutLMv3 model)"),jgo=l(),Xh=a("li"),ise=a("strong"),Dgo=o("layoutxlm"),Ggo=o(" \u2014 "),FI=a("a"),Ogo=o("LayoutXLMProcessor"),Vgo=o(" (LayoutXLM model)"),Xgo=l(),zh=a("li"),dse=a("strong"),zgo=o("sew"),Wgo=o(" \u2014 "),TI=a("a"),Qgo=o("Wav2Vec2Processor"),Hgo=o(" (SEW model)"),Ugo=l(),Wh=a("li"),cse=a("strong"),Jgo=o("sew-d"),Ygo=o(" \u2014 "),MI=a("a"),Kgo=o("Wav2Vec2Processor"),Zgo=o(" (SEW-D model)"),eho=l(),Qh=a("li"),mse=a("strong"),oho=o("speech_to_text"),rho=o(" \u2014 "),EI=a("a"),tho=o("Speech2TextProcessor"),aho=o(" (Speech2Text model)"),nho=l(),Hh=a("li"),fse=a("strong"),sho=o("speech_to_text_2"),lho=o(" \u2014 "),CI=a("a"),iho=o("Speech2Text2Processor"),dho=o(" (Speech2Text2 model)"),cho=l(),Uh=a("li"),gse=a("strong"),mho=o("trocr"),fho=o(" \u2014 "),wI=a("a"),gho=o("TrOCRProcessor"),hho=o(" (TrOCR model)"),uho=l(),Jh=a("li"),hse=a("strong"),pho=o("unispeech"),_ho=o(" \u2014 "),AI=a("a"),bho=o("Wav2Vec2Processor"),vho=o(" (UniSpeech model)"),Fho=l(),Yh=a("li"),use=a("strong"),Tho=o("unispeech-sat"),Mho=o(" \u2014 "),yI=a("a"),Eho=o("Wav2Vec2Processor"),Cho=o(" (UniSpeechSat model)"),who=l(),Kh=a("li"),pse=a("strong"),Aho=o("vilt"),yho=o(" \u2014 "),LI=a("a"),Lho=o("ViltProcessor"),xho=o(" (ViLT model)"),$ho=l(),Zh=a("li"),_se=a("strong"),kho=o("vision-text-dual-encoder"),Sho=o(" \u2014 "),xI=a("a"),Rho=o("VisionTextDualEncoderProcessor"),Pho=o(" (VisionTextDualEncoder model)"),Bho=l(),eu=a("li"),bse=a("strong"),Iho=o("wav2vec2"),Nho=o(" \u2014 "),$I=a("a"),qho=o("Wav2Vec2Processor"),jho=o(" (Wav2Vec2 model)"),Dho=l(),ou=a("li"),vse=a("strong"),Gho=o("wav2vec2-conformer"),Oho=o(" \u2014 "),kI=a("a"),Vho=o("Wav2Vec2Processor"),Xho=o(" (Wav2Vec2-Conformer model)"),zho=l(),ru=a("li"),Fse=a("strong"),Who=o("wavlm"),Qho=o(" \u2014 "),SI=a("a"),Hho=o("Wav2Vec2Processor"),Uho=o(" (WavLM model)"),Jho=l(),F(tu.$$.fragment),Yho=l(),F(au.$$.fragment),Kho=l(),nu=a("div"),F(rL.$$.fragment),Zho=l(),Tse=a("p"),euo=o("Register a new processor for this class."),yqe=l(),wi=a("h2"),su=a("a"),Mse=a("span"),F(tL.$$.fragment),ouo=l(),Ese=a("span"),ruo=o("AutoModel"),Lqe=l(),Lo=a("div"),F(aL.$$.fragment),tuo=l(),Ai=a("p"),auo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RI=a("a"),nuo=o("from_pretrained()"),suo=o(" class method or the "),PI=a("a"),luo=o("from_config()"),iuo=o(` class
method.`),duo=l(),nL=a("p"),cuo=o("This class cannot be instantiated directly using "),Cse=a("code"),muo=o("__init__()"),fuo=o(" (throws an error)."),guo=l(),tt=a("div"),F(sL.$$.fragment),huo=l(),wse=a("p"),uuo=o("Instantiates one of the base model classes of the library from a configuration."),puo=l(),yi=a("p"),_uo=o(`Note:
Loading a model from its configuration file does `),Ase=a("strong"),buo=o("not"),vuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BI=a("a"),Fuo=o("from_pretrained()"),Tuo=o(" to load the model weights."),Muo=l(),F(lu.$$.fragment),Euo=l(),Je=a("div"),F(lL.$$.fragment),Cuo=l(),yse=a("p"),wuo=o("Instantiate one of the base model classes of the library from a pretrained model."),Auo=l(),La=a("p"),yuo=o("The model class to instantiate is selected based on the "),Lse=a("code"),Luo=o("model_type"),xuo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),$uo=o("pretrained_model_name_or_path"),kuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),Suo=o("pretrained_model_name_or_path"),Ruo=o(":"),Puo=l(),x=a("ul"),iu=a("li"),kse=a("strong"),Buo=o("albert"),Iuo=o(" \u2014 "),II=a("a"),Nuo=o("AlbertModel"),quo=o(" (ALBERT model)"),juo=l(),du=a("li"),Sse=a("strong"),Duo=o("bart"),Guo=o(" \u2014 "),NI=a("a"),Ouo=o("BartModel"),Vuo=o(" (BART model)"),Xuo=l(),cu=a("li"),Rse=a("strong"),zuo=o("beit"),Wuo=o(" \u2014 "),qI=a("a"),Quo=o("BeitModel"),Huo=o(" (BEiT model)"),Uuo=l(),mu=a("li"),Pse=a("strong"),Juo=o("bert"),Yuo=o(" \u2014 "),jI=a("a"),Kuo=o("BertModel"),Zuo=o(" (BERT model)"),epo=l(),fu=a("li"),Bse=a("strong"),opo=o("bert-generation"),rpo=o(" \u2014 "),DI=a("a"),tpo=o("BertGenerationEncoder"),apo=o(" (Bert Generation model)"),npo=l(),gu=a("li"),Ise=a("strong"),spo=o("big_bird"),lpo=o(" \u2014 "),GI=a("a"),ipo=o("BigBirdModel"),dpo=o(" (BigBird model)"),cpo=l(),hu=a("li"),Nse=a("strong"),mpo=o("bigbird_pegasus"),fpo=o(" \u2014 "),OI=a("a"),gpo=o("BigBirdPegasusModel"),hpo=o(" (BigBirdPegasus model)"),upo=l(),uu=a("li"),qse=a("strong"),ppo=o("blenderbot"),_po=o(" \u2014 "),VI=a("a"),bpo=o("BlenderbotModel"),vpo=o(" (Blenderbot model)"),Fpo=l(),pu=a("li"),jse=a("strong"),Tpo=o("blenderbot-small"),Mpo=o(" \u2014 "),XI=a("a"),Epo=o("BlenderbotSmallModel"),Cpo=o(" (BlenderbotSmall model)"),wpo=l(),_u=a("li"),Dse=a("strong"),Apo=o("camembert"),ypo=o(" \u2014 "),zI=a("a"),Lpo=o("CamembertModel"),xpo=o(" (CamemBERT model)"),$po=l(),bu=a("li"),Gse=a("strong"),kpo=o("canine"),Spo=o(" \u2014 "),WI=a("a"),Rpo=o("CanineModel"),Ppo=o(" (Canine model)"),Bpo=l(),vu=a("li"),Ose=a("strong"),Ipo=o("clip"),Npo=o(" \u2014 "),QI=a("a"),qpo=o("CLIPModel"),jpo=o(" (CLIP model)"),Dpo=l(),Fu=a("li"),Vse=a("strong"),Gpo=o("convbert"),Opo=o(" \u2014 "),HI=a("a"),Vpo=o("ConvBertModel"),Xpo=o(" (ConvBERT model)"),zpo=l(),Tu=a("li"),Xse=a("strong"),Wpo=o("convnext"),Qpo=o(" \u2014 "),UI=a("a"),Hpo=o("ConvNextModel"),Upo=o(" (ConvNext model)"),Jpo=l(),Mu=a("li"),zse=a("strong"),Ypo=o("ctrl"),Kpo=o(" \u2014 "),JI=a("a"),Zpo=o("CTRLModel"),e_o=o(" (CTRL model)"),o_o=l(),Eu=a("li"),Wse=a("strong"),r_o=o("cvt"),t_o=o(" \u2014 "),YI=a("a"),a_o=o("CvtModel"),n_o=o(" (CvT model)"),s_o=l(),Cu=a("li"),Qse=a("strong"),l_o=o("data2vec-audio"),i_o=o(" \u2014 "),KI=a("a"),d_o=o("Data2VecAudioModel"),c_o=o(" (Data2VecAudio model)"),m_o=l(),wu=a("li"),Hse=a("strong"),f_o=o("data2vec-text"),g_o=o(" \u2014 "),ZI=a("a"),h_o=o("Data2VecTextModel"),u_o=o(" (Data2VecText model)"),p_o=l(),Au=a("li"),Use=a("strong"),__o=o("data2vec-vision"),b_o=o(" \u2014 "),eN=a("a"),v_o=o("Data2VecVisionModel"),F_o=o(" (Data2VecVision model)"),T_o=l(),yu=a("li"),Jse=a("strong"),M_o=o("deberta"),E_o=o(" \u2014 "),oN=a("a"),C_o=o("DebertaModel"),w_o=o(" (DeBERTa model)"),A_o=l(),Lu=a("li"),Yse=a("strong"),y_o=o("deberta-v2"),L_o=o(" \u2014 "),rN=a("a"),x_o=o("DebertaV2Model"),$_o=o(" (DeBERTa-v2 model)"),k_o=l(),xu=a("li"),Kse=a("strong"),S_o=o("decision_transformer"),R_o=o(" \u2014 "),tN=a("a"),P_o=o("DecisionTransformerModel"),B_o=o(" (Decision Transformer model)"),I_o=l(),$u=a("li"),Zse=a("strong"),N_o=o("deit"),q_o=o(" \u2014 "),aN=a("a"),j_o=o("DeiTModel"),D_o=o(" (DeiT model)"),G_o=l(),ku=a("li"),ele=a("strong"),O_o=o("detr"),V_o=o(" \u2014 "),nN=a("a"),X_o=o("DetrModel"),z_o=o(" (DETR model)"),W_o=l(),Su=a("li"),ole=a("strong"),Q_o=o("distilbert"),H_o=o(" \u2014 "),sN=a("a"),U_o=o("DistilBertModel"),J_o=o(" (DistilBERT model)"),Y_o=l(),Ru=a("li"),rle=a("strong"),K_o=o("dpr"),Z_o=o(" \u2014 "),lN=a("a"),ebo=o("DPRQuestionEncoder"),obo=o(" (DPR model)"),rbo=l(),Pu=a("li"),tle=a("strong"),tbo=o("dpt"),abo=o(" \u2014 "),iN=a("a"),nbo=o("DPTModel"),sbo=o(" (DPT model)"),lbo=l(),Bu=a("li"),ale=a("strong"),ibo=o("electra"),dbo=o(" \u2014 "),dN=a("a"),cbo=o("ElectraModel"),mbo=o(" (ELECTRA model)"),fbo=l(),Iu=a("li"),nle=a("strong"),gbo=o("flaubert"),hbo=o(" \u2014 "),cN=a("a"),ubo=o("FlaubertModel"),pbo=o(" (FlauBERT model)"),_bo=l(),Nu=a("li"),sle=a("strong"),bbo=o("flava"),vbo=o(" \u2014 "),mN=a("a"),Fbo=o("FlavaModel"),Tbo=o(" (Flava model)"),Mbo=l(),qu=a("li"),lle=a("strong"),Ebo=o("fnet"),Cbo=o(" \u2014 "),fN=a("a"),wbo=o("FNetModel"),Abo=o(" (FNet model)"),ybo=l(),ju=a("li"),ile=a("strong"),Lbo=o("fsmt"),xbo=o(" \u2014 "),gN=a("a"),$bo=o("FSMTModel"),kbo=o(" (FairSeq Machine-Translation model)"),Sbo=l(),Ps=a("li"),dle=a("strong"),Rbo=o("funnel"),Pbo=o(" \u2014 "),hN=a("a"),Bbo=o("FunnelModel"),Ibo=o(" or "),uN=a("a"),Nbo=o("FunnelBaseModel"),qbo=o(" (Funnel Transformer model)"),jbo=l(),Du=a("li"),cle=a("strong"),Dbo=o("glpn"),Gbo=o(" \u2014 "),pN=a("a"),Obo=o("GLPNModel"),Vbo=o(" (GLPN model)"),Xbo=l(),Gu=a("li"),mle=a("strong"),zbo=o("gpt2"),Wbo=o(" \u2014 "),_N=a("a"),Qbo=o("GPT2Model"),Hbo=o(" (OpenAI GPT-2 model)"),Ubo=l(),Ou=a("li"),fle=a("strong"),Jbo=o("gpt_neo"),Ybo=o(" \u2014 "),bN=a("a"),Kbo=o("GPTNeoModel"),Zbo=o(" (GPT Neo model)"),e2o=l(),Vu=a("li"),gle=a("strong"),o2o=o("gpt_neox"),r2o=o(" \u2014 "),vN=a("a"),t2o=o("GPTNeoXModel"),a2o=o(" (GPT NeoX model)"),n2o=l(),Xu=a("li"),hle=a("strong"),s2o=o("gptj"),l2o=o(" \u2014 "),FN=a("a"),i2o=o("GPTJModel"),d2o=o(" (GPT-J model)"),c2o=l(),zu=a("li"),ule=a("strong"),m2o=o("hubert"),f2o=o(" \u2014 "),TN=a("a"),g2o=o("HubertModel"),h2o=o(" (Hubert model)"),u2o=l(),Wu=a("li"),ple=a("strong"),p2o=o("ibert"),_2o=o(" \u2014 "),MN=a("a"),b2o=o("IBertModel"),v2o=o(" (I-BERT model)"),F2o=l(),Qu=a("li"),_le=a("strong"),T2o=o("imagegpt"),M2o=o(" \u2014 "),EN=a("a"),E2o=o("ImageGPTModel"),C2o=o(" (ImageGPT model)"),w2o=l(),Hu=a("li"),ble=a("strong"),A2o=o("layoutlm"),y2o=o(" \u2014 "),CN=a("a"),L2o=o("LayoutLMModel"),x2o=o(" (LayoutLM model)"),$2o=l(),Uu=a("li"),vle=a("strong"),k2o=o("layoutlmv2"),S2o=o(" \u2014 "),wN=a("a"),R2o=o("LayoutLMv2Model"),P2o=o(" (LayoutLMv2 model)"),B2o=l(),Ju=a("li"),Fle=a("strong"),I2o=o("layoutlmv3"),N2o=o(" \u2014 "),AN=a("a"),q2o=o("LayoutLMv3Model"),j2o=o(" (LayoutLMv3 model)"),D2o=l(),Yu=a("li"),Tle=a("strong"),G2o=o("led"),O2o=o(" \u2014 "),yN=a("a"),V2o=o("LEDModel"),X2o=o(" (LED model)"),z2o=l(),Ku=a("li"),Mle=a("strong"),W2o=o("longformer"),Q2o=o(" \u2014 "),LN=a("a"),H2o=o("LongformerModel"),U2o=o(" (Longformer model)"),J2o=l(),Zu=a("li"),Ele=a("strong"),Y2o=o("luke"),K2o=o(" \u2014 "),xN=a("a"),Z2o=o("LukeModel"),evo=o(" (LUKE model)"),ovo=l(),ep=a("li"),Cle=a("strong"),rvo=o("lxmert"),tvo=o(" \u2014 "),$N=a("a"),avo=o("LxmertModel"),nvo=o(" (LXMERT model)"),svo=l(),op=a("li"),wle=a("strong"),lvo=o("m2m_100"),ivo=o(" \u2014 "),kN=a("a"),dvo=o("M2M100Model"),cvo=o(" (M2M100 model)"),mvo=l(),rp=a("li"),Ale=a("strong"),fvo=o("marian"),gvo=o(" \u2014 "),SN=a("a"),hvo=o("MarianModel"),uvo=o(" (Marian model)"),pvo=l(),tp=a("li"),yle=a("strong"),_vo=o("maskformer"),bvo=o(" \u2014 "),RN=a("a"),vvo=o("MaskFormerModel"),Fvo=o(" (MaskFormer model)"),Tvo=l(),ap=a("li"),Lle=a("strong"),Mvo=o("mbart"),Evo=o(" \u2014 "),PN=a("a"),Cvo=o("MBartModel"),wvo=o(" (mBART model)"),Avo=l(),np=a("li"),xle=a("strong"),yvo=o("megatron-bert"),Lvo=o(" \u2014 "),BN=a("a"),xvo=o("MegatronBertModel"),$vo=o(" (MegatronBert model)"),kvo=l(),sp=a("li"),$le=a("strong"),Svo=o("mobilebert"),Rvo=o(" \u2014 "),IN=a("a"),Pvo=o("MobileBertModel"),Bvo=o(" (MobileBERT model)"),Ivo=l(),lp=a("li"),kle=a("strong"),Nvo=o("mpnet"),qvo=o(" \u2014 "),NN=a("a"),jvo=o("MPNetModel"),Dvo=o(" (MPNet model)"),Gvo=l(),ip=a("li"),Sle=a("strong"),Ovo=o("mt5"),Vvo=o(" \u2014 "),qN=a("a"),Xvo=o("MT5Model"),zvo=o(" (mT5 model)"),Wvo=l(),dp=a("li"),Rle=a("strong"),Qvo=o("nystromformer"),Hvo=o(" \u2014 "),jN=a("a"),Uvo=o("NystromformerModel"),Jvo=o(" (Nystromformer model)"),Yvo=l(),cp=a("li"),Ple=a("strong"),Kvo=o("openai-gpt"),Zvo=o(" \u2014 "),DN=a("a"),eFo=o("OpenAIGPTModel"),oFo=o(" (OpenAI GPT model)"),rFo=l(),mp=a("li"),Ble=a("strong"),tFo=o("opt"),aFo=o(" \u2014 "),GN=a("a"),nFo=o("OPTModel"),sFo=o(" (OPT model)"),lFo=l(),fp=a("li"),Ile=a("strong"),iFo=o("pegasus"),dFo=o(" \u2014 "),ON=a("a"),cFo=o("PegasusModel"),mFo=o(" (Pegasus model)"),fFo=l(),gp=a("li"),Nle=a("strong"),gFo=o("perceiver"),hFo=o(" \u2014 "),VN=a("a"),uFo=o("PerceiverModel"),pFo=o(" (Perceiver model)"),_Fo=l(),hp=a("li"),qle=a("strong"),bFo=o("plbart"),vFo=o(" \u2014 "),XN=a("a"),FFo=o("PLBartModel"),TFo=o(" (PLBart model)"),MFo=l(),up=a("li"),jle=a("strong"),EFo=o("poolformer"),CFo=o(" \u2014 "),zN=a("a"),wFo=o("PoolFormerModel"),AFo=o(" (PoolFormer model)"),yFo=l(),pp=a("li"),Dle=a("strong"),LFo=o("prophetnet"),xFo=o(" \u2014 "),WN=a("a"),$Fo=o("ProphetNetModel"),kFo=o(" (ProphetNet model)"),SFo=l(),_p=a("li"),Gle=a("strong"),RFo=o("qdqbert"),PFo=o(" \u2014 "),QN=a("a"),BFo=o("QDQBertModel"),IFo=o(" (QDQBert model)"),NFo=l(),bp=a("li"),Ole=a("strong"),qFo=o("reformer"),jFo=o(" \u2014 "),HN=a("a"),DFo=o("ReformerModel"),GFo=o(" (Reformer model)"),OFo=l(),vp=a("li"),Vle=a("strong"),VFo=o("regnet"),XFo=o(" \u2014 "),UN=a("a"),zFo=o("RegNetModel"),WFo=o(" (RegNet model)"),QFo=l(),Fp=a("li"),Xle=a("strong"),HFo=o("rembert"),UFo=o(" \u2014 "),JN=a("a"),JFo=o("RemBertModel"),YFo=o(" (RemBERT model)"),KFo=l(),Tp=a("li"),zle=a("strong"),ZFo=o("resnet"),e1o=o(" \u2014 "),YN=a("a"),o1o=o("ResNetModel"),r1o=o(" (ResNet model)"),t1o=l(),Mp=a("li"),Wle=a("strong"),a1o=o("retribert"),n1o=o(" \u2014 "),KN=a("a"),s1o=o("RetriBertModel"),l1o=o(" (RetriBERT model)"),i1o=l(),Ep=a("li"),Qle=a("strong"),d1o=o("roberta"),c1o=o(" \u2014 "),ZN=a("a"),m1o=o("RobertaModel"),f1o=o(" (RoBERTa model)"),g1o=l(),Cp=a("li"),Hle=a("strong"),h1o=o("roformer"),u1o=o(" \u2014 "),eq=a("a"),p1o=o("RoFormerModel"),_1o=o(" (RoFormer model)"),b1o=l(),wp=a("li"),Ule=a("strong"),v1o=o("segformer"),F1o=o(" \u2014 "),oq=a("a"),T1o=o("SegformerModel"),M1o=o(" (SegFormer model)"),E1o=l(),Ap=a("li"),Jle=a("strong"),C1o=o("sew"),w1o=o(" \u2014 "),rq=a("a"),A1o=o("SEWModel"),y1o=o(" (SEW model)"),L1o=l(),yp=a("li"),Yle=a("strong"),x1o=o("sew-d"),$1o=o(" \u2014 "),tq=a("a"),k1o=o("SEWDModel"),S1o=o(" (SEW-D model)"),R1o=l(),Lp=a("li"),Kle=a("strong"),P1o=o("speech_to_text"),B1o=o(" \u2014 "),aq=a("a"),I1o=o("Speech2TextModel"),N1o=o(" (Speech2Text model)"),q1o=l(),xp=a("li"),Zle=a("strong"),j1o=o("splinter"),D1o=o(" \u2014 "),nq=a("a"),G1o=o("SplinterModel"),O1o=o(" (Splinter model)"),V1o=l(),$p=a("li"),eie=a("strong"),X1o=o("squeezebert"),z1o=o(" \u2014 "),sq=a("a"),W1o=o("SqueezeBertModel"),Q1o=o(" (SqueezeBERT model)"),H1o=l(),kp=a("li"),oie=a("strong"),U1o=o("swin"),J1o=o(" \u2014 "),lq=a("a"),Y1o=o("SwinModel"),K1o=o(" (Swin model)"),Z1o=l(),Sp=a("li"),rie=a("strong"),eTo=o("t5"),oTo=o(" \u2014 "),iq=a("a"),rTo=o("T5Model"),tTo=o(" (T5 model)"),aTo=l(),Rp=a("li"),tie=a("strong"),nTo=o("tapas"),sTo=o(" \u2014 "),dq=a("a"),lTo=o("TapasModel"),iTo=o(" (TAPAS model)"),dTo=l(),Pp=a("li"),aie=a("strong"),cTo=o("trajectory_transformer"),mTo=o(" \u2014 "),cq=a("a"),fTo=o("TrajectoryTransformerModel"),gTo=o(" (Trajectory Transformer model)"),hTo=l(),Bp=a("li"),nie=a("strong"),uTo=o("transfo-xl"),pTo=o(" \u2014 "),mq=a("a"),_To=o("TransfoXLModel"),bTo=o(" (Transformer-XL model)"),vTo=l(),Ip=a("li"),sie=a("strong"),FTo=o("unispeech"),TTo=o(" \u2014 "),fq=a("a"),MTo=o("UniSpeechModel"),ETo=o(" (UniSpeech model)"),CTo=l(),Np=a("li"),lie=a("strong"),wTo=o("unispeech-sat"),ATo=o(" \u2014 "),gq=a("a"),yTo=o("UniSpeechSatModel"),LTo=o(" (UniSpeechSat model)"),xTo=l(),qp=a("li"),iie=a("strong"),$To=o("van"),kTo=o(" \u2014 "),hq=a("a"),STo=o("VanModel"),RTo=o(" (VAN model)"),PTo=l(),jp=a("li"),die=a("strong"),BTo=o("vilt"),ITo=o(" \u2014 "),uq=a("a"),NTo=o("ViltModel"),qTo=o(" (ViLT model)"),jTo=l(),Dp=a("li"),cie=a("strong"),DTo=o("vision-text-dual-encoder"),GTo=o(" \u2014 "),pq=a("a"),OTo=o("VisionTextDualEncoderModel"),VTo=o(" (VisionTextDualEncoder model)"),XTo=l(),Gp=a("li"),mie=a("strong"),zTo=o("visual_bert"),WTo=o(" \u2014 "),_q=a("a"),QTo=o("VisualBertModel"),HTo=o(" (VisualBert model)"),UTo=l(),Op=a("li"),fie=a("strong"),JTo=o("vit"),YTo=o(" \u2014 "),bq=a("a"),KTo=o("ViTModel"),ZTo=o(" (ViT model)"),eMo=l(),Vp=a("li"),gie=a("strong"),oMo=o("vit_mae"),rMo=o(" \u2014 "),vq=a("a"),tMo=o("ViTMAEModel"),aMo=o(" (ViTMAE model)"),nMo=l(),Xp=a("li"),hie=a("strong"),sMo=o("wav2vec2"),lMo=o(" \u2014 "),Fq=a("a"),iMo=o("Wav2Vec2Model"),dMo=o(" (Wav2Vec2 model)"),cMo=l(),zp=a("li"),uie=a("strong"),mMo=o("wav2vec2-conformer"),fMo=o(" \u2014 "),Tq=a("a"),gMo=o("Wav2Vec2ConformerModel"),hMo=o(" (Wav2Vec2-Conformer model)"),uMo=l(),Wp=a("li"),pie=a("strong"),pMo=o("wavlm"),_Mo=o(" \u2014 "),Mq=a("a"),bMo=o("WavLMModel"),vMo=o(" (WavLM model)"),FMo=l(),Qp=a("li"),_ie=a("strong"),TMo=o("xglm"),MMo=o(" \u2014 "),Eq=a("a"),EMo=o("XGLMModel"),CMo=o(" (XGLM model)"),wMo=l(),Hp=a("li"),bie=a("strong"),AMo=o("xlm"),yMo=o(" \u2014 "),Cq=a("a"),LMo=o("XLMModel"),xMo=o(" (XLM model)"),$Mo=l(),Up=a("li"),vie=a("strong"),kMo=o("xlm-prophetnet"),SMo=o(" \u2014 "),wq=a("a"),RMo=o("XLMProphetNetModel"),PMo=o(" (XLMProphetNet model)"),BMo=l(),Jp=a("li"),Fie=a("strong"),IMo=o("xlm-roberta"),NMo=o(" \u2014 "),Aq=a("a"),qMo=o("XLMRobertaModel"),jMo=o(" (XLM-RoBERTa model)"),DMo=l(),Yp=a("li"),Tie=a("strong"),GMo=o("xlm-roberta-xl"),OMo=o(" \u2014 "),yq=a("a"),VMo=o("XLMRobertaXLModel"),XMo=o(" (XLM-RoBERTa-XL model)"),zMo=l(),Kp=a("li"),Mie=a("strong"),WMo=o("xlnet"),QMo=o(" \u2014 "),Lq=a("a"),HMo=o("XLNetModel"),UMo=o(" (XLNet model)"),JMo=l(),Zp=a("li"),Eie=a("strong"),YMo=o("yolos"),KMo=o(" \u2014 "),xq=a("a"),ZMo=o("YolosModel"),e4o=o(" (YOLOS model)"),o4o=l(),e_=a("li"),Cie=a("strong"),r4o=o("yoso"),t4o=o(" \u2014 "),$q=a("a"),a4o=o("YosoModel"),n4o=o(" (YOSO model)"),s4o=l(),o_=a("p"),l4o=o("The model is set in evaluation mode by default using "),wie=a("code"),i4o=o("model.eval()"),d4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=a("code"),c4o=o("model.train()"),m4o=l(),F(r_.$$.fragment),xqe=l(),Li=a("h2"),t_=a("a"),yie=a("span"),F(iL.$$.fragment),f4o=l(),Lie=a("span"),g4o=o("AutoModelForPreTraining"),$qe=l(),xo=a("div"),F(dL.$$.fragment),h4o=l(),xi=a("p"),u4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=a("a"),p4o=o("from_pretrained()"),_4o=o(" class method or the "),Sq=a("a"),b4o=o("from_config()"),v4o=o(` class
method.`),F4o=l(),cL=a("p"),T4o=o("This class cannot be instantiated directly using "),xie=a("code"),M4o=o("__init__()"),E4o=o(" (throws an error)."),C4o=l(),at=a("div"),F(mL.$$.fragment),w4o=l(),$ie=a("p"),A4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),y4o=l(),$i=a("p"),L4o=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),x4o=o("not"),$4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),k4o=o("from_pretrained()"),S4o=o(" to load the model weights."),R4o=l(),F(a_.$$.fragment),P4o=l(),Ye=a("div"),F(fL.$$.fragment),B4o=l(),Sie=a("p"),I4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N4o=l(),xa=a("p"),q4o=o("The model class to instantiate is selected based on the "),Rie=a("code"),j4o=o("model_type"),D4o=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),G4o=o("pretrained_model_name_or_path"),O4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=a("code"),V4o=o("pretrained_model_name_or_path"),X4o=o(":"),z4o=l(),G=a("ul"),n_=a("li"),Iie=a("strong"),W4o=o("albert"),Q4o=o(" \u2014 "),Pq=a("a"),H4o=o("AlbertForPreTraining"),U4o=o(" (ALBERT model)"),J4o=l(),s_=a("li"),Nie=a("strong"),Y4o=o("bart"),K4o=o(" \u2014 "),Bq=a("a"),Z4o=o("BartForConditionalGeneration"),eEo=o(" (BART model)"),oEo=l(),l_=a("li"),qie=a("strong"),rEo=o("bert"),tEo=o(" \u2014 "),Iq=a("a"),aEo=o("BertForPreTraining"),nEo=o(" (BERT model)"),sEo=l(),i_=a("li"),jie=a("strong"),lEo=o("big_bird"),iEo=o(" \u2014 "),Nq=a("a"),dEo=o("BigBirdForPreTraining"),cEo=o(" (BigBird model)"),mEo=l(),d_=a("li"),Die=a("strong"),fEo=o("camembert"),gEo=o(" \u2014 "),qq=a("a"),hEo=o("CamembertForMaskedLM"),uEo=o(" (CamemBERT model)"),pEo=l(),c_=a("li"),Gie=a("strong"),_Eo=o("ctrl"),bEo=o(" \u2014 "),jq=a("a"),vEo=o("CTRLLMHeadModel"),FEo=o(" (CTRL model)"),TEo=l(),m_=a("li"),Oie=a("strong"),MEo=o("data2vec-text"),EEo=o(" \u2014 "),Dq=a("a"),CEo=o("Data2VecTextForMaskedLM"),wEo=o(" (Data2VecText model)"),AEo=l(),f_=a("li"),Vie=a("strong"),yEo=o("deberta"),LEo=o(" \u2014 "),Gq=a("a"),xEo=o("DebertaForMaskedLM"),$Eo=o(" (DeBERTa model)"),kEo=l(),g_=a("li"),Xie=a("strong"),SEo=o("deberta-v2"),REo=o(" \u2014 "),Oq=a("a"),PEo=o("DebertaV2ForMaskedLM"),BEo=o(" (DeBERTa-v2 model)"),IEo=l(),h_=a("li"),zie=a("strong"),NEo=o("distilbert"),qEo=o(" \u2014 "),Vq=a("a"),jEo=o("DistilBertForMaskedLM"),DEo=o(" (DistilBERT model)"),GEo=l(),u_=a("li"),Wie=a("strong"),OEo=o("electra"),VEo=o(" \u2014 "),Xq=a("a"),XEo=o("ElectraForPreTraining"),zEo=o(" (ELECTRA model)"),WEo=l(),p_=a("li"),Qie=a("strong"),QEo=o("flaubert"),HEo=o(" \u2014 "),zq=a("a"),UEo=o("FlaubertWithLMHeadModel"),JEo=o(" (FlauBERT model)"),YEo=l(),__=a("li"),Hie=a("strong"),KEo=o("flava"),ZEo=o(" \u2014 "),Wq=a("a"),eCo=o("FlavaForPreTraining"),oCo=o(" (Flava model)"),rCo=l(),b_=a("li"),Uie=a("strong"),tCo=o("fnet"),aCo=o(" \u2014 "),Qq=a("a"),nCo=o("FNetForPreTraining"),sCo=o(" (FNet model)"),lCo=l(),v_=a("li"),Jie=a("strong"),iCo=o("fsmt"),dCo=o(" \u2014 "),Hq=a("a"),cCo=o("FSMTForConditionalGeneration"),mCo=o(" (FairSeq Machine-Translation model)"),fCo=l(),F_=a("li"),Yie=a("strong"),gCo=o("funnel"),hCo=o(" \u2014 "),Uq=a("a"),uCo=o("FunnelForPreTraining"),pCo=o(" (Funnel Transformer model)"),_Co=l(),T_=a("li"),Kie=a("strong"),bCo=o("gpt2"),vCo=o(" \u2014 "),Jq=a("a"),FCo=o("GPT2LMHeadModel"),TCo=o(" (OpenAI GPT-2 model)"),MCo=l(),M_=a("li"),Zie=a("strong"),ECo=o("ibert"),CCo=o(" \u2014 "),Yq=a("a"),wCo=o("IBertForMaskedLM"),ACo=o(" (I-BERT model)"),yCo=l(),E_=a("li"),ede=a("strong"),LCo=o("layoutlm"),xCo=o(" \u2014 "),Kq=a("a"),$Co=o("LayoutLMForMaskedLM"),kCo=o(" (LayoutLM model)"),SCo=l(),C_=a("li"),ode=a("strong"),RCo=o("longformer"),PCo=o(" \u2014 "),Zq=a("a"),BCo=o("LongformerForMaskedLM"),ICo=o(" (Longformer model)"),NCo=l(),w_=a("li"),rde=a("strong"),qCo=o("lxmert"),jCo=o(" \u2014 "),ej=a("a"),DCo=o("LxmertForPreTraining"),GCo=o(" (LXMERT model)"),OCo=l(),A_=a("li"),tde=a("strong"),VCo=o("megatron-bert"),XCo=o(" \u2014 "),oj=a("a"),zCo=o("MegatronBertForPreTraining"),WCo=o(" (MegatronBert model)"),QCo=l(),y_=a("li"),ade=a("strong"),HCo=o("mobilebert"),UCo=o(" \u2014 "),rj=a("a"),JCo=o("MobileBertForPreTraining"),YCo=o(" (MobileBERT model)"),KCo=l(),L_=a("li"),nde=a("strong"),ZCo=o("mpnet"),e5o=o(" \u2014 "),tj=a("a"),o5o=o("MPNetForMaskedLM"),r5o=o(" (MPNet model)"),t5o=l(),x_=a("li"),sde=a("strong"),a5o=o("openai-gpt"),n5o=o(" \u2014 "),aj=a("a"),s5o=o("OpenAIGPTLMHeadModel"),l5o=o(" (OpenAI GPT model)"),i5o=l(),$_=a("li"),lde=a("strong"),d5o=o("retribert"),c5o=o(" \u2014 "),nj=a("a"),m5o=o("RetriBertModel"),f5o=o(" (RetriBERT model)"),g5o=l(),k_=a("li"),ide=a("strong"),h5o=o("roberta"),u5o=o(" \u2014 "),sj=a("a"),p5o=o("RobertaForMaskedLM"),_5o=o(" (RoBERTa model)"),b5o=l(),S_=a("li"),dde=a("strong"),v5o=o("splinter"),F5o=o(" \u2014 "),lj=a("a"),T5o=o("SplinterForPreTraining"),M5o=o(" (Splinter model)"),E5o=l(),R_=a("li"),cde=a("strong"),C5o=o("squeezebert"),w5o=o(" \u2014 "),ij=a("a"),A5o=o("SqueezeBertForMaskedLM"),y5o=o(" (SqueezeBERT model)"),L5o=l(),P_=a("li"),mde=a("strong"),x5o=o("t5"),$5o=o(" \u2014 "),dj=a("a"),k5o=o("T5ForConditionalGeneration"),S5o=o(" (T5 model)"),R5o=l(),B_=a("li"),fde=a("strong"),P5o=o("tapas"),B5o=o(" \u2014 "),cj=a("a"),I5o=o("TapasForMaskedLM"),N5o=o(" (TAPAS model)"),q5o=l(),I_=a("li"),gde=a("strong"),j5o=o("transfo-xl"),D5o=o(" \u2014 "),mj=a("a"),G5o=o("TransfoXLLMHeadModel"),O5o=o(" (Transformer-XL model)"),V5o=l(),N_=a("li"),hde=a("strong"),X5o=o("unispeech"),z5o=o(" \u2014 "),fj=a("a"),W5o=o("UniSpeechForPreTraining"),Q5o=o(" (UniSpeech model)"),H5o=l(),q_=a("li"),ude=a("strong"),U5o=o("unispeech-sat"),J5o=o(" \u2014 "),gj=a("a"),Y5o=o("UniSpeechSatForPreTraining"),K5o=o(" (UniSpeechSat model)"),Z5o=l(),j_=a("li"),pde=a("strong"),e3o=o("visual_bert"),o3o=o(" \u2014 "),hj=a("a"),r3o=o("VisualBertForPreTraining"),t3o=o(" (VisualBert model)"),a3o=l(),D_=a("li"),_de=a("strong"),n3o=o("vit_mae"),s3o=o(" \u2014 "),uj=a("a"),l3o=o("ViTMAEForPreTraining"),i3o=o(" (ViTMAE model)"),d3o=l(),G_=a("li"),bde=a("strong"),c3o=o("wav2vec2"),m3o=o(" \u2014 "),pj=a("a"),f3o=o("Wav2Vec2ForPreTraining"),g3o=o(" (Wav2Vec2 model)"),h3o=l(),O_=a("li"),vde=a("strong"),u3o=o("wav2vec2-conformer"),p3o=o(" \u2014 "),_j=a("a"),_3o=o("Wav2Vec2ConformerForPreTraining"),b3o=o(" (Wav2Vec2-Conformer model)"),v3o=l(),V_=a("li"),Fde=a("strong"),F3o=o("xlm"),T3o=o(" \u2014 "),bj=a("a"),M3o=o("XLMWithLMHeadModel"),E3o=o(" (XLM model)"),C3o=l(),X_=a("li"),Tde=a("strong"),w3o=o("xlm-roberta"),A3o=o(" \u2014 "),vj=a("a"),y3o=o("XLMRobertaForMaskedLM"),L3o=o(" (XLM-RoBERTa model)"),x3o=l(),z_=a("li"),Mde=a("strong"),$3o=o("xlm-roberta-xl"),k3o=o(" \u2014 "),Fj=a("a"),S3o=o("XLMRobertaXLForMaskedLM"),R3o=o(" (XLM-RoBERTa-XL model)"),P3o=l(),W_=a("li"),Ede=a("strong"),B3o=o("xlnet"),I3o=o(" \u2014 "),Tj=a("a"),N3o=o("XLNetLMHeadModel"),q3o=o(" (XLNet model)"),j3o=l(),Q_=a("p"),D3o=o("The model is set in evaluation mode by default using "),Cde=a("code"),G3o=o("model.eval()"),O3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),V3o=o("model.train()"),X3o=l(),F(H_.$$.fragment),kqe=l(),ki=a("h2"),U_=a("a"),Ade=a("span"),F(gL.$$.fragment),z3o=l(),yde=a("span"),W3o=o("AutoModelForCausalLM"),Sqe=l(),$o=a("div"),F(hL.$$.fragment),Q3o=l(),Si=a("p"),H3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=a("a"),U3o=o("from_pretrained()"),J3o=o(" class method or the "),Ej=a("a"),Y3o=o("from_config()"),K3o=o(` class
method.`),Z3o=l(),uL=a("p"),ewo=o("This class cannot be instantiated directly using "),Lde=a("code"),owo=o("__init__()"),rwo=o(" (throws an error)."),two=l(),nt=a("div"),F(pL.$$.fragment),awo=l(),xde=a("p"),nwo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),swo=l(),Ri=a("p"),lwo=o(`Note:
Loading a model from its configuration file does `),$de=a("strong"),iwo=o("not"),dwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),cwo=o("from_pretrained()"),mwo=o(" to load the model weights."),fwo=l(),F(J_.$$.fragment),gwo=l(),Ke=a("div"),F(_L.$$.fragment),hwo=l(),kde=a("p"),uwo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pwo=l(),$a=a("p"),_wo=o("The model class to instantiate is selected based on the "),Sde=a("code"),bwo=o("model_type"),vwo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),Fwo=o("pretrained_model_name_or_path"),Two=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=a("code"),Mwo=o("pretrained_model_name_or_path"),Ewo=o(":"),Cwo=l(),z=a("ul"),Y_=a("li"),Bde=a("strong"),wwo=o("bart"),Awo=o(" \u2014 "),wj=a("a"),ywo=o("BartForCausalLM"),Lwo=o(" (BART model)"),xwo=l(),K_=a("li"),Ide=a("strong"),$wo=o("bert"),kwo=o(" \u2014 "),Aj=a("a"),Swo=o("BertLMHeadModel"),Rwo=o(" (BERT model)"),Pwo=l(),Z_=a("li"),Nde=a("strong"),Bwo=o("bert-generation"),Iwo=o(" \u2014 "),yj=a("a"),Nwo=o("BertGenerationDecoder"),qwo=o(" (Bert Generation model)"),jwo=l(),eb=a("li"),qde=a("strong"),Dwo=o("big_bird"),Gwo=o(" \u2014 "),Lj=a("a"),Owo=o("BigBirdForCausalLM"),Vwo=o(" (BigBird model)"),Xwo=l(),ob=a("li"),jde=a("strong"),zwo=o("bigbird_pegasus"),Wwo=o(" \u2014 "),xj=a("a"),Qwo=o("BigBirdPegasusForCausalLM"),Hwo=o(" (BigBirdPegasus model)"),Uwo=l(),rb=a("li"),Dde=a("strong"),Jwo=o("blenderbot"),Ywo=o(" \u2014 "),$j=a("a"),Kwo=o("BlenderbotForCausalLM"),Zwo=o(" (Blenderbot model)"),e0o=l(),tb=a("li"),Gde=a("strong"),o0o=o("blenderbot-small"),r0o=o(" \u2014 "),kj=a("a"),t0o=o("BlenderbotSmallForCausalLM"),a0o=o(" (BlenderbotSmall model)"),n0o=l(),ab=a("li"),Ode=a("strong"),s0o=o("camembert"),l0o=o(" \u2014 "),Sj=a("a"),i0o=o("CamembertForCausalLM"),d0o=o(" (CamemBERT model)"),c0o=l(),nb=a("li"),Vde=a("strong"),m0o=o("ctrl"),f0o=o(" \u2014 "),Rj=a("a"),g0o=o("CTRLLMHeadModel"),h0o=o(" (CTRL model)"),u0o=l(),sb=a("li"),Xde=a("strong"),p0o=o("data2vec-text"),_0o=o(" \u2014 "),Pj=a("a"),b0o=o("Data2VecTextForCausalLM"),v0o=o(" (Data2VecText model)"),F0o=l(),lb=a("li"),zde=a("strong"),T0o=o("electra"),M0o=o(" \u2014 "),Bj=a("a"),E0o=o("ElectraForCausalLM"),C0o=o(" (ELECTRA model)"),w0o=l(),ib=a("li"),Wde=a("strong"),A0o=o("gpt2"),y0o=o(" \u2014 "),Ij=a("a"),L0o=o("GPT2LMHeadModel"),x0o=o(" (OpenAI GPT-2 model)"),$0o=l(),db=a("li"),Qde=a("strong"),k0o=o("gpt_neo"),S0o=o(" \u2014 "),Nj=a("a"),R0o=o("GPTNeoForCausalLM"),P0o=o(" (GPT Neo model)"),B0o=l(),cb=a("li"),Hde=a("strong"),I0o=o("gpt_neox"),N0o=o(" \u2014 "),qj=a("a"),q0o=o("GPTNeoXForCausalLM"),j0o=o(" (GPT NeoX model)"),D0o=l(),mb=a("li"),Ude=a("strong"),G0o=o("gptj"),O0o=o(" \u2014 "),jj=a("a"),V0o=o("GPTJForCausalLM"),X0o=o(" (GPT-J model)"),z0o=l(),fb=a("li"),Jde=a("strong"),W0o=o("marian"),Q0o=o(" \u2014 "),Dj=a("a"),H0o=o("MarianForCausalLM"),U0o=o(" (Marian model)"),J0o=l(),gb=a("li"),Yde=a("strong"),Y0o=o("mbart"),K0o=o(" \u2014 "),Gj=a("a"),Z0o=o("MBartForCausalLM"),e6o=o(" (mBART model)"),o6o=l(),hb=a("li"),Kde=a("strong"),r6o=o("megatron-bert"),t6o=o(" \u2014 "),Oj=a("a"),a6o=o("MegatronBertForCausalLM"),n6o=o(" (MegatronBert model)"),s6o=l(),ub=a("li"),Zde=a("strong"),l6o=o("openai-gpt"),i6o=o(" \u2014 "),Vj=a("a"),d6o=o("OpenAIGPTLMHeadModel"),c6o=o(" (OpenAI GPT model)"),m6o=l(),pb=a("li"),ece=a("strong"),f6o=o("opt"),g6o=o(" \u2014 "),Xj=a("a"),h6o=o("OPTForCausalLM"),u6o=o(" (OPT model)"),p6o=l(),_b=a("li"),oce=a("strong"),_6o=o("pegasus"),b6o=o(" \u2014 "),zj=a("a"),v6o=o("PegasusForCausalLM"),F6o=o(" (Pegasus model)"),T6o=l(),bb=a("li"),rce=a("strong"),M6o=o("plbart"),E6o=o(" \u2014 "),Wj=a("a"),C6o=o("PLBartForCausalLM"),w6o=o(" (PLBart model)"),A6o=l(),vb=a("li"),tce=a("strong"),y6o=o("prophetnet"),L6o=o(" \u2014 "),Qj=a("a"),x6o=o("ProphetNetForCausalLM"),$6o=o(" (ProphetNet model)"),k6o=l(),Fb=a("li"),ace=a("strong"),S6o=o("qdqbert"),R6o=o(" \u2014 "),Hj=a("a"),P6o=o("QDQBertLMHeadModel"),B6o=o(" (QDQBert model)"),I6o=l(),Tb=a("li"),nce=a("strong"),N6o=o("reformer"),q6o=o(" \u2014 "),Uj=a("a"),j6o=o("ReformerModelWithLMHead"),D6o=o(" (Reformer model)"),G6o=l(),Mb=a("li"),sce=a("strong"),O6o=o("rembert"),V6o=o(" \u2014 "),Jj=a("a"),X6o=o("RemBertForCausalLM"),z6o=o(" (RemBERT model)"),W6o=l(),Eb=a("li"),lce=a("strong"),Q6o=o("roberta"),H6o=o(" \u2014 "),Yj=a("a"),U6o=o("RobertaForCausalLM"),J6o=o(" (RoBERTa model)"),Y6o=l(),Cb=a("li"),ice=a("strong"),K6o=o("roformer"),Z6o=o(" \u2014 "),Kj=a("a"),eAo=o("RoFormerForCausalLM"),oAo=o(" (RoFormer model)"),rAo=l(),wb=a("li"),dce=a("strong"),tAo=o("speech_to_text_2"),aAo=o(" \u2014 "),Zj=a("a"),nAo=o("Speech2Text2ForCausalLM"),sAo=o(" (Speech2Text2 model)"),lAo=l(),Ab=a("li"),cce=a("strong"),iAo=o("transfo-xl"),dAo=o(" \u2014 "),eD=a("a"),cAo=o("TransfoXLLMHeadModel"),mAo=o(" (Transformer-XL model)"),fAo=l(),yb=a("li"),mce=a("strong"),gAo=o("trocr"),hAo=o(" \u2014 "),oD=a("a"),uAo=o("TrOCRForCausalLM"),pAo=o(" (TrOCR model)"),_Ao=l(),Lb=a("li"),fce=a("strong"),bAo=o("xglm"),vAo=o(" \u2014 "),rD=a("a"),FAo=o("XGLMForCausalLM"),TAo=o(" (XGLM model)"),MAo=l(),xb=a("li"),gce=a("strong"),EAo=o("xlm"),CAo=o(" \u2014 "),tD=a("a"),wAo=o("XLMWithLMHeadModel"),AAo=o(" (XLM model)"),yAo=l(),$b=a("li"),hce=a("strong"),LAo=o("xlm-prophetnet"),xAo=o(" \u2014 "),aD=a("a"),$Ao=o("XLMProphetNetForCausalLM"),kAo=o(" (XLMProphetNet model)"),SAo=l(),kb=a("li"),uce=a("strong"),RAo=o("xlm-roberta"),PAo=o(" \u2014 "),nD=a("a"),BAo=o("XLMRobertaForCausalLM"),IAo=o(" (XLM-RoBERTa model)"),NAo=l(),Sb=a("li"),pce=a("strong"),qAo=o("xlm-roberta-xl"),jAo=o(" \u2014 "),sD=a("a"),DAo=o("XLMRobertaXLForCausalLM"),GAo=o(" (XLM-RoBERTa-XL model)"),OAo=l(),Rb=a("li"),_ce=a("strong"),VAo=o("xlnet"),XAo=o(" \u2014 "),lD=a("a"),zAo=o("XLNetLMHeadModel"),WAo=o(" (XLNet model)"),QAo=l(),Pb=a("p"),HAo=o("The model is set in evaluation mode by default using "),bce=a("code"),UAo=o("model.eval()"),JAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),YAo=o("model.train()"),KAo=l(),F(Bb.$$.fragment),Rqe=l(),Pi=a("h2"),Ib=a("a"),Fce=a("span"),F(bL.$$.fragment),ZAo=l(),Tce=a("span"),eyo=o("AutoModelForMaskedLM"),Pqe=l(),ko=a("div"),F(vL.$$.fragment),oyo=l(),Bi=a("p"),ryo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iD=a("a"),tyo=o("from_pretrained()"),ayo=o(" class method or the "),dD=a("a"),nyo=o("from_config()"),syo=o(` class
method.`),lyo=l(),FL=a("p"),iyo=o("This class cannot be instantiated directly using "),Mce=a("code"),dyo=o("__init__()"),cyo=o(" (throws an error)."),myo=l(),st=a("div"),F(TL.$$.fragment),fyo=l(),Ece=a("p"),gyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hyo=l(),Ii=a("p"),uyo=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),pyo=o("not"),_yo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),byo=o("from_pretrained()"),vyo=o(" to load the model weights."),Fyo=l(),F(Nb.$$.fragment),Tyo=l(),Ze=a("div"),F(ML.$$.fragment),Myo=l(),wce=a("p"),Eyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cyo=l(),ka=a("p"),wyo=o("The model class to instantiate is selected based on the "),Ace=a("code"),Ayo=o("model_type"),yyo=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),Lyo=o("pretrained_model_name_or_path"),xyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),$yo=o("pretrained_model_name_or_path"),kyo=o(":"),Syo=l(),Q=a("ul"),qb=a("li"),xce=a("strong"),Ryo=o("albert"),Pyo=o(" \u2014 "),mD=a("a"),Byo=o("AlbertForMaskedLM"),Iyo=o(" (ALBERT model)"),Nyo=l(),jb=a("li"),$ce=a("strong"),qyo=o("bart"),jyo=o(" \u2014 "),fD=a("a"),Dyo=o("BartForConditionalGeneration"),Gyo=o(" (BART model)"),Oyo=l(),Db=a("li"),kce=a("strong"),Vyo=o("bert"),Xyo=o(" \u2014 "),gD=a("a"),zyo=o("BertForMaskedLM"),Wyo=o(" (BERT model)"),Qyo=l(),Gb=a("li"),Sce=a("strong"),Hyo=o("big_bird"),Uyo=o(" \u2014 "),hD=a("a"),Jyo=o("BigBirdForMaskedLM"),Yyo=o(" (BigBird model)"),Kyo=l(),Ob=a("li"),Rce=a("strong"),Zyo=o("camembert"),eLo=o(" \u2014 "),uD=a("a"),oLo=o("CamembertForMaskedLM"),rLo=o(" (CamemBERT model)"),tLo=l(),Vb=a("li"),Pce=a("strong"),aLo=o("convbert"),nLo=o(" \u2014 "),pD=a("a"),sLo=o("ConvBertForMaskedLM"),lLo=o(" (ConvBERT model)"),iLo=l(),Xb=a("li"),Bce=a("strong"),dLo=o("data2vec-text"),cLo=o(" \u2014 "),_D=a("a"),mLo=o("Data2VecTextForMaskedLM"),fLo=o(" (Data2VecText model)"),gLo=l(),zb=a("li"),Ice=a("strong"),hLo=o("deberta"),uLo=o(" \u2014 "),bD=a("a"),pLo=o("DebertaForMaskedLM"),_Lo=o(" (DeBERTa model)"),bLo=l(),Wb=a("li"),Nce=a("strong"),vLo=o("deberta-v2"),FLo=o(" \u2014 "),vD=a("a"),TLo=o("DebertaV2ForMaskedLM"),MLo=o(" (DeBERTa-v2 model)"),ELo=l(),Qb=a("li"),qce=a("strong"),CLo=o("distilbert"),wLo=o(" \u2014 "),FD=a("a"),ALo=o("DistilBertForMaskedLM"),yLo=o(" (DistilBERT model)"),LLo=l(),Hb=a("li"),jce=a("strong"),xLo=o("electra"),$Lo=o(" \u2014 "),TD=a("a"),kLo=o("ElectraForMaskedLM"),SLo=o(" (ELECTRA model)"),RLo=l(),Ub=a("li"),Dce=a("strong"),PLo=o("flaubert"),BLo=o(" \u2014 "),MD=a("a"),ILo=o("FlaubertWithLMHeadModel"),NLo=o(" (FlauBERT model)"),qLo=l(),Jb=a("li"),Gce=a("strong"),jLo=o("fnet"),DLo=o(" \u2014 "),ED=a("a"),GLo=o("FNetForMaskedLM"),OLo=o(" (FNet model)"),VLo=l(),Yb=a("li"),Oce=a("strong"),XLo=o("funnel"),zLo=o(" \u2014 "),CD=a("a"),WLo=o("FunnelForMaskedLM"),QLo=o(" (Funnel Transformer model)"),HLo=l(),Kb=a("li"),Vce=a("strong"),ULo=o("ibert"),JLo=o(" \u2014 "),wD=a("a"),YLo=o("IBertForMaskedLM"),KLo=o(" (I-BERT model)"),ZLo=l(),Zb=a("li"),Xce=a("strong"),e8o=o("layoutlm"),o8o=o(" \u2014 "),AD=a("a"),r8o=o("LayoutLMForMaskedLM"),t8o=o(" (LayoutLM model)"),a8o=l(),e2=a("li"),zce=a("strong"),n8o=o("longformer"),s8o=o(" \u2014 "),yD=a("a"),l8o=o("LongformerForMaskedLM"),i8o=o(" (Longformer model)"),d8o=l(),o2=a("li"),Wce=a("strong"),c8o=o("mbart"),m8o=o(" \u2014 "),LD=a("a"),f8o=o("MBartForConditionalGeneration"),g8o=o(" (mBART model)"),h8o=l(),r2=a("li"),Qce=a("strong"),u8o=o("megatron-bert"),p8o=o(" \u2014 "),xD=a("a"),_8o=o("MegatronBertForMaskedLM"),b8o=o(" (MegatronBert model)"),v8o=l(),t2=a("li"),Hce=a("strong"),F8o=o("mobilebert"),T8o=o(" \u2014 "),$D=a("a"),M8o=o("MobileBertForMaskedLM"),E8o=o(" (MobileBERT model)"),C8o=l(),a2=a("li"),Uce=a("strong"),w8o=o("mpnet"),A8o=o(" \u2014 "),kD=a("a"),y8o=o("MPNetForMaskedLM"),L8o=o(" (MPNet model)"),x8o=l(),n2=a("li"),Jce=a("strong"),$8o=o("nystromformer"),k8o=o(" \u2014 "),SD=a("a"),S8o=o("NystromformerForMaskedLM"),R8o=o(" (Nystromformer model)"),P8o=l(),s2=a("li"),Yce=a("strong"),B8o=o("perceiver"),I8o=o(" \u2014 "),RD=a("a"),N8o=o("PerceiverForMaskedLM"),q8o=o(" (Perceiver model)"),j8o=l(),l2=a("li"),Kce=a("strong"),D8o=o("qdqbert"),G8o=o(" \u2014 "),PD=a("a"),O8o=o("QDQBertForMaskedLM"),V8o=o(" (QDQBert model)"),X8o=l(),i2=a("li"),Zce=a("strong"),z8o=o("reformer"),W8o=o(" \u2014 "),BD=a("a"),Q8o=o("ReformerForMaskedLM"),H8o=o(" (Reformer model)"),U8o=l(),d2=a("li"),eme=a("strong"),J8o=o("rembert"),Y8o=o(" \u2014 "),ID=a("a"),K8o=o("RemBertForMaskedLM"),Z8o=o(" (RemBERT model)"),e7o=l(),c2=a("li"),ome=a("strong"),o7o=o("roberta"),r7o=o(" \u2014 "),ND=a("a"),t7o=o("RobertaForMaskedLM"),a7o=o(" (RoBERTa model)"),n7o=l(),m2=a("li"),rme=a("strong"),s7o=o("roformer"),l7o=o(" \u2014 "),qD=a("a"),i7o=o("RoFormerForMaskedLM"),d7o=o(" (RoFormer model)"),c7o=l(),f2=a("li"),tme=a("strong"),m7o=o("squeezebert"),f7o=o(" \u2014 "),jD=a("a"),g7o=o("SqueezeBertForMaskedLM"),h7o=o(" (SqueezeBERT model)"),u7o=l(),g2=a("li"),ame=a("strong"),p7o=o("tapas"),_7o=o(" \u2014 "),DD=a("a"),b7o=o("TapasForMaskedLM"),v7o=o(" (TAPAS model)"),F7o=l(),h2=a("li"),nme=a("strong"),T7o=o("wav2vec2"),M7o=o(" \u2014 "),sme=a("code"),E7o=o("Wav2Vec2ForMaskedLM"),C7o=o(" (Wav2Vec2 model)"),w7o=l(),u2=a("li"),lme=a("strong"),A7o=o("xlm"),y7o=o(" \u2014 "),GD=a("a"),L7o=o("XLMWithLMHeadModel"),x7o=o(" (XLM model)"),$7o=l(),p2=a("li"),ime=a("strong"),k7o=o("xlm-roberta"),S7o=o(" \u2014 "),OD=a("a"),R7o=o("XLMRobertaForMaskedLM"),P7o=o(" (XLM-RoBERTa model)"),B7o=l(),_2=a("li"),dme=a("strong"),I7o=o("xlm-roberta-xl"),N7o=o(" \u2014 "),VD=a("a"),q7o=o("XLMRobertaXLForMaskedLM"),j7o=o(" (XLM-RoBERTa-XL model)"),D7o=l(),b2=a("li"),cme=a("strong"),G7o=o("yoso"),O7o=o(" \u2014 "),XD=a("a"),V7o=o("YosoForMaskedLM"),X7o=o(" (YOSO model)"),z7o=l(),v2=a("p"),W7o=o("The model is set in evaluation mode by default using "),mme=a("code"),Q7o=o("model.eval()"),H7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),U7o=o("model.train()"),J7o=l(),F(F2.$$.fragment),Bqe=l(),Ni=a("h2"),T2=a("a"),gme=a("span"),F(EL.$$.fragment),Y7o=l(),hme=a("span"),K7o=o("AutoModelForSeq2SeqLM"),Iqe=l(),So=a("div"),F(CL.$$.fragment),Z7o=l(),qi=a("p"),e9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zD=a("a"),o9o=o("from_pretrained()"),r9o=o(" class method or the "),WD=a("a"),t9o=o("from_config()"),a9o=o(` class
method.`),n9o=l(),wL=a("p"),s9o=o("This class cannot be instantiated directly using "),ume=a("code"),l9o=o("__init__()"),i9o=o(" (throws an error)."),d9o=l(),lt=a("div"),F(AL.$$.fragment),c9o=l(),pme=a("p"),m9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f9o=l(),ji=a("p"),g9o=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),h9o=o("not"),u9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),p9o=o("from_pretrained()"),_9o=o(" to load the model weights."),b9o=l(),F(M2.$$.fragment),v9o=l(),eo=a("div"),F(yL.$$.fragment),F9o=l(),bme=a("p"),T9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M9o=l(),Sa=a("p"),E9o=o("The model class to instantiate is selected based on the "),vme=a("code"),C9o=o("model_type"),w9o=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),A9o=o("pretrained_model_name_or_path"),y9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),L9o=o("pretrained_model_name_or_path"),x9o=o(":"),$9o=l(),pe=a("ul"),E2=a("li"),Mme=a("strong"),k9o=o("bart"),S9o=o(" \u2014 "),HD=a("a"),R9o=o("BartForConditionalGeneration"),P9o=o(" (BART model)"),B9o=l(),C2=a("li"),Eme=a("strong"),I9o=o("bigbird_pegasus"),N9o=o(" \u2014 "),UD=a("a"),q9o=o("BigBirdPegasusForConditionalGeneration"),j9o=o(" (BigBirdPegasus model)"),D9o=l(),w2=a("li"),Cme=a("strong"),G9o=o("blenderbot"),O9o=o(" \u2014 "),JD=a("a"),V9o=o("BlenderbotForConditionalGeneration"),X9o=o(" (Blenderbot model)"),z9o=l(),A2=a("li"),wme=a("strong"),W9o=o("blenderbot-small"),Q9o=o(" \u2014 "),YD=a("a"),H9o=o("BlenderbotSmallForConditionalGeneration"),U9o=o(" (BlenderbotSmall model)"),J9o=l(),y2=a("li"),Ame=a("strong"),Y9o=o("encoder-decoder"),K9o=o(" \u2014 "),KD=a("a"),Z9o=o("EncoderDecoderModel"),exo=o(" (Encoder decoder model)"),oxo=l(),L2=a("li"),yme=a("strong"),rxo=o("fsmt"),txo=o(" \u2014 "),ZD=a("a"),axo=o("FSMTForConditionalGeneration"),nxo=o(" (FairSeq Machine-Translation model)"),sxo=l(),x2=a("li"),Lme=a("strong"),lxo=o("led"),ixo=o(" \u2014 "),eG=a("a"),dxo=o("LEDForConditionalGeneration"),cxo=o(" (LED model)"),mxo=l(),$2=a("li"),xme=a("strong"),fxo=o("m2m_100"),gxo=o(" \u2014 "),oG=a("a"),hxo=o("M2M100ForConditionalGeneration"),uxo=o(" (M2M100 model)"),pxo=l(),k2=a("li"),$me=a("strong"),_xo=o("marian"),bxo=o(" \u2014 "),rG=a("a"),vxo=o("MarianMTModel"),Fxo=o(" (Marian model)"),Txo=l(),S2=a("li"),kme=a("strong"),Mxo=o("mbart"),Exo=o(" \u2014 "),tG=a("a"),Cxo=o("MBartForConditionalGeneration"),wxo=o(" (mBART model)"),Axo=l(),R2=a("li"),Sme=a("strong"),yxo=o("mt5"),Lxo=o(" \u2014 "),aG=a("a"),xxo=o("MT5ForConditionalGeneration"),$xo=o(" (mT5 model)"),kxo=l(),P2=a("li"),Rme=a("strong"),Sxo=o("pegasus"),Rxo=o(" \u2014 "),nG=a("a"),Pxo=o("PegasusForConditionalGeneration"),Bxo=o(" (Pegasus model)"),Ixo=l(),B2=a("li"),Pme=a("strong"),Nxo=o("plbart"),qxo=o(" \u2014 "),sG=a("a"),jxo=o("PLBartForConditionalGeneration"),Dxo=o(" (PLBart model)"),Gxo=l(),I2=a("li"),Bme=a("strong"),Oxo=o("prophetnet"),Vxo=o(" \u2014 "),lG=a("a"),Xxo=o("ProphetNetForConditionalGeneration"),zxo=o(" (ProphetNet model)"),Wxo=l(),N2=a("li"),Ime=a("strong"),Qxo=o("t5"),Hxo=o(" \u2014 "),iG=a("a"),Uxo=o("T5ForConditionalGeneration"),Jxo=o(" (T5 model)"),Yxo=l(),q2=a("li"),Nme=a("strong"),Kxo=o("xlm-prophetnet"),Zxo=o(" \u2014 "),dG=a("a"),e$o=o("XLMProphetNetForConditionalGeneration"),o$o=o(" (XLMProphetNet model)"),r$o=l(),j2=a("p"),t$o=o("The model is set in evaluation mode by default using "),qme=a("code"),a$o=o("model.eval()"),n$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),s$o=o("model.train()"),l$o=l(),F(D2.$$.fragment),Nqe=l(),Di=a("h2"),G2=a("a"),Dme=a("span"),F(LL.$$.fragment),i$o=l(),Gme=a("span"),d$o=o("AutoModelForSequenceClassification"),qqe=l(),Ro=a("div"),F(xL.$$.fragment),c$o=l(),Gi=a("p"),m$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cG=a("a"),f$o=o("from_pretrained()"),g$o=o(" class method or the "),mG=a("a"),h$o=o("from_config()"),u$o=o(` class
method.`),p$o=l(),$L=a("p"),_$o=o("This class cannot be instantiated directly using "),Ome=a("code"),b$o=o("__init__()"),v$o=o(" (throws an error)."),F$o=l(),it=a("div"),F(kL.$$.fragment),T$o=l(),Vme=a("p"),M$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E$o=l(),Oi=a("p"),C$o=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),w$o=o("not"),A$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),y$o=o("from_pretrained()"),L$o=o(" to load the model weights."),x$o=l(),F(O2.$$.fragment),$$o=l(),oo=a("div"),F(SL.$$.fragment),k$o=l(),zme=a("p"),S$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),R$o=l(),Ra=a("p"),P$o=o("The model class to instantiate is selected based on the "),Wme=a("code"),B$o=o("model_type"),I$o=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),N$o=o("pretrained_model_name_or_path"),q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),j$o=o("pretrained_model_name_or_path"),D$o=o(":"),G$o=l(),N=a("ul"),V2=a("li"),Ume=a("strong"),O$o=o("albert"),V$o=o(" \u2014 "),gG=a("a"),X$o=o("AlbertForSequenceClassification"),z$o=o(" (ALBERT model)"),W$o=l(),X2=a("li"),Jme=a("strong"),Q$o=o("bart"),H$o=o(" \u2014 "),hG=a("a"),U$o=o("BartForSequenceClassification"),J$o=o(" (BART model)"),Y$o=l(),z2=a("li"),Yme=a("strong"),K$o=o("bert"),Z$o=o(" \u2014 "),uG=a("a"),eko=o("BertForSequenceClassification"),oko=o(" (BERT model)"),rko=l(),W2=a("li"),Kme=a("strong"),tko=o("big_bird"),ako=o(" \u2014 "),pG=a("a"),nko=o("BigBirdForSequenceClassification"),sko=o(" (BigBird model)"),lko=l(),Q2=a("li"),Zme=a("strong"),iko=o("bigbird_pegasus"),dko=o(" \u2014 "),_G=a("a"),cko=o("BigBirdPegasusForSequenceClassification"),mko=o(" (BigBirdPegasus model)"),fko=l(),H2=a("li"),efe=a("strong"),gko=o("camembert"),hko=o(" \u2014 "),bG=a("a"),uko=o("CamembertForSequenceClassification"),pko=o(" (CamemBERT model)"),_ko=l(),U2=a("li"),ofe=a("strong"),bko=o("canine"),vko=o(" \u2014 "),vG=a("a"),Fko=o("CanineForSequenceClassification"),Tko=o(" (Canine model)"),Mko=l(),J2=a("li"),rfe=a("strong"),Eko=o("convbert"),Cko=o(" \u2014 "),FG=a("a"),wko=o("ConvBertForSequenceClassification"),Ako=o(" (ConvBERT model)"),yko=l(),Y2=a("li"),tfe=a("strong"),Lko=o("ctrl"),xko=o(" \u2014 "),TG=a("a"),$ko=o("CTRLForSequenceClassification"),kko=o(" (CTRL model)"),Sko=l(),K2=a("li"),afe=a("strong"),Rko=o("data2vec-text"),Pko=o(" \u2014 "),MG=a("a"),Bko=o("Data2VecTextForSequenceClassification"),Iko=o(" (Data2VecText model)"),Nko=l(),Z2=a("li"),nfe=a("strong"),qko=o("deberta"),jko=o(" \u2014 "),EG=a("a"),Dko=o("DebertaForSequenceClassification"),Gko=o(" (DeBERTa model)"),Oko=l(),ev=a("li"),sfe=a("strong"),Vko=o("deberta-v2"),Xko=o(" \u2014 "),CG=a("a"),zko=o("DebertaV2ForSequenceClassification"),Wko=o(" (DeBERTa-v2 model)"),Qko=l(),ov=a("li"),lfe=a("strong"),Hko=o("distilbert"),Uko=o(" \u2014 "),wG=a("a"),Jko=o("DistilBertForSequenceClassification"),Yko=o(" (DistilBERT model)"),Kko=l(),rv=a("li"),ife=a("strong"),Zko=o("electra"),eSo=o(" \u2014 "),AG=a("a"),oSo=o("ElectraForSequenceClassification"),rSo=o(" (ELECTRA model)"),tSo=l(),tv=a("li"),dfe=a("strong"),aSo=o("flaubert"),nSo=o(" \u2014 "),yG=a("a"),sSo=o("FlaubertForSequenceClassification"),lSo=o(" (FlauBERT model)"),iSo=l(),av=a("li"),cfe=a("strong"),dSo=o("fnet"),cSo=o(" \u2014 "),LG=a("a"),mSo=o("FNetForSequenceClassification"),fSo=o(" (FNet model)"),gSo=l(),nv=a("li"),mfe=a("strong"),hSo=o("funnel"),uSo=o(" \u2014 "),xG=a("a"),pSo=o("FunnelForSequenceClassification"),_So=o(" (Funnel Transformer model)"),bSo=l(),sv=a("li"),ffe=a("strong"),vSo=o("gpt2"),FSo=o(" \u2014 "),$G=a("a"),TSo=o("GPT2ForSequenceClassification"),MSo=o(" (OpenAI GPT-2 model)"),ESo=l(),lv=a("li"),gfe=a("strong"),CSo=o("gpt_neo"),wSo=o(" \u2014 "),kG=a("a"),ASo=o("GPTNeoForSequenceClassification"),ySo=o(" (GPT Neo model)"),LSo=l(),iv=a("li"),hfe=a("strong"),xSo=o("gptj"),$So=o(" \u2014 "),SG=a("a"),kSo=o("GPTJForSequenceClassification"),SSo=o(" (GPT-J model)"),RSo=l(),dv=a("li"),ufe=a("strong"),PSo=o("ibert"),BSo=o(" \u2014 "),RG=a("a"),ISo=o("IBertForSequenceClassification"),NSo=o(" (I-BERT model)"),qSo=l(),cv=a("li"),pfe=a("strong"),jSo=o("layoutlm"),DSo=o(" \u2014 "),PG=a("a"),GSo=o("LayoutLMForSequenceClassification"),OSo=o(" (LayoutLM model)"),VSo=l(),mv=a("li"),_fe=a("strong"),XSo=o("layoutlmv2"),zSo=o(" \u2014 "),BG=a("a"),WSo=o("LayoutLMv2ForSequenceClassification"),QSo=o(" (LayoutLMv2 model)"),HSo=l(),fv=a("li"),bfe=a("strong"),USo=o("layoutlmv3"),JSo=o(" \u2014 "),IG=a("a"),YSo=o("LayoutLMv3ForSequenceClassification"),KSo=o(" (LayoutLMv3 model)"),ZSo=l(),gv=a("li"),vfe=a("strong"),eRo=o("led"),oRo=o(" \u2014 "),NG=a("a"),rRo=o("LEDForSequenceClassification"),tRo=o(" (LED model)"),aRo=l(),hv=a("li"),Ffe=a("strong"),nRo=o("longformer"),sRo=o(" \u2014 "),qG=a("a"),lRo=o("LongformerForSequenceClassification"),iRo=o(" (Longformer model)"),dRo=l(),uv=a("li"),Tfe=a("strong"),cRo=o("mbart"),mRo=o(" \u2014 "),jG=a("a"),fRo=o("MBartForSequenceClassification"),gRo=o(" (mBART model)"),hRo=l(),pv=a("li"),Mfe=a("strong"),uRo=o("megatron-bert"),pRo=o(" \u2014 "),DG=a("a"),_Ro=o("MegatronBertForSequenceClassification"),bRo=o(" (MegatronBert model)"),vRo=l(),_v=a("li"),Efe=a("strong"),FRo=o("mobilebert"),TRo=o(" \u2014 "),GG=a("a"),MRo=o("MobileBertForSequenceClassification"),ERo=o(" (MobileBERT model)"),CRo=l(),bv=a("li"),Cfe=a("strong"),wRo=o("mpnet"),ARo=o(" \u2014 "),OG=a("a"),yRo=o("MPNetForSequenceClassification"),LRo=o(" (MPNet model)"),xRo=l(),vv=a("li"),wfe=a("strong"),$Ro=o("nystromformer"),kRo=o(" \u2014 "),VG=a("a"),SRo=o("NystromformerForSequenceClassification"),RRo=o(" (Nystromformer model)"),PRo=l(),Fv=a("li"),Afe=a("strong"),BRo=o("openai-gpt"),IRo=o(" \u2014 "),XG=a("a"),NRo=o("OpenAIGPTForSequenceClassification"),qRo=o(" (OpenAI GPT model)"),jRo=l(),Tv=a("li"),yfe=a("strong"),DRo=o("perceiver"),GRo=o(" \u2014 "),zG=a("a"),ORo=o("PerceiverForSequenceClassification"),VRo=o(" (Perceiver model)"),XRo=l(),Mv=a("li"),Lfe=a("strong"),zRo=o("plbart"),WRo=o(" \u2014 "),WG=a("a"),QRo=o("PLBartForSequenceClassification"),HRo=o(" (PLBart model)"),URo=l(),Ev=a("li"),xfe=a("strong"),JRo=o("qdqbert"),YRo=o(" \u2014 "),QG=a("a"),KRo=o("QDQBertForSequenceClassification"),ZRo=o(" (QDQBert model)"),ePo=l(),Cv=a("li"),$fe=a("strong"),oPo=o("reformer"),rPo=o(" \u2014 "),HG=a("a"),tPo=o("ReformerForSequenceClassification"),aPo=o(" (Reformer model)"),nPo=l(),wv=a("li"),kfe=a("strong"),sPo=o("rembert"),lPo=o(" \u2014 "),UG=a("a"),iPo=o("RemBertForSequenceClassification"),dPo=o(" (RemBERT model)"),cPo=l(),Av=a("li"),Sfe=a("strong"),mPo=o("roberta"),fPo=o(" \u2014 "),JG=a("a"),gPo=o("RobertaForSequenceClassification"),hPo=o(" (RoBERTa model)"),uPo=l(),yv=a("li"),Rfe=a("strong"),pPo=o("roformer"),_Po=o(" \u2014 "),YG=a("a"),bPo=o("RoFormerForSequenceClassification"),vPo=o(" (RoFormer model)"),FPo=l(),Lv=a("li"),Pfe=a("strong"),TPo=o("squeezebert"),MPo=o(" \u2014 "),KG=a("a"),EPo=o("SqueezeBertForSequenceClassification"),CPo=o(" (SqueezeBERT model)"),wPo=l(),xv=a("li"),Bfe=a("strong"),APo=o("tapas"),yPo=o(" \u2014 "),ZG=a("a"),LPo=o("TapasForSequenceClassification"),xPo=o(" (TAPAS model)"),$Po=l(),$v=a("li"),Ife=a("strong"),kPo=o("transfo-xl"),SPo=o(" \u2014 "),eO=a("a"),RPo=o("TransfoXLForSequenceClassification"),PPo=o(" (Transformer-XL model)"),BPo=l(),kv=a("li"),Nfe=a("strong"),IPo=o("xlm"),NPo=o(" \u2014 "),oO=a("a"),qPo=o("XLMForSequenceClassification"),jPo=o(" (XLM model)"),DPo=l(),Sv=a("li"),qfe=a("strong"),GPo=o("xlm-roberta"),OPo=o(" \u2014 "),rO=a("a"),VPo=o("XLMRobertaForSequenceClassification"),XPo=o(" (XLM-RoBERTa model)"),zPo=l(),Rv=a("li"),jfe=a("strong"),WPo=o("xlm-roberta-xl"),QPo=o(" \u2014 "),tO=a("a"),HPo=o("XLMRobertaXLForSequenceClassification"),UPo=o(" (XLM-RoBERTa-XL model)"),JPo=l(),Pv=a("li"),Dfe=a("strong"),YPo=o("xlnet"),KPo=o(" \u2014 "),aO=a("a"),ZPo=o("XLNetForSequenceClassification"),eBo=o(" (XLNet model)"),oBo=l(),Bv=a("li"),Gfe=a("strong"),rBo=o("yoso"),tBo=o(" \u2014 "),nO=a("a"),aBo=o("YosoForSequenceClassification"),nBo=o(" (YOSO model)"),sBo=l(),Iv=a("p"),lBo=o("The model is set in evaluation mode by default using "),Ofe=a("code"),iBo=o("model.eval()"),dBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=a("code"),cBo=o("model.train()"),mBo=l(),F(Nv.$$.fragment),jqe=l(),Vi=a("h2"),qv=a("a"),Xfe=a("span"),F(RL.$$.fragment),fBo=l(),zfe=a("span"),gBo=o("AutoModelForMultipleChoice"),Dqe=l(),Po=a("div"),F(PL.$$.fragment),hBo=l(),Xi=a("p"),uBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sO=a("a"),pBo=o("from_pretrained()"),_Bo=o(" class method or the "),lO=a("a"),bBo=o("from_config()"),vBo=o(` class
method.`),FBo=l(),BL=a("p"),TBo=o("This class cannot be instantiated directly using "),Wfe=a("code"),MBo=o("__init__()"),EBo=o(" (throws an error)."),CBo=l(),dt=a("div"),F(IL.$$.fragment),wBo=l(),Qfe=a("p"),ABo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yBo=l(),zi=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),xBo=o("not"),$Bo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),kBo=o("from_pretrained()"),SBo=o(" to load the model weights."),RBo=l(),F(jv.$$.fragment),PBo=l(),ro=a("div"),F(NL.$$.fragment),BBo=l(),Ufe=a("p"),IBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NBo=l(),Pa=a("p"),qBo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),jBo=o("model_type"),DBo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),GBo=o("pretrained_model_name_or_path"),OBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(":"),zBo=l(),K=a("ul"),Dv=a("li"),Zfe=a("strong"),WBo=o("albert"),QBo=o(" \u2014 "),dO=a("a"),HBo=o("AlbertForMultipleChoice"),UBo=o(" (ALBERT model)"),JBo=l(),Gv=a("li"),ege=a("strong"),YBo=o("bert"),KBo=o(" \u2014 "),cO=a("a"),ZBo=o("BertForMultipleChoice"),eIo=o(" (BERT model)"),oIo=l(),Ov=a("li"),oge=a("strong"),rIo=o("big_bird"),tIo=o(" \u2014 "),mO=a("a"),aIo=o("BigBirdForMultipleChoice"),nIo=o(" (BigBird model)"),sIo=l(),Vv=a("li"),rge=a("strong"),lIo=o("camembert"),iIo=o(" \u2014 "),fO=a("a"),dIo=o("CamembertForMultipleChoice"),cIo=o(" (CamemBERT model)"),mIo=l(),Xv=a("li"),tge=a("strong"),fIo=o("canine"),gIo=o(" \u2014 "),gO=a("a"),hIo=o("CanineForMultipleChoice"),uIo=o(" (Canine model)"),pIo=l(),zv=a("li"),age=a("strong"),_Io=o("convbert"),bIo=o(" \u2014 "),hO=a("a"),vIo=o("ConvBertForMultipleChoice"),FIo=o(" (ConvBERT model)"),TIo=l(),Wv=a("li"),nge=a("strong"),MIo=o("data2vec-text"),EIo=o(" \u2014 "),uO=a("a"),CIo=o("Data2VecTextForMultipleChoice"),wIo=o(" (Data2VecText model)"),AIo=l(),Qv=a("li"),sge=a("strong"),yIo=o("deberta-v2"),LIo=o(" \u2014 "),pO=a("a"),xIo=o("DebertaV2ForMultipleChoice"),$Io=o(" (DeBERTa-v2 model)"),kIo=l(),Hv=a("li"),lge=a("strong"),SIo=o("distilbert"),RIo=o(" \u2014 "),_O=a("a"),PIo=o("DistilBertForMultipleChoice"),BIo=o(" (DistilBERT model)"),IIo=l(),Uv=a("li"),ige=a("strong"),NIo=o("electra"),qIo=o(" \u2014 "),bO=a("a"),jIo=o("ElectraForMultipleChoice"),DIo=o(" (ELECTRA model)"),GIo=l(),Jv=a("li"),dge=a("strong"),OIo=o("flaubert"),VIo=o(" \u2014 "),vO=a("a"),XIo=o("FlaubertForMultipleChoice"),zIo=o(" (FlauBERT model)"),WIo=l(),Yv=a("li"),cge=a("strong"),QIo=o("fnet"),HIo=o(" \u2014 "),FO=a("a"),UIo=o("FNetForMultipleChoice"),JIo=o(" (FNet model)"),YIo=l(),Kv=a("li"),mge=a("strong"),KIo=o("funnel"),ZIo=o(" \u2014 "),TO=a("a"),eNo=o("FunnelForMultipleChoice"),oNo=o(" (Funnel Transformer model)"),rNo=l(),Zv=a("li"),fge=a("strong"),tNo=o("ibert"),aNo=o(" \u2014 "),MO=a("a"),nNo=o("IBertForMultipleChoice"),sNo=o(" (I-BERT model)"),lNo=l(),eF=a("li"),gge=a("strong"),iNo=o("longformer"),dNo=o(" \u2014 "),EO=a("a"),cNo=o("LongformerForMultipleChoice"),mNo=o(" (Longformer model)"),fNo=l(),oF=a("li"),hge=a("strong"),gNo=o("megatron-bert"),hNo=o(" \u2014 "),CO=a("a"),uNo=o("MegatronBertForMultipleChoice"),pNo=o(" (MegatronBert model)"),_No=l(),rF=a("li"),uge=a("strong"),bNo=o("mobilebert"),vNo=o(" \u2014 "),wO=a("a"),FNo=o("MobileBertForMultipleChoice"),TNo=o(" (MobileBERT model)"),MNo=l(),tF=a("li"),pge=a("strong"),ENo=o("mpnet"),CNo=o(" \u2014 "),AO=a("a"),wNo=o("MPNetForMultipleChoice"),ANo=o(" (MPNet model)"),yNo=l(),aF=a("li"),_ge=a("strong"),LNo=o("nystromformer"),xNo=o(" \u2014 "),yO=a("a"),$No=o("NystromformerForMultipleChoice"),kNo=o(" (Nystromformer model)"),SNo=l(),nF=a("li"),bge=a("strong"),RNo=o("qdqbert"),PNo=o(" \u2014 "),LO=a("a"),BNo=o("QDQBertForMultipleChoice"),INo=o(" (QDQBert model)"),NNo=l(),sF=a("li"),vge=a("strong"),qNo=o("rembert"),jNo=o(" \u2014 "),xO=a("a"),DNo=o("RemBertForMultipleChoice"),GNo=o(" (RemBERT model)"),ONo=l(),lF=a("li"),Fge=a("strong"),VNo=o("roberta"),XNo=o(" \u2014 "),$O=a("a"),zNo=o("RobertaForMultipleChoice"),WNo=o(" (RoBERTa model)"),QNo=l(),iF=a("li"),Tge=a("strong"),HNo=o("roformer"),UNo=o(" \u2014 "),kO=a("a"),JNo=o("RoFormerForMultipleChoice"),YNo=o(" (RoFormer model)"),KNo=l(),dF=a("li"),Mge=a("strong"),ZNo=o("squeezebert"),eqo=o(" \u2014 "),SO=a("a"),oqo=o("SqueezeBertForMultipleChoice"),rqo=o(" (SqueezeBERT model)"),tqo=l(),cF=a("li"),Ege=a("strong"),aqo=o("xlm"),nqo=o(" \u2014 "),RO=a("a"),sqo=o("XLMForMultipleChoice"),lqo=o(" (XLM model)"),iqo=l(),mF=a("li"),Cge=a("strong"),dqo=o("xlm-roberta"),cqo=o(" \u2014 "),PO=a("a"),mqo=o("XLMRobertaForMultipleChoice"),fqo=o(" (XLM-RoBERTa model)"),gqo=l(),fF=a("li"),wge=a("strong"),hqo=o("xlm-roberta-xl"),uqo=o(" \u2014 "),BO=a("a"),pqo=o("XLMRobertaXLForMultipleChoice"),_qo=o(" (XLM-RoBERTa-XL model)"),bqo=l(),gF=a("li"),Age=a("strong"),vqo=o("xlnet"),Fqo=o(" \u2014 "),IO=a("a"),Tqo=o("XLNetForMultipleChoice"),Mqo=o(" (XLNet model)"),Eqo=l(),hF=a("li"),yge=a("strong"),Cqo=o("yoso"),wqo=o(" \u2014 "),NO=a("a"),Aqo=o("YosoForMultipleChoice"),yqo=o(" (YOSO model)"),Lqo=l(),uF=a("p"),xqo=o("The model is set in evaluation mode by default using "),Lge=a("code"),$qo=o("model.eval()"),kqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),Sqo=o("model.train()"),Rqo=l(),F(pF.$$.fragment),Gqe=l(),Wi=a("h2"),_F=a("a"),$ge=a("span"),F(qL.$$.fragment),Pqo=l(),kge=a("span"),Bqo=o("AutoModelForNextSentencePrediction"),Oqe=l(),Bo=a("div"),F(jL.$$.fragment),Iqo=l(),Qi=a("p"),Nqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qO=a("a"),qqo=o("from_pretrained()"),jqo=o(" class method or the "),jO=a("a"),Dqo=o("from_config()"),Gqo=o(` class
method.`),Oqo=l(),DL=a("p"),Vqo=o("This class cannot be instantiated directly using "),Sge=a("code"),Xqo=o("__init__()"),zqo=o(" (throws an error)."),Wqo=l(),ct=a("div"),F(GL.$$.fragment),Qqo=l(),Rge=a("p"),Hqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Uqo=l(),Hi=a("p"),Jqo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),Yqo=o("not"),Kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),Zqo=o("from_pretrained()"),ejo=o(" to load the model weights."),ojo=l(),F(bF.$$.fragment),rjo=l(),to=a("div"),F(OL.$$.fragment),tjo=l(),Bge=a("p"),ajo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),njo=l(),Ba=a("p"),sjo=o("The model class to instantiate is selected based on the "),Ige=a("code"),ljo=o("model_type"),ijo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),djo=o("pretrained_model_name_or_path"),cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),mjo=o("pretrained_model_name_or_path"),fjo=o(":"),gjo=l(),Yr=a("ul"),vF=a("li"),jge=a("strong"),hjo=o("bert"),ujo=o(" \u2014 "),GO=a("a"),pjo=o("BertForNextSentencePrediction"),_jo=o(" (BERT model)"),bjo=l(),FF=a("li"),Dge=a("strong"),vjo=o("fnet"),Fjo=o(" \u2014 "),OO=a("a"),Tjo=o("FNetForNextSentencePrediction"),Mjo=o(" (FNet model)"),Ejo=l(),TF=a("li"),Gge=a("strong"),Cjo=o("megatron-bert"),wjo=o(" \u2014 "),VO=a("a"),Ajo=o("MegatronBertForNextSentencePrediction"),yjo=o(" (MegatronBert model)"),Ljo=l(),MF=a("li"),Oge=a("strong"),xjo=o("mobilebert"),$jo=o(" \u2014 "),XO=a("a"),kjo=o("MobileBertForNextSentencePrediction"),Sjo=o(" (MobileBERT model)"),Rjo=l(),EF=a("li"),Vge=a("strong"),Pjo=o("qdqbert"),Bjo=o(" \u2014 "),zO=a("a"),Ijo=o("QDQBertForNextSentencePrediction"),Njo=o(" (QDQBert model)"),qjo=l(),CF=a("p"),jjo=o("The model is set in evaluation mode by default using "),Xge=a("code"),Djo=o("model.eval()"),Gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),Ojo=o("model.train()"),Vjo=l(),F(wF.$$.fragment),Vqe=l(),Ui=a("h2"),AF=a("a"),Wge=a("span"),F(VL.$$.fragment),Xjo=l(),Qge=a("span"),zjo=o("AutoModelForTokenClassification"),Xqe=l(),Io=a("div"),F(XL.$$.fragment),Wjo=l(),Ji=a("p"),Qjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WO=a("a"),Hjo=o("from_pretrained()"),Ujo=o(" class method or the "),QO=a("a"),Jjo=o("from_config()"),Yjo=o(` class
method.`),Kjo=l(),zL=a("p"),Zjo=o("This class cannot be instantiated directly using "),Hge=a("code"),eDo=o("__init__()"),oDo=o(" (throws an error)."),rDo=l(),mt=a("div"),F(WL.$$.fragment),tDo=l(),Uge=a("p"),aDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nDo=l(),Yi=a("p"),sDo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),lDo=o("not"),iDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),dDo=o("from_pretrained()"),cDo=o(" to load the model weights."),mDo=l(),F(yF.$$.fragment),fDo=l(),ao=a("div"),F(QL.$$.fragment),gDo=l(),Yge=a("p"),hDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uDo=l(),Ia=a("p"),pDo=o("The model class to instantiate is selected based on the "),Kge=a("code"),_Do=o("model_type"),bDo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),vDo=o("pretrained_model_name_or_path"),FDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(":"),EDo=l(),H=a("ul"),LF=a("li"),ohe=a("strong"),CDo=o("albert"),wDo=o(" \u2014 "),UO=a("a"),ADo=o("AlbertForTokenClassification"),yDo=o(" (ALBERT model)"),LDo=l(),xF=a("li"),rhe=a("strong"),xDo=o("bert"),$Do=o(" \u2014 "),JO=a("a"),kDo=o("BertForTokenClassification"),SDo=o(" (BERT model)"),RDo=l(),$F=a("li"),the=a("strong"),PDo=o("big_bird"),BDo=o(" \u2014 "),YO=a("a"),IDo=o("BigBirdForTokenClassification"),NDo=o(" (BigBird model)"),qDo=l(),kF=a("li"),ahe=a("strong"),jDo=o("camembert"),DDo=o(" \u2014 "),KO=a("a"),GDo=o("CamembertForTokenClassification"),ODo=o(" (CamemBERT model)"),VDo=l(),SF=a("li"),nhe=a("strong"),XDo=o("canine"),zDo=o(" \u2014 "),ZO=a("a"),WDo=o("CanineForTokenClassification"),QDo=o(" (Canine model)"),HDo=l(),RF=a("li"),she=a("strong"),UDo=o("convbert"),JDo=o(" \u2014 "),eV=a("a"),YDo=o("ConvBertForTokenClassification"),KDo=o(" (ConvBERT model)"),ZDo=l(),PF=a("li"),lhe=a("strong"),eGo=o("data2vec-text"),oGo=o(" \u2014 "),oV=a("a"),rGo=o("Data2VecTextForTokenClassification"),tGo=o(" (Data2VecText model)"),aGo=l(),BF=a("li"),ihe=a("strong"),nGo=o("deberta"),sGo=o(" \u2014 "),rV=a("a"),lGo=o("DebertaForTokenClassification"),iGo=o(" (DeBERTa model)"),dGo=l(),IF=a("li"),dhe=a("strong"),cGo=o("deberta-v2"),mGo=o(" \u2014 "),tV=a("a"),fGo=o("DebertaV2ForTokenClassification"),gGo=o(" (DeBERTa-v2 model)"),hGo=l(),NF=a("li"),che=a("strong"),uGo=o("distilbert"),pGo=o(" \u2014 "),aV=a("a"),_Go=o("DistilBertForTokenClassification"),bGo=o(" (DistilBERT model)"),vGo=l(),qF=a("li"),mhe=a("strong"),FGo=o("electra"),TGo=o(" \u2014 "),nV=a("a"),MGo=o("ElectraForTokenClassification"),EGo=o(" (ELECTRA model)"),CGo=l(),jF=a("li"),fhe=a("strong"),wGo=o("flaubert"),AGo=o(" \u2014 "),sV=a("a"),yGo=o("FlaubertForTokenClassification"),LGo=o(" (FlauBERT model)"),xGo=l(),DF=a("li"),ghe=a("strong"),$Go=o("fnet"),kGo=o(" \u2014 "),lV=a("a"),SGo=o("FNetForTokenClassification"),RGo=o(" (FNet model)"),PGo=l(),GF=a("li"),hhe=a("strong"),BGo=o("funnel"),IGo=o(" \u2014 "),iV=a("a"),NGo=o("FunnelForTokenClassification"),qGo=o(" (Funnel Transformer model)"),jGo=l(),OF=a("li"),uhe=a("strong"),DGo=o("gpt2"),GGo=o(" \u2014 "),dV=a("a"),OGo=o("GPT2ForTokenClassification"),VGo=o(" (OpenAI GPT-2 model)"),XGo=l(),VF=a("li"),phe=a("strong"),zGo=o("ibert"),WGo=o(" \u2014 "),cV=a("a"),QGo=o("IBertForTokenClassification"),HGo=o(" (I-BERT model)"),UGo=l(),XF=a("li"),_he=a("strong"),JGo=o("layoutlm"),YGo=o(" \u2014 "),mV=a("a"),KGo=o("LayoutLMForTokenClassification"),ZGo=o(" (LayoutLM model)"),eOo=l(),zF=a("li"),bhe=a("strong"),oOo=o("layoutlmv2"),rOo=o(" \u2014 "),fV=a("a"),tOo=o("LayoutLMv2ForTokenClassification"),aOo=o(" (LayoutLMv2 model)"),nOo=l(),WF=a("li"),vhe=a("strong"),sOo=o("layoutlmv3"),lOo=o(" \u2014 "),gV=a("a"),iOo=o("LayoutLMv3ForTokenClassification"),dOo=o(" (LayoutLMv3 model)"),cOo=l(),QF=a("li"),Fhe=a("strong"),mOo=o("longformer"),fOo=o(" \u2014 "),hV=a("a"),gOo=o("LongformerForTokenClassification"),hOo=o(" (Longformer model)"),uOo=l(),HF=a("li"),The=a("strong"),pOo=o("megatron-bert"),_Oo=o(" \u2014 "),uV=a("a"),bOo=o("MegatronBertForTokenClassification"),vOo=o(" (MegatronBert model)"),FOo=l(),UF=a("li"),Mhe=a("strong"),TOo=o("mobilebert"),MOo=o(" \u2014 "),pV=a("a"),EOo=o("MobileBertForTokenClassification"),COo=o(" (MobileBERT model)"),wOo=l(),JF=a("li"),Ehe=a("strong"),AOo=o("mpnet"),yOo=o(" \u2014 "),_V=a("a"),LOo=o("MPNetForTokenClassification"),xOo=o(" (MPNet model)"),$Oo=l(),YF=a("li"),Che=a("strong"),kOo=o("nystromformer"),SOo=o(" \u2014 "),bV=a("a"),ROo=o("NystromformerForTokenClassification"),POo=o(" (Nystromformer model)"),BOo=l(),KF=a("li"),whe=a("strong"),IOo=o("qdqbert"),NOo=o(" \u2014 "),vV=a("a"),qOo=o("QDQBertForTokenClassification"),jOo=o(" (QDQBert model)"),DOo=l(),ZF=a("li"),Ahe=a("strong"),GOo=o("rembert"),OOo=o(" \u2014 "),FV=a("a"),VOo=o("RemBertForTokenClassification"),XOo=o(" (RemBERT model)"),zOo=l(),e1=a("li"),yhe=a("strong"),WOo=o("roberta"),QOo=o(" \u2014 "),TV=a("a"),HOo=o("RobertaForTokenClassification"),UOo=o(" (RoBERTa model)"),JOo=l(),o1=a("li"),Lhe=a("strong"),YOo=o("roformer"),KOo=o(" \u2014 "),MV=a("a"),ZOo=o("RoFormerForTokenClassification"),eVo=o(" (RoFormer model)"),oVo=l(),r1=a("li"),xhe=a("strong"),rVo=o("squeezebert"),tVo=o(" \u2014 "),EV=a("a"),aVo=o("SqueezeBertForTokenClassification"),nVo=o(" (SqueezeBERT model)"),sVo=l(),t1=a("li"),$he=a("strong"),lVo=o("xlm"),iVo=o(" \u2014 "),CV=a("a"),dVo=o("XLMForTokenClassification"),cVo=o(" (XLM model)"),mVo=l(),a1=a("li"),khe=a("strong"),fVo=o("xlm-roberta"),gVo=o(" \u2014 "),wV=a("a"),hVo=o("XLMRobertaForTokenClassification"),uVo=o(" (XLM-RoBERTa model)"),pVo=l(),n1=a("li"),She=a("strong"),_Vo=o("xlm-roberta-xl"),bVo=o(" \u2014 "),AV=a("a"),vVo=o("XLMRobertaXLForTokenClassification"),FVo=o(" (XLM-RoBERTa-XL model)"),TVo=l(),s1=a("li"),Rhe=a("strong"),MVo=o("xlnet"),EVo=o(" \u2014 "),yV=a("a"),CVo=o("XLNetForTokenClassification"),wVo=o(" (XLNet model)"),AVo=l(),l1=a("li"),Phe=a("strong"),yVo=o("yoso"),LVo=o(" \u2014 "),LV=a("a"),xVo=o("YosoForTokenClassification"),$Vo=o(" (YOSO model)"),kVo=l(),i1=a("p"),SVo=o("The model is set in evaluation mode by default using "),Bhe=a("code"),RVo=o("model.eval()"),PVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),BVo=o("model.train()"),IVo=l(),F(d1.$$.fragment),zqe=l(),Ki=a("h2"),c1=a("a"),Nhe=a("span"),F(HL.$$.fragment),NVo=l(),qhe=a("span"),qVo=o("AutoModelForQuestionAnswering"),Wqe=l(),No=a("div"),F(UL.$$.fragment),jVo=l(),Zi=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xV=a("a"),GVo=o("from_pretrained()"),OVo=o(" class method or the "),$V=a("a"),VVo=o("from_config()"),XVo=o(` class
method.`),zVo=l(),JL=a("p"),WVo=o("This class cannot be instantiated directly using "),jhe=a("code"),QVo=o("__init__()"),HVo=o(" (throws an error)."),UVo=l(),ft=a("div"),F(YL.$$.fragment),JVo=l(),Dhe=a("p"),YVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KVo=l(),ed=a("p"),ZVo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),eXo=o("not"),oXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),rXo=o("from_pretrained()"),tXo=o(" to load the model weights."),aXo=l(),F(m1.$$.fragment),nXo=l(),no=a("div"),F(KL.$$.fragment),sXo=l(),Ohe=a("p"),lXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iXo=l(),Na=a("p"),dXo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),cXo=o("model_type"),mXo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),fXo=o("pretrained_model_name_or_path"),gXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),hXo=o("pretrained_model_name_or_path"),uXo=o(":"),pXo=l(),V=a("ul"),f1=a("li"),Whe=a("strong"),_Xo=o("albert"),bXo=o(" \u2014 "),SV=a("a"),vXo=o("AlbertForQuestionAnswering"),FXo=o(" (ALBERT model)"),TXo=l(),g1=a("li"),Qhe=a("strong"),MXo=o("bart"),EXo=o(" \u2014 "),RV=a("a"),CXo=o("BartForQuestionAnswering"),wXo=o(" (BART model)"),AXo=l(),h1=a("li"),Hhe=a("strong"),yXo=o("bert"),LXo=o(" \u2014 "),PV=a("a"),xXo=o("BertForQuestionAnswering"),$Xo=o(" (BERT model)"),kXo=l(),u1=a("li"),Uhe=a("strong"),SXo=o("big_bird"),RXo=o(" \u2014 "),BV=a("a"),PXo=o("BigBirdForQuestionAnswering"),BXo=o(" (BigBird model)"),IXo=l(),p1=a("li"),Jhe=a("strong"),NXo=o("bigbird_pegasus"),qXo=o(" \u2014 "),IV=a("a"),jXo=o("BigBirdPegasusForQuestionAnswering"),DXo=o(" (BigBirdPegasus model)"),GXo=l(),_1=a("li"),Yhe=a("strong"),OXo=o("camembert"),VXo=o(" \u2014 "),NV=a("a"),XXo=o("CamembertForQuestionAnswering"),zXo=o(" (CamemBERT model)"),WXo=l(),b1=a("li"),Khe=a("strong"),QXo=o("canine"),HXo=o(" \u2014 "),qV=a("a"),UXo=o("CanineForQuestionAnswering"),JXo=o(" (Canine model)"),YXo=l(),v1=a("li"),Zhe=a("strong"),KXo=o("convbert"),ZXo=o(" \u2014 "),jV=a("a"),ezo=o("ConvBertForQuestionAnswering"),ozo=o(" (ConvBERT model)"),rzo=l(),F1=a("li"),eue=a("strong"),tzo=o("data2vec-text"),azo=o(" \u2014 "),DV=a("a"),nzo=o("Data2VecTextForQuestionAnswering"),szo=o(" (Data2VecText model)"),lzo=l(),T1=a("li"),oue=a("strong"),izo=o("deberta"),dzo=o(" \u2014 "),GV=a("a"),czo=o("DebertaForQuestionAnswering"),mzo=o(" (DeBERTa model)"),fzo=l(),M1=a("li"),rue=a("strong"),gzo=o("deberta-v2"),hzo=o(" \u2014 "),OV=a("a"),uzo=o("DebertaV2ForQuestionAnswering"),pzo=o(" (DeBERTa-v2 model)"),_zo=l(),E1=a("li"),tue=a("strong"),bzo=o("distilbert"),vzo=o(" \u2014 "),VV=a("a"),Fzo=o("DistilBertForQuestionAnswering"),Tzo=o(" (DistilBERT model)"),Mzo=l(),C1=a("li"),aue=a("strong"),Ezo=o("electra"),Czo=o(" \u2014 "),XV=a("a"),wzo=o("ElectraForQuestionAnswering"),Azo=o(" (ELECTRA model)"),yzo=l(),w1=a("li"),nue=a("strong"),Lzo=o("flaubert"),xzo=o(" \u2014 "),zV=a("a"),$zo=o("FlaubertForQuestionAnsweringSimple"),kzo=o(" (FlauBERT model)"),Szo=l(),A1=a("li"),sue=a("strong"),Rzo=o("fnet"),Pzo=o(" \u2014 "),WV=a("a"),Bzo=o("FNetForQuestionAnswering"),Izo=o(" (FNet model)"),Nzo=l(),y1=a("li"),lue=a("strong"),qzo=o("funnel"),jzo=o(" \u2014 "),QV=a("a"),Dzo=o("FunnelForQuestionAnswering"),Gzo=o(" (Funnel Transformer model)"),Ozo=l(),L1=a("li"),iue=a("strong"),Vzo=o("gptj"),Xzo=o(" \u2014 "),HV=a("a"),zzo=o("GPTJForQuestionAnswering"),Wzo=o(" (GPT-J model)"),Qzo=l(),x1=a("li"),due=a("strong"),Hzo=o("ibert"),Uzo=o(" \u2014 "),UV=a("a"),Jzo=o("IBertForQuestionAnswering"),Yzo=o(" (I-BERT model)"),Kzo=l(),$1=a("li"),cue=a("strong"),Zzo=o("layoutlmv2"),eWo=o(" \u2014 "),JV=a("a"),oWo=o("LayoutLMv2ForQuestionAnswering"),rWo=o(" (LayoutLMv2 model)"),tWo=l(),k1=a("li"),mue=a("strong"),aWo=o("layoutlmv3"),nWo=o(" \u2014 "),YV=a("a"),sWo=o("LayoutLMv3ForQuestionAnswering"),lWo=o(" (LayoutLMv3 model)"),iWo=l(),S1=a("li"),fue=a("strong"),dWo=o("led"),cWo=o(" \u2014 "),KV=a("a"),mWo=o("LEDForQuestionAnswering"),fWo=o(" (LED model)"),gWo=l(),R1=a("li"),gue=a("strong"),hWo=o("longformer"),uWo=o(" \u2014 "),ZV=a("a"),pWo=o("LongformerForQuestionAnswering"),_Wo=o(" (Longformer model)"),bWo=l(),P1=a("li"),hue=a("strong"),vWo=o("lxmert"),FWo=o(" \u2014 "),eX=a("a"),TWo=o("LxmertForQuestionAnswering"),MWo=o(" (LXMERT model)"),EWo=l(),B1=a("li"),uue=a("strong"),CWo=o("mbart"),wWo=o(" \u2014 "),oX=a("a"),AWo=o("MBartForQuestionAnswering"),yWo=o(" (mBART model)"),LWo=l(),I1=a("li"),pue=a("strong"),xWo=o("megatron-bert"),$Wo=o(" \u2014 "),rX=a("a"),kWo=o("MegatronBertForQuestionAnswering"),SWo=o(" (MegatronBert model)"),RWo=l(),N1=a("li"),_ue=a("strong"),PWo=o("mobilebert"),BWo=o(" \u2014 "),tX=a("a"),IWo=o("MobileBertForQuestionAnswering"),NWo=o(" (MobileBERT model)"),qWo=l(),q1=a("li"),bue=a("strong"),jWo=o("mpnet"),DWo=o(" \u2014 "),aX=a("a"),GWo=o("MPNetForQuestionAnswering"),OWo=o(" (MPNet model)"),VWo=l(),j1=a("li"),vue=a("strong"),XWo=o("nystromformer"),zWo=o(" \u2014 "),nX=a("a"),WWo=o("NystromformerForQuestionAnswering"),QWo=o(" (Nystromformer model)"),HWo=l(),D1=a("li"),Fue=a("strong"),UWo=o("qdqbert"),JWo=o(" \u2014 "),sX=a("a"),YWo=o("QDQBertForQuestionAnswering"),KWo=o(" (QDQBert model)"),ZWo=l(),G1=a("li"),Tue=a("strong"),eQo=o("reformer"),oQo=o(" \u2014 "),lX=a("a"),rQo=o("ReformerForQuestionAnswering"),tQo=o(" (Reformer model)"),aQo=l(),O1=a("li"),Mue=a("strong"),nQo=o("rembert"),sQo=o(" \u2014 "),iX=a("a"),lQo=o("RemBertForQuestionAnswering"),iQo=o(" (RemBERT model)"),dQo=l(),V1=a("li"),Eue=a("strong"),cQo=o("roberta"),mQo=o(" \u2014 "),dX=a("a"),fQo=o("RobertaForQuestionAnswering"),gQo=o(" (RoBERTa model)"),hQo=l(),X1=a("li"),Cue=a("strong"),uQo=o("roformer"),pQo=o(" \u2014 "),cX=a("a"),_Qo=o("RoFormerForQuestionAnswering"),bQo=o(" (RoFormer model)"),vQo=l(),z1=a("li"),wue=a("strong"),FQo=o("splinter"),TQo=o(" \u2014 "),mX=a("a"),MQo=o("SplinterForQuestionAnswering"),EQo=o(" (Splinter model)"),CQo=l(),W1=a("li"),Aue=a("strong"),wQo=o("squeezebert"),AQo=o(" \u2014 "),fX=a("a"),yQo=o("SqueezeBertForQuestionAnswering"),LQo=o(" (SqueezeBERT model)"),xQo=l(),Q1=a("li"),yue=a("strong"),$Qo=o("xlm"),kQo=o(" \u2014 "),gX=a("a"),SQo=o("XLMForQuestionAnsweringSimple"),RQo=o(" (XLM model)"),PQo=l(),H1=a("li"),Lue=a("strong"),BQo=o("xlm-roberta"),IQo=o(" \u2014 "),hX=a("a"),NQo=o("XLMRobertaForQuestionAnswering"),qQo=o(" (XLM-RoBERTa model)"),jQo=l(),U1=a("li"),xue=a("strong"),DQo=o("xlm-roberta-xl"),GQo=o(" \u2014 "),uX=a("a"),OQo=o("XLMRobertaXLForQuestionAnswering"),VQo=o(" (XLM-RoBERTa-XL model)"),XQo=l(),J1=a("li"),$ue=a("strong"),zQo=o("xlnet"),WQo=o(" \u2014 "),pX=a("a"),QQo=o("XLNetForQuestionAnsweringSimple"),HQo=o(" (XLNet model)"),UQo=l(),Y1=a("li"),kue=a("strong"),JQo=o("yoso"),YQo=o(" \u2014 "),_X=a("a"),KQo=o("YosoForQuestionAnswering"),ZQo=o(" (YOSO model)"),eHo=l(),K1=a("p"),oHo=o("The model is set in evaluation mode by default using "),Sue=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),aHo=o("model.train()"),nHo=l(),F(Z1.$$.fragment),Qqe=l(),od=a("h2"),eT=a("a"),Pue=a("span"),F(ZL.$$.fragment),sHo=l(),Bue=a("span"),lHo=o("AutoModelForTableQuestionAnswering"),Hqe=l(),qo=a("div"),F(e8.$$.fragment),iHo=l(),rd=a("p"),dHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bX=a("a"),cHo=o("from_pretrained()"),mHo=o(" class method or the "),vX=a("a"),fHo=o("from_config()"),gHo=o(` class
method.`),hHo=l(),o8=a("p"),uHo=o("This class cannot be instantiated directly using "),Iue=a("code"),pHo=o("__init__()"),_Ho=o(" (throws an error)."),bHo=l(),gt=a("div"),F(r8.$$.fragment),vHo=l(),Nue=a("p"),FHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),THo=l(),td=a("p"),MHo=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),EHo=o("not"),CHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),wHo=o("from_pretrained()"),AHo=o(" to load the model weights."),yHo=l(),F(oT.$$.fragment),LHo=l(),so=a("div"),F(t8.$$.fragment),xHo=l(),jue=a("p"),$Ho=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),kHo=l(),qa=a("p"),SHo=o("The model class to instantiate is selected based on the "),Due=a("code"),RHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),BHo=o("pretrained_model_name_or_path"),IHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),NHo=o("pretrained_model_name_or_path"),qHo=o(":"),jHo=l(),Vue=a("ul"),rT=a("li"),Xue=a("strong"),DHo=o("tapas"),GHo=o(" \u2014 "),TX=a("a"),OHo=o("TapasForQuestionAnswering"),VHo=o(" (TAPAS model)"),XHo=l(),tT=a("p"),zHo=o("The model is set in evaluation mode by default using "),zue=a("code"),WHo=o("model.eval()"),QHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),HHo=o("model.train()"),UHo=l(),F(aT.$$.fragment),Uqe=l(),ad=a("h2"),nT=a("a"),Que=a("span"),F(a8.$$.fragment),JHo=l(),Hue=a("span"),YHo=o("AutoModelForImageClassification"),Jqe=l(),jo=a("div"),F(n8.$$.fragment),KHo=l(),nd=a("p"),ZHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MX=a("a"),eUo=o("from_pretrained()"),oUo=o(" class method or the "),EX=a("a"),rUo=o("from_config()"),tUo=o(` class
method.`),aUo=l(),s8=a("p"),nUo=o("This class cannot be instantiated directly using "),Uue=a("code"),sUo=o("__init__()"),lUo=o(" (throws an error)."),iUo=l(),ht=a("div"),F(l8.$$.fragment),dUo=l(),Jue=a("p"),cUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mUo=l(),sd=a("p"),fUo=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),gUo=o("not"),hUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),uUo=o("from_pretrained()"),pUo=o(" to load the model weights."),_Uo=l(),F(sT.$$.fragment),bUo=l(),lo=a("div"),F(i8.$$.fragment),vUo=l(),Kue=a("p"),FUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TUo=l(),ja=a("p"),MUo=o("The model class to instantiate is selected based on the "),Zue=a("code"),EUo=o("model_type"),CUo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),wUo=o("pretrained_model_name_or_path"),AUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(":"),xUo=l(),Fe=a("ul"),lT=a("li"),rpe=a("strong"),$Uo=o("beit"),kUo=o(" \u2014 "),wX=a("a"),SUo=o("BeitForImageClassification"),RUo=o(" (BEiT model)"),PUo=l(),iT=a("li"),tpe=a("strong"),BUo=o("convnext"),IUo=o(" \u2014 "),AX=a("a"),NUo=o("ConvNextForImageClassification"),qUo=o(" (ConvNext model)"),jUo=l(),dT=a("li"),ape=a("strong"),DUo=o("cvt"),GUo=o(" \u2014 "),yX=a("a"),OUo=o("CvtForImageClassification"),VUo=o(" (CvT model)"),XUo=l(),cT=a("li"),npe=a("strong"),zUo=o("data2vec-vision"),WUo=o(" \u2014 "),LX=a("a"),QUo=o("Data2VecVisionForImageClassification"),HUo=o(" (Data2VecVision model)"),UUo=l(),Bs=a("li"),spe=a("strong"),JUo=o("deit"),YUo=o(" \u2014 "),xX=a("a"),KUo=o("DeiTForImageClassification"),ZUo=o(" or "),$X=a("a"),eJo=o("DeiTForImageClassificationWithTeacher"),oJo=o(" (DeiT model)"),rJo=l(),mT=a("li"),lpe=a("strong"),tJo=o("imagegpt"),aJo=o(" \u2014 "),kX=a("a"),nJo=o("ImageGPTForImageClassification"),sJo=o(" (ImageGPT model)"),lJo=l(),ut=a("li"),ipe=a("strong"),iJo=o("perceiver"),dJo=o(" \u2014 "),SX=a("a"),cJo=o("PerceiverForImageClassificationLearned"),mJo=o(" or "),RX=a("a"),fJo=o("PerceiverForImageClassificationFourier"),gJo=o(" or "),PX=a("a"),hJo=o("PerceiverForImageClassificationConvProcessing"),uJo=o(" (Perceiver model)"),pJo=l(),fT=a("li"),dpe=a("strong"),_Jo=o("poolformer"),bJo=o(" \u2014 "),BX=a("a"),vJo=o("PoolFormerForImageClassification"),FJo=o(" (PoolFormer model)"),TJo=l(),gT=a("li"),cpe=a("strong"),MJo=o("regnet"),EJo=o(" \u2014 "),IX=a("a"),CJo=o("RegNetForImageClassification"),wJo=o(" (RegNet model)"),AJo=l(),hT=a("li"),mpe=a("strong"),yJo=o("resnet"),LJo=o(" \u2014 "),NX=a("a"),xJo=o("ResNetForImageClassification"),$Jo=o(" (ResNet model)"),kJo=l(),uT=a("li"),fpe=a("strong"),SJo=o("segformer"),RJo=o(" \u2014 "),qX=a("a"),PJo=o("SegformerForImageClassification"),BJo=o(" (SegFormer model)"),IJo=l(),pT=a("li"),gpe=a("strong"),NJo=o("swin"),qJo=o(" \u2014 "),jX=a("a"),jJo=o("SwinForImageClassification"),DJo=o(" (Swin model)"),GJo=l(),_T=a("li"),hpe=a("strong"),OJo=o("van"),VJo=o(" \u2014 "),DX=a("a"),XJo=o("VanForImageClassification"),zJo=o(" (VAN model)"),WJo=l(),bT=a("li"),upe=a("strong"),QJo=o("vit"),HJo=o(" \u2014 "),GX=a("a"),UJo=o("ViTForImageClassification"),JJo=o(" (ViT model)"),YJo=l(),vT=a("p"),KJo=o("The model is set in evaluation mode by default using "),ppe=a("code"),ZJo=o("model.eval()"),eYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),oYo=o("model.train()"),rYo=l(),F(FT.$$.fragment),Yqe=l(),ld=a("h2"),TT=a("a"),bpe=a("span"),F(d8.$$.fragment),tYo=l(),vpe=a("span"),aYo=o("AutoModelForVision2Seq"),Kqe=l(),Do=a("div"),F(c8.$$.fragment),nYo=l(),id=a("p"),sYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OX=a("a"),lYo=o("from_pretrained()"),iYo=o(" class method or the "),VX=a("a"),dYo=o("from_config()"),cYo=o(` class
method.`),mYo=l(),m8=a("p"),fYo=o("This class cannot be instantiated directly using "),Fpe=a("code"),gYo=o("__init__()"),hYo=o(" (throws an error)."),uYo=l(),pt=a("div"),F(f8.$$.fragment),pYo=l(),Tpe=a("p"),_Yo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bYo=l(),dd=a("p"),vYo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),FYo=o("not"),TYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),MYo=o("from_pretrained()"),EYo=o(" to load the model weights."),CYo=l(),F(MT.$$.fragment),wYo=l(),io=a("div"),F(g8.$$.fragment),AYo=l(),Epe=a("p"),yYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LYo=l(),Da=a("p"),xYo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),$Yo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(":"),IYo=l(),ype=a("ul"),ET=a("li"),Lpe=a("strong"),NYo=o("vision-encoder-decoder"),qYo=o(" \u2014 "),zX=a("a"),jYo=o("VisionEncoderDecoderModel"),DYo=o(" (Vision Encoder decoder model)"),GYo=l(),CT=a("p"),OYo=o("The model is set in evaluation mode by default using "),xpe=a("code"),VYo=o("model.eval()"),XYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),zYo=o("model.train()"),WYo=l(),F(wT.$$.fragment),Zqe=l(),cd=a("h2"),AT=a("a"),kpe=a("span"),F(h8.$$.fragment),QYo=l(),Spe=a("span"),HYo=o("AutoModelForAudioClassification"),eje=l(),Go=a("div"),F(u8.$$.fragment),UYo=l(),md=a("p"),JYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=a("a"),YYo=o("from_pretrained()"),KYo=o(" class method or the "),QX=a("a"),ZYo=o("from_config()"),eKo=o(` class
method.`),oKo=l(),p8=a("p"),rKo=o("This class cannot be instantiated directly using "),Rpe=a("code"),tKo=o("__init__()"),aKo=o(" (throws an error)."),nKo=l(),_t=a("div"),F(_8.$$.fragment),sKo=l(),Ppe=a("p"),lKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),iKo=l(),fd=a("p"),dKo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),cKo=o("not"),mKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),fKo=o("from_pretrained()"),gKo=o(" to load the model weights."),hKo=l(),F(yT.$$.fragment),uKo=l(),co=a("div"),F(b8.$$.fragment),pKo=l(),Ipe=a("p"),_Ko=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),bKo=l(),Ga=a("p"),vKo=o("The model class to instantiate is selected based on the "),Npe=a("code"),FKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),Se=a("ul"),LT=a("li"),Dpe=a("strong"),yKo=o("data2vec-audio"),LKo=o(" \u2014 "),UX=a("a"),xKo=o("Data2VecAudioForSequenceClassification"),$Ko=o(" (Data2VecAudio model)"),kKo=l(),xT=a("li"),Gpe=a("strong"),SKo=o("hubert"),RKo=o(" \u2014 "),JX=a("a"),PKo=o("HubertForSequenceClassification"),BKo=o(" (Hubert model)"),IKo=l(),$T=a("li"),Ope=a("strong"),NKo=o("sew"),qKo=o(" \u2014 "),YX=a("a"),jKo=o("SEWForSequenceClassification"),DKo=o(" (SEW model)"),GKo=l(),kT=a("li"),Vpe=a("strong"),OKo=o("sew-d"),VKo=o(" \u2014 "),KX=a("a"),XKo=o("SEWDForSequenceClassification"),zKo=o(" (SEW-D model)"),WKo=l(),ST=a("li"),Xpe=a("strong"),QKo=o("unispeech"),HKo=o(" \u2014 "),ZX=a("a"),UKo=o("UniSpeechForSequenceClassification"),JKo=o(" (UniSpeech model)"),YKo=l(),RT=a("li"),zpe=a("strong"),KKo=o("unispeech-sat"),ZKo=o(" \u2014 "),ez=a("a"),eZo=o("UniSpeechSatForSequenceClassification"),oZo=o(" (UniSpeechSat model)"),rZo=l(),PT=a("li"),Wpe=a("strong"),tZo=o("wav2vec2"),aZo=o(" \u2014 "),oz=a("a"),nZo=o("Wav2Vec2ForSequenceClassification"),sZo=o(" (Wav2Vec2 model)"),lZo=l(),BT=a("li"),Qpe=a("strong"),iZo=o("wav2vec2-conformer"),dZo=o(" \u2014 "),rz=a("a"),cZo=o("Wav2Vec2ConformerForSequenceClassification"),mZo=o(" (Wav2Vec2-Conformer model)"),fZo=l(),IT=a("li"),Hpe=a("strong"),gZo=o("wavlm"),hZo=o(" \u2014 "),tz=a("a"),uZo=o("WavLMForSequenceClassification"),pZo=o(" (WavLM model)"),_Zo=l(),NT=a("p"),bZo=o("The model is set in evaluation mode by default using "),Upe=a("code"),vZo=o("model.eval()"),FZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),TZo=o("model.train()"),MZo=l(),F(qT.$$.fragment),oje=l(),gd=a("h2"),jT=a("a"),Ype=a("span"),F(v8.$$.fragment),EZo=l(),Kpe=a("span"),CZo=o("AutoModelForAudioFrameClassification"),rje=l(),Oo=a("div"),F(F8.$$.fragment),wZo=l(),hd=a("p"),AZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=a("a"),yZo=o("from_pretrained()"),LZo=o(" class method or the "),nz=a("a"),xZo=o("from_config()"),$Zo=o(` class
method.`),kZo=l(),T8=a("p"),SZo=o("This class cannot be instantiated directly using "),Zpe=a("code"),RZo=o("__init__()"),PZo=o(" (throws an error)."),BZo=l(),bt=a("div"),F(M8.$$.fragment),IZo=l(),e_e=a("p"),NZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),qZo=l(),ud=a("p"),jZo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),DZo=o("not"),GZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),OZo=o("from_pretrained()"),VZo=o(" to load the model weights."),XZo=l(),F(DT.$$.fragment),zZo=l(),mo=a("div"),F(E8.$$.fragment),WZo=l(),r_e=a("p"),QZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),HZo=l(),Oa=a("p"),UZo=o("The model class to instantiate is selected based on the "),t_e=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),Kr=a("ul"),GT=a("li"),s_e=a("strong"),ter=o("data2vec-audio"),aer=o(" \u2014 "),lz=a("a"),ner=o("Data2VecAudioForAudioFrameClassification"),ser=o(" (Data2VecAudio model)"),ler=l(),OT=a("li"),l_e=a("strong"),ier=o("unispeech-sat"),der=o(" \u2014 "),iz=a("a"),cer=o("UniSpeechSatForAudioFrameClassification"),mer=o(" (UniSpeechSat model)"),fer=l(),VT=a("li"),i_e=a("strong"),ger=o("wav2vec2"),her=o(" \u2014 "),dz=a("a"),uer=o("Wav2Vec2ForAudioFrameClassification"),per=o(" (Wav2Vec2 model)"),_er=l(),XT=a("li"),d_e=a("strong"),ber=o("wav2vec2-conformer"),ver=o(" \u2014 "),cz=a("a"),Fer=o("Wav2Vec2ConformerForAudioFrameClassification"),Ter=o(" (Wav2Vec2-Conformer model)"),Mer=l(),zT=a("li"),c_e=a("strong"),Eer=o("wavlm"),Cer=o(" \u2014 "),mz=a("a"),wer=o("WavLMForAudioFrameClassification"),Aer=o(" (WavLM model)"),yer=l(),WT=a("p"),Ler=o("The model is set in evaluation mode by default using "),m_e=a("code"),xer=o("model.eval()"),$er=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),ker=o("model.train()"),Ser=l(),F(QT.$$.fragment),tje=l(),pd=a("h2"),HT=a("a"),g_e=a("span"),F(C8.$$.fragment),Rer=l(),h_e=a("span"),Per=o("AutoModelForCTC"),aje=l(),Vo=a("div"),F(w8.$$.fragment),Ber=l(),_d=a("p"),Ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fz=a("a"),Ner=o("from_pretrained()"),qer=o(" class method or the "),gz=a("a"),jer=o("from_config()"),Der=o(` class
method.`),Ger=l(),A8=a("p"),Oer=o("This class cannot be instantiated directly using "),u_e=a("code"),Ver=o("__init__()"),Xer=o(" (throws an error)."),zer=l(),vt=a("div"),F(y8.$$.fragment),Wer=l(),p_e=a("p"),Qer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Her=l(),bd=a("p"),Uer=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),Jer=o("not"),Yer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),Ker=o("from_pretrained()"),Zer=o(" to load the model weights."),eor=l(),F(UT.$$.fragment),oor=l(),fo=a("div"),F(L8.$$.fragment),ror=l(),b_e=a("p"),tor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aor=l(),Va=a("p"),nor=o("The model class to instantiate is selected based on the "),v_e=a("code"),sor=o("model_type"),lor=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),ior=o("pretrained_model_name_or_path"),dor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(":"),gor=l(),Re=a("ul"),JT=a("li"),M_e=a("strong"),hor=o("data2vec-audio"),uor=o(" \u2014 "),uz=a("a"),por=o("Data2VecAudioForCTC"),_or=o(" (Data2VecAudio model)"),bor=l(),YT=a("li"),E_e=a("strong"),vor=o("hubert"),For=o(" \u2014 "),pz=a("a"),Tor=o("HubertForCTC"),Mor=o(" (Hubert model)"),Eor=l(),KT=a("li"),C_e=a("strong"),Cor=o("sew"),wor=o(" \u2014 "),_z=a("a"),Aor=o("SEWForCTC"),yor=o(" (SEW model)"),Lor=l(),ZT=a("li"),w_e=a("strong"),xor=o("sew-d"),$or=o(" \u2014 "),bz=a("a"),kor=o("SEWDForCTC"),Sor=o(" (SEW-D model)"),Ror=l(),eM=a("li"),A_e=a("strong"),Por=o("unispeech"),Bor=o(" \u2014 "),vz=a("a"),Ior=o("UniSpeechForCTC"),Nor=o(" (UniSpeech model)"),qor=l(),oM=a("li"),y_e=a("strong"),jor=o("unispeech-sat"),Dor=o(" \u2014 "),Fz=a("a"),Gor=o("UniSpeechSatForCTC"),Oor=o(" (UniSpeechSat model)"),Vor=l(),rM=a("li"),L_e=a("strong"),Xor=o("wav2vec2"),zor=o(" \u2014 "),Tz=a("a"),Wor=o("Wav2Vec2ForCTC"),Qor=o(" (Wav2Vec2 model)"),Hor=l(),tM=a("li"),x_e=a("strong"),Uor=o("wav2vec2-conformer"),Jor=o(" \u2014 "),Mz=a("a"),Yor=o("Wav2Vec2ConformerForCTC"),Kor=o(" (Wav2Vec2-Conformer model)"),Zor=l(),aM=a("li"),$_e=a("strong"),err=o("wavlm"),orr=o(" \u2014 "),Ez=a("a"),rrr=o("WavLMForCTC"),trr=o(" (WavLM model)"),arr=l(),nM=a("p"),nrr=o("The model is set in evaluation mode by default using "),k_e=a("code"),srr=o("model.eval()"),lrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),irr=o("model.train()"),drr=l(),F(sM.$$.fragment),nje=l(),vd=a("h2"),lM=a("a"),R_e=a("span"),F(x8.$$.fragment),crr=l(),P_e=a("span"),mrr=o("AutoModelForSpeechSeq2Seq"),sje=l(),Xo=a("div"),F($8.$$.fragment),frr=l(),Fd=a("p"),grr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=a("a"),hrr=o("from_pretrained()"),urr=o(" class method or the "),wz=a("a"),prr=o("from_config()"),_rr=o(` class
method.`),brr=l(),k8=a("p"),vrr=o("This class cannot be instantiated directly using "),B_e=a("code"),Frr=o("__init__()"),Trr=o(" (throws an error)."),Mrr=l(),Ft=a("div"),F(S8.$$.fragment),Err=l(),I_e=a("p"),Crr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wrr=l(),Td=a("p"),Arr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),yrr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),xrr=o("from_pretrained()"),$rr=o(" to load the model weights."),krr=l(),F(iM.$$.fragment),Srr=l(),go=a("div"),F(R8.$$.fragment),Rrr=l(),q_e=a("p"),Prr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Brr=l(),Xa=a("p"),Irr=o("The model class to instantiate is selected based on the "),j_e=a("code"),Nrr=o("model_type"),qrr=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),jrr=o("pretrained_model_name_or_path"),Drr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Vrr=l(),P8=a("ul"),dM=a("li"),O_e=a("strong"),Xrr=o("speech-encoder-decoder"),zrr=o(" \u2014 "),yz=a("a"),Wrr=o("SpeechEncoderDecoderModel"),Qrr=o(" (Speech Encoder decoder model)"),Hrr=l(),cM=a("li"),V_e=a("strong"),Urr=o("speech_to_text"),Jrr=o(" \u2014 "),Lz=a("a"),Yrr=o("Speech2TextForConditionalGeneration"),Krr=o(" (Speech2Text model)"),Zrr=l(),mM=a("p"),etr=o("The model is set in evaluation mode by default using "),X_e=a("code"),otr=o("model.eval()"),rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=a("code"),ttr=o("model.train()"),atr=l(),F(fM.$$.fragment),lje=l(),Md=a("h2"),gM=a("a"),W_e=a("span"),F(B8.$$.fragment),ntr=l(),Q_e=a("span"),str=o("AutoModelForAudioXVector"),ije=l(),zo=a("div"),F(I8.$$.fragment),ltr=l(),Ed=a("p"),itr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=a("a"),dtr=o("from_pretrained()"),ctr=o(" class method or the "),$z=a("a"),mtr=o("from_config()"),ftr=o(` class
method.`),gtr=l(),N8=a("p"),htr=o("This class cannot be instantiated directly using "),H_e=a("code"),utr=o("__init__()"),ptr=o(" (throws an error)."),_tr=l(),Tt=a("div"),F(q8.$$.fragment),btr=l(),U_e=a("p"),vtr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ftr=l(),Cd=a("p"),Ttr=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),Mtr=o("not"),Etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Ctr=o("from_pretrained()"),wtr=o(" to load the model weights."),Atr=l(),F(hM.$$.fragment),ytr=l(),ho=a("div"),F(j8.$$.fragment),Ltr=l(),Y_e=a("p"),xtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$tr=l(),za=a("p"),ktr=o("The model class to instantiate is selected based on the "),K_e=a("code"),Str=o("model_type"),Rtr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),Ptr=o("pretrained_model_name_or_path"),Btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),Itr=o("pretrained_model_name_or_path"),Ntr=o(":"),qtr=l(),Zr=a("ul"),uM=a("li"),obe=a("strong"),jtr=o("data2vec-audio"),Dtr=o(" \u2014 "),Sz=a("a"),Gtr=o("Data2VecAudioForXVector"),Otr=o(" (Data2VecAudio model)"),Vtr=l(),pM=a("li"),rbe=a("strong"),Xtr=o("unispeech-sat"),ztr=o(" \u2014 "),Rz=a("a"),Wtr=o("UniSpeechSatForXVector"),Qtr=o(" (UniSpeechSat model)"),Htr=l(),_M=a("li"),tbe=a("strong"),Utr=o("wav2vec2"),Jtr=o(" \u2014 "),Pz=a("a"),Ytr=o("Wav2Vec2ForXVector"),Ktr=o(" (Wav2Vec2 model)"),Ztr=l(),bM=a("li"),abe=a("strong"),ear=o("wav2vec2-conformer"),oar=o(" \u2014 "),Bz=a("a"),rar=o("Wav2Vec2ConformerForXVector"),tar=o(" (Wav2Vec2-Conformer model)"),aar=l(),vM=a("li"),nbe=a("strong"),nar=o("wavlm"),sar=o(" \u2014 "),Iz=a("a"),lar=o("WavLMForXVector"),iar=o(" (WavLM model)"),dar=l(),FM=a("p"),car=o("The model is set in evaluation mode by default using "),sbe=a("code"),mar=o("model.eval()"),far=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=a("code"),gar=o("model.train()"),har=l(),F(TM.$$.fragment),dje=l(),wd=a("h2"),MM=a("a"),ibe=a("span"),F(D8.$$.fragment),uar=l(),dbe=a("span"),par=o("AutoModelForMaskedImageModeling"),cje=l(),Wo=a("div"),F(G8.$$.fragment),_ar=l(),Ad=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Nz=a("a"),Far=o("from_pretrained()"),Tar=o(" class method or the "),qz=a("a"),Mar=o("from_config()"),Ear=o(` class
method.`),Car=l(),O8=a("p"),war=o("This class cannot be instantiated directly using "),cbe=a("code"),Aar=o("__init__()"),yar=o(" (throws an error)."),Lar=l(),Mt=a("div"),F(V8.$$.fragment),xar=l(),mbe=a("p"),$ar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kar=l(),yd=a("p"),Sar=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),Rar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Bar=o("from_pretrained()"),Iar=o(" to load the model weights."),Nar=l(),F(EM.$$.fragment),qar=l(),uo=a("div"),F(X8.$$.fragment),jar=l(),gbe=a("p"),Dar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Gar=l(),Wa=a("p"),Oar=o("The model class to instantiate is selected based on the "),hbe=a("code"),Var=o("model_type"),Xar=o(` property of the config object (either
passed as an argument or loaded from `),ube=a("code"),zar=o("pretrained_model_name_or_path"),War=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(":"),Uar=l(),Ld=a("ul"),CM=a("li"),_be=a("strong"),Jar=o("deit"),Yar=o(" \u2014 "),Dz=a("a"),Kar=o("DeiTForMaskedImageModeling"),Zar=o(" (DeiT model)"),enr=l(),wM=a("li"),bbe=a("strong"),onr=o("swin"),rnr=o(" \u2014 "),Gz=a("a"),tnr=o("SwinForMaskedImageModeling"),anr=o(" (Swin model)"),nnr=l(),AM=a("li"),vbe=a("strong"),snr=o("vit"),lnr=o(" \u2014 "),Oz=a("a"),inr=o("ViTForMaskedImageModeling"),dnr=o(" (ViT model)"),cnr=l(),yM=a("p"),mnr=o("The model is set in evaluation mode by default using "),Fbe=a("code"),fnr=o("model.eval()"),gnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=a("code"),hnr=o("model.train()"),unr=l(),F(LM.$$.fragment),mje=l(),xd=a("h2"),xM=a("a"),Mbe=a("span"),F(z8.$$.fragment),pnr=l(),Ebe=a("span"),_nr=o("AutoModelForObjectDetection"),fje=l(),Qo=a("div"),F(W8.$$.fragment),bnr=l(),$d=a("p"),vnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=a("a"),Fnr=o("from_pretrained()"),Tnr=o(" class method or the "),Xz=a("a"),Mnr=o("from_config()"),Enr=o(` class
method.`),Cnr=l(),Q8=a("p"),wnr=o("This class cannot be instantiated directly using "),Cbe=a("code"),Anr=o("__init__()"),ynr=o(" (throws an error)."),Lnr=l(),Et=a("div"),F(H8.$$.fragment),xnr=l(),wbe=a("p"),$nr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),knr=l(),kd=a("p"),Snr=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),Rnr=o("not"),Pnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Bnr=o("from_pretrained()"),Inr=o(" to load the model weights."),Nnr=l(),F($M.$$.fragment),qnr=l(),po=a("div"),F(U8.$$.fragment),jnr=l(),ybe=a("p"),Dnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Gnr=l(),Qa=a("p"),Onr=o("The model class to instantiate is selected based on the "),Lbe=a("code"),Vnr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),znr=o("pretrained_model_name_or_path"),Wnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(":"),Unr=l(),J8=a("ul"),kM=a("li"),kbe=a("strong"),Jnr=o("detr"),Ynr=o(" \u2014 "),Wz=a("a"),Knr=o("DetrForObjectDetection"),Znr=o(" (DETR model)"),esr=l(),SM=a("li"),Sbe=a("strong"),osr=o("yolos"),rsr=o(" \u2014 "),Qz=a("a"),tsr=o("YolosForObjectDetection"),asr=o(" (YOLOS model)"),nsr=l(),RM=a("p"),ssr=o("The model is set in evaluation mode by default using "),Rbe=a("code"),lsr=o("model.eval()"),isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=a("code"),dsr=o("model.train()"),csr=l(),F(PM.$$.fragment),gje=l(),Sd=a("h2"),BM=a("a"),Bbe=a("span"),F(Y8.$$.fragment),msr=l(),Ibe=a("span"),fsr=o("AutoModelForImageSegmentation"),hje=l(),Ho=a("div"),F(K8.$$.fragment),gsr=l(),Rd=a("p"),hsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=a("a"),usr=o("from_pretrained()"),psr=o(" class method or the "),Uz=a("a"),_sr=o("from_config()"),bsr=o(` class
method.`),vsr=l(),Z8=a("p"),Fsr=o("This class cannot be instantiated directly using "),Nbe=a("code"),Tsr=o("__init__()"),Msr=o(" (throws an error)."),Esr=l(),Ct=a("div"),F(e7.$$.fragment),Csr=l(),qbe=a("p"),wsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Asr=l(),Pd=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),Lsr=o("not"),xsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),$sr=o("from_pretrained()"),ksr=o(" to load the model weights."),Ssr=l(),F(IM.$$.fragment),Rsr=l(),_o=a("div"),F(o7.$$.fragment),Psr=l(),Dbe=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Isr=l(),Ha=a("p"),Nsr=o("The model class to instantiate is selected based on the "),Gbe=a("code"),qsr=o("model_type"),jsr=o(` property of the config object (either
passed as an argument or loaded from `),Obe=a("code"),Dsr=o("pretrained_model_name_or_path"),Gsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=a("code"),Osr=o("pretrained_model_name_or_path"),Vsr=o(":"),Xsr=l(),Xbe=a("ul"),NM=a("li"),zbe=a("strong"),zsr=o("detr"),Wsr=o(" \u2014 "),Yz=a("a"),Qsr=o("DetrForSegmentation"),Hsr=o(" (DETR model)"),Usr=l(),qM=a("p"),Jsr=o("The model is set in evaluation mode by default using "),Wbe=a("code"),Ysr=o("model.eval()"),Ksr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),Zsr=o("model.train()"),elr=l(),F(jM.$$.fragment),uje=l(),Bd=a("h2"),DM=a("a"),Hbe=a("span"),F(r7.$$.fragment),olr=l(),Ube=a("span"),rlr=o("AutoModelForSemanticSegmentation"),pje=l(),Uo=a("div"),F(t7.$$.fragment),tlr=l(),Id=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=a("a"),nlr=o("from_pretrained()"),slr=o(" class method or the "),Zz=a("a"),llr=o("from_config()"),ilr=o(` class
method.`),dlr=l(),a7=a("p"),clr=o("This class cannot be instantiated directly using "),Jbe=a("code"),mlr=o("__init__()"),flr=o(" (throws an error)."),glr=l(),wt=a("div"),F(n7.$$.fragment),hlr=l(),Ybe=a("p"),ulr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),plr=l(),Nd=a("p"),_lr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Flr=o("from_pretrained()"),Tlr=o(" to load the model weights."),Mlr=l(),F(GM.$$.fragment),Elr=l(),bo=a("div"),F(s7.$$.fragment),Clr=l(),Zbe=a("p"),wlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Alr=l(),Ua=a("p"),ylr=o("The model class to instantiate is selected based on the "),e2e=a("code"),Llr=o("model_type"),xlr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),$lr=o("pretrained_model_name_or_path"),klr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(":"),Plr=l(),Ja=a("ul"),OM=a("li"),t2e=a("strong"),Blr=o("beit"),Ilr=o(" \u2014 "),oW=a("a"),Nlr=o("BeitForSemanticSegmentation"),qlr=o(" (BEiT model)"),jlr=l(),VM=a("li"),a2e=a("strong"),Dlr=o("data2vec-vision"),Glr=o(" \u2014 "),rW=a("a"),Olr=o("Data2VecVisionForSemanticSegmentation"),Vlr=o(" (Data2VecVision model)"),Xlr=l(),XM=a("li"),n2e=a("strong"),zlr=o("dpt"),Wlr=o(" \u2014 "),tW=a("a"),Qlr=o("DPTForSemanticSegmentation"),Hlr=o(" (DPT model)"),Ulr=l(),zM=a("li"),s2e=a("strong"),Jlr=o("segformer"),Ylr=o(" \u2014 "),aW=a("a"),Klr=o("SegformerForSemanticSegmentation"),Zlr=o(" (SegFormer model)"),eir=l(),WM=a("p"),oir=o("The model is set in evaluation mode by default using "),l2e=a("code"),rir=o("model.eval()"),tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),air=o("model.train()"),nir=l(),F(QM.$$.fragment),_je=l(),qd=a("h2"),HM=a("a"),d2e=a("span"),F(l7.$$.fragment),sir=l(),c2e=a("span"),lir=o("AutoModelForInstanceSegmentation"),bje=l(),Jo=a("div"),F(i7.$$.fragment),iir=l(),jd=a("p"),dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=a("a"),cir=o("from_pretrained()"),mir=o(" class method or the "),sW=a("a"),fir=o("from_config()"),gir=o(` class
method.`),hir=l(),d7=a("p"),uir=o("This class cannot be instantiated directly using "),m2e=a("code"),pir=o("__init__()"),_ir=o(" (throws an error)."),bir=l(),At=a("div"),F(c7.$$.fragment),vir=l(),f2e=a("p"),Fir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Tir=l(),Dd=a("p"),Mir=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),Eir=o("not"),Cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),wir=o("from_pretrained()"),Air=o(" to load the model weights."),yir=l(),F(UM.$$.fragment),Lir=l(),vo=a("div"),F(m7.$$.fragment),xir=l(),h2e=a("p"),$ir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kir=l(),Ya=a("p"),Sir=o("The model class to instantiate is selected based on the "),u2e=a("code"),Rir=o("model_type"),Pir=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),Bir=o("pretrained_model_name_or_path"),Iir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),Nir=o("pretrained_model_name_or_path"),qir=o(":"),jir=l(),b2e=a("ul"),JM=a("li"),v2e=a("strong"),Dir=o("maskformer"),Gir=o(" \u2014 "),iW=a("a"),Oir=o("MaskFormerForInstanceSegmentation"),Vir=o(" (MaskFormer model)"),Xir=l(),YM=a("p"),zir=o("The model is set in evaluation mode by default using "),F2e=a("code"),Wir=o("model.eval()"),Qir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),Hir=o("model.train()"),Uir=l(),F(KM.$$.fragment),vje=l(),Gd=a("h2"),ZM=a("a"),M2e=a("span"),F(f7.$$.fragment),Jir=l(),E2e=a("span"),Yir=o("TFAutoModel"),Fje=l(),Yo=a("div"),F(g7.$$.fragment),Kir=l(),Od=a("p"),Zir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=a("a"),edr=o("from_pretrained()"),odr=o(" class method or the "),cW=a("a"),rdr=o("from_config()"),tdr=o(` class
method.`),adr=l(),h7=a("p"),ndr=o("This class cannot be instantiated directly using "),C2e=a("code"),sdr=o("__init__()"),ldr=o(" (throws an error)."),idr=l(),yt=a("div"),F(u7.$$.fragment),ddr=l(),w2e=a("p"),cdr=o("Instantiates one of the base model classes of the library from a configuration."),mdr=l(),Vd=a("p"),fdr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),gdr=o("not"),hdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),udr=o("from_pretrained()"),pdr=o(" to load the model weights."),_dr=l(),F(e4.$$.fragment),bdr=l(),wr=a("div"),F(p7.$$.fragment),vdr=l(),y2e=a("p"),Fdr=o("Instantiate one of the base model classes of the library from a pretrained model."),Tdr=l(),Ka=a("p"),Mdr=o("The model class to instantiate is selected based on the "),L2e=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),q=a("ul"),o4=a("li"),k2e=a("strong"),$dr=o("albert"),kdr=o(" \u2014 "),fW=a("a"),Sdr=o("TFAlbertModel"),Rdr=o(" (ALBERT model)"),Pdr=l(),r4=a("li"),S2e=a("strong"),Bdr=o("bart"),Idr=o(" \u2014 "),gW=a("a"),Ndr=o("TFBartModel"),qdr=o(" (BART model)"),jdr=l(),t4=a("li"),R2e=a("strong"),Ddr=o("bert"),Gdr=o(" \u2014 "),hW=a("a"),Odr=o("TFBertModel"),Vdr=o(" (BERT model)"),Xdr=l(),a4=a("li"),P2e=a("strong"),zdr=o("blenderbot"),Wdr=o(" \u2014 "),uW=a("a"),Qdr=o("TFBlenderbotModel"),Hdr=o(" (Blenderbot model)"),Udr=l(),n4=a("li"),B2e=a("strong"),Jdr=o("blenderbot-small"),Ydr=o(" \u2014 "),pW=a("a"),Kdr=o("TFBlenderbotSmallModel"),Zdr=o(" (BlenderbotSmall model)"),ecr=l(),s4=a("li"),I2e=a("strong"),ocr=o("camembert"),rcr=o(" \u2014 "),_W=a("a"),tcr=o("TFCamembertModel"),acr=o(" (CamemBERT model)"),ncr=l(),l4=a("li"),N2e=a("strong"),scr=o("clip"),lcr=o(" \u2014 "),bW=a("a"),icr=o("TFCLIPModel"),dcr=o(" (CLIP model)"),ccr=l(),i4=a("li"),q2e=a("strong"),mcr=o("convbert"),fcr=o(" \u2014 "),vW=a("a"),gcr=o("TFConvBertModel"),hcr=o(" (ConvBERT model)"),ucr=l(),d4=a("li"),j2e=a("strong"),pcr=o("convnext"),_cr=o(" \u2014 "),FW=a("a"),bcr=o("TFConvNextModel"),vcr=o(" (ConvNext model)"),Fcr=l(),c4=a("li"),D2e=a("strong"),Tcr=o("ctrl"),Mcr=o(" \u2014 "),TW=a("a"),Ecr=o("TFCTRLModel"),Ccr=o(" (CTRL model)"),wcr=l(),m4=a("li"),G2e=a("strong"),Acr=o("data2vec-vision"),ycr=o(" \u2014 "),MW=a("a"),Lcr=o("TFData2VecVisionModel"),xcr=o(" (Data2VecVision model)"),$cr=l(),f4=a("li"),O2e=a("strong"),kcr=o("deberta"),Scr=o(" \u2014 "),EW=a("a"),Rcr=o("TFDebertaModel"),Pcr=o(" (DeBERTa model)"),Bcr=l(),g4=a("li"),V2e=a("strong"),Icr=o("deberta-v2"),Ncr=o(" \u2014 "),CW=a("a"),qcr=o("TFDebertaV2Model"),jcr=o(" (DeBERTa-v2 model)"),Dcr=l(),h4=a("li"),X2e=a("strong"),Gcr=o("distilbert"),Ocr=o(" \u2014 "),wW=a("a"),Vcr=o("TFDistilBertModel"),Xcr=o(" (DistilBERT model)"),zcr=l(),u4=a("li"),z2e=a("strong"),Wcr=o("dpr"),Qcr=o(" \u2014 "),AW=a("a"),Hcr=o("TFDPRQuestionEncoder"),Ucr=o(" (DPR model)"),Jcr=l(),p4=a("li"),W2e=a("strong"),Ycr=o("electra"),Kcr=o(" \u2014 "),yW=a("a"),Zcr=o("TFElectraModel"),emr=o(" (ELECTRA model)"),omr=l(),_4=a("li"),Q2e=a("strong"),rmr=o("flaubert"),tmr=o(" \u2014 "),LW=a("a"),amr=o("TFFlaubertModel"),nmr=o(" (FlauBERT model)"),smr=l(),Is=a("li"),H2e=a("strong"),lmr=o("funnel"),imr=o(" \u2014 "),xW=a("a"),dmr=o("TFFunnelModel"),cmr=o(" or "),$W=a("a"),mmr=o("TFFunnelBaseModel"),fmr=o(" (Funnel Transformer model)"),gmr=l(),b4=a("li"),U2e=a("strong"),hmr=o("gpt2"),umr=o(" \u2014 "),kW=a("a"),pmr=o("TFGPT2Model"),_mr=o(" (OpenAI GPT-2 model)"),bmr=l(),v4=a("li"),J2e=a("strong"),vmr=o("gptj"),Fmr=o(" \u2014 "),SW=a("a"),Tmr=o("TFGPTJModel"),Mmr=o(" (GPT-J model)"),Emr=l(),F4=a("li"),Y2e=a("strong"),Cmr=o("hubert"),wmr=o(" \u2014 "),RW=a("a"),Amr=o("TFHubertModel"),ymr=o(" (Hubert model)"),Lmr=l(),T4=a("li"),K2e=a("strong"),xmr=o("layoutlm"),$mr=o(" \u2014 "),PW=a("a"),kmr=o("TFLayoutLMModel"),Smr=o(" (LayoutLM model)"),Rmr=l(),M4=a("li"),Z2e=a("strong"),Pmr=o("led"),Bmr=o(" \u2014 "),BW=a("a"),Imr=o("TFLEDModel"),Nmr=o(" (LED model)"),qmr=l(),E4=a("li"),eve=a("strong"),jmr=o("longformer"),Dmr=o(" \u2014 "),IW=a("a"),Gmr=o("TFLongformerModel"),Omr=o(" (Longformer model)"),Vmr=l(),C4=a("li"),ove=a("strong"),Xmr=o("lxmert"),zmr=o(" \u2014 "),NW=a("a"),Wmr=o("TFLxmertModel"),Qmr=o(" (LXMERT model)"),Hmr=l(),w4=a("li"),rve=a("strong"),Umr=o("marian"),Jmr=o(" \u2014 "),qW=a("a"),Ymr=o("TFMarianModel"),Kmr=o(" (Marian model)"),Zmr=l(),A4=a("li"),tve=a("strong"),efr=o("mbart"),ofr=o(" \u2014 "),jW=a("a"),rfr=o("TFMBartModel"),tfr=o(" (mBART model)"),afr=l(),y4=a("li"),ave=a("strong"),nfr=o("mobilebert"),sfr=o(" \u2014 "),DW=a("a"),lfr=o("TFMobileBertModel"),ifr=o(" (MobileBERT model)"),dfr=l(),L4=a("li"),nve=a("strong"),cfr=o("mpnet"),mfr=o(" \u2014 "),GW=a("a"),ffr=o("TFMPNetModel"),gfr=o(" (MPNet model)"),hfr=l(),x4=a("li"),sve=a("strong"),ufr=o("mt5"),pfr=o(" \u2014 "),OW=a("a"),_fr=o("TFMT5Model"),bfr=o(" (mT5 model)"),vfr=l(),$4=a("li"),lve=a("strong"),Ffr=o("openai-gpt"),Tfr=o(" \u2014 "),VW=a("a"),Mfr=o("TFOpenAIGPTModel"),Efr=o(" (OpenAI GPT model)"),Cfr=l(),k4=a("li"),ive=a("strong"),wfr=o("opt"),Afr=o(" \u2014 "),XW=a("a"),yfr=o("TFOPTModel"),Lfr=o(" (OPT model)"),xfr=l(),S4=a("li"),dve=a("strong"),$fr=o("pegasus"),kfr=o(" \u2014 "),zW=a("a"),Sfr=o("TFPegasusModel"),Rfr=o(" (Pegasus model)"),Pfr=l(),R4=a("li"),cve=a("strong"),Bfr=o("rembert"),Ifr=o(" \u2014 "),WW=a("a"),Nfr=o("TFRemBertModel"),qfr=o(" (RemBERT model)"),jfr=l(),P4=a("li"),mve=a("strong"),Dfr=o("roberta"),Gfr=o(" \u2014 "),QW=a("a"),Ofr=o("TFRobertaModel"),Vfr=o(" (RoBERTa model)"),Xfr=l(),B4=a("li"),fve=a("strong"),zfr=o("roformer"),Wfr=o(" \u2014 "),HW=a("a"),Qfr=o("TFRoFormerModel"),Hfr=o(" (RoFormer model)"),Ufr=l(),I4=a("li"),gve=a("strong"),Jfr=o("speech_to_text"),Yfr=o(" \u2014 "),UW=a("a"),Kfr=o("TFSpeech2TextModel"),Zfr=o(" (Speech2Text model)"),egr=l(),N4=a("li"),hve=a("strong"),ogr=o("swin"),rgr=o(" \u2014 "),JW=a("a"),tgr=o("TFSwinModel"),agr=o(" (Swin model)"),ngr=l(),q4=a("li"),uve=a("strong"),sgr=o("t5"),lgr=o(" \u2014 "),YW=a("a"),igr=o("TFT5Model"),dgr=o(" (T5 model)"),cgr=l(),j4=a("li"),pve=a("strong"),mgr=o("tapas"),fgr=o(" \u2014 "),KW=a("a"),ggr=o("TFTapasModel"),hgr=o(" (TAPAS model)"),ugr=l(),D4=a("li"),_ve=a("strong"),pgr=o("transfo-xl"),_gr=o(" \u2014 "),ZW=a("a"),bgr=o("TFTransfoXLModel"),vgr=o(" (Transformer-XL model)"),Fgr=l(),G4=a("li"),bve=a("strong"),Tgr=o("vit"),Mgr=o(" \u2014 "),eQ=a("a"),Egr=o("TFViTModel"),Cgr=o(" (ViT model)"),wgr=l(),O4=a("li"),vve=a("strong"),Agr=o("vit_mae"),ygr=o(" \u2014 "),oQ=a("a"),Lgr=o("TFViTMAEModel"),xgr=o(" (ViTMAE model)"),$gr=l(),V4=a("li"),Fve=a("strong"),kgr=o("wav2vec2"),Sgr=o(" \u2014 "),rQ=a("a"),Rgr=o("TFWav2Vec2Model"),Pgr=o(" (Wav2Vec2 model)"),Bgr=l(),X4=a("li"),Tve=a("strong"),Igr=o("xlm"),Ngr=o(" \u2014 "),tQ=a("a"),qgr=o("TFXLMModel"),jgr=o(" (XLM model)"),Dgr=l(),z4=a("li"),Mve=a("strong"),Ggr=o("xlm-roberta"),Ogr=o(" \u2014 "),aQ=a("a"),Vgr=o("TFXLMRobertaModel"),Xgr=o(" (XLM-RoBERTa model)"),zgr=l(),W4=a("li"),Eve=a("strong"),Wgr=o("xlnet"),Qgr=o(" \u2014 "),nQ=a("a"),Hgr=o("TFXLNetModel"),Ugr=o(" (XLNet model)"),Jgr=l(),F(Q4.$$.fragment),Tje=l(),Xd=a("h2"),H4=a("a"),Cve=a("span"),F(_7.$$.fragment),Ygr=l(),wve=a("span"),Kgr=o("TFAutoModelForPreTraining"),Mje=l(),Ko=a("div"),F(b7.$$.fragment),Zgr=l(),zd=a("p"),ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sQ=a("a"),ohr=o("from_pretrained()"),rhr=o(" class method or the "),lQ=a("a"),thr=o("from_config()"),ahr=o(` class
method.`),nhr=l(),v7=a("p"),shr=o("This class cannot be instantiated directly using "),Ave=a("code"),lhr=o("__init__()"),ihr=o(" (throws an error)."),dhr=l(),Lt=a("div"),F(F7.$$.fragment),chr=l(),yve=a("p"),mhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fhr=l(),Wd=a("p"),ghr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),hhr=o("not"),uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),phr=o("from_pretrained()"),_hr=o(" to load the model weights."),bhr=l(),F(U4.$$.fragment),vhr=l(),Ar=a("div"),F(T7.$$.fragment),Fhr=l(),xve=a("p"),Thr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mhr=l(),Za=a("p"),Ehr=o("The model class to instantiate is selected based on the "),$ve=a("code"),Chr=o("model_type"),whr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),Ahr=o("pretrained_model_name_or_path"),yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),Lhr=o("pretrained_model_name_or_path"),xhr=o(":"),$hr=l(),se=a("ul"),J4=a("li"),Rve=a("strong"),khr=o("albert"),Shr=o(" \u2014 "),dQ=a("a"),Rhr=o("TFAlbertForPreTraining"),Phr=o(" (ALBERT model)"),Bhr=l(),Y4=a("li"),Pve=a("strong"),Ihr=o("bart"),Nhr=o(" \u2014 "),cQ=a("a"),qhr=o("TFBartForConditionalGeneration"),jhr=o(" (BART model)"),Dhr=l(),K4=a("li"),Bve=a("strong"),Ghr=o("bert"),Ohr=o(" \u2014 "),mQ=a("a"),Vhr=o("TFBertForPreTraining"),Xhr=o(" (BERT model)"),zhr=l(),Z4=a("li"),Ive=a("strong"),Whr=o("camembert"),Qhr=o(" \u2014 "),fQ=a("a"),Hhr=o("TFCamembertForMaskedLM"),Uhr=o(" (CamemBERT model)"),Jhr=l(),eE=a("li"),Nve=a("strong"),Yhr=o("ctrl"),Khr=o(" \u2014 "),gQ=a("a"),Zhr=o("TFCTRLLMHeadModel"),eur=o(" (CTRL model)"),our=l(),oE=a("li"),qve=a("strong"),rur=o("distilbert"),tur=o(" \u2014 "),hQ=a("a"),aur=o("TFDistilBertForMaskedLM"),nur=o(" (DistilBERT model)"),sur=l(),rE=a("li"),jve=a("strong"),lur=o("electra"),iur=o(" \u2014 "),uQ=a("a"),dur=o("TFElectraForPreTraining"),cur=o(" (ELECTRA model)"),mur=l(),tE=a("li"),Dve=a("strong"),fur=o("flaubert"),gur=o(" \u2014 "),pQ=a("a"),hur=o("TFFlaubertWithLMHeadModel"),uur=o(" (FlauBERT model)"),pur=l(),aE=a("li"),Gve=a("strong"),_ur=o("funnel"),bur=o(" \u2014 "),_Q=a("a"),vur=o("TFFunnelForPreTraining"),Fur=o(" (Funnel Transformer model)"),Tur=l(),nE=a("li"),Ove=a("strong"),Mur=o("gpt2"),Eur=o(" \u2014 "),bQ=a("a"),Cur=o("TFGPT2LMHeadModel"),wur=o(" (OpenAI GPT-2 model)"),Aur=l(),sE=a("li"),Vve=a("strong"),yur=o("layoutlm"),Lur=o(" \u2014 "),vQ=a("a"),xur=o("TFLayoutLMForMaskedLM"),$ur=o(" (LayoutLM model)"),kur=l(),lE=a("li"),Xve=a("strong"),Sur=o("lxmert"),Rur=o(" \u2014 "),FQ=a("a"),Pur=o("TFLxmertForPreTraining"),Bur=o(" (LXMERT model)"),Iur=l(),iE=a("li"),zve=a("strong"),Nur=o("mobilebert"),qur=o(" \u2014 "),TQ=a("a"),jur=o("TFMobileBertForPreTraining"),Dur=o(" (MobileBERT model)"),Gur=l(),dE=a("li"),Wve=a("strong"),Our=o("mpnet"),Vur=o(" \u2014 "),MQ=a("a"),Xur=o("TFMPNetForMaskedLM"),zur=o(" (MPNet model)"),Wur=l(),cE=a("li"),Qve=a("strong"),Qur=o("openai-gpt"),Hur=o(" \u2014 "),EQ=a("a"),Uur=o("TFOpenAIGPTLMHeadModel"),Jur=o(" (OpenAI GPT model)"),Yur=l(),mE=a("li"),Hve=a("strong"),Kur=o("roberta"),Zur=o(" \u2014 "),CQ=a("a"),epr=o("TFRobertaForMaskedLM"),opr=o(" (RoBERTa model)"),rpr=l(),fE=a("li"),Uve=a("strong"),tpr=o("t5"),apr=o(" \u2014 "),wQ=a("a"),npr=o("TFT5ForConditionalGeneration"),spr=o(" (T5 model)"),lpr=l(),gE=a("li"),Jve=a("strong"),ipr=o("tapas"),dpr=o(" \u2014 "),AQ=a("a"),cpr=o("TFTapasForMaskedLM"),mpr=o(" (TAPAS model)"),fpr=l(),hE=a("li"),Yve=a("strong"),gpr=o("transfo-xl"),hpr=o(" \u2014 "),yQ=a("a"),upr=o("TFTransfoXLLMHeadModel"),ppr=o(" (Transformer-XL model)"),_pr=l(),uE=a("li"),Kve=a("strong"),bpr=o("vit_mae"),vpr=o(" \u2014 "),LQ=a("a"),Fpr=o("TFViTMAEForPreTraining"),Tpr=o(" (ViTMAE model)"),Mpr=l(),pE=a("li"),Zve=a("strong"),Epr=o("xlm"),Cpr=o(" \u2014 "),xQ=a("a"),wpr=o("TFXLMWithLMHeadModel"),Apr=o(" (XLM model)"),ypr=l(),_E=a("li"),eFe=a("strong"),Lpr=o("xlm-roberta"),xpr=o(" \u2014 "),$Q=a("a"),$pr=o("TFXLMRobertaForMaskedLM"),kpr=o(" (XLM-RoBERTa model)"),Spr=l(),bE=a("li"),oFe=a("strong"),Rpr=o("xlnet"),Ppr=o(" \u2014 "),kQ=a("a"),Bpr=o("TFXLNetLMHeadModel"),Ipr=o(" (XLNet model)"),Npr=l(),F(vE.$$.fragment),Eje=l(),Qd=a("h2"),FE=a("a"),rFe=a("span"),F(M7.$$.fragment),qpr=l(),tFe=a("span"),jpr=o("TFAutoModelForCausalLM"),Cje=l(),Zo=a("div"),F(E7.$$.fragment),Dpr=l(),Hd=a("p"),Gpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SQ=a("a"),Opr=o("from_pretrained()"),Vpr=o(" class method or the "),RQ=a("a"),Xpr=o("from_config()"),zpr=o(` class
method.`),Wpr=l(),C7=a("p"),Qpr=o("This class cannot be instantiated directly using "),aFe=a("code"),Hpr=o("__init__()"),Upr=o(" (throws an error)."),Jpr=l(),xt=a("div"),F(w7.$$.fragment),Ypr=l(),nFe=a("p"),Kpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zpr=l(),Ud=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(TE.$$.fragment),s_r=l(),yr=a("div"),F(A7.$$.fragment),l_r=l(),lFe=a("p"),i_r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),d_r=l(),en=a("p"),c_r=o("The model class to instantiate is selected based on the "),iFe=a("code"),m_r=o("model_type"),f_r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),u_r=o("pretrained_model_name_or_path"),p_r=o(":"),__r=l(),Te=a("ul"),ME=a("li"),mFe=a("strong"),b_r=o("bert"),v_r=o(" \u2014 "),BQ=a("a"),F_r=o("TFBertLMHeadModel"),T_r=o(" (BERT model)"),M_r=l(),EE=a("li"),fFe=a("strong"),E_r=o("camembert"),C_r=o(" \u2014 "),IQ=a("a"),w_r=o("TFCamembertForCausalLM"),A_r=o(" (CamemBERT model)"),y_r=l(),CE=a("li"),gFe=a("strong"),L_r=o("ctrl"),x_r=o(" \u2014 "),NQ=a("a"),$_r=o("TFCTRLLMHeadModel"),k_r=o(" (CTRL model)"),S_r=l(),wE=a("li"),hFe=a("strong"),R_r=o("gpt2"),P_r=o(" \u2014 "),qQ=a("a"),B_r=o("TFGPT2LMHeadModel"),I_r=o(" (OpenAI GPT-2 model)"),N_r=l(),AE=a("li"),uFe=a("strong"),q_r=o("gptj"),j_r=o(" \u2014 "),jQ=a("a"),D_r=o("TFGPTJForCausalLM"),G_r=o(" (GPT-J model)"),O_r=l(),yE=a("li"),pFe=a("strong"),V_r=o("openai-gpt"),X_r=o(" \u2014 "),DQ=a("a"),z_r=o("TFOpenAIGPTLMHeadModel"),W_r=o(" (OpenAI GPT model)"),Q_r=l(),LE=a("li"),_Fe=a("strong"),H_r=o("opt"),U_r=o(" \u2014 "),GQ=a("a"),J_r=o("TFOPTForCausalLM"),Y_r=o(" (OPT model)"),K_r=l(),xE=a("li"),bFe=a("strong"),Z_r=o("rembert"),ebr=o(" \u2014 "),OQ=a("a"),obr=o("TFRemBertForCausalLM"),rbr=o(" (RemBERT model)"),tbr=l(),$E=a("li"),vFe=a("strong"),abr=o("roberta"),nbr=o(" \u2014 "),VQ=a("a"),sbr=o("TFRobertaForCausalLM"),lbr=o(" (RoBERTa model)"),ibr=l(),kE=a("li"),FFe=a("strong"),dbr=o("roformer"),cbr=o(" \u2014 "),XQ=a("a"),mbr=o("TFRoFormerForCausalLM"),fbr=o(" (RoFormer model)"),gbr=l(),SE=a("li"),TFe=a("strong"),hbr=o("transfo-xl"),ubr=o(" \u2014 "),zQ=a("a"),pbr=o("TFTransfoXLLMHeadModel"),_br=o(" (Transformer-XL model)"),bbr=l(),RE=a("li"),MFe=a("strong"),vbr=o("xlm"),Fbr=o(" \u2014 "),WQ=a("a"),Tbr=o("TFXLMWithLMHeadModel"),Mbr=o(" (XLM model)"),Ebr=l(),PE=a("li"),EFe=a("strong"),Cbr=o("xlnet"),wbr=o(" \u2014 "),QQ=a("a"),Abr=o("TFXLNetLMHeadModel"),ybr=o(" (XLNet model)"),Lbr=l(),F(BE.$$.fragment),wje=l(),Jd=a("h2"),IE=a("a"),CFe=a("span"),F(y7.$$.fragment),xbr=l(),wFe=a("span"),$br=o("TFAutoModelForImageClassification"),Aje=l(),er=a("div"),F(L7.$$.fragment),kbr=l(),Yd=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HQ=a("a"),Rbr=o("from_pretrained()"),Pbr=o(" class method or the "),UQ=a("a"),Bbr=o("from_config()"),Ibr=o(` class
method.`),Nbr=l(),x7=a("p"),qbr=o("This class cannot be instantiated directly using "),AFe=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),$t=a("div"),F($7.$$.fragment),Obr=l(),yFe=a("p"),Vbr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xbr=l(),Kd=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),Wbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),F(NE.$$.fragment),Ybr=l(),Lr=a("div"),F(k7.$$.fragment),Kbr=l(),xFe=a("p"),Zbr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e2r=l(),on=a("p"),o2r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),r2r=o("model_type"),t2r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),a2r=o("pretrained_model_name_or_path"),n2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),s2r=o("pretrained_model_name_or_path"),l2r=o(":"),i2r=l(),rn=a("ul"),qE=a("li"),RFe=a("strong"),d2r=o("convnext"),c2r=o(" \u2014 "),YQ=a("a"),m2r=o("TFConvNextForImageClassification"),f2r=o(" (ConvNext model)"),g2r=l(),jE=a("li"),PFe=a("strong"),h2r=o("data2vec-vision"),u2r=o(" \u2014 "),KQ=a("a"),p2r=o("TFData2VecVisionForImageClassification"),_2r=o(" (Data2VecVision model)"),b2r=l(),DE=a("li"),BFe=a("strong"),v2r=o("swin"),F2r=o(" \u2014 "),ZQ=a("a"),T2r=o("TFSwinForImageClassification"),M2r=o(" (Swin model)"),E2r=l(),GE=a("li"),IFe=a("strong"),C2r=o("vit"),w2r=o(" \u2014 "),eH=a("a"),A2r=o("TFViTForImageClassification"),y2r=o(" (ViT model)"),L2r=l(),F(OE.$$.fragment),yje=l(),Zd=a("h2"),VE=a("a"),NFe=a("span"),F(S7.$$.fragment),x2r=l(),qFe=a("span"),$2r=o("TFAutoModelForMaskedLM"),Lje=l(),or=a("div"),F(R7.$$.fragment),k2r=l(),ec=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oH=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),rH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),N2r=l(),P7=a("p"),q2r=o("This class cannot be instantiated directly using "),jFe=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),kt=a("div"),F(B7.$$.fragment),O2r=l(),DFe=a("p"),V2r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X2r=l(),oc=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F(XE.$$.fragment),Y2r=l(),xr=a("div"),F(I7.$$.fragment),K2r=l(),OFe=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),evr=l(),tn=a("p"),ovr=o("The model class to instantiate is selected based on the "),VFe=a("code"),rvr=o("model_type"),tvr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(":"),ivr=l(),ie=a("ul"),zE=a("li"),WFe=a("strong"),dvr=o("albert"),cvr=o(" \u2014 "),aH=a("a"),mvr=o("TFAlbertForMaskedLM"),fvr=o(" (ALBERT model)"),gvr=l(),WE=a("li"),QFe=a("strong"),hvr=o("bert"),uvr=o(" \u2014 "),nH=a("a"),pvr=o("TFBertForMaskedLM"),_vr=o(" (BERT model)"),bvr=l(),QE=a("li"),HFe=a("strong"),vvr=o("camembert"),Fvr=o(" \u2014 "),sH=a("a"),Tvr=o("TFCamembertForMaskedLM"),Mvr=o(" (CamemBERT model)"),Evr=l(),HE=a("li"),UFe=a("strong"),Cvr=o("convbert"),wvr=o(" \u2014 "),lH=a("a"),Avr=o("TFConvBertForMaskedLM"),yvr=o(" (ConvBERT model)"),Lvr=l(),UE=a("li"),JFe=a("strong"),xvr=o("deberta"),$vr=o(" \u2014 "),iH=a("a"),kvr=o("TFDebertaForMaskedLM"),Svr=o(" (DeBERTa model)"),Rvr=l(),JE=a("li"),YFe=a("strong"),Pvr=o("deberta-v2"),Bvr=o(" \u2014 "),dH=a("a"),Ivr=o("TFDebertaV2ForMaskedLM"),Nvr=o(" (DeBERTa-v2 model)"),qvr=l(),YE=a("li"),KFe=a("strong"),jvr=o("distilbert"),Dvr=o(" \u2014 "),cH=a("a"),Gvr=o("TFDistilBertForMaskedLM"),Ovr=o(" (DistilBERT model)"),Vvr=l(),KE=a("li"),ZFe=a("strong"),Xvr=o("electra"),zvr=o(" \u2014 "),mH=a("a"),Wvr=o("TFElectraForMaskedLM"),Qvr=o(" (ELECTRA model)"),Hvr=l(),ZE=a("li"),e1e=a("strong"),Uvr=o("flaubert"),Jvr=o(" \u2014 "),fH=a("a"),Yvr=o("TFFlaubertWithLMHeadModel"),Kvr=o(" (FlauBERT model)"),Zvr=l(),eC=a("li"),o1e=a("strong"),eFr=o("funnel"),oFr=o(" \u2014 "),gH=a("a"),rFr=o("TFFunnelForMaskedLM"),tFr=o(" (Funnel Transformer model)"),aFr=l(),oC=a("li"),r1e=a("strong"),nFr=o("layoutlm"),sFr=o(" \u2014 "),hH=a("a"),lFr=o("TFLayoutLMForMaskedLM"),iFr=o(" (LayoutLM model)"),dFr=l(),rC=a("li"),t1e=a("strong"),cFr=o("longformer"),mFr=o(" \u2014 "),uH=a("a"),fFr=o("TFLongformerForMaskedLM"),gFr=o(" (Longformer model)"),hFr=l(),tC=a("li"),a1e=a("strong"),uFr=o("mobilebert"),pFr=o(" \u2014 "),pH=a("a"),_Fr=o("TFMobileBertForMaskedLM"),bFr=o(" (MobileBERT model)"),vFr=l(),aC=a("li"),n1e=a("strong"),FFr=o("mpnet"),TFr=o(" \u2014 "),_H=a("a"),MFr=o("TFMPNetForMaskedLM"),EFr=o(" (MPNet model)"),CFr=l(),nC=a("li"),s1e=a("strong"),wFr=o("rembert"),AFr=o(" \u2014 "),bH=a("a"),yFr=o("TFRemBertForMaskedLM"),LFr=o(" (RemBERT model)"),xFr=l(),sC=a("li"),l1e=a("strong"),$Fr=o("roberta"),kFr=o(" \u2014 "),vH=a("a"),SFr=o("TFRobertaForMaskedLM"),RFr=o(" (RoBERTa model)"),PFr=l(),lC=a("li"),i1e=a("strong"),BFr=o("roformer"),IFr=o(" \u2014 "),FH=a("a"),NFr=o("TFRoFormerForMaskedLM"),qFr=o(" (RoFormer model)"),jFr=l(),iC=a("li"),d1e=a("strong"),DFr=o("tapas"),GFr=o(" \u2014 "),TH=a("a"),OFr=o("TFTapasForMaskedLM"),VFr=o(" (TAPAS model)"),XFr=l(),dC=a("li"),c1e=a("strong"),zFr=o("xlm"),WFr=o(" \u2014 "),MH=a("a"),QFr=o("TFXLMWithLMHeadModel"),HFr=o(" (XLM model)"),UFr=l(),cC=a("li"),m1e=a("strong"),JFr=o("xlm-roberta"),YFr=o(" \u2014 "),EH=a("a"),KFr=o("TFXLMRobertaForMaskedLM"),ZFr=o(" (XLM-RoBERTa model)"),e1r=l(),F(mC.$$.fragment),xje=l(),rc=a("h2"),fC=a("a"),f1e=a("span"),F(N7.$$.fragment),o1r=l(),g1e=a("span"),r1r=o("TFAutoModelForSeq2SeqLM"),$je=l(),rr=a("div"),F(q7.$$.fragment),t1r=l(),tc=a("p"),a1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CH=a("a"),n1r=o("from_pretrained()"),s1r=o(" class method or the "),wH=a("a"),l1r=o("from_config()"),i1r=o(` class
method.`),d1r=l(),j7=a("p"),c1r=o("This class cannot be instantiated directly using "),h1e=a("code"),m1r=o("__init__()"),f1r=o(" (throws an error)."),g1r=l(),St=a("div"),F(D7.$$.fragment),h1r=l(),u1e=a("p"),u1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p1r=l(),ac=a("p"),_1r=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),b1r=o("not"),v1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),F1r=o("from_pretrained()"),T1r=o(" to load the model weights."),M1r=l(),F(gC.$$.fragment),E1r=l(),$r=a("div"),F(G7.$$.fragment),C1r=l(),_1e=a("p"),w1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A1r=l(),an=a("p"),y1r=o("The model class to instantiate is selected based on the "),b1e=a("code"),L1r=o("model_type"),x1r=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),$1r=o("pretrained_model_name_or_path"),k1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(":"),P1r=l(),ye=a("ul"),hC=a("li"),T1e=a("strong"),B1r=o("bart"),I1r=o(" \u2014 "),yH=a("a"),N1r=o("TFBartForConditionalGeneration"),q1r=o(" (BART model)"),j1r=l(),uC=a("li"),M1e=a("strong"),D1r=o("blenderbot"),G1r=o(" \u2014 "),LH=a("a"),O1r=o("TFBlenderbotForConditionalGeneration"),V1r=o(" (Blenderbot model)"),X1r=l(),pC=a("li"),E1e=a("strong"),z1r=o("blenderbot-small"),W1r=o(" \u2014 "),xH=a("a"),Q1r=o("TFBlenderbotSmallForConditionalGeneration"),H1r=o(" (BlenderbotSmall model)"),U1r=l(),_C=a("li"),C1e=a("strong"),J1r=o("encoder-decoder"),Y1r=o(" \u2014 "),$H=a("a"),K1r=o("TFEncoderDecoderModel"),Z1r=o(" (Encoder decoder model)"),eTr=l(),bC=a("li"),w1e=a("strong"),oTr=o("led"),rTr=o(" \u2014 "),kH=a("a"),tTr=o("TFLEDForConditionalGeneration"),aTr=o(" (LED model)"),nTr=l(),vC=a("li"),A1e=a("strong"),sTr=o("marian"),lTr=o(" \u2014 "),SH=a("a"),iTr=o("TFMarianMTModel"),dTr=o(" (Marian model)"),cTr=l(),FC=a("li"),y1e=a("strong"),mTr=o("mbart"),fTr=o(" \u2014 "),RH=a("a"),gTr=o("TFMBartForConditionalGeneration"),hTr=o(" (mBART model)"),uTr=l(),TC=a("li"),L1e=a("strong"),pTr=o("mt5"),_Tr=o(" \u2014 "),PH=a("a"),bTr=o("TFMT5ForConditionalGeneration"),vTr=o(" (mT5 model)"),FTr=l(),MC=a("li"),x1e=a("strong"),TTr=o("pegasus"),MTr=o(" \u2014 "),BH=a("a"),ETr=o("TFPegasusForConditionalGeneration"),CTr=o(" (Pegasus model)"),wTr=l(),EC=a("li"),$1e=a("strong"),ATr=o("t5"),yTr=o(" \u2014 "),IH=a("a"),LTr=o("TFT5ForConditionalGeneration"),xTr=o(" (T5 model)"),$Tr=l(),F(CC.$$.fragment),kje=l(),nc=a("h2"),wC=a("a"),k1e=a("span"),F(O7.$$.fragment),kTr=l(),S1e=a("span"),STr=o("TFAutoModelForSequenceClassification"),Sje=l(),tr=a("div"),F(V7.$$.fragment),RTr=l(),sc=a("p"),PTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NH=a("a"),BTr=o("from_pretrained()"),ITr=o(" class method or the "),qH=a("a"),NTr=o("from_config()"),qTr=o(` class
method.`),jTr=l(),X7=a("p"),DTr=o("This class cannot be instantiated directly using "),R1e=a("code"),GTr=o("__init__()"),OTr=o(" (throws an error)."),VTr=l(),Rt=a("div"),F(z7.$$.fragment),XTr=l(),P1e=a("p"),zTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WTr=l(),lc=a("p"),QTr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),HTr=o("not"),UTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),JTr=o("from_pretrained()"),YTr=o(" to load the model weights."),KTr=l(),F(AC.$$.fragment),ZTr=l(),kr=a("div"),F(W7.$$.fragment),eMr=l(),I1e=a("p"),oMr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rMr=l(),nn=a("p"),tMr=o("The model class to instantiate is selected based on the "),N1e=a("code"),aMr=o("model_type"),nMr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),sMr=o("pretrained_model_name_or_path"),lMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),iMr=o("pretrained_model_name_or_path"),dMr=o(":"),cMr=l(),oe=a("ul"),yC=a("li"),D1e=a("strong"),mMr=o("albert"),fMr=o(" \u2014 "),DH=a("a"),gMr=o("TFAlbertForSequenceClassification"),hMr=o(" (ALBERT model)"),uMr=l(),LC=a("li"),G1e=a("strong"),pMr=o("bert"),_Mr=o(" \u2014 "),GH=a("a"),bMr=o("TFBertForSequenceClassification"),vMr=o(" (BERT model)"),FMr=l(),xC=a("li"),O1e=a("strong"),TMr=o("camembert"),MMr=o(" \u2014 "),OH=a("a"),EMr=o("TFCamembertForSequenceClassification"),CMr=o(" (CamemBERT model)"),wMr=l(),$C=a("li"),V1e=a("strong"),AMr=o("convbert"),yMr=o(" \u2014 "),VH=a("a"),LMr=o("TFConvBertForSequenceClassification"),xMr=o(" (ConvBERT model)"),$Mr=l(),kC=a("li"),X1e=a("strong"),kMr=o("ctrl"),SMr=o(" \u2014 "),XH=a("a"),RMr=o("TFCTRLForSequenceClassification"),PMr=o(" (CTRL model)"),BMr=l(),SC=a("li"),z1e=a("strong"),IMr=o("deberta"),NMr=o(" \u2014 "),zH=a("a"),qMr=o("TFDebertaForSequenceClassification"),jMr=o(" (DeBERTa model)"),DMr=l(),RC=a("li"),W1e=a("strong"),GMr=o("deberta-v2"),OMr=o(" \u2014 "),WH=a("a"),VMr=o("TFDebertaV2ForSequenceClassification"),XMr=o(" (DeBERTa-v2 model)"),zMr=l(),PC=a("li"),Q1e=a("strong"),WMr=o("distilbert"),QMr=o(" \u2014 "),QH=a("a"),HMr=o("TFDistilBertForSequenceClassification"),UMr=o(" (DistilBERT model)"),JMr=l(),BC=a("li"),H1e=a("strong"),YMr=o("electra"),KMr=o(" \u2014 "),HH=a("a"),ZMr=o("TFElectraForSequenceClassification"),e4r=o(" (ELECTRA model)"),o4r=l(),IC=a("li"),U1e=a("strong"),r4r=o("flaubert"),t4r=o(" \u2014 "),UH=a("a"),a4r=o("TFFlaubertForSequenceClassification"),n4r=o(" (FlauBERT model)"),s4r=l(),NC=a("li"),J1e=a("strong"),l4r=o("funnel"),i4r=o(" \u2014 "),JH=a("a"),d4r=o("TFFunnelForSequenceClassification"),c4r=o(" (Funnel Transformer model)"),m4r=l(),qC=a("li"),Y1e=a("strong"),f4r=o("gpt2"),g4r=o(" \u2014 "),YH=a("a"),h4r=o("TFGPT2ForSequenceClassification"),u4r=o(" (OpenAI GPT-2 model)"),p4r=l(),jC=a("li"),K1e=a("strong"),_4r=o("gptj"),b4r=o(" \u2014 "),KH=a("a"),v4r=o("TFGPTJForSequenceClassification"),F4r=o(" (GPT-J model)"),T4r=l(),DC=a("li"),Z1e=a("strong"),M4r=o("layoutlm"),E4r=o(" \u2014 "),ZH=a("a"),C4r=o("TFLayoutLMForSequenceClassification"),w4r=o(" (LayoutLM model)"),A4r=l(),GC=a("li"),eTe=a("strong"),y4r=o("longformer"),L4r=o(" \u2014 "),eU=a("a"),x4r=o("TFLongformerForSequenceClassification"),$4r=o(" (Longformer model)"),k4r=l(),OC=a("li"),oTe=a("strong"),S4r=o("mobilebert"),R4r=o(" \u2014 "),oU=a("a"),P4r=o("TFMobileBertForSequenceClassification"),B4r=o(" (MobileBERT model)"),I4r=l(),VC=a("li"),rTe=a("strong"),N4r=o("mpnet"),q4r=o(" \u2014 "),rU=a("a"),j4r=o("TFMPNetForSequenceClassification"),D4r=o(" (MPNet model)"),G4r=l(),XC=a("li"),tTe=a("strong"),O4r=o("openai-gpt"),V4r=o(" \u2014 "),tU=a("a"),X4r=o("TFOpenAIGPTForSequenceClassification"),z4r=o(" (OpenAI GPT model)"),W4r=l(),zC=a("li"),aTe=a("strong"),Q4r=o("rembert"),H4r=o(" \u2014 "),aU=a("a"),U4r=o("TFRemBertForSequenceClassification"),J4r=o(" (RemBERT model)"),Y4r=l(),WC=a("li"),nTe=a("strong"),K4r=o("roberta"),Z4r=o(" \u2014 "),nU=a("a"),eEr=o("TFRobertaForSequenceClassification"),oEr=o(" (RoBERTa model)"),rEr=l(),QC=a("li"),sTe=a("strong"),tEr=o("roformer"),aEr=o(" \u2014 "),sU=a("a"),nEr=o("TFRoFormerForSequenceClassification"),sEr=o(" (RoFormer model)"),lEr=l(),HC=a("li"),lTe=a("strong"),iEr=o("tapas"),dEr=o(" \u2014 "),lU=a("a"),cEr=o("TFTapasForSequenceClassification"),mEr=o(" (TAPAS model)"),fEr=l(),UC=a("li"),iTe=a("strong"),gEr=o("transfo-xl"),hEr=o(" \u2014 "),iU=a("a"),uEr=o("TFTransfoXLForSequenceClassification"),pEr=o(" (Transformer-XL model)"),_Er=l(),JC=a("li"),dTe=a("strong"),bEr=o("xlm"),vEr=o(" \u2014 "),dU=a("a"),FEr=o("TFXLMForSequenceClassification"),TEr=o(" (XLM model)"),MEr=l(),YC=a("li"),cTe=a("strong"),EEr=o("xlm-roberta"),CEr=o(" \u2014 "),cU=a("a"),wEr=o("TFXLMRobertaForSequenceClassification"),AEr=o(" (XLM-RoBERTa model)"),yEr=l(),KC=a("li"),mTe=a("strong"),LEr=o("xlnet"),xEr=o(" \u2014 "),mU=a("a"),$Er=o("TFXLNetForSequenceClassification"),kEr=o(" (XLNet model)"),SEr=l(),F(ZC.$$.fragment),Rje=l(),ic=a("h2"),e5=a("a"),fTe=a("span"),F(Q7.$$.fragment),REr=l(),gTe=a("span"),PEr=o("TFAutoModelForMultipleChoice"),Pje=l(),ar=a("div"),F(H7.$$.fragment),BEr=l(),dc=a("p"),IEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fU=a("a"),NEr=o("from_pretrained()"),qEr=o(" class method or the "),gU=a("a"),jEr=o("from_config()"),DEr=o(` class
method.`),GEr=l(),U7=a("p"),OEr=o("This class cannot be instantiated directly using "),hTe=a("code"),VEr=o("__init__()"),XEr=o(" (throws an error)."),zEr=l(),Pt=a("div"),F(J7.$$.fragment),WEr=l(),uTe=a("p"),QEr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HEr=l(),cc=a("p"),UEr=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),JEr=o("not"),YEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),KEr=o("from_pretrained()"),ZEr=o(" to load the model weights."),eCr=l(),F(o5.$$.fragment),oCr=l(),Sr=a("div"),F(Y7.$$.fragment),rCr=l(),_Te=a("p"),tCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aCr=l(),sn=a("p"),nCr=o("The model class to instantiate is selected based on the "),bTe=a("code"),sCr=o("model_type"),lCr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),cCr=o("pretrained_model_name_or_path"),mCr=o(":"),fCr=l(),ue=a("ul"),r5=a("li"),TTe=a("strong"),gCr=o("albert"),hCr=o(" \u2014 "),uU=a("a"),uCr=o("TFAlbertForMultipleChoice"),pCr=o(" (ALBERT model)"),_Cr=l(),t5=a("li"),MTe=a("strong"),bCr=o("bert"),vCr=o(" \u2014 "),pU=a("a"),FCr=o("TFBertForMultipleChoice"),TCr=o(" (BERT model)"),MCr=l(),a5=a("li"),ETe=a("strong"),ECr=o("camembert"),CCr=o(" \u2014 "),_U=a("a"),wCr=o("TFCamembertForMultipleChoice"),ACr=o(" (CamemBERT model)"),yCr=l(),n5=a("li"),CTe=a("strong"),LCr=o("convbert"),xCr=o(" \u2014 "),bU=a("a"),$Cr=o("TFConvBertForMultipleChoice"),kCr=o(" (ConvBERT model)"),SCr=l(),s5=a("li"),wTe=a("strong"),RCr=o("distilbert"),PCr=o(" \u2014 "),vU=a("a"),BCr=o("TFDistilBertForMultipleChoice"),ICr=o(" (DistilBERT model)"),NCr=l(),l5=a("li"),ATe=a("strong"),qCr=o("electra"),jCr=o(" \u2014 "),FU=a("a"),DCr=o("TFElectraForMultipleChoice"),GCr=o(" (ELECTRA model)"),OCr=l(),i5=a("li"),yTe=a("strong"),VCr=o("flaubert"),XCr=o(" \u2014 "),TU=a("a"),zCr=o("TFFlaubertForMultipleChoice"),WCr=o(" (FlauBERT model)"),QCr=l(),d5=a("li"),LTe=a("strong"),HCr=o("funnel"),UCr=o(" \u2014 "),MU=a("a"),JCr=o("TFFunnelForMultipleChoice"),YCr=o(" (Funnel Transformer model)"),KCr=l(),c5=a("li"),xTe=a("strong"),ZCr=o("longformer"),e5r=o(" \u2014 "),EU=a("a"),o5r=o("TFLongformerForMultipleChoice"),r5r=o(" (Longformer model)"),t5r=l(),m5=a("li"),$Te=a("strong"),a5r=o("mobilebert"),n5r=o(" \u2014 "),CU=a("a"),s5r=o("TFMobileBertForMultipleChoice"),l5r=o(" (MobileBERT model)"),i5r=l(),f5=a("li"),kTe=a("strong"),d5r=o("mpnet"),c5r=o(" \u2014 "),wU=a("a"),m5r=o("TFMPNetForMultipleChoice"),f5r=o(" (MPNet model)"),g5r=l(),g5=a("li"),STe=a("strong"),h5r=o("rembert"),u5r=o(" \u2014 "),AU=a("a"),p5r=o("TFRemBertForMultipleChoice"),_5r=o(" (RemBERT model)"),b5r=l(),h5=a("li"),RTe=a("strong"),v5r=o("roberta"),F5r=o(" \u2014 "),yU=a("a"),T5r=o("TFRobertaForMultipleChoice"),M5r=o(" (RoBERTa model)"),E5r=l(),u5=a("li"),PTe=a("strong"),C5r=o("roformer"),w5r=o(" \u2014 "),LU=a("a"),A5r=o("TFRoFormerForMultipleChoice"),y5r=o(" (RoFormer model)"),L5r=l(),p5=a("li"),BTe=a("strong"),x5r=o("xlm"),$5r=o(" \u2014 "),xU=a("a"),k5r=o("TFXLMForMultipleChoice"),S5r=o(" (XLM model)"),R5r=l(),_5=a("li"),ITe=a("strong"),P5r=o("xlm-roberta"),B5r=o(" \u2014 "),$U=a("a"),I5r=o("TFXLMRobertaForMultipleChoice"),N5r=o(" (XLM-RoBERTa model)"),q5r=l(),b5=a("li"),NTe=a("strong"),j5r=o("xlnet"),D5r=o(" \u2014 "),kU=a("a"),G5r=o("TFXLNetForMultipleChoice"),O5r=o(" (XLNet model)"),V5r=l(),F(v5.$$.fragment),Bje=l(),mc=a("h2"),F5=a("a"),qTe=a("span"),F(K7.$$.fragment),X5r=l(),jTe=a("span"),z5r=o("TFAutoModelForNextSentencePrediction"),Ije=l(),nr=a("div"),F(Z7.$$.fragment),W5r=l(),fc=a("p"),Q5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SU=a("a"),H5r=o("from_pretrained()"),U5r=o(" class method or the "),RU=a("a"),J5r=o("from_config()"),Y5r=o(` class
method.`),K5r=l(),e9=a("p"),Z5r=o("This class cannot be instantiated directly using "),DTe=a("code"),e3r=o("__init__()"),o3r=o(" (throws an error)."),r3r=l(),Bt=a("div"),F(o9.$$.fragment),t3r=l(),GTe=a("p"),a3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),n3r=l(),gc=a("p"),s3r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),l3r=o("not"),i3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),d3r=o("from_pretrained()"),c3r=o(" to load the model weights."),m3r=l(),F(T5.$$.fragment),f3r=l(),Rr=a("div"),F(r9.$$.fragment),g3r=l(),VTe=a("p"),h3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u3r=l(),ln=a("p"),p3r=o("The model class to instantiate is selected based on the "),XTe=a("code"),_3r=o("model_type"),b3r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),v3r=o("pretrained_model_name_or_path"),F3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),T3r=o("pretrained_model_name_or_path"),M3r=o(":"),E3r=l(),t9=a("ul"),M5=a("li"),QTe=a("strong"),C3r=o("bert"),w3r=o(" \u2014 "),BU=a("a"),A3r=o("TFBertForNextSentencePrediction"),y3r=o(" (BERT model)"),L3r=l(),E5=a("li"),HTe=a("strong"),x3r=o("mobilebert"),$3r=o(" \u2014 "),IU=a("a"),k3r=o("TFMobileBertForNextSentencePrediction"),S3r=o(" (MobileBERT model)"),R3r=l(),F(C5.$$.fragment),Nje=l(),hc=a("h2"),w5=a("a"),UTe=a("span"),F(a9.$$.fragment),P3r=l(),JTe=a("span"),B3r=o("TFAutoModelForTableQuestionAnswering"),qje=l(),sr=a("div"),F(n9.$$.fragment),I3r=l(),uc=a("p"),N3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NU=a("a"),q3r=o("from_pretrained()"),j3r=o(" class method or the "),qU=a("a"),D3r=o("from_config()"),G3r=o(` class
method.`),O3r=l(),s9=a("p"),V3r=o("This class cannot be instantiated directly using "),YTe=a("code"),X3r=o("__init__()"),z3r=o(" (throws an error)."),W3r=l(),It=a("div"),F(l9.$$.fragment),Q3r=l(),KTe=a("p"),H3r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),U3r=l(),pc=a("p"),J3r=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),Y3r=o("not"),K3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),Z3r=o("from_pretrained()"),ewr=o(" to load the model weights."),owr=l(),F(A5.$$.fragment),rwr=l(),Pr=a("div"),F(i9.$$.fragment),twr=l(),eMe=a("p"),awr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nwr=l(),dn=a("p"),swr=o("The model class to instantiate is selected based on the "),oMe=a("code"),lwr=o("model_type"),iwr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),dwr=o("pretrained_model_name_or_path"),cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),mwr=o("pretrained_model_name_or_path"),fwr=o(":"),gwr=l(),aMe=a("ul"),y5=a("li"),nMe=a("strong"),hwr=o("tapas"),uwr=o(" \u2014 "),DU=a("a"),pwr=o("TFTapasForQuestionAnswering"),_wr=o(" (TAPAS model)"),bwr=l(),F(L5.$$.fragment),jje=l(),_c=a("h2"),x5=a("a"),sMe=a("span"),F(d9.$$.fragment),vwr=l(),lMe=a("span"),Fwr=o("TFAutoModelForTokenClassification"),Dje=l(),lr=a("div"),F(c9.$$.fragment),Twr=l(),bc=a("p"),Mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GU=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" class method or the "),OU=a("a"),wwr=o("from_config()"),Awr=o(` class
method.`),ywr=l(),m9=a("p"),Lwr=o("This class cannot be instantiated directly using "),iMe=a("code"),xwr=o("__init__()"),$wr=o(" (throws an error)."),kwr=l(),Nt=a("div"),F(f9.$$.fragment),Swr=l(),dMe=a("p"),Rwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pwr=l(),vc=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),Iwr=o("not"),Nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),qwr=o("from_pretrained()"),jwr=o(" to load the model weights."),Dwr=l(),F($5.$$.fragment),Gwr=l(),Br=a("div"),F(g9.$$.fragment),Owr=l(),mMe=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xwr=l(),cn=a("p"),zwr=o("The model class to instantiate is selected based on the "),fMe=a("code"),Wwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),de=a("ul"),k5=a("li"),uMe=a("strong"),Zwr=o("albert"),e0r=o(" \u2014 "),XU=a("a"),o0r=o("TFAlbertForTokenClassification"),r0r=o(" (ALBERT model)"),t0r=l(),S5=a("li"),pMe=a("strong"),a0r=o("bert"),n0r=o(" \u2014 "),zU=a("a"),s0r=o("TFBertForTokenClassification"),l0r=o(" (BERT model)"),i0r=l(),R5=a("li"),_Me=a("strong"),d0r=o("camembert"),c0r=o(" \u2014 "),WU=a("a"),m0r=o("TFCamembertForTokenClassification"),f0r=o(" (CamemBERT model)"),g0r=l(),P5=a("li"),bMe=a("strong"),h0r=o("convbert"),u0r=o(" \u2014 "),QU=a("a"),p0r=o("TFConvBertForTokenClassification"),_0r=o(" (ConvBERT model)"),b0r=l(),B5=a("li"),vMe=a("strong"),v0r=o("deberta"),F0r=o(" \u2014 "),HU=a("a"),T0r=o("TFDebertaForTokenClassification"),M0r=o(" (DeBERTa model)"),E0r=l(),I5=a("li"),FMe=a("strong"),C0r=o("deberta-v2"),w0r=o(" \u2014 "),UU=a("a"),A0r=o("TFDebertaV2ForTokenClassification"),y0r=o(" (DeBERTa-v2 model)"),L0r=l(),N5=a("li"),TMe=a("strong"),x0r=o("distilbert"),$0r=o(" \u2014 "),JU=a("a"),k0r=o("TFDistilBertForTokenClassification"),S0r=o(" (DistilBERT model)"),R0r=l(),q5=a("li"),MMe=a("strong"),P0r=o("electra"),B0r=o(" \u2014 "),YU=a("a"),I0r=o("TFElectraForTokenClassification"),N0r=o(" (ELECTRA model)"),q0r=l(),j5=a("li"),EMe=a("strong"),j0r=o("flaubert"),D0r=o(" \u2014 "),KU=a("a"),G0r=o("TFFlaubertForTokenClassification"),O0r=o(" (FlauBERT model)"),V0r=l(),D5=a("li"),CMe=a("strong"),X0r=o("funnel"),z0r=o(" \u2014 "),ZU=a("a"),W0r=o("TFFunnelForTokenClassification"),Q0r=o(" (Funnel Transformer model)"),H0r=l(),G5=a("li"),wMe=a("strong"),U0r=o("layoutlm"),J0r=o(" \u2014 "),eJ=a("a"),Y0r=o("TFLayoutLMForTokenClassification"),K0r=o(" (LayoutLM model)"),Z0r=l(),O5=a("li"),AMe=a("strong"),e6r=o("longformer"),o6r=o(" \u2014 "),oJ=a("a"),r6r=o("TFLongformerForTokenClassification"),t6r=o(" (Longformer model)"),a6r=l(),V5=a("li"),yMe=a("strong"),n6r=o("mobilebert"),s6r=o(" \u2014 "),rJ=a("a"),l6r=o("TFMobileBertForTokenClassification"),i6r=o(" (MobileBERT model)"),d6r=l(),X5=a("li"),LMe=a("strong"),c6r=o("mpnet"),m6r=o(" \u2014 "),tJ=a("a"),f6r=o("TFMPNetForTokenClassification"),g6r=o(" (MPNet model)"),h6r=l(),z5=a("li"),xMe=a("strong"),u6r=o("rembert"),p6r=o(" \u2014 "),aJ=a("a"),_6r=o("TFRemBertForTokenClassification"),b6r=o(" (RemBERT model)"),v6r=l(),W5=a("li"),$Me=a("strong"),F6r=o("roberta"),T6r=o(" \u2014 "),nJ=a("a"),M6r=o("TFRobertaForTokenClassification"),E6r=o(" (RoBERTa model)"),C6r=l(),Q5=a("li"),kMe=a("strong"),w6r=o("roformer"),A6r=o(" \u2014 "),sJ=a("a"),y6r=o("TFRoFormerForTokenClassification"),L6r=o(" (RoFormer model)"),x6r=l(),H5=a("li"),SMe=a("strong"),$6r=o("xlm"),k6r=o(" \u2014 "),lJ=a("a"),S6r=o("TFXLMForTokenClassification"),R6r=o(" (XLM model)"),P6r=l(),U5=a("li"),RMe=a("strong"),B6r=o("xlm-roberta"),I6r=o(" \u2014 "),iJ=a("a"),N6r=o("TFXLMRobertaForTokenClassification"),q6r=o(" (XLM-RoBERTa model)"),j6r=l(),J5=a("li"),PMe=a("strong"),D6r=o("xlnet"),G6r=o(" \u2014 "),dJ=a("a"),O6r=o("TFXLNetForTokenClassification"),V6r=o(" (XLNet model)"),X6r=l(),F(Y5.$$.fragment),Gje=l(),Fc=a("h2"),K5=a("a"),BMe=a("span"),F(h9.$$.fragment),z6r=l(),IMe=a("span"),W6r=o("TFAutoModelForQuestionAnswering"),Oje=l(),ir=a("div"),F(u9.$$.fragment),Q6r=l(),Tc=a("p"),H6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cJ=a("a"),U6r=o("from_pretrained()"),J6r=o(" class method or the "),mJ=a("a"),Y6r=o("from_config()"),K6r=o(` class
method.`),Z6r=l(),p9=a("p"),eAr=o("This class cannot be instantiated directly using "),NMe=a("code"),oAr=o("__init__()"),rAr=o(" (throws an error)."),tAr=l(),qt=a("div"),F(_9.$$.fragment),aAr=l(),qMe=a("p"),nAr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sAr=l(),Mc=a("p"),lAr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),iAr=o("not"),dAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),cAr=o("from_pretrained()"),mAr=o(" to load the model weights."),fAr=l(),F(Z5.$$.fragment),gAr=l(),Ir=a("div"),F(b9.$$.fragment),hAr=l(),DMe=a("p"),uAr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pAr=l(),mn=a("p"),_Ar=o("The model class to instantiate is selected based on the "),GMe=a("code"),bAr=o("model_type"),vAr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(":"),CAr=l(),ce=a("ul"),e3=a("li"),XMe=a("strong"),wAr=o("albert"),AAr=o(" \u2014 "),gJ=a("a"),yAr=o("TFAlbertForQuestionAnswering"),LAr=o(" (ALBERT model)"),xAr=l(),o3=a("li"),zMe=a("strong"),$Ar=o("bert"),kAr=o(" \u2014 "),hJ=a("a"),SAr=o("TFBertForQuestionAnswering"),RAr=o(" (BERT model)"),PAr=l(),r3=a("li"),WMe=a("strong"),BAr=o("camembert"),IAr=o(" \u2014 "),uJ=a("a"),NAr=o("TFCamembertForQuestionAnswering"),qAr=o(" (CamemBERT model)"),jAr=l(),t3=a("li"),QMe=a("strong"),DAr=o("convbert"),GAr=o(" \u2014 "),pJ=a("a"),OAr=o("TFConvBertForQuestionAnswering"),VAr=o(" (ConvBERT model)"),XAr=l(),a3=a("li"),HMe=a("strong"),zAr=o("deberta"),WAr=o(" \u2014 "),_J=a("a"),QAr=o("TFDebertaForQuestionAnswering"),HAr=o(" (DeBERTa model)"),UAr=l(),n3=a("li"),UMe=a("strong"),JAr=o("deberta-v2"),YAr=o(" \u2014 "),bJ=a("a"),KAr=o("TFDebertaV2ForQuestionAnswering"),ZAr=o(" (DeBERTa-v2 model)"),eyr=l(),s3=a("li"),JMe=a("strong"),oyr=o("distilbert"),ryr=o(" \u2014 "),vJ=a("a"),tyr=o("TFDistilBertForQuestionAnswering"),ayr=o(" (DistilBERT model)"),nyr=l(),l3=a("li"),YMe=a("strong"),syr=o("electra"),lyr=o(" \u2014 "),FJ=a("a"),iyr=o("TFElectraForQuestionAnswering"),dyr=o(" (ELECTRA model)"),cyr=l(),i3=a("li"),KMe=a("strong"),myr=o("flaubert"),fyr=o(" \u2014 "),TJ=a("a"),gyr=o("TFFlaubertForQuestionAnsweringSimple"),hyr=o(" (FlauBERT model)"),uyr=l(),d3=a("li"),ZMe=a("strong"),pyr=o("funnel"),_yr=o(" \u2014 "),MJ=a("a"),byr=o("TFFunnelForQuestionAnswering"),vyr=o(" (Funnel Transformer model)"),Fyr=l(),c3=a("li"),e4e=a("strong"),Tyr=o("gptj"),Myr=o(" \u2014 "),EJ=a("a"),Eyr=o("TFGPTJForQuestionAnswering"),Cyr=o(" (GPT-J model)"),wyr=l(),m3=a("li"),o4e=a("strong"),Ayr=o("longformer"),yyr=o(" \u2014 "),CJ=a("a"),Lyr=o("TFLongformerForQuestionAnswering"),xyr=o(" (Longformer model)"),$yr=l(),f3=a("li"),r4e=a("strong"),kyr=o("mobilebert"),Syr=o(" \u2014 "),wJ=a("a"),Ryr=o("TFMobileBertForQuestionAnswering"),Pyr=o(" (MobileBERT model)"),Byr=l(),g3=a("li"),t4e=a("strong"),Iyr=o("mpnet"),Nyr=o(" \u2014 "),AJ=a("a"),qyr=o("TFMPNetForQuestionAnswering"),jyr=o(" (MPNet model)"),Dyr=l(),h3=a("li"),a4e=a("strong"),Gyr=o("rembert"),Oyr=o(" \u2014 "),yJ=a("a"),Vyr=o("TFRemBertForQuestionAnswering"),Xyr=o(" (RemBERT model)"),zyr=l(),u3=a("li"),n4e=a("strong"),Wyr=o("roberta"),Qyr=o(" \u2014 "),LJ=a("a"),Hyr=o("TFRobertaForQuestionAnswering"),Uyr=o(" (RoBERTa model)"),Jyr=l(),p3=a("li"),s4e=a("strong"),Yyr=o("roformer"),Kyr=o(" \u2014 "),xJ=a("a"),Zyr=o("TFRoFormerForQuestionAnswering"),eLr=o(" (RoFormer model)"),oLr=l(),_3=a("li"),l4e=a("strong"),rLr=o("xlm"),tLr=o(" \u2014 "),$J=a("a"),aLr=o("TFXLMForQuestionAnsweringSimple"),nLr=o(" (XLM model)"),sLr=l(),b3=a("li"),i4e=a("strong"),lLr=o("xlm-roberta"),iLr=o(" \u2014 "),kJ=a("a"),dLr=o("TFXLMRobertaForQuestionAnswering"),cLr=o(" (XLM-RoBERTa model)"),mLr=l(),v3=a("li"),d4e=a("strong"),fLr=o("xlnet"),gLr=o(" \u2014 "),SJ=a("a"),hLr=o("TFXLNetForQuestionAnsweringSimple"),uLr=o(" (XLNet model)"),pLr=l(),F(F3.$$.fragment),Vje=l(),Ec=a("h2"),T3=a("a"),c4e=a("span"),F(v9.$$.fragment),_Lr=l(),m4e=a("span"),bLr=o("TFAutoModelForVision2Seq"),Xje=l(),dr=a("div"),F(F9.$$.fragment),vLr=l(),Cc=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RJ=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),PJ=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),T9=a("p"),ALr=o("This class cannot be instantiated directly using "),f4e=a("code"),yLr=o("__init__()"),LLr=o(" (throws an error)."),xLr=l(),jt=a("div"),F(M9.$$.fragment),$Lr=l(),g4e=a("p"),kLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SLr=l(),wc=a("p"),RLr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),PLr=o("not"),BLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),ILr=o("from_pretrained()"),NLr=o(" to load the model weights."),qLr=l(),F(M3.$$.fragment),jLr=l(),Nr=a("div"),F(E9.$$.fragment),DLr=l(),u4e=a("p"),GLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OLr=l(),fn=a("p"),VLr=o("The model class to instantiate is selected based on the "),p4e=a("code"),XLr=o("model_type"),zLr=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),WLr=o("pretrained_model_name_or_path"),QLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(":"),JLr=l(),v4e=a("ul"),E3=a("li"),F4e=a("strong"),YLr=o("vision-encoder-decoder"),KLr=o(" \u2014 "),IJ=a("a"),ZLr=o("TFVisionEncoderDecoderModel"),e8r=o(" (Vision Encoder decoder model)"),o8r=l(),F(C3.$$.fragment),zje=l(),Ac=a("h2"),w3=a("a"),T4e=a("span"),F(C9.$$.fragment),r8r=l(),M4e=a("span"),t8r=o("TFAutoModelForSpeechSeq2Seq"),Wje=l(),cr=a("div"),F(w9.$$.fragment),a8r=l(),yc=a("p"),n8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NJ=a("a"),s8r=o("from_pretrained()"),l8r=o(" class method or the "),qJ=a("a"),i8r=o("from_config()"),d8r=o(` class
method.`),c8r=l(),A9=a("p"),m8r=o("This class cannot be instantiated directly using "),E4e=a("code"),f8r=o("__init__()"),g8r=o(" (throws an error)."),h8r=l(),Dt=a("div"),F(y9.$$.fragment),u8r=l(),C4e=a("p"),p8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_8r=l(),Lc=a("p"),b8r=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),v8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),T8r=o("from_pretrained()"),M8r=o(" to load the model weights."),E8r=l(),F(A3.$$.fragment),C8r=l(),qr=a("div"),F(L9.$$.fragment),w8r=l(),A4e=a("p"),A8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),y8r=l(),gn=a("p"),L8r=o("The model class to instantiate is selected based on the "),y4e=a("code"),x8r=o("model_type"),$8r=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),R8r=o("pretrained_model_name_or_path"),P8r=o(":"),B8r=l(),$4e=a("ul"),y3=a("li"),k4e=a("strong"),I8r=o("speech_to_text"),N8r=o(" \u2014 "),DJ=a("a"),q8r=o("TFSpeech2TextForConditionalGeneration"),j8r=o(" (Speech2Text model)"),D8r=l(),F(L3.$$.fragment),Qje=l(),xc=a("h2"),x3=a("a"),S4e=a("span"),F(x9.$$.fragment),G8r=l(),R4e=a("span"),O8r=o("FlaxAutoModel"),Hje=l(),mr=a("div"),F($9.$$.fragment),V8r=l(),$c=a("p"),X8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GJ=a("a"),z8r=o("from_pretrained()"),W8r=o(" class method or the "),OJ=a("a"),Q8r=o("from_config()"),H8r=o(` class
method.`),U8r=l(),k9=a("p"),J8r=o("This class cannot be instantiated directly using "),P4e=a("code"),Y8r=o("__init__()"),K8r=o(" (throws an error)."),Z8r=l(),Gt=a("div"),F(S9.$$.fragment),e7r=l(),B4e=a("p"),o7r=o("Instantiates one of the base model classes of the library from a configuration."),r7r=l(),kc=a("p"),t7r=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),a7r=o("not"),n7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),s7r=o("from_pretrained()"),l7r=o(" to load the model weights."),i7r=l(),F($3.$$.fragment),d7r=l(),jr=a("div"),F(R9.$$.fragment),c7r=l(),N4e=a("p"),m7r=o("Instantiate one of the base model classes of the library from a pretrained model."),f7r=l(),hn=a("p"),g7r=o("The model class to instantiate is selected based on the "),q4e=a("code"),h7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),F7r=l(),re=a("ul"),k3=a("li"),G4e=a("strong"),T7r=o("albert"),M7r=o(" \u2014 "),XJ=a("a"),E7r=o("FlaxAlbertModel"),C7r=o(" (ALBERT model)"),w7r=l(),S3=a("li"),O4e=a("strong"),A7r=o("bart"),y7r=o(" \u2014 "),zJ=a("a"),L7r=o("FlaxBartModel"),x7r=o(" (BART model)"),$7r=l(),R3=a("li"),V4e=a("strong"),k7r=o("beit"),S7r=o(" \u2014 "),WJ=a("a"),R7r=o("FlaxBeitModel"),P7r=o(" (BEiT model)"),B7r=l(),P3=a("li"),X4e=a("strong"),I7r=o("bert"),N7r=o(" \u2014 "),QJ=a("a"),q7r=o("FlaxBertModel"),j7r=o(" (BERT model)"),D7r=l(),B3=a("li"),z4e=a("strong"),G7r=o("big_bird"),O7r=o(" \u2014 "),HJ=a("a"),V7r=o("FlaxBigBirdModel"),X7r=o(" (BigBird model)"),z7r=l(),I3=a("li"),W4e=a("strong"),W7r=o("blenderbot"),Q7r=o(" \u2014 "),UJ=a("a"),H7r=o("FlaxBlenderbotModel"),U7r=o(" (Blenderbot model)"),J7r=l(),N3=a("li"),Q4e=a("strong"),Y7r=o("blenderbot-small"),K7r=o(" \u2014 "),JJ=a("a"),Z7r=o("FlaxBlenderbotSmallModel"),e9r=o(" (BlenderbotSmall model)"),o9r=l(),q3=a("li"),H4e=a("strong"),r9r=o("clip"),t9r=o(" \u2014 "),YJ=a("a"),a9r=o("FlaxCLIPModel"),n9r=o(" (CLIP model)"),s9r=l(),j3=a("li"),U4e=a("strong"),l9r=o("distilbert"),i9r=o(" \u2014 "),KJ=a("a"),d9r=o("FlaxDistilBertModel"),c9r=o(" (DistilBERT model)"),m9r=l(),D3=a("li"),J4e=a("strong"),f9r=o("electra"),g9r=o(" \u2014 "),ZJ=a("a"),h9r=o("FlaxElectraModel"),u9r=o(" (ELECTRA model)"),p9r=l(),G3=a("li"),Y4e=a("strong"),_9r=o("gpt2"),b9r=o(" \u2014 "),eY=a("a"),v9r=o("FlaxGPT2Model"),F9r=o(" (OpenAI GPT-2 model)"),T9r=l(),O3=a("li"),K4e=a("strong"),M9r=o("gpt_neo"),E9r=o(" \u2014 "),oY=a("a"),C9r=o("FlaxGPTNeoModel"),w9r=o(" (GPT Neo model)"),A9r=l(),V3=a("li"),Z4e=a("strong"),y9r=o("gptj"),L9r=o(" \u2014 "),rY=a("a"),x9r=o("FlaxGPTJModel"),$9r=o(" (GPT-J model)"),k9r=l(),X3=a("li"),eEe=a("strong"),S9r=o("marian"),R9r=o(" \u2014 "),tY=a("a"),P9r=o("FlaxMarianModel"),B9r=o(" (Marian model)"),I9r=l(),z3=a("li"),oEe=a("strong"),N9r=o("mbart"),q9r=o(" \u2014 "),aY=a("a"),j9r=o("FlaxMBartModel"),D9r=o(" (mBART model)"),G9r=l(),W3=a("li"),rEe=a("strong"),O9r=o("mt5"),V9r=o(" \u2014 "),nY=a("a"),X9r=o("FlaxMT5Model"),z9r=o(" (mT5 model)"),W9r=l(),Q3=a("li"),tEe=a("strong"),Q9r=o("opt"),H9r=o(" \u2014 "),sY=a("a"),U9r=o("FlaxOPTModel"),J9r=o(" (OPT model)"),Y9r=l(),H3=a("li"),aEe=a("strong"),K9r=o("pegasus"),Z9r=o(" \u2014 "),lY=a("a"),exr=o("FlaxPegasusModel"),oxr=o(" (Pegasus model)"),rxr=l(),U3=a("li"),nEe=a("strong"),txr=o("roberta"),axr=o(" \u2014 "),iY=a("a"),nxr=o("FlaxRobertaModel"),sxr=o(" (RoBERTa model)"),lxr=l(),J3=a("li"),sEe=a("strong"),ixr=o("roformer"),dxr=o(" \u2014 "),dY=a("a"),cxr=o("FlaxRoFormerModel"),mxr=o(" (RoFormer model)"),fxr=l(),Y3=a("li"),lEe=a("strong"),gxr=o("t5"),hxr=o(" \u2014 "),cY=a("a"),uxr=o("FlaxT5Model"),pxr=o(" (T5 model)"),_xr=l(),K3=a("li"),iEe=a("strong"),bxr=o("vision-text-dual-encoder"),vxr=o(" \u2014 "),mY=a("a"),Fxr=o("FlaxVisionTextDualEncoderModel"),Txr=o(" (VisionTextDualEncoder model)"),Mxr=l(),Z3=a("li"),dEe=a("strong"),Exr=o("vit"),Cxr=o(" \u2014 "),fY=a("a"),wxr=o("FlaxViTModel"),Axr=o(" (ViT model)"),yxr=l(),ew=a("li"),cEe=a("strong"),Lxr=o("wav2vec2"),xxr=o(" \u2014 "),gY=a("a"),$xr=o("FlaxWav2Vec2Model"),kxr=o(" (Wav2Vec2 model)"),Sxr=l(),ow=a("li"),mEe=a("strong"),Rxr=o("xglm"),Pxr=o(" \u2014 "),hY=a("a"),Bxr=o("FlaxXGLMModel"),Ixr=o(" (XGLM model)"),Nxr=l(),rw=a("li"),fEe=a("strong"),qxr=o("xlm-roberta"),jxr=o(" \u2014 "),uY=a("a"),Dxr=o("FlaxXLMRobertaModel"),Gxr=o(" (XLM-RoBERTa model)"),Oxr=l(),F(tw.$$.fragment),Uje=l(),Sc=a("h2"),aw=a("a"),gEe=a("span"),F(P9.$$.fragment),Vxr=l(),hEe=a("span"),Xxr=o("FlaxAutoModelForCausalLM"),Jje=l(),fr=a("div"),F(B9.$$.fragment),zxr=l(),Rc=a("p"),Wxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pY=a("a"),Qxr=o("from_pretrained()"),Hxr=o(" class method or the "),_Y=a("a"),Uxr=o("from_config()"),Jxr=o(` class
method.`),Yxr=l(),I9=a("p"),Kxr=o("This class cannot be instantiated directly using "),uEe=a("code"),Zxr=o("__init__()"),e$r=o(" (throws an error)."),o$r=l(),Ot=a("div"),F(N9.$$.fragment),r$r=l(),pEe=a("p"),t$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),a$r=l(),Pc=a("p"),n$r=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),s$r=o("not"),l$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),i$r=o("from_pretrained()"),d$r=o(" to load the model weights."),c$r=l(),F(nw.$$.fragment),m$r=l(),Dr=a("div"),F(q9.$$.fragment),f$r=l(),bEe=a("p"),g$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h$r=l(),un=a("p"),u$r=o("The model class to instantiate is selected based on the "),vEe=a("code"),p$r=o("model_type"),_$r=o(` property of the config object (either
passed as an argument or loaded from `),FEe=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=a("code"),F$r=o("pretrained_model_name_or_path"),T$r=o(":"),M$r=l(),Le=a("ul"),sw=a("li"),MEe=a("strong"),E$r=o("bart"),C$r=o(" \u2014 "),vY=a("a"),w$r=o("FlaxBartForCausalLM"),A$r=o(" (BART model)"),y$r=l(),lw=a("li"),EEe=a("strong"),L$r=o("bert"),x$r=o(" \u2014 "),FY=a("a"),$$r=o("FlaxBertForCausalLM"),k$r=o(" (BERT model)"),S$r=l(),iw=a("li"),CEe=a("strong"),R$r=o("big_bird"),P$r=o(" \u2014 "),TY=a("a"),B$r=o("FlaxBigBirdForCausalLM"),I$r=o(" (BigBird model)"),N$r=l(),dw=a("li"),wEe=a("strong"),q$r=o("electra"),j$r=o(" \u2014 "),MY=a("a"),D$r=o("FlaxElectraForCausalLM"),G$r=o(" (ELECTRA model)"),O$r=l(),cw=a("li"),AEe=a("strong"),V$r=o("gpt2"),X$r=o(" \u2014 "),EY=a("a"),z$r=o("FlaxGPT2LMHeadModel"),W$r=o(" (OpenAI GPT-2 model)"),Q$r=l(),mw=a("li"),yEe=a("strong"),H$r=o("gpt_neo"),U$r=o(" \u2014 "),CY=a("a"),J$r=o("FlaxGPTNeoForCausalLM"),Y$r=o(" (GPT Neo model)"),K$r=l(),fw=a("li"),LEe=a("strong"),Z$r=o("gptj"),ekr=o(" \u2014 "),wY=a("a"),okr=o("FlaxGPTJForCausalLM"),rkr=o(" (GPT-J model)"),tkr=l(),gw=a("li"),xEe=a("strong"),akr=o("opt"),nkr=o(" \u2014 "),AY=a("a"),skr=o("FlaxOPTForCausalLM"),lkr=o(" (OPT model)"),ikr=l(),hw=a("li"),$Ee=a("strong"),dkr=o("roberta"),ckr=o(" \u2014 "),yY=a("a"),mkr=o("FlaxRobertaForCausalLM"),fkr=o(" (RoBERTa model)"),gkr=l(),uw=a("li"),kEe=a("strong"),hkr=o("xglm"),ukr=o(" \u2014 "),LY=a("a"),pkr=o("FlaxXGLMForCausalLM"),_kr=o(" (XGLM model)"),bkr=l(),F(pw.$$.fragment),Yje=l(),Bc=a("h2"),_w=a("a"),SEe=a("span"),F(j9.$$.fragment),vkr=l(),REe=a("span"),Fkr=o("FlaxAutoModelForPreTraining"),Kje=l(),gr=a("div"),F(D9.$$.fragment),Tkr=l(),Ic=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xY=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),$Y=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),ykr=l(),G9=a("p"),Lkr=o("This class cannot be instantiated directly using "),PEe=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Vt=a("div"),F(O9.$$.fragment),Skr=l(),BEe=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pkr=l(),Nc=a("p"),Bkr=o(`Note:
Loading a model from its configuration file does `),IEe=a("strong"),Ikr=o("not"),Nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),qkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F(bw.$$.fragment),Gkr=l(),Gr=a("div"),F(V9.$$.fragment),Okr=l(),NEe=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xkr=l(),pn=a("p"),zkr=o("The model class to instantiate is selected based on the "),qEe=a("code"),Wkr=o("model_type"),Qkr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),Ee=a("ul"),vw=a("li"),GEe=a("strong"),Zkr=o("albert"),eSr=o(" \u2014 "),SY=a("a"),oSr=o("FlaxAlbertForPreTraining"),rSr=o(" (ALBERT model)"),tSr=l(),Fw=a("li"),OEe=a("strong"),aSr=o("bart"),nSr=o(" \u2014 "),RY=a("a"),sSr=o("FlaxBartForConditionalGeneration"),lSr=o(" (BART model)"),iSr=l(),Tw=a("li"),VEe=a("strong"),dSr=o("bert"),cSr=o(" \u2014 "),PY=a("a"),mSr=o("FlaxBertForPreTraining"),fSr=o(" (BERT model)"),gSr=l(),Mw=a("li"),XEe=a("strong"),hSr=o("big_bird"),uSr=o(" \u2014 "),BY=a("a"),pSr=o("FlaxBigBirdForPreTraining"),_Sr=o(" (BigBird model)"),bSr=l(),Ew=a("li"),zEe=a("strong"),vSr=o("electra"),FSr=o(" \u2014 "),IY=a("a"),TSr=o("FlaxElectraForPreTraining"),MSr=o(" (ELECTRA model)"),ESr=l(),Cw=a("li"),WEe=a("strong"),CSr=o("mbart"),wSr=o(" \u2014 "),NY=a("a"),ASr=o("FlaxMBartForConditionalGeneration"),ySr=o(" (mBART model)"),LSr=l(),ww=a("li"),QEe=a("strong"),xSr=o("mt5"),$Sr=o(" \u2014 "),qY=a("a"),kSr=o("FlaxMT5ForConditionalGeneration"),SSr=o(" (mT5 model)"),RSr=l(),Aw=a("li"),HEe=a("strong"),PSr=o("roberta"),BSr=o(" \u2014 "),jY=a("a"),ISr=o("FlaxRobertaForMaskedLM"),NSr=o(" (RoBERTa model)"),qSr=l(),yw=a("li"),UEe=a("strong"),jSr=o("roformer"),DSr=o(" \u2014 "),DY=a("a"),GSr=o("FlaxRoFormerForMaskedLM"),OSr=o(" (RoFormer model)"),VSr=l(),Lw=a("li"),JEe=a("strong"),XSr=o("t5"),zSr=o(" \u2014 "),GY=a("a"),WSr=o("FlaxT5ForConditionalGeneration"),QSr=o(" (T5 model)"),HSr=l(),xw=a("li"),YEe=a("strong"),USr=o("wav2vec2"),JSr=o(" \u2014 "),OY=a("a"),YSr=o("FlaxWav2Vec2ForPreTraining"),KSr=o(" (Wav2Vec2 model)"),ZSr=l(),$w=a("li"),KEe=a("strong"),eRr=o("xlm-roberta"),oRr=o(" \u2014 "),VY=a("a"),rRr=o("FlaxXLMRobertaForMaskedLM"),tRr=o(" (XLM-RoBERTa model)"),aRr=l(),F(kw.$$.fragment),Zje=l(),qc=a("h2"),Sw=a("a"),ZEe=a("span"),F(X9.$$.fragment),nRr=l(),eCe=a("span"),sRr=o("FlaxAutoModelForMaskedLM"),eDe=l(),hr=a("div"),F(z9.$$.fragment),lRr=l(),jc=a("p"),iRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=a("a"),dRr=o("from_pretrained()"),cRr=o(" class method or the "),zY=a("a"),mRr=o("from_config()"),fRr=o(` class
method.`),gRr=l(),W9=a("p"),hRr=o("This class cannot be instantiated directly using "),oCe=a("code"),uRr=o("__init__()"),pRr=o(" (throws an error)."),_Rr=l(),Xt=a("div"),F(Q9.$$.fragment),bRr=l(),rCe=a("p"),vRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FRr=l(),Dc=a("p"),TRr=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),MRr=o("not"),ERr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=a("a"),CRr=o("from_pretrained()"),wRr=o(" to load the model weights."),ARr=l(),F(Rw.$$.fragment),yRr=l(),Or=a("div"),F(H9.$$.fragment),LRr=l(),aCe=a("p"),xRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$Rr=l(),_n=a("p"),kRr=o("The model class to instantiate is selected based on the "),nCe=a("code"),SRr=o("model_type"),RRr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),PRr=o("pretrained_model_name_or_path"),BRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),IRr=o("pretrained_model_name_or_path"),NRr=o(":"),qRr=l(),xe=a("ul"),Pw=a("li"),iCe=a("strong"),jRr=o("albert"),DRr=o(" \u2014 "),QY=a("a"),GRr=o("FlaxAlbertForMaskedLM"),ORr=o(" (ALBERT model)"),VRr=l(),Bw=a("li"),dCe=a("strong"),XRr=o("bart"),zRr=o(" \u2014 "),HY=a("a"),WRr=o("FlaxBartForConditionalGeneration"),QRr=o(" (BART model)"),HRr=l(),Iw=a("li"),cCe=a("strong"),URr=o("bert"),JRr=o(" \u2014 "),UY=a("a"),YRr=o("FlaxBertForMaskedLM"),KRr=o(" (BERT model)"),ZRr=l(),Nw=a("li"),mCe=a("strong"),ePr=o("big_bird"),oPr=o(" \u2014 "),JY=a("a"),rPr=o("FlaxBigBirdForMaskedLM"),tPr=o(" (BigBird model)"),aPr=l(),qw=a("li"),fCe=a("strong"),nPr=o("distilbert"),sPr=o(" \u2014 "),YY=a("a"),lPr=o("FlaxDistilBertForMaskedLM"),iPr=o(" (DistilBERT model)"),dPr=l(),jw=a("li"),gCe=a("strong"),cPr=o("electra"),mPr=o(" \u2014 "),KY=a("a"),fPr=o("FlaxElectraForMaskedLM"),gPr=o(" (ELECTRA model)"),hPr=l(),Dw=a("li"),hCe=a("strong"),uPr=o("mbart"),pPr=o(" \u2014 "),ZY=a("a"),_Pr=o("FlaxMBartForConditionalGeneration"),bPr=o(" (mBART model)"),vPr=l(),Gw=a("li"),uCe=a("strong"),FPr=o("roberta"),TPr=o(" \u2014 "),eK=a("a"),MPr=o("FlaxRobertaForMaskedLM"),EPr=o(" (RoBERTa model)"),CPr=l(),Ow=a("li"),pCe=a("strong"),wPr=o("roformer"),APr=o(" \u2014 "),oK=a("a"),yPr=o("FlaxRoFormerForMaskedLM"),LPr=o(" (RoFormer model)"),xPr=l(),Vw=a("li"),_Ce=a("strong"),$Pr=o("xlm-roberta"),kPr=o(" \u2014 "),rK=a("a"),SPr=o("FlaxXLMRobertaForMaskedLM"),RPr=o(" (XLM-RoBERTa model)"),PPr=l(),F(Xw.$$.fragment),oDe=l(),Gc=a("h2"),zw=a("a"),bCe=a("span"),F(U9.$$.fragment),BPr=l(),vCe=a("span"),IPr=o("FlaxAutoModelForSeq2SeqLM"),rDe=l(),ur=a("div"),F(J9.$$.fragment),NPr=l(),Oc=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tK=a("a"),jPr=o("from_pretrained()"),DPr=o(" class method or the "),aK=a("a"),GPr=o("from_config()"),OPr=o(` class
method.`),VPr=l(),Y9=a("p"),XPr=o("This class cannot be instantiated directly using "),FCe=a("code"),zPr=o("__init__()"),WPr=o(" (throws an error)."),QPr=l(),zt=a("div"),F(K9.$$.fragment),HPr=l(),TCe=a("p"),UPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JPr=l(),Vc=a("p"),YPr=o(`Note:
Loading a model from its configuration file does `),MCe=a("strong"),KPr=o("not"),ZPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),eBr=o("from_pretrained()"),oBr=o(" to load the model weights."),rBr=l(),F(Ww.$$.fragment),tBr=l(),Vr=a("div"),F(Z9.$$.fragment),aBr=l(),ECe=a("p"),nBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sBr=l(),bn=a("p"),lBr=o("The model class to instantiate is selected based on the "),CCe=a("code"),iBr=o("model_type"),dBr=o(` property of the config object (either
passed as an argument or loaded from `),wCe=a("code"),cBr=o("pretrained_model_name_or_path"),mBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=a("code"),fBr=o("pretrained_model_name_or_path"),gBr=o(":"),hBr=l(),Pe=a("ul"),Qw=a("li"),yCe=a("strong"),uBr=o("bart"),pBr=o(" \u2014 "),sK=a("a"),_Br=o("FlaxBartForConditionalGeneration"),bBr=o(" (BART model)"),vBr=l(),Hw=a("li"),LCe=a("strong"),FBr=o("blenderbot"),TBr=o(" \u2014 "),lK=a("a"),MBr=o("FlaxBlenderbotForConditionalGeneration"),EBr=o(" (Blenderbot model)"),CBr=l(),Uw=a("li"),xCe=a("strong"),wBr=o("blenderbot-small"),ABr=o(" \u2014 "),iK=a("a"),yBr=o("FlaxBlenderbotSmallForConditionalGeneration"),LBr=o(" (BlenderbotSmall model)"),xBr=l(),Jw=a("li"),$Ce=a("strong"),$Br=o("encoder-decoder"),kBr=o(" \u2014 "),dK=a("a"),SBr=o("FlaxEncoderDecoderModel"),RBr=o(" (Encoder decoder model)"),PBr=l(),Yw=a("li"),kCe=a("strong"),BBr=o("marian"),IBr=o(" \u2014 "),cK=a("a"),NBr=o("FlaxMarianMTModel"),qBr=o(" (Marian model)"),jBr=l(),Kw=a("li"),SCe=a("strong"),DBr=o("mbart"),GBr=o(" \u2014 "),mK=a("a"),OBr=o("FlaxMBartForConditionalGeneration"),VBr=o(" (mBART model)"),XBr=l(),Zw=a("li"),RCe=a("strong"),zBr=o("mt5"),WBr=o(" \u2014 "),fK=a("a"),QBr=o("FlaxMT5ForConditionalGeneration"),HBr=o(" (mT5 model)"),UBr=l(),e0=a("li"),PCe=a("strong"),JBr=o("pegasus"),YBr=o(" \u2014 "),gK=a("a"),KBr=o("FlaxPegasusForConditionalGeneration"),ZBr=o(" (Pegasus model)"),eIr=l(),o0=a("li"),BCe=a("strong"),oIr=o("t5"),rIr=o(" \u2014 "),hK=a("a"),tIr=o("FlaxT5ForConditionalGeneration"),aIr=o(" (T5 model)"),nIr=l(),F(r0.$$.fragment),tDe=l(),Xc=a("h2"),t0=a("a"),ICe=a("span"),F(ex.$$.fragment),sIr=l(),NCe=a("span"),lIr=o("FlaxAutoModelForSequenceClassification"),aDe=l(),pr=a("div"),F(ox.$$.fragment),iIr=l(),zc=a("p"),dIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=a("a"),cIr=o("from_pretrained()"),mIr=o(" class method or the "),pK=a("a"),fIr=o("from_config()"),gIr=o(` class
method.`),hIr=l(),rx=a("p"),uIr=o("This class cannot be instantiated directly using "),qCe=a("code"),pIr=o("__init__()"),_Ir=o(" (throws an error)."),bIr=l(),Wt=a("div"),F(tx.$$.fragment),vIr=l(),jCe=a("p"),FIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TIr=l(),Wc=a("p"),MIr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),EIr=o("not"),CIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),wIr=o("from_pretrained()"),AIr=o(" to load the model weights."),yIr=l(),F(a0.$$.fragment),LIr=l(),Xr=a("div"),F(ax.$$.fragment),xIr=l(),GCe=a("p"),$Ir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),kIr=l(),vn=a("p"),SIr=o("The model class to instantiate is selected based on the "),OCe=a("code"),RIr=o("model_type"),PIr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),BIr=o("pretrained_model_name_or_path"),IIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),NIr=o("pretrained_model_name_or_path"),qIr=o(":"),jIr=l(),$e=a("ul"),n0=a("li"),zCe=a("strong"),DIr=o("albert"),GIr=o(" \u2014 "),bK=a("a"),OIr=o("FlaxAlbertForSequenceClassification"),VIr=o(" (ALBERT model)"),XIr=l(),s0=a("li"),WCe=a("strong"),zIr=o("bart"),WIr=o(" \u2014 "),vK=a("a"),QIr=o("FlaxBartForSequenceClassification"),HIr=o(" (BART model)"),UIr=l(),l0=a("li"),QCe=a("strong"),JIr=o("bert"),YIr=o(" \u2014 "),FK=a("a"),KIr=o("FlaxBertForSequenceClassification"),ZIr=o(" (BERT model)"),eNr=l(),i0=a("li"),HCe=a("strong"),oNr=o("big_bird"),rNr=o(" \u2014 "),TK=a("a"),tNr=o("FlaxBigBirdForSequenceClassification"),aNr=o(" (BigBird model)"),nNr=l(),d0=a("li"),UCe=a("strong"),sNr=o("distilbert"),lNr=o(" \u2014 "),MK=a("a"),iNr=o("FlaxDistilBertForSequenceClassification"),dNr=o(" (DistilBERT model)"),cNr=l(),c0=a("li"),JCe=a("strong"),mNr=o("electra"),fNr=o(" \u2014 "),EK=a("a"),gNr=o("FlaxElectraForSequenceClassification"),hNr=o(" (ELECTRA model)"),uNr=l(),m0=a("li"),YCe=a("strong"),pNr=o("mbart"),_Nr=o(" \u2014 "),CK=a("a"),bNr=o("FlaxMBartForSequenceClassification"),vNr=o(" (mBART model)"),FNr=l(),f0=a("li"),KCe=a("strong"),TNr=o("roberta"),MNr=o(" \u2014 "),wK=a("a"),ENr=o("FlaxRobertaForSequenceClassification"),CNr=o(" (RoBERTa model)"),wNr=l(),g0=a("li"),ZCe=a("strong"),ANr=o("roformer"),yNr=o(" \u2014 "),AK=a("a"),LNr=o("FlaxRoFormerForSequenceClassification"),xNr=o(" (RoFormer model)"),$Nr=l(),h0=a("li"),e5e=a("strong"),kNr=o("xlm-roberta"),SNr=o(" \u2014 "),yK=a("a"),RNr=o("FlaxXLMRobertaForSequenceClassification"),PNr=o(" (XLM-RoBERTa model)"),BNr=l(),F(u0.$$.fragment),nDe=l(),Qc=a("h2"),p0=a("a"),o5e=a("span"),F(nx.$$.fragment),INr=l(),r5e=a("span"),NNr=o("FlaxAutoModelForQuestionAnswering"),sDe=l(),_r=a("div"),F(sx.$$.fragment),qNr=l(),Hc=a("p"),jNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LK=a("a"),DNr=o("from_pretrained()"),GNr=o(" class method or the "),xK=a("a"),ONr=o("from_config()"),VNr=o(` class
method.`),XNr=l(),lx=a("p"),zNr=o("This class cannot be instantiated directly using "),t5e=a("code"),WNr=o("__init__()"),QNr=o(" (throws an error)."),HNr=l(),Qt=a("div"),F(ix.$$.fragment),UNr=l(),a5e=a("p"),JNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YNr=l(),Uc=a("p"),KNr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),ZNr=o("not"),eqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),oqr=o("from_pretrained()"),rqr=o(" to load the model weights."),tqr=l(),F(_0.$$.fragment),aqr=l(),zr=a("div"),F(dx.$$.fragment),nqr=l(),s5e=a("p"),sqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),lqr=l(),Fn=a("p"),iqr=o("The model class to instantiate is selected based on the "),l5e=a("code"),dqr=o("model_type"),cqr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),mqr=o("pretrained_model_name_or_path"),fqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(":"),uqr=l(),ke=a("ul"),b0=a("li"),c5e=a("strong"),pqr=o("albert"),_qr=o(" \u2014 "),kK=a("a"),bqr=o("FlaxAlbertForQuestionAnswering"),vqr=o(" (ALBERT model)"),Fqr=l(),v0=a("li"),m5e=a("strong"),Tqr=o("bart"),Mqr=o(" \u2014 "),SK=a("a"),Eqr=o("FlaxBartForQuestionAnswering"),Cqr=o(" (BART model)"),wqr=l(),F0=a("li"),f5e=a("strong"),Aqr=o("bert"),yqr=o(" \u2014 "),RK=a("a"),Lqr=o("FlaxBertForQuestionAnswering"),xqr=o(" (BERT model)"),$qr=l(),T0=a("li"),g5e=a("strong"),kqr=o("big_bird"),Sqr=o(" \u2014 "),PK=a("a"),Rqr=o("FlaxBigBirdForQuestionAnswering"),Pqr=o(" (BigBird model)"),Bqr=l(),M0=a("li"),h5e=a("strong"),Iqr=o("distilbert"),Nqr=o(" \u2014 "),BK=a("a"),qqr=o("FlaxDistilBertForQuestionAnswering"),jqr=o(" (DistilBERT model)"),Dqr=l(),E0=a("li"),u5e=a("strong"),Gqr=o("electra"),Oqr=o(" \u2014 "),IK=a("a"),Vqr=o("FlaxElectraForQuestionAnswering"),Xqr=o(" (ELECTRA model)"),zqr=l(),C0=a("li"),p5e=a("strong"),Wqr=o("mbart"),Qqr=o(" \u2014 "),NK=a("a"),Hqr=o("FlaxMBartForQuestionAnswering"),Uqr=o(" (mBART model)"),Jqr=l(),w0=a("li"),_5e=a("strong"),Yqr=o("roberta"),Kqr=o(" \u2014 "),qK=a("a"),Zqr=o("FlaxRobertaForQuestionAnswering"),ejr=o(" (RoBERTa model)"),ojr=l(),A0=a("li"),b5e=a("strong"),rjr=o("roformer"),tjr=o(" \u2014 "),jK=a("a"),ajr=o("FlaxRoFormerForQuestionAnswering"),njr=o(" (RoFormer model)"),sjr=l(),y0=a("li"),v5e=a("strong"),ljr=o("xlm-roberta"),ijr=o(" \u2014 "),DK=a("a"),djr=o("FlaxXLMRobertaForQuestionAnswering"),cjr=o(" (XLM-RoBERTa model)"),mjr=l(),F(L0.$$.fragment),lDe=l(),Jc=a("h2"),x0=a("a"),F5e=a("span"),F(cx.$$.fragment),fjr=l(),T5e=a("span"),gjr=o("FlaxAutoModelForTokenClassification"),iDe=l(),br=a("div"),F(mx.$$.fragment),hjr=l(),Yc=a("p"),ujr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GK=a("a"),pjr=o("from_pretrained()"),_jr=o(" class method or the "),OK=a("a"),bjr=o("from_config()"),vjr=o(` class
method.`),Fjr=l(),fx=a("p"),Tjr=o("This class cannot be instantiated directly using "),M5e=a("code"),Mjr=o("__init__()"),Ejr=o(" (throws an error)."),Cjr=l(),Ht=a("div"),F(gx.$$.fragment),wjr=l(),E5e=a("p"),Ajr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yjr=l(),Kc=a("p"),Ljr=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),xjr=o("not"),$jr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),kjr=o("from_pretrained()"),Sjr=o(" to load the model weights."),Rjr=l(),F($0.$$.fragment),Pjr=l(),Wr=a("div"),F(hx.$$.fragment),Bjr=l(),w5e=a("p"),Ijr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Njr=l(),Tn=a("p"),qjr=o("The model class to instantiate is selected based on the "),A5e=a("code"),jjr=o("model_type"),Djr=o(` property of the config object (either
passed as an argument or loaded from `),y5e=a("code"),Gjr=o("pretrained_model_name_or_path"),Ojr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),Vjr=o("pretrained_model_name_or_path"),Xjr=o(":"),zjr=l(),Ge=a("ul"),k0=a("li"),x5e=a("strong"),Wjr=o("albert"),Qjr=o(" \u2014 "),XK=a("a"),Hjr=o("FlaxAlbertForTokenClassification"),Ujr=o(" (ALBERT model)"),Jjr=l(),S0=a("li"),$5e=a("strong"),Yjr=o("bert"),Kjr=o(" \u2014 "),zK=a("a"),Zjr=o("FlaxBertForTokenClassification"),eDr=o(" (BERT model)"),oDr=l(),R0=a("li"),k5e=a("strong"),rDr=o("big_bird"),tDr=o(" \u2014 "),WK=a("a"),aDr=o("FlaxBigBirdForTokenClassification"),nDr=o(" (BigBird model)"),sDr=l(),P0=a("li"),S5e=a("strong"),lDr=o("distilbert"),iDr=o(" \u2014 "),QK=a("a"),dDr=o("FlaxDistilBertForTokenClassification"),cDr=o(" (DistilBERT model)"),mDr=l(),B0=a("li"),R5e=a("strong"),fDr=o("electra"),gDr=o(" \u2014 "),HK=a("a"),hDr=o("FlaxElectraForTokenClassification"),uDr=o(" (ELECTRA model)"),pDr=l(),I0=a("li"),P5e=a("strong"),_Dr=o("roberta"),bDr=o(" \u2014 "),UK=a("a"),vDr=o("FlaxRobertaForTokenClassification"),FDr=o(" (RoBERTa model)"),TDr=l(),N0=a("li"),B5e=a("strong"),MDr=o("roformer"),EDr=o(" \u2014 "),JK=a("a"),CDr=o("FlaxRoFormerForTokenClassification"),wDr=o(" (RoFormer model)"),ADr=l(),q0=a("li"),I5e=a("strong"),yDr=o("xlm-roberta"),LDr=o(" \u2014 "),YK=a("a"),xDr=o("FlaxXLMRobertaForTokenClassification"),$Dr=o(" (XLM-RoBERTa model)"),kDr=l(),F(j0.$$.fragment),dDe=l(),Zc=a("h2"),D0=a("a"),N5e=a("span"),F(ux.$$.fragment),SDr=l(),q5e=a("span"),RDr=o("FlaxAutoModelForMultipleChoice"),cDe=l(),vr=a("div"),F(px.$$.fragment),PDr=l(),em=a("p"),BDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KK=a("a"),IDr=o("from_pretrained()"),NDr=o(" class method or the "),ZK=a("a"),qDr=o("from_config()"),jDr=o(` class
method.`),DDr=l(),_x=a("p"),GDr=o("This class cannot be instantiated directly using "),j5e=a("code"),ODr=o("__init__()"),VDr=o(" (throws an error)."),XDr=l(),Ut=a("div"),F(bx.$$.fragment),zDr=l(),D5e=a("p"),WDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QDr=l(),om=a("p"),HDr=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),UDr=o("not"),JDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),YDr=o("from_pretrained()"),KDr=o(" to load the model weights."),ZDr=l(),F(G0.$$.fragment),eGr=l(),Qr=a("div"),F(vx.$$.fragment),oGr=l(),O5e=a("p"),rGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tGr=l(),Mn=a("p"),aGr=o("The model class to instantiate is selected based on the "),V5e=a("code"),nGr=o("model_type"),sGr=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),lGr=o("pretrained_model_name_or_path"),iGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(":"),mGr=l(),Oe=a("ul"),O0=a("li"),W5e=a("strong"),fGr=o("albert"),gGr=o(" \u2014 "),oZ=a("a"),hGr=o("FlaxAlbertForMultipleChoice"),uGr=o(" (ALBERT model)"),pGr=l(),V0=a("li"),Q5e=a("strong"),_Gr=o("bert"),bGr=o(" \u2014 "),rZ=a("a"),vGr=o("FlaxBertForMultipleChoice"),FGr=o(" (BERT model)"),TGr=l(),X0=a("li"),H5e=a("strong"),MGr=o("big_bird"),EGr=o(" \u2014 "),tZ=a("a"),CGr=o("FlaxBigBirdForMultipleChoice"),wGr=o(" (BigBird model)"),AGr=l(),z0=a("li"),U5e=a("strong"),yGr=o("distilbert"),LGr=o(" \u2014 "),aZ=a("a"),xGr=o("FlaxDistilBertForMultipleChoice"),$Gr=o(" (DistilBERT model)"),kGr=l(),W0=a("li"),J5e=a("strong"),SGr=o("electra"),RGr=o(" \u2014 "),nZ=a("a"),PGr=o("FlaxElectraForMultipleChoice"),BGr=o(" (ELECTRA model)"),IGr=l(),Q0=a("li"),Y5e=a("strong"),NGr=o("roberta"),qGr=o(" \u2014 "),sZ=a("a"),jGr=o("FlaxRobertaForMultipleChoice"),DGr=o(" (RoBERTa model)"),GGr=l(),H0=a("li"),K5e=a("strong"),OGr=o("roformer"),VGr=o(" \u2014 "),lZ=a("a"),XGr=o("FlaxRoFormerForMultipleChoice"),zGr=o(" (RoFormer model)"),WGr=l(),U0=a("li"),Z5e=a("strong"),QGr=o("xlm-roberta"),HGr=o(" \u2014 "),iZ=a("a"),UGr=o("FlaxXLMRobertaForMultipleChoice"),JGr=o(" (XLM-RoBERTa model)"),YGr=l(),F(J0.$$.fragment),mDe=l(),rm=a("h2"),Y0=a("a"),e3e=a("span"),F(Fx.$$.fragment),KGr=l(),o3e=a("span"),ZGr=o("FlaxAutoModelForNextSentencePrediction"),fDe=l(),Fr=a("div"),F(Tx.$$.fragment),eOr=l(),tm=a("p"),oOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dZ=a("a"),rOr=o("from_pretrained()"),tOr=o(" class method or the "),cZ=a("a"),aOr=o("from_config()"),nOr=o(` class
method.`),sOr=l(),Mx=a("p"),lOr=o("This class cannot be instantiated directly using "),r3e=a("code"),iOr=o("__init__()"),dOr=o(" (throws an error)."),cOr=l(),Jt=a("div"),F(Ex.$$.fragment),mOr=l(),t3e=a("p"),fOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gOr=l(),am=a("p"),hOr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),uOr=o("not"),pOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),_Or=o("from_pretrained()"),bOr=o(" to load the model weights."),vOr=l(),F(K0.$$.fragment),FOr=l(),Hr=a("div"),F(Cx.$$.fragment),TOr=l(),n3e=a("p"),MOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),EOr=l(),En=a("p"),COr=o("The model class to instantiate is selected based on the "),s3e=a("code"),wOr=o("model_type"),AOr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),yOr=o("pretrained_model_name_or_path"),LOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),xOr=o("pretrained_model_name_or_path"),$Or=o(":"),kOr=l(),d3e=a("ul"),Z0=a("li"),c3e=a("strong"),SOr=o("bert"),ROr=o(" \u2014 "),fZ=a("a"),POr=o("FlaxBertForNextSentencePrediction"),BOr=o(" (BERT model)"),IOr=l(),F(e6.$$.fragment),gDe=l(),nm=a("h2"),o6=a("a"),m3e=a("span"),F(wx.$$.fragment),NOr=l(),f3e=a("span"),qOr=o("FlaxAutoModelForImageClassification"),hDe=l(),Tr=a("div"),F(Ax.$$.fragment),jOr=l(),sm=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gZ=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),hZ=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),yx=a("p"),WOr=o("This class cannot be instantiated directly using "),g3e=a("code"),QOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Yt=a("div"),F(Lx.$$.fragment),JOr=l(),h3e=a("p"),YOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KOr=l(),lm=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),u3e=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(r6.$$.fragment),nVr=l(),Ur=a("div"),F(xx.$$.fragment),sVr=l(),p3e=a("p"),lVr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iVr=l(),Cn=a("p"),dVr=o("The model class to instantiate is selected based on the "),_3e=a("code"),cVr=o("model_type"),mVr=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),fVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),hVr=o("pretrained_model_name_or_path"),uVr=o(":"),pVr=l(),$x=a("ul"),t6=a("li"),F3e=a("strong"),_Vr=o("beit"),bVr=o(" \u2014 "),pZ=a("a"),vVr=o("FlaxBeitForImageClassification"),FVr=o(" (BEiT model)"),TVr=l(),a6=a("li"),T3e=a("strong"),MVr=o("vit"),EVr=o(" \u2014 "),_Z=a("a"),CVr=o("FlaxViTForImageClassification"),wVr=o(" (ViT model)"),AVr=l(),F(n6.$$.fragment),uDe=l(),im=a("h2"),s6=a("a"),M3e=a("span"),F(kx.$$.fragment),yVr=l(),E3e=a("span"),LVr=o("FlaxAutoModelForVision2Seq"),pDe=l(),Mr=a("div"),F(Sx.$$.fragment),xVr=l(),dm=a("p"),$Vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=a("a"),kVr=o("from_pretrained()"),SVr=o(" class method or the "),vZ=a("a"),RVr=o("from_config()"),PVr=o(` class
method.`),BVr=l(),Rx=a("p"),IVr=o("This class cannot be instantiated directly using "),C3e=a("code"),NVr=o("__init__()"),qVr=o(" (throws an error)."),jVr=l(),Kt=a("div"),F(Px.$$.fragment),DVr=l(),w3e=a("p"),GVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OVr=l(),cm=a("p"),VVr=o(`Note:
Loading a model from its configuration file does `),A3e=a("strong"),XVr=o("not"),zVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=a("a"),WVr=o("from_pretrained()"),QVr=o(" to load the model weights."),HVr=l(),F(l6.$$.fragment),UVr=l(),Jr=a("div"),F(Bx.$$.fragment),JVr=l(),y3e=a("p"),YVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KVr=l(),wn=a("p"),ZVr=o("The model class to instantiate is selected based on the "),L3e=a("code"),eXr=o("model_type"),oXr=o(` property of the config object (either
passed as an argument or loaded from `),x3e=a("code"),rXr=o("pretrained_model_name_or_path"),tXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),aXr=o("pretrained_model_name_or_path"),nXr=o(":"),sXr=l(),k3e=a("ul"),i6=a("li"),S3e=a("strong"),lXr=o("vision-encoder-decoder"),iXr=o(" \u2014 "),TZ=a("a"),dXr=o("FlaxVisionEncoderDecoderModel"),cXr=o(" (Vision Encoder decoder model)"),mXr=l(),F(d6.$$.fragment),this.h()},l(m){const _=Z$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Ix=s(u);f=n(Ix,"A",{id:!0,class:!0,href:!0});var R3e=s(f);p=n(R3e,"SPAN",{});var P3e=s(p);T(d.$$.fragment,P3e),P3e.forEach(t),R3e.forEach(t),h=i(Ix),Mo=n(Ix,"SPAN",{});var B3e=s(Mo);mi=r(B3e,"Auto Classes"),B3e.forEach(t),Ix.forEach(t),hm=i(m),rt=n(m,"P",{});var Nx=s(rt);fi=r(Nx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Nx,"CODE",{});var I3e=s(gi);yy=r(I3e,"from_pretrained()"),I3e.forEach(t),um=r(Nx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Nx.forEach(t),De=i(m),We=n(m,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var N3e=s(yn);Ly=r(N3e,"AutoConfig"),N3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var q3e=s(xn);xy=r(q3e,"AutoModel"),q3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var j3e=s($n);$y=r(j3e,"AutoTokenizer"),j3e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),pm=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var qx=s(Ae);U$=r(qx,"will create a model that is an instance of "),_i=n(qx,"A",{href:!0});var D3e=s(_i);J$=r(D3e,"BertModel"),D3e.forEach(t),Y$=r(qx,"."),qx.forEach(t),Eo=i(m),wa=n(m,"P",{});var jx=s(wa);K$=r(jx,"There is one class of "),_m=n(jx,"CODE",{});var G3e=s(_m);Z$=r(G3e,"AutoModel"),G3e.forEach(t),wOe=r(jx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jx.forEach(t),hqe=i(m),bi=n(m,"H2",{class:!0});var Dx=s(bi);bm=n(Dx,"A",{id:!0,class:!0,href:!0});var O3e=s(bm);hoe=n(O3e,"SPAN",{});var V3e=s(hoe);T(ky.$$.fragment,V3e),V3e.forEach(t),O3e.forEach(t),AOe=i(Dx),uoe=n(Dx,"SPAN",{});var X3e=s(uoe);yOe=r(X3e,"Extending the Auto Classes"),X3e.forEach(t),Dx.forEach(t),uqe=i(m),kn=n(m,"P",{});var mm=s(kn);LOe=r(mm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),poe=n(mm,"CODE",{});var z3e=s(poe);xOe=r(z3e,"NewModel"),z3e.forEach(t),$Oe=r(mm,", make sure you have a "),_oe=n(mm,"CODE",{});var W3e=s(_oe);kOe=r(W3e,"NewModelConfig"),W3e.forEach(t),SOe=r(mm,` then you can add those to the auto
classes like this:`),mm.forEach(t),pqe=i(m),T(Sy.$$.fragment,m),_qe=i(m),ek=n(m,"P",{});var Q3e=s(ek);ROe=r(Q3e,"You will then be able to use the auto classes like you would usually do!"),Q3e.forEach(t),bqe=i(m),T(vm.$$.fragment,m),vqe=i(m),vi=n(m,"H2",{class:!0});var Gx=s(vi);Fm=n(Gx,"A",{id:!0,class:!0,href:!0});var H3e=s(Fm);boe=n(H3e,"SPAN",{});var U3e=s(boe);T(Ry.$$.fragment,U3e),U3e.forEach(t),H3e.forEach(t),POe=i(Gx),voe=n(Gx,"SPAN",{});var J3e=s(voe);BOe=r(J3e,"AutoConfig"),J3e.forEach(t),Gx.forEach(t),Fqe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(Py.$$.fragment,et),IOe=i(et),By=n(et,"P",{});var Ox=s(By);NOe=r(Ox,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),ok=n(Ox,"A",{href:!0});var Y3e=s(ok);qOe=r(Y3e,"from_pretrained()"),Y3e.forEach(t),jOe=r(Ox," class method."),Ox.forEach(t),DOe=i(et),Iy=n(et,"P",{});var Vx=s(Iy);GOe=r(Vx,"This class cannot be instantiated directly using "),Foe=n(Vx,"CODE",{});var K3e=s(Foe);OOe=r(K3e,"__init__()"),K3e.forEach(t),VOe=r(Vx," (throws an error)."),Vx.forEach(t),XOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Ny.$$.fragment,ot),zOe=i(ot),Toe=n(ot,"P",{});var Z3e=s(Toe);WOe=r(Z3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Z3e.forEach(t),QOe=i(ot),Fi=n(ot,"P",{});var fm=s(Fi);HOe=r(fm,"The configuration class to instantiate is selected based on the "),Moe=n(fm,"CODE",{});var ewe=s(Moe);UOe=r(ewe,"model_type"),ewe.forEach(t),JOe=r(fm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Eoe=n(fm,"CODE",{});var owe=s(Eoe);YOe=r(owe,"pretrained_model_name_or_path"),owe.forEach(t),KOe=r(fm,":"),fm.forEach(t),ZOe=i(ot),A=n(ot,"UL",{});var y=s(A);Tm=n(y,"LI",{});var c6=s(Tm);Coe=n(c6,"STRONG",{});var rwe=s(Coe);eVe=r(rwe,"albert"),rwe.forEach(t),oVe=r(c6," \u2014 "),rk=n(c6,"A",{href:!0});var twe=s(rk);rVe=r(twe,"AlbertConfig"),twe.forEach(t),tVe=r(c6," (ALBERT model)"),c6.forEach(t),aVe=i(y),Mm=n(y,"LI",{});var m6=s(Mm);woe=n(m6,"STRONG",{});var awe=s(woe);nVe=r(awe,"bart"),awe.forEach(t),sVe=r(m6," \u2014 "),tk=n(m6,"A",{href:!0});var nwe=s(tk);lVe=r(nwe,"BartConfig"),nwe.forEach(t),iVe=r(m6," (BART model)"),m6.forEach(t),dVe=i(y),Em=n(y,"LI",{});var f6=s(Em);Aoe=n(f6,"STRONG",{});var swe=s(Aoe);cVe=r(swe,"beit"),swe.forEach(t),mVe=r(f6," \u2014 "),ak=n(f6,"A",{href:!0});var lwe=s(ak);fVe=r(lwe,"BeitConfig"),lwe.forEach(t),gVe=r(f6," (BEiT model)"),f6.forEach(t),hVe=i(y),Cm=n(y,"LI",{});var g6=s(Cm);yoe=n(g6,"STRONG",{});var iwe=s(yoe);uVe=r(iwe,"bert"),iwe.forEach(t),pVe=r(g6," \u2014 "),nk=n(g6,"A",{href:!0});var dwe=s(nk);_Ve=r(dwe,"BertConfig"),dwe.forEach(t),bVe=r(g6," (BERT model)"),g6.forEach(t),vVe=i(y),wm=n(y,"LI",{});var h6=s(wm);Loe=n(h6,"STRONG",{});var cwe=s(Loe);FVe=r(cwe,"bert-generation"),cwe.forEach(t),TVe=r(h6," \u2014 "),sk=n(h6,"A",{href:!0});var mwe=s(sk);MVe=r(mwe,"BertGenerationConfig"),mwe.forEach(t),EVe=r(h6," (Bert Generation model)"),h6.forEach(t),CVe=i(y),Am=n(y,"LI",{});var u6=s(Am);xoe=n(u6,"STRONG",{});var fwe=s(xoe);wVe=r(fwe,"big_bird"),fwe.forEach(t),AVe=r(u6," \u2014 "),lk=n(u6,"A",{href:!0});var gwe=s(lk);yVe=r(gwe,"BigBirdConfig"),gwe.forEach(t),LVe=r(u6," (BigBird model)"),u6.forEach(t),xVe=i(y),ym=n(y,"LI",{});var p6=s(ym);$oe=n(p6,"STRONG",{});var hwe=s($oe);$Ve=r(hwe,"bigbird_pegasus"),hwe.forEach(t),kVe=r(p6," \u2014 "),ik=n(p6,"A",{href:!0});var uwe=s(ik);SVe=r(uwe,"BigBirdPegasusConfig"),uwe.forEach(t),RVe=r(p6," (BigBirdPegasus model)"),p6.forEach(t),PVe=i(y),Lm=n(y,"LI",{});var _6=s(Lm);koe=n(_6,"STRONG",{});var pwe=s(koe);BVe=r(pwe,"blenderbot"),pwe.forEach(t),IVe=r(_6," \u2014 "),dk=n(_6,"A",{href:!0});var _we=s(dk);NVe=r(_we,"BlenderbotConfig"),_we.forEach(t),qVe=r(_6," (Blenderbot model)"),_6.forEach(t),jVe=i(y),xm=n(y,"LI",{});var b6=s(xm);Soe=n(b6,"STRONG",{});var bwe=s(Soe);DVe=r(bwe,"blenderbot-small"),bwe.forEach(t),GVe=r(b6," \u2014 "),ck=n(b6,"A",{href:!0});var vwe=s(ck);OVe=r(vwe,"BlenderbotSmallConfig"),vwe.forEach(t),VVe=r(b6," (BlenderbotSmall model)"),b6.forEach(t),XVe=i(y),$m=n(y,"LI",{});var v6=s($m);Roe=n(v6,"STRONG",{});var Fwe=s(Roe);zVe=r(Fwe,"camembert"),Fwe.forEach(t),WVe=r(v6," \u2014 "),mk=n(v6,"A",{href:!0});var Twe=s(mk);QVe=r(Twe,"CamembertConfig"),Twe.forEach(t),HVe=r(v6," (CamemBERT model)"),v6.forEach(t),UVe=i(y),km=n(y,"LI",{});var F6=s(km);Poe=n(F6,"STRONG",{});var Mwe=s(Poe);JVe=r(Mwe,"canine"),Mwe.forEach(t),YVe=r(F6," \u2014 "),fk=n(F6,"A",{href:!0});var Ewe=s(fk);KVe=r(Ewe,"CanineConfig"),Ewe.forEach(t),ZVe=r(F6," (Canine model)"),F6.forEach(t),eXe=i(y),Sm=n(y,"LI",{});var T6=s(Sm);Boe=n(T6,"STRONG",{});var Cwe=s(Boe);oXe=r(Cwe,"clip"),Cwe.forEach(t),rXe=r(T6," \u2014 "),gk=n(T6,"A",{href:!0});var wwe=s(gk);tXe=r(wwe,"CLIPConfig"),wwe.forEach(t),aXe=r(T6," (CLIP model)"),T6.forEach(t),nXe=i(y),Rm=n(y,"LI",{});var M6=s(Rm);Ioe=n(M6,"STRONG",{});var Awe=s(Ioe);sXe=r(Awe,"convbert"),Awe.forEach(t),lXe=r(M6," \u2014 "),hk=n(M6,"A",{href:!0});var ywe=s(hk);iXe=r(ywe,"ConvBertConfig"),ywe.forEach(t),dXe=r(M6," (ConvBERT model)"),M6.forEach(t),cXe=i(y),Pm=n(y,"LI",{});var E6=s(Pm);Noe=n(E6,"STRONG",{});var Lwe=s(Noe);mXe=r(Lwe,"convnext"),Lwe.forEach(t),fXe=r(E6," \u2014 "),uk=n(E6,"A",{href:!0});var xwe=s(uk);gXe=r(xwe,"ConvNextConfig"),xwe.forEach(t),hXe=r(E6," (ConvNext model)"),E6.forEach(t),uXe=i(y),Bm=n(y,"LI",{});var C6=s(Bm);qoe=n(C6,"STRONG",{});var $we=s(qoe);pXe=r($we,"ctrl"),$we.forEach(t),_Xe=r(C6," \u2014 "),pk=n(C6,"A",{href:!0});var kwe=s(pk);bXe=r(kwe,"CTRLConfig"),kwe.forEach(t),vXe=r(C6," (CTRL model)"),C6.forEach(t),FXe=i(y),Im=n(y,"LI",{});var w6=s(Im);joe=n(w6,"STRONG",{});var Swe=s(joe);TXe=r(Swe,"cvt"),Swe.forEach(t),MXe=r(w6," \u2014 "),_k=n(w6,"A",{href:!0});var Rwe=s(_k);EXe=r(Rwe,"CvtConfig"),Rwe.forEach(t),CXe=r(w6," (CvT model)"),w6.forEach(t),wXe=i(y),Nm=n(y,"LI",{});var A6=s(Nm);Doe=n(A6,"STRONG",{});var Pwe=s(Doe);AXe=r(Pwe,"data2vec-audio"),Pwe.forEach(t),yXe=r(A6," \u2014 "),bk=n(A6,"A",{href:!0});var Bwe=s(bk);LXe=r(Bwe,"Data2VecAudioConfig"),Bwe.forEach(t),xXe=r(A6," (Data2VecAudio model)"),A6.forEach(t),$Xe=i(y),qm=n(y,"LI",{});var y6=s(qm);Goe=n(y6,"STRONG",{});var Iwe=s(Goe);kXe=r(Iwe,"data2vec-text"),Iwe.forEach(t),SXe=r(y6," \u2014 "),vk=n(y6,"A",{href:!0});var Nwe=s(vk);RXe=r(Nwe,"Data2VecTextConfig"),Nwe.forEach(t),PXe=r(y6," (Data2VecText model)"),y6.forEach(t),BXe=i(y),jm=n(y,"LI",{});var L6=s(jm);Ooe=n(L6,"STRONG",{});var qwe=s(Ooe);IXe=r(qwe,"data2vec-vision"),qwe.forEach(t),NXe=r(L6," \u2014 "),Fk=n(L6,"A",{href:!0});var jwe=s(Fk);qXe=r(jwe,"Data2VecVisionConfig"),jwe.forEach(t),jXe=r(L6," (Data2VecVision model)"),L6.forEach(t),DXe=i(y),Dm=n(y,"LI",{});var x6=s(Dm);Voe=n(x6,"STRONG",{});var Dwe=s(Voe);GXe=r(Dwe,"deberta"),Dwe.forEach(t),OXe=r(x6," \u2014 "),Tk=n(x6,"A",{href:!0});var Gwe=s(Tk);VXe=r(Gwe,"DebertaConfig"),Gwe.forEach(t),XXe=r(x6," (DeBERTa model)"),x6.forEach(t),zXe=i(y),Gm=n(y,"LI",{});var $6=s(Gm);Xoe=n($6,"STRONG",{});var Owe=s(Xoe);WXe=r(Owe,"deberta-v2"),Owe.forEach(t),QXe=r($6," \u2014 "),Mk=n($6,"A",{href:!0});var Vwe=s(Mk);HXe=r(Vwe,"DebertaV2Config"),Vwe.forEach(t),UXe=r($6," (DeBERTa-v2 model)"),$6.forEach(t),JXe=i(y),Om=n(y,"LI",{});var k6=s(Om);zoe=n(k6,"STRONG",{});var Xwe=s(zoe);YXe=r(Xwe,"decision_transformer"),Xwe.forEach(t),KXe=r(k6," \u2014 "),Ek=n(k6,"A",{href:!0});var zwe=s(Ek);ZXe=r(zwe,"DecisionTransformerConfig"),zwe.forEach(t),eze=r(k6," (Decision Transformer model)"),k6.forEach(t),oze=i(y),Vm=n(y,"LI",{});var S6=s(Vm);Woe=n(S6,"STRONG",{});var Wwe=s(Woe);rze=r(Wwe,"deit"),Wwe.forEach(t),tze=r(S6," \u2014 "),Ck=n(S6,"A",{href:!0});var gXr=s(Ck);aze=r(gXr,"DeiTConfig"),gXr.forEach(t),nze=r(S6," (DeiT model)"),S6.forEach(t),sze=i(y),Xm=n(y,"LI",{});var Qwe=s(Xm);Qoe=n(Qwe,"STRONG",{});var hXr=s(Qoe);lze=r(hXr,"detr"),hXr.forEach(t),ize=r(Qwe," \u2014 "),wk=n(Qwe,"A",{href:!0});var uXr=s(wk);dze=r(uXr,"DetrConfig"),uXr.forEach(t),cze=r(Qwe," (DETR model)"),Qwe.forEach(t),mze=i(y),zm=n(y,"LI",{});var Hwe=s(zm);Hoe=n(Hwe,"STRONG",{});var pXr=s(Hoe);fze=r(pXr,"distilbert"),pXr.forEach(t),gze=r(Hwe," \u2014 "),Ak=n(Hwe,"A",{href:!0});var _Xr=s(Ak);hze=r(_Xr,"DistilBertConfig"),_Xr.forEach(t),uze=r(Hwe," (DistilBERT model)"),Hwe.forEach(t),pze=i(y),Wm=n(y,"LI",{});var Uwe=s(Wm);Uoe=n(Uwe,"STRONG",{});var bXr=s(Uoe);_ze=r(bXr,"dpr"),bXr.forEach(t),bze=r(Uwe," \u2014 "),yk=n(Uwe,"A",{href:!0});var vXr=s(yk);vze=r(vXr,"DPRConfig"),vXr.forEach(t),Fze=r(Uwe," (DPR model)"),Uwe.forEach(t),Tze=i(y),Qm=n(y,"LI",{});var Jwe=s(Qm);Joe=n(Jwe,"STRONG",{});var FXr=s(Joe);Mze=r(FXr,"dpt"),FXr.forEach(t),Eze=r(Jwe," \u2014 "),Lk=n(Jwe,"A",{href:!0});var TXr=s(Lk);Cze=r(TXr,"DPTConfig"),TXr.forEach(t),wze=r(Jwe," (DPT model)"),Jwe.forEach(t),Aze=i(y),Hm=n(y,"LI",{});var Ywe=s(Hm);Yoe=n(Ywe,"STRONG",{});var MXr=s(Yoe);yze=r(MXr,"electra"),MXr.forEach(t),Lze=r(Ywe," \u2014 "),xk=n(Ywe,"A",{href:!0});var EXr=s(xk);xze=r(EXr,"ElectraConfig"),EXr.forEach(t),$ze=r(Ywe," (ELECTRA model)"),Ywe.forEach(t),kze=i(y),Um=n(y,"LI",{});var Kwe=s(Um);Koe=n(Kwe,"STRONG",{});var CXr=s(Koe);Sze=r(CXr,"encoder-decoder"),CXr.forEach(t),Rze=r(Kwe," \u2014 "),$k=n(Kwe,"A",{href:!0});var wXr=s($k);Pze=r(wXr,"EncoderDecoderConfig"),wXr.forEach(t),Bze=r(Kwe," (Encoder decoder model)"),Kwe.forEach(t),Ize=i(y),Jm=n(y,"LI",{});var Zwe=s(Jm);Zoe=n(Zwe,"STRONG",{});var AXr=s(Zoe);Nze=r(AXr,"flaubert"),AXr.forEach(t),qze=r(Zwe," \u2014 "),kk=n(Zwe,"A",{href:!0});var yXr=s(kk);jze=r(yXr,"FlaubertConfig"),yXr.forEach(t),Dze=r(Zwe," (FlauBERT model)"),Zwe.forEach(t),Gze=i(y),Ym=n(y,"LI",{});var e0e=s(Ym);ere=n(e0e,"STRONG",{});var LXr=s(ere);Oze=r(LXr,"flava"),LXr.forEach(t),Vze=r(e0e," \u2014 "),Sk=n(e0e,"A",{href:!0});var xXr=s(Sk);Xze=r(xXr,"FlavaConfig"),xXr.forEach(t),zze=r(e0e," (Flava model)"),e0e.forEach(t),Wze=i(y),Km=n(y,"LI",{});var o0e=s(Km);ore=n(o0e,"STRONG",{});var $Xr=s(ore);Qze=r($Xr,"fnet"),$Xr.forEach(t),Hze=r(o0e," \u2014 "),Rk=n(o0e,"A",{href:!0});var kXr=s(Rk);Uze=r(kXr,"FNetConfig"),kXr.forEach(t),Jze=r(o0e," (FNet model)"),o0e.forEach(t),Yze=i(y),Zm=n(y,"LI",{});var r0e=s(Zm);rre=n(r0e,"STRONG",{});var SXr=s(rre);Kze=r(SXr,"fsmt"),SXr.forEach(t),Zze=r(r0e," \u2014 "),Pk=n(r0e,"A",{href:!0});var RXr=s(Pk);eWe=r(RXr,"FSMTConfig"),RXr.forEach(t),oWe=r(r0e," (FairSeq Machine-Translation model)"),r0e.forEach(t),rWe=i(y),ef=n(y,"LI",{});var t0e=s(ef);tre=n(t0e,"STRONG",{});var PXr=s(tre);tWe=r(PXr,"funnel"),PXr.forEach(t),aWe=r(t0e," \u2014 "),Bk=n(t0e,"A",{href:!0});var BXr=s(Bk);nWe=r(BXr,"FunnelConfig"),BXr.forEach(t),sWe=r(t0e," (Funnel Transformer model)"),t0e.forEach(t),lWe=i(y),of=n(y,"LI",{});var a0e=s(of);are=n(a0e,"STRONG",{});var IXr=s(are);iWe=r(IXr,"glpn"),IXr.forEach(t),dWe=r(a0e," \u2014 "),Ik=n(a0e,"A",{href:!0});var NXr=s(Ik);cWe=r(NXr,"GLPNConfig"),NXr.forEach(t),mWe=r(a0e," (GLPN model)"),a0e.forEach(t),fWe=i(y),rf=n(y,"LI",{});var n0e=s(rf);nre=n(n0e,"STRONG",{});var qXr=s(nre);gWe=r(qXr,"gpt2"),qXr.forEach(t),hWe=r(n0e," \u2014 "),Nk=n(n0e,"A",{href:!0});var jXr=s(Nk);uWe=r(jXr,"GPT2Config"),jXr.forEach(t),pWe=r(n0e," (OpenAI GPT-2 model)"),n0e.forEach(t),_We=i(y),tf=n(y,"LI",{});var s0e=s(tf);sre=n(s0e,"STRONG",{});var DXr=s(sre);bWe=r(DXr,"gpt_neo"),DXr.forEach(t),vWe=r(s0e," \u2014 "),qk=n(s0e,"A",{href:!0});var GXr=s(qk);FWe=r(GXr,"GPTNeoConfig"),GXr.forEach(t),TWe=r(s0e," (GPT Neo model)"),s0e.forEach(t),MWe=i(y),af=n(y,"LI",{});var l0e=s(af);lre=n(l0e,"STRONG",{});var OXr=s(lre);EWe=r(OXr,"gpt_neox"),OXr.forEach(t),CWe=r(l0e," \u2014 "),jk=n(l0e,"A",{href:!0});var VXr=s(jk);wWe=r(VXr,"GPTNeoXConfig"),VXr.forEach(t),AWe=r(l0e," (GPT NeoX model)"),l0e.forEach(t),yWe=i(y),nf=n(y,"LI",{});var i0e=s(nf);ire=n(i0e,"STRONG",{});var XXr=s(ire);LWe=r(XXr,"gptj"),XXr.forEach(t),xWe=r(i0e," \u2014 "),Dk=n(i0e,"A",{href:!0});var zXr=s(Dk);$We=r(zXr,"GPTJConfig"),zXr.forEach(t),kWe=r(i0e," (GPT-J model)"),i0e.forEach(t),SWe=i(y),sf=n(y,"LI",{});var d0e=s(sf);dre=n(d0e,"STRONG",{});var WXr=s(dre);RWe=r(WXr,"hubert"),WXr.forEach(t),PWe=r(d0e," \u2014 "),Gk=n(d0e,"A",{href:!0});var QXr=s(Gk);BWe=r(QXr,"HubertConfig"),QXr.forEach(t),IWe=r(d0e," (Hubert model)"),d0e.forEach(t),NWe=i(y),lf=n(y,"LI",{});var c0e=s(lf);cre=n(c0e,"STRONG",{});var HXr=s(cre);qWe=r(HXr,"ibert"),HXr.forEach(t),jWe=r(c0e," \u2014 "),Ok=n(c0e,"A",{href:!0});var UXr=s(Ok);DWe=r(UXr,"IBertConfig"),UXr.forEach(t),GWe=r(c0e," (I-BERT model)"),c0e.forEach(t),OWe=i(y),df=n(y,"LI",{});var m0e=s(df);mre=n(m0e,"STRONG",{});var JXr=s(mre);VWe=r(JXr,"imagegpt"),JXr.forEach(t),XWe=r(m0e," \u2014 "),Vk=n(m0e,"A",{href:!0});var YXr=s(Vk);zWe=r(YXr,"ImageGPTConfig"),YXr.forEach(t),WWe=r(m0e," (ImageGPT model)"),m0e.forEach(t),QWe=i(y),cf=n(y,"LI",{});var f0e=s(cf);fre=n(f0e,"STRONG",{});var KXr=s(fre);HWe=r(KXr,"layoutlm"),KXr.forEach(t),UWe=r(f0e," \u2014 "),Xk=n(f0e,"A",{href:!0});var ZXr=s(Xk);JWe=r(ZXr,"LayoutLMConfig"),ZXr.forEach(t),YWe=r(f0e," (LayoutLM model)"),f0e.forEach(t),KWe=i(y),mf=n(y,"LI",{});var g0e=s(mf);gre=n(g0e,"STRONG",{});var ezr=s(gre);ZWe=r(ezr,"layoutlmv2"),ezr.forEach(t),eQe=r(g0e," \u2014 "),zk=n(g0e,"A",{href:!0});var ozr=s(zk);oQe=r(ozr,"LayoutLMv2Config"),ozr.forEach(t),rQe=r(g0e," (LayoutLMv2 model)"),g0e.forEach(t),tQe=i(y),ff=n(y,"LI",{});var h0e=s(ff);hre=n(h0e,"STRONG",{});var rzr=s(hre);aQe=r(rzr,"layoutlmv3"),rzr.forEach(t),nQe=r(h0e," \u2014 "),Wk=n(h0e,"A",{href:!0});var tzr=s(Wk);sQe=r(tzr,"LayoutLMv3Config"),tzr.forEach(t),lQe=r(h0e," (LayoutLMv3 model)"),h0e.forEach(t),iQe=i(y),gf=n(y,"LI",{});var u0e=s(gf);ure=n(u0e,"STRONG",{});var azr=s(ure);dQe=r(azr,"led"),azr.forEach(t),cQe=r(u0e," \u2014 "),Qk=n(u0e,"A",{href:!0});var nzr=s(Qk);mQe=r(nzr,"LEDConfig"),nzr.forEach(t),fQe=r(u0e," (LED model)"),u0e.forEach(t),gQe=i(y),hf=n(y,"LI",{});var p0e=s(hf);pre=n(p0e,"STRONG",{});var szr=s(pre);hQe=r(szr,"longformer"),szr.forEach(t),uQe=r(p0e," \u2014 "),Hk=n(p0e,"A",{href:!0});var lzr=s(Hk);pQe=r(lzr,"LongformerConfig"),lzr.forEach(t),_Qe=r(p0e," (Longformer model)"),p0e.forEach(t),bQe=i(y),uf=n(y,"LI",{});var _0e=s(uf);_re=n(_0e,"STRONG",{});var izr=s(_re);vQe=r(izr,"luke"),izr.forEach(t),FQe=r(_0e," \u2014 "),Uk=n(_0e,"A",{href:!0});var dzr=s(Uk);TQe=r(dzr,"LukeConfig"),dzr.forEach(t),MQe=r(_0e," (LUKE model)"),_0e.forEach(t),EQe=i(y),pf=n(y,"LI",{});var b0e=s(pf);bre=n(b0e,"STRONG",{});var czr=s(bre);CQe=r(czr,"lxmert"),czr.forEach(t),wQe=r(b0e," \u2014 "),Jk=n(b0e,"A",{href:!0});var mzr=s(Jk);AQe=r(mzr,"LxmertConfig"),mzr.forEach(t),yQe=r(b0e," (LXMERT model)"),b0e.forEach(t),LQe=i(y),_f=n(y,"LI",{});var v0e=s(_f);vre=n(v0e,"STRONG",{});var fzr=s(vre);xQe=r(fzr,"m2m_100"),fzr.forEach(t),$Qe=r(v0e," \u2014 "),Yk=n(v0e,"A",{href:!0});var gzr=s(Yk);kQe=r(gzr,"M2M100Config"),gzr.forEach(t),SQe=r(v0e," (M2M100 model)"),v0e.forEach(t),RQe=i(y),bf=n(y,"LI",{});var F0e=s(bf);Fre=n(F0e,"STRONG",{});var hzr=s(Fre);PQe=r(hzr,"marian"),hzr.forEach(t),BQe=r(F0e," \u2014 "),Kk=n(F0e,"A",{href:!0});var uzr=s(Kk);IQe=r(uzr,"MarianConfig"),uzr.forEach(t),NQe=r(F0e," (Marian model)"),F0e.forEach(t),qQe=i(y),vf=n(y,"LI",{});var T0e=s(vf);Tre=n(T0e,"STRONG",{});var pzr=s(Tre);jQe=r(pzr,"maskformer"),pzr.forEach(t),DQe=r(T0e," \u2014 "),Zk=n(T0e,"A",{href:!0});var _zr=s(Zk);GQe=r(_zr,"MaskFormerConfig"),_zr.forEach(t),OQe=r(T0e," (MaskFormer model)"),T0e.forEach(t),VQe=i(y),Ff=n(y,"LI",{});var M0e=s(Ff);Mre=n(M0e,"STRONG",{});var bzr=s(Mre);XQe=r(bzr,"mbart"),bzr.forEach(t),zQe=r(M0e," \u2014 "),eS=n(M0e,"A",{href:!0});var vzr=s(eS);WQe=r(vzr,"MBartConfig"),vzr.forEach(t),QQe=r(M0e," (mBART model)"),M0e.forEach(t),HQe=i(y),Tf=n(y,"LI",{});var E0e=s(Tf);Ere=n(E0e,"STRONG",{});var Fzr=s(Ere);UQe=r(Fzr,"megatron-bert"),Fzr.forEach(t),JQe=r(E0e," \u2014 "),oS=n(E0e,"A",{href:!0});var Tzr=s(oS);YQe=r(Tzr,"MegatronBertConfig"),Tzr.forEach(t),KQe=r(E0e," (MegatronBert model)"),E0e.forEach(t),ZQe=i(y),Mf=n(y,"LI",{});var C0e=s(Mf);Cre=n(C0e,"STRONG",{});var Mzr=s(Cre);eHe=r(Mzr,"mobilebert"),Mzr.forEach(t),oHe=r(C0e," \u2014 "),rS=n(C0e,"A",{href:!0});var Ezr=s(rS);rHe=r(Ezr,"MobileBertConfig"),Ezr.forEach(t),tHe=r(C0e," (MobileBERT model)"),C0e.forEach(t),aHe=i(y),Ef=n(y,"LI",{});var w0e=s(Ef);wre=n(w0e,"STRONG",{});var Czr=s(wre);nHe=r(Czr,"mpnet"),Czr.forEach(t),sHe=r(w0e," \u2014 "),tS=n(w0e,"A",{href:!0});var wzr=s(tS);lHe=r(wzr,"MPNetConfig"),wzr.forEach(t),iHe=r(w0e," (MPNet model)"),w0e.forEach(t),dHe=i(y),Cf=n(y,"LI",{});var A0e=s(Cf);Are=n(A0e,"STRONG",{});var Azr=s(Are);cHe=r(Azr,"mt5"),Azr.forEach(t),mHe=r(A0e," \u2014 "),aS=n(A0e,"A",{href:!0});var yzr=s(aS);fHe=r(yzr,"MT5Config"),yzr.forEach(t),gHe=r(A0e," (mT5 model)"),A0e.forEach(t),hHe=i(y),wf=n(y,"LI",{});var y0e=s(wf);yre=n(y0e,"STRONG",{});var Lzr=s(yre);uHe=r(Lzr,"nystromformer"),Lzr.forEach(t),pHe=r(y0e," \u2014 "),nS=n(y0e,"A",{href:!0});var xzr=s(nS);_He=r(xzr,"NystromformerConfig"),xzr.forEach(t),bHe=r(y0e," (Nystromformer model)"),y0e.forEach(t),vHe=i(y),Af=n(y,"LI",{});var L0e=s(Af);Lre=n(L0e,"STRONG",{});var $zr=s(Lre);FHe=r($zr,"openai-gpt"),$zr.forEach(t),THe=r(L0e," \u2014 "),sS=n(L0e,"A",{href:!0});var kzr=s(sS);MHe=r(kzr,"OpenAIGPTConfig"),kzr.forEach(t),EHe=r(L0e," (OpenAI GPT model)"),L0e.forEach(t),CHe=i(y),yf=n(y,"LI",{});var x0e=s(yf);xre=n(x0e,"STRONG",{});var Szr=s(xre);wHe=r(Szr,"opt"),Szr.forEach(t),AHe=r(x0e," \u2014 "),lS=n(x0e,"A",{href:!0});var Rzr=s(lS);yHe=r(Rzr,"OPTConfig"),Rzr.forEach(t),LHe=r(x0e," (OPT model)"),x0e.forEach(t),xHe=i(y),Lf=n(y,"LI",{});var $0e=s(Lf);$re=n($0e,"STRONG",{});var Pzr=s($re);$He=r(Pzr,"pegasus"),Pzr.forEach(t),kHe=r($0e," \u2014 "),iS=n($0e,"A",{href:!0});var Bzr=s(iS);SHe=r(Bzr,"PegasusConfig"),Bzr.forEach(t),RHe=r($0e," (Pegasus model)"),$0e.forEach(t),PHe=i(y),xf=n(y,"LI",{});var k0e=s(xf);kre=n(k0e,"STRONG",{});var Izr=s(kre);BHe=r(Izr,"perceiver"),Izr.forEach(t),IHe=r(k0e," \u2014 "),dS=n(k0e,"A",{href:!0});var Nzr=s(dS);NHe=r(Nzr,"PerceiverConfig"),Nzr.forEach(t),qHe=r(k0e," (Perceiver model)"),k0e.forEach(t),jHe=i(y),$f=n(y,"LI",{});var S0e=s($f);Sre=n(S0e,"STRONG",{});var qzr=s(Sre);DHe=r(qzr,"plbart"),qzr.forEach(t),GHe=r(S0e," \u2014 "),cS=n(S0e,"A",{href:!0});var jzr=s(cS);OHe=r(jzr,"PLBartConfig"),jzr.forEach(t),VHe=r(S0e," (PLBart model)"),S0e.forEach(t),XHe=i(y),kf=n(y,"LI",{});var R0e=s(kf);Rre=n(R0e,"STRONG",{});var Dzr=s(Rre);zHe=r(Dzr,"poolformer"),Dzr.forEach(t),WHe=r(R0e," \u2014 "),mS=n(R0e,"A",{href:!0});var Gzr=s(mS);QHe=r(Gzr,"PoolFormerConfig"),Gzr.forEach(t),HHe=r(R0e," (PoolFormer model)"),R0e.forEach(t),UHe=i(y),Sf=n(y,"LI",{});var P0e=s(Sf);Pre=n(P0e,"STRONG",{});var Ozr=s(Pre);JHe=r(Ozr,"prophetnet"),Ozr.forEach(t),YHe=r(P0e," \u2014 "),fS=n(P0e,"A",{href:!0});var Vzr=s(fS);KHe=r(Vzr,"ProphetNetConfig"),Vzr.forEach(t),ZHe=r(P0e," (ProphetNet model)"),P0e.forEach(t),eUe=i(y),Rf=n(y,"LI",{});var B0e=s(Rf);Bre=n(B0e,"STRONG",{});var Xzr=s(Bre);oUe=r(Xzr,"qdqbert"),Xzr.forEach(t),rUe=r(B0e," \u2014 "),gS=n(B0e,"A",{href:!0});var zzr=s(gS);tUe=r(zzr,"QDQBertConfig"),zzr.forEach(t),aUe=r(B0e," (QDQBert model)"),B0e.forEach(t),nUe=i(y),Pf=n(y,"LI",{});var I0e=s(Pf);Ire=n(I0e,"STRONG",{});var Wzr=s(Ire);sUe=r(Wzr,"rag"),Wzr.forEach(t),lUe=r(I0e," \u2014 "),hS=n(I0e,"A",{href:!0});var Qzr=s(hS);iUe=r(Qzr,"RagConfig"),Qzr.forEach(t),dUe=r(I0e," (RAG model)"),I0e.forEach(t),cUe=i(y),Bf=n(y,"LI",{});var N0e=s(Bf);Nre=n(N0e,"STRONG",{});var Hzr=s(Nre);mUe=r(Hzr,"realm"),Hzr.forEach(t),fUe=r(N0e," \u2014 "),uS=n(N0e,"A",{href:!0});var Uzr=s(uS);gUe=r(Uzr,"RealmConfig"),Uzr.forEach(t),hUe=r(N0e," (Realm model)"),N0e.forEach(t),uUe=i(y),If=n(y,"LI",{});var q0e=s(If);qre=n(q0e,"STRONG",{});var Jzr=s(qre);pUe=r(Jzr,"reformer"),Jzr.forEach(t),_Ue=r(q0e," \u2014 "),pS=n(q0e,"A",{href:!0});var Yzr=s(pS);bUe=r(Yzr,"ReformerConfig"),Yzr.forEach(t),vUe=r(q0e," (Reformer model)"),q0e.forEach(t),FUe=i(y),Nf=n(y,"LI",{});var j0e=s(Nf);jre=n(j0e,"STRONG",{});var Kzr=s(jre);TUe=r(Kzr,"regnet"),Kzr.forEach(t),MUe=r(j0e," \u2014 "),_S=n(j0e,"A",{href:!0});var Zzr=s(_S);EUe=r(Zzr,"RegNetConfig"),Zzr.forEach(t),CUe=r(j0e," (RegNet model)"),j0e.forEach(t),wUe=i(y),qf=n(y,"LI",{});var D0e=s(qf);Dre=n(D0e,"STRONG",{});var eWr=s(Dre);AUe=r(eWr,"rembert"),eWr.forEach(t),yUe=r(D0e," \u2014 "),bS=n(D0e,"A",{href:!0});var oWr=s(bS);LUe=r(oWr,"RemBertConfig"),oWr.forEach(t),xUe=r(D0e," (RemBERT model)"),D0e.forEach(t),$Ue=i(y),jf=n(y,"LI",{});var G0e=s(jf);Gre=n(G0e,"STRONG",{});var rWr=s(Gre);kUe=r(rWr,"resnet"),rWr.forEach(t),SUe=r(G0e," \u2014 "),vS=n(G0e,"A",{href:!0});var tWr=s(vS);RUe=r(tWr,"ResNetConfig"),tWr.forEach(t),PUe=r(G0e," (ResNet model)"),G0e.forEach(t),BUe=i(y),Df=n(y,"LI",{});var O0e=s(Df);Ore=n(O0e,"STRONG",{});var aWr=s(Ore);IUe=r(aWr,"retribert"),aWr.forEach(t),NUe=r(O0e," \u2014 "),FS=n(O0e,"A",{href:!0});var nWr=s(FS);qUe=r(nWr,"RetriBertConfig"),nWr.forEach(t),jUe=r(O0e," (RetriBERT model)"),O0e.forEach(t),DUe=i(y),Gf=n(y,"LI",{});var V0e=s(Gf);Vre=n(V0e,"STRONG",{});var sWr=s(Vre);GUe=r(sWr,"roberta"),sWr.forEach(t),OUe=r(V0e," \u2014 "),TS=n(V0e,"A",{href:!0});var lWr=s(TS);VUe=r(lWr,"RobertaConfig"),lWr.forEach(t),XUe=r(V0e," (RoBERTa model)"),V0e.forEach(t),zUe=i(y),Of=n(y,"LI",{});var X0e=s(Of);Xre=n(X0e,"STRONG",{});var iWr=s(Xre);WUe=r(iWr,"roformer"),iWr.forEach(t),QUe=r(X0e," \u2014 "),MS=n(X0e,"A",{href:!0});var dWr=s(MS);HUe=r(dWr,"RoFormerConfig"),dWr.forEach(t),UUe=r(X0e," (RoFormer model)"),X0e.forEach(t),JUe=i(y),Vf=n(y,"LI",{});var z0e=s(Vf);zre=n(z0e,"STRONG",{});var cWr=s(zre);YUe=r(cWr,"segformer"),cWr.forEach(t),KUe=r(z0e," \u2014 "),ES=n(z0e,"A",{href:!0});var mWr=s(ES);ZUe=r(mWr,"SegformerConfig"),mWr.forEach(t),eJe=r(z0e," (SegFormer model)"),z0e.forEach(t),oJe=i(y),Xf=n(y,"LI",{});var W0e=s(Xf);Wre=n(W0e,"STRONG",{});var fWr=s(Wre);rJe=r(fWr,"sew"),fWr.forEach(t),tJe=r(W0e," \u2014 "),CS=n(W0e,"A",{href:!0});var gWr=s(CS);aJe=r(gWr,"SEWConfig"),gWr.forEach(t),nJe=r(W0e," (SEW model)"),W0e.forEach(t),sJe=i(y),zf=n(y,"LI",{});var Q0e=s(zf);Qre=n(Q0e,"STRONG",{});var hWr=s(Qre);lJe=r(hWr,"sew-d"),hWr.forEach(t),iJe=r(Q0e," \u2014 "),wS=n(Q0e,"A",{href:!0});var uWr=s(wS);dJe=r(uWr,"SEWDConfig"),uWr.forEach(t),cJe=r(Q0e," (SEW-D model)"),Q0e.forEach(t),mJe=i(y),Wf=n(y,"LI",{});var H0e=s(Wf);Hre=n(H0e,"STRONG",{});var pWr=s(Hre);fJe=r(pWr,"speech-encoder-decoder"),pWr.forEach(t),gJe=r(H0e," \u2014 "),AS=n(H0e,"A",{href:!0});var _Wr=s(AS);hJe=r(_Wr,"SpeechEncoderDecoderConfig"),_Wr.forEach(t),uJe=r(H0e," (Speech Encoder decoder model)"),H0e.forEach(t),pJe=i(y),Qf=n(y,"LI",{});var U0e=s(Qf);Ure=n(U0e,"STRONG",{});var bWr=s(Ure);_Je=r(bWr,"speech_to_text"),bWr.forEach(t),bJe=r(U0e," \u2014 "),yS=n(U0e,"A",{href:!0});var vWr=s(yS);vJe=r(vWr,"Speech2TextConfig"),vWr.forEach(t),FJe=r(U0e," (Speech2Text model)"),U0e.forEach(t),TJe=i(y),Hf=n(y,"LI",{});var J0e=s(Hf);Jre=n(J0e,"STRONG",{});var FWr=s(Jre);MJe=r(FWr,"speech_to_text_2"),FWr.forEach(t),EJe=r(J0e," \u2014 "),LS=n(J0e,"A",{href:!0});var TWr=s(LS);CJe=r(TWr,"Speech2Text2Config"),TWr.forEach(t),wJe=r(J0e," (Speech2Text2 model)"),J0e.forEach(t),AJe=i(y),Uf=n(y,"LI",{});var Y0e=s(Uf);Yre=n(Y0e,"STRONG",{});var MWr=s(Yre);yJe=r(MWr,"splinter"),MWr.forEach(t),LJe=r(Y0e," \u2014 "),xS=n(Y0e,"A",{href:!0});var EWr=s(xS);xJe=r(EWr,"SplinterConfig"),EWr.forEach(t),$Je=r(Y0e," (Splinter model)"),Y0e.forEach(t),kJe=i(y),Jf=n(y,"LI",{});var K0e=s(Jf);Kre=n(K0e,"STRONG",{});var CWr=s(Kre);SJe=r(CWr,"squeezebert"),CWr.forEach(t),RJe=r(K0e," \u2014 "),$S=n(K0e,"A",{href:!0});var wWr=s($S);PJe=r(wWr,"SqueezeBertConfig"),wWr.forEach(t),BJe=r(K0e," (SqueezeBERT model)"),K0e.forEach(t),IJe=i(y),Yf=n(y,"LI",{});var Z0e=s(Yf);Zre=n(Z0e,"STRONG",{});var AWr=s(Zre);NJe=r(AWr,"swin"),AWr.forEach(t),qJe=r(Z0e," \u2014 "),kS=n(Z0e,"A",{href:!0});var yWr=s(kS);jJe=r(yWr,"SwinConfig"),yWr.forEach(t),DJe=r(Z0e," (Swin model)"),Z0e.forEach(t),GJe=i(y),Kf=n(y,"LI",{});var e6e=s(Kf);ete=n(e6e,"STRONG",{});var LWr=s(ete);OJe=r(LWr,"t5"),LWr.forEach(t),VJe=r(e6e," \u2014 "),SS=n(e6e,"A",{href:!0});var xWr=s(SS);XJe=r(xWr,"T5Config"),xWr.forEach(t),zJe=r(e6e," (T5 model)"),e6e.forEach(t),WJe=i(y),Zf=n(y,"LI",{});var o6e=s(Zf);ote=n(o6e,"STRONG",{});var $Wr=s(ote);QJe=r($Wr,"tapas"),$Wr.forEach(t),HJe=r(o6e," \u2014 "),RS=n(o6e,"A",{href:!0});var kWr=s(RS);UJe=r(kWr,"TapasConfig"),kWr.forEach(t),JJe=r(o6e," (TAPAS model)"),o6e.forEach(t),YJe=i(y),eg=n(y,"LI",{});var r6e=s(eg);rte=n(r6e,"STRONG",{});var SWr=s(rte);KJe=r(SWr,"trajectory_transformer"),SWr.forEach(t),ZJe=r(r6e," \u2014 "),PS=n(r6e,"A",{href:!0});var RWr=s(PS);eYe=r(RWr,"TrajectoryTransformerConfig"),RWr.forEach(t),oYe=r(r6e," (Trajectory Transformer model)"),r6e.forEach(t),rYe=i(y),og=n(y,"LI",{});var t6e=s(og);tte=n(t6e,"STRONG",{});var PWr=s(tte);tYe=r(PWr,"transfo-xl"),PWr.forEach(t),aYe=r(t6e," \u2014 "),BS=n(t6e,"A",{href:!0});var BWr=s(BS);nYe=r(BWr,"TransfoXLConfig"),BWr.forEach(t),sYe=r(t6e," (Transformer-XL model)"),t6e.forEach(t),lYe=i(y),rg=n(y,"LI",{});var a6e=s(rg);ate=n(a6e,"STRONG",{});var IWr=s(ate);iYe=r(IWr,"trocr"),IWr.forEach(t),dYe=r(a6e," \u2014 "),IS=n(a6e,"A",{href:!0});var NWr=s(IS);cYe=r(NWr,"TrOCRConfig"),NWr.forEach(t),mYe=r(a6e," (TrOCR model)"),a6e.forEach(t),fYe=i(y),tg=n(y,"LI",{});var n6e=s(tg);nte=n(n6e,"STRONG",{});var qWr=s(nte);gYe=r(qWr,"unispeech"),qWr.forEach(t),hYe=r(n6e," \u2014 "),NS=n(n6e,"A",{href:!0});var jWr=s(NS);uYe=r(jWr,"UniSpeechConfig"),jWr.forEach(t),pYe=r(n6e," (UniSpeech model)"),n6e.forEach(t),_Ye=i(y),ag=n(y,"LI",{});var s6e=s(ag);ste=n(s6e,"STRONG",{});var DWr=s(ste);bYe=r(DWr,"unispeech-sat"),DWr.forEach(t),vYe=r(s6e," \u2014 "),qS=n(s6e,"A",{href:!0});var GWr=s(qS);FYe=r(GWr,"UniSpeechSatConfig"),GWr.forEach(t),TYe=r(s6e," (UniSpeechSat model)"),s6e.forEach(t),MYe=i(y),ng=n(y,"LI",{});var l6e=s(ng);lte=n(l6e,"STRONG",{});var OWr=s(lte);EYe=r(OWr,"van"),OWr.forEach(t),CYe=r(l6e," \u2014 "),jS=n(l6e,"A",{href:!0});var VWr=s(jS);wYe=r(VWr,"VanConfig"),VWr.forEach(t),AYe=r(l6e," (VAN model)"),l6e.forEach(t),yYe=i(y),sg=n(y,"LI",{});var i6e=s(sg);ite=n(i6e,"STRONG",{});var XWr=s(ite);LYe=r(XWr,"vilt"),XWr.forEach(t),xYe=r(i6e," \u2014 "),DS=n(i6e,"A",{href:!0});var zWr=s(DS);$Ye=r(zWr,"ViltConfig"),zWr.forEach(t),kYe=r(i6e," (ViLT model)"),i6e.forEach(t),SYe=i(y),lg=n(y,"LI",{});var d6e=s(lg);dte=n(d6e,"STRONG",{});var WWr=s(dte);RYe=r(WWr,"vision-encoder-decoder"),WWr.forEach(t),PYe=r(d6e," \u2014 "),GS=n(d6e,"A",{href:!0});var QWr=s(GS);BYe=r(QWr,"VisionEncoderDecoderConfig"),QWr.forEach(t),IYe=r(d6e," (Vision Encoder decoder model)"),d6e.forEach(t),NYe=i(y),ig=n(y,"LI",{});var c6e=s(ig);cte=n(c6e,"STRONG",{});var HWr=s(cte);qYe=r(HWr,"vision-text-dual-encoder"),HWr.forEach(t),jYe=r(c6e," \u2014 "),OS=n(c6e,"A",{href:!0});var UWr=s(OS);DYe=r(UWr,"VisionTextDualEncoderConfig"),UWr.forEach(t),GYe=r(c6e," (VisionTextDualEncoder model)"),c6e.forEach(t),OYe=i(y),dg=n(y,"LI",{});var m6e=s(dg);mte=n(m6e,"STRONG",{});var JWr=s(mte);VYe=r(JWr,"visual_bert"),JWr.forEach(t),XYe=r(m6e," \u2014 "),VS=n(m6e,"A",{href:!0});var YWr=s(VS);zYe=r(YWr,"VisualBertConfig"),YWr.forEach(t),WYe=r(m6e," (VisualBert model)"),m6e.forEach(t),QYe=i(y),cg=n(y,"LI",{});var f6e=s(cg);fte=n(f6e,"STRONG",{});var KWr=s(fte);HYe=r(KWr,"vit"),KWr.forEach(t),UYe=r(f6e," \u2014 "),XS=n(f6e,"A",{href:!0});var ZWr=s(XS);JYe=r(ZWr,"ViTConfig"),ZWr.forEach(t),YYe=r(f6e," (ViT model)"),f6e.forEach(t),KYe=i(y),mg=n(y,"LI",{});var g6e=s(mg);gte=n(g6e,"STRONG",{});var eQr=s(gte);ZYe=r(eQr,"vit_mae"),eQr.forEach(t),eKe=r(g6e," \u2014 "),zS=n(g6e,"A",{href:!0});var oQr=s(zS);oKe=r(oQr,"ViTMAEConfig"),oQr.forEach(t),rKe=r(g6e," (ViTMAE model)"),g6e.forEach(t),tKe=i(y),fg=n(y,"LI",{});var h6e=s(fg);hte=n(h6e,"STRONG",{});var rQr=s(hte);aKe=r(rQr,"wav2vec2"),rQr.forEach(t),nKe=r(h6e," \u2014 "),WS=n(h6e,"A",{href:!0});var tQr=s(WS);sKe=r(tQr,"Wav2Vec2Config"),tQr.forEach(t),lKe=r(h6e," (Wav2Vec2 model)"),h6e.forEach(t),iKe=i(y),gg=n(y,"LI",{});var u6e=s(gg);ute=n(u6e,"STRONG",{});var aQr=s(ute);dKe=r(aQr,"wav2vec2-conformer"),aQr.forEach(t),cKe=r(u6e," \u2014 "),QS=n(u6e,"A",{href:!0});var nQr=s(QS);mKe=r(nQr,"Wav2Vec2ConformerConfig"),nQr.forEach(t),fKe=r(u6e," (Wav2Vec2-Conformer model)"),u6e.forEach(t),gKe=i(y),hg=n(y,"LI",{});var p6e=s(hg);pte=n(p6e,"STRONG",{});var sQr=s(pte);hKe=r(sQr,"wavlm"),sQr.forEach(t),uKe=r(p6e," \u2014 "),HS=n(p6e,"A",{href:!0});var lQr=s(HS);pKe=r(lQr,"WavLMConfig"),lQr.forEach(t),_Ke=r(p6e," (WavLM model)"),p6e.forEach(t),bKe=i(y),ug=n(y,"LI",{});var _6e=s(ug);_te=n(_6e,"STRONG",{});var iQr=s(_te);vKe=r(iQr,"xglm"),iQr.forEach(t),FKe=r(_6e," \u2014 "),US=n(_6e,"A",{href:!0});var dQr=s(US);TKe=r(dQr,"XGLMConfig"),dQr.forEach(t),MKe=r(_6e," (XGLM model)"),_6e.forEach(t),EKe=i(y),pg=n(y,"LI",{});var b6e=s(pg);bte=n(b6e,"STRONG",{});var cQr=s(bte);CKe=r(cQr,"xlm"),cQr.forEach(t),wKe=r(b6e," \u2014 "),JS=n(b6e,"A",{href:!0});var mQr=s(JS);AKe=r(mQr,"XLMConfig"),mQr.forEach(t),yKe=r(b6e," (XLM model)"),b6e.forEach(t),LKe=i(y),_g=n(y,"LI",{});var v6e=s(_g);vte=n(v6e,"STRONG",{});var fQr=s(vte);xKe=r(fQr,"xlm-prophetnet"),fQr.forEach(t),$Ke=r(v6e," \u2014 "),YS=n(v6e,"A",{href:!0});var gQr=s(YS);kKe=r(gQr,"XLMProphetNetConfig"),gQr.forEach(t),SKe=r(v6e," (XLMProphetNet model)"),v6e.forEach(t),RKe=i(y),bg=n(y,"LI",{});var F6e=s(bg);Fte=n(F6e,"STRONG",{});var hQr=s(Fte);PKe=r(hQr,"xlm-roberta"),hQr.forEach(t),BKe=r(F6e," \u2014 "),KS=n(F6e,"A",{href:!0});var uQr=s(KS);IKe=r(uQr,"XLMRobertaConfig"),uQr.forEach(t),NKe=r(F6e," (XLM-RoBERTa model)"),F6e.forEach(t),qKe=i(y),vg=n(y,"LI",{});var T6e=s(vg);Tte=n(T6e,"STRONG",{});var pQr=s(Tte);jKe=r(pQr,"xlm-roberta-xl"),pQr.forEach(t),DKe=r(T6e," \u2014 "),ZS=n(T6e,"A",{href:!0});var _Qr=s(ZS);GKe=r(_Qr,"XLMRobertaXLConfig"),_Qr.forEach(t),OKe=r(T6e," (XLM-RoBERTa-XL model)"),T6e.forEach(t),VKe=i(y),Fg=n(y,"LI",{});var M6e=s(Fg);Mte=n(M6e,"STRONG",{});var bQr=s(Mte);XKe=r(bQr,"xlnet"),bQr.forEach(t),zKe=r(M6e," \u2014 "),eR=n(M6e,"A",{href:!0});var vQr=s(eR);WKe=r(vQr,"XLNetConfig"),vQr.forEach(t),QKe=r(M6e," (XLNet model)"),M6e.forEach(t),HKe=i(y),Tg=n(y,"LI",{});var E6e=s(Tg);Ete=n(E6e,"STRONG",{});var FQr=s(Ete);UKe=r(FQr,"yolos"),FQr.forEach(t),JKe=r(E6e," \u2014 "),oR=n(E6e,"A",{href:!0});var TQr=s(oR);YKe=r(TQr,"YolosConfig"),TQr.forEach(t),KKe=r(E6e," (YOLOS model)"),E6e.forEach(t),ZKe=i(y),Mg=n(y,"LI",{});var C6e=s(Mg);Cte=n(C6e,"STRONG",{});var MQr=s(Cte);eZe=r(MQr,"yoso"),MQr.forEach(t),oZe=r(C6e," \u2014 "),rR=n(C6e,"A",{href:!0});var EQr=s(rR);rZe=r(EQr,"YosoConfig"),EQr.forEach(t),tZe=r(C6e," (YOSO model)"),C6e.forEach(t),y.forEach(t),aZe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),nZe=i(et),Cg=n(et,"DIV",{class:!0});var bDe=s(Cg);T(qy.$$.fragment,bDe),sZe=i(bDe),wte=n(bDe,"P",{});var CQr=s(wte);lZe=r(CQr,"Register a new configuration for this class."),CQr.forEach(t),bDe.forEach(t),et.forEach(t),Tqe=i(m),Ti=n(m,"H2",{class:!0});var vDe=s(Ti);wg=n(vDe,"A",{id:!0,class:!0,href:!0});var wQr=s(wg);Ate=n(wQr,"SPAN",{});var AQr=s(Ate);T(jy.$$.fragment,AQr),AQr.forEach(t),wQr.forEach(t),iZe=i(vDe),yte=n(vDe,"SPAN",{});var yQr=s(yte);dZe=r(yQr,"AutoTokenizer"),yQr.forEach(t),vDe.forEach(t),Mqe=i(m),wo=n(m,"DIV",{class:!0});var Ns=s(wo);T(Dy.$$.fragment,Ns),cZe=i(Ns),Gy=n(Ns,"P",{});var FDe=s(Gy);mZe=r(FDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tR=n(FDe,"A",{href:!0});var LQr=s(tR);fZe=r(LQr,"AutoTokenizer.from_pretrained()"),LQr.forEach(t),gZe=r(FDe," class method."),FDe.forEach(t),hZe=i(Ns),Oy=n(Ns,"P",{});var TDe=s(Oy);uZe=r(TDe,"This class cannot be instantiated directly using "),Lte=n(TDe,"CODE",{});var xQr=s(Lte);pZe=r(xQr,"__init__()"),xQr.forEach(t),_Ze=r(TDe," (throws an error)."),TDe.forEach(t),bZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(Vy.$$.fragment,qs),vZe=i(qs),xte=n(qs,"P",{});var $Qr=s(xte);FZe=r($Qr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Qr.forEach(t),TZe=i(qs),Aa=n(qs,"P",{});var R6=s(Aa);MZe=r(R6,"The tokenizer class to instantiate is selected based on the "),$te=n(R6,"CODE",{});var kQr=s($te);EZe=r(kQr,"model_type"),kQr.forEach(t),CZe=r(R6,` property of the config object (either
passed as an argument or loaded from `),kte=n(R6,"CODE",{});var SQr=s(kte);wZe=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),AZe=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=n(R6,"CODE",{});var RQr=s(Ste);yZe=r(RQr,"pretrained_model_name_or_path"),RQr.forEach(t),LZe=r(R6,":"),R6.forEach(t),xZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Xx=s(Sn);Rte=n(Xx,"STRONG",{});var PQr=s(Rte);$Ze=r(PQr,"albert"),PQr.forEach(t),kZe=r(Xx," \u2014 "),aR=n(Xx,"A",{href:!0});var BQr=s(aR);SZe=r(BQr,"AlbertTokenizer"),BQr.forEach(t),RZe=r(Xx," or "),nR=n(Xx,"A",{href:!0});var IQr=s(nR);PZe=r(IQr,"AlbertTokenizerFast"),IQr.forEach(t),BZe=r(Xx," (ALBERT model)"),Xx.forEach(t),IZe=i(S),Rn=n(S,"LI",{});var zx=s(Rn);Pte=n(zx,"STRONG",{});var NQr=s(Pte);NZe=r(NQr,"bart"),NQr.forEach(t),qZe=r(zx," \u2014 "),sR=n(zx,"A",{href:!0});var qQr=s(sR);jZe=r(qQr,"BartTokenizer"),qQr.forEach(t),DZe=r(zx," or "),lR=n(zx,"A",{href:!0});var jQr=s(lR);GZe=r(jQr,"BartTokenizerFast"),jQr.forEach(t),OZe=r(zx," (BART model)"),zx.forEach(t),VZe=i(S),Pn=n(S,"LI",{});var Wx=s(Pn);Bte=n(Wx,"STRONG",{});var DQr=s(Bte);XZe=r(DQr,"barthez"),DQr.forEach(t),zZe=r(Wx," \u2014 "),iR=n(Wx,"A",{href:!0});var GQr=s(iR);WZe=r(GQr,"BarthezTokenizer"),GQr.forEach(t),QZe=r(Wx," or "),dR=n(Wx,"A",{href:!0});var OQr=s(dR);HZe=r(OQr,"BarthezTokenizerFast"),OQr.forEach(t),UZe=r(Wx," (BARThez model)"),Wx.forEach(t),JZe=i(S),Ag=n(S,"LI",{});var w6e=s(Ag);Ite=n(w6e,"STRONG",{});var VQr=s(Ite);YZe=r(VQr,"bartpho"),VQr.forEach(t),KZe=r(w6e," \u2014 "),cR=n(w6e,"A",{href:!0});var XQr=s(cR);ZZe=r(XQr,"BartphoTokenizer"),XQr.forEach(t),eeo=r(w6e," (BARTpho model)"),w6e.forEach(t),oeo=i(S),Bn=n(S,"LI",{});var Qx=s(Bn);Nte=n(Qx,"STRONG",{});var zQr=s(Nte);reo=r(zQr,"bert"),zQr.forEach(t),teo=r(Qx," \u2014 "),mR=n(Qx,"A",{href:!0});var WQr=s(mR);aeo=r(WQr,"BertTokenizer"),WQr.forEach(t),neo=r(Qx," or "),fR=n(Qx,"A",{href:!0});var QQr=s(fR);seo=r(QQr,"BertTokenizerFast"),QQr.forEach(t),leo=r(Qx," (BERT model)"),Qx.forEach(t),ieo=i(S),yg=n(S,"LI",{});var A6e=s(yg);qte=n(A6e,"STRONG",{});var HQr=s(qte);deo=r(HQr,"bert-generation"),HQr.forEach(t),ceo=r(A6e," \u2014 "),gR=n(A6e,"A",{href:!0});var UQr=s(gR);meo=r(UQr,"BertGenerationTokenizer"),UQr.forEach(t),feo=r(A6e," (Bert Generation model)"),A6e.forEach(t),geo=i(S),Lg=n(S,"LI",{});var y6e=s(Lg);jte=n(y6e,"STRONG",{});var JQr=s(jte);heo=r(JQr,"bert-japanese"),JQr.forEach(t),ueo=r(y6e," \u2014 "),hR=n(y6e,"A",{href:!0});var YQr=s(hR);peo=r(YQr,"BertJapaneseTokenizer"),YQr.forEach(t),_eo=r(y6e," (BertJapanese model)"),y6e.forEach(t),beo=i(S),xg=n(S,"LI",{});var L6e=s(xg);Dte=n(L6e,"STRONG",{});var KQr=s(Dte);veo=r(KQr,"bertweet"),KQr.forEach(t),Feo=r(L6e," \u2014 "),uR=n(L6e,"A",{href:!0});var ZQr=s(uR);Teo=r(ZQr,"BertweetTokenizer"),ZQr.forEach(t),Meo=r(L6e," (Bertweet model)"),L6e.forEach(t),Eeo=i(S),In=n(S,"LI",{});var Hx=s(In);Gte=n(Hx,"STRONG",{});var eHr=s(Gte);Ceo=r(eHr,"big_bird"),eHr.forEach(t),weo=r(Hx," \u2014 "),pR=n(Hx,"A",{href:!0});var oHr=s(pR);Aeo=r(oHr,"BigBirdTokenizer"),oHr.forEach(t),yeo=r(Hx," or "),_R=n(Hx,"A",{href:!0});var rHr=s(_R);Leo=r(rHr,"BigBirdTokenizerFast"),rHr.forEach(t),xeo=r(Hx," (BigBird model)"),Hx.forEach(t),$eo=i(S),Nn=n(S,"LI",{});var Ux=s(Nn);Ote=n(Ux,"STRONG",{});var tHr=s(Ote);keo=r(tHr,"bigbird_pegasus"),tHr.forEach(t),Seo=r(Ux," \u2014 "),bR=n(Ux,"A",{href:!0});var aHr=s(bR);Reo=r(aHr,"PegasusTokenizer"),aHr.forEach(t),Peo=r(Ux," or "),vR=n(Ux,"A",{href:!0});var nHr=s(vR);Beo=r(nHr,"PegasusTokenizerFast"),nHr.forEach(t),Ieo=r(Ux," (BigBirdPegasus model)"),Ux.forEach(t),Neo=i(S),qn=n(S,"LI",{});var Jx=s(qn);Vte=n(Jx,"STRONG",{});var sHr=s(Vte);qeo=r(sHr,"blenderbot"),sHr.forEach(t),jeo=r(Jx," \u2014 "),FR=n(Jx,"A",{href:!0});var lHr=s(FR);Deo=r(lHr,"BlenderbotTokenizer"),lHr.forEach(t),Geo=r(Jx," or "),TR=n(Jx,"A",{href:!0});var iHr=s(TR);Oeo=r(iHr,"BlenderbotTokenizerFast"),iHr.forEach(t),Veo=r(Jx," (Blenderbot model)"),Jx.forEach(t),Xeo=i(S),$g=n(S,"LI",{});var x6e=s($g);Xte=n(x6e,"STRONG",{});var dHr=s(Xte);zeo=r(dHr,"blenderbot-small"),dHr.forEach(t),Weo=r(x6e," \u2014 "),MR=n(x6e,"A",{href:!0});var cHr=s(MR);Qeo=r(cHr,"BlenderbotSmallTokenizer"),cHr.forEach(t),Heo=r(x6e," (BlenderbotSmall model)"),x6e.forEach(t),Ueo=i(S),kg=n(S,"LI",{});var $6e=s(kg);zte=n($6e,"STRONG",{});var mHr=s(zte);Jeo=r(mHr,"byt5"),mHr.forEach(t),Yeo=r($6e," \u2014 "),ER=n($6e,"A",{href:!0});var fHr=s(ER);Keo=r(fHr,"ByT5Tokenizer"),fHr.forEach(t),Zeo=r($6e," (ByT5 model)"),$6e.forEach(t),eoo=i(S),jn=n(S,"LI",{});var Yx=s(jn);Wte=n(Yx,"STRONG",{});var gHr=s(Wte);ooo=r(gHr,"camembert"),gHr.forEach(t),roo=r(Yx," \u2014 "),CR=n(Yx,"A",{href:!0});var hHr=s(CR);too=r(hHr,"CamembertTokenizer"),hHr.forEach(t),aoo=r(Yx," or "),wR=n(Yx,"A",{href:!0});var uHr=s(wR);noo=r(uHr,"CamembertTokenizerFast"),uHr.forEach(t),soo=r(Yx," (CamemBERT model)"),Yx.forEach(t),loo=i(S),Sg=n(S,"LI",{});var k6e=s(Sg);Qte=n(k6e,"STRONG",{});var pHr=s(Qte);ioo=r(pHr,"canine"),pHr.forEach(t),doo=r(k6e," \u2014 "),AR=n(k6e,"A",{href:!0});var _Hr=s(AR);coo=r(_Hr,"CanineTokenizer"),_Hr.forEach(t),moo=r(k6e," (Canine model)"),k6e.forEach(t),foo=i(S),Dn=n(S,"LI",{});var Kx=s(Dn);Hte=n(Kx,"STRONG",{});var bHr=s(Hte);goo=r(bHr,"clip"),bHr.forEach(t),hoo=r(Kx," \u2014 "),yR=n(Kx,"A",{href:!0});var vHr=s(yR);uoo=r(vHr,"CLIPTokenizer"),vHr.forEach(t),poo=r(Kx," or "),LR=n(Kx,"A",{href:!0});var FHr=s(LR);_oo=r(FHr,"CLIPTokenizerFast"),FHr.forEach(t),boo=r(Kx," (CLIP model)"),Kx.forEach(t),voo=i(S),Gn=n(S,"LI",{});var Zx=s(Gn);Ute=n(Zx,"STRONG",{});var THr=s(Ute);Foo=r(THr,"convbert"),THr.forEach(t),Too=r(Zx," \u2014 "),xR=n(Zx,"A",{href:!0});var MHr=s(xR);Moo=r(MHr,"ConvBertTokenizer"),MHr.forEach(t),Eoo=r(Zx," or "),$R=n(Zx,"A",{href:!0});var EHr=s($R);Coo=r(EHr,"ConvBertTokenizerFast"),EHr.forEach(t),woo=r(Zx," (ConvBERT model)"),Zx.forEach(t),Aoo=i(S),On=n(S,"LI",{});var e$=s(On);Jte=n(e$,"STRONG",{});var CHr=s(Jte);yoo=r(CHr,"cpm"),CHr.forEach(t),Loo=r(e$," \u2014 "),kR=n(e$,"A",{href:!0});var wHr=s(kR);xoo=r(wHr,"CpmTokenizer"),wHr.forEach(t),$oo=r(e$," or "),SR=n(e$,"A",{href:!0});var AHr=s(SR);koo=r(AHr,"CpmTokenizerFast"),AHr.forEach(t),Soo=r(e$," (CPM model)"),e$.forEach(t),Roo=i(S),Rg=n(S,"LI",{});var S6e=s(Rg);Yte=n(S6e,"STRONG",{});var yHr=s(Yte);Poo=r(yHr,"ctrl"),yHr.forEach(t),Boo=r(S6e," \u2014 "),RR=n(S6e,"A",{href:!0});var LHr=s(RR);Ioo=r(LHr,"CTRLTokenizer"),LHr.forEach(t),Noo=r(S6e," (CTRL model)"),S6e.forEach(t),qoo=i(S),Vn=n(S,"LI",{});var o$=s(Vn);Kte=n(o$,"STRONG",{});var xHr=s(Kte);joo=r(xHr,"data2vec-text"),xHr.forEach(t),Doo=r(o$," \u2014 "),PR=n(o$,"A",{href:!0});var $Hr=s(PR);Goo=r($Hr,"RobertaTokenizer"),$Hr.forEach(t),Ooo=r(o$," or "),BR=n(o$,"A",{href:!0});var kHr=s(BR);Voo=r(kHr,"RobertaTokenizerFast"),kHr.forEach(t),Xoo=r(o$," (Data2VecText model)"),o$.forEach(t),zoo=i(S),Xn=n(S,"LI",{});var r$=s(Xn);Zte=n(r$,"STRONG",{});var SHr=s(Zte);Woo=r(SHr,"deberta"),SHr.forEach(t),Qoo=r(r$," \u2014 "),IR=n(r$,"A",{href:!0});var RHr=s(IR);Hoo=r(RHr,"DebertaTokenizer"),RHr.forEach(t),Uoo=r(r$," or "),NR=n(r$,"A",{href:!0});var PHr=s(NR);Joo=r(PHr,"DebertaTokenizerFast"),PHr.forEach(t),Yoo=r(r$," (DeBERTa model)"),r$.forEach(t),Koo=i(S),zn=n(S,"LI",{});var t$=s(zn);eae=n(t$,"STRONG",{});var BHr=s(eae);Zoo=r(BHr,"deberta-v2"),BHr.forEach(t),ero=r(t$," \u2014 "),qR=n(t$,"A",{href:!0});var IHr=s(qR);oro=r(IHr,"DebertaV2Tokenizer"),IHr.forEach(t),rro=r(t$," or "),jR=n(t$,"A",{href:!0});var NHr=s(jR);tro=r(NHr,"DebertaV2TokenizerFast"),NHr.forEach(t),aro=r(t$," (DeBERTa-v2 model)"),t$.forEach(t),nro=i(S),Wn=n(S,"LI",{});var a$=s(Wn);oae=n(a$,"STRONG",{});var qHr=s(oae);sro=r(qHr,"distilbert"),qHr.forEach(t),lro=r(a$," \u2014 "),DR=n(a$,"A",{href:!0});var jHr=s(DR);iro=r(jHr,"DistilBertTokenizer"),jHr.forEach(t),dro=r(a$," or "),GR=n(a$,"A",{href:!0});var DHr=s(GR);cro=r(DHr,"DistilBertTokenizerFast"),DHr.forEach(t),mro=r(a$," (DistilBERT model)"),a$.forEach(t),fro=i(S),Qn=n(S,"LI",{});var n$=s(Qn);rae=n(n$,"STRONG",{});var GHr=s(rae);gro=r(GHr,"dpr"),GHr.forEach(t),hro=r(n$," \u2014 "),OR=n(n$,"A",{href:!0});var OHr=s(OR);uro=r(OHr,"DPRQuestionEncoderTokenizer"),OHr.forEach(t),pro=r(n$," or "),VR=n(n$,"A",{href:!0});var VHr=s(VR);_ro=r(VHr,"DPRQuestionEncoderTokenizerFast"),VHr.forEach(t),bro=r(n$," (DPR model)"),n$.forEach(t),vro=i(S),Hn=n(S,"LI",{});var s$=s(Hn);tae=n(s$,"STRONG",{});var XHr=s(tae);Fro=r(XHr,"electra"),XHr.forEach(t),Tro=r(s$," \u2014 "),XR=n(s$,"A",{href:!0});var zHr=s(XR);Mro=r(zHr,"ElectraTokenizer"),zHr.forEach(t),Ero=r(s$," or "),zR=n(s$,"A",{href:!0});var WHr=s(zR);Cro=r(WHr,"ElectraTokenizerFast"),WHr.forEach(t),wro=r(s$," (ELECTRA model)"),s$.forEach(t),Aro=i(S),Pg=n(S,"LI",{});var R6e=s(Pg);aae=n(R6e,"STRONG",{});var QHr=s(aae);yro=r(QHr,"flaubert"),QHr.forEach(t),Lro=r(R6e," \u2014 "),WR=n(R6e,"A",{href:!0});var HHr=s(WR);xro=r(HHr,"FlaubertTokenizer"),HHr.forEach(t),$ro=r(R6e," (FlauBERT model)"),R6e.forEach(t),kro=i(S),Un=n(S,"LI",{});var l$=s(Un);nae=n(l$,"STRONG",{});var UHr=s(nae);Sro=r(UHr,"fnet"),UHr.forEach(t),Rro=r(l$," \u2014 "),QR=n(l$,"A",{href:!0});var JHr=s(QR);Pro=r(JHr,"FNetTokenizer"),JHr.forEach(t),Bro=r(l$," or "),HR=n(l$,"A",{href:!0});var YHr=s(HR);Iro=r(YHr,"FNetTokenizerFast"),YHr.forEach(t),Nro=r(l$," (FNet model)"),l$.forEach(t),qro=i(S),Bg=n(S,"LI",{});var P6e=s(Bg);sae=n(P6e,"STRONG",{});var KHr=s(sae);jro=r(KHr,"fsmt"),KHr.forEach(t),Dro=r(P6e," \u2014 "),UR=n(P6e,"A",{href:!0});var ZHr=s(UR);Gro=r(ZHr,"FSMTTokenizer"),ZHr.forEach(t),Oro=r(P6e," (FairSeq Machine-Translation model)"),P6e.forEach(t),Vro=i(S),Jn=n(S,"LI",{});var i$=s(Jn);lae=n(i$,"STRONG",{});var eUr=s(lae);Xro=r(eUr,"funnel"),eUr.forEach(t),zro=r(i$," \u2014 "),JR=n(i$,"A",{href:!0});var oUr=s(JR);Wro=r(oUr,"FunnelTokenizer"),oUr.forEach(t),Qro=r(i$," or "),YR=n(i$,"A",{href:!0});var rUr=s(YR);Hro=r(rUr,"FunnelTokenizerFast"),rUr.forEach(t),Uro=r(i$," (Funnel Transformer model)"),i$.forEach(t),Jro=i(S),Yn=n(S,"LI",{});var d$=s(Yn);iae=n(d$,"STRONG",{});var tUr=s(iae);Yro=r(tUr,"gpt2"),tUr.forEach(t),Kro=r(d$," \u2014 "),KR=n(d$,"A",{href:!0});var aUr=s(KR);Zro=r(aUr,"GPT2Tokenizer"),aUr.forEach(t),eto=r(d$," or "),ZR=n(d$,"A",{href:!0});var nUr=s(ZR);oto=r(nUr,"GPT2TokenizerFast"),nUr.forEach(t),rto=r(d$," (OpenAI GPT-2 model)"),d$.forEach(t),tto=i(S),Kn=n(S,"LI",{});var c$=s(Kn);dae=n(c$,"STRONG",{});var sUr=s(dae);ato=r(sUr,"gpt_neo"),sUr.forEach(t),nto=r(c$," \u2014 "),eP=n(c$,"A",{href:!0});var lUr=s(eP);sto=r(lUr,"GPT2Tokenizer"),lUr.forEach(t),lto=r(c$," or "),oP=n(c$,"A",{href:!0});var iUr=s(oP);ito=r(iUr,"GPT2TokenizerFast"),iUr.forEach(t),dto=r(c$," (GPT Neo model)"),c$.forEach(t),cto=i(S),Ig=n(S,"LI",{});var B6e=s(Ig);cae=n(B6e,"STRONG",{});var dUr=s(cae);mto=r(dUr,"gpt_neox"),dUr.forEach(t),fto=r(B6e," \u2014 "),rP=n(B6e,"A",{href:!0});var cUr=s(rP);gto=r(cUr,"GPTNeoXTokenizerFast"),cUr.forEach(t),hto=r(B6e," (GPT NeoX model)"),B6e.forEach(t),uto=i(S),Zn=n(S,"LI",{});var m$=s(Zn);mae=n(m$,"STRONG",{});var mUr=s(mae);pto=r(mUr,"gptj"),mUr.forEach(t),_to=r(m$," \u2014 "),tP=n(m$,"A",{href:!0});var fUr=s(tP);bto=r(fUr,"GPT2Tokenizer"),fUr.forEach(t),vto=r(m$," or "),aP=n(m$,"A",{href:!0});var gUr=s(aP);Fto=r(gUr,"GPT2TokenizerFast"),gUr.forEach(t),Tto=r(m$," (GPT-J model)"),m$.forEach(t),Mto=i(S),es=n(S,"LI",{});var f$=s(es);fae=n(f$,"STRONG",{});var hUr=s(fae);Eto=r(hUr,"herbert"),hUr.forEach(t),Cto=r(f$," \u2014 "),nP=n(f$,"A",{href:!0});var uUr=s(nP);wto=r(uUr,"HerbertTokenizer"),uUr.forEach(t),Ato=r(f$," or "),sP=n(f$,"A",{href:!0});var pUr=s(sP);yto=r(pUr,"HerbertTokenizerFast"),pUr.forEach(t),Lto=r(f$," (HerBERT model)"),f$.forEach(t),xto=i(S),Ng=n(S,"LI",{});var I6e=s(Ng);gae=n(I6e,"STRONG",{});var _Ur=s(gae);$to=r(_Ur,"hubert"),_Ur.forEach(t),kto=r(I6e," \u2014 "),lP=n(I6e,"A",{href:!0});var bUr=s(lP);Sto=r(bUr,"Wav2Vec2CTCTokenizer"),bUr.forEach(t),Rto=r(I6e," (Hubert model)"),I6e.forEach(t),Pto=i(S),os=n(S,"LI",{});var g$=s(os);hae=n(g$,"STRONG",{});var vUr=s(hae);Bto=r(vUr,"ibert"),vUr.forEach(t),Ito=r(g$," \u2014 "),iP=n(g$,"A",{href:!0});var FUr=s(iP);Nto=r(FUr,"RobertaTokenizer"),FUr.forEach(t),qto=r(g$," or "),dP=n(g$,"A",{href:!0});var TUr=s(dP);jto=r(TUr,"RobertaTokenizerFast"),TUr.forEach(t),Dto=r(g$," (I-BERT model)"),g$.forEach(t),Gto=i(S),rs=n(S,"LI",{});var h$=s(rs);uae=n(h$,"STRONG",{});var MUr=s(uae);Oto=r(MUr,"layoutlm"),MUr.forEach(t),Vto=r(h$," \u2014 "),cP=n(h$,"A",{href:!0});var EUr=s(cP);Xto=r(EUr,"LayoutLMTokenizer"),EUr.forEach(t),zto=r(h$," or "),mP=n(h$,"A",{href:!0});var CUr=s(mP);Wto=r(CUr,"LayoutLMTokenizerFast"),CUr.forEach(t),Qto=r(h$," (LayoutLM model)"),h$.forEach(t),Hto=i(S),ts=n(S,"LI",{});var u$=s(ts);pae=n(u$,"STRONG",{});var wUr=s(pae);Uto=r(wUr,"layoutlmv2"),wUr.forEach(t),Jto=r(u$," \u2014 "),fP=n(u$,"A",{href:!0});var AUr=s(fP);Yto=r(AUr,"LayoutLMv2Tokenizer"),AUr.forEach(t),Kto=r(u$," or "),gP=n(u$,"A",{href:!0});var yUr=s(gP);Zto=r(yUr,"LayoutLMv2TokenizerFast"),yUr.forEach(t),eao=r(u$," (LayoutLMv2 model)"),u$.forEach(t),oao=i(S),as=n(S,"LI",{});var p$=s(as);_ae=n(p$,"STRONG",{});var LUr=s(_ae);rao=r(LUr,"layoutlmv3"),LUr.forEach(t),tao=r(p$," \u2014 "),hP=n(p$,"A",{href:!0});var xUr=s(hP);aao=r(xUr,"LayoutLMv3Tokenizer"),xUr.forEach(t),nao=r(p$," or "),uP=n(p$,"A",{href:!0});var $Ur=s(uP);sao=r($Ur,"LayoutLMv3TokenizerFast"),$Ur.forEach(t),lao=r(p$," (LayoutLMv3 model)"),p$.forEach(t),iao=i(S),ns=n(S,"LI",{});var _$=s(ns);bae=n(_$,"STRONG",{});var kUr=s(bae);dao=r(kUr,"layoutxlm"),kUr.forEach(t),cao=r(_$," \u2014 "),pP=n(_$,"A",{href:!0});var SUr=s(pP);mao=r(SUr,"LayoutXLMTokenizer"),SUr.forEach(t),fao=r(_$," or "),_P=n(_$,"A",{href:!0});var RUr=s(_P);gao=r(RUr,"LayoutXLMTokenizerFast"),RUr.forEach(t),hao=r(_$," (LayoutXLM model)"),_$.forEach(t),uao=i(S),ss=n(S,"LI",{});var b$=s(ss);vae=n(b$,"STRONG",{});var PUr=s(vae);pao=r(PUr,"led"),PUr.forEach(t),_ao=r(b$," \u2014 "),bP=n(b$,"A",{href:!0});var BUr=s(bP);bao=r(BUr,"LEDTokenizer"),BUr.forEach(t),vao=r(b$," or "),vP=n(b$,"A",{href:!0});var IUr=s(vP);Fao=r(IUr,"LEDTokenizerFast"),IUr.forEach(t),Tao=r(b$," (LED model)"),b$.forEach(t),Mao=i(S),ls=n(S,"LI",{});var v$=s(ls);Fae=n(v$,"STRONG",{});var NUr=s(Fae);Eao=r(NUr,"longformer"),NUr.forEach(t),Cao=r(v$," \u2014 "),FP=n(v$,"A",{href:!0});var qUr=s(FP);wao=r(qUr,"LongformerTokenizer"),qUr.forEach(t),Aao=r(v$," or "),TP=n(v$,"A",{href:!0});var jUr=s(TP);yao=r(jUr,"LongformerTokenizerFast"),jUr.forEach(t),Lao=r(v$," (Longformer model)"),v$.forEach(t),xao=i(S),qg=n(S,"LI",{});var N6e=s(qg);Tae=n(N6e,"STRONG",{});var DUr=s(Tae);$ao=r(DUr,"luke"),DUr.forEach(t),kao=r(N6e," \u2014 "),MP=n(N6e,"A",{href:!0});var GUr=s(MP);Sao=r(GUr,"LukeTokenizer"),GUr.forEach(t),Rao=r(N6e," (LUKE model)"),N6e.forEach(t),Pao=i(S),is=n(S,"LI",{});var F$=s(is);Mae=n(F$,"STRONG",{});var OUr=s(Mae);Bao=r(OUr,"lxmert"),OUr.forEach(t),Iao=r(F$," \u2014 "),EP=n(F$,"A",{href:!0});var VUr=s(EP);Nao=r(VUr,"LxmertTokenizer"),VUr.forEach(t),qao=r(F$," or "),CP=n(F$,"A",{href:!0});var XUr=s(CP);jao=r(XUr,"LxmertTokenizerFast"),XUr.forEach(t),Dao=r(F$," (LXMERT model)"),F$.forEach(t),Gao=i(S),jg=n(S,"LI",{});var q6e=s(jg);Eae=n(q6e,"STRONG",{});var zUr=s(Eae);Oao=r(zUr,"m2m_100"),zUr.forEach(t),Vao=r(q6e," \u2014 "),wP=n(q6e,"A",{href:!0});var WUr=s(wP);Xao=r(WUr,"M2M100Tokenizer"),WUr.forEach(t),zao=r(q6e," (M2M100 model)"),q6e.forEach(t),Wao=i(S),Dg=n(S,"LI",{});var j6e=s(Dg);Cae=n(j6e,"STRONG",{});var QUr=s(Cae);Qao=r(QUr,"marian"),QUr.forEach(t),Hao=r(j6e," \u2014 "),AP=n(j6e,"A",{href:!0});var HUr=s(AP);Uao=r(HUr,"MarianTokenizer"),HUr.forEach(t),Jao=r(j6e," (Marian model)"),j6e.forEach(t),Yao=i(S),ds=n(S,"LI",{});var T$=s(ds);wae=n(T$,"STRONG",{});var UUr=s(wae);Kao=r(UUr,"mbart"),UUr.forEach(t),Zao=r(T$," \u2014 "),yP=n(T$,"A",{href:!0});var JUr=s(yP);eno=r(JUr,"MBartTokenizer"),JUr.forEach(t),ono=r(T$," or "),LP=n(T$,"A",{href:!0});var YUr=s(LP);rno=r(YUr,"MBartTokenizerFast"),YUr.forEach(t),tno=r(T$," (mBART model)"),T$.forEach(t),ano=i(S),cs=n(S,"LI",{});var M$=s(cs);Aae=n(M$,"STRONG",{});var KUr=s(Aae);nno=r(KUr,"mbart50"),KUr.forEach(t),sno=r(M$," \u2014 "),xP=n(M$,"A",{href:!0});var ZUr=s(xP);lno=r(ZUr,"MBart50Tokenizer"),ZUr.forEach(t),ino=r(M$," or "),$P=n(M$,"A",{href:!0});var eJr=s($P);dno=r(eJr,"MBart50TokenizerFast"),eJr.forEach(t),cno=r(M$," (mBART-50 model)"),M$.forEach(t),mno=i(S),ms=n(S,"LI",{});var E$=s(ms);yae=n(E$,"STRONG",{});var oJr=s(yae);fno=r(oJr,"megatron-bert"),oJr.forEach(t),gno=r(E$," \u2014 "),kP=n(E$,"A",{href:!0});var rJr=s(kP);hno=r(rJr,"BertTokenizer"),rJr.forEach(t),uno=r(E$," or "),SP=n(E$,"A",{href:!0});var tJr=s(SP);pno=r(tJr,"BertTokenizerFast"),tJr.forEach(t),_no=r(E$," (MegatronBert model)"),E$.forEach(t),bno=i(S),Gg=n(S,"LI",{});var D6e=s(Gg);Lae=n(D6e,"STRONG",{});var aJr=s(Lae);vno=r(aJr,"mluke"),aJr.forEach(t),Fno=r(D6e," \u2014 "),RP=n(D6e,"A",{href:!0});var nJr=s(RP);Tno=r(nJr,"MLukeTokenizer"),nJr.forEach(t),Mno=r(D6e," (mLUKE model)"),D6e.forEach(t),Eno=i(S),fs=n(S,"LI",{});var C$=s(fs);xae=n(C$,"STRONG",{});var sJr=s(xae);Cno=r(sJr,"mobilebert"),sJr.forEach(t),wno=r(C$," \u2014 "),PP=n(C$,"A",{href:!0});var lJr=s(PP);Ano=r(lJr,"MobileBertTokenizer"),lJr.forEach(t),yno=r(C$," or "),BP=n(C$,"A",{href:!0});var iJr=s(BP);Lno=r(iJr,"MobileBertTokenizerFast"),iJr.forEach(t),xno=r(C$," (MobileBERT model)"),C$.forEach(t),$no=i(S),gs=n(S,"LI",{});var w$=s(gs);$ae=n(w$,"STRONG",{});var dJr=s($ae);kno=r(dJr,"mpnet"),dJr.forEach(t),Sno=r(w$," \u2014 "),IP=n(w$,"A",{href:!0});var cJr=s(IP);Rno=r(cJr,"MPNetTokenizer"),cJr.forEach(t),Pno=r(w$," or "),NP=n(w$,"A",{href:!0});var mJr=s(NP);Bno=r(mJr,"MPNetTokenizerFast"),mJr.forEach(t),Ino=r(w$," (MPNet model)"),w$.forEach(t),Nno=i(S),hs=n(S,"LI",{});var A$=s(hs);kae=n(A$,"STRONG",{});var fJr=s(kae);qno=r(fJr,"mt5"),fJr.forEach(t),jno=r(A$," \u2014 "),qP=n(A$,"A",{href:!0});var gJr=s(qP);Dno=r(gJr,"MT5Tokenizer"),gJr.forEach(t),Gno=r(A$," or "),jP=n(A$,"A",{href:!0});var hJr=s(jP);Ono=r(hJr,"MT5TokenizerFast"),hJr.forEach(t),Vno=r(A$," (mT5 model)"),A$.forEach(t),Xno=i(S),us=n(S,"LI",{});var y$=s(us);Sae=n(y$,"STRONG",{});var uJr=s(Sae);zno=r(uJr,"nystromformer"),uJr.forEach(t),Wno=r(y$," \u2014 "),DP=n(y$,"A",{href:!0});var pJr=s(DP);Qno=r(pJr,"AlbertTokenizer"),pJr.forEach(t),Hno=r(y$," or "),GP=n(y$,"A",{href:!0});var _Jr=s(GP);Uno=r(_Jr,"AlbertTokenizerFast"),_Jr.forEach(t),Jno=r(y$," (Nystromformer model)"),y$.forEach(t),Yno=i(S),ps=n(S,"LI",{});var L$=s(ps);Rae=n(L$,"STRONG",{});var bJr=s(Rae);Kno=r(bJr,"openai-gpt"),bJr.forEach(t),Zno=r(L$," \u2014 "),OP=n(L$,"A",{href:!0});var vJr=s(OP);eso=r(vJr,"OpenAIGPTTokenizer"),vJr.forEach(t),oso=r(L$," or "),VP=n(L$,"A",{href:!0});var FJr=s(VP);rso=r(FJr,"OpenAIGPTTokenizerFast"),FJr.forEach(t),tso=r(L$," (OpenAI GPT model)"),L$.forEach(t),aso=i(S),Og=n(S,"LI",{});var G6e=s(Og);Pae=n(G6e,"STRONG",{});var TJr=s(Pae);nso=r(TJr,"opt"),TJr.forEach(t),sso=r(G6e," \u2014 "),XP=n(G6e,"A",{href:!0});var MJr=s(XP);lso=r(MJr,"GPT2Tokenizer"),MJr.forEach(t),iso=r(G6e," (OPT model)"),G6e.forEach(t),dso=i(S),_s=n(S,"LI",{});var x$=s(_s);Bae=n(x$,"STRONG",{});var EJr=s(Bae);cso=r(EJr,"pegasus"),EJr.forEach(t),mso=r(x$," \u2014 "),zP=n(x$,"A",{href:!0});var CJr=s(zP);fso=r(CJr,"PegasusTokenizer"),CJr.forEach(t),gso=r(x$," or "),WP=n(x$,"A",{href:!0});var wJr=s(WP);hso=r(wJr,"PegasusTokenizerFast"),wJr.forEach(t),uso=r(x$," (Pegasus model)"),x$.forEach(t),pso=i(S),Vg=n(S,"LI",{});var O6e=s(Vg);Iae=n(O6e,"STRONG",{});var AJr=s(Iae);_so=r(AJr,"perceiver"),AJr.forEach(t),bso=r(O6e," \u2014 "),QP=n(O6e,"A",{href:!0});var yJr=s(QP);vso=r(yJr,"PerceiverTokenizer"),yJr.forEach(t),Fso=r(O6e," (Perceiver model)"),O6e.forEach(t),Tso=i(S),Xg=n(S,"LI",{});var V6e=s(Xg);Nae=n(V6e,"STRONG",{});var LJr=s(Nae);Mso=r(LJr,"phobert"),LJr.forEach(t),Eso=r(V6e," \u2014 "),HP=n(V6e,"A",{href:!0});var xJr=s(HP);Cso=r(xJr,"PhobertTokenizer"),xJr.forEach(t),wso=r(V6e," (PhoBERT model)"),V6e.forEach(t),Aso=i(S),zg=n(S,"LI",{});var X6e=s(zg);qae=n(X6e,"STRONG",{});var $Jr=s(qae);yso=r($Jr,"plbart"),$Jr.forEach(t),Lso=r(X6e," \u2014 "),UP=n(X6e,"A",{href:!0});var kJr=s(UP);xso=r(kJr,"PLBartTokenizer"),kJr.forEach(t),$so=r(X6e," (PLBart model)"),X6e.forEach(t),kso=i(S),Wg=n(S,"LI",{});var z6e=s(Wg);jae=n(z6e,"STRONG",{});var SJr=s(jae);Sso=r(SJr,"prophetnet"),SJr.forEach(t),Rso=r(z6e," \u2014 "),JP=n(z6e,"A",{href:!0});var RJr=s(JP);Pso=r(RJr,"ProphetNetTokenizer"),RJr.forEach(t),Bso=r(z6e," (ProphetNet model)"),z6e.forEach(t),Iso=i(S),bs=n(S,"LI",{});var $$=s(bs);Dae=n($$,"STRONG",{});var PJr=s(Dae);Nso=r(PJr,"qdqbert"),PJr.forEach(t),qso=r($$," \u2014 "),YP=n($$,"A",{href:!0});var BJr=s(YP);jso=r(BJr,"BertTokenizer"),BJr.forEach(t),Dso=r($$," or "),KP=n($$,"A",{href:!0});var IJr=s(KP);Gso=r(IJr,"BertTokenizerFast"),IJr.forEach(t),Oso=r($$," (QDQBert model)"),$$.forEach(t),Vso=i(S),Qg=n(S,"LI",{});var W6e=s(Qg);Gae=n(W6e,"STRONG",{});var NJr=s(Gae);Xso=r(NJr,"rag"),NJr.forEach(t),zso=r(W6e," \u2014 "),ZP=n(W6e,"A",{href:!0});var qJr=s(ZP);Wso=r(qJr,"RagTokenizer"),qJr.forEach(t),Qso=r(W6e," (RAG model)"),W6e.forEach(t),Hso=i(S),vs=n(S,"LI",{});var k$=s(vs);Oae=n(k$,"STRONG",{});var jJr=s(Oae);Uso=r(jJr,"realm"),jJr.forEach(t),Jso=r(k$," \u2014 "),eB=n(k$,"A",{href:!0});var DJr=s(eB);Yso=r(DJr,"RealmTokenizer"),DJr.forEach(t),Kso=r(k$," or "),oB=n(k$,"A",{href:!0});var GJr=s(oB);Zso=r(GJr,"RealmTokenizerFast"),GJr.forEach(t),elo=r(k$," (Realm model)"),k$.forEach(t),olo=i(S),Fs=n(S,"LI",{});var S$=s(Fs);Vae=n(S$,"STRONG",{});var OJr=s(Vae);rlo=r(OJr,"reformer"),OJr.forEach(t),tlo=r(S$," \u2014 "),rB=n(S$,"A",{href:!0});var VJr=s(rB);alo=r(VJr,"ReformerTokenizer"),VJr.forEach(t),nlo=r(S$," or "),tB=n(S$,"A",{href:!0});var XJr=s(tB);slo=r(XJr,"ReformerTokenizerFast"),XJr.forEach(t),llo=r(S$," (Reformer model)"),S$.forEach(t),ilo=i(S),Ts=n(S,"LI",{});var R$=s(Ts);Xae=n(R$,"STRONG",{});var zJr=s(Xae);dlo=r(zJr,"rembert"),zJr.forEach(t),clo=r(R$," \u2014 "),aB=n(R$,"A",{href:!0});var WJr=s(aB);mlo=r(WJr,"RemBertTokenizer"),WJr.forEach(t),flo=r(R$," or "),nB=n(R$,"A",{href:!0});var QJr=s(nB);glo=r(QJr,"RemBertTokenizerFast"),QJr.forEach(t),hlo=r(R$," (RemBERT model)"),R$.forEach(t),ulo=i(S),Ms=n(S,"LI",{});var P$=s(Ms);zae=n(P$,"STRONG",{});var HJr=s(zae);plo=r(HJr,"retribert"),HJr.forEach(t),_lo=r(P$," \u2014 "),sB=n(P$,"A",{href:!0});var UJr=s(sB);blo=r(UJr,"RetriBertTokenizer"),UJr.forEach(t),vlo=r(P$," or "),lB=n(P$,"A",{href:!0});var JJr=s(lB);Flo=r(JJr,"RetriBertTokenizerFast"),JJr.forEach(t),Tlo=r(P$," (RetriBERT model)"),P$.forEach(t),Mlo=i(S),Es=n(S,"LI",{});var B$=s(Es);Wae=n(B$,"STRONG",{});var YJr=s(Wae);Elo=r(YJr,"roberta"),YJr.forEach(t),Clo=r(B$," \u2014 "),iB=n(B$,"A",{href:!0});var KJr=s(iB);wlo=r(KJr,"RobertaTokenizer"),KJr.forEach(t),Alo=r(B$," or "),dB=n(B$,"A",{href:!0});var ZJr=s(dB);ylo=r(ZJr,"RobertaTokenizerFast"),ZJr.forEach(t),Llo=r(B$," (RoBERTa model)"),B$.forEach(t),xlo=i(S),Cs=n(S,"LI",{});var I$=s(Cs);Qae=n(I$,"STRONG",{});var eYr=s(Qae);$lo=r(eYr,"roformer"),eYr.forEach(t),klo=r(I$," \u2014 "),cB=n(I$,"A",{href:!0});var oYr=s(cB);Slo=r(oYr,"RoFormerTokenizer"),oYr.forEach(t),Rlo=r(I$," or "),mB=n(I$,"A",{href:!0});var rYr=s(mB);Plo=r(rYr,"RoFormerTokenizerFast"),rYr.forEach(t),Blo=r(I$," (RoFormer model)"),I$.forEach(t),Ilo=i(S),Hg=n(S,"LI",{});var Q6e=s(Hg);Hae=n(Q6e,"STRONG",{});var tYr=s(Hae);Nlo=r(tYr,"speech_to_text"),tYr.forEach(t),qlo=r(Q6e," \u2014 "),fB=n(Q6e,"A",{href:!0});var aYr=s(fB);jlo=r(aYr,"Speech2TextTokenizer"),aYr.forEach(t),Dlo=r(Q6e," (Speech2Text model)"),Q6e.forEach(t),Glo=i(S),Ug=n(S,"LI",{});var H6e=s(Ug);Uae=n(H6e,"STRONG",{});var nYr=s(Uae);Olo=r(nYr,"speech_to_text_2"),nYr.forEach(t),Vlo=r(H6e," \u2014 "),gB=n(H6e,"A",{href:!0});var sYr=s(gB);Xlo=r(sYr,"Speech2Text2Tokenizer"),sYr.forEach(t),zlo=r(H6e," (Speech2Text2 model)"),H6e.forEach(t),Wlo=i(S),ws=n(S,"LI",{});var N$=s(ws);Jae=n(N$,"STRONG",{});var lYr=s(Jae);Qlo=r(lYr,"splinter"),lYr.forEach(t),Hlo=r(N$," \u2014 "),hB=n(N$,"A",{href:!0});var iYr=s(hB);Ulo=r(iYr,"SplinterTokenizer"),iYr.forEach(t),Jlo=r(N$," or "),uB=n(N$,"A",{href:!0});var dYr=s(uB);Ylo=r(dYr,"SplinterTokenizerFast"),dYr.forEach(t),Klo=r(N$," (Splinter model)"),N$.forEach(t),Zlo=i(S),As=n(S,"LI",{});var q$=s(As);Yae=n(q$,"STRONG",{});var cYr=s(Yae);eio=r(cYr,"squeezebert"),cYr.forEach(t),oio=r(q$," \u2014 "),pB=n(q$,"A",{href:!0});var mYr=s(pB);rio=r(mYr,"SqueezeBertTokenizer"),mYr.forEach(t),tio=r(q$," or "),_B=n(q$,"A",{href:!0});var fYr=s(_B);aio=r(fYr,"SqueezeBertTokenizerFast"),fYr.forEach(t),nio=r(q$," (SqueezeBERT model)"),q$.forEach(t),sio=i(S),ys=n(S,"LI",{});var j$=s(ys);Kae=n(j$,"STRONG",{});var gYr=s(Kae);lio=r(gYr,"t5"),gYr.forEach(t),iio=r(j$," \u2014 "),bB=n(j$,"A",{href:!0});var hYr=s(bB);dio=r(hYr,"T5Tokenizer"),hYr.forEach(t),cio=r(j$," or "),vB=n(j$,"A",{href:!0});var uYr=s(vB);mio=r(uYr,"T5TokenizerFast"),uYr.forEach(t),fio=r(j$," (T5 model)"),j$.forEach(t),gio=i(S),Jg=n(S,"LI",{});var U6e=s(Jg);Zae=n(U6e,"STRONG",{});var pYr=s(Zae);hio=r(pYr,"tapas"),pYr.forEach(t),uio=r(U6e," \u2014 "),FB=n(U6e,"A",{href:!0});var _Yr=s(FB);pio=r(_Yr,"TapasTokenizer"),_Yr.forEach(t),_io=r(U6e," (TAPAS model)"),U6e.forEach(t),bio=i(S),Yg=n(S,"LI",{});var J6e=s(Yg);ene=n(J6e,"STRONG",{});var bYr=s(ene);vio=r(bYr,"tapex"),bYr.forEach(t),Fio=r(J6e," \u2014 "),TB=n(J6e,"A",{href:!0});var vYr=s(TB);Tio=r(vYr,"TapexTokenizer"),vYr.forEach(t),Mio=r(J6e," (TAPEX model)"),J6e.forEach(t),Eio=i(S),Kg=n(S,"LI",{});var Y6e=s(Kg);one=n(Y6e,"STRONG",{});var FYr=s(one);Cio=r(FYr,"transfo-xl"),FYr.forEach(t),wio=r(Y6e," \u2014 "),MB=n(Y6e,"A",{href:!0});var TYr=s(MB);Aio=r(TYr,"TransfoXLTokenizer"),TYr.forEach(t),yio=r(Y6e," (Transformer-XL model)"),Y6e.forEach(t),Lio=i(S),Ls=n(S,"LI",{});var D$=s(Ls);rne=n(D$,"STRONG",{});var MYr=s(rne);xio=r(MYr,"visual_bert"),MYr.forEach(t),$io=r(D$," \u2014 "),EB=n(D$,"A",{href:!0});var EYr=s(EB);kio=r(EYr,"BertTokenizer"),EYr.forEach(t),Sio=r(D$," or "),CB=n(D$,"A",{href:!0});var CYr=s(CB);Rio=r(CYr,"BertTokenizerFast"),CYr.forEach(t),Pio=r(D$," (VisualBert model)"),D$.forEach(t),Bio=i(S),Zg=n(S,"LI",{});var K6e=s(Zg);tne=n(K6e,"STRONG",{});var wYr=s(tne);Iio=r(wYr,"wav2vec2"),wYr.forEach(t),Nio=r(K6e," \u2014 "),wB=n(K6e,"A",{href:!0});var AYr=s(wB);qio=r(AYr,"Wav2Vec2CTCTokenizer"),AYr.forEach(t),jio=r(K6e," (Wav2Vec2 model)"),K6e.forEach(t),Dio=i(S),eh=n(S,"LI",{});var Z6e=s(eh);ane=n(Z6e,"STRONG",{});var yYr=s(ane);Gio=r(yYr,"wav2vec2-conformer"),yYr.forEach(t),Oio=r(Z6e," \u2014 "),AB=n(Z6e,"A",{href:!0});var LYr=s(AB);Vio=r(LYr,"Wav2Vec2CTCTokenizer"),LYr.forEach(t),Xio=r(Z6e," (Wav2Vec2-Conformer model)"),Z6e.forEach(t),zio=i(S),oh=n(S,"LI",{});var eAe=s(oh);nne=n(eAe,"STRONG",{});var xYr=s(nne);Wio=r(xYr,"wav2vec2_phoneme"),xYr.forEach(t),Qio=r(eAe," \u2014 "),yB=n(eAe,"A",{href:!0});var $Yr=s(yB);Hio=r($Yr,"Wav2Vec2PhonemeCTCTokenizer"),$Yr.forEach(t),Uio=r(eAe," (Wav2Vec2Phoneme model)"),eAe.forEach(t),Jio=i(S),xs=n(S,"LI",{});var G$=s(xs);sne=n(G$,"STRONG",{});var kYr=s(sne);Yio=r(kYr,"xglm"),kYr.forEach(t),Kio=r(G$," \u2014 "),LB=n(G$,"A",{href:!0});var SYr=s(LB);Zio=r(SYr,"XGLMTokenizer"),SYr.forEach(t),edo=r(G$," or "),xB=n(G$,"A",{href:!0});var RYr=s(xB);odo=r(RYr,"XGLMTokenizerFast"),RYr.forEach(t),rdo=r(G$," (XGLM model)"),G$.forEach(t),tdo=i(S),rh=n(S,"LI",{});var oAe=s(rh);lne=n(oAe,"STRONG",{});var PYr=s(lne);ado=r(PYr,"xlm"),PYr.forEach(t),ndo=r(oAe," \u2014 "),$B=n(oAe,"A",{href:!0});var BYr=s($B);sdo=r(BYr,"XLMTokenizer"),BYr.forEach(t),ldo=r(oAe," (XLM model)"),oAe.forEach(t),ido=i(S),th=n(S,"LI",{});var rAe=s(th);ine=n(rAe,"STRONG",{});var IYr=s(ine);ddo=r(IYr,"xlm-prophetnet"),IYr.forEach(t),cdo=r(rAe," \u2014 "),kB=n(rAe,"A",{href:!0});var NYr=s(kB);mdo=r(NYr,"XLMProphetNetTokenizer"),NYr.forEach(t),fdo=r(rAe," (XLMProphetNet model)"),rAe.forEach(t),gdo=i(S),$s=n(S,"LI",{});var O$=s($s);dne=n(O$,"STRONG",{});var qYr=s(dne);hdo=r(qYr,"xlm-roberta"),qYr.forEach(t),udo=r(O$," \u2014 "),SB=n(O$,"A",{href:!0});var jYr=s(SB);pdo=r(jYr,"XLMRobertaTokenizer"),jYr.forEach(t),_do=r(O$," or "),RB=n(O$,"A",{href:!0});var DYr=s(RB);bdo=r(DYr,"XLMRobertaTokenizerFast"),DYr.forEach(t),vdo=r(O$," (XLM-RoBERTa model)"),O$.forEach(t),Fdo=i(S),ks=n(S,"LI",{});var V$=s(ks);cne=n(V$,"STRONG",{});var GYr=s(cne);Tdo=r(GYr,"xlm-roberta-xl"),GYr.forEach(t),Mdo=r(V$," \u2014 "),PB=n(V$,"A",{href:!0});var OYr=s(PB);Edo=r(OYr,"RobertaTokenizer"),OYr.forEach(t),Cdo=r(V$," or "),BB=n(V$,"A",{href:!0});var VYr=s(BB);wdo=r(VYr,"RobertaTokenizerFast"),VYr.forEach(t),Ado=r(V$," (XLM-RoBERTa-XL model)"),V$.forEach(t),ydo=i(S),Ss=n(S,"LI",{});var X$=s(Ss);mne=n(X$,"STRONG",{});var XYr=s(mne);Ldo=r(XYr,"xlnet"),XYr.forEach(t),xdo=r(X$," \u2014 "),IB=n(X$,"A",{href:!0});var zYr=s(IB);$do=r(zYr,"XLNetTokenizer"),zYr.forEach(t),kdo=r(X$," or "),NB=n(X$,"A",{href:!0});var WYr=s(NB);Sdo=r(WYr,"XLNetTokenizerFast"),WYr.forEach(t),Rdo=r(X$," (XLNet model)"),X$.forEach(t),Pdo=i(S),Rs=n(S,"LI",{});var z$=s(Rs);fne=n(z$,"STRONG",{});var QYr=s(fne);Bdo=r(QYr,"yoso"),QYr.forEach(t),Ido=r(z$," \u2014 "),qB=n(z$,"A",{href:!0});var HYr=s(qB);Ndo=r(HYr,"AlbertTokenizer"),HYr.forEach(t),qdo=r(z$," or "),jB=n(z$,"A",{href:!0});var UYr=s(jB);jdo=r(UYr,"AlbertTokenizerFast"),UYr.forEach(t),Ddo=r(z$," (YOSO model)"),z$.forEach(t),S.forEach(t),Gdo=i(qs),T(ah.$$.fragment,qs),qs.forEach(t),Odo=i(Ns),nh=n(Ns,"DIV",{class:!0});var MDe=s(nh);T(Xy.$$.fragment,MDe),Vdo=i(MDe),gne=n(MDe,"P",{});var JYr=s(gne);Xdo=r(JYr,"Register a new tokenizer in this mapping."),JYr.forEach(t),MDe.forEach(t),Ns.forEach(t),Eqe=i(m),Mi=n(m,"H2",{class:!0});var EDe=s(Mi);sh=n(EDe,"A",{id:!0,class:!0,href:!0});var YYr=s(sh);hne=n(YYr,"SPAN",{});var KYr=s(hne);T(zy.$$.fragment,KYr),KYr.forEach(t),YYr.forEach(t),zdo=i(EDe),une=n(EDe,"SPAN",{});var ZYr=s(une);Wdo=r(ZYr,"AutoFeatureExtractor"),ZYr.forEach(t),EDe.forEach(t),Cqe=i(m),Ao=n(m,"DIV",{class:!0});var js=s(Ao);T(Wy.$$.fragment,js),Qdo=i(js),Qy=n(js,"P",{});var CDe=s(Qy);Hdo=r(CDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DB=n(CDe,"A",{href:!0});var eKr=s(DB);Udo=r(eKr,"AutoFeatureExtractor.from_pretrained()"),eKr.forEach(t),Jdo=r(CDe," class method."),CDe.forEach(t),Ydo=i(js),Hy=n(js,"P",{});var wDe=s(Hy);Kdo=r(wDe,"This class cannot be instantiated directly using "),pne=n(wDe,"CODE",{});var oKr=s(pne);Zdo=r(oKr,"__init__()"),oKr.forEach(t),eco=r(wDe," (throws an error)."),wDe.forEach(t),oco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(Uy.$$.fragment,Zt),rco=i(Zt),_ne=n(Zt,"P",{});var rKr=s(_ne);tco=r(rKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rKr.forEach(t),aco=i(Zt),ya=n(Zt,"P",{});var P6=s(ya);nco=r(P6,"The feature extractor class to instantiate is selected based on the "),bne=n(P6,"CODE",{});var tKr=s(bne);sco=r(tKr,"model_type"),tKr.forEach(t),lco=r(P6,` property of the config object
(either passed as an argument or loaded from `),vne=n(P6,"CODE",{});var aKr=s(vne);ico=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),dco=r(P6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fne=n(P6,"CODE",{});var nKr=s(Fne);cco=r(nKr,"pretrained_model_name_or_path"),nKr.forEach(t),mco=r(P6,":"),P6.forEach(t),fco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var tAe=s(lh);Tne=n(tAe,"STRONG",{});var sKr=s(Tne);gco=r(sKr,"beit"),sKr.forEach(t),hco=r(tAe," \u2014 "),GB=n(tAe,"A",{href:!0});var lKr=s(GB);uco=r(lKr,"BeitFeatureExtractor"),lKr.forEach(t),pco=r(tAe," (BEiT model)"),tAe.forEach(t),_co=i(Z),ih=n(Z,"LI",{});var aAe=s(ih);Mne=n(aAe,"STRONG",{});var iKr=s(Mne);bco=r(iKr,"clip"),iKr.forEach(t),vco=r(aAe," \u2014 "),OB=n(aAe,"A",{href:!0});var dKr=s(OB);Fco=r(dKr,"CLIPFeatureExtractor"),dKr.forEach(t),Tco=r(aAe," (CLIP model)"),aAe.forEach(t),Mco=i(Z),dh=n(Z,"LI",{});var nAe=s(dh);Ene=n(nAe,"STRONG",{});var cKr=s(Ene);Eco=r(cKr,"convnext"),cKr.forEach(t),Cco=r(nAe," \u2014 "),VB=n(nAe,"A",{href:!0});var mKr=s(VB);wco=r(mKr,"ConvNextFeatureExtractor"),mKr.forEach(t),Aco=r(nAe," (ConvNext model)"),nAe.forEach(t),yco=i(Z),ch=n(Z,"LI",{});var sAe=s(ch);Cne=n(sAe,"STRONG",{});var fKr=s(Cne);Lco=r(fKr,"cvt"),fKr.forEach(t),xco=r(sAe," \u2014 "),XB=n(sAe,"A",{href:!0});var gKr=s(XB);$co=r(gKr,"ConvNextFeatureExtractor"),gKr.forEach(t),kco=r(sAe," (CvT model)"),sAe.forEach(t),Sco=i(Z),mh=n(Z,"LI",{});var lAe=s(mh);wne=n(lAe,"STRONG",{});var hKr=s(wne);Rco=r(hKr,"data2vec-audio"),hKr.forEach(t),Pco=r(lAe," \u2014 "),zB=n(lAe,"A",{href:!0});var uKr=s(zB);Bco=r(uKr,"Wav2Vec2FeatureExtractor"),uKr.forEach(t),Ico=r(lAe," (Data2VecAudio model)"),lAe.forEach(t),Nco=i(Z),fh=n(Z,"LI",{});var iAe=s(fh);Ane=n(iAe,"STRONG",{});var pKr=s(Ane);qco=r(pKr,"data2vec-vision"),pKr.forEach(t),jco=r(iAe," \u2014 "),WB=n(iAe,"A",{href:!0});var _Kr=s(WB);Dco=r(_Kr,"BeitFeatureExtractor"),_Kr.forEach(t),Gco=r(iAe," (Data2VecVision model)"),iAe.forEach(t),Oco=i(Z),gh=n(Z,"LI",{});var dAe=s(gh);yne=n(dAe,"STRONG",{});var bKr=s(yne);Vco=r(bKr,"deit"),bKr.forEach(t),Xco=r(dAe," \u2014 "),QB=n(dAe,"A",{href:!0});var vKr=s(QB);zco=r(vKr,"DeiTFeatureExtractor"),vKr.forEach(t),Wco=r(dAe," (DeiT model)"),dAe.forEach(t),Qco=i(Z),hh=n(Z,"LI",{});var cAe=s(hh);Lne=n(cAe,"STRONG",{});var FKr=s(Lne);Hco=r(FKr,"detr"),FKr.forEach(t),Uco=r(cAe," \u2014 "),HB=n(cAe,"A",{href:!0});var TKr=s(HB);Jco=r(TKr,"DetrFeatureExtractor"),TKr.forEach(t),Yco=r(cAe," (DETR model)"),cAe.forEach(t),Kco=i(Z),uh=n(Z,"LI",{});var mAe=s(uh);xne=n(mAe,"STRONG",{});var MKr=s(xne);Zco=r(MKr,"dpt"),MKr.forEach(t),emo=r(mAe," \u2014 "),UB=n(mAe,"A",{href:!0});var EKr=s(UB);omo=r(EKr,"DPTFeatureExtractor"),EKr.forEach(t),rmo=r(mAe," (DPT model)"),mAe.forEach(t),tmo=i(Z),ph=n(Z,"LI",{});var fAe=s(ph);$ne=n(fAe,"STRONG",{});var CKr=s($ne);amo=r(CKr,"flava"),CKr.forEach(t),nmo=r(fAe," \u2014 "),JB=n(fAe,"A",{href:!0});var wKr=s(JB);smo=r(wKr,"FlavaFeatureExtractor"),wKr.forEach(t),lmo=r(fAe," (Flava model)"),fAe.forEach(t),imo=i(Z),_h=n(Z,"LI",{});var gAe=s(_h);kne=n(gAe,"STRONG",{});var AKr=s(kne);dmo=r(AKr,"glpn"),AKr.forEach(t),cmo=r(gAe," \u2014 "),YB=n(gAe,"A",{href:!0});var yKr=s(YB);mmo=r(yKr,"GLPNFeatureExtractor"),yKr.forEach(t),fmo=r(gAe," (GLPN model)"),gAe.forEach(t),gmo=i(Z),bh=n(Z,"LI",{});var hAe=s(bh);Sne=n(hAe,"STRONG",{});var LKr=s(Sne);hmo=r(LKr,"hubert"),LKr.forEach(t),umo=r(hAe," \u2014 "),KB=n(hAe,"A",{href:!0});var xKr=s(KB);pmo=r(xKr,"Wav2Vec2FeatureExtractor"),xKr.forEach(t),_mo=r(hAe," (Hubert model)"),hAe.forEach(t),bmo=i(Z),vh=n(Z,"LI",{});var uAe=s(vh);Rne=n(uAe,"STRONG",{});var $Kr=s(Rne);vmo=r($Kr,"imagegpt"),$Kr.forEach(t),Fmo=r(uAe," \u2014 "),ZB=n(uAe,"A",{href:!0});var kKr=s(ZB);Tmo=r(kKr,"ImageGPTFeatureExtractor"),kKr.forEach(t),Mmo=r(uAe," (ImageGPT model)"),uAe.forEach(t),Emo=i(Z),Fh=n(Z,"LI",{});var pAe=s(Fh);Pne=n(pAe,"STRONG",{});var SKr=s(Pne);Cmo=r(SKr,"layoutlmv2"),SKr.forEach(t),wmo=r(pAe," \u2014 "),eI=n(pAe,"A",{href:!0});var RKr=s(eI);Amo=r(RKr,"LayoutLMv2FeatureExtractor"),RKr.forEach(t),ymo=r(pAe," (LayoutLMv2 model)"),pAe.forEach(t),Lmo=i(Z),Th=n(Z,"LI",{});var _Ae=s(Th);Bne=n(_Ae,"STRONG",{});var PKr=s(Bne);xmo=r(PKr,"layoutlmv3"),PKr.forEach(t),$mo=r(_Ae," \u2014 "),oI=n(_Ae,"A",{href:!0});var BKr=s(oI);kmo=r(BKr,"LayoutLMv3FeatureExtractor"),BKr.forEach(t),Smo=r(_Ae," (LayoutLMv3 model)"),_Ae.forEach(t),Rmo=i(Z),Mh=n(Z,"LI",{});var bAe=s(Mh);Ine=n(bAe,"STRONG",{});var IKr=s(Ine);Pmo=r(IKr,"maskformer"),IKr.forEach(t),Bmo=r(bAe," \u2014 "),rI=n(bAe,"A",{href:!0});var NKr=s(rI);Imo=r(NKr,"MaskFormerFeatureExtractor"),NKr.forEach(t),Nmo=r(bAe," (MaskFormer model)"),bAe.forEach(t),qmo=i(Z),Eh=n(Z,"LI",{});var vAe=s(Eh);Nne=n(vAe,"STRONG",{});var qKr=s(Nne);jmo=r(qKr,"perceiver"),qKr.forEach(t),Dmo=r(vAe," \u2014 "),tI=n(vAe,"A",{href:!0});var jKr=s(tI);Gmo=r(jKr,"PerceiverFeatureExtractor"),jKr.forEach(t),Omo=r(vAe," (Perceiver model)"),vAe.forEach(t),Vmo=i(Z),Ch=n(Z,"LI",{});var FAe=s(Ch);qne=n(FAe,"STRONG",{});var DKr=s(qne);Xmo=r(DKr,"poolformer"),DKr.forEach(t),zmo=r(FAe," \u2014 "),aI=n(FAe,"A",{href:!0});var GKr=s(aI);Wmo=r(GKr,"PoolFormerFeatureExtractor"),GKr.forEach(t),Qmo=r(FAe," (PoolFormer model)"),FAe.forEach(t),Hmo=i(Z),wh=n(Z,"LI",{});var TAe=s(wh);jne=n(TAe,"STRONG",{});var OKr=s(jne);Umo=r(OKr,"regnet"),OKr.forEach(t),Jmo=r(TAe," \u2014 "),nI=n(TAe,"A",{href:!0});var VKr=s(nI);Ymo=r(VKr,"ConvNextFeatureExtractor"),VKr.forEach(t),Kmo=r(TAe," (RegNet model)"),TAe.forEach(t),Zmo=i(Z),Ah=n(Z,"LI",{});var MAe=s(Ah);Dne=n(MAe,"STRONG",{});var XKr=s(Dne);efo=r(XKr,"resnet"),XKr.forEach(t),ofo=r(MAe," \u2014 "),sI=n(MAe,"A",{href:!0});var zKr=s(sI);rfo=r(zKr,"ConvNextFeatureExtractor"),zKr.forEach(t),tfo=r(MAe," (ResNet model)"),MAe.forEach(t),afo=i(Z),yh=n(Z,"LI",{});var EAe=s(yh);Gne=n(EAe,"STRONG",{});var WKr=s(Gne);nfo=r(WKr,"segformer"),WKr.forEach(t),sfo=r(EAe," \u2014 "),lI=n(EAe,"A",{href:!0});var QKr=s(lI);lfo=r(QKr,"SegformerFeatureExtractor"),QKr.forEach(t),ifo=r(EAe," (SegFormer model)"),EAe.forEach(t),dfo=i(Z),Lh=n(Z,"LI",{});var CAe=s(Lh);One=n(CAe,"STRONG",{});var HKr=s(One);cfo=r(HKr,"speech_to_text"),HKr.forEach(t),mfo=r(CAe," \u2014 "),iI=n(CAe,"A",{href:!0});var UKr=s(iI);ffo=r(UKr,"Speech2TextFeatureExtractor"),UKr.forEach(t),gfo=r(CAe," (Speech2Text model)"),CAe.forEach(t),hfo=i(Z),xh=n(Z,"LI",{});var wAe=s(xh);Vne=n(wAe,"STRONG",{});var JKr=s(Vne);ufo=r(JKr,"swin"),JKr.forEach(t),pfo=r(wAe," \u2014 "),dI=n(wAe,"A",{href:!0});var YKr=s(dI);_fo=r(YKr,"ViTFeatureExtractor"),YKr.forEach(t),bfo=r(wAe," (Swin model)"),wAe.forEach(t),vfo=i(Z),$h=n(Z,"LI",{});var AAe=s($h);Xne=n(AAe,"STRONG",{});var KKr=s(Xne);Ffo=r(KKr,"van"),KKr.forEach(t),Tfo=r(AAe," \u2014 "),cI=n(AAe,"A",{href:!0});var ZKr=s(cI);Mfo=r(ZKr,"ConvNextFeatureExtractor"),ZKr.forEach(t),Efo=r(AAe," (VAN model)"),AAe.forEach(t),Cfo=i(Z),kh=n(Z,"LI",{});var yAe=s(kh);zne=n(yAe,"STRONG",{});var eZr=s(zne);wfo=r(eZr,"vit"),eZr.forEach(t),Afo=r(yAe," \u2014 "),mI=n(yAe,"A",{href:!0});var oZr=s(mI);yfo=r(oZr,"ViTFeatureExtractor"),oZr.forEach(t),Lfo=r(yAe," (ViT model)"),yAe.forEach(t),xfo=i(Z),Sh=n(Z,"LI",{});var LAe=s(Sh);Wne=n(LAe,"STRONG",{});var rZr=s(Wne);$fo=r(rZr,"vit_mae"),rZr.forEach(t),kfo=r(LAe," \u2014 "),fI=n(LAe,"A",{href:!0});var tZr=s(fI);Sfo=r(tZr,"ViTFeatureExtractor"),tZr.forEach(t),Rfo=r(LAe," (ViTMAE model)"),LAe.forEach(t),Pfo=i(Z),Rh=n(Z,"LI",{});var xAe=s(Rh);Qne=n(xAe,"STRONG",{});var aZr=s(Qne);Bfo=r(aZr,"wav2vec2"),aZr.forEach(t),Ifo=r(xAe," \u2014 "),gI=n(xAe,"A",{href:!0});var nZr=s(gI);Nfo=r(nZr,"Wav2Vec2FeatureExtractor"),nZr.forEach(t),qfo=r(xAe," (Wav2Vec2 model)"),xAe.forEach(t),jfo=i(Z),Ph=n(Z,"LI",{});var $Ae=s(Ph);Hne=n($Ae,"STRONG",{});var sZr=s(Hne);Dfo=r(sZr,"wav2vec2-conformer"),sZr.forEach(t),Gfo=r($Ae," \u2014 "),hI=n($Ae,"A",{href:!0});var lZr=s(hI);Ofo=r(lZr,"Wav2Vec2FeatureExtractor"),lZr.forEach(t),Vfo=r($Ae," (Wav2Vec2-Conformer model)"),$Ae.forEach(t),Xfo=i(Z),Bh=n(Z,"LI",{});var kAe=s(Bh);Une=n(kAe,"STRONG",{});var iZr=s(Une);zfo=r(iZr,"yolos"),iZr.forEach(t),Wfo=r(kAe," \u2014 "),uI=n(kAe,"A",{href:!0});var dZr=s(uI);Qfo=r(dZr,"YolosFeatureExtractor"),dZr.forEach(t),Hfo=r(kAe," (YOLOS model)"),kAe.forEach(t),Z.forEach(t),Ufo=i(Zt),T(Ih.$$.fragment,Zt),Jfo=i(Zt),T(Nh.$$.fragment,Zt),Zt.forEach(t),Yfo=i(js),qh=n(js,"DIV",{class:!0});var ADe=s(qh);T(Jy.$$.fragment,ADe),Kfo=i(ADe),Jne=n(ADe,"P",{});var cZr=s(Jne);Zfo=r(cZr,"Register a new feature extractor for this class."),cZr.forEach(t),ADe.forEach(t),js.forEach(t),wqe=i(m),Ei=n(m,"H2",{class:!0});var yDe=s(Ei);jh=n(yDe,"A",{id:!0,class:!0,href:!0});var mZr=s(jh);Yne=n(mZr,"SPAN",{});var fZr=s(Yne);T(Yy.$$.fragment,fZr),fZr.forEach(t),mZr.forEach(t),ego=i(yDe),Kne=n(yDe,"SPAN",{});var gZr=s(Kne);ogo=r(gZr,"AutoProcessor"),gZr.forEach(t),yDe.forEach(t),Aqe=i(m),yo=n(m,"DIV",{class:!0});var Ds=s(yo);T(Ky.$$.fragment,Ds),rgo=i(Ds),Zy=n(Ds,"P",{});var LDe=s(Zy);tgo=r(LDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pI=n(LDe,"A",{href:!0});var hZr=s(pI);ago=r(hZr,"AutoProcessor.from_pretrained()"),hZr.forEach(t),ngo=r(LDe," class method."),LDe.forEach(t),sgo=i(Ds),eL=n(Ds,"P",{});var xDe=s(eL);lgo=r(xDe,"This class cannot be instantiated directly using "),Zne=n(xDe,"CODE",{});var uZr=s(Zne);igo=r(uZr,"__init__()"),uZr.forEach(t),dgo=r(xDe," (throws an error)."),xDe.forEach(t),cgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(oL.$$.fragment,ea),mgo=i(ea),ese=n(ea,"P",{});var pZr=s(ese);fgo=r(pZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pZr.forEach(t),ggo=i(ea),Ci=n(ea,"P",{});var MZ=s(Ci);hgo=r(MZ,"The processor class to instantiate is selected based on the "),ose=n(MZ,"CODE",{});var _Zr=s(ose);ugo=r(_Zr,"model_type"),_Zr.forEach(t),pgo=r(MZ,` property of the config object (either
passed as an argument or loaded from `),rse=n(MZ,"CODE",{});var bZr=s(rse);_go=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),bgo=r(MZ," if possible):"),MZ.forEach(t),vgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var SAe=s(Dh);tse=n(SAe,"STRONG",{});var vZr=s(tse);Fgo=r(vZr,"clip"),vZr.forEach(t),Tgo=r(SAe," \u2014 "),_I=n(SAe,"A",{href:!0});var FZr=s(_I);Mgo=r(FZr,"CLIPProcessor"),FZr.forEach(t),Ego=r(SAe," (CLIP model)"),SAe.forEach(t),Cgo=i(_e),Gh=n(_e,"LI",{});var RAe=s(Gh);ase=n(RAe,"STRONG",{});var TZr=s(ase);wgo=r(TZr,"flava"),TZr.forEach(t),Ago=r(RAe," \u2014 "),nse=n(RAe,"CODE",{});var MZr=s(nse);ygo=r(MZr,"FLAVAProcessor"),MZr.forEach(t),Lgo=r(RAe," (Flava model)"),RAe.forEach(t),xgo=i(_e),Oh=n(_e,"LI",{});var PAe=s(Oh);sse=n(PAe,"STRONG",{});var EZr=s(sse);$go=r(EZr,"layoutlmv2"),EZr.forEach(t),kgo=r(PAe," \u2014 "),bI=n(PAe,"A",{href:!0});var CZr=s(bI);Sgo=r(CZr,"LayoutLMv2Processor"),CZr.forEach(t),Rgo=r(PAe," (LayoutLMv2 model)"),PAe.forEach(t),Pgo=i(_e),Vh=n(_e,"LI",{});var BAe=s(Vh);lse=n(BAe,"STRONG",{});var wZr=s(lse);Bgo=r(wZr,"layoutlmv3"),wZr.forEach(t),Igo=r(BAe," \u2014 "),vI=n(BAe,"A",{href:!0});var AZr=s(vI);Ngo=r(AZr,"LayoutLMv3Processor"),AZr.forEach(t),qgo=r(BAe," (LayoutLMv3 model)"),BAe.forEach(t),jgo=i(_e),Xh=n(_e,"LI",{});var IAe=s(Xh);ise=n(IAe,"STRONG",{});var yZr=s(ise);Dgo=r(yZr,"layoutxlm"),yZr.forEach(t),Ggo=r(IAe," \u2014 "),FI=n(IAe,"A",{href:!0});var LZr=s(FI);Ogo=r(LZr,"LayoutXLMProcessor"),LZr.forEach(t),Vgo=r(IAe," (LayoutXLM model)"),IAe.forEach(t),Xgo=i(_e),zh=n(_e,"LI",{});var NAe=s(zh);dse=n(NAe,"STRONG",{});var xZr=s(dse);zgo=r(xZr,"sew"),xZr.forEach(t),Wgo=r(NAe," \u2014 "),TI=n(NAe,"A",{href:!0});var $Zr=s(TI);Qgo=r($Zr,"Wav2Vec2Processor"),$Zr.forEach(t),Hgo=r(NAe," (SEW model)"),NAe.forEach(t),Ugo=i(_e),Wh=n(_e,"LI",{});var qAe=s(Wh);cse=n(qAe,"STRONG",{});var kZr=s(cse);Jgo=r(kZr,"sew-d"),kZr.forEach(t),Ygo=r(qAe," \u2014 "),MI=n(qAe,"A",{href:!0});var SZr=s(MI);Kgo=r(SZr,"Wav2Vec2Processor"),SZr.forEach(t),Zgo=r(qAe," (SEW-D model)"),qAe.forEach(t),eho=i(_e),Qh=n(_e,"LI",{});var jAe=s(Qh);mse=n(jAe,"STRONG",{});var RZr=s(mse);oho=r(RZr,"speech_to_text"),RZr.forEach(t),rho=r(jAe," \u2014 "),EI=n(jAe,"A",{href:!0});var PZr=s(EI);tho=r(PZr,"Speech2TextProcessor"),PZr.forEach(t),aho=r(jAe," (Speech2Text model)"),jAe.forEach(t),nho=i(_e),Hh=n(_e,"LI",{});var DAe=s(Hh);fse=n(DAe,"STRONG",{});var BZr=s(fse);sho=r(BZr,"speech_to_text_2"),BZr.forEach(t),lho=r(DAe," \u2014 "),CI=n(DAe,"A",{href:!0});var IZr=s(CI);iho=r(IZr,"Speech2Text2Processor"),IZr.forEach(t),dho=r(DAe," (Speech2Text2 model)"),DAe.forEach(t),cho=i(_e),Uh=n(_e,"LI",{});var GAe=s(Uh);gse=n(GAe,"STRONG",{});var NZr=s(gse);mho=r(NZr,"trocr"),NZr.forEach(t),fho=r(GAe," \u2014 "),wI=n(GAe,"A",{href:!0});var qZr=s(wI);gho=r(qZr,"TrOCRProcessor"),qZr.forEach(t),hho=r(GAe," (TrOCR model)"),GAe.forEach(t),uho=i(_e),Jh=n(_e,"LI",{});var OAe=s(Jh);hse=n(OAe,"STRONG",{});var jZr=s(hse);pho=r(jZr,"unispeech"),jZr.forEach(t),_ho=r(OAe," \u2014 "),AI=n(OAe,"A",{href:!0});var DZr=s(AI);bho=r(DZr,"Wav2Vec2Processor"),DZr.forEach(t),vho=r(OAe," (UniSpeech model)"),OAe.forEach(t),Fho=i(_e),Yh=n(_e,"LI",{});var VAe=s(Yh);use=n(VAe,"STRONG",{});var GZr=s(use);Tho=r(GZr,"unispeech-sat"),GZr.forEach(t),Mho=r(VAe," \u2014 "),yI=n(VAe,"A",{href:!0});var OZr=s(yI);Eho=r(OZr,"Wav2Vec2Processor"),OZr.forEach(t),Cho=r(VAe," (UniSpeechSat model)"),VAe.forEach(t),who=i(_e),Kh=n(_e,"LI",{});var XAe=s(Kh);pse=n(XAe,"STRONG",{});var VZr=s(pse);Aho=r(VZr,"vilt"),VZr.forEach(t),yho=r(XAe," \u2014 "),LI=n(XAe,"A",{href:!0});var XZr=s(LI);Lho=r(XZr,"ViltProcessor"),XZr.forEach(t),xho=r(XAe," (ViLT model)"),XAe.forEach(t),$ho=i(_e),Zh=n(_e,"LI",{});var zAe=s(Zh);_se=n(zAe,"STRONG",{});var zZr=s(_se);kho=r(zZr,"vision-text-dual-encoder"),zZr.forEach(t),Sho=r(zAe," \u2014 "),xI=n(zAe,"A",{href:!0});var WZr=s(xI);Rho=r(WZr,"VisionTextDualEncoderProcessor"),WZr.forEach(t),Pho=r(zAe," (VisionTextDualEncoder model)"),zAe.forEach(t),Bho=i(_e),eu=n(_e,"LI",{});var WAe=s(eu);bse=n(WAe,"STRONG",{});var QZr=s(bse);Iho=r(QZr,"wav2vec2"),QZr.forEach(t),Nho=r(WAe," \u2014 "),$I=n(WAe,"A",{href:!0});var HZr=s($I);qho=r(HZr,"Wav2Vec2Processor"),HZr.forEach(t),jho=r(WAe," (Wav2Vec2 model)"),WAe.forEach(t),Dho=i(_e),ou=n(_e,"LI",{});var QAe=s(ou);vse=n(QAe,"STRONG",{});var UZr=s(vse);Gho=r(UZr,"wav2vec2-conformer"),UZr.forEach(t),Oho=r(QAe," \u2014 "),kI=n(QAe,"A",{href:!0});var JZr=s(kI);Vho=r(JZr,"Wav2Vec2Processor"),JZr.forEach(t),Xho=r(QAe," (Wav2Vec2-Conformer model)"),QAe.forEach(t),zho=i(_e),ru=n(_e,"LI",{});var HAe=s(ru);Fse=n(HAe,"STRONG",{});var YZr=s(Fse);Who=r(YZr,"wavlm"),YZr.forEach(t),Qho=r(HAe," \u2014 "),SI=n(HAe,"A",{href:!0});var KZr=s(SI);Hho=r(KZr,"Wav2Vec2Processor"),KZr.forEach(t),Uho=r(HAe," (WavLM model)"),HAe.forEach(t),_e.forEach(t),Jho=i(ea),T(tu.$$.fragment,ea),Yho=i(ea),T(au.$$.fragment,ea),ea.forEach(t),Kho=i(Ds),nu=n(Ds,"DIV",{class:!0});var $De=s(nu);T(rL.$$.fragment,$De),Zho=i($De),Tse=n($De,"P",{});var ZZr=s(Tse);euo=r(ZZr,"Register a new processor for this class."),ZZr.forEach(t),$De.forEach(t),Ds.forEach(t),yqe=i(m),wi=n(m,"H2",{class:!0});var kDe=s(wi);su=n(kDe,"A",{id:!0,class:!0,href:!0});var eet=s(su);Mse=n(eet,"SPAN",{});var oet=s(Mse);T(tL.$$.fragment,oet),oet.forEach(t),eet.forEach(t),ouo=i(kDe),Ese=n(kDe,"SPAN",{});var ret=s(Ese);ruo=r(ret,"AutoModel"),ret.forEach(t),kDe.forEach(t),Lqe=i(m),Lo=n(m,"DIV",{class:!0});var Gs=s(Lo);T(aL.$$.fragment,Gs),tuo=i(Gs),Ai=n(Gs,"P",{});var EZ=s(Ai);auo=r(EZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RI=n(EZ,"A",{href:!0});var tet=s(RI);nuo=r(tet,"from_pretrained()"),tet.forEach(t),suo=r(EZ," class method or the "),PI=n(EZ,"A",{href:!0});var aet=s(PI);luo=r(aet,"from_config()"),aet.forEach(t),iuo=r(EZ,` class
method.`),EZ.forEach(t),duo=i(Gs),nL=n(Gs,"P",{});var SDe=s(nL);cuo=r(SDe,"This class cannot be instantiated directly using "),Cse=n(SDe,"CODE",{});var net=s(Cse);muo=r(net,"__init__()"),net.forEach(t),fuo=r(SDe," (throws an error)."),SDe.forEach(t),guo=i(Gs),tt=n(Gs,"DIV",{class:!0});var B6=s(tt);T(sL.$$.fragment,B6),huo=i(B6),wse=n(B6,"P",{});var set=s(wse);uuo=r(set,"Instantiates one of the base model classes of the library from a configuration."),set.forEach(t),puo=i(B6),yi=n(B6,"P",{});var CZ=s(yi);_uo=r(CZ,`Note:
Loading a model from its configuration file does `),Ase=n(CZ,"STRONG",{});var iet=s(Ase);buo=r(iet,"not"),iet.forEach(t),vuo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BI=n(CZ,"A",{href:!0});var det=s(BI);Fuo=r(det,"from_pretrained()"),det.forEach(t),Tuo=r(CZ," to load the model weights."),CZ.forEach(t),Muo=i(B6),T(lu.$$.fragment,B6),B6.forEach(t),Euo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(lL.$$.fragment,oa),Cuo=i(oa),yse=n(oa,"P",{});var cet=s(yse);wuo=r(cet,"Instantiate one of the base model classes of the library from a pretrained model."),cet.forEach(t),Auo=i(oa),La=n(oa,"P",{});var I6=s(La);yuo=r(I6,"The model class to instantiate is selected based on the "),Lse=n(I6,"CODE",{});var met=s(Lse);Luo=r(met,"model_type"),met.forEach(t),xuo=r(I6,` property of the config object (either
passed as an argument or loaded from `),xse=n(I6,"CODE",{});var fet=s(xse);$uo=r(fet,"pretrained_model_name_or_path"),fet.forEach(t),kuo=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(I6,"CODE",{});var get=s($se);Suo=r(get,"pretrained_model_name_or_path"),get.forEach(t),Ruo=r(I6,":"),I6.forEach(t),Puo=i(oa),x=n(oa,"UL",{});var $=s(x);iu=n($,"LI",{});var UAe=s(iu);kse=n(UAe,"STRONG",{});var het=s(kse);Buo=r(het,"albert"),het.forEach(t),Iuo=r(UAe," \u2014 "),II=n(UAe,"A",{href:!0});var uet=s(II);Nuo=r(uet,"AlbertModel"),uet.forEach(t),quo=r(UAe," (ALBERT model)"),UAe.forEach(t),juo=i($),du=n($,"LI",{});var JAe=s(du);Sse=n(JAe,"STRONG",{});var pet=s(Sse);Duo=r(pet,"bart"),pet.forEach(t),Guo=r(JAe," \u2014 "),NI=n(JAe,"A",{href:!0});var _et=s(NI);Ouo=r(_et,"BartModel"),_et.forEach(t),Vuo=r(JAe," (BART model)"),JAe.forEach(t),Xuo=i($),cu=n($,"LI",{});var YAe=s(cu);Rse=n(YAe,"STRONG",{});var bet=s(Rse);zuo=r(bet,"beit"),bet.forEach(t),Wuo=r(YAe," \u2014 "),qI=n(YAe,"A",{href:!0});var vet=s(qI);Quo=r(vet,"BeitModel"),vet.forEach(t),Huo=r(YAe," (BEiT model)"),YAe.forEach(t),Uuo=i($),mu=n($,"LI",{});var KAe=s(mu);Pse=n(KAe,"STRONG",{});var Fet=s(Pse);Juo=r(Fet,"bert"),Fet.forEach(t),Yuo=r(KAe," \u2014 "),jI=n(KAe,"A",{href:!0});var Tet=s(jI);Kuo=r(Tet,"BertModel"),Tet.forEach(t),Zuo=r(KAe," (BERT model)"),KAe.forEach(t),epo=i($),fu=n($,"LI",{});var ZAe=s(fu);Bse=n(ZAe,"STRONG",{});var Met=s(Bse);opo=r(Met,"bert-generation"),Met.forEach(t),rpo=r(ZAe," \u2014 "),DI=n(ZAe,"A",{href:!0});var Eet=s(DI);tpo=r(Eet,"BertGenerationEncoder"),Eet.forEach(t),apo=r(ZAe," (Bert Generation model)"),ZAe.forEach(t),npo=i($),gu=n($,"LI",{});var eye=s(gu);Ise=n(eye,"STRONG",{});var Cet=s(Ise);spo=r(Cet,"big_bird"),Cet.forEach(t),lpo=r(eye," \u2014 "),GI=n(eye,"A",{href:!0});var wet=s(GI);ipo=r(wet,"BigBirdModel"),wet.forEach(t),dpo=r(eye," (BigBird model)"),eye.forEach(t),cpo=i($),hu=n($,"LI",{});var oye=s(hu);Nse=n(oye,"STRONG",{});var Aet=s(Nse);mpo=r(Aet,"bigbird_pegasus"),Aet.forEach(t),fpo=r(oye," \u2014 "),OI=n(oye,"A",{href:!0});var yet=s(OI);gpo=r(yet,"BigBirdPegasusModel"),yet.forEach(t),hpo=r(oye," (BigBirdPegasus model)"),oye.forEach(t),upo=i($),uu=n($,"LI",{});var rye=s(uu);qse=n(rye,"STRONG",{});var Let=s(qse);ppo=r(Let,"blenderbot"),Let.forEach(t),_po=r(rye," \u2014 "),VI=n(rye,"A",{href:!0});var xet=s(VI);bpo=r(xet,"BlenderbotModel"),xet.forEach(t),vpo=r(rye," (Blenderbot model)"),rye.forEach(t),Fpo=i($),pu=n($,"LI",{});var tye=s(pu);jse=n(tye,"STRONG",{});var $et=s(jse);Tpo=r($et,"blenderbot-small"),$et.forEach(t),Mpo=r(tye," \u2014 "),XI=n(tye,"A",{href:!0});var ket=s(XI);Epo=r(ket,"BlenderbotSmallModel"),ket.forEach(t),Cpo=r(tye," (BlenderbotSmall model)"),tye.forEach(t),wpo=i($),_u=n($,"LI",{});var aye=s(_u);Dse=n(aye,"STRONG",{});var Set=s(Dse);Apo=r(Set,"camembert"),Set.forEach(t),ypo=r(aye," \u2014 "),zI=n(aye,"A",{href:!0});var Ret=s(zI);Lpo=r(Ret,"CamembertModel"),Ret.forEach(t),xpo=r(aye," (CamemBERT model)"),aye.forEach(t),$po=i($),bu=n($,"LI",{});var nye=s(bu);Gse=n(nye,"STRONG",{});var Pet=s(Gse);kpo=r(Pet,"canine"),Pet.forEach(t),Spo=r(nye," \u2014 "),WI=n(nye,"A",{href:!0});var Bet=s(WI);Rpo=r(Bet,"CanineModel"),Bet.forEach(t),Ppo=r(nye," (Canine model)"),nye.forEach(t),Bpo=i($),vu=n($,"LI",{});var sye=s(vu);Ose=n(sye,"STRONG",{});var Iet=s(Ose);Ipo=r(Iet,"clip"),Iet.forEach(t),Npo=r(sye," \u2014 "),QI=n(sye,"A",{href:!0});var Net=s(QI);qpo=r(Net,"CLIPModel"),Net.forEach(t),jpo=r(sye," (CLIP model)"),sye.forEach(t),Dpo=i($),Fu=n($,"LI",{});var lye=s(Fu);Vse=n(lye,"STRONG",{});var qet=s(Vse);Gpo=r(qet,"convbert"),qet.forEach(t),Opo=r(lye," \u2014 "),HI=n(lye,"A",{href:!0});var jet=s(HI);Vpo=r(jet,"ConvBertModel"),jet.forEach(t),Xpo=r(lye," (ConvBERT model)"),lye.forEach(t),zpo=i($),Tu=n($,"LI",{});var iye=s(Tu);Xse=n(iye,"STRONG",{});var Det=s(Xse);Wpo=r(Det,"convnext"),Det.forEach(t),Qpo=r(iye," \u2014 "),UI=n(iye,"A",{href:!0});var Get=s(UI);Hpo=r(Get,"ConvNextModel"),Get.forEach(t),Upo=r(iye," (ConvNext model)"),iye.forEach(t),Jpo=i($),Mu=n($,"LI",{});var dye=s(Mu);zse=n(dye,"STRONG",{});var Oet=s(zse);Ypo=r(Oet,"ctrl"),Oet.forEach(t),Kpo=r(dye," \u2014 "),JI=n(dye,"A",{href:!0});var Vet=s(JI);Zpo=r(Vet,"CTRLModel"),Vet.forEach(t),e_o=r(dye," (CTRL model)"),dye.forEach(t),o_o=i($),Eu=n($,"LI",{});var cye=s(Eu);Wse=n(cye,"STRONG",{});var Xet=s(Wse);r_o=r(Xet,"cvt"),Xet.forEach(t),t_o=r(cye," \u2014 "),YI=n(cye,"A",{href:!0});var zet=s(YI);a_o=r(zet,"CvtModel"),zet.forEach(t),n_o=r(cye," (CvT model)"),cye.forEach(t),s_o=i($),Cu=n($,"LI",{});var mye=s(Cu);Qse=n(mye,"STRONG",{});var Wet=s(Qse);l_o=r(Wet,"data2vec-audio"),Wet.forEach(t),i_o=r(mye," \u2014 "),KI=n(mye,"A",{href:!0});var Qet=s(KI);d_o=r(Qet,"Data2VecAudioModel"),Qet.forEach(t),c_o=r(mye," (Data2VecAudio model)"),mye.forEach(t),m_o=i($),wu=n($,"LI",{});var fye=s(wu);Hse=n(fye,"STRONG",{});var Het=s(Hse);f_o=r(Het,"data2vec-text"),Het.forEach(t),g_o=r(fye," \u2014 "),ZI=n(fye,"A",{href:!0});var Uet=s(ZI);h_o=r(Uet,"Data2VecTextModel"),Uet.forEach(t),u_o=r(fye," (Data2VecText model)"),fye.forEach(t),p_o=i($),Au=n($,"LI",{});var gye=s(Au);Use=n(gye,"STRONG",{});var Jet=s(Use);__o=r(Jet,"data2vec-vision"),Jet.forEach(t),b_o=r(gye," \u2014 "),eN=n(gye,"A",{href:!0});var Yet=s(eN);v_o=r(Yet,"Data2VecVisionModel"),Yet.forEach(t),F_o=r(gye," (Data2VecVision model)"),gye.forEach(t),T_o=i($),yu=n($,"LI",{});var hye=s(yu);Jse=n(hye,"STRONG",{});var Ket=s(Jse);M_o=r(Ket,"deberta"),Ket.forEach(t),E_o=r(hye," \u2014 "),oN=n(hye,"A",{href:!0});var Zet=s(oN);C_o=r(Zet,"DebertaModel"),Zet.forEach(t),w_o=r(hye," (DeBERTa model)"),hye.forEach(t),A_o=i($),Lu=n($,"LI",{});var uye=s(Lu);Yse=n(uye,"STRONG",{});var eot=s(Yse);y_o=r(eot,"deberta-v2"),eot.forEach(t),L_o=r(uye," \u2014 "),rN=n(uye,"A",{href:!0});var oot=s(rN);x_o=r(oot,"DebertaV2Model"),oot.forEach(t),$_o=r(uye," (DeBERTa-v2 model)"),uye.forEach(t),k_o=i($),xu=n($,"LI",{});var pye=s(xu);Kse=n(pye,"STRONG",{});var rot=s(Kse);S_o=r(rot,"decision_transformer"),rot.forEach(t),R_o=r(pye," \u2014 "),tN=n(pye,"A",{href:!0});var tot=s(tN);P_o=r(tot,"DecisionTransformerModel"),tot.forEach(t),B_o=r(pye," (Decision Transformer model)"),pye.forEach(t),I_o=i($),$u=n($,"LI",{});var _ye=s($u);Zse=n(_ye,"STRONG",{});var aot=s(Zse);N_o=r(aot,"deit"),aot.forEach(t),q_o=r(_ye," \u2014 "),aN=n(_ye,"A",{href:!0});var not=s(aN);j_o=r(not,"DeiTModel"),not.forEach(t),D_o=r(_ye," (DeiT model)"),_ye.forEach(t),G_o=i($),ku=n($,"LI",{});var bye=s(ku);ele=n(bye,"STRONG",{});var sot=s(ele);O_o=r(sot,"detr"),sot.forEach(t),V_o=r(bye," \u2014 "),nN=n(bye,"A",{href:!0});var lot=s(nN);X_o=r(lot,"DetrModel"),lot.forEach(t),z_o=r(bye," (DETR model)"),bye.forEach(t),W_o=i($),Su=n($,"LI",{});var vye=s(Su);ole=n(vye,"STRONG",{});var iot=s(ole);Q_o=r(iot,"distilbert"),iot.forEach(t),H_o=r(vye," \u2014 "),sN=n(vye,"A",{href:!0});var dot=s(sN);U_o=r(dot,"DistilBertModel"),dot.forEach(t),J_o=r(vye," (DistilBERT model)"),vye.forEach(t),Y_o=i($),Ru=n($,"LI",{});var Fye=s(Ru);rle=n(Fye,"STRONG",{});var cot=s(rle);K_o=r(cot,"dpr"),cot.forEach(t),Z_o=r(Fye," \u2014 "),lN=n(Fye,"A",{href:!0});var mot=s(lN);ebo=r(mot,"DPRQuestionEncoder"),mot.forEach(t),obo=r(Fye," (DPR model)"),Fye.forEach(t),rbo=i($),Pu=n($,"LI",{});var Tye=s(Pu);tle=n(Tye,"STRONG",{});var fot=s(tle);tbo=r(fot,"dpt"),fot.forEach(t),abo=r(Tye," \u2014 "),iN=n(Tye,"A",{href:!0});var got=s(iN);nbo=r(got,"DPTModel"),got.forEach(t),sbo=r(Tye," (DPT model)"),Tye.forEach(t),lbo=i($),Bu=n($,"LI",{});var Mye=s(Bu);ale=n(Mye,"STRONG",{});var hot=s(ale);ibo=r(hot,"electra"),hot.forEach(t),dbo=r(Mye," \u2014 "),dN=n(Mye,"A",{href:!0});var uot=s(dN);cbo=r(uot,"ElectraModel"),uot.forEach(t),mbo=r(Mye," (ELECTRA model)"),Mye.forEach(t),fbo=i($),Iu=n($,"LI",{});var Eye=s(Iu);nle=n(Eye,"STRONG",{});var pot=s(nle);gbo=r(pot,"flaubert"),pot.forEach(t),hbo=r(Eye," \u2014 "),cN=n(Eye,"A",{href:!0});var _ot=s(cN);ubo=r(_ot,"FlaubertModel"),_ot.forEach(t),pbo=r(Eye," (FlauBERT model)"),Eye.forEach(t),_bo=i($),Nu=n($,"LI",{});var Cye=s(Nu);sle=n(Cye,"STRONG",{});var bot=s(sle);bbo=r(bot,"flava"),bot.forEach(t),vbo=r(Cye," \u2014 "),mN=n(Cye,"A",{href:!0});var vot=s(mN);Fbo=r(vot,"FlavaModel"),vot.forEach(t),Tbo=r(Cye," (Flava model)"),Cye.forEach(t),Mbo=i($),qu=n($,"LI",{});var wye=s(qu);lle=n(wye,"STRONG",{});var Fot=s(lle);Ebo=r(Fot,"fnet"),Fot.forEach(t),Cbo=r(wye," \u2014 "),fN=n(wye,"A",{href:!0});var Tot=s(fN);wbo=r(Tot,"FNetModel"),Tot.forEach(t),Abo=r(wye," (FNet model)"),wye.forEach(t),ybo=i($),ju=n($,"LI",{});var Aye=s(ju);ile=n(Aye,"STRONG",{});var Mot=s(ile);Lbo=r(Mot,"fsmt"),Mot.forEach(t),xbo=r(Aye," \u2014 "),gN=n(Aye,"A",{href:!0});var Eot=s(gN);$bo=r(Eot,"FSMTModel"),Eot.forEach(t),kbo=r(Aye," (FairSeq Machine-Translation model)"),Aye.forEach(t),Sbo=i($),Ps=n($,"LI",{});var W$=s(Ps);dle=n(W$,"STRONG",{});var Cot=s(dle);Rbo=r(Cot,"funnel"),Cot.forEach(t),Pbo=r(W$," \u2014 "),hN=n(W$,"A",{href:!0});var wot=s(hN);Bbo=r(wot,"FunnelModel"),wot.forEach(t),Ibo=r(W$," or "),uN=n(W$,"A",{href:!0});var Aot=s(uN);Nbo=r(Aot,"FunnelBaseModel"),Aot.forEach(t),qbo=r(W$," (Funnel Transformer model)"),W$.forEach(t),jbo=i($),Du=n($,"LI",{});var yye=s(Du);cle=n(yye,"STRONG",{});var yot=s(cle);Dbo=r(yot,"glpn"),yot.forEach(t),Gbo=r(yye," \u2014 "),pN=n(yye,"A",{href:!0});var Lot=s(pN);Obo=r(Lot,"GLPNModel"),Lot.forEach(t),Vbo=r(yye," (GLPN model)"),yye.forEach(t),Xbo=i($),Gu=n($,"LI",{});var Lye=s(Gu);mle=n(Lye,"STRONG",{});var xot=s(mle);zbo=r(xot,"gpt2"),xot.forEach(t),Wbo=r(Lye," \u2014 "),_N=n(Lye,"A",{href:!0});var $ot=s(_N);Qbo=r($ot,"GPT2Model"),$ot.forEach(t),Hbo=r(Lye," (OpenAI GPT-2 model)"),Lye.forEach(t),Ubo=i($),Ou=n($,"LI",{});var xye=s(Ou);fle=n(xye,"STRONG",{});var kot=s(fle);Jbo=r(kot,"gpt_neo"),kot.forEach(t),Ybo=r(xye," \u2014 "),bN=n(xye,"A",{href:!0});var Sot=s(bN);Kbo=r(Sot,"GPTNeoModel"),Sot.forEach(t),Zbo=r(xye," (GPT Neo model)"),xye.forEach(t),e2o=i($),Vu=n($,"LI",{});var $ye=s(Vu);gle=n($ye,"STRONG",{});var Rot=s(gle);o2o=r(Rot,"gpt_neox"),Rot.forEach(t),r2o=r($ye," \u2014 "),vN=n($ye,"A",{href:!0});var Pot=s(vN);t2o=r(Pot,"GPTNeoXModel"),Pot.forEach(t),a2o=r($ye," (GPT NeoX model)"),$ye.forEach(t),n2o=i($),Xu=n($,"LI",{});var kye=s(Xu);hle=n(kye,"STRONG",{});var Bot=s(hle);s2o=r(Bot,"gptj"),Bot.forEach(t),l2o=r(kye," \u2014 "),FN=n(kye,"A",{href:!0});var Iot=s(FN);i2o=r(Iot,"GPTJModel"),Iot.forEach(t),d2o=r(kye," (GPT-J model)"),kye.forEach(t),c2o=i($),zu=n($,"LI",{});var Sye=s(zu);ule=n(Sye,"STRONG",{});var Not=s(ule);m2o=r(Not,"hubert"),Not.forEach(t),f2o=r(Sye," \u2014 "),TN=n(Sye,"A",{href:!0});var qot=s(TN);g2o=r(qot,"HubertModel"),qot.forEach(t),h2o=r(Sye," (Hubert model)"),Sye.forEach(t),u2o=i($),Wu=n($,"LI",{});var Rye=s(Wu);ple=n(Rye,"STRONG",{});var jot=s(ple);p2o=r(jot,"ibert"),jot.forEach(t),_2o=r(Rye," \u2014 "),MN=n(Rye,"A",{href:!0});var Dot=s(MN);b2o=r(Dot,"IBertModel"),Dot.forEach(t),v2o=r(Rye," (I-BERT model)"),Rye.forEach(t),F2o=i($),Qu=n($,"LI",{});var Pye=s(Qu);_le=n(Pye,"STRONG",{});var Got=s(_le);T2o=r(Got,"imagegpt"),Got.forEach(t),M2o=r(Pye," \u2014 "),EN=n(Pye,"A",{href:!0});var Oot=s(EN);E2o=r(Oot,"ImageGPTModel"),Oot.forEach(t),C2o=r(Pye," (ImageGPT model)"),Pye.forEach(t),w2o=i($),Hu=n($,"LI",{});var Bye=s(Hu);ble=n(Bye,"STRONG",{});var Vot=s(ble);A2o=r(Vot,"layoutlm"),Vot.forEach(t),y2o=r(Bye," \u2014 "),CN=n(Bye,"A",{href:!0});var Xot=s(CN);L2o=r(Xot,"LayoutLMModel"),Xot.forEach(t),x2o=r(Bye," (LayoutLM model)"),Bye.forEach(t),$2o=i($),Uu=n($,"LI",{});var Iye=s(Uu);vle=n(Iye,"STRONG",{});var zot=s(vle);k2o=r(zot,"layoutlmv2"),zot.forEach(t),S2o=r(Iye," \u2014 "),wN=n(Iye,"A",{href:!0});var Wot=s(wN);R2o=r(Wot,"LayoutLMv2Model"),Wot.forEach(t),P2o=r(Iye," (LayoutLMv2 model)"),Iye.forEach(t),B2o=i($),Ju=n($,"LI",{});var Nye=s(Ju);Fle=n(Nye,"STRONG",{});var Qot=s(Fle);I2o=r(Qot,"layoutlmv3"),Qot.forEach(t),N2o=r(Nye," \u2014 "),AN=n(Nye,"A",{href:!0});var Hot=s(AN);q2o=r(Hot,"LayoutLMv3Model"),Hot.forEach(t),j2o=r(Nye," (LayoutLMv3 model)"),Nye.forEach(t),D2o=i($),Yu=n($,"LI",{});var qye=s(Yu);Tle=n(qye,"STRONG",{});var Uot=s(Tle);G2o=r(Uot,"led"),Uot.forEach(t),O2o=r(qye," \u2014 "),yN=n(qye,"A",{href:!0});var Jot=s(yN);V2o=r(Jot,"LEDModel"),Jot.forEach(t),X2o=r(qye," (LED model)"),qye.forEach(t),z2o=i($),Ku=n($,"LI",{});var jye=s(Ku);Mle=n(jye,"STRONG",{});var Yot=s(Mle);W2o=r(Yot,"longformer"),Yot.forEach(t),Q2o=r(jye," \u2014 "),LN=n(jye,"A",{href:!0});var Kot=s(LN);H2o=r(Kot,"LongformerModel"),Kot.forEach(t),U2o=r(jye," (Longformer model)"),jye.forEach(t),J2o=i($),Zu=n($,"LI",{});var Dye=s(Zu);Ele=n(Dye,"STRONG",{});var Zot=s(Ele);Y2o=r(Zot,"luke"),Zot.forEach(t),K2o=r(Dye," \u2014 "),xN=n(Dye,"A",{href:!0});var ert=s(xN);Z2o=r(ert,"LukeModel"),ert.forEach(t),evo=r(Dye," (LUKE model)"),Dye.forEach(t),ovo=i($),ep=n($,"LI",{});var Gye=s(ep);Cle=n(Gye,"STRONG",{});var ort=s(Cle);rvo=r(ort,"lxmert"),ort.forEach(t),tvo=r(Gye," \u2014 "),$N=n(Gye,"A",{href:!0});var rrt=s($N);avo=r(rrt,"LxmertModel"),rrt.forEach(t),nvo=r(Gye," (LXMERT model)"),Gye.forEach(t),svo=i($),op=n($,"LI",{});var Oye=s(op);wle=n(Oye,"STRONG",{});var trt=s(wle);lvo=r(trt,"m2m_100"),trt.forEach(t),ivo=r(Oye," \u2014 "),kN=n(Oye,"A",{href:!0});var art=s(kN);dvo=r(art,"M2M100Model"),art.forEach(t),cvo=r(Oye," (M2M100 model)"),Oye.forEach(t),mvo=i($),rp=n($,"LI",{});var Vye=s(rp);Ale=n(Vye,"STRONG",{});var nrt=s(Ale);fvo=r(nrt,"marian"),nrt.forEach(t),gvo=r(Vye," \u2014 "),SN=n(Vye,"A",{href:!0});var srt=s(SN);hvo=r(srt,"MarianModel"),srt.forEach(t),uvo=r(Vye," (Marian model)"),Vye.forEach(t),pvo=i($),tp=n($,"LI",{});var Xye=s(tp);yle=n(Xye,"STRONG",{});var lrt=s(yle);_vo=r(lrt,"maskformer"),lrt.forEach(t),bvo=r(Xye," \u2014 "),RN=n(Xye,"A",{href:!0});var irt=s(RN);vvo=r(irt,"MaskFormerModel"),irt.forEach(t),Fvo=r(Xye," (MaskFormer model)"),Xye.forEach(t),Tvo=i($),ap=n($,"LI",{});var zye=s(ap);Lle=n(zye,"STRONG",{});var drt=s(Lle);Mvo=r(drt,"mbart"),drt.forEach(t),Evo=r(zye," \u2014 "),PN=n(zye,"A",{href:!0});var crt=s(PN);Cvo=r(crt,"MBartModel"),crt.forEach(t),wvo=r(zye," (mBART model)"),zye.forEach(t),Avo=i($),np=n($,"LI",{});var Wye=s(np);xle=n(Wye,"STRONG",{});var mrt=s(xle);yvo=r(mrt,"megatron-bert"),mrt.forEach(t),Lvo=r(Wye," \u2014 "),BN=n(Wye,"A",{href:!0});var frt=s(BN);xvo=r(frt,"MegatronBertModel"),frt.forEach(t),$vo=r(Wye," (MegatronBert model)"),Wye.forEach(t),kvo=i($),sp=n($,"LI",{});var Qye=s(sp);$le=n(Qye,"STRONG",{});var grt=s($le);Svo=r(grt,"mobilebert"),grt.forEach(t),Rvo=r(Qye," \u2014 "),IN=n(Qye,"A",{href:!0});var hrt=s(IN);Pvo=r(hrt,"MobileBertModel"),hrt.forEach(t),Bvo=r(Qye," (MobileBERT model)"),Qye.forEach(t),Ivo=i($),lp=n($,"LI",{});var Hye=s(lp);kle=n(Hye,"STRONG",{});var urt=s(kle);Nvo=r(urt,"mpnet"),urt.forEach(t),qvo=r(Hye," \u2014 "),NN=n(Hye,"A",{href:!0});var prt=s(NN);jvo=r(prt,"MPNetModel"),prt.forEach(t),Dvo=r(Hye," (MPNet model)"),Hye.forEach(t),Gvo=i($),ip=n($,"LI",{});var Uye=s(ip);Sle=n(Uye,"STRONG",{});var _rt=s(Sle);Ovo=r(_rt,"mt5"),_rt.forEach(t),Vvo=r(Uye," \u2014 "),qN=n(Uye,"A",{href:!0});var brt=s(qN);Xvo=r(brt,"MT5Model"),brt.forEach(t),zvo=r(Uye," (mT5 model)"),Uye.forEach(t),Wvo=i($),dp=n($,"LI",{});var Jye=s(dp);Rle=n(Jye,"STRONG",{});var vrt=s(Rle);Qvo=r(vrt,"nystromformer"),vrt.forEach(t),Hvo=r(Jye," \u2014 "),jN=n(Jye,"A",{href:!0});var Frt=s(jN);Uvo=r(Frt,"NystromformerModel"),Frt.forEach(t),Jvo=r(Jye," (Nystromformer model)"),Jye.forEach(t),Yvo=i($),cp=n($,"LI",{});var Yye=s(cp);Ple=n(Yye,"STRONG",{});var Trt=s(Ple);Kvo=r(Trt,"openai-gpt"),Trt.forEach(t),Zvo=r(Yye," \u2014 "),DN=n(Yye,"A",{href:!0});var Mrt=s(DN);eFo=r(Mrt,"OpenAIGPTModel"),Mrt.forEach(t),oFo=r(Yye," (OpenAI GPT model)"),Yye.forEach(t),rFo=i($),mp=n($,"LI",{});var Kye=s(mp);Ble=n(Kye,"STRONG",{});var Ert=s(Ble);tFo=r(Ert,"opt"),Ert.forEach(t),aFo=r(Kye," \u2014 "),GN=n(Kye,"A",{href:!0});var Crt=s(GN);nFo=r(Crt,"OPTModel"),Crt.forEach(t),sFo=r(Kye," (OPT model)"),Kye.forEach(t),lFo=i($),fp=n($,"LI",{});var Zye=s(fp);Ile=n(Zye,"STRONG",{});var wrt=s(Ile);iFo=r(wrt,"pegasus"),wrt.forEach(t),dFo=r(Zye," \u2014 "),ON=n(Zye,"A",{href:!0});var Art=s(ON);cFo=r(Art,"PegasusModel"),Art.forEach(t),mFo=r(Zye," (Pegasus model)"),Zye.forEach(t),fFo=i($),gp=n($,"LI",{});var eLe=s(gp);Nle=n(eLe,"STRONG",{});var yrt=s(Nle);gFo=r(yrt,"perceiver"),yrt.forEach(t),hFo=r(eLe," \u2014 "),VN=n(eLe,"A",{href:!0});var Lrt=s(VN);uFo=r(Lrt,"PerceiverModel"),Lrt.forEach(t),pFo=r(eLe," (Perceiver model)"),eLe.forEach(t),_Fo=i($),hp=n($,"LI",{});var oLe=s(hp);qle=n(oLe,"STRONG",{});var xrt=s(qle);bFo=r(xrt,"plbart"),xrt.forEach(t),vFo=r(oLe," \u2014 "),XN=n(oLe,"A",{href:!0});var $rt=s(XN);FFo=r($rt,"PLBartModel"),$rt.forEach(t),TFo=r(oLe," (PLBart model)"),oLe.forEach(t),MFo=i($),up=n($,"LI",{});var rLe=s(up);jle=n(rLe,"STRONG",{});var krt=s(jle);EFo=r(krt,"poolformer"),krt.forEach(t),CFo=r(rLe," \u2014 "),zN=n(rLe,"A",{href:!0});var Srt=s(zN);wFo=r(Srt,"PoolFormerModel"),Srt.forEach(t),AFo=r(rLe," (PoolFormer model)"),rLe.forEach(t),yFo=i($),pp=n($,"LI",{});var tLe=s(pp);Dle=n(tLe,"STRONG",{});var Rrt=s(Dle);LFo=r(Rrt,"prophetnet"),Rrt.forEach(t),xFo=r(tLe," \u2014 "),WN=n(tLe,"A",{href:!0});var Prt=s(WN);$Fo=r(Prt,"ProphetNetModel"),Prt.forEach(t),kFo=r(tLe," (ProphetNet model)"),tLe.forEach(t),SFo=i($),_p=n($,"LI",{});var aLe=s(_p);Gle=n(aLe,"STRONG",{});var Brt=s(Gle);RFo=r(Brt,"qdqbert"),Brt.forEach(t),PFo=r(aLe," \u2014 "),QN=n(aLe,"A",{href:!0});var Irt=s(QN);BFo=r(Irt,"QDQBertModel"),Irt.forEach(t),IFo=r(aLe," (QDQBert model)"),aLe.forEach(t),NFo=i($),bp=n($,"LI",{});var nLe=s(bp);Ole=n(nLe,"STRONG",{});var Nrt=s(Ole);qFo=r(Nrt,"reformer"),Nrt.forEach(t),jFo=r(nLe," \u2014 "),HN=n(nLe,"A",{href:!0});var qrt=s(HN);DFo=r(qrt,"ReformerModel"),qrt.forEach(t),GFo=r(nLe," (Reformer model)"),nLe.forEach(t),OFo=i($),vp=n($,"LI",{});var sLe=s(vp);Vle=n(sLe,"STRONG",{});var jrt=s(Vle);VFo=r(jrt,"regnet"),jrt.forEach(t),XFo=r(sLe," \u2014 "),UN=n(sLe,"A",{href:!0});var Drt=s(UN);zFo=r(Drt,"RegNetModel"),Drt.forEach(t),WFo=r(sLe," (RegNet model)"),sLe.forEach(t),QFo=i($),Fp=n($,"LI",{});var lLe=s(Fp);Xle=n(lLe,"STRONG",{});var Grt=s(Xle);HFo=r(Grt,"rembert"),Grt.forEach(t),UFo=r(lLe," \u2014 "),JN=n(lLe,"A",{href:!0});var Ort=s(JN);JFo=r(Ort,"RemBertModel"),Ort.forEach(t),YFo=r(lLe," (RemBERT model)"),lLe.forEach(t),KFo=i($),Tp=n($,"LI",{});var iLe=s(Tp);zle=n(iLe,"STRONG",{});var Vrt=s(zle);ZFo=r(Vrt,"resnet"),Vrt.forEach(t),e1o=r(iLe," \u2014 "),YN=n(iLe,"A",{href:!0});var Xrt=s(YN);o1o=r(Xrt,"ResNetModel"),Xrt.forEach(t),r1o=r(iLe," (ResNet model)"),iLe.forEach(t),t1o=i($),Mp=n($,"LI",{});var dLe=s(Mp);Wle=n(dLe,"STRONG",{});var zrt=s(Wle);a1o=r(zrt,"retribert"),zrt.forEach(t),n1o=r(dLe," \u2014 "),KN=n(dLe,"A",{href:!0});var Wrt=s(KN);s1o=r(Wrt,"RetriBertModel"),Wrt.forEach(t),l1o=r(dLe," (RetriBERT model)"),dLe.forEach(t),i1o=i($),Ep=n($,"LI",{});var cLe=s(Ep);Qle=n(cLe,"STRONG",{});var Qrt=s(Qle);d1o=r(Qrt,"roberta"),Qrt.forEach(t),c1o=r(cLe," \u2014 "),ZN=n(cLe,"A",{href:!0});var Hrt=s(ZN);m1o=r(Hrt,"RobertaModel"),Hrt.forEach(t),f1o=r(cLe," (RoBERTa model)"),cLe.forEach(t),g1o=i($),Cp=n($,"LI",{});var mLe=s(Cp);Hle=n(mLe,"STRONG",{});var Urt=s(Hle);h1o=r(Urt,"roformer"),Urt.forEach(t),u1o=r(mLe," \u2014 "),eq=n(mLe,"A",{href:!0});var Jrt=s(eq);p1o=r(Jrt,"RoFormerModel"),Jrt.forEach(t),_1o=r(mLe," (RoFormer model)"),mLe.forEach(t),b1o=i($),wp=n($,"LI",{});var fLe=s(wp);Ule=n(fLe,"STRONG",{});var Yrt=s(Ule);v1o=r(Yrt,"segformer"),Yrt.forEach(t),F1o=r(fLe," \u2014 "),oq=n(fLe,"A",{href:!0});var Krt=s(oq);T1o=r(Krt,"SegformerModel"),Krt.forEach(t),M1o=r(fLe," (SegFormer model)"),fLe.forEach(t),E1o=i($),Ap=n($,"LI",{});var gLe=s(Ap);Jle=n(gLe,"STRONG",{});var Zrt=s(Jle);C1o=r(Zrt,"sew"),Zrt.forEach(t),w1o=r(gLe," \u2014 "),rq=n(gLe,"A",{href:!0});var ett=s(rq);A1o=r(ett,"SEWModel"),ett.forEach(t),y1o=r(gLe," (SEW model)"),gLe.forEach(t),L1o=i($),yp=n($,"LI",{});var hLe=s(yp);Yle=n(hLe,"STRONG",{});var ott=s(Yle);x1o=r(ott,"sew-d"),ott.forEach(t),$1o=r(hLe," \u2014 "),tq=n(hLe,"A",{href:!0});var rtt=s(tq);k1o=r(rtt,"SEWDModel"),rtt.forEach(t),S1o=r(hLe," (SEW-D model)"),hLe.forEach(t),R1o=i($),Lp=n($,"LI",{});var uLe=s(Lp);Kle=n(uLe,"STRONG",{});var ttt=s(Kle);P1o=r(ttt,"speech_to_text"),ttt.forEach(t),B1o=r(uLe," \u2014 "),aq=n(uLe,"A",{href:!0});var att=s(aq);I1o=r(att,"Speech2TextModel"),att.forEach(t),N1o=r(uLe," (Speech2Text model)"),uLe.forEach(t),q1o=i($),xp=n($,"LI",{});var pLe=s(xp);Zle=n(pLe,"STRONG",{});var ntt=s(Zle);j1o=r(ntt,"splinter"),ntt.forEach(t),D1o=r(pLe," \u2014 "),nq=n(pLe,"A",{href:!0});var stt=s(nq);G1o=r(stt,"SplinterModel"),stt.forEach(t),O1o=r(pLe," (Splinter model)"),pLe.forEach(t),V1o=i($),$p=n($,"LI",{});var _Le=s($p);eie=n(_Le,"STRONG",{});var ltt=s(eie);X1o=r(ltt,"squeezebert"),ltt.forEach(t),z1o=r(_Le," \u2014 "),sq=n(_Le,"A",{href:!0});var itt=s(sq);W1o=r(itt,"SqueezeBertModel"),itt.forEach(t),Q1o=r(_Le," (SqueezeBERT model)"),_Le.forEach(t),H1o=i($),kp=n($,"LI",{});var bLe=s(kp);oie=n(bLe,"STRONG",{});var dtt=s(oie);U1o=r(dtt,"swin"),dtt.forEach(t),J1o=r(bLe," \u2014 "),lq=n(bLe,"A",{href:!0});var ctt=s(lq);Y1o=r(ctt,"SwinModel"),ctt.forEach(t),K1o=r(bLe," (Swin model)"),bLe.forEach(t),Z1o=i($),Sp=n($,"LI",{});var vLe=s(Sp);rie=n(vLe,"STRONG",{});var mtt=s(rie);eTo=r(mtt,"t5"),mtt.forEach(t),oTo=r(vLe," \u2014 "),iq=n(vLe,"A",{href:!0});var ftt=s(iq);rTo=r(ftt,"T5Model"),ftt.forEach(t),tTo=r(vLe," (T5 model)"),vLe.forEach(t),aTo=i($),Rp=n($,"LI",{});var FLe=s(Rp);tie=n(FLe,"STRONG",{});var gtt=s(tie);nTo=r(gtt,"tapas"),gtt.forEach(t),sTo=r(FLe," \u2014 "),dq=n(FLe,"A",{href:!0});var htt=s(dq);lTo=r(htt,"TapasModel"),htt.forEach(t),iTo=r(FLe," (TAPAS model)"),FLe.forEach(t),dTo=i($),Pp=n($,"LI",{});var TLe=s(Pp);aie=n(TLe,"STRONG",{});var utt=s(aie);cTo=r(utt,"trajectory_transformer"),utt.forEach(t),mTo=r(TLe," \u2014 "),cq=n(TLe,"A",{href:!0});var ptt=s(cq);fTo=r(ptt,"TrajectoryTransformerModel"),ptt.forEach(t),gTo=r(TLe," (Trajectory Transformer model)"),TLe.forEach(t),hTo=i($),Bp=n($,"LI",{});var MLe=s(Bp);nie=n(MLe,"STRONG",{});var _tt=s(nie);uTo=r(_tt,"transfo-xl"),_tt.forEach(t),pTo=r(MLe," \u2014 "),mq=n(MLe,"A",{href:!0});var btt=s(mq);_To=r(btt,"TransfoXLModel"),btt.forEach(t),bTo=r(MLe," (Transformer-XL model)"),MLe.forEach(t),vTo=i($),Ip=n($,"LI",{});var ELe=s(Ip);sie=n(ELe,"STRONG",{});var vtt=s(sie);FTo=r(vtt,"unispeech"),vtt.forEach(t),TTo=r(ELe," \u2014 "),fq=n(ELe,"A",{href:!0});var Ftt=s(fq);MTo=r(Ftt,"UniSpeechModel"),Ftt.forEach(t),ETo=r(ELe," (UniSpeech model)"),ELe.forEach(t),CTo=i($),Np=n($,"LI",{});var CLe=s(Np);lie=n(CLe,"STRONG",{});var Ttt=s(lie);wTo=r(Ttt,"unispeech-sat"),Ttt.forEach(t),ATo=r(CLe," \u2014 "),gq=n(CLe,"A",{href:!0});var Mtt=s(gq);yTo=r(Mtt,"UniSpeechSatModel"),Mtt.forEach(t),LTo=r(CLe," (UniSpeechSat model)"),CLe.forEach(t),xTo=i($),qp=n($,"LI",{});var wLe=s(qp);iie=n(wLe,"STRONG",{});var Ett=s(iie);$To=r(Ett,"van"),Ett.forEach(t),kTo=r(wLe," \u2014 "),hq=n(wLe,"A",{href:!0});var Ctt=s(hq);STo=r(Ctt,"VanModel"),Ctt.forEach(t),RTo=r(wLe," (VAN model)"),wLe.forEach(t),PTo=i($),jp=n($,"LI",{});var ALe=s(jp);die=n(ALe,"STRONG",{});var wtt=s(die);BTo=r(wtt,"vilt"),wtt.forEach(t),ITo=r(ALe," \u2014 "),uq=n(ALe,"A",{href:!0});var Att=s(uq);NTo=r(Att,"ViltModel"),Att.forEach(t),qTo=r(ALe," (ViLT model)"),ALe.forEach(t),jTo=i($),Dp=n($,"LI",{});var yLe=s(Dp);cie=n(yLe,"STRONG",{});var ytt=s(cie);DTo=r(ytt,"vision-text-dual-encoder"),ytt.forEach(t),GTo=r(yLe," \u2014 "),pq=n(yLe,"A",{href:!0});var Ltt=s(pq);OTo=r(Ltt,"VisionTextDualEncoderModel"),Ltt.forEach(t),VTo=r(yLe," (VisionTextDualEncoder model)"),yLe.forEach(t),XTo=i($),Gp=n($,"LI",{});var LLe=s(Gp);mie=n(LLe,"STRONG",{});var xtt=s(mie);zTo=r(xtt,"visual_bert"),xtt.forEach(t),WTo=r(LLe," \u2014 "),_q=n(LLe,"A",{href:!0});var $tt=s(_q);QTo=r($tt,"VisualBertModel"),$tt.forEach(t),HTo=r(LLe," (VisualBert model)"),LLe.forEach(t),UTo=i($),Op=n($,"LI",{});var xLe=s(Op);fie=n(xLe,"STRONG",{});var ktt=s(fie);JTo=r(ktt,"vit"),ktt.forEach(t),YTo=r(xLe," \u2014 "),bq=n(xLe,"A",{href:!0});var Stt=s(bq);KTo=r(Stt,"ViTModel"),Stt.forEach(t),ZTo=r(xLe," (ViT model)"),xLe.forEach(t),eMo=i($),Vp=n($,"LI",{});var $Le=s(Vp);gie=n($Le,"STRONG",{});var Rtt=s(gie);oMo=r(Rtt,"vit_mae"),Rtt.forEach(t),rMo=r($Le," \u2014 "),vq=n($Le,"A",{href:!0});var Ptt=s(vq);tMo=r(Ptt,"ViTMAEModel"),Ptt.forEach(t),aMo=r($Le," (ViTMAE model)"),$Le.forEach(t),nMo=i($),Xp=n($,"LI",{});var kLe=s(Xp);hie=n(kLe,"STRONG",{});var Btt=s(hie);sMo=r(Btt,"wav2vec2"),Btt.forEach(t),lMo=r(kLe," \u2014 "),Fq=n(kLe,"A",{href:!0});var Itt=s(Fq);iMo=r(Itt,"Wav2Vec2Model"),Itt.forEach(t),dMo=r(kLe," (Wav2Vec2 model)"),kLe.forEach(t),cMo=i($),zp=n($,"LI",{});var SLe=s(zp);uie=n(SLe,"STRONG",{});var Ntt=s(uie);mMo=r(Ntt,"wav2vec2-conformer"),Ntt.forEach(t),fMo=r(SLe," \u2014 "),Tq=n(SLe,"A",{href:!0});var qtt=s(Tq);gMo=r(qtt,"Wav2Vec2ConformerModel"),qtt.forEach(t),hMo=r(SLe," (Wav2Vec2-Conformer model)"),SLe.forEach(t),uMo=i($),Wp=n($,"LI",{});var RLe=s(Wp);pie=n(RLe,"STRONG",{});var jtt=s(pie);pMo=r(jtt,"wavlm"),jtt.forEach(t),_Mo=r(RLe," \u2014 "),Mq=n(RLe,"A",{href:!0});var Dtt=s(Mq);bMo=r(Dtt,"WavLMModel"),Dtt.forEach(t),vMo=r(RLe," (WavLM model)"),RLe.forEach(t),FMo=i($),Qp=n($,"LI",{});var PLe=s(Qp);_ie=n(PLe,"STRONG",{});var Gtt=s(_ie);TMo=r(Gtt,"xglm"),Gtt.forEach(t),MMo=r(PLe," \u2014 "),Eq=n(PLe,"A",{href:!0});var Ott=s(Eq);EMo=r(Ott,"XGLMModel"),Ott.forEach(t),CMo=r(PLe," (XGLM model)"),PLe.forEach(t),wMo=i($),Hp=n($,"LI",{});var BLe=s(Hp);bie=n(BLe,"STRONG",{});var Vtt=s(bie);AMo=r(Vtt,"xlm"),Vtt.forEach(t),yMo=r(BLe," \u2014 "),Cq=n(BLe,"A",{href:!0});var Xtt=s(Cq);LMo=r(Xtt,"XLMModel"),Xtt.forEach(t),xMo=r(BLe," (XLM model)"),BLe.forEach(t),$Mo=i($),Up=n($,"LI",{});var ILe=s(Up);vie=n(ILe,"STRONG",{});var ztt=s(vie);kMo=r(ztt,"xlm-prophetnet"),ztt.forEach(t),SMo=r(ILe," \u2014 "),wq=n(ILe,"A",{href:!0});var Wtt=s(wq);RMo=r(Wtt,"XLMProphetNetModel"),Wtt.forEach(t),PMo=r(ILe," (XLMProphetNet model)"),ILe.forEach(t),BMo=i($),Jp=n($,"LI",{});var NLe=s(Jp);Fie=n(NLe,"STRONG",{});var Qtt=s(Fie);IMo=r(Qtt,"xlm-roberta"),Qtt.forEach(t),NMo=r(NLe," \u2014 "),Aq=n(NLe,"A",{href:!0});var Htt=s(Aq);qMo=r(Htt,"XLMRobertaModel"),Htt.forEach(t),jMo=r(NLe," (XLM-RoBERTa model)"),NLe.forEach(t),DMo=i($),Yp=n($,"LI",{});var qLe=s(Yp);Tie=n(qLe,"STRONG",{});var Utt=s(Tie);GMo=r(Utt,"xlm-roberta-xl"),Utt.forEach(t),OMo=r(qLe," \u2014 "),yq=n(qLe,"A",{href:!0});var Jtt=s(yq);VMo=r(Jtt,"XLMRobertaXLModel"),Jtt.forEach(t),XMo=r(qLe," (XLM-RoBERTa-XL model)"),qLe.forEach(t),zMo=i($),Kp=n($,"LI",{});var jLe=s(Kp);Mie=n(jLe,"STRONG",{});var Ytt=s(Mie);WMo=r(Ytt,"xlnet"),Ytt.forEach(t),QMo=r(jLe," \u2014 "),Lq=n(jLe,"A",{href:!0});var Ktt=s(Lq);HMo=r(Ktt,"XLNetModel"),Ktt.forEach(t),UMo=r(jLe," (XLNet model)"),jLe.forEach(t),JMo=i($),Zp=n($,"LI",{});var DLe=s(Zp);Eie=n(DLe,"STRONG",{});var Ztt=s(Eie);YMo=r(Ztt,"yolos"),Ztt.forEach(t),KMo=r(DLe," \u2014 "),xq=n(DLe,"A",{href:!0});var eat=s(xq);ZMo=r(eat,"YolosModel"),eat.forEach(t),e4o=r(DLe," (YOLOS model)"),DLe.forEach(t),o4o=i($),e_=n($,"LI",{});var GLe=s(e_);Cie=n(GLe,"STRONG",{});var oat=s(Cie);r4o=r(oat,"yoso"),oat.forEach(t),t4o=r(GLe," \u2014 "),$q=n(GLe,"A",{href:!0});var rat=s($q);a4o=r(rat,"YosoModel"),rat.forEach(t),n4o=r(GLe," (YOSO model)"),GLe.forEach(t),$.forEach(t),s4o=i(oa),o_=n(oa,"P",{});var OLe=s(o_);l4o=r(OLe,"The model is set in evaluation mode by default using "),wie=n(OLe,"CODE",{});var tat=s(wie);i4o=r(tat,"model.eval()"),tat.forEach(t),d4o=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aie=n(OLe,"CODE",{});var aat=s(Aie);c4o=r(aat,"model.train()"),aat.forEach(t),OLe.forEach(t),m4o=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),xqe=i(m),Li=n(m,"H2",{class:!0});var RDe=s(Li);t_=n(RDe,"A",{id:!0,class:!0,href:!0});var nat=s(t_);yie=n(nat,"SPAN",{});var sat=s(yie);T(iL.$$.fragment,sat),sat.forEach(t),nat.forEach(t),f4o=i(RDe),Lie=n(RDe,"SPAN",{});var lat=s(Lie);g4o=r(lat,"AutoModelForPreTraining"),lat.forEach(t),RDe.forEach(t),$qe=i(m),xo=n(m,"DIV",{class:!0});var Os=s(xo);T(dL.$$.fragment,Os),h4o=i(Os),xi=n(Os,"P",{});var wZ=s(xi);u4o=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=n(wZ,"A",{href:!0});var iat=s(kq);p4o=r(iat,"from_pretrained()"),iat.forEach(t),_4o=r(wZ," class method or the "),Sq=n(wZ,"A",{href:!0});var dat=s(Sq);b4o=r(dat,"from_config()"),dat.forEach(t),v4o=r(wZ,` class
method.`),wZ.forEach(t),F4o=i(Os),cL=n(Os,"P",{});var PDe=s(cL);T4o=r(PDe,"This class cannot be instantiated directly using "),xie=n(PDe,"CODE",{});var cat=s(xie);M4o=r(cat,"__init__()"),cat.forEach(t),E4o=r(PDe," (throws an error)."),PDe.forEach(t),C4o=i(Os),at=n(Os,"DIV",{class:!0});var N6=s(at);T(mL.$$.fragment,N6),w4o=i(N6),$ie=n(N6,"P",{});var mat=s($ie);A4o=r(mat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mat.forEach(t),y4o=i(N6),$i=n(N6,"P",{});var AZ=s($i);L4o=r(AZ,`Note:
Loading a model from its configuration file does `),kie=n(AZ,"STRONG",{});var fat=s(kie);x4o=r(fat,"not"),fat.forEach(t),$4o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(AZ,"A",{href:!0});var gat=s(Rq);k4o=r(gat,"from_pretrained()"),gat.forEach(t),S4o=r(AZ," to load the model weights."),AZ.forEach(t),R4o=i(N6),T(a_.$$.fragment,N6),N6.forEach(t),P4o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(fL.$$.fragment,ra),B4o=i(ra),Sie=n(ra,"P",{});var hat=s(Sie);I4o=r(hat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hat.forEach(t),N4o=i(ra),xa=n(ra,"P",{});var q6=s(xa);q4o=r(q6,"The model class to instantiate is selected based on the "),Rie=n(q6,"CODE",{});var uat=s(Rie);j4o=r(uat,"model_type"),uat.forEach(t),D4o=r(q6,` property of the config object (either
passed as an argument or loaded from `),Pie=n(q6,"CODE",{});var pat=s(Pie);G4o=r(pat,"pretrained_model_name_or_path"),pat.forEach(t),O4o=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=n(q6,"CODE",{});var _at=s(Bie);V4o=r(_at,"pretrained_model_name_or_path"),_at.forEach(t),X4o=r(q6,":"),q6.forEach(t),z4o=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var VLe=s(n_);Iie=n(VLe,"STRONG",{});var bat=s(Iie);W4o=r(bat,"albert"),bat.forEach(t),Q4o=r(VLe," \u2014 "),Pq=n(VLe,"A",{href:!0});var vat=s(Pq);H4o=r(vat,"AlbertForPreTraining"),vat.forEach(t),U4o=r(VLe," (ALBERT model)"),VLe.forEach(t),J4o=i(O),s_=n(O,"LI",{});var XLe=s(s_);Nie=n(XLe,"STRONG",{});var Fat=s(Nie);Y4o=r(Fat,"bart"),Fat.forEach(t),K4o=r(XLe," \u2014 "),Bq=n(XLe,"A",{href:!0});var Tat=s(Bq);Z4o=r(Tat,"BartForConditionalGeneration"),Tat.forEach(t),eEo=r(XLe," (BART model)"),XLe.forEach(t),oEo=i(O),l_=n(O,"LI",{});var zLe=s(l_);qie=n(zLe,"STRONG",{});var Mat=s(qie);rEo=r(Mat,"bert"),Mat.forEach(t),tEo=r(zLe," \u2014 "),Iq=n(zLe,"A",{href:!0});var Eat=s(Iq);aEo=r(Eat,"BertForPreTraining"),Eat.forEach(t),nEo=r(zLe," (BERT model)"),zLe.forEach(t),sEo=i(O),i_=n(O,"LI",{});var WLe=s(i_);jie=n(WLe,"STRONG",{});var Cat=s(jie);lEo=r(Cat,"big_bird"),Cat.forEach(t),iEo=r(WLe," \u2014 "),Nq=n(WLe,"A",{href:!0});var wat=s(Nq);dEo=r(wat,"BigBirdForPreTraining"),wat.forEach(t),cEo=r(WLe," (BigBird model)"),WLe.forEach(t),mEo=i(O),d_=n(O,"LI",{});var QLe=s(d_);Die=n(QLe,"STRONG",{});var Aat=s(Die);fEo=r(Aat,"camembert"),Aat.forEach(t),gEo=r(QLe," \u2014 "),qq=n(QLe,"A",{href:!0});var yat=s(qq);hEo=r(yat,"CamembertForMaskedLM"),yat.forEach(t),uEo=r(QLe," (CamemBERT model)"),QLe.forEach(t),pEo=i(O),c_=n(O,"LI",{});var HLe=s(c_);Gie=n(HLe,"STRONG",{});var Lat=s(Gie);_Eo=r(Lat,"ctrl"),Lat.forEach(t),bEo=r(HLe," \u2014 "),jq=n(HLe,"A",{href:!0});var xat=s(jq);vEo=r(xat,"CTRLLMHeadModel"),xat.forEach(t),FEo=r(HLe," (CTRL model)"),HLe.forEach(t),TEo=i(O),m_=n(O,"LI",{});var ULe=s(m_);Oie=n(ULe,"STRONG",{});var $at=s(Oie);MEo=r($at,"data2vec-text"),$at.forEach(t),EEo=r(ULe," \u2014 "),Dq=n(ULe,"A",{href:!0});var kat=s(Dq);CEo=r(kat,"Data2VecTextForMaskedLM"),kat.forEach(t),wEo=r(ULe," (Data2VecText model)"),ULe.forEach(t),AEo=i(O),f_=n(O,"LI",{});var JLe=s(f_);Vie=n(JLe,"STRONG",{});var Sat=s(Vie);yEo=r(Sat,"deberta"),Sat.forEach(t),LEo=r(JLe," \u2014 "),Gq=n(JLe,"A",{href:!0});var Rat=s(Gq);xEo=r(Rat,"DebertaForMaskedLM"),Rat.forEach(t),$Eo=r(JLe," (DeBERTa model)"),JLe.forEach(t),kEo=i(O),g_=n(O,"LI",{});var YLe=s(g_);Xie=n(YLe,"STRONG",{});var Pat=s(Xie);SEo=r(Pat,"deberta-v2"),Pat.forEach(t),REo=r(YLe," \u2014 "),Oq=n(YLe,"A",{href:!0});var Bat=s(Oq);PEo=r(Bat,"DebertaV2ForMaskedLM"),Bat.forEach(t),BEo=r(YLe," (DeBERTa-v2 model)"),YLe.forEach(t),IEo=i(O),h_=n(O,"LI",{});var KLe=s(h_);zie=n(KLe,"STRONG",{});var Iat=s(zie);NEo=r(Iat,"distilbert"),Iat.forEach(t),qEo=r(KLe," \u2014 "),Vq=n(KLe,"A",{href:!0});var Nat=s(Vq);jEo=r(Nat,"DistilBertForMaskedLM"),Nat.forEach(t),DEo=r(KLe," (DistilBERT model)"),KLe.forEach(t),GEo=i(O),u_=n(O,"LI",{});var ZLe=s(u_);Wie=n(ZLe,"STRONG",{});var qat=s(Wie);OEo=r(qat,"electra"),qat.forEach(t),VEo=r(ZLe," \u2014 "),Xq=n(ZLe,"A",{href:!0});var jat=s(Xq);XEo=r(jat,"ElectraForPreTraining"),jat.forEach(t),zEo=r(ZLe," (ELECTRA model)"),ZLe.forEach(t),WEo=i(O),p_=n(O,"LI",{});var e8e=s(p_);Qie=n(e8e,"STRONG",{});var Dat=s(Qie);QEo=r(Dat,"flaubert"),Dat.forEach(t),HEo=r(e8e," \u2014 "),zq=n(e8e,"A",{href:!0});var Gat=s(zq);UEo=r(Gat,"FlaubertWithLMHeadModel"),Gat.forEach(t),JEo=r(e8e," (FlauBERT model)"),e8e.forEach(t),YEo=i(O),__=n(O,"LI",{});var o8e=s(__);Hie=n(o8e,"STRONG",{});var Oat=s(Hie);KEo=r(Oat,"flava"),Oat.forEach(t),ZEo=r(o8e," \u2014 "),Wq=n(o8e,"A",{href:!0});var Vat=s(Wq);eCo=r(Vat,"FlavaForPreTraining"),Vat.forEach(t),oCo=r(o8e," (Flava model)"),o8e.forEach(t),rCo=i(O),b_=n(O,"LI",{});var r8e=s(b_);Uie=n(r8e,"STRONG",{});var Xat=s(Uie);tCo=r(Xat,"fnet"),Xat.forEach(t),aCo=r(r8e," \u2014 "),Qq=n(r8e,"A",{href:!0});var zat=s(Qq);nCo=r(zat,"FNetForPreTraining"),zat.forEach(t),sCo=r(r8e," (FNet model)"),r8e.forEach(t),lCo=i(O),v_=n(O,"LI",{});var t8e=s(v_);Jie=n(t8e,"STRONG",{});var Wat=s(Jie);iCo=r(Wat,"fsmt"),Wat.forEach(t),dCo=r(t8e," \u2014 "),Hq=n(t8e,"A",{href:!0});var Qat=s(Hq);cCo=r(Qat,"FSMTForConditionalGeneration"),Qat.forEach(t),mCo=r(t8e," (FairSeq Machine-Translation model)"),t8e.forEach(t),fCo=i(O),F_=n(O,"LI",{});var a8e=s(F_);Yie=n(a8e,"STRONG",{});var Hat=s(Yie);gCo=r(Hat,"funnel"),Hat.forEach(t),hCo=r(a8e," \u2014 "),Uq=n(a8e,"A",{href:!0});var Uat=s(Uq);uCo=r(Uat,"FunnelForPreTraining"),Uat.forEach(t),pCo=r(a8e," (Funnel Transformer model)"),a8e.forEach(t),_Co=i(O),T_=n(O,"LI",{});var n8e=s(T_);Kie=n(n8e,"STRONG",{});var Jat=s(Kie);bCo=r(Jat,"gpt2"),Jat.forEach(t),vCo=r(n8e," \u2014 "),Jq=n(n8e,"A",{href:!0});var Yat=s(Jq);FCo=r(Yat,"GPT2LMHeadModel"),Yat.forEach(t),TCo=r(n8e," (OpenAI GPT-2 model)"),n8e.forEach(t),MCo=i(O),M_=n(O,"LI",{});var s8e=s(M_);Zie=n(s8e,"STRONG",{});var Kat=s(Zie);ECo=r(Kat,"ibert"),Kat.forEach(t),CCo=r(s8e," \u2014 "),Yq=n(s8e,"A",{href:!0});var Zat=s(Yq);wCo=r(Zat,"IBertForMaskedLM"),Zat.forEach(t),ACo=r(s8e," (I-BERT model)"),s8e.forEach(t),yCo=i(O),E_=n(O,"LI",{});var l8e=s(E_);ede=n(l8e,"STRONG",{});var ent=s(ede);LCo=r(ent,"layoutlm"),ent.forEach(t),xCo=r(l8e," \u2014 "),Kq=n(l8e,"A",{href:!0});var ont=s(Kq);$Co=r(ont,"LayoutLMForMaskedLM"),ont.forEach(t),kCo=r(l8e," (LayoutLM model)"),l8e.forEach(t),SCo=i(O),C_=n(O,"LI",{});var i8e=s(C_);ode=n(i8e,"STRONG",{});var rnt=s(ode);RCo=r(rnt,"longformer"),rnt.forEach(t),PCo=r(i8e," \u2014 "),Zq=n(i8e,"A",{href:!0});var tnt=s(Zq);BCo=r(tnt,"LongformerForMaskedLM"),tnt.forEach(t),ICo=r(i8e," (Longformer model)"),i8e.forEach(t),NCo=i(O),w_=n(O,"LI",{});var d8e=s(w_);rde=n(d8e,"STRONG",{});var ant=s(rde);qCo=r(ant,"lxmert"),ant.forEach(t),jCo=r(d8e," \u2014 "),ej=n(d8e,"A",{href:!0});var nnt=s(ej);DCo=r(nnt,"LxmertForPreTraining"),nnt.forEach(t),GCo=r(d8e," (LXMERT model)"),d8e.forEach(t),OCo=i(O),A_=n(O,"LI",{});var c8e=s(A_);tde=n(c8e,"STRONG",{});var snt=s(tde);VCo=r(snt,"megatron-bert"),snt.forEach(t),XCo=r(c8e," \u2014 "),oj=n(c8e,"A",{href:!0});var lnt=s(oj);zCo=r(lnt,"MegatronBertForPreTraining"),lnt.forEach(t),WCo=r(c8e," (MegatronBert model)"),c8e.forEach(t),QCo=i(O),y_=n(O,"LI",{});var m8e=s(y_);ade=n(m8e,"STRONG",{});var int=s(ade);HCo=r(int,"mobilebert"),int.forEach(t),UCo=r(m8e," \u2014 "),rj=n(m8e,"A",{href:!0});var dnt=s(rj);JCo=r(dnt,"MobileBertForPreTraining"),dnt.forEach(t),YCo=r(m8e," (MobileBERT model)"),m8e.forEach(t),KCo=i(O),L_=n(O,"LI",{});var f8e=s(L_);nde=n(f8e,"STRONG",{});var cnt=s(nde);ZCo=r(cnt,"mpnet"),cnt.forEach(t),e5o=r(f8e," \u2014 "),tj=n(f8e,"A",{href:!0});var mnt=s(tj);o5o=r(mnt,"MPNetForMaskedLM"),mnt.forEach(t),r5o=r(f8e," (MPNet model)"),f8e.forEach(t),t5o=i(O),x_=n(O,"LI",{});var g8e=s(x_);sde=n(g8e,"STRONG",{});var fnt=s(sde);a5o=r(fnt,"openai-gpt"),fnt.forEach(t),n5o=r(g8e," \u2014 "),aj=n(g8e,"A",{href:!0});var gnt=s(aj);s5o=r(gnt,"OpenAIGPTLMHeadModel"),gnt.forEach(t),l5o=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),i5o=i(O),$_=n(O,"LI",{});var h8e=s($_);lde=n(h8e,"STRONG",{});var hnt=s(lde);d5o=r(hnt,"retribert"),hnt.forEach(t),c5o=r(h8e," \u2014 "),nj=n(h8e,"A",{href:!0});var unt=s(nj);m5o=r(unt,"RetriBertModel"),unt.forEach(t),f5o=r(h8e," (RetriBERT model)"),h8e.forEach(t),g5o=i(O),k_=n(O,"LI",{});var u8e=s(k_);ide=n(u8e,"STRONG",{});var pnt=s(ide);h5o=r(pnt,"roberta"),pnt.forEach(t),u5o=r(u8e," \u2014 "),sj=n(u8e,"A",{href:!0});var _nt=s(sj);p5o=r(_nt,"RobertaForMaskedLM"),_nt.forEach(t),_5o=r(u8e," (RoBERTa model)"),u8e.forEach(t),b5o=i(O),S_=n(O,"LI",{});var p8e=s(S_);dde=n(p8e,"STRONG",{});var bnt=s(dde);v5o=r(bnt,"splinter"),bnt.forEach(t),F5o=r(p8e," \u2014 "),lj=n(p8e,"A",{href:!0});var vnt=s(lj);T5o=r(vnt,"SplinterForPreTraining"),vnt.forEach(t),M5o=r(p8e," (Splinter model)"),p8e.forEach(t),E5o=i(O),R_=n(O,"LI",{});var _8e=s(R_);cde=n(_8e,"STRONG",{});var Fnt=s(cde);C5o=r(Fnt,"squeezebert"),Fnt.forEach(t),w5o=r(_8e," \u2014 "),ij=n(_8e,"A",{href:!0});var Tnt=s(ij);A5o=r(Tnt,"SqueezeBertForMaskedLM"),Tnt.forEach(t),y5o=r(_8e," (SqueezeBERT model)"),_8e.forEach(t),L5o=i(O),P_=n(O,"LI",{});var b8e=s(P_);mde=n(b8e,"STRONG",{});var Mnt=s(mde);x5o=r(Mnt,"t5"),Mnt.forEach(t),$5o=r(b8e," \u2014 "),dj=n(b8e,"A",{href:!0});var Ent=s(dj);k5o=r(Ent,"T5ForConditionalGeneration"),Ent.forEach(t),S5o=r(b8e," (T5 model)"),b8e.forEach(t),R5o=i(O),B_=n(O,"LI",{});var v8e=s(B_);fde=n(v8e,"STRONG",{});var Cnt=s(fde);P5o=r(Cnt,"tapas"),Cnt.forEach(t),B5o=r(v8e," \u2014 "),cj=n(v8e,"A",{href:!0});var wnt=s(cj);I5o=r(wnt,"TapasForMaskedLM"),wnt.forEach(t),N5o=r(v8e," (TAPAS model)"),v8e.forEach(t),q5o=i(O),I_=n(O,"LI",{});var F8e=s(I_);gde=n(F8e,"STRONG",{});var Ant=s(gde);j5o=r(Ant,"transfo-xl"),Ant.forEach(t),D5o=r(F8e," \u2014 "),mj=n(F8e,"A",{href:!0});var ynt=s(mj);G5o=r(ynt,"TransfoXLLMHeadModel"),ynt.forEach(t),O5o=r(F8e," (Transformer-XL model)"),F8e.forEach(t),V5o=i(O),N_=n(O,"LI",{});var T8e=s(N_);hde=n(T8e,"STRONG",{});var Lnt=s(hde);X5o=r(Lnt,"unispeech"),Lnt.forEach(t),z5o=r(T8e," \u2014 "),fj=n(T8e,"A",{href:!0});var xnt=s(fj);W5o=r(xnt,"UniSpeechForPreTraining"),xnt.forEach(t),Q5o=r(T8e," (UniSpeech model)"),T8e.forEach(t),H5o=i(O),q_=n(O,"LI",{});var M8e=s(q_);ude=n(M8e,"STRONG",{});var $nt=s(ude);U5o=r($nt,"unispeech-sat"),$nt.forEach(t),J5o=r(M8e," \u2014 "),gj=n(M8e,"A",{href:!0});var knt=s(gj);Y5o=r(knt,"UniSpeechSatForPreTraining"),knt.forEach(t),K5o=r(M8e," (UniSpeechSat model)"),M8e.forEach(t),Z5o=i(O),j_=n(O,"LI",{});var E8e=s(j_);pde=n(E8e,"STRONG",{});var Snt=s(pde);e3o=r(Snt,"visual_bert"),Snt.forEach(t),o3o=r(E8e," \u2014 "),hj=n(E8e,"A",{href:!0});var Rnt=s(hj);r3o=r(Rnt,"VisualBertForPreTraining"),Rnt.forEach(t),t3o=r(E8e," (VisualBert model)"),E8e.forEach(t),a3o=i(O),D_=n(O,"LI",{});var C8e=s(D_);_de=n(C8e,"STRONG",{});var Pnt=s(_de);n3o=r(Pnt,"vit_mae"),Pnt.forEach(t),s3o=r(C8e," \u2014 "),uj=n(C8e,"A",{href:!0});var Bnt=s(uj);l3o=r(Bnt,"ViTMAEForPreTraining"),Bnt.forEach(t),i3o=r(C8e," (ViTMAE model)"),C8e.forEach(t),d3o=i(O),G_=n(O,"LI",{});var w8e=s(G_);bde=n(w8e,"STRONG",{});var Int=s(bde);c3o=r(Int,"wav2vec2"),Int.forEach(t),m3o=r(w8e," \u2014 "),pj=n(w8e,"A",{href:!0});var Nnt=s(pj);f3o=r(Nnt,"Wav2Vec2ForPreTraining"),Nnt.forEach(t),g3o=r(w8e," (Wav2Vec2 model)"),w8e.forEach(t),h3o=i(O),O_=n(O,"LI",{});var A8e=s(O_);vde=n(A8e,"STRONG",{});var qnt=s(vde);u3o=r(qnt,"wav2vec2-conformer"),qnt.forEach(t),p3o=r(A8e," \u2014 "),_j=n(A8e,"A",{href:!0});var jnt=s(_j);_3o=r(jnt,"Wav2Vec2ConformerForPreTraining"),jnt.forEach(t),b3o=r(A8e," (Wav2Vec2-Conformer model)"),A8e.forEach(t),v3o=i(O),V_=n(O,"LI",{});var y8e=s(V_);Fde=n(y8e,"STRONG",{});var Dnt=s(Fde);F3o=r(Dnt,"xlm"),Dnt.forEach(t),T3o=r(y8e," \u2014 "),bj=n(y8e,"A",{href:!0});var Gnt=s(bj);M3o=r(Gnt,"XLMWithLMHeadModel"),Gnt.forEach(t),E3o=r(y8e," (XLM model)"),y8e.forEach(t),C3o=i(O),X_=n(O,"LI",{});var L8e=s(X_);Tde=n(L8e,"STRONG",{});var Ont=s(Tde);w3o=r(Ont,"xlm-roberta"),Ont.forEach(t),A3o=r(L8e," \u2014 "),vj=n(L8e,"A",{href:!0});var Vnt=s(vj);y3o=r(Vnt,"XLMRobertaForMaskedLM"),Vnt.forEach(t),L3o=r(L8e," (XLM-RoBERTa model)"),L8e.forEach(t),x3o=i(O),z_=n(O,"LI",{});var x8e=s(z_);Mde=n(x8e,"STRONG",{});var Xnt=s(Mde);$3o=r(Xnt,"xlm-roberta-xl"),Xnt.forEach(t),k3o=r(x8e," \u2014 "),Fj=n(x8e,"A",{href:!0});var znt=s(Fj);S3o=r(znt,"XLMRobertaXLForMaskedLM"),znt.forEach(t),R3o=r(x8e," (XLM-RoBERTa-XL model)"),x8e.forEach(t),P3o=i(O),W_=n(O,"LI",{});var $8e=s(W_);Ede=n($8e,"STRONG",{});var Wnt=s(Ede);B3o=r(Wnt,"xlnet"),Wnt.forEach(t),I3o=r($8e," \u2014 "),Tj=n($8e,"A",{href:!0});var Qnt=s(Tj);N3o=r(Qnt,"XLNetLMHeadModel"),Qnt.forEach(t),q3o=r($8e," (XLNet model)"),$8e.forEach(t),O.forEach(t),j3o=i(ra),Q_=n(ra,"P",{});var k8e=s(Q_);D3o=r(k8e,"The model is set in evaluation mode by default using "),Cde=n(k8e,"CODE",{});var Hnt=s(Cde);G3o=r(Hnt,"model.eval()"),Hnt.forEach(t),O3o=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(k8e,"CODE",{});var Unt=s(wde);V3o=r(Unt,"model.train()"),Unt.forEach(t),k8e.forEach(t),X3o=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),kqe=i(m),ki=n(m,"H2",{class:!0});var BDe=s(ki);U_=n(BDe,"A",{id:!0,class:!0,href:!0});var Jnt=s(U_);Ade=n(Jnt,"SPAN",{});var Ynt=s(Ade);T(gL.$$.fragment,Ynt),Ynt.forEach(t),Jnt.forEach(t),z3o=i(BDe),yde=n(BDe,"SPAN",{});var Knt=s(yde);W3o=r(Knt,"AutoModelForCausalLM"),Knt.forEach(t),BDe.forEach(t),Sqe=i(m),$o=n(m,"DIV",{class:!0});var Vs=s($o);T(hL.$$.fragment,Vs),Q3o=i(Vs),Si=n(Vs,"P",{});var yZ=s(Si);H3o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=n(yZ,"A",{href:!0});var Znt=s(Mj);U3o=r(Znt,"from_pretrained()"),Znt.forEach(t),J3o=r(yZ," class method or the "),Ej=n(yZ,"A",{href:!0});var est=s(Ej);Y3o=r(est,"from_config()"),est.forEach(t),K3o=r(yZ,` class
method.`),yZ.forEach(t),Z3o=i(Vs),uL=n(Vs,"P",{});var IDe=s(uL);ewo=r(IDe,"This class cannot be instantiated directly using "),Lde=n(IDe,"CODE",{});var ost=s(Lde);owo=r(ost,"__init__()"),ost.forEach(t),rwo=r(IDe," (throws an error)."),IDe.forEach(t),two=i(Vs),nt=n(Vs,"DIV",{class:!0});var j6=s(nt);T(pL.$$.fragment,j6),awo=i(j6),xde=n(j6,"P",{});var rst=s(xde);nwo=r(rst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rst.forEach(t),swo=i(j6),Ri=n(j6,"P",{});var LZ=s(Ri);lwo=r(LZ,`Note:
Loading a model from its configuration file does `),$de=n(LZ,"STRONG",{});var tst=s($de);iwo=r(tst,"not"),tst.forEach(t),dwo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(LZ,"A",{href:!0});var ast=s(Cj);cwo=r(ast,"from_pretrained()"),ast.forEach(t),mwo=r(LZ," to load the model weights."),LZ.forEach(t),fwo=i(j6),T(J_.$$.fragment,j6),j6.forEach(t),gwo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(_L.$$.fragment,ta),hwo=i(ta),kde=n(ta,"P",{});var nst=s(kde);uwo=r(nst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nst.forEach(t),pwo=i(ta),$a=n(ta,"P",{});var D6=s($a);_wo=r(D6,"The model class to instantiate is selected based on the "),Sde=n(D6,"CODE",{});var sst=s(Sde);bwo=r(sst,"model_type"),sst.forEach(t),vwo=r(D6,` property of the config object (either
passed as an argument or loaded from `),Rde=n(D6,"CODE",{});var lst=s(Rde);Fwo=r(lst,"pretrained_model_name_or_path"),lst.forEach(t),Two=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=n(D6,"CODE",{});var ist=s(Pde);Mwo=r(ist,"pretrained_model_name_or_path"),ist.forEach(t),Ewo=r(D6,":"),D6.forEach(t),Cwo=i(ta),z=n(ta,"UL",{});var W=s(z);Y_=n(W,"LI",{});var S8e=s(Y_);Bde=n(S8e,"STRONG",{});var dst=s(Bde);wwo=r(dst,"bart"),dst.forEach(t),Awo=r(S8e," \u2014 "),wj=n(S8e,"A",{href:!0});var cst=s(wj);ywo=r(cst,"BartForCausalLM"),cst.forEach(t),Lwo=r(S8e," (BART model)"),S8e.forEach(t),xwo=i(W),K_=n(W,"LI",{});var R8e=s(K_);Ide=n(R8e,"STRONG",{});var mst=s(Ide);$wo=r(mst,"bert"),mst.forEach(t),kwo=r(R8e," \u2014 "),Aj=n(R8e,"A",{href:!0});var fst=s(Aj);Swo=r(fst,"BertLMHeadModel"),fst.forEach(t),Rwo=r(R8e," (BERT model)"),R8e.forEach(t),Pwo=i(W),Z_=n(W,"LI",{});var P8e=s(Z_);Nde=n(P8e,"STRONG",{});var gst=s(Nde);Bwo=r(gst,"bert-generation"),gst.forEach(t),Iwo=r(P8e," \u2014 "),yj=n(P8e,"A",{href:!0});var hst=s(yj);Nwo=r(hst,"BertGenerationDecoder"),hst.forEach(t),qwo=r(P8e," (Bert Generation model)"),P8e.forEach(t),jwo=i(W),eb=n(W,"LI",{});var B8e=s(eb);qde=n(B8e,"STRONG",{});var ust=s(qde);Dwo=r(ust,"big_bird"),ust.forEach(t),Gwo=r(B8e," \u2014 "),Lj=n(B8e,"A",{href:!0});var pst=s(Lj);Owo=r(pst,"BigBirdForCausalLM"),pst.forEach(t),Vwo=r(B8e," (BigBird model)"),B8e.forEach(t),Xwo=i(W),ob=n(W,"LI",{});var I8e=s(ob);jde=n(I8e,"STRONG",{});var _st=s(jde);zwo=r(_st,"bigbird_pegasus"),_st.forEach(t),Wwo=r(I8e," \u2014 "),xj=n(I8e,"A",{href:!0});var bst=s(xj);Qwo=r(bst,"BigBirdPegasusForCausalLM"),bst.forEach(t),Hwo=r(I8e," (BigBirdPegasus model)"),I8e.forEach(t),Uwo=i(W),rb=n(W,"LI",{});var N8e=s(rb);Dde=n(N8e,"STRONG",{});var vst=s(Dde);Jwo=r(vst,"blenderbot"),vst.forEach(t),Ywo=r(N8e," \u2014 "),$j=n(N8e,"A",{href:!0});var Fst=s($j);Kwo=r(Fst,"BlenderbotForCausalLM"),Fst.forEach(t),Zwo=r(N8e," (Blenderbot model)"),N8e.forEach(t),e0o=i(W),tb=n(W,"LI",{});var q8e=s(tb);Gde=n(q8e,"STRONG",{});var Tst=s(Gde);o0o=r(Tst,"blenderbot-small"),Tst.forEach(t),r0o=r(q8e," \u2014 "),kj=n(q8e,"A",{href:!0});var Mst=s(kj);t0o=r(Mst,"BlenderbotSmallForCausalLM"),Mst.forEach(t),a0o=r(q8e," (BlenderbotSmall model)"),q8e.forEach(t),n0o=i(W),ab=n(W,"LI",{});var j8e=s(ab);Ode=n(j8e,"STRONG",{});var Est=s(Ode);s0o=r(Est,"camembert"),Est.forEach(t),l0o=r(j8e," \u2014 "),Sj=n(j8e,"A",{href:!0});var Cst=s(Sj);i0o=r(Cst,"CamembertForCausalLM"),Cst.forEach(t),d0o=r(j8e," (CamemBERT model)"),j8e.forEach(t),c0o=i(W),nb=n(W,"LI",{});var D8e=s(nb);Vde=n(D8e,"STRONG",{});var wst=s(Vde);m0o=r(wst,"ctrl"),wst.forEach(t),f0o=r(D8e," \u2014 "),Rj=n(D8e,"A",{href:!0});var Ast=s(Rj);g0o=r(Ast,"CTRLLMHeadModel"),Ast.forEach(t),h0o=r(D8e," (CTRL model)"),D8e.forEach(t),u0o=i(W),sb=n(W,"LI",{});var G8e=s(sb);Xde=n(G8e,"STRONG",{});var yst=s(Xde);p0o=r(yst,"data2vec-text"),yst.forEach(t),_0o=r(G8e," \u2014 "),Pj=n(G8e,"A",{href:!0});var Lst=s(Pj);b0o=r(Lst,"Data2VecTextForCausalLM"),Lst.forEach(t),v0o=r(G8e," (Data2VecText model)"),G8e.forEach(t),F0o=i(W),lb=n(W,"LI",{});var O8e=s(lb);zde=n(O8e,"STRONG",{});var xst=s(zde);T0o=r(xst,"electra"),xst.forEach(t),M0o=r(O8e," \u2014 "),Bj=n(O8e,"A",{href:!0});var $st=s(Bj);E0o=r($st,"ElectraForCausalLM"),$st.forEach(t),C0o=r(O8e," (ELECTRA model)"),O8e.forEach(t),w0o=i(W),ib=n(W,"LI",{});var V8e=s(ib);Wde=n(V8e,"STRONG",{});var kst=s(Wde);A0o=r(kst,"gpt2"),kst.forEach(t),y0o=r(V8e," \u2014 "),Ij=n(V8e,"A",{href:!0});var Sst=s(Ij);L0o=r(Sst,"GPT2LMHeadModel"),Sst.forEach(t),x0o=r(V8e," (OpenAI GPT-2 model)"),V8e.forEach(t),$0o=i(W),db=n(W,"LI",{});var X8e=s(db);Qde=n(X8e,"STRONG",{});var Rst=s(Qde);k0o=r(Rst,"gpt_neo"),Rst.forEach(t),S0o=r(X8e," \u2014 "),Nj=n(X8e,"A",{href:!0});var Pst=s(Nj);R0o=r(Pst,"GPTNeoForCausalLM"),Pst.forEach(t),P0o=r(X8e," (GPT Neo model)"),X8e.forEach(t),B0o=i(W),cb=n(W,"LI",{});var z8e=s(cb);Hde=n(z8e,"STRONG",{});var Bst=s(Hde);I0o=r(Bst,"gpt_neox"),Bst.forEach(t),N0o=r(z8e," \u2014 "),qj=n(z8e,"A",{href:!0});var Ist=s(qj);q0o=r(Ist,"GPTNeoXForCausalLM"),Ist.forEach(t),j0o=r(z8e," (GPT NeoX model)"),z8e.forEach(t),D0o=i(W),mb=n(W,"LI",{});var W8e=s(mb);Ude=n(W8e,"STRONG",{});var Nst=s(Ude);G0o=r(Nst,"gptj"),Nst.forEach(t),O0o=r(W8e," \u2014 "),jj=n(W8e,"A",{href:!0});var qst=s(jj);V0o=r(qst,"GPTJForCausalLM"),qst.forEach(t),X0o=r(W8e," (GPT-J model)"),W8e.forEach(t),z0o=i(W),fb=n(W,"LI",{});var Q8e=s(fb);Jde=n(Q8e,"STRONG",{});var jst=s(Jde);W0o=r(jst,"marian"),jst.forEach(t),Q0o=r(Q8e," \u2014 "),Dj=n(Q8e,"A",{href:!0});var Dst=s(Dj);H0o=r(Dst,"MarianForCausalLM"),Dst.forEach(t),U0o=r(Q8e," (Marian model)"),Q8e.forEach(t),J0o=i(W),gb=n(W,"LI",{});var H8e=s(gb);Yde=n(H8e,"STRONG",{});var Gst=s(Yde);Y0o=r(Gst,"mbart"),Gst.forEach(t),K0o=r(H8e," \u2014 "),Gj=n(H8e,"A",{href:!0});var Ost=s(Gj);Z0o=r(Ost,"MBartForCausalLM"),Ost.forEach(t),e6o=r(H8e," (mBART model)"),H8e.forEach(t),o6o=i(W),hb=n(W,"LI",{});var U8e=s(hb);Kde=n(U8e,"STRONG",{});var Vst=s(Kde);r6o=r(Vst,"megatron-bert"),Vst.forEach(t),t6o=r(U8e," \u2014 "),Oj=n(U8e,"A",{href:!0});var Xst=s(Oj);a6o=r(Xst,"MegatronBertForCausalLM"),Xst.forEach(t),n6o=r(U8e," (MegatronBert model)"),U8e.forEach(t),s6o=i(W),ub=n(W,"LI",{});var J8e=s(ub);Zde=n(J8e,"STRONG",{});var zst=s(Zde);l6o=r(zst,"openai-gpt"),zst.forEach(t),i6o=r(J8e," \u2014 "),Vj=n(J8e,"A",{href:!0});var Wst=s(Vj);d6o=r(Wst,"OpenAIGPTLMHeadModel"),Wst.forEach(t),c6o=r(J8e," (OpenAI GPT model)"),J8e.forEach(t),m6o=i(W),pb=n(W,"LI",{});var Y8e=s(pb);ece=n(Y8e,"STRONG",{});var Qst=s(ece);f6o=r(Qst,"opt"),Qst.forEach(t),g6o=r(Y8e," \u2014 "),Xj=n(Y8e,"A",{href:!0});var Hst=s(Xj);h6o=r(Hst,"OPTForCausalLM"),Hst.forEach(t),u6o=r(Y8e," (OPT model)"),Y8e.forEach(t),p6o=i(W),_b=n(W,"LI",{});var K8e=s(_b);oce=n(K8e,"STRONG",{});var Ust=s(oce);_6o=r(Ust,"pegasus"),Ust.forEach(t),b6o=r(K8e," \u2014 "),zj=n(K8e,"A",{href:!0});var Jst=s(zj);v6o=r(Jst,"PegasusForCausalLM"),Jst.forEach(t),F6o=r(K8e," (Pegasus model)"),K8e.forEach(t),T6o=i(W),bb=n(W,"LI",{});var Z8e=s(bb);rce=n(Z8e,"STRONG",{});var Yst=s(rce);M6o=r(Yst,"plbart"),Yst.forEach(t),E6o=r(Z8e," \u2014 "),Wj=n(Z8e,"A",{href:!0});var Kst=s(Wj);C6o=r(Kst,"PLBartForCausalLM"),Kst.forEach(t),w6o=r(Z8e," (PLBart model)"),Z8e.forEach(t),A6o=i(W),vb=n(W,"LI",{});var e7e=s(vb);tce=n(e7e,"STRONG",{});var Zst=s(tce);y6o=r(Zst,"prophetnet"),Zst.forEach(t),L6o=r(e7e," \u2014 "),Qj=n(e7e,"A",{href:!0});var elt=s(Qj);x6o=r(elt,"ProphetNetForCausalLM"),elt.forEach(t),$6o=r(e7e," (ProphetNet model)"),e7e.forEach(t),k6o=i(W),Fb=n(W,"LI",{});var o7e=s(Fb);ace=n(o7e,"STRONG",{});var olt=s(ace);S6o=r(olt,"qdqbert"),olt.forEach(t),R6o=r(o7e," \u2014 "),Hj=n(o7e,"A",{href:!0});var rlt=s(Hj);P6o=r(rlt,"QDQBertLMHeadModel"),rlt.forEach(t),B6o=r(o7e," (QDQBert model)"),o7e.forEach(t),I6o=i(W),Tb=n(W,"LI",{});var r7e=s(Tb);nce=n(r7e,"STRONG",{});var tlt=s(nce);N6o=r(tlt,"reformer"),tlt.forEach(t),q6o=r(r7e," \u2014 "),Uj=n(r7e,"A",{href:!0});var alt=s(Uj);j6o=r(alt,"ReformerModelWithLMHead"),alt.forEach(t),D6o=r(r7e," (Reformer model)"),r7e.forEach(t),G6o=i(W),Mb=n(W,"LI",{});var t7e=s(Mb);sce=n(t7e,"STRONG",{});var nlt=s(sce);O6o=r(nlt,"rembert"),nlt.forEach(t),V6o=r(t7e," \u2014 "),Jj=n(t7e,"A",{href:!0});var slt=s(Jj);X6o=r(slt,"RemBertForCausalLM"),slt.forEach(t),z6o=r(t7e," (RemBERT model)"),t7e.forEach(t),W6o=i(W),Eb=n(W,"LI",{});var a7e=s(Eb);lce=n(a7e,"STRONG",{});var llt=s(lce);Q6o=r(llt,"roberta"),llt.forEach(t),H6o=r(a7e," \u2014 "),Yj=n(a7e,"A",{href:!0});var ilt=s(Yj);U6o=r(ilt,"RobertaForCausalLM"),ilt.forEach(t),J6o=r(a7e," (RoBERTa model)"),a7e.forEach(t),Y6o=i(W),Cb=n(W,"LI",{});var n7e=s(Cb);ice=n(n7e,"STRONG",{});var dlt=s(ice);K6o=r(dlt,"roformer"),dlt.forEach(t),Z6o=r(n7e," \u2014 "),Kj=n(n7e,"A",{href:!0});var clt=s(Kj);eAo=r(clt,"RoFormerForCausalLM"),clt.forEach(t),oAo=r(n7e," (RoFormer model)"),n7e.forEach(t),rAo=i(W),wb=n(W,"LI",{});var s7e=s(wb);dce=n(s7e,"STRONG",{});var mlt=s(dce);tAo=r(mlt,"speech_to_text_2"),mlt.forEach(t),aAo=r(s7e," \u2014 "),Zj=n(s7e,"A",{href:!0});var flt=s(Zj);nAo=r(flt,"Speech2Text2ForCausalLM"),flt.forEach(t),sAo=r(s7e," (Speech2Text2 model)"),s7e.forEach(t),lAo=i(W),Ab=n(W,"LI",{});var l7e=s(Ab);cce=n(l7e,"STRONG",{});var glt=s(cce);iAo=r(glt,"transfo-xl"),glt.forEach(t),dAo=r(l7e," \u2014 "),eD=n(l7e,"A",{href:!0});var hlt=s(eD);cAo=r(hlt,"TransfoXLLMHeadModel"),hlt.forEach(t),mAo=r(l7e," (Transformer-XL model)"),l7e.forEach(t),fAo=i(W),yb=n(W,"LI",{});var i7e=s(yb);mce=n(i7e,"STRONG",{});var ult=s(mce);gAo=r(ult,"trocr"),ult.forEach(t),hAo=r(i7e," \u2014 "),oD=n(i7e,"A",{href:!0});var plt=s(oD);uAo=r(plt,"TrOCRForCausalLM"),plt.forEach(t),pAo=r(i7e," (TrOCR model)"),i7e.forEach(t),_Ao=i(W),Lb=n(W,"LI",{});var d7e=s(Lb);fce=n(d7e,"STRONG",{});var _lt=s(fce);bAo=r(_lt,"xglm"),_lt.forEach(t),vAo=r(d7e," \u2014 "),rD=n(d7e,"A",{href:!0});var blt=s(rD);FAo=r(blt,"XGLMForCausalLM"),blt.forEach(t),TAo=r(d7e," (XGLM model)"),d7e.forEach(t),MAo=i(W),xb=n(W,"LI",{});var c7e=s(xb);gce=n(c7e,"STRONG",{});var vlt=s(gce);EAo=r(vlt,"xlm"),vlt.forEach(t),CAo=r(c7e," \u2014 "),tD=n(c7e,"A",{href:!0});var Flt=s(tD);wAo=r(Flt,"XLMWithLMHeadModel"),Flt.forEach(t),AAo=r(c7e," (XLM model)"),c7e.forEach(t),yAo=i(W),$b=n(W,"LI",{});var m7e=s($b);hce=n(m7e,"STRONG",{});var Tlt=s(hce);LAo=r(Tlt,"xlm-prophetnet"),Tlt.forEach(t),xAo=r(m7e," \u2014 "),aD=n(m7e,"A",{href:!0});var Mlt=s(aD);$Ao=r(Mlt,"XLMProphetNetForCausalLM"),Mlt.forEach(t),kAo=r(m7e," (XLMProphetNet model)"),m7e.forEach(t),SAo=i(W),kb=n(W,"LI",{});var f7e=s(kb);uce=n(f7e,"STRONG",{});var Elt=s(uce);RAo=r(Elt,"xlm-roberta"),Elt.forEach(t),PAo=r(f7e," \u2014 "),nD=n(f7e,"A",{href:!0});var Clt=s(nD);BAo=r(Clt,"XLMRobertaForCausalLM"),Clt.forEach(t),IAo=r(f7e," (XLM-RoBERTa model)"),f7e.forEach(t),NAo=i(W),Sb=n(W,"LI",{});var g7e=s(Sb);pce=n(g7e,"STRONG",{});var wlt=s(pce);qAo=r(wlt,"xlm-roberta-xl"),wlt.forEach(t),jAo=r(g7e," \u2014 "),sD=n(g7e,"A",{href:!0});var Alt=s(sD);DAo=r(Alt,"XLMRobertaXLForCausalLM"),Alt.forEach(t),GAo=r(g7e," (XLM-RoBERTa-XL model)"),g7e.forEach(t),OAo=i(W),Rb=n(W,"LI",{});var h7e=s(Rb);_ce=n(h7e,"STRONG",{});var ylt=s(_ce);VAo=r(ylt,"xlnet"),ylt.forEach(t),XAo=r(h7e," \u2014 "),lD=n(h7e,"A",{href:!0});var Llt=s(lD);zAo=r(Llt,"XLNetLMHeadModel"),Llt.forEach(t),WAo=r(h7e," (XLNet model)"),h7e.forEach(t),W.forEach(t),QAo=i(ta),Pb=n(ta,"P",{});var u7e=s(Pb);HAo=r(u7e,"The model is set in evaluation mode by default using "),bce=n(u7e,"CODE",{});var xlt=s(bce);UAo=r(xlt,"model.eval()"),xlt.forEach(t),JAo=r(u7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(u7e,"CODE",{});var $lt=s(vce);YAo=r($lt,"model.train()"),$lt.forEach(t),u7e.forEach(t),KAo=i(ta),T(Bb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Rqe=i(m),Pi=n(m,"H2",{class:!0});var NDe=s(Pi);Ib=n(NDe,"A",{id:!0,class:!0,href:!0});var klt=s(Ib);Fce=n(klt,"SPAN",{});var Slt=s(Fce);T(bL.$$.fragment,Slt),Slt.forEach(t),klt.forEach(t),ZAo=i(NDe),Tce=n(NDe,"SPAN",{});var Rlt=s(Tce);eyo=r(Rlt,"AutoModelForMaskedLM"),Rlt.forEach(t),NDe.forEach(t),Pqe=i(m),ko=n(m,"DIV",{class:!0});var Xs=s(ko);T(vL.$$.fragment,Xs),oyo=i(Xs),Bi=n(Xs,"P",{});var xZ=s(Bi);ryo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iD=n(xZ,"A",{href:!0});var Plt=s(iD);tyo=r(Plt,"from_pretrained()"),Plt.forEach(t),ayo=r(xZ," class method or the "),dD=n(xZ,"A",{href:!0});var Blt=s(dD);nyo=r(Blt,"from_config()"),Blt.forEach(t),syo=r(xZ,` class
method.`),xZ.forEach(t),lyo=i(Xs),FL=n(Xs,"P",{});var qDe=s(FL);iyo=r(qDe,"This class cannot be instantiated directly using "),Mce=n(qDe,"CODE",{});var Ilt=s(Mce);dyo=r(Ilt,"__init__()"),Ilt.forEach(t),cyo=r(qDe," (throws an error)."),qDe.forEach(t),myo=i(Xs),st=n(Xs,"DIV",{class:!0});var G6=s(st);T(TL.$$.fragment,G6),fyo=i(G6),Ece=n(G6,"P",{});var Nlt=s(Ece);gyo=r(Nlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nlt.forEach(t),hyo=i(G6),Ii=n(G6,"P",{});var $Z=s(Ii);uyo=r($Z,`Note:
Loading a model from its configuration file does `),Cce=n($Z,"STRONG",{});var qlt=s(Cce);pyo=r(qlt,"not"),qlt.forEach(t),_yo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n($Z,"A",{href:!0});var jlt=s(cD);byo=r(jlt,"from_pretrained()"),jlt.forEach(t),vyo=r($Z," to load the model weights."),$Z.forEach(t),Fyo=i(G6),T(Nb.$$.fragment,G6),G6.forEach(t),Tyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(ML.$$.fragment,aa),Myo=i(aa),wce=n(aa,"P",{});var Dlt=s(wce);Eyo=r(Dlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dlt.forEach(t),Cyo=i(aa),ka=n(aa,"P",{});var O6=s(ka);wyo=r(O6,"The model class to instantiate is selected based on the "),Ace=n(O6,"CODE",{});var Glt=s(Ace);Ayo=r(Glt,"model_type"),Glt.forEach(t),yyo=r(O6,` property of the config object (either
passed as an argument or loaded from `),yce=n(O6,"CODE",{});var Olt=s(yce);Lyo=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),xyo=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(O6,"CODE",{});var Vlt=s(Lce);$yo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),kyo=r(O6,":"),O6.forEach(t),Syo=i(aa),Q=n(aa,"UL",{});var U=s(Q);qb=n(U,"LI",{});var p7e=s(qb);xce=n(p7e,"STRONG",{});var Xlt=s(xce);Ryo=r(Xlt,"albert"),Xlt.forEach(t),Pyo=r(p7e," \u2014 "),mD=n(p7e,"A",{href:!0});var zlt=s(mD);Byo=r(zlt,"AlbertForMaskedLM"),zlt.forEach(t),Iyo=r(p7e," (ALBERT model)"),p7e.forEach(t),Nyo=i(U),jb=n(U,"LI",{});var _7e=s(jb);$ce=n(_7e,"STRONG",{});var Wlt=s($ce);qyo=r(Wlt,"bart"),Wlt.forEach(t),jyo=r(_7e," \u2014 "),fD=n(_7e,"A",{href:!0});var Qlt=s(fD);Dyo=r(Qlt,"BartForConditionalGeneration"),Qlt.forEach(t),Gyo=r(_7e," (BART model)"),_7e.forEach(t),Oyo=i(U),Db=n(U,"LI",{});var b7e=s(Db);kce=n(b7e,"STRONG",{});var Hlt=s(kce);Vyo=r(Hlt,"bert"),Hlt.forEach(t),Xyo=r(b7e," \u2014 "),gD=n(b7e,"A",{href:!0});var Ult=s(gD);zyo=r(Ult,"BertForMaskedLM"),Ult.forEach(t),Wyo=r(b7e," (BERT model)"),b7e.forEach(t),Qyo=i(U),Gb=n(U,"LI",{});var v7e=s(Gb);Sce=n(v7e,"STRONG",{});var Jlt=s(Sce);Hyo=r(Jlt,"big_bird"),Jlt.forEach(t),Uyo=r(v7e," \u2014 "),hD=n(v7e,"A",{href:!0});var Ylt=s(hD);Jyo=r(Ylt,"BigBirdForMaskedLM"),Ylt.forEach(t),Yyo=r(v7e," (BigBird model)"),v7e.forEach(t),Kyo=i(U),Ob=n(U,"LI",{});var F7e=s(Ob);Rce=n(F7e,"STRONG",{});var Klt=s(Rce);Zyo=r(Klt,"camembert"),Klt.forEach(t),eLo=r(F7e," \u2014 "),uD=n(F7e,"A",{href:!0});var Zlt=s(uD);oLo=r(Zlt,"CamembertForMaskedLM"),Zlt.forEach(t),rLo=r(F7e," (CamemBERT model)"),F7e.forEach(t),tLo=i(U),Vb=n(U,"LI",{});var T7e=s(Vb);Pce=n(T7e,"STRONG",{});var eit=s(Pce);aLo=r(eit,"convbert"),eit.forEach(t),nLo=r(T7e," \u2014 "),pD=n(T7e,"A",{href:!0});var oit=s(pD);sLo=r(oit,"ConvBertForMaskedLM"),oit.forEach(t),lLo=r(T7e," (ConvBERT model)"),T7e.forEach(t),iLo=i(U),Xb=n(U,"LI",{});var M7e=s(Xb);Bce=n(M7e,"STRONG",{});var rit=s(Bce);dLo=r(rit,"data2vec-text"),rit.forEach(t),cLo=r(M7e," \u2014 "),_D=n(M7e,"A",{href:!0});var tit=s(_D);mLo=r(tit,"Data2VecTextForMaskedLM"),tit.forEach(t),fLo=r(M7e," (Data2VecText model)"),M7e.forEach(t),gLo=i(U),zb=n(U,"LI",{});var E7e=s(zb);Ice=n(E7e,"STRONG",{});var ait=s(Ice);hLo=r(ait,"deberta"),ait.forEach(t),uLo=r(E7e," \u2014 "),bD=n(E7e,"A",{href:!0});var nit=s(bD);pLo=r(nit,"DebertaForMaskedLM"),nit.forEach(t),_Lo=r(E7e," (DeBERTa model)"),E7e.forEach(t),bLo=i(U),Wb=n(U,"LI",{});var C7e=s(Wb);Nce=n(C7e,"STRONG",{});var sit=s(Nce);vLo=r(sit,"deberta-v2"),sit.forEach(t),FLo=r(C7e," \u2014 "),vD=n(C7e,"A",{href:!0});var lit=s(vD);TLo=r(lit,"DebertaV2ForMaskedLM"),lit.forEach(t),MLo=r(C7e," (DeBERTa-v2 model)"),C7e.forEach(t),ELo=i(U),Qb=n(U,"LI",{});var w7e=s(Qb);qce=n(w7e,"STRONG",{});var iit=s(qce);CLo=r(iit,"distilbert"),iit.forEach(t),wLo=r(w7e," \u2014 "),FD=n(w7e,"A",{href:!0});var dit=s(FD);ALo=r(dit,"DistilBertForMaskedLM"),dit.forEach(t),yLo=r(w7e," (DistilBERT model)"),w7e.forEach(t),LLo=i(U),Hb=n(U,"LI",{});var A7e=s(Hb);jce=n(A7e,"STRONG",{});var cit=s(jce);xLo=r(cit,"electra"),cit.forEach(t),$Lo=r(A7e," \u2014 "),TD=n(A7e,"A",{href:!0});var mit=s(TD);kLo=r(mit,"ElectraForMaskedLM"),mit.forEach(t),SLo=r(A7e," (ELECTRA model)"),A7e.forEach(t),RLo=i(U),Ub=n(U,"LI",{});var y7e=s(Ub);Dce=n(y7e,"STRONG",{});var fit=s(Dce);PLo=r(fit,"flaubert"),fit.forEach(t),BLo=r(y7e," \u2014 "),MD=n(y7e,"A",{href:!0});var git=s(MD);ILo=r(git,"FlaubertWithLMHeadModel"),git.forEach(t),NLo=r(y7e," (FlauBERT model)"),y7e.forEach(t),qLo=i(U),Jb=n(U,"LI",{});var L7e=s(Jb);Gce=n(L7e,"STRONG",{});var hit=s(Gce);jLo=r(hit,"fnet"),hit.forEach(t),DLo=r(L7e," \u2014 "),ED=n(L7e,"A",{href:!0});var uit=s(ED);GLo=r(uit,"FNetForMaskedLM"),uit.forEach(t),OLo=r(L7e," (FNet model)"),L7e.forEach(t),VLo=i(U),Yb=n(U,"LI",{});var x7e=s(Yb);Oce=n(x7e,"STRONG",{});var pit=s(Oce);XLo=r(pit,"funnel"),pit.forEach(t),zLo=r(x7e," \u2014 "),CD=n(x7e,"A",{href:!0});var _it=s(CD);WLo=r(_it,"FunnelForMaskedLM"),_it.forEach(t),QLo=r(x7e," (Funnel Transformer model)"),x7e.forEach(t),HLo=i(U),Kb=n(U,"LI",{});var $7e=s(Kb);Vce=n($7e,"STRONG",{});var bit=s(Vce);ULo=r(bit,"ibert"),bit.forEach(t),JLo=r($7e," \u2014 "),wD=n($7e,"A",{href:!0});var vit=s(wD);YLo=r(vit,"IBertForMaskedLM"),vit.forEach(t),KLo=r($7e," (I-BERT model)"),$7e.forEach(t),ZLo=i(U),Zb=n(U,"LI",{});var k7e=s(Zb);Xce=n(k7e,"STRONG",{});var Fit=s(Xce);e8o=r(Fit,"layoutlm"),Fit.forEach(t),o8o=r(k7e," \u2014 "),AD=n(k7e,"A",{href:!0});var Tit=s(AD);r8o=r(Tit,"LayoutLMForMaskedLM"),Tit.forEach(t),t8o=r(k7e," (LayoutLM model)"),k7e.forEach(t),a8o=i(U),e2=n(U,"LI",{});var S7e=s(e2);zce=n(S7e,"STRONG",{});var Mit=s(zce);n8o=r(Mit,"longformer"),Mit.forEach(t),s8o=r(S7e," \u2014 "),yD=n(S7e,"A",{href:!0});var Eit=s(yD);l8o=r(Eit,"LongformerForMaskedLM"),Eit.forEach(t),i8o=r(S7e," (Longformer model)"),S7e.forEach(t),d8o=i(U),o2=n(U,"LI",{});var R7e=s(o2);Wce=n(R7e,"STRONG",{});var Cit=s(Wce);c8o=r(Cit,"mbart"),Cit.forEach(t),m8o=r(R7e," \u2014 "),LD=n(R7e,"A",{href:!0});var wit=s(LD);f8o=r(wit,"MBartForConditionalGeneration"),wit.forEach(t),g8o=r(R7e," (mBART model)"),R7e.forEach(t),h8o=i(U),r2=n(U,"LI",{});var P7e=s(r2);Qce=n(P7e,"STRONG",{});var Ait=s(Qce);u8o=r(Ait,"megatron-bert"),Ait.forEach(t),p8o=r(P7e," \u2014 "),xD=n(P7e,"A",{href:!0});var yit=s(xD);_8o=r(yit,"MegatronBertForMaskedLM"),yit.forEach(t),b8o=r(P7e," (MegatronBert model)"),P7e.forEach(t),v8o=i(U),t2=n(U,"LI",{});var B7e=s(t2);Hce=n(B7e,"STRONG",{});var Lit=s(Hce);F8o=r(Lit,"mobilebert"),Lit.forEach(t),T8o=r(B7e," \u2014 "),$D=n(B7e,"A",{href:!0});var xit=s($D);M8o=r(xit,"MobileBertForMaskedLM"),xit.forEach(t),E8o=r(B7e," (MobileBERT model)"),B7e.forEach(t),C8o=i(U),a2=n(U,"LI",{});var I7e=s(a2);Uce=n(I7e,"STRONG",{});var $it=s(Uce);w8o=r($it,"mpnet"),$it.forEach(t),A8o=r(I7e," \u2014 "),kD=n(I7e,"A",{href:!0});var kit=s(kD);y8o=r(kit,"MPNetForMaskedLM"),kit.forEach(t),L8o=r(I7e," (MPNet model)"),I7e.forEach(t),x8o=i(U),n2=n(U,"LI",{});var N7e=s(n2);Jce=n(N7e,"STRONG",{});var Sit=s(Jce);$8o=r(Sit,"nystromformer"),Sit.forEach(t),k8o=r(N7e," \u2014 "),SD=n(N7e,"A",{href:!0});var Rit=s(SD);S8o=r(Rit,"NystromformerForMaskedLM"),Rit.forEach(t),R8o=r(N7e," (Nystromformer model)"),N7e.forEach(t),P8o=i(U),s2=n(U,"LI",{});var q7e=s(s2);Yce=n(q7e,"STRONG",{});var Pit=s(Yce);B8o=r(Pit,"perceiver"),Pit.forEach(t),I8o=r(q7e," \u2014 "),RD=n(q7e,"A",{href:!0});var Bit=s(RD);N8o=r(Bit,"PerceiverForMaskedLM"),Bit.forEach(t),q8o=r(q7e," (Perceiver model)"),q7e.forEach(t),j8o=i(U),l2=n(U,"LI",{});var j7e=s(l2);Kce=n(j7e,"STRONG",{});var Iit=s(Kce);D8o=r(Iit,"qdqbert"),Iit.forEach(t),G8o=r(j7e," \u2014 "),PD=n(j7e,"A",{href:!0});var Nit=s(PD);O8o=r(Nit,"QDQBertForMaskedLM"),Nit.forEach(t),V8o=r(j7e," (QDQBert model)"),j7e.forEach(t),X8o=i(U),i2=n(U,"LI",{});var D7e=s(i2);Zce=n(D7e,"STRONG",{});var qit=s(Zce);z8o=r(qit,"reformer"),qit.forEach(t),W8o=r(D7e," \u2014 "),BD=n(D7e,"A",{href:!0});var jit=s(BD);Q8o=r(jit,"ReformerForMaskedLM"),jit.forEach(t),H8o=r(D7e," (Reformer model)"),D7e.forEach(t),U8o=i(U),d2=n(U,"LI",{});var G7e=s(d2);eme=n(G7e,"STRONG",{});var Dit=s(eme);J8o=r(Dit,"rembert"),Dit.forEach(t),Y8o=r(G7e," \u2014 "),ID=n(G7e,"A",{href:!0});var Git=s(ID);K8o=r(Git,"RemBertForMaskedLM"),Git.forEach(t),Z8o=r(G7e," (RemBERT model)"),G7e.forEach(t),e7o=i(U),c2=n(U,"LI",{});var O7e=s(c2);ome=n(O7e,"STRONG",{});var Oit=s(ome);o7o=r(Oit,"roberta"),Oit.forEach(t),r7o=r(O7e," \u2014 "),ND=n(O7e,"A",{href:!0});var Vit=s(ND);t7o=r(Vit,"RobertaForMaskedLM"),Vit.forEach(t),a7o=r(O7e," (RoBERTa model)"),O7e.forEach(t),n7o=i(U),m2=n(U,"LI",{});var V7e=s(m2);rme=n(V7e,"STRONG",{});var Xit=s(rme);s7o=r(Xit,"roformer"),Xit.forEach(t),l7o=r(V7e," \u2014 "),qD=n(V7e,"A",{href:!0});var zit=s(qD);i7o=r(zit,"RoFormerForMaskedLM"),zit.forEach(t),d7o=r(V7e," (RoFormer model)"),V7e.forEach(t),c7o=i(U),f2=n(U,"LI",{});var X7e=s(f2);tme=n(X7e,"STRONG",{});var Wit=s(tme);m7o=r(Wit,"squeezebert"),Wit.forEach(t),f7o=r(X7e," \u2014 "),jD=n(X7e,"A",{href:!0});var Qit=s(jD);g7o=r(Qit,"SqueezeBertForMaskedLM"),Qit.forEach(t),h7o=r(X7e," (SqueezeBERT model)"),X7e.forEach(t),u7o=i(U),g2=n(U,"LI",{});var z7e=s(g2);ame=n(z7e,"STRONG",{});var Hit=s(ame);p7o=r(Hit,"tapas"),Hit.forEach(t),_7o=r(z7e," \u2014 "),DD=n(z7e,"A",{href:!0});var Uit=s(DD);b7o=r(Uit,"TapasForMaskedLM"),Uit.forEach(t),v7o=r(z7e," (TAPAS model)"),z7e.forEach(t),F7o=i(U),h2=n(U,"LI",{});var W7e=s(h2);nme=n(W7e,"STRONG",{});var Jit=s(nme);T7o=r(Jit,"wav2vec2"),Jit.forEach(t),M7o=r(W7e," \u2014 "),sme=n(W7e,"CODE",{});var Yit=s(sme);E7o=r(Yit,"Wav2Vec2ForMaskedLM"),Yit.forEach(t),C7o=r(W7e," (Wav2Vec2 model)"),W7e.forEach(t),w7o=i(U),u2=n(U,"LI",{});var Q7e=s(u2);lme=n(Q7e,"STRONG",{});var Kit=s(lme);A7o=r(Kit,"xlm"),Kit.forEach(t),y7o=r(Q7e," \u2014 "),GD=n(Q7e,"A",{href:!0});var Zit=s(GD);L7o=r(Zit,"XLMWithLMHeadModel"),Zit.forEach(t),x7o=r(Q7e," (XLM model)"),Q7e.forEach(t),$7o=i(U),p2=n(U,"LI",{});var H7e=s(p2);ime=n(H7e,"STRONG",{});var edt=s(ime);k7o=r(edt,"xlm-roberta"),edt.forEach(t),S7o=r(H7e," \u2014 "),OD=n(H7e,"A",{href:!0});var odt=s(OD);R7o=r(odt,"XLMRobertaForMaskedLM"),odt.forEach(t),P7o=r(H7e," (XLM-RoBERTa model)"),H7e.forEach(t),B7o=i(U),_2=n(U,"LI",{});var U7e=s(_2);dme=n(U7e,"STRONG",{});var rdt=s(dme);I7o=r(rdt,"xlm-roberta-xl"),rdt.forEach(t),N7o=r(U7e," \u2014 "),VD=n(U7e,"A",{href:!0});var tdt=s(VD);q7o=r(tdt,"XLMRobertaXLForMaskedLM"),tdt.forEach(t),j7o=r(U7e," (XLM-RoBERTa-XL model)"),U7e.forEach(t),D7o=i(U),b2=n(U,"LI",{});var J7e=s(b2);cme=n(J7e,"STRONG",{});var adt=s(cme);G7o=r(adt,"yoso"),adt.forEach(t),O7o=r(J7e," \u2014 "),XD=n(J7e,"A",{href:!0});var ndt=s(XD);V7o=r(ndt,"YosoForMaskedLM"),ndt.forEach(t),X7o=r(J7e," (YOSO model)"),J7e.forEach(t),U.forEach(t),z7o=i(aa),v2=n(aa,"P",{});var Y7e=s(v2);W7o=r(Y7e,"The model is set in evaluation mode by default using "),mme=n(Y7e,"CODE",{});var sdt=s(mme);Q7o=r(sdt,"model.eval()"),sdt.forEach(t),H7o=r(Y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Y7e,"CODE",{});var ldt=s(fme);U7o=r(ldt,"model.train()"),ldt.forEach(t),Y7e.forEach(t),J7o=i(aa),T(F2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),Bqe=i(m),Ni=n(m,"H2",{class:!0});var jDe=s(Ni);T2=n(jDe,"A",{id:!0,class:!0,href:!0});var idt=s(T2);gme=n(idt,"SPAN",{});var ddt=s(gme);T(EL.$$.fragment,ddt),ddt.forEach(t),idt.forEach(t),Y7o=i(jDe),hme=n(jDe,"SPAN",{});var cdt=s(hme);K7o=r(cdt,"AutoModelForSeq2SeqLM"),cdt.forEach(t),jDe.forEach(t),Iqe=i(m),So=n(m,"DIV",{class:!0});var zs=s(So);T(CL.$$.fragment,zs),Z7o=i(zs),qi=n(zs,"P",{});var kZ=s(qi);e9o=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zD=n(kZ,"A",{href:!0});var mdt=s(zD);o9o=r(mdt,"from_pretrained()"),mdt.forEach(t),r9o=r(kZ," class method or the "),WD=n(kZ,"A",{href:!0});var fdt=s(WD);t9o=r(fdt,"from_config()"),fdt.forEach(t),a9o=r(kZ,` class
method.`),kZ.forEach(t),n9o=i(zs),wL=n(zs,"P",{});var DDe=s(wL);s9o=r(DDe,"This class cannot be instantiated directly using "),ume=n(DDe,"CODE",{});var gdt=s(ume);l9o=r(gdt,"__init__()"),gdt.forEach(t),i9o=r(DDe," (throws an error)."),DDe.forEach(t),d9o=i(zs),lt=n(zs,"DIV",{class:!0});var V6=s(lt);T(AL.$$.fragment,V6),c9o=i(V6),pme=n(V6,"P",{});var hdt=s(pme);m9o=r(hdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hdt.forEach(t),f9o=i(V6),ji=n(V6,"P",{});var SZ=s(ji);g9o=r(SZ,`Note:
Loading a model from its configuration file does `),_me=n(SZ,"STRONG",{});var udt=s(_me);h9o=r(udt,"not"),udt.forEach(t),u9o=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(SZ,"A",{href:!0});var pdt=s(QD);p9o=r(pdt,"from_pretrained()"),pdt.forEach(t),_9o=r(SZ," to load the model weights."),SZ.forEach(t),b9o=i(V6),T(M2.$$.fragment,V6),V6.forEach(t),v9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(yL.$$.fragment,na),F9o=i(na),bme=n(na,"P",{});var _dt=s(bme);T9o=r(_dt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_dt.forEach(t),M9o=i(na),Sa=n(na,"P",{});var X6=s(Sa);E9o=r(X6,"The model class to instantiate is selected based on the "),vme=n(X6,"CODE",{});var bdt=s(vme);C9o=r(bdt,"model_type"),bdt.forEach(t),w9o=r(X6,` property of the config object (either
passed as an argument or loaded from `),Fme=n(X6,"CODE",{});var vdt=s(Fme);A9o=r(vdt,"pretrained_model_name_or_path"),vdt.forEach(t),y9o=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(X6,"CODE",{});var Fdt=s(Tme);L9o=r(Fdt,"pretrained_model_name_or_path"),Fdt.forEach(t),x9o=r(X6,":"),X6.forEach(t),$9o=i(na),pe=n(na,"UL",{});var ve=s(pe);E2=n(ve,"LI",{});var K7e=s(E2);Mme=n(K7e,"STRONG",{});var Tdt=s(Mme);k9o=r(Tdt,"bart"),Tdt.forEach(t),S9o=r(K7e," \u2014 "),HD=n(K7e,"A",{href:!0});var Mdt=s(HD);R9o=r(Mdt,"BartForConditionalGeneration"),Mdt.forEach(t),P9o=r(K7e," (BART model)"),K7e.forEach(t),B9o=i(ve),C2=n(ve,"LI",{});var Z7e=s(C2);Eme=n(Z7e,"STRONG",{});var Edt=s(Eme);I9o=r(Edt,"bigbird_pegasus"),Edt.forEach(t),N9o=r(Z7e," \u2014 "),UD=n(Z7e,"A",{href:!0});var Cdt=s(UD);q9o=r(Cdt,"BigBirdPegasusForConditionalGeneration"),Cdt.forEach(t),j9o=r(Z7e," (BigBirdPegasus model)"),Z7e.forEach(t),D9o=i(ve),w2=n(ve,"LI",{});var e9e=s(w2);Cme=n(e9e,"STRONG",{});var wdt=s(Cme);G9o=r(wdt,"blenderbot"),wdt.forEach(t),O9o=r(e9e," \u2014 "),JD=n(e9e,"A",{href:!0});var Adt=s(JD);V9o=r(Adt,"BlenderbotForConditionalGeneration"),Adt.forEach(t),X9o=r(e9e," (Blenderbot model)"),e9e.forEach(t),z9o=i(ve),A2=n(ve,"LI",{});var o9e=s(A2);wme=n(o9e,"STRONG",{});var ydt=s(wme);W9o=r(ydt,"blenderbot-small"),ydt.forEach(t),Q9o=r(o9e," \u2014 "),YD=n(o9e,"A",{href:!0});var Ldt=s(YD);H9o=r(Ldt,"BlenderbotSmallForConditionalGeneration"),Ldt.forEach(t),U9o=r(o9e," (BlenderbotSmall model)"),o9e.forEach(t),J9o=i(ve),y2=n(ve,"LI",{});var r9e=s(y2);Ame=n(r9e,"STRONG",{});var xdt=s(Ame);Y9o=r(xdt,"encoder-decoder"),xdt.forEach(t),K9o=r(r9e," \u2014 "),KD=n(r9e,"A",{href:!0});var $dt=s(KD);Z9o=r($dt,"EncoderDecoderModel"),$dt.forEach(t),exo=r(r9e," (Encoder decoder model)"),r9e.forEach(t),oxo=i(ve),L2=n(ve,"LI",{});var t9e=s(L2);yme=n(t9e,"STRONG",{});var kdt=s(yme);rxo=r(kdt,"fsmt"),kdt.forEach(t),txo=r(t9e," \u2014 "),ZD=n(t9e,"A",{href:!0});var Sdt=s(ZD);axo=r(Sdt,"FSMTForConditionalGeneration"),Sdt.forEach(t),nxo=r(t9e," (FairSeq Machine-Translation model)"),t9e.forEach(t),sxo=i(ve),x2=n(ve,"LI",{});var a9e=s(x2);Lme=n(a9e,"STRONG",{});var Rdt=s(Lme);lxo=r(Rdt,"led"),Rdt.forEach(t),ixo=r(a9e," \u2014 "),eG=n(a9e,"A",{href:!0});var Pdt=s(eG);dxo=r(Pdt,"LEDForConditionalGeneration"),Pdt.forEach(t),cxo=r(a9e," (LED model)"),a9e.forEach(t),mxo=i(ve),$2=n(ve,"LI",{});var n9e=s($2);xme=n(n9e,"STRONG",{});var Bdt=s(xme);fxo=r(Bdt,"m2m_100"),Bdt.forEach(t),gxo=r(n9e," \u2014 "),oG=n(n9e,"A",{href:!0});var Idt=s(oG);hxo=r(Idt,"M2M100ForConditionalGeneration"),Idt.forEach(t),uxo=r(n9e," (M2M100 model)"),n9e.forEach(t),pxo=i(ve),k2=n(ve,"LI",{});var s9e=s(k2);$me=n(s9e,"STRONG",{});var Ndt=s($me);_xo=r(Ndt,"marian"),Ndt.forEach(t),bxo=r(s9e," \u2014 "),rG=n(s9e,"A",{href:!0});var qdt=s(rG);vxo=r(qdt,"MarianMTModel"),qdt.forEach(t),Fxo=r(s9e," (Marian model)"),s9e.forEach(t),Txo=i(ve),S2=n(ve,"LI",{});var l9e=s(S2);kme=n(l9e,"STRONG",{});var jdt=s(kme);Mxo=r(jdt,"mbart"),jdt.forEach(t),Exo=r(l9e," \u2014 "),tG=n(l9e,"A",{href:!0});var Ddt=s(tG);Cxo=r(Ddt,"MBartForConditionalGeneration"),Ddt.forEach(t),wxo=r(l9e," (mBART model)"),l9e.forEach(t),Axo=i(ve),R2=n(ve,"LI",{});var i9e=s(R2);Sme=n(i9e,"STRONG",{});var Gdt=s(Sme);yxo=r(Gdt,"mt5"),Gdt.forEach(t),Lxo=r(i9e," \u2014 "),aG=n(i9e,"A",{href:!0});var Odt=s(aG);xxo=r(Odt,"MT5ForConditionalGeneration"),Odt.forEach(t),$xo=r(i9e," (mT5 model)"),i9e.forEach(t),kxo=i(ve),P2=n(ve,"LI",{});var d9e=s(P2);Rme=n(d9e,"STRONG",{});var Vdt=s(Rme);Sxo=r(Vdt,"pegasus"),Vdt.forEach(t),Rxo=r(d9e," \u2014 "),nG=n(d9e,"A",{href:!0});var Xdt=s(nG);Pxo=r(Xdt,"PegasusForConditionalGeneration"),Xdt.forEach(t),Bxo=r(d9e," (Pegasus model)"),d9e.forEach(t),Ixo=i(ve),B2=n(ve,"LI",{});var c9e=s(B2);Pme=n(c9e,"STRONG",{});var zdt=s(Pme);Nxo=r(zdt,"plbart"),zdt.forEach(t),qxo=r(c9e," \u2014 "),sG=n(c9e,"A",{href:!0});var Wdt=s(sG);jxo=r(Wdt,"PLBartForConditionalGeneration"),Wdt.forEach(t),Dxo=r(c9e," (PLBart model)"),c9e.forEach(t),Gxo=i(ve),I2=n(ve,"LI",{});var m9e=s(I2);Bme=n(m9e,"STRONG",{});var Qdt=s(Bme);Oxo=r(Qdt,"prophetnet"),Qdt.forEach(t),Vxo=r(m9e," \u2014 "),lG=n(m9e,"A",{href:!0});var Hdt=s(lG);Xxo=r(Hdt,"ProphetNetForConditionalGeneration"),Hdt.forEach(t),zxo=r(m9e," (ProphetNet model)"),m9e.forEach(t),Wxo=i(ve),N2=n(ve,"LI",{});var f9e=s(N2);Ime=n(f9e,"STRONG",{});var Udt=s(Ime);Qxo=r(Udt,"t5"),Udt.forEach(t),Hxo=r(f9e," \u2014 "),iG=n(f9e,"A",{href:!0});var Jdt=s(iG);Uxo=r(Jdt,"T5ForConditionalGeneration"),Jdt.forEach(t),Jxo=r(f9e," (T5 model)"),f9e.forEach(t),Yxo=i(ve),q2=n(ve,"LI",{});var g9e=s(q2);Nme=n(g9e,"STRONG",{});var Ydt=s(Nme);Kxo=r(Ydt,"xlm-prophetnet"),Ydt.forEach(t),Zxo=r(g9e," \u2014 "),dG=n(g9e,"A",{href:!0});var Kdt=s(dG);e$o=r(Kdt,"XLMProphetNetForConditionalGeneration"),Kdt.forEach(t),o$o=r(g9e," (XLMProphetNet model)"),g9e.forEach(t),ve.forEach(t),r$o=i(na),j2=n(na,"P",{});var h9e=s(j2);t$o=r(h9e,"The model is set in evaluation mode by default using "),qme=n(h9e,"CODE",{});var Zdt=s(qme);a$o=r(Zdt,"model.eval()"),Zdt.forEach(t),n$o=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(h9e,"CODE",{});var ect=s(jme);s$o=r(ect,"model.train()"),ect.forEach(t),h9e.forEach(t),l$o=i(na),T(D2.$$.fragment,na),na.forEach(t),zs.forEach(t),Nqe=i(m),Di=n(m,"H2",{class:!0});var GDe=s(Di);G2=n(GDe,"A",{id:!0,class:!0,href:!0});var oct=s(G2);Dme=n(oct,"SPAN",{});var rct=s(Dme);T(LL.$$.fragment,rct),rct.forEach(t),oct.forEach(t),i$o=i(GDe),Gme=n(GDe,"SPAN",{});var tct=s(Gme);d$o=r(tct,"AutoModelForSequenceClassification"),tct.forEach(t),GDe.forEach(t),qqe=i(m),Ro=n(m,"DIV",{class:!0});var Ws=s(Ro);T(xL.$$.fragment,Ws),c$o=i(Ws),Gi=n(Ws,"P",{});var RZ=s(Gi);m$o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cG=n(RZ,"A",{href:!0});var act=s(cG);f$o=r(act,"from_pretrained()"),act.forEach(t),g$o=r(RZ," class method or the "),mG=n(RZ,"A",{href:!0});var nct=s(mG);h$o=r(nct,"from_config()"),nct.forEach(t),u$o=r(RZ,` class
method.`),RZ.forEach(t),p$o=i(Ws),$L=n(Ws,"P",{});var ODe=s($L);_$o=r(ODe,"This class cannot be instantiated directly using "),Ome=n(ODe,"CODE",{});var sct=s(Ome);b$o=r(sct,"__init__()"),sct.forEach(t),v$o=r(ODe," (throws an error)."),ODe.forEach(t),F$o=i(Ws),it=n(Ws,"DIV",{class:!0});var z6=s(it);T(kL.$$.fragment,z6),T$o=i(z6),Vme=n(z6,"P",{});var lct=s(Vme);M$o=r(lct,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lct.forEach(t),E$o=i(z6),Oi=n(z6,"P",{});var PZ=s(Oi);C$o=r(PZ,`Note:
Loading a model from its configuration file does `),Xme=n(PZ,"STRONG",{});var ict=s(Xme);w$o=r(ict,"not"),ict.forEach(t),A$o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(PZ,"A",{href:!0});var dct=s(fG);y$o=r(dct,"from_pretrained()"),dct.forEach(t),L$o=r(PZ," to load the model weights."),PZ.forEach(t),x$o=i(z6),T(O2.$$.fragment,z6),z6.forEach(t),$$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(SL.$$.fragment,sa),k$o=i(sa),zme=n(sa,"P",{});var cct=s(zme);S$o=r(cct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cct.forEach(t),R$o=i(sa),Ra=n(sa,"P",{});var W6=s(Ra);P$o=r(W6,"The model class to instantiate is selected based on the "),Wme=n(W6,"CODE",{});var mct=s(Wme);B$o=r(mct,"model_type"),mct.forEach(t),I$o=r(W6,` property of the config object (either
passed as an argument or loaded from `),Qme=n(W6,"CODE",{});var fct=s(Qme);N$o=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),q$o=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(W6,"CODE",{});var gct=s(Hme);j$o=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),D$o=r(W6,":"),W6.forEach(t),G$o=i(sa),N=n(sa,"UL",{});var j=s(N);V2=n(j,"LI",{});var u9e=s(V2);Ume=n(u9e,"STRONG",{});var hct=s(Ume);O$o=r(hct,"albert"),hct.forEach(t),V$o=r(u9e," \u2014 "),gG=n(u9e,"A",{href:!0});var uct=s(gG);X$o=r(uct,"AlbertForSequenceClassification"),uct.forEach(t),z$o=r(u9e," (ALBERT model)"),u9e.forEach(t),W$o=i(j),X2=n(j,"LI",{});var p9e=s(X2);Jme=n(p9e,"STRONG",{});var pct=s(Jme);Q$o=r(pct,"bart"),pct.forEach(t),H$o=r(p9e," \u2014 "),hG=n(p9e,"A",{href:!0});var _ct=s(hG);U$o=r(_ct,"BartForSequenceClassification"),_ct.forEach(t),J$o=r(p9e," (BART model)"),p9e.forEach(t),Y$o=i(j),z2=n(j,"LI",{});var _9e=s(z2);Yme=n(_9e,"STRONG",{});var bct=s(Yme);K$o=r(bct,"bert"),bct.forEach(t),Z$o=r(_9e," \u2014 "),uG=n(_9e,"A",{href:!0});var vct=s(uG);eko=r(vct,"BertForSequenceClassification"),vct.forEach(t),oko=r(_9e," (BERT model)"),_9e.forEach(t),rko=i(j),W2=n(j,"LI",{});var b9e=s(W2);Kme=n(b9e,"STRONG",{});var Fct=s(Kme);tko=r(Fct,"big_bird"),Fct.forEach(t),ako=r(b9e," \u2014 "),pG=n(b9e,"A",{href:!0});var Tct=s(pG);nko=r(Tct,"BigBirdForSequenceClassification"),Tct.forEach(t),sko=r(b9e," (BigBird model)"),b9e.forEach(t),lko=i(j),Q2=n(j,"LI",{});var v9e=s(Q2);Zme=n(v9e,"STRONG",{});var Mct=s(Zme);iko=r(Mct,"bigbird_pegasus"),Mct.forEach(t),dko=r(v9e," \u2014 "),_G=n(v9e,"A",{href:!0});var Ect=s(_G);cko=r(Ect,"BigBirdPegasusForSequenceClassification"),Ect.forEach(t),mko=r(v9e," (BigBirdPegasus model)"),v9e.forEach(t),fko=i(j),H2=n(j,"LI",{});var F9e=s(H2);efe=n(F9e,"STRONG",{});var Cct=s(efe);gko=r(Cct,"camembert"),Cct.forEach(t),hko=r(F9e," \u2014 "),bG=n(F9e,"A",{href:!0});var wct=s(bG);uko=r(wct,"CamembertForSequenceClassification"),wct.forEach(t),pko=r(F9e," (CamemBERT model)"),F9e.forEach(t),_ko=i(j),U2=n(j,"LI",{});var T9e=s(U2);ofe=n(T9e,"STRONG",{});var Act=s(ofe);bko=r(Act,"canine"),Act.forEach(t),vko=r(T9e," \u2014 "),vG=n(T9e,"A",{href:!0});var yct=s(vG);Fko=r(yct,"CanineForSequenceClassification"),yct.forEach(t),Tko=r(T9e," (Canine model)"),T9e.forEach(t),Mko=i(j),J2=n(j,"LI",{});var M9e=s(J2);rfe=n(M9e,"STRONG",{});var Lct=s(rfe);Eko=r(Lct,"convbert"),Lct.forEach(t),Cko=r(M9e," \u2014 "),FG=n(M9e,"A",{href:!0});var xct=s(FG);wko=r(xct,"ConvBertForSequenceClassification"),xct.forEach(t),Ako=r(M9e," (ConvBERT model)"),M9e.forEach(t),yko=i(j),Y2=n(j,"LI",{});var E9e=s(Y2);tfe=n(E9e,"STRONG",{});var $ct=s(tfe);Lko=r($ct,"ctrl"),$ct.forEach(t),xko=r(E9e," \u2014 "),TG=n(E9e,"A",{href:!0});var kct=s(TG);$ko=r(kct,"CTRLForSequenceClassification"),kct.forEach(t),kko=r(E9e," (CTRL model)"),E9e.forEach(t),Sko=i(j),K2=n(j,"LI",{});var C9e=s(K2);afe=n(C9e,"STRONG",{});var Sct=s(afe);Rko=r(Sct,"data2vec-text"),Sct.forEach(t),Pko=r(C9e," \u2014 "),MG=n(C9e,"A",{href:!0});var Rct=s(MG);Bko=r(Rct,"Data2VecTextForSequenceClassification"),Rct.forEach(t),Iko=r(C9e," (Data2VecText model)"),C9e.forEach(t),Nko=i(j),Z2=n(j,"LI",{});var w9e=s(Z2);nfe=n(w9e,"STRONG",{});var Pct=s(nfe);qko=r(Pct,"deberta"),Pct.forEach(t),jko=r(w9e," \u2014 "),EG=n(w9e,"A",{href:!0});var Bct=s(EG);Dko=r(Bct,"DebertaForSequenceClassification"),Bct.forEach(t),Gko=r(w9e," (DeBERTa model)"),w9e.forEach(t),Oko=i(j),ev=n(j,"LI",{});var A9e=s(ev);sfe=n(A9e,"STRONG",{});var Ict=s(sfe);Vko=r(Ict,"deberta-v2"),Ict.forEach(t),Xko=r(A9e," \u2014 "),CG=n(A9e,"A",{href:!0});var Nct=s(CG);zko=r(Nct,"DebertaV2ForSequenceClassification"),Nct.forEach(t),Wko=r(A9e," (DeBERTa-v2 model)"),A9e.forEach(t),Qko=i(j),ov=n(j,"LI",{});var y9e=s(ov);lfe=n(y9e,"STRONG",{});var qct=s(lfe);Hko=r(qct,"distilbert"),qct.forEach(t),Uko=r(y9e," \u2014 "),wG=n(y9e,"A",{href:!0});var jct=s(wG);Jko=r(jct,"DistilBertForSequenceClassification"),jct.forEach(t),Yko=r(y9e," (DistilBERT model)"),y9e.forEach(t),Kko=i(j),rv=n(j,"LI",{});var L9e=s(rv);ife=n(L9e,"STRONG",{});var Dct=s(ife);Zko=r(Dct,"electra"),Dct.forEach(t),eSo=r(L9e," \u2014 "),AG=n(L9e,"A",{href:!0});var Gct=s(AG);oSo=r(Gct,"ElectraForSequenceClassification"),Gct.forEach(t),rSo=r(L9e," (ELECTRA model)"),L9e.forEach(t),tSo=i(j),tv=n(j,"LI",{});var x9e=s(tv);dfe=n(x9e,"STRONG",{});var Oct=s(dfe);aSo=r(Oct,"flaubert"),Oct.forEach(t),nSo=r(x9e," \u2014 "),yG=n(x9e,"A",{href:!0});var Vct=s(yG);sSo=r(Vct,"FlaubertForSequenceClassification"),Vct.forEach(t),lSo=r(x9e," (FlauBERT model)"),x9e.forEach(t),iSo=i(j),av=n(j,"LI",{});var $9e=s(av);cfe=n($9e,"STRONG",{});var Xct=s(cfe);dSo=r(Xct,"fnet"),Xct.forEach(t),cSo=r($9e," \u2014 "),LG=n($9e,"A",{href:!0});var zct=s(LG);mSo=r(zct,"FNetForSequenceClassification"),zct.forEach(t),fSo=r($9e," (FNet model)"),$9e.forEach(t),gSo=i(j),nv=n(j,"LI",{});var k9e=s(nv);mfe=n(k9e,"STRONG",{});var Wct=s(mfe);hSo=r(Wct,"funnel"),Wct.forEach(t),uSo=r(k9e," \u2014 "),xG=n(k9e,"A",{href:!0});var Qct=s(xG);pSo=r(Qct,"FunnelForSequenceClassification"),Qct.forEach(t),_So=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),bSo=i(j),sv=n(j,"LI",{});var S9e=s(sv);ffe=n(S9e,"STRONG",{});var Hct=s(ffe);vSo=r(Hct,"gpt2"),Hct.forEach(t),FSo=r(S9e," \u2014 "),$G=n(S9e,"A",{href:!0});var Uct=s($G);TSo=r(Uct,"GPT2ForSequenceClassification"),Uct.forEach(t),MSo=r(S9e," (OpenAI GPT-2 model)"),S9e.forEach(t),ESo=i(j),lv=n(j,"LI",{});var R9e=s(lv);gfe=n(R9e,"STRONG",{});var Jct=s(gfe);CSo=r(Jct,"gpt_neo"),Jct.forEach(t),wSo=r(R9e," \u2014 "),kG=n(R9e,"A",{href:!0});var Yct=s(kG);ASo=r(Yct,"GPTNeoForSequenceClassification"),Yct.forEach(t),ySo=r(R9e," (GPT Neo model)"),R9e.forEach(t),LSo=i(j),iv=n(j,"LI",{});var P9e=s(iv);hfe=n(P9e,"STRONG",{});var Kct=s(hfe);xSo=r(Kct,"gptj"),Kct.forEach(t),$So=r(P9e," \u2014 "),SG=n(P9e,"A",{href:!0});var Zct=s(SG);kSo=r(Zct,"GPTJForSequenceClassification"),Zct.forEach(t),SSo=r(P9e," (GPT-J model)"),P9e.forEach(t),RSo=i(j),dv=n(j,"LI",{});var B9e=s(dv);ufe=n(B9e,"STRONG",{});var emt=s(ufe);PSo=r(emt,"ibert"),emt.forEach(t),BSo=r(B9e," \u2014 "),RG=n(B9e,"A",{href:!0});var omt=s(RG);ISo=r(omt,"IBertForSequenceClassification"),omt.forEach(t),NSo=r(B9e," (I-BERT model)"),B9e.forEach(t),qSo=i(j),cv=n(j,"LI",{});var I9e=s(cv);pfe=n(I9e,"STRONG",{});var rmt=s(pfe);jSo=r(rmt,"layoutlm"),rmt.forEach(t),DSo=r(I9e," \u2014 "),PG=n(I9e,"A",{href:!0});var tmt=s(PG);GSo=r(tmt,"LayoutLMForSequenceClassification"),tmt.forEach(t),OSo=r(I9e," (LayoutLM model)"),I9e.forEach(t),VSo=i(j),mv=n(j,"LI",{});var N9e=s(mv);_fe=n(N9e,"STRONG",{});var amt=s(_fe);XSo=r(amt,"layoutlmv2"),amt.forEach(t),zSo=r(N9e," \u2014 "),BG=n(N9e,"A",{href:!0});var nmt=s(BG);WSo=r(nmt,"LayoutLMv2ForSequenceClassification"),nmt.forEach(t),QSo=r(N9e," (LayoutLMv2 model)"),N9e.forEach(t),HSo=i(j),fv=n(j,"LI",{});var q9e=s(fv);bfe=n(q9e,"STRONG",{});var smt=s(bfe);USo=r(smt,"layoutlmv3"),smt.forEach(t),JSo=r(q9e," \u2014 "),IG=n(q9e,"A",{href:!0});var lmt=s(IG);YSo=r(lmt,"LayoutLMv3ForSequenceClassification"),lmt.forEach(t),KSo=r(q9e," (LayoutLMv3 model)"),q9e.forEach(t),ZSo=i(j),gv=n(j,"LI",{});var j9e=s(gv);vfe=n(j9e,"STRONG",{});var imt=s(vfe);eRo=r(imt,"led"),imt.forEach(t),oRo=r(j9e," \u2014 "),NG=n(j9e,"A",{href:!0});var dmt=s(NG);rRo=r(dmt,"LEDForSequenceClassification"),dmt.forEach(t),tRo=r(j9e," (LED model)"),j9e.forEach(t),aRo=i(j),hv=n(j,"LI",{});var D9e=s(hv);Ffe=n(D9e,"STRONG",{});var cmt=s(Ffe);nRo=r(cmt,"longformer"),cmt.forEach(t),sRo=r(D9e," \u2014 "),qG=n(D9e,"A",{href:!0});var mmt=s(qG);lRo=r(mmt,"LongformerForSequenceClassification"),mmt.forEach(t),iRo=r(D9e," (Longformer model)"),D9e.forEach(t),dRo=i(j),uv=n(j,"LI",{});var G9e=s(uv);Tfe=n(G9e,"STRONG",{});var fmt=s(Tfe);cRo=r(fmt,"mbart"),fmt.forEach(t),mRo=r(G9e," \u2014 "),jG=n(G9e,"A",{href:!0});var gmt=s(jG);fRo=r(gmt,"MBartForSequenceClassification"),gmt.forEach(t),gRo=r(G9e," (mBART model)"),G9e.forEach(t),hRo=i(j),pv=n(j,"LI",{});var O9e=s(pv);Mfe=n(O9e,"STRONG",{});var hmt=s(Mfe);uRo=r(hmt,"megatron-bert"),hmt.forEach(t),pRo=r(O9e," \u2014 "),DG=n(O9e,"A",{href:!0});var umt=s(DG);_Ro=r(umt,"MegatronBertForSequenceClassification"),umt.forEach(t),bRo=r(O9e," (MegatronBert model)"),O9e.forEach(t),vRo=i(j),_v=n(j,"LI",{});var V9e=s(_v);Efe=n(V9e,"STRONG",{});var pmt=s(Efe);FRo=r(pmt,"mobilebert"),pmt.forEach(t),TRo=r(V9e," \u2014 "),GG=n(V9e,"A",{href:!0});var _mt=s(GG);MRo=r(_mt,"MobileBertForSequenceClassification"),_mt.forEach(t),ERo=r(V9e," (MobileBERT model)"),V9e.forEach(t),CRo=i(j),bv=n(j,"LI",{});var X9e=s(bv);Cfe=n(X9e,"STRONG",{});var bmt=s(Cfe);wRo=r(bmt,"mpnet"),bmt.forEach(t),ARo=r(X9e," \u2014 "),OG=n(X9e,"A",{href:!0});var vmt=s(OG);yRo=r(vmt,"MPNetForSequenceClassification"),vmt.forEach(t),LRo=r(X9e," (MPNet model)"),X9e.forEach(t),xRo=i(j),vv=n(j,"LI",{});var z9e=s(vv);wfe=n(z9e,"STRONG",{});var Fmt=s(wfe);$Ro=r(Fmt,"nystromformer"),Fmt.forEach(t),kRo=r(z9e," \u2014 "),VG=n(z9e,"A",{href:!0});var Tmt=s(VG);SRo=r(Tmt,"NystromformerForSequenceClassification"),Tmt.forEach(t),RRo=r(z9e," (Nystromformer model)"),z9e.forEach(t),PRo=i(j),Fv=n(j,"LI",{});var W9e=s(Fv);Afe=n(W9e,"STRONG",{});var Mmt=s(Afe);BRo=r(Mmt,"openai-gpt"),Mmt.forEach(t),IRo=r(W9e," \u2014 "),XG=n(W9e,"A",{href:!0});var Emt=s(XG);NRo=r(Emt,"OpenAIGPTForSequenceClassification"),Emt.forEach(t),qRo=r(W9e," (OpenAI GPT model)"),W9e.forEach(t),jRo=i(j),Tv=n(j,"LI",{});var Q9e=s(Tv);yfe=n(Q9e,"STRONG",{});var Cmt=s(yfe);DRo=r(Cmt,"perceiver"),Cmt.forEach(t),GRo=r(Q9e," \u2014 "),zG=n(Q9e,"A",{href:!0});var wmt=s(zG);ORo=r(wmt,"PerceiverForSequenceClassification"),wmt.forEach(t),VRo=r(Q9e," (Perceiver model)"),Q9e.forEach(t),XRo=i(j),Mv=n(j,"LI",{});var H9e=s(Mv);Lfe=n(H9e,"STRONG",{});var Amt=s(Lfe);zRo=r(Amt,"plbart"),Amt.forEach(t),WRo=r(H9e," \u2014 "),WG=n(H9e,"A",{href:!0});var ymt=s(WG);QRo=r(ymt,"PLBartForSequenceClassification"),ymt.forEach(t),HRo=r(H9e," (PLBart model)"),H9e.forEach(t),URo=i(j),Ev=n(j,"LI",{});var U9e=s(Ev);xfe=n(U9e,"STRONG",{});var Lmt=s(xfe);JRo=r(Lmt,"qdqbert"),Lmt.forEach(t),YRo=r(U9e," \u2014 "),QG=n(U9e,"A",{href:!0});var xmt=s(QG);KRo=r(xmt,"QDQBertForSequenceClassification"),xmt.forEach(t),ZRo=r(U9e," (QDQBert model)"),U9e.forEach(t),ePo=i(j),Cv=n(j,"LI",{});var J9e=s(Cv);$fe=n(J9e,"STRONG",{});var $mt=s($fe);oPo=r($mt,"reformer"),$mt.forEach(t),rPo=r(J9e," \u2014 "),HG=n(J9e,"A",{href:!0});var kmt=s(HG);tPo=r(kmt,"ReformerForSequenceClassification"),kmt.forEach(t),aPo=r(J9e," (Reformer model)"),J9e.forEach(t),nPo=i(j),wv=n(j,"LI",{});var Y9e=s(wv);kfe=n(Y9e,"STRONG",{});var Smt=s(kfe);sPo=r(Smt,"rembert"),Smt.forEach(t),lPo=r(Y9e," \u2014 "),UG=n(Y9e,"A",{href:!0});var Rmt=s(UG);iPo=r(Rmt,"RemBertForSequenceClassification"),Rmt.forEach(t),dPo=r(Y9e," (RemBERT model)"),Y9e.forEach(t),cPo=i(j),Av=n(j,"LI",{});var K9e=s(Av);Sfe=n(K9e,"STRONG",{});var Pmt=s(Sfe);mPo=r(Pmt,"roberta"),Pmt.forEach(t),fPo=r(K9e," \u2014 "),JG=n(K9e,"A",{href:!0});var Bmt=s(JG);gPo=r(Bmt,"RobertaForSequenceClassification"),Bmt.forEach(t),hPo=r(K9e," (RoBERTa model)"),K9e.forEach(t),uPo=i(j),yv=n(j,"LI",{});var Z9e=s(yv);Rfe=n(Z9e,"STRONG",{});var Imt=s(Rfe);pPo=r(Imt,"roformer"),Imt.forEach(t),_Po=r(Z9e," \u2014 "),YG=n(Z9e,"A",{href:!0});var Nmt=s(YG);bPo=r(Nmt,"RoFormerForSequenceClassification"),Nmt.forEach(t),vPo=r(Z9e," (RoFormer model)"),Z9e.forEach(t),FPo=i(j),Lv=n(j,"LI",{});var exe=s(Lv);Pfe=n(exe,"STRONG",{});var qmt=s(Pfe);TPo=r(qmt,"squeezebert"),qmt.forEach(t),MPo=r(exe," \u2014 "),KG=n(exe,"A",{href:!0});var jmt=s(KG);EPo=r(jmt,"SqueezeBertForSequenceClassification"),jmt.forEach(t),CPo=r(exe," (SqueezeBERT model)"),exe.forEach(t),wPo=i(j),xv=n(j,"LI",{});var oxe=s(xv);Bfe=n(oxe,"STRONG",{});var Dmt=s(Bfe);APo=r(Dmt,"tapas"),Dmt.forEach(t),yPo=r(oxe," \u2014 "),ZG=n(oxe,"A",{href:!0});var Gmt=s(ZG);LPo=r(Gmt,"TapasForSequenceClassification"),Gmt.forEach(t),xPo=r(oxe," (TAPAS model)"),oxe.forEach(t),$Po=i(j),$v=n(j,"LI",{});var rxe=s($v);Ife=n(rxe,"STRONG",{});var Omt=s(Ife);kPo=r(Omt,"transfo-xl"),Omt.forEach(t),SPo=r(rxe," \u2014 "),eO=n(rxe,"A",{href:!0});var Vmt=s(eO);RPo=r(Vmt,"TransfoXLForSequenceClassification"),Vmt.forEach(t),PPo=r(rxe," (Transformer-XL model)"),rxe.forEach(t),BPo=i(j),kv=n(j,"LI",{});var txe=s(kv);Nfe=n(txe,"STRONG",{});var Xmt=s(Nfe);IPo=r(Xmt,"xlm"),Xmt.forEach(t),NPo=r(txe," \u2014 "),oO=n(txe,"A",{href:!0});var zmt=s(oO);qPo=r(zmt,"XLMForSequenceClassification"),zmt.forEach(t),jPo=r(txe," (XLM model)"),txe.forEach(t),DPo=i(j),Sv=n(j,"LI",{});var axe=s(Sv);qfe=n(axe,"STRONG",{});var Wmt=s(qfe);GPo=r(Wmt,"xlm-roberta"),Wmt.forEach(t),OPo=r(axe," \u2014 "),rO=n(axe,"A",{href:!0});var Qmt=s(rO);VPo=r(Qmt,"XLMRobertaForSequenceClassification"),Qmt.forEach(t),XPo=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),zPo=i(j),Rv=n(j,"LI",{});var nxe=s(Rv);jfe=n(nxe,"STRONG",{});var Hmt=s(jfe);WPo=r(Hmt,"xlm-roberta-xl"),Hmt.forEach(t),QPo=r(nxe," \u2014 "),tO=n(nxe,"A",{href:!0});var Umt=s(tO);HPo=r(Umt,"XLMRobertaXLForSequenceClassification"),Umt.forEach(t),UPo=r(nxe," (XLM-RoBERTa-XL model)"),nxe.forEach(t),JPo=i(j),Pv=n(j,"LI",{});var sxe=s(Pv);Dfe=n(sxe,"STRONG",{});var Jmt=s(Dfe);YPo=r(Jmt,"xlnet"),Jmt.forEach(t),KPo=r(sxe," \u2014 "),aO=n(sxe,"A",{href:!0});var Ymt=s(aO);ZPo=r(Ymt,"XLNetForSequenceClassification"),Ymt.forEach(t),eBo=r(sxe," (XLNet model)"),sxe.forEach(t),oBo=i(j),Bv=n(j,"LI",{});var lxe=s(Bv);Gfe=n(lxe,"STRONG",{});var Kmt=s(Gfe);rBo=r(Kmt,"yoso"),Kmt.forEach(t),tBo=r(lxe," \u2014 "),nO=n(lxe,"A",{href:!0});var Zmt=s(nO);aBo=r(Zmt,"YosoForSequenceClassification"),Zmt.forEach(t),nBo=r(lxe," (YOSO model)"),lxe.forEach(t),j.forEach(t),sBo=i(sa),Iv=n(sa,"P",{});var ixe=s(Iv);lBo=r(ixe,"The model is set in evaluation mode by default using "),Ofe=n(ixe,"CODE",{});var eft=s(Ofe);iBo=r(eft,"model.eval()"),eft.forEach(t),dBo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=n(ixe,"CODE",{});var oft=s(Vfe);cBo=r(oft,"model.train()"),oft.forEach(t),ixe.forEach(t),mBo=i(sa),T(Nv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),jqe=i(m),Vi=n(m,"H2",{class:!0});var VDe=s(Vi);qv=n(VDe,"A",{id:!0,class:!0,href:!0});var rft=s(qv);Xfe=n(rft,"SPAN",{});var tft=s(Xfe);T(RL.$$.fragment,tft),tft.forEach(t),rft.forEach(t),fBo=i(VDe),zfe=n(VDe,"SPAN",{});var aft=s(zfe);gBo=r(aft,"AutoModelForMultipleChoice"),aft.forEach(t),VDe.forEach(t),Dqe=i(m),Po=n(m,"DIV",{class:!0});var Qs=s(Po);T(PL.$$.fragment,Qs),hBo=i(Qs),Xi=n(Qs,"P",{});var BZ=s(Xi);uBo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sO=n(BZ,"A",{href:!0});var nft=s(sO);pBo=r(nft,"from_pretrained()"),nft.forEach(t),_Bo=r(BZ," class method or the "),lO=n(BZ,"A",{href:!0});var sft=s(lO);bBo=r(sft,"from_config()"),sft.forEach(t),vBo=r(BZ,` class
method.`),BZ.forEach(t),FBo=i(Qs),BL=n(Qs,"P",{});var XDe=s(BL);TBo=r(XDe,"This class cannot be instantiated directly using "),Wfe=n(XDe,"CODE",{});var lft=s(Wfe);MBo=r(lft,"__init__()"),lft.forEach(t),EBo=r(XDe," (throws an error)."),XDe.forEach(t),CBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Q6=s(dt);T(IL.$$.fragment,Q6),wBo=i(Q6),Qfe=n(Q6,"P",{});var ift=s(Qfe);ABo=r(ift,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ift.forEach(t),yBo=i(Q6),zi=n(Q6,"P",{});var IZ=s(zi);LBo=r(IZ,`Note:
Loading a model from its configuration file does `),Hfe=n(IZ,"STRONG",{});var dft=s(Hfe);xBo=r(dft,"not"),dft.forEach(t),$Bo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(IZ,"A",{href:!0});var cft=s(iO);kBo=r(cft,"from_pretrained()"),cft.forEach(t),SBo=r(IZ," to load the model weights."),IZ.forEach(t),RBo=i(Q6),T(jv.$$.fragment,Q6),Q6.forEach(t),PBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(NL.$$.fragment,la),BBo=i(la),Ufe=n(la,"P",{});var mft=s(Ufe);IBo=r(mft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mft.forEach(t),NBo=i(la),Pa=n(la,"P",{});var H6=s(Pa);qBo=r(H6,"The model class to instantiate is selected based on the "),Jfe=n(H6,"CODE",{});var fft=s(Jfe);jBo=r(fft,"model_type"),fft.forEach(t),DBo=r(H6,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(H6,"CODE",{});var gft=s(Yfe);GBo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),OBo=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(H6,"CODE",{});var hft=s(Kfe);VBo=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),XBo=r(H6,":"),H6.forEach(t),zBo=i(la),K=n(la,"UL",{});var ee=s(K);Dv=n(ee,"LI",{});var dxe=s(Dv);Zfe=n(dxe,"STRONG",{});var uft=s(Zfe);WBo=r(uft,"albert"),uft.forEach(t),QBo=r(dxe," \u2014 "),dO=n(dxe,"A",{href:!0});var pft=s(dO);HBo=r(pft,"AlbertForMultipleChoice"),pft.forEach(t),UBo=r(dxe," (ALBERT model)"),dxe.forEach(t),JBo=i(ee),Gv=n(ee,"LI",{});var cxe=s(Gv);ege=n(cxe,"STRONG",{});var _ft=s(ege);YBo=r(_ft,"bert"),_ft.forEach(t),KBo=r(cxe," \u2014 "),cO=n(cxe,"A",{href:!0});var bft=s(cO);ZBo=r(bft,"BertForMultipleChoice"),bft.forEach(t),eIo=r(cxe," (BERT model)"),cxe.forEach(t),oIo=i(ee),Ov=n(ee,"LI",{});var mxe=s(Ov);oge=n(mxe,"STRONG",{});var vft=s(oge);rIo=r(vft,"big_bird"),vft.forEach(t),tIo=r(mxe," \u2014 "),mO=n(mxe,"A",{href:!0});var Fft=s(mO);aIo=r(Fft,"BigBirdForMultipleChoice"),Fft.forEach(t),nIo=r(mxe," (BigBird model)"),mxe.forEach(t),sIo=i(ee),Vv=n(ee,"LI",{});var fxe=s(Vv);rge=n(fxe,"STRONG",{});var Tft=s(rge);lIo=r(Tft,"camembert"),Tft.forEach(t),iIo=r(fxe," \u2014 "),fO=n(fxe,"A",{href:!0});var Mft=s(fO);dIo=r(Mft,"CamembertForMultipleChoice"),Mft.forEach(t),cIo=r(fxe," (CamemBERT model)"),fxe.forEach(t),mIo=i(ee),Xv=n(ee,"LI",{});var gxe=s(Xv);tge=n(gxe,"STRONG",{});var Eft=s(tge);fIo=r(Eft,"canine"),Eft.forEach(t),gIo=r(gxe," \u2014 "),gO=n(gxe,"A",{href:!0});var Cft=s(gO);hIo=r(Cft,"CanineForMultipleChoice"),Cft.forEach(t),uIo=r(gxe," (Canine model)"),gxe.forEach(t),pIo=i(ee),zv=n(ee,"LI",{});var hxe=s(zv);age=n(hxe,"STRONG",{});var wft=s(age);_Io=r(wft,"convbert"),wft.forEach(t),bIo=r(hxe," \u2014 "),hO=n(hxe,"A",{href:!0});var Aft=s(hO);vIo=r(Aft,"ConvBertForMultipleChoice"),Aft.forEach(t),FIo=r(hxe," (ConvBERT model)"),hxe.forEach(t),TIo=i(ee),Wv=n(ee,"LI",{});var uxe=s(Wv);nge=n(uxe,"STRONG",{});var yft=s(nge);MIo=r(yft,"data2vec-text"),yft.forEach(t),EIo=r(uxe," \u2014 "),uO=n(uxe,"A",{href:!0});var Lft=s(uO);CIo=r(Lft,"Data2VecTextForMultipleChoice"),Lft.forEach(t),wIo=r(uxe," (Data2VecText model)"),uxe.forEach(t),AIo=i(ee),Qv=n(ee,"LI",{});var pxe=s(Qv);sge=n(pxe,"STRONG",{});var xft=s(sge);yIo=r(xft,"deberta-v2"),xft.forEach(t),LIo=r(pxe," \u2014 "),pO=n(pxe,"A",{href:!0});var $ft=s(pO);xIo=r($ft,"DebertaV2ForMultipleChoice"),$ft.forEach(t),$Io=r(pxe," (DeBERTa-v2 model)"),pxe.forEach(t),kIo=i(ee),Hv=n(ee,"LI",{});var _xe=s(Hv);lge=n(_xe,"STRONG",{});var kft=s(lge);SIo=r(kft,"distilbert"),kft.forEach(t),RIo=r(_xe," \u2014 "),_O=n(_xe,"A",{href:!0});var Sft=s(_O);PIo=r(Sft,"DistilBertForMultipleChoice"),Sft.forEach(t),BIo=r(_xe," (DistilBERT model)"),_xe.forEach(t),IIo=i(ee),Uv=n(ee,"LI",{});var bxe=s(Uv);ige=n(bxe,"STRONG",{});var Rft=s(ige);NIo=r(Rft,"electra"),Rft.forEach(t),qIo=r(bxe," \u2014 "),bO=n(bxe,"A",{href:!0});var Pft=s(bO);jIo=r(Pft,"ElectraForMultipleChoice"),Pft.forEach(t),DIo=r(bxe," (ELECTRA model)"),bxe.forEach(t),GIo=i(ee),Jv=n(ee,"LI",{});var vxe=s(Jv);dge=n(vxe,"STRONG",{});var Bft=s(dge);OIo=r(Bft,"flaubert"),Bft.forEach(t),VIo=r(vxe," \u2014 "),vO=n(vxe,"A",{href:!0});var Ift=s(vO);XIo=r(Ift,"FlaubertForMultipleChoice"),Ift.forEach(t),zIo=r(vxe," (FlauBERT model)"),vxe.forEach(t),WIo=i(ee),Yv=n(ee,"LI",{});var Fxe=s(Yv);cge=n(Fxe,"STRONG",{});var Nft=s(cge);QIo=r(Nft,"fnet"),Nft.forEach(t),HIo=r(Fxe," \u2014 "),FO=n(Fxe,"A",{href:!0});var qft=s(FO);UIo=r(qft,"FNetForMultipleChoice"),qft.forEach(t),JIo=r(Fxe," (FNet model)"),Fxe.forEach(t),YIo=i(ee),Kv=n(ee,"LI",{});var Txe=s(Kv);mge=n(Txe,"STRONG",{});var jft=s(mge);KIo=r(jft,"funnel"),jft.forEach(t),ZIo=r(Txe," \u2014 "),TO=n(Txe,"A",{href:!0});var Dft=s(TO);eNo=r(Dft,"FunnelForMultipleChoice"),Dft.forEach(t),oNo=r(Txe," (Funnel Transformer model)"),Txe.forEach(t),rNo=i(ee),Zv=n(ee,"LI",{});var Mxe=s(Zv);fge=n(Mxe,"STRONG",{});var Gft=s(fge);tNo=r(Gft,"ibert"),Gft.forEach(t),aNo=r(Mxe," \u2014 "),MO=n(Mxe,"A",{href:!0});var Oft=s(MO);nNo=r(Oft,"IBertForMultipleChoice"),Oft.forEach(t),sNo=r(Mxe," (I-BERT model)"),Mxe.forEach(t),lNo=i(ee),eF=n(ee,"LI",{});var Exe=s(eF);gge=n(Exe,"STRONG",{});var Vft=s(gge);iNo=r(Vft,"longformer"),Vft.forEach(t),dNo=r(Exe," \u2014 "),EO=n(Exe,"A",{href:!0});var Xft=s(EO);cNo=r(Xft,"LongformerForMultipleChoice"),Xft.forEach(t),mNo=r(Exe," (Longformer model)"),Exe.forEach(t),fNo=i(ee),oF=n(ee,"LI",{});var Cxe=s(oF);hge=n(Cxe,"STRONG",{});var zft=s(hge);gNo=r(zft,"megatron-bert"),zft.forEach(t),hNo=r(Cxe," \u2014 "),CO=n(Cxe,"A",{href:!0});var Wft=s(CO);uNo=r(Wft,"MegatronBertForMultipleChoice"),Wft.forEach(t),pNo=r(Cxe," (MegatronBert model)"),Cxe.forEach(t),_No=i(ee),rF=n(ee,"LI",{});var wxe=s(rF);uge=n(wxe,"STRONG",{});var Qft=s(uge);bNo=r(Qft,"mobilebert"),Qft.forEach(t),vNo=r(wxe," \u2014 "),wO=n(wxe,"A",{href:!0});var Hft=s(wO);FNo=r(Hft,"MobileBertForMultipleChoice"),Hft.forEach(t),TNo=r(wxe," (MobileBERT model)"),wxe.forEach(t),MNo=i(ee),tF=n(ee,"LI",{});var Axe=s(tF);pge=n(Axe,"STRONG",{});var Uft=s(pge);ENo=r(Uft,"mpnet"),Uft.forEach(t),CNo=r(Axe," \u2014 "),AO=n(Axe,"A",{href:!0});var Jft=s(AO);wNo=r(Jft,"MPNetForMultipleChoice"),Jft.forEach(t),ANo=r(Axe," (MPNet model)"),Axe.forEach(t),yNo=i(ee),aF=n(ee,"LI",{});var yxe=s(aF);_ge=n(yxe,"STRONG",{});var Yft=s(_ge);LNo=r(Yft,"nystromformer"),Yft.forEach(t),xNo=r(yxe," \u2014 "),yO=n(yxe,"A",{href:!0});var Kft=s(yO);$No=r(Kft,"NystromformerForMultipleChoice"),Kft.forEach(t),kNo=r(yxe," (Nystromformer model)"),yxe.forEach(t),SNo=i(ee),nF=n(ee,"LI",{});var Lxe=s(nF);bge=n(Lxe,"STRONG",{});var Zft=s(bge);RNo=r(Zft,"qdqbert"),Zft.forEach(t),PNo=r(Lxe," \u2014 "),LO=n(Lxe,"A",{href:!0});var egt=s(LO);BNo=r(egt,"QDQBertForMultipleChoice"),egt.forEach(t),INo=r(Lxe," (QDQBert model)"),Lxe.forEach(t),NNo=i(ee),sF=n(ee,"LI",{});var xxe=s(sF);vge=n(xxe,"STRONG",{});var ogt=s(vge);qNo=r(ogt,"rembert"),ogt.forEach(t),jNo=r(xxe," \u2014 "),xO=n(xxe,"A",{href:!0});var rgt=s(xO);DNo=r(rgt,"RemBertForMultipleChoice"),rgt.forEach(t),GNo=r(xxe," (RemBERT model)"),xxe.forEach(t),ONo=i(ee),lF=n(ee,"LI",{});var $xe=s(lF);Fge=n($xe,"STRONG",{});var tgt=s(Fge);VNo=r(tgt,"roberta"),tgt.forEach(t),XNo=r($xe," \u2014 "),$O=n($xe,"A",{href:!0});var agt=s($O);zNo=r(agt,"RobertaForMultipleChoice"),agt.forEach(t),WNo=r($xe," (RoBERTa model)"),$xe.forEach(t),QNo=i(ee),iF=n(ee,"LI",{});var kxe=s(iF);Tge=n(kxe,"STRONG",{});var ngt=s(Tge);HNo=r(ngt,"roformer"),ngt.forEach(t),UNo=r(kxe," \u2014 "),kO=n(kxe,"A",{href:!0});var sgt=s(kO);JNo=r(sgt,"RoFormerForMultipleChoice"),sgt.forEach(t),YNo=r(kxe," (RoFormer model)"),kxe.forEach(t),KNo=i(ee),dF=n(ee,"LI",{});var Sxe=s(dF);Mge=n(Sxe,"STRONG",{});var lgt=s(Mge);ZNo=r(lgt,"squeezebert"),lgt.forEach(t),eqo=r(Sxe," \u2014 "),SO=n(Sxe,"A",{href:!0});var igt=s(SO);oqo=r(igt,"SqueezeBertForMultipleChoice"),igt.forEach(t),rqo=r(Sxe," (SqueezeBERT model)"),Sxe.forEach(t),tqo=i(ee),cF=n(ee,"LI",{});var Rxe=s(cF);Ege=n(Rxe,"STRONG",{});var dgt=s(Ege);aqo=r(dgt,"xlm"),dgt.forEach(t),nqo=r(Rxe," \u2014 "),RO=n(Rxe,"A",{href:!0});var cgt=s(RO);sqo=r(cgt,"XLMForMultipleChoice"),cgt.forEach(t),lqo=r(Rxe," (XLM model)"),Rxe.forEach(t),iqo=i(ee),mF=n(ee,"LI",{});var Pxe=s(mF);Cge=n(Pxe,"STRONG",{});var mgt=s(Cge);dqo=r(mgt,"xlm-roberta"),mgt.forEach(t),cqo=r(Pxe," \u2014 "),PO=n(Pxe,"A",{href:!0});var fgt=s(PO);mqo=r(fgt,"XLMRobertaForMultipleChoice"),fgt.forEach(t),fqo=r(Pxe," (XLM-RoBERTa model)"),Pxe.forEach(t),gqo=i(ee),fF=n(ee,"LI",{});var Bxe=s(fF);wge=n(Bxe,"STRONG",{});var ggt=s(wge);hqo=r(ggt,"xlm-roberta-xl"),ggt.forEach(t),uqo=r(Bxe," \u2014 "),BO=n(Bxe,"A",{href:!0});var hgt=s(BO);pqo=r(hgt,"XLMRobertaXLForMultipleChoice"),hgt.forEach(t),_qo=r(Bxe," (XLM-RoBERTa-XL model)"),Bxe.forEach(t),bqo=i(ee),gF=n(ee,"LI",{});var Ixe=s(gF);Age=n(Ixe,"STRONG",{});var ugt=s(Age);vqo=r(ugt,"xlnet"),ugt.forEach(t),Fqo=r(Ixe," \u2014 "),IO=n(Ixe,"A",{href:!0});var pgt=s(IO);Tqo=r(pgt,"XLNetForMultipleChoice"),pgt.forEach(t),Mqo=r(Ixe," (XLNet model)"),Ixe.forEach(t),Eqo=i(ee),hF=n(ee,"LI",{});var Nxe=s(hF);yge=n(Nxe,"STRONG",{});var _gt=s(yge);Cqo=r(_gt,"yoso"),_gt.forEach(t),wqo=r(Nxe," \u2014 "),NO=n(Nxe,"A",{href:!0});var bgt=s(NO);Aqo=r(bgt,"YosoForMultipleChoice"),bgt.forEach(t),yqo=r(Nxe," (YOSO model)"),Nxe.forEach(t),ee.forEach(t),Lqo=i(la),uF=n(la,"P",{});var qxe=s(uF);xqo=r(qxe,"The model is set in evaluation mode by default using "),Lge=n(qxe,"CODE",{});var vgt=s(Lge);$qo=r(vgt,"model.eval()"),vgt.forEach(t),kqo=r(qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(qxe,"CODE",{});var Fgt=s(xge);Sqo=r(Fgt,"model.train()"),Fgt.forEach(t),qxe.forEach(t),Rqo=i(la),T(pF.$$.fragment,la),la.forEach(t),Qs.forEach(t),Gqe=i(m),Wi=n(m,"H2",{class:!0});var zDe=s(Wi);_F=n(zDe,"A",{id:!0,class:!0,href:!0});var Tgt=s(_F);$ge=n(Tgt,"SPAN",{});var Mgt=s($ge);T(qL.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),Pqo=i(zDe),kge=n(zDe,"SPAN",{});var Egt=s(kge);Bqo=r(Egt,"AutoModelForNextSentencePrediction"),Egt.forEach(t),zDe.forEach(t),Oqe=i(m),Bo=n(m,"DIV",{class:!0});var Hs=s(Bo);T(jL.$$.fragment,Hs),Iqo=i(Hs),Qi=n(Hs,"P",{});var NZ=s(Qi);Nqo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qO=n(NZ,"A",{href:!0});var Cgt=s(qO);qqo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),jqo=r(NZ," class method or the "),jO=n(NZ,"A",{href:!0});var wgt=s(jO);Dqo=r(wgt,"from_config()"),wgt.forEach(t),Gqo=r(NZ,` class
method.`),NZ.forEach(t),Oqo=i(Hs),DL=n(Hs,"P",{});var WDe=s(DL);Vqo=r(WDe,"This class cannot be instantiated directly using "),Sge=n(WDe,"CODE",{});var Agt=s(Sge);Xqo=r(Agt,"__init__()"),Agt.forEach(t),zqo=r(WDe," (throws an error)."),WDe.forEach(t),Wqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var U6=s(ct);T(GL.$$.fragment,U6),Qqo=i(U6),Rge=n(U6,"P",{});var ygt=s(Rge);Hqo=r(ygt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ygt.forEach(t),Uqo=i(U6),Hi=n(U6,"P",{});var qZ=s(Hi);Jqo=r(qZ,`Note:
Loading a model from its configuration file does `),Pge=n(qZ,"STRONG",{});var Lgt=s(Pge);Yqo=r(Lgt,"not"),Lgt.forEach(t),Kqo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(qZ,"A",{href:!0});var xgt=s(DO);Zqo=r(xgt,"from_pretrained()"),xgt.forEach(t),ejo=r(qZ," to load the model weights."),qZ.forEach(t),ojo=i(U6),T(bF.$$.fragment,U6),U6.forEach(t),rjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(OL.$$.fragment,ia),tjo=i(ia),Bge=n(ia,"P",{});var $gt=s(Bge);ajo=r($gt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$gt.forEach(t),njo=i(ia),Ba=n(ia,"P",{});var J6=s(Ba);sjo=r(J6,"The model class to instantiate is selected based on the "),Ige=n(J6,"CODE",{});var kgt=s(Ige);ljo=r(kgt,"model_type"),kgt.forEach(t),ijo=r(J6,` property of the config object (either
passed as an argument or loaded from `),Nge=n(J6,"CODE",{});var Sgt=s(Nge);djo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),cjo=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(J6,"CODE",{});var Rgt=s(qge);mjo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),fjo=r(J6,":"),J6.forEach(t),gjo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);vF=n(Us,"LI",{});var jxe=s(vF);jge=n(jxe,"STRONG",{});var Pgt=s(jge);hjo=r(Pgt,"bert"),Pgt.forEach(t),ujo=r(jxe," \u2014 "),GO=n(jxe,"A",{href:!0});var Bgt=s(GO);pjo=r(Bgt,"BertForNextSentencePrediction"),Bgt.forEach(t),_jo=r(jxe," (BERT model)"),jxe.forEach(t),bjo=i(Us),FF=n(Us,"LI",{});var Dxe=s(FF);Dge=n(Dxe,"STRONG",{});var Igt=s(Dge);vjo=r(Igt,"fnet"),Igt.forEach(t),Fjo=r(Dxe," \u2014 "),OO=n(Dxe,"A",{href:!0});var Ngt=s(OO);Tjo=r(Ngt,"FNetForNextSentencePrediction"),Ngt.forEach(t),Mjo=r(Dxe," (FNet model)"),Dxe.forEach(t),Ejo=i(Us),TF=n(Us,"LI",{});var Gxe=s(TF);Gge=n(Gxe,"STRONG",{});var qgt=s(Gge);Cjo=r(qgt,"megatron-bert"),qgt.forEach(t),wjo=r(Gxe," \u2014 "),VO=n(Gxe,"A",{href:!0});var jgt=s(VO);Ajo=r(jgt,"MegatronBertForNextSentencePrediction"),jgt.forEach(t),yjo=r(Gxe," (MegatronBert model)"),Gxe.forEach(t),Ljo=i(Us),MF=n(Us,"LI",{});var Oxe=s(MF);Oge=n(Oxe,"STRONG",{});var Dgt=s(Oge);xjo=r(Dgt,"mobilebert"),Dgt.forEach(t),$jo=r(Oxe," \u2014 "),XO=n(Oxe,"A",{href:!0});var Ggt=s(XO);kjo=r(Ggt,"MobileBertForNextSentencePrediction"),Ggt.forEach(t),Sjo=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),Rjo=i(Us),EF=n(Us,"LI",{});var Vxe=s(EF);Vge=n(Vxe,"STRONG",{});var Ogt=s(Vge);Pjo=r(Ogt,"qdqbert"),Ogt.forEach(t),Bjo=r(Vxe," \u2014 "),zO=n(Vxe,"A",{href:!0});var Vgt=s(zO);Ijo=r(Vgt,"QDQBertForNextSentencePrediction"),Vgt.forEach(t),Njo=r(Vxe," (QDQBert model)"),Vxe.forEach(t),Us.forEach(t),qjo=i(ia),CF=n(ia,"P",{});var Xxe=s(CF);jjo=r(Xxe,"The model is set in evaluation mode by default using "),Xge=n(Xxe,"CODE",{});var Xgt=s(Xge);Djo=r(Xgt,"model.eval()"),Xgt.forEach(t),Gjo=r(Xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(Xxe,"CODE",{});var zgt=s(zge);Ojo=r(zgt,"model.train()"),zgt.forEach(t),Xxe.forEach(t),Vjo=i(ia),T(wF.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Vqe=i(m),Ui=n(m,"H2",{class:!0});var QDe=s(Ui);AF=n(QDe,"A",{id:!0,class:!0,href:!0});var Wgt=s(AF);Wge=n(Wgt,"SPAN",{});var Qgt=s(Wge);T(VL.$$.fragment,Qgt),Qgt.forEach(t),Wgt.forEach(t),Xjo=i(QDe),Qge=n(QDe,"SPAN",{});var Hgt=s(Qge);zjo=r(Hgt,"AutoModelForTokenClassification"),Hgt.forEach(t),QDe.forEach(t),Xqe=i(m),Io=n(m,"DIV",{class:!0});var Js=s(Io);T(XL.$$.fragment,Js),Wjo=i(Js),Ji=n(Js,"P",{});var jZ=s(Ji);Qjo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WO=n(jZ,"A",{href:!0});var Ugt=s(WO);Hjo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),Ujo=r(jZ," class method or the "),QO=n(jZ,"A",{href:!0});var Jgt=s(QO);Jjo=r(Jgt,"from_config()"),Jgt.forEach(t),Yjo=r(jZ,` class
method.`),jZ.forEach(t),Kjo=i(Js),zL=n(Js,"P",{});var HDe=s(zL);Zjo=r(HDe,"This class cannot be instantiated directly using "),Hge=n(HDe,"CODE",{});var Ygt=s(Hge);eDo=r(Ygt,"__init__()"),Ygt.forEach(t),oDo=r(HDe," (throws an error)."),HDe.forEach(t),rDo=i(Js),mt=n(Js,"DIV",{class:!0});var Y6=s(mt);T(WL.$$.fragment,Y6),tDo=i(Y6),Uge=n(Y6,"P",{});var Kgt=s(Uge);aDo=r(Kgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kgt.forEach(t),nDo=i(Y6),Yi=n(Y6,"P",{});var DZ=s(Yi);sDo=r(DZ,`Note:
Loading a model from its configuration file does `),Jge=n(DZ,"STRONG",{});var Zgt=s(Jge);lDo=r(Zgt,"not"),Zgt.forEach(t),iDo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(DZ,"A",{href:!0});var eht=s(HO);dDo=r(eht,"from_pretrained()"),eht.forEach(t),cDo=r(DZ," to load the model weights."),DZ.forEach(t),mDo=i(Y6),T(yF.$$.fragment,Y6),Y6.forEach(t),fDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(QL.$$.fragment,da),gDo=i(da),Yge=n(da,"P",{});var oht=s(Yge);hDo=r(oht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oht.forEach(t),uDo=i(da),Ia=n(da,"P",{});var K6=s(Ia);pDo=r(K6,"The model class to instantiate is selected based on the "),Kge=n(K6,"CODE",{});var rht=s(Kge);_Do=r(rht,"model_type"),rht.forEach(t),bDo=r(K6,` property of the config object (either
passed as an argument or loaded from `),Zge=n(K6,"CODE",{});var tht=s(Zge);vDo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),FDo=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(K6,"CODE",{});var aht=s(ehe);TDo=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),MDo=r(K6,":"),K6.forEach(t),EDo=i(da),H=n(da,"UL",{});var J=s(H);LF=n(J,"LI",{});var zxe=s(LF);ohe=n(zxe,"STRONG",{});var nht=s(ohe);CDo=r(nht,"albert"),nht.forEach(t),wDo=r(zxe," \u2014 "),UO=n(zxe,"A",{href:!0});var sht=s(UO);ADo=r(sht,"AlbertForTokenClassification"),sht.forEach(t),yDo=r(zxe," (ALBERT model)"),zxe.forEach(t),LDo=i(J),xF=n(J,"LI",{});var Wxe=s(xF);rhe=n(Wxe,"STRONG",{});var lht=s(rhe);xDo=r(lht,"bert"),lht.forEach(t),$Do=r(Wxe," \u2014 "),JO=n(Wxe,"A",{href:!0});var iht=s(JO);kDo=r(iht,"BertForTokenClassification"),iht.forEach(t),SDo=r(Wxe," (BERT model)"),Wxe.forEach(t),RDo=i(J),$F=n(J,"LI",{});var Qxe=s($F);the=n(Qxe,"STRONG",{});var dht=s(the);PDo=r(dht,"big_bird"),dht.forEach(t),BDo=r(Qxe," \u2014 "),YO=n(Qxe,"A",{href:!0});var cht=s(YO);IDo=r(cht,"BigBirdForTokenClassification"),cht.forEach(t),NDo=r(Qxe," (BigBird model)"),Qxe.forEach(t),qDo=i(J),kF=n(J,"LI",{});var Hxe=s(kF);ahe=n(Hxe,"STRONG",{});var mht=s(ahe);jDo=r(mht,"camembert"),mht.forEach(t),DDo=r(Hxe," \u2014 "),KO=n(Hxe,"A",{href:!0});var fht=s(KO);GDo=r(fht,"CamembertForTokenClassification"),fht.forEach(t),ODo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),VDo=i(J),SF=n(J,"LI",{});var Uxe=s(SF);nhe=n(Uxe,"STRONG",{});var ght=s(nhe);XDo=r(ght,"canine"),ght.forEach(t),zDo=r(Uxe," \u2014 "),ZO=n(Uxe,"A",{href:!0});var hht=s(ZO);WDo=r(hht,"CanineForTokenClassification"),hht.forEach(t),QDo=r(Uxe," (Canine model)"),Uxe.forEach(t),HDo=i(J),RF=n(J,"LI",{});var Jxe=s(RF);she=n(Jxe,"STRONG",{});var uht=s(she);UDo=r(uht,"convbert"),uht.forEach(t),JDo=r(Jxe," \u2014 "),eV=n(Jxe,"A",{href:!0});var pht=s(eV);YDo=r(pht,"ConvBertForTokenClassification"),pht.forEach(t),KDo=r(Jxe," (ConvBERT model)"),Jxe.forEach(t),ZDo=i(J),PF=n(J,"LI",{});var Yxe=s(PF);lhe=n(Yxe,"STRONG",{});var _ht=s(lhe);eGo=r(_ht,"data2vec-text"),_ht.forEach(t),oGo=r(Yxe," \u2014 "),oV=n(Yxe,"A",{href:!0});var bht=s(oV);rGo=r(bht,"Data2VecTextForTokenClassification"),bht.forEach(t),tGo=r(Yxe," (Data2VecText model)"),Yxe.forEach(t),aGo=i(J),BF=n(J,"LI",{});var Kxe=s(BF);ihe=n(Kxe,"STRONG",{});var vht=s(ihe);nGo=r(vht,"deberta"),vht.forEach(t),sGo=r(Kxe," \u2014 "),rV=n(Kxe,"A",{href:!0});var Fht=s(rV);lGo=r(Fht,"DebertaForTokenClassification"),Fht.forEach(t),iGo=r(Kxe," (DeBERTa model)"),Kxe.forEach(t),dGo=i(J),IF=n(J,"LI",{});var Zxe=s(IF);dhe=n(Zxe,"STRONG",{});var Tht=s(dhe);cGo=r(Tht,"deberta-v2"),Tht.forEach(t),mGo=r(Zxe," \u2014 "),tV=n(Zxe,"A",{href:!0});var Mht=s(tV);fGo=r(Mht,"DebertaV2ForTokenClassification"),Mht.forEach(t),gGo=r(Zxe," (DeBERTa-v2 model)"),Zxe.forEach(t),hGo=i(J),NF=n(J,"LI",{});var e$e=s(NF);che=n(e$e,"STRONG",{});var Eht=s(che);uGo=r(Eht,"distilbert"),Eht.forEach(t),pGo=r(e$e," \u2014 "),aV=n(e$e,"A",{href:!0});var Cht=s(aV);_Go=r(Cht,"DistilBertForTokenClassification"),Cht.forEach(t),bGo=r(e$e," (DistilBERT model)"),e$e.forEach(t),vGo=i(J),qF=n(J,"LI",{});var o$e=s(qF);mhe=n(o$e,"STRONG",{});var wht=s(mhe);FGo=r(wht,"electra"),wht.forEach(t),TGo=r(o$e," \u2014 "),nV=n(o$e,"A",{href:!0});var Aht=s(nV);MGo=r(Aht,"ElectraForTokenClassification"),Aht.forEach(t),EGo=r(o$e," (ELECTRA model)"),o$e.forEach(t),CGo=i(J),jF=n(J,"LI",{});var r$e=s(jF);fhe=n(r$e,"STRONG",{});var yht=s(fhe);wGo=r(yht,"flaubert"),yht.forEach(t),AGo=r(r$e," \u2014 "),sV=n(r$e,"A",{href:!0});var Lht=s(sV);yGo=r(Lht,"FlaubertForTokenClassification"),Lht.forEach(t),LGo=r(r$e," (FlauBERT model)"),r$e.forEach(t),xGo=i(J),DF=n(J,"LI",{});var t$e=s(DF);ghe=n(t$e,"STRONG",{});var xht=s(ghe);$Go=r(xht,"fnet"),xht.forEach(t),kGo=r(t$e," \u2014 "),lV=n(t$e,"A",{href:!0});var $ht=s(lV);SGo=r($ht,"FNetForTokenClassification"),$ht.forEach(t),RGo=r(t$e," (FNet model)"),t$e.forEach(t),PGo=i(J),GF=n(J,"LI",{});var a$e=s(GF);hhe=n(a$e,"STRONG",{});var kht=s(hhe);BGo=r(kht,"funnel"),kht.forEach(t),IGo=r(a$e," \u2014 "),iV=n(a$e,"A",{href:!0});var Sht=s(iV);NGo=r(Sht,"FunnelForTokenClassification"),Sht.forEach(t),qGo=r(a$e," (Funnel Transformer model)"),a$e.forEach(t),jGo=i(J),OF=n(J,"LI",{});var n$e=s(OF);uhe=n(n$e,"STRONG",{});var Rht=s(uhe);DGo=r(Rht,"gpt2"),Rht.forEach(t),GGo=r(n$e," \u2014 "),dV=n(n$e,"A",{href:!0});var Pht=s(dV);OGo=r(Pht,"GPT2ForTokenClassification"),Pht.forEach(t),VGo=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),XGo=i(J),VF=n(J,"LI",{});var s$e=s(VF);phe=n(s$e,"STRONG",{});var Bht=s(phe);zGo=r(Bht,"ibert"),Bht.forEach(t),WGo=r(s$e," \u2014 "),cV=n(s$e,"A",{href:!0});var Iht=s(cV);QGo=r(Iht,"IBertForTokenClassification"),Iht.forEach(t),HGo=r(s$e," (I-BERT model)"),s$e.forEach(t),UGo=i(J),XF=n(J,"LI",{});var l$e=s(XF);_he=n(l$e,"STRONG",{});var Nht=s(_he);JGo=r(Nht,"layoutlm"),Nht.forEach(t),YGo=r(l$e," \u2014 "),mV=n(l$e,"A",{href:!0});var qht=s(mV);KGo=r(qht,"LayoutLMForTokenClassification"),qht.forEach(t),ZGo=r(l$e," (LayoutLM model)"),l$e.forEach(t),eOo=i(J),zF=n(J,"LI",{});var i$e=s(zF);bhe=n(i$e,"STRONG",{});var jht=s(bhe);oOo=r(jht,"layoutlmv2"),jht.forEach(t),rOo=r(i$e," \u2014 "),fV=n(i$e,"A",{href:!0});var Dht=s(fV);tOo=r(Dht,"LayoutLMv2ForTokenClassification"),Dht.forEach(t),aOo=r(i$e," (LayoutLMv2 model)"),i$e.forEach(t),nOo=i(J),WF=n(J,"LI",{});var d$e=s(WF);vhe=n(d$e,"STRONG",{});var Ght=s(vhe);sOo=r(Ght,"layoutlmv3"),Ght.forEach(t),lOo=r(d$e," \u2014 "),gV=n(d$e,"A",{href:!0});var Oht=s(gV);iOo=r(Oht,"LayoutLMv3ForTokenClassification"),Oht.forEach(t),dOo=r(d$e," (LayoutLMv3 model)"),d$e.forEach(t),cOo=i(J),QF=n(J,"LI",{});var c$e=s(QF);Fhe=n(c$e,"STRONG",{});var Vht=s(Fhe);mOo=r(Vht,"longformer"),Vht.forEach(t),fOo=r(c$e," \u2014 "),hV=n(c$e,"A",{href:!0});var Xht=s(hV);gOo=r(Xht,"LongformerForTokenClassification"),Xht.forEach(t),hOo=r(c$e," (Longformer model)"),c$e.forEach(t),uOo=i(J),HF=n(J,"LI",{});var m$e=s(HF);The=n(m$e,"STRONG",{});var zht=s(The);pOo=r(zht,"megatron-bert"),zht.forEach(t),_Oo=r(m$e," \u2014 "),uV=n(m$e,"A",{href:!0});var Wht=s(uV);bOo=r(Wht,"MegatronBertForTokenClassification"),Wht.forEach(t),vOo=r(m$e," (MegatronBert model)"),m$e.forEach(t),FOo=i(J),UF=n(J,"LI",{});var f$e=s(UF);Mhe=n(f$e,"STRONG",{});var Qht=s(Mhe);TOo=r(Qht,"mobilebert"),Qht.forEach(t),MOo=r(f$e," \u2014 "),pV=n(f$e,"A",{href:!0});var Hht=s(pV);EOo=r(Hht,"MobileBertForTokenClassification"),Hht.forEach(t),COo=r(f$e," (MobileBERT model)"),f$e.forEach(t),wOo=i(J),JF=n(J,"LI",{});var g$e=s(JF);Ehe=n(g$e,"STRONG",{});var Uht=s(Ehe);AOo=r(Uht,"mpnet"),Uht.forEach(t),yOo=r(g$e," \u2014 "),_V=n(g$e,"A",{href:!0});var Jht=s(_V);LOo=r(Jht,"MPNetForTokenClassification"),Jht.forEach(t),xOo=r(g$e," (MPNet model)"),g$e.forEach(t),$Oo=i(J),YF=n(J,"LI",{});var h$e=s(YF);Che=n(h$e,"STRONG",{});var Yht=s(Che);kOo=r(Yht,"nystromformer"),Yht.forEach(t),SOo=r(h$e," \u2014 "),bV=n(h$e,"A",{href:!0});var Kht=s(bV);ROo=r(Kht,"NystromformerForTokenClassification"),Kht.forEach(t),POo=r(h$e," (Nystromformer model)"),h$e.forEach(t),BOo=i(J),KF=n(J,"LI",{});var u$e=s(KF);whe=n(u$e,"STRONG",{});var Zht=s(whe);IOo=r(Zht,"qdqbert"),Zht.forEach(t),NOo=r(u$e," \u2014 "),vV=n(u$e,"A",{href:!0});var eut=s(vV);qOo=r(eut,"QDQBertForTokenClassification"),eut.forEach(t),jOo=r(u$e," (QDQBert model)"),u$e.forEach(t),DOo=i(J),ZF=n(J,"LI",{});var p$e=s(ZF);Ahe=n(p$e,"STRONG",{});var out=s(Ahe);GOo=r(out,"rembert"),out.forEach(t),OOo=r(p$e," \u2014 "),FV=n(p$e,"A",{href:!0});var rut=s(FV);VOo=r(rut,"RemBertForTokenClassification"),rut.forEach(t),XOo=r(p$e," (RemBERT model)"),p$e.forEach(t),zOo=i(J),e1=n(J,"LI",{});var _$e=s(e1);yhe=n(_$e,"STRONG",{});var tut=s(yhe);WOo=r(tut,"roberta"),tut.forEach(t),QOo=r(_$e," \u2014 "),TV=n(_$e,"A",{href:!0});var aut=s(TV);HOo=r(aut,"RobertaForTokenClassification"),aut.forEach(t),UOo=r(_$e," (RoBERTa model)"),_$e.forEach(t),JOo=i(J),o1=n(J,"LI",{});var b$e=s(o1);Lhe=n(b$e,"STRONG",{});var nut=s(Lhe);YOo=r(nut,"roformer"),nut.forEach(t),KOo=r(b$e," \u2014 "),MV=n(b$e,"A",{href:!0});var sut=s(MV);ZOo=r(sut,"RoFormerForTokenClassification"),sut.forEach(t),eVo=r(b$e," (RoFormer model)"),b$e.forEach(t),oVo=i(J),r1=n(J,"LI",{});var v$e=s(r1);xhe=n(v$e,"STRONG",{});var lut=s(xhe);rVo=r(lut,"squeezebert"),lut.forEach(t),tVo=r(v$e," \u2014 "),EV=n(v$e,"A",{href:!0});var iut=s(EV);aVo=r(iut,"SqueezeBertForTokenClassification"),iut.forEach(t),nVo=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),sVo=i(J),t1=n(J,"LI",{});var F$e=s(t1);$he=n(F$e,"STRONG",{});var dut=s($he);lVo=r(dut,"xlm"),dut.forEach(t),iVo=r(F$e," \u2014 "),CV=n(F$e,"A",{href:!0});var cut=s(CV);dVo=r(cut,"XLMForTokenClassification"),cut.forEach(t),cVo=r(F$e," (XLM model)"),F$e.forEach(t),mVo=i(J),a1=n(J,"LI",{});var T$e=s(a1);khe=n(T$e,"STRONG",{});var mut=s(khe);fVo=r(mut,"xlm-roberta"),mut.forEach(t),gVo=r(T$e," \u2014 "),wV=n(T$e,"A",{href:!0});var fut=s(wV);hVo=r(fut,"XLMRobertaForTokenClassification"),fut.forEach(t),uVo=r(T$e," (XLM-RoBERTa model)"),T$e.forEach(t),pVo=i(J),n1=n(J,"LI",{});var M$e=s(n1);She=n(M$e,"STRONG",{});var gut=s(She);_Vo=r(gut,"xlm-roberta-xl"),gut.forEach(t),bVo=r(M$e," \u2014 "),AV=n(M$e,"A",{href:!0});var hut=s(AV);vVo=r(hut,"XLMRobertaXLForTokenClassification"),hut.forEach(t),FVo=r(M$e," (XLM-RoBERTa-XL model)"),M$e.forEach(t),TVo=i(J),s1=n(J,"LI",{});var E$e=s(s1);Rhe=n(E$e,"STRONG",{});var uut=s(Rhe);MVo=r(uut,"xlnet"),uut.forEach(t),EVo=r(E$e," \u2014 "),yV=n(E$e,"A",{href:!0});var put=s(yV);CVo=r(put,"XLNetForTokenClassification"),put.forEach(t),wVo=r(E$e," (XLNet model)"),E$e.forEach(t),AVo=i(J),l1=n(J,"LI",{});var C$e=s(l1);Phe=n(C$e,"STRONG",{});var _ut=s(Phe);yVo=r(_ut,"yoso"),_ut.forEach(t),LVo=r(C$e," \u2014 "),LV=n(C$e,"A",{href:!0});var but=s(LV);xVo=r(but,"YosoForTokenClassification"),but.forEach(t),$Vo=r(C$e," (YOSO model)"),C$e.forEach(t),J.forEach(t),kVo=i(da),i1=n(da,"P",{});var w$e=s(i1);SVo=r(w$e,"The model is set in evaluation mode by default using "),Bhe=n(w$e,"CODE",{});var vut=s(Bhe);RVo=r(vut,"model.eval()"),vut.forEach(t),PVo=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(w$e,"CODE",{});var Fut=s(Ihe);BVo=r(Fut,"model.train()"),Fut.forEach(t),w$e.forEach(t),IVo=i(da),T(d1.$$.fragment,da),da.forEach(t),Js.forEach(t),zqe=i(m),Ki=n(m,"H2",{class:!0});var UDe=s(Ki);c1=n(UDe,"A",{id:!0,class:!0,href:!0});var Tut=s(c1);Nhe=n(Tut,"SPAN",{});var Mut=s(Nhe);T(HL.$$.fragment,Mut),Mut.forEach(t),Tut.forEach(t),NVo=i(UDe),qhe=n(UDe,"SPAN",{});var Eut=s(qhe);qVo=r(Eut,"AutoModelForQuestionAnswering"),Eut.forEach(t),UDe.forEach(t),Wqe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T(UL.$$.fragment,Ys),jVo=i(Ys),Zi=n(Ys,"P",{});var GZ=s(Zi);DVo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xV=n(GZ,"A",{href:!0});var Cut=s(xV);GVo=r(Cut,"from_pretrained()"),Cut.forEach(t),OVo=r(GZ," class method or the "),$V=n(GZ,"A",{href:!0});var wut=s($V);VVo=r(wut,"from_config()"),wut.forEach(t),XVo=r(GZ,` class
method.`),GZ.forEach(t),zVo=i(Ys),JL=n(Ys,"P",{});var JDe=s(JL);WVo=r(JDe,"This class cannot be instantiated directly using "),jhe=n(JDe,"CODE",{});var Aut=s(jhe);QVo=r(Aut,"__init__()"),Aut.forEach(t),HVo=r(JDe," (throws an error)."),JDe.forEach(t),UVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var Z6=s(ft);T(YL.$$.fragment,Z6),JVo=i(Z6),Dhe=n(Z6,"P",{});var yut=s(Dhe);YVo=r(yut,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yut.forEach(t),KVo=i(Z6),ed=n(Z6,"P",{});var OZ=s(ed);ZVo=r(OZ,`Note:
Loading a model from its configuration file does `),Ghe=n(OZ,"STRONG",{});var Lut=s(Ghe);eXo=r(Lut,"not"),Lut.forEach(t),oXo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(OZ,"A",{href:!0});var xut=s(kV);rXo=r(xut,"from_pretrained()"),xut.forEach(t),tXo=r(OZ," to load the model weights."),OZ.forEach(t),aXo=i(Z6),T(m1.$$.fragment,Z6),Z6.forEach(t),nXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(KL.$$.fragment,ca),sXo=i(ca),Ohe=n(ca,"P",{});var $ut=s(Ohe);lXo=r($ut,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$ut.forEach(t),iXo=i(ca),Na=n(ca,"P",{});var eA=s(Na);dXo=r(eA,"The model class to instantiate is selected based on the "),Vhe=n(eA,"CODE",{});var kut=s(Vhe);cXo=r(kut,"model_type"),kut.forEach(t),mXo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(eA,"CODE",{});var Sut=s(Xhe);fXo=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),gXo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(eA,"CODE",{});var Rut=s(zhe);hXo=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),uXo=r(eA,":"),eA.forEach(t),pXo=i(ca),V=n(ca,"UL",{});var X=s(V);f1=n(X,"LI",{});var A$e=s(f1);Whe=n(A$e,"STRONG",{});var Put=s(Whe);_Xo=r(Put,"albert"),Put.forEach(t),bXo=r(A$e," \u2014 "),SV=n(A$e,"A",{href:!0});var But=s(SV);vXo=r(But,"AlbertForQuestionAnswering"),But.forEach(t),FXo=r(A$e," (ALBERT model)"),A$e.forEach(t),TXo=i(X),g1=n(X,"LI",{});var y$e=s(g1);Qhe=n(y$e,"STRONG",{});var Iut=s(Qhe);MXo=r(Iut,"bart"),Iut.forEach(t),EXo=r(y$e," \u2014 "),RV=n(y$e,"A",{href:!0});var Nut=s(RV);CXo=r(Nut,"BartForQuestionAnswering"),Nut.forEach(t),wXo=r(y$e," (BART model)"),y$e.forEach(t),AXo=i(X),h1=n(X,"LI",{});var L$e=s(h1);Hhe=n(L$e,"STRONG",{});var qut=s(Hhe);yXo=r(qut,"bert"),qut.forEach(t),LXo=r(L$e," \u2014 "),PV=n(L$e,"A",{href:!0});var jut=s(PV);xXo=r(jut,"BertForQuestionAnswering"),jut.forEach(t),$Xo=r(L$e," (BERT model)"),L$e.forEach(t),kXo=i(X),u1=n(X,"LI",{});var x$e=s(u1);Uhe=n(x$e,"STRONG",{});var Dut=s(Uhe);SXo=r(Dut,"big_bird"),Dut.forEach(t),RXo=r(x$e," \u2014 "),BV=n(x$e,"A",{href:!0});var Gut=s(BV);PXo=r(Gut,"BigBirdForQuestionAnswering"),Gut.forEach(t),BXo=r(x$e," (BigBird model)"),x$e.forEach(t),IXo=i(X),p1=n(X,"LI",{});var $$e=s(p1);Jhe=n($$e,"STRONG",{});var Out=s(Jhe);NXo=r(Out,"bigbird_pegasus"),Out.forEach(t),qXo=r($$e," \u2014 "),IV=n($$e,"A",{href:!0});var Vut=s(IV);jXo=r(Vut,"BigBirdPegasusForQuestionAnswering"),Vut.forEach(t),DXo=r($$e," (BigBirdPegasus model)"),$$e.forEach(t),GXo=i(X),_1=n(X,"LI",{});var k$e=s(_1);Yhe=n(k$e,"STRONG",{});var Xut=s(Yhe);OXo=r(Xut,"camembert"),Xut.forEach(t),VXo=r(k$e," \u2014 "),NV=n(k$e,"A",{href:!0});var zut=s(NV);XXo=r(zut,"CamembertForQuestionAnswering"),zut.forEach(t),zXo=r(k$e," (CamemBERT model)"),k$e.forEach(t),WXo=i(X),b1=n(X,"LI",{});var S$e=s(b1);Khe=n(S$e,"STRONG",{});var Wut=s(Khe);QXo=r(Wut,"canine"),Wut.forEach(t),HXo=r(S$e," \u2014 "),qV=n(S$e,"A",{href:!0});var Qut=s(qV);UXo=r(Qut,"CanineForQuestionAnswering"),Qut.forEach(t),JXo=r(S$e," (Canine model)"),S$e.forEach(t),YXo=i(X),v1=n(X,"LI",{});var R$e=s(v1);Zhe=n(R$e,"STRONG",{});var Hut=s(Zhe);KXo=r(Hut,"convbert"),Hut.forEach(t),ZXo=r(R$e," \u2014 "),jV=n(R$e,"A",{href:!0});var Uut=s(jV);ezo=r(Uut,"ConvBertForQuestionAnswering"),Uut.forEach(t),ozo=r(R$e," (ConvBERT model)"),R$e.forEach(t),rzo=i(X),F1=n(X,"LI",{});var P$e=s(F1);eue=n(P$e,"STRONG",{});var Jut=s(eue);tzo=r(Jut,"data2vec-text"),Jut.forEach(t),azo=r(P$e," \u2014 "),DV=n(P$e,"A",{href:!0});var Yut=s(DV);nzo=r(Yut,"Data2VecTextForQuestionAnswering"),Yut.forEach(t),szo=r(P$e," (Data2VecText model)"),P$e.forEach(t),lzo=i(X),T1=n(X,"LI",{});var B$e=s(T1);oue=n(B$e,"STRONG",{});var Kut=s(oue);izo=r(Kut,"deberta"),Kut.forEach(t),dzo=r(B$e," \u2014 "),GV=n(B$e,"A",{href:!0});var Zut=s(GV);czo=r(Zut,"DebertaForQuestionAnswering"),Zut.forEach(t),mzo=r(B$e," (DeBERTa model)"),B$e.forEach(t),fzo=i(X),M1=n(X,"LI",{});var I$e=s(M1);rue=n(I$e,"STRONG",{});var ept=s(rue);gzo=r(ept,"deberta-v2"),ept.forEach(t),hzo=r(I$e," \u2014 "),OV=n(I$e,"A",{href:!0});var opt=s(OV);uzo=r(opt,"DebertaV2ForQuestionAnswering"),opt.forEach(t),pzo=r(I$e," (DeBERTa-v2 model)"),I$e.forEach(t),_zo=i(X),E1=n(X,"LI",{});var N$e=s(E1);tue=n(N$e,"STRONG",{});var rpt=s(tue);bzo=r(rpt,"distilbert"),rpt.forEach(t),vzo=r(N$e," \u2014 "),VV=n(N$e,"A",{href:!0});var tpt=s(VV);Fzo=r(tpt,"DistilBertForQuestionAnswering"),tpt.forEach(t),Tzo=r(N$e," (DistilBERT model)"),N$e.forEach(t),Mzo=i(X),C1=n(X,"LI",{});var q$e=s(C1);aue=n(q$e,"STRONG",{});var apt=s(aue);Ezo=r(apt,"electra"),apt.forEach(t),Czo=r(q$e," \u2014 "),XV=n(q$e,"A",{href:!0});var npt=s(XV);wzo=r(npt,"ElectraForQuestionAnswering"),npt.forEach(t),Azo=r(q$e," (ELECTRA model)"),q$e.forEach(t),yzo=i(X),w1=n(X,"LI",{});var j$e=s(w1);nue=n(j$e,"STRONG",{});var spt=s(nue);Lzo=r(spt,"flaubert"),spt.forEach(t),xzo=r(j$e," \u2014 "),zV=n(j$e,"A",{href:!0});var lpt=s(zV);$zo=r(lpt,"FlaubertForQuestionAnsweringSimple"),lpt.forEach(t),kzo=r(j$e," (FlauBERT model)"),j$e.forEach(t),Szo=i(X),A1=n(X,"LI",{});var D$e=s(A1);sue=n(D$e,"STRONG",{});var ipt=s(sue);Rzo=r(ipt,"fnet"),ipt.forEach(t),Pzo=r(D$e," \u2014 "),WV=n(D$e,"A",{href:!0});var dpt=s(WV);Bzo=r(dpt,"FNetForQuestionAnswering"),dpt.forEach(t),Izo=r(D$e," (FNet model)"),D$e.forEach(t),Nzo=i(X),y1=n(X,"LI",{});var G$e=s(y1);lue=n(G$e,"STRONG",{});var cpt=s(lue);qzo=r(cpt,"funnel"),cpt.forEach(t),jzo=r(G$e," \u2014 "),QV=n(G$e,"A",{href:!0});var mpt=s(QV);Dzo=r(mpt,"FunnelForQuestionAnswering"),mpt.forEach(t),Gzo=r(G$e," (Funnel Transformer model)"),G$e.forEach(t),Ozo=i(X),L1=n(X,"LI",{});var O$e=s(L1);iue=n(O$e,"STRONG",{});var fpt=s(iue);Vzo=r(fpt,"gptj"),fpt.forEach(t),Xzo=r(O$e," \u2014 "),HV=n(O$e,"A",{href:!0});var gpt=s(HV);zzo=r(gpt,"GPTJForQuestionAnswering"),gpt.forEach(t),Wzo=r(O$e," (GPT-J model)"),O$e.forEach(t),Qzo=i(X),x1=n(X,"LI",{});var V$e=s(x1);due=n(V$e,"STRONG",{});var hpt=s(due);Hzo=r(hpt,"ibert"),hpt.forEach(t),Uzo=r(V$e," \u2014 "),UV=n(V$e,"A",{href:!0});var upt=s(UV);Jzo=r(upt,"IBertForQuestionAnswering"),upt.forEach(t),Yzo=r(V$e," (I-BERT model)"),V$e.forEach(t),Kzo=i(X),$1=n(X,"LI",{});var X$e=s($1);cue=n(X$e,"STRONG",{});var ppt=s(cue);Zzo=r(ppt,"layoutlmv2"),ppt.forEach(t),eWo=r(X$e," \u2014 "),JV=n(X$e,"A",{href:!0});var _pt=s(JV);oWo=r(_pt,"LayoutLMv2ForQuestionAnswering"),_pt.forEach(t),rWo=r(X$e," (LayoutLMv2 model)"),X$e.forEach(t),tWo=i(X),k1=n(X,"LI",{});var z$e=s(k1);mue=n(z$e,"STRONG",{});var bpt=s(mue);aWo=r(bpt,"layoutlmv3"),bpt.forEach(t),nWo=r(z$e," \u2014 "),YV=n(z$e,"A",{href:!0});var vpt=s(YV);sWo=r(vpt,"LayoutLMv3ForQuestionAnswering"),vpt.forEach(t),lWo=r(z$e," (LayoutLMv3 model)"),z$e.forEach(t),iWo=i(X),S1=n(X,"LI",{});var W$e=s(S1);fue=n(W$e,"STRONG",{});var Fpt=s(fue);dWo=r(Fpt,"led"),Fpt.forEach(t),cWo=r(W$e," \u2014 "),KV=n(W$e,"A",{href:!0});var Tpt=s(KV);mWo=r(Tpt,"LEDForQuestionAnswering"),Tpt.forEach(t),fWo=r(W$e," (LED model)"),W$e.forEach(t),gWo=i(X),R1=n(X,"LI",{});var Q$e=s(R1);gue=n(Q$e,"STRONG",{});var Mpt=s(gue);hWo=r(Mpt,"longformer"),Mpt.forEach(t),uWo=r(Q$e," \u2014 "),ZV=n(Q$e,"A",{href:!0});var Ept=s(ZV);pWo=r(Ept,"LongformerForQuestionAnswering"),Ept.forEach(t),_Wo=r(Q$e," (Longformer model)"),Q$e.forEach(t),bWo=i(X),P1=n(X,"LI",{});var H$e=s(P1);hue=n(H$e,"STRONG",{});var Cpt=s(hue);vWo=r(Cpt,"lxmert"),Cpt.forEach(t),FWo=r(H$e," \u2014 "),eX=n(H$e,"A",{href:!0});var wpt=s(eX);TWo=r(wpt,"LxmertForQuestionAnswering"),wpt.forEach(t),MWo=r(H$e," (LXMERT model)"),H$e.forEach(t),EWo=i(X),B1=n(X,"LI",{});var U$e=s(B1);uue=n(U$e,"STRONG",{});var Apt=s(uue);CWo=r(Apt,"mbart"),Apt.forEach(t),wWo=r(U$e," \u2014 "),oX=n(U$e,"A",{href:!0});var ypt=s(oX);AWo=r(ypt,"MBartForQuestionAnswering"),ypt.forEach(t),yWo=r(U$e," (mBART model)"),U$e.forEach(t),LWo=i(X),I1=n(X,"LI",{});var J$e=s(I1);pue=n(J$e,"STRONG",{});var Lpt=s(pue);xWo=r(Lpt,"megatron-bert"),Lpt.forEach(t),$Wo=r(J$e," \u2014 "),rX=n(J$e,"A",{href:!0});var xpt=s(rX);kWo=r(xpt,"MegatronBertForQuestionAnswering"),xpt.forEach(t),SWo=r(J$e," (MegatronBert model)"),J$e.forEach(t),RWo=i(X),N1=n(X,"LI",{});var Y$e=s(N1);_ue=n(Y$e,"STRONG",{});var $pt=s(_ue);PWo=r($pt,"mobilebert"),$pt.forEach(t),BWo=r(Y$e," \u2014 "),tX=n(Y$e,"A",{href:!0});var kpt=s(tX);IWo=r(kpt,"MobileBertForQuestionAnswering"),kpt.forEach(t),NWo=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),qWo=i(X),q1=n(X,"LI",{});var K$e=s(q1);bue=n(K$e,"STRONG",{});var Spt=s(bue);jWo=r(Spt,"mpnet"),Spt.forEach(t),DWo=r(K$e," \u2014 "),aX=n(K$e,"A",{href:!0});var Rpt=s(aX);GWo=r(Rpt,"MPNetForQuestionAnswering"),Rpt.forEach(t),OWo=r(K$e," (MPNet model)"),K$e.forEach(t),VWo=i(X),j1=n(X,"LI",{});var Z$e=s(j1);vue=n(Z$e,"STRONG",{});var Ppt=s(vue);XWo=r(Ppt,"nystromformer"),Ppt.forEach(t),zWo=r(Z$e," \u2014 "),nX=n(Z$e,"A",{href:!0});var Bpt=s(nX);WWo=r(Bpt,"NystromformerForQuestionAnswering"),Bpt.forEach(t),QWo=r(Z$e," (Nystromformer model)"),Z$e.forEach(t),HWo=i(X),D1=n(X,"LI",{});var eke=s(D1);Fue=n(eke,"STRONG",{});var Ipt=s(Fue);UWo=r(Ipt,"qdqbert"),Ipt.forEach(t),JWo=r(eke," \u2014 "),sX=n(eke,"A",{href:!0});var Npt=s(sX);YWo=r(Npt,"QDQBertForQuestionAnswering"),Npt.forEach(t),KWo=r(eke," (QDQBert model)"),eke.forEach(t),ZWo=i(X),G1=n(X,"LI",{});var oke=s(G1);Tue=n(oke,"STRONG",{});var qpt=s(Tue);eQo=r(qpt,"reformer"),qpt.forEach(t),oQo=r(oke," \u2014 "),lX=n(oke,"A",{href:!0});var jpt=s(lX);rQo=r(jpt,"ReformerForQuestionAnswering"),jpt.forEach(t),tQo=r(oke," (Reformer model)"),oke.forEach(t),aQo=i(X),O1=n(X,"LI",{});var rke=s(O1);Mue=n(rke,"STRONG",{});var Dpt=s(Mue);nQo=r(Dpt,"rembert"),Dpt.forEach(t),sQo=r(rke," \u2014 "),iX=n(rke,"A",{href:!0});var Gpt=s(iX);lQo=r(Gpt,"RemBertForQuestionAnswering"),Gpt.forEach(t),iQo=r(rke," (RemBERT model)"),rke.forEach(t),dQo=i(X),V1=n(X,"LI",{});var tke=s(V1);Eue=n(tke,"STRONG",{});var Opt=s(Eue);cQo=r(Opt,"roberta"),Opt.forEach(t),mQo=r(tke," \u2014 "),dX=n(tke,"A",{href:!0});var Vpt=s(dX);fQo=r(Vpt,"RobertaForQuestionAnswering"),Vpt.forEach(t),gQo=r(tke," (RoBERTa model)"),tke.forEach(t),hQo=i(X),X1=n(X,"LI",{});var ake=s(X1);Cue=n(ake,"STRONG",{});var Xpt=s(Cue);uQo=r(Xpt,"roformer"),Xpt.forEach(t),pQo=r(ake," \u2014 "),cX=n(ake,"A",{href:!0});var zpt=s(cX);_Qo=r(zpt,"RoFormerForQuestionAnswering"),zpt.forEach(t),bQo=r(ake," (RoFormer model)"),ake.forEach(t),vQo=i(X),z1=n(X,"LI",{});var nke=s(z1);wue=n(nke,"STRONG",{});var Wpt=s(wue);FQo=r(Wpt,"splinter"),Wpt.forEach(t),TQo=r(nke," \u2014 "),mX=n(nke,"A",{href:!0});var Qpt=s(mX);MQo=r(Qpt,"SplinterForQuestionAnswering"),Qpt.forEach(t),EQo=r(nke," (Splinter model)"),nke.forEach(t),CQo=i(X),W1=n(X,"LI",{});var ske=s(W1);Aue=n(ske,"STRONG",{});var Hpt=s(Aue);wQo=r(Hpt,"squeezebert"),Hpt.forEach(t),AQo=r(ske," \u2014 "),fX=n(ske,"A",{href:!0});var Upt=s(fX);yQo=r(Upt,"SqueezeBertForQuestionAnswering"),Upt.forEach(t),LQo=r(ske," (SqueezeBERT model)"),ske.forEach(t),xQo=i(X),Q1=n(X,"LI",{});var lke=s(Q1);yue=n(lke,"STRONG",{});var Jpt=s(yue);$Qo=r(Jpt,"xlm"),Jpt.forEach(t),kQo=r(lke," \u2014 "),gX=n(lke,"A",{href:!0});var Ypt=s(gX);SQo=r(Ypt,"XLMForQuestionAnsweringSimple"),Ypt.forEach(t),RQo=r(lke," (XLM model)"),lke.forEach(t),PQo=i(X),H1=n(X,"LI",{});var ike=s(H1);Lue=n(ike,"STRONG",{});var Kpt=s(Lue);BQo=r(Kpt,"xlm-roberta"),Kpt.forEach(t),IQo=r(ike," \u2014 "),hX=n(ike,"A",{href:!0});var Zpt=s(hX);NQo=r(Zpt,"XLMRobertaForQuestionAnswering"),Zpt.forEach(t),qQo=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),jQo=i(X),U1=n(X,"LI",{});var dke=s(U1);xue=n(dke,"STRONG",{});var e_t=s(xue);DQo=r(e_t,"xlm-roberta-xl"),e_t.forEach(t),GQo=r(dke," \u2014 "),uX=n(dke,"A",{href:!0});var o_t=s(uX);OQo=r(o_t,"XLMRobertaXLForQuestionAnswering"),o_t.forEach(t),VQo=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),XQo=i(X),J1=n(X,"LI",{});var cke=s(J1);$ue=n(cke,"STRONG",{});var r_t=s($ue);zQo=r(r_t,"xlnet"),r_t.forEach(t),WQo=r(cke," \u2014 "),pX=n(cke,"A",{href:!0});var t_t=s(pX);QQo=r(t_t,"XLNetForQuestionAnsweringSimple"),t_t.forEach(t),HQo=r(cke," (XLNet model)"),cke.forEach(t),UQo=i(X),Y1=n(X,"LI",{});var mke=s(Y1);kue=n(mke,"STRONG",{});var a_t=s(kue);JQo=r(a_t,"yoso"),a_t.forEach(t),YQo=r(mke," \u2014 "),_X=n(mke,"A",{href:!0});var n_t=s(_X);KQo=r(n_t,"YosoForQuestionAnswering"),n_t.forEach(t),ZQo=r(mke," (YOSO model)"),mke.forEach(t),X.forEach(t),eHo=i(ca),K1=n(ca,"P",{});var fke=s(K1);oHo=r(fke,"The model is set in evaluation mode by default using "),Sue=n(fke,"CODE",{});var s_t=s(Sue);rHo=r(s_t,"model.eval()"),s_t.forEach(t),tHo=r(fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(fke,"CODE",{});var l_t=s(Rue);aHo=r(l_t,"model.train()"),l_t.forEach(t),fke.forEach(t),nHo=i(ca),T(Z1.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Qqe=i(m),od=n(m,"H2",{class:!0});var YDe=s(od);eT=n(YDe,"A",{id:!0,class:!0,href:!0});var i_t=s(eT);Pue=n(i_t,"SPAN",{});var d_t=s(Pue);T(ZL.$$.fragment,d_t),d_t.forEach(t),i_t.forEach(t),sHo=i(YDe),Bue=n(YDe,"SPAN",{});var c_t=s(Bue);lHo=r(c_t,"AutoModelForTableQuestionAnswering"),c_t.forEach(t),YDe.forEach(t),Hqe=i(m),qo=n(m,"DIV",{class:!0});var Ks=s(qo);T(e8.$$.fragment,Ks),iHo=i(Ks),rd=n(Ks,"P",{});var VZ=s(rd);dHo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bX=n(VZ,"A",{href:!0});var m_t=s(bX);cHo=r(m_t,"from_pretrained()"),m_t.forEach(t),mHo=r(VZ," class method or the "),vX=n(VZ,"A",{href:!0});var f_t=s(vX);fHo=r(f_t,"from_config()"),f_t.forEach(t),gHo=r(VZ,` class
method.`),VZ.forEach(t),hHo=i(Ks),o8=n(Ks,"P",{});var KDe=s(o8);uHo=r(KDe,"This class cannot be instantiated directly using "),Iue=n(KDe,"CODE",{});var g_t=s(Iue);pHo=r(g_t,"__init__()"),g_t.forEach(t),_Ho=r(KDe," (throws an error)."),KDe.forEach(t),bHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var oA=s(gt);T(r8.$$.fragment,oA),vHo=i(oA),Nue=n(oA,"P",{});var h_t=s(Nue);FHo=r(h_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h_t.forEach(t),THo=i(oA),td=n(oA,"P",{});var XZ=s(td);MHo=r(XZ,`Note:
Loading a model from its configuration file does `),que=n(XZ,"STRONG",{});var u_t=s(que);EHo=r(u_t,"not"),u_t.forEach(t),CHo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(XZ,"A",{href:!0});var p_t=s(FX);wHo=r(p_t,"from_pretrained()"),p_t.forEach(t),AHo=r(XZ," to load the model weights."),XZ.forEach(t),yHo=i(oA),T(oT.$$.fragment,oA),oA.forEach(t),LHo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(t8.$$.fragment,ma),xHo=i(ma),jue=n(ma,"P",{});var __t=s(jue);$Ho=r(__t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),__t.forEach(t),kHo=i(ma),qa=n(ma,"P",{});var rA=s(qa);SHo=r(rA,"The model class to instantiate is selected based on the "),Due=n(rA,"CODE",{});var b_t=s(Due);RHo=r(b_t,"model_type"),b_t.forEach(t),PHo=r(rA,` property of the config object (either
passed as an argument or loaded from `),Gue=n(rA,"CODE",{});var v_t=s(Gue);BHo=r(v_t,"pretrained_model_name_or_path"),v_t.forEach(t),IHo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(rA,"CODE",{});var F_t=s(Oue);NHo=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),qHo=r(rA,":"),rA.forEach(t),jHo=i(ma),Vue=n(ma,"UL",{});var T_t=s(Vue);rT=n(T_t,"LI",{});var gke=s(rT);Xue=n(gke,"STRONG",{});var M_t=s(Xue);DHo=r(M_t,"tapas"),M_t.forEach(t),GHo=r(gke," \u2014 "),TX=n(gke,"A",{href:!0});var E_t=s(TX);OHo=r(E_t,"TapasForQuestionAnswering"),E_t.forEach(t),VHo=r(gke," (TAPAS model)"),gke.forEach(t),T_t.forEach(t),XHo=i(ma),tT=n(ma,"P",{});var hke=s(tT);zHo=r(hke,"The model is set in evaluation mode by default using "),zue=n(hke,"CODE",{});var C_t=s(zue);WHo=r(C_t,"model.eval()"),C_t.forEach(t),QHo=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(hke,"CODE",{});var w_t=s(Wue);HHo=r(w_t,"model.train()"),w_t.forEach(t),hke.forEach(t),UHo=i(ma),T(aT.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Uqe=i(m),ad=n(m,"H2",{class:!0});var ZDe=s(ad);nT=n(ZDe,"A",{id:!0,class:!0,href:!0});var A_t=s(nT);Que=n(A_t,"SPAN",{});var y_t=s(Que);T(a8.$$.fragment,y_t),y_t.forEach(t),A_t.forEach(t),JHo=i(ZDe),Hue=n(ZDe,"SPAN",{});var L_t=s(Hue);YHo=r(L_t,"AutoModelForImageClassification"),L_t.forEach(t),ZDe.forEach(t),Jqe=i(m),jo=n(m,"DIV",{class:!0});var Zs=s(jo);T(n8.$$.fragment,Zs),KHo=i(Zs),nd=n(Zs,"P",{});var zZ=s(nd);ZHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MX=n(zZ,"A",{href:!0});var x_t=s(MX);eUo=r(x_t,"from_pretrained()"),x_t.forEach(t),oUo=r(zZ," class method or the "),EX=n(zZ,"A",{href:!0});var $_t=s(EX);rUo=r($_t,"from_config()"),$_t.forEach(t),tUo=r(zZ,` class
method.`),zZ.forEach(t),aUo=i(Zs),s8=n(Zs,"P",{});var eGe=s(s8);nUo=r(eGe,"This class cannot be instantiated directly using "),Uue=n(eGe,"CODE",{});var k_t=s(Uue);sUo=r(k_t,"__init__()"),k_t.forEach(t),lUo=r(eGe," (throws an error)."),eGe.forEach(t),iUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var tA=s(ht);T(l8.$$.fragment,tA),dUo=i(tA),Jue=n(tA,"P",{});var S_t=s(Jue);cUo=r(S_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S_t.forEach(t),mUo=i(tA),sd=n(tA,"P",{});var WZ=s(sd);fUo=r(WZ,`Note:
Loading a model from its configuration file does `),Yue=n(WZ,"STRONG",{});var R_t=s(Yue);gUo=r(R_t,"not"),R_t.forEach(t),hUo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(WZ,"A",{href:!0});var P_t=s(CX);uUo=r(P_t,"from_pretrained()"),P_t.forEach(t),pUo=r(WZ," to load the model weights."),WZ.forEach(t),_Uo=i(tA),T(sT.$$.fragment,tA),tA.forEach(t),bUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var fa=s(lo);T(i8.$$.fragment,fa),vUo=i(fa),Kue=n(fa,"P",{});var B_t=s(Kue);FUo=r(B_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B_t.forEach(t),TUo=i(fa),ja=n(fa,"P",{});var aA=s(ja);MUo=r(aA,"The model class to instantiate is selected based on the "),Zue=n(aA,"CODE",{});var I_t=s(Zue);EUo=r(I_t,"model_type"),I_t.forEach(t),CUo=r(aA,` property of the config object (either
passed as an argument or loaded from `),epe=n(aA,"CODE",{});var N_t=s(epe);wUo=r(N_t,"pretrained_model_name_or_path"),N_t.forEach(t),AUo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(aA,"CODE",{});var q_t=s(ope);yUo=r(q_t,"pretrained_model_name_or_path"),q_t.forEach(t),LUo=r(aA,":"),aA.forEach(t),xUo=i(fa),Fe=n(fa,"UL",{});var Me=s(Fe);lT=n(Me,"LI",{});var uke=s(lT);rpe=n(uke,"STRONG",{});var j_t=s(rpe);$Uo=r(j_t,"beit"),j_t.forEach(t),kUo=r(uke," \u2014 "),wX=n(uke,"A",{href:!0});var D_t=s(wX);SUo=r(D_t,"BeitForImageClassification"),D_t.forEach(t),RUo=r(uke," (BEiT model)"),uke.forEach(t),PUo=i(Me),iT=n(Me,"LI",{});var pke=s(iT);tpe=n(pke,"STRONG",{});var G_t=s(tpe);BUo=r(G_t,"convnext"),G_t.forEach(t),IUo=r(pke," \u2014 "),AX=n(pke,"A",{href:!0});var O_t=s(AX);NUo=r(O_t,"ConvNextForImageClassification"),O_t.forEach(t),qUo=r(pke," (ConvNext model)"),pke.forEach(t),jUo=i(Me),dT=n(Me,"LI",{});var _ke=s(dT);ape=n(_ke,"STRONG",{});var V_t=s(ape);DUo=r(V_t,"cvt"),V_t.forEach(t),GUo=r(_ke," \u2014 "),yX=n(_ke,"A",{href:!0});var X_t=s(yX);OUo=r(X_t,"CvtForImageClassification"),X_t.forEach(t),VUo=r(_ke," (CvT model)"),_ke.forEach(t),XUo=i(Me),cT=n(Me,"LI",{});var bke=s(cT);npe=n(bke,"STRONG",{});var z_t=s(npe);zUo=r(z_t,"data2vec-vision"),z_t.forEach(t),WUo=r(bke," \u2014 "),LX=n(bke,"A",{href:!0});var W_t=s(LX);QUo=r(W_t,"Data2VecVisionForImageClassification"),W_t.forEach(t),HUo=r(bke," (Data2VecVision model)"),bke.forEach(t),UUo=i(Me),Bs=n(Me,"LI",{});var Q$=s(Bs);spe=n(Q$,"STRONG",{});var Q_t=s(spe);JUo=r(Q_t,"deit"),Q_t.forEach(t),YUo=r(Q$," \u2014 "),xX=n(Q$,"A",{href:!0});var H_t=s(xX);KUo=r(H_t,"DeiTForImageClassification"),H_t.forEach(t),ZUo=r(Q$," or "),$X=n(Q$,"A",{href:!0});var U_t=s($X);eJo=r(U_t,"DeiTForImageClassificationWithTeacher"),U_t.forEach(t),oJo=r(Q$," (DeiT model)"),Q$.forEach(t),rJo=i(Me),mT=n(Me,"LI",{});var vke=s(mT);lpe=n(vke,"STRONG",{});var J_t=s(lpe);tJo=r(J_t,"imagegpt"),J_t.forEach(t),aJo=r(vke," \u2014 "),kX=n(vke,"A",{href:!0});var Y_t=s(kX);nJo=r(Y_t,"ImageGPTForImageClassification"),Y_t.forEach(t),sJo=r(vke," (ImageGPT model)"),vke.forEach(t),lJo=i(Me),ut=n(Me,"LI",{});var gm=s(ut);ipe=n(gm,"STRONG",{});var K_t=s(ipe);iJo=r(K_t,"perceiver"),K_t.forEach(t),dJo=r(gm," \u2014 "),SX=n(gm,"A",{href:!0});var Z_t=s(SX);cJo=r(Z_t,"PerceiverForImageClassificationLearned"),Z_t.forEach(t),mJo=r(gm," or "),RX=n(gm,"A",{href:!0});var ebt=s(RX);fJo=r(ebt,"PerceiverForImageClassificationFourier"),ebt.forEach(t),gJo=r(gm," or "),PX=n(gm,"A",{href:!0});var obt=s(PX);hJo=r(obt,"PerceiverForImageClassificationConvProcessing"),obt.forEach(t),uJo=r(gm," (Perceiver model)"),gm.forEach(t),pJo=i(Me),fT=n(Me,"LI",{});var Fke=s(fT);dpe=n(Fke,"STRONG",{});var rbt=s(dpe);_Jo=r(rbt,"poolformer"),rbt.forEach(t),bJo=r(Fke," \u2014 "),BX=n(Fke,"A",{href:!0});var tbt=s(BX);vJo=r(tbt,"PoolFormerForImageClassification"),tbt.forEach(t),FJo=r(Fke," (PoolFormer model)"),Fke.forEach(t),TJo=i(Me),gT=n(Me,"LI",{});var Tke=s(gT);cpe=n(Tke,"STRONG",{});var abt=s(cpe);MJo=r(abt,"regnet"),abt.forEach(t),EJo=r(Tke," \u2014 "),IX=n(Tke,"A",{href:!0});var nbt=s(IX);CJo=r(nbt,"RegNetForImageClassification"),nbt.forEach(t),wJo=r(Tke," (RegNet model)"),Tke.forEach(t),AJo=i(Me),hT=n(Me,"LI",{});var Mke=s(hT);mpe=n(Mke,"STRONG",{});var sbt=s(mpe);yJo=r(sbt,"resnet"),sbt.forEach(t),LJo=r(Mke," \u2014 "),NX=n(Mke,"A",{href:!0});var lbt=s(NX);xJo=r(lbt,"ResNetForImageClassification"),lbt.forEach(t),$Jo=r(Mke," (ResNet model)"),Mke.forEach(t),kJo=i(Me),uT=n(Me,"LI",{});var Eke=s(uT);fpe=n(Eke,"STRONG",{});var ibt=s(fpe);SJo=r(ibt,"segformer"),ibt.forEach(t),RJo=r(Eke," \u2014 "),qX=n(Eke,"A",{href:!0});var dbt=s(qX);PJo=r(dbt,"SegformerForImageClassification"),dbt.forEach(t),BJo=r(Eke," (SegFormer model)"),Eke.forEach(t),IJo=i(Me),pT=n(Me,"LI",{});var Cke=s(pT);gpe=n(Cke,"STRONG",{});var cbt=s(gpe);NJo=r(cbt,"swin"),cbt.forEach(t),qJo=r(Cke," \u2014 "),jX=n(Cke,"A",{href:!0});var mbt=s(jX);jJo=r(mbt,"SwinForImageClassification"),mbt.forEach(t),DJo=r(Cke," (Swin model)"),Cke.forEach(t),GJo=i(Me),_T=n(Me,"LI",{});var wke=s(_T);hpe=n(wke,"STRONG",{});var fbt=s(hpe);OJo=r(fbt,"van"),fbt.forEach(t),VJo=r(wke," \u2014 "),DX=n(wke,"A",{href:!0});var gbt=s(DX);XJo=r(gbt,"VanForImageClassification"),gbt.forEach(t),zJo=r(wke," (VAN model)"),wke.forEach(t),WJo=i(Me),bT=n(Me,"LI",{});var Ake=s(bT);upe=n(Ake,"STRONG",{});var hbt=s(upe);QJo=r(hbt,"vit"),hbt.forEach(t),HJo=r(Ake," \u2014 "),GX=n(Ake,"A",{href:!0});var ubt=s(GX);UJo=r(ubt,"ViTForImageClassification"),ubt.forEach(t),JJo=r(Ake," (ViT model)"),Ake.forEach(t),Me.forEach(t),YJo=i(fa),vT=n(fa,"P",{});var yke=s(vT);KJo=r(yke,"The model is set in evaluation mode by default using "),ppe=n(yke,"CODE",{});var pbt=s(ppe);ZJo=r(pbt,"model.eval()"),pbt.forEach(t),eYo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(yke,"CODE",{});var _bt=s(_pe);oYo=r(_bt,"model.train()"),_bt.forEach(t),yke.forEach(t),rYo=i(fa),T(FT.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),Yqe=i(m),ld=n(m,"H2",{class:!0});var oGe=s(ld);TT=n(oGe,"A",{id:!0,class:!0,href:!0});var bbt=s(TT);bpe=n(bbt,"SPAN",{});var vbt=s(bpe);T(d8.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),tYo=i(oGe),vpe=n(oGe,"SPAN",{});var Fbt=s(vpe);aYo=r(Fbt,"AutoModelForVision2Seq"),Fbt.forEach(t),oGe.forEach(t),Kqe=i(m),Do=n(m,"DIV",{class:!0});var el=s(Do);T(c8.$$.fragment,el),nYo=i(el),id=n(el,"P",{});var QZ=s(id);sYo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OX=n(QZ,"A",{href:!0});var Tbt=s(OX);lYo=r(Tbt,"from_pretrained()"),Tbt.forEach(t),iYo=r(QZ," class method or the "),VX=n(QZ,"A",{href:!0});var Mbt=s(VX);dYo=r(Mbt,"from_config()"),Mbt.forEach(t),cYo=r(QZ,` class
method.`),QZ.forEach(t),mYo=i(el),m8=n(el,"P",{});var rGe=s(m8);fYo=r(rGe,"This class cannot be instantiated directly using "),Fpe=n(rGe,"CODE",{});var Ebt=s(Fpe);gYo=r(Ebt,"__init__()"),Ebt.forEach(t),hYo=r(rGe," (throws an error)."),rGe.forEach(t),uYo=i(el),pt=n(el,"DIV",{class:!0});var nA=s(pt);T(f8.$$.fragment,nA),pYo=i(nA),Tpe=n(nA,"P",{});var Cbt=s(Tpe);_Yo=r(Cbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cbt.forEach(t),bYo=i(nA),dd=n(nA,"P",{});var HZ=s(dd);vYo=r(HZ,`Note:
Loading a model from its configuration file does `),Mpe=n(HZ,"STRONG",{});var wbt=s(Mpe);FYo=r(wbt,"not"),wbt.forEach(t),TYo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(HZ,"A",{href:!0});var Abt=s(XX);MYo=r(Abt,"from_pretrained()"),Abt.forEach(t),EYo=r(HZ," to load the model weights."),HZ.forEach(t),CYo=i(nA),T(MT.$$.fragment,nA),nA.forEach(t),wYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(g8.$$.fragment,ga),AYo=i(ga),Epe=n(ga,"P",{});var ybt=s(Epe);yYo=r(ybt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ybt.forEach(t),LYo=i(ga),Da=n(ga,"P",{});var sA=s(Da);xYo=r(sA,"The model class to instantiate is selected based on the "),Cpe=n(sA,"CODE",{});var Lbt=s(Cpe);$Yo=r(Lbt,"model_type"),Lbt.forEach(t),kYo=r(sA,` property of the config object (either
passed as an argument or loaded from `),wpe=n(sA,"CODE",{});var xbt=s(wpe);SYo=r(xbt,"pretrained_model_name_or_path"),xbt.forEach(t),RYo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n(sA,"CODE",{});var $bt=s(Ape);PYo=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),BYo=r(sA,":"),sA.forEach(t),IYo=i(ga),ype=n(ga,"UL",{});var kbt=s(ype);ET=n(kbt,"LI",{});var Lke=s(ET);Lpe=n(Lke,"STRONG",{});var Sbt=s(Lpe);NYo=r(Sbt,"vision-encoder-decoder"),Sbt.forEach(t),qYo=r(Lke," \u2014 "),zX=n(Lke,"A",{href:!0});var Rbt=s(zX);jYo=r(Rbt,"VisionEncoderDecoderModel"),Rbt.forEach(t),DYo=r(Lke," (Vision Encoder decoder model)"),Lke.forEach(t),kbt.forEach(t),GYo=i(ga),CT=n(ga,"P",{});var xke=s(CT);OYo=r(xke,"The model is set in evaluation mode by default using "),xpe=n(xke,"CODE",{});var Pbt=s(xpe);VYo=r(Pbt,"model.eval()"),Pbt.forEach(t),XYo=r(xke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(xke,"CODE",{});var Bbt=s($pe);zYo=r(Bbt,"model.train()"),Bbt.forEach(t),xke.forEach(t),WYo=i(ga),T(wT.$$.fragment,ga),ga.forEach(t),el.forEach(t),Zqe=i(m),cd=n(m,"H2",{class:!0});var tGe=s(cd);AT=n(tGe,"A",{id:!0,class:!0,href:!0});var Ibt=s(AT);kpe=n(Ibt,"SPAN",{});var Nbt=s(kpe);T(h8.$$.fragment,Nbt),Nbt.forEach(t),Ibt.forEach(t),QYo=i(tGe),Spe=n(tGe,"SPAN",{});var qbt=s(Spe);HYo=r(qbt,"AutoModelForAudioClassification"),qbt.forEach(t),tGe.forEach(t),eje=i(m),Go=n(m,"DIV",{class:!0});var ol=s(Go);T(u8.$$.fragment,ol),UYo=i(ol),md=n(ol,"P",{});var UZ=s(md);JYo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=n(UZ,"A",{href:!0});var jbt=s(WX);YYo=r(jbt,"from_pretrained()"),jbt.forEach(t),KYo=r(UZ," class method or the "),QX=n(UZ,"A",{href:!0});var Dbt=s(QX);ZYo=r(Dbt,"from_config()"),Dbt.forEach(t),eKo=r(UZ,` class
method.`),UZ.forEach(t),oKo=i(ol),p8=n(ol,"P",{});var aGe=s(p8);rKo=r(aGe,"This class cannot be instantiated directly using "),Rpe=n(aGe,"CODE",{});var Gbt=s(Rpe);tKo=r(Gbt,"__init__()"),Gbt.forEach(t),aKo=r(aGe," (throws an error)."),aGe.forEach(t),nKo=i(ol),_t=n(ol,"DIV",{class:!0});var lA=s(_t);T(_8.$$.fragment,lA),sKo=i(lA),Ppe=n(lA,"P",{});var Obt=s(Ppe);lKo=r(Obt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Obt.forEach(t),iKo=i(lA),fd=n(lA,"P",{});var JZ=s(fd);dKo=r(JZ,`Note:
Loading a model from its configuration file does `),Bpe=n(JZ,"STRONG",{});var Vbt=s(Bpe);cKo=r(Vbt,"not"),Vbt.forEach(t),mKo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(JZ,"A",{href:!0});var Xbt=s(HX);fKo=r(Xbt,"from_pretrained()"),Xbt.forEach(t),gKo=r(JZ," to load the model weights."),JZ.forEach(t),hKo=i(lA),T(yT.$$.fragment,lA),lA.forEach(t),uKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(b8.$$.fragment,ha),pKo=i(ha),Ipe=n(ha,"P",{});var zbt=s(Ipe);_Ko=r(zbt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zbt.forEach(t),bKo=i(ha),Ga=n(ha,"P",{});var iA=s(Ga);vKo=r(iA,"The model class to instantiate is selected based on the "),Npe=n(iA,"CODE",{});var Wbt=s(Npe);FKo=r(Wbt,"model_type"),Wbt.forEach(t),TKo=r(iA,` property of the config object (either
passed as an argument or loaded from `),qpe=n(iA,"CODE",{});var Qbt=s(qpe);MKo=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),EKo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(iA,"CODE",{});var Hbt=s(jpe);CKo=r(Hbt,"pretrained_model_name_or_path"),Hbt.forEach(t),wKo=r(iA,":"),iA.forEach(t),AKo=i(ha),Se=n(ha,"UL",{});var Ve=s(Se);LT=n(Ve,"LI",{});var $ke=s(LT);Dpe=n($ke,"STRONG",{});var Ubt=s(Dpe);yKo=r(Ubt,"data2vec-audio"),Ubt.forEach(t),LKo=r($ke," \u2014 "),UX=n($ke,"A",{href:!0});var Jbt=s(UX);xKo=r(Jbt,"Data2VecAudioForSequenceClassification"),Jbt.forEach(t),$Ko=r($ke," (Data2VecAudio model)"),$ke.forEach(t),kKo=i(Ve),xT=n(Ve,"LI",{});var kke=s(xT);Gpe=n(kke,"STRONG",{});var Ybt=s(Gpe);SKo=r(Ybt,"hubert"),Ybt.forEach(t),RKo=r(kke," \u2014 "),JX=n(kke,"A",{href:!0});var Kbt=s(JX);PKo=r(Kbt,"HubertForSequenceClassification"),Kbt.forEach(t),BKo=r(kke," (Hubert model)"),kke.forEach(t),IKo=i(Ve),$T=n(Ve,"LI",{});var Ske=s($T);Ope=n(Ske,"STRONG",{});var Zbt=s(Ope);NKo=r(Zbt,"sew"),Zbt.forEach(t),qKo=r(Ske," \u2014 "),YX=n(Ske,"A",{href:!0});var e2t=s(YX);jKo=r(e2t,"SEWForSequenceClassification"),e2t.forEach(t),DKo=r(Ske," (SEW model)"),Ske.forEach(t),GKo=i(Ve),kT=n(Ve,"LI",{});var Rke=s(kT);Vpe=n(Rke,"STRONG",{});var o2t=s(Vpe);OKo=r(o2t,"sew-d"),o2t.forEach(t),VKo=r(Rke," \u2014 "),KX=n(Rke,"A",{href:!0});var r2t=s(KX);XKo=r(r2t,"SEWDForSequenceClassification"),r2t.forEach(t),zKo=r(Rke," (SEW-D model)"),Rke.forEach(t),WKo=i(Ve),ST=n(Ve,"LI",{});var Pke=s(ST);Xpe=n(Pke,"STRONG",{});var t2t=s(Xpe);QKo=r(t2t,"unispeech"),t2t.forEach(t),HKo=r(Pke," \u2014 "),ZX=n(Pke,"A",{href:!0});var a2t=s(ZX);UKo=r(a2t,"UniSpeechForSequenceClassification"),a2t.forEach(t),JKo=r(Pke," (UniSpeech model)"),Pke.forEach(t),YKo=i(Ve),RT=n(Ve,"LI",{});var Bke=s(RT);zpe=n(Bke,"STRONG",{});var n2t=s(zpe);KKo=r(n2t,"unispeech-sat"),n2t.forEach(t),ZKo=r(Bke," \u2014 "),ez=n(Bke,"A",{href:!0});var s2t=s(ez);eZo=r(s2t,"UniSpeechSatForSequenceClassification"),s2t.forEach(t),oZo=r(Bke," (UniSpeechSat model)"),Bke.forEach(t),rZo=i(Ve),PT=n(Ve,"LI",{});var Ike=s(PT);Wpe=n(Ike,"STRONG",{});var l2t=s(Wpe);tZo=r(l2t,"wav2vec2"),l2t.forEach(t),aZo=r(Ike," \u2014 "),oz=n(Ike,"A",{href:!0});var i2t=s(oz);nZo=r(i2t,"Wav2Vec2ForSequenceClassification"),i2t.forEach(t),sZo=r(Ike," (Wav2Vec2 model)"),Ike.forEach(t),lZo=i(Ve),BT=n(Ve,"LI",{});var Nke=s(BT);Qpe=n(Nke,"STRONG",{});var d2t=s(Qpe);iZo=r(d2t,"wav2vec2-conformer"),d2t.forEach(t),dZo=r(Nke," \u2014 "),rz=n(Nke,"A",{href:!0});var c2t=s(rz);cZo=r(c2t,"Wav2Vec2ConformerForSequenceClassification"),c2t.forEach(t),mZo=r(Nke," (Wav2Vec2-Conformer model)"),Nke.forEach(t),fZo=i(Ve),IT=n(Ve,"LI",{});var qke=s(IT);Hpe=n(qke,"STRONG",{});var m2t=s(Hpe);gZo=r(m2t,"wavlm"),m2t.forEach(t),hZo=r(qke," \u2014 "),tz=n(qke,"A",{href:!0});var f2t=s(tz);uZo=r(f2t,"WavLMForSequenceClassification"),f2t.forEach(t),pZo=r(qke," (WavLM model)"),qke.forEach(t),Ve.forEach(t),_Zo=i(ha),NT=n(ha,"P",{});var jke=s(NT);bZo=r(jke,"The model is set in evaluation mode by default using "),Upe=n(jke,"CODE",{});var g2t=s(Upe);vZo=r(g2t,"model.eval()"),g2t.forEach(t),FZo=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(jke,"CODE",{});var h2t=s(Jpe);TZo=r(h2t,"model.train()"),h2t.forEach(t),jke.forEach(t),MZo=i(ha),T(qT.$$.fragment,ha),ha.forEach(t),ol.forEach(t),oje=i(m),gd=n(m,"H2",{class:!0});var nGe=s(gd);jT=n(nGe,"A",{id:!0,class:!0,href:!0});var u2t=s(jT);Ype=n(u2t,"SPAN",{});var p2t=s(Ype);T(v8.$$.fragment,p2t),p2t.forEach(t),u2t.forEach(t),EZo=i(nGe),Kpe=n(nGe,"SPAN",{});var _2t=s(Kpe);CZo=r(_2t,"AutoModelForAudioFrameClassification"),_2t.forEach(t),nGe.forEach(t),rje=i(m),Oo=n(m,"DIV",{class:!0});var rl=s(Oo);T(F8.$$.fragment,rl),wZo=i(rl),hd=n(rl,"P",{});var YZ=s(hd);AZo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=n(YZ,"A",{href:!0});var b2t=s(az);yZo=r(b2t,"from_pretrained()"),b2t.forEach(t),LZo=r(YZ," class method or the "),nz=n(YZ,"A",{href:!0});var v2t=s(nz);xZo=r(v2t,"from_config()"),v2t.forEach(t),$Zo=r(YZ,` class
method.`),YZ.forEach(t),kZo=i(rl),T8=n(rl,"P",{});var sGe=s(T8);SZo=r(sGe,"This class cannot be instantiated directly using "),Zpe=n(sGe,"CODE",{});var F2t=s(Zpe);RZo=r(F2t,"__init__()"),F2t.forEach(t),PZo=r(sGe," (throws an error)."),sGe.forEach(t),BZo=i(rl),bt=n(rl,"DIV",{class:!0});var dA=s(bt);T(M8.$$.fragment,dA),IZo=i(dA),e_e=n(dA,"P",{});var T2t=s(e_e);NZo=r(T2t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),T2t.forEach(t),qZo=i(dA),ud=n(dA,"P",{});var KZ=s(ud);jZo=r(KZ,`Note:
Loading a model from its configuration file does `),o_e=n(KZ,"STRONG",{});var M2t=s(o_e);DZo=r(M2t,"not"),M2t.forEach(t),GZo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(KZ,"A",{href:!0});var E2t=s(sz);OZo=r(E2t,"from_pretrained()"),E2t.forEach(t),VZo=r(KZ," to load the model weights."),KZ.forEach(t),XZo=i(dA),T(DT.$$.fragment,dA),dA.forEach(t),zZo=i(rl),mo=n(rl,"DIV",{class:!0});var ua=s(mo);T(E8.$$.fragment,ua),WZo=i(ua),r_e=n(ua,"P",{});var C2t=s(r_e);QZo=r(C2t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),C2t.forEach(t),HZo=i(ua),Oa=n(ua,"P",{});var cA=s(Oa);UZo=r(cA,"The model class to instantiate is selected based on the "),t_e=n(cA,"CODE",{});var w2t=s(t_e);JZo=r(w2t,"model_type"),w2t.forEach(t),YZo=r(cA,` property of the config object (either
passed as an argument or loaded from `),a_e=n(cA,"CODE",{});var A2t=s(a_e);KZo=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),ZZo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(cA,"CODE",{});var y2t=s(n_e);eer=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),oer=r(cA,":"),cA.forEach(t),rer=i(ua),Kr=n(ua,"UL",{});var tl=s(Kr);GT=n(tl,"LI",{});var Dke=s(GT);s_e=n(Dke,"STRONG",{});var L2t=s(s_e);ter=r(L2t,"data2vec-audio"),L2t.forEach(t),aer=r(Dke," \u2014 "),lz=n(Dke,"A",{href:!0});var x2t=s(lz);ner=r(x2t,"Data2VecAudioForAudioFrameClassification"),x2t.forEach(t),ser=r(Dke," (Data2VecAudio model)"),Dke.forEach(t),ler=i(tl),OT=n(tl,"LI",{});var Gke=s(OT);l_e=n(Gke,"STRONG",{});var $2t=s(l_e);ier=r($2t,"unispeech-sat"),$2t.forEach(t),der=r(Gke," \u2014 "),iz=n(Gke,"A",{href:!0});var k2t=s(iz);cer=r(k2t,"UniSpeechSatForAudioFrameClassification"),k2t.forEach(t),mer=r(Gke," (UniSpeechSat model)"),Gke.forEach(t),fer=i(tl),VT=n(tl,"LI",{});var Oke=s(VT);i_e=n(Oke,"STRONG",{});var S2t=s(i_e);ger=r(S2t,"wav2vec2"),S2t.forEach(t),her=r(Oke," \u2014 "),dz=n(Oke,"A",{href:!0});var R2t=s(dz);uer=r(R2t,"Wav2Vec2ForAudioFrameClassification"),R2t.forEach(t),per=r(Oke," (Wav2Vec2 model)"),Oke.forEach(t),_er=i(tl),XT=n(tl,"LI",{});var Vke=s(XT);d_e=n(Vke,"STRONG",{});var P2t=s(d_e);ber=r(P2t,"wav2vec2-conformer"),P2t.forEach(t),ver=r(Vke," \u2014 "),cz=n(Vke,"A",{href:!0});var B2t=s(cz);Fer=r(B2t,"Wav2Vec2ConformerForAudioFrameClassification"),B2t.forEach(t),Ter=r(Vke," (Wav2Vec2-Conformer model)"),Vke.forEach(t),Mer=i(tl),zT=n(tl,"LI",{});var Xke=s(zT);c_e=n(Xke,"STRONG",{});var I2t=s(c_e);Eer=r(I2t,"wavlm"),I2t.forEach(t),Cer=r(Xke," \u2014 "),mz=n(Xke,"A",{href:!0});var N2t=s(mz);wer=r(N2t,"WavLMForAudioFrameClassification"),N2t.forEach(t),Aer=r(Xke," (WavLM model)"),Xke.forEach(t),tl.forEach(t),yer=i(ua),WT=n(ua,"P",{});var zke=s(WT);Ler=r(zke,"The model is set in evaluation mode by default using "),m_e=n(zke,"CODE",{});var q2t=s(m_e);xer=r(q2t,"model.eval()"),q2t.forEach(t),$er=r(zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(zke,"CODE",{});var j2t=s(f_e);ker=r(j2t,"model.train()"),j2t.forEach(t),zke.forEach(t),Ser=i(ua),T(QT.$$.fragment,ua),ua.forEach(t),rl.forEach(t),tje=i(m),pd=n(m,"H2",{class:!0});var lGe=s(pd);HT=n(lGe,"A",{id:!0,class:!0,href:!0});var D2t=s(HT);g_e=n(D2t,"SPAN",{});var G2t=s(g_e);T(C8.$$.fragment,G2t),G2t.forEach(t),D2t.forEach(t),Rer=i(lGe),h_e=n(lGe,"SPAN",{});var O2t=s(h_e);Per=r(O2t,"AutoModelForCTC"),O2t.forEach(t),lGe.forEach(t),aje=i(m),Vo=n(m,"DIV",{class:!0});var al=s(Vo);T(w8.$$.fragment,al),Ber=i(al),_d=n(al,"P",{});var ZZ=s(_d);Ier=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fz=n(ZZ,"A",{href:!0});var V2t=s(fz);Ner=r(V2t,"from_pretrained()"),V2t.forEach(t),qer=r(ZZ," class method or the "),gz=n(ZZ,"A",{href:!0});var X2t=s(gz);jer=r(X2t,"from_config()"),X2t.forEach(t),Der=r(ZZ,` class
method.`),ZZ.forEach(t),Ger=i(al),A8=n(al,"P",{});var iGe=s(A8);Oer=r(iGe,"This class cannot be instantiated directly using "),u_e=n(iGe,"CODE",{});var z2t=s(u_e);Ver=r(z2t,"__init__()"),z2t.forEach(t),Xer=r(iGe," (throws an error)."),iGe.forEach(t),zer=i(al),vt=n(al,"DIV",{class:!0});var mA=s(vt);T(y8.$$.fragment,mA),Wer=i(mA),p_e=n(mA,"P",{});var W2t=s(p_e);Qer=r(W2t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),W2t.forEach(t),Her=i(mA),bd=n(mA,"P",{});var eee=s(bd);Uer=r(eee,`Note:
Loading a model from its configuration file does `),__e=n(eee,"STRONG",{});var Q2t=s(__e);Jer=r(Q2t,"not"),Q2t.forEach(t),Yer=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(eee,"A",{href:!0});var H2t=s(hz);Ker=r(H2t,"from_pretrained()"),H2t.forEach(t),Zer=r(eee," to load the model weights."),eee.forEach(t),eor=i(mA),T(UT.$$.fragment,mA),mA.forEach(t),oor=i(al),fo=n(al,"DIV",{class:!0});var pa=s(fo);T(L8.$$.fragment,pa),ror=i(pa),b_e=n(pa,"P",{});var U2t=s(b_e);tor=r(U2t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),U2t.forEach(t),aor=i(pa),Va=n(pa,"P",{});var fA=s(Va);nor=r(fA,"The model class to instantiate is selected based on the "),v_e=n(fA,"CODE",{});var J2t=s(v_e);sor=r(J2t,"model_type"),J2t.forEach(t),lor=r(fA,` property of the config object (either
passed as an argument or loaded from `),F_e=n(fA,"CODE",{});var Y2t=s(F_e);ior=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),dor=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(fA,"CODE",{});var K2t=s(T_e);cor=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),mor=r(fA,":"),fA.forEach(t),gor=i(pa),Re=n(pa,"UL",{});var Xe=s(Re);JT=n(Xe,"LI",{});var Wke=s(JT);M_e=n(Wke,"STRONG",{});var Z2t=s(M_e);hor=r(Z2t,"data2vec-audio"),Z2t.forEach(t),uor=r(Wke," \u2014 "),uz=n(Wke,"A",{href:!0});var evt=s(uz);por=r(evt,"Data2VecAudioForCTC"),evt.forEach(t),_or=r(Wke," (Data2VecAudio model)"),Wke.forEach(t),bor=i(Xe),YT=n(Xe,"LI",{});var Qke=s(YT);E_e=n(Qke,"STRONG",{});var ovt=s(E_e);vor=r(ovt,"hubert"),ovt.forEach(t),For=r(Qke," \u2014 "),pz=n(Qke,"A",{href:!0});var rvt=s(pz);Tor=r(rvt,"HubertForCTC"),rvt.forEach(t),Mor=r(Qke," (Hubert model)"),Qke.forEach(t),Eor=i(Xe),KT=n(Xe,"LI",{});var Hke=s(KT);C_e=n(Hke,"STRONG",{});var tvt=s(C_e);Cor=r(tvt,"sew"),tvt.forEach(t),wor=r(Hke," \u2014 "),_z=n(Hke,"A",{href:!0});var avt=s(_z);Aor=r(avt,"SEWForCTC"),avt.forEach(t),yor=r(Hke," (SEW model)"),Hke.forEach(t),Lor=i(Xe),ZT=n(Xe,"LI",{});var Uke=s(ZT);w_e=n(Uke,"STRONG",{});var nvt=s(w_e);xor=r(nvt,"sew-d"),nvt.forEach(t),$or=r(Uke," \u2014 "),bz=n(Uke,"A",{href:!0});var svt=s(bz);kor=r(svt,"SEWDForCTC"),svt.forEach(t),Sor=r(Uke," (SEW-D model)"),Uke.forEach(t),Ror=i(Xe),eM=n(Xe,"LI",{});var Jke=s(eM);A_e=n(Jke,"STRONG",{});var lvt=s(A_e);Por=r(lvt,"unispeech"),lvt.forEach(t),Bor=r(Jke," \u2014 "),vz=n(Jke,"A",{href:!0});var ivt=s(vz);Ior=r(ivt,"UniSpeechForCTC"),ivt.forEach(t),Nor=r(Jke," (UniSpeech model)"),Jke.forEach(t),qor=i(Xe),oM=n(Xe,"LI",{});var Yke=s(oM);y_e=n(Yke,"STRONG",{});var dvt=s(y_e);jor=r(dvt,"unispeech-sat"),dvt.forEach(t),Dor=r(Yke," \u2014 "),Fz=n(Yke,"A",{href:!0});var cvt=s(Fz);Gor=r(cvt,"UniSpeechSatForCTC"),cvt.forEach(t),Oor=r(Yke," (UniSpeechSat model)"),Yke.forEach(t),Vor=i(Xe),rM=n(Xe,"LI",{});var Kke=s(rM);L_e=n(Kke,"STRONG",{});var mvt=s(L_e);Xor=r(mvt,"wav2vec2"),mvt.forEach(t),zor=r(Kke," \u2014 "),Tz=n(Kke,"A",{href:!0});var fvt=s(Tz);Wor=r(fvt,"Wav2Vec2ForCTC"),fvt.forEach(t),Qor=r(Kke," (Wav2Vec2 model)"),Kke.forEach(t),Hor=i(Xe),tM=n(Xe,"LI",{});var Zke=s(tM);x_e=n(Zke,"STRONG",{});var gvt=s(x_e);Uor=r(gvt,"wav2vec2-conformer"),gvt.forEach(t),Jor=r(Zke," \u2014 "),Mz=n(Zke,"A",{href:!0});var hvt=s(Mz);Yor=r(hvt,"Wav2Vec2ConformerForCTC"),hvt.forEach(t),Kor=r(Zke," (Wav2Vec2-Conformer model)"),Zke.forEach(t),Zor=i(Xe),aM=n(Xe,"LI",{});var eSe=s(aM);$_e=n(eSe,"STRONG",{});var uvt=s($_e);err=r(uvt,"wavlm"),uvt.forEach(t),orr=r(eSe," \u2014 "),Ez=n(eSe,"A",{href:!0});var pvt=s(Ez);rrr=r(pvt,"WavLMForCTC"),pvt.forEach(t),trr=r(eSe," (WavLM model)"),eSe.forEach(t),Xe.forEach(t),arr=i(pa),nM=n(pa,"P",{});var oSe=s(nM);nrr=r(oSe,"The model is set in evaluation mode by default using "),k_e=n(oSe,"CODE",{});var _vt=s(k_e);srr=r(_vt,"model.eval()"),_vt.forEach(t),lrr=r(oSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(oSe,"CODE",{});var bvt=s(S_e);irr=r(bvt,"model.train()"),bvt.forEach(t),oSe.forEach(t),drr=i(pa),T(sM.$$.fragment,pa),pa.forEach(t),al.forEach(t),nje=i(m),vd=n(m,"H2",{class:!0});var dGe=s(vd);lM=n(dGe,"A",{id:!0,class:!0,href:!0});var vvt=s(lM);R_e=n(vvt,"SPAN",{});var Fvt=s(R_e);T(x8.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),crr=i(dGe),P_e=n(dGe,"SPAN",{});var Tvt=s(P_e);mrr=r(Tvt,"AutoModelForSpeechSeq2Seq"),Tvt.forEach(t),dGe.forEach(t),sje=i(m),Xo=n(m,"DIV",{class:!0});var nl=s(Xo);T($8.$$.fragment,nl),frr=i(nl),Fd=n(nl,"P",{});var oee=s(Fd);grr=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=n(oee,"A",{href:!0});var Mvt=s(Cz);hrr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),urr=r(oee," class method or the "),wz=n(oee,"A",{href:!0});var Evt=s(wz);prr=r(Evt,"from_config()"),Evt.forEach(t),_rr=r(oee,` class
method.`),oee.forEach(t),brr=i(nl),k8=n(nl,"P",{});var cGe=s(k8);vrr=r(cGe,"This class cannot be instantiated directly using "),B_e=n(cGe,"CODE",{});var Cvt=s(B_e);Frr=r(Cvt,"__init__()"),Cvt.forEach(t),Trr=r(cGe," (throws an error)."),cGe.forEach(t),Mrr=i(nl),Ft=n(nl,"DIV",{class:!0});var gA=s(Ft);T(S8.$$.fragment,gA),Err=i(gA),I_e=n(gA,"P",{});var wvt=s(I_e);Crr=r(wvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),wvt.forEach(t),wrr=i(gA),Td=n(gA,"P",{});var ree=s(Td);Arr=r(ree,`Note:
Loading a model from its configuration file does `),N_e=n(ree,"STRONG",{});var Avt=s(N_e);yrr=r(Avt,"not"),Avt.forEach(t),Lrr=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(ree,"A",{href:!0});var yvt=s(Az);xrr=r(yvt,"from_pretrained()"),yvt.forEach(t),$rr=r(ree," to load the model weights."),ree.forEach(t),krr=i(gA),T(iM.$$.fragment,gA),gA.forEach(t),Srr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(R8.$$.fragment,_a),Rrr=i(_a),q_e=n(_a,"P",{});var Lvt=s(q_e);Prr=r(Lvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Lvt.forEach(t),Brr=i(_a),Xa=n(_a,"P",{});var hA=s(Xa);Irr=r(hA,"The model class to instantiate is selected based on the "),j_e=n(hA,"CODE",{});var xvt=s(j_e);Nrr=r(xvt,"model_type"),xvt.forEach(t),qrr=r(hA,` property of the config object (either
passed as an argument or loaded from `),D_e=n(hA,"CODE",{});var $vt=s(D_e);jrr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),Drr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(hA,"CODE",{});var kvt=s(G_e);Grr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),Orr=r(hA,":"),hA.forEach(t),Vrr=i(_a),P8=n(_a,"UL",{});var mGe=s(P8);dM=n(mGe,"LI",{});var rSe=s(dM);O_e=n(rSe,"STRONG",{});var Svt=s(O_e);Xrr=r(Svt,"speech-encoder-decoder"),Svt.forEach(t),zrr=r(rSe," \u2014 "),yz=n(rSe,"A",{href:!0});var Rvt=s(yz);Wrr=r(Rvt,"SpeechEncoderDecoderModel"),Rvt.forEach(t),Qrr=r(rSe," (Speech Encoder decoder model)"),rSe.forEach(t),Hrr=i(mGe),cM=n(mGe,"LI",{});var tSe=s(cM);V_e=n(tSe,"STRONG",{});var Pvt=s(V_e);Urr=r(Pvt,"speech_to_text"),Pvt.forEach(t),Jrr=r(tSe," \u2014 "),Lz=n(tSe,"A",{href:!0});var Bvt=s(Lz);Yrr=r(Bvt,"Speech2TextForConditionalGeneration"),Bvt.forEach(t),Krr=r(tSe," (Speech2Text model)"),tSe.forEach(t),mGe.forEach(t),Zrr=i(_a),mM=n(_a,"P",{});var aSe=s(mM);etr=r(aSe,"The model is set in evaluation mode by default using "),X_e=n(aSe,"CODE",{});var Ivt=s(X_e);otr=r(Ivt,"model.eval()"),Ivt.forEach(t),rtr=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z_e=n(aSe,"CODE",{});var Nvt=s(z_e);ttr=r(Nvt,"model.train()"),Nvt.forEach(t),aSe.forEach(t),atr=i(_a),T(fM.$$.fragment,_a),_a.forEach(t),nl.forEach(t),lje=i(m),Md=n(m,"H2",{class:!0});var fGe=s(Md);gM=n(fGe,"A",{id:!0,class:!0,href:!0});var qvt=s(gM);W_e=n(qvt,"SPAN",{});var jvt=s(W_e);T(B8.$$.fragment,jvt),jvt.forEach(t),qvt.forEach(t),ntr=i(fGe),Q_e=n(fGe,"SPAN",{});var Dvt=s(Q_e);str=r(Dvt,"AutoModelForAudioXVector"),Dvt.forEach(t),fGe.forEach(t),ije=i(m),zo=n(m,"DIV",{class:!0});var sl=s(zo);T(I8.$$.fragment,sl),ltr=i(sl),Ed=n(sl,"P",{});var tee=s(Ed);itr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=n(tee,"A",{href:!0});var Gvt=s(xz);dtr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),ctr=r(tee," class method or the "),$z=n(tee,"A",{href:!0});var Ovt=s($z);mtr=r(Ovt,"from_config()"),Ovt.forEach(t),ftr=r(tee,` class
method.`),tee.forEach(t),gtr=i(sl),N8=n(sl,"P",{});var gGe=s(N8);htr=r(gGe,"This class cannot be instantiated directly using "),H_e=n(gGe,"CODE",{});var Vvt=s(H_e);utr=r(Vvt,"__init__()"),Vvt.forEach(t),ptr=r(gGe," (throws an error)."),gGe.forEach(t),_tr=i(sl),Tt=n(sl,"DIV",{class:!0});var uA=s(Tt);T(q8.$$.fragment,uA),btr=i(uA),U_e=n(uA,"P",{});var Xvt=s(U_e);vtr=r(Xvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Xvt.forEach(t),Ftr=i(uA),Cd=n(uA,"P",{});var aee=s(Cd);Ttr=r(aee,`Note:
Loading a model from its configuration file does `),J_e=n(aee,"STRONG",{});var zvt=s(J_e);Mtr=r(zvt,"not"),zvt.forEach(t),Etr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(aee,"A",{href:!0});var Wvt=s(kz);Ctr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),wtr=r(aee," to load the model weights."),aee.forEach(t),Atr=i(uA),T(hM.$$.fragment,uA),uA.forEach(t),ytr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(j8.$$.fragment,ba),Ltr=i(ba),Y_e=n(ba,"P",{});var Qvt=s(Y_e);xtr=r(Qvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Qvt.forEach(t),$tr=i(ba),za=n(ba,"P",{});var pA=s(za);ktr=r(pA,"The model class to instantiate is selected based on the "),K_e=n(pA,"CODE",{});var Hvt=s(K_e);Str=r(Hvt,"model_type"),Hvt.forEach(t),Rtr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(pA,"CODE",{});var Uvt=s(Z_e);Ptr=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),Btr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(pA,"CODE",{});var Jvt=s(ebe);Itr=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),Ntr=r(pA,":"),pA.forEach(t),qtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);uM=n(ll,"LI",{});var nSe=s(uM);obe=n(nSe,"STRONG",{});var Yvt=s(obe);jtr=r(Yvt,"data2vec-audio"),Yvt.forEach(t),Dtr=r(nSe," \u2014 "),Sz=n(nSe,"A",{href:!0});var Kvt=s(Sz);Gtr=r(Kvt,"Data2VecAudioForXVector"),Kvt.forEach(t),Otr=r(nSe," (Data2VecAudio model)"),nSe.forEach(t),Vtr=i(ll),pM=n(ll,"LI",{});var sSe=s(pM);rbe=n(sSe,"STRONG",{});var Zvt=s(rbe);Xtr=r(Zvt,"unispeech-sat"),Zvt.forEach(t),ztr=r(sSe," \u2014 "),Rz=n(sSe,"A",{href:!0});var eFt=s(Rz);Wtr=r(eFt,"UniSpeechSatForXVector"),eFt.forEach(t),Qtr=r(sSe," (UniSpeechSat model)"),sSe.forEach(t),Htr=i(ll),_M=n(ll,"LI",{});var lSe=s(_M);tbe=n(lSe,"STRONG",{});var oFt=s(tbe);Utr=r(oFt,"wav2vec2"),oFt.forEach(t),Jtr=r(lSe," \u2014 "),Pz=n(lSe,"A",{href:!0});var rFt=s(Pz);Ytr=r(rFt,"Wav2Vec2ForXVector"),rFt.forEach(t),Ktr=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),Ztr=i(ll),bM=n(ll,"LI",{});var iSe=s(bM);abe=n(iSe,"STRONG",{});var tFt=s(abe);ear=r(tFt,"wav2vec2-conformer"),tFt.forEach(t),oar=r(iSe," \u2014 "),Bz=n(iSe,"A",{href:!0});var aFt=s(Bz);rar=r(aFt,"Wav2Vec2ConformerForXVector"),aFt.forEach(t),tar=r(iSe," (Wav2Vec2-Conformer model)"),iSe.forEach(t),aar=i(ll),vM=n(ll,"LI",{});var dSe=s(vM);nbe=n(dSe,"STRONG",{});var nFt=s(nbe);nar=r(nFt,"wavlm"),nFt.forEach(t),sar=r(dSe," \u2014 "),Iz=n(dSe,"A",{href:!0});var sFt=s(Iz);lar=r(sFt,"WavLMForXVector"),sFt.forEach(t),iar=r(dSe," (WavLM model)"),dSe.forEach(t),ll.forEach(t),dar=i(ba),FM=n(ba,"P",{});var cSe=s(FM);car=r(cSe,"The model is set in evaluation mode by default using "),sbe=n(cSe,"CODE",{});var lFt=s(sbe);mar=r(lFt,"model.eval()"),lFt.forEach(t),far=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lbe=n(cSe,"CODE",{});var iFt=s(lbe);gar=r(iFt,"model.train()"),iFt.forEach(t),cSe.forEach(t),har=i(ba),T(TM.$$.fragment,ba),ba.forEach(t),sl.forEach(t),dje=i(m),wd=n(m,"H2",{class:!0});var hGe=s(wd);MM=n(hGe,"A",{id:!0,class:!0,href:!0});var dFt=s(MM);ibe=n(dFt,"SPAN",{});var cFt=s(ibe);T(D8.$$.fragment,cFt),cFt.forEach(t),dFt.forEach(t),uar=i(hGe),dbe=n(hGe,"SPAN",{});var mFt=s(dbe);par=r(mFt,"AutoModelForMaskedImageModeling"),mFt.forEach(t),hGe.forEach(t),cje=i(m),Wo=n(m,"DIV",{class:!0});var il=s(Wo);T(G8.$$.fragment,il),_ar=i(il),Ad=n(il,"P",{});var nee=s(Ad);bar=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Nz=n(nee,"A",{href:!0});var fFt=s(Nz);Far=r(fFt,"from_pretrained()"),fFt.forEach(t),Tar=r(nee," class method or the "),qz=n(nee,"A",{href:!0});var gFt=s(qz);Mar=r(gFt,"from_config()"),gFt.forEach(t),Ear=r(nee,` class
method.`),nee.forEach(t),Car=i(il),O8=n(il,"P",{});var uGe=s(O8);war=r(uGe,"This class cannot be instantiated directly using "),cbe=n(uGe,"CODE",{});var hFt=s(cbe);Aar=r(hFt,"__init__()"),hFt.forEach(t),yar=r(uGe," (throws an error)."),uGe.forEach(t),Lar=i(il),Mt=n(il,"DIV",{class:!0});var _A=s(Mt);T(V8.$$.fragment,_A),xar=i(_A),mbe=n(_A,"P",{});var uFt=s(mbe);$ar=r(uFt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),uFt.forEach(t),kar=i(_A),yd=n(_A,"P",{});var see=s(yd);Sar=r(see,`Note:
Loading a model from its configuration file does `),fbe=n(see,"STRONG",{});var pFt=s(fbe);Rar=r(pFt,"not"),pFt.forEach(t),Par=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(see,"A",{href:!0});var _Ft=s(jz);Bar=r(_Ft,"from_pretrained()"),_Ft.forEach(t),Iar=r(see," to load the model weights."),see.forEach(t),Nar=i(_A),T(EM.$$.fragment,_A),_A.forEach(t),qar=i(il),uo=n(il,"DIV",{class:!0});var va=s(uo);T(X8.$$.fragment,va),jar=i(va),gbe=n(va,"P",{});var bFt=s(gbe);Dar=r(bFt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),bFt.forEach(t),Gar=i(va),Wa=n(va,"P",{});var bA=s(Wa);Oar=r(bA,"The model class to instantiate is selected based on the "),hbe=n(bA,"CODE",{});var vFt=s(hbe);Var=r(vFt,"model_type"),vFt.forEach(t),Xar=r(bA,` property of the config object (either
passed as an argument or loaded from `),ube=n(bA,"CODE",{});var FFt=s(ube);zar=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),War=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(bA,"CODE",{});var TFt=s(pbe);Qar=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),Har=r(bA,":"),bA.forEach(t),Uar=i(va),Ld=n(va,"UL",{});var lee=s(Ld);CM=n(lee,"LI",{});var mSe=s(CM);_be=n(mSe,"STRONG",{});var MFt=s(_be);Jar=r(MFt,"deit"),MFt.forEach(t),Yar=r(mSe," \u2014 "),Dz=n(mSe,"A",{href:!0});var EFt=s(Dz);Kar=r(EFt,"DeiTForMaskedImageModeling"),EFt.forEach(t),Zar=r(mSe," (DeiT model)"),mSe.forEach(t),enr=i(lee),wM=n(lee,"LI",{});var fSe=s(wM);bbe=n(fSe,"STRONG",{});var CFt=s(bbe);onr=r(CFt,"swin"),CFt.forEach(t),rnr=r(fSe," \u2014 "),Gz=n(fSe,"A",{href:!0});var wFt=s(Gz);tnr=r(wFt,"SwinForMaskedImageModeling"),wFt.forEach(t),anr=r(fSe," (Swin model)"),fSe.forEach(t),nnr=i(lee),AM=n(lee,"LI",{});var gSe=s(AM);vbe=n(gSe,"STRONG",{});var AFt=s(vbe);snr=r(AFt,"vit"),AFt.forEach(t),lnr=r(gSe," \u2014 "),Oz=n(gSe,"A",{href:!0});var yFt=s(Oz);inr=r(yFt,"ViTForMaskedImageModeling"),yFt.forEach(t),dnr=r(gSe," (ViT model)"),gSe.forEach(t),lee.forEach(t),cnr=i(va),yM=n(va,"P",{});var hSe=s(yM);mnr=r(hSe,"The model is set in evaluation mode by default using "),Fbe=n(hSe,"CODE",{});var LFt=s(Fbe);fnr=r(LFt,"model.eval()"),LFt.forEach(t),gnr=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=n(hSe,"CODE",{});var xFt=s(Tbe);hnr=r(xFt,"model.train()"),xFt.forEach(t),hSe.forEach(t),unr=i(va),T(LM.$$.fragment,va),va.forEach(t),il.forEach(t),mje=i(m),xd=n(m,"H2",{class:!0});var pGe=s(xd);xM=n(pGe,"A",{id:!0,class:!0,href:!0});var $Ft=s(xM);Mbe=n($Ft,"SPAN",{});var kFt=s(Mbe);T(z8.$$.fragment,kFt),kFt.forEach(t),$Ft.forEach(t),pnr=i(pGe),Ebe=n(pGe,"SPAN",{});var SFt=s(Ebe);_nr=r(SFt,"AutoModelForObjectDetection"),SFt.forEach(t),pGe.forEach(t),fje=i(m),Qo=n(m,"DIV",{class:!0});var dl=s(Qo);T(W8.$$.fragment,dl),bnr=i(dl),$d=n(dl,"P",{});var iee=s($d);vnr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=n(iee,"A",{href:!0});var RFt=s(Vz);Fnr=r(RFt,"from_pretrained()"),RFt.forEach(t),Tnr=r(iee," class method or the "),Xz=n(iee,"A",{href:!0});var PFt=s(Xz);Mnr=r(PFt,"from_config()"),PFt.forEach(t),Enr=r(iee,` class
method.`),iee.forEach(t),Cnr=i(dl),Q8=n(dl,"P",{});var _Ge=s(Q8);wnr=r(_Ge,"This class cannot be instantiated directly using "),Cbe=n(_Ge,"CODE",{});var BFt=s(Cbe);Anr=r(BFt,"__init__()"),BFt.forEach(t),ynr=r(_Ge," (throws an error)."),_Ge.forEach(t),Lnr=i(dl),Et=n(dl,"DIV",{class:!0});var vA=s(Et);T(H8.$$.fragment,vA),xnr=i(vA),wbe=n(vA,"P",{});var IFt=s(wbe);$nr=r(IFt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),IFt.forEach(t),knr=i(vA),kd=n(vA,"P",{});var dee=s(kd);Snr=r(dee,`Note:
Loading a model from its configuration file does `),Abe=n(dee,"STRONG",{});var NFt=s(Abe);Rnr=r(NFt,"not"),NFt.forEach(t),Pnr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(dee,"A",{href:!0});var qFt=s(zz);Bnr=r(qFt,"from_pretrained()"),qFt.forEach(t),Inr=r(dee," to load the model weights."),dee.forEach(t),Nnr=i(vA),T($M.$$.fragment,vA),vA.forEach(t),qnr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(U8.$$.fragment,Fa),jnr=i(Fa),ybe=n(Fa,"P",{});var jFt=s(ybe);Dnr=r(jFt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jFt.forEach(t),Gnr=i(Fa),Qa=n(Fa,"P",{});var FA=s(Qa);Onr=r(FA,"The model class to instantiate is selected based on the "),Lbe=n(FA,"CODE",{});var DFt=s(Lbe);Vnr=r(DFt,"model_type"),DFt.forEach(t),Xnr=r(FA,` property of the config object (either
passed as an argument or loaded from `),xbe=n(FA,"CODE",{});var GFt=s(xbe);znr=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),Wnr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(FA,"CODE",{});var OFt=s($be);Qnr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),Hnr=r(FA,":"),FA.forEach(t),Unr=i(Fa),J8=n(Fa,"UL",{});var bGe=s(J8);kM=n(bGe,"LI",{});var uSe=s(kM);kbe=n(uSe,"STRONG",{});var VFt=s(kbe);Jnr=r(VFt,"detr"),VFt.forEach(t),Ynr=r(uSe," \u2014 "),Wz=n(uSe,"A",{href:!0});var XFt=s(Wz);Knr=r(XFt,"DetrForObjectDetection"),XFt.forEach(t),Znr=r(uSe," (DETR model)"),uSe.forEach(t),esr=i(bGe),SM=n(bGe,"LI",{});var pSe=s(SM);Sbe=n(pSe,"STRONG",{});var zFt=s(Sbe);osr=r(zFt,"yolos"),zFt.forEach(t),rsr=r(pSe," \u2014 "),Qz=n(pSe,"A",{href:!0});var WFt=s(Qz);tsr=r(WFt,"YolosForObjectDetection"),WFt.forEach(t),asr=r(pSe," (YOLOS model)"),pSe.forEach(t),bGe.forEach(t),nsr=i(Fa),RM=n(Fa,"P",{});var _Se=s(RM);ssr=r(_Se,"The model is set in evaluation mode by default using "),Rbe=n(_Se,"CODE",{});var QFt=s(Rbe);lsr=r(QFt,"model.eval()"),QFt.forEach(t),isr=r(_Se,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pbe=n(_Se,"CODE",{});var HFt=s(Pbe);dsr=r(HFt,"model.train()"),HFt.forEach(t),_Se.forEach(t),csr=i(Fa),T(PM.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),gje=i(m),Sd=n(m,"H2",{class:!0});var vGe=s(Sd);BM=n(vGe,"A",{id:!0,class:!0,href:!0});var UFt=s(BM);Bbe=n(UFt,"SPAN",{});var JFt=s(Bbe);T(Y8.$$.fragment,JFt),JFt.forEach(t),UFt.forEach(t),msr=i(vGe),Ibe=n(vGe,"SPAN",{});var YFt=s(Ibe);fsr=r(YFt,"AutoModelForImageSegmentation"),YFt.forEach(t),vGe.forEach(t),hje=i(m),Ho=n(m,"DIV",{class:!0});var cl=s(Ho);T(K8.$$.fragment,cl),gsr=i(cl),Rd=n(cl,"P",{});var cee=s(Rd);hsr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=n(cee,"A",{href:!0});var KFt=s(Hz);usr=r(KFt,"from_pretrained()"),KFt.forEach(t),psr=r(cee," class method or the "),Uz=n(cee,"A",{href:!0});var ZFt=s(Uz);_sr=r(ZFt,"from_config()"),ZFt.forEach(t),bsr=r(cee,` class
method.`),cee.forEach(t),vsr=i(cl),Z8=n(cl,"P",{});var FGe=s(Z8);Fsr=r(FGe,"This class cannot be instantiated directly using "),Nbe=n(FGe,"CODE",{});var e1t=s(Nbe);Tsr=r(e1t,"__init__()"),e1t.forEach(t),Msr=r(FGe," (throws an error)."),FGe.forEach(t),Esr=i(cl),Ct=n(cl,"DIV",{class:!0});var TA=s(Ct);T(e7.$$.fragment,TA),Csr=i(TA),qbe=n(TA,"P",{});var o1t=s(qbe);wsr=r(o1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),o1t.forEach(t),Asr=i(TA),Pd=n(TA,"P",{});var mee=s(Pd);ysr=r(mee,`Note:
Loading a model from its configuration file does `),jbe=n(mee,"STRONG",{});var r1t=s(jbe);Lsr=r(r1t,"not"),r1t.forEach(t),xsr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(mee,"A",{href:!0});var t1t=s(Jz);$sr=r(t1t,"from_pretrained()"),t1t.forEach(t),ksr=r(mee," to load the model weights."),mee.forEach(t),Ssr=i(TA),T(IM.$$.fragment,TA),TA.forEach(t),Rsr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(o7.$$.fragment,Ta),Psr=i(Ta),Dbe=n(Ta,"P",{});var a1t=s(Dbe);Bsr=r(a1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),a1t.forEach(t),Isr=i(Ta),Ha=n(Ta,"P",{});var MA=s(Ha);Nsr=r(MA,"The model class to instantiate is selected based on the "),Gbe=n(MA,"CODE",{});var n1t=s(Gbe);qsr=r(n1t,"model_type"),n1t.forEach(t),jsr=r(MA,` property of the config object (either
passed as an argument or loaded from `),Obe=n(MA,"CODE",{});var s1t=s(Obe);Dsr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),Gsr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vbe=n(MA,"CODE",{});var l1t=s(Vbe);Osr=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),Vsr=r(MA,":"),MA.forEach(t),Xsr=i(Ta),Xbe=n(Ta,"UL",{});var i1t=s(Xbe);NM=n(i1t,"LI",{});var bSe=s(NM);zbe=n(bSe,"STRONG",{});var d1t=s(zbe);zsr=r(d1t,"detr"),d1t.forEach(t),Wsr=r(bSe," \u2014 "),Yz=n(bSe,"A",{href:!0});var c1t=s(Yz);Qsr=r(c1t,"DetrForSegmentation"),c1t.forEach(t),Hsr=r(bSe," (DETR model)"),bSe.forEach(t),i1t.forEach(t),Usr=i(Ta),qM=n(Ta,"P",{});var vSe=s(qM);Jsr=r(vSe,"The model is set in evaluation mode by default using "),Wbe=n(vSe,"CODE",{});var m1t=s(Wbe);Ysr=r(m1t,"model.eval()"),m1t.forEach(t),Ksr=r(vSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(vSe,"CODE",{});var f1t=s(Qbe);Zsr=r(f1t,"model.train()"),f1t.forEach(t),vSe.forEach(t),elr=i(Ta),T(jM.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),uje=i(m),Bd=n(m,"H2",{class:!0});var TGe=s(Bd);DM=n(TGe,"A",{id:!0,class:!0,href:!0});var g1t=s(DM);Hbe=n(g1t,"SPAN",{});var h1t=s(Hbe);T(r7.$$.fragment,h1t),h1t.forEach(t),g1t.forEach(t),olr=i(TGe),Ube=n(TGe,"SPAN",{});var u1t=s(Ube);rlr=r(u1t,"AutoModelForSemanticSegmentation"),u1t.forEach(t),TGe.forEach(t),pje=i(m),Uo=n(m,"DIV",{class:!0});var ml=s(Uo);T(t7.$$.fragment,ml),tlr=i(ml),Id=n(ml,"P",{});var fee=s(Id);alr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=n(fee,"A",{href:!0});var p1t=s(Kz);nlr=r(p1t,"from_pretrained()"),p1t.forEach(t),slr=r(fee," class method or the "),Zz=n(fee,"A",{href:!0});var _1t=s(Zz);llr=r(_1t,"from_config()"),_1t.forEach(t),ilr=r(fee,` class
method.`),fee.forEach(t),dlr=i(ml),a7=n(ml,"P",{});var MGe=s(a7);clr=r(MGe,"This class cannot be instantiated directly using "),Jbe=n(MGe,"CODE",{});var b1t=s(Jbe);mlr=r(b1t,"__init__()"),b1t.forEach(t),flr=r(MGe," (throws an error)."),MGe.forEach(t),glr=i(ml),wt=n(ml,"DIV",{class:!0});var EA=s(wt);T(n7.$$.fragment,EA),hlr=i(EA),Ybe=n(EA,"P",{});var v1t=s(Ybe);ulr=r(v1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),v1t.forEach(t),plr=i(EA),Nd=n(EA,"P",{});var gee=s(Nd);_lr=r(gee,`Note:
Loading a model from its configuration file does `),Kbe=n(gee,"STRONG",{});var F1t=s(Kbe);blr=r(F1t,"not"),F1t.forEach(t),vlr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(gee,"A",{href:!0});var T1t=s(eW);Flr=r(T1t,"from_pretrained()"),T1t.forEach(t),Tlr=r(gee," to load the model weights."),gee.forEach(t),Mlr=i(EA),T(GM.$$.fragment,EA),EA.forEach(t),Elr=i(ml),bo=n(ml,"DIV",{class:!0});var Ma=s(bo);T(s7.$$.fragment,Ma),Clr=i(Ma),Zbe=n(Ma,"P",{});var M1t=s(Zbe);wlr=r(M1t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),M1t.forEach(t),Alr=i(Ma),Ua=n(Ma,"P",{});var CA=s(Ua);ylr=r(CA,"The model class to instantiate is selected based on the "),e2e=n(CA,"CODE",{});var E1t=s(e2e);Llr=r(E1t,"model_type"),E1t.forEach(t),xlr=r(CA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(CA,"CODE",{});var C1t=s(o2e);$lr=r(C1t,"pretrained_model_name_or_path"),C1t.forEach(t),klr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(CA,"CODE",{});var w1t=s(r2e);Slr=r(w1t,"pretrained_model_name_or_path"),w1t.forEach(t),Rlr=r(CA,":"),CA.forEach(t),Plr=i(Ma),Ja=n(Ma,"UL",{});var wA=s(Ja);OM=n(wA,"LI",{});var FSe=s(OM);t2e=n(FSe,"STRONG",{});var A1t=s(t2e);Blr=r(A1t,"beit"),A1t.forEach(t),Ilr=r(FSe," \u2014 "),oW=n(FSe,"A",{href:!0});var y1t=s(oW);Nlr=r(y1t,"BeitForSemanticSegmentation"),y1t.forEach(t),qlr=r(FSe," (BEiT model)"),FSe.forEach(t),jlr=i(wA),VM=n(wA,"LI",{});var TSe=s(VM);a2e=n(TSe,"STRONG",{});var L1t=s(a2e);Dlr=r(L1t,"data2vec-vision"),L1t.forEach(t),Glr=r(TSe," \u2014 "),rW=n(TSe,"A",{href:!0});var x1t=s(rW);Olr=r(x1t,"Data2VecVisionForSemanticSegmentation"),x1t.forEach(t),Vlr=r(TSe," (Data2VecVision model)"),TSe.forEach(t),Xlr=i(wA),XM=n(wA,"LI",{});var MSe=s(XM);n2e=n(MSe,"STRONG",{});var $1t=s(n2e);zlr=r($1t,"dpt"),$1t.forEach(t),Wlr=r(MSe," \u2014 "),tW=n(MSe,"A",{href:!0});var k1t=s(tW);Qlr=r(k1t,"DPTForSemanticSegmentation"),k1t.forEach(t),Hlr=r(MSe," (DPT model)"),MSe.forEach(t),Ulr=i(wA),zM=n(wA,"LI",{});var ESe=s(zM);s2e=n(ESe,"STRONG",{});var S1t=s(s2e);Jlr=r(S1t,"segformer"),S1t.forEach(t),Ylr=r(ESe," \u2014 "),aW=n(ESe,"A",{href:!0});var R1t=s(aW);Klr=r(R1t,"SegformerForSemanticSegmentation"),R1t.forEach(t),Zlr=r(ESe," (SegFormer model)"),ESe.forEach(t),wA.forEach(t),eir=i(Ma),WM=n(Ma,"P",{});var CSe=s(WM);oir=r(CSe,"The model is set in evaluation mode by default using "),l2e=n(CSe,"CODE",{});var P1t=s(l2e);rir=r(P1t,"model.eval()"),P1t.forEach(t),tir=r(CSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(CSe,"CODE",{});var B1t=s(i2e);air=r(B1t,"model.train()"),B1t.forEach(t),CSe.forEach(t),nir=i(Ma),T(QM.$$.fragment,Ma),Ma.forEach(t),ml.forEach(t),_je=i(m),qd=n(m,"H2",{class:!0});var EGe=s(qd);HM=n(EGe,"A",{id:!0,class:!0,href:!0});var I1t=s(HM);d2e=n(I1t,"SPAN",{});var N1t=s(d2e);T(l7.$$.fragment,N1t),N1t.forEach(t),I1t.forEach(t),sir=i(EGe),c2e=n(EGe,"SPAN",{});var q1t=s(c2e);lir=r(q1t,"AutoModelForInstanceSegmentation"),q1t.forEach(t),EGe.forEach(t),bje=i(m),Jo=n(m,"DIV",{class:!0});var fl=s(Jo);T(i7.$$.fragment,fl),iir=i(fl),jd=n(fl,"P",{});var hee=s(jd);dir=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=n(hee,"A",{href:!0});var j1t=s(nW);cir=r(j1t,"from_pretrained()"),j1t.forEach(t),mir=r(hee," class method or the "),sW=n(hee,"A",{href:!0});var D1t=s(sW);fir=r(D1t,"from_config()"),D1t.forEach(t),gir=r(hee,` class
method.`),hee.forEach(t),hir=i(fl),d7=n(fl,"P",{});var CGe=s(d7);uir=r(CGe,"This class cannot be instantiated directly using "),m2e=n(CGe,"CODE",{});var G1t=s(m2e);pir=r(G1t,"__init__()"),G1t.forEach(t),_ir=r(CGe," (throws an error)."),CGe.forEach(t),bir=i(fl),At=n(fl,"DIV",{class:!0});var AA=s(At);T(c7.$$.fragment,AA),vir=i(AA),f2e=n(AA,"P",{});var O1t=s(f2e);Fir=r(O1t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),O1t.forEach(t),Tir=i(AA),Dd=n(AA,"P",{});var uee=s(Dd);Mir=r(uee,`Note:
Loading a model from its configuration file does `),g2e=n(uee,"STRONG",{});var V1t=s(g2e);Eir=r(V1t,"not"),V1t.forEach(t),Cir=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(uee,"A",{href:!0});var X1t=s(lW);wir=r(X1t,"from_pretrained()"),X1t.forEach(t),Air=r(uee," to load the model weights."),uee.forEach(t),yir=i(AA),T(UM.$$.fragment,AA),AA.forEach(t),Lir=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(m7.$$.fragment,Ea),xir=i(Ea),h2e=n(Ea,"P",{});var z1t=s(h2e);$ir=r(z1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),z1t.forEach(t),kir=i(Ea),Ya=n(Ea,"P",{});var yA=s(Ya);Sir=r(yA,"The model class to instantiate is selected based on the "),u2e=n(yA,"CODE",{});var W1t=s(u2e);Rir=r(W1t,"model_type"),W1t.forEach(t),Pir=r(yA,` property of the config object (either
passed as an argument or loaded from `),p2e=n(yA,"CODE",{});var Q1t=s(p2e);Bir=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),Iir=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(yA,"CODE",{});var H1t=s(_2e);Nir=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),qir=r(yA,":"),yA.forEach(t),jir=i(Ea),b2e=n(Ea,"UL",{});var U1t=s(b2e);JM=n(U1t,"LI",{});var wSe=s(JM);v2e=n(wSe,"STRONG",{});var J1t=s(v2e);Dir=r(J1t,"maskformer"),J1t.forEach(t),Gir=r(wSe," \u2014 "),iW=n(wSe,"A",{href:!0});var Y1t=s(iW);Oir=r(Y1t,"MaskFormerForInstanceSegmentation"),Y1t.forEach(t),Vir=r(wSe," (MaskFormer model)"),wSe.forEach(t),U1t.forEach(t),Xir=i(Ea),YM=n(Ea,"P",{});var ASe=s(YM);zir=r(ASe,"The model is set in evaluation mode by default using "),F2e=n(ASe,"CODE",{});var K1t=s(F2e);Wir=r(K1t,"model.eval()"),K1t.forEach(t),Qir=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(ASe,"CODE",{});var Z1t=s(T2e);Hir=r(Z1t,"model.train()"),Z1t.forEach(t),ASe.forEach(t),Uir=i(Ea),T(KM.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),vje=i(m),Gd=n(m,"H2",{class:!0});var wGe=s(Gd);ZM=n(wGe,"A",{id:!0,class:!0,href:!0});var eTt=s(ZM);M2e=n(eTt,"SPAN",{});var oTt=s(M2e);T(f7.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),Jir=i(wGe),E2e=n(wGe,"SPAN",{});var rTt=s(E2e);Yir=r(rTt,"TFAutoModel"),rTt.forEach(t),wGe.forEach(t),Fje=i(m),Yo=n(m,"DIV",{class:!0});var gl=s(Yo);T(g7.$$.fragment,gl),Kir=i(gl),Od=n(gl,"P",{});var pee=s(Od);Zir=r(pee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=n(pee,"A",{href:!0});var tTt=s(dW);edr=r(tTt,"from_pretrained()"),tTt.forEach(t),odr=r(pee," class method or the "),cW=n(pee,"A",{href:!0});var aTt=s(cW);rdr=r(aTt,"from_config()"),aTt.forEach(t),tdr=r(pee,` class
method.`),pee.forEach(t),adr=i(gl),h7=n(gl,"P",{});var AGe=s(h7);ndr=r(AGe,"This class cannot be instantiated directly using "),C2e=n(AGe,"CODE",{});var nTt=s(C2e);sdr=r(nTt,"__init__()"),nTt.forEach(t),ldr=r(AGe," (throws an error)."),AGe.forEach(t),idr=i(gl),yt=n(gl,"DIV",{class:!0});var LA=s(yt);T(u7.$$.fragment,LA),ddr=i(LA),w2e=n(LA,"P",{});var sTt=s(w2e);cdr=r(sTt,"Instantiates one of the base model classes of the library from a configuration."),sTt.forEach(t),mdr=i(LA),Vd=n(LA,"P",{});var _ee=s(Vd);fdr=r(_ee,`Note:
Loading a model from its configuration file does `),A2e=n(_ee,"STRONG",{});var lTt=s(A2e);gdr=r(lTt,"not"),lTt.forEach(t),hdr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(_ee,"A",{href:!0});var iTt=s(mW);udr=r(iTt,"from_pretrained()"),iTt.forEach(t),pdr=r(_ee," to load the model weights."),_ee.forEach(t),_dr=i(LA),T(e4.$$.fragment,LA),LA.forEach(t),bdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(p7.$$.fragment,hl),vdr=i(hl),y2e=n(hl,"P",{});var dTt=s(y2e);Fdr=r(dTt,"Instantiate one of the base model classes of the library from a pretrained model."),dTt.forEach(t),Tdr=i(hl),Ka=n(hl,"P",{});var xA=s(Ka);Mdr=r(xA,"The model class to instantiate is selected based on the "),L2e=n(xA,"CODE",{});var cTt=s(L2e);Edr=r(cTt,"model_type"),cTt.forEach(t),Cdr=r(xA,` property of the config object (either
passed as an argument or loaded from `),x2e=n(xA,"CODE",{});var mTt=s(x2e);wdr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),Adr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(xA,"CODE",{});var fTt=s($2e);ydr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),Ldr=r(xA,":"),xA.forEach(t),xdr=i(hl),q=n(hl,"UL",{});var D=s(q);o4=n(D,"LI",{});var ySe=s(o4);k2e=n(ySe,"STRONG",{});var gTt=s(k2e);$dr=r(gTt,"albert"),gTt.forEach(t),kdr=r(ySe," \u2014 "),fW=n(ySe,"A",{href:!0});var hTt=s(fW);Sdr=r(hTt,"TFAlbertModel"),hTt.forEach(t),Rdr=r(ySe," (ALBERT model)"),ySe.forEach(t),Pdr=i(D),r4=n(D,"LI",{});var LSe=s(r4);S2e=n(LSe,"STRONG",{});var uTt=s(S2e);Bdr=r(uTt,"bart"),uTt.forEach(t),Idr=r(LSe," \u2014 "),gW=n(LSe,"A",{href:!0});var pTt=s(gW);Ndr=r(pTt,"TFBartModel"),pTt.forEach(t),qdr=r(LSe," (BART model)"),LSe.forEach(t),jdr=i(D),t4=n(D,"LI",{});var xSe=s(t4);R2e=n(xSe,"STRONG",{});var _Tt=s(R2e);Ddr=r(_Tt,"bert"),_Tt.forEach(t),Gdr=r(xSe," \u2014 "),hW=n(xSe,"A",{href:!0});var bTt=s(hW);Odr=r(bTt,"TFBertModel"),bTt.forEach(t),Vdr=r(xSe," (BERT model)"),xSe.forEach(t),Xdr=i(D),a4=n(D,"LI",{});var $Se=s(a4);P2e=n($Se,"STRONG",{});var vTt=s(P2e);zdr=r(vTt,"blenderbot"),vTt.forEach(t),Wdr=r($Se," \u2014 "),uW=n($Se,"A",{href:!0});var FTt=s(uW);Qdr=r(FTt,"TFBlenderbotModel"),FTt.forEach(t),Hdr=r($Se," (Blenderbot model)"),$Se.forEach(t),Udr=i(D),n4=n(D,"LI",{});var kSe=s(n4);B2e=n(kSe,"STRONG",{});var TTt=s(B2e);Jdr=r(TTt,"blenderbot-small"),TTt.forEach(t),Ydr=r(kSe," \u2014 "),pW=n(kSe,"A",{href:!0});var MTt=s(pW);Kdr=r(MTt,"TFBlenderbotSmallModel"),MTt.forEach(t),Zdr=r(kSe," (BlenderbotSmall model)"),kSe.forEach(t),ecr=i(D),s4=n(D,"LI",{});var SSe=s(s4);I2e=n(SSe,"STRONG",{});var ETt=s(I2e);ocr=r(ETt,"camembert"),ETt.forEach(t),rcr=r(SSe," \u2014 "),_W=n(SSe,"A",{href:!0});var CTt=s(_W);tcr=r(CTt,"TFCamembertModel"),CTt.forEach(t),acr=r(SSe," (CamemBERT model)"),SSe.forEach(t),ncr=i(D),l4=n(D,"LI",{});var RSe=s(l4);N2e=n(RSe,"STRONG",{});var wTt=s(N2e);scr=r(wTt,"clip"),wTt.forEach(t),lcr=r(RSe," \u2014 "),bW=n(RSe,"A",{href:!0});var ATt=s(bW);icr=r(ATt,"TFCLIPModel"),ATt.forEach(t),dcr=r(RSe," (CLIP model)"),RSe.forEach(t),ccr=i(D),i4=n(D,"LI",{});var PSe=s(i4);q2e=n(PSe,"STRONG",{});var yTt=s(q2e);mcr=r(yTt,"convbert"),yTt.forEach(t),fcr=r(PSe," \u2014 "),vW=n(PSe,"A",{href:!0});var LTt=s(vW);gcr=r(LTt,"TFConvBertModel"),LTt.forEach(t),hcr=r(PSe," (ConvBERT model)"),PSe.forEach(t),ucr=i(D),d4=n(D,"LI",{});var BSe=s(d4);j2e=n(BSe,"STRONG",{});var xTt=s(j2e);pcr=r(xTt,"convnext"),xTt.forEach(t),_cr=r(BSe," \u2014 "),FW=n(BSe,"A",{href:!0});var $Tt=s(FW);bcr=r($Tt,"TFConvNextModel"),$Tt.forEach(t),vcr=r(BSe," (ConvNext model)"),BSe.forEach(t),Fcr=i(D),c4=n(D,"LI",{});var ISe=s(c4);D2e=n(ISe,"STRONG",{});var kTt=s(D2e);Tcr=r(kTt,"ctrl"),kTt.forEach(t),Mcr=r(ISe," \u2014 "),TW=n(ISe,"A",{href:!0});var STt=s(TW);Ecr=r(STt,"TFCTRLModel"),STt.forEach(t),Ccr=r(ISe," (CTRL model)"),ISe.forEach(t),wcr=i(D),m4=n(D,"LI",{});var NSe=s(m4);G2e=n(NSe,"STRONG",{});var RTt=s(G2e);Acr=r(RTt,"data2vec-vision"),RTt.forEach(t),ycr=r(NSe," \u2014 "),MW=n(NSe,"A",{href:!0});var PTt=s(MW);Lcr=r(PTt,"TFData2VecVisionModel"),PTt.forEach(t),xcr=r(NSe," (Data2VecVision model)"),NSe.forEach(t),$cr=i(D),f4=n(D,"LI",{});var qSe=s(f4);O2e=n(qSe,"STRONG",{});var BTt=s(O2e);kcr=r(BTt,"deberta"),BTt.forEach(t),Scr=r(qSe," \u2014 "),EW=n(qSe,"A",{href:!0});var ITt=s(EW);Rcr=r(ITt,"TFDebertaModel"),ITt.forEach(t),Pcr=r(qSe," (DeBERTa model)"),qSe.forEach(t),Bcr=i(D),g4=n(D,"LI",{});var jSe=s(g4);V2e=n(jSe,"STRONG",{});var NTt=s(V2e);Icr=r(NTt,"deberta-v2"),NTt.forEach(t),Ncr=r(jSe," \u2014 "),CW=n(jSe,"A",{href:!0});var qTt=s(CW);qcr=r(qTt,"TFDebertaV2Model"),qTt.forEach(t),jcr=r(jSe," (DeBERTa-v2 model)"),jSe.forEach(t),Dcr=i(D),h4=n(D,"LI",{});var DSe=s(h4);X2e=n(DSe,"STRONG",{});var jTt=s(X2e);Gcr=r(jTt,"distilbert"),jTt.forEach(t),Ocr=r(DSe," \u2014 "),wW=n(DSe,"A",{href:!0});var DTt=s(wW);Vcr=r(DTt,"TFDistilBertModel"),DTt.forEach(t),Xcr=r(DSe," (DistilBERT model)"),DSe.forEach(t),zcr=i(D),u4=n(D,"LI",{});var GSe=s(u4);z2e=n(GSe,"STRONG",{});var GTt=s(z2e);Wcr=r(GTt,"dpr"),GTt.forEach(t),Qcr=r(GSe," \u2014 "),AW=n(GSe,"A",{href:!0});var OTt=s(AW);Hcr=r(OTt,"TFDPRQuestionEncoder"),OTt.forEach(t),Ucr=r(GSe," (DPR model)"),GSe.forEach(t),Jcr=i(D),p4=n(D,"LI",{});var OSe=s(p4);W2e=n(OSe,"STRONG",{});var VTt=s(W2e);Ycr=r(VTt,"electra"),VTt.forEach(t),Kcr=r(OSe," \u2014 "),yW=n(OSe,"A",{href:!0});var XTt=s(yW);Zcr=r(XTt,"TFElectraModel"),XTt.forEach(t),emr=r(OSe," (ELECTRA model)"),OSe.forEach(t),omr=i(D),_4=n(D,"LI",{});var VSe=s(_4);Q2e=n(VSe,"STRONG",{});var zTt=s(Q2e);rmr=r(zTt,"flaubert"),zTt.forEach(t),tmr=r(VSe," \u2014 "),LW=n(VSe,"A",{href:!0});var WTt=s(LW);amr=r(WTt,"TFFlaubertModel"),WTt.forEach(t),nmr=r(VSe," (FlauBERT model)"),VSe.forEach(t),smr=i(D),Is=n(D,"LI",{});var H$=s(Is);H2e=n(H$,"STRONG",{});var QTt=s(H2e);lmr=r(QTt,"funnel"),QTt.forEach(t),imr=r(H$," \u2014 "),xW=n(H$,"A",{href:!0});var HTt=s(xW);dmr=r(HTt,"TFFunnelModel"),HTt.forEach(t),cmr=r(H$," or "),$W=n(H$,"A",{href:!0});var UTt=s($W);mmr=r(UTt,"TFFunnelBaseModel"),UTt.forEach(t),fmr=r(H$," (Funnel Transformer model)"),H$.forEach(t),gmr=i(D),b4=n(D,"LI",{});var XSe=s(b4);U2e=n(XSe,"STRONG",{});var JTt=s(U2e);hmr=r(JTt,"gpt2"),JTt.forEach(t),umr=r(XSe," \u2014 "),kW=n(XSe,"A",{href:!0});var YTt=s(kW);pmr=r(YTt,"TFGPT2Model"),YTt.forEach(t),_mr=r(XSe," (OpenAI GPT-2 model)"),XSe.forEach(t),bmr=i(D),v4=n(D,"LI",{});var zSe=s(v4);J2e=n(zSe,"STRONG",{});var KTt=s(J2e);vmr=r(KTt,"gptj"),KTt.forEach(t),Fmr=r(zSe," \u2014 "),SW=n(zSe,"A",{href:!0});var ZTt=s(SW);Tmr=r(ZTt,"TFGPTJModel"),ZTt.forEach(t),Mmr=r(zSe," (GPT-J model)"),zSe.forEach(t),Emr=i(D),F4=n(D,"LI",{});var WSe=s(F4);Y2e=n(WSe,"STRONG",{});var eMt=s(Y2e);Cmr=r(eMt,"hubert"),eMt.forEach(t),wmr=r(WSe," \u2014 "),RW=n(WSe,"A",{href:!0});var oMt=s(RW);Amr=r(oMt,"TFHubertModel"),oMt.forEach(t),ymr=r(WSe," (Hubert model)"),WSe.forEach(t),Lmr=i(D),T4=n(D,"LI",{});var QSe=s(T4);K2e=n(QSe,"STRONG",{});var rMt=s(K2e);xmr=r(rMt,"layoutlm"),rMt.forEach(t),$mr=r(QSe," \u2014 "),PW=n(QSe,"A",{href:!0});var tMt=s(PW);kmr=r(tMt,"TFLayoutLMModel"),tMt.forEach(t),Smr=r(QSe," (LayoutLM model)"),QSe.forEach(t),Rmr=i(D),M4=n(D,"LI",{});var HSe=s(M4);Z2e=n(HSe,"STRONG",{});var aMt=s(Z2e);Pmr=r(aMt,"led"),aMt.forEach(t),Bmr=r(HSe," \u2014 "),BW=n(HSe,"A",{href:!0});var nMt=s(BW);Imr=r(nMt,"TFLEDModel"),nMt.forEach(t),Nmr=r(HSe," (LED model)"),HSe.forEach(t),qmr=i(D),E4=n(D,"LI",{});var USe=s(E4);eve=n(USe,"STRONG",{});var sMt=s(eve);jmr=r(sMt,"longformer"),sMt.forEach(t),Dmr=r(USe," \u2014 "),IW=n(USe,"A",{href:!0});var lMt=s(IW);Gmr=r(lMt,"TFLongformerModel"),lMt.forEach(t),Omr=r(USe," (Longformer model)"),USe.forEach(t),Vmr=i(D),C4=n(D,"LI",{});var JSe=s(C4);ove=n(JSe,"STRONG",{});var iMt=s(ove);Xmr=r(iMt,"lxmert"),iMt.forEach(t),zmr=r(JSe," \u2014 "),NW=n(JSe,"A",{href:!0});var dMt=s(NW);Wmr=r(dMt,"TFLxmertModel"),dMt.forEach(t),Qmr=r(JSe," (LXMERT model)"),JSe.forEach(t),Hmr=i(D),w4=n(D,"LI",{});var YSe=s(w4);rve=n(YSe,"STRONG",{});var cMt=s(rve);Umr=r(cMt,"marian"),cMt.forEach(t),Jmr=r(YSe," \u2014 "),qW=n(YSe,"A",{href:!0});var mMt=s(qW);Ymr=r(mMt,"TFMarianModel"),mMt.forEach(t),Kmr=r(YSe," (Marian model)"),YSe.forEach(t),Zmr=i(D),A4=n(D,"LI",{});var KSe=s(A4);tve=n(KSe,"STRONG",{});var fMt=s(tve);efr=r(fMt,"mbart"),fMt.forEach(t),ofr=r(KSe," \u2014 "),jW=n(KSe,"A",{href:!0});var gMt=s(jW);rfr=r(gMt,"TFMBartModel"),gMt.forEach(t),tfr=r(KSe," (mBART model)"),KSe.forEach(t),afr=i(D),y4=n(D,"LI",{});var ZSe=s(y4);ave=n(ZSe,"STRONG",{});var hMt=s(ave);nfr=r(hMt,"mobilebert"),hMt.forEach(t),sfr=r(ZSe," \u2014 "),DW=n(ZSe,"A",{href:!0});var uMt=s(DW);lfr=r(uMt,"TFMobileBertModel"),uMt.forEach(t),ifr=r(ZSe," (MobileBERT model)"),ZSe.forEach(t),dfr=i(D),L4=n(D,"LI",{});var eRe=s(L4);nve=n(eRe,"STRONG",{});var pMt=s(nve);cfr=r(pMt,"mpnet"),pMt.forEach(t),mfr=r(eRe," \u2014 "),GW=n(eRe,"A",{href:!0});var _Mt=s(GW);ffr=r(_Mt,"TFMPNetModel"),_Mt.forEach(t),gfr=r(eRe," (MPNet model)"),eRe.forEach(t),hfr=i(D),x4=n(D,"LI",{});var oRe=s(x4);sve=n(oRe,"STRONG",{});var bMt=s(sve);ufr=r(bMt,"mt5"),bMt.forEach(t),pfr=r(oRe," \u2014 "),OW=n(oRe,"A",{href:!0});var vMt=s(OW);_fr=r(vMt,"TFMT5Model"),vMt.forEach(t),bfr=r(oRe," (mT5 model)"),oRe.forEach(t),vfr=i(D),$4=n(D,"LI",{});var rRe=s($4);lve=n(rRe,"STRONG",{});var FMt=s(lve);Ffr=r(FMt,"openai-gpt"),FMt.forEach(t),Tfr=r(rRe," \u2014 "),VW=n(rRe,"A",{href:!0});var TMt=s(VW);Mfr=r(TMt,"TFOpenAIGPTModel"),TMt.forEach(t),Efr=r(rRe," (OpenAI GPT model)"),rRe.forEach(t),Cfr=i(D),k4=n(D,"LI",{});var tRe=s(k4);ive=n(tRe,"STRONG",{});var MMt=s(ive);wfr=r(MMt,"opt"),MMt.forEach(t),Afr=r(tRe," \u2014 "),XW=n(tRe,"A",{href:!0});var EMt=s(XW);yfr=r(EMt,"TFOPTModel"),EMt.forEach(t),Lfr=r(tRe," (OPT model)"),tRe.forEach(t),xfr=i(D),S4=n(D,"LI",{});var aRe=s(S4);dve=n(aRe,"STRONG",{});var CMt=s(dve);$fr=r(CMt,"pegasus"),CMt.forEach(t),kfr=r(aRe," \u2014 "),zW=n(aRe,"A",{href:!0});var wMt=s(zW);Sfr=r(wMt,"TFPegasusModel"),wMt.forEach(t),Rfr=r(aRe," (Pegasus model)"),aRe.forEach(t),Pfr=i(D),R4=n(D,"LI",{});var nRe=s(R4);cve=n(nRe,"STRONG",{});var AMt=s(cve);Bfr=r(AMt,"rembert"),AMt.forEach(t),Ifr=r(nRe," \u2014 "),WW=n(nRe,"A",{href:!0});var yMt=s(WW);Nfr=r(yMt,"TFRemBertModel"),yMt.forEach(t),qfr=r(nRe," (RemBERT model)"),nRe.forEach(t),jfr=i(D),P4=n(D,"LI",{});var sRe=s(P4);mve=n(sRe,"STRONG",{});var LMt=s(mve);Dfr=r(LMt,"roberta"),LMt.forEach(t),Gfr=r(sRe," \u2014 "),QW=n(sRe,"A",{href:!0});var xMt=s(QW);Ofr=r(xMt,"TFRobertaModel"),xMt.forEach(t),Vfr=r(sRe," (RoBERTa model)"),sRe.forEach(t),Xfr=i(D),B4=n(D,"LI",{});var lRe=s(B4);fve=n(lRe,"STRONG",{});var $Mt=s(fve);zfr=r($Mt,"roformer"),$Mt.forEach(t),Wfr=r(lRe," \u2014 "),HW=n(lRe,"A",{href:!0});var kMt=s(HW);Qfr=r(kMt,"TFRoFormerModel"),kMt.forEach(t),Hfr=r(lRe," (RoFormer model)"),lRe.forEach(t),Ufr=i(D),I4=n(D,"LI",{});var iRe=s(I4);gve=n(iRe,"STRONG",{});var SMt=s(gve);Jfr=r(SMt,"speech_to_text"),SMt.forEach(t),Yfr=r(iRe," \u2014 "),UW=n(iRe,"A",{href:!0});var RMt=s(UW);Kfr=r(RMt,"TFSpeech2TextModel"),RMt.forEach(t),Zfr=r(iRe," (Speech2Text model)"),iRe.forEach(t),egr=i(D),N4=n(D,"LI",{});var dRe=s(N4);hve=n(dRe,"STRONG",{});var PMt=s(hve);ogr=r(PMt,"swin"),PMt.forEach(t),rgr=r(dRe," \u2014 "),JW=n(dRe,"A",{href:!0});var BMt=s(JW);tgr=r(BMt,"TFSwinModel"),BMt.forEach(t),agr=r(dRe," (Swin model)"),dRe.forEach(t),ngr=i(D),q4=n(D,"LI",{});var cRe=s(q4);uve=n(cRe,"STRONG",{});var IMt=s(uve);sgr=r(IMt,"t5"),IMt.forEach(t),lgr=r(cRe," \u2014 "),YW=n(cRe,"A",{href:!0});var NMt=s(YW);igr=r(NMt,"TFT5Model"),NMt.forEach(t),dgr=r(cRe," (T5 model)"),cRe.forEach(t),cgr=i(D),j4=n(D,"LI",{});var mRe=s(j4);pve=n(mRe,"STRONG",{});var qMt=s(pve);mgr=r(qMt,"tapas"),qMt.forEach(t),fgr=r(mRe," \u2014 "),KW=n(mRe,"A",{href:!0});var jMt=s(KW);ggr=r(jMt,"TFTapasModel"),jMt.forEach(t),hgr=r(mRe," (TAPAS model)"),mRe.forEach(t),ugr=i(D),D4=n(D,"LI",{});var fRe=s(D4);_ve=n(fRe,"STRONG",{});var DMt=s(_ve);pgr=r(DMt,"transfo-xl"),DMt.forEach(t),_gr=r(fRe," \u2014 "),ZW=n(fRe,"A",{href:!0});var GMt=s(ZW);bgr=r(GMt,"TFTransfoXLModel"),GMt.forEach(t),vgr=r(fRe," (Transformer-XL model)"),fRe.forEach(t),Fgr=i(D),G4=n(D,"LI",{});var gRe=s(G4);bve=n(gRe,"STRONG",{});var OMt=s(bve);Tgr=r(OMt,"vit"),OMt.forEach(t),Mgr=r(gRe," \u2014 "),eQ=n(gRe,"A",{href:!0});var VMt=s(eQ);Egr=r(VMt,"TFViTModel"),VMt.forEach(t),Cgr=r(gRe," (ViT model)"),gRe.forEach(t),wgr=i(D),O4=n(D,"LI",{});var hRe=s(O4);vve=n(hRe,"STRONG",{});var XMt=s(vve);Agr=r(XMt,"vit_mae"),XMt.forEach(t),ygr=r(hRe," \u2014 "),oQ=n(hRe,"A",{href:!0});var zMt=s(oQ);Lgr=r(zMt,"TFViTMAEModel"),zMt.forEach(t),xgr=r(hRe," (ViTMAE model)"),hRe.forEach(t),$gr=i(D),V4=n(D,"LI",{});var uRe=s(V4);Fve=n(uRe,"STRONG",{});var WMt=s(Fve);kgr=r(WMt,"wav2vec2"),WMt.forEach(t),Sgr=r(uRe," \u2014 "),rQ=n(uRe,"A",{href:!0});var QMt=s(rQ);Rgr=r(QMt,"TFWav2Vec2Model"),QMt.forEach(t),Pgr=r(uRe," (Wav2Vec2 model)"),uRe.forEach(t),Bgr=i(D),X4=n(D,"LI",{});var pRe=s(X4);Tve=n(pRe,"STRONG",{});var HMt=s(Tve);Igr=r(HMt,"xlm"),HMt.forEach(t),Ngr=r(pRe," \u2014 "),tQ=n(pRe,"A",{href:!0});var UMt=s(tQ);qgr=r(UMt,"TFXLMModel"),UMt.forEach(t),jgr=r(pRe," (XLM model)"),pRe.forEach(t),Dgr=i(D),z4=n(D,"LI",{});var _Re=s(z4);Mve=n(_Re,"STRONG",{});var JMt=s(Mve);Ggr=r(JMt,"xlm-roberta"),JMt.forEach(t),Ogr=r(_Re," \u2014 "),aQ=n(_Re,"A",{href:!0});var YMt=s(aQ);Vgr=r(YMt,"TFXLMRobertaModel"),YMt.forEach(t),Xgr=r(_Re," (XLM-RoBERTa model)"),_Re.forEach(t),zgr=i(D),W4=n(D,"LI",{});var bRe=s(W4);Eve=n(bRe,"STRONG",{});var KMt=s(Eve);Wgr=r(KMt,"xlnet"),KMt.forEach(t),Qgr=r(bRe," \u2014 "),nQ=n(bRe,"A",{href:!0});var ZMt=s(nQ);Hgr=r(ZMt,"TFXLNetModel"),ZMt.forEach(t),Ugr=r(bRe," (XLNet model)"),bRe.forEach(t),D.forEach(t),Jgr=i(hl),T(Q4.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Tje=i(m),Xd=n(m,"H2",{class:!0});var yGe=s(Xd);H4=n(yGe,"A",{id:!0,class:!0,href:!0});var e4t=s(H4);Cve=n(e4t,"SPAN",{});var o4t=s(Cve);T(_7.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),Ygr=i(yGe),wve=n(yGe,"SPAN",{});var r4t=s(wve);Kgr=r(r4t,"TFAutoModelForPreTraining"),r4t.forEach(t),yGe.forEach(t),Mje=i(m),Ko=n(m,"DIV",{class:!0});var ul=s(Ko);T(b7.$$.fragment,ul),Zgr=i(ul),zd=n(ul,"P",{});var bee=s(zd);ehr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),sQ=n(bee,"A",{href:!0});var t4t=s(sQ);ohr=r(t4t,"from_pretrained()"),t4t.forEach(t),rhr=r(bee," class method or the "),lQ=n(bee,"A",{href:!0});var a4t=s(lQ);thr=r(a4t,"from_config()"),a4t.forEach(t),ahr=r(bee,` class
method.`),bee.forEach(t),nhr=i(ul),v7=n(ul,"P",{});var LGe=s(v7);shr=r(LGe,"This class cannot be instantiated directly using "),Ave=n(LGe,"CODE",{});var n4t=s(Ave);lhr=r(n4t,"__init__()"),n4t.forEach(t),ihr=r(LGe," (throws an error)."),LGe.forEach(t),dhr=i(ul),Lt=n(ul,"DIV",{class:!0});var $A=s(Lt);T(F7.$$.fragment,$A),chr=i($A),yve=n($A,"P",{});var s4t=s(yve);mhr=r(s4t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),s4t.forEach(t),fhr=i($A),Wd=n($A,"P",{});var vee=s(Wd);ghr=r(vee,`Note:
Loading a model from its configuration file does `),Lve=n(vee,"STRONG",{});var l4t=s(Lve);hhr=r(l4t,"not"),l4t.forEach(t),uhr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(vee,"A",{href:!0});var i4t=s(iQ);phr=r(i4t,"from_pretrained()"),i4t.forEach(t),_hr=r(vee," to load the model weights."),vee.forEach(t),bhr=i($A),T(U4.$$.fragment,$A),$A.forEach(t),vhr=i(ul),Ar=n(ul,"DIV",{class:!0});var pl=s(Ar);T(T7.$$.fragment,pl),Fhr=i(pl),xve=n(pl,"P",{});var d4t=s(xve);Thr=r(d4t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d4t.forEach(t),Mhr=i(pl),Za=n(pl,"P",{});var kA=s(Za);Ehr=r(kA,"The model class to instantiate is selected based on the "),$ve=n(kA,"CODE",{});var c4t=s($ve);Chr=r(c4t,"model_type"),c4t.forEach(t),whr=r(kA,` property of the config object (either
passed as an argument or loaded from `),kve=n(kA,"CODE",{});var m4t=s(kve);Ahr=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),yhr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(kA,"CODE",{});var f4t=s(Sve);Lhr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),xhr=r(kA,":"),kA.forEach(t),$hr=i(pl),se=n(pl,"UL",{});var le=s(se);J4=n(le,"LI",{});var vRe=s(J4);Rve=n(vRe,"STRONG",{});var g4t=s(Rve);khr=r(g4t,"albert"),g4t.forEach(t),Shr=r(vRe," \u2014 "),dQ=n(vRe,"A",{href:!0});var h4t=s(dQ);Rhr=r(h4t,"TFAlbertForPreTraining"),h4t.forEach(t),Phr=r(vRe," (ALBERT model)"),vRe.forEach(t),Bhr=i(le),Y4=n(le,"LI",{});var FRe=s(Y4);Pve=n(FRe,"STRONG",{});var u4t=s(Pve);Ihr=r(u4t,"bart"),u4t.forEach(t),Nhr=r(FRe," \u2014 "),cQ=n(FRe,"A",{href:!0});var p4t=s(cQ);qhr=r(p4t,"TFBartForConditionalGeneration"),p4t.forEach(t),jhr=r(FRe," (BART model)"),FRe.forEach(t),Dhr=i(le),K4=n(le,"LI",{});var TRe=s(K4);Bve=n(TRe,"STRONG",{});var _4t=s(Bve);Ghr=r(_4t,"bert"),_4t.forEach(t),Ohr=r(TRe," \u2014 "),mQ=n(TRe,"A",{href:!0});var b4t=s(mQ);Vhr=r(b4t,"TFBertForPreTraining"),b4t.forEach(t),Xhr=r(TRe," (BERT model)"),TRe.forEach(t),zhr=i(le),Z4=n(le,"LI",{});var MRe=s(Z4);Ive=n(MRe,"STRONG",{});var v4t=s(Ive);Whr=r(v4t,"camembert"),v4t.forEach(t),Qhr=r(MRe," \u2014 "),fQ=n(MRe,"A",{href:!0});var F4t=s(fQ);Hhr=r(F4t,"TFCamembertForMaskedLM"),F4t.forEach(t),Uhr=r(MRe," (CamemBERT model)"),MRe.forEach(t),Jhr=i(le),eE=n(le,"LI",{});var ERe=s(eE);Nve=n(ERe,"STRONG",{});var T4t=s(Nve);Yhr=r(T4t,"ctrl"),T4t.forEach(t),Khr=r(ERe," \u2014 "),gQ=n(ERe,"A",{href:!0});var M4t=s(gQ);Zhr=r(M4t,"TFCTRLLMHeadModel"),M4t.forEach(t),eur=r(ERe," (CTRL model)"),ERe.forEach(t),our=i(le),oE=n(le,"LI",{});var CRe=s(oE);qve=n(CRe,"STRONG",{});var E4t=s(qve);rur=r(E4t,"distilbert"),E4t.forEach(t),tur=r(CRe," \u2014 "),hQ=n(CRe,"A",{href:!0});var C4t=s(hQ);aur=r(C4t,"TFDistilBertForMaskedLM"),C4t.forEach(t),nur=r(CRe," (DistilBERT model)"),CRe.forEach(t),sur=i(le),rE=n(le,"LI",{});var wRe=s(rE);jve=n(wRe,"STRONG",{});var w4t=s(jve);lur=r(w4t,"electra"),w4t.forEach(t),iur=r(wRe," \u2014 "),uQ=n(wRe,"A",{href:!0});var A4t=s(uQ);dur=r(A4t,"TFElectraForPreTraining"),A4t.forEach(t),cur=r(wRe," (ELECTRA model)"),wRe.forEach(t),mur=i(le),tE=n(le,"LI",{});var ARe=s(tE);Dve=n(ARe,"STRONG",{});var y4t=s(Dve);fur=r(y4t,"flaubert"),y4t.forEach(t),gur=r(ARe," \u2014 "),pQ=n(ARe,"A",{href:!0});var L4t=s(pQ);hur=r(L4t,"TFFlaubertWithLMHeadModel"),L4t.forEach(t),uur=r(ARe," (FlauBERT model)"),ARe.forEach(t),pur=i(le),aE=n(le,"LI",{});var yRe=s(aE);Gve=n(yRe,"STRONG",{});var x4t=s(Gve);_ur=r(x4t,"funnel"),x4t.forEach(t),bur=r(yRe," \u2014 "),_Q=n(yRe,"A",{href:!0});var $4t=s(_Q);vur=r($4t,"TFFunnelForPreTraining"),$4t.forEach(t),Fur=r(yRe," (Funnel Transformer model)"),yRe.forEach(t),Tur=i(le),nE=n(le,"LI",{});var LRe=s(nE);Ove=n(LRe,"STRONG",{});var k4t=s(Ove);Mur=r(k4t,"gpt2"),k4t.forEach(t),Eur=r(LRe," \u2014 "),bQ=n(LRe,"A",{href:!0});var S4t=s(bQ);Cur=r(S4t,"TFGPT2LMHeadModel"),S4t.forEach(t),wur=r(LRe," (OpenAI GPT-2 model)"),LRe.forEach(t),Aur=i(le),sE=n(le,"LI",{});var xRe=s(sE);Vve=n(xRe,"STRONG",{});var R4t=s(Vve);yur=r(R4t,"layoutlm"),R4t.forEach(t),Lur=r(xRe," \u2014 "),vQ=n(xRe,"A",{href:!0});var P4t=s(vQ);xur=r(P4t,"TFLayoutLMForMaskedLM"),P4t.forEach(t),$ur=r(xRe," (LayoutLM model)"),xRe.forEach(t),kur=i(le),lE=n(le,"LI",{});var $Re=s(lE);Xve=n($Re,"STRONG",{});var B4t=s(Xve);Sur=r(B4t,"lxmert"),B4t.forEach(t),Rur=r($Re," \u2014 "),FQ=n($Re,"A",{href:!0});var I4t=s(FQ);Pur=r(I4t,"TFLxmertForPreTraining"),I4t.forEach(t),Bur=r($Re," (LXMERT model)"),$Re.forEach(t),Iur=i(le),iE=n(le,"LI",{});var kRe=s(iE);zve=n(kRe,"STRONG",{});var N4t=s(zve);Nur=r(N4t,"mobilebert"),N4t.forEach(t),qur=r(kRe," \u2014 "),TQ=n(kRe,"A",{href:!0});var q4t=s(TQ);jur=r(q4t,"TFMobileBertForPreTraining"),q4t.forEach(t),Dur=r(kRe," (MobileBERT model)"),kRe.forEach(t),Gur=i(le),dE=n(le,"LI",{});var SRe=s(dE);Wve=n(SRe,"STRONG",{});var j4t=s(Wve);Our=r(j4t,"mpnet"),j4t.forEach(t),Vur=r(SRe," \u2014 "),MQ=n(SRe,"A",{href:!0});var D4t=s(MQ);Xur=r(D4t,"TFMPNetForMaskedLM"),D4t.forEach(t),zur=r(SRe," (MPNet model)"),SRe.forEach(t),Wur=i(le),cE=n(le,"LI",{});var RRe=s(cE);Qve=n(RRe,"STRONG",{});var G4t=s(Qve);Qur=r(G4t,"openai-gpt"),G4t.forEach(t),Hur=r(RRe," \u2014 "),EQ=n(RRe,"A",{href:!0});var O4t=s(EQ);Uur=r(O4t,"TFOpenAIGPTLMHeadModel"),O4t.forEach(t),Jur=r(RRe," (OpenAI GPT model)"),RRe.forEach(t),Yur=i(le),mE=n(le,"LI",{});var PRe=s(mE);Hve=n(PRe,"STRONG",{});var V4t=s(Hve);Kur=r(V4t,"roberta"),V4t.forEach(t),Zur=r(PRe," \u2014 "),CQ=n(PRe,"A",{href:!0});var X4t=s(CQ);epr=r(X4t,"TFRobertaForMaskedLM"),X4t.forEach(t),opr=r(PRe," (RoBERTa model)"),PRe.forEach(t),rpr=i(le),fE=n(le,"LI",{});var BRe=s(fE);Uve=n(BRe,"STRONG",{});var z4t=s(Uve);tpr=r(z4t,"t5"),z4t.forEach(t),apr=r(BRe," \u2014 "),wQ=n(BRe,"A",{href:!0});var W4t=s(wQ);npr=r(W4t,"TFT5ForConditionalGeneration"),W4t.forEach(t),spr=r(BRe," (T5 model)"),BRe.forEach(t),lpr=i(le),gE=n(le,"LI",{});var IRe=s(gE);Jve=n(IRe,"STRONG",{});var Q4t=s(Jve);ipr=r(Q4t,"tapas"),Q4t.forEach(t),dpr=r(IRe," \u2014 "),AQ=n(IRe,"A",{href:!0});var H4t=s(AQ);cpr=r(H4t,"TFTapasForMaskedLM"),H4t.forEach(t),mpr=r(IRe," (TAPAS model)"),IRe.forEach(t),fpr=i(le),hE=n(le,"LI",{});var NRe=s(hE);Yve=n(NRe,"STRONG",{});var U4t=s(Yve);gpr=r(U4t,"transfo-xl"),U4t.forEach(t),hpr=r(NRe," \u2014 "),yQ=n(NRe,"A",{href:!0});var J4t=s(yQ);upr=r(J4t,"TFTransfoXLLMHeadModel"),J4t.forEach(t),ppr=r(NRe," (Transformer-XL model)"),NRe.forEach(t),_pr=i(le),uE=n(le,"LI",{});var qRe=s(uE);Kve=n(qRe,"STRONG",{});var Y4t=s(Kve);bpr=r(Y4t,"vit_mae"),Y4t.forEach(t),vpr=r(qRe," \u2014 "),LQ=n(qRe,"A",{href:!0});var K4t=s(LQ);Fpr=r(K4t,"TFViTMAEForPreTraining"),K4t.forEach(t),Tpr=r(qRe," (ViTMAE model)"),qRe.forEach(t),Mpr=i(le),pE=n(le,"LI",{});var jRe=s(pE);Zve=n(jRe,"STRONG",{});var Z4t=s(Zve);Epr=r(Z4t,"xlm"),Z4t.forEach(t),Cpr=r(jRe," \u2014 "),xQ=n(jRe,"A",{href:!0});var eEt=s(xQ);wpr=r(eEt,"TFXLMWithLMHeadModel"),eEt.forEach(t),Apr=r(jRe," (XLM model)"),jRe.forEach(t),ypr=i(le),_E=n(le,"LI",{});var DRe=s(_E);eFe=n(DRe,"STRONG",{});var oEt=s(eFe);Lpr=r(oEt,"xlm-roberta"),oEt.forEach(t),xpr=r(DRe," \u2014 "),$Q=n(DRe,"A",{href:!0});var rEt=s($Q);$pr=r(rEt,"TFXLMRobertaForMaskedLM"),rEt.forEach(t),kpr=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),Spr=i(le),bE=n(le,"LI",{});var GRe=s(bE);oFe=n(GRe,"STRONG",{});var tEt=s(oFe);Rpr=r(tEt,"xlnet"),tEt.forEach(t),Ppr=r(GRe," \u2014 "),kQ=n(GRe,"A",{href:!0});var aEt=s(kQ);Bpr=r(aEt,"TFXLNetLMHeadModel"),aEt.forEach(t),Ipr=r(GRe," (XLNet model)"),GRe.forEach(t),le.forEach(t),Npr=i(pl),T(vE.$$.fragment,pl),pl.forEach(t),ul.forEach(t),Eje=i(m),Qd=n(m,"H2",{class:!0});var xGe=s(Qd);FE=n(xGe,"A",{id:!0,class:!0,href:!0});var nEt=s(FE);rFe=n(nEt,"SPAN",{});var sEt=s(rFe);T(M7.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),qpr=i(xGe),tFe=n(xGe,"SPAN",{});var lEt=s(tFe);jpr=r(lEt,"TFAutoModelForCausalLM"),lEt.forEach(t),xGe.forEach(t),Cje=i(m),Zo=n(m,"DIV",{class:!0});var _l=s(Zo);T(E7.$$.fragment,_l),Dpr=i(_l),Hd=n(_l,"P",{});var Fee=s(Hd);Gpr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SQ=n(Fee,"A",{href:!0});var iEt=s(SQ);Opr=r(iEt,"from_pretrained()"),iEt.forEach(t),Vpr=r(Fee," class method or the "),RQ=n(Fee,"A",{href:!0});var dEt=s(RQ);Xpr=r(dEt,"from_config()"),dEt.forEach(t),zpr=r(Fee,` class
method.`),Fee.forEach(t),Wpr=i(_l),C7=n(_l,"P",{});var $Ge=s(C7);Qpr=r($Ge,"This class cannot be instantiated directly using "),aFe=n($Ge,"CODE",{});var cEt=s(aFe);Hpr=r(cEt,"__init__()"),cEt.forEach(t),Upr=r($Ge," (throws an error)."),$Ge.forEach(t),Jpr=i(_l),xt=n(_l,"DIV",{class:!0});var SA=s(xt);T(w7.$$.fragment,SA),Ypr=i(SA),nFe=n(SA,"P",{});var mEt=s(nFe);Kpr=r(mEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mEt.forEach(t),Zpr=i(SA),Ud=n(SA,"P",{});var Tee=s(Ud);e_r=r(Tee,`Note:
Loading a model from its configuration file does `),sFe=n(Tee,"STRONG",{});var fEt=s(sFe);o_r=r(fEt,"not"),fEt.forEach(t),r_r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(Tee,"A",{href:!0});var gEt=s(PQ);t_r=r(gEt,"from_pretrained()"),gEt.forEach(t),a_r=r(Tee," to load the model weights."),Tee.forEach(t),n_r=i(SA),T(TE.$$.fragment,SA),SA.forEach(t),s_r=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(A7.$$.fragment,bl),l_r=i(bl),lFe=n(bl,"P",{});var hEt=s(lFe);i_r=r(hEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hEt.forEach(t),d_r=i(bl),en=n(bl,"P",{});var RA=s(en);c_r=r(RA,"The model class to instantiate is selected based on the "),iFe=n(RA,"CODE",{});var uEt=s(iFe);m_r=r(uEt,"model_type"),uEt.forEach(t),f_r=r(RA,` property of the config object (either
passed as an argument or loaded from `),dFe=n(RA,"CODE",{});var pEt=s(dFe);g_r=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),h_r=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(RA,"CODE",{});var _Et=s(cFe);u_r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),p_r=r(RA,":"),RA.forEach(t),__r=i(bl),Te=n(bl,"UL",{});var Ce=s(Te);ME=n(Ce,"LI",{});var ORe=s(ME);mFe=n(ORe,"STRONG",{});var bEt=s(mFe);b_r=r(bEt,"bert"),bEt.forEach(t),v_r=r(ORe," \u2014 "),BQ=n(ORe,"A",{href:!0});var vEt=s(BQ);F_r=r(vEt,"TFBertLMHeadModel"),vEt.forEach(t),T_r=r(ORe," (BERT model)"),ORe.forEach(t),M_r=i(Ce),EE=n(Ce,"LI",{});var VRe=s(EE);fFe=n(VRe,"STRONG",{});var FEt=s(fFe);E_r=r(FEt,"camembert"),FEt.forEach(t),C_r=r(VRe," \u2014 "),IQ=n(VRe,"A",{href:!0});var TEt=s(IQ);w_r=r(TEt,"TFCamembertForCausalLM"),TEt.forEach(t),A_r=r(VRe," (CamemBERT model)"),VRe.forEach(t),y_r=i(Ce),CE=n(Ce,"LI",{});var XRe=s(CE);gFe=n(XRe,"STRONG",{});var MEt=s(gFe);L_r=r(MEt,"ctrl"),MEt.forEach(t),x_r=r(XRe," \u2014 "),NQ=n(XRe,"A",{href:!0});var EEt=s(NQ);$_r=r(EEt,"TFCTRLLMHeadModel"),EEt.forEach(t),k_r=r(XRe," (CTRL model)"),XRe.forEach(t),S_r=i(Ce),wE=n(Ce,"LI",{});var zRe=s(wE);hFe=n(zRe,"STRONG",{});var CEt=s(hFe);R_r=r(CEt,"gpt2"),CEt.forEach(t),P_r=r(zRe," \u2014 "),qQ=n(zRe,"A",{href:!0});var wEt=s(qQ);B_r=r(wEt,"TFGPT2LMHeadModel"),wEt.forEach(t),I_r=r(zRe," (OpenAI GPT-2 model)"),zRe.forEach(t),N_r=i(Ce),AE=n(Ce,"LI",{});var WRe=s(AE);uFe=n(WRe,"STRONG",{});var AEt=s(uFe);q_r=r(AEt,"gptj"),AEt.forEach(t),j_r=r(WRe," \u2014 "),jQ=n(WRe,"A",{href:!0});var yEt=s(jQ);D_r=r(yEt,"TFGPTJForCausalLM"),yEt.forEach(t),G_r=r(WRe," (GPT-J model)"),WRe.forEach(t),O_r=i(Ce),yE=n(Ce,"LI",{});var QRe=s(yE);pFe=n(QRe,"STRONG",{});var LEt=s(pFe);V_r=r(LEt,"openai-gpt"),LEt.forEach(t),X_r=r(QRe," \u2014 "),DQ=n(QRe,"A",{href:!0});var xEt=s(DQ);z_r=r(xEt,"TFOpenAIGPTLMHeadModel"),xEt.forEach(t),W_r=r(QRe," (OpenAI GPT model)"),QRe.forEach(t),Q_r=i(Ce),LE=n(Ce,"LI",{});var HRe=s(LE);_Fe=n(HRe,"STRONG",{});var $Et=s(_Fe);H_r=r($Et,"opt"),$Et.forEach(t),U_r=r(HRe," \u2014 "),GQ=n(HRe,"A",{href:!0});var kEt=s(GQ);J_r=r(kEt,"TFOPTForCausalLM"),kEt.forEach(t),Y_r=r(HRe," (OPT model)"),HRe.forEach(t),K_r=i(Ce),xE=n(Ce,"LI",{});var URe=s(xE);bFe=n(URe,"STRONG",{});var SEt=s(bFe);Z_r=r(SEt,"rembert"),SEt.forEach(t),ebr=r(URe," \u2014 "),OQ=n(URe,"A",{href:!0});var REt=s(OQ);obr=r(REt,"TFRemBertForCausalLM"),REt.forEach(t),rbr=r(URe," (RemBERT model)"),URe.forEach(t),tbr=i(Ce),$E=n(Ce,"LI",{});var JRe=s($E);vFe=n(JRe,"STRONG",{});var PEt=s(vFe);abr=r(PEt,"roberta"),PEt.forEach(t),nbr=r(JRe," \u2014 "),VQ=n(JRe,"A",{href:!0});var BEt=s(VQ);sbr=r(BEt,"TFRobertaForCausalLM"),BEt.forEach(t),lbr=r(JRe," (RoBERTa model)"),JRe.forEach(t),ibr=i(Ce),kE=n(Ce,"LI",{});var YRe=s(kE);FFe=n(YRe,"STRONG",{});var IEt=s(FFe);dbr=r(IEt,"roformer"),IEt.forEach(t),cbr=r(YRe," \u2014 "),XQ=n(YRe,"A",{href:!0});var NEt=s(XQ);mbr=r(NEt,"TFRoFormerForCausalLM"),NEt.forEach(t),fbr=r(YRe," (RoFormer model)"),YRe.forEach(t),gbr=i(Ce),SE=n(Ce,"LI",{});var KRe=s(SE);TFe=n(KRe,"STRONG",{});var qEt=s(TFe);hbr=r(qEt,"transfo-xl"),qEt.forEach(t),ubr=r(KRe," \u2014 "),zQ=n(KRe,"A",{href:!0});var jEt=s(zQ);pbr=r(jEt,"TFTransfoXLLMHeadModel"),jEt.forEach(t),_br=r(KRe," (Transformer-XL model)"),KRe.forEach(t),bbr=i(Ce),RE=n(Ce,"LI",{});var ZRe=s(RE);MFe=n(ZRe,"STRONG",{});var DEt=s(MFe);vbr=r(DEt,"xlm"),DEt.forEach(t),Fbr=r(ZRe," \u2014 "),WQ=n(ZRe,"A",{href:!0});var GEt=s(WQ);Tbr=r(GEt,"TFXLMWithLMHeadModel"),GEt.forEach(t),Mbr=r(ZRe," (XLM model)"),ZRe.forEach(t),Ebr=i(Ce),PE=n(Ce,"LI",{});var ePe=s(PE);EFe=n(ePe,"STRONG",{});var OEt=s(EFe);Cbr=r(OEt,"xlnet"),OEt.forEach(t),wbr=r(ePe," \u2014 "),QQ=n(ePe,"A",{href:!0});var VEt=s(QQ);Abr=r(VEt,"TFXLNetLMHeadModel"),VEt.forEach(t),ybr=r(ePe," (XLNet model)"),ePe.forEach(t),Ce.forEach(t),Lbr=i(bl),T(BE.$$.fragment,bl),bl.forEach(t),_l.forEach(t),wje=i(m),Jd=n(m,"H2",{class:!0});var kGe=s(Jd);IE=n(kGe,"A",{id:!0,class:!0,href:!0});var XEt=s(IE);CFe=n(XEt,"SPAN",{});var zEt=s(CFe);T(y7.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),xbr=i(kGe),wFe=n(kGe,"SPAN",{});var WEt=s(wFe);$br=r(WEt,"TFAutoModelForImageClassification"),WEt.forEach(t),kGe.forEach(t),Aje=i(m),er=n(m,"DIV",{class:!0});var vl=s(er);T(L7.$$.fragment,vl),kbr=i(vl),Yd=n(vl,"P",{});var Mee=s(Yd);Sbr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),HQ=n(Mee,"A",{href:!0});var QEt=s(HQ);Rbr=r(QEt,"from_pretrained()"),QEt.forEach(t),Pbr=r(Mee," class method or the "),UQ=n(Mee,"A",{href:!0});var HEt=s(UQ);Bbr=r(HEt,"from_config()"),HEt.forEach(t),Ibr=r(Mee,` class
method.`),Mee.forEach(t),Nbr=i(vl),x7=n(vl,"P",{});var SGe=s(x7);qbr=r(SGe,"This class cannot be instantiated directly using "),AFe=n(SGe,"CODE",{});var UEt=s(AFe);jbr=r(UEt,"__init__()"),UEt.forEach(t),Dbr=r(SGe," (throws an error)."),SGe.forEach(t),Gbr=i(vl),$t=n(vl,"DIV",{class:!0});var PA=s($t);T($7.$$.fragment,PA),Obr=i(PA),yFe=n(PA,"P",{});var JEt=s(yFe);Vbr=r(JEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),JEt.forEach(t),Xbr=i(PA),Kd=n(PA,"P",{});var Eee=s(Kd);zbr=r(Eee,`Note:
Loading a model from its configuration file does `),LFe=n(Eee,"STRONG",{});var YEt=s(LFe);Wbr=r(YEt,"not"),YEt.forEach(t),Qbr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(Eee,"A",{href:!0});var KEt=s(JQ);Hbr=r(KEt,"from_pretrained()"),KEt.forEach(t),Ubr=r(Eee," to load the model weights."),Eee.forEach(t),Jbr=i(PA),T(NE.$$.fragment,PA),PA.forEach(t),Ybr=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(k7.$$.fragment,Fl),Kbr=i(Fl),xFe=n(Fl,"P",{});var ZEt=s(xFe);Zbr=r(ZEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ZEt.forEach(t),e2r=i(Fl),on=n(Fl,"P",{});var BA=s(on);o2r=r(BA,"The model class to instantiate is selected based on the "),$Fe=n(BA,"CODE",{});var eCt=s($Fe);r2r=r(eCt,"model_type"),eCt.forEach(t),t2r=r(BA,` property of the config object (either
passed as an argument or loaded from `),kFe=n(BA,"CODE",{});var oCt=s(kFe);a2r=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),n2r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(BA,"CODE",{});var rCt=s(SFe);s2r=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),l2r=r(BA,":"),BA.forEach(t),i2r=i(Fl),rn=n(Fl,"UL",{});var IA=s(rn);qE=n(IA,"LI",{});var oPe=s(qE);RFe=n(oPe,"STRONG",{});var tCt=s(RFe);d2r=r(tCt,"convnext"),tCt.forEach(t),c2r=r(oPe," \u2014 "),YQ=n(oPe,"A",{href:!0});var aCt=s(YQ);m2r=r(aCt,"TFConvNextForImageClassification"),aCt.forEach(t),f2r=r(oPe," (ConvNext model)"),oPe.forEach(t),g2r=i(IA),jE=n(IA,"LI",{});var rPe=s(jE);PFe=n(rPe,"STRONG",{});var nCt=s(PFe);h2r=r(nCt,"data2vec-vision"),nCt.forEach(t),u2r=r(rPe," \u2014 "),KQ=n(rPe,"A",{href:!0});var sCt=s(KQ);p2r=r(sCt,"TFData2VecVisionForImageClassification"),sCt.forEach(t),_2r=r(rPe," (Data2VecVision model)"),rPe.forEach(t),b2r=i(IA),DE=n(IA,"LI",{});var tPe=s(DE);BFe=n(tPe,"STRONG",{});var lCt=s(BFe);v2r=r(lCt,"swin"),lCt.forEach(t),F2r=r(tPe," \u2014 "),ZQ=n(tPe,"A",{href:!0});var iCt=s(ZQ);T2r=r(iCt,"TFSwinForImageClassification"),iCt.forEach(t),M2r=r(tPe," (Swin model)"),tPe.forEach(t),E2r=i(IA),GE=n(IA,"LI",{});var aPe=s(GE);IFe=n(aPe,"STRONG",{});var dCt=s(IFe);C2r=r(dCt,"vit"),dCt.forEach(t),w2r=r(aPe," \u2014 "),eH=n(aPe,"A",{href:!0});var cCt=s(eH);A2r=r(cCt,"TFViTForImageClassification"),cCt.forEach(t),y2r=r(aPe," (ViT model)"),aPe.forEach(t),IA.forEach(t),L2r=i(Fl),T(OE.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),yje=i(m),Zd=n(m,"H2",{class:!0});var RGe=s(Zd);VE=n(RGe,"A",{id:!0,class:!0,href:!0});var mCt=s(VE);NFe=n(mCt,"SPAN",{});var fCt=s(NFe);T(S7.$$.fragment,fCt),fCt.forEach(t),mCt.forEach(t),x2r=i(RGe),qFe=n(RGe,"SPAN",{});var gCt=s(qFe);$2r=r(gCt,"TFAutoModelForMaskedLM"),gCt.forEach(t),RGe.forEach(t),Lje=i(m),or=n(m,"DIV",{class:!0});var Tl=s(or);T(R7.$$.fragment,Tl),k2r=i(Tl),ec=n(Tl,"P",{});var Cee=s(ec);S2r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),oH=n(Cee,"A",{href:!0});var hCt=s(oH);R2r=r(hCt,"from_pretrained()"),hCt.forEach(t),P2r=r(Cee," class method or the "),rH=n(Cee,"A",{href:!0});var uCt=s(rH);B2r=r(uCt,"from_config()"),uCt.forEach(t),I2r=r(Cee,` class
method.`),Cee.forEach(t),N2r=i(Tl),P7=n(Tl,"P",{});var PGe=s(P7);q2r=r(PGe,"This class cannot be instantiated directly using "),jFe=n(PGe,"CODE",{});var pCt=s(jFe);j2r=r(pCt,"__init__()"),pCt.forEach(t),D2r=r(PGe," (throws an error)."),PGe.forEach(t),G2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var NA=s(kt);T(B7.$$.fragment,NA),O2r=i(NA),DFe=n(NA,"P",{});var _Ct=s(DFe);V2r=r(_Ct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Ct.forEach(t),X2r=i(NA),oc=n(NA,"P",{});var wee=s(oc);z2r=r(wee,`Note:
Loading a model from its configuration file does `),GFe=n(wee,"STRONG",{});var bCt=s(GFe);W2r=r(bCt,"not"),bCt.forEach(t),Q2r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(wee,"A",{href:!0});var vCt=s(tH);H2r=r(vCt,"from_pretrained()"),vCt.forEach(t),U2r=r(wee," to load the model weights."),wee.forEach(t),J2r=i(NA),T(XE.$$.fragment,NA),NA.forEach(t),Y2r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(I7.$$.fragment,Ml),K2r=i(Ml),OFe=n(Ml,"P",{});var FCt=s(OFe);Z2r=r(FCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FCt.forEach(t),evr=i(Ml),tn=n(Ml,"P",{});var qA=s(tn);ovr=r(qA,"The model class to instantiate is selected based on the "),VFe=n(qA,"CODE",{});var TCt=s(VFe);rvr=r(TCt,"model_type"),TCt.forEach(t),tvr=r(qA,` property of the config object (either
passed as an argument or loaded from `),XFe=n(qA,"CODE",{});var MCt=s(XFe);avr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),nvr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(qA,"CODE",{});var ECt=s(zFe);svr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),lvr=r(qA,":"),qA.forEach(t),ivr=i(Ml),ie=n(Ml,"UL",{});var me=s(ie);zE=n(me,"LI",{});var nPe=s(zE);WFe=n(nPe,"STRONG",{});var CCt=s(WFe);dvr=r(CCt,"albert"),CCt.forEach(t),cvr=r(nPe," \u2014 "),aH=n(nPe,"A",{href:!0});var wCt=s(aH);mvr=r(wCt,"TFAlbertForMaskedLM"),wCt.forEach(t),fvr=r(nPe," (ALBERT model)"),nPe.forEach(t),gvr=i(me),WE=n(me,"LI",{});var sPe=s(WE);QFe=n(sPe,"STRONG",{});var ACt=s(QFe);hvr=r(ACt,"bert"),ACt.forEach(t),uvr=r(sPe," \u2014 "),nH=n(sPe,"A",{href:!0});var yCt=s(nH);pvr=r(yCt,"TFBertForMaskedLM"),yCt.forEach(t),_vr=r(sPe," (BERT model)"),sPe.forEach(t),bvr=i(me),QE=n(me,"LI",{});var lPe=s(QE);HFe=n(lPe,"STRONG",{});var LCt=s(HFe);vvr=r(LCt,"camembert"),LCt.forEach(t),Fvr=r(lPe," \u2014 "),sH=n(lPe,"A",{href:!0});var xCt=s(sH);Tvr=r(xCt,"TFCamembertForMaskedLM"),xCt.forEach(t),Mvr=r(lPe," (CamemBERT model)"),lPe.forEach(t),Evr=i(me),HE=n(me,"LI",{});var iPe=s(HE);UFe=n(iPe,"STRONG",{});var $Ct=s(UFe);Cvr=r($Ct,"convbert"),$Ct.forEach(t),wvr=r(iPe," \u2014 "),lH=n(iPe,"A",{href:!0});var kCt=s(lH);Avr=r(kCt,"TFConvBertForMaskedLM"),kCt.forEach(t),yvr=r(iPe," (ConvBERT model)"),iPe.forEach(t),Lvr=i(me),UE=n(me,"LI",{});var dPe=s(UE);JFe=n(dPe,"STRONG",{});var SCt=s(JFe);xvr=r(SCt,"deberta"),SCt.forEach(t),$vr=r(dPe," \u2014 "),iH=n(dPe,"A",{href:!0});var RCt=s(iH);kvr=r(RCt,"TFDebertaForMaskedLM"),RCt.forEach(t),Svr=r(dPe," (DeBERTa model)"),dPe.forEach(t),Rvr=i(me),JE=n(me,"LI",{});var cPe=s(JE);YFe=n(cPe,"STRONG",{});var PCt=s(YFe);Pvr=r(PCt,"deberta-v2"),PCt.forEach(t),Bvr=r(cPe," \u2014 "),dH=n(cPe,"A",{href:!0});var BCt=s(dH);Ivr=r(BCt,"TFDebertaV2ForMaskedLM"),BCt.forEach(t),Nvr=r(cPe," (DeBERTa-v2 model)"),cPe.forEach(t),qvr=i(me),YE=n(me,"LI",{});var mPe=s(YE);KFe=n(mPe,"STRONG",{});var ICt=s(KFe);jvr=r(ICt,"distilbert"),ICt.forEach(t),Dvr=r(mPe," \u2014 "),cH=n(mPe,"A",{href:!0});var NCt=s(cH);Gvr=r(NCt,"TFDistilBertForMaskedLM"),NCt.forEach(t),Ovr=r(mPe," (DistilBERT model)"),mPe.forEach(t),Vvr=i(me),KE=n(me,"LI",{});var fPe=s(KE);ZFe=n(fPe,"STRONG",{});var qCt=s(ZFe);Xvr=r(qCt,"electra"),qCt.forEach(t),zvr=r(fPe," \u2014 "),mH=n(fPe,"A",{href:!0});var jCt=s(mH);Wvr=r(jCt,"TFElectraForMaskedLM"),jCt.forEach(t),Qvr=r(fPe," (ELECTRA model)"),fPe.forEach(t),Hvr=i(me),ZE=n(me,"LI",{});var gPe=s(ZE);e1e=n(gPe,"STRONG",{});var DCt=s(e1e);Uvr=r(DCt,"flaubert"),DCt.forEach(t),Jvr=r(gPe," \u2014 "),fH=n(gPe,"A",{href:!0});var GCt=s(fH);Yvr=r(GCt,"TFFlaubertWithLMHeadModel"),GCt.forEach(t),Kvr=r(gPe," (FlauBERT model)"),gPe.forEach(t),Zvr=i(me),eC=n(me,"LI",{});var hPe=s(eC);o1e=n(hPe,"STRONG",{});var OCt=s(o1e);eFr=r(OCt,"funnel"),OCt.forEach(t),oFr=r(hPe," \u2014 "),gH=n(hPe,"A",{href:!0});var VCt=s(gH);rFr=r(VCt,"TFFunnelForMaskedLM"),VCt.forEach(t),tFr=r(hPe," (Funnel Transformer model)"),hPe.forEach(t),aFr=i(me),oC=n(me,"LI",{});var uPe=s(oC);r1e=n(uPe,"STRONG",{});var XCt=s(r1e);nFr=r(XCt,"layoutlm"),XCt.forEach(t),sFr=r(uPe," \u2014 "),hH=n(uPe,"A",{href:!0});var zCt=s(hH);lFr=r(zCt,"TFLayoutLMForMaskedLM"),zCt.forEach(t),iFr=r(uPe," (LayoutLM model)"),uPe.forEach(t),dFr=i(me),rC=n(me,"LI",{});var pPe=s(rC);t1e=n(pPe,"STRONG",{});var WCt=s(t1e);cFr=r(WCt,"longformer"),WCt.forEach(t),mFr=r(pPe," \u2014 "),uH=n(pPe,"A",{href:!0});var QCt=s(uH);fFr=r(QCt,"TFLongformerForMaskedLM"),QCt.forEach(t),gFr=r(pPe," (Longformer model)"),pPe.forEach(t),hFr=i(me),tC=n(me,"LI",{});var _Pe=s(tC);a1e=n(_Pe,"STRONG",{});var HCt=s(a1e);uFr=r(HCt,"mobilebert"),HCt.forEach(t),pFr=r(_Pe," \u2014 "),pH=n(_Pe,"A",{href:!0});var UCt=s(pH);_Fr=r(UCt,"TFMobileBertForMaskedLM"),UCt.forEach(t),bFr=r(_Pe," (MobileBERT model)"),_Pe.forEach(t),vFr=i(me),aC=n(me,"LI",{});var bPe=s(aC);n1e=n(bPe,"STRONG",{});var JCt=s(n1e);FFr=r(JCt,"mpnet"),JCt.forEach(t),TFr=r(bPe," \u2014 "),_H=n(bPe,"A",{href:!0});var YCt=s(_H);MFr=r(YCt,"TFMPNetForMaskedLM"),YCt.forEach(t),EFr=r(bPe," (MPNet model)"),bPe.forEach(t),CFr=i(me),nC=n(me,"LI",{});var vPe=s(nC);s1e=n(vPe,"STRONG",{});var KCt=s(s1e);wFr=r(KCt,"rembert"),KCt.forEach(t),AFr=r(vPe," \u2014 "),bH=n(vPe,"A",{href:!0});var ZCt=s(bH);yFr=r(ZCt,"TFRemBertForMaskedLM"),ZCt.forEach(t),LFr=r(vPe," (RemBERT model)"),vPe.forEach(t),xFr=i(me),sC=n(me,"LI",{});var FPe=s(sC);l1e=n(FPe,"STRONG",{});var e5t=s(l1e);$Fr=r(e5t,"roberta"),e5t.forEach(t),kFr=r(FPe," \u2014 "),vH=n(FPe,"A",{href:!0});var o5t=s(vH);SFr=r(o5t,"TFRobertaForMaskedLM"),o5t.forEach(t),RFr=r(FPe," (RoBERTa model)"),FPe.forEach(t),PFr=i(me),lC=n(me,"LI",{});var TPe=s(lC);i1e=n(TPe,"STRONG",{});var r5t=s(i1e);BFr=r(r5t,"roformer"),r5t.forEach(t),IFr=r(TPe," \u2014 "),FH=n(TPe,"A",{href:!0});var t5t=s(FH);NFr=r(t5t,"TFRoFormerForMaskedLM"),t5t.forEach(t),qFr=r(TPe," (RoFormer model)"),TPe.forEach(t),jFr=i(me),iC=n(me,"LI",{});var MPe=s(iC);d1e=n(MPe,"STRONG",{});var a5t=s(d1e);DFr=r(a5t,"tapas"),a5t.forEach(t),GFr=r(MPe," \u2014 "),TH=n(MPe,"A",{href:!0});var n5t=s(TH);OFr=r(n5t,"TFTapasForMaskedLM"),n5t.forEach(t),VFr=r(MPe," (TAPAS model)"),MPe.forEach(t),XFr=i(me),dC=n(me,"LI",{});var EPe=s(dC);c1e=n(EPe,"STRONG",{});var s5t=s(c1e);zFr=r(s5t,"xlm"),s5t.forEach(t),WFr=r(EPe," \u2014 "),MH=n(EPe,"A",{href:!0});var l5t=s(MH);QFr=r(l5t,"TFXLMWithLMHeadModel"),l5t.forEach(t),HFr=r(EPe," (XLM model)"),EPe.forEach(t),UFr=i(me),cC=n(me,"LI",{});var CPe=s(cC);m1e=n(CPe,"STRONG",{});var i5t=s(m1e);JFr=r(i5t,"xlm-roberta"),i5t.forEach(t),YFr=r(CPe," \u2014 "),EH=n(CPe,"A",{href:!0});var d5t=s(EH);KFr=r(d5t,"TFXLMRobertaForMaskedLM"),d5t.forEach(t),ZFr=r(CPe," (XLM-RoBERTa model)"),CPe.forEach(t),me.forEach(t),e1r=i(Ml),T(mC.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),xje=i(m),rc=n(m,"H2",{class:!0});var BGe=s(rc);fC=n(BGe,"A",{id:!0,class:!0,href:!0});var c5t=s(fC);f1e=n(c5t,"SPAN",{});var m5t=s(f1e);T(N7.$$.fragment,m5t),m5t.forEach(t),c5t.forEach(t),o1r=i(BGe),g1e=n(BGe,"SPAN",{});var f5t=s(g1e);r1r=r(f5t,"TFAutoModelForSeq2SeqLM"),f5t.forEach(t),BGe.forEach(t),$je=i(m),rr=n(m,"DIV",{class:!0});var El=s(rr);T(q7.$$.fragment,El),t1r=i(El),tc=n(El,"P",{});var Aee=s(tc);a1r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),CH=n(Aee,"A",{href:!0});var g5t=s(CH);n1r=r(g5t,"from_pretrained()"),g5t.forEach(t),s1r=r(Aee," class method or the "),wH=n(Aee,"A",{href:!0});var h5t=s(wH);l1r=r(h5t,"from_config()"),h5t.forEach(t),i1r=r(Aee,` class
method.`),Aee.forEach(t),d1r=i(El),j7=n(El,"P",{});var IGe=s(j7);c1r=r(IGe,"This class cannot be instantiated directly using "),h1e=n(IGe,"CODE",{});var u5t=s(h1e);m1r=r(u5t,"__init__()"),u5t.forEach(t),f1r=r(IGe," (throws an error)."),IGe.forEach(t),g1r=i(El),St=n(El,"DIV",{class:!0});var jA=s(St);T(D7.$$.fragment,jA),h1r=i(jA),u1e=n(jA,"P",{});var p5t=s(u1e);u1r=r(p5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p5t.forEach(t),p1r=i(jA),ac=n(jA,"P",{});var yee=s(ac);_1r=r(yee,`Note:
Loading a model from its configuration file does `),p1e=n(yee,"STRONG",{});var _5t=s(p1e);b1r=r(_5t,"not"),_5t.forEach(t),v1r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(yee,"A",{href:!0});var b5t=s(AH);F1r=r(b5t,"from_pretrained()"),b5t.forEach(t),T1r=r(yee," to load the model weights."),yee.forEach(t),M1r=i(jA),T(gC.$$.fragment,jA),jA.forEach(t),E1r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(G7.$$.fragment,Cl),C1r=i(Cl),_1e=n(Cl,"P",{});var v5t=s(_1e);w1r=r(v5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v5t.forEach(t),A1r=i(Cl),an=n(Cl,"P",{});var DA=s(an);y1r=r(DA,"The model class to instantiate is selected based on the "),b1e=n(DA,"CODE",{});var F5t=s(b1e);L1r=r(F5t,"model_type"),F5t.forEach(t),x1r=r(DA,` property of the config object (either
passed as an argument or loaded from `),v1e=n(DA,"CODE",{});var T5t=s(v1e);$1r=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),k1r=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(DA,"CODE",{});var M5t=s(F1e);S1r=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),R1r=r(DA,":"),DA.forEach(t),P1r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);hC=n(Be,"LI",{});var wPe=s(hC);T1e=n(wPe,"STRONG",{});var E5t=s(T1e);B1r=r(E5t,"bart"),E5t.forEach(t),I1r=r(wPe," \u2014 "),yH=n(wPe,"A",{href:!0});var C5t=s(yH);N1r=r(C5t,"TFBartForConditionalGeneration"),C5t.forEach(t),q1r=r(wPe," (BART model)"),wPe.forEach(t),j1r=i(Be),uC=n(Be,"LI",{});var APe=s(uC);M1e=n(APe,"STRONG",{});var w5t=s(M1e);D1r=r(w5t,"blenderbot"),w5t.forEach(t),G1r=r(APe," \u2014 "),LH=n(APe,"A",{href:!0});var A5t=s(LH);O1r=r(A5t,"TFBlenderbotForConditionalGeneration"),A5t.forEach(t),V1r=r(APe," (Blenderbot model)"),APe.forEach(t),X1r=i(Be),pC=n(Be,"LI",{});var yPe=s(pC);E1e=n(yPe,"STRONG",{});var y5t=s(E1e);z1r=r(y5t,"blenderbot-small"),y5t.forEach(t),W1r=r(yPe," \u2014 "),xH=n(yPe,"A",{href:!0});var L5t=s(xH);Q1r=r(L5t,"TFBlenderbotSmallForConditionalGeneration"),L5t.forEach(t),H1r=r(yPe," (BlenderbotSmall model)"),yPe.forEach(t),U1r=i(Be),_C=n(Be,"LI",{});var LPe=s(_C);C1e=n(LPe,"STRONG",{});var x5t=s(C1e);J1r=r(x5t,"encoder-decoder"),x5t.forEach(t),Y1r=r(LPe," \u2014 "),$H=n(LPe,"A",{href:!0});var $5t=s($H);K1r=r($5t,"TFEncoderDecoderModel"),$5t.forEach(t),Z1r=r(LPe," (Encoder decoder model)"),LPe.forEach(t),eTr=i(Be),bC=n(Be,"LI",{});var xPe=s(bC);w1e=n(xPe,"STRONG",{});var k5t=s(w1e);oTr=r(k5t,"led"),k5t.forEach(t),rTr=r(xPe," \u2014 "),kH=n(xPe,"A",{href:!0});var S5t=s(kH);tTr=r(S5t,"TFLEDForConditionalGeneration"),S5t.forEach(t),aTr=r(xPe," (LED model)"),xPe.forEach(t),nTr=i(Be),vC=n(Be,"LI",{});var $Pe=s(vC);A1e=n($Pe,"STRONG",{});var R5t=s(A1e);sTr=r(R5t,"marian"),R5t.forEach(t),lTr=r($Pe," \u2014 "),SH=n($Pe,"A",{href:!0});var P5t=s(SH);iTr=r(P5t,"TFMarianMTModel"),P5t.forEach(t),dTr=r($Pe," (Marian model)"),$Pe.forEach(t),cTr=i(Be),FC=n(Be,"LI",{});var kPe=s(FC);y1e=n(kPe,"STRONG",{});var B5t=s(y1e);mTr=r(B5t,"mbart"),B5t.forEach(t),fTr=r(kPe," \u2014 "),RH=n(kPe,"A",{href:!0});var I5t=s(RH);gTr=r(I5t,"TFMBartForConditionalGeneration"),I5t.forEach(t),hTr=r(kPe," (mBART model)"),kPe.forEach(t),uTr=i(Be),TC=n(Be,"LI",{});var SPe=s(TC);L1e=n(SPe,"STRONG",{});var N5t=s(L1e);pTr=r(N5t,"mt5"),N5t.forEach(t),_Tr=r(SPe," \u2014 "),PH=n(SPe,"A",{href:!0});var q5t=s(PH);bTr=r(q5t,"TFMT5ForConditionalGeneration"),q5t.forEach(t),vTr=r(SPe," (mT5 model)"),SPe.forEach(t),FTr=i(Be),MC=n(Be,"LI",{});var RPe=s(MC);x1e=n(RPe,"STRONG",{});var j5t=s(x1e);TTr=r(j5t,"pegasus"),j5t.forEach(t),MTr=r(RPe," \u2014 "),BH=n(RPe,"A",{href:!0});var D5t=s(BH);ETr=r(D5t,"TFPegasusForConditionalGeneration"),D5t.forEach(t),CTr=r(RPe," (Pegasus model)"),RPe.forEach(t),wTr=i(Be),EC=n(Be,"LI",{});var PPe=s(EC);$1e=n(PPe,"STRONG",{});var G5t=s($1e);ATr=r(G5t,"t5"),G5t.forEach(t),yTr=r(PPe," \u2014 "),IH=n(PPe,"A",{href:!0});var O5t=s(IH);LTr=r(O5t,"TFT5ForConditionalGeneration"),O5t.forEach(t),xTr=r(PPe," (T5 model)"),PPe.forEach(t),Be.forEach(t),$Tr=i(Cl),T(CC.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),kje=i(m),nc=n(m,"H2",{class:!0});var NGe=s(nc);wC=n(NGe,"A",{id:!0,class:!0,href:!0});var V5t=s(wC);k1e=n(V5t,"SPAN",{});var X5t=s(k1e);T(O7.$$.fragment,X5t),X5t.forEach(t),V5t.forEach(t),kTr=i(NGe),S1e=n(NGe,"SPAN",{});var z5t=s(S1e);STr=r(z5t,"TFAutoModelForSequenceClassification"),z5t.forEach(t),NGe.forEach(t),Sje=i(m),tr=n(m,"DIV",{class:!0});var wl=s(tr);T(V7.$$.fragment,wl),RTr=i(wl),sc=n(wl,"P",{});var Lee=s(sc);PTr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NH=n(Lee,"A",{href:!0});var W5t=s(NH);BTr=r(W5t,"from_pretrained()"),W5t.forEach(t),ITr=r(Lee," class method or the "),qH=n(Lee,"A",{href:!0});var Q5t=s(qH);NTr=r(Q5t,"from_config()"),Q5t.forEach(t),qTr=r(Lee,` class
method.`),Lee.forEach(t),jTr=i(wl),X7=n(wl,"P",{});var qGe=s(X7);DTr=r(qGe,"This class cannot be instantiated directly using "),R1e=n(qGe,"CODE",{});var H5t=s(R1e);GTr=r(H5t,"__init__()"),H5t.forEach(t),OTr=r(qGe," (throws an error)."),qGe.forEach(t),VTr=i(wl),Rt=n(wl,"DIV",{class:!0});var GA=s(Rt);T(z7.$$.fragment,GA),XTr=i(GA),P1e=n(GA,"P",{});var U5t=s(P1e);zTr=r(U5t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),U5t.forEach(t),WTr=i(GA),lc=n(GA,"P",{});var xee=s(lc);QTr=r(xee,`Note:
Loading a model from its configuration file does `),B1e=n(xee,"STRONG",{});var J5t=s(B1e);HTr=r(J5t,"not"),J5t.forEach(t),UTr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(xee,"A",{href:!0});var Y5t=s(jH);JTr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),YTr=r(xee," to load the model weights."),xee.forEach(t),KTr=i(GA),T(AC.$$.fragment,GA),GA.forEach(t),ZTr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(W7.$$.fragment,Al),eMr=i(Al),I1e=n(Al,"P",{});var K5t=s(I1e);oMr=r(K5t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K5t.forEach(t),rMr=i(Al),nn=n(Al,"P",{});var OA=s(nn);tMr=r(OA,"The model class to instantiate is selected based on the "),N1e=n(OA,"CODE",{});var Z5t=s(N1e);aMr=r(Z5t,"model_type"),Z5t.forEach(t),nMr=r(OA,` property of the config object (either
passed as an argument or loaded from `),q1e=n(OA,"CODE",{});var e3t=s(q1e);sMr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),lMr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(OA,"CODE",{});var o3t=s(j1e);iMr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),dMr=r(OA,":"),OA.forEach(t),cMr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);yC=n(ae,"LI",{});var BPe=s(yC);D1e=n(BPe,"STRONG",{});var r3t=s(D1e);mMr=r(r3t,"albert"),r3t.forEach(t),fMr=r(BPe," \u2014 "),DH=n(BPe,"A",{href:!0});var t3t=s(DH);gMr=r(t3t,"TFAlbertForSequenceClassification"),t3t.forEach(t),hMr=r(BPe," (ALBERT model)"),BPe.forEach(t),uMr=i(ae),LC=n(ae,"LI",{});var IPe=s(LC);G1e=n(IPe,"STRONG",{});var a3t=s(G1e);pMr=r(a3t,"bert"),a3t.forEach(t),_Mr=r(IPe," \u2014 "),GH=n(IPe,"A",{href:!0});var n3t=s(GH);bMr=r(n3t,"TFBertForSequenceClassification"),n3t.forEach(t),vMr=r(IPe," (BERT model)"),IPe.forEach(t),FMr=i(ae),xC=n(ae,"LI",{});var NPe=s(xC);O1e=n(NPe,"STRONG",{});var s3t=s(O1e);TMr=r(s3t,"camembert"),s3t.forEach(t),MMr=r(NPe," \u2014 "),OH=n(NPe,"A",{href:!0});var l3t=s(OH);EMr=r(l3t,"TFCamembertForSequenceClassification"),l3t.forEach(t),CMr=r(NPe," (CamemBERT model)"),NPe.forEach(t),wMr=i(ae),$C=n(ae,"LI",{});var qPe=s($C);V1e=n(qPe,"STRONG",{});var i3t=s(V1e);AMr=r(i3t,"convbert"),i3t.forEach(t),yMr=r(qPe," \u2014 "),VH=n(qPe,"A",{href:!0});var d3t=s(VH);LMr=r(d3t,"TFConvBertForSequenceClassification"),d3t.forEach(t),xMr=r(qPe," (ConvBERT model)"),qPe.forEach(t),$Mr=i(ae),kC=n(ae,"LI",{});var jPe=s(kC);X1e=n(jPe,"STRONG",{});var c3t=s(X1e);kMr=r(c3t,"ctrl"),c3t.forEach(t),SMr=r(jPe," \u2014 "),XH=n(jPe,"A",{href:!0});var m3t=s(XH);RMr=r(m3t,"TFCTRLForSequenceClassification"),m3t.forEach(t),PMr=r(jPe," (CTRL model)"),jPe.forEach(t),BMr=i(ae),SC=n(ae,"LI",{});var DPe=s(SC);z1e=n(DPe,"STRONG",{});var f3t=s(z1e);IMr=r(f3t,"deberta"),f3t.forEach(t),NMr=r(DPe," \u2014 "),zH=n(DPe,"A",{href:!0});var g3t=s(zH);qMr=r(g3t,"TFDebertaForSequenceClassification"),g3t.forEach(t),jMr=r(DPe," (DeBERTa model)"),DPe.forEach(t),DMr=i(ae),RC=n(ae,"LI",{});var GPe=s(RC);W1e=n(GPe,"STRONG",{});var h3t=s(W1e);GMr=r(h3t,"deberta-v2"),h3t.forEach(t),OMr=r(GPe," \u2014 "),WH=n(GPe,"A",{href:!0});var u3t=s(WH);VMr=r(u3t,"TFDebertaV2ForSequenceClassification"),u3t.forEach(t),XMr=r(GPe," (DeBERTa-v2 model)"),GPe.forEach(t),zMr=i(ae),PC=n(ae,"LI",{});var OPe=s(PC);Q1e=n(OPe,"STRONG",{});var p3t=s(Q1e);WMr=r(p3t,"distilbert"),p3t.forEach(t),QMr=r(OPe," \u2014 "),QH=n(OPe,"A",{href:!0});var _3t=s(QH);HMr=r(_3t,"TFDistilBertForSequenceClassification"),_3t.forEach(t),UMr=r(OPe," (DistilBERT model)"),OPe.forEach(t),JMr=i(ae),BC=n(ae,"LI",{});var VPe=s(BC);H1e=n(VPe,"STRONG",{});var b3t=s(H1e);YMr=r(b3t,"electra"),b3t.forEach(t),KMr=r(VPe," \u2014 "),HH=n(VPe,"A",{href:!0});var v3t=s(HH);ZMr=r(v3t,"TFElectraForSequenceClassification"),v3t.forEach(t),e4r=r(VPe," (ELECTRA model)"),VPe.forEach(t),o4r=i(ae),IC=n(ae,"LI",{});var XPe=s(IC);U1e=n(XPe,"STRONG",{});var F3t=s(U1e);r4r=r(F3t,"flaubert"),F3t.forEach(t),t4r=r(XPe," \u2014 "),UH=n(XPe,"A",{href:!0});var T3t=s(UH);a4r=r(T3t,"TFFlaubertForSequenceClassification"),T3t.forEach(t),n4r=r(XPe," (FlauBERT model)"),XPe.forEach(t),s4r=i(ae),NC=n(ae,"LI",{});var zPe=s(NC);J1e=n(zPe,"STRONG",{});var M3t=s(J1e);l4r=r(M3t,"funnel"),M3t.forEach(t),i4r=r(zPe," \u2014 "),JH=n(zPe,"A",{href:!0});var E3t=s(JH);d4r=r(E3t,"TFFunnelForSequenceClassification"),E3t.forEach(t),c4r=r(zPe," (Funnel Transformer model)"),zPe.forEach(t),m4r=i(ae),qC=n(ae,"LI",{});var WPe=s(qC);Y1e=n(WPe,"STRONG",{});var C3t=s(Y1e);f4r=r(C3t,"gpt2"),C3t.forEach(t),g4r=r(WPe," \u2014 "),YH=n(WPe,"A",{href:!0});var w3t=s(YH);h4r=r(w3t,"TFGPT2ForSequenceClassification"),w3t.forEach(t),u4r=r(WPe," (OpenAI GPT-2 model)"),WPe.forEach(t),p4r=i(ae),jC=n(ae,"LI",{});var QPe=s(jC);K1e=n(QPe,"STRONG",{});var A3t=s(K1e);_4r=r(A3t,"gptj"),A3t.forEach(t),b4r=r(QPe," \u2014 "),KH=n(QPe,"A",{href:!0});var y3t=s(KH);v4r=r(y3t,"TFGPTJForSequenceClassification"),y3t.forEach(t),F4r=r(QPe," (GPT-J model)"),QPe.forEach(t),T4r=i(ae),DC=n(ae,"LI",{});var HPe=s(DC);Z1e=n(HPe,"STRONG",{});var L3t=s(Z1e);M4r=r(L3t,"layoutlm"),L3t.forEach(t),E4r=r(HPe," \u2014 "),ZH=n(HPe,"A",{href:!0});var x3t=s(ZH);C4r=r(x3t,"TFLayoutLMForSequenceClassification"),x3t.forEach(t),w4r=r(HPe," (LayoutLM model)"),HPe.forEach(t),A4r=i(ae),GC=n(ae,"LI",{});var UPe=s(GC);eTe=n(UPe,"STRONG",{});var $3t=s(eTe);y4r=r($3t,"longformer"),$3t.forEach(t),L4r=r(UPe," \u2014 "),eU=n(UPe,"A",{href:!0});var k3t=s(eU);x4r=r(k3t,"TFLongformerForSequenceClassification"),k3t.forEach(t),$4r=r(UPe," (Longformer model)"),UPe.forEach(t),k4r=i(ae),OC=n(ae,"LI",{});var JPe=s(OC);oTe=n(JPe,"STRONG",{});var S3t=s(oTe);S4r=r(S3t,"mobilebert"),S3t.forEach(t),R4r=r(JPe," \u2014 "),oU=n(JPe,"A",{href:!0});var R3t=s(oU);P4r=r(R3t,"TFMobileBertForSequenceClassification"),R3t.forEach(t),B4r=r(JPe," (MobileBERT model)"),JPe.forEach(t),I4r=i(ae),VC=n(ae,"LI",{});var YPe=s(VC);rTe=n(YPe,"STRONG",{});var P3t=s(rTe);N4r=r(P3t,"mpnet"),P3t.forEach(t),q4r=r(YPe," \u2014 "),rU=n(YPe,"A",{href:!0});var B3t=s(rU);j4r=r(B3t,"TFMPNetForSequenceClassification"),B3t.forEach(t),D4r=r(YPe," (MPNet model)"),YPe.forEach(t),G4r=i(ae),XC=n(ae,"LI",{});var KPe=s(XC);tTe=n(KPe,"STRONG",{});var I3t=s(tTe);O4r=r(I3t,"openai-gpt"),I3t.forEach(t),V4r=r(KPe," \u2014 "),tU=n(KPe,"A",{href:!0});var N3t=s(tU);X4r=r(N3t,"TFOpenAIGPTForSequenceClassification"),N3t.forEach(t),z4r=r(KPe," (OpenAI GPT model)"),KPe.forEach(t),W4r=i(ae),zC=n(ae,"LI",{});var ZPe=s(zC);aTe=n(ZPe,"STRONG",{});var q3t=s(aTe);Q4r=r(q3t,"rembert"),q3t.forEach(t),H4r=r(ZPe," \u2014 "),aU=n(ZPe,"A",{href:!0});var j3t=s(aU);U4r=r(j3t,"TFRemBertForSequenceClassification"),j3t.forEach(t),J4r=r(ZPe," (RemBERT model)"),ZPe.forEach(t),Y4r=i(ae),WC=n(ae,"LI",{});var eBe=s(WC);nTe=n(eBe,"STRONG",{});var D3t=s(nTe);K4r=r(D3t,"roberta"),D3t.forEach(t),Z4r=r(eBe," \u2014 "),nU=n(eBe,"A",{href:!0});var G3t=s(nU);eEr=r(G3t,"TFRobertaForSequenceClassification"),G3t.forEach(t),oEr=r(eBe," (RoBERTa model)"),eBe.forEach(t),rEr=i(ae),QC=n(ae,"LI",{});var oBe=s(QC);sTe=n(oBe,"STRONG",{});var O3t=s(sTe);tEr=r(O3t,"roformer"),O3t.forEach(t),aEr=r(oBe," \u2014 "),sU=n(oBe,"A",{href:!0});var V3t=s(sU);nEr=r(V3t,"TFRoFormerForSequenceClassification"),V3t.forEach(t),sEr=r(oBe," (RoFormer model)"),oBe.forEach(t),lEr=i(ae),HC=n(ae,"LI",{});var rBe=s(HC);lTe=n(rBe,"STRONG",{});var X3t=s(lTe);iEr=r(X3t,"tapas"),X3t.forEach(t),dEr=r(rBe," \u2014 "),lU=n(rBe,"A",{href:!0});var z3t=s(lU);cEr=r(z3t,"TFTapasForSequenceClassification"),z3t.forEach(t),mEr=r(rBe," (TAPAS model)"),rBe.forEach(t),fEr=i(ae),UC=n(ae,"LI",{});var tBe=s(UC);iTe=n(tBe,"STRONG",{});var W3t=s(iTe);gEr=r(W3t,"transfo-xl"),W3t.forEach(t),hEr=r(tBe," \u2014 "),iU=n(tBe,"A",{href:!0});var Q3t=s(iU);uEr=r(Q3t,"TFTransfoXLForSequenceClassification"),Q3t.forEach(t),pEr=r(tBe," (Transformer-XL model)"),tBe.forEach(t),_Er=i(ae),JC=n(ae,"LI",{});var aBe=s(JC);dTe=n(aBe,"STRONG",{});var H3t=s(dTe);bEr=r(H3t,"xlm"),H3t.forEach(t),vEr=r(aBe," \u2014 "),dU=n(aBe,"A",{href:!0});var U3t=s(dU);FEr=r(U3t,"TFXLMForSequenceClassification"),U3t.forEach(t),TEr=r(aBe," (XLM model)"),aBe.forEach(t),MEr=i(ae),YC=n(ae,"LI",{});var nBe=s(YC);cTe=n(nBe,"STRONG",{});var J3t=s(cTe);EEr=r(J3t,"xlm-roberta"),J3t.forEach(t),CEr=r(nBe," \u2014 "),cU=n(nBe,"A",{href:!0});var Y3t=s(cU);wEr=r(Y3t,"TFXLMRobertaForSequenceClassification"),Y3t.forEach(t),AEr=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),yEr=i(ae),KC=n(ae,"LI",{});var sBe=s(KC);mTe=n(sBe,"STRONG",{});var K3t=s(mTe);LEr=r(K3t,"xlnet"),K3t.forEach(t),xEr=r(sBe," \u2014 "),mU=n(sBe,"A",{href:!0});var Z3t=s(mU);$Er=r(Z3t,"TFXLNetForSequenceClassification"),Z3t.forEach(t),kEr=r(sBe," (XLNet model)"),sBe.forEach(t),ae.forEach(t),SEr=i(Al),T(ZC.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Rje=i(m),ic=n(m,"H2",{class:!0});var jGe=s(ic);e5=n(jGe,"A",{id:!0,class:!0,href:!0});var ewt=s(e5);fTe=n(ewt,"SPAN",{});var owt=s(fTe);T(Q7.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),REr=i(jGe),gTe=n(jGe,"SPAN",{});var rwt=s(gTe);PEr=r(rwt,"TFAutoModelForMultipleChoice"),rwt.forEach(t),jGe.forEach(t),Pje=i(m),ar=n(m,"DIV",{class:!0});var yl=s(ar);T(H7.$$.fragment,yl),BEr=i(yl),dc=n(yl,"P",{});var $ee=s(dc);IEr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fU=n($ee,"A",{href:!0});var twt=s(fU);NEr=r(twt,"from_pretrained()"),twt.forEach(t),qEr=r($ee," class method or the "),gU=n($ee,"A",{href:!0});var awt=s(gU);jEr=r(awt,"from_config()"),awt.forEach(t),DEr=r($ee,` class
method.`),$ee.forEach(t),GEr=i(yl),U7=n(yl,"P",{});var DGe=s(U7);OEr=r(DGe,"This class cannot be instantiated directly using "),hTe=n(DGe,"CODE",{});var nwt=s(hTe);VEr=r(nwt,"__init__()"),nwt.forEach(t),XEr=r(DGe," (throws an error)."),DGe.forEach(t),zEr=i(yl),Pt=n(yl,"DIV",{class:!0});var VA=s(Pt);T(J7.$$.fragment,VA),WEr=i(VA),uTe=n(VA,"P",{});var swt=s(uTe);QEr=r(swt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),swt.forEach(t),HEr=i(VA),cc=n(VA,"P",{});var kee=s(cc);UEr=r(kee,`Note:
Loading a model from its configuration file does `),pTe=n(kee,"STRONG",{});var lwt=s(pTe);JEr=r(lwt,"not"),lwt.forEach(t),YEr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(kee,"A",{href:!0});var iwt=s(hU);KEr=r(iwt,"from_pretrained()"),iwt.forEach(t),ZEr=r(kee," to load the model weights."),kee.forEach(t),eCr=i(VA),T(o5.$$.fragment,VA),VA.forEach(t),oCr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(Y7.$$.fragment,Ll),rCr=i(Ll),_Te=n(Ll,"P",{});var dwt=s(_Te);tCr=r(dwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dwt.forEach(t),aCr=i(Ll),sn=n(Ll,"P",{});var XA=s(sn);nCr=r(XA,"The model class to instantiate is selected based on the "),bTe=n(XA,"CODE",{});var cwt=s(bTe);sCr=r(cwt,"model_type"),cwt.forEach(t),lCr=r(XA,` property of the config object (either
passed as an argument or loaded from `),vTe=n(XA,"CODE",{});var mwt=s(vTe);iCr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),dCr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(XA,"CODE",{});var fwt=s(FTe);cCr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),mCr=r(XA,":"),XA.forEach(t),fCr=i(Ll),ue=n(Ll,"UL",{});var be=s(ue);r5=n(be,"LI",{});var lBe=s(r5);TTe=n(lBe,"STRONG",{});var gwt=s(TTe);gCr=r(gwt,"albert"),gwt.forEach(t),hCr=r(lBe," \u2014 "),uU=n(lBe,"A",{href:!0});var hwt=s(uU);uCr=r(hwt,"TFAlbertForMultipleChoice"),hwt.forEach(t),pCr=r(lBe," (ALBERT model)"),lBe.forEach(t),_Cr=i(be),t5=n(be,"LI",{});var iBe=s(t5);MTe=n(iBe,"STRONG",{});var uwt=s(MTe);bCr=r(uwt,"bert"),uwt.forEach(t),vCr=r(iBe," \u2014 "),pU=n(iBe,"A",{href:!0});var pwt=s(pU);FCr=r(pwt,"TFBertForMultipleChoice"),pwt.forEach(t),TCr=r(iBe," (BERT model)"),iBe.forEach(t),MCr=i(be),a5=n(be,"LI",{});var dBe=s(a5);ETe=n(dBe,"STRONG",{});var _wt=s(ETe);ECr=r(_wt,"camembert"),_wt.forEach(t),CCr=r(dBe," \u2014 "),_U=n(dBe,"A",{href:!0});var bwt=s(_U);wCr=r(bwt,"TFCamembertForMultipleChoice"),bwt.forEach(t),ACr=r(dBe," (CamemBERT model)"),dBe.forEach(t),yCr=i(be),n5=n(be,"LI",{});var cBe=s(n5);CTe=n(cBe,"STRONG",{});var vwt=s(CTe);LCr=r(vwt,"convbert"),vwt.forEach(t),xCr=r(cBe," \u2014 "),bU=n(cBe,"A",{href:!0});var Fwt=s(bU);$Cr=r(Fwt,"TFConvBertForMultipleChoice"),Fwt.forEach(t),kCr=r(cBe," (ConvBERT model)"),cBe.forEach(t),SCr=i(be),s5=n(be,"LI",{});var mBe=s(s5);wTe=n(mBe,"STRONG",{});var Twt=s(wTe);RCr=r(Twt,"distilbert"),Twt.forEach(t),PCr=r(mBe," \u2014 "),vU=n(mBe,"A",{href:!0});var Mwt=s(vU);BCr=r(Mwt,"TFDistilBertForMultipleChoice"),Mwt.forEach(t),ICr=r(mBe," (DistilBERT model)"),mBe.forEach(t),NCr=i(be),l5=n(be,"LI",{});var fBe=s(l5);ATe=n(fBe,"STRONG",{});var Ewt=s(ATe);qCr=r(Ewt,"electra"),Ewt.forEach(t),jCr=r(fBe," \u2014 "),FU=n(fBe,"A",{href:!0});var Cwt=s(FU);DCr=r(Cwt,"TFElectraForMultipleChoice"),Cwt.forEach(t),GCr=r(fBe," (ELECTRA model)"),fBe.forEach(t),OCr=i(be),i5=n(be,"LI",{});var gBe=s(i5);yTe=n(gBe,"STRONG",{});var wwt=s(yTe);VCr=r(wwt,"flaubert"),wwt.forEach(t),XCr=r(gBe," \u2014 "),TU=n(gBe,"A",{href:!0});var Awt=s(TU);zCr=r(Awt,"TFFlaubertForMultipleChoice"),Awt.forEach(t),WCr=r(gBe," (FlauBERT model)"),gBe.forEach(t),QCr=i(be),d5=n(be,"LI",{});var hBe=s(d5);LTe=n(hBe,"STRONG",{});var ywt=s(LTe);HCr=r(ywt,"funnel"),ywt.forEach(t),UCr=r(hBe," \u2014 "),MU=n(hBe,"A",{href:!0});var Lwt=s(MU);JCr=r(Lwt,"TFFunnelForMultipleChoice"),Lwt.forEach(t),YCr=r(hBe," (Funnel Transformer model)"),hBe.forEach(t),KCr=i(be),c5=n(be,"LI",{});var uBe=s(c5);xTe=n(uBe,"STRONG",{});var xwt=s(xTe);ZCr=r(xwt,"longformer"),xwt.forEach(t),e5r=r(uBe," \u2014 "),EU=n(uBe,"A",{href:!0});var $wt=s(EU);o5r=r($wt,"TFLongformerForMultipleChoice"),$wt.forEach(t),r5r=r(uBe," (Longformer model)"),uBe.forEach(t),t5r=i(be),m5=n(be,"LI",{});var pBe=s(m5);$Te=n(pBe,"STRONG",{});var kwt=s($Te);a5r=r(kwt,"mobilebert"),kwt.forEach(t),n5r=r(pBe," \u2014 "),CU=n(pBe,"A",{href:!0});var Swt=s(CU);s5r=r(Swt,"TFMobileBertForMultipleChoice"),Swt.forEach(t),l5r=r(pBe," (MobileBERT model)"),pBe.forEach(t),i5r=i(be),f5=n(be,"LI",{});var _Be=s(f5);kTe=n(_Be,"STRONG",{});var Rwt=s(kTe);d5r=r(Rwt,"mpnet"),Rwt.forEach(t),c5r=r(_Be," \u2014 "),wU=n(_Be,"A",{href:!0});var Pwt=s(wU);m5r=r(Pwt,"TFMPNetForMultipleChoice"),Pwt.forEach(t),f5r=r(_Be," (MPNet model)"),_Be.forEach(t),g5r=i(be),g5=n(be,"LI",{});var bBe=s(g5);STe=n(bBe,"STRONG",{});var Bwt=s(STe);h5r=r(Bwt,"rembert"),Bwt.forEach(t),u5r=r(bBe," \u2014 "),AU=n(bBe,"A",{href:!0});var Iwt=s(AU);p5r=r(Iwt,"TFRemBertForMultipleChoice"),Iwt.forEach(t),_5r=r(bBe," (RemBERT model)"),bBe.forEach(t),b5r=i(be),h5=n(be,"LI",{});var vBe=s(h5);RTe=n(vBe,"STRONG",{});var Nwt=s(RTe);v5r=r(Nwt,"roberta"),Nwt.forEach(t),F5r=r(vBe," \u2014 "),yU=n(vBe,"A",{href:!0});var qwt=s(yU);T5r=r(qwt,"TFRobertaForMultipleChoice"),qwt.forEach(t),M5r=r(vBe," (RoBERTa model)"),vBe.forEach(t),E5r=i(be),u5=n(be,"LI",{});var FBe=s(u5);PTe=n(FBe,"STRONG",{});var jwt=s(PTe);C5r=r(jwt,"roformer"),jwt.forEach(t),w5r=r(FBe," \u2014 "),LU=n(FBe,"A",{href:!0});var Dwt=s(LU);A5r=r(Dwt,"TFRoFormerForMultipleChoice"),Dwt.forEach(t),y5r=r(FBe," (RoFormer model)"),FBe.forEach(t),L5r=i(be),p5=n(be,"LI",{});var TBe=s(p5);BTe=n(TBe,"STRONG",{});var Gwt=s(BTe);x5r=r(Gwt,"xlm"),Gwt.forEach(t),$5r=r(TBe," \u2014 "),xU=n(TBe,"A",{href:!0});var Owt=s(xU);k5r=r(Owt,"TFXLMForMultipleChoice"),Owt.forEach(t),S5r=r(TBe," (XLM model)"),TBe.forEach(t),R5r=i(be),_5=n(be,"LI",{});var MBe=s(_5);ITe=n(MBe,"STRONG",{});var Vwt=s(ITe);P5r=r(Vwt,"xlm-roberta"),Vwt.forEach(t),B5r=r(MBe," \u2014 "),$U=n(MBe,"A",{href:!0});var Xwt=s($U);I5r=r(Xwt,"TFXLMRobertaForMultipleChoice"),Xwt.forEach(t),N5r=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),q5r=i(be),b5=n(be,"LI",{});var EBe=s(b5);NTe=n(EBe,"STRONG",{});var zwt=s(NTe);j5r=r(zwt,"xlnet"),zwt.forEach(t),D5r=r(EBe," \u2014 "),kU=n(EBe,"A",{href:!0});var Wwt=s(kU);G5r=r(Wwt,"TFXLNetForMultipleChoice"),Wwt.forEach(t),O5r=r(EBe," (XLNet model)"),EBe.forEach(t),be.forEach(t),V5r=i(Ll),T(v5.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Bje=i(m),mc=n(m,"H2",{class:!0});var GGe=s(mc);F5=n(GGe,"A",{id:!0,class:!0,href:!0});var Qwt=s(F5);qTe=n(Qwt,"SPAN",{});var Hwt=s(qTe);T(K7.$$.fragment,Hwt),Hwt.forEach(t),Qwt.forEach(t),X5r=i(GGe),jTe=n(GGe,"SPAN",{});var Uwt=s(jTe);z5r=r(Uwt,"TFAutoModelForNextSentencePrediction"),Uwt.forEach(t),GGe.forEach(t),Ije=i(m),nr=n(m,"DIV",{class:!0});var xl=s(nr);T(Z7.$$.fragment,xl),W5r=i(xl),fc=n(xl,"P",{});var See=s(fc);Q5r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),SU=n(See,"A",{href:!0});var Jwt=s(SU);H5r=r(Jwt,"from_pretrained()"),Jwt.forEach(t),U5r=r(See," class method or the "),RU=n(See,"A",{href:!0});var Ywt=s(RU);J5r=r(Ywt,"from_config()"),Ywt.forEach(t),Y5r=r(See,` class
method.`),See.forEach(t),K5r=i(xl),e9=n(xl,"P",{});var OGe=s(e9);Z5r=r(OGe,"This class cannot be instantiated directly using "),DTe=n(OGe,"CODE",{});var Kwt=s(DTe);e3r=r(Kwt,"__init__()"),Kwt.forEach(t),o3r=r(OGe," (throws an error)."),OGe.forEach(t),r3r=i(xl),Bt=n(xl,"DIV",{class:!0});var zA=s(Bt);T(o9.$$.fragment,zA),t3r=i(zA),GTe=n(zA,"P",{});var Zwt=s(GTe);a3r=r(Zwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Zwt.forEach(t),n3r=i(zA),gc=n(zA,"P",{});var Ree=s(gc);s3r=r(Ree,`Note:
Loading a model from its configuration file does `),OTe=n(Ree,"STRONG",{});var e0t=s(OTe);l3r=r(e0t,"not"),e0t.forEach(t),i3r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(Ree,"A",{href:!0});var o0t=s(PU);d3r=r(o0t,"from_pretrained()"),o0t.forEach(t),c3r=r(Ree," to load the model weights."),Ree.forEach(t),m3r=i(zA),T(T5.$$.fragment,zA),zA.forEach(t),f3r=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(r9.$$.fragment,$l),g3r=i($l),VTe=n($l,"P",{});var r0t=s(VTe);h3r=r(r0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),r0t.forEach(t),u3r=i($l),ln=n($l,"P",{});var WA=s(ln);p3r=r(WA,"The model class to instantiate is selected based on the "),XTe=n(WA,"CODE",{});var t0t=s(XTe);_3r=r(t0t,"model_type"),t0t.forEach(t),b3r=r(WA,` property of the config object (either
passed as an argument or loaded from `),zTe=n(WA,"CODE",{});var a0t=s(zTe);v3r=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),F3r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(WA,"CODE",{});var n0t=s(WTe);T3r=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),M3r=r(WA,":"),WA.forEach(t),E3r=i($l),t9=n($l,"UL",{});var VGe=s(t9);M5=n(VGe,"LI",{});var CBe=s(M5);QTe=n(CBe,"STRONG",{});var s0t=s(QTe);C3r=r(s0t,"bert"),s0t.forEach(t),w3r=r(CBe," \u2014 "),BU=n(CBe,"A",{href:!0});var l0t=s(BU);A3r=r(l0t,"TFBertForNextSentencePrediction"),l0t.forEach(t),y3r=r(CBe," (BERT model)"),CBe.forEach(t),L3r=i(VGe),E5=n(VGe,"LI",{});var wBe=s(E5);HTe=n(wBe,"STRONG",{});var i0t=s(HTe);x3r=r(i0t,"mobilebert"),i0t.forEach(t),$3r=r(wBe," \u2014 "),IU=n(wBe,"A",{href:!0});var d0t=s(IU);k3r=r(d0t,"TFMobileBertForNextSentencePrediction"),d0t.forEach(t),S3r=r(wBe," (MobileBERT model)"),wBe.forEach(t),VGe.forEach(t),R3r=i($l),T(C5.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Nje=i(m),hc=n(m,"H2",{class:!0});var XGe=s(hc);w5=n(XGe,"A",{id:!0,class:!0,href:!0});var c0t=s(w5);UTe=n(c0t,"SPAN",{});var m0t=s(UTe);T(a9.$$.fragment,m0t),m0t.forEach(t),c0t.forEach(t),P3r=i(XGe),JTe=n(XGe,"SPAN",{});var f0t=s(JTe);B3r=r(f0t,"TFAutoModelForTableQuestionAnswering"),f0t.forEach(t),XGe.forEach(t),qje=i(m),sr=n(m,"DIV",{class:!0});var kl=s(sr);T(n9.$$.fragment,kl),I3r=i(kl),uc=n(kl,"P",{});var Pee=s(uc);N3r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),NU=n(Pee,"A",{href:!0});var g0t=s(NU);q3r=r(g0t,"from_pretrained()"),g0t.forEach(t),j3r=r(Pee," class method or the "),qU=n(Pee,"A",{href:!0});var h0t=s(qU);D3r=r(h0t,"from_config()"),h0t.forEach(t),G3r=r(Pee,` class
method.`),Pee.forEach(t),O3r=i(kl),s9=n(kl,"P",{});var zGe=s(s9);V3r=r(zGe,"This class cannot be instantiated directly using "),YTe=n(zGe,"CODE",{});var u0t=s(YTe);X3r=r(u0t,"__init__()"),u0t.forEach(t),z3r=r(zGe," (throws an error)."),zGe.forEach(t),W3r=i(kl),It=n(kl,"DIV",{class:!0});var QA=s(It);T(l9.$$.fragment,QA),Q3r=i(QA),KTe=n(QA,"P",{});var p0t=s(KTe);H3r=r(p0t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),p0t.forEach(t),U3r=i(QA),pc=n(QA,"P",{});var Bee=s(pc);J3r=r(Bee,`Note:
Loading a model from its configuration file does `),ZTe=n(Bee,"STRONG",{});var _0t=s(ZTe);Y3r=r(_0t,"not"),_0t.forEach(t),K3r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(Bee,"A",{href:!0});var b0t=s(jU);Z3r=r(b0t,"from_pretrained()"),b0t.forEach(t),ewr=r(Bee," to load the model weights."),Bee.forEach(t),owr=i(QA),T(A5.$$.fragment,QA),QA.forEach(t),rwr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(i9.$$.fragment,Sl),twr=i(Sl),eMe=n(Sl,"P",{});var v0t=s(eMe);awr=r(v0t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),v0t.forEach(t),nwr=i(Sl),dn=n(Sl,"P",{});var HA=s(dn);swr=r(HA,"The model class to instantiate is selected based on the "),oMe=n(HA,"CODE",{});var F0t=s(oMe);lwr=r(F0t,"model_type"),F0t.forEach(t),iwr=r(HA,` property of the config object (either
passed as an argument or loaded from `),rMe=n(HA,"CODE",{});var T0t=s(rMe);dwr=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),cwr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(HA,"CODE",{});var M0t=s(tMe);mwr=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),fwr=r(HA,":"),HA.forEach(t),gwr=i(Sl),aMe=n(Sl,"UL",{});var E0t=s(aMe);y5=n(E0t,"LI",{});var ABe=s(y5);nMe=n(ABe,"STRONG",{});var C0t=s(nMe);hwr=r(C0t,"tapas"),C0t.forEach(t),uwr=r(ABe," \u2014 "),DU=n(ABe,"A",{href:!0});var w0t=s(DU);pwr=r(w0t,"TFTapasForQuestionAnswering"),w0t.forEach(t),_wr=r(ABe," (TAPAS model)"),ABe.forEach(t),E0t.forEach(t),bwr=i(Sl),T(L5.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),jje=i(m),_c=n(m,"H2",{class:!0});var WGe=s(_c);x5=n(WGe,"A",{id:!0,class:!0,href:!0});var A0t=s(x5);sMe=n(A0t,"SPAN",{});var y0t=s(sMe);T(d9.$$.fragment,y0t),y0t.forEach(t),A0t.forEach(t),vwr=i(WGe),lMe=n(WGe,"SPAN",{});var L0t=s(lMe);Fwr=r(L0t,"TFAutoModelForTokenClassification"),L0t.forEach(t),WGe.forEach(t),Dje=i(m),lr=n(m,"DIV",{class:!0});var Rl=s(lr);T(c9.$$.fragment,Rl),Twr=i(Rl),bc=n(Rl,"P",{});var Iee=s(bc);Mwr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GU=n(Iee,"A",{href:!0});var x0t=s(GU);Ewr=r(x0t,"from_pretrained()"),x0t.forEach(t),Cwr=r(Iee," class method or the "),OU=n(Iee,"A",{href:!0});var $0t=s(OU);wwr=r($0t,"from_config()"),$0t.forEach(t),Awr=r(Iee,` class
method.`),Iee.forEach(t),ywr=i(Rl),m9=n(Rl,"P",{});var QGe=s(m9);Lwr=r(QGe,"This class cannot be instantiated directly using "),iMe=n(QGe,"CODE",{});var k0t=s(iMe);xwr=r(k0t,"__init__()"),k0t.forEach(t),$wr=r(QGe," (throws an error)."),QGe.forEach(t),kwr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var UA=s(Nt);T(f9.$$.fragment,UA),Swr=i(UA),dMe=n(UA,"P",{});var S0t=s(dMe);Rwr=r(S0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S0t.forEach(t),Pwr=i(UA),vc=n(UA,"P",{});var Nee=s(vc);Bwr=r(Nee,`Note:
Loading a model from its configuration file does `),cMe=n(Nee,"STRONG",{});var R0t=s(cMe);Iwr=r(R0t,"not"),R0t.forEach(t),Nwr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(Nee,"A",{href:!0});var P0t=s(VU);qwr=r(P0t,"from_pretrained()"),P0t.forEach(t),jwr=r(Nee," to load the model weights."),Nee.forEach(t),Dwr=i(UA),T($5.$$.fragment,UA),UA.forEach(t),Gwr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(g9.$$.fragment,Pl),Owr=i(Pl),mMe=n(Pl,"P",{});var B0t=s(mMe);Vwr=r(B0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B0t.forEach(t),Xwr=i(Pl),cn=n(Pl,"P",{});var JA=s(cn);zwr=r(JA,"The model class to instantiate is selected based on the "),fMe=n(JA,"CODE",{});var I0t=s(fMe);Wwr=r(I0t,"model_type"),I0t.forEach(t),Qwr=r(JA,` property of the config object (either
passed as an argument or loaded from `),gMe=n(JA,"CODE",{});var N0t=s(gMe);Hwr=r(N0t,"pretrained_model_name_or_path"),N0t.forEach(t),Uwr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(JA,"CODE",{});var q0t=s(hMe);Jwr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),Ywr=r(JA,":"),JA.forEach(t),Kwr=i(Pl),de=n(Pl,"UL",{});var fe=s(de);k5=n(fe,"LI",{});var yBe=s(k5);uMe=n(yBe,"STRONG",{});var j0t=s(uMe);Zwr=r(j0t,"albert"),j0t.forEach(t),e0r=r(yBe," \u2014 "),XU=n(yBe,"A",{href:!0});var D0t=s(XU);o0r=r(D0t,"TFAlbertForTokenClassification"),D0t.forEach(t),r0r=r(yBe," (ALBERT model)"),yBe.forEach(t),t0r=i(fe),S5=n(fe,"LI",{});var LBe=s(S5);pMe=n(LBe,"STRONG",{});var G0t=s(pMe);a0r=r(G0t,"bert"),G0t.forEach(t),n0r=r(LBe," \u2014 "),zU=n(LBe,"A",{href:!0});var O0t=s(zU);s0r=r(O0t,"TFBertForTokenClassification"),O0t.forEach(t),l0r=r(LBe," (BERT model)"),LBe.forEach(t),i0r=i(fe),R5=n(fe,"LI",{});var xBe=s(R5);_Me=n(xBe,"STRONG",{});var V0t=s(_Me);d0r=r(V0t,"camembert"),V0t.forEach(t),c0r=r(xBe," \u2014 "),WU=n(xBe,"A",{href:!0});var X0t=s(WU);m0r=r(X0t,"TFCamembertForTokenClassification"),X0t.forEach(t),f0r=r(xBe," (CamemBERT model)"),xBe.forEach(t),g0r=i(fe),P5=n(fe,"LI",{});var $Be=s(P5);bMe=n($Be,"STRONG",{});var z0t=s(bMe);h0r=r(z0t,"convbert"),z0t.forEach(t),u0r=r($Be," \u2014 "),QU=n($Be,"A",{href:!0});var W0t=s(QU);p0r=r(W0t,"TFConvBertForTokenClassification"),W0t.forEach(t),_0r=r($Be," (ConvBERT model)"),$Be.forEach(t),b0r=i(fe),B5=n(fe,"LI",{});var kBe=s(B5);vMe=n(kBe,"STRONG",{});var Q0t=s(vMe);v0r=r(Q0t,"deberta"),Q0t.forEach(t),F0r=r(kBe," \u2014 "),HU=n(kBe,"A",{href:!0});var H0t=s(HU);T0r=r(H0t,"TFDebertaForTokenClassification"),H0t.forEach(t),M0r=r(kBe," (DeBERTa model)"),kBe.forEach(t),E0r=i(fe),I5=n(fe,"LI",{});var SBe=s(I5);FMe=n(SBe,"STRONG",{});var U0t=s(FMe);C0r=r(U0t,"deberta-v2"),U0t.forEach(t),w0r=r(SBe," \u2014 "),UU=n(SBe,"A",{href:!0});var J0t=s(UU);A0r=r(J0t,"TFDebertaV2ForTokenClassification"),J0t.forEach(t),y0r=r(SBe," (DeBERTa-v2 model)"),SBe.forEach(t),L0r=i(fe),N5=n(fe,"LI",{});var RBe=s(N5);TMe=n(RBe,"STRONG",{});var Y0t=s(TMe);x0r=r(Y0t,"distilbert"),Y0t.forEach(t),$0r=r(RBe," \u2014 "),JU=n(RBe,"A",{href:!0});var K0t=s(JU);k0r=r(K0t,"TFDistilBertForTokenClassification"),K0t.forEach(t),S0r=r(RBe," (DistilBERT model)"),RBe.forEach(t),R0r=i(fe),q5=n(fe,"LI",{});var PBe=s(q5);MMe=n(PBe,"STRONG",{});var Z0t=s(MMe);P0r=r(Z0t,"electra"),Z0t.forEach(t),B0r=r(PBe," \u2014 "),YU=n(PBe,"A",{href:!0});var e6t=s(YU);I0r=r(e6t,"TFElectraForTokenClassification"),e6t.forEach(t),N0r=r(PBe," (ELECTRA model)"),PBe.forEach(t),q0r=i(fe),j5=n(fe,"LI",{});var BBe=s(j5);EMe=n(BBe,"STRONG",{});var o6t=s(EMe);j0r=r(o6t,"flaubert"),o6t.forEach(t),D0r=r(BBe," \u2014 "),KU=n(BBe,"A",{href:!0});var r6t=s(KU);G0r=r(r6t,"TFFlaubertForTokenClassification"),r6t.forEach(t),O0r=r(BBe," (FlauBERT model)"),BBe.forEach(t),V0r=i(fe),D5=n(fe,"LI",{});var IBe=s(D5);CMe=n(IBe,"STRONG",{});var t6t=s(CMe);X0r=r(t6t,"funnel"),t6t.forEach(t),z0r=r(IBe," \u2014 "),ZU=n(IBe,"A",{href:!0});var a6t=s(ZU);W0r=r(a6t,"TFFunnelForTokenClassification"),a6t.forEach(t),Q0r=r(IBe," (Funnel Transformer model)"),IBe.forEach(t),H0r=i(fe),G5=n(fe,"LI",{});var NBe=s(G5);wMe=n(NBe,"STRONG",{});var n6t=s(wMe);U0r=r(n6t,"layoutlm"),n6t.forEach(t),J0r=r(NBe," \u2014 "),eJ=n(NBe,"A",{href:!0});var s6t=s(eJ);Y0r=r(s6t,"TFLayoutLMForTokenClassification"),s6t.forEach(t),K0r=r(NBe," (LayoutLM model)"),NBe.forEach(t),Z0r=i(fe),O5=n(fe,"LI",{});var qBe=s(O5);AMe=n(qBe,"STRONG",{});var l6t=s(AMe);e6r=r(l6t,"longformer"),l6t.forEach(t),o6r=r(qBe," \u2014 "),oJ=n(qBe,"A",{href:!0});var i6t=s(oJ);r6r=r(i6t,"TFLongformerForTokenClassification"),i6t.forEach(t),t6r=r(qBe," (Longformer model)"),qBe.forEach(t),a6r=i(fe),V5=n(fe,"LI",{});var jBe=s(V5);yMe=n(jBe,"STRONG",{});var d6t=s(yMe);n6r=r(d6t,"mobilebert"),d6t.forEach(t),s6r=r(jBe," \u2014 "),rJ=n(jBe,"A",{href:!0});var c6t=s(rJ);l6r=r(c6t,"TFMobileBertForTokenClassification"),c6t.forEach(t),i6r=r(jBe," (MobileBERT model)"),jBe.forEach(t),d6r=i(fe),X5=n(fe,"LI",{});var DBe=s(X5);LMe=n(DBe,"STRONG",{});var m6t=s(LMe);c6r=r(m6t,"mpnet"),m6t.forEach(t),m6r=r(DBe," \u2014 "),tJ=n(DBe,"A",{href:!0});var f6t=s(tJ);f6r=r(f6t,"TFMPNetForTokenClassification"),f6t.forEach(t),g6r=r(DBe," (MPNet model)"),DBe.forEach(t),h6r=i(fe),z5=n(fe,"LI",{});var GBe=s(z5);xMe=n(GBe,"STRONG",{});var g6t=s(xMe);u6r=r(g6t,"rembert"),g6t.forEach(t),p6r=r(GBe," \u2014 "),aJ=n(GBe,"A",{href:!0});var h6t=s(aJ);_6r=r(h6t,"TFRemBertForTokenClassification"),h6t.forEach(t),b6r=r(GBe," (RemBERT model)"),GBe.forEach(t),v6r=i(fe),W5=n(fe,"LI",{});var OBe=s(W5);$Me=n(OBe,"STRONG",{});var u6t=s($Me);F6r=r(u6t,"roberta"),u6t.forEach(t),T6r=r(OBe," \u2014 "),nJ=n(OBe,"A",{href:!0});var p6t=s(nJ);M6r=r(p6t,"TFRobertaForTokenClassification"),p6t.forEach(t),E6r=r(OBe," (RoBERTa model)"),OBe.forEach(t),C6r=i(fe),Q5=n(fe,"LI",{});var VBe=s(Q5);kMe=n(VBe,"STRONG",{});var _6t=s(kMe);w6r=r(_6t,"roformer"),_6t.forEach(t),A6r=r(VBe," \u2014 "),sJ=n(VBe,"A",{href:!0});var b6t=s(sJ);y6r=r(b6t,"TFRoFormerForTokenClassification"),b6t.forEach(t),L6r=r(VBe," (RoFormer model)"),VBe.forEach(t),x6r=i(fe),H5=n(fe,"LI",{});var XBe=s(H5);SMe=n(XBe,"STRONG",{});var v6t=s(SMe);$6r=r(v6t,"xlm"),v6t.forEach(t),k6r=r(XBe," \u2014 "),lJ=n(XBe,"A",{href:!0});var F6t=s(lJ);S6r=r(F6t,"TFXLMForTokenClassification"),F6t.forEach(t),R6r=r(XBe," (XLM model)"),XBe.forEach(t),P6r=i(fe),U5=n(fe,"LI",{});var zBe=s(U5);RMe=n(zBe,"STRONG",{});var T6t=s(RMe);B6r=r(T6t,"xlm-roberta"),T6t.forEach(t),I6r=r(zBe," \u2014 "),iJ=n(zBe,"A",{href:!0});var M6t=s(iJ);N6r=r(M6t,"TFXLMRobertaForTokenClassification"),M6t.forEach(t),q6r=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),j6r=i(fe),J5=n(fe,"LI",{});var WBe=s(J5);PMe=n(WBe,"STRONG",{});var E6t=s(PMe);D6r=r(E6t,"xlnet"),E6t.forEach(t),G6r=r(WBe," \u2014 "),dJ=n(WBe,"A",{href:!0});var C6t=s(dJ);O6r=r(C6t,"TFXLNetForTokenClassification"),C6t.forEach(t),V6r=r(WBe," (XLNet model)"),WBe.forEach(t),fe.forEach(t),X6r=i(Pl),T(Y5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Gje=i(m),Fc=n(m,"H2",{class:!0});var HGe=s(Fc);K5=n(HGe,"A",{id:!0,class:!0,href:!0});var w6t=s(K5);BMe=n(w6t,"SPAN",{});var A6t=s(BMe);T(h9.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),z6r=i(HGe),IMe=n(HGe,"SPAN",{});var y6t=s(IMe);W6r=r(y6t,"TFAutoModelForQuestionAnswering"),y6t.forEach(t),HGe.forEach(t),Oje=i(m),ir=n(m,"DIV",{class:!0});var Bl=s(ir);T(u9.$$.fragment,Bl),Q6r=i(Bl),Tc=n(Bl,"P",{});var qee=s(Tc);H6r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cJ=n(qee,"A",{href:!0});var L6t=s(cJ);U6r=r(L6t,"from_pretrained()"),L6t.forEach(t),J6r=r(qee," class method or the "),mJ=n(qee,"A",{href:!0});var x6t=s(mJ);Y6r=r(x6t,"from_config()"),x6t.forEach(t),K6r=r(qee,` class
method.`),qee.forEach(t),Z6r=i(Bl),p9=n(Bl,"P",{});var UGe=s(p9);eAr=r(UGe,"This class cannot be instantiated directly using "),NMe=n(UGe,"CODE",{});var $6t=s(NMe);oAr=r($6t,"__init__()"),$6t.forEach(t),rAr=r(UGe," (throws an error)."),UGe.forEach(t),tAr=i(Bl),qt=n(Bl,"DIV",{class:!0});var YA=s(qt);T(_9.$$.fragment,YA),aAr=i(YA),qMe=n(YA,"P",{});var k6t=s(qMe);nAr=r(k6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k6t.forEach(t),sAr=i(YA),Mc=n(YA,"P",{});var jee=s(Mc);lAr=r(jee,`Note:
Loading a model from its configuration file does `),jMe=n(jee,"STRONG",{});var S6t=s(jMe);iAr=r(S6t,"not"),S6t.forEach(t),dAr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(jee,"A",{href:!0});var R6t=s(fJ);cAr=r(R6t,"from_pretrained()"),R6t.forEach(t),mAr=r(jee," to load the model weights."),jee.forEach(t),fAr=i(YA),T(Z5.$$.fragment,YA),YA.forEach(t),gAr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(b9.$$.fragment,Il),hAr=i(Il),DMe=n(Il,"P",{});var P6t=s(DMe);uAr=r(P6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),P6t.forEach(t),pAr=i(Il),mn=n(Il,"P",{});var KA=s(mn);_Ar=r(KA,"The model class to instantiate is selected based on the "),GMe=n(KA,"CODE",{});var B6t=s(GMe);bAr=r(B6t,"model_type"),B6t.forEach(t),vAr=r(KA,` property of the config object (either
passed as an argument or loaded from `),OMe=n(KA,"CODE",{});var I6t=s(OMe);FAr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),TAr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(KA,"CODE",{});var N6t=s(VMe);MAr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),EAr=r(KA,":"),KA.forEach(t),CAr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);e3=n(ge,"LI",{});var QBe=s(e3);XMe=n(QBe,"STRONG",{});var q6t=s(XMe);wAr=r(q6t,"albert"),q6t.forEach(t),AAr=r(QBe," \u2014 "),gJ=n(QBe,"A",{href:!0});var j6t=s(gJ);yAr=r(j6t,"TFAlbertForQuestionAnswering"),j6t.forEach(t),LAr=r(QBe," (ALBERT model)"),QBe.forEach(t),xAr=i(ge),o3=n(ge,"LI",{});var HBe=s(o3);zMe=n(HBe,"STRONG",{});var D6t=s(zMe);$Ar=r(D6t,"bert"),D6t.forEach(t),kAr=r(HBe," \u2014 "),hJ=n(HBe,"A",{href:!0});var G6t=s(hJ);SAr=r(G6t,"TFBertForQuestionAnswering"),G6t.forEach(t),RAr=r(HBe," (BERT model)"),HBe.forEach(t),PAr=i(ge),r3=n(ge,"LI",{});var UBe=s(r3);WMe=n(UBe,"STRONG",{});var O6t=s(WMe);BAr=r(O6t,"camembert"),O6t.forEach(t),IAr=r(UBe," \u2014 "),uJ=n(UBe,"A",{href:!0});var V6t=s(uJ);NAr=r(V6t,"TFCamembertForQuestionAnswering"),V6t.forEach(t),qAr=r(UBe," (CamemBERT model)"),UBe.forEach(t),jAr=i(ge),t3=n(ge,"LI",{});var JBe=s(t3);QMe=n(JBe,"STRONG",{});var X6t=s(QMe);DAr=r(X6t,"convbert"),X6t.forEach(t),GAr=r(JBe," \u2014 "),pJ=n(JBe,"A",{href:!0});var z6t=s(pJ);OAr=r(z6t,"TFConvBertForQuestionAnswering"),z6t.forEach(t),VAr=r(JBe," (ConvBERT model)"),JBe.forEach(t),XAr=i(ge),a3=n(ge,"LI",{});var YBe=s(a3);HMe=n(YBe,"STRONG",{});var W6t=s(HMe);zAr=r(W6t,"deberta"),W6t.forEach(t),WAr=r(YBe," \u2014 "),_J=n(YBe,"A",{href:!0});var Q6t=s(_J);QAr=r(Q6t,"TFDebertaForQuestionAnswering"),Q6t.forEach(t),HAr=r(YBe," (DeBERTa model)"),YBe.forEach(t),UAr=i(ge),n3=n(ge,"LI",{});var KBe=s(n3);UMe=n(KBe,"STRONG",{});var H6t=s(UMe);JAr=r(H6t,"deberta-v2"),H6t.forEach(t),YAr=r(KBe," \u2014 "),bJ=n(KBe,"A",{href:!0});var U6t=s(bJ);KAr=r(U6t,"TFDebertaV2ForQuestionAnswering"),U6t.forEach(t),ZAr=r(KBe," (DeBERTa-v2 model)"),KBe.forEach(t),eyr=i(ge),s3=n(ge,"LI",{});var ZBe=s(s3);JMe=n(ZBe,"STRONG",{});var J6t=s(JMe);oyr=r(J6t,"distilbert"),J6t.forEach(t),ryr=r(ZBe," \u2014 "),vJ=n(ZBe,"A",{href:!0});var Y6t=s(vJ);tyr=r(Y6t,"TFDistilBertForQuestionAnswering"),Y6t.forEach(t),ayr=r(ZBe," (DistilBERT model)"),ZBe.forEach(t),nyr=i(ge),l3=n(ge,"LI",{});var eIe=s(l3);YMe=n(eIe,"STRONG",{});var K6t=s(YMe);syr=r(K6t,"electra"),K6t.forEach(t),lyr=r(eIe," \u2014 "),FJ=n(eIe,"A",{href:!0});var Z6t=s(FJ);iyr=r(Z6t,"TFElectraForQuestionAnswering"),Z6t.forEach(t),dyr=r(eIe," (ELECTRA model)"),eIe.forEach(t),cyr=i(ge),i3=n(ge,"LI",{});var oIe=s(i3);KMe=n(oIe,"STRONG",{});var eAt=s(KMe);myr=r(eAt,"flaubert"),eAt.forEach(t),fyr=r(oIe," \u2014 "),TJ=n(oIe,"A",{href:!0});var oAt=s(TJ);gyr=r(oAt,"TFFlaubertForQuestionAnsweringSimple"),oAt.forEach(t),hyr=r(oIe," (FlauBERT model)"),oIe.forEach(t),uyr=i(ge),d3=n(ge,"LI",{});var rIe=s(d3);ZMe=n(rIe,"STRONG",{});var rAt=s(ZMe);pyr=r(rAt,"funnel"),rAt.forEach(t),_yr=r(rIe," \u2014 "),MJ=n(rIe,"A",{href:!0});var tAt=s(MJ);byr=r(tAt,"TFFunnelForQuestionAnswering"),tAt.forEach(t),vyr=r(rIe," (Funnel Transformer model)"),rIe.forEach(t),Fyr=i(ge),c3=n(ge,"LI",{});var tIe=s(c3);e4e=n(tIe,"STRONG",{});var aAt=s(e4e);Tyr=r(aAt,"gptj"),aAt.forEach(t),Myr=r(tIe," \u2014 "),EJ=n(tIe,"A",{href:!0});var nAt=s(EJ);Eyr=r(nAt,"TFGPTJForQuestionAnswering"),nAt.forEach(t),Cyr=r(tIe," (GPT-J model)"),tIe.forEach(t),wyr=i(ge),m3=n(ge,"LI",{});var aIe=s(m3);o4e=n(aIe,"STRONG",{});var sAt=s(o4e);Ayr=r(sAt,"longformer"),sAt.forEach(t),yyr=r(aIe," \u2014 "),CJ=n(aIe,"A",{href:!0});var lAt=s(CJ);Lyr=r(lAt,"TFLongformerForQuestionAnswering"),lAt.forEach(t),xyr=r(aIe," (Longformer model)"),aIe.forEach(t),$yr=i(ge),f3=n(ge,"LI",{});var nIe=s(f3);r4e=n(nIe,"STRONG",{});var iAt=s(r4e);kyr=r(iAt,"mobilebert"),iAt.forEach(t),Syr=r(nIe," \u2014 "),wJ=n(nIe,"A",{href:!0});var dAt=s(wJ);Ryr=r(dAt,"TFMobileBertForQuestionAnswering"),dAt.forEach(t),Pyr=r(nIe," (MobileBERT model)"),nIe.forEach(t),Byr=i(ge),g3=n(ge,"LI",{});var sIe=s(g3);t4e=n(sIe,"STRONG",{});var cAt=s(t4e);Iyr=r(cAt,"mpnet"),cAt.forEach(t),Nyr=r(sIe," \u2014 "),AJ=n(sIe,"A",{href:!0});var mAt=s(AJ);qyr=r(mAt,"TFMPNetForQuestionAnswering"),mAt.forEach(t),jyr=r(sIe," (MPNet model)"),sIe.forEach(t),Dyr=i(ge),h3=n(ge,"LI",{});var lIe=s(h3);a4e=n(lIe,"STRONG",{});var fAt=s(a4e);Gyr=r(fAt,"rembert"),fAt.forEach(t),Oyr=r(lIe," \u2014 "),yJ=n(lIe,"A",{href:!0});var gAt=s(yJ);Vyr=r(gAt,"TFRemBertForQuestionAnswering"),gAt.forEach(t),Xyr=r(lIe," (RemBERT model)"),lIe.forEach(t),zyr=i(ge),u3=n(ge,"LI",{});var iIe=s(u3);n4e=n(iIe,"STRONG",{});var hAt=s(n4e);Wyr=r(hAt,"roberta"),hAt.forEach(t),Qyr=r(iIe," \u2014 "),LJ=n(iIe,"A",{href:!0});var uAt=s(LJ);Hyr=r(uAt,"TFRobertaForQuestionAnswering"),uAt.forEach(t),Uyr=r(iIe," (RoBERTa model)"),iIe.forEach(t),Jyr=i(ge),p3=n(ge,"LI",{});var dIe=s(p3);s4e=n(dIe,"STRONG",{});var pAt=s(s4e);Yyr=r(pAt,"roformer"),pAt.forEach(t),Kyr=r(dIe," \u2014 "),xJ=n(dIe,"A",{href:!0});var _At=s(xJ);Zyr=r(_At,"TFRoFormerForQuestionAnswering"),_At.forEach(t),eLr=r(dIe," (RoFormer model)"),dIe.forEach(t),oLr=i(ge),_3=n(ge,"LI",{});var cIe=s(_3);l4e=n(cIe,"STRONG",{});var bAt=s(l4e);rLr=r(bAt,"xlm"),bAt.forEach(t),tLr=r(cIe," \u2014 "),$J=n(cIe,"A",{href:!0});var vAt=s($J);aLr=r(vAt,"TFXLMForQuestionAnsweringSimple"),vAt.forEach(t),nLr=r(cIe," (XLM model)"),cIe.forEach(t),sLr=i(ge),b3=n(ge,"LI",{});var mIe=s(b3);i4e=n(mIe,"STRONG",{});var FAt=s(i4e);lLr=r(FAt,"xlm-roberta"),FAt.forEach(t),iLr=r(mIe," \u2014 "),kJ=n(mIe,"A",{href:!0});var TAt=s(kJ);dLr=r(TAt,"TFXLMRobertaForQuestionAnswering"),TAt.forEach(t),cLr=r(mIe," (XLM-RoBERTa model)"),mIe.forEach(t),mLr=i(ge),v3=n(ge,"LI",{});var fIe=s(v3);d4e=n(fIe,"STRONG",{});var MAt=s(d4e);fLr=r(MAt,"xlnet"),MAt.forEach(t),gLr=r(fIe," \u2014 "),SJ=n(fIe,"A",{href:!0});var EAt=s(SJ);hLr=r(EAt,"TFXLNetForQuestionAnsweringSimple"),EAt.forEach(t),uLr=r(fIe," (XLNet model)"),fIe.forEach(t),ge.forEach(t),pLr=i(Il),T(F3.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Vje=i(m),Ec=n(m,"H2",{class:!0});var JGe=s(Ec);T3=n(JGe,"A",{id:!0,class:!0,href:!0});var CAt=s(T3);c4e=n(CAt,"SPAN",{});var wAt=s(c4e);T(v9.$$.fragment,wAt),wAt.forEach(t),CAt.forEach(t),_Lr=i(JGe),m4e=n(JGe,"SPAN",{});var AAt=s(m4e);bLr=r(AAt,"TFAutoModelForVision2Seq"),AAt.forEach(t),JGe.forEach(t),Xje=i(m),dr=n(m,"DIV",{class:!0});var Nl=s(dr);T(F9.$$.fragment,Nl),vLr=i(Nl),Cc=n(Nl,"P",{});var Dee=s(Cc);FLr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RJ=n(Dee,"A",{href:!0});var yAt=s(RJ);TLr=r(yAt,"from_pretrained()"),yAt.forEach(t),MLr=r(Dee," class method or the "),PJ=n(Dee,"A",{href:!0});var LAt=s(PJ);ELr=r(LAt,"from_config()"),LAt.forEach(t),CLr=r(Dee,` class
method.`),Dee.forEach(t),wLr=i(Nl),T9=n(Nl,"P",{});var YGe=s(T9);ALr=r(YGe,"This class cannot be instantiated directly using "),f4e=n(YGe,"CODE",{});var xAt=s(f4e);yLr=r(xAt,"__init__()"),xAt.forEach(t),LLr=r(YGe," (throws an error)."),YGe.forEach(t),xLr=i(Nl),jt=n(Nl,"DIV",{class:!0});var ZA=s(jt);T(M9.$$.fragment,ZA),$Lr=i(ZA),g4e=n(ZA,"P",{});var $At=s(g4e);kLr=r($At,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$At.forEach(t),SLr=i(ZA),wc=n(ZA,"P",{});var Gee=s(wc);RLr=r(Gee,`Note:
Loading a model from its configuration file does `),h4e=n(Gee,"STRONG",{});var kAt=s(h4e);PLr=r(kAt,"not"),kAt.forEach(t),BLr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(Gee,"A",{href:!0});var SAt=s(BJ);ILr=r(SAt,"from_pretrained()"),SAt.forEach(t),NLr=r(Gee," to load the model weights."),Gee.forEach(t),qLr=i(ZA),T(M3.$$.fragment,ZA),ZA.forEach(t),jLr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(E9.$$.fragment,ql),DLr=i(ql),u4e=n(ql,"P",{});var RAt=s(u4e);GLr=r(RAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RAt.forEach(t),OLr=i(ql),fn=n(ql,"P",{});var ey=s(fn);VLr=r(ey,"The model class to instantiate is selected based on the "),p4e=n(ey,"CODE",{});var PAt=s(p4e);XLr=r(PAt,"model_type"),PAt.forEach(t),zLr=r(ey,` property of the config object (either
passed as an argument or loaded from `),_4e=n(ey,"CODE",{});var BAt=s(_4e);WLr=r(BAt,"pretrained_model_name_or_path"),BAt.forEach(t),QLr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(ey,"CODE",{});var IAt=s(b4e);HLr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),ULr=r(ey,":"),ey.forEach(t),JLr=i(ql),v4e=n(ql,"UL",{});var NAt=s(v4e);E3=n(NAt,"LI",{});var gIe=s(E3);F4e=n(gIe,"STRONG",{});var qAt=s(F4e);YLr=r(qAt,"vision-encoder-decoder"),qAt.forEach(t),KLr=r(gIe," \u2014 "),IJ=n(gIe,"A",{href:!0});var jAt=s(IJ);ZLr=r(jAt,"TFVisionEncoderDecoderModel"),jAt.forEach(t),e8r=r(gIe," (Vision Encoder decoder model)"),gIe.forEach(t),NAt.forEach(t),o8r=i(ql),T(C3.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),zje=i(m),Ac=n(m,"H2",{class:!0});var KGe=s(Ac);w3=n(KGe,"A",{id:!0,class:!0,href:!0});var DAt=s(w3);T4e=n(DAt,"SPAN",{});var GAt=s(T4e);T(C9.$$.fragment,GAt),GAt.forEach(t),DAt.forEach(t),r8r=i(KGe),M4e=n(KGe,"SPAN",{});var OAt=s(M4e);t8r=r(OAt,"TFAutoModelForSpeechSeq2Seq"),OAt.forEach(t),KGe.forEach(t),Wje=i(m),cr=n(m,"DIV",{class:!0});var jl=s(cr);T(w9.$$.fragment,jl),a8r=i(jl),yc=n(jl,"P",{});var Oee=s(yc);n8r=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NJ=n(Oee,"A",{href:!0});var VAt=s(NJ);s8r=r(VAt,"from_pretrained()"),VAt.forEach(t),l8r=r(Oee," class method or the "),qJ=n(Oee,"A",{href:!0});var XAt=s(qJ);i8r=r(XAt,"from_config()"),XAt.forEach(t),d8r=r(Oee,` class
method.`),Oee.forEach(t),c8r=i(jl),A9=n(jl,"P",{});var ZGe=s(A9);m8r=r(ZGe,"This class cannot be instantiated directly using "),E4e=n(ZGe,"CODE",{});var zAt=s(E4e);f8r=r(zAt,"__init__()"),zAt.forEach(t),g8r=r(ZGe," (throws an error)."),ZGe.forEach(t),h8r=i(jl),Dt=n(jl,"DIV",{class:!0});var oy=s(Dt);T(y9.$$.fragment,oy),u8r=i(oy),C4e=n(oy,"P",{});var WAt=s(C4e);p8r=r(WAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WAt.forEach(t),_8r=i(oy),Lc=n(oy,"P",{});var Vee=s(Lc);b8r=r(Vee,`Note:
Loading a model from its configuration file does `),w4e=n(Vee,"STRONG",{});var QAt=s(w4e);v8r=r(QAt,"not"),QAt.forEach(t),F8r=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Vee,"A",{href:!0});var HAt=s(jJ);T8r=r(HAt,"from_pretrained()"),HAt.forEach(t),M8r=r(Vee," to load the model weights."),Vee.forEach(t),E8r=i(oy),T(A3.$$.fragment,oy),oy.forEach(t),C8r=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(L9.$$.fragment,Dl),w8r=i(Dl),A4e=n(Dl,"P",{});var UAt=s(A4e);A8r=r(UAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UAt.forEach(t),y8r=i(Dl),gn=n(Dl,"P",{});var ry=s(gn);L8r=r(ry,"The model class to instantiate is selected based on the "),y4e=n(ry,"CODE",{});var JAt=s(y4e);x8r=r(JAt,"model_type"),JAt.forEach(t),$8r=r(ry,` property of the config object (either
passed as an argument or loaded from `),L4e=n(ry,"CODE",{});var YAt=s(L4e);k8r=r(YAt,"pretrained_model_name_or_path"),YAt.forEach(t),S8r=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(ry,"CODE",{});var KAt=s(x4e);R8r=r(KAt,"pretrained_model_name_or_path"),KAt.forEach(t),P8r=r(ry,":"),ry.forEach(t),B8r=i(Dl),$4e=n(Dl,"UL",{});var ZAt=s($4e);y3=n(ZAt,"LI",{});var hIe=s(y3);k4e=n(hIe,"STRONG",{});var eyt=s(k4e);I8r=r(eyt,"speech_to_text"),eyt.forEach(t),N8r=r(hIe," \u2014 "),DJ=n(hIe,"A",{href:!0});var oyt=s(DJ);q8r=r(oyt,"TFSpeech2TextForConditionalGeneration"),oyt.forEach(t),j8r=r(hIe," (Speech2Text model)"),hIe.forEach(t),ZAt.forEach(t),D8r=i(Dl),T(L3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Qje=i(m),xc=n(m,"H2",{class:!0});var eOe=s(xc);x3=n(eOe,"A",{id:!0,class:!0,href:!0});var ryt=s(x3);S4e=n(ryt,"SPAN",{});var tyt=s(S4e);T(x9.$$.fragment,tyt),tyt.forEach(t),ryt.forEach(t),G8r=i(eOe),R4e=n(eOe,"SPAN",{});var ayt=s(R4e);O8r=r(ayt,"FlaxAutoModel"),ayt.forEach(t),eOe.forEach(t),Hje=i(m),mr=n(m,"DIV",{class:!0});var Gl=s(mr);T($9.$$.fragment,Gl),V8r=i(Gl),$c=n(Gl,"P",{});var Xee=s($c);X8r=r(Xee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GJ=n(Xee,"A",{href:!0});var nyt=s(GJ);z8r=r(nyt,"from_pretrained()"),nyt.forEach(t),W8r=r(Xee," class method or the "),OJ=n(Xee,"A",{href:!0});var syt=s(OJ);Q8r=r(syt,"from_config()"),syt.forEach(t),H8r=r(Xee,` class
method.`),Xee.forEach(t),U8r=i(Gl),k9=n(Gl,"P",{});var oOe=s(k9);J8r=r(oOe,"This class cannot be instantiated directly using "),P4e=n(oOe,"CODE",{});var lyt=s(P4e);Y8r=r(lyt,"__init__()"),lyt.forEach(t),K8r=r(oOe," (throws an error)."),oOe.forEach(t),Z8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var ty=s(Gt);T(S9.$$.fragment,ty),e7r=i(ty),B4e=n(ty,"P",{});var iyt=s(B4e);o7r=r(iyt,"Instantiates one of the base model classes of the library from a configuration."),iyt.forEach(t),r7r=i(ty),kc=n(ty,"P",{});var zee=s(kc);t7r=r(zee,`Note:
Loading a model from its configuration file does `),I4e=n(zee,"STRONG",{});var dyt=s(I4e);a7r=r(dyt,"not"),dyt.forEach(t),n7r=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(zee,"A",{href:!0});var cyt=s(VJ);s7r=r(cyt,"from_pretrained()"),cyt.forEach(t),l7r=r(zee," to load the model weights."),zee.forEach(t),i7r=i(ty),T($3.$$.fragment,ty),ty.forEach(t),d7r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(R9.$$.fragment,Ol),c7r=i(Ol),N4e=n(Ol,"P",{});var myt=s(N4e);m7r=r(myt,"Instantiate one of the base model classes of the library from a pretrained model."),myt.forEach(t),f7r=i(Ol),hn=n(Ol,"P",{});var ay=s(hn);g7r=r(ay,"The model class to instantiate is selected based on the "),q4e=n(ay,"CODE",{});var fyt=s(q4e);h7r=r(fyt,"model_type"),fyt.forEach(t),u7r=r(ay,` property of the config object (either
passed as an argument or loaded from `),j4e=n(ay,"CODE",{});var gyt=s(j4e);p7r=r(gyt,"pretrained_model_name_or_path"),gyt.forEach(t),_7r=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(ay,"CODE",{});var hyt=s(D4e);b7r=r(hyt,"pretrained_model_name_or_path"),hyt.forEach(t),v7r=r(ay,":"),ay.forEach(t),F7r=i(Ol),re=n(Ol,"UL",{});var ne=s(re);k3=n(ne,"LI",{});var uIe=s(k3);G4e=n(uIe,"STRONG",{});var uyt=s(G4e);T7r=r(uyt,"albert"),uyt.forEach(t),M7r=r(uIe," \u2014 "),XJ=n(uIe,"A",{href:!0});var pyt=s(XJ);E7r=r(pyt,"FlaxAlbertModel"),pyt.forEach(t),C7r=r(uIe," (ALBERT model)"),uIe.forEach(t),w7r=i(ne),S3=n(ne,"LI",{});var pIe=s(S3);O4e=n(pIe,"STRONG",{});var _yt=s(O4e);A7r=r(_yt,"bart"),_yt.forEach(t),y7r=r(pIe," \u2014 "),zJ=n(pIe,"A",{href:!0});var byt=s(zJ);L7r=r(byt,"FlaxBartModel"),byt.forEach(t),x7r=r(pIe," (BART model)"),pIe.forEach(t),$7r=i(ne),R3=n(ne,"LI",{});var _Ie=s(R3);V4e=n(_Ie,"STRONG",{});var vyt=s(V4e);k7r=r(vyt,"beit"),vyt.forEach(t),S7r=r(_Ie," \u2014 "),WJ=n(_Ie,"A",{href:!0});var Fyt=s(WJ);R7r=r(Fyt,"FlaxBeitModel"),Fyt.forEach(t),P7r=r(_Ie," (BEiT model)"),_Ie.forEach(t),B7r=i(ne),P3=n(ne,"LI",{});var bIe=s(P3);X4e=n(bIe,"STRONG",{});var Tyt=s(X4e);I7r=r(Tyt,"bert"),Tyt.forEach(t),N7r=r(bIe," \u2014 "),QJ=n(bIe,"A",{href:!0});var Myt=s(QJ);q7r=r(Myt,"FlaxBertModel"),Myt.forEach(t),j7r=r(bIe," (BERT model)"),bIe.forEach(t),D7r=i(ne),B3=n(ne,"LI",{});var vIe=s(B3);z4e=n(vIe,"STRONG",{});var Eyt=s(z4e);G7r=r(Eyt,"big_bird"),Eyt.forEach(t),O7r=r(vIe," \u2014 "),HJ=n(vIe,"A",{href:!0});var Cyt=s(HJ);V7r=r(Cyt,"FlaxBigBirdModel"),Cyt.forEach(t),X7r=r(vIe," (BigBird model)"),vIe.forEach(t),z7r=i(ne),I3=n(ne,"LI",{});var FIe=s(I3);W4e=n(FIe,"STRONG",{});var wyt=s(W4e);W7r=r(wyt,"blenderbot"),wyt.forEach(t),Q7r=r(FIe," \u2014 "),UJ=n(FIe,"A",{href:!0});var Ayt=s(UJ);H7r=r(Ayt,"FlaxBlenderbotModel"),Ayt.forEach(t),U7r=r(FIe," (Blenderbot model)"),FIe.forEach(t),J7r=i(ne),N3=n(ne,"LI",{});var TIe=s(N3);Q4e=n(TIe,"STRONG",{});var yyt=s(Q4e);Y7r=r(yyt,"blenderbot-small"),yyt.forEach(t),K7r=r(TIe," \u2014 "),JJ=n(TIe,"A",{href:!0});var Lyt=s(JJ);Z7r=r(Lyt,"FlaxBlenderbotSmallModel"),Lyt.forEach(t),e9r=r(TIe," (BlenderbotSmall model)"),TIe.forEach(t),o9r=i(ne),q3=n(ne,"LI",{});var MIe=s(q3);H4e=n(MIe,"STRONG",{});var xyt=s(H4e);r9r=r(xyt,"clip"),xyt.forEach(t),t9r=r(MIe," \u2014 "),YJ=n(MIe,"A",{href:!0});var $yt=s(YJ);a9r=r($yt,"FlaxCLIPModel"),$yt.forEach(t),n9r=r(MIe," (CLIP model)"),MIe.forEach(t),s9r=i(ne),j3=n(ne,"LI",{});var EIe=s(j3);U4e=n(EIe,"STRONG",{});var kyt=s(U4e);l9r=r(kyt,"distilbert"),kyt.forEach(t),i9r=r(EIe," \u2014 "),KJ=n(EIe,"A",{href:!0});var Syt=s(KJ);d9r=r(Syt,"FlaxDistilBertModel"),Syt.forEach(t),c9r=r(EIe," (DistilBERT model)"),EIe.forEach(t),m9r=i(ne),D3=n(ne,"LI",{});var CIe=s(D3);J4e=n(CIe,"STRONG",{});var Ryt=s(J4e);f9r=r(Ryt,"electra"),Ryt.forEach(t),g9r=r(CIe," \u2014 "),ZJ=n(CIe,"A",{href:!0});var Pyt=s(ZJ);h9r=r(Pyt,"FlaxElectraModel"),Pyt.forEach(t),u9r=r(CIe," (ELECTRA model)"),CIe.forEach(t),p9r=i(ne),G3=n(ne,"LI",{});var wIe=s(G3);Y4e=n(wIe,"STRONG",{});var Byt=s(Y4e);_9r=r(Byt,"gpt2"),Byt.forEach(t),b9r=r(wIe," \u2014 "),eY=n(wIe,"A",{href:!0});var Iyt=s(eY);v9r=r(Iyt,"FlaxGPT2Model"),Iyt.forEach(t),F9r=r(wIe," (OpenAI GPT-2 model)"),wIe.forEach(t),T9r=i(ne),O3=n(ne,"LI",{});var AIe=s(O3);K4e=n(AIe,"STRONG",{});var Nyt=s(K4e);M9r=r(Nyt,"gpt_neo"),Nyt.forEach(t),E9r=r(AIe," \u2014 "),oY=n(AIe,"A",{href:!0});var qyt=s(oY);C9r=r(qyt,"FlaxGPTNeoModel"),qyt.forEach(t),w9r=r(AIe," (GPT Neo model)"),AIe.forEach(t),A9r=i(ne),V3=n(ne,"LI",{});var yIe=s(V3);Z4e=n(yIe,"STRONG",{});var jyt=s(Z4e);y9r=r(jyt,"gptj"),jyt.forEach(t),L9r=r(yIe," \u2014 "),rY=n(yIe,"A",{href:!0});var Dyt=s(rY);x9r=r(Dyt,"FlaxGPTJModel"),Dyt.forEach(t),$9r=r(yIe," (GPT-J model)"),yIe.forEach(t),k9r=i(ne),X3=n(ne,"LI",{});var LIe=s(X3);eEe=n(LIe,"STRONG",{});var Gyt=s(eEe);S9r=r(Gyt,"marian"),Gyt.forEach(t),R9r=r(LIe," \u2014 "),tY=n(LIe,"A",{href:!0});var Oyt=s(tY);P9r=r(Oyt,"FlaxMarianModel"),Oyt.forEach(t),B9r=r(LIe," (Marian model)"),LIe.forEach(t),I9r=i(ne),z3=n(ne,"LI",{});var xIe=s(z3);oEe=n(xIe,"STRONG",{});var Vyt=s(oEe);N9r=r(Vyt,"mbart"),Vyt.forEach(t),q9r=r(xIe," \u2014 "),aY=n(xIe,"A",{href:!0});var Xyt=s(aY);j9r=r(Xyt,"FlaxMBartModel"),Xyt.forEach(t),D9r=r(xIe," (mBART model)"),xIe.forEach(t),G9r=i(ne),W3=n(ne,"LI",{});var $Ie=s(W3);rEe=n($Ie,"STRONG",{});var zyt=s(rEe);O9r=r(zyt,"mt5"),zyt.forEach(t),V9r=r($Ie," \u2014 "),nY=n($Ie,"A",{href:!0});var Wyt=s(nY);X9r=r(Wyt,"FlaxMT5Model"),Wyt.forEach(t),z9r=r($Ie," (mT5 model)"),$Ie.forEach(t),W9r=i(ne),Q3=n(ne,"LI",{});var kIe=s(Q3);tEe=n(kIe,"STRONG",{});var Qyt=s(tEe);Q9r=r(Qyt,"opt"),Qyt.forEach(t),H9r=r(kIe," \u2014 "),sY=n(kIe,"A",{href:!0});var Hyt=s(sY);U9r=r(Hyt,"FlaxOPTModel"),Hyt.forEach(t),J9r=r(kIe," (OPT model)"),kIe.forEach(t),Y9r=i(ne),H3=n(ne,"LI",{});var SIe=s(H3);aEe=n(SIe,"STRONG",{});var Uyt=s(aEe);K9r=r(Uyt,"pegasus"),Uyt.forEach(t),Z9r=r(SIe," \u2014 "),lY=n(SIe,"A",{href:!0});var Jyt=s(lY);exr=r(Jyt,"FlaxPegasusModel"),Jyt.forEach(t),oxr=r(SIe," (Pegasus model)"),SIe.forEach(t),rxr=i(ne),U3=n(ne,"LI",{});var RIe=s(U3);nEe=n(RIe,"STRONG",{});var Yyt=s(nEe);txr=r(Yyt,"roberta"),Yyt.forEach(t),axr=r(RIe," \u2014 "),iY=n(RIe,"A",{href:!0});var Kyt=s(iY);nxr=r(Kyt,"FlaxRobertaModel"),Kyt.forEach(t),sxr=r(RIe," (RoBERTa model)"),RIe.forEach(t),lxr=i(ne),J3=n(ne,"LI",{});var PIe=s(J3);sEe=n(PIe,"STRONG",{});var Zyt=s(sEe);ixr=r(Zyt,"roformer"),Zyt.forEach(t),dxr=r(PIe," \u2014 "),dY=n(PIe,"A",{href:!0});var eLt=s(dY);cxr=r(eLt,"FlaxRoFormerModel"),eLt.forEach(t),mxr=r(PIe," (RoFormer model)"),PIe.forEach(t),fxr=i(ne),Y3=n(ne,"LI",{});var BIe=s(Y3);lEe=n(BIe,"STRONG",{});var oLt=s(lEe);gxr=r(oLt,"t5"),oLt.forEach(t),hxr=r(BIe," \u2014 "),cY=n(BIe,"A",{href:!0});var rLt=s(cY);uxr=r(rLt,"FlaxT5Model"),rLt.forEach(t),pxr=r(BIe," (T5 model)"),BIe.forEach(t),_xr=i(ne),K3=n(ne,"LI",{});var IIe=s(K3);iEe=n(IIe,"STRONG",{});var tLt=s(iEe);bxr=r(tLt,"vision-text-dual-encoder"),tLt.forEach(t),vxr=r(IIe," \u2014 "),mY=n(IIe,"A",{href:!0});var aLt=s(mY);Fxr=r(aLt,"FlaxVisionTextDualEncoderModel"),aLt.forEach(t),Txr=r(IIe," (VisionTextDualEncoder model)"),IIe.forEach(t),Mxr=i(ne),Z3=n(ne,"LI",{});var NIe=s(Z3);dEe=n(NIe,"STRONG",{});var nLt=s(dEe);Exr=r(nLt,"vit"),nLt.forEach(t),Cxr=r(NIe," \u2014 "),fY=n(NIe,"A",{href:!0});var sLt=s(fY);wxr=r(sLt,"FlaxViTModel"),sLt.forEach(t),Axr=r(NIe," (ViT model)"),NIe.forEach(t),yxr=i(ne),ew=n(ne,"LI",{});var qIe=s(ew);cEe=n(qIe,"STRONG",{});var lLt=s(cEe);Lxr=r(lLt,"wav2vec2"),lLt.forEach(t),xxr=r(qIe," \u2014 "),gY=n(qIe,"A",{href:!0});var iLt=s(gY);$xr=r(iLt,"FlaxWav2Vec2Model"),iLt.forEach(t),kxr=r(qIe," (Wav2Vec2 model)"),qIe.forEach(t),Sxr=i(ne),ow=n(ne,"LI",{});var jIe=s(ow);mEe=n(jIe,"STRONG",{});var dLt=s(mEe);Rxr=r(dLt,"xglm"),dLt.forEach(t),Pxr=r(jIe," \u2014 "),hY=n(jIe,"A",{href:!0});var cLt=s(hY);Bxr=r(cLt,"FlaxXGLMModel"),cLt.forEach(t),Ixr=r(jIe," (XGLM model)"),jIe.forEach(t),Nxr=i(ne),rw=n(ne,"LI",{});var DIe=s(rw);fEe=n(DIe,"STRONG",{});var mLt=s(fEe);qxr=r(mLt,"xlm-roberta"),mLt.forEach(t),jxr=r(DIe," \u2014 "),uY=n(DIe,"A",{href:!0});var fLt=s(uY);Dxr=r(fLt,"FlaxXLMRobertaModel"),fLt.forEach(t),Gxr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),ne.forEach(t),Oxr=i(Ol),T(tw.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Uje=i(m),Sc=n(m,"H2",{class:!0});var rOe=s(Sc);aw=n(rOe,"A",{id:!0,class:!0,href:!0});var gLt=s(aw);gEe=n(gLt,"SPAN",{});var hLt=s(gEe);T(P9.$$.fragment,hLt),hLt.forEach(t),gLt.forEach(t),Vxr=i(rOe),hEe=n(rOe,"SPAN",{});var uLt=s(hEe);Xxr=r(uLt,"FlaxAutoModelForCausalLM"),uLt.forEach(t),rOe.forEach(t),Jje=i(m),fr=n(m,"DIV",{class:!0});var Vl=s(fr);T(B9.$$.fragment,Vl),zxr=i(Vl),Rc=n(Vl,"P",{});var Wee=s(Rc);Wxr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pY=n(Wee,"A",{href:!0});var pLt=s(pY);Qxr=r(pLt,"from_pretrained()"),pLt.forEach(t),Hxr=r(Wee," class method or the "),_Y=n(Wee,"A",{href:!0});var _Lt=s(_Y);Uxr=r(_Lt,"from_config()"),_Lt.forEach(t),Jxr=r(Wee,` class
method.`),Wee.forEach(t),Yxr=i(Vl),I9=n(Vl,"P",{});var tOe=s(I9);Kxr=r(tOe,"This class cannot be instantiated directly using "),uEe=n(tOe,"CODE",{});var bLt=s(uEe);Zxr=r(bLt,"__init__()"),bLt.forEach(t),e$r=r(tOe," (throws an error)."),tOe.forEach(t),o$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var ny=s(Ot);T(N9.$$.fragment,ny),r$r=i(ny),pEe=n(ny,"P",{});var vLt=s(pEe);t$r=r(vLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vLt.forEach(t),a$r=i(ny),Pc=n(ny,"P",{});var Qee=s(Pc);n$r=r(Qee,`Note:
Loading a model from its configuration file does `),_Ee=n(Qee,"STRONG",{});var FLt=s(_Ee);s$r=r(FLt,"not"),FLt.forEach(t),l$r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(Qee,"A",{href:!0});var TLt=s(bY);i$r=r(TLt,"from_pretrained()"),TLt.forEach(t),d$r=r(Qee," to load the model weights."),Qee.forEach(t),c$r=i(ny),T(nw.$$.fragment,ny),ny.forEach(t),m$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(q9.$$.fragment,Xl),f$r=i(Xl),bEe=n(Xl,"P",{});var MLt=s(bEe);g$r=r(MLt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MLt.forEach(t),h$r=i(Xl),un=n(Xl,"P",{});var sy=s(un);u$r=r(sy,"The model class to instantiate is selected based on the "),vEe=n(sy,"CODE",{});var ELt=s(vEe);p$r=r(ELt,"model_type"),ELt.forEach(t),_$r=r(sy,` property of the config object (either
passed as an argument or loaded from `),FEe=n(sy,"CODE",{});var CLt=s(FEe);b$r=r(CLt,"pretrained_model_name_or_path"),CLt.forEach(t),v$r=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TEe=n(sy,"CODE",{});var wLt=s(TEe);F$r=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),T$r=r(sy,":"),sy.forEach(t),M$r=i(Xl),Le=n(Xl,"UL",{});var Ie=s(Le);sw=n(Ie,"LI",{});var GIe=s(sw);MEe=n(GIe,"STRONG",{});var ALt=s(MEe);E$r=r(ALt,"bart"),ALt.forEach(t),C$r=r(GIe," \u2014 "),vY=n(GIe,"A",{href:!0});var yLt=s(vY);w$r=r(yLt,"FlaxBartForCausalLM"),yLt.forEach(t),A$r=r(GIe," (BART model)"),GIe.forEach(t),y$r=i(Ie),lw=n(Ie,"LI",{});var OIe=s(lw);EEe=n(OIe,"STRONG",{});var LLt=s(EEe);L$r=r(LLt,"bert"),LLt.forEach(t),x$r=r(OIe," \u2014 "),FY=n(OIe,"A",{href:!0});var xLt=s(FY);$$r=r(xLt,"FlaxBertForCausalLM"),xLt.forEach(t),k$r=r(OIe," (BERT model)"),OIe.forEach(t),S$r=i(Ie),iw=n(Ie,"LI",{});var VIe=s(iw);CEe=n(VIe,"STRONG",{});var $Lt=s(CEe);R$r=r($Lt,"big_bird"),$Lt.forEach(t),P$r=r(VIe," \u2014 "),TY=n(VIe,"A",{href:!0});var kLt=s(TY);B$r=r(kLt,"FlaxBigBirdForCausalLM"),kLt.forEach(t),I$r=r(VIe," (BigBird model)"),VIe.forEach(t),N$r=i(Ie),dw=n(Ie,"LI",{});var XIe=s(dw);wEe=n(XIe,"STRONG",{});var SLt=s(wEe);q$r=r(SLt,"electra"),SLt.forEach(t),j$r=r(XIe," \u2014 "),MY=n(XIe,"A",{href:!0});var RLt=s(MY);D$r=r(RLt,"FlaxElectraForCausalLM"),RLt.forEach(t),G$r=r(XIe," (ELECTRA model)"),XIe.forEach(t),O$r=i(Ie),cw=n(Ie,"LI",{});var zIe=s(cw);AEe=n(zIe,"STRONG",{});var PLt=s(AEe);V$r=r(PLt,"gpt2"),PLt.forEach(t),X$r=r(zIe," \u2014 "),EY=n(zIe,"A",{href:!0});var BLt=s(EY);z$r=r(BLt,"FlaxGPT2LMHeadModel"),BLt.forEach(t),W$r=r(zIe," (OpenAI GPT-2 model)"),zIe.forEach(t),Q$r=i(Ie),mw=n(Ie,"LI",{});var WIe=s(mw);yEe=n(WIe,"STRONG",{});var ILt=s(yEe);H$r=r(ILt,"gpt_neo"),ILt.forEach(t),U$r=r(WIe," \u2014 "),CY=n(WIe,"A",{href:!0});var NLt=s(CY);J$r=r(NLt,"FlaxGPTNeoForCausalLM"),NLt.forEach(t),Y$r=r(WIe," (GPT Neo model)"),WIe.forEach(t),K$r=i(Ie),fw=n(Ie,"LI",{});var QIe=s(fw);LEe=n(QIe,"STRONG",{});var qLt=s(LEe);Z$r=r(qLt,"gptj"),qLt.forEach(t),ekr=r(QIe," \u2014 "),wY=n(QIe,"A",{href:!0});var jLt=s(wY);okr=r(jLt,"FlaxGPTJForCausalLM"),jLt.forEach(t),rkr=r(QIe," (GPT-J model)"),QIe.forEach(t),tkr=i(Ie),gw=n(Ie,"LI",{});var HIe=s(gw);xEe=n(HIe,"STRONG",{});var DLt=s(xEe);akr=r(DLt,"opt"),DLt.forEach(t),nkr=r(HIe," \u2014 "),AY=n(HIe,"A",{href:!0});var GLt=s(AY);skr=r(GLt,"FlaxOPTForCausalLM"),GLt.forEach(t),lkr=r(HIe," (OPT model)"),HIe.forEach(t),ikr=i(Ie),hw=n(Ie,"LI",{});var UIe=s(hw);$Ee=n(UIe,"STRONG",{});var OLt=s($Ee);dkr=r(OLt,"roberta"),OLt.forEach(t),ckr=r(UIe," \u2014 "),yY=n(UIe,"A",{href:!0});var VLt=s(yY);mkr=r(VLt,"FlaxRobertaForCausalLM"),VLt.forEach(t),fkr=r(UIe," (RoBERTa model)"),UIe.forEach(t),gkr=i(Ie),uw=n(Ie,"LI",{});var JIe=s(uw);kEe=n(JIe,"STRONG",{});var XLt=s(kEe);hkr=r(XLt,"xglm"),XLt.forEach(t),ukr=r(JIe," \u2014 "),LY=n(JIe,"A",{href:!0});var zLt=s(LY);pkr=r(zLt,"FlaxXGLMForCausalLM"),zLt.forEach(t),_kr=r(JIe," (XGLM model)"),JIe.forEach(t),Ie.forEach(t),bkr=i(Xl),T(pw.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Yje=i(m),Bc=n(m,"H2",{class:!0});var aOe=s(Bc);_w=n(aOe,"A",{id:!0,class:!0,href:!0});var WLt=s(_w);SEe=n(WLt,"SPAN",{});var QLt=s(SEe);T(j9.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),vkr=i(aOe),REe=n(aOe,"SPAN",{});var HLt=s(REe);Fkr=r(HLt,"FlaxAutoModelForPreTraining"),HLt.forEach(t),aOe.forEach(t),Kje=i(m),gr=n(m,"DIV",{class:!0});var zl=s(gr);T(D9.$$.fragment,zl),Tkr=i(zl),Ic=n(zl,"P",{});var Hee=s(Ic);Mkr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xY=n(Hee,"A",{href:!0});var ULt=s(xY);Ekr=r(ULt,"from_pretrained()"),ULt.forEach(t),Ckr=r(Hee," class method or the "),$Y=n(Hee,"A",{href:!0});var JLt=s($Y);wkr=r(JLt,"from_config()"),JLt.forEach(t),Akr=r(Hee,` class
method.`),Hee.forEach(t),ykr=i(zl),G9=n(zl,"P",{});var nOe=s(G9);Lkr=r(nOe,"This class cannot be instantiated directly using "),PEe=n(nOe,"CODE",{});var YLt=s(PEe);xkr=r(YLt,"__init__()"),YLt.forEach(t),$kr=r(nOe," (throws an error)."),nOe.forEach(t),kkr=i(zl),Vt=n(zl,"DIV",{class:!0});var ly=s(Vt);T(O9.$$.fragment,ly),Skr=i(ly),BEe=n(ly,"P",{});var KLt=s(BEe);Rkr=r(KLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KLt.forEach(t),Pkr=i(ly),Nc=n(ly,"P",{});var Uee=s(Nc);Bkr=r(Uee,`Note:
Loading a model from its configuration file does `),IEe=n(Uee,"STRONG",{});var ZLt=s(IEe);Ikr=r(ZLt,"not"),ZLt.forEach(t),Nkr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(Uee,"A",{href:!0});var e8t=s(kY);qkr=r(e8t,"from_pretrained()"),e8t.forEach(t),jkr=r(Uee," to load the model weights."),Uee.forEach(t),Dkr=i(ly),T(bw.$$.fragment,ly),ly.forEach(t),Gkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(V9.$$.fragment,Wl),Okr=i(Wl),NEe=n(Wl,"P",{});var o8t=s(NEe);Vkr=r(o8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o8t.forEach(t),Xkr=i(Wl),pn=n(Wl,"P",{});var iy=s(pn);zkr=r(iy,"The model class to instantiate is selected based on the "),qEe=n(iy,"CODE",{});var r8t=s(qEe);Wkr=r(r8t,"model_type"),r8t.forEach(t),Qkr=r(iy,` property of the config object (either
passed as an argument or loaded from `),jEe=n(iy,"CODE",{});var t8t=s(jEe);Hkr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Ukr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n(iy,"CODE",{});var a8t=s(DEe);Jkr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),Ykr=r(iy,":"),iy.forEach(t),Kkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);vw=n(we,"LI",{});var YIe=s(vw);GEe=n(YIe,"STRONG",{});var n8t=s(GEe);Zkr=r(n8t,"albert"),n8t.forEach(t),eSr=r(YIe," \u2014 "),SY=n(YIe,"A",{href:!0});var s8t=s(SY);oSr=r(s8t,"FlaxAlbertForPreTraining"),s8t.forEach(t),rSr=r(YIe," (ALBERT model)"),YIe.forEach(t),tSr=i(we),Fw=n(we,"LI",{});var KIe=s(Fw);OEe=n(KIe,"STRONG",{});var l8t=s(OEe);aSr=r(l8t,"bart"),l8t.forEach(t),nSr=r(KIe," \u2014 "),RY=n(KIe,"A",{href:!0});var i8t=s(RY);sSr=r(i8t,"FlaxBartForConditionalGeneration"),i8t.forEach(t),lSr=r(KIe," (BART model)"),KIe.forEach(t),iSr=i(we),Tw=n(we,"LI",{});var ZIe=s(Tw);VEe=n(ZIe,"STRONG",{});var d8t=s(VEe);dSr=r(d8t,"bert"),d8t.forEach(t),cSr=r(ZIe," \u2014 "),PY=n(ZIe,"A",{href:!0});var c8t=s(PY);mSr=r(c8t,"FlaxBertForPreTraining"),c8t.forEach(t),fSr=r(ZIe," (BERT model)"),ZIe.forEach(t),gSr=i(we),Mw=n(we,"LI",{});var eNe=s(Mw);XEe=n(eNe,"STRONG",{});var m8t=s(XEe);hSr=r(m8t,"big_bird"),m8t.forEach(t),uSr=r(eNe," \u2014 "),BY=n(eNe,"A",{href:!0});var f8t=s(BY);pSr=r(f8t,"FlaxBigBirdForPreTraining"),f8t.forEach(t),_Sr=r(eNe," (BigBird model)"),eNe.forEach(t),bSr=i(we),Ew=n(we,"LI",{});var oNe=s(Ew);zEe=n(oNe,"STRONG",{});var g8t=s(zEe);vSr=r(g8t,"electra"),g8t.forEach(t),FSr=r(oNe," \u2014 "),IY=n(oNe,"A",{href:!0});var h8t=s(IY);TSr=r(h8t,"FlaxElectraForPreTraining"),h8t.forEach(t),MSr=r(oNe," (ELECTRA model)"),oNe.forEach(t),ESr=i(we),Cw=n(we,"LI",{});var rNe=s(Cw);WEe=n(rNe,"STRONG",{});var u8t=s(WEe);CSr=r(u8t,"mbart"),u8t.forEach(t),wSr=r(rNe," \u2014 "),NY=n(rNe,"A",{href:!0});var p8t=s(NY);ASr=r(p8t,"FlaxMBartForConditionalGeneration"),p8t.forEach(t),ySr=r(rNe," (mBART model)"),rNe.forEach(t),LSr=i(we),ww=n(we,"LI",{});var tNe=s(ww);QEe=n(tNe,"STRONG",{});var _8t=s(QEe);xSr=r(_8t,"mt5"),_8t.forEach(t),$Sr=r(tNe," \u2014 "),qY=n(tNe,"A",{href:!0});var b8t=s(qY);kSr=r(b8t,"FlaxMT5ForConditionalGeneration"),b8t.forEach(t),SSr=r(tNe," (mT5 model)"),tNe.forEach(t),RSr=i(we),Aw=n(we,"LI",{});var aNe=s(Aw);HEe=n(aNe,"STRONG",{});var v8t=s(HEe);PSr=r(v8t,"roberta"),v8t.forEach(t),BSr=r(aNe," \u2014 "),jY=n(aNe,"A",{href:!0});var F8t=s(jY);ISr=r(F8t,"FlaxRobertaForMaskedLM"),F8t.forEach(t),NSr=r(aNe," (RoBERTa model)"),aNe.forEach(t),qSr=i(we),yw=n(we,"LI",{});var nNe=s(yw);UEe=n(nNe,"STRONG",{});var T8t=s(UEe);jSr=r(T8t,"roformer"),T8t.forEach(t),DSr=r(nNe," \u2014 "),DY=n(nNe,"A",{href:!0});var M8t=s(DY);GSr=r(M8t,"FlaxRoFormerForMaskedLM"),M8t.forEach(t),OSr=r(nNe," (RoFormer model)"),nNe.forEach(t),VSr=i(we),Lw=n(we,"LI",{});var sNe=s(Lw);JEe=n(sNe,"STRONG",{});var E8t=s(JEe);XSr=r(E8t,"t5"),E8t.forEach(t),zSr=r(sNe," \u2014 "),GY=n(sNe,"A",{href:!0});var C8t=s(GY);WSr=r(C8t,"FlaxT5ForConditionalGeneration"),C8t.forEach(t),QSr=r(sNe," (T5 model)"),sNe.forEach(t),HSr=i(we),xw=n(we,"LI",{});var lNe=s(xw);YEe=n(lNe,"STRONG",{});var w8t=s(YEe);USr=r(w8t,"wav2vec2"),w8t.forEach(t),JSr=r(lNe," \u2014 "),OY=n(lNe,"A",{href:!0});var A8t=s(OY);YSr=r(A8t,"FlaxWav2Vec2ForPreTraining"),A8t.forEach(t),KSr=r(lNe," (Wav2Vec2 model)"),lNe.forEach(t),ZSr=i(we),$w=n(we,"LI",{});var iNe=s($w);KEe=n(iNe,"STRONG",{});var y8t=s(KEe);eRr=r(y8t,"xlm-roberta"),y8t.forEach(t),oRr=r(iNe," \u2014 "),VY=n(iNe,"A",{href:!0});var L8t=s(VY);rRr=r(L8t,"FlaxXLMRobertaForMaskedLM"),L8t.forEach(t),tRr=r(iNe," (XLM-RoBERTa model)"),iNe.forEach(t),we.forEach(t),aRr=i(Wl),T(kw.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),Zje=i(m),qc=n(m,"H2",{class:!0});var sOe=s(qc);Sw=n(sOe,"A",{id:!0,class:!0,href:!0});var x8t=s(Sw);ZEe=n(x8t,"SPAN",{});var $8t=s(ZEe);T(X9.$$.fragment,$8t),$8t.forEach(t),x8t.forEach(t),nRr=i(sOe),eCe=n(sOe,"SPAN",{});var k8t=s(eCe);sRr=r(k8t,"FlaxAutoModelForMaskedLM"),k8t.forEach(t),sOe.forEach(t),eDe=i(m),hr=n(m,"DIV",{class:!0});var Ql=s(hr);T(z9.$$.fragment,Ql),lRr=i(Ql),jc=n(Ql,"P",{});var Jee=s(jc);iRr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XY=n(Jee,"A",{href:!0});var S8t=s(XY);dRr=r(S8t,"from_pretrained()"),S8t.forEach(t),cRr=r(Jee," class method or the "),zY=n(Jee,"A",{href:!0});var R8t=s(zY);mRr=r(R8t,"from_config()"),R8t.forEach(t),fRr=r(Jee,` class
method.`),Jee.forEach(t),gRr=i(Ql),W9=n(Ql,"P",{});var lOe=s(W9);hRr=r(lOe,"This class cannot be instantiated directly using "),oCe=n(lOe,"CODE",{});var P8t=s(oCe);uRr=r(P8t,"__init__()"),P8t.forEach(t),pRr=r(lOe," (throws an error)."),lOe.forEach(t),_Rr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var dy=s(Xt);T(Q9.$$.fragment,dy),bRr=i(dy),rCe=n(dy,"P",{});var B8t=s(rCe);vRr=r(B8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B8t.forEach(t),FRr=i(dy),Dc=n(dy,"P",{});var Yee=s(Dc);TRr=r(Yee,`Note:
Loading a model from its configuration file does `),tCe=n(Yee,"STRONG",{});var I8t=s(tCe);MRr=r(I8t,"not"),I8t.forEach(t),ERr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WY=n(Yee,"A",{href:!0});var N8t=s(WY);CRr=r(N8t,"from_pretrained()"),N8t.forEach(t),wRr=r(Yee," to load the model weights."),Yee.forEach(t),ARr=i(dy),T(Rw.$$.fragment,dy),dy.forEach(t),yRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(H9.$$.fragment,Hl),LRr=i(Hl),aCe=n(Hl,"P",{});var q8t=s(aCe);xRr=r(q8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q8t.forEach(t),$Rr=i(Hl),_n=n(Hl,"P",{});var cy=s(_n);kRr=r(cy,"The model class to instantiate is selected based on the "),nCe=n(cy,"CODE",{});var j8t=s(nCe);SRr=r(j8t,"model_type"),j8t.forEach(t),RRr=r(cy,` property of the config object (either
passed as an argument or loaded from `),sCe=n(cy,"CODE",{});var D8t=s(sCe);PRr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),BRr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(cy,"CODE",{});var G8t=s(lCe);IRr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),NRr=r(cy,":"),cy.forEach(t),qRr=i(Hl),xe=n(Hl,"UL",{});var Ne=s(xe);Pw=n(Ne,"LI",{});var dNe=s(Pw);iCe=n(dNe,"STRONG",{});var O8t=s(iCe);jRr=r(O8t,"albert"),O8t.forEach(t),DRr=r(dNe," \u2014 "),QY=n(dNe,"A",{href:!0});var V8t=s(QY);GRr=r(V8t,"FlaxAlbertForMaskedLM"),V8t.forEach(t),ORr=r(dNe," (ALBERT model)"),dNe.forEach(t),VRr=i(Ne),Bw=n(Ne,"LI",{});var cNe=s(Bw);dCe=n(cNe,"STRONG",{});var X8t=s(dCe);XRr=r(X8t,"bart"),X8t.forEach(t),zRr=r(cNe," \u2014 "),HY=n(cNe,"A",{href:!0});var z8t=s(HY);WRr=r(z8t,"FlaxBartForConditionalGeneration"),z8t.forEach(t),QRr=r(cNe," (BART model)"),cNe.forEach(t),HRr=i(Ne),Iw=n(Ne,"LI",{});var mNe=s(Iw);cCe=n(mNe,"STRONG",{});var W8t=s(cCe);URr=r(W8t,"bert"),W8t.forEach(t),JRr=r(mNe," \u2014 "),UY=n(mNe,"A",{href:!0});var Q8t=s(UY);YRr=r(Q8t,"FlaxBertForMaskedLM"),Q8t.forEach(t),KRr=r(mNe," (BERT model)"),mNe.forEach(t),ZRr=i(Ne),Nw=n(Ne,"LI",{});var fNe=s(Nw);mCe=n(fNe,"STRONG",{});var H8t=s(mCe);ePr=r(H8t,"big_bird"),H8t.forEach(t),oPr=r(fNe," \u2014 "),JY=n(fNe,"A",{href:!0});var U8t=s(JY);rPr=r(U8t,"FlaxBigBirdForMaskedLM"),U8t.forEach(t),tPr=r(fNe," (BigBird model)"),fNe.forEach(t),aPr=i(Ne),qw=n(Ne,"LI",{});var gNe=s(qw);fCe=n(gNe,"STRONG",{});var J8t=s(fCe);nPr=r(J8t,"distilbert"),J8t.forEach(t),sPr=r(gNe," \u2014 "),YY=n(gNe,"A",{href:!0});var Y8t=s(YY);lPr=r(Y8t,"FlaxDistilBertForMaskedLM"),Y8t.forEach(t),iPr=r(gNe," (DistilBERT model)"),gNe.forEach(t),dPr=i(Ne),jw=n(Ne,"LI",{});var hNe=s(jw);gCe=n(hNe,"STRONG",{});var K8t=s(gCe);cPr=r(K8t,"electra"),K8t.forEach(t),mPr=r(hNe," \u2014 "),KY=n(hNe,"A",{href:!0});var Z8t=s(KY);fPr=r(Z8t,"FlaxElectraForMaskedLM"),Z8t.forEach(t),gPr=r(hNe," (ELECTRA model)"),hNe.forEach(t),hPr=i(Ne),Dw=n(Ne,"LI",{});var uNe=s(Dw);hCe=n(uNe,"STRONG",{});var e7t=s(hCe);uPr=r(e7t,"mbart"),e7t.forEach(t),pPr=r(uNe," \u2014 "),ZY=n(uNe,"A",{href:!0});var o7t=s(ZY);_Pr=r(o7t,"FlaxMBartForConditionalGeneration"),o7t.forEach(t),bPr=r(uNe," (mBART model)"),uNe.forEach(t),vPr=i(Ne),Gw=n(Ne,"LI",{});var pNe=s(Gw);uCe=n(pNe,"STRONG",{});var r7t=s(uCe);FPr=r(r7t,"roberta"),r7t.forEach(t),TPr=r(pNe," \u2014 "),eK=n(pNe,"A",{href:!0});var t7t=s(eK);MPr=r(t7t,"FlaxRobertaForMaskedLM"),t7t.forEach(t),EPr=r(pNe," (RoBERTa model)"),pNe.forEach(t),CPr=i(Ne),Ow=n(Ne,"LI",{});var _Ne=s(Ow);pCe=n(_Ne,"STRONG",{});var a7t=s(pCe);wPr=r(a7t,"roformer"),a7t.forEach(t),APr=r(_Ne," \u2014 "),oK=n(_Ne,"A",{href:!0});var n7t=s(oK);yPr=r(n7t,"FlaxRoFormerForMaskedLM"),n7t.forEach(t),LPr=r(_Ne," (RoFormer model)"),_Ne.forEach(t),xPr=i(Ne),Vw=n(Ne,"LI",{});var bNe=s(Vw);_Ce=n(bNe,"STRONG",{});var s7t=s(_Ce);$Pr=r(s7t,"xlm-roberta"),s7t.forEach(t),kPr=r(bNe," \u2014 "),rK=n(bNe,"A",{href:!0});var l7t=s(rK);SPr=r(l7t,"FlaxXLMRobertaForMaskedLM"),l7t.forEach(t),RPr=r(bNe," (XLM-RoBERTa model)"),bNe.forEach(t),Ne.forEach(t),PPr=i(Hl),T(Xw.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),oDe=i(m),Gc=n(m,"H2",{class:!0});var iOe=s(Gc);zw=n(iOe,"A",{id:!0,class:!0,href:!0});var i7t=s(zw);bCe=n(i7t,"SPAN",{});var d7t=s(bCe);T(U9.$$.fragment,d7t),d7t.forEach(t),i7t.forEach(t),BPr=i(iOe),vCe=n(iOe,"SPAN",{});var c7t=s(vCe);IPr=r(c7t,"FlaxAutoModelForSeq2SeqLM"),c7t.forEach(t),iOe.forEach(t),rDe=i(m),ur=n(m,"DIV",{class:!0});var Ul=s(ur);T(J9.$$.fragment,Ul),NPr=i(Ul),Oc=n(Ul,"P",{});var Kee=s(Oc);qPr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tK=n(Kee,"A",{href:!0});var m7t=s(tK);jPr=r(m7t,"from_pretrained()"),m7t.forEach(t),DPr=r(Kee," class method or the "),aK=n(Kee,"A",{href:!0});var f7t=s(aK);GPr=r(f7t,"from_config()"),f7t.forEach(t),OPr=r(Kee,` class
method.`),Kee.forEach(t),VPr=i(Ul),Y9=n(Ul,"P",{});var dOe=s(Y9);XPr=r(dOe,"This class cannot be instantiated directly using "),FCe=n(dOe,"CODE",{});var g7t=s(FCe);zPr=r(g7t,"__init__()"),g7t.forEach(t),WPr=r(dOe," (throws an error)."),dOe.forEach(t),QPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var my=s(zt);T(K9.$$.fragment,my),HPr=i(my),TCe=n(my,"P",{});var h7t=s(TCe);UPr=r(h7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h7t.forEach(t),JPr=i(my),Vc=n(my,"P",{});var Zee=s(Vc);YPr=r(Zee,`Note:
Loading a model from its configuration file does `),MCe=n(Zee,"STRONG",{});var u7t=s(MCe);KPr=r(u7t,"not"),u7t.forEach(t),ZPr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(Zee,"A",{href:!0});var p7t=s(nK);eBr=r(p7t,"from_pretrained()"),p7t.forEach(t),oBr=r(Zee," to load the model weights."),Zee.forEach(t),rBr=i(my),T(Ww.$$.fragment,my),my.forEach(t),tBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(Z9.$$.fragment,Jl),aBr=i(Jl),ECe=n(Jl,"P",{});var _7t=s(ECe);nBr=r(_7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_7t.forEach(t),sBr=i(Jl),bn=n(Jl,"P",{});var fy=s(bn);lBr=r(fy,"The model class to instantiate is selected based on the "),CCe=n(fy,"CODE",{});var b7t=s(CCe);iBr=r(b7t,"model_type"),b7t.forEach(t),dBr=r(fy,` property of the config object (either
passed as an argument or loaded from `),wCe=n(fy,"CODE",{});var v7t=s(wCe);cBr=r(v7t,"pretrained_model_name_or_path"),v7t.forEach(t),mBr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ACe=n(fy,"CODE",{});var F7t=s(ACe);fBr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),gBr=r(fy,":"),fy.forEach(t),hBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);Qw=n(ze,"LI",{});var vNe=s(Qw);yCe=n(vNe,"STRONG",{});var T7t=s(yCe);uBr=r(T7t,"bart"),T7t.forEach(t),pBr=r(vNe," \u2014 "),sK=n(vNe,"A",{href:!0});var M7t=s(sK);_Br=r(M7t,"FlaxBartForConditionalGeneration"),M7t.forEach(t),bBr=r(vNe," (BART model)"),vNe.forEach(t),vBr=i(ze),Hw=n(ze,"LI",{});var FNe=s(Hw);LCe=n(FNe,"STRONG",{});var E7t=s(LCe);FBr=r(E7t,"blenderbot"),E7t.forEach(t),TBr=r(FNe," \u2014 "),lK=n(FNe,"A",{href:!0});var C7t=s(lK);MBr=r(C7t,"FlaxBlenderbotForConditionalGeneration"),C7t.forEach(t),EBr=r(FNe," (Blenderbot model)"),FNe.forEach(t),CBr=i(ze),Uw=n(ze,"LI",{});var TNe=s(Uw);xCe=n(TNe,"STRONG",{});var w7t=s(xCe);wBr=r(w7t,"blenderbot-small"),w7t.forEach(t),ABr=r(TNe," \u2014 "),iK=n(TNe,"A",{href:!0});var A7t=s(iK);yBr=r(A7t,"FlaxBlenderbotSmallForConditionalGeneration"),A7t.forEach(t),LBr=r(TNe," (BlenderbotSmall model)"),TNe.forEach(t),xBr=i(ze),Jw=n(ze,"LI",{});var MNe=s(Jw);$Ce=n(MNe,"STRONG",{});var y7t=s($Ce);$Br=r(y7t,"encoder-decoder"),y7t.forEach(t),kBr=r(MNe," \u2014 "),dK=n(MNe,"A",{href:!0});var L7t=s(dK);SBr=r(L7t,"FlaxEncoderDecoderModel"),L7t.forEach(t),RBr=r(MNe," (Encoder decoder model)"),MNe.forEach(t),PBr=i(ze),Yw=n(ze,"LI",{});var ENe=s(Yw);kCe=n(ENe,"STRONG",{});var x7t=s(kCe);BBr=r(x7t,"marian"),x7t.forEach(t),IBr=r(ENe," \u2014 "),cK=n(ENe,"A",{href:!0});var $7t=s(cK);NBr=r($7t,"FlaxMarianMTModel"),$7t.forEach(t),qBr=r(ENe," (Marian model)"),ENe.forEach(t),jBr=i(ze),Kw=n(ze,"LI",{});var CNe=s(Kw);SCe=n(CNe,"STRONG",{});var k7t=s(SCe);DBr=r(k7t,"mbart"),k7t.forEach(t),GBr=r(CNe," \u2014 "),mK=n(CNe,"A",{href:!0});var S7t=s(mK);OBr=r(S7t,"FlaxMBartForConditionalGeneration"),S7t.forEach(t),VBr=r(CNe," (mBART model)"),CNe.forEach(t),XBr=i(ze),Zw=n(ze,"LI",{});var wNe=s(Zw);RCe=n(wNe,"STRONG",{});var R7t=s(RCe);zBr=r(R7t,"mt5"),R7t.forEach(t),WBr=r(wNe," \u2014 "),fK=n(wNe,"A",{href:!0});var P7t=s(fK);QBr=r(P7t,"FlaxMT5ForConditionalGeneration"),P7t.forEach(t),HBr=r(wNe," (mT5 model)"),wNe.forEach(t),UBr=i(ze),e0=n(ze,"LI",{});var ANe=s(e0);PCe=n(ANe,"STRONG",{});var B7t=s(PCe);JBr=r(B7t,"pegasus"),B7t.forEach(t),YBr=r(ANe," \u2014 "),gK=n(ANe,"A",{href:!0});var I7t=s(gK);KBr=r(I7t,"FlaxPegasusForConditionalGeneration"),I7t.forEach(t),ZBr=r(ANe," (Pegasus model)"),ANe.forEach(t),eIr=i(ze),o0=n(ze,"LI",{});var yNe=s(o0);BCe=n(yNe,"STRONG",{});var N7t=s(BCe);oIr=r(N7t,"t5"),N7t.forEach(t),rIr=r(yNe," \u2014 "),hK=n(yNe,"A",{href:!0});var q7t=s(hK);tIr=r(q7t,"FlaxT5ForConditionalGeneration"),q7t.forEach(t),aIr=r(yNe," (T5 model)"),yNe.forEach(t),ze.forEach(t),nIr=i(Jl),T(r0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),tDe=i(m),Xc=n(m,"H2",{class:!0});var cOe=s(Xc);t0=n(cOe,"A",{id:!0,class:!0,href:!0});var j7t=s(t0);ICe=n(j7t,"SPAN",{});var D7t=s(ICe);T(ex.$$.fragment,D7t),D7t.forEach(t),j7t.forEach(t),sIr=i(cOe),NCe=n(cOe,"SPAN",{});var G7t=s(NCe);lIr=r(G7t,"FlaxAutoModelForSequenceClassification"),G7t.forEach(t),cOe.forEach(t),aDe=i(m),pr=n(m,"DIV",{class:!0});var Yl=s(pr);T(ox.$$.fragment,Yl),iIr=i(Yl),zc=n(Yl,"P",{});var eoe=s(zc);dIr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=n(eoe,"A",{href:!0});var O7t=s(uK);cIr=r(O7t,"from_pretrained()"),O7t.forEach(t),mIr=r(eoe," class method or the "),pK=n(eoe,"A",{href:!0});var V7t=s(pK);fIr=r(V7t,"from_config()"),V7t.forEach(t),gIr=r(eoe,` class
method.`),eoe.forEach(t),hIr=i(Yl),rx=n(Yl,"P",{});var mOe=s(rx);uIr=r(mOe,"This class cannot be instantiated directly using "),qCe=n(mOe,"CODE",{});var X7t=s(qCe);pIr=r(X7t,"__init__()"),X7t.forEach(t),_Ir=r(mOe," (throws an error)."),mOe.forEach(t),bIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var gy=s(Wt);T(tx.$$.fragment,gy),vIr=i(gy),jCe=n(gy,"P",{});var z7t=s(jCe);FIr=r(z7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),z7t.forEach(t),TIr=i(gy),Wc=n(gy,"P",{});var ooe=s(Wc);MIr=r(ooe,`Note:
Loading a model from its configuration file does `),DCe=n(ooe,"STRONG",{});var W7t=s(DCe);EIr=r(W7t,"not"),W7t.forEach(t),CIr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(ooe,"A",{href:!0});var Q7t=s(_K);wIr=r(Q7t,"from_pretrained()"),Q7t.forEach(t),AIr=r(ooe," to load the model weights."),ooe.forEach(t),yIr=i(gy),T(a0.$$.fragment,gy),gy.forEach(t),LIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ax.$$.fragment,Kl),xIr=i(Kl),GCe=n(Kl,"P",{});var H7t=s(GCe);$Ir=r(H7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H7t.forEach(t),kIr=i(Kl),vn=n(Kl,"P",{});var hy=s(vn);SIr=r(hy,"The model class to instantiate is selected based on the "),OCe=n(hy,"CODE",{});var U7t=s(OCe);RIr=r(U7t,"model_type"),U7t.forEach(t),PIr=r(hy,` property of the config object (either
passed as an argument or loaded from `),VCe=n(hy,"CODE",{});var J7t=s(VCe);BIr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),IIr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(hy,"CODE",{});var Y7t=s(XCe);NIr=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),qIr=r(hy,":"),hy.forEach(t),jIr=i(Kl),$e=n(Kl,"UL",{});var qe=s($e);n0=n(qe,"LI",{});var LNe=s(n0);zCe=n(LNe,"STRONG",{});var K7t=s(zCe);DIr=r(K7t,"albert"),K7t.forEach(t),GIr=r(LNe," \u2014 "),bK=n(LNe,"A",{href:!0});var Z7t=s(bK);OIr=r(Z7t,"FlaxAlbertForSequenceClassification"),Z7t.forEach(t),VIr=r(LNe," (ALBERT model)"),LNe.forEach(t),XIr=i(qe),s0=n(qe,"LI",{});var xNe=s(s0);WCe=n(xNe,"STRONG",{});var e9t=s(WCe);zIr=r(e9t,"bart"),e9t.forEach(t),WIr=r(xNe," \u2014 "),vK=n(xNe,"A",{href:!0});var o9t=s(vK);QIr=r(o9t,"FlaxBartForSequenceClassification"),o9t.forEach(t),HIr=r(xNe," (BART model)"),xNe.forEach(t),UIr=i(qe),l0=n(qe,"LI",{});var $Ne=s(l0);QCe=n($Ne,"STRONG",{});var r9t=s(QCe);JIr=r(r9t,"bert"),r9t.forEach(t),YIr=r($Ne," \u2014 "),FK=n($Ne,"A",{href:!0});var t9t=s(FK);KIr=r(t9t,"FlaxBertForSequenceClassification"),t9t.forEach(t),ZIr=r($Ne," (BERT model)"),$Ne.forEach(t),eNr=i(qe),i0=n(qe,"LI",{});var kNe=s(i0);HCe=n(kNe,"STRONG",{});var a9t=s(HCe);oNr=r(a9t,"big_bird"),a9t.forEach(t),rNr=r(kNe," \u2014 "),TK=n(kNe,"A",{href:!0});var n9t=s(TK);tNr=r(n9t,"FlaxBigBirdForSequenceClassification"),n9t.forEach(t),aNr=r(kNe," (BigBird model)"),kNe.forEach(t),nNr=i(qe),d0=n(qe,"LI",{});var SNe=s(d0);UCe=n(SNe,"STRONG",{});var s9t=s(UCe);sNr=r(s9t,"distilbert"),s9t.forEach(t),lNr=r(SNe," \u2014 "),MK=n(SNe,"A",{href:!0});var l9t=s(MK);iNr=r(l9t,"FlaxDistilBertForSequenceClassification"),l9t.forEach(t),dNr=r(SNe," (DistilBERT model)"),SNe.forEach(t),cNr=i(qe),c0=n(qe,"LI",{});var RNe=s(c0);JCe=n(RNe,"STRONG",{});var i9t=s(JCe);mNr=r(i9t,"electra"),i9t.forEach(t),fNr=r(RNe," \u2014 "),EK=n(RNe,"A",{href:!0});var d9t=s(EK);gNr=r(d9t,"FlaxElectraForSequenceClassification"),d9t.forEach(t),hNr=r(RNe," (ELECTRA model)"),RNe.forEach(t),uNr=i(qe),m0=n(qe,"LI",{});var PNe=s(m0);YCe=n(PNe,"STRONG",{});var c9t=s(YCe);pNr=r(c9t,"mbart"),c9t.forEach(t),_Nr=r(PNe," \u2014 "),CK=n(PNe,"A",{href:!0});var m9t=s(CK);bNr=r(m9t,"FlaxMBartForSequenceClassification"),m9t.forEach(t),vNr=r(PNe," (mBART model)"),PNe.forEach(t),FNr=i(qe),f0=n(qe,"LI",{});var BNe=s(f0);KCe=n(BNe,"STRONG",{});var f9t=s(KCe);TNr=r(f9t,"roberta"),f9t.forEach(t),MNr=r(BNe," \u2014 "),wK=n(BNe,"A",{href:!0});var g9t=s(wK);ENr=r(g9t,"FlaxRobertaForSequenceClassification"),g9t.forEach(t),CNr=r(BNe," (RoBERTa model)"),BNe.forEach(t),wNr=i(qe),g0=n(qe,"LI",{});var INe=s(g0);ZCe=n(INe,"STRONG",{});var h9t=s(ZCe);ANr=r(h9t,"roformer"),h9t.forEach(t),yNr=r(INe," \u2014 "),AK=n(INe,"A",{href:!0});var u9t=s(AK);LNr=r(u9t,"FlaxRoFormerForSequenceClassification"),u9t.forEach(t),xNr=r(INe," (RoFormer model)"),INe.forEach(t),$Nr=i(qe),h0=n(qe,"LI",{});var NNe=s(h0);e5e=n(NNe,"STRONG",{});var p9t=s(e5e);kNr=r(p9t,"xlm-roberta"),p9t.forEach(t),SNr=r(NNe," \u2014 "),yK=n(NNe,"A",{href:!0});var _9t=s(yK);RNr=r(_9t,"FlaxXLMRobertaForSequenceClassification"),_9t.forEach(t),PNr=r(NNe," (XLM-RoBERTa model)"),NNe.forEach(t),qe.forEach(t),BNr=i(Kl),T(u0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),nDe=i(m),Qc=n(m,"H2",{class:!0});var fOe=s(Qc);p0=n(fOe,"A",{id:!0,class:!0,href:!0});var b9t=s(p0);o5e=n(b9t,"SPAN",{});var v9t=s(o5e);T(nx.$$.fragment,v9t),v9t.forEach(t),b9t.forEach(t),INr=i(fOe),r5e=n(fOe,"SPAN",{});var F9t=s(r5e);NNr=r(F9t,"FlaxAutoModelForQuestionAnswering"),F9t.forEach(t),fOe.forEach(t),sDe=i(m),_r=n(m,"DIV",{class:!0});var Zl=s(_r);T(sx.$$.fragment,Zl),qNr=i(Zl),Hc=n(Zl,"P",{});var roe=s(Hc);jNr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LK=n(roe,"A",{href:!0});var T9t=s(LK);DNr=r(T9t,"from_pretrained()"),T9t.forEach(t),GNr=r(roe," class method or the "),xK=n(roe,"A",{href:!0});var M9t=s(xK);ONr=r(M9t,"from_config()"),M9t.forEach(t),VNr=r(roe,` class
method.`),roe.forEach(t),XNr=i(Zl),lx=n(Zl,"P",{});var gOe=s(lx);zNr=r(gOe,"This class cannot be instantiated directly using "),t5e=n(gOe,"CODE",{});var E9t=s(t5e);WNr=r(E9t,"__init__()"),E9t.forEach(t),QNr=r(gOe," (throws an error)."),gOe.forEach(t),HNr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var uy=s(Qt);T(ix.$$.fragment,uy),UNr=i(uy),a5e=n(uy,"P",{});var C9t=s(a5e);JNr=r(C9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C9t.forEach(t),YNr=i(uy),Uc=n(uy,"P",{});var toe=s(Uc);KNr=r(toe,`Note:
Loading a model from its configuration file does `),n5e=n(toe,"STRONG",{});var w9t=s(n5e);ZNr=r(w9t,"not"),w9t.forEach(t),eqr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(toe,"A",{href:!0});var A9t=s($K);oqr=r(A9t,"from_pretrained()"),A9t.forEach(t),rqr=r(toe," to load the model weights."),toe.forEach(t),tqr=i(uy),T(_0.$$.fragment,uy),uy.forEach(t),aqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(dx.$$.fragment,ei),nqr=i(ei),s5e=n(ei,"P",{});var y9t=s(s5e);sqr=r(y9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y9t.forEach(t),lqr=i(ei),Fn=n(ei,"P",{});var py=s(Fn);iqr=r(py,"The model class to instantiate is selected based on the "),l5e=n(py,"CODE",{});var L9t=s(l5e);dqr=r(L9t,"model_type"),L9t.forEach(t),cqr=r(py,` property of the config object (either
passed as an argument or loaded from `),i5e=n(py,"CODE",{});var x9t=s(i5e);mqr=r(x9t,"pretrained_model_name_or_path"),x9t.forEach(t),fqr=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(py,"CODE",{});var $9t=s(d5e);gqr=r($9t,"pretrained_model_name_or_path"),$9t.forEach(t),hqr=r(py,":"),py.forEach(t),uqr=i(ei),ke=n(ei,"UL",{});var je=s(ke);b0=n(je,"LI",{});var qNe=s(b0);c5e=n(qNe,"STRONG",{});var k9t=s(c5e);pqr=r(k9t,"albert"),k9t.forEach(t),_qr=r(qNe," \u2014 "),kK=n(qNe,"A",{href:!0});var S9t=s(kK);bqr=r(S9t,"FlaxAlbertForQuestionAnswering"),S9t.forEach(t),vqr=r(qNe," (ALBERT model)"),qNe.forEach(t),Fqr=i(je),v0=n(je,"LI",{});var jNe=s(v0);m5e=n(jNe,"STRONG",{});var R9t=s(m5e);Tqr=r(R9t,"bart"),R9t.forEach(t),Mqr=r(jNe," \u2014 "),SK=n(jNe,"A",{href:!0});var P9t=s(SK);Eqr=r(P9t,"FlaxBartForQuestionAnswering"),P9t.forEach(t),Cqr=r(jNe," (BART model)"),jNe.forEach(t),wqr=i(je),F0=n(je,"LI",{});var DNe=s(F0);f5e=n(DNe,"STRONG",{});var B9t=s(f5e);Aqr=r(B9t,"bert"),B9t.forEach(t),yqr=r(DNe," \u2014 "),RK=n(DNe,"A",{href:!0});var I9t=s(RK);Lqr=r(I9t,"FlaxBertForQuestionAnswering"),I9t.forEach(t),xqr=r(DNe," (BERT model)"),DNe.forEach(t),$qr=i(je),T0=n(je,"LI",{});var GNe=s(T0);g5e=n(GNe,"STRONG",{});var N9t=s(g5e);kqr=r(N9t,"big_bird"),N9t.forEach(t),Sqr=r(GNe," \u2014 "),PK=n(GNe,"A",{href:!0});var q9t=s(PK);Rqr=r(q9t,"FlaxBigBirdForQuestionAnswering"),q9t.forEach(t),Pqr=r(GNe," (BigBird model)"),GNe.forEach(t),Bqr=i(je),M0=n(je,"LI",{});var ONe=s(M0);h5e=n(ONe,"STRONG",{});var j9t=s(h5e);Iqr=r(j9t,"distilbert"),j9t.forEach(t),Nqr=r(ONe," \u2014 "),BK=n(ONe,"A",{href:!0});var D9t=s(BK);qqr=r(D9t,"FlaxDistilBertForQuestionAnswering"),D9t.forEach(t),jqr=r(ONe," (DistilBERT model)"),ONe.forEach(t),Dqr=i(je),E0=n(je,"LI",{});var VNe=s(E0);u5e=n(VNe,"STRONG",{});var G9t=s(u5e);Gqr=r(G9t,"electra"),G9t.forEach(t),Oqr=r(VNe," \u2014 "),IK=n(VNe,"A",{href:!0});var O9t=s(IK);Vqr=r(O9t,"FlaxElectraForQuestionAnswering"),O9t.forEach(t),Xqr=r(VNe," (ELECTRA model)"),VNe.forEach(t),zqr=i(je),C0=n(je,"LI",{});var XNe=s(C0);p5e=n(XNe,"STRONG",{});var V9t=s(p5e);Wqr=r(V9t,"mbart"),V9t.forEach(t),Qqr=r(XNe," \u2014 "),NK=n(XNe,"A",{href:!0});var X9t=s(NK);Hqr=r(X9t,"FlaxMBartForQuestionAnswering"),X9t.forEach(t),Uqr=r(XNe," (mBART model)"),XNe.forEach(t),Jqr=i(je),w0=n(je,"LI",{});var zNe=s(w0);_5e=n(zNe,"STRONG",{});var z9t=s(_5e);Yqr=r(z9t,"roberta"),z9t.forEach(t),Kqr=r(zNe," \u2014 "),qK=n(zNe,"A",{href:!0});var W9t=s(qK);Zqr=r(W9t,"FlaxRobertaForQuestionAnswering"),W9t.forEach(t),ejr=r(zNe," (RoBERTa model)"),zNe.forEach(t),ojr=i(je),A0=n(je,"LI",{});var WNe=s(A0);b5e=n(WNe,"STRONG",{});var Q9t=s(b5e);rjr=r(Q9t,"roformer"),Q9t.forEach(t),tjr=r(WNe," \u2014 "),jK=n(WNe,"A",{href:!0});var H9t=s(jK);ajr=r(H9t,"FlaxRoFormerForQuestionAnswering"),H9t.forEach(t),njr=r(WNe," (RoFormer model)"),WNe.forEach(t),sjr=i(je),y0=n(je,"LI",{});var QNe=s(y0);v5e=n(QNe,"STRONG",{});var U9t=s(v5e);ljr=r(U9t,"xlm-roberta"),U9t.forEach(t),ijr=r(QNe," \u2014 "),DK=n(QNe,"A",{href:!0});var J9t=s(DK);djr=r(J9t,"FlaxXLMRobertaForQuestionAnswering"),J9t.forEach(t),cjr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),je.forEach(t),mjr=i(ei),T(L0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),lDe=i(m),Jc=n(m,"H2",{class:!0});var hOe=s(Jc);x0=n(hOe,"A",{id:!0,class:!0,href:!0});var Y9t=s(x0);F5e=n(Y9t,"SPAN",{});var K9t=s(F5e);T(cx.$$.fragment,K9t),K9t.forEach(t),Y9t.forEach(t),fjr=i(hOe),T5e=n(hOe,"SPAN",{});var Z9t=s(T5e);gjr=r(Z9t,"FlaxAutoModelForTokenClassification"),Z9t.forEach(t),hOe.forEach(t),iDe=i(m),br=n(m,"DIV",{class:!0});var oi=s(br);T(mx.$$.fragment,oi),hjr=i(oi),Yc=n(oi,"P",{});var aoe=s(Yc);ujr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GK=n(aoe,"A",{href:!0});var ext=s(GK);pjr=r(ext,"from_pretrained()"),ext.forEach(t),_jr=r(aoe," class method or the "),OK=n(aoe,"A",{href:!0});var oxt=s(OK);bjr=r(oxt,"from_config()"),oxt.forEach(t),vjr=r(aoe,` class
method.`),aoe.forEach(t),Fjr=i(oi),fx=n(oi,"P",{});var uOe=s(fx);Tjr=r(uOe,"This class cannot be instantiated directly using "),M5e=n(uOe,"CODE",{});var rxt=s(M5e);Mjr=r(rxt,"__init__()"),rxt.forEach(t),Ejr=r(uOe," (throws an error)."),uOe.forEach(t),Cjr=i(oi),Ht=n(oi,"DIV",{class:!0});var _y=s(Ht);T(gx.$$.fragment,_y),wjr=i(_y),E5e=n(_y,"P",{});var txt=s(E5e);Ajr=r(txt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),txt.forEach(t),yjr=i(_y),Kc=n(_y,"P",{});var noe=s(Kc);Ljr=r(noe,`Note:
Loading a model from its configuration file does `),C5e=n(noe,"STRONG",{});var axt=s(C5e);xjr=r(axt,"not"),axt.forEach(t),$jr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(noe,"A",{href:!0});var nxt=s(VK);kjr=r(nxt,"from_pretrained()"),nxt.forEach(t),Sjr=r(noe," to load the model weights."),noe.forEach(t),Rjr=i(_y),T($0.$$.fragment,_y),_y.forEach(t),Pjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(hx.$$.fragment,ri),Bjr=i(ri),w5e=n(ri,"P",{});var sxt=s(w5e);Ijr=r(sxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sxt.forEach(t),Njr=i(ri),Tn=n(ri,"P",{});var by=s(Tn);qjr=r(by,"The model class to instantiate is selected based on the "),A5e=n(by,"CODE",{});var lxt=s(A5e);jjr=r(lxt,"model_type"),lxt.forEach(t),Djr=r(by,` property of the config object (either
passed as an argument or loaded from `),y5e=n(by,"CODE",{});var ixt=s(y5e);Gjr=r(ixt,"pretrained_model_name_or_path"),ixt.forEach(t),Ojr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(by,"CODE",{});var dxt=s(L5e);Vjr=r(dxt,"pretrained_model_name_or_path"),dxt.forEach(t),Xjr=r(by,":"),by.forEach(t),zjr=i(ri),Ge=n(ri,"UL",{});var Fo=s(Ge);k0=n(Fo,"LI",{});var HNe=s(k0);x5e=n(HNe,"STRONG",{});var cxt=s(x5e);Wjr=r(cxt,"albert"),cxt.forEach(t),Qjr=r(HNe," \u2014 "),XK=n(HNe,"A",{href:!0});var mxt=s(XK);Hjr=r(mxt,"FlaxAlbertForTokenClassification"),mxt.forEach(t),Ujr=r(HNe," (ALBERT model)"),HNe.forEach(t),Jjr=i(Fo),S0=n(Fo,"LI",{});var UNe=s(S0);$5e=n(UNe,"STRONG",{});var fxt=s($5e);Yjr=r(fxt,"bert"),fxt.forEach(t),Kjr=r(UNe," \u2014 "),zK=n(UNe,"A",{href:!0});var gxt=s(zK);Zjr=r(gxt,"FlaxBertForTokenClassification"),gxt.forEach(t),eDr=r(UNe," (BERT model)"),UNe.forEach(t),oDr=i(Fo),R0=n(Fo,"LI",{});var JNe=s(R0);k5e=n(JNe,"STRONG",{});var hxt=s(k5e);rDr=r(hxt,"big_bird"),hxt.forEach(t),tDr=r(JNe," \u2014 "),WK=n(JNe,"A",{href:!0});var uxt=s(WK);aDr=r(uxt,"FlaxBigBirdForTokenClassification"),uxt.forEach(t),nDr=r(JNe," (BigBird model)"),JNe.forEach(t),sDr=i(Fo),P0=n(Fo,"LI",{});var YNe=s(P0);S5e=n(YNe,"STRONG",{});var pxt=s(S5e);lDr=r(pxt,"distilbert"),pxt.forEach(t),iDr=r(YNe," \u2014 "),QK=n(YNe,"A",{href:!0});var _xt=s(QK);dDr=r(_xt,"FlaxDistilBertForTokenClassification"),_xt.forEach(t),cDr=r(YNe," (DistilBERT model)"),YNe.forEach(t),mDr=i(Fo),B0=n(Fo,"LI",{});var KNe=s(B0);R5e=n(KNe,"STRONG",{});var bxt=s(R5e);fDr=r(bxt,"electra"),bxt.forEach(t),gDr=r(KNe," \u2014 "),HK=n(KNe,"A",{href:!0});var vxt=s(HK);hDr=r(vxt,"FlaxElectraForTokenClassification"),vxt.forEach(t),uDr=r(KNe," (ELECTRA model)"),KNe.forEach(t),pDr=i(Fo),I0=n(Fo,"LI",{});var ZNe=s(I0);P5e=n(ZNe,"STRONG",{});var Fxt=s(P5e);_Dr=r(Fxt,"roberta"),Fxt.forEach(t),bDr=r(ZNe," \u2014 "),UK=n(ZNe,"A",{href:!0});var Txt=s(UK);vDr=r(Txt,"FlaxRobertaForTokenClassification"),Txt.forEach(t),FDr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),TDr=i(Fo),N0=n(Fo,"LI",{});var eqe=s(N0);B5e=n(eqe,"STRONG",{});var Mxt=s(B5e);MDr=r(Mxt,"roformer"),Mxt.forEach(t),EDr=r(eqe," \u2014 "),JK=n(eqe,"A",{href:!0});var Ext=s(JK);CDr=r(Ext,"FlaxRoFormerForTokenClassification"),Ext.forEach(t),wDr=r(eqe," (RoFormer model)"),eqe.forEach(t),ADr=i(Fo),q0=n(Fo,"LI",{});var oqe=s(q0);I5e=n(oqe,"STRONG",{});var Cxt=s(I5e);yDr=r(Cxt,"xlm-roberta"),Cxt.forEach(t),LDr=r(oqe," \u2014 "),YK=n(oqe,"A",{href:!0});var wxt=s(YK);xDr=r(wxt,"FlaxXLMRobertaForTokenClassification"),wxt.forEach(t),$Dr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),Fo.forEach(t),kDr=i(ri),T(j0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),dDe=i(m),Zc=n(m,"H2",{class:!0});var pOe=s(Zc);D0=n(pOe,"A",{id:!0,class:!0,href:!0});var Axt=s(D0);N5e=n(Axt,"SPAN",{});var yxt=s(N5e);T(ux.$$.fragment,yxt),yxt.forEach(t),Axt.forEach(t),SDr=i(pOe),q5e=n(pOe,"SPAN",{});var Lxt=s(q5e);RDr=r(Lxt,"FlaxAutoModelForMultipleChoice"),Lxt.forEach(t),pOe.forEach(t),cDe=i(m),vr=n(m,"DIV",{class:!0});var ti=s(vr);T(px.$$.fragment,ti),PDr=i(ti),em=n(ti,"P",{});var soe=s(em);BDr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KK=n(soe,"A",{href:!0});var xxt=s(KK);IDr=r(xxt,"from_pretrained()"),xxt.forEach(t),NDr=r(soe," class method or the "),ZK=n(soe,"A",{href:!0});var $xt=s(ZK);qDr=r($xt,"from_config()"),$xt.forEach(t),jDr=r(soe,` class
method.`),soe.forEach(t),DDr=i(ti),_x=n(ti,"P",{});var _Oe=s(_x);GDr=r(_Oe,"This class cannot be instantiated directly using "),j5e=n(_Oe,"CODE",{});var kxt=s(j5e);ODr=r(kxt,"__init__()"),kxt.forEach(t),VDr=r(_Oe," (throws an error)."),_Oe.forEach(t),XDr=i(ti),Ut=n(ti,"DIV",{class:!0});var vy=s(Ut);T(bx.$$.fragment,vy),zDr=i(vy),D5e=n(vy,"P",{});var Sxt=s(D5e);WDr=r(Sxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sxt.forEach(t),QDr=i(vy),om=n(vy,"P",{});var loe=s(om);HDr=r(loe,`Note:
Loading a model from its configuration file does `),G5e=n(loe,"STRONG",{});var Rxt=s(G5e);UDr=r(Rxt,"not"),Rxt.forEach(t),JDr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(loe,"A",{href:!0});var Pxt=s(eZ);YDr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),KDr=r(loe," to load the model weights."),loe.forEach(t),ZDr=i(vy),T(G0.$$.fragment,vy),vy.forEach(t),eGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(vx.$$.fragment,ai),oGr=i(ai),O5e=n(ai,"P",{});var Bxt=s(O5e);rGr=r(Bxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Bxt.forEach(t),tGr=i(ai),Mn=n(ai,"P",{});var Fy=s(Mn);aGr=r(Fy,"The model class to instantiate is selected based on the "),V5e=n(Fy,"CODE",{});var Ixt=s(V5e);nGr=r(Ixt,"model_type"),Ixt.forEach(t),sGr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),X5e=n(Fy,"CODE",{});var Nxt=s(X5e);lGr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),iGr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(Fy,"CODE",{});var qxt=s(z5e);dGr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),cGr=r(Fy,":"),Fy.forEach(t),mGr=i(ai),Oe=n(ai,"UL",{});var To=s(Oe);O0=n(To,"LI",{});var rqe=s(O0);W5e=n(rqe,"STRONG",{});var jxt=s(W5e);fGr=r(jxt,"albert"),jxt.forEach(t),gGr=r(rqe," \u2014 "),oZ=n(rqe,"A",{href:!0});var Dxt=s(oZ);hGr=r(Dxt,"FlaxAlbertForMultipleChoice"),Dxt.forEach(t),uGr=r(rqe," (ALBERT model)"),rqe.forEach(t),pGr=i(To),V0=n(To,"LI",{});var tqe=s(V0);Q5e=n(tqe,"STRONG",{});var Gxt=s(Q5e);_Gr=r(Gxt,"bert"),Gxt.forEach(t),bGr=r(tqe," \u2014 "),rZ=n(tqe,"A",{href:!0});var Oxt=s(rZ);vGr=r(Oxt,"FlaxBertForMultipleChoice"),Oxt.forEach(t),FGr=r(tqe," (BERT model)"),tqe.forEach(t),TGr=i(To),X0=n(To,"LI",{});var aqe=s(X0);H5e=n(aqe,"STRONG",{});var Vxt=s(H5e);MGr=r(Vxt,"big_bird"),Vxt.forEach(t),EGr=r(aqe," \u2014 "),tZ=n(aqe,"A",{href:!0});var Xxt=s(tZ);CGr=r(Xxt,"FlaxBigBirdForMultipleChoice"),Xxt.forEach(t),wGr=r(aqe," (BigBird model)"),aqe.forEach(t),AGr=i(To),z0=n(To,"LI",{});var nqe=s(z0);U5e=n(nqe,"STRONG",{});var zxt=s(U5e);yGr=r(zxt,"distilbert"),zxt.forEach(t),LGr=r(nqe," \u2014 "),aZ=n(nqe,"A",{href:!0});var Wxt=s(aZ);xGr=r(Wxt,"FlaxDistilBertForMultipleChoice"),Wxt.forEach(t),$Gr=r(nqe," (DistilBERT model)"),nqe.forEach(t),kGr=i(To),W0=n(To,"LI",{});var sqe=s(W0);J5e=n(sqe,"STRONG",{});var Qxt=s(J5e);SGr=r(Qxt,"electra"),Qxt.forEach(t),RGr=r(sqe," \u2014 "),nZ=n(sqe,"A",{href:!0});var Hxt=s(nZ);PGr=r(Hxt,"FlaxElectraForMultipleChoice"),Hxt.forEach(t),BGr=r(sqe," (ELECTRA model)"),sqe.forEach(t),IGr=i(To),Q0=n(To,"LI",{});var lqe=s(Q0);Y5e=n(lqe,"STRONG",{});var Uxt=s(Y5e);NGr=r(Uxt,"roberta"),Uxt.forEach(t),qGr=r(lqe," \u2014 "),sZ=n(lqe,"A",{href:!0});var Jxt=s(sZ);jGr=r(Jxt,"FlaxRobertaForMultipleChoice"),Jxt.forEach(t),DGr=r(lqe," (RoBERTa model)"),lqe.forEach(t),GGr=i(To),H0=n(To,"LI",{});var iqe=s(H0);K5e=n(iqe,"STRONG",{});var Yxt=s(K5e);OGr=r(Yxt,"roformer"),Yxt.forEach(t),VGr=r(iqe," \u2014 "),lZ=n(iqe,"A",{href:!0});var Kxt=s(lZ);XGr=r(Kxt,"FlaxRoFormerForMultipleChoice"),Kxt.forEach(t),zGr=r(iqe," (RoFormer model)"),iqe.forEach(t),WGr=i(To),U0=n(To,"LI",{});var dqe=s(U0);Z5e=n(dqe,"STRONG",{});var Zxt=s(Z5e);QGr=r(Zxt,"xlm-roberta"),Zxt.forEach(t),HGr=r(dqe," \u2014 "),iZ=n(dqe,"A",{href:!0});var e$t=s(iZ);UGr=r(e$t,"FlaxXLMRobertaForMultipleChoice"),e$t.forEach(t),JGr=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),To.forEach(t),YGr=i(ai),T(J0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),mDe=i(m),rm=n(m,"H2",{class:!0});var bOe=s(rm);Y0=n(bOe,"A",{id:!0,class:!0,href:!0});var o$t=s(Y0);e3e=n(o$t,"SPAN",{});var r$t=s(e3e);T(Fx.$$.fragment,r$t),r$t.forEach(t),o$t.forEach(t),KGr=i(bOe),o3e=n(bOe,"SPAN",{});var t$t=s(o3e);ZGr=r(t$t,"FlaxAutoModelForNextSentencePrediction"),t$t.forEach(t),bOe.forEach(t),fDe=i(m),Fr=n(m,"DIV",{class:!0});var ni=s(Fr);T(Tx.$$.fragment,ni),eOr=i(ni),tm=n(ni,"P",{});var ioe=s(tm);oOr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dZ=n(ioe,"A",{href:!0});var a$t=s(dZ);rOr=r(a$t,"from_pretrained()"),a$t.forEach(t),tOr=r(ioe," class method or the "),cZ=n(ioe,"A",{href:!0});var n$t=s(cZ);aOr=r(n$t,"from_config()"),n$t.forEach(t),nOr=r(ioe,` class
method.`),ioe.forEach(t),sOr=i(ni),Mx=n(ni,"P",{});var vOe=s(Mx);lOr=r(vOe,"This class cannot be instantiated directly using "),r3e=n(vOe,"CODE",{});var s$t=s(r3e);iOr=r(s$t,"__init__()"),s$t.forEach(t),dOr=r(vOe," (throws an error)."),vOe.forEach(t),cOr=i(ni),Jt=n(ni,"DIV",{class:!0});var Ty=s(Jt);T(Ex.$$.fragment,Ty),mOr=i(Ty),t3e=n(Ty,"P",{});var l$t=s(t3e);fOr=r(l$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l$t.forEach(t),gOr=i(Ty),am=n(Ty,"P",{});var doe=s(am);hOr=r(doe,`Note:
Loading a model from its configuration file does `),a3e=n(doe,"STRONG",{});var i$t=s(a3e);uOr=r(i$t,"not"),i$t.forEach(t),pOr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(doe,"A",{href:!0});var d$t=s(mZ);_Or=r(d$t,"from_pretrained()"),d$t.forEach(t),bOr=r(doe," to load the model weights."),doe.forEach(t),vOr=i(Ty),T(K0.$$.fragment,Ty),Ty.forEach(t),FOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Cx.$$.fragment,si),TOr=i(si),n3e=n(si,"P",{});var c$t=s(n3e);MOr=r(c$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c$t.forEach(t),EOr=i(si),En=n(si,"P",{});var My=s(En);COr=r(My,"The model class to instantiate is selected based on the "),s3e=n(My,"CODE",{});var m$t=s(s3e);wOr=r(m$t,"model_type"),m$t.forEach(t),AOr=r(My,` property of the config object (either
passed as an argument or loaded from `),l3e=n(My,"CODE",{});var f$t=s(l3e);yOr=r(f$t,"pretrained_model_name_or_path"),f$t.forEach(t),LOr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(My,"CODE",{});var g$t=s(i3e);xOr=r(g$t,"pretrained_model_name_or_path"),g$t.forEach(t),$Or=r(My,":"),My.forEach(t),kOr=i(si),d3e=n(si,"UL",{});var h$t=s(d3e);Z0=n(h$t,"LI",{});var cqe=s(Z0);c3e=n(cqe,"STRONG",{});var u$t=s(c3e);SOr=r(u$t,"bert"),u$t.forEach(t),ROr=r(cqe," \u2014 "),fZ=n(cqe,"A",{href:!0});var p$t=s(fZ);POr=r(p$t,"FlaxBertForNextSentencePrediction"),p$t.forEach(t),BOr=r(cqe," (BERT model)"),cqe.forEach(t),h$t.forEach(t),IOr=i(si),T(e6.$$.fragment,si),si.forEach(t),ni.forEach(t),gDe=i(m),nm=n(m,"H2",{class:!0});var FOe=s(nm);o6=n(FOe,"A",{id:!0,class:!0,href:!0});var _$t=s(o6);m3e=n(_$t,"SPAN",{});var b$t=s(m3e);T(wx.$$.fragment,b$t),b$t.forEach(t),_$t.forEach(t),NOr=i(FOe),f3e=n(FOe,"SPAN",{});var v$t=s(f3e);qOr=r(v$t,"FlaxAutoModelForImageClassification"),v$t.forEach(t),FOe.forEach(t),hDe=i(m),Tr=n(m,"DIV",{class:!0});var li=s(Tr);T(Ax.$$.fragment,li),jOr=i(li),sm=n(li,"P",{});var coe=s(sm);DOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gZ=n(coe,"A",{href:!0});var F$t=s(gZ);GOr=r(F$t,"from_pretrained()"),F$t.forEach(t),OOr=r(coe," class method or the "),hZ=n(coe,"A",{href:!0});var T$t=s(hZ);VOr=r(T$t,"from_config()"),T$t.forEach(t),XOr=r(coe,` class
method.`),coe.forEach(t),zOr=i(li),yx=n(li,"P",{});var TOe=s(yx);WOr=r(TOe,"This class cannot be instantiated directly using "),g3e=n(TOe,"CODE",{});var M$t=s(g3e);QOr=r(M$t,"__init__()"),M$t.forEach(t),HOr=r(TOe," (throws an error)."),TOe.forEach(t),UOr=i(li),Yt=n(li,"DIV",{class:!0});var Ey=s(Yt);T(Lx.$$.fragment,Ey),JOr=i(Ey),h3e=n(Ey,"P",{});var E$t=s(h3e);YOr=r(E$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E$t.forEach(t),KOr=i(Ey),lm=n(Ey,"P",{});var moe=s(lm);ZOr=r(moe,`Note:
Loading a model from its configuration file does `),u3e=n(moe,"STRONG",{});var C$t=s(u3e);eVr=r(C$t,"not"),C$t.forEach(t),oVr=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(moe,"A",{href:!0});var w$t=s(uZ);rVr=r(w$t,"from_pretrained()"),w$t.forEach(t),tVr=r(moe," to load the model weights."),moe.forEach(t),aVr=i(Ey),T(r6.$$.fragment,Ey),Ey.forEach(t),nVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(xx.$$.fragment,ii),sVr=i(ii),p3e=n(ii,"P",{});var A$t=s(p3e);lVr=r(A$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),A$t.forEach(t),iVr=i(ii),Cn=n(ii,"P",{});var Cy=s(Cn);dVr=r(Cy,"The model class to instantiate is selected based on the "),_3e=n(Cy,"CODE",{});var y$t=s(_3e);cVr=r(y$t,"model_type"),y$t.forEach(t),mVr=r(Cy,` property of the config object (either
passed as an argument or loaded from `),b3e=n(Cy,"CODE",{});var L$t=s(b3e);fVr=r(L$t,"pretrained_model_name_or_path"),L$t.forEach(t),gVr=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(Cy,"CODE",{});var x$t=s(v3e);hVr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),uVr=r(Cy,":"),Cy.forEach(t),pVr=i(ii),$x=n(ii,"UL",{});var MOe=s($x);t6=n(MOe,"LI",{});var mqe=s(t6);F3e=n(mqe,"STRONG",{});var $$t=s(F3e);_Vr=r($$t,"beit"),$$t.forEach(t),bVr=r(mqe," \u2014 "),pZ=n(mqe,"A",{href:!0});var k$t=s(pZ);vVr=r(k$t,"FlaxBeitForImageClassification"),k$t.forEach(t),FVr=r(mqe," (BEiT model)"),mqe.forEach(t),TVr=i(MOe),a6=n(MOe,"LI",{});var fqe=s(a6);T3e=n(fqe,"STRONG",{});var S$t=s(T3e);MVr=r(S$t,"vit"),S$t.forEach(t),EVr=r(fqe," \u2014 "),_Z=n(fqe,"A",{href:!0});var R$t=s(_Z);CVr=r(R$t,"FlaxViTForImageClassification"),R$t.forEach(t),wVr=r(fqe," (ViT model)"),fqe.forEach(t),MOe.forEach(t),AVr=i(ii),T(n6.$$.fragment,ii),ii.forEach(t),li.forEach(t),uDe=i(m),im=n(m,"H2",{class:!0});var EOe=s(im);s6=n(EOe,"A",{id:!0,class:!0,href:!0});var P$t=s(s6);M3e=n(P$t,"SPAN",{});var B$t=s(M3e);T(kx.$$.fragment,B$t),B$t.forEach(t),P$t.forEach(t),yVr=i(EOe),E3e=n(EOe,"SPAN",{});var I$t=s(E3e);LVr=r(I$t,"FlaxAutoModelForVision2Seq"),I$t.forEach(t),EOe.forEach(t),pDe=i(m),Mr=n(m,"DIV",{class:!0});var di=s(Mr);T(Sx.$$.fragment,di),xVr=i(di),dm=n(di,"P",{});var foe=s(dm);$Vr=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bZ=n(foe,"A",{href:!0});var N$t=s(bZ);kVr=r(N$t,"from_pretrained()"),N$t.forEach(t),SVr=r(foe," class method or the "),vZ=n(foe,"A",{href:!0});var q$t=s(vZ);RVr=r(q$t,"from_config()"),q$t.forEach(t),PVr=r(foe,` class
method.`),foe.forEach(t),BVr=i(di),Rx=n(di,"P",{});var COe=s(Rx);IVr=r(COe,"This class cannot be instantiated directly using "),C3e=n(COe,"CODE",{});var j$t=s(C3e);NVr=r(j$t,"__init__()"),j$t.forEach(t),qVr=r(COe," (throws an error)."),COe.forEach(t),jVr=i(di),Kt=n(di,"DIV",{class:!0});var wy=s(Kt);T(Px.$$.fragment,wy),DVr=i(wy),w3e=n(wy,"P",{});var D$t=s(w3e);GVr=r(D$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),D$t.forEach(t),OVr=i(wy),cm=n(wy,"P",{});var goe=s(cm);VVr=r(goe,`Note:
Loading a model from its configuration file does `),A3e=n(goe,"STRONG",{});var G$t=s(A3e);XVr=r(G$t,"not"),G$t.forEach(t),zVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FZ=n(goe,"A",{href:!0});var O$t=s(FZ);WVr=r(O$t,"from_pretrained()"),O$t.forEach(t),QVr=r(goe," to load the model weights."),goe.forEach(t),HVr=i(wy),T(l6.$$.fragment,wy),wy.forEach(t),UVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Bx.$$.fragment,ci),JVr=i(ci),y3e=n(ci,"P",{});var V$t=s(y3e);YVr=r(V$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V$t.forEach(t),KVr=i(ci),wn=n(ci,"P",{});var Ay=s(wn);ZVr=r(Ay,"The model class to instantiate is selected based on the "),L3e=n(Ay,"CODE",{});var X$t=s(L3e);eXr=r(X$t,"model_type"),X$t.forEach(t),oXr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),x3e=n(Ay,"CODE",{});var z$t=s(x3e);rXr=r(z$t,"pretrained_model_name_or_path"),z$t.forEach(t),tXr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(Ay,"CODE",{});var W$t=s($3e);aXr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),nXr=r(Ay,":"),Ay.forEach(t),sXr=i(ci),k3e=n(ci,"UL",{});var Q$t=s(k3e);i6=n(Q$t,"LI",{});var gqe=s(i6);S3e=n(gqe,"STRONG",{});var H$t=s(S3e);lXr=r(H$t,"vision-encoder-decoder"),H$t.forEach(t),iXr=r(gqe," \u2014 "),TZ=n(gqe,"A",{href:!0});var U$t=s(TZ);dXr=r(U$t,"FlaxVisionEncoderDecoderModel"),U$t.forEach(t),cXr=r(gqe," (Vision Encoder decoder model)"),gqe.forEach(t),Q$t.forEach(t),mXr=i(ci),T(d6.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(ZSt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(bm,"id","extending-the-auto-classes"),c(bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bm,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Fm,"id","transformers.AutoConfig"),c(Fm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fm,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(ok,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(rk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(gk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Ek,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c($k,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(qk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Wk,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Qk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(Kk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(nS,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c($S,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(RS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(US,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(tR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(nR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(iR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hR,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(pR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(CR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(xR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(RR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(XR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(zR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(WR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(HR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(UR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(oP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(rP,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(tP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(sP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(lP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(hP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(pP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(vP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(FP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(BP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(qP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(DP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(OP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(XP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(iB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(IB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(NB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(qB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(DB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(GB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(OB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(VB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(WB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(HB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(UB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(JB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(YB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(KB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ZB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(eI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(oI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(rI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(nI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(iI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(dI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(pI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(_I,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(bI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(vI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(FI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(TI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(CI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(wI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(AI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(xI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c($I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModel"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(RI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(II,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(NI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(qI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(jI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(DI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(GI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(OI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(VI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(XI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(zI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(WI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(QI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(HI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(UI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(JI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(YI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(KI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(eN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(oN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(rN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(tN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(aN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(nN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(sN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(lN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(iN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(dN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(cN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(mN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(fN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(gN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(hN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(uN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(pN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(_N,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(bN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(FN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(TN,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(MN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(EN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(CN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(wN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(AN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(yN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(LN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(xN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c($N,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(kN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(SN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(RN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(BN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(IN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(qN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(jN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(DN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(GN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(ON,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(VN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(XN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(zN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(QN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(UN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(JN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(YN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(KN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(eq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(oq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(rq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(tq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(aq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(nq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(sq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(lq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(iq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(dq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(cq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(mq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(fq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(uq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(pq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(_q,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(vq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(wq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(xq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c($q,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(kq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Iq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Nq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Gq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Oq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Vq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Xq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Qq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Hq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Jq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Kq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ej,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(sj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ij,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(fj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(uj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(pj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(_j,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(bj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(Mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(yj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(xj,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($j,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(kj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Vj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(zj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Jj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ib,"id","transformers.AutoModelForMaskedLM"),c(Ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ib,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(iD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(hD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(_D,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ED,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c($D,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(kD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SD,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(PD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(BD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ID,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ND,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(jD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForSeq2SeqLM"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(zD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(JD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(YD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(KD,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(oG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(rG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(tG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(nG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(lG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(iG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForSequenceClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(cG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(TG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(EG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(CG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(LG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c($G,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(kG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(PG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(BG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(IG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(NG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(DG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qv,"id","transformers.AutoModelForMultipleChoice"),c(qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qv,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(cO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(mO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(fO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(gO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(hO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(uO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(pO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(_O,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(bO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(vO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(FO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(TO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(MO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(EO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(CO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(wO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(AO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(xO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c($O,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(kO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(SO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(RO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(PO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(BO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(IO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(NO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForNextSentencePrediction"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(qO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(OO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForTokenClassification"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForQuestionAnswering"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(xV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(QV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(UV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(mX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(fX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(uX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(pX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_X,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForTableQuestionAnswering"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(bX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForImageClassification"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c($X,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(kX,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForVision2Seq"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(OX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForAudioClassification"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ez,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForAudioFrameClassification"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForCTC"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(pz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(_z,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(bz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(vz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Fz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Tz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Mz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Ez,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.AutoModelForAudioXVector"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Rz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Pz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Bz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Iz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.AutoModelForMaskedImageModeling"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Gz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Oz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.AutoModelForObjectDetection"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Qz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BM,"id","transformers.AutoModelForImageSegmentation"),c(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BM,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForSemanticSegmentation"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Kz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(rW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(tW,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForInstanceSegmentation"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModel"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(gW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(hW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(uW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(pW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(_W,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(bW,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(vW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(FW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(TW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(CW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(AW,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(LW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(xW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c($W,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(kW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(SW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(RW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(PW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(BW,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(IW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(NW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(qW,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(jW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(DW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(GW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(OW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(VW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(XW,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(zW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(WW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(QW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(HW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(UW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(JW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(YW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(KW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(ZW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(oQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(tQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForPreTraining"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(cQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(fQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(hQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(pQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(bQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(vQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(TQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(MQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(AQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(xQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Q,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForCausalLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(IQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(jQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(OQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.TFAutoModelForImageClassification"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(HQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.TFAutoModelForMaskedLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(nH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(sH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(lH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(iH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(dH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(cH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(gH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(hH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_H,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(vH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(TH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(xH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c($H,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(kH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(SH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(RH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(PH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(BH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(IH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForSequenceClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(GH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(OH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(VH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(XH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(zH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(WH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(HH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(UH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(JH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(YH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(KH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.TFAutoModelForMultipleChoice"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_U,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(bU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(vU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(FU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(TU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(MU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(EU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(CU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(wU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(AU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(yU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(xU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c($U,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(kU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(IU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(NU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.TFAutoModelForTokenClassification"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(lJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.TFAutoModelForQuestionAnswering"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(hJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(_J,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(vJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(FJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(TJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(MJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(EJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(CJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(wJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(yJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(xJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c($J,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(kJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(SJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.TFAutoModelForVision2Seq"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(NJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModel"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(zJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(WJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(UJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(YJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(ZJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(eY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(oY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(rY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(tY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(aY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(sY,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(lY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(mY,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(fY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(gY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForCausalLM"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(FY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(TY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(MY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(EY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(CY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(AY,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(yY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForPreTraining"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(xY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(BY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(NY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(VY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sw,"id","transformers.FlaxAutoModelForMaskedLM"),c(Sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(HY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(JY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(YY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(KY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ZY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(iK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(dK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(cK,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(mK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(SK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(RK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(PK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(BK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(NK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(qK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(DK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.FlaxAutoModelForTokenClassification"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(GK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(WK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(QK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(HK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(UK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rm,"class","relative group"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.FlaxAutoModelForImageClassification"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.FlaxAutoModelForImageClassification"),c(nm,"class","relative group"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(_Z,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.FlaxAutoModelForVision2Seq"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(im,"class","relative group"),c(bZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,mi),b(m,hm,_),b(m,rt,_),e(rt,fi),e(rt,gi),e(gi,yy),e(rt,um),b(m,De,_),b(m,We,_),e(We,hi),e(We,yn),e(yn,Ly),e(We,Ln),e(We,xn),e(xn,xy),e(We,ui),e(We,$n),e($n,$y),e(We,pi),b(m,pm,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,U$),e(Ae,_i),e(_i,J$),e(Ae,Y$),b(m,Eo,_),b(m,wa,_),e(wa,K$),e(wa,_m),e(_m,Z$),e(wa,wOe),b(m,hqe,_),b(m,bi,_),e(bi,bm),e(bm,hoe),M(ky,hoe,null),e(bi,AOe),e(bi,uoe),e(uoe,yOe),b(m,uqe,_),b(m,kn,_),e(kn,LOe),e(kn,poe),e(poe,xOe),e(kn,$Oe),e(kn,_oe),e(_oe,kOe),e(kn,SOe),b(m,pqe,_),M(Sy,m,_),b(m,_qe,_),b(m,ek,_),e(ek,ROe),b(m,bqe,_),M(vm,m,_),b(m,vqe,_),b(m,vi,_),e(vi,Fm),e(Fm,boe),M(Ry,boe,null),e(vi,POe),e(vi,voe),e(voe,BOe),b(m,Fqe,_),b(m,Co,_),M(Py,Co,null),e(Co,IOe),e(Co,By),e(By,NOe),e(By,ok),e(ok,qOe),e(By,jOe),e(Co,DOe),e(Co,Iy),e(Iy,GOe),e(Iy,Foe),e(Foe,OOe),e(Iy,VOe),e(Co,XOe),e(Co,Er),M(Ny,Er,null),e(Er,zOe),e(Er,Toe),e(Toe,WOe),e(Er,QOe),e(Er,Fi),e(Fi,HOe),e(Fi,Moe),e(Moe,UOe),e(Fi,JOe),e(Fi,Eoe),e(Eoe,YOe),e(Fi,KOe),e(Er,ZOe),e(Er,A),e(A,Tm),e(Tm,Coe),e(Coe,eVe),e(Tm,oVe),e(Tm,rk),e(rk,rVe),e(Tm,tVe),e(A,aVe),e(A,Mm),e(Mm,woe),e(woe,nVe),e(Mm,sVe),e(Mm,tk),e(tk,lVe),e(Mm,iVe),e(A,dVe),e(A,Em),e(Em,Aoe),e(Aoe,cVe),e(Em,mVe),e(Em,ak),e(ak,fVe),e(Em,gVe),e(A,hVe),e(A,Cm),e(Cm,yoe),e(yoe,uVe),e(Cm,pVe),e(Cm,nk),e(nk,_Ve),e(Cm,bVe),e(A,vVe),e(A,wm),e(wm,Loe),e(Loe,FVe),e(wm,TVe),e(wm,sk),e(sk,MVe),e(wm,EVe),e(A,CVe),e(A,Am),e(Am,xoe),e(xoe,wVe),e(Am,AVe),e(Am,lk),e(lk,yVe),e(Am,LVe),e(A,xVe),e(A,ym),e(ym,$oe),e($oe,$Ve),e(ym,kVe),e(ym,ik),e(ik,SVe),e(ym,RVe),e(A,PVe),e(A,Lm),e(Lm,koe),e(koe,BVe),e(Lm,IVe),e(Lm,dk),e(dk,NVe),e(Lm,qVe),e(A,jVe),e(A,xm),e(xm,Soe),e(Soe,DVe),e(xm,GVe),e(xm,ck),e(ck,OVe),e(xm,VVe),e(A,XVe),e(A,$m),e($m,Roe),e(Roe,zVe),e($m,WVe),e($m,mk),e(mk,QVe),e($m,HVe),e(A,UVe),e(A,km),e(km,Poe),e(Poe,JVe),e(km,YVe),e(km,fk),e(fk,KVe),e(km,ZVe),e(A,eXe),e(A,Sm),e(Sm,Boe),e(Boe,oXe),e(Sm,rXe),e(Sm,gk),e(gk,tXe),e(Sm,aXe),e(A,nXe),e(A,Rm),e(Rm,Ioe),e(Ioe,sXe),e(Rm,lXe),e(Rm,hk),e(hk,iXe),e(Rm,dXe),e(A,cXe),e(A,Pm),e(Pm,Noe),e(Noe,mXe),e(Pm,fXe),e(Pm,uk),e(uk,gXe),e(Pm,hXe),e(A,uXe),e(A,Bm),e(Bm,qoe),e(qoe,pXe),e(Bm,_Xe),e(Bm,pk),e(pk,bXe),e(Bm,vXe),e(A,FXe),e(A,Im),e(Im,joe),e(joe,TXe),e(Im,MXe),e(Im,_k),e(_k,EXe),e(Im,CXe),e(A,wXe),e(A,Nm),e(Nm,Doe),e(Doe,AXe),e(Nm,yXe),e(Nm,bk),e(bk,LXe),e(Nm,xXe),e(A,$Xe),e(A,qm),e(qm,Goe),e(Goe,kXe),e(qm,SXe),e(qm,vk),e(vk,RXe),e(qm,PXe),e(A,BXe),e(A,jm),e(jm,Ooe),e(Ooe,IXe),e(jm,NXe),e(jm,Fk),e(Fk,qXe),e(jm,jXe),e(A,DXe),e(A,Dm),e(Dm,Voe),e(Voe,GXe),e(Dm,OXe),e(Dm,Tk),e(Tk,VXe),e(Dm,XXe),e(A,zXe),e(A,Gm),e(Gm,Xoe),e(Xoe,WXe),e(Gm,QXe),e(Gm,Mk),e(Mk,HXe),e(Gm,UXe),e(A,JXe),e(A,Om),e(Om,zoe),e(zoe,YXe),e(Om,KXe),e(Om,Ek),e(Ek,ZXe),e(Om,eze),e(A,oze),e(A,Vm),e(Vm,Woe),e(Woe,rze),e(Vm,tze),e(Vm,Ck),e(Ck,aze),e(Vm,nze),e(A,sze),e(A,Xm),e(Xm,Qoe),e(Qoe,lze),e(Xm,ize),e(Xm,wk),e(wk,dze),e(Xm,cze),e(A,mze),e(A,zm),e(zm,Hoe),e(Hoe,fze),e(zm,gze),e(zm,Ak),e(Ak,hze),e(zm,uze),e(A,pze),e(A,Wm),e(Wm,Uoe),e(Uoe,_ze),e(Wm,bze),e(Wm,yk),e(yk,vze),e(Wm,Fze),e(A,Tze),e(A,Qm),e(Qm,Joe),e(Joe,Mze),e(Qm,Eze),e(Qm,Lk),e(Lk,Cze),e(Qm,wze),e(A,Aze),e(A,Hm),e(Hm,Yoe),e(Yoe,yze),e(Hm,Lze),e(Hm,xk),e(xk,xze),e(Hm,$ze),e(A,kze),e(A,Um),e(Um,Koe),e(Koe,Sze),e(Um,Rze),e(Um,$k),e($k,Pze),e(Um,Bze),e(A,Ize),e(A,Jm),e(Jm,Zoe),e(Zoe,Nze),e(Jm,qze),e(Jm,kk),e(kk,jze),e(Jm,Dze),e(A,Gze),e(A,Ym),e(Ym,ere),e(ere,Oze),e(Ym,Vze),e(Ym,Sk),e(Sk,Xze),e(Ym,zze),e(A,Wze),e(A,Km),e(Km,ore),e(ore,Qze),e(Km,Hze),e(Km,Rk),e(Rk,Uze),e(Km,Jze),e(A,Yze),e(A,Zm),e(Zm,rre),e(rre,Kze),e(Zm,Zze),e(Zm,Pk),e(Pk,eWe),e(Zm,oWe),e(A,rWe),e(A,ef),e(ef,tre),e(tre,tWe),e(ef,aWe),e(ef,Bk),e(Bk,nWe),e(ef,sWe),e(A,lWe),e(A,of),e(of,are),e(are,iWe),e(of,dWe),e(of,Ik),e(Ik,cWe),e(of,mWe),e(A,fWe),e(A,rf),e(rf,nre),e(nre,gWe),e(rf,hWe),e(rf,Nk),e(Nk,uWe),e(rf,pWe),e(A,_We),e(A,tf),e(tf,sre),e(sre,bWe),e(tf,vWe),e(tf,qk),e(qk,FWe),e(tf,TWe),e(A,MWe),e(A,af),e(af,lre),e(lre,EWe),e(af,CWe),e(af,jk),e(jk,wWe),e(af,AWe),e(A,yWe),e(A,nf),e(nf,ire),e(ire,LWe),e(nf,xWe),e(nf,Dk),e(Dk,$We),e(nf,kWe),e(A,SWe),e(A,sf),e(sf,dre),e(dre,RWe),e(sf,PWe),e(sf,Gk),e(Gk,BWe),e(sf,IWe),e(A,NWe),e(A,lf),e(lf,cre),e(cre,qWe),e(lf,jWe),e(lf,Ok),e(Ok,DWe),e(lf,GWe),e(A,OWe),e(A,df),e(df,mre),e(mre,VWe),e(df,XWe),e(df,Vk),e(Vk,zWe),e(df,WWe),e(A,QWe),e(A,cf),e(cf,fre),e(fre,HWe),e(cf,UWe),e(cf,Xk),e(Xk,JWe),e(cf,YWe),e(A,KWe),e(A,mf),e(mf,gre),e(gre,ZWe),e(mf,eQe),e(mf,zk),e(zk,oQe),e(mf,rQe),e(A,tQe),e(A,ff),e(ff,hre),e(hre,aQe),e(ff,nQe),e(ff,Wk),e(Wk,sQe),e(ff,lQe),e(A,iQe),e(A,gf),e(gf,ure),e(ure,dQe),e(gf,cQe),e(gf,Qk),e(Qk,mQe),e(gf,fQe),e(A,gQe),e(A,hf),e(hf,pre),e(pre,hQe),e(hf,uQe),e(hf,Hk),e(Hk,pQe),e(hf,_Qe),e(A,bQe),e(A,uf),e(uf,_re),e(_re,vQe),e(uf,FQe),e(uf,Uk),e(Uk,TQe),e(uf,MQe),e(A,EQe),e(A,pf),e(pf,bre),e(bre,CQe),e(pf,wQe),e(pf,Jk),e(Jk,AQe),e(pf,yQe),e(A,LQe),e(A,_f),e(_f,vre),e(vre,xQe),e(_f,$Qe),e(_f,Yk),e(Yk,kQe),e(_f,SQe),e(A,RQe),e(A,bf),e(bf,Fre),e(Fre,PQe),e(bf,BQe),e(bf,Kk),e(Kk,IQe),e(bf,NQe),e(A,qQe),e(A,vf),e(vf,Tre),e(Tre,jQe),e(vf,DQe),e(vf,Zk),e(Zk,GQe),e(vf,OQe),e(A,VQe),e(A,Ff),e(Ff,Mre),e(Mre,XQe),e(Ff,zQe),e(Ff,eS),e(eS,WQe),e(Ff,QQe),e(A,HQe),e(A,Tf),e(Tf,Ere),e(Ere,UQe),e(Tf,JQe),e(Tf,oS),e(oS,YQe),e(Tf,KQe),e(A,ZQe),e(A,Mf),e(Mf,Cre),e(Cre,eHe),e(Mf,oHe),e(Mf,rS),e(rS,rHe),e(Mf,tHe),e(A,aHe),e(A,Ef),e(Ef,wre),e(wre,nHe),e(Ef,sHe),e(Ef,tS),e(tS,lHe),e(Ef,iHe),e(A,dHe),e(A,Cf),e(Cf,Are),e(Are,cHe),e(Cf,mHe),e(Cf,aS),e(aS,fHe),e(Cf,gHe),e(A,hHe),e(A,wf),e(wf,yre),e(yre,uHe),e(wf,pHe),e(wf,nS),e(nS,_He),e(wf,bHe),e(A,vHe),e(A,Af),e(Af,Lre),e(Lre,FHe),e(Af,THe),e(Af,sS),e(sS,MHe),e(Af,EHe),e(A,CHe),e(A,yf),e(yf,xre),e(xre,wHe),e(yf,AHe),e(yf,lS),e(lS,yHe),e(yf,LHe),e(A,xHe),e(A,Lf),e(Lf,$re),e($re,$He),e(Lf,kHe),e(Lf,iS),e(iS,SHe),e(Lf,RHe),e(A,PHe),e(A,xf),e(xf,kre),e(kre,BHe),e(xf,IHe),e(xf,dS),e(dS,NHe),e(xf,qHe),e(A,jHe),e(A,$f),e($f,Sre),e(Sre,DHe),e($f,GHe),e($f,cS),e(cS,OHe),e($f,VHe),e(A,XHe),e(A,kf),e(kf,Rre),e(Rre,zHe),e(kf,WHe),e(kf,mS),e(mS,QHe),e(kf,HHe),e(A,UHe),e(A,Sf),e(Sf,Pre),e(Pre,JHe),e(Sf,YHe),e(Sf,fS),e(fS,KHe),e(Sf,ZHe),e(A,eUe),e(A,Rf),e(Rf,Bre),e(Bre,oUe),e(Rf,rUe),e(Rf,gS),e(gS,tUe),e(Rf,aUe),e(A,nUe),e(A,Pf),e(Pf,Ire),e(Ire,sUe),e(Pf,lUe),e(Pf,hS),e(hS,iUe),e(Pf,dUe),e(A,cUe),e(A,Bf),e(Bf,Nre),e(Nre,mUe),e(Bf,fUe),e(Bf,uS),e(uS,gUe),e(Bf,hUe),e(A,uUe),e(A,If),e(If,qre),e(qre,pUe),e(If,_Ue),e(If,pS),e(pS,bUe),e(If,vUe),e(A,FUe),e(A,Nf),e(Nf,jre),e(jre,TUe),e(Nf,MUe),e(Nf,_S),e(_S,EUe),e(Nf,CUe),e(A,wUe),e(A,qf),e(qf,Dre),e(Dre,AUe),e(qf,yUe),e(qf,bS),e(bS,LUe),e(qf,xUe),e(A,$Ue),e(A,jf),e(jf,Gre),e(Gre,kUe),e(jf,SUe),e(jf,vS),e(vS,RUe),e(jf,PUe),e(A,BUe),e(A,Df),e(Df,Ore),e(Ore,IUe),e(Df,NUe),e(Df,FS),e(FS,qUe),e(Df,jUe),e(A,DUe),e(A,Gf),e(Gf,Vre),e(Vre,GUe),e(Gf,OUe),e(Gf,TS),e(TS,VUe),e(Gf,XUe),e(A,zUe),e(A,Of),e(Of,Xre),e(Xre,WUe),e(Of,QUe),e(Of,MS),e(MS,HUe),e(Of,UUe),e(A,JUe),e(A,Vf),e(Vf,zre),e(zre,YUe),e(Vf,KUe),e(Vf,ES),e(ES,ZUe),e(Vf,eJe),e(A,oJe),e(A,Xf),e(Xf,Wre),e(Wre,rJe),e(Xf,tJe),e(Xf,CS),e(CS,aJe),e(Xf,nJe),e(A,sJe),e(A,zf),e(zf,Qre),e(Qre,lJe),e(zf,iJe),e(zf,wS),e(wS,dJe),e(zf,cJe),e(A,mJe),e(A,Wf),e(Wf,Hre),e(Hre,fJe),e(Wf,gJe),e(Wf,AS),e(AS,hJe),e(Wf,uJe),e(A,pJe),e(A,Qf),e(Qf,Ure),e(Ure,_Je),e(Qf,bJe),e(Qf,yS),e(yS,vJe),e(Qf,FJe),e(A,TJe),e(A,Hf),e(Hf,Jre),e(Jre,MJe),e(Hf,EJe),e(Hf,LS),e(LS,CJe),e(Hf,wJe),e(A,AJe),e(A,Uf),e(Uf,Yre),e(Yre,yJe),e(Uf,LJe),e(Uf,xS),e(xS,xJe),e(Uf,$Je),e(A,kJe),e(A,Jf),e(Jf,Kre),e(Kre,SJe),e(Jf,RJe),e(Jf,$S),e($S,PJe),e(Jf,BJe),e(A,IJe),e(A,Yf),e(Yf,Zre),e(Zre,NJe),e(Yf,qJe),e(Yf,kS),e(kS,jJe),e(Yf,DJe),e(A,GJe),e(A,Kf),e(Kf,ete),e(ete,OJe),e(Kf,VJe),e(Kf,SS),e(SS,XJe),e(Kf,zJe),e(A,WJe),e(A,Zf),e(Zf,ote),e(ote,QJe),e(Zf,HJe),e(Zf,RS),e(RS,UJe),e(Zf,JJe),e(A,YJe),e(A,eg),e(eg,rte),e(rte,KJe),e(eg,ZJe),e(eg,PS),e(PS,eYe),e(eg,oYe),e(A,rYe),e(A,og),e(og,tte),e(tte,tYe),e(og,aYe),e(og,BS),e(BS,nYe),e(og,sYe),e(A,lYe),e(A,rg),e(rg,ate),e(ate,iYe),e(rg,dYe),e(rg,IS),e(IS,cYe),e(rg,mYe),e(A,fYe),e(A,tg),e(tg,nte),e(nte,gYe),e(tg,hYe),e(tg,NS),e(NS,uYe),e(tg,pYe),e(A,_Ye),e(A,ag),e(ag,ste),e(ste,bYe),e(ag,vYe),e(ag,qS),e(qS,FYe),e(ag,TYe),e(A,MYe),e(A,ng),e(ng,lte),e(lte,EYe),e(ng,CYe),e(ng,jS),e(jS,wYe),e(ng,AYe),e(A,yYe),e(A,sg),e(sg,ite),e(ite,LYe),e(sg,xYe),e(sg,DS),e(DS,$Ye),e(sg,kYe),e(A,SYe),e(A,lg),e(lg,dte),e(dte,RYe),e(lg,PYe),e(lg,GS),e(GS,BYe),e(lg,IYe),e(A,NYe),e(A,ig),e(ig,cte),e(cte,qYe),e(ig,jYe),e(ig,OS),e(OS,DYe),e(ig,GYe),e(A,OYe),e(A,dg),e(dg,mte),e(mte,VYe),e(dg,XYe),e(dg,VS),e(VS,zYe),e(dg,WYe),e(A,QYe),e(A,cg),e(cg,fte),e(fte,HYe),e(cg,UYe),e(cg,XS),e(XS,JYe),e(cg,YYe),e(A,KYe),e(A,mg),e(mg,gte),e(gte,ZYe),e(mg,eKe),e(mg,zS),e(zS,oKe),e(mg,rKe),e(A,tKe),e(A,fg),e(fg,hte),e(hte,aKe),e(fg,nKe),e(fg,WS),e(WS,sKe),e(fg,lKe),e(A,iKe),e(A,gg),e(gg,ute),e(ute,dKe),e(gg,cKe),e(gg,QS),e(QS,mKe),e(gg,fKe),e(A,gKe),e(A,hg),e(hg,pte),e(pte,hKe),e(hg,uKe),e(hg,HS),e(HS,pKe),e(hg,_Ke),e(A,bKe),e(A,ug),e(ug,_te),e(_te,vKe),e(ug,FKe),e(ug,US),e(US,TKe),e(ug,MKe),e(A,EKe),e(A,pg),e(pg,bte),e(bte,CKe),e(pg,wKe),e(pg,JS),e(JS,AKe),e(pg,yKe),e(A,LKe),e(A,_g),e(_g,vte),e(vte,xKe),e(_g,$Ke),e(_g,YS),e(YS,kKe),e(_g,SKe),e(A,RKe),e(A,bg),e(bg,Fte),e(Fte,PKe),e(bg,BKe),e(bg,KS),e(KS,IKe),e(bg,NKe),e(A,qKe),e(A,vg),e(vg,Tte),e(Tte,jKe),e(vg,DKe),e(vg,ZS),e(ZS,GKe),e(vg,OKe),e(A,VKe),e(A,Fg),e(Fg,Mte),e(Mte,XKe),e(Fg,zKe),e(Fg,eR),e(eR,WKe),e(Fg,QKe),e(A,HKe),e(A,Tg),e(Tg,Ete),e(Ete,UKe),e(Tg,JKe),e(Tg,oR),e(oR,YKe),e(Tg,KKe),e(A,ZKe),e(A,Mg),e(Mg,Cte),e(Cte,eZe),e(Mg,oZe),e(Mg,rR),e(rR,rZe),e(Mg,tZe),e(Er,aZe),M(Eg,Er,null),e(Co,nZe),e(Co,Cg),M(qy,Cg,null),e(Cg,sZe),e(Cg,wte),e(wte,lZe),b(m,Tqe,_),b(m,Ti,_),e(Ti,wg),e(wg,Ate),M(jy,Ate,null),e(Ti,iZe),e(Ti,yte),e(yte,dZe),b(m,Mqe,_),b(m,wo,_),M(Dy,wo,null),e(wo,cZe),e(wo,Gy),e(Gy,mZe),e(Gy,tR),e(tR,fZe),e(Gy,gZe),e(wo,hZe),e(wo,Oy),e(Oy,uZe),e(Oy,Lte),e(Lte,pZe),e(Oy,_Ze),e(wo,bZe),e(wo,Cr),M(Vy,Cr,null),e(Cr,vZe),e(Cr,xte),e(xte,FZe),e(Cr,TZe),e(Cr,Aa),e(Aa,MZe),e(Aa,$te),e($te,EZe),e(Aa,CZe),e(Aa,kte),e(kte,wZe),e(Aa,AZe),e(Aa,Ste),e(Ste,yZe),e(Aa,LZe),e(Cr,xZe),e(Cr,k),e(k,Sn),e(Sn,Rte),e(Rte,$Ze),e(Sn,kZe),e(Sn,aR),e(aR,SZe),e(Sn,RZe),e(Sn,nR),e(nR,PZe),e(Sn,BZe),e(k,IZe),e(k,Rn),e(Rn,Pte),e(Pte,NZe),e(Rn,qZe),e(Rn,sR),e(sR,jZe),e(Rn,DZe),e(Rn,lR),e(lR,GZe),e(Rn,OZe),e(k,VZe),e(k,Pn),e(Pn,Bte),e(Bte,XZe),e(Pn,zZe),e(Pn,iR),e(iR,WZe),e(Pn,QZe),e(Pn,dR),e(dR,HZe),e(Pn,UZe),e(k,JZe),e(k,Ag),e(Ag,Ite),e(Ite,YZe),e(Ag,KZe),e(Ag,cR),e(cR,ZZe),e(Ag,eeo),e(k,oeo),e(k,Bn),e(Bn,Nte),e(Nte,reo),e(Bn,teo),e(Bn,mR),e(mR,aeo),e(Bn,neo),e(Bn,fR),e(fR,seo),e(Bn,leo),e(k,ieo),e(k,yg),e(yg,qte),e(qte,deo),e(yg,ceo),e(yg,gR),e(gR,meo),e(yg,feo),e(k,geo),e(k,Lg),e(Lg,jte),e(jte,heo),e(Lg,ueo),e(Lg,hR),e(hR,peo),e(Lg,_eo),e(k,beo),e(k,xg),e(xg,Dte),e(Dte,veo),e(xg,Feo),e(xg,uR),e(uR,Teo),e(xg,Meo),e(k,Eeo),e(k,In),e(In,Gte),e(Gte,Ceo),e(In,weo),e(In,pR),e(pR,Aeo),e(In,yeo),e(In,_R),e(_R,Leo),e(In,xeo),e(k,$eo),e(k,Nn),e(Nn,Ote),e(Ote,keo),e(Nn,Seo),e(Nn,bR),e(bR,Reo),e(Nn,Peo),e(Nn,vR),e(vR,Beo),e(Nn,Ieo),e(k,Neo),e(k,qn),e(qn,Vte),e(Vte,qeo),e(qn,jeo),e(qn,FR),e(FR,Deo),e(qn,Geo),e(qn,TR),e(TR,Oeo),e(qn,Veo),e(k,Xeo),e(k,$g),e($g,Xte),e(Xte,zeo),e($g,Weo),e($g,MR),e(MR,Qeo),e($g,Heo),e(k,Ueo),e(k,kg),e(kg,zte),e(zte,Jeo),e(kg,Yeo),e(kg,ER),e(ER,Keo),e(kg,Zeo),e(k,eoo),e(k,jn),e(jn,Wte),e(Wte,ooo),e(jn,roo),e(jn,CR),e(CR,too),e(jn,aoo),e(jn,wR),e(wR,noo),e(jn,soo),e(k,loo),e(k,Sg),e(Sg,Qte),e(Qte,ioo),e(Sg,doo),e(Sg,AR),e(AR,coo),e(Sg,moo),e(k,foo),e(k,Dn),e(Dn,Hte),e(Hte,goo),e(Dn,hoo),e(Dn,yR),e(yR,uoo),e(Dn,poo),e(Dn,LR),e(LR,_oo),e(Dn,boo),e(k,voo),e(k,Gn),e(Gn,Ute),e(Ute,Foo),e(Gn,Too),e(Gn,xR),e(xR,Moo),e(Gn,Eoo),e(Gn,$R),e($R,Coo),e(Gn,woo),e(k,Aoo),e(k,On),e(On,Jte),e(Jte,yoo),e(On,Loo),e(On,kR),e(kR,xoo),e(On,$oo),e(On,SR),e(SR,koo),e(On,Soo),e(k,Roo),e(k,Rg),e(Rg,Yte),e(Yte,Poo),e(Rg,Boo),e(Rg,RR),e(RR,Ioo),e(Rg,Noo),e(k,qoo),e(k,Vn),e(Vn,Kte),e(Kte,joo),e(Vn,Doo),e(Vn,PR),e(PR,Goo),e(Vn,Ooo),e(Vn,BR),e(BR,Voo),e(Vn,Xoo),e(k,zoo),e(k,Xn),e(Xn,Zte),e(Zte,Woo),e(Xn,Qoo),e(Xn,IR),e(IR,Hoo),e(Xn,Uoo),e(Xn,NR),e(NR,Joo),e(Xn,Yoo),e(k,Koo),e(k,zn),e(zn,eae),e(eae,Zoo),e(zn,ero),e(zn,qR),e(qR,oro),e(zn,rro),e(zn,jR),e(jR,tro),e(zn,aro),e(k,nro),e(k,Wn),e(Wn,oae),e(oae,sro),e(Wn,lro),e(Wn,DR),e(DR,iro),e(Wn,dro),e(Wn,GR),e(GR,cro),e(Wn,mro),e(k,fro),e(k,Qn),e(Qn,rae),e(rae,gro),e(Qn,hro),e(Qn,OR),e(OR,uro),e(Qn,pro),e(Qn,VR),e(VR,_ro),e(Qn,bro),e(k,vro),e(k,Hn),e(Hn,tae),e(tae,Fro),e(Hn,Tro),e(Hn,XR),e(XR,Mro),e(Hn,Ero),e(Hn,zR),e(zR,Cro),e(Hn,wro),e(k,Aro),e(k,Pg),e(Pg,aae),e(aae,yro),e(Pg,Lro),e(Pg,WR),e(WR,xro),e(Pg,$ro),e(k,kro),e(k,Un),e(Un,nae),e(nae,Sro),e(Un,Rro),e(Un,QR),e(QR,Pro),e(Un,Bro),e(Un,HR),e(HR,Iro),e(Un,Nro),e(k,qro),e(k,Bg),e(Bg,sae),e(sae,jro),e(Bg,Dro),e(Bg,UR),e(UR,Gro),e(Bg,Oro),e(k,Vro),e(k,Jn),e(Jn,lae),e(lae,Xro),e(Jn,zro),e(Jn,JR),e(JR,Wro),e(Jn,Qro),e(Jn,YR),e(YR,Hro),e(Jn,Uro),e(k,Jro),e(k,Yn),e(Yn,iae),e(iae,Yro),e(Yn,Kro),e(Yn,KR),e(KR,Zro),e(Yn,eto),e(Yn,ZR),e(ZR,oto),e(Yn,rto),e(k,tto),e(k,Kn),e(Kn,dae),e(dae,ato),e(Kn,nto),e(Kn,eP),e(eP,sto),e(Kn,lto),e(Kn,oP),e(oP,ito),e(Kn,dto),e(k,cto),e(k,Ig),e(Ig,cae),e(cae,mto),e(Ig,fto),e(Ig,rP),e(rP,gto),e(Ig,hto),e(k,uto),e(k,Zn),e(Zn,mae),e(mae,pto),e(Zn,_to),e(Zn,tP),e(tP,bto),e(Zn,vto),e(Zn,aP),e(aP,Fto),e(Zn,Tto),e(k,Mto),e(k,es),e(es,fae),e(fae,Eto),e(es,Cto),e(es,nP),e(nP,wto),e(es,Ato),e(es,sP),e(sP,yto),e(es,Lto),e(k,xto),e(k,Ng),e(Ng,gae),e(gae,$to),e(Ng,kto),e(Ng,lP),e(lP,Sto),e(Ng,Rto),e(k,Pto),e(k,os),e(os,hae),e(hae,Bto),e(os,Ito),e(os,iP),e(iP,Nto),e(os,qto),e(os,dP),e(dP,jto),e(os,Dto),e(k,Gto),e(k,rs),e(rs,uae),e(uae,Oto),e(rs,Vto),e(rs,cP),e(cP,Xto),e(rs,zto),e(rs,mP),e(mP,Wto),e(rs,Qto),e(k,Hto),e(k,ts),e(ts,pae),e(pae,Uto),e(ts,Jto),e(ts,fP),e(fP,Yto),e(ts,Kto),e(ts,gP),e(gP,Zto),e(ts,eao),e(k,oao),e(k,as),e(as,_ae),e(_ae,rao),e(as,tao),e(as,hP),e(hP,aao),e(as,nao),e(as,uP),e(uP,sao),e(as,lao),e(k,iao),e(k,ns),e(ns,bae),e(bae,dao),e(ns,cao),e(ns,pP),e(pP,mao),e(ns,fao),e(ns,_P),e(_P,gao),e(ns,hao),e(k,uao),e(k,ss),e(ss,vae),e(vae,pao),e(ss,_ao),e(ss,bP),e(bP,bao),e(ss,vao),e(ss,vP),e(vP,Fao),e(ss,Tao),e(k,Mao),e(k,ls),e(ls,Fae),e(Fae,Eao),e(ls,Cao),e(ls,FP),e(FP,wao),e(ls,Aao),e(ls,TP),e(TP,yao),e(ls,Lao),e(k,xao),e(k,qg),e(qg,Tae),e(Tae,$ao),e(qg,kao),e(qg,MP),e(MP,Sao),e(qg,Rao),e(k,Pao),e(k,is),e(is,Mae),e(Mae,Bao),e(is,Iao),e(is,EP),e(EP,Nao),e(is,qao),e(is,CP),e(CP,jao),e(is,Dao),e(k,Gao),e(k,jg),e(jg,Eae),e(Eae,Oao),e(jg,Vao),e(jg,wP),e(wP,Xao),e(jg,zao),e(k,Wao),e(k,Dg),e(Dg,Cae),e(Cae,Qao),e(Dg,Hao),e(Dg,AP),e(AP,Uao),e(Dg,Jao),e(k,Yao),e(k,ds),e(ds,wae),e(wae,Kao),e(ds,Zao),e(ds,yP),e(yP,eno),e(ds,ono),e(ds,LP),e(LP,rno),e(ds,tno),e(k,ano),e(k,cs),e(cs,Aae),e(Aae,nno),e(cs,sno),e(cs,xP),e(xP,lno),e(cs,ino),e(cs,$P),e($P,dno),e(cs,cno),e(k,mno),e(k,ms),e(ms,yae),e(yae,fno),e(ms,gno),e(ms,kP),e(kP,hno),e(ms,uno),e(ms,SP),e(SP,pno),e(ms,_no),e(k,bno),e(k,Gg),e(Gg,Lae),e(Lae,vno),e(Gg,Fno),e(Gg,RP),e(RP,Tno),e(Gg,Mno),e(k,Eno),e(k,fs),e(fs,xae),e(xae,Cno),e(fs,wno),e(fs,PP),e(PP,Ano),e(fs,yno),e(fs,BP),e(BP,Lno),e(fs,xno),e(k,$no),e(k,gs),e(gs,$ae),e($ae,kno),e(gs,Sno),e(gs,IP),e(IP,Rno),e(gs,Pno),e(gs,NP),e(NP,Bno),e(gs,Ino),e(k,Nno),e(k,hs),e(hs,kae),e(kae,qno),e(hs,jno),e(hs,qP),e(qP,Dno),e(hs,Gno),e(hs,jP),e(jP,Ono),e(hs,Vno),e(k,Xno),e(k,us),e(us,Sae),e(Sae,zno),e(us,Wno),e(us,DP),e(DP,Qno),e(us,Hno),e(us,GP),e(GP,Uno),e(us,Jno),e(k,Yno),e(k,ps),e(ps,Rae),e(Rae,Kno),e(ps,Zno),e(ps,OP),e(OP,eso),e(ps,oso),e(ps,VP),e(VP,rso),e(ps,tso),e(k,aso),e(k,Og),e(Og,Pae),e(Pae,nso),e(Og,sso),e(Og,XP),e(XP,lso),e(Og,iso),e(k,dso),e(k,_s),e(_s,Bae),e(Bae,cso),e(_s,mso),e(_s,zP),e(zP,fso),e(_s,gso),e(_s,WP),e(WP,hso),e(_s,uso),e(k,pso),e(k,Vg),e(Vg,Iae),e(Iae,_so),e(Vg,bso),e(Vg,QP),e(QP,vso),e(Vg,Fso),e(k,Tso),e(k,Xg),e(Xg,Nae),e(Nae,Mso),e(Xg,Eso),e(Xg,HP),e(HP,Cso),e(Xg,wso),e(k,Aso),e(k,zg),e(zg,qae),e(qae,yso),e(zg,Lso),e(zg,UP),e(UP,xso),e(zg,$so),e(k,kso),e(k,Wg),e(Wg,jae),e(jae,Sso),e(Wg,Rso),e(Wg,JP),e(JP,Pso),e(Wg,Bso),e(k,Iso),e(k,bs),e(bs,Dae),e(Dae,Nso),e(bs,qso),e(bs,YP),e(YP,jso),e(bs,Dso),e(bs,KP),e(KP,Gso),e(bs,Oso),e(k,Vso),e(k,Qg),e(Qg,Gae),e(Gae,Xso),e(Qg,zso),e(Qg,ZP),e(ZP,Wso),e(Qg,Qso),e(k,Hso),e(k,vs),e(vs,Oae),e(Oae,Uso),e(vs,Jso),e(vs,eB),e(eB,Yso),e(vs,Kso),e(vs,oB),e(oB,Zso),e(vs,elo),e(k,olo),e(k,Fs),e(Fs,Vae),e(Vae,rlo),e(Fs,tlo),e(Fs,rB),e(rB,alo),e(Fs,nlo),e(Fs,tB),e(tB,slo),e(Fs,llo),e(k,ilo),e(k,Ts),e(Ts,Xae),e(Xae,dlo),e(Ts,clo),e(Ts,aB),e(aB,mlo),e(Ts,flo),e(Ts,nB),e(nB,glo),e(Ts,hlo),e(k,ulo),e(k,Ms),e(Ms,zae),e(zae,plo),e(Ms,_lo),e(Ms,sB),e(sB,blo),e(Ms,vlo),e(Ms,lB),e(lB,Flo),e(Ms,Tlo),e(k,Mlo),e(k,Es),e(Es,Wae),e(Wae,Elo),e(Es,Clo),e(Es,iB),e(iB,wlo),e(Es,Alo),e(Es,dB),e(dB,ylo),e(Es,Llo),e(k,xlo),e(k,Cs),e(Cs,Qae),e(Qae,$lo),e(Cs,klo),e(Cs,cB),e(cB,Slo),e(Cs,Rlo),e(Cs,mB),e(mB,Plo),e(Cs,Blo),e(k,Ilo),e(k,Hg),e(Hg,Hae),e(Hae,Nlo),e(Hg,qlo),e(Hg,fB),e(fB,jlo),e(Hg,Dlo),e(k,Glo),e(k,Ug),e(Ug,Uae),e(Uae,Olo),e(Ug,Vlo),e(Ug,gB),e(gB,Xlo),e(Ug,zlo),e(k,Wlo),e(k,ws),e(ws,Jae),e(Jae,Qlo),e(ws,Hlo),e(ws,hB),e(hB,Ulo),e(ws,Jlo),e(ws,uB),e(uB,Ylo),e(ws,Klo),e(k,Zlo),e(k,As),e(As,Yae),e(Yae,eio),e(As,oio),e(As,pB),e(pB,rio),e(As,tio),e(As,_B),e(_B,aio),e(As,nio),e(k,sio),e(k,ys),e(ys,Kae),e(Kae,lio),e(ys,iio),e(ys,bB),e(bB,dio),e(ys,cio),e(ys,vB),e(vB,mio),e(ys,fio),e(k,gio),e(k,Jg),e(Jg,Zae),e(Zae,hio),e(Jg,uio),e(Jg,FB),e(FB,pio),e(Jg,_io),e(k,bio),e(k,Yg),e(Yg,ene),e(ene,vio),e(Yg,Fio),e(Yg,TB),e(TB,Tio),e(Yg,Mio),e(k,Eio),e(k,Kg),e(Kg,one),e(one,Cio),e(Kg,wio),e(Kg,MB),e(MB,Aio),e(Kg,yio),e(k,Lio),e(k,Ls),e(Ls,rne),e(rne,xio),e(Ls,$io),e(Ls,EB),e(EB,kio),e(Ls,Sio),e(Ls,CB),e(CB,Rio),e(Ls,Pio),e(k,Bio),e(k,Zg),e(Zg,tne),e(tne,Iio),e(Zg,Nio),e(Zg,wB),e(wB,qio),e(Zg,jio),e(k,Dio),e(k,eh),e(eh,ane),e(ane,Gio),e(eh,Oio),e(eh,AB),e(AB,Vio),e(eh,Xio),e(k,zio),e(k,oh),e(oh,nne),e(nne,Wio),e(oh,Qio),e(oh,yB),e(yB,Hio),e(oh,Uio),e(k,Jio),e(k,xs),e(xs,sne),e(sne,Yio),e(xs,Kio),e(xs,LB),e(LB,Zio),e(xs,edo),e(xs,xB),e(xB,odo),e(xs,rdo),e(k,tdo),e(k,rh),e(rh,lne),e(lne,ado),e(rh,ndo),e(rh,$B),e($B,sdo),e(rh,ldo),e(k,ido),e(k,th),e(th,ine),e(ine,ddo),e(th,cdo),e(th,kB),e(kB,mdo),e(th,fdo),e(k,gdo),e(k,$s),e($s,dne),e(dne,hdo),e($s,udo),e($s,SB),e(SB,pdo),e($s,_do),e($s,RB),e(RB,bdo),e($s,vdo),e(k,Fdo),e(k,ks),e(ks,cne),e(cne,Tdo),e(ks,Mdo),e(ks,PB),e(PB,Edo),e(ks,Cdo),e(ks,BB),e(BB,wdo),e(ks,Ado),e(k,ydo),e(k,Ss),e(Ss,mne),e(mne,Ldo),e(Ss,xdo),e(Ss,IB),e(IB,$do),e(Ss,kdo),e(Ss,NB),e(NB,Sdo),e(Ss,Rdo),e(k,Pdo),e(k,Rs),e(Rs,fne),e(fne,Bdo),e(Rs,Ido),e(Rs,qB),e(qB,Ndo),e(Rs,qdo),e(Rs,jB),e(jB,jdo),e(Rs,Ddo),e(Cr,Gdo),M(ah,Cr,null),e(wo,Odo),e(wo,nh),M(Xy,nh,null),e(nh,Vdo),e(nh,gne),e(gne,Xdo),b(m,Eqe,_),b(m,Mi,_),e(Mi,sh),e(sh,hne),M(zy,hne,null),e(Mi,zdo),e(Mi,une),e(une,Wdo),b(m,Cqe,_),b(m,Ao,_),M(Wy,Ao,null),e(Ao,Qdo),e(Ao,Qy),e(Qy,Hdo),e(Qy,DB),e(DB,Udo),e(Qy,Jdo),e(Ao,Ydo),e(Ao,Hy),e(Hy,Kdo),e(Hy,pne),e(pne,Zdo),e(Hy,eco),e(Ao,oco),e(Ao,He),M(Uy,He,null),e(He,rco),e(He,_ne),e(_ne,tco),e(He,aco),e(He,ya),e(ya,nco),e(ya,bne),e(bne,sco),e(ya,lco),e(ya,vne),e(vne,ico),e(ya,dco),e(ya,Fne),e(Fne,cco),e(ya,mco),e(He,fco),e(He,Y),e(Y,lh),e(lh,Tne),e(Tne,gco),e(lh,hco),e(lh,GB),e(GB,uco),e(lh,pco),e(Y,_co),e(Y,ih),e(ih,Mne),e(Mne,bco),e(ih,vco),e(ih,OB),e(OB,Fco),e(ih,Tco),e(Y,Mco),e(Y,dh),e(dh,Ene),e(Ene,Eco),e(dh,Cco),e(dh,VB),e(VB,wco),e(dh,Aco),e(Y,yco),e(Y,ch),e(ch,Cne),e(Cne,Lco),e(ch,xco),e(ch,XB),e(XB,$co),e(ch,kco),e(Y,Sco),e(Y,mh),e(mh,wne),e(wne,Rco),e(mh,Pco),e(mh,zB),e(zB,Bco),e(mh,Ico),e(Y,Nco),e(Y,fh),e(fh,Ane),e(Ane,qco),e(fh,jco),e(fh,WB),e(WB,Dco),e(fh,Gco),e(Y,Oco),e(Y,gh),e(gh,yne),e(yne,Vco),e(gh,Xco),e(gh,QB),e(QB,zco),e(gh,Wco),e(Y,Qco),e(Y,hh),e(hh,Lne),e(Lne,Hco),e(hh,Uco),e(hh,HB),e(HB,Jco),e(hh,Yco),e(Y,Kco),e(Y,uh),e(uh,xne),e(xne,Zco),e(uh,emo),e(uh,UB),e(UB,omo),e(uh,rmo),e(Y,tmo),e(Y,ph),e(ph,$ne),e($ne,amo),e(ph,nmo),e(ph,JB),e(JB,smo),e(ph,lmo),e(Y,imo),e(Y,_h),e(_h,kne),e(kne,dmo),e(_h,cmo),e(_h,YB),e(YB,mmo),e(_h,fmo),e(Y,gmo),e(Y,bh),e(bh,Sne),e(Sne,hmo),e(bh,umo),e(bh,KB),e(KB,pmo),e(bh,_mo),e(Y,bmo),e(Y,vh),e(vh,Rne),e(Rne,vmo),e(vh,Fmo),e(vh,ZB),e(ZB,Tmo),e(vh,Mmo),e(Y,Emo),e(Y,Fh),e(Fh,Pne),e(Pne,Cmo),e(Fh,wmo),e(Fh,eI),e(eI,Amo),e(Fh,ymo),e(Y,Lmo),e(Y,Th),e(Th,Bne),e(Bne,xmo),e(Th,$mo),e(Th,oI),e(oI,kmo),e(Th,Smo),e(Y,Rmo),e(Y,Mh),e(Mh,Ine),e(Ine,Pmo),e(Mh,Bmo),e(Mh,rI),e(rI,Imo),e(Mh,Nmo),e(Y,qmo),e(Y,Eh),e(Eh,Nne),e(Nne,jmo),e(Eh,Dmo),e(Eh,tI),e(tI,Gmo),e(Eh,Omo),e(Y,Vmo),e(Y,Ch),e(Ch,qne),e(qne,Xmo),e(Ch,zmo),e(Ch,aI),e(aI,Wmo),e(Ch,Qmo),e(Y,Hmo),e(Y,wh),e(wh,jne),e(jne,Umo),e(wh,Jmo),e(wh,nI),e(nI,Ymo),e(wh,Kmo),e(Y,Zmo),e(Y,Ah),e(Ah,Dne),e(Dne,efo),e(Ah,ofo),e(Ah,sI),e(sI,rfo),e(Ah,tfo),e(Y,afo),e(Y,yh),e(yh,Gne),e(Gne,nfo),e(yh,sfo),e(yh,lI),e(lI,lfo),e(yh,ifo),e(Y,dfo),e(Y,Lh),e(Lh,One),e(One,cfo),e(Lh,mfo),e(Lh,iI),e(iI,ffo),e(Lh,gfo),e(Y,hfo),e(Y,xh),e(xh,Vne),e(Vne,ufo),e(xh,pfo),e(xh,dI),e(dI,_fo),e(xh,bfo),e(Y,vfo),e(Y,$h),e($h,Xne),e(Xne,Ffo),e($h,Tfo),e($h,cI),e(cI,Mfo),e($h,Efo),e(Y,Cfo),e(Y,kh),e(kh,zne),e(zne,wfo),e(kh,Afo),e(kh,mI),e(mI,yfo),e(kh,Lfo),e(Y,xfo),e(Y,Sh),e(Sh,Wne),e(Wne,$fo),e(Sh,kfo),e(Sh,fI),e(fI,Sfo),e(Sh,Rfo),e(Y,Pfo),e(Y,Rh),e(Rh,Qne),e(Qne,Bfo),e(Rh,Ifo),e(Rh,gI),e(gI,Nfo),e(Rh,qfo),e(Y,jfo),e(Y,Ph),e(Ph,Hne),e(Hne,Dfo),e(Ph,Gfo),e(Ph,hI),e(hI,Ofo),e(Ph,Vfo),e(Y,Xfo),e(Y,Bh),e(Bh,Une),e(Une,zfo),e(Bh,Wfo),e(Bh,uI),e(uI,Qfo),e(Bh,Hfo),e(He,Ufo),M(Ih,He,null),e(He,Jfo),M(Nh,He,null),e(Ao,Yfo),e(Ao,qh),M(Jy,qh,null),e(qh,Kfo),e(qh,Jne),e(Jne,Zfo),b(m,wqe,_),b(m,Ei,_),e(Ei,jh),e(jh,Yne),M(Yy,Yne,null),e(Ei,ego),e(Ei,Kne),e(Kne,ogo),b(m,Aqe,_),b(m,yo,_),M(Ky,yo,null),e(yo,rgo),e(yo,Zy),e(Zy,tgo),e(Zy,pI),e(pI,ago),e(Zy,ngo),e(yo,sgo),e(yo,eL),e(eL,lgo),e(eL,Zne),e(Zne,igo),e(eL,dgo),e(yo,cgo),e(yo,Ue),M(oL,Ue,null),e(Ue,mgo),e(Ue,ese),e(ese,fgo),e(Ue,ggo),e(Ue,Ci),e(Ci,hgo),e(Ci,ose),e(ose,ugo),e(Ci,pgo),e(Ci,rse),e(rse,_go),e(Ci,bgo),e(Ue,vgo),e(Ue,he),e(he,Dh),e(Dh,tse),e(tse,Fgo),e(Dh,Tgo),e(Dh,_I),e(_I,Mgo),e(Dh,Ego),e(he,Cgo),e(he,Gh),e(Gh,ase),e(ase,wgo),e(Gh,Ago),e(Gh,nse),e(nse,ygo),e(Gh,Lgo),e(he,xgo),e(he,Oh),e(Oh,sse),e(sse,$go),e(Oh,kgo),e(Oh,bI),e(bI,Sgo),e(Oh,Rgo),e(he,Pgo),e(he,Vh),e(Vh,lse),e(lse,Bgo),e(Vh,Igo),e(Vh,vI),e(vI,Ngo),e(Vh,qgo),e(he,jgo),e(he,Xh),e(Xh,ise),e(ise,Dgo),e(Xh,Ggo),e(Xh,FI),e(FI,Ogo),e(Xh,Vgo),e(he,Xgo),e(he,zh),e(zh,dse),e(dse,zgo),e(zh,Wgo),e(zh,TI),e(TI,Qgo),e(zh,Hgo),e(he,Ugo),e(he,Wh),e(Wh,cse),e(cse,Jgo),e(Wh,Ygo),e(Wh,MI),e(MI,Kgo),e(Wh,Zgo),e(he,eho),e(he,Qh),e(Qh,mse),e(mse,oho),e(Qh,rho),e(Qh,EI),e(EI,tho),e(Qh,aho),e(he,nho),e(he,Hh),e(Hh,fse),e(fse,sho),e(Hh,lho),e(Hh,CI),e(CI,iho),e(Hh,dho),e(he,cho),e(he,Uh),e(Uh,gse),e(gse,mho),e(Uh,fho),e(Uh,wI),e(wI,gho),e(Uh,hho),e(he,uho),e(he,Jh),e(Jh,hse),e(hse,pho),e(Jh,_ho),e(Jh,AI),e(AI,bho),e(Jh,vho),e(he,Fho),e(he,Yh),e(Yh,use),e(use,Tho),e(Yh,Mho),e(Yh,yI),e(yI,Eho),e(Yh,Cho),e(he,who),e(he,Kh),e(Kh,pse),e(pse,Aho),e(Kh,yho),e(Kh,LI),e(LI,Lho),e(Kh,xho),e(he,$ho),e(he,Zh),e(Zh,_se),e(_se,kho),e(Zh,Sho),e(Zh,xI),e(xI,Rho),e(Zh,Pho),e(he,Bho),e(he,eu),e(eu,bse),e(bse,Iho),e(eu,Nho),e(eu,$I),e($I,qho),e(eu,jho),e(he,Dho),e(he,ou),e(ou,vse),e(vse,Gho),e(ou,Oho),e(ou,kI),e(kI,Vho),e(ou,Xho),e(he,zho),e(he,ru),e(ru,Fse),e(Fse,Who),e(ru,Qho),e(ru,SI),e(SI,Hho),e(ru,Uho),e(Ue,Jho),M(tu,Ue,null),e(Ue,Yho),M(au,Ue,null),e(yo,Kho),e(yo,nu),M(rL,nu,null),e(nu,Zho),e(nu,Tse),e(Tse,euo),b(m,yqe,_),b(m,wi,_),e(wi,su),e(su,Mse),M(tL,Mse,null),e(wi,ouo),e(wi,Ese),e(Ese,ruo),b(m,Lqe,_),b(m,Lo,_),M(aL,Lo,null),e(Lo,tuo),e(Lo,Ai),e(Ai,auo),e(Ai,RI),e(RI,nuo),e(Ai,suo),e(Ai,PI),e(PI,luo),e(Ai,iuo),e(Lo,duo),e(Lo,nL),e(nL,cuo),e(nL,Cse),e(Cse,muo),e(nL,fuo),e(Lo,guo),e(Lo,tt),M(sL,tt,null),e(tt,huo),e(tt,wse),e(wse,uuo),e(tt,puo),e(tt,yi),e(yi,_uo),e(yi,Ase),e(Ase,buo),e(yi,vuo),e(yi,BI),e(BI,Fuo),e(yi,Tuo),e(tt,Muo),M(lu,tt,null),e(Lo,Euo),e(Lo,Je),M(lL,Je,null),e(Je,Cuo),e(Je,yse),e(yse,wuo),e(Je,Auo),e(Je,La),e(La,yuo),e(La,Lse),e(Lse,Luo),e(La,xuo),e(La,xse),e(xse,$uo),e(La,kuo),e(La,$se),e($se,Suo),e(La,Ruo),e(Je,Puo),e(Je,x),e(x,iu),e(iu,kse),e(kse,Buo),e(iu,Iuo),e(iu,II),e(II,Nuo),e(iu,quo),e(x,juo),e(x,du),e(du,Sse),e(Sse,Duo),e(du,Guo),e(du,NI),e(NI,Ouo),e(du,Vuo),e(x,Xuo),e(x,cu),e(cu,Rse),e(Rse,zuo),e(cu,Wuo),e(cu,qI),e(qI,Quo),e(cu,Huo),e(x,Uuo),e(x,mu),e(mu,Pse),e(Pse,Juo),e(mu,Yuo),e(mu,jI),e(jI,Kuo),e(mu,Zuo),e(x,epo),e(x,fu),e(fu,Bse),e(Bse,opo),e(fu,rpo),e(fu,DI),e(DI,tpo),e(fu,apo),e(x,npo),e(x,gu),e(gu,Ise),e(Ise,spo),e(gu,lpo),e(gu,GI),e(GI,ipo),e(gu,dpo),e(x,cpo),e(x,hu),e(hu,Nse),e(Nse,mpo),e(hu,fpo),e(hu,OI),e(OI,gpo),e(hu,hpo),e(x,upo),e(x,uu),e(uu,qse),e(qse,ppo),e(uu,_po),e(uu,VI),e(VI,bpo),e(uu,vpo),e(x,Fpo),e(x,pu),e(pu,jse),e(jse,Tpo),e(pu,Mpo),e(pu,XI),e(XI,Epo),e(pu,Cpo),e(x,wpo),e(x,_u),e(_u,Dse),e(Dse,Apo),e(_u,ypo),e(_u,zI),e(zI,Lpo),e(_u,xpo),e(x,$po),e(x,bu),e(bu,Gse),e(Gse,kpo),e(bu,Spo),e(bu,WI),e(WI,Rpo),e(bu,Ppo),e(x,Bpo),e(x,vu),e(vu,Ose),e(Ose,Ipo),e(vu,Npo),e(vu,QI),e(QI,qpo),e(vu,jpo),e(x,Dpo),e(x,Fu),e(Fu,Vse),e(Vse,Gpo),e(Fu,Opo),e(Fu,HI),e(HI,Vpo),e(Fu,Xpo),e(x,zpo),e(x,Tu),e(Tu,Xse),e(Xse,Wpo),e(Tu,Qpo),e(Tu,UI),e(UI,Hpo),e(Tu,Upo),e(x,Jpo),e(x,Mu),e(Mu,zse),e(zse,Ypo),e(Mu,Kpo),e(Mu,JI),e(JI,Zpo),e(Mu,e_o),e(x,o_o),e(x,Eu),e(Eu,Wse),e(Wse,r_o),e(Eu,t_o),e(Eu,YI),e(YI,a_o),e(Eu,n_o),e(x,s_o),e(x,Cu),e(Cu,Qse),e(Qse,l_o),e(Cu,i_o),e(Cu,KI),e(KI,d_o),e(Cu,c_o),e(x,m_o),e(x,wu),e(wu,Hse),e(Hse,f_o),e(wu,g_o),e(wu,ZI),e(ZI,h_o),e(wu,u_o),e(x,p_o),e(x,Au),e(Au,Use),e(Use,__o),e(Au,b_o),e(Au,eN),e(eN,v_o),e(Au,F_o),e(x,T_o),e(x,yu),e(yu,Jse),e(Jse,M_o),e(yu,E_o),e(yu,oN),e(oN,C_o),e(yu,w_o),e(x,A_o),e(x,Lu),e(Lu,Yse),e(Yse,y_o),e(Lu,L_o),e(Lu,rN),e(rN,x_o),e(Lu,$_o),e(x,k_o),e(x,xu),e(xu,Kse),e(Kse,S_o),e(xu,R_o),e(xu,tN),e(tN,P_o),e(xu,B_o),e(x,I_o),e(x,$u),e($u,Zse),e(Zse,N_o),e($u,q_o),e($u,aN),e(aN,j_o),e($u,D_o),e(x,G_o),e(x,ku),e(ku,ele),e(ele,O_o),e(ku,V_o),e(ku,nN),e(nN,X_o),e(ku,z_o),e(x,W_o),e(x,Su),e(Su,ole),e(ole,Q_o),e(Su,H_o),e(Su,sN),e(sN,U_o),e(Su,J_o),e(x,Y_o),e(x,Ru),e(Ru,rle),e(rle,K_o),e(Ru,Z_o),e(Ru,lN),e(lN,ebo),e(Ru,obo),e(x,rbo),e(x,Pu),e(Pu,tle),e(tle,tbo),e(Pu,abo),e(Pu,iN),e(iN,nbo),e(Pu,sbo),e(x,lbo),e(x,Bu),e(Bu,ale),e(ale,ibo),e(Bu,dbo),e(Bu,dN),e(dN,cbo),e(Bu,mbo),e(x,fbo),e(x,Iu),e(Iu,nle),e(nle,gbo),e(Iu,hbo),e(Iu,cN),e(cN,ubo),e(Iu,pbo),e(x,_bo),e(x,Nu),e(Nu,sle),e(sle,bbo),e(Nu,vbo),e(Nu,mN),e(mN,Fbo),e(Nu,Tbo),e(x,Mbo),e(x,qu),e(qu,lle),e(lle,Ebo),e(qu,Cbo),e(qu,fN),e(fN,wbo),e(qu,Abo),e(x,ybo),e(x,ju),e(ju,ile),e(ile,Lbo),e(ju,xbo),e(ju,gN),e(gN,$bo),e(ju,kbo),e(x,Sbo),e(x,Ps),e(Ps,dle),e(dle,Rbo),e(Ps,Pbo),e(Ps,hN),e(hN,Bbo),e(Ps,Ibo),e(Ps,uN),e(uN,Nbo),e(Ps,qbo),e(x,jbo),e(x,Du),e(Du,cle),e(cle,Dbo),e(Du,Gbo),e(Du,pN),e(pN,Obo),e(Du,Vbo),e(x,Xbo),e(x,Gu),e(Gu,mle),e(mle,zbo),e(Gu,Wbo),e(Gu,_N),e(_N,Qbo),e(Gu,Hbo),e(x,Ubo),e(x,Ou),e(Ou,fle),e(fle,Jbo),e(Ou,Ybo),e(Ou,bN),e(bN,Kbo),e(Ou,Zbo),e(x,e2o),e(x,Vu),e(Vu,gle),e(gle,o2o),e(Vu,r2o),e(Vu,vN),e(vN,t2o),e(Vu,a2o),e(x,n2o),e(x,Xu),e(Xu,hle),e(hle,s2o),e(Xu,l2o),e(Xu,FN),e(FN,i2o),e(Xu,d2o),e(x,c2o),e(x,zu),e(zu,ule),e(ule,m2o),e(zu,f2o),e(zu,TN),e(TN,g2o),e(zu,h2o),e(x,u2o),e(x,Wu),e(Wu,ple),e(ple,p2o),e(Wu,_2o),e(Wu,MN),e(MN,b2o),e(Wu,v2o),e(x,F2o),e(x,Qu),e(Qu,_le),e(_le,T2o),e(Qu,M2o),e(Qu,EN),e(EN,E2o),e(Qu,C2o),e(x,w2o),e(x,Hu),e(Hu,ble),e(ble,A2o),e(Hu,y2o),e(Hu,CN),e(CN,L2o),e(Hu,x2o),e(x,$2o),e(x,Uu),e(Uu,vle),e(vle,k2o),e(Uu,S2o),e(Uu,wN),e(wN,R2o),e(Uu,P2o),e(x,B2o),e(x,Ju),e(Ju,Fle),e(Fle,I2o),e(Ju,N2o),e(Ju,AN),e(AN,q2o),e(Ju,j2o),e(x,D2o),e(x,Yu),e(Yu,Tle),e(Tle,G2o),e(Yu,O2o),e(Yu,yN),e(yN,V2o),e(Yu,X2o),e(x,z2o),e(x,Ku),e(Ku,Mle),e(Mle,W2o),e(Ku,Q2o),e(Ku,LN),e(LN,H2o),e(Ku,U2o),e(x,J2o),e(x,Zu),e(Zu,Ele),e(Ele,Y2o),e(Zu,K2o),e(Zu,xN),e(xN,Z2o),e(Zu,evo),e(x,ovo),e(x,ep),e(ep,Cle),e(Cle,rvo),e(ep,tvo),e(ep,$N),e($N,avo),e(ep,nvo),e(x,svo),e(x,op),e(op,wle),e(wle,lvo),e(op,ivo),e(op,kN),e(kN,dvo),e(op,cvo),e(x,mvo),e(x,rp),e(rp,Ale),e(Ale,fvo),e(rp,gvo),e(rp,SN),e(SN,hvo),e(rp,uvo),e(x,pvo),e(x,tp),e(tp,yle),e(yle,_vo),e(tp,bvo),e(tp,RN),e(RN,vvo),e(tp,Fvo),e(x,Tvo),e(x,ap),e(ap,Lle),e(Lle,Mvo),e(ap,Evo),e(ap,PN),e(PN,Cvo),e(ap,wvo),e(x,Avo),e(x,np),e(np,xle),e(xle,yvo),e(np,Lvo),e(np,BN),e(BN,xvo),e(np,$vo),e(x,kvo),e(x,sp),e(sp,$le),e($le,Svo),e(sp,Rvo),e(sp,IN),e(IN,Pvo),e(sp,Bvo),e(x,Ivo),e(x,lp),e(lp,kle),e(kle,Nvo),e(lp,qvo),e(lp,NN),e(NN,jvo),e(lp,Dvo),e(x,Gvo),e(x,ip),e(ip,Sle),e(Sle,Ovo),e(ip,Vvo),e(ip,qN),e(qN,Xvo),e(ip,zvo),e(x,Wvo),e(x,dp),e(dp,Rle),e(Rle,Qvo),e(dp,Hvo),e(dp,jN),e(jN,Uvo),e(dp,Jvo),e(x,Yvo),e(x,cp),e(cp,Ple),e(Ple,Kvo),e(cp,Zvo),e(cp,DN),e(DN,eFo),e(cp,oFo),e(x,rFo),e(x,mp),e(mp,Ble),e(Ble,tFo),e(mp,aFo),e(mp,GN),e(GN,nFo),e(mp,sFo),e(x,lFo),e(x,fp),e(fp,Ile),e(Ile,iFo),e(fp,dFo),e(fp,ON),e(ON,cFo),e(fp,mFo),e(x,fFo),e(x,gp),e(gp,Nle),e(Nle,gFo),e(gp,hFo),e(gp,VN),e(VN,uFo),e(gp,pFo),e(x,_Fo),e(x,hp),e(hp,qle),e(qle,bFo),e(hp,vFo),e(hp,XN),e(XN,FFo),e(hp,TFo),e(x,MFo),e(x,up),e(up,jle),e(jle,EFo),e(up,CFo),e(up,zN),e(zN,wFo),e(up,AFo),e(x,yFo),e(x,pp),e(pp,Dle),e(Dle,LFo),e(pp,xFo),e(pp,WN),e(WN,$Fo),e(pp,kFo),e(x,SFo),e(x,_p),e(_p,Gle),e(Gle,RFo),e(_p,PFo),e(_p,QN),e(QN,BFo),e(_p,IFo),e(x,NFo),e(x,bp),e(bp,Ole),e(Ole,qFo),e(bp,jFo),e(bp,HN),e(HN,DFo),e(bp,GFo),e(x,OFo),e(x,vp),e(vp,Vle),e(Vle,VFo),e(vp,XFo),e(vp,UN),e(UN,zFo),e(vp,WFo),e(x,QFo),e(x,Fp),e(Fp,Xle),e(Xle,HFo),e(Fp,UFo),e(Fp,JN),e(JN,JFo),e(Fp,YFo),e(x,KFo),e(x,Tp),e(Tp,zle),e(zle,ZFo),e(Tp,e1o),e(Tp,YN),e(YN,o1o),e(Tp,r1o),e(x,t1o),e(x,Mp),e(Mp,Wle),e(Wle,a1o),e(Mp,n1o),e(Mp,KN),e(KN,s1o),e(Mp,l1o),e(x,i1o),e(x,Ep),e(Ep,Qle),e(Qle,d1o),e(Ep,c1o),e(Ep,ZN),e(ZN,m1o),e(Ep,f1o),e(x,g1o),e(x,Cp),e(Cp,Hle),e(Hle,h1o),e(Cp,u1o),e(Cp,eq),e(eq,p1o),e(Cp,_1o),e(x,b1o),e(x,wp),e(wp,Ule),e(Ule,v1o),e(wp,F1o),e(wp,oq),e(oq,T1o),e(wp,M1o),e(x,E1o),e(x,Ap),e(Ap,Jle),e(Jle,C1o),e(Ap,w1o),e(Ap,rq),e(rq,A1o),e(Ap,y1o),e(x,L1o),e(x,yp),e(yp,Yle),e(Yle,x1o),e(yp,$1o),e(yp,tq),e(tq,k1o),e(yp,S1o),e(x,R1o),e(x,Lp),e(Lp,Kle),e(Kle,P1o),e(Lp,B1o),e(Lp,aq),e(aq,I1o),e(Lp,N1o),e(x,q1o),e(x,xp),e(xp,Zle),e(Zle,j1o),e(xp,D1o),e(xp,nq),e(nq,G1o),e(xp,O1o),e(x,V1o),e(x,$p),e($p,eie),e(eie,X1o),e($p,z1o),e($p,sq),e(sq,W1o),e($p,Q1o),e(x,H1o),e(x,kp),e(kp,oie),e(oie,U1o),e(kp,J1o),e(kp,lq),e(lq,Y1o),e(kp,K1o),e(x,Z1o),e(x,Sp),e(Sp,rie),e(rie,eTo),e(Sp,oTo),e(Sp,iq),e(iq,rTo),e(Sp,tTo),e(x,aTo),e(x,Rp),e(Rp,tie),e(tie,nTo),e(Rp,sTo),e(Rp,dq),e(dq,lTo),e(Rp,iTo),e(x,dTo),e(x,Pp),e(Pp,aie),e(aie,cTo),e(Pp,mTo),e(Pp,cq),e(cq,fTo),e(Pp,gTo),e(x,hTo),e(x,Bp),e(Bp,nie),e(nie,uTo),e(Bp,pTo),e(Bp,mq),e(mq,_To),e(Bp,bTo),e(x,vTo),e(x,Ip),e(Ip,sie),e(sie,FTo),e(Ip,TTo),e(Ip,fq),e(fq,MTo),e(Ip,ETo),e(x,CTo),e(x,Np),e(Np,lie),e(lie,wTo),e(Np,ATo),e(Np,gq),e(gq,yTo),e(Np,LTo),e(x,xTo),e(x,qp),e(qp,iie),e(iie,$To),e(qp,kTo),e(qp,hq),e(hq,STo),e(qp,RTo),e(x,PTo),e(x,jp),e(jp,die),e(die,BTo),e(jp,ITo),e(jp,uq),e(uq,NTo),e(jp,qTo),e(x,jTo),e(x,Dp),e(Dp,cie),e(cie,DTo),e(Dp,GTo),e(Dp,pq),e(pq,OTo),e(Dp,VTo),e(x,XTo),e(x,Gp),e(Gp,mie),e(mie,zTo),e(Gp,WTo),e(Gp,_q),e(_q,QTo),e(Gp,HTo),e(x,UTo),e(x,Op),e(Op,fie),e(fie,JTo),e(Op,YTo),e(Op,bq),e(bq,KTo),e(Op,ZTo),e(x,eMo),e(x,Vp),e(Vp,gie),e(gie,oMo),e(Vp,rMo),e(Vp,vq),e(vq,tMo),e(Vp,aMo),e(x,nMo),e(x,Xp),e(Xp,hie),e(hie,sMo),e(Xp,lMo),e(Xp,Fq),e(Fq,iMo),e(Xp,dMo),e(x,cMo),e(x,zp),e(zp,uie),e(uie,mMo),e(zp,fMo),e(zp,Tq),e(Tq,gMo),e(zp,hMo),e(x,uMo),e(x,Wp),e(Wp,pie),e(pie,pMo),e(Wp,_Mo),e(Wp,Mq),e(Mq,bMo),e(Wp,vMo),e(x,FMo),e(x,Qp),e(Qp,_ie),e(_ie,TMo),e(Qp,MMo),e(Qp,Eq),e(Eq,EMo),e(Qp,CMo),e(x,wMo),e(x,Hp),e(Hp,bie),e(bie,AMo),e(Hp,yMo),e(Hp,Cq),e(Cq,LMo),e(Hp,xMo),e(x,$Mo),e(x,Up),e(Up,vie),e(vie,kMo),e(Up,SMo),e(Up,wq),e(wq,RMo),e(Up,PMo),e(x,BMo),e(x,Jp),e(Jp,Fie),e(Fie,IMo),e(Jp,NMo),e(Jp,Aq),e(Aq,qMo),e(Jp,jMo),e(x,DMo),e(x,Yp),e(Yp,Tie),e(Tie,GMo),e(Yp,OMo),e(Yp,yq),e(yq,VMo),e(Yp,XMo),e(x,zMo),e(x,Kp),e(Kp,Mie),e(Mie,WMo),e(Kp,QMo),e(Kp,Lq),e(Lq,HMo),e(Kp,UMo),e(x,JMo),e(x,Zp),e(Zp,Eie),e(Eie,YMo),e(Zp,KMo),e(Zp,xq),e(xq,ZMo),e(Zp,e4o),e(x,o4o),e(x,e_),e(e_,Cie),e(Cie,r4o),e(e_,t4o),e(e_,$q),e($q,a4o),e(e_,n4o),e(Je,s4o),e(Je,o_),e(o_,l4o),e(o_,wie),e(wie,i4o),e(o_,d4o),e(o_,Aie),e(Aie,c4o),e(Je,m4o),M(r_,Je,null),b(m,xqe,_),b(m,Li,_),e(Li,t_),e(t_,yie),M(iL,yie,null),e(Li,f4o),e(Li,Lie),e(Lie,g4o),b(m,$qe,_),b(m,xo,_),M(dL,xo,null),e(xo,h4o),e(xo,xi),e(xi,u4o),e(xi,kq),e(kq,p4o),e(xi,_4o),e(xi,Sq),e(Sq,b4o),e(xi,v4o),e(xo,F4o),e(xo,cL),e(cL,T4o),e(cL,xie),e(xie,M4o),e(cL,E4o),e(xo,C4o),e(xo,at),M(mL,at,null),e(at,w4o),e(at,$ie),e($ie,A4o),e(at,y4o),e(at,$i),e($i,L4o),e($i,kie),e(kie,x4o),e($i,$4o),e($i,Rq),e(Rq,k4o),e($i,S4o),e(at,R4o),M(a_,at,null),e(xo,P4o),e(xo,Ye),M(fL,Ye,null),e(Ye,B4o),e(Ye,Sie),e(Sie,I4o),e(Ye,N4o),e(Ye,xa),e(xa,q4o),e(xa,Rie),e(Rie,j4o),e(xa,D4o),e(xa,Pie),e(Pie,G4o),e(xa,O4o),e(xa,Bie),e(Bie,V4o),e(xa,X4o),e(Ye,z4o),e(Ye,G),e(G,n_),e(n_,Iie),e(Iie,W4o),e(n_,Q4o),e(n_,Pq),e(Pq,H4o),e(n_,U4o),e(G,J4o),e(G,s_),e(s_,Nie),e(Nie,Y4o),e(s_,K4o),e(s_,Bq),e(Bq,Z4o),e(s_,eEo),e(G,oEo),e(G,l_),e(l_,qie),e(qie,rEo),e(l_,tEo),e(l_,Iq),e(Iq,aEo),e(l_,nEo),e(G,sEo),e(G,i_),e(i_,jie),e(jie,lEo),e(i_,iEo),e(i_,Nq),e(Nq,dEo),e(i_,cEo),e(G,mEo),e(G,d_),e(d_,Die),e(Die,fEo),e(d_,gEo),e(d_,qq),e(qq,hEo),e(d_,uEo),e(G,pEo),e(G,c_),e(c_,Gie),e(Gie,_Eo),e(c_,bEo),e(c_,jq),e(jq,vEo),e(c_,FEo),e(G,TEo),e(G,m_),e(m_,Oie),e(Oie,MEo),e(m_,EEo),e(m_,Dq),e(Dq,CEo),e(m_,wEo),e(G,AEo),e(G,f_),e(f_,Vie),e(Vie,yEo),e(f_,LEo),e(f_,Gq),e(Gq,xEo),e(f_,$Eo),e(G,kEo),e(G,g_),e(g_,Xie),e(Xie,SEo),e(g_,REo),e(g_,Oq),e(Oq,PEo),e(g_,BEo),e(G,IEo),e(G,h_),e(h_,zie),e(zie,NEo),e(h_,qEo),e(h_,Vq),e(Vq,jEo),e(h_,DEo),e(G,GEo),e(G,u_),e(u_,Wie),e(Wie,OEo),e(u_,VEo),e(u_,Xq),e(Xq,XEo),e(u_,zEo),e(G,WEo),e(G,p_),e(p_,Qie),e(Qie,QEo),e(p_,HEo),e(p_,zq),e(zq,UEo),e(p_,JEo),e(G,YEo),e(G,__),e(__,Hie),e(Hie,KEo),e(__,ZEo),e(__,Wq),e(Wq,eCo),e(__,oCo),e(G,rCo),e(G,b_),e(b_,Uie),e(Uie,tCo),e(b_,aCo),e(b_,Qq),e(Qq,nCo),e(b_,sCo),e(G,lCo),e(G,v_),e(v_,Jie),e(Jie,iCo),e(v_,dCo),e(v_,Hq),e(Hq,cCo),e(v_,mCo),e(G,fCo),e(G,F_),e(F_,Yie),e(Yie,gCo),e(F_,hCo),e(F_,Uq),e(Uq,uCo),e(F_,pCo),e(G,_Co),e(G,T_),e(T_,Kie),e(Kie,bCo),e(T_,vCo),e(T_,Jq),e(Jq,FCo),e(T_,TCo),e(G,MCo),e(G,M_),e(M_,Zie),e(Zie,ECo),e(M_,CCo),e(M_,Yq),e(Yq,wCo),e(M_,ACo),e(G,yCo),e(G,E_),e(E_,ede),e(ede,LCo),e(E_,xCo),e(E_,Kq),e(Kq,$Co),e(E_,kCo),e(G,SCo),e(G,C_),e(C_,ode),e(ode,RCo),e(C_,PCo),e(C_,Zq),e(Zq,BCo),e(C_,ICo),e(G,NCo),e(G,w_),e(w_,rde),e(rde,qCo),e(w_,jCo),e(w_,ej),e(ej,DCo),e(w_,GCo),e(G,OCo),e(G,A_),e(A_,tde),e(tde,VCo),e(A_,XCo),e(A_,oj),e(oj,zCo),e(A_,WCo),e(G,QCo),e(G,y_),e(y_,ade),e(ade,HCo),e(y_,UCo),e(y_,rj),e(rj,JCo),e(y_,YCo),e(G,KCo),e(G,L_),e(L_,nde),e(nde,ZCo),e(L_,e5o),e(L_,tj),e(tj,o5o),e(L_,r5o),e(G,t5o),e(G,x_),e(x_,sde),e(sde,a5o),e(x_,n5o),e(x_,aj),e(aj,s5o),e(x_,l5o),e(G,i5o),e(G,$_),e($_,lde),e(lde,d5o),e($_,c5o),e($_,nj),e(nj,m5o),e($_,f5o),e(G,g5o),e(G,k_),e(k_,ide),e(ide,h5o),e(k_,u5o),e(k_,sj),e(sj,p5o),e(k_,_5o),e(G,b5o),e(G,S_),e(S_,dde),e(dde,v5o),e(S_,F5o),e(S_,lj),e(lj,T5o),e(S_,M5o),e(G,E5o),e(G,R_),e(R_,cde),e(cde,C5o),e(R_,w5o),e(R_,ij),e(ij,A5o),e(R_,y5o),e(G,L5o),e(G,P_),e(P_,mde),e(mde,x5o),e(P_,$5o),e(P_,dj),e(dj,k5o),e(P_,S5o),e(G,R5o),e(G,B_),e(B_,fde),e(fde,P5o),e(B_,B5o),e(B_,cj),e(cj,I5o),e(B_,N5o),e(G,q5o),e(G,I_),e(I_,gde),e(gde,j5o),e(I_,D5o),e(I_,mj),e(mj,G5o),e(I_,O5o),e(G,V5o),e(G,N_),e(N_,hde),e(hde,X5o),e(N_,z5o),e(N_,fj),e(fj,W5o),e(N_,Q5o),e(G,H5o),e(G,q_),e(q_,ude),e(ude,U5o),e(q_,J5o),e(q_,gj),e(gj,Y5o),e(q_,K5o),e(G,Z5o),e(G,j_),e(j_,pde),e(pde,e3o),e(j_,o3o),e(j_,hj),e(hj,r3o),e(j_,t3o),e(G,a3o),e(G,D_),e(D_,_de),e(_de,n3o),e(D_,s3o),e(D_,uj),e(uj,l3o),e(D_,i3o),e(G,d3o),e(G,G_),e(G_,bde),e(bde,c3o),e(G_,m3o),e(G_,pj),e(pj,f3o),e(G_,g3o),e(G,h3o),e(G,O_),e(O_,vde),e(vde,u3o),e(O_,p3o),e(O_,_j),e(_j,_3o),e(O_,b3o),e(G,v3o),e(G,V_),e(V_,Fde),e(Fde,F3o),e(V_,T3o),e(V_,bj),e(bj,M3o),e(V_,E3o),e(G,C3o),e(G,X_),e(X_,Tde),e(Tde,w3o),e(X_,A3o),e(X_,vj),e(vj,y3o),e(X_,L3o),e(G,x3o),e(G,z_),e(z_,Mde),e(Mde,$3o),e(z_,k3o),e(z_,Fj),e(Fj,S3o),e(z_,R3o),e(G,P3o),e(G,W_),e(W_,Ede),e(Ede,B3o),e(W_,I3o),e(W_,Tj),e(Tj,N3o),e(W_,q3o),e(Ye,j3o),e(Ye,Q_),e(Q_,D3o),e(Q_,Cde),e(Cde,G3o),e(Q_,O3o),e(Q_,wde),e(wde,V3o),e(Ye,X3o),M(H_,Ye,null),b(m,kqe,_),b(m,ki,_),e(ki,U_),e(U_,Ade),M(gL,Ade,null),e(ki,z3o),e(ki,yde),e(yde,W3o),b(m,Sqe,_),b(m,$o,_),M(hL,$o,null),e($o,Q3o),e($o,Si),e(Si,H3o),e(Si,Mj),e(Mj,U3o),e(Si,J3o),e(Si,Ej),e(Ej,Y3o),e(Si,K3o),e($o,Z3o),e($o,uL),e(uL,ewo),e(uL,Lde),e(Lde,owo),e(uL,rwo),e($o,two),e($o,nt),M(pL,nt,null),e(nt,awo),e(nt,xde),e(xde,nwo),e(nt,swo),e(nt,Ri),e(Ri,lwo),e(Ri,$de),e($de,iwo),e(Ri,dwo),e(Ri,Cj),e(Cj,cwo),e(Ri,mwo),e(nt,fwo),M(J_,nt,null),e($o,gwo),e($o,Ke),M(_L,Ke,null),e(Ke,hwo),e(Ke,kde),e(kde,uwo),e(Ke,pwo),e(Ke,$a),e($a,_wo),e($a,Sde),e(Sde,bwo),e($a,vwo),e($a,Rde),e(Rde,Fwo),e($a,Two),e($a,Pde),e(Pde,Mwo),e($a,Ewo),e(Ke,Cwo),e(Ke,z),e(z,Y_),e(Y_,Bde),e(Bde,wwo),e(Y_,Awo),e(Y_,wj),e(wj,ywo),e(Y_,Lwo),e(z,xwo),e(z,K_),e(K_,Ide),e(Ide,$wo),e(K_,kwo),e(K_,Aj),e(Aj,Swo),e(K_,Rwo),e(z,Pwo),e(z,Z_),e(Z_,Nde),e(Nde,Bwo),e(Z_,Iwo),e(Z_,yj),e(yj,Nwo),e(Z_,qwo),e(z,jwo),e(z,eb),e(eb,qde),e(qde,Dwo),e(eb,Gwo),e(eb,Lj),e(Lj,Owo),e(eb,Vwo),e(z,Xwo),e(z,ob),e(ob,jde),e(jde,zwo),e(ob,Wwo),e(ob,xj),e(xj,Qwo),e(ob,Hwo),e(z,Uwo),e(z,rb),e(rb,Dde),e(Dde,Jwo),e(rb,Ywo),e(rb,$j),e($j,Kwo),e(rb,Zwo),e(z,e0o),e(z,tb),e(tb,Gde),e(Gde,o0o),e(tb,r0o),e(tb,kj),e(kj,t0o),e(tb,a0o),e(z,n0o),e(z,ab),e(ab,Ode),e(Ode,s0o),e(ab,l0o),e(ab,Sj),e(Sj,i0o),e(ab,d0o),e(z,c0o),e(z,nb),e(nb,Vde),e(Vde,m0o),e(nb,f0o),e(nb,Rj),e(Rj,g0o),e(nb,h0o),e(z,u0o),e(z,sb),e(sb,Xde),e(Xde,p0o),e(sb,_0o),e(sb,Pj),e(Pj,b0o),e(sb,v0o),e(z,F0o),e(z,lb),e(lb,zde),e(zde,T0o),e(lb,M0o),e(lb,Bj),e(Bj,E0o),e(lb,C0o),e(z,w0o),e(z,ib),e(ib,Wde),e(Wde,A0o),e(ib,y0o),e(ib,Ij),e(Ij,L0o),e(ib,x0o),e(z,$0o),e(z,db),e(db,Qde),e(Qde,k0o),e(db,S0o),e(db,Nj),e(Nj,R0o),e(db,P0o),e(z,B0o),e(z,cb),e(cb,Hde),e(Hde,I0o),e(cb,N0o),e(cb,qj),e(qj,q0o),e(cb,j0o),e(z,D0o),e(z,mb),e(mb,Ude),e(Ude,G0o),e(mb,O0o),e(mb,jj),e(jj,V0o),e(mb,X0o),e(z,z0o),e(z,fb),e(fb,Jde),e(Jde,W0o),e(fb,Q0o),e(fb,Dj),e(Dj,H0o),e(fb,U0o),e(z,J0o),e(z,gb),e(gb,Yde),e(Yde,Y0o),e(gb,K0o),e(gb,Gj),e(Gj,Z0o),e(gb,e6o),e(z,o6o),e(z,hb),e(hb,Kde),e(Kde,r6o),e(hb,t6o),e(hb,Oj),e(Oj,a6o),e(hb,n6o),e(z,s6o),e(z,ub),e(ub,Zde),e(Zde,l6o),e(ub,i6o),e(ub,Vj),e(Vj,d6o),e(ub,c6o),e(z,m6o),e(z,pb),e(pb,ece),e(ece,f6o),e(pb,g6o),e(pb,Xj),e(Xj,h6o),e(pb,u6o),e(z,p6o),e(z,_b),e(_b,oce),e(oce,_6o),e(_b,b6o),e(_b,zj),e(zj,v6o),e(_b,F6o),e(z,T6o),e(z,bb),e(bb,rce),e(rce,M6o),e(bb,E6o),e(bb,Wj),e(Wj,C6o),e(bb,w6o),e(z,A6o),e(z,vb),e(vb,tce),e(tce,y6o),e(vb,L6o),e(vb,Qj),e(Qj,x6o),e(vb,$6o),e(z,k6o),e(z,Fb),e(Fb,ace),e(ace,S6o),e(Fb,R6o),e(Fb,Hj),e(Hj,P6o),e(Fb,B6o),e(z,I6o),e(z,Tb),e(Tb,nce),e(nce,N6o),e(Tb,q6o),e(Tb,Uj),e(Uj,j6o),e(Tb,D6o),e(z,G6o),e(z,Mb),e(Mb,sce),e(sce,O6o),e(Mb,V6o),e(Mb,Jj),e(Jj,X6o),e(Mb,z6o),e(z,W6o),e(z,Eb),e(Eb,lce),e(lce,Q6o),e(Eb,H6o),e(Eb,Yj),e(Yj,U6o),e(Eb,J6o),e(z,Y6o),e(z,Cb),e(Cb,ice),e(ice,K6o),e(Cb,Z6o),e(Cb,Kj),e(Kj,eAo),e(Cb,oAo),e(z,rAo),e(z,wb),e(wb,dce),e(dce,tAo),e(wb,aAo),e(wb,Zj),e(Zj,nAo),e(wb,sAo),e(z,lAo),e(z,Ab),e(Ab,cce),e(cce,iAo),e(Ab,dAo),e(Ab,eD),e(eD,cAo),e(Ab,mAo),e(z,fAo),e(z,yb),e(yb,mce),e(mce,gAo),e(yb,hAo),e(yb,oD),e(oD,uAo),e(yb,pAo),e(z,_Ao),e(z,Lb),e(Lb,fce),e(fce,bAo),e(Lb,vAo),e(Lb,rD),e(rD,FAo),e(Lb,TAo),e(z,MAo),e(z,xb),e(xb,gce),e(gce,EAo),e(xb,CAo),e(xb,tD),e(tD,wAo),e(xb,AAo),e(z,yAo),e(z,$b),e($b,hce),e(hce,LAo),e($b,xAo),e($b,aD),e(aD,$Ao),e($b,kAo),e(z,SAo),e(z,kb),e(kb,uce),e(uce,RAo),e(kb,PAo),e(kb,nD),e(nD,BAo),e(kb,IAo),e(z,NAo),e(z,Sb),e(Sb,pce),e(pce,qAo),e(Sb,jAo),e(Sb,sD),e(sD,DAo),e(Sb,GAo),e(z,OAo),e(z,Rb),e(Rb,_ce),e(_ce,VAo),e(Rb,XAo),e(Rb,lD),e(lD,zAo),e(Rb,WAo),e(Ke,QAo),e(Ke,Pb),e(Pb,HAo),e(Pb,bce),e(bce,UAo),e(Pb,JAo),e(Pb,vce),e(vce,YAo),e(Ke,KAo),M(Bb,Ke,null),b(m,Rqe,_),b(m,Pi,_),e(Pi,Ib),e(Ib,Fce),M(bL,Fce,null),e(Pi,ZAo),e(Pi,Tce),e(Tce,eyo),b(m,Pqe,_),b(m,ko,_),M(vL,ko,null),e(ko,oyo),e(ko,Bi),e(Bi,ryo),e(Bi,iD),e(iD,tyo),e(Bi,ayo),e(Bi,dD),e(dD,nyo),e(Bi,syo),e(ko,lyo),e(ko,FL),e(FL,iyo),e(FL,Mce),e(Mce,dyo),e(FL,cyo),e(ko,myo),e(ko,st),M(TL,st,null),e(st,fyo),e(st,Ece),e(Ece,gyo),e(st,hyo),e(st,Ii),e(Ii,uyo),e(Ii,Cce),e(Cce,pyo),e(Ii,_yo),e(Ii,cD),e(cD,byo),e(Ii,vyo),e(st,Fyo),M(Nb,st,null),e(ko,Tyo),e(ko,Ze),M(ML,Ze,null),e(Ze,Myo),e(Ze,wce),e(wce,Eyo),e(Ze,Cyo),e(Ze,ka),e(ka,wyo),e(ka,Ace),e(Ace,Ayo),e(ka,yyo),e(ka,yce),e(yce,Lyo),e(ka,xyo),e(ka,Lce),e(Lce,$yo),e(ka,kyo),e(Ze,Syo),e(Ze,Q),e(Q,qb),e(qb,xce),e(xce,Ryo),e(qb,Pyo),e(qb,mD),e(mD,Byo),e(qb,Iyo),e(Q,Nyo),e(Q,jb),e(jb,$ce),e($ce,qyo),e(jb,jyo),e(jb,fD),e(fD,Dyo),e(jb,Gyo),e(Q,Oyo),e(Q,Db),e(Db,kce),e(kce,Vyo),e(Db,Xyo),e(Db,gD),e(gD,zyo),e(Db,Wyo),e(Q,Qyo),e(Q,Gb),e(Gb,Sce),e(Sce,Hyo),e(Gb,Uyo),e(Gb,hD),e(hD,Jyo),e(Gb,Yyo),e(Q,Kyo),e(Q,Ob),e(Ob,Rce),e(Rce,Zyo),e(Ob,eLo),e(Ob,uD),e(uD,oLo),e(Ob,rLo),e(Q,tLo),e(Q,Vb),e(Vb,Pce),e(Pce,aLo),e(Vb,nLo),e(Vb,pD),e(pD,sLo),e(Vb,lLo),e(Q,iLo),e(Q,Xb),e(Xb,Bce),e(Bce,dLo),e(Xb,cLo),e(Xb,_D),e(_D,mLo),e(Xb,fLo),e(Q,gLo),e(Q,zb),e(zb,Ice),e(Ice,hLo),e(zb,uLo),e(zb,bD),e(bD,pLo),e(zb,_Lo),e(Q,bLo),e(Q,Wb),e(Wb,Nce),e(Nce,vLo),e(Wb,FLo),e(Wb,vD),e(vD,TLo),e(Wb,MLo),e(Q,ELo),e(Q,Qb),e(Qb,qce),e(qce,CLo),e(Qb,wLo),e(Qb,FD),e(FD,ALo),e(Qb,yLo),e(Q,LLo),e(Q,Hb),e(Hb,jce),e(jce,xLo),e(Hb,$Lo),e(Hb,TD),e(TD,kLo),e(Hb,SLo),e(Q,RLo),e(Q,Ub),e(Ub,Dce),e(Dce,PLo),e(Ub,BLo),e(Ub,MD),e(MD,ILo),e(Ub,NLo),e(Q,qLo),e(Q,Jb),e(Jb,Gce),e(Gce,jLo),e(Jb,DLo),e(Jb,ED),e(ED,GLo),e(Jb,OLo),e(Q,VLo),e(Q,Yb),e(Yb,Oce),e(Oce,XLo),e(Yb,zLo),e(Yb,CD),e(CD,WLo),e(Yb,QLo),e(Q,HLo),e(Q,Kb),e(Kb,Vce),e(Vce,ULo),e(Kb,JLo),e(Kb,wD),e(wD,YLo),e(Kb,KLo),e(Q,ZLo),e(Q,Zb),e(Zb,Xce),e(Xce,e8o),e(Zb,o8o),e(Zb,AD),e(AD,r8o),e(Zb,t8o),e(Q,a8o),e(Q,e2),e(e2,zce),e(zce,n8o),e(e2,s8o),e(e2,yD),e(yD,l8o),e(e2,i8o),e(Q,d8o),e(Q,o2),e(o2,Wce),e(Wce,c8o),e(o2,m8o),e(o2,LD),e(LD,f8o),e(o2,g8o),e(Q,h8o),e(Q,r2),e(r2,Qce),e(Qce,u8o),e(r2,p8o),e(r2,xD),e(xD,_8o),e(r2,b8o),e(Q,v8o),e(Q,t2),e(t2,Hce),e(Hce,F8o),e(t2,T8o),e(t2,$D),e($D,M8o),e(t2,E8o),e(Q,C8o),e(Q,a2),e(a2,Uce),e(Uce,w8o),e(a2,A8o),e(a2,kD),e(kD,y8o),e(a2,L8o),e(Q,x8o),e(Q,n2),e(n2,Jce),e(Jce,$8o),e(n2,k8o),e(n2,SD),e(SD,S8o),e(n2,R8o),e(Q,P8o),e(Q,s2),e(s2,Yce),e(Yce,B8o),e(s2,I8o),e(s2,RD),e(RD,N8o),e(s2,q8o),e(Q,j8o),e(Q,l2),e(l2,Kce),e(Kce,D8o),e(l2,G8o),e(l2,PD),e(PD,O8o),e(l2,V8o),e(Q,X8o),e(Q,i2),e(i2,Zce),e(Zce,z8o),e(i2,W8o),e(i2,BD),e(BD,Q8o),e(i2,H8o),e(Q,U8o),e(Q,d2),e(d2,eme),e(eme,J8o),e(d2,Y8o),e(d2,ID),e(ID,K8o),e(d2,Z8o),e(Q,e7o),e(Q,c2),e(c2,ome),e(ome,o7o),e(c2,r7o),e(c2,ND),e(ND,t7o),e(c2,a7o),e(Q,n7o),e(Q,m2),e(m2,rme),e(rme,s7o),e(m2,l7o),e(m2,qD),e(qD,i7o),e(m2,d7o),e(Q,c7o),e(Q,f2),e(f2,tme),e(tme,m7o),e(f2,f7o),e(f2,jD),e(jD,g7o),e(f2,h7o),e(Q,u7o),e(Q,g2),e(g2,ame),e(ame,p7o),e(g2,_7o),e(g2,DD),e(DD,b7o),e(g2,v7o),e(Q,F7o),e(Q,h2),e(h2,nme),e(nme,T7o),e(h2,M7o),e(h2,sme),e(sme,E7o),e(h2,C7o),e(Q,w7o),e(Q,u2),e(u2,lme),e(lme,A7o),e(u2,y7o),e(u2,GD),e(GD,L7o),e(u2,x7o),e(Q,$7o),e(Q,p2),e(p2,ime),e(ime,k7o),e(p2,S7o),e(p2,OD),e(OD,R7o),e(p2,P7o),e(Q,B7o),e(Q,_2),e(_2,dme),e(dme,I7o),e(_2,N7o),e(_2,VD),e(VD,q7o),e(_2,j7o),e(Q,D7o),e(Q,b2),e(b2,cme),e(cme,G7o),e(b2,O7o),e(b2,XD),e(XD,V7o),e(b2,X7o),e(Ze,z7o),e(Ze,v2),e(v2,W7o),e(v2,mme),e(mme,Q7o),e(v2,H7o),e(v2,fme),e(fme,U7o),e(Ze,J7o),M(F2,Ze,null),b(m,Bqe,_),b(m,Ni,_),e(Ni,T2),e(T2,gme),M(EL,gme,null),e(Ni,Y7o),e(Ni,hme),e(hme,K7o),b(m,Iqe,_),b(m,So,_),M(CL,So,null),e(So,Z7o),e(So,qi),e(qi,e9o),e(qi,zD),e(zD,o9o),e(qi,r9o),e(qi,WD),e(WD,t9o),e(qi,a9o),e(So,n9o),e(So,wL),e(wL,s9o),e(wL,ume),e(ume,l9o),e(wL,i9o),e(So,d9o),e(So,lt),M(AL,lt,null),e(lt,c9o),e(lt,pme),e(pme,m9o),e(lt,f9o),e(lt,ji),e(ji,g9o),e(ji,_me),e(_me,h9o),e(ji,u9o),e(ji,QD),e(QD,p9o),e(ji,_9o),e(lt,b9o),M(M2,lt,null),e(So,v9o),e(So,eo),M(yL,eo,null),e(eo,F9o),e(eo,bme),e(bme,T9o),e(eo,M9o),e(eo,Sa),e(Sa,E9o),e(Sa,vme),e(vme,C9o),e(Sa,w9o),e(Sa,Fme),e(Fme,A9o),e(Sa,y9o),e(Sa,Tme),e(Tme,L9o),e(Sa,x9o),e(eo,$9o),e(eo,pe),e(pe,E2),e(E2,Mme),e(Mme,k9o),e(E2,S9o),e(E2,HD),e(HD,R9o),e(E2,P9o),e(pe,B9o),e(pe,C2),e(C2,Eme),e(Eme,I9o),e(C2,N9o),e(C2,UD),e(UD,q9o),e(C2,j9o),e(pe,D9o),e(pe,w2),e(w2,Cme),e(Cme,G9o),e(w2,O9o),e(w2,JD),e(JD,V9o),e(w2,X9o),e(pe,z9o),e(pe,A2),e(A2,wme),e(wme,W9o),e(A2,Q9o),e(A2,YD),e(YD,H9o),e(A2,U9o),e(pe,J9o),e(pe,y2),e(y2,Ame),e(Ame,Y9o),e(y2,K9o),e(y2,KD),e(KD,Z9o),e(y2,exo),e(pe,oxo),e(pe,L2),e(L2,yme),e(yme,rxo),e(L2,txo),e(L2,ZD),e(ZD,axo),e(L2,nxo),e(pe,sxo),e(pe,x2),e(x2,Lme),e(Lme,lxo),e(x2,ixo),e(x2,eG),e(eG,dxo),e(x2,cxo),e(pe,mxo),e(pe,$2),e($2,xme),e(xme,fxo),e($2,gxo),e($2,oG),e(oG,hxo),e($2,uxo),e(pe,pxo),e(pe,k2),e(k2,$me),e($me,_xo),e(k2,bxo),e(k2,rG),e(rG,vxo),e(k2,Fxo),e(pe,Txo),e(pe,S2),e(S2,kme),e(kme,Mxo),e(S2,Exo),e(S2,tG),e(tG,Cxo),e(S2,wxo),e(pe,Axo),e(pe,R2),e(R2,Sme),e(Sme,yxo),e(R2,Lxo),e(R2,aG),e(aG,xxo),e(R2,$xo),e(pe,kxo),e(pe,P2),e(P2,Rme),e(Rme,Sxo),e(P2,Rxo),e(P2,nG),e(nG,Pxo),e(P2,Bxo),e(pe,Ixo),e(pe,B2),e(B2,Pme),e(Pme,Nxo),e(B2,qxo),e(B2,sG),e(sG,jxo),e(B2,Dxo),e(pe,Gxo),e(pe,I2),e(I2,Bme),e(Bme,Oxo),e(I2,Vxo),e(I2,lG),e(lG,Xxo),e(I2,zxo),e(pe,Wxo),e(pe,N2),e(N2,Ime),e(Ime,Qxo),e(N2,Hxo),e(N2,iG),e(iG,Uxo),e(N2,Jxo),e(pe,Yxo),e(pe,q2),e(q2,Nme),e(Nme,Kxo),e(q2,Zxo),e(q2,dG),e(dG,e$o),e(q2,o$o),e(eo,r$o),e(eo,j2),e(j2,t$o),e(j2,qme),e(qme,a$o),e(j2,n$o),e(j2,jme),e(jme,s$o),e(eo,l$o),M(D2,eo,null),b(m,Nqe,_),b(m,Di,_),e(Di,G2),e(G2,Dme),M(LL,Dme,null),e(Di,i$o),e(Di,Gme),e(Gme,d$o),b(m,qqe,_),b(m,Ro,_),M(xL,Ro,null),e(Ro,c$o),e(Ro,Gi),e(Gi,m$o),e(Gi,cG),e(cG,f$o),e(Gi,g$o),e(Gi,mG),e(mG,h$o),e(Gi,u$o),e(Ro,p$o),e(Ro,$L),e($L,_$o),e($L,Ome),e(Ome,b$o),e($L,v$o),e(Ro,F$o),e(Ro,it),M(kL,it,null),e(it,T$o),e(it,Vme),e(Vme,M$o),e(it,E$o),e(it,Oi),e(Oi,C$o),e(Oi,Xme),e(Xme,w$o),e(Oi,A$o),e(Oi,fG),e(fG,y$o),e(Oi,L$o),e(it,x$o),M(O2,it,null),e(Ro,$$o),e(Ro,oo),M(SL,oo,null),e(oo,k$o),e(oo,zme),e(zme,S$o),e(oo,R$o),e(oo,Ra),e(Ra,P$o),e(Ra,Wme),e(Wme,B$o),e(Ra,I$o),e(Ra,Qme),e(Qme,N$o),e(Ra,q$o),e(Ra,Hme),e(Hme,j$o),e(Ra,D$o),e(oo,G$o),e(oo,N),e(N,V2),e(V2,Ume),e(Ume,O$o),e(V2,V$o),e(V2,gG),e(gG,X$o),e(V2,z$o),e(N,W$o),e(N,X2),e(X2,Jme),e(Jme,Q$o),e(X2,H$o),e(X2,hG),e(hG,U$o),e(X2,J$o),e(N,Y$o),e(N,z2),e(z2,Yme),e(Yme,K$o),e(z2,Z$o),e(z2,uG),e(uG,eko),e(z2,oko),e(N,rko),e(N,W2),e(W2,Kme),e(Kme,tko),e(W2,ako),e(W2,pG),e(pG,nko),e(W2,sko),e(N,lko),e(N,Q2),e(Q2,Zme),e(Zme,iko),e(Q2,dko),e(Q2,_G),e(_G,cko),e(Q2,mko),e(N,fko),e(N,H2),e(H2,efe),e(efe,gko),e(H2,hko),e(H2,bG),e(bG,uko),e(H2,pko),e(N,_ko),e(N,U2),e(U2,ofe),e(ofe,bko),e(U2,vko),e(U2,vG),e(vG,Fko),e(U2,Tko),e(N,Mko),e(N,J2),e(J2,rfe),e(rfe,Eko),e(J2,Cko),e(J2,FG),e(FG,wko),e(J2,Ako),e(N,yko),e(N,Y2),e(Y2,tfe),e(tfe,Lko),e(Y2,xko),e(Y2,TG),e(TG,$ko),e(Y2,kko),e(N,Sko),e(N,K2),e(K2,afe),e(afe,Rko),e(K2,Pko),e(K2,MG),e(MG,Bko),e(K2,Iko),e(N,Nko),e(N,Z2),e(Z2,nfe),e(nfe,qko),e(Z2,jko),e(Z2,EG),e(EG,Dko),e(Z2,Gko),e(N,Oko),e(N,ev),e(ev,sfe),e(sfe,Vko),e(ev,Xko),e(ev,CG),e(CG,zko),e(ev,Wko),e(N,Qko),e(N,ov),e(ov,lfe),e(lfe,Hko),e(ov,Uko),e(ov,wG),e(wG,Jko),e(ov,Yko),e(N,Kko),e(N,rv),e(rv,ife),e(ife,Zko),e(rv,eSo),e(rv,AG),e(AG,oSo),e(rv,rSo),e(N,tSo),e(N,tv),e(tv,dfe),e(dfe,aSo),e(tv,nSo),e(tv,yG),e(yG,sSo),e(tv,lSo),e(N,iSo),e(N,av),e(av,cfe),e(cfe,dSo),e(av,cSo),e(av,LG),e(LG,mSo),e(av,fSo),e(N,gSo),e(N,nv),e(nv,mfe),e(mfe,hSo),e(nv,uSo),e(nv,xG),e(xG,pSo),e(nv,_So),e(N,bSo),e(N,sv),e(sv,ffe),e(ffe,vSo),e(sv,FSo),e(sv,$G),e($G,TSo),e(sv,MSo),e(N,ESo),e(N,lv),e(lv,gfe),e(gfe,CSo),e(lv,wSo),e(lv,kG),e(kG,ASo),e(lv,ySo),e(N,LSo),e(N,iv),e(iv,hfe),e(hfe,xSo),e(iv,$So),e(iv,SG),e(SG,kSo),e(iv,SSo),e(N,RSo),e(N,dv),e(dv,ufe),e(ufe,PSo),e(dv,BSo),e(dv,RG),e(RG,ISo),e(dv,NSo),e(N,qSo),e(N,cv),e(cv,pfe),e(pfe,jSo),e(cv,DSo),e(cv,PG),e(PG,GSo),e(cv,OSo),e(N,VSo),e(N,mv),e(mv,_fe),e(_fe,XSo),e(mv,zSo),e(mv,BG),e(BG,WSo),e(mv,QSo),e(N,HSo),e(N,fv),e(fv,bfe),e(bfe,USo),e(fv,JSo),e(fv,IG),e(IG,YSo),e(fv,KSo),e(N,ZSo),e(N,gv),e(gv,vfe),e(vfe,eRo),e(gv,oRo),e(gv,NG),e(NG,rRo),e(gv,tRo),e(N,aRo),e(N,hv),e(hv,Ffe),e(Ffe,nRo),e(hv,sRo),e(hv,qG),e(qG,lRo),e(hv,iRo),e(N,dRo),e(N,uv),e(uv,Tfe),e(Tfe,cRo),e(uv,mRo),e(uv,jG),e(jG,fRo),e(uv,gRo),e(N,hRo),e(N,pv),e(pv,Mfe),e(Mfe,uRo),e(pv,pRo),e(pv,DG),e(DG,_Ro),e(pv,bRo),e(N,vRo),e(N,_v),e(_v,Efe),e(Efe,FRo),e(_v,TRo),e(_v,GG),e(GG,MRo),e(_v,ERo),e(N,CRo),e(N,bv),e(bv,Cfe),e(Cfe,wRo),e(bv,ARo),e(bv,OG),e(OG,yRo),e(bv,LRo),e(N,xRo),e(N,vv),e(vv,wfe),e(wfe,$Ro),e(vv,kRo),e(vv,VG),e(VG,SRo),e(vv,RRo),e(N,PRo),e(N,Fv),e(Fv,Afe),e(Afe,BRo),e(Fv,IRo),e(Fv,XG),e(XG,NRo),e(Fv,qRo),e(N,jRo),e(N,Tv),e(Tv,yfe),e(yfe,DRo),e(Tv,GRo),e(Tv,zG),e(zG,ORo),e(Tv,VRo),e(N,XRo),e(N,Mv),e(Mv,Lfe),e(Lfe,zRo),e(Mv,WRo),e(Mv,WG),e(WG,QRo),e(Mv,HRo),e(N,URo),e(N,Ev),e(Ev,xfe),e(xfe,JRo),e(Ev,YRo),e(Ev,QG),e(QG,KRo),e(Ev,ZRo),e(N,ePo),e(N,Cv),e(Cv,$fe),e($fe,oPo),e(Cv,rPo),e(Cv,HG),e(HG,tPo),e(Cv,aPo),e(N,nPo),e(N,wv),e(wv,kfe),e(kfe,sPo),e(wv,lPo),e(wv,UG),e(UG,iPo),e(wv,dPo),e(N,cPo),e(N,Av),e(Av,Sfe),e(Sfe,mPo),e(Av,fPo),e(Av,JG),e(JG,gPo),e(Av,hPo),e(N,uPo),e(N,yv),e(yv,Rfe),e(Rfe,pPo),e(yv,_Po),e(yv,YG),e(YG,bPo),e(yv,vPo),e(N,FPo),e(N,Lv),e(Lv,Pfe),e(Pfe,TPo),e(Lv,MPo),e(Lv,KG),e(KG,EPo),e(Lv,CPo),e(N,wPo),e(N,xv),e(xv,Bfe),e(Bfe,APo),e(xv,yPo),e(xv,ZG),e(ZG,LPo),e(xv,xPo),e(N,$Po),e(N,$v),e($v,Ife),e(Ife,kPo),e($v,SPo),e($v,eO),e(eO,RPo),e($v,PPo),e(N,BPo),e(N,kv),e(kv,Nfe),e(Nfe,IPo),e(kv,NPo),e(kv,oO),e(oO,qPo),e(kv,jPo),e(N,DPo),e(N,Sv),e(Sv,qfe),e(qfe,GPo),e(Sv,OPo),e(Sv,rO),e(rO,VPo),e(Sv,XPo),e(N,zPo),e(N,Rv),e(Rv,jfe),e(jfe,WPo),e(Rv,QPo),e(Rv,tO),e(tO,HPo),e(Rv,UPo),e(N,JPo),e(N,Pv),e(Pv,Dfe),e(Dfe,YPo),e(Pv,KPo),e(Pv,aO),e(aO,ZPo),e(Pv,eBo),e(N,oBo),e(N,Bv),e(Bv,Gfe),e(Gfe,rBo),e(Bv,tBo),e(Bv,nO),e(nO,aBo),e(Bv,nBo),e(oo,sBo),e(oo,Iv),e(Iv,lBo),e(Iv,Ofe),e(Ofe,iBo),e(Iv,dBo),e(Iv,Vfe),e(Vfe,cBo),e(oo,mBo),M(Nv,oo,null),b(m,jqe,_),b(m,Vi,_),e(Vi,qv),e(qv,Xfe),M(RL,Xfe,null),e(Vi,fBo),e(Vi,zfe),e(zfe,gBo),b(m,Dqe,_),b(m,Po,_),M(PL,Po,null),e(Po,hBo),e(Po,Xi),e(Xi,uBo),e(Xi,sO),e(sO,pBo),e(Xi,_Bo),e(Xi,lO),e(lO,bBo),e(Xi,vBo),e(Po,FBo),e(Po,BL),e(BL,TBo),e(BL,Wfe),e(Wfe,MBo),e(BL,EBo),e(Po,CBo),e(Po,dt),M(IL,dt,null),e(dt,wBo),e(dt,Qfe),e(Qfe,ABo),e(dt,yBo),e(dt,zi),e(zi,LBo),e(zi,Hfe),e(Hfe,xBo),e(zi,$Bo),e(zi,iO),e(iO,kBo),e(zi,SBo),e(dt,RBo),M(jv,dt,null),e(Po,PBo),e(Po,ro),M(NL,ro,null),e(ro,BBo),e(ro,Ufe),e(Ufe,IBo),e(ro,NBo),e(ro,Pa),e(Pa,qBo),e(Pa,Jfe),e(Jfe,jBo),e(Pa,DBo),e(Pa,Yfe),e(Yfe,GBo),e(Pa,OBo),e(Pa,Kfe),e(Kfe,VBo),e(Pa,XBo),e(ro,zBo),e(ro,K),e(K,Dv),e(Dv,Zfe),e(Zfe,WBo),e(Dv,QBo),e(Dv,dO),e(dO,HBo),e(Dv,UBo),e(K,JBo),e(K,Gv),e(Gv,ege),e(ege,YBo),e(Gv,KBo),e(Gv,cO),e(cO,ZBo),e(Gv,eIo),e(K,oIo),e(K,Ov),e(Ov,oge),e(oge,rIo),e(Ov,tIo),e(Ov,mO),e(mO,aIo),e(Ov,nIo),e(K,sIo),e(K,Vv),e(Vv,rge),e(rge,lIo),e(Vv,iIo),e(Vv,fO),e(fO,dIo),e(Vv,cIo),e(K,mIo),e(K,Xv),e(Xv,tge),e(tge,fIo),e(Xv,gIo),e(Xv,gO),e(gO,hIo),e(Xv,uIo),e(K,pIo),e(K,zv),e(zv,age),e(age,_Io),e(zv,bIo),e(zv,hO),e(hO,vIo),e(zv,FIo),e(K,TIo),e(K,Wv),e(Wv,nge),e(nge,MIo),e(Wv,EIo),e(Wv,uO),e(uO,CIo),e(Wv,wIo),e(K,AIo),e(K,Qv),e(Qv,sge),e(sge,yIo),e(Qv,LIo),e(Qv,pO),e(pO,xIo),e(Qv,$Io),e(K,kIo),e(K,Hv),e(Hv,lge),e(lge,SIo),e(Hv,RIo),e(Hv,_O),e(_O,PIo),e(Hv,BIo),e(K,IIo),e(K,Uv),e(Uv,ige),e(ige,NIo),e(Uv,qIo),e(Uv,bO),e(bO,jIo),e(Uv,DIo),e(K,GIo),e(K,Jv),e(Jv,dge),e(dge,OIo),e(Jv,VIo),e(Jv,vO),e(vO,XIo),e(Jv,zIo),e(K,WIo),e(K,Yv),e(Yv,cge),e(cge,QIo),e(Yv,HIo),e(Yv,FO),e(FO,UIo),e(Yv,JIo),e(K,YIo),e(K,Kv),e(Kv,mge),e(mge,KIo),e(Kv,ZIo),e(Kv,TO),e(TO,eNo),e(Kv,oNo),e(K,rNo),e(K,Zv),e(Zv,fge),e(fge,tNo),e(Zv,aNo),e(Zv,MO),e(MO,nNo),e(Zv,sNo),e(K,lNo),e(K,eF),e(eF,gge),e(gge,iNo),e(eF,dNo),e(eF,EO),e(EO,cNo),e(eF,mNo),e(K,fNo),e(K,oF),e(oF,hge),e(hge,gNo),e(oF,hNo),e(oF,CO),e(CO,uNo),e(oF,pNo),e(K,_No),e(K,rF),e(rF,uge),e(uge,bNo),e(rF,vNo),e(rF,wO),e(wO,FNo),e(rF,TNo),e(K,MNo),e(K,tF),e(tF,pge),e(pge,ENo),e(tF,CNo),e(tF,AO),e(AO,wNo),e(tF,ANo),e(K,yNo),e(K,aF),e(aF,_ge),e(_ge,LNo),e(aF,xNo),e(aF,yO),e(yO,$No),e(aF,kNo),e(K,SNo),e(K,nF),e(nF,bge),e(bge,RNo),e(nF,PNo),e(nF,LO),e(LO,BNo),e(nF,INo),e(K,NNo),e(K,sF),e(sF,vge),e(vge,qNo),e(sF,jNo),e(sF,xO),e(xO,DNo),e(sF,GNo),e(K,ONo),e(K,lF),e(lF,Fge),e(Fge,VNo),e(lF,XNo),e(lF,$O),e($O,zNo),e(lF,WNo),e(K,QNo),e(K,iF),e(iF,Tge),e(Tge,HNo),e(iF,UNo),e(iF,kO),e(kO,JNo),e(iF,YNo),e(K,KNo),e(K,dF),e(dF,Mge),e(Mge,ZNo),e(dF,eqo),e(dF,SO),e(SO,oqo),e(dF,rqo),e(K,tqo),e(K,cF),e(cF,Ege),e(Ege,aqo),e(cF,nqo),e(cF,RO),e(RO,sqo),e(cF,lqo),e(K,iqo),e(K,mF),e(mF,Cge),e(Cge,dqo),e(mF,cqo),e(mF,PO),e(PO,mqo),e(mF,fqo),e(K,gqo),e(K,fF),e(fF,wge),e(wge,hqo),e(fF,uqo),e(fF,BO),e(BO,pqo),e(fF,_qo),e(K,bqo),e(K,gF),e(gF,Age),e(Age,vqo),e(gF,Fqo),e(gF,IO),e(IO,Tqo),e(gF,Mqo),e(K,Eqo),e(K,hF),e(hF,yge),e(yge,Cqo),e(hF,wqo),e(hF,NO),e(NO,Aqo),e(hF,yqo),e(ro,Lqo),e(ro,uF),e(uF,xqo),e(uF,Lge),e(Lge,$qo),e(uF,kqo),e(uF,xge),e(xge,Sqo),e(ro,Rqo),M(pF,ro,null),b(m,Gqe,_),b(m,Wi,_),e(Wi,_F),e(_F,$ge),M(qL,$ge,null),e(Wi,Pqo),e(Wi,kge),e(kge,Bqo),b(m,Oqe,_),b(m,Bo,_),M(jL,Bo,null),e(Bo,Iqo),e(Bo,Qi),e(Qi,Nqo),e(Qi,qO),e(qO,qqo),e(Qi,jqo),e(Qi,jO),e(jO,Dqo),e(Qi,Gqo),e(Bo,Oqo),e(Bo,DL),e(DL,Vqo),e(DL,Sge),e(Sge,Xqo),e(DL,zqo),e(Bo,Wqo),e(Bo,ct),M(GL,ct,null),e(ct,Qqo),e(ct,Rge),e(Rge,Hqo),e(ct,Uqo),e(ct,Hi),e(Hi,Jqo),e(Hi,Pge),e(Pge,Yqo),e(Hi,Kqo),e(Hi,DO),e(DO,Zqo),e(Hi,ejo),e(ct,ojo),M(bF,ct,null),e(Bo,rjo),e(Bo,to),M(OL,to,null),e(to,tjo),e(to,Bge),e(Bge,ajo),e(to,njo),e(to,Ba),e(Ba,sjo),e(Ba,Ige),e(Ige,ljo),e(Ba,ijo),e(Ba,Nge),e(Nge,djo),e(Ba,cjo),e(Ba,qge),e(qge,mjo),e(Ba,fjo),e(to,gjo),e(to,Yr),e(Yr,vF),e(vF,jge),e(jge,hjo),e(vF,ujo),e(vF,GO),e(GO,pjo),e(vF,_jo),e(Yr,bjo),e(Yr,FF),e(FF,Dge),e(Dge,vjo),e(FF,Fjo),e(FF,OO),e(OO,Tjo),e(FF,Mjo),e(Yr,Ejo),e(Yr,TF),e(TF,Gge),e(Gge,Cjo),e(TF,wjo),e(TF,VO),e(VO,Ajo),e(TF,yjo),e(Yr,Ljo),e(Yr,MF),e(MF,Oge),e(Oge,xjo),e(MF,$jo),e(MF,XO),e(XO,kjo),e(MF,Sjo),e(Yr,Rjo),e(Yr,EF),e(EF,Vge),e(Vge,Pjo),e(EF,Bjo),e(EF,zO),e(zO,Ijo),e(EF,Njo),e(to,qjo),e(to,CF),e(CF,jjo),e(CF,Xge),e(Xge,Djo),e(CF,Gjo),e(CF,zge),e(zge,Ojo),e(to,Vjo),M(wF,to,null),b(m,Vqe,_),b(m,Ui,_),e(Ui,AF),e(AF,Wge),M(VL,Wge,null),e(Ui,Xjo),e(Ui,Qge),e(Qge,zjo),b(m,Xqe,_),b(m,Io,_),M(XL,Io,null),e(Io,Wjo),e(Io,Ji),e(Ji,Qjo),e(Ji,WO),e(WO,Hjo),e(Ji,Ujo),e(Ji,QO),e(QO,Jjo),e(Ji,Yjo),e(Io,Kjo),e(Io,zL),e(zL,Zjo),e(zL,Hge),e(Hge,eDo),e(zL,oDo),e(Io,rDo),e(Io,mt),M(WL,mt,null),e(mt,tDo),e(mt,Uge),e(Uge,aDo),e(mt,nDo),e(mt,Yi),e(Yi,sDo),e(Yi,Jge),e(Jge,lDo),e(Yi,iDo),e(Yi,HO),e(HO,dDo),e(Yi,cDo),e(mt,mDo),M(yF,mt,null),e(Io,fDo),e(Io,ao),M(QL,ao,null),e(ao,gDo),e(ao,Yge),e(Yge,hDo),e(ao,uDo),e(ao,Ia),e(Ia,pDo),e(Ia,Kge),e(Kge,_Do),e(Ia,bDo),e(Ia,Zge),e(Zge,vDo),e(Ia,FDo),e(Ia,ehe),e(ehe,TDo),e(Ia,MDo),e(ao,EDo),e(ao,H),e(H,LF),e(LF,ohe),e(ohe,CDo),e(LF,wDo),e(LF,UO),e(UO,ADo),e(LF,yDo),e(H,LDo),e(H,xF),e(xF,rhe),e(rhe,xDo),e(xF,$Do),e(xF,JO),e(JO,kDo),e(xF,SDo),e(H,RDo),e(H,$F),e($F,the),e(the,PDo),e($F,BDo),e($F,YO),e(YO,IDo),e($F,NDo),e(H,qDo),e(H,kF),e(kF,ahe),e(ahe,jDo),e(kF,DDo),e(kF,KO),e(KO,GDo),e(kF,ODo),e(H,VDo),e(H,SF),e(SF,nhe),e(nhe,XDo),e(SF,zDo),e(SF,ZO),e(ZO,WDo),e(SF,QDo),e(H,HDo),e(H,RF),e(RF,she),e(she,UDo),e(RF,JDo),e(RF,eV),e(eV,YDo),e(RF,KDo),e(H,ZDo),e(H,PF),e(PF,lhe),e(lhe,eGo),e(PF,oGo),e(PF,oV),e(oV,rGo),e(PF,tGo),e(H,aGo),e(H,BF),e(BF,ihe),e(ihe,nGo),e(BF,sGo),e(BF,rV),e(rV,lGo),e(BF,iGo),e(H,dGo),e(H,IF),e(IF,dhe),e(dhe,cGo),e(IF,mGo),e(IF,tV),e(tV,fGo),e(IF,gGo),e(H,hGo),e(H,NF),e(NF,che),e(che,uGo),e(NF,pGo),e(NF,aV),e(aV,_Go),e(NF,bGo),e(H,vGo),e(H,qF),e(qF,mhe),e(mhe,FGo),e(qF,TGo),e(qF,nV),e(nV,MGo),e(qF,EGo),e(H,CGo),e(H,jF),e(jF,fhe),e(fhe,wGo),e(jF,AGo),e(jF,sV),e(sV,yGo),e(jF,LGo),e(H,xGo),e(H,DF),e(DF,ghe),e(ghe,$Go),e(DF,kGo),e(DF,lV),e(lV,SGo),e(DF,RGo),e(H,PGo),e(H,GF),e(GF,hhe),e(hhe,BGo),e(GF,IGo),e(GF,iV),e(iV,NGo),e(GF,qGo),e(H,jGo),e(H,OF),e(OF,uhe),e(uhe,DGo),e(OF,GGo),e(OF,dV),e(dV,OGo),e(OF,VGo),e(H,XGo),e(H,VF),e(VF,phe),e(phe,zGo),e(VF,WGo),e(VF,cV),e(cV,QGo),e(VF,HGo),e(H,UGo),e(H,XF),e(XF,_he),e(_he,JGo),e(XF,YGo),e(XF,mV),e(mV,KGo),e(XF,ZGo),e(H,eOo),e(H,zF),e(zF,bhe),e(bhe,oOo),e(zF,rOo),e(zF,fV),e(fV,tOo),e(zF,aOo),e(H,nOo),e(H,WF),e(WF,vhe),e(vhe,sOo),e(WF,lOo),e(WF,gV),e(gV,iOo),e(WF,dOo),e(H,cOo),e(H,QF),e(QF,Fhe),e(Fhe,mOo),e(QF,fOo),e(QF,hV),e(hV,gOo),e(QF,hOo),e(H,uOo),e(H,HF),e(HF,The),e(The,pOo),e(HF,_Oo),e(HF,uV),e(uV,bOo),e(HF,vOo),e(H,FOo),e(H,UF),e(UF,Mhe),e(Mhe,TOo),e(UF,MOo),e(UF,pV),e(pV,EOo),e(UF,COo),e(H,wOo),e(H,JF),e(JF,Ehe),e(Ehe,AOo),e(JF,yOo),e(JF,_V),e(_V,LOo),e(JF,xOo),e(H,$Oo),e(H,YF),e(YF,Che),e(Che,kOo),e(YF,SOo),e(YF,bV),e(bV,ROo),e(YF,POo),e(H,BOo),e(H,KF),e(KF,whe),e(whe,IOo),e(KF,NOo),e(KF,vV),e(vV,qOo),e(KF,jOo),e(H,DOo),e(H,ZF),e(ZF,Ahe),e(Ahe,GOo),e(ZF,OOo),e(ZF,FV),e(FV,VOo),e(ZF,XOo),e(H,zOo),e(H,e1),e(e1,yhe),e(yhe,WOo),e(e1,QOo),e(e1,TV),e(TV,HOo),e(e1,UOo),e(H,JOo),e(H,o1),e(o1,Lhe),e(Lhe,YOo),e(o1,KOo),e(o1,MV),e(MV,ZOo),e(o1,eVo),e(H,oVo),e(H,r1),e(r1,xhe),e(xhe,rVo),e(r1,tVo),e(r1,EV),e(EV,aVo),e(r1,nVo),e(H,sVo),e(H,t1),e(t1,$he),e($he,lVo),e(t1,iVo),e(t1,CV),e(CV,dVo),e(t1,cVo),e(H,mVo),e(H,a1),e(a1,khe),e(khe,fVo),e(a1,gVo),e(a1,wV),e(wV,hVo),e(a1,uVo),e(H,pVo),e(H,n1),e(n1,She),e(She,_Vo),e(n1,bVo),e(n1,AV),e(AV,vVo),e(n1,FVo),e(H,TVo),e(H,s1),e(s1,Rhe),e(Rhe,MVo),e(s1,EVo),e(s1,yV),e(yV,CVo),e(s1,wVo),e(H,AVo),e(H,l1),e(l1,Phe),e(Phe,yVo),e(l1,LVo),e(l1,LV),e(LV,xVo),e(l1,$Vo),e(ao,kVo),e(ao,i1),e(i1,SVo),e(i1,Bhe),e(Bhe,RVo),e(i1,PVo),e(i1,Ihe),e(Ihe,BVo),e(ao,IVo),M(d1,ao,null),b(m,zqe,_),b(m,Ki,_),e(Ki,c1),e(c1,Nhe),M(HL,Nhe,null),e(Ki,NVo),e(Ki,qhe),e(qhe,qVo),b(m,Wqe,_),b(m,No,_),M(UL,No,null),e(No,jVo),e(No,Zi),e(Zi,DVo),e(Zi,xV),e(xV,GVo),e(Zi,OVo),e(Zi,$V),e($V,VVo),e(Zi,XVo),e(No,zVo),e(No,JL),e(JL,WVo),e(JL,jhe),e(jhe,QVo),e(JL,HVo),e(No,UVo),e(No,ft),M(YL,ft,null),e(ft,JVo),e(ft,Dhe),e(Dhe,YVo),e(ft,KVo),e(ft,ed),e(ed,ZVo),e(ed,Ghe),e(Ghe,eXo),e(ed,oXo),e(ed,kV),e(kV,rXo),e(ed,tXo),e(ft,aXo),M(m1,ft,null),e(No,nXo),e(No,no),M(KL,no,null),e(no,sXo),e(no,Ohe),e(Ohe,lXo),e(no,iXo),e(no,Na),e(Na,dXo),e(Na,Vhe),e(Vhe,cXo),e(Na,mXo),e(Na,Xhe),e(Xhe,fXo),e(Na,gXo),e(Na,zhe),e(zhe,hXo),e(Na,uXo),e(no,pXo),e(no,V),e(V,f1),e(f1,Whe),e(Whe,_Xo),e(f1,bXo),e(f1,SV),e(SV,vXo),e(f1,FXo),e(V,TXo),e(V,g1),e(g1,Qhe),e(Qhe,MXo),e(g1,EXo),e(g1,RV),e(RV,CXo),e(g1,wXo),e(V,AXo),e(V,h1),e(h1,Hhe),e(Hhe,yXo),e(h1,LXo),e(h1,PV),e(PV,xXo),e(h1,$Xo),e(V,kXo),e(V,u1),e(u1,Uhe),e(Uhe,SXo),e(u1,RXo),e(u1,BV),e(BV,PXo),e(u1,BXo),e(V,IXo),e(V,p1),e(p1,Jhe),e(Jhe,NXo),e(p1,qXo),e(p1,IV),e(IV,jXo),e(p1,DXo),e(V,GXo),e(V,_1),e(_1,Yhe),e(Yhe,OXo),e(_1,VXo),e(_1,NV),e(NV,XXo),e(_1,zXo),e(V,WXo),e(V,b1),e(b1,Khe),e(Khe,QXo),e(b1,HXo),e(b1,qV),e(qV,UXo),e(b1,JXo),e(V,YXo),e(V,v1),e(v1,Zhe),e(Zhe,KXo),e(v1,ZXo),e(v1,jV),e(jV,ezo),e(v1,ozo),e(V,rzo),e(V,F1),e(F1,eue),e(eue,tzo),e(F1,azo),e(F1,DV),e(DV,nzo),e(F1,szo),e(V,lzo),e(V,T1),e(T1,oue),e(oue,izo),e(T1,dzo),e(T1,GV),e(GV,czo),e(T1,mzo),e(V,fzo),e(V,M1),e(M1,rue),e(rue,gzo),e(M1,hzo),e(M1,OV),e(OV,uzo),e(M1,pzo),e(V,_zo),e(V,E1),e(E1,tue),e(tue,bzo),e(E1,vzo),e(E1,VV),e(VV,Fzo),e(E1,Tzo),e(V,Mzo),e(V,C1),e(C1,aue),e(aue,Ezo),e(C1,Czo),e(C1,XV),e(XV,wzo),e(C1,Azo),e(V,yzo),e(V,w1),e(w1,nue),e(nue,Lzo),e(w1,xzo),e(w1,zV),e(zV,$zo),e(w1,kzo),e(V,Szo),e(V,A1),e(A1,sue),e(sue,Rzo),e(A1,Pzo),e(A1,WV),e(WV,Bzo),e(A1,Izo),e(V,Nzo),e(V,y1),e(y1,lue),e(lue,qzo),e(y1,jzo),e(y1,QV),e(QV,Dzo),e(y1,Gzo),e(V,Ozo),e(V,L1),e(L1,iue),e(iue,Vzo),e(L1,Xzo),e(L1,HV),e(HV,zzo),e(L1,Wzo),e(V,Qzo),e(V,x1),e(x1,due),e(due,Hzo),e(x1,Uzo),e(x1,UV),e(UV,Jzo),e(x1,Yzo),e(V,Kzo),e(V,$1),e($1,cue),e(cue,Zzo),e($1,eWo),e($1,JV),e(JV,oWo),e($1,rWo),e(V,tWo),e(V,k1),e(k1,mue),e(mue,aWo),e(k1,nWo),e(k1,YV),e(YV,sWo),e(k1,lWo),e(V,iWo),e(V,S1),e(S1,fue),e(fue,dWo),e(S1,cWo),e(S1,KV),e(KV,mWo),e(S1,fWo),e(V,gWo),e(V,R1),e(R1,gue),e(gue,hWo),e(R1,uWo),e(R1,ZV),e(ZV,pWo),e(R1,_Wo),e(V,bWo),e(V,P1),e(P1,hue),e(hue,vWo),e(P1,FWo),e(P1,eX),e(eX,TWo),e(P1,MWo),e(V,EWo),e(V,B1),e(B1,uue),e(uue,CWo),e(B1,wWo),e(B1,oX),e(oX,AWo),e(B1,yWo),e(V,LWo),e(V,I1),e(I1,pue),e(pue,xWo),e(I1,$Wo),e(I1,rX),e(rX,kWo),e(I1,SWo),e(V,RWo),e(V,N1),e(N1,_ue),e(_ue,PWo),e(N1,BWo),e(N1,tX),e(tX,IWo),e(N1,NWo),e(V,qWo),e(V,q1),e(q1,bue),e(bue,jWo),e(q1,DWo),e(q1,aX),e(aX,GWo),e(q1,OWo),e(V,VWo),e(V,j1),e(j1,vue),e(vue,XWo),e(j1,zWo),e(j1,nX),e(nX,WWo),e(j1,QWo),e(V,HWo),e(V,D1),e(D1,Fue),e(Fue,UWo),e(D1,JWo),e(D1,sX),e(sX,YWo),e(D1,KWo),e(V,ZWo),e(V,G1),e(G1,Tue),e(Tue,eQo),e(G1,oQo),e(G1,lX),e(lX,rQo),e(G1,tQo),e(V,aQo),e(V,O1),e(O1,Mue),e(Mue,nQo),e(O1,sQo),e(O1,iX),e(iX,lQo),e(O1,iQo),e(V,dQo),e(V,V1),e(V1,Eue),e(Eue,cQo),e(V1,mQo),e(V1,dX),e(dX,fQo),e(V1,gQo),e(V,hQo),e(V,X1),e(X1,Cue),e(Cue,uQo),e(X1,pQo),e(X1,cX),e(cX,_Qo),e(X1,bQo),e(V,vQo),e(V,z1),e(z1,wue),e(wue,FQo),e(z1,TQo),e(z1,mX),e(mX,MQo),e(z1,EQo),e(V,CQo),e(V,W1),e(W1,Aue),e(Aue,wQo),e(W1,AQo),e(W1,fX),e(fX,yQo),e(W1,LQo),e(V,xQo),e(V,Q1),e(Q1,yue),e(yue,$Qo),e(Q1,kQo),e(Q1,gX),e(gX,SQo),e(Q1,RQo),e(V,PQo),e(V,H1),e(H1,Lue),e(Lue,BQo),e(H1,IQo),e(H1,hX),e(hX,NQo),e(H1,qQo),e(V,jQo),e(V,U1),e(U1,xue),e(xue,DQo),e(U1,GQo),e(U1,uX),e(uX,OQo),e(U1,VQo),e(V,XQo),e(V,J1),e(J1,$ue),e($ue,zQo),e(J1,WQo),e(J1,pX),e(pX,QQo),e(J1,HQo),e(V,UQo),e(V,Y1),e(Y1,kue),e(kue,JQo),e(Y1,YQo),e(Y1,_X),e(_X,KQo),e(Y1,ZQo),e(no,eHo),e(no,K1),e(K1,oHo),e(K1,Sue),e(Sue,rHo),e(K1,tHo),e(K1,Rue),e(Rue,aHo),e(no,nHo),M(Z1,no,null),b(m,Qqe,_),b(m,od,_),e(od,eT),e(eT,Pue),M(ZL,Pue,null),e(od,sHo),e(od,Bue),e(Bue,lHo),b(m,Hqe,_),b(m,qo,_),M(e8,qo,null),e(qo,iHo),e(qo,rd),e(rd,dHo),e(rd,bX),e(bX,cHo),e(rd,mHo),e(rd,vX),e(vX,fHo),e(rd,gHo),e(qo,hHo),e(qo,o8),e(o8,uHo),e(o8,Iue),e(Iue,pHo),e(o8,_Ho),e(qo,bHo),e(qo,gt),M(r8,gt,null),e(gt,vHo),e(gt,Nue),e(Nue,FHo),e(gt,THo),e(gt,td),e(td,MHo),e(td,que),e(que,EHo),e(td,CHo),e(td,FX),e(FX,wHo),e(td,AHo),e(gt,yHo),M(oT,gt,null),e(qo,LHo),e(qo,so),M(t8,so,null),e(so,xHo),e(so,jue),e(jue,$Ho),e(so,kHo),e(so,qa),e(qa,SHo),e(qa,Due),e(Due,RHo),e(qa,PHo),e(qa,Gue),e(Gue,BHo),e(qa,IHo),e(qa,Oue),e(Oue,NHo),e(qa,qHo),e(so,jHo),e(so,Vue),e(Vue,rT),e(rT,Xue),e(Xue,DHo),e(rT,GHo),e(rT,TX),e(TX,OHo),e(rT,VHo),e(so,XHo),e(so,tT),e(tT,zHo),e(tT,zue),e(zue,WHo),e(tT,QHo),e(tT,Wue),e(Wue,HHo),e(so,UHo),M(aT,so,null),b(m,Uqe,_),b(m,ad,_),e(ad,nT),e(nT,Que),M(a8,Que,null),e(ad,JHo),e(ad,Hue),e(Hue,YHo),b(m,Jqe,_),b(m,jo,_),M(n8,jo,null),e(jo,KHo),e(jo,nd),e(nd,ZHo),e(nd,MX),e(MX,eUo),e(nd,oUo),e(nd,EX),e(EX,rUo),e(nd,tUo),e(jo,aUo),e(jo,s8),e(s8,nUo),e(s8,Uue),e(Uue,sUo),e(s8,lUo),e(jo,iUo),e(jo,ht),M(l8,ht,null),e(ht,dUo),e(ht,Jue),e(Jue,cUo),e(ht,mUo),e(ht,sd),e(sd,fUo),e(sd,Yue),e(Yue,gUo),e(sd,hUo),e(sd,CX),e(CX,uUo),e(sd,pUo),e(ht,_Uo),M(sT,ht,null),e(jo,bUo),e(jo,lo),M(i8,lo,null),e(lo,vUo),e(lo,Kue),e(Kue,FUo),e(lo,TUo),e(lo,ja),e(ja,MUo),e(ja,Zue),e(Zue,EUo),e(ja,CUo),e(ja,epe),e(epe,wUo),e(ja,AUo),e(ja,ope),e(ope,yUo),e(ja,LUo),e(lo,xUo),e(lo,Fe),e(Fe,lT),e(lT,rpe),e(rpe,$Uo),e(lT,kUo),e(lT,wX),e(wX,SUo),e(lT,RUo),e(Fe,PUo),e(Fe,iT),e(iT,tpe),e(tpe,BUo),e(iT,IUo),e(iT,AX),e(AX,NUo),e(iT,qUo),e(Fe,jUo),e(Fe,dT),e(dT,ape),e(ape,DUo),e(dT,GUo),e(dT,yX),e(yX,OUo),e(dT,VUo),e(Fe,XUo),e(Fe,cT),e(cT,npe),e(npe,zUo),e(cT,WUo),e(cT,LX),e(LX,QUo),e(cT,HUo),e(Fe,UUo),e(Fe,Bs),e(Bs,spe),e(spe,JUo),e(Bs,YUo),e(Bs,xX),e(xX,KUo),e(Bs,ZUo),e(Bs,$X),e($X,eJo),e(Bs,oJo),e(Fe,rJo),e(Fe,mT),e(mT,lpe),e(lpe,tJo),e(mT,aJo),e(mT,kX),e(kX,nJo),e(mT,sJo),e(Fe,lJo),e(Fe,ut),e(ut,ipe),e(ipe,iJo),e(ut,dJo),e(ut,SX),e(SX,cJo),e(ut,mJo),e(ut,RX),e(RX,fJo),e(ut,gJo),e(ut,PX),e(PX,hJo),e(ut,uJo),e(Fe,pJo),e(Fe,fT),e(fT,dpe),e(dpe,_Jo),e(fT,bJo),e(fT,BX),e(BX,vJo),e(fT,FJo),e(Fe,TJo),e(Fe,gT),e(gT,cpe),e(cpe,MJo),e(gT,EJo),e(gT,IX),e(IX,CJo),e(gT,wJo),e(Fe,AJo),e(Fe,hT),e(hT,mpe),e(mpe,yJo),e(hT,LJo),e(hT,NX),e(NX,xJo),e(hT,$Jo),e(Fe,kJo),e(Fe,uT),e(uT,fpe),e(fpe,SJo),e(uT,RJo),e(uT,qX),e(qX,PJo),e(uT,BJo),e(Fe,IJo),e(Fe,pT),e(pT,gpe),e(gpe,NJo),e(pT,qJo),e(pT,jX),e(jX,jJo),e(pT,DJo),e(Fe,GJo),e(Fe,_T),e(_T,hpe),e(hpe,OJo),e(_T,VJo),e(_T,DX),e(DX,XJo),e(_T,zJo),e(Fe,WJo),e(Fe,bT),e(bT,upe),e(upe,QJo),e(bT,HJo),e(bT,GX),e(GX,UJo),e(bT,JJo),e(lo,YJo),e(lo,vT),e(vT,KJo),e(vT,ppe),e(ppe,ZJo),e(vT,eYo),e(vT,_pe),e(_pe,oYo),e(lo,rYo),M(FT,lo,null),b(m,Yqe,_),b(m,ld,_),e(ld,TT),e(TT,bpe),M(d8,bpe,null),e(ld,tYo),e(ld,vpe),e(vpe,aYo),b(m,Kqe,_),b(m,Do,_),M(c8,Do,null),e(Do,nYo),e(Do,id),e(id,sYo),e(id,OX),e(OX,lYo),e(id,iYo),e(id,VX),e(VX,dYo),e(id,cYo),e(Do,mYo),e(Do,m8),e(m8,fYo),e(m8,Fpe),e(Fpe,gYo),e(m8,hYo),e(Do,uYo),e(Do,pt),M(f8,pt,null),e(pt,pYo),e(pt,Tpe),e(Tpe,_Yo),e(pt,bYo),e(pt,dd),e(dd,vYo),e(dd,Mpe),e(Mpe,FYo),e(dd,TYo),e(dd,XX),e(XX,MYo),e(dd,EYo),e(pt,CYo),M(MT,pt,null),e(Do,wYo),e(Do,io),M(g8,io,null),e(io,AYo),e(io,Epe),e(Epe,yYo),e(io,LYo),e(io,Da),e(Da,xYo),e(Da,Cpe),e(Cpe,$Yo),e(Da,kYo),e(Da,wpe),e(wpe,SYo),e(Da,RYo),e(Da,Ape),e(Ape,PYo),e(Da,BYo),e(io,IYo),e(io,ype),e(ype,ET),e(ET,Lpe),e(Lpe,NYo),e(ET,qYo),e(ET,zX),e(zX,jYo),e(ET,DYo),e(io,GYo),e(io,CT),e(CT,OYo),e(CT,xpe),e(xpe,VYo),e(CT,XYo),e(CT,$pe),e($pe,zYo),e(io,WYo),M(wT,io,null),b(m,Zqe,_),b(m,cd,_),e(cd,AT),e(AT,kpe),M(h8,kpe,null),e(cd,QYo),e(cd,Spe),e(Spe,HYo),b(m,eje,_),b(m,Go,_),M(u8,Go,null),e(Go,UYo),e(Go,md),e(md,JYo),e(md,WX),e(WX,YYo),e(md,KYo),e(md,QX),e(QX,ZYo),e(md,eKo),e(Go,oKo),e(Go,p8),e(p8,rKo),e(p8,Rpe),e(Rpe,tKo),e(p8,aKo),e(Go,nKo),e(Go,_t),M(_8,_t,null),e(_t,sKo),e(_t,Ppe),e(Ppe,lKo),e(_t,iKo),e(_t,fd),e(fd,dKo),e(fd,Bpe),e(Bpe,cKo),e(fd,mKo),e(fd,HX),e(HX,fKo),e(fd,gKo),e(_t,hKo),M(yT,_t,null),e(Go,uKo),e(Go,co),M(b8,co,null),e(co,pKo),e(co,Ipe),e(Ipe,_Ko),e(co,bKo),e(co,Ga),e(Ga,vKo),e(Ga,Npe),e(Npe,FKo),e(Ga,TKo),e(Ga,qpe),e(qpe,MKo),e(Ga,EKo),e(Ga,jpe),e(jpe,CKo),e(Ga,wKo),e(co,AKo),e(co,Se),e(Se,LT),e(LT,Dpe),e(Dpe,yKo),e(LT,LKo),e(LT,UX),e(UX,xKo),e(LT,$Ko),e(Se,kKo),e(Se,xT),e(xT,Gpe),e(Gpe,SKo),e(xT,RKo),e(xT,JX),e(JX,PKo),e(xT,BKo),e(Se,IKo),e(Se,$T),e($T,Ope),e(Ope,NKo),e($T,qKo),e($T,YX),e(YX,jKo),e($T,DKo),e(Se,GKo),e(Se,kT),e(kT,Vpe),e(Vpe,OKo),e(kT,VKo),e(kT,KX),e(KX,XKo),e(kT,zKo),e(Se,WKo),e(Se,ST),e(ST,Xpe),e(Xpe,QKo),e(ST,HKo),e(ST,ZX),e(ZX,UKo),e(ST,JKo),e(Se,YKo),e(Se,RT),e(RT,zpe),e(zpe,KKo),e(RT,ZKo),e(RT,ez),e(ez,eZo),e(RT,oZo),e(Se,rZo),e(Se,PT),e(PT,Wpe),e(Wpe,tZo),e(PT,aZo),e(PT,oz),e(oz,nZo),e(PT,sZo),e(Se,lZo),e(Se,BT),e(BT,Qpe),e(Qpe,iZo),e(BT,dZo),e(BT,rz),e(rz,cZo),e(BT,mZo),e(Se,fZo),e(Se,IT),e(IT,Hpe),e(Hpe,gZo),e(IT,hZo),e(IT,tz),e(tz,uZo),e(IT,pZo),e(co,_Zo),e(co,NT),e(NT,bZo),e(NT,Upe),e(Upe,vZo),e(NT,FZo),e(NT,Jpe),e(Jpe,TZo),e(co,MZo),M(qT,co,null),b(m,oje,_),b(m,gd,_),e(gd,jT),e(jT,Ype),M(v8,Ype,null),e(gd,EZo),e(gd,Kpe),e(Kpe,CZo),b(m,rje,_),b(m,Oo,_),M(F8,Oo,null),e(Oo,wZo),e(Oo,hd),e(hd,AZo),e(hd,az),e(az,yZo),e(hd,LZo),e(hd,nz),e(nz,xZo),e(hd,$Zo),e(Oo,kZo),e(Oo,T8),e(T8,SZo),e(T8,Zpe),e(Zpe,RZo),e(T8,PZo),e(Oo,BZo),e(Oo,bt),M(M8,bt,null),e(bt,IZo),e(bt,e_e),e(e_e,NZo),e(bt,qZo),e(bt,ud),e(ud,jZo),e(ud,o_e),e(o_e,DZo),e(ud,GZo),e(ud,sz),e(sz,OZo),e(ud,VZo),e(bt,XZo),M(DT,bt,null),e(Oo,zZo),e(Oo,mo),M(E8,mo,null),e(mo,WZo),e(mo,r_e),e(r_e,QZo),e(mo,HZo),e(mo,Oa),e(Oa,UZo),e(Oa,t_e),e(t_e,JZo),e(Oa,YZo),e(Oa,a_e),e(a_e,KZo),e(Oa,ZZo),e(Oa,n_e),e(n_e,eer),e(Oa,oer),e(mo,rer),e(mo,Kr),e(Kr,GT),e(GT,s_e),e(s_e,ter),e(GT,aer),e(GT,lz),e(lz,ner),e(GT,ser),e(Kr,ler),e(Kr,OT),e(OT,l_e),e(l_e,ier),e(OT,der),e(OT,iz),e(iz,cer),e(OT,mer),e(Kr,fer),e(Kr,VT),e(VT,i_e),e(i_e,ger),e(VT,her),e(VT,dz),e(dz,uer),e(VT,per),e(Kr,_er),e(Kr,XT),e(XT,d_e),e(d_e,ber),e(XT,ver),e(XT,cz),e(cz,Fer),e(XT,Ter),e(Kr,Mer),e(Kr,zT),e(zT,c_e),e(c_e,Eer),e(zT,Cer),e(zT,mz),e(mz,wer),e(zT,Aer),e(mo,yer),e(mo,WT),e(WT,Ler),e(WT,m_e),e(m_e,xer),e(WT,$er),e(WT,f_e),e(f_e,ker),e(mo,Ser),M(QT,mo,null),b(m,tje,_),b(m,pd,_),e(pd,HT),e(HT,g_e),M(C8,g_e,null),e(pd,Rer),e(pd,h_e),e(h_e,Per),b(m,aje,_),b(m,Vo,_),M(w8,Vo,null),e(Vo,Ber),e(Vo,_d),e(_d,Ier),e(_d,fz),e(fz,Ner),e(_d,qer),e(_d,gz),e(gz,jer),e(_d,Der),e(Vo,Ger),e(Vo,A8),e(A8,Oer),e(A8,u_e),e(u_e,Ver),e(A8,Xer),e(Vo,zer),e(Vo,vt),M(y8,vt,null),e(vt,Wer),e(vt,p_e),e(p_e,Qer),e(vt,Her),e(vt,bd),e(bd,Uer),e(bd,__e),e(__e,Jer),e(bd,Yer),e(bd,hz),e(hz,Ker),e(bd,Zer),e(vt,eor),M(UT,vt,null),e(Vo,oor),e(Vo,fo),M(L8,fo,null),e(fo,ror),e(fo,b_e),e(b_e,tor),e(fo,aor),e(fo,Va),e(Va,nor),e(Va,v_e),e(v_e,sor),e(Va,lor),e(Va,F_e),e(F_e,ior),e(Va,dor),e(Va,T_e),e(T_e,cor),e(Va,mor),e(fo,gor),e(fo,Re),e(Re,JT),e(JT,M_e),e(M_e,hor),e(JT,uor),e(JT,uz),e(uz,por),e(JT,_or),e(Re,bor),e(Re,YT),e(YT,E_e),e(E_e,vor),e(YT,For),e(YT,pz),e(pz,Tor),e(YT,Mor),e(Re,Eor),e(Re,KT),e(KT,C_e),e(C_e,Cor),e(KT,wor),e(KT,_z),e(_z,Aor),e(KT,yor),e(Re,Lor),e(Re,ZT),e(ZT,w_e),e(w_e,xor),e(ZT,$or),e(ZT,bz),e(bz,kor),e(ZT,Sor),e(Re,Ror),e(Re,eM),e(eM,A_e),e(A_e,Por),e(eM,Bor),e(eM,vz),e(vz,Ior),e(eM,Nor),e(Re,qor),e(Re,oM),e(oM,y_e),e(y_e,jor),e(oM,Dor),e(oM,Fz),e(Fz,Gor),e(oM,Oor),e(Re,Vor),e(Re,rM),e(rM,L_e),e(L_e,Xor),e(rM,zor),e(rM,Tz),e(Tz,Wor),e(rM,Qor),e(Re,Hor),e(Re,tM),e(tM,x_e),e(x_e,Uor),e(tM,Jor),e(tM,Mz),e(Mz,Yor),e(tM,Kor),e(Re,Zor),e(Re,aM),e(aM,$_e),e($_e,err),e(aM,orr),e(aM,Ez),e(Ez,rrr),e(aM,trr),e(fo,arr),e(fo,nM),e(nM,nrr),e(nM,k_e),e(k_e,srr),e(nM,lrr),e(nM,S_e),e(S_e,irr),e(fo,drr),M(sM,fo,null),b(m,nje,_),b(m,vd,_),e(vd,lM),e(lM,R_e),M(x8,R_e,null),e(vd,crr),e(vd,P_e),e(P_e,mrr),b(m,sje,_),b(m,Xo,_),M($8,Xo,null),e(Xo,frr),e(Xo,Fd),e(Fd,grr),e(Fd,Cz),e(Cz,hrr),e(Fd,urr),e(Fd,wz),e(wz,prr),e(Fd,_rr),e(Xo,brr),e(Xo,k8),e(k8,vrr),e(k8,B_e),e(B_e,Frr),e(k8,Trr),e(Xo,Mrr),e(Xo,Ft),M(S8,Ft,null),e(Ft,Err),e(Ft,I_e),e(I_e,Crr),e(Ft,wrr),e(Ft,Td),e(Td,Arr),e(Td,N_e),e(N_e,yrr),e(Td,Lrr),e(Td,Az),e(Az,xrr),e(Td,$rr),e(Ft,krr),M(iM,Ft,null),e(Xo,Srr),e(Xo,go),M(R8,go,null),e(go,Rrr),e(go,q_e),e(q_e,Prr),e(go,Brr),e(go,Xa),e(Xa,Irr),e(Xa,j_e),e(j_e,Nrr),e(Xa,qrr),e(Xa,D_e),e(D_e,jrr),e(Xa,Drr),e(Xa,G_e),e(G_e,Grr),e(Xa,Orr),e(go,Vrr),e(go,P8),e(P8,dM),e(dM,O_e),e(O_e,Xrr),e(dM,zrr),e(dM,yz),e(yz,Wrr),e(dM,Qrr),e(P8,Hrr),e(P8,cM),e(cM,V_e),e(V_e,Urr),e(cM,Jrr),e(cM,Lz),e(Lz,Yrr),e(cM,Krr),e(go,Zrr),e(go,mM),e(mM,etr),e(mM,X_e),e(X_e,otr),e(mM,rtr),e(mM,z_e),e(z_e,ttr),e(go,atr),M(fM,go,null),b(m,lje,_),b(m,Md,_),e(Md,gM),e(gM,W_e),M(B8,W_e,null),e(Md,ntr),e(Md,Q_e),e(Q_e,str),b(m,ije,_),b(m,zo,_),M(I8,zo,null),e(zo,ltr),e(zo,Ed),e(Ed,itr),e(Ed,xz),e(xz,dtr),e(Ed,ctr),e(Ed,$z),e($z,mtr),e(Ed,ftr),e(zo,gtr),e(zo,N8),e(N8,htr),e(N8,H_e),e(H_e,utr),e(N8,ptr),e(zo,_tr),e(zo,Tt),M(q8,Tt,null),e(Tt,btr),e(Tt,U_e),e(U_e,vtr),e(Tt,Ftr),e(Tt,Cd),e(Cd,Ttr),e(Cd,J_e),e(J_e,Mtr),e(Cd,Etr),e(Cd,kz),e(kz,Ctr),e(Cd,wtr),e(Tt,Atr),M(hM,Tt,null),e(zo,ytr),e(zo,ho),M(j8,ho,null),e(ho,Ltr),e(ho,Y_e),e(Y_e,xtr),e(ho,$tr),e(ho,za),e(za,ktr),e(za,K_e),e(K_e,Str),e(za,Rtr),e(za,Z_e),e(Z_e,Ptr),e(za,Btr),e(za,ebe),e(ebe,Itr),e(za,Ntr),e(ho,qtr),e(ho,Zr),e(Zr,uM),e(uM,obe),e(obe,jtr),e(uM,Dtr),e(uM,Sz),e(Sz,Gtr),e(uM,Otr),e(Zr,Vtr),e(Zr,pM),e(pM,rbe),e(rbe,Xtr),e(pM,ztr),e(pM,Rz),e(Rz,Wtr),e(pM,Qtr),e(Zr,Htr),e(Zr,_M),e(_M,tbe),e(tbe,Utr),e(_M,Jtr),e(_M,Pz),e(Pz,Ytr),e(_M,Ktr),e(Zr,Ztr),e(Zr,bM),e(bM,abe),e(abe,ear),e(bM,oar),e(bM,Bz),e(Bz,rar),e(bM,tar),e(Zr,aar),e(Zr,vM),e(vM,nbe),e(nbe,nar),e(vM,sar),e(vM,Iz),e(Iz,lar),e(vM,iar),e(ho,dar),e(ho,FM),e(FM,car),e(FM,sbe),e(sbe,mar),e(FM,far),e(FM,lbe),e(lbe,gar),e(ho,har),M(TM,ho,null),b(m,dje,_),b(m,wd,_),e(wd,MM),e(MM,ibe),M(D8,ibe,null),e(wd,uar),e(wd,dbe),e(dbe,par),b(m,cje,_),b(m,Wo,_),M(G8,Wo,null),e(Wo,_ar),e(Wo,Ad),e(Ad,bar),e(Ad,Nz),e(Nz,Far),e(Ad,Tar),e(Ad,qz),e(qz,Mar),e(Ad,Ear),e(Wo,Car),e(Wo,O8),e(O8,war),e(O8,cbe),e(cbe,Aar),e(O8,yar),e(Wo,Lar),e(Wo,Mt),M(V8,Mt,null),e(Mt,xar),e(Mt,mbe),e(mbe,$ar),e(Mt,kar),e(Mt,yd),e(yd,Sar),e(yd,fbe),e(fbe,Rar),e(yd,Par),e(yd,jz),e(jz,Bar),e(yd,Iar),e(Mt,Nar),M(EM,Mt,null),e(Wo,qar),e(Wo,uo),M(X8,uo,null),e(uo,jar),e(uo,gbe),e(gbe,Dar),e(uo,Gar),e(uo,Wa),e(Wa,Oar),e(Wa,hbe),e(hbe,Var),e(Wa,Xar),e(Wa,ube),e(ube,zar),e(Wa,War),e(Wa,pbe),e(pbe,Qar),e(Wa,Har),e(uo,Uar),e(uo,Ld),e(Ld,CM),e(CM,_be),e(_be,Jar),e(CM,Yar),e(CM,Dz),e(Dz,Kar),e(CM,Zar),e(Ld,enr),e(Ld,wM),e(wM,bbe),e(bbe,onr),e(wM,rnr),e(wM,Gz),e(Gz,tnr),e(wM,anr),e(Ld,nnr),e(Ld,AM),e(AM,vbe),e(vbe,snr),e(AM,lnr),e(AM,Oz),e(Oz,inr),e(AM,dnr),e(uo,cnr),e(uo,yM),e(yM,mnr),e(yM,Fbe),e(Fbe,fnr),e(yM,gnr),e(yM,Tbe),e(Tbe,hnr),e(uo,unr),M(LM,uo,null),b(m,mje,_),b(m,xd,_),e(xd,xM),e(xM,Mbe),M(z8,Mbe,null),e(xd,pnr),e(xd,Ebe),e(Ebe,_nr),b(m,fje,_),b(m,Qo,_),M(W8,Qo,null),e(Qo,bnr),e(Qo,$d),e($d,vnr),e($d,Vz),e(Vz,Fnr),e($d,Tnr),e($d,Xz),e(Xz,Mnr),e($d,Enr),e(Qo,Cnr),e(Qo,Q8),e(Q8,wnr),e(Q8,Cbe),e(Cbe,Anr),e(Q8,ynr),e(Qo,Lnr),e(Qo,Et),M(H8,Et,null),e(Et,xnr),e(Et,wbe),e(wbe,$nr),e(Et,knr),e(Et,kd),e(kd,Snr),e(kd,Abe),e(Abe,Rnr),e(kd,Pnr),e(kd,zz),e(zz,Bnr),e(kd,Inr),e(Et,Nnr),M($M,Et,null),e(Qo,qnr),e(Qo,po),M(U8,po,null),e(po,jnr),e(po,ybe),e(ybe,Dnr),e(po,Gnr),e(po,Qa),e(Qa,Onr),e(Qa,Lbe),e(Lbe,Vnr),e(Qa,Xnr),e(Qa,xbe),e(xbe,znr),e(Qa,Wnr),e(Qa,$be),e($be,Qnr),e(Qa,Hnr),e(po,Unr),e(po,J8),e(J8,kM),e(kM,kbe),e(kbe,Jnr),e(kM,Ynr),e(kM,Wz),e(Wz,Knr),e(kM,Znr),e(J8,esr),e(J8,SM),e(SM,Sbe),e(Sbe,osr),e(SM,rsr),e(SM,Qz),e(Qz,tsr),e(SM,asr),e(po,nsr),e(po,RM),e(RM,ssr),e(RM,Rbe),e(Rbe,lsr),e(RM,isr),e(RM,Pbe),e(Pbe,dsr),e(po,csr),M(PM,po,null),b(m,gje,_),b(m,Sd,_),e(Sd,BM),e(BM,Bbe),M(Y8,Bbe,null),e(Sd,msr),e(Sd,Ibe),e(Ibe,fsr),b(m,hje,_),b(m,Ho,_),M(K8,Ho,null),e(Ho,gsr),e(Ho,Rd),e(Rd,hsr),e(Rd,Hz),e(Hz,usr),e(Rd,psr),e(Rd,Uz),e(Uz,_sr),e(Rd,bsr),e(Ho,vsr),e(Ho,Z8),e(Z8,Fsr),e(Z8,Nbe),e(Nbe,Tsr),e(Z8,Msr),e(Ho,Esr),e(Ho,Ct),M(e7,Ct,null),e(Ct,Csr),e(Ct,qbe),e(qbe,wsr),e(Ct,Asr),e(Ct,Pd),e(Pd,ysr),e(Pd,jbe),e(jbe,Lsr),e(Pd,xsr),e(Pd,Jz),e(Jz,$sr),e(Pd,ksr),e(Ct,Ssr),M(IM,Ct,null),e(Ho,Rsr),e(Ho,_o),M(o7,_o,null),e(_o,Psr),e(_o,Dbe),e(Dbe,Bsr),e(_o,Isr),e(_o,Ha),e(Ha,Nsr),e(Ha,Gbe),e(Gbe,qsr),e(Ha,jsr),e(Ha,Obe),e(Obe,Dsr),e(Ha,Gsr),e(Ha,Vbe),e(Vbe,Osr),e(Ha,Vsr),e(_o,Xsr),e(_o,Xbe),e(Xbe,NM),e(NM,zbe),e(zbe,zsr),e(NM,Wsr),e(NM,Yz),e(Yz,Qsr),e(NM,Hsr),e(_o,Usr),e(_o,qM),e(qM,Jsr),e(qM,Wbe),e(Wbe,Ysr),e(qM,Ksr),e(qM,Qbe),e(Qbe,Zsr),e(_o,elr),M(jM,_o,null),b(m,uje,_),b(m,Bd,_),e(Bd,DM),e(DM,Hbe),M(r7,Hbe,null),e(Bd,olr),e(Bd,Ube),e(Ube,rlr),b(m,pje,_),b(m,Uo,_),M(t7,Uo,null),e(Uo,tlr),e(Uo,Id),e(Id,alr),e(Id,Kz),e(Kz,nlr),e(Id,slr),e(Id,Zz),e(Zz,llr),e(Id,ilr),e(Uo,dlr),e(Uo,a7),e(a7,clr),e(a7,Jbe),e(Jbe,mlr),e(a7,flr),e(Uo,glr),e(Uo,wt),M(n7,wt,null),e(wt,hlr),e(wt,Ybe),e(Ybe,ulr),e(wt,plr),e(wt,Nd),e(Nd,_lr),e(Nd,Kbe),e(Kbe,blr),e(Nd,vlr),e(Nd,eW),e(eW,Flr),e(Nd,Tlr),e(wt,Mlr),M(GM,wt,null),e(Uo,Elr),e(Uo,bo),M(s7,bo,null),e(bo,Clr),e(bo,Zbe),e(Zbe,wlr),e(bo,Alr),e(bo,Ua),e(Ua,ylr),e(Ua,e2e),e(e2e,Llr),e(Ua,xlr),e(Ua,o2e),e(o2e,$lr),e(Ua,klr),e(Ua,r2e),e(r2e,Slr),e(Ua,Rlr),e(bo,Plr),e(bo,Ja),e(Ja,OM),e(OM,t2e),e(t2e,Blr),e(OM,Ilr),e(OM,oW),e(oW,Nlr),e(OM,qlr),e(Ja,jlr),e(Ja,VM),e(VM,a2e),e(a2e,Dlr),e(VM,Glr),e(VM,rW),e(rW,Olr),e(VM,Vlr),e(Ja,Xlr),e(Ja,XM),e(XM,n2e),e(n2e,zlr),e(XM,Wlr),e(XM,tW),e(tW,Qlr),e(XM,Hlr),e(Ja,Ulr),e(Ja,zM),e(zM,s2e),e(s2e,Jlr),e(zM,Ylr),e(zM,aW),e(aW,Klr),e(zM,Zlr),e(bo,eir),e(bo,WM),e(WM,oir),e(WM,l2e),e(l2e,rir),e(WM,tir),e(WM,i2e),e(i2e,air),e(bo,nir),M(QM,bo,null),b(m,_je,_),b(m,qd,_),e(qd,HM),e(HM,d2e),M(l7,d2e,null),e(qd,sir),e(qd,c2e),e(c2e,lir),b(m,bje,_),b(m,Jo,_),M(i7,Jo,null),e(Jo,iir),e(Jo,jd),e(jd,dir),e(jd,nW),e(nW,cir),e(jd,mir),e(jd,sW),e(sW,fir),e(jd,gir),e(Jo,hir),e(Jo,d7),e(d7,uir),e(d7,m2e),e(m2e,pir),e(d7,_ir),e(Jo,bir),e(Jo,At),M(c7,At,null),e(At,vir),e(At,f2e),e(f2e,Fir),e(At,Tir),e(At,Dd),e(Dd,Mir),e(Dd,g2e),e(g2e,Eir),e(Dd,Cir),e(Dd,lW),e(lW,wir),e(Dd,Air),e(At,yir),M(UM,At,null),e(Jo,Lir),e(Jo,vo),M(m7,vo,null),e(vo,xir),e(vo,h2e),e(h2e,$ir),e(vo,kir),e(vo,Ya),e(Ya,Sir),e(Ya,u2e),e(u2e,Rir),e(Ya,Pir),e(Ya,p2e),e(p2e,Bir),e(Ya,Iir),e(Ya,_2e),e(_2e,Nir),e(Ya,qir),e(vo,jir),e(vo,b2e),e(b2e,JM),e(JM,v2e),e(v2e,Dir),e(JM,Gir),e(JM,iW),e(iW,Oir),e(JM,Vir),e(vo,Xir),e(vo,YM),e(YM,zir),e(YM,F2e),e(F2e,Wir),e(YM,Qir),e(YM,T2e),e(T2e,Hir),e(vo,Uir),M(KM,vo,null),b(m,vje,_),b(m,Gd,_),e(Gd,ZM),e(ZM,M2e),M(f7,M2e,null),e(Gd,Jir),e(Gd,E2e),e(E2e,Yir),b(m,Fje,_),b(m,Yo,_),M(g7,Yo,null),e(Yo,Kir),e(Yo,Od),e(Od,Zir),e(Od,dW),e(dW,edr),e(Od,odr),e(Od,cW),e(cW,rdr),e(Od,tdr),e(Yo,adr),e(Yo,h7),e(h7,ndr),e(h7,C2e),e(C2e,sdr),e(h7,ldr),e(Yo,idr),e(Yo,yt),M(u7,yt,null),e(yt,ddr),e(yt,w2e),e(w2e,cdr),e(yt,mdr),e(yt,Vd),e(Vd,fdr),e(Vd,A2e),e(A2e,gdr),e(Vd,hdr),e(Vd,mW),e(mW,udr),e(Vd,pdr),e(yt,_dr),M(e4,yt,null),e(Yo,bdr),e(Yo,wr),M(p7,wr,null),e(wr,vdr),e(wr,y2e),e(y2e,Fdr),e(wr,Tdr),e(wr,Ka),e(Ka,Mdr),e(Ka,L2e),e(L2e,Edr),e(Ka,Cdr),e(Ka,x2e),e(x2e,wdr),e(Ka,Adr),e(Ka,$2e),e($2e,ydr),e(Ka,Ldr),e(wr,xdr),e(wr,q),e(q,o4),e(o4,k2e),e(k2e,$dr),e(o4,kdr),e(o4,fW),e(fW,Sdr),e(o4,Rdr),e(q,Pdr),e(q,r4),e(r4,S2e),e(S2e,Bdr),e(r4,Idr),e(r4,gW),e(gW,Ndr),e(r4,qdr),e(q,jdr),e(q,t4),e(t4,R2e),e(R2e,Ddr),e(t4,Gdr),e(t4,hW),e(hW,Odr),e(t4,Vdr),e(q,Xdr),e(q,a4),e(a4,P2e),e(P2e,zdr),e(a4,Wdr),e(a4,uW),e(uW,Qdr),e(a4,Hdr),e(q,Udr),e(q,n4),e(n4,B2e),e(B2e,Jdr),e(n4,Ydr),e(n4,pW),e(pW,Kdr),e(n4,Zdr),e(q,ecr),e(q,s4),e(s4,I2e),e(I2e,ocr),e(s4,rcr),e(s4,_W),e(_W,tcr),e(s4,acr),e(q,ncr),e(q,l4),e(l4,N2e),e(N2e,scr),e(l4,lcr),e(l4,bW),e(bW,icr),e(l4,dcr),e(q,ccr),e(q,i4),e(i4,q2e),e(q2e,mcr),e(i4,fcr),e(i4,vW),e(vW,gcr),e(i4,hcr),e(q,ucr),e(q,d4),e(d4,j2e),e(j2e,pcr),e(d4,_cr),e(d4,FW),e(FW,bcr),e(d4,vcr),e(q,Fcr),e(q,c4),e(c4,D2e),e(D2e,Tcr),e(c4,Mcr),e(c4,TW),e(TW,Ecr),e(c4,Ccr),e(q,wcr),e(q,m4),e(m4,G2e),e(G2e,Acr),e(m4,ycr),e(m4,MW),e(MW,Lcr),e(m4,xcr),e(q,$cr),e(q,f4),e(f4,O2e),e(O2e,kcr),e(f4,Scr),e(f4,EW),e(EW,Rcr),e(f4,Pcr),e(q,Bcr),e(q,g4),e(g4,V2e),e(V2e,Icr),e(g4,Ncr),e(g4,CW),e(CW,qcr),e(g4,jcr),e(q,Dcr),e(q,h4),e(h4,X2e),e(X2e,Gcr),e(h4,Ocr),e(h4,wW),e(wW,Vcr),e(h4,Xcr),e(q,zcr),e(q,u4),e(u4,z2e),e(z2e,Wcr),e(u4,Qcr),e(u4,AW),e(AW,Hcr),e(u4,Ucr),e(q,Jcr),e(q,p4),e(p4,W2e),e(W2e,Ycr),e(p4,Kcr),e(p4,yW),e(yW,Zcr),e(p4,emr),e(q,omr),e(q,_4),e(_4,Q2e),e(Q2e,rmr),e(_4,tmr),e(_4,LW),e(LW,amr),e(_4,nmr),e(q,smr),e(q,Is),e(Is,H2e),e(H2e,lmr),e(Is,imr),e(Is,xW),e(xW,dmr),e(Is,cmr),e(Is,$W),e($W,mmr),e(Is,fmr),e(q,gmr),e(q,b4),e(b4,U2e),e(U2e,hmr),e(b4,umr),e(b4,kW),e(kW,pmr),e(b4,_mr),e(q,bmr),e(q,v4),e(v4,J2e),e(J2e,vmr),e(v4,Fmr),e(v4,SW),e(SW,Tmr),e(v4,Mmr),e(q,Emr),e(q,F4),e(F4,Y2e),e(Y2e,Cmr),e(F4,wmr),e(F4,RW),e(RW,Amr),e(F4,ymr),e(q,Lmr),e(q,T4),e(T4,K2e),e(K2e,xmr),e(T4,$mr),e(T4,PW),e(PW,kmr),e(T4,Smr),e(q,Rmr),e(q,M4),e(M4,Z2e),e(Z2e,Pmr),e(M4,Bmr),e(M4,BW),e(BW,Imr),e(M4,Nmr),e(q,qmr),e(q,E4),e(E4,eve),e(eve,jmr),e(E4,Dmr),e(E4,IW),e(IW,Gmr),e(E4,Omr),e(q,Vmr),e(q,C4),e(C4,ove),e(ove,Xmr),e(C4,zmr),e(C4,NW),e(NW,Wmr),e(C4,Qmr),e(q,Hmr),e(q,w4),e(w4,rve),e(rve,Umr),e(w4,Jmr),e(w4,qW),e(qW,Ymr),e(w4,Kmr),e(q,Zmr),e(q,A4),e(A4,tve),e(tve,efr),e(A4,ofr),e(A4,jW),e(jW,rfr),e(A4,tfr),e(q,afr),e(q,y4),e(y4,ave),e(ave,nfr),e(y4,sfr),e(y4,DW),e(DW,lfr),e(y4,ifr),e(q,dfr),e(q,L4),e(L4,nve),e(nve,cfr),e(L4,mfr),e(L4,GW),e(GW,ffr),e(L4,gfr),e(q,hfr),e(q,x4),e(x4,sve),e(sve,ufr),e(x4,pfr),e(x4,OW),e(OW,_fr),e(x4,bfr),e(q,vfr),e(q,$4),e($4,lve),e(lve,Ffr),e($4,Tfr),e($4,VW),e(VW,Mfr),e($4,Efr),e(q,Cfr),e(q,k4),e(k4,ive),e(ive,wfr),e(k4,Afr),e(k4,XW),e(XW,yfr),e(k4,Lfr),e(q,xfr),e(q,S4),e(S4,dve),e(dve,$fr),e(S4,kfr),e(S4,zW),e(zW,Sfr),e(S4,Rfr),e(q,Pfr),e(q,R4),e(R4,cve),e(cve,Bfr),e(R4,Ifr),e(R4,WW),e(WW,Nfr),e(R4,qfr),e(q,jfr),e(q,P4),e(P4,mve),e(mve,Dfr),e(P4,Gfr),e(P4,QW),e(QW,Ofr),e(P4,Vfr),e(q,Xfr),e(q,B4),e(B4,fve),e(fve,zfr),e(B4,Wfr),e(B4,HW),e(HW,Qfr),e(B4,Hfr),e(q,Ufr),e(q,I4),e(I4,gve),e(gve,Jfr),e(I4,Yfr),e(I4,UW),e(UW,Kfr),e(I4,Zfr),e(q,egr),e(q,N4),e(N4,hve),e(hve,ogr),e(N4,rgr),e(N4,JW),e(JW,tgr),e(N4,agr),e(q,ngr),e(q,q4),e(q4,uve),e(uve,sgr),e(q4,lgr),e(q4,YW),e(YW,igr),e(q4,dgr),e(q,cgr),e(q,j4),e(j4,pve),e(pve,mgr),e(j4,fgr),e(j4,KW),e(KW,ggr),e(j4,hgr),e(q,ugr),e(q,D4),e(D4,_ve),e(_ve,pgr),e(D4,_gr),e(D4,ZW),e(ZW,bgr),e(D4,vgr),e(q,Fgr),e(q,G4),e(G4,bve),e(bve,Tgr),e(G4,Mgr),e(G4,eQ),e(eQ,Egr),e(G4,Cgr),e(q,wgr),e(q,O4),e(O4,vve),e(vve,Agr),e(O4,ygr),e(O4,oQ),e(oQ,Lgr),e(O4,xgr),e(q,$gr),e(q,V4),e(V4,Fve),e(Fve,kgr),e(V4,Sgr),e(V4,rQ),e(rQ,Rgr),e(V4,Pgr),e(q,Bgr),e(q,X4),e(X4,Tve),e(Tve,Igr),e(X4,Ngr),e(X4,tQ),e(tQ,qgr),e(X4,jgr),e(q,Dgr),e(q,z4),e(z4,Mve),e(Mve,Ggr),e(z4,Ogr),e(z4,aQ),e(aQ,Vgr),e(z4,Xgr),e(q,zgr),e(q,W4),e(W4,Eve),e(Eve,Wgr),e(W4,Qgr),e(W4,nQ),e(nQ,Hgr),e(W4,Ugr),e(wr,Jgr),M(Q4,wr,null),b(m,Tje,_),b(m,Xd,_),e(Xd,H4),e(H4,Cve),M(_7,Cve,null),e(Xd,Ygr),e(Xd,wve),e(wve,Kgr),b(m,Mje,_),b(m,Ko,_),M(b7,Ko,null),e(Ko,Zgr),e(Ko,zd),e(zd,ehr),e(zd,sQ),e(sQ,ohr),e(zd,rhr),e(zd,lQ),e(lQ,thr),e(zd,ahr),e(Ko,nhr),e(Ko,v7),e(v7,shr),e(v7,Ave),e(Ave,lhr),e(v7,ihr),e(Ko,dhr),e(Ko,Lt),M(F7,Lt,null),e(Lt,chr),e(Lt,yve),e(yve,mhr),e(Lt,fhr),e(Lt,Wd),e(Wd,ghr),e(Wd,Lve),e(Lve,hhr),e(Wd,uhr),e(Wd,iQ),e(iQ,phr),e(Wd,_hr),e(Lt,bhr),M(U4,Lt,null),e(Ko,vhr),e(Ko,Ar),M(T7,Ar,null),e(Ar,Fhr),e(Ar,xve),e(xve,Thr),e(Ar,Mhr),e(Ar,Za),e(Za,Ehr),e(Za,$ve),e($ve,Chr),e(Za,whr),e(Za,kve),e(kve,Ahr),e(Za,yhr),e(Za,Sve),e(Sve,Lhr),e(Za,xhr),e(Ar,$hr),e(Ar,se),e(se,J4),e(J4,Rve),e(Rve,khr),e(J4,Shr),e(J4,dQ),e(dQ,Rhr),e(J4,Phr),e(se,Bhr),e(se,Y4),e(Y4,Pve),e(Pve,Ihr),e(Y4,Nhr),e(Y4,cQ),e(cQ,qhr),e(Y4,jhr),e(se,Dhr),e(se,K4),e(K4,Bve),e(Bve,Ghr),e(K4,Ohr),e(K4,mQ),e(mQ,Vhr),e(K4,Xhr),e(se,zhr),e(se,Z4),e(Z4,Ive),e(Ive,Whr),e(Z4,Qhr),e(Z4,fQ),e(fQ,Hhr),e(Z4,Uhr),e(se,Jhr),e(se,eE),e(eE,Nve),e(Nve,Yhr),e(eE,Khr),e(eE,gQ),e(gQ,Zhr),e(eE,eur),e(se,our),e(se,oE),e(oE,qve),e(qve,rur),e(oE,tur),e(oE,hQ),e(hQ,aur),e(oE,nur),e(se,sur),e(se,rE),e(rE,jve),e(jve,lur),e(rE,iur),e(rE,uQ),e(uQ,dur),e(rE,cur),e(se,mur),e(se,tE),e(tE,Dve),e(Dve,fur),e(tE,gur),e(tE,pQ),e(pQ,hur),e(tE,uur),e(se,pur),e(se,aE),e(aE,Gve),e(Gve,_ur),e(aE,bur),e(aE,_Q),e(_Q,vur),e(aE,Fur),e(se,Tur),e(se,nE),e(nE,Ove),e(Ove,Mur),e(nE,Eur),e(nE,bQ),e(bQ,Cur),e(nE,wur),e(se,Aur),e(se,sE),e(sE,Vve),e(Vve,yur),e(sE,Lur),e(sE,vQ),e(vQ,xur),e(sE,$ur),e(se,kur),e(se,lE),e(lE,Xve),e(Xve,Sur),e(lE,Rur),e(lE,FQ),e(FQ,Pur),e(lE,Bur),e(se,Iur),e(se,iE),e(iE,zve),e(zve,Nur),e(iE,qur),e(iE,TQ),e(TQ,jur),e(iE,Dur),e(se,Gur),e(se,dE),e(dE,Wve),e(Wve,Our),e(dE,Vur),e(dE,MQ),e(MQ,Xur),e(dE,zur),e(se,Wur),e(se,cE),e(cE,Qve),e(Qve,Qur),e(cE,Hur),e(cE,EQ),e(EQ,Uur),e(cE,Jur),e(se,Yur),e(se,mE),e(mE,Hve),e(Hve,Kur),e(mE,Zur),e(mE,CQ),e(CQ,epr),e(mE,opr),e(se,rpr),e(se,fE),e(fE,Uve),e(Uve,tpr),e(fE,apr),e(fE,wQ),e(wQ,npr),e(fE,spr),e(se,lpr),e(se,gE),e(gE,Jve),e(Jve,ipr),e(gE,dpr),e(gE,AQ),e(AQ,cpr),e(gE,mpr),e(se,fpr),e(se,hE),e(hE,Yve),e(Yve,gpr),e(hE,hpr),e(hE,yQ),e(yQ,upr),e(hE,ppr),e(se,_pr),e(se,uE),e(uE,Kve),e(Kve,bpr),e(uE,vpr),e(uE,LQ),e(LQ,Fpr),e(uE,Tpr),e(se,Mpr),e(se,pE),e(pE,Zve),e(Zve,Epr),e(pE,Cpr),e(pE,xQ),e(xQ,wpr),e(pE,Apr),e(se,ypr),e(se,_E),e(_E,eFe),e(eFe,Lpr),e(_E,xpr),e(_E,$Q),e($Q,$pr),e(_E,kpr),e(se,Spr),e(se,bE),e(bE,oFe),e(oFe,Rpr),e(bE,Ppr),e(bE,kQ),e(kQ,Bpr),e(bE,Ipr),e(Ar,Npr),M(vE,Ar,null),b(m,Eje,_),b(m,Qd,_),e(Qd,FE),e(FE,rFe),M(M7,rFe,null),e(Qd,qpr),e(Qd,tFe),e(tFe,jpr),b(m,Cje,_),b(m,Zo,_),M(E7,Zo,null),e(Zo,Dpr),e(Zo,Hd),e(Hd,Gpr),e(Hd,SQ),e(SQ,Opr),e(Hd,Vpr),e(Hd,RQ),e(RQ,Xpr),e(Hd,zpr),e(Zo,Wpr),e(Zo,C7),e(C7,Qpr),e(C7,aFe),e(aFe,Hpr),e(C7,Upr),e(Zo,Jpr),e(Zo,xt),M(w7,xt,null),e(xt,Ypr),e(xt,nFe),e(nFe,Kpr),e(xt,Zpr),e(xt,Ud),e(Ud,e_r),e(Ud,sFe),e(sFe,o_r),e(Ud,r_r),e(Ud,PQ),e(PQ,t_r),e(Ud,a_r),e(xt,n_r),M(TE,xt,null),e(Zo,s_r),e(Zo,yr),M(A7,yr,null),e(yr,l_r),e(yr,lFe),e(lFe,i_r),e(yr,d_r),e(yr,en),e(en,c_r),e(en,iFe),e(iFe,m_r),e(en,f_r),e(en,dFe),e(dFe,g_r),e(en,h_r),e(en,cFe),e(cFe,u_r),e(en,p_r),e(yr,__r),e(yr,Te),e(Te,ME),e(ME,mFe),e(mFe,b_r),e(ME,v_r),e(ME,BQ),e(BQ,F_r),e(ME,T_r),e(Te,M_r),e(Te,EE),e(EE,fFe),e(fFe,E_r),e(EE,C_r),e(EE,IQ),e(IQ,w_r),e(EE,A_r),e(Te,y_r),e(Te,CE),e(CE,gFe),e(gFe,L_r),e(CE,x_r),e(CE,NQ),e(NQ,$_r),e(CE,k_r),e(Te,S_r),e(Te,wE),e(wE,hFe),e(hFe,R_r),e(wE,P_r),e(wE,qQ),e(qQ,B_r),e(wE,I_r),e(Te,N_r),e(Te,AE),e(AE,uFe),e(uFe,q_r),e(AE,j_r),e(AE,jQ),e(jQ,D_r),e(AE,G_r),e(Te,O_r),e(Te,yE),e(yE,pFe),e(pFe,V_r),e(yE,X_r),e(yE,DQ),e(DQ,z_r),e(yE,W_r),e(Te,Q_r),e(Te,LE),e(LE,_Fe),e(_Fe,H_r),e(LE,U_r),e(LE,GQ),e(GQ,J_r),e(LE,Y_r),e(Te,K_r),e(Te,xE),e(xE,bFe),e(bFe,Z_r),e(xE,ebr),e(xE,OQ),e(OQ,obr),e(xE,rbr),e(Te,tbr),e(Te,$E),e($E,vFe),e(vFe,abr),e($E,nbr),e($E,VQ),e(VQ,sbr),e($E,lbr),e(Te,ibr),e(Te,kE),e(kE,FFe),e(FFe,dbr),e(kE,cbr),e(kE,XQ),e(XQ,mbr),e(kE,fbr),e(Te,gbr),e(Te,SE),e(SE,TFe),e(TFe,hbr),e(SE,ubr),e(SE,zQ),e(zQ,pbr),e(SE,_br),e(Te,bbr),e(Te,RE),e(RE,MFe),e(MFe,vbr),e(RE,Fbr),e(RE,WQ),e(WQ,Tbr),e(RE,Mbr),e(Te,Ebr),e(Te,PE),e(PE,EFe),e(EFe,Cbr),e(PE,wbr),e(PE,QQ),e(QQ,Abr),e(PE,ybr),e(yr,Lbr),M(BE,yr,null),b(m,wje,_),b(m,Jd,_),e(Jd,IE),e(IE,CFe),M(y7,CFe,null),e(Jd,xbr),e(Jd,wFe),e(wFe,$br),b(m,Aje,_),b(m,er,_),M(L7,er,null),e(er,kbr),e(er,Yd),e(Yd,Sbr),e(Yd,HQ),e(HQ,Rbr),e(Yd,Pbr),e(Yd,UQ),e(UQ,Bbr),e(Yd,Ibr),e(er,Nbr),e(er,x7),e(x7,qbr),e(x7,AFe),e(AFe,jbr),e(x7,Dbr),e(er,Gbr),e(er,$t),M($7,$t,null),e($t,Obr),e($t,yFe),e(yFe,Vbr),e($t,Xbr),e($t,Kd),e(Kd,zbr),e(Kd,LFe),e(LFe,Wbr),e(Kd,Qbr),e(Kd,JQ),e(JQ,Hbr),e(Kd,Ubr),e($t,Jbr),M(NE,$t,null),e(er,Ybr),e(er,Lr),M(k7,Lr,null),e(Lr,Kbr),e(Lr,xFe),e(xFe,Zbr),e(Lr,e2r),e(Lr,on),e(on,o2r),e(on,$Fe),e($Fe,r2r),e(on,t2r),e(on,kFe),e(kFe,a2r),e(on,n2r),e(on,SFe),e(SFe,s2r),e(on,l2r),e(Lr,i2r),e(Lr,rn),e(rn,qE),e(qE,RFe),e(RFe,d2r),e(qE,c2r),e(qE,YQ),e(YQ,m2r),e(qE,f2r),e(rn,g2r),e(rn,jE),e(jE,PFe),e(PFe,h2r),e(jE,u2r),e(jE,KQ),e(KQ,p2r),e(jE,_2r),e(rn,b2r),e(rn,DE),e(DE,BFe),e(BFe,v2r),e(DE,F2r),e(DE,ZQ),e(ZQ,T2r),e(DE,M2r),e(rn,E2r),e(rn,GE),e(GE,IFe),e(IFe,C2r),e(GE,w2r),e(GE,eH),e(eH,A2r),e(GE,y2r),e(Lr,L2r),M(OE,Lr,null),b(m,yje,_),b(m,Zd,_),e(Zd,VE),e(VE,NFe),M(S7,NFe,null),e(Zd,x2r),e(Zd,qFe),e(qFe,$2r),b(m,Lje,_),b(m,or,_),M(R7,or,null),e(or,k2r),e(or,ec),e(ec,S2r),e(ec,oH),e(oH,R2r),e(ec,P2r),e(ec,rH),e(rH,B2r),e(ec,I2r),e(or,N2r),e(or,P7),e(P7,q2r),e(P7,jFe),e(jFe,j2r),e(P7,D2r),e(or,G2r),e(or,kt),M(B7,kt,null),e(kt,O2r),e(kt,DFe),e(DFe,V2r),e(kt,X2r),e(kt,oc),e(oc,z2r),e(oc,GFe),e(GFe,W2r),e(oc,Q2r),e(oc,tH),e(tH,H2r),e(oc,U2r),e(kt,J2r),M(XE,kt,null),e(or,Y2r),e(or,xr),M(I7,xr,null),e(xr,K2r),e(xr,OFe),e(OFe,Z2r),e(xr,evr),e(xr,tn),e(tn,ovr),e(tn,VFe),e(VFe,rvr),e(tn,tvr),e(tn,XFe),e(XFe,avr),e(tn,nvr),e(tn,zFe),e(zFe,svr),e(tn,lvr),e(xr,ivr),e(xr,ie),e(ie,zE),e(zE,WFe),e(WFe,dvr),e(zE,cvr),e(zE,aH),e(aH,mvr),e(zE,fvr),e(ie,gvr),e(ie,WE),e(WE,QFe),e(QFe,hvr),e(WE,uvr),e(WE,nH),e(nH,pvr),e(WE,_vr),e(ie,bvr),e(ie,QE),e(QE,HFe),e(HFe,vvr),e(QE,Fvr),e(QE,sH),e(sH,Tvr),e(QE,Mvr),e(ie,Evr),e(ie,HE),e(HE,UFe),e(UFe,Cvr),e(HE,wvr),e(HE,lH),e(lH,Avr),e(HE,yvr),e(ie,Lvr),e(ie,UE),e(UE,JFe),e(JFe,xvr),e(UE,$vr),e(UE,iH),e(iH,kvr),e(UE,Svr),e(ie,Rvr),e(ie,JE),e(JE,YFe),e(YFe,Pvr),e(JE,Bvr),e(JE,dH),e(dH,Ivr),e(JE,Nvr),e(ie,qvr),e(ie,YE),e(YE,KFe),e(KFe,jvr),e(YE,Dvr),e(YE,cH),e(cH,Gvr),e(YE,Ovr),e(ie,Vvr),e(ie,KE),e(KE,ZFe),e(ZFe,Xvr),e(KE,zvr),e(KE,mH),e(mH,Wvr),e(KE,Qvr),e(ie,Hvr),e(ie,ZE),e(ZE,e1e),e(e1e,Uvr),e(ZE,Jvr),e(ZE,fH),e(fH,Yvr),e(ZE,Kvr),e(ie,Zvr),e(ie,eC),e(eC,o1e),e(o1e,eFr),e(eC,oFr),e(eC,gH),e(gH,rFr),e(eC,tFr),e(ie,aFr),e(ie,oC),e(oC,r1e),e(r1e,nFr),e(oC,sFr),e(oC,hH),e(hH,lFr),e(oC,iFr),e(ie,dFr),e(ie,rC),e(rC,t1e),e(t1e,cFr),e(rC,mFr),e(rC,uH),e(uH,fFr),e(rC,gFr),e(ie,hFr),e(ie,tC),e(tC,a1e),e(a1e,uFr),e(tC,pFr),e(tC,pH),e(pH,_Fr),e(tC,bFr),e(ie,vFr),e(ie,aC),e(aC,n1e),e(n1e,FFr),e(aC,TFr),e(aC,_H),e(_H,MFr),e(aC,EFr),e(ie,CFr),e(ie,nC),e(nC,s1e),e(s1e,wFr),e(nC,AFr),e(nC,bH),e(bH,yFr),e(nC,LFr),e(ie,xFr),e(ie,sC),e(sC,l1e),e(l1e,$Fr),e(sC,kFr),e(sC,vH),e(vH,SFr),e(sC,RFr),e(ie,PFr),e(ie,lC),e(lC,i1e),e(i1e,BFr),e(lC,IFr),e(lC,FH),e(FH,NFr),e(lC,qFr),e(ie,jFr),e(ie,iC),e(iC,d1e),e(d1e,DFr),e(iC,GFr),e(iC,TH),e(TH,OFr),e(iC,VFr),e(ie,XFr),e(ie,dC),e(dC,c1e),e(c1e,zFr),e(dC,WFr),e(dC,MH),e(MH,QFr),e(dC,HFr),e(ie,UFr),e(ie,cC),e(cC,m1e),e(m1e,JFr),e(cC,YFr),e(cC,EH),e(EH,KFr),e(cC,ZFr),e(xr,e1r),M(mC,xr,null),b(m,xje,_),b(m,rc,_),e(rc,fC),e(fC,f1e),M(N7,f1e,null),e(rc,o1r),e(rc,g1e),e(g1e,r1r),b(m,$je,_),b(m,rr,_),M(q7,rr,null),e(rr,t1r),e(rr,tc),e(tc,a1r),e(tc,CH),e(CH,n1r),e(tc,s1r),e(tc,wH),e(wH,l1r),e(tc,i1r),e(rr,d1r),e(rr,j7),e(j7,c1r),e(j7,h1e),e(h1e,m1r),e(j7,f1r),e(rr,g1r),e(rr,St),M(D7,St,null),e(St,h1r),e(St,u1e),e(u1e,u1r),e(St,p1r),e(St,ac),e(ac,_1r),e(ac,p1e),e(p1e,b1r),e(ac,v1r),e(ac,AH),e(AH,F1r),e(ac,T1r),e(St,M1r),M(gC,St,null),e(rr,E1r),e(rr,$r),M(G7,$r,null),e($r,C1r),e($r,_1e),e(_1e,w1r),e($r,A1r),e($r,an),e(an,y1r),e(an,b1e),e(b1e,L1r),e(an,x1r),e(an,v1e),e(v1e,$1r),e(an,k1r),e(an,F1e),e(F1e,S1r),e(an,R1r),e($r,P1r),e($r,ye),e(ye,hC),e(hC,T1e),e(T1e,B1r),e(hC,I1r),e(hC,yH),e(yH,N1r),e(hC,q1r),e(ye,j1r),e(ye,uC),e(uC,M1e),e(M1e,D1r),e(uC,G1r),e(uC,LH),e(LH,O1r),e(uC,V1r),e(ye,X1r),e(ye,pC),e(pC,E1e),e(E1e,z1r),e(pC,W1r),e(pC,xH),e(xH,Q1r),e(pC,H1r),e(ye,U1r),e(ye,_C),e(_C,C1e),e(C1e,J1r),e(_C,Y1r),e(_C,$H),e($H,K1r),e(_C,Z1r),e(ye,eTr),e(ye,bC),e(bC,w1e),e(w1e,oTr),e(bC,rTr),e(bC,kH),e(kH,tTr),e(bC,aTr),e(ye,nTr),e(ye,vC),e(vC,A1e),e(A1e,sTr),e(vC,lTr),e(vC,SH),e(SH,iTr),e(vC,dTr),e(ye,cTr),e(ye,FC),e(FC,y1e),e(y1e,mTr),e(FC,fTr),e(FC,RH),e(RH,gTr),e(FC,hTr),e(ye,uTr),e(ye,TC),e(TC,L1e),e(L1e,pTr),e(TC,_Tr),e(TC,PH),e(PH,bTr),e(TC,vTr),e(ye,FTr),e(ye,MC),e(MC,x1e),e(x1e,TTr),e(MC,MTr),e(MC,BH),e(BH,ETr),e(MC,CTr),e(ye,wTr),e(ye,EC),e(EC,$1e),e($1e,ATr),e(EC,yTr),e(EC,IH),e(IH,LTr),e(EC,xTr),e($r,$Tr),M(CC,$r,null),b(m,kje,_),b(m,nc,_),e(nc,wC),e(wC,k1e),M(O7,k1e,null),e(nc,kTr),e(nc,S1e),e(S1e,STr),b(m,Sje,_),b(m,tr,_),M(V7,tr,null),e(tr,RTr),e(tr,sc),e(sc,PTr),e(sc,NH),e(NH,BTr),e(sc,ITr),e(sc,qH),e(qH,NTr),e(sc,qTr),e(tr,jTr),e(tr,X7),e(X7,DTr),e(X7,R1e),e(R1e,GTr),e(X7,OTr),e(tr,VTr),e(tr,Rt),M(z7,Rt,null),e(Rt,XTr),e(Rt,P1e),e(P1e,zTr),e(Rt,WTr),e(Rt,lc),e(lc,QTr),e(lc,B1e),e(B1e,HTr),e(lc,UTr),e(lc,jH),e(jH,JTr),e(lc,YTr),e(Rt,KTr),M(AC,Rt,null),e(tr,ZTr),e(tr,kr),M(W7,kr,null),e(kr,eMr),e(kr,I1e),e(I1e,oMr),e(kr,rMr),e(kr,nn),e(nn,tMr),e(nn,N1e),e(N1e,aMr),e(nn,nMr),e(nn,q1e),e(q1e,sMr),e(nn,lMr),e(nn,j1e),e(j1e,iMr),e(nn,dMr),e(kr,cMr),e(kr,oe),e(oe,yC),e(yC,D1e),e(D1e,mMr),e(yC,fMr),e(yC,DH),e(DH,gMr),e(yC,hMr),e(oe,uMr),e(oe,LC),e(LC,G1e),e(G1e,pMr),e(LC,_Mr),e(LC,GH),e(GH,bMr),e(LC,vMr),e(oe,FMr),e(oe,xC),e(xC,O1e),e(O1e,TMr),e(xC,MMr),e(xC,OH),e(OH,EMr),e(xC,CMr),e(oe,wMr),e(oe,$C),e($C,V1e),e(V1e,AMr),e($C,yMr),e($C,VH),e(VH,LMr),e($C,xMr),e(oe,$Mr),e(oe,kC),e(kC,X1e),e(X1e,kMr),e(kC,SMr),e(kC,XH),e(XH,RMr),e(kC,PMr),e(oe,BMr),e(oe,SC),e(SC,z1e),e(z1e,IMr),e(SC,NMr),e(SC,zH),e(zH,qMr),e(SC,jMr),e(oe,DMr),e(oe,RC),e(RC,W1e),e(W1e,GMr),e(RC,OMr),e(RC,WH),e(WH,VMr),e(RC,XMr),e(oe,zMr),e(oe,PC),e(PC,Q1e),e(Q1e,WMr),e(PC,QMr),e(PC,QH),e(QH,HMr),e(PC,UMr),e(oe,JMr),e(oe,BC),e(BC,H1e),e(H1e,YMr),e(BC,KMr),e(BC,HH),e(HH,ZMr),e(BC,e4r),e(oe,o4r),e(oe,IC),e(IC,U1e),e(U1e,r4r),e(IC,t4r),e(IC,UH),e(UH,a4r),e(IC,n4r),e(oe,s4r),e(oe,NC),e(NC,J1e),e(J1e,l4r),e(NC,i4r),e(NC,JH),e(JH,d4r),e(NC,c4r),e(oe,m4r),e(oe,qC),e(qC,Y1e),e(Y1e,f4r),e(qC,g4r),e(qC,YH),e(YH,h4r),e(qC,u4r),e(oe,p4r),e(oe,jC),e(jC,K1e),e(K1e,_4r),e(jC,b4r),e(jC,KH),e(KH,v4r),e(jC,F4r),e(oe,T4r),e(oe,DC),e(DC,Z1e),e(Z1e,M4r),e(DC,E4r),e(DC,ZH),e(ZH,C4r),e(DC,w4r),e(oe,A4r),e(oe,GC),e(GC,eTe),e(eTe,y4r),e(GC,L4r),e(GC,eU),e(eU,x4r),e(GC,$4r),e(oe,k4r),e(oe,OC),e(OC,oTe),e(oTe,S4r),e(OC,R4r),e(OC,oU),e(oU,P4r),e(OC,B4r),e(oe,I4r),e(oe,VC),e(VC,rTe),e(rTe,N4r),e(VC,q4r),e(VC,rU),e(rU,j4r),e(VC,D4r),e(oe,G4r),e(oe,XC),e(XC,tTe),e(tTe,O4r),e(XC,V4r),e(XC,tU),e(tU,X4r),e(XC,z4r),e(oe,W4r),e(oe,zC),e(zC,aTe),e(aTe,Q4r),e(zC,H4r),e(zC,aU),e(aU,U4r),e(zC,J4r),e(oe,Y4r),e(oe,WC),e(WC,nTe),e(nTe,K4r),e(WC,Z4r),e(WC,nU),e(nU,eEr),e(WC,oEr),e(oe,rEr),e(oe,QC),e(QC,sTe),e(sTe,tEr),e(QC,aEr),e(QC,sU),e(sU,nEr),e(QC,sEr),e(oe,lEr),e(oe,HC),e(HC,lTe),e(lTe,iEr),e(HC,dEr),e(HC,lU),e(lU,cEr),e(HC,mEr),e(oe,fEr),e(oe,UC),e(UC,iTe),e(iTe,gEr),e(UC,hEr),e(UC,iU),e(iU,uEr),e(UC,pEr),e(oe,_Er),e(oe,JC),e(JC,dTe),e(dTe,bEr),e(JC,vEr),e(JC,dU),e(dU,FEr),e(JC,TEr),e(oe,MEr),e(oe,YC),e(YC,cTe),e(cTe,EEr),e(YC,CEr),e(YC,cU),e(cU,wEr),e(YC,AEr),e(oe,yEr),e(oe,KC),e(KC,mTe),e(mTe,LEr),e(KC,xEr),e(KC,mU),e(mU,$Er),e(KC,kEr),e(kr,SEr),M(ZC,kr,null),b(m,Rje,_),b(m,ic,_),e(ic,e5),e(e5,fTe),M(Q7,fTe,null),e(ic,REr),e(ic,gTe),e(gTe,PEr),b(m,Pje,_),b(m,ar,_),M(H7,ar,null),e(ar,BEr),e(ar,dc),e(dc,IEr),e(dc,fU),e(fU,NEr),e(dc,qEr),e(dc,gU),e(gU,jEr),e(dc,DEr),e(ar,GEr),e(ar,U7),e(U7,OEr),e(U7,hTe),e(hTe,VEr),e(U7,XEr),e(ar,zEr),e(ar,Pt),M(J7,Pt,null),e(Pt,WEr),e(Pt,uTe),e(uTe,QEr),e(Pt,HEr),e(Pt,cc),e(cc,UEr),e(cc,pTe),e(pTe,JEr),e(cc,YEr),e(cc,hU),e(hU,KEr),e(cc,ZEr),e(Pt,eCr),M(o5,Pt,null),e(ar,oCr),e(ar,Sr),M(Y7,Sr,null),e(Sr,rCr),e(Sr,_Te),e(_Te,tCr),e(Sr,aCr),e(Sr,sn),e(sn,nCr),e(sn,bTe),e(bTe,sCr),e(sn,lCr),e(sn,vTe),e(vTe,iCr),e(sn,dCr),e(sn,FTe),e(FTe,cCr),e(sn,mCr),e(Sr,fCr),e(Sr,ue),e(ue,r5),e(r5,TTe),e(TTe,gCr),e(r5,hCr),e(r5,uU),e(uU,uCr),e(r5,pCr),e(ue,_Cr),e(ue,t5),e(t5,MTe),e(MTe,bCr),e(t5,vCr),e(t5,pU),e(pU,FCr),e(t5,TCr),e(ue,MCr),e(ue,a5),e(a5,ETe),e(ETe,ECr),e(a5,CCr),e(a5,_U),e(_U,wCr),e(a5,ACr),e(ue,yCr),e(ue,n5),e(n5,CTe),e(CTe,LCr),e(n5,xCr),e(n5,bU),e(bU,$Cr),e(n5,kCr),e(ue,SCr),e(ue,s5),e(s5,wTe),e(wTe,RCr),e(s5,PCr),e(s5,vU),e(vU,BCr),e(s5,ICr),e(ue,NCr),e(ue,l5),e(l5,ATe),e(ATe,qCr),e(l5,jCr),e(l5,FU),e(FU,DCr),e(l5,GCr),e(ue,OCr),e(ue,i5),e(i5,yTe),e(yTe,VCr),e(i5,XCr),e(i5,TU),e(TU,zCr),e(i5,WCr),e(ue,QCr),e(ue,d5),e(d5,LTe),e(LTe,HCr),e(d5,UCr),e(d5,MU),e(MU,JCr),e(d5,YCr),e(ue,KCr),e(ue,c5),e(c5,xTe),e(xTe,ZCr),e(c5,e5r),e(c5,EU),e(EU,o5r),e(c5,r5r),e(ue,t5r),e(ue,m5),e(m5,$Te),e($Te,a5r),e(m5,n5r),e(m5,CU),e(CU,s5r),e(m5,l5r),e(ue,i5r),e(ue,f5),e(f5,kTe),e(kTe,d5r),e(f5,c5r),e(f5,wU),e(wU,m5r),e(f5,f5r),e(ue,g5r),e(ue,g5),e(g5,STe),e(STe,h5r),e(g5,u5r),e(g5,AU),e(AU,p5r),e(g5,_5r),e(ue,b5r),e(ue,h5),e(h5,RTe),e(RTe,v5r),e(h5,F5r),e(h5,yU),e(yU,T5r),e(h5,M5r),e(ue,E5r),e(ue,u5),e(u5,PTe),e(PTe,C5r),e(u5,w5r),e(u5,LU),e(LU,A5r),e(u5,y5r),e(ue,L5r),e(ue,p5),e(p5,BTe),e(BTe,x5r),e(p5,$5r),e(p5,xU),e(xU,k5r),e(p5,S5r),e(ue,R5r),e(ue,_5),e(_5,ITe),e(ITe,P5r),e(_5,B5r),e(_5,$U),e($U,I5r),e(_5,N5r),e(ue,q5r),e(ue,b5),e(b5,NTe),e(NTe,j5r),e(b5,D5r),e(b5,kU),e(kU,G5r),e(b5,O5r),e(Sr,V5r),M(v5,Sr,null),b(m,Bje,_),b(m,mc,_),e(mc,F5),e(F5,qTe),M(K7,qTe,null),e(mc,X5r),e(mc,jTe),e(jTe,z5r),b(m,Ije,_),b(m,nr,_),M(Z7,nr,null),e(nr,W5r),e(nr,fc),e(fc,Q5r),e(fc,SU),e(SU,H5r),e(fc,U5r),e(fc,RU),e(RU,J5r),e(fc,Y5r),e(nr,K5r),e(nr,e9),e(e9,Z5r),e(e9,DTe),e(DTe,e3r),e(e9,o3r),e(nr,r3r),e(nr,Bt),M(o9,Bt,null),e(Bt,t3r),e(Bt,GTe),e(GTe,a3r),e(Bt,n3r),e(Bt,gc),e(gc,s3r),e(gc,OTe),e(OTe,l3r),e(gc,i3r),e(gc,PU),e(PU,d3r),e(gc,c3r),e(Bt,m3r),M(T5,Bt,null),e(nr,f3r),e(nr,Rr),M(r9,Rr,null),e(Rr,g3r),e(Rr,VTe),e(VTe,h3r),e(Rr,u3r),e(Rr,ln),e(ln,p3r),e(ln,XTe),e(XTe,_3r),e(ln,b3r),e(ln,zTe),e(zTe,v3r),e(ln,F3r),e(ln,WTe),e(WTe,T3r),e(ln,M3r),e(Rr,E3r),e(Rr,t9),e(t9,M5),e(M5,QTe),e(QTe,C3r),e(M5,w3r),e(M5,BU),e(BU,A3r),e(M5,y3r),e(t9,L3r),e(t9,E5),e(E5,HTe),e(HTe,x3r),e(E5,$3r),e(E5,IU),e(IU,k3r),e(E5,S3r),e(Rr,R3r),M(C5,Rr,null),b(m,Nje,_),b(m,hc,_),e(hc,w5),e(w5,UTe),M(a9,UTe,null),e(hc,P3r),e(hc,JTe),e(JTe,B3r),b(m,qje,_),b(m,sr,_),M(n9,sr,null),e(sr,I3r),e(sr,uc),e(uc,N3r),e(uc,NU),e(NU,q3r),e(uc,j3r),e(uc,qU),e(qU,D3r),e(uc,G3r),e(sr,O3r),e(sr,s9),e(s9,V3r),e(s9,YTe),e(YTe,X3r),e(s9,z3r),e(sr,W3r),e(sr,It),M(l9,It,null),e(It,Q3r),e(It,KTe),e(KTe,H3r),e(It,U3r),e(It,pc),e(pc,J3r),e(pc,ZTe),e(ZTe,Y3r),e(pc,K3r),e(pc,jU),e(jU,Z3r),e(pc,ewr),e(It,owr),M(A5,It,null),e(sr,rwr),e(sr,Pr),M(i9,Pr,null),e(Pr,twr),e(Pr,eMe),e(eMe,awr),e(Pr,nwr),e(Pr,dn),e(dn,swr),e(dn,oMe),e(oMe,lwr),e(dn,iwr),e(dn,rMe),e(rMe,dwr),e(dn,cwr),e(dn,tMe),e(tMe,mwr),e(dn,fwr),e(Pr,gwr),e(Pr,aMe),e(aMe,y5),e(y5,nMe),e(nMe,hwr),e(y5,uwr),e(y5,DU),e(DU,pwr),e(y5,_wr),e(Pr,bwr),M(L5,Pr,null),b(m,jje,_),b(m,_c,_),e(_c,x5),e(x5,sMe),M(d9,sMe,null),e(_c,vwr),e(_c,lMe),e(lMe,Fwr),b(m,Dje,_),b(m,lr,_),M(c9,lr,null),e(lr,Twr),e(lr,bc),e(bc,Mwr),e(bc,GU),e(GU,Ewr),e(bc,Cwr),e(bc,OU),e(OU,wwr),e(bc,Awr),e(lr,ywr),e(lr,m9),e(m9,Lwr),e(m9,iMe),e(iMe,xwr),e(m9,$wr),e(lr,kwr),e(lr,Nt),M(f9,Nt,null),e(Nt,Swr),e(Nt,dMe),e(dMe,Rwr),e(Nt,Pwr),e(Nt,vc),e(vc,Bwr),e(vc,cMe),e(cMe,Iwr),e(vc,Nwr),e(vc,VU),e(VU,qwr),e(vc,jwr),e(Nt,Dwr),M($5,Nt,null),e(lr,Gwr),e(lr,Br),M(g9,Br,null),e(Br,Owr),e(Br,mMe),e(mMe,Vwr),e(Br,Xwr),e(Br,cn),e(cn,zwr),e(cn,fMe),e(fMe,Wwr),e(cn,Qwr),e(cn,gMe),e(gMe,Hwr),e(cn,Uwr),e(cn,hMe),e(hMe,Jwr),e(cn,Ywr),e(Br,Kwr),e(Br,de),e(de,k5),e(k5,uMe),e(uMe,Zwr),e(k5,e0r),e(k5,XU),e(XU,o0r),e(k5,r0r),e(de,t0r),e(de,S5),e(S5,pMe),e(pMe,a0r),e(S5,n0r),e(S5,zU),e(zU,s0r),e(S5,l0r),e(de,i0r),e(de,R5),e(R5,_Me),e(_Me,d0r),e(R5,c0r),e(R5,WU),e(WU,m0r),e(R5,f0r),e(de,g0r),e(de,P5),e(P5,bMe),e(bMe,h0r),e(P5,u0r),e(P5,QU),e(QU,p0r),e(P5,_0r),e(de,b0r),e(de,B5),e(B5,vMe),e(vMe,v0r),e(B5,F0r),e(B5,HU),e(HU,T0r),e(B5,M0r),e(de,E0r),e(de,I5),e(I5,FMe),e(FMe,C0r),e(I5,w0r),e(I5,UU),e(UU,A0r),e(I5,y0r),e(de,L0r),e(de,N5),e(N5,TMe),e(TMe,x0r),e(N5,$0r),e(N5,JU),e(JU,k0r),e(N5,S0r),e(de,R0r),e(de,q5),e(q5,MMe),e(MMe,P0r),e(q5,B0r),e(q5,YU),e(YU,I0r),e(q5,N0r),e(de,q0r),e(de,j5),e(j5,EMe),e(EMe,j0r),e(j5,D0r),e(j5,KU),e(KU,G0r),e(j5,O0r),e(de,V0r),e(de,D5),e(D5,CMe),e(CMe,X0r),e(D5,z0r),e(D5,ZU),e(ZU,W0r),e(D5,Q0r),e(de,H0r),e(de,G5),e(G5,wMe),e(wMe,U0r),e(G5,J0r),e(G5,eJ),e(eJ,Y0r),e(G5,K0r),e(de,Z0r),e(de,O5),e(O5,AMe),e(AMe,e6r),e(O5,o6r),e(O5,oJ),e(oJ,r6r),e(O5,t6r),e(de,a6r),e(de,V5),e(V5,yMe),e(yMe,n6r),e(V5,s6r),e(V5,rJ),e(rJ,l6r),e(V5,i6r),e(de,d6r),e(de,X5),e(X5,LMe),e(LMe,c6r),e(X5,m6r),e(X5,tJ),e(tJ,f6r),e(X5,g6r),e(de,h6r),e(de,z5),e(z5,xMe),e(xMe,u6r),e(z5,p6r),e(z5,aJ),e(aJ,_6r),e(z5,b6r),e(de,v6r),e(de,W5),e(W5,$Me),e($Me,F6r),e(W5,T6r),e(W5,nJ),e(nJ,M6r),e(W5,E6r),e(de,C6r),e(de,Q5),e(Q5,kMe),e(kMe,w6r),e(Q5,A6r),e(Q5,sJ),e(sJ,y6r),e(Q5,L6r),e(de,x6r),e(de,H5),e(H5,SMe),e(SMe,$6r),e(H5,k6r),e(H5,lJ),e(lJ,S6r),e(H5,R6r),e(de,P6r),e(de,U5),e(U5,RMe),e(RMe,B6r),e(U5,I6r),e(U5,iJ),e(iJ,N6r),e(U5,q6r),e(de,j6r),e(de,J5),e(J5,PMe),e(PMe,D6r),e(J5,G6r),e(J5,dJ),e(dJ,O6r),e(J5,V6r),e(Br,X6r),M(Y5,Br,null),b(m,Gje,_),b(m,Fc,_),e(Fc,K5),e(K5,BMe),M(h9,BMe,null),e(Fc,z6r),e(Fc,IMe),e(IMe,W6r),b(m,Oje,_),b(m,ir,_),M(u9,ir,null),e(ir,Q6r),e(ir,Tc),e(Tc,H6r),e(Tc,cJ),e(cJ,U6r),e(Tc,J6r),e(Tc,mJ),e(mJ,Y6r),e(Tc,K6r),e(ir,Z6r),e(ir,p9),e(p9,eAr),e(p9,NMe),e(NMe,oAr),e(p9,rAr),e(ir,tAr),e(ir,qt),M(_9,qt,null),e(qt,aAr),e(qt,qMe),e(qMe,nAr),e(qt,sAr),e(qt,Mc),e(Mc,lAr),e(Mc,jMe),e(jMe,iAr),e(Mc,dAr),e(Mc,fJ),e(fJ,cAr),e(Mc,mAr),e(qt,fAr),M(Z5,qt,null),e(ir,gAr),e(ir,Ir),M(b9,Ir,null),e(Ir,hAr),e(Ir,DMe),e(DMe,uAr),e(Ir,pAr),e(Ir,mn),e(mn,_Ar),e(mn,GMe),e(GMe,bAr),e(mn,vAr),e(mn,OMe),e(OMe,FAr),e(mn,TAr),e(mn,VMe),e(VMe,MAr),e(mn,EAr),e(Ir,CAr),e(Ir,ce),e(ce,e3),e(e3,XMe),e(XMe,wAr),e(e3,AAr),e(e3,gJ),e(gJ,yAr),e(e3,LAr),e(ce,xAr),e(ce,o3),e(o3,zMe),e(zMe,$Ar),e(o3,kAr),e(o3,hJ),e(hJ,SAr),e(o3,RAr),e(ce,PAr),e(ce,r3),e(r3,WMe),e(WMe,BAr),e(r3,IAr),e(r3,uJ),e(uJ,NAr),e(r3,qAr),e(ce,jAr),e(ce,t3),e(t3,QMe),e(QMe,DAr),e(t3,GAr),e(t3,pJ),e(pJ,OAr),e(t3,VAr),e(ce,XAr),e(ce,a3),e(a3,HMe),e(HMe,zAr),e(a3,WAr),e(a3,_J),e(_J,QAr),e(a3,HAr),e(ce,UAr),e(ce,n3),e(n3,UMe),e(UMe,JAr),e(n3,YAr),e(n3,bJ),e(bJ,KAr),e(n3,ZAr),e(ce,eyr),e(ce,s3),e(s3,JMe),e(JMe,oyr),e(s3,ryr),e(s3,vJ),e(vJ,tyr),e(s3,ayr),e(ce,nyr),e(ce,l3),e(l3,YMe),e(YMe,syr),e(l3,lyr),e(l3,FJ),e(FJ,iyr),e(l3,dyr),e(ce,cyr),e(ce,i3),e(i3,KMe),e(KMe,myr),e(i3,fyr),e(i3,TJ),e(TJ,gyr),e(i3,hyr),e(ce,uyr),e(ce,d3),e(d3,ZMe),e(ZMe,pyr),e(d3,_yr),e(d3,MJ),e(MJ,byr),e(d3,vyr),e(ce,Fyr),e(ce,c3),e(c3,e4e),e(e4e,Tyr),e(c3,Myr),e(c3,EJ),e(EJ,Eyr),e(c3,Cyr),e(ce,wyr),e(ce,m3),e(m3,o4e),e(o4e,Ayr),e(m3,yyr),e(m3,CJ),e(CJ,Lyr),e(m3,xyr),e(ce,$yr),e(ce,f3),e(f3,r4e),e(r4e,kyr),e(f3,Syr),e(f3,wJ),e(wJ,Ryr),e(f3,Pyr),e(ce,Byr),e(ce,g3),e(g3,t4e),e(t4e,Iyr),e(g3,Nyr),e(g3,AJ),e(AJ,qyr),e(g3,jyr),e(ce,Dyr),e(ce,h3),e(h3,a4e),e(a4e,Gyr),e(h3,Oyr),e(h3,yJ),e(yJ,Vyr),e(h3,Xyr),e(ce,zyr),e(ce,u3),e(u3,n4e),e(n4e,Wyr),e(u3,Qyr),e(u3,LJ),e(LJ,Hyr),e(u3,Uyr),e(ce,Jyr),e(ce,p3),e(p3,s4e),e(s4e,Yyr),e(p3,Kyr),e(p3,xJ),e(xJ,Zyr),e(p3,eLr),e(ce,oLr),e(ce,_3),e(_3,l4e),e(l4e,rLr),e(_3,tLr),e(_3,$J),e($J,aLr),e(_3,nLr),e(ce,sLr),e(ce,b3),e(b3,i4e),e(i4e,lLr),e(b3,iLr),e(b3,kJ),e(kJ,dLr),e(b3,cLr),e(ce,mLr),e(ce,v3),e(v3,d4e),e(d4e,fLr),e(v3,gLr),e(v3,SJ),e(SJ,hLr),e(v3,uLr),e(Ir,pLr),M(F3,Ir,null),b(m,Vje,_),b(m,Ec,_),e(Ec,T3),e(T3,c4e),M(v9,c4e,null),e(Ec,_Lr),e(Ec,m4e),e(m4e,bLr),b(m,Xje,_),b(m,dr,_),M(F9,dr,null),e(dr,vLr),e(dr,Cc),e(Cc,FLr),e(Cc,RJ),e(RJ,TLr),e(Cc,MLr),e(Cc,PJ),e(PJ,ELr),e(Cc,CLr),e(dr,wLr),e(dr,T9),e(T9,ALr),e(T9,f4e),e(f4e,yLr),e(T9,LLr),e(dr,xLr),e(dr,jt),M(M9,jt,null),e(jt,$Lr),e(jt,g4e),e(g4e,kLr),e(jt,SLr),e(jt,wc),e(wc,RLr),e(wc,h4e),e(h4e,PLr),e(wc,BLr),e(wc,BJ),e(BJ,ILr),e(wc,NLr),e(jt,qLr),M(M3,jt,null),e(dr,jLr),e(dr,Nr),M(E9,Nr,null),e(Nr,DLr),e(Nr,u4e),e(u4e,GLr),e(Nr,OLr),e(Nr,fn),e(fn,VLr),e(fn,p4e),e(p4e,XLr),e(fn,zLr),e(fn,_4e),e(_4e,WLr),e(fn,QLr),e(fn,b4e),e(b4e,HLr),e(fn,ULr),e(Nr,JLr),e(Nr,v4e),e(v4e,E3),e(E3,F4e),e(F4e,YLr),e(E3,KLr),e(E3,IJ),e(IJ,ZLr),e(E3,e8r),e(Nr,o8r),M(C3,Nr,null),b(m,zje,_),b(m,Ac,_),e(Ac,w3),e(w3,T4e),M(C9,T4e,null),e(Ac,r8r),e(Ac,M4e),e(M4e,t8r),b(m,Wje,_),b(m,cr,_),M(w9,cr,null),e(cr,a8r),e(cr,yc),e(yc,n8r),e(yc,NJ),e(NJ,s8r),e(yc,l8r),e(yc,qJ),e(qJ,i8r),e(yc,d8r),e(cr,c8r),e(cr,A9),e(A9,m8r),e(A9,E4e),e(E4e,f8r),e(A9,g8r),e(cr,h8r),e(cr,Dt),M(y9,Dt,null),e(Dt,u8r),e(Dt,C4e),e(C4e,p8r),e(Dt,_8r),e(Dt,Lc),e(Lc,b8r),e(Lc,w4e),e(w4e,v8r),e(Lc,F8r),e(Lc,jJ),e(jJ,T8r),e(Lc,M8r),e(Dt,E8r),M(A3,Dt,null),e(cr,C8r),e(cr,qr),M(L9,qr,null),e(qr,w8r),e(qr,A4e),e(A4e,A8r),e(qr,y8r),e(qr,gn),e(gn,L8r),e(gn,y4e),e(y4e,x8r),e(gn,$8r),e(gn,L4e),e(L4e,k8r),e(gn,S8r),e(gn,x4e),e(x4e,R8r),e(gn,P8r),e(qr,B8r),e(qr,$4e),e($4e,y3),e(y3,k4e),e(k4e,I8r),e(y3,N8r),e(y3,DJ),e(DJ,q8r),e(y3,j8r),e(qr,D8r),M(L3,qr,null),b(m,Qje,_),b(m,xc,_),e(xc,x3),e(x3,S4e),M(x9,S4e,null),e(xc,G8r),e(xc,R4e),e(R4e,O8r),b(m,Hje,_),b(m,mr,_),M($9,mr,null),e(mr,V8r),e(mr,$c),e($c,X8r),e($c,GJ),e(GJ,z8r),e($c,W8r),e($c,OJ),e(OJ,Q8r),e($c,H8r),e(mr,U8r),e(mr,k9),e(k9,J8r),e(k9,P4e),e(P4e,Y8r),e(k9,K8r),e(mr,Z8r),e(mr,Gt),M(S9,Gt,null),e(Gt,e7r),e(Gt,B4e),e(B4e,o7r),e(Gt,r7r),e(Gt,kc),e(kc,t7r),e(kc,I4e),e(I4e,a7r),e(kc,n7r),e(kc,VJ),e(VJ,s7r),e(kc,l7r),e(Gt,i7r),M($3,Gt,null),e(mr,d7r),e(mr,jr),M(R9,jr,null),e(jr,c7r),e(jr,N4e),e(N4e,m7r),e(jr,f7r),e(jr,hn),e(hn,g7r),e(hn,q4e),e(q4e,h7r),e(hn,u7r),e(hn,j4e),e(j4e,p7r),e(hn,_7r),e(hn,D4e),e(D4e,b7r),e(hn,v7r),e(jr,F7r),e(jr,re),e(re,k3),e(k3,G4e),e(G4e,T7r),e(k3,M7r),e(k3,XJ),e(XJ,E7r),e(k3,C7r),e(re,w7r),e(re,S3),e(S3,O4e),e(O4e,A7r),e(S3,y7r),e(S3,zJ),e(zJ,L7r),e(S3,x7r),e(re,$7r),e(re,R3),e(R3,V4e),e(V4e,k7r),e(R3,S7r),e(R3,WJ),e(WJ,R7r),e(R3,P7r),e(re,B7r),e(re,P3),e(P3,X4e),e(X4e,I7r),e(P3,N7r),e(P3,QJ),e(QJ,q7r),e(P3,j7r),e(re,D7r),e(re,B3),e(B3,z4e),e(z4e,G7r),e(B3,O7r),e(B3,HJ),e(HJ,V7r),e(B3,X7r),e(re,z7r),e(re,I3),e(I3,W4e),e(W4e,W7r),e(I3,Q7r),e(I3,UJ),e(UJ,H7r),e(I3,U7r),e(re,J7r),e(re,N3),e(N3,Q4e),e(Q4e,Y7r),e(N3,K7r),e(N3,JJ),e(JJ,Z7r),e(N3,e9r),e(re,o9r),e(re,q3),e(q3,H4e),e(H4e,r9r),e(q3,t9r),e(q3,YJ),e(YJ,a9r),e(q3,n9r),e(re,s9r),e(re,j3),e(j3,U4e),e(U4e,l9r),e(j3,i9r),e(j3,KJ),e(KJ,d9r),e(j3,c9r),e(re,m9r),e(re,D3),e(D3,J4e),e(J4e,f9r),e(D3,g9r),e(D3,ZJ),e(ZJ,h9r),e(D3,u9r),e(re,p9r),e(re,G3),e(G3,Y4e),e(Y4e,_9r),e(G3,b9r),e(G3,eY),e(eY,v9r),e(G3,F9r),e(re,T9r),e(re,O3),e(O3,K4e),e(K4e,M9r),e(O3,E9r),e(O3,oY),e(oY,C9r),e(O3,w9r),e(re,A9r),e(re,V3),e(V3,Z4e),e(Z4e,y9r),e(V3,L9r),e(V3,rY),e(rY,x9r),e(V3,$9r),e(re,k9r),e(re,X3),e(X3,eEe),e(eEe,S9r),e(X3,R9r),e(X3,tY),e(tY,P9r),e(X3,B9r),e(re,I9r),e(re,z3),e(z3,oEe),e(oEe,N9r),e(z3,q9r),e(z3,aY),e(aY,j9r),e(z3,D9r),e(re,G9r),e(re,W3),e(W3,rEe),e(rEe,O9r),e(W3,V9r),e(W3,nY),e(nY,X9r),e(W3,z9r),e(re,W9r),e(re,Q3),e(Q3,tEe),e(tEe,Q9r),e(Q3,H9r),e(Q3,sY),e(sY,U9r),e(Q3,J9r),e(re,Y9r),e(re,H3),e(H3,aEe),e(aEe,K9r),e(H3,Z9r),e(H3,lY),e(lY,exr),e(H3,oxr),e(re,rxr),e(re,U3),e(U3,nEe),e(nEe,txr),e(U3,axr),e(U3,iY),e(iY,nxr),e(U3,sxr),e(re,lxr),e(re,J3),e(J3,sEe),e(sEe,ixr),e(J3,dxr),e(J3,dY),e(dY,cxr),e(J3,mxr),e(re,fxr),e(re,Y3),e(Y3,lEe),e(lEe,gxr),e(Y3,hxr),e(Y3,cY),e(cY,uxr),e(Y3,pxr),e(re,_xr),e(re,K3),e(K3,iEe),e(iEe,bxr),e(K3,vxr),e(K3,mY),e(mY,Fxr),e(K3,Txr),e(re,Mxr),e(re,Z3),e(Z3,dEe),e(dEe,Exr),e(Z3,Cxr),e(Z3,fY),e(fY,wxr),e(Z3,Axr),e(re,yxr),e(re,ew),e(ew,cEe),e(cEe,Lxr),e(ew,xxr),e(ew,gY),e(gY,$xr),e(ew,kxr),e(re,Sxr),e(re,ow),e(ow,mEe),e(mEe,Rxr),e(ow,Pxr),e(ow,hY),e(hY,Bxr),e(ow,Ixr),e(re,Nxr),e(re,rw),e(rw,fEe),e(fEe,qxr),e(rw,jxr),e(rw,uY),e(uY,Dxr),e(rw,Gxr),e(jr,Oxr),M(tw,jr,null),b(m,Uje,_),b(m,Sc,_),e(Sc,aw),e(aw,gEe),M(P9,gEe,null),e(Sc,Vxr),e(Sc,hEe),e(hEe,Xxr),b(m,Jje,_),b(m,fr,_),M(B9,fr,null),e(fr,zxr),e(fr,Rc),e(Rc,Wxr),e(Rc,pY),e(pY,Qxr),e(Rc,Hxr),e(Rc,_Y),e(_Y,Uxr),e(Rc,Jxr),e(fr,Yxr),e(fr,I9),e(I9,Kxr),e(I9,uEe),e(uEe,Zxr),e(I9,e$r),e(fr,o$r),e(fr,Ot),M(N9,Ot,null),e(Ot,r$r),e(Ot,pEe),e(pEe,t$r),e(Ot,a$r),e(Ot,Pc),e(Pc,n$r),e(Pc,_Ee),e(_Ee,s$r),e(Pc,l$r),e(Pc,bY),e(bY,i$r),e(Pc,d$r),e(Ot,c$r),M(nw,Ot,null),e(fr,m$r),e(fr,Dr),M(q9,Dr,null),e(Dr,f$r),e(Dr,bEe),e(bEe,g$r),e(Dr,h$r),e(Dr,un),e(un,u$r),e(un,vEe),e(vEe,p$r),e(un,_$r),e(un,FEe),e(FEe,b$r),e(un,v$r),e(un,TEe),e(TEe,F$r),e(un,T$r),e(Dr,M$r),e(Dr,Le),e(Le,sw),e(sw,MEe),e(MEe,E$r),e(sw,C$r),e(sw,vY),e(vY,w$r),e(sw,A$r),e(Le,y$r),e(Le,lw),e(lw,EEe),e(EEe,L$r),e(lw,x$r),e(lw,FY),e(FY,$$r),e(lw,k$r),e(Le,S$r),e(Le,iw),e(iw,CEe),e(CEe,R$r),e(iw,P$r),e(iw,TY),e(TY,B$r),e(iw,I$r),e(Le,N$r),e(Le,dw),e(dw,wEe),e(wEe,q$r),e(dw,j$r),e(dw,MY),e(MY,D$r),e(dw,G$r),e(Le,O$r),e(Le,cw),e(cw,AEe),e(AEe,V$r),e(cw,X$r),e(cw,EY),e(EY,z$r),e(cw,W$r),e(Le,Q$r),e(Le,mw),e(mw,yEe),e(yEe,H$r),e(mw,U$r),e(mw,CY),e(CY,J$r),e(mw,Y$r),e(Le,K$r),e(Le,fw),e(fw,LEe),e(LEe,Z$r),e(fw,ekr),e(fw,wY),e(wY,okr),e(fw,rkr),e(Le,tkr),e(Le,gw),e(gw,xEe),e(xEe,akr),e(gw,nkr),e(gw,AY),e(AY,skr),e(gw,lkr),e(Le,ikr),e(Le,hw),e(hw,$Ee),e($Ee,dkr),e(hw,ckr),e(hw,yY),e(yY,mkr),e(hw,fkr),e(Le,gkr),e(Le,uw),e(uw,kEe),e(kEe,hkr),e(uw,ukr),e(uw,LY),e(LY,pkr),e(uw,_kr),e(Dr,bkr),M(pw,Dr,null),b(m,Yje,_),b(m,Bc,_),e(Bc,_w),e(_w,SEe),M(j9,SEe,null),e(Bc,vkr),e(Bc,REe),e(REe,Fkr),b(m,Kje,_),b(m,gr,_),M(D9,gr,null),e(gr,Tkr),e(gr,Ic),e(Ic,Mkr),e(Ic,xY),e(xY,Ekr),e(Ic,Ckr),e(Ic,$Y),e($Y,wkr),e(Ic,Akr),e(gr,ykr),e(gr,G9),e(G9,Lkr),e(G9,PEe),e(PEe,xkr),e(G9,$kr),e(gr,kkr),e(gr,Vt),M(O9,Vt,null),e(Vt,Skr),e(Vt,BEe),e(BEe,Rkr),e(Vt,Pkr),e(Vt,Nc),e(Nc,Bkr),e(Nc,IEe),e(IEe,Ikr),e(Nc,Nkr),e(Nc,kY),e(kY,qkr),e(Nc,jkr),e(Vt,Dkr),M(bw,Vt,null),e(gr,Gkr),e(gr,Gr),M(V9,Gr,null),e(Gr,Okr),e(Gr,NEe),e(NEe,Vkr),e(Gr,Xkr),e(Gr,pn),e(pn,zkr),e(pn,qEe),e(qEe,Wkr),e(pn,Qkr),e(pn,jEe),e(jEe,Hkr),e(pn,Ukr),e(pn,DEe),e(DEe,Jkr),e(pn,Ykr),e(Gr,Kkr),e(Gr,Ee),e(Ee,vw),e(vw,GEe),e(GEe,Zkr),e(vw,eSr),e(vw,SY),e(SY,oSr),e(vw,rSr),e(Ee,tSr),e(Ee,Fw),e(Fw,OEe),e(OEe,aSr),e(Fw,nSr),e(Fw,RY),e(RY,sSr),e(Fw,lSr),e(Ee,iSr),e(Ee,Tw),e(Tw,VEe),e(VEe,dSr),e(Tw,cSr),e(Tw,PY),e(PY,mSr),e(Tw,fSr),e(Ee,gSr),e(Ee,Mw),e(Mw,XEe),e(XEe,hSr),e(Mw,uSr),e(Mw,BY),e(BY,pSr),e(Mw,_Sr),e(Ee,bSr),e(Ee,Ew),e(Ew,zEe),e(zEe,vSr),e(Ew,FSr),e(Ew,IY),e(IY,TSr),e(Ew,MSr),e(Ee,ESr),e(Ee,Cw),e(Cw,WEe),e(WEe,CSr),e(Cw,wSr),e(Cw,NY),e(NY,ASr),e(Cw,ySr),e(Ee,LSr),e(Ee,ww),e(ww,QEe),e(QEe,xSr),e(ww,$Sr),e(ww,qY),e(qY,kSr),e(ww,SSr),e(Ee,RSr),e(Ee,Aw),e(Aw,HEe),e(HEe,PSr),e(Aw,BSr),e(Aw,jY),e(jY,ISr),e(Aw,NSr),e(Ee,qSr),e(Ee,yw),e(yw,UEe),e(UEe,jSr),e(yw,DSr),e(yw,DY),e(DY,GSr),e(yw,OSr),e(Ee,VSr),e(Ee,Lw),e(Lw,JEe),e(JEe,XSr),e(Lw,zSr),e(Lw,GY),e(GY,WSr),e(Lw,QSr),e(Ee,HSr),e(Ee,xw),e(xw,YEe),e(YEe,USr),e(xw,JSr),e(xw,OY),e(OY,YSr),e(xw,KSr),e(Ee,ZSr),e(Ee,$w),e($w,KEe),e(KEe,eRr),e($w,oRr),e($w,VY),e(VY,rRr),e($w,tRr),e(Gr,aRr),M(kw,Gr,null),b(m,Zje,_),b(m,qc,_),e(qc,Sw),e(Sw,ZEe),M(X9,ZEe,null),e(qc,nRr),e(qc,eCe),e(eCe,sRr),b(m,eDe,_),b(m,hr,_),M(z9,hr,null),e(hr,lRr),e(hr,jc),e(jc,iRr),e(jc,XY),e(XY,dRr),e(jc,cRr),e(jc,zY),e(zY,mRr),e(jc,fRr),e(hr,gRr),e(hr,W9),e(W9,hRr),e(W9,oCe),e(oCe,uRr),e(W9,pRr),e(hr,_Rr),e(hr,Xt),M(Q9,Xt,null),e(Xt,bRr),e(Xt,rCe),e(rCe,vRr),e(Xt,FRr),e(Xt,Dc),e(Dc,TRr),e(Dc,tCe),e(tCe,MRr),e(Dc,ERr),e(Dc,WY),e(WY,CRr),e(Dc,wRr),e(Xt,ARr),M(Rw,Xt,null),e(hr,yRr),e(hr,Or),M(H9,Or,null),e(Or,LRr),e(Or,aCe),e(aCe,xRr),e(Or,$Rr),e(Or,_n),e(_n,kRr),e(_n,nCe),e(nCe,SRr),e(_n,RRr),e(_n,sCe),e(sCe,PRr),e(_n,BRr),e(_n,lCe),e(lCe,IRr),e(_n,NRr),e(Or,qRr),e(Or,xe),e(xe,Pw),e(Pw,iCe),e(iCe,jRr),e(Pw,DRr),e(Pw,QY),e(QY,GRr),e(Pw,ORr),e(xe,VRr),e(xe,Bw),e(Bw,dCe),e(dCe,XRr),e(Bw,zRr),e(Bw,HY),e(HY,WRr),e(Bw,QRr),e(xe,HRr),e(xe,Iw),e(Iw,cCe),e(cCe,URr),e(Iw,JRr),e(Iw,UY),e(UY,YRr),e(Iw,KRr),e(xe,ZRr),e(xe,Nw),e(Nw,mCe),e(mCe,ePr),e(Nw,oPr),e(Nw,JY),e(JY,rPr),e(Nw,tPr),e(xe,aPr),e(xe,qw),e(qw,fCe),e(fCe,nPr),e(qw,sPr),e(qw,YY),e(YY,lPr),e(qw,iPr),e(xe,dPr),e(xe,jw),e(jw,gCe),e(gCe,cPr),e(jw,mPr),e(jw,KY),e(KY,fPr),e(jw,gPr),e(xe,hPr),e(xe,Dw),e(Dw,hCe),e(hCe,uPr),e(Dw,pPr),e(Dw,ZY),e(ZY,_Pr),e(Dw,bPr),e(xe,vPr),e(xe,Gw),e(Gw,uCe),e(uCe,FPr),e(Gw,TPr),e(Gw,eK),e(eK,MPr),e(Gw,EPr),e(xe,CPr),e(xe,Ow),e(Ow,pCe),e(pCe,wPr),e(Ow,APr),e(Ow,oK),e(oK,yPr),e(Ow,LPr),e(xe,xPr),e(xe,Vw),e(Vw,_Ce),e(_Ce,$Pr),e(Vw,kPr),e(Vw,rK),e(rK,SPr),e(Vw,RPr),e(Or,PPr),M(Xw,Or,null),b(m,oDe,_),b(m,Gc,_),e(Gc,zw),e(zw,bCe),M(U9,bCe,null),e(Gc,BPr),e(Gc,vCe),e(vCe,IPr),b(m,rDe,_),b(m,ur,_),M(J9,ur,null),e(ur,NPr),e(ur,Oc),e(Oc,qPr),e(Oc,tK),e(tK,jPr),e(Oc,DPr),e(Oc,aK),e(aK,GPr),e(Oc,OPr),e(ur,VPr),e(ur,Y9),e(Y9,XPr),e(Y9,FCe),e(FCe,zPr),e(Y9,WPr),e(ur,QPr),e(ur,zt),M(K9,zt,null),e(zt,HPr),e(zt,TCe),e(TCe,UPr),e(zt,JPr),e(zt,Vc),e(Vc,YPr),e(Vc,MCe),e(MCe,KPr),e(Vc,ZPr),e(Vc,nK),e(nK,eBr),e(Vc,oBr),e(zt,rBr),M(Ww,zt,null),e(ur,tBr),e(ur,Vr),M(Z9,Vr,null),e(Vr,aBr),e(Vr,ECe),e(ECe,nBr),e(Vr,sBr),e(Vr,bn),e(bn,lBr),e(bn,CCe),e(CCe,iBr),e(bn,dBr),e(bn,wCe),e(wCe,cBr),e(bn,mBr),e(bn,ACe),e(ACe,fBr),e(bn,gBr),e(Vr,hBr),e(Vr,Pe),e(Pe,Qw),e(Qw,yCe),e(yCe,uBr),e(Qw,pBr),e(Qw,sK),e(sK,_Br),e(Qw,bBr),e(Pe,vBr),e(Pe,Hw),e(Hw,LCe),e(LCe,FBr),e(Hw,TBr),e(Hw,lK),e(lK,MBr),e(Hw,EBr),e(Pe,CBr),e(Pe,Uw),e(Uw,xCe),e(xCe,wBr),e(Uw,ABr),e(Uw,iK),e(iK,yBr),e(Uw,LBr),e(Pe,xBr),e(Pe,Jw),e(Jw,$Ce),e($Ce,$Br),e(Jw,kBr),e(Jw,dK),e(dK,SBr),e(Jw,RBr),e(Pe,PBr),e(Pe,Yw),e(Yw,kCe),e(kCe,BBr),e(Yw,IBr),e(Yw,cK),e(cK,NBr),e(Yw,qBr),e(Pe,jBr),e(Pe,Kw),e(Kw,SCe),e(SCe,DBr),e(Kw,GBr),e(Kw,mK),e(mK,OBr),e(Kw,VBr),e(Pe,XBr),e(Pe,Zw),e(Zw,RCe),e(RCe,zBr),e(Zw,WBr),e(Zw,fK),e(fK,QBr),e(Zw,HBr),e(Pe,UBr),e(Pe,e0),e(e0,PCe),e(PCe,JBr),e(e0,YBr),e(e0,gK),e(gK,KBr),e(e0,ZBr),e(Pe,eIr),e(Pe,o0),e(o0,BCe),e(BCe,oIr),e(o0,rIr),e(o0,hK),e(hK,tIr),e(o0,aIr),e(Vr,nIr),M(r0,Vr,null),b(m,tDe,_),b(m,Xc,_),e(Xc,t0),e(t0,ICe),M(ex,ICe,null),e(Xc,sIr),e(Xc,NCe),e(NCe,lIr),b(m,aDe,_),b(m,pr,_),M(ox,pr,null),e(pr,iIr),e(pr,zc),e(zc,dIr),e(zc,uK),e(uK,cIr),e(zc,mIr),e(zc,pK),e(pK,fIr),e(zc,gIr),e(pr,hIr),e(pr,rx),e(rx,uIr),e(rx,qCe),e(qCe,pIr),e(rx,_Ir),e(pr,bIr),e(pr,Wt),M(tx,Wt,null),e(Wt,vIr),e(Wt,jCe),e(jCe,FIr),e(Wt,TIr),e(Wt,Wc),e(Wc,MIr),e(Wc,DCe),e(DCe,EIr),e(Wc,CIr),e(Wc,_K),e(_K,wIr),e(Wc,AIr),e(Wt,yIr),M(a0,Wt,null),e(pr,LIr),e(pr,Xr),M(ax,Xr,null),e(Xr,xIr),e(Xr,GCe),e(GCe,$Ir),e(Xr,kIr),e(Xr,vn),e(vn,SIr),e(vn,OCe),e(OCe,RIr),e(vn,PIr),e(vn,VCe),e(VCe,BIr),e(vn,IIr),e(vn,XCe),e(XCe,NIr),e(vn,qIr),e(Xr,jIr),e(Xr,$e),e($e,n0),e(n0,zCe),e(zCe,DIr),e(n0,GIr),e(n0,bK),e(bK,OIr),e(n0,VIr),e($e,XIr),e($e,s0),e(s0,WCe),e(WCe,zIr),e(s0,WIr),e(s0,vK),e(vK,QIr),e(s0,HIr),e($e,UIr),e($e,l0),e(l0,QCe),e(QCe,JIr),e(l0,YIr),e(l0,FK),e(FK,KIr),e(l0,ZIr),e($e,eNr),e($e,i0),e(i0,HCe),e(HCe,oNr),e(i0,rNr),e(i0,TK),e(TK,tNr),e(i0,aNr),e($e,nNr),e($e,d0),e(d0,UCe),e(UCe,sNr),e(d0,lNr),e(d0,MK),e(MK,iNr),e(d0,dNr),e($e,cNr),e($e,c0),e(c0,JCe),e(JCe,mNr),e(c0,fNr),e(c0,EK),e(EK,gNr),e(c0,hNr),e($e,uNr),e($e,m0),e(m0,YCe),e(YCe,pNr),e(m0,_Nr),e(m0,CK),e(CK,bNr),e(m0,vNr),e($e,FNr),e($e,f0),e(f0,KCe),e(KCe,TNr),e(f0,MNr),e(f0,wK),e(wK,ENr),e(f0,CNr),e($e,wNr),e($e,g0),e(g0,ZCe),e(ZCe,ANr),e(g0,yNr),e(g0,AK),e(AK,LNr),e(g0,xNr),e($e,$Nr),e($e,h0),e(h0,e5e),e(e5e,kNr),e(h0,SNr),e(h0,yK),e(yK,RNr),e(h0,PNr),e(Xr,BNr),M(u0,Xr,null),b(m,nDe,_),b(m,Qc,_),e(Qc,p0),e(p0,o5e),M(nx,o5e,null),e(Qc,INr),e(Qc,r5e),e(r5e,NNr),b(m,sDe,_),b(m,_r,_),M(sx,_r,null),e(_r,qNr),e(_r,Hc),e(Hc,jNr),e(Hc,LK),e(LK,DNr),e(Hc,GNr),e(Hc,xK),e(xK,ONr),e(Hc,VNr),e(_r,XNr),e(_r,lx),e(lx,zNr),e(lx,t5e),e(t5e,WNr),e(lx,QNr),e(_r,HNr),e(_r,Qt),M(ix,Qt,null),e(Qt,UNr),e(Qt,a5e),e(a5e,JNr),e(Qt,YNr),e(Qt,Uc),e(Uc,KNr),e(Uc,n5e),e(n5e,ZNr),e(Uc,eqr),e(Uc,$K),e($K,oqr),e(Uc,rqr),e(Qt,tqr),M(_0,Qt,null),e(_r,aqr),e(_r,zr),M(dx,zr,null),e(zr,nqr),e(zr,s5e),e(s5e,sqr),e(zr,lqr),e(zr,Fn),e(Fn,iqr),e(Fn,l5e),e(l5e,dqr),e(Fn,cqr),e(Fn,i5e),e(i5e,mqr),e(Fn,fqr),e(Fn,d5e),e(d5e,gqr),e(Fn,hqr),e(zr,uqr),e(zr,ke),e(ke,b0),e(b0,c5e),e(c5e,pqr),e(b0,_qr),e(b0,kK),e(kK,bqr),e(b0,vqr),e(ke,Fqr),e(ke,v0),e(v0,m5e),e(m5e,Tqr),e(v0,Mqr),e(v0,SK),e(SK,Eqr),e(v0,Cqr),e(ke,wqr),e(ke,F0),e(F0,f5e),e(f5e,Aqr),e(F0,yqr),e(F0,RK),e(RK,Lqr),e(F0,xqr),e(ke,$qr),e(ke,T0),e(T0,g5e),e(g5e,kqr),e(T0,Sqr),e(T0,PK),e(PK,Rqr),e(T0,Pqr),e(ke,Bqr),e(ke,M0),e(M0,h5e),e(h5e,Iqr),e(M0,Nqr),e(M0,BK),e(BK,qqr),e(M0,jqr),e(ke,Dqr),e(ke,E0),e(E0,u5e),e(u5e,Gqr),e(E0,Oqr),e(E0,IK),e(IK,Vqr),e(E0,Xqr),e(ke,zqr),e(ke,C0),e(C0,p5e),e(p5e,Wqr),e(C0,Qqr),e(C0,NK),e(NK,Hqr),e(C0,Uqr),e(ke,Jqr),e(ke,w0),e(w0,_5e),e(_5e,Yqr),e(w0,Kqr),e(w0,qK),e(qK,Zqr),e(w0,ejr),e(ke,ojr),e(ke,A0),e(A0,b5e),e(b5e,rjr),e(A0,tjr),e(A0,jK),e(jK,ajr),e(A0,njr),e(ke,sjr),e(ke,y0),e(y0,v5e),e(v5e,ljr),e(y0,ijr),e(y0,DK),e(DK,djr),e(y0,cjr),e(zr,mjr),M(L0,zr,null),b(m,lDe,_),b(m,Jc,_),e(Jc,x0),e(x0,F5e),M(cx,F5e,null),e(Jc,fjr),e(Jc,T5e),e(T5e,gjr),b(m,iDe,_),b(m,br,_),M(mx,br,null),e(br,hjr),e(br,Yc),e(Yc,ujr),e(Yc,GK),e(GK,pjr),e(Yc,_jr),e(Yc,OK),e(OK,bjr),e(Yc,vjr),e(br,Fjr),e(br,fx),e(fx,Tjr),e(fx,M5e),e(M5e,Mjr),e(fx,Ejr),e(br,Cjr),e(br,Ht),M(gx,Ht,null),e(Ht,wjr),e(Ht,E5e),e(E5e,Ajr),e(Ht,yjr),e(Ht,Kc),e(Kc,Ljr),e(Kc,C5e),e(C5e,xjr),e(Kc,$jr),e(Kc,VK),e(VK,kjr),e(Kc,Sjr),e(Ht,Rjr),M($0,Ht,null),e(br,Pjr),e(br,Wr),M(hx,Wr,null),e(Wr,Bjr),e(Wr,w5e),e(w5e,Ijr),e(Wr,Njr),e(Wr,Tn),e(Tn,qjr),e(Tn,A5e),e(A5e,jjr),e(Tn,Djr),e(Tn,y5e),e(y5e,Gjr),e(Tn,Ojr),e(Tn,L5e),e(L5e,Vjr),e(Tn,Xjr),e(Wr,zjr),e(Wr,Ge),e(Ge,k0),e(k0,x5e),e(x5e,Wjr),e(k0,Qjr),e(k0,XK),e(XK,Hjr),e(k0,Ujr),e(Ge,Jjr),e(Ge,S0),e(S0,$5e),e($5e,Yjr),e(S0,Kjr),e(S0,zK),e(zK,Zjr),e(S0,eDr),e(Ge,oDr),e(Ge,R0),e(R0,k5e),e(k5e,rDr),e(R0,tDr),e(R0,WK),e(WK,aDr),e(R0,nDr),e(Ge,sDr),e(Ge,P0),e(P0,S5e),e(S5e,lDr),e(P0,iDr),e(P0,QK),e(QK,dDr),e(P0,cDr),e(Ge,mDr),e(Ge,B0),e(B0,R5e),e(R5e,fDr),e(B0,gDr),e(B0,HK),e(HK,hDr),e(B0,uDr),e(Ge,pDr),e(Ge,I0),e(I0,P5e),e(P5e,_Dr),e(I0,bDr),e(I0,UK),e(UK,vDr),e(I0,FDr),e(Ge,TDr),e(Ge,N0),e(N0,B5e),e(B5e,MDr),e(N0,EDr),e(N0,JK),e(JK,CDr),e(N0,wDr),e(Ge,ADr),e(Ge,q0),e(q0,I5e),e(I5e,yDr),e(q0,LDr),e(q0,YK),e(YK,xDr),e(q0,$Dr),e(Wr,kDr),M(j0,Wr,null),b(m,dDe,_),b(m,Zc,_),e(Zc,D0),e(D0,N5e),M(ux,N5e,null),e(Zc,SDr),e(Zc,q5e),e(q5e,RDr),b(m,cDe,_),b(m,vr,_),M(px,vr,null),e(vr,PDr),e(vr,em),e(em,BDr),e(em,KK),e(KK,IDr),e(em,NDr),e(em,ZK),e(ZK,qDr),e(em,jDr),e(vr,DDr),e(vr,_x),e(_x,GDr),e(_x,j5e),e(j5e,ODr),e(_x,VDr),e(vr,XDr),e(vr,Ut),M(bx,Ut,null),e(Ut,zDr),e(Ut,D5e),e(D5e,WDr),e(Ut,QDr),e(Ut,om),e(om,HDr),e(om,G5e),e(G5e,UDr),e(om,JDr),e(om,eZ),e(eZ,YDr),e(om,KDr),e(Ut,ZDr),M(G0,Ut,null),e(vr,eGr),e(vr,Qr),M(vx,Qr,null),e(Qr,oGr),e(Qr,O5e),e(O5e,rGr),e(Qr,tGr),e(Qr,Mn),e(Mn,aGr),e(Mn,V5e),e(V5e,nGr),e(Mn,sGr),e(Mn,X5e),e(X5e,lGr),e(Mn,iGr),e(Mn,z5e),e(z5e,dGr),e(Mn,cGr),e(Qr,mGr),e(Qr,Oe),e(Oe,O0),e(O0,W5e),e(W5e,fGr),e(O0,gGr),e(O0,oZ),e(oZ,hGr),e(O0,uGr),e(Oe,pGr),e(Oe,V0),e(V0,Q5e),e(Q5e,_Gr),e(V0,bGr),e(V0,rZ),e(rZ,vGr),e(V0,FGr),e(Oe,TGr),e(Oe,X0),e(X0,H5e),e(H5e,MGr),e(X0,EGr),e(X0,tZ),e(tZ,CGr),e(X0,wGr),e(Oe,AGr),e(Oe,z0),e(z0,U5e),e(U5e,yGr),e(z0,LGr),e(z0,aZ),e(aZ,xGr),e(z0,$Gr),e(Oe,kGr),e(Oe,W0),e(W0,J5e),e(J5e,SGr),e(W0,RGr),e(W0,nZ),e(nZ,PGr),e(W0,BGr),e(Oe,IGr),e(Oe,Q0),e(Q0,Y5e),e(Y5e,NGr),e(Q0,qGr),e(Q0,sZ),e(sZ,jGr),e(Q0,DGr),e(Oe,GGr),e(Oe,H0),e(H0,K5e),e(K5e,OGr),e(H0,VGr),e(H0,lZ),e(lZ,XGr),e(H0,zGr),e(Oe,WGr),e(Oe,U0),e(U0,Z5e),e(Z5e,QGr),e(U0,HGr),e(U0,iZ),e(iZ,UGr),e(U0,JGr),e(Qr,YGr),M(J0,Qr,null),b(m,mDe,_),b(m,rm,_),e(rm,Y0),e(Y0,e3e),M(Fx,e3e,null),e(rm,KGr),e(rm,o3e),e(o3e,ZGr),b(m,fDe,_),b(m,Fr,_),M(Tx,Fr,null),e(Fr,eOr),e(Fr,tm),e(tm,oOr),e(tm,dZ),e(dZ,rOr),e(tm,tOr),e(tm,cZ),e(cZ,aOr),e(tm,nOr),e(Fr,sOr),e(Fr,Mx),e(Mx,lOr),e(Mx,r3e),e(r3e,iOr),e(Mx,dOr),e(Fr,cOr),e(Fr,Jt),M(Ex,Jt,null),e(Jt,mOr),e(Jt,t3e),e(t3e,fOr),e(Jt,gOr),e(Jt,am),e(am,hOr),e(am,a3e),e(a3e,uOr),e(am,pOr),e(am,mZ),e(mZ,_Or),e(am,bOr),e(Jt,vOr),M(K0,Jt,null),e(Fr,FOr),e(Fr,Hr),M(Cx,Hr,null),e(Hr,TOr),e(Hr,n3e),e(n3e,MOr),e(Hr,EOr),e(Hr,En),e(En,COr),e(En,s3e),e(s3e,wOr),e(En,AOr),e(En,l3e),e(l3e,yOr),e(En,LOr),e(En,i3e),e(i3e,xOr),e(En,$Or),e(Hr,kOr),e(Hr,d3e),e(d3e,Z0),e(Z0,c3e),e(c3e,SOr),e(Z0,ROr),e(Z0,fZ),e(fZ,POr),e(Z0,BOr),e(Hr,IOr),M(e6,Hr,null),b(m,gDe,_),b(m,nm,_),e(nm,o6),e(o6,m3e),M(wx,m3e,null),e(nm,NOr),e(nm,f3e),e(f3e,qOr),b(m,hDe,_),b(m,Tr,_),M(Ax,Tr,null),e(Tr,jOr),e(Tr,sm),e(sm,DOr),e(sm,gZ),e(gZ,GOr),e(sm,OOr),e(sm,hZ),e(hZ,VOr),e(sm,XOr),e(Tr,zOr),e(Tr,yx),e(yx,WOr),e(yx,g3e),e(g3e,QOr),e(yx,HOr),e(Tr,UOr),e(Tr,Yt),M(Lx,Yt,null),e(Yt,JOr),e(Yt,h3e),e(h3e,YOr),e(Yt,KOr),e(Yt,lm),e(lm,ZOr),e(lm,u3e),e(u3e,eVr),e(lm,oVr),e(lm,uZ),e(uZ,rVr),e(lm,tVr),e(Yt,aVr),M(r6,Yt,null),e(Tr,nVr),e(Tr,Ur),M(xx,Ur,null),e(Ur,sVr),e(Ur,p3e),e(p3e,lVr),e(Ur,iVr),e(Ur,Cn),e(Cn,dVr),e(Cn,_3e),e(_3e,cVr),e(Cn,mVr),e(Cn,b3e),e(b3e,fVr),e(Cn,gVr),e(Cn,v3e),e(v3e,hVr),e(Cn,uVr),e(Ur,pVr),e(Ur,$x),e($x,t6),e(t6,F3e),e(F3e,_Vr),e(t6,bVr),e(t6,pZ),e(pZ,vVr),e(t6,FVr),e($x,TVr),e($x,a6),e(a6,T3e),e(T3e,MVr),e(a6,EVr),e(a6,_Z),e(_Z,CVr),e(a6,wVr),e(Ur,AVr),M(n6,Ur,null),b(m,uDe,_),b(m,im,_),e(im,s6),e(s6,M3e),M(kx,M3e,null),e(im,yVr),e(im,E3e),e(E3e,LVr),b(m,pDe,_),b(m,Mr,_),M(Sx,Mr,null),e(Mr,xVr),e(Mr,dm),e(dm,$Vr),e(dm,bZ),e(bZ,kVr),e(dm,SVr),e(dm,vZ),e(vZ,RVr),e(dm,PVr),e(Mr,BVr),e(Mr,Rx),e(Rx,IVr),e(Rx,C3e),e(C3e,NVr),e(Rx,qVr),e(Mr,jVr),e(Mr,Kt),M(Px,Kt,null),e(Kt,DVr),e(Kt,w3e),e(w3e,GVr),e(Kt,OVr),e(Kt,cm),e(cm,VVr),e(cm,A3e),e(A3e,XVr),e(cm,zVr),e(cm,FZ),e(FZ,WVr),e(cm,QVr),e(Kt,HVr),M(l6,Kt,null),e(Mr,UVr),e(Mr,Jr),M(Bx,Jr,null),e(Jr,JVr),e(Jr,y3e),e(y3e,YVr),e(Jr,KVr),e(Jr,wn),e(wn,ZVr),e(wn,L3e),e(L3e,eXr),e(wn,oXr),e(wn,x3e),e(x3e,rXr),e(wn,tXr),e(wn,$3e),e($3e,aXr),e(wn,nXr),e(Jr,sXr),e(Jr,k3e),e(k3e,i6),e(i6,S3e),e(S3e,lXr),e(i6,iXr),e(i6,TZ),e(TZ,dXr),e(i6,cXr),e(Jr,mXr),M(d6,Jr,null),_De=!0},p(m,[_]){const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:m}),vm.$set(Ix);const R3e={};_&2&&(R3e.$$scope={dirty:_,ctx:m}),Eg.$set(R3e);const P3e={};_&2&&(P3e.$$scope={dirty:_,ctx:m}),ah.$set(P3e);const B3e={};_&2&&(B3e.$$scope={dirty:_,ctx:m}),Ih.$set(B3e);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:m}),Nh.$set(Nx);const I3e={};_&2&&(I3e.$$scope={dirty:_,ctx:m}),tu.$set(I3e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),au.$set(An);const N3e={};_&2&&(N3e.$$scope={dirty:_,ctx:m}),lu.$set(N3e);const q3e={};_&2&&(q3e.$$scope={dirty:_,ctx:m}),r_.$set(q3e);const j3e={};_&2&&(j3e.$$scope={dirty:_,ctx:m}),a_.$set(j3e);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:m}),H_.$set(qx);const D3e={};_&2&&(D3e.$$scope={dirty:_,ctx:m}),J_.$set(D3e);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:m}),Bb.$set(jx);const G3e={};_&2&&(G3e.$$scope={dirty:_,ctx:m}),Nb.$set(G3e);const Dx={};_&2&&(Dx.$$scope={dirty:_,ctx:m}),F2.$set(Dx);const O3e={};_&2&&(O3e.$$scope={dirty:_,ctx:m}),M2.$set(O3e);const V3e={};_&2&&(V3e.$$scope={dirty:_,ctx:m}),D2.$set(V3e);const X3e={};_&2&&(X3e.$$scope={dirty:_,ctx:m}),O2.$set(X3e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),Nv.$set(mm);const z3e={};_&2&&(z3e.$$scope={dirty:_,ctx:m}),jv.$set(z3e);const W3e={};_&2&&(W3e.$$scope={dirty:_,ctx:m}),pF.$set(W3e);const Q3e={};_&2&&(Q3e.$$scope={dirty:_,ctx:m}),bF.$set(Q3e);const Gx={};_&2&&(Gx.$$scope={dirty:_,ctx:m}),wF.$set(Gx);const H3e={};_&2&&(H3e.$$scope={dirty:_,ctx:m}),yF.$set(H3e);const U3e={};_&2&&(U3e.$$scope={dirty:_,ctx:m}),d1.$set(U3e);const J3e={};_&2&&(J3e.$$scope={dirty:_,ctx:m}),m1.$set(J3e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),Z1.$set(et);const Ox={};_&2&&(Ox.$$scope={dirty:_,ctx:m}),oT.$set(Ox);const Y3e={};_&2&&(Y3e.$$scope={dirty:_,ctx:m}),aT.$set(Y3e);const Vx={};_&2&&(Vx.$$scope={dirty:_,ctx:m}),sT.$set(Vx);const K3e={};_&2&&(K3e.$$scope={dirty:_,ctx:m}),FT.$set(K3e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),MT.$set(ot);const Z3e={};_&2&&(Z3e.$$scope={dirty:_,ctx:m}),wT.$set(Z3e);const fm={};_&2&&(fm.$$scope={dirty:_,ctx:m}),yT.$set(fm);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:m}),qT.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:m}),DT.$set(owe);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),QT.$set(y);const c6={};_&2&&(c6.$$scope={dirty:_,ctx:m}),UT.$set(c6);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:m}),sM.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:m}),iM.$set(twe);const m6={};_&2&&(m6.$$scope={dirty:_,ctx:m}),fM.$set(m6);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:m}),hM.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:m}),TM.$set(nwe);const f6={};_&2&&(f6.$$scope={dirty:_,ctx:m}),EM.$set(f6);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:m}),LM.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:m}),$M.$set(lwe);const g6={};_&2&&(g6.$$scope={dirty:_,ctx:m}),PM.$set(g6);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:m}),IM.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:m}),jM.$set(dwe);const h6={};_&2&&(h6.$$scope={dirty:_,ctx:m}),GM.$set(h6);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:m}),QM.$set(cwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:m}),UM.$set(mwe);const u6={};_&2&&(u6.$$scope={dirty:_,ctx:m}),KM.$set(u6);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:m}),e4.$set(fwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:m}),Q4.$set(gwe);const p6={};_&2&&(p6.$$scope={dirty:_,ctx:m}),U4.$set(p6);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:m}),vE.$set(hwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:m}),TE.$set(uwe);const _6={};_&2&&(_6.$$scope={dirty:_,ctx:m}),BE.$set(_6);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:m}),NE.$set(pwe);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:m}),OE.$set(_we);const b6={};_&2&&(b6.$$scope={dirty:_,ctx:m}),XE.$set(b6);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:m}),mC.$set(bwe);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:m}),gC.$set(vwe);const v6={};_&2&&(v6.$$scope={dirty:_,ctx:m}),CC.$set(v6);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:m}),AC.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:m}),ZC.$set(Twe);const F6={};_&2&&(F6.$$scope={dirty:_,ctx:m}),o5.$set(F6);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:m}),v5.$set(Mwe);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:m}),T5.$set(Ewe);const T6={};_&2&&(T6.$$scope={dirty:_,ctx:m}),C5.$set(T6);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:m}),A5.$set(Cwe);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:m}),L5.$set(wwe);const M6={};_&2&&(M6.$$scope={dirty:_,ctx:m}),$5.$set(M6);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:m}),Y5.$set(Awe);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:m}),Z5.$set(ywe);const E6={};_&2&&(E6.$$scope={dirty:_,ctx:m}),F3.$set(E6);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:m}),M3.$set(Lwe);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:m}),C3.$set(xwe);const C6={};_&2&&(C6.$$scope={dirty:_,ctx:m}),A3.$set(C6);const $we={};_&2&&($we.$$scope={dirty:_,ctx:m}),L3.$set($we);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:m}),$3.$set(kwe);const w6={};_&2&&(w6.$$scope={dirty:_,ctx:m}),tw.$set(w6);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:m}),nw.$set(Swe);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:m}),pw.$set(Rwe);const A6={};_&2&&(A6.$$scope={dirty:_,ctx:m}),bw.$set(A6);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:m}),kw.$set(Pwe);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:m}),Rw.$set(Bwe);const y6={};_&2&&(y6.$$scope={dirty:_,ctx:m}),Xw.$set(y6);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:m}),Ww.$set(Iwe);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:m}),r0.$set(Nwe);const L6={};_&2&&(L6.$$scope={dirty:_,ctx:m}),a0.$set(L6);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:m}),u0.$set(qwe);const jwe={};_&2&&(jwe.$$scope={dirty:_,ctx:m}),_0.$set(jwe);const x6={};_&2&&(x6.$$scope={dirty:_,ctx:m}),L0.$set(x6);const Dwe={};_&2&&(Dwe.$$scope={dirty:_,ctx:m}),$0.$set(Dwe);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:m}),j0.$set(Gwe);const $6={};_&2&&($6.$$scope={dirty:_,ctx:m}),G0.$set($6);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:m}),J0.$set(Owe);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:m}),K0.$set(Vwe);const k6={};_&2&&(k6.$$scope={dirty:_,ctx:m}),e6.$set(k6);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:m}),r6.$set(Xwe);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:m}),n6.$set(zwe);const S6={};_&2&&(S6.$$scope={dirty:_,ctx:m}),l6.$set(S6);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:m}),d6.$set(Wwe)},i(m){_De||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(ky.$$.fragment,m),E(Sy.$$.fragment,m),E(vm.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(Ny.$$.fragment,m),E(Eg.$$.fragment,m),E(qy.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Vy.$$.fragment,m),E(ah.$$.fragment,m),E(Xy.$$.fragment,m),E(zy.$$.fragment,m),E(Wy.$$.fragment,m),E(Uy.$$.fragment,m),E(Ih.$$.fragment,m),E(Nh.$$.fragment,m),E(Jy.$$.fragment,m),E(Yy.$$.fragment,m),E(Ky.$$.fragment,m),E(oL.$$.fragment,m),E(tu.$$.fragment,m),E(au.$$.fragment,m),E(rL.$$.fragment,m),E(tL.$$.fragment,m),E(aL.$$.fragment,m),E(sL.$$.fragment,m),E(lu.$$.fragment,m),E(lL.$$.fragment,m),E(r_.$$.fragment,m),E(iL.$$.fragment,m),E(dL.$$.fragment,m),E(mL.$$.fragment,m),E(a_.$$.fragment,m),E(fL.$$.fragment,m),E(H_.$$.fragment,m),E(gL.$$.fragment,m),E(hL.$$.fragment,m),E(pL.$$.fragment,m),E(J_.$$.fragment,m),E(_L.$$.fragment,m),E(Bb.$$.fragment,m),E(bL.$$.fragment,m),E(vL.$$.fragment,m),E(TL.$$.fragment,m),E(Nb.$$.fragment,m),E(ML.$$.fragment,m),E(F2.$$.fragment,m),E(EL.$$.fragment,m),E(CL.$$.fragment,m),E(AL.$$.fragment,m),E(M2.$$.fragment,m),E(yL.$$.fragment,m),E(D2.$$.fragment,m),E(LL.$$.fragment,m),E(xL.$$.fragment,m),E(kL.$$.fragment,m),E(O2.$$.fragment,m),E(SL.$$.fragment,m),E(Nv.$$.fragment,m),E(RL.$$.fragment,m),E(PL.$$.fragment,m),E(IL.$$.fragment,m),E(jv.$$.fragment,m),E(NL.$$.fragment,m),E(pF.$$.fragment,m),E(qL.$$.fragment,m),E(jL.$$.fragment,m),E(GL.$$.fragment,m),E(bF.$$.fragment,m),E(OL.$$.fragment,m),E(wF.$$.fragment,m),E(VL.$$.fragment,m),E(XL.$$.fragment,m),E(WL.$$.fragment,m),E(yF.$$.fragment,m),E(QL.$$.fragment,m),E(d1.$$.fragment,m),E(HL.$$.fragment,m),E(UL.$$.fragment,m),E(YL.$$.fragment,m),E(m1.$$.fragment,m),E(KL.$$.fragment,m),E(Z1.$$.fragment,m),E(ZL.$$.fragment,m),E(e8.$$.fragment,m),E(r8.$$.fragment,m),E(oT.$$.fragment,m),E(t8.$$.fragment,m),E(aT.$$.fragment,m),E(a8.$$.fragment,m),E(n8.$$.fragment,m),E(l8.$$.fragment,m),E(sT.$$.fragment,m),E(i8.$$.fragment,m),E(FT.$$.fragment,m),E(d8.$$.fragment,m),E(c8.$$.fragment,m),E(f8.$$.fragment,m),E(MT.$$.fragment,m),E(g8.$$.fragment,m),E(wT.$$.fragment,m),E(h8.$$.fragment,m),E(u8.$$.fragment,m),E(_8.$$.fragment,m),E(yT.$$.fragment,m),E(b8.$$.fragment,m),E(qT.$$.fragment,m),E(v8.$$.fragment,m),E(F8.$$.fragment,m),E(M8.$$.fragment,m),E(DT.$$.fragment,m),E(E8.$$.fragment,m),E(QT.$$.fragment,m),E(C8.$$.fragment,m),E(w8.$$.fragment,m),E(y8.$$.fragment,m),E(UT.$$.fragment,m),E(L8.$$.fragment,m),E(sM.$$.fragment,m),E(x8.$$.fragment,m),E($8.$$.fragment,m),E(S8.$$.fragment,m),E(iM.$$.fragment,m),E(R8.$$.fragment,m),E(fM.$$.fragment,m),E(B8.$$.fragment,m),E(I8.$$.fragment,m),E(q8.$$.fragment,m),E(hM.$$.fragment,m),E(j8.$$.fragment,m),E(TM.$$.fragment,m),E(D8.$$.fragment,m),E(G8.$$.fragment,m),E(V8.$$.fragment,m),E(EM.$$.fragment,m),E(X8.$$.fragment,m),E(LM.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E($M.$$.fragment,m),E(U8.$$.fragment,m),E(PM.$$.fragment,m),E(Y8.$$.fragment,m),E(K8.$$.fragment,m),E(e7.$$.fragment,m),E(IM.$$.fragment,m),E(o7.$$.fragment,m),E(jM.$$.fragment,m),E(r7.$$.fragment,m),E(t7.$$.fragment,m),E(n7.$$.fragment,m),E(GM.$$.fragment,m),E(s7.$$.fragment,m),E(QM.$$.fragment,m),E(l7.$$.fragment,m),E(i7.$$.fragment,m),E(c7.$$.fragment,m),E(UM.$$.fragment,m),E(m7.$$.fragment,m),E(KM.$$.fragment,m),E(f7.$$.fragment,m),E(g7.$$.fragment,m),E(u7.$$.fragment,m),E(e4.$$.fragment,m),E(p7.$$.fragment,m),E(Q4.$$.fragment,m),E(_7.$$.fragment,m),E(b7.$$.fragment,m),E(F7.$$.fragment,m),E(U4.$$.fragment,m),E(T7.$$.fragment,m),E(vE.$$.fragment,m),E(M7.$$.fragment,m),E(E7.$$.fragment,m),E(w7.$$.fragment,m),E(TE.$$.fragment,m),E(A7.$$.fragment,m),E(BE.$$.fragment,m),E(y7.$$.fragment,m),E(L7.$$.fragment,m),E($7.$$.fragment,m),E(NE.$$.fragment,m),E(k7.$$.fragment,m),E(OE.$$.fragment,m),E(S7.$$.fragment,m),E(R7.$$.fragment,m),E(B7.$$.fragment,m),E(XE.$$.fragment,m),E(I7.$$.fragment,m),E(mC.$$.fragment,m),E(N7.$$.fragment,m),E(q7.$$.fragment,m),E(D7.$$.fragment,m),E(gC.$$.fragment,m),E(G7.$$.fragment,m),E(CC.$$.fragment,m),E(O7.$$.fragment,m),E(V7.$$.fragment,m),E(z7.$$.fragment,m),E(AC.$$.fragment,m),E(W7.$$.fragment,m),E(ZC.$$.fragment,m),E(Q7.$$.fragment,m),E(H7.$$.fragment,m),E(J7.$$.fragment,m),E(o5.$$.fragment,m),E(Y7.$$.fragment,m),E(v5.$$.fragment,m),E(K7.$$.fragment,m),E(Z7.$$.fragment,m),E(o9.$$.fragment,m),E(T5.$$.fragment,m),E(r9.$$.fragment,m),E(C5.$$.fragment,m),E(a9.$$.fragment,m),E(n9.$$.fragment,m),E(l9.$$.fragment,m),E(A5.$$.fragment,m),E(i9.$$.fragment,m),E(L5.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(f9.$$.fragment,m),E($5.$$.fragment,m),E(g9.$$.fragment,m),E(Y5.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(_9.$$.fragment,m),E(Z5.$$.fragment,m),E(b9.$$.fragment,m),E(F3.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(M3.$$.fragment,m),E(E9.$$.fragment,m),E(C3.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(y9.$$.fragment,m),E(A3.$$.fragment,m),E(L9.$$.fragment,m),E(L3.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E($3.$$.fragment,m),E(R9.$$.fragment,m),E(tw.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(N9.$$.fragment,m),E(nw.$$.fragment,m),E(q9.$$.fragment,m),E(pw.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(O9.$$.fragment,m),E(bw.$$.fragment,m),E(V9.$$.fragment,m),E(kw.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(Q9.$$.fragment,m),E(Rw.$$.fragment,m),E(H9.$$.fragment,m),E(Xw.$$.fragment,m),E(U9.$$.fragment,m),E(J9.$$.fragment,m),E(K9.$$.fragment,m),E(Ww.$$.fragment,m),E(Z9.$$.fragment,m),E(r0.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(a0.$$.fragment,m),E(ax.$$.fragment,m),E(u0.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(_0.$$.fragment,m),E(dx.$$.fragment,m),E(L0.$$.fragment,m),E(cx.$$.fragment,m),E(mx.$$.fragment,m),E(gx.$$.fragment,m),E($0.$$.fragment,m),E(hx.$$.fragment,m),E(j0.$$.fragment,m),E(ux.$$.fragment,m),E(px.$$.fragment,m),E(bx.$$.fragment,m),E(G0.$$.fragment,m),E(vx.$$.fragment,m),E(J0.$$.fragment,m),E(Fx.$$.fragment,m),E(Tx.$$.fragment,m),E(Ex.$$.fragment,m),E(K0.$$.fragment,m),E(Cx.$$.fragment,m),E(e6.$$.fragment,m),E(wx.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(r6.$$.fragment,m),E(xx.$$.fragment,m),E(n6.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Px.$$.fragment,m),E(l6.$$.fragment,m),E(Bx.$$.fragment,m),E(d6.$$.fragment,m),_De=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(ky.$$.fragment,m),C(Sy.$$.fragment,m),C(vm.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(Ny.$$.fragment,m),C(Eg.$$.fragment,m),C(qy.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Vy.$$.fragment,m),C(ah.$$.fragment,m),C(Xy.$$.fragment,m),C(zy.$$.fragment,m),C(Wy.$$.fragment,m),C(Uy.$$.fragment,m),C(Ih.$$.fragment,m),C(Nh.$$.fragment,m),C(Jy.$$.fragment,m),C(Yy.$$.fragment,m),C(Ky.$$.fragment,m),C(oL.$$.fragment,m),C(tu.$$.fragment,m),C(au.$$.fragment,m),C(rL.$$.fragment,m),C(tL.$$.fragment,m),C(aL.$$.fragment,m),C(sL.$$.fragment,m),C(lu.$$.fragment,m),C(lL.$$.fragment,m),C(r_.$$.fragment,m),C(iL.$$.fragment,m),C(dL.$$.fragment,m),C(mL.$$.fragment,m),C(a_.$$.fragment,m),C(fL.$$.fragment,m),C(H_.$$.fragment,m),C(gL.$$.fragment,m),C(hL.$$.fragment,m),C(pL.$$.fragment,m),C(J_.$$.fragment,m),C(_L.$$.fragment,m),C(Bb.$$.fragment,m),C(bL.$$.fragment,m),C(vL.$$.fragment,m),C(TL.$$.fragment,m),C(Nb.$$.fragment,m),C(ML.$$.fragment,m),C(F2.$$.fragment,m),C(EL.$$.fragment,m),C(CL.$$.fragment,m),C(AL.$$.fragment,m),C(M2.$$.fragment,m),C(yL.$$.fragment,m),C(D2.$$.fragment,m),C(LL.$$.fragment,m),C(xL.$$.fragment,m),C(kL.$$.fragment,m),C(O2.$$.fragment,m),C(SL.$$.fragment,m),C(Nv.$$.fragment,m),C(RL.$$.fragment,m),C(PL.$$.fragment,m),C(IL.$$.fragment,m),C(jv.$$.fragment,m),C(NL.$$.fragment,m),C(pF.$$.fragment,m),C(qL.$$.fragment,m),C(jL.$$.fragment,m),C(GL.$$.fragment,m),C(bF.$$.fragment,m),C(OL.$$.fragment,m),C(wF.$$.fragment,m),C(VL.$$.fragment,m),C(XL.$$.fragment,m),C(WL.$$.fragment,m),C(yF.$$.fragment,m),C(QL.$$.fragment,m),C(d1.$$.fragment,m),C(HL.$$.fragment,m),C(UL.$$.fragment,m),C(YL.$$.fragment,m),C(m1.$$.fragment,m),C(KL.$$.fragment,m),C(Z1.$$.fragment,m),C(ZL.$$.fragment,m),C(e8.$$.fragment,m),C(r8.$$.fragment,m),C(oT.$$.fragment,m),C(t8.$$.fragment,m),C(aT.$$.fragment,m),C(a8.$$.fragment,m),C(n8.$$.fragment,m),C(l8.$$.fragment,m),C(sT.$$.fragment,m),C(i8.$$.fragment,m),C(FT.$$.fragment,m),C(d8.$$.fragment,m),C(c8.$$.fragment,m),C(f8.$$.fragment,m),C(MT.$$.fragment,m),C(g8.$$.fragment,m),C(wT.$$.fragment,m),C(h8.$$.fragment,m),C(u8.$$.fragment,m),C(_8.$$.fragment,m),C(yT.$$.fragment,m),C(b8.$$.fragment,m),C(qT.$$.fragment,m),C(v8.$$.fragment,m),C(F8.$$.fragment,m),C(M8.$$.fragment,m),C(DT.$$.fragment,m),C(E8.$$.fragment,m),C(QT.$$.fragment,m),C(C8.$$.fragment,m),C(w8.$$.fragment,m),C(y8.$$.fragment,m),C(UT.$$.fragment,m),C(L8.$$.fragment,m),C(sM.$$.fragment,m),C(x8.$$.fragment,m),C($8.$$.fragment,m),C(S8.$$.fragment,m),C(iM.$$.fragment,m),C(R8.$$.fragment,m),C(fM.$$.fragment,m),C(B8.$$.fragment,m),C(I8.$$.fragment,m),C(q8.$$.fragment,m),C(hM.$$.fragment,m),C(j8.$$.fragment,m),C(TM.$$.fragment,m),C(D8.$$.fragment,m),C(G8.$$.fragment,m),C(V8.$$.fragment,m),C(EM.$$.fragment,m),C(X8.$$.fragment,m),C(LM.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C($M.$$.fragment,m),C(U8.$$.fragment,m),C(PM.$$.fragment,m),C(Y8.$$.fragment,m),C(K8.$$.fragment,m),C(e7.$$.fragment,m),C(IM.$$.fragment,m),C(o7.$$.fragment,m),C(jM.$$.fragment,m),C(r7.$$.fragment,m),C(t7.$$.fragment,m),C(n7.$$.fragment,m),C(GM.$$.fragment,m),C(s7.$$.fragment,m),C(QM.$$.fragment,m),C(l7.$$.fragment,m),C(i7.$$.fragment,m),C(c7.$$.fragment,m),C(UM.$$.fragment,m),C(m7.$$.fragment,m),C(KM.$$.fragment,m),C(f7.$$.fragment,m),C(g7.$$.fragment,m),C(u7.$$.fragment,m),C(e4.$$.fragment,m),C(p7.$$.fragment,m),C(Q4.$$.fragment,m),C(_7.$$.fragment,m),C(b7.$$.fragment,m),C(F7.$$.fragment,m),C(U4.$$.fragment,m),C(T7.$$.fragment,m),C(vE.$$.fragment,m),C(M7.$$.fragment,m),C(E7.$$.fragment,m),C(w7.$$.fragment,m),C(TE.$$.fragment,m),C(A7.$$.fragment,m),C(BE.$$.fragment,m),C(y7.$$.fragment,m),C(L7.$$.fragment,m),C($7.$$.fragment,m),C(NE.$$.fragment,m),C(k7.$$.fragment,m),C(OE.$$.fragment,m),C(S7.$$.fragment,m),C(R7.$$.fragment,m),C(B7.$$.fragment,m),C(XE.$$.fragment,m),C(I7.$$.fragment,m),C(mC.$$.fragment,m),C(N7.$$.fragment,m),C(q7.$$.fragment,m),C(D7.$$.fragment,m),C(gC.$$.fragment,m),C(G7.$$.fragment,m),C(CC.$$.fragment,m),C(O7.$$.fragment,m),C(V7.$$.fragment,m),C(z7.$$.fragment,m),C(AC.$$.fragment,m),C(W7.$$.fragment,m),C(ZC.$$.fragment,m),C(Q7.$$.fragment,m),C(H7.$$.fragment,m),C(J7.$$.fragment,m),C(o5.$$.fragment,m),C(Y7.$$.fragment,m),C(v5.$$.fragment,m),C(K7.$$.fragment,m),C(Z7.$$.fragment,m),C(o9.$$.fragment,m),C(T5.$$.fragment,m),C(r9.$$.fragment,m),C(C5.$$.fragment,m),C(a9.$$.fragment,m),C(n9.$$.fragment,m),C(l9.$$.fragment,m),C(A5.$$.fragment,m),C(i9.$$.fragment,m),C(L5.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(f9.$$.fragment,m),C($5.$$.fragment,m),C(g9.$$.fragment,m),C(Y5.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(_9.$$.fragment,m),C(Z5.$$.fragment,m),C(b9.$$.fragment,m),C(F3.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(M3.$$.fragment,m),C(E9.$$.fragment,m),C(C3.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(y9.$$.fragment,m),C(A3.$$.fragment,m),C(L9.$$.fragment,m),C(L3.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C($3.$$.fragment,m),C(R9.$$.fragment,m),C(tw.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(N9.$$.fragment,m),C(nw.$$.fragment,m),C(q9.$$.fragment,m),C(pw.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(O9.$$.fragment,m),C(bw.$$.fragment,m),C(V9.$$.fragment,m),C(kw.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(Q9.$$.fragment,m),C(Rw.$$.fragment,m),C(H9.$$.fragment,m),C(Xw.$$.fragment,m),C(U9.$$.fragment,m),C(J9.$$.fragment,m),C(K9.$$.fragment,m),C(Ww.$$.fragment,m),C(Z9.$$.fragment,m),C(r0.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(a0.$$.fragment,m),C(ax.$$.fragment,m),C(u0.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(_0.$$.fragment,m),C(dx.$$.fragment,m),C(L0.$$.fragment,m),C(cx.$$.fragment,m),C(mx.$$.fragment,m),C(gx.$$.fragment,m),C($0.$$.fragment,m),C(hx.$$.fragment,m),C(j0.$$.fragment,m),C(ux.$$.fragment,m),C(px.$$.fragment,m),C(bx.$$.fragment,m),C(G0.$$.fragment,m),C(vx.$$.fragment,m),C(J0.$$.fragment,m),C(Fx.$$.fragment,m),C(Tx.$$.fragment,m),C(Ex.$$.fragment,m),C(K0.$$.fragment,m),C(Cx.$$.fragment,m),C(e6.$$.fragment,m),C(wx.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(r6.$$.fragment,m),C(xx.$$.fragment,m),C(n6.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Px.$$.fragment,m),C(l6.$$.fragment,m),C(Bx.$$.fragment,m),C(d6.$$.fragment,m),_De=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(hm),m&&t(rt),m&&t(De),m&&t(We),m&&t(pm),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(hqe),m&&t(bi),w(ky),m&&t(uqe),m&&t(kn),m&&t(pqe),w(Sy,m),m&&t(_qe),m&&t(ek),m&&t(bqe),w(vm,m),m&&t(vqe),m&&t(vi),w(Ry),m&&t(Fqe),m&&t(Co),w(Py),w(Ny),w(Eg),w(qy),m&&t(Tqe),m&&t(Ti),w(jy),m&&t(Mqe),m&&t(wo),w(Dy),w(Vy),w(ah),w(Xy),m&&t(Eqe),m&&t(Mi),w(zy),m&&t(Cqe),m&&t(Ao),w(Wy),w(Uy),w(Ih),w(Nh),w(Jy),m&&t(wqe),m&&t(Ei),w(Yy),m&&t(Aqe),m&&t(yo),w(Ky),w(oL),w(tu),w(au),w(rL),m&&t(yqe),m&&t(wi),w(tL),m&&t(Lqe),m&&t(Lo),w(aL),w(sL),w(lu),w(lL),w(r_),m&&t(xqe),m&&t(Li),w(iL),m&&t($qe),m&&t(xo),w(dL),w(mL),w(a_),w(fL),w(H_),m&&t(kqe),m&&t(ki),w(gL),m&&t(Sqe),m&&t($o),w(hL),w(pL),w(J_),w(_L),w(Bb),m&&t(Rqe),m&&t(Pi),w(bL),m&&t(Pqe),m&&t(ko),w(vL),w(TL),w(Nb),w(ML),w(F2),m&&t(Bqe),m&&t(Ni),w(EL),m&&t(Iqe),m&&t(So),w(CL),w(AL),w(M2),w(yL),w(D2),m&&t(Nqe),m&&t(Di),w(LL),m&&t(qqe),m&&t(Ro),w(xL),w(kL),w(O2),w(SL),w(Nv),m&&t(jqe),m&&t(Vi),w(RL),m&&t(Dqe),m&&t(Po),w(PL),w(IL),w(jv),w(NL),w(pF),m&&t(Gqe),m&&t(Wi),w(qL),m&&t(Oqe),m&&t(Bo),w(jL),w(GL),w(bF),w(OL),w(wF),m&&t(Vqe),m&&t(Ui),w(VL),m&&t(Xqe),m&&t(Io),w(XL),w(WL),w(yF),w(QL),w(d1),m&&t(zqe),m&&t(Ki),w(HL),m&&t(Wqe),m&&t(No),w(UL),w(YL),w(m1),w(KL),w(Z1),m&&t(Qqe),m&&t(od),w(ZL),m&&t(Hqe),m&&t(qo),w(e8),w(r8),w(oT),w(t8),w(aT),m&&t(Uqe),m&&t(ad),w(a8),m&&t(Jqe),m&&t(jo),w(n8),w(l8),w(sT),w(i8),w(FT),m&&t(Yqe),m&&t(ld),w(d8),m&&t(Kqe),m&&t(Do),w(c8),w(f8),w(MT),w(g8),w(wT),m&&t(Zqe),m&&t(cd),w(h8),m&&t(eje),m&&t(Go),w(u8),w(_8),w(yT),w(b8),w(qT),m&&t(oje),m&&t(gd),w(v8),m&&t(rje),m&&t(Oo),w(F8),w(M8),w(DT),w(E8),w(QT),m&&t(tje),m&&t(pd),w(C8),m&&t(aje),m&&t(Vo),w(w8),w(y8),w(UT),w(L8),w(sM),m&&t(nje),m&&t(vd),w(x8),m&&t(sje),m&&t(Xo),w($8),w(S8),w(iM),w(R8),w(fM),m&&t(lje),m&&t(Md),w(B8),m&&t(ije),m&&t(zo),w(I8),w(q8),w(hM),w(j8),w(TM),m&&t(dje),m&&t(wd),w(D8),m&&t(cje),m&&t(Wo),w(G8),w(V8),w(EM),w(X8),w(LM),m&&t(mje),m&&t(xd),w(z8),m&&t(fje),m&&t(Qo),w(W8),w(H8),w($M),w(U8),w(PM),m&&t(gje),m&&t(Sd),w(Y8),m&&t(hje),m&&t(Ho),w(K8),w(e7),w(IM),w(o7),w(jM),m&&t(uje),m&&t(Bd),w(r7),m&&t(pje),m&&t(Uo),w(t7),w(n7),w(GM),w(s7),w(QM),m&&t(_je),m&&t(qd),w(l7),m&&t(bje),m&&t(Jo),w(i7),w(c7),w(UM),w(m7),w(KM),m&&t(vje),m&&t(Gd),w(f7),m&&t(Fje),m&&t(Yo),w(g7),w(u7),w(e4),w(p7),w(Q4),m&&t(Tje),m&&t(Xd),w(_7),m&&t(Mje),m&&t(Ko),w(b7),w(F7),w(U4),w(T7),w(vE),m&&t(Eje),m&&t(Qd),w(M7),m&&t(Cje),m&&t(Zo),w(E7),w(w7),w(TE),w(A7),w(BE),m&&t(wje),m&&t(Jd),w(y7),m&&t(Aje),m&&t(er),w(L7),w($7),w(NE),w(k7),w(OE),m&&t(yje),m&&t(Zd),w(S7),m&&t(Lje),m&&t(or),w(R7),w(B7),w(XE),w(I7),w(mC),m&&t(xje),m&&t(rc),w(N7),m&&t($je),m&&t(rr),w(q7),w(D7),w(gC),w(G7),w(CC),m&&t(kje),m&&t(nc),w(O7),m&&t(Sje),m&&t(tr),w(V7),w(z7),w(AC),w(W7),w(ZC),m&&t(Rje),m&&t(ic),w(Q7),m&&t(Pje),m&&t(ar),w(H7),w(J7),w(o5),w(Y7),w(v5),m&&t(Bje),m&&t(mc),w(K7),m&&t(Ije),m&&t(nr),w(Z7),w(o9),w(T5),w(r9),w(C5),m&&t(Nje),m&&t(hc),w(a9),m&&t(qje),m&&t(sr),w(n9),w(l9),w(A5),w(i9),w(L5),m&&t(jje),m&&t(_c),w(d9),m&&t(Dje),m&&t(lr),w(c9),w(f9),w($5),w(g9),w(Y5),m&&t(Gje),m&&t(Fc),w(h9),m&&t(Oje),m&&t(ir),w(u9),w(_9),w(Z5),w(b9),w(F3),m&&t(Vje),m&&t(Ec),w(v9),m&&t(Xje),m&&t(dr),w(F9),w(M9),w(M3),w(E9),w(C3),m&&t(zje),m&&t(Ac),w(C9),m&&t(Wje),m&&t(cr),w(w9),w(y9),w(A3),w(L9),w(L3),m&&t(Qje),m&&t(xc),w(x9),m&&t(Hje),m&&t(mr),w($9),w(S9),w($3),w(R9),w(tw),m&&t(Uje),m&&t(Sc),w(P9),m&&t(Jje),m&&t(fr),w(B9),w(N9),w(nw),w(q9),w(pw),m&&t(Yje),m&&t(Bc),w(j9),m&&t(Kje),m&&t(gr),w(D9),w(O9),w(bw),w(V9),w(kw),m&&t(Zje),m&&t(qc),w(X9),m&&t(eDe),m&&t(hr),w(z9),w(Q9),w(Rw),w(H9),w(Xw),m&&t(oDe),m&&t(Gc),w(U9),m&&t(rDe),m&&t(ur),w(J9),w(K9),w(Ww),w(Z9),w(r0),m&&t(tDe),m&&t(Xc),w(ex),m&&t(aDe),m&&t(pr),w(ox),w(tx),w(a0),w(ax),w(u0),m&&t(nDe),m&&t(Qc),w(nx),m&&t(sDe),m&&t(_r),w(sx),w(ix),w(_0),w(dx),w(L0),m&&t(lDe),m&&t(Jc),w(cx),m&&t(iDe),m&&t(br),w(mx),w(gx),w($0),w(hx),w(j0),m&&t(dDe),m&&t(Zc),w(ux),m&&t(cDe),m&&t(vr),w(px),w(bx),w(G0),w(vx),w(J0),m&&t(mDe),m&&t(rm),w(Fx),m&&t(fDe),m&&t(Fr),w(Tx),w(Ex),w(K0),w(Cx),w(e6),m&&t(gDe),m&&t(nm),w(wx),m&&t(hDe),m&&t(Tr),w(Ax),w(Lx),w(r6),w(xx),w(n6),m&&t(uDe),m&&t(im),w(kx),m&&t(pDe),m&&t(Mr),w(Sx),w(Px),w(l6),w(Bx),w(d6)}}}const ZSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eRt(L){return ekt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lRt extends J$t{constructor(g){super();Y$t(this,g,eRt,KSt,K$t,{})}}export{lRt as default,ZSt as metadata};
